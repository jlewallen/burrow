<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1126" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1109.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1109.00"> </text><svg id="frames" x="10" width="1180" total_samples="1245"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0803%" y="645" width="0.0803%" height="15" fill="rgb(243,88,5)" fg:x="1" fg:w="1"/><text x="0.3303%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.0803%" y="709" width="0.1606%" height="15" fill="rgb(216,199,8)" fg:x="1" fg:w="2"/><text x="0.3303%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0803%" y="693" width="0.1606%" height="15" fill="rgb(241,22,4)" fg:x="1" fg:w="2"/><text x="0.3303%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.0803%" y="677" width="0.1606%" height="15" fill="rgb(209,190,22)" fg:x="1" fg:w="2"/><text x="0.3303%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="0.0803%" y="661" width="0.1606%" height="15" fill="rgb(251,138,45)" fg:x="1" fg:w="2"/><text x="0.3303%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;rune::runtime::unit::Unit&gt;&gt; (1 samples, 0.08%)</title><rect x="0.1606%" y="645" width="0.0803%" height="15" fill="rgb(219,111,22)" fg:x="2" fg:w="1"/><text x="0.4106%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2410%" y="629" width="0.0803%" height="15" fill="rgb(253,29,49)" fg:x="3" fg:w="1"/><text x="0.4910%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.2410%" y="645" width="0.2410%" height="15" fill="rgb(238,129,49)" fg:x="3" fg:w="3"/><text x="0.4910%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (2 samples, 0.16%)</title><rect x="0.3213%" y="629" width="0.1606%" height="15" fill="rgb(240,26,41)" fg:x="4" fg:w="2"/><text x="0.5713%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="0.3213%" y="613" width="0.1606%" height="15" fill="rgb(221,47,33)" fg:x="4" fg:w="2"/><text x="0.5713%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.3213%" y="597" width="0.1606%" height="15" fill="rgb(216,200,17)" fg:x="4" fg:w="2"/><text x="0.5713%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4016%" y="581" width="0.0803%" height="15" fill="rgb(230,151,26)" fg:x="5" fg:w="1"/><text x="0.6516%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4819%" y="629" width="0.1606%" height="15" fill="rgb(242,182,16)" fg:x="6" fg:w="2"/><text x="0.7319%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.2410%" y="693" width="0.4819%" height="15" fill="rgb(236,35,53)" fg:x="3" fg:w="6"/><text x="0.4910%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (6 samples, 0.48%)</title><rect x="0.2410%" y="677" width="0.4819%" height="15" fill="rgb(214,180,28)" fg:x="3" fg:w="6"/><text x="0.4910%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.2410%" y="661" width="0.4819%" height="15" fill="rgb(208,173,36)" fg:x="3" fg:w="6"/><text x="0.4910%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="0.4819%" y="645" width="0.2410%" height="15" fill="rgb(218,39,15)" fg:x="6" fg:w="3"/><text x="0.7319%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.6426%" y="629" width="0.0803%" height="15" fill="rgb(213,145,15)" fg:x="8" fg:w="1"/><text x="0.8926%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.6426%" y="613" width="0.0803%" height="15" fill="rgb(242,110,37)" fg:x="8" fg:w="1"/><text x="0.8926%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.6426%" y="597" width="0.0803%" height="15" fill="rgb(247,146,22)" fg:x="8" fg:w="1"/><text x="0.8926%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="0.6426%" y="581" width="0.0803%" height="15" fill="rgb(215,191,7)" fg:x="8" fg:w="1"/><text x="0.8926%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="0.6426%" y="565" width="0.0803%" height="15" fill="rgb(240,158,1)" fg:x="8" fg:w="1"/><text x="0.8926%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.6426%" y="549" width="0.0803%" height="15" fill="rgb(241,78,32)" fg:x="8" fg:w="1"/><text x="0.8926%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="0.0000%" y="725" width="0.8032%" height="15" fill="rgb(248,83,10)" fg:x="0" fg:w="10"/><text x="0.2500%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (7 samples, 0.56%)</title><rect x="0.2410%" y="709" width="0.5622%" height="15" fill="rgb(241,52,0)" fg:x="3" fg:w="7"/><text x="0.4910%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7229%" y="693" width="0.0803%" height="15" fill="rgb(238,37,13)" fg:x="9" fg:w="1"/><text x="0.9729%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="0.8032%" y="677" width="0.0803%" height="15" fill="rgb(242,194,17)" fg:x="10" fg:w="1"/><text x="1.0532%" y="687.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="1.1245%" y="597" width="0.0803%" height="15" fill="rgb(236,96,3)" fg:x="14" fg:w="1"/><text x="1.3745%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="1.1245%" y="581" width="0.0803%" height="15" fill="rgb(235,148,34)" fg:x="14" fg:w="1"/><text x="1.3745%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.1245%" y="565" width="0.0803%" height="15" fill="rgb(254,12,11)" fg:x="14" fg:w="1"/><text x="1.3745%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.1245%" y="549" width="0.0803%" height="15" fill="rgb(207,31,54)" fg:x="14" fg:w="1"/><text x="1.3745%" y="559.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="1.1245%" y="629" width="0.2410%" height="15" fill="rgb(252,14,28)" fg:x="14" fg:w="3"/><text x="1.3745%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="1.1245%" y="613" width="0.2410%" height="15" fill="rgb(252,108,36)" fg:x="14" fg:w="3"/><text x="1.3745%" y="623.50"></text></g><g><title>replies::identifier_to_key (2 samples, 0.16%)</title><rect x="1.2048%" y="597" width="0.1606%" height="15" fill="rgb(214,149,7)" fg:x="15" fg:w="2"/><text x="1.4548%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.2851%" y="581" width="0.0803%" height="15" fill="rgb(243,94,12)" fg:x="16" fg:w="1"/><text x="1.5351%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.2851%" y="565" width="0.0803%" height="15" fill="rgb(208,36,10)" fg:x="16" fg:w="1"/><text x="1.5351%" y="575.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="1.2851%" y="549" width="0.0803%" height="15" fill="rgb(233,185,52)" fg:x="16" fg:w="1"/><text x="1.5351%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="1.2851%" y="533" width="0.0803%" height="15" fill="rgb(234,50,45)" fg:x="16" fg:w="1"/><text x="1.5351%" y="543.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="1.3655%" y="629" width="0.0803%" height="15" fill="rgb(228,92,54)" fg:x="17" fg:w="1"/><text x="1.6155%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="1.3655%" y="613" width="0.0803%" height="15" fill="rgb(224,85,25)" fg:x="17" fg:w="1"/><text x="1.6155%" y="623.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="1.3655%" y="597" width="0.0803%" height="15" fill="rgb(246,1,45)" fg:x="17" fg:w="1"/><text x="1.6155%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="1.3655%" y="581" width="0.0803%" height="15" fill="rgb(240,66,23)" fg:x="17" fg:w="1"/><text x="1.6155%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (8 samples, 0.64%)</title><rect x="0.8835%" y="645" width="0.6426%" height="15" fill="rgb(222,96,27)" fg:x="11" fg:w="8"/><text x="1.1335%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="1.4458%" y="629" width="0.0803%" height="15" fill="rgb(212,136,10)" fg:x="18" fg:w="1"/><text x="1.6958%" y="639.50"></text></g><g><title>anyhow::error::object_drop (1 samples, 0.08%)</title><rect x="1.5261%" y="629" width="0.0803%" height="15" fill="rgb(226,192,50)" fg:x="19" fg:w="1"/><text x="1.7761%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="1.5261%" y="645" width="0.2410%" height="15" fill="rgb(241,182,31)" fg:x="19" fg:w="3"/><text x="1.7761%" y="655.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="1.6064%" y="629" width="0.1606%" height="15" fill="rgb(219,205,47)" fg:x="20" fg:w="2"/><text x="1.8564%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="1.6064%" y="613" width="0.1606%" height="15" fill="rgb(207,96,14)" fg:x="20" fg:w="2"/><text x="1.8564%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="1.6064%" y="597" width="0.1606%" height="15" fill="rgb(216,119,9)" fg:x="20" fg:w="2"/><text x="1.8564%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="1.6064%" y="581" width="0.1606%" height="15" fill="rgb(235,62,36)" fg:x="20" fg:w="2"/><text x="1.8564%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="1.6064%" y="565" width="0.1606%" height="15" fill="rgb(214,41,27)" fg:x="20" fg:w="2"/><text x="1.8564%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="1.6064%" y="549" width="0.1606%" height="15" fill="rgb(214,174,37)" fg:x="20" fg:w="2"/><text x="1.8564%" y="559.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="1.6064%" y="533" width="0.1606%" height="15" fill="rgb(212,11,25)" fg:x="20" fg:w="2"/><text x="1.8564%" y="543.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (1 samples, 0.08%)</title><rect x="1.7671%" y="629" width="0.0803%" height="15" fill="rgb(217,71,35)" fg:x="22" fg:w="1"/><text x="2.0171%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.7671%" y="613" width="0.0803%" height="15" fill="rgb(234,152,9)" fg:x="22" fg:w="1"/><text x="2.0171%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.7671%" y="597" width="0.0803%" height="15" fill="rgb(228,32,51)" fg:x="22" fg:w="1"/><text x="2.0171%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.7671%" y="581" width="0.0803%" height="15" fill="rgb(209,14,47)" fg:x="22" fg:w="1"/><text x="2.0171%" y="591.50"></text></g><g><title>glob::is_dir (5 samples, 0.40%)</title><rect x="1.8474%" y="581" width="0.4016%" height="15" fill="rgb(218,201,17)" fg:x="23" fg:w="5"/><text x="2.0974%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (5 samples, 0.40%)</title><rect x="1.8474%" y="565" width="0.4016%" height="15" fill="rgb(218,98,15)" fg:x="23" fg:w="5"/><text x="2.0974%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="1.9277%" y="549" width="0.3213%" height="15" fill="rgb(233,202,29)" fg:x="24" fg:w="4"/><text x="2.1777%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="1.9277%" y="533" width="0.3213%" height="15" fill="rgb(207,196,44)" fg:x="24" fg:w="4"/><text x="2.1777%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="1.9277%" y="517" width="0.3213%" height="15" fill="rgb(218,63,34)" fg:x="24" fg:w="4"/><text x="2.1777%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="1.9277%" y="501" width="0.3213%" height="15" fill="rgb(209,10,5)" fg:x="24" fg:w="4"/><text x="2.1777%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="1.9277%" y="485" width="0.3213%" height="15" fill="rgb(224,36,28)" fg:x="24" fg:w="4"/><text x="2.1777%" y="495.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="1.9277%" y="469" width="0.3213%" height="15" fill="rgb(249,178,7)" fg:x="24" fg:w="4"/><text x="2.1777%" y="479.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="1.8474%" y="613" width="0.5622%" height="15" fill="rgb(253,163,10)" fg:x="23" fg:w="7"/><text x="2.0974%" y="623.50"></text></g><g><title>glob::fill_todo (7 samples, 0.56%)</title><rect x="1.8474%" y="597" width="0.5622%" height="15" fill="rgb(245,67,46)" fg:x="23" fg:w="7"/><text x="2.0974%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="2.2490%" y="581" width="0.1606%" height="15" fill="rgb(225,14,18)" fg:x="28" fg:w="2"/><text x="2.4990%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="2.2490%" y="565" width="0.1606%" height="15" fill="rgb(217,41,54)" fg:x="28" fg:w="2"/><text x="2.4990%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="2.2490%" y="549" width="0.1606%" height="15" fill="rgb(222,111,11)" fg:x="28" fg:w="2"/><text x="2.4990%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="2.2490%" y="533" width="0.1606%" height="15" fill="rgb(211,85,31)" fg:x="28" fg:w="2"/><text x="2.4990%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="2.2490%" y="517" width="0.1606%" height="15" fill="rgb(223,29,26)" fg:x="28" fg:w="2"/><text x="2.4990%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="2.2490%" y="501" width="0.1606%" height="15" fill="rgb(236,124,50)" fg:x="28" fg:w="2"/><text x="2.4990%" y="511.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="2.2490%" y="485" width="0.1606%" height="15" fill="rgb(219,148,15)" fg:x="28" fg:w="2"/><text x="2.4990%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;glob::Paths&gt; (1 samples, 0.08%)</title><rect x="2.4096%" y="613" width="0.0803%" height="15" fill="rgb(248,159,33)" fg:x="30" fg:w="1"/><text x="2.6596%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="2.4096%" y="597" width="0.0803%" height="15" fill="rgb(252,65,8)" fg:x="30" fg:w="1"/><text x="2.6596%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4096%" y="581" width="0.0803%" height="15" fill="rgb(236,45,7)" fg:x="30" fg:w="1"/><text x="2.6596%" y="591.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.4900%" y="581" width="0.0803%" height="15" fill="rgb(244,3,48)" fg:x="31" fg:w="1"/><text x="2.7400%" y="591.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.5703%" y="581" width="0.0803%" height="15" fill="rgb(224,123,53)" fg:x="32" fg:w="1"/><text x="2.8203%" y="591.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.08%)</title><rect x="2.5703%" y="565" width="0.0803%" height="15" fill="rgb(223,173,15)" fg:x="32" fg:w="1"/><text x="2.8203%" y="575.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="2.6506%" y="581" width="0.0803%" height="15" fill="rgb(254,181,5)" fg:x="33" fg:w="1"/><text x="2.9006%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.6506%" y="565" width="0.0803%" height="15" fill="rgb(243,124,33)" fg:x="33" fg:w="1"/><text x="2.9006%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.6506%" y="549" width="0.0803%" height="15" fill="rgb(253,220,11)" fg:x="33" fg:w="1"/><text x="2.9006%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.6506%" y="533" width="0.0803%" height="15" fill="rgb(217,14,4)" fg:x="33" fg:w="1"/><text x="2.9006%" y="543.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (13 samples, 1.04%)</title><rect x="1.7671%" y="645" width="1.0442%" height="15" fill="rgb(209,196,12)" fg:x="22" fg:w="13"/><text x="2.0171%" y="655.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (12 samples, 0.96%)</title><rect x="1.8474%" y="629" width="0.9639%" height="15" fill="rgb(237,108,29)" fg:x="23" fg:w="12"/><text x="2.0974%" y="639.50"></text></g><g><title>glob::glob (4 samples, 0.32%)</title><rect x="2.4900%" y="613" width="0.3213%" height="15" fill="rgb(216,173,20)" fg:x="31" fg:w="4"/><text x="2.7400%" y="623.50"></text></g><g><title>glob::glob_with (4 samples, 0.32%)</title><rect x="2.4900%" y="597" width="0.3213%" height="15" fill="rgb(245,27,6)" fg:x="31" fg:w="4"/><text x="2.7400%" y="607.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.08%)</title><rect x="2.7309%" y="581" width="0.0803%" height="15" fill="rgb(210,181,20)" fg:x="34" fg:w="1"/><text x="2.9809%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.8112%" y="629" width="0.0803%" height="15" fill="rgb(235,213,1)" fg:x="35" fg:w="1"/><text x="3.0612%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (2 samples, 0.16%)</title><rect x="2.8112%" y="645" width="0.1606%" height="15" fill="rgb(239,68,43)" fg:x="35" fg:w="2"/><text x="3.0612%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="2.8916%" y="629" width="0.0803%" height="15" fill="rgb(254,137,43)" fg:x="36" fg:w="1"/><text x="3.1416%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (28 samples, 2.25%)</title><rect x="0.8835%" y="661" width="2.2490%" height="15" fill="rgb(252,170,38)" fg:x="11" fg:w="28"/><text x="1.1335%" y="671.50">k..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="2.9719%" y="645" width="0.1606%" height="15" fill="rgb(234,21,42)" fg:x="37" fg:w="2"/><text x="3.2219%" y="655.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="2.9719%" y="629" width="0.1606%" height="15" fill="rgb(216,145,40)" fg:x="37" fg:w="2"/><text x="3.2219%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (30 samples, 2.41%)</title><rect x="0.8032%" y="725" width="2.4096%" height="15" fill="rgb(251,73,9)" fg:x="10" fg:w="30"/><text x="1.0532%" y="735.50">&lt;e..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (30 samples, 2.41%)</title><rect x="0.8032%" y="709" width="2.4096%" height="15" fill="rgb(242,54,6)" fg:x="10" fg:w="30"/><text x="1.0532%" y="719.50">en..</text></g><g><title>engine::session::Session::new (30 samples, 2.41%)</title><rect x="0.8032%" y="693" width="2.4096%" height="15" fill="rgb(239,70,7)" fg:x="10" fg:w="30"/><text x="1.0532%" y="703.50">en..</text></g><g><title>engine::session::Session::initialize (29 samples, 2.33%)</title><rect x="0.8835%" y="677" width="2.3293%" height="15" fill="rgb(216,159,35)" fg:x="11" fg:w="29"/><text x="1.1335%" y="687.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="3.1325%" y="661" width="0.0803%" height="15" fill="rgb(224,50,39)" fg:x="39" fg:w="1"/><text x="3.3825%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.1325%" y="645" width="0.0803%" height="15" fill="rgb(235,9,35)" fg:x="39" fg:w="1"/><text x="3.3825%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.1325%" y="629" width="0.0803%" height="15" fill="rgb(239,34,21)" fg:x="39" fg:w="1"/><text x="3.3825%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="3.2129%" y="693" width="0.0803%" height="15" fill="rgb(218,162,43)" fg:x="40" fg:w="1"/><text x="3.4629%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.2129%" y="677" width="0.0803%" height="15" fill="rgb(219,89,33)" fg:x="40" fg:w="1"/><text x="3.4629%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.2932%" y="661" width="0.0803%" height="15" fill="rgb(226,125,37)" fg:x="41" fg:w="1"/><text x="3.5432%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.3735%" y="661" width="0.1606%" height="15" fill="rgb(233,149,30)" fg:x="42" fg:w="2"/><text x="3.6235%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="3.3735%" y="645" width="0.1606%" height="15" fill="rgb(236,8,18)" fg:x="42" fg:w="2"/><text x="3.6235%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="3.3735%" y="629" width="0.1606%" height="15" fill="rgb(205,176,9)" fg:x="42" fg:w="2"/><text x="3.6235%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.3735%" y="613" width="0.1606%" height="15" fill="rgb(252,103,44)" fg:x="42" fg:w="2"/><text x="3.6235%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4538%" y="597" width="0.0803%" height="15" fill="rgb(207,68,53)" fg:x="43" fg:w="1"/><text x="3.7038%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.4538%" y="581" width="0.0803%" height="15" fill="rgb(218,193,48)" fg:x="43" fg:w="1"/><text x="3.7038%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.4538%" y="565" width="0.0803%" height="15" fill="rgb(234,121,52)" fg:x="43" fg:w="1"/><text x="3.7038%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.4538%" y="549" width="0.0803%" height="15" fill="rgb(227,218,49)" fg:x="43" fg:w="1"/><text x="3.7038%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.4538%" y="533" width="0.0803%" height="15" fill="rgb(221,8,7)" fg:x="43" fg:w="1"/><text x="3.7038%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.4538%" y="517" width="0.0803%" height="15" fill="rgb(217,151,36)" fg:x="43" fg:w="1"/><text x="3.7038%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.4538%" y="501" width="0.0803%" height="15" fill="rgb(213,71,5)" fg:x="43" fg:w="1"/><text x="3.7038%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.4538%" y="485" width="0.0803%" height="15" fill="rgb(225,145,43)" fg:x="43" fg:w="1"/><text x="3.7038%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.4538%" y="469" width="0.0803%" height="15" fill="rgb(235,118,19)" fg:x="43" fg:w="1"/><text x="3.7038%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.4538%" y="453" width="0.0803%" height="15" fill="rgb(214,102,36)" fg:x="43" fg:w="1"/><text x="3.7038%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.4538%" y="437" width="0.0803%" height="15" fill="rgb(220,56,43)" fg:x="43" fg:w="1"/><text x="3.7038%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.5341%" y="629" width="0.0803%" height="15" fill="rgb(246,136,46)" fg:x="44" fg:w="1"/><text x="3.7841%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.5341%" y="613" width="0.0803%" height="15" fill="rgb(249,99,12)" fg:x="44" fg:w="1"/><text x="3.7841%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.5341%" y="597" width="0.0803%" height="15" fill="rgb(224,31,42)" fg:x="44" fg:w="1"/><text x="3.7841%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="3.6145%" y="613" width="0.0803%" height="15" fill="rgb(208,96,21)" fg:x="45" fg:w="1"/><text x="3.8645%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="3.6145%" y="597" width="0.0803%" height="15" fill="rgb(237,229,7)" fg:x="45" fg:w="1"/><text x="3.8645%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.6145%" y="581" width="0.0803%" height="15" fill="rgb(210,12,6)" fg:x="45" fg:w="1"/><text x="3.8645%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.6145%" y="565" width="0.0803%" height="15" fill="rgb(240,9,34)" fg:x="45" fg:w="1"/><text x="3.8645%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.6145%" y="549" width="0.0803%" height="15" fill="rgb(211,68,37)" fg:x="45" fg:w="1"/><text x="3.8645%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="3.6948%" y="597" width="0.2410%" height="15" fill="rgb(249,138,50)" fg:x="46" fg:w="3"/><text x="3.9448%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="3.6948%" y="581" width="0.2410%" height="15" fill="rgb(243,185,40)" fg:x="46" fg:w="3"/><text x="3.9448%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="3.6948%" y="565" width="0.2410%" height="15" fill="rgb(242,92,35)" fg:x="46" fg:w="3"/><text x="3.9448%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="3.6948%" y="549" width="0.2410%" height="15" fill="rgb(244,98,5)" fg:x="46" fg:w="3"/><text x="3.9448%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="3.6948%" y="533" width="0.2410%" height="15" fill="rgb(228,186,29)" fg:x="46" fg:w="3"/><text x="3.9448%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.8554%" y="517" width="0.0803%" height="15" fill="rgb(253,7,44)" fg:x="48" fg:w="1"/><text x="4.1054%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.8554%" y="501" width="0.0803%" height="15" fill="rgb(216,11,45)" fg:x="48" fg:w="1"/><text x="4.1054%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.8554%" y="485" width="0.0803%" height="15" fill="rgb(205,67,3)" fg:x="48" fg:w="1"/><text x="4.1054%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="4.0161%" y="581" width="0.2410%" height="15" fill="rgb(250,18,3)" fg:x="50" fg:w="3"/><text x="4.2661%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.0964%" y="565" width="0.1606%" height="15" fill="rgb(241,222,43)" fg:x="51" fg:w="2"/><text x="4.3464%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.1767%" y="549" width="0.0803%" height="15" fill="rgb(233,115,3)" fg:x="52" fg:w="1"/><text x="4.4267%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="4.2570%" y="565" width="0.2410%" height="15" fill="rgb(215,165,25)" fg:x="53" fg:w="3"/><text x="4.5070%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="4.2570%" y="549" width="0.2410%" height="15" fill="rgb(234,179,6)" fg:x="53" fg:w="3"/><text x="4.5070%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="4.2570%" y="533" width="0.2410%" height="15" fill="rgb(215,82,23)" fg:x="53" fg:w="3"/><text x="4.5070%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="4.3373%" y="517" width="0.1606%" height="15" fill="rgb(211,47,18)" fg:x="54" fg:w="2"/><text x="4.5873%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.4177%" y="501" width="0.0803%" height="15" fill="rgb(248,17,9)" fg:x="55" fg:w="1"/><text x="4.6677%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.4177%" y="485" width="0.0803%" height="15" fill="rgb(210,212,12)" fg:x="55" fg:w="1"/><text x="4.6677%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.4177%" y="469" width="0.0803%" height="15" fill="rgb(230,135,45)" fg:x="55" fg:w="1"/><text x="4.6677%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.4980%" y="549" width="0.0803%" height="15" fill="rgb(214,121,41)" fg:x="56" fg:w="1"/><text x="4.7480%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4980%" y="533" width="0.0803%" height="15" fill="rgb(239,165,45)" fg:x="56" fg:w="1"/><text x="4.7480%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4980%" y="517" width="0.0803%" height="15" fill="rgb(214,85,51)" fg:x="56" fg:w="1"/><text x="4.7480%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4980%" y="501" width="0.0803%" height="15" fill="rgb(223,90,27)" fg:x="56" fg:w="1"/><text x="4.7480%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.4980%" y="485" width="0.0803%" height="15" fill="rgb(244,84,11)" fg:x="56" fg:w="1"/><text x="4.7480%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.4980%" y="469" width="0.0803%" height="15" fill="rgb(253,41,47)" fg:x="56" fg:w="1"/><text x="4.7480%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.4980%" y="453" width="0.0803%" height="15" fill="rgb(232,39,5)" fg:x="56" fg:w="1"/><text x="4.7480%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.5783%" y="549" width="0.0803%" height="15" fill="rgb(211,93,4)" fg:x="57" fg:w="1"/><text x="4.8283%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.5783%" y="533" width="0.0803%" height="15" fill="rgb(219,50,49)" fg:x="57" fg:w="1"/><text x="4.8283%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.5783%" y="517" width="0.0803%" height="15" fill="rgb(232,80,19)" fg:x="57" fg:w="1"/><text x="4.8283%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="4.4980%" y="565" width="0.2410%" height="15" fill="rgb(215,227,39)" fg:x="56" fg:w="3"/><text x="4.7480%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.6586%" y="549" width="0.0803%" height="15" fill="rgb(211,99,12)" fg:x="58" fg:w="1"/><text x="4.9086%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.6586%" y="533" width="0.0803%" height="15" fill="rgb(214,158,5)" fg:x="58" fg:w="1"/><text x="4.9086%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.6586%" y="517" width="0.0803%" height="15" fill="rgb(242,19,53)" fg:x="58" fg:w="1"/><text x="4.9086%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="4.2570%" y="581" width="0.5622%" height="15" fill="rgb(208,18,20)" fg:x="53" fg:w="7"/><text x="4.5070%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.7390%" y="565" width="0.0803%" height="15" fill="rgb(250,44,11)" fg:x="59" fg:w="1"/><text x="4.9890%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (15 samples, 1.20%)</title><rect x="3.6948%" y="613" width="1.2048%" height="15" fill="rgb(238,159,13)" fg:x="46" fg:w="15"/><text x="3.9448%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="3.9357%" y="597" width="0.9639%" height="15" fill="rgb(231,74,18)" fg:x="49" fg:w="12"/><text x="4.1857%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.8193%" y="581" width="0.0803%" height="15" fill="rgb(229,219,45)" fg:x="60" fg:w="1"/><text x="5.0693%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.8193%" y="565" width="0.0803%" height="15" fill="rgb(210,221,1)" fg:x="60" fg:w="1"/><text x="5.0693%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.8193%" y="549" width="0.0803%" height="15" fill="rgb(209,60,51)" fg:x="60" fg:w="1"/><text x="5.0693%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.8996%" y="581" width="0.0803%" height="15" fill="rgb(252,97,34)" fg:x="61" fg:w="1"/><text x="5.1496%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.9799%" y="565" width="0.0803%" height="15" fill="rgb(243,211,37)" fg:x="62" fg:w="1"/><text x="5.2299%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.0602%" y="565" width="0.0803%" height="15" fill="rgb(210,229,37)" fg:x="63" fg:w="1"/><text x="5.3102%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.0602%" y="549" width="0.0803%" height="15" fill="rgb(220,208,43)" fg:x="63" fg:w="1"/><text x="5.3102%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="4.8996%" y="613" width="0.3213%" height="15" fill="rgb(218,118,50)" fg:x="61" fg:w="4"/><text x="5.1496%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="4.8996%" y="597" width="0.3213%" height="15" fill="rgb(254,169,52)" fg:x="61" fg:w="4"/><text x="5.1496%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.9799%" y="581" width="0.2410%" height="15" fill="rgb(221,214,37)" fg:x="62" fg:w="3"/><text x="5.2299%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.1406%" y="565" width="0.0803%" height="15" fill="rgb(254,186,32)" fg:x="64" fg:w="1"/><text x="5.3906%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.1406%" y="549" width="0.0803%" height="15" fill="rgb(215,144,43)" fg:x="64" fg:w="1"/><text x="5.3906%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="5.1406%" y="533" width="0.0803%" height="15" fill="rgb(252,21,46)" fg:x="64" fg:w="1"/><text x="5.3906%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.1406%" y="517" width="0.0803%" height="15" fill="rgb(207,166,46)" fg:x="64" fg:w="1"/><text x="5.3906%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.1406%" y="501" width="0.0803%" height="15" fill="rgb(253,37,49)" fg:x="64" fg:w="1"/><text x="5.3906%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.1406%" y="485" width="0.0803%" height="15" fill="rgb(222,97,20)" fg:x="64" fg:w="1"/><text x="5.3906%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.2209%" y="533" width="0.0803%" height="15" fill="rgb(244,181,26)" fg:x="65" fg:w="1"/><text x="5.4709%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.3012%" y="517" width="0.0803%" height="15" fill="rgb(241,22,29)" fg:x="66" fg:w="1"/><text x="5.5512%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3012%" y="501" width="0.0803%" height="15" fill="rgb(206,200,43)" fg:x="66" fg:w="1"/><text x="5.5512%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.3012%" y="485" width="0.0803%" height="15" fill="rgb(226,224,43)" fg:x="66" fg:w="1"/><text x="5.5512%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="5.3012%" y="533" width="0.2410%" height="15" fill="rgb(253,129,28)" fg:x="66" fg:w="3"/><text x="5.5512%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.3815%" y="517" width="0.1606%" height="15" fill="rgb(252,99,33)" fg:x="67" fg:w="2"/><text x="5.6315%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.4618%" y="501" width="0.0803%" height="15" fill="rgb(208,123,45)" fg:x="68" fg:w="1"/><text x="5.7118%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4618%" y="485" width="0.0803%" height="15" fill="rgb(251,106,12)" fg:x="68" fg:w="1"/><text x="5.7118%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.4618%" y="469" width="0.0803%" height="15" fill="rgb(240,209,35)" fg:x="68" fg:w="1"/><text x="5.7118%" y="479.50"></text></g><g><title>engine::session::Session::flush (30 samples, 2.41%)</title><rect x="3.2129%" y="709" width="2.4096%" height="15" fill="rgb(214,52,50)" fg:x="40" fg:w="30"/><text x="3.4629%" y="719.50">en..</text></g><g><title>engine::session::state::State::close (29 samples, 2.33%)</title><rect x="3.2932%" y="693" width="2.3293%" height="15" fill="rgb(234,119,4)" fg:x="41" fg:w="29"/><text x="3.5432%" y="703.50">e..</text></g><g><title>engine::session::state::State::flush_entities (29 samples, 2.33%)</title><rect x="3.2932%" y="677" width="2.3293%" height="15" fill="rgb(228,181,36)" fg:x="41" fg:w="29"/><text x="3.5432%" y="687.50">e..</text></g><g><title>core::iter::adapters::try_process (26 samples, 2.09%)</title><rect x="3.5341%" y="661" width="2.0884%" height="15" fill="rgb(213,171,42)" fg:x="44" fg:w="26"/><text x="3.7841%" y="671.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26 samples, 2.09%)</title><rect x="3.5341%" y="645" width="2.0884%" height="15" fill="rgb(239,14,41)" fg:x="44" fg:w="26"/><text x="3.7841%" y="655.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (25 samples, 2.01%)</title><rect x="3.6145%" y="629" width="2.0080%" height="15" fill="rgb(239,111,46)" fg:x="45" fg:w="25"/><text x="3.8645%" y="639.50">e..</text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="5.2209%" y="613" width="0.4016%" height="15" fill="rgb(214,72,7)" fg:x="65" fg:w="5"/><text x="5.4709%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="5.2209%" y="597" width="0.4016%" height="15" fill="rgb(221,114,1)" fg:x="65" fg:w="5"/><text x="5.4709%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="5.2209%" y="581" width="0.4016%" height="15" fill="rgb(213,143,14)" fg:x="65" fg:w="5"/><text x="5.4709%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="5.2209%" y="565" width="0.4016%" height="15" fill="rgb(220,221,53)" fg:x="65" fg:w="5"/><text x="5.4709%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="5.2209%" y="549" width="0.4016%" height="15" fill="rgb(236,189,27)" fg:x="65" fg:w="5"/><text x="5.4709%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.5422%" y="533" width="0.0803%" height="15" fill="rgb(252,139,49)" fg:x="69" fg:w="1"/><text x="5.7922%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="5.6225%" y="677" width="0.0803%" height="15" fill="rgb(231,158,33)" fg:x="70" fg:w="1"/><text x="5.8725%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.6225%" y="661" width="0.0803%" height="15" fill="rgb(207,201,15)" fg:x="70" fg:w="1"/><text x="5.8725%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.6225%" y="645" width="0.0803%" height="15" fill="rgb(218,43,48)" fg:x="70" fg:w="1"/><text x="5.8725%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.6225%" y="629" width="0.0803%" height="15" fill="rgb(244,63,52)" fg:x="70" fg:w="1"/><text x="5.8725%" y="639.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="5.6225%" y="709" width="0.1606%" height="15" fill="rgb(236,60,17)" fg:x="70" fg:w="2"/><text x="5.8725%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="5.6225%" y="693" width="0.1606%" height="15" fill="rgb(205,206,29)" fg:x="70" fg:w="2"/><text x="5.8725%" y="703.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="5.7028%" y="677" width="0.0803%" height="15" fill="rgb(205,209,35)" fg:x="71" fg:w="1"/><text x="5.9528%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.7028%" y="661" width="0.0803%" height="15" fill="rgb(227,112,14)" fg:x="71" fg:w="1"/><text x="5.9528%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="5.7028%" y="645" width="0.0803%" height="15" fill="rgb(248,151,9)" fg:x="71" fg:w="1"/><text x="5.9528%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="5.7831%" y="661" width="0.1606%" height="15" fill="rgb(247,45,40)" fg:x="72" fg:w="2"/><text x="6.0331%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.8635%" y="645" width="0.0803%" height="15" fill="rgb(232,185,16)" fg:x="73" fg:w="1"/><text x="6.1135%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.8635%" y="629" width="0.0803%" height="15" fill="rgb(215,45,44)" fg:x="73" fg:w="1"/><text x="6.1135%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.8635%" y="613" width="0.0803%" height="15" fill="rgb(206,69,32)" fg:x="73" fg:w="1"/><text x="6.1135%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.8635%" y="597" width="0.0803%" height="15" fill="rgb(233,98,50)" fg:x="73" fg:w="1"/><text x="6.1135%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.8635%" y="581" width="0.0803%" height="15" fill="rgb(232,217,52)" fg:x="73" fg:w="1"/><text x="6.1135%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.8635%" y="565" width="0.0803%" height="15" fill="rgb(250,42,51)" fg:x="73" fg:w="1"/><text x="6.1135%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.8635%" y="549" width="0.0803%" height="15" fill="rgb(241,200,26)" fg:x="73" fg:w="1"/><text x="6.1135%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.8635%" y="533" width="0.0803%" height="15" fill="rgb(207,10,32)" fg:x="73" fg:w="1"/><text x="6.1135%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.8635%" y="517" width="0.0803%" height="15" fill="rgb(214,63,15)" fg:x="73" fg:w="1"/><text x="6.1135%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.8635%" y="501" width="0.0803%" height="15" fill="rgb(234,176,14)" fg:x="73" fg:w="1"/><text x="6.1135%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.8635%" y="485" width="0.0803%" height="15" fill="rgb(226,104,52)" fg:x="73" fg:w="1"/><text x="6.1135%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8635%" y="469" width="0.0803%" height="15" fill="rgb(211,222,1)" fg:x="73" fg:w="1"/><text x="6.1135%" y="479.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="5.7831%" y="693" width="0.2410%" height="15" fill="rgb(237,7,3)" fg:x="72" fg:w="3"/><text x="6.0331%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="5.7831%" y="677" width="0.2410%" height="15" fill="rgb(218,143,7)" fg:x="72" fg:w="3"/><text x="6.0331%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.9438%" y="661" width="0.0803%" height="15" fill="rgb(208,25,22)" fg:x="74" fg:w="1"/><text x="6.1938%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9438%" y="645" width="0.0803%" height="15" fill="rgb(228,127,16)" fg:x="74" fg:w="1"/><text x="6.1938%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.9438%" y="629" width="0.0803%" height="15" fill="rgb(237,86,27)" fg:x="74" fg:w="1"/><text x="6.1938%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9438%" y="613" width="0.0803%" height="15" fill="rgb(207,125,19)" fg:x="74" fg:w="1"/><text x="6.1938%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.9438%" y="597" width="0.0803%" height="15" fill="rgb(243,195,0)" fg:x="74" fg:w="1"/><text x="6.1938%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9438%" y="581" width="0.0803%" height="15" fill="rgb(230,95,18)" fg:x="74" fg:w="1"/><text x="6.1938%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.9438%" y="565" width="0.0803%" height="15" fill="rgb(232,157,21)" fg:x="74" fg:w="1"/><text x="6.1938%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.9438%" y="549" width="0.0803%" height="15" fill="rgb(212,120,50)" fg:x="74" fg:w="1"/><text x="6.1938%" y="559.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="6.0241%" y="677" width="0.0803%" height="15" fill="rgb(222,204,44)" fg:x="75" fg:w="1"/><text x="6.2741%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="6.0241%" y="661" width="0.0803%" height="15" fill="rgb(236,6,33)" fg:x="75" fg:w="1"/><text x="6.2741%" y="671.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.0241%" y="645" width="0.0803%" height="15" fill="rgb(247,11,38)" fg:x="75" fg:w="1"/><text x="6.2741%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.0241%" y="629" width="0.0803%" height="15" fill="rgb(215,111,0)" fg:x="75" fg:w="1"/><text x="6.2741%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="6.1044%" y="629" width="0.0803%" height="15" fill="rgb(211,65,46)" fg:x="76" fg:w="1"/><text x="6.3544%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.1044%" y="613" width="0.0803%" height="15" fill="rgb(216,5,12)" fg:x="76" fg:w="1"/><text x="6.3544%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.1044%" y="597" width="0.0803%" height="15" fill="rgb(226,7,2)" fg:x="76" fg:w="1"/><text x="6.3544%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.1044%" y="581" width="0.0803%" height="15" fill="rgb(242,116,12)" fg:x="76" fg:w="1"/><text x="6.3544%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.1044%" y="565" width="0.0803%" height="15" fill="rgb(249,209,7)" fg:x="76" fg:w="1"/><text x="6.3544%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.1044%" y="549" width="0.0803%" height="15" fill="rgb(232,73,17)" fg:x="76" fg:w="1"/><text x="6.3544%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.1044%" y="533" width="0.0803%" height="15" fill="rgb(214,13,32)" fg:x="76" fg:w="1"/><text x="6.3544%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="6.1044%" y="661" width="0.2410%" height="15" fill="rgb(221,125,10)" fg:x="76" fg:w="3"/><text x="6.3544%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="6.1044%" y="645" width="0.2410%" height="15" fill="rgb(246,7,44)" fg:x="76" fg:w="3"/><text x="6.3544%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="6.1847%" y="629" width="0.1606%" height="15" fill="rgb(239,18,35)" fg:x="77" fg:w="2"/><text x="6.4347%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.2651%" y="613" width="0.0803%" height="15" fill="rgb(250,222,16)" fg:x="78" fg:w="1"/><text x="6.5151%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="6.2651%" y="597" width="0.0803%" height="15" fill="rgb(219,100,8)" fg:x="78" fg:w="1"/><text x="6.5151%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="6.3454%" y="661" width="0.0803%" height="15" fill="rgb(240,62,13)" fg:x="79" fg:w="1"/><text x="6.5954%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.3454%" y="645" width="0.0803%" height="15" fill="rgb(253,194,2)" fg:x="79" fg:w="1"/><text x="6.5954%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.3454%" y="629" width="0.0803%" height="15" fill="rgb(235,58,31)" fg:x="79" fg:w="1"/><text x="6.5954%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="6.3454%" y="613" width="0.0803%" height="15" fill="rgb(231,37,11)" fg:x="79" fg:w="1"/><text x="6.5954%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.72%)</title><rect x="5.7831%" y="709" width="0.7229%" height="15" fill="rgb(235,133,0)" fg:x="72" fg:w="9"/><text x="6.0331%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="6.0241%" y="693" width="0.4819%" height="15" fill="rgb(212,185,40)" fg:x="75" fg:w="6"/><text x="6.2741%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="6.1044%" y="677" width="0.4016%" height="15" fill="rgb(216,68,42)" fg:x="76" fg:w="5"/><text x="6.3544%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4257%" y="661" width="0.0803%" height="15" fill="rgb(239,81,4)" fg:x="80" fg:w="1"/><text x="6.6757%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.4257%" y="645" width="0.0803%" height="15" fill="rgb(206,86,6)" fg:x="80" fg:w="1"/><text x="6.6757%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.4257%" y="629" width="0.0803%" height="15" fill="rgb(249,95,27)" fg:x="80" fg:w="1"/><text x="6.6757%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="6.4257%" y="613" width="0.0803%" height="15" fill="rgb(205,155,45)" fg:x="80" fg:w="1"/><text x="6.6757%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.4257%" y="597" width="0.0803%" height="15" fill="rgb(213,55,42)" fg:x="80" fg:w="1"/><text x="6.6757%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4257%" y="581" width="0.0803%" height="15" fill="rgb(249,197,4)" fg:x="80" fg:w="1"/><text x="6.6757%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.4257%" y="565" width="0.0803%" height="15" fill="rgb(212,128,32)" fg:x="80" fg:w="1"/><text x="6.6757%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4257%" y="549" width="0.0803%" height="15" fill="rgb(252,47,30)" fg:x="80" fg:w="1"/><text x="6.6757%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.4257%" y="533" width="0.0803%" height="15" fill="rgb(209,79,18)" fg:x="80" fg:w="1"/><text x="6.6757%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4257%" y="517" width="0.0803%" height="15" fill="rgb(225,81,38)" fg:x="80" fg:w="1"/><text x="6.6757%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="6.4257%" y="501" width="0.0803%" height="15" fill="rgb(205,95,16)" fg:x="80" fg:w="1"/><text x="6.6757%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="6.4257%" y="485" width="0.0803%" height="15" fill="rgb(214,30,4)" fg:x="80" fg:w="1"/><text x="6.6757%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="6.5060%" y="709" width="0.0803%" height="15" fill="rgb(232,137,22)" fg:x="81" fg:w="1"/><text x="6.7560%" y="719.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="6.5060%" y="693" width="0.0803%" height="15" fill="rgb(232,156,19)" fg:x="81" fg:w="1"/><text x="6.7560%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="6.5060%" y="677" width="0.0803%" height="15" fill="rgb(248,157,26)" fg:x="81" fg:w="1"/><text x="6.7560%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="6.5060%" y="661" width="0.0803%" height="15" fill="rgb(242,24,3)" fg:x="81" fg:w="1"/><text x="6.7560%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.5060%" y="645" width="0.0803%" height="15" fill="rgb(218,195,48)" fg:x="81" fg:w="1"/><text x="6.7560%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="6.5060%" y="629" width="0.0803%" height="15" fill="rgb(214,193,36)" fg:x="81" fg:w="1"/><text x="6.7560%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="6.5863%" y="661" width="0.0803%" height="15" fill="rgb(242,110,40)" fg:x="82" fg:w="1"/><text x="6.8363%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5863%" y="645" width="0.0803%" height="15" fill="rgb(233,150,26)" fg:x="82" fg:w="1"/><text x="6.8363%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5863%" y="629" width="0.0803%" height="15" fill="rgb(239,200,30)" fg:x="82" fg:w="1"/><text x="6.8363%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5863%" y="613" width="0.0803%" height="15" fill="rgb(226,28,11)" fg:x="82" fg:w="1"/><text x="6.8363%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5863%" y="597" width="0.0803%" height="15" fill="rgb(220,26,48)" fg:x="82" fg:w="1"/><text x="6.8363%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="6.5863%" y="677" width="0.1606%" height="15" fill="rgb(232,10,11)" fg:x="82" fg:w="2"/><text x="6.8363%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="6.6667%" y="661" width="0.0803%" height="15" fill="rgb(252,143,50)" fg:x="83" fg:w="1"/><text x="6.9167%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="6.6667%" y="645" width="0.0803%" height="15" fill="rgb(206,58,22)" fg:x="83" fg:w="1"/><text x="6.9167%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.6667%" y="629" width="0.0803%" height="15" fill="rgb(250,9,45)" fg:x="83" fg:w="1"/><text x="6.9167%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="6.6667%" y="613" width="0.0803%" height="15" fill="rgb(225,148,14)" fg:x="83" fg:w="1"/><text x="6.9167%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.6667%" y="597" width="0.0803%" height="15" fill="rgb(205,178,40)" fg:x="83" fg:w="1"/><text x="6.9167%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6667%" y="581" width="0.0803%" height="15" fill="rgb(215,201,4)" fg:x="83" fg:w="1"/><text x="6.9167%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.6667%" y="565" width="0.0803%" height="15" fill="rgb(219,223,24)" fg:x="83" fg:w="1"/><text x="6.9167%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6667%" y="549" width="0.0803%" height="15" fill="rgb(217,19,31)" fg:x="83" fg:w="1"/><text x="6.9167%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="6.6667%" y="533" width="0.0803%" height="15" fill="rgb(235,33,3)" fg:x="83" fg:w="1"/><text x="6.9167%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.6667%" y="517" width="0.0803%" height="15" fill="rgb(221,39,18)" fg:x="83" fg:w="1"/><text x="6.9167%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6667%" y="501" width="0.0803%" height="15" fill="rgb(242,162,33)" fg:x="83" fg:w="1"/><text x="6.9167%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (3 samples, 0.24%)</title><rect x="6.5863%" y="709" width="0.2410%" height="15" fill="rgb(233,215,28)" fg:x="82" fg:w="3"/><text x="6.8363%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="6.5863%" y="693" width="0.2410%" height="15" fill="rgb(212,117,9)" fg:x="82" fg:w="3"/><text x="6.8363%" y="703.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="6.7470%" y="677" width="0.0803%" height="15" fill="rgb(237,70,47)" fg:x="84" fg:w="1"/><text x="6.9970%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="6.7470%" y="661" width="0.0803%" height="15" fill="rgb(206,177,13)" fg:x="84" fg:w="1"/><text x="6.9970%" y="671.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="6.7470%" y="645" width="0.0803%" height="15" fill="rgb(209,174,33)" fg:x="84" fg:w="1"/><text x="6.9970%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.7470%" y="629" width="0.0803%" height="15" fill="rgb(226,6,11)" fg:x="84" fg:w="1"/><text x="6.9970%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="6.7470%" y="613" width="0.0803%" height="15" fill="rgb(240,214,6)" fg:x="84" fg:w="1"/><text x="6.9970%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.7470%" y="597" width="0.0803%" height="15" fill="rgb(254,214,40)" fg:x="84" fg:w="1"/><text x="6.9970%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="6.8273%" y="693" width="0.0803%" height="15" fill="rgb(230,187,15)" fg:x="85" fg:w="1"/><text x="7.0773%" y="703.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="6.8273%" y="677" width="0.0803%" height="15" fill="rgb(250,11,27)" fg:x="85" fg:w="1"/><text x="7.0773%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="6.8273%" y="661" width="0.0803%" height="15" fill="rgb(243,107,19)" fg:x="85" fg:w="1"/><text x="7.0773%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="6.8273%" y="645" width="0.0803%" height="15" fill="rgb(253,66,26)" fg:x="85" fg:w="1"/><text x="7.0773%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8273%" y="629" width="0.0803%" height="15" fill="rgb(228,43,8)" fg:x="85" fg:w="1"/><text x="7.0773%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.9076%" y="613" width="0.0803%" height="15" fill="rgb(232,197,36)" fg:x="86" fg:w="1"/><text x="7.1576%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="6.9076%" y="597" width="0.0803%" height="15" fill="rgb(221,182,31)" fg:x="86" fg:w="1"/><text x="7.1576%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9076%" y="581" width="0.0803%" height="15" fill="rgb(244,25,36)" fg:x="86" fg:w="1"/><text x="7.1576%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9076%" y="565" width="0.0803%" height="15" fill="rgb(247,101,19)" fg:x="86" fg:w="1"/><text x="7.1576%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9076%" y="549" width="0.0803%" height="15" fill="rgb(223,117,19)" fg:x="86" fg:w="1"/><text x="7.1576%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.9076%" y="533" width="0.0803%" height="15" fill="rgb(249,63,38)" fg:x="86" fg:w="1"/><text x="7.1576%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.9076%" y="517" width="0.0803%" height="15" fill="rgb(220,143,23)" fg:x="86" fg:w="1"/><text x="7.1576%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.9076%" y="501" width="0.0803%" height="15" fill="rgb(252,183,22)" fg:x="86" fg:w="1"/><text x="7.1576%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.9076%" y="485" width="0.0803%" height="15" fill="rgb(243,176,15)" fg:x="86" fg:w="1"/><text x="7.1576%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.9076%" y="469" width="0.0803%" height="15" fill="rgb(244,204,46)" fg:x="86" fg:w="1"/><text x="7.1576%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.9076%" y="453" width="0.0803%" height="15" fill="rgb(227,28,54)" fg:x="86" fg:w="1"/><text x="7.1576%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.9076%" y="437" width="0.0803%" height="15" fill="rgb(231,10,15)" fg:x="86" fg:w="1"/><text x="7.1576%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.9076%" y="421" width="0.0803%" height="15" fill="rgb(210,200,17)" fg:x="86" fg:w="1"/><text x="7.1576%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.9076%" y="405" width="0.0803%" height="15" fill="rgb(251,106,46)" fg:x="86" fg:w="1"/><text x="7.1576%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.9076%" y="389" width="0.0803%" height="15" fill="rgb(218,211,15)" fg:x="86" fg:w="1"/><text x="7.1576%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.9076%" y="373" width="0.0803%" height="15" fill="rgb(239,62,10)" fg:x="86" fg:w="1"/><text x="7.1576%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9076%" y="357" width="0.0803%" height="15" fill="rgb(225,53,53)" fg:x="86" fg:w="1"/><text x="7.1576%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="6.9076%" y="693" width="0.1606%" height="15" fill="rgb(207,16,24)" fg:x="86" fg:w="2"/><text x="7.1576%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="6.9076%" y="677" width="0.1606%" height="15" fill="rgb(217,52,28)" fg:x="86" fg:w="2"/><text x="7.1576%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="6.9076%" y="661" width="0.1606%" height="15" fill="rgb(246,1,5)" fg:x="86" fg:w="2"/><text x="7.1576%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="6.9076%" y="645" width="0.1606%" height="15" fill="rgb(221,29,26)" fg:x="86" fg:w="2"/><text x="7.1576%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="6.9076%" y="629" width="0.1606%" height="15" fill="rgb(250,133,32)" fg:x="86" fg:w="2"/><text x="7.1576%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.9880%" y="613" width="0.0803%" height="15" fill="rgb(236,63,16)" fg:x="87" fg:w="1"/><text x="7.2380%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="6.9880%" y="597" width="0.0803%" height="15" fill="rgb(231,159,14)" fg:x="87" fg:w="1"/><text x="7.2380%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.9880%" y="581" width="0.0803%" height="15" fill="rgb(207,102,36)" fg:x="87" fg:w="1"/><text x="7.2380%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9880%" y="565" width="0.0803%" height="15" fill="rgb(230,224,31)" fg:x="87" fg:w="1"/><text x="7.2380%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.9880%" y="549" width="0.0803%" height="15" fill="rgb(215,182,16)" fg:x="87" fg:w="1"/><text x="7.2380%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9880%" y="533" width="0.0803%" height="15" fill="rgb(226,113,2)" fg:x="87" fg:w="1"/><text x="7.2380%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.9880%" y="517" width="0.0803%" height="15" fill="rgb(241,18,35)" fg:x="87" fg:w="1"/><text x="7.2380%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9880%" y="501" width="0.0803%" height="15" fill="rgb(240,165,44)" fg:x="87" fg:w="1"/><text x="7.2380%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.9880%" y="485" width="0.0803%" height="15" fill="rgb(229,130,47)" fg:x="87" fg:w="1"/><text x="7.2380%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.9880%" y="469" width="0.0803%" height="15" fill="rgb(223,93,7)" fg:x="87" fg:w="1"/><text x="7.2380%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.1486%" y="661" width="0.0803%" height="15" fill="rgb(205,180,36)" fg:x="89" fg:w="1"/><text x="7.3986%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.2289%" y="661" width="0.0803%" height="15" fill="rgb(221,103,28)" fg:x="90" fg:w="1"/><text x="7.4789%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="7.2289%" y="645" width="0.0803%" height="15" fill="rgb(212,4,3)" fg:x="90" fg:w="1"/><text x="7.4789%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (4 samples, 0.32%)</title><rect x="7.0683%" y="677" width="0.3213%" height="15" fill="rgb(209,221,53)" fg:x="88" fg:w="4"/><text x="7.3183%" y="687.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="7.3092%" y="661" width="0.0803%" height="15" fill="rgb(233,229,52)" fg:x="91" fg:w="1"/><text x="7.5592%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="7.3896%" y="629" width="0.1606%" height="15" fill="rgb(254,127,37)" fg:x="92" fg:w="2"/><text x="7.6396%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="7.3896%" y="613" width="0.1606%" height="15" fill="rgb(207,161,26)" fg:x="92" fg:w="2"/><text x="7.6396%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="7.3896%" y="597" width="0.1606%" height="15" fill="rgb(223,75,5)" fg:x="92" fg:w="2"/><text x="7.6396%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="7.3896%" y="581" width="0.1606%" height="15" fill="rgb(235,115,52)" fg:x="92" fg:w="2"/><text x="7.6396%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="7.3896%" y="565" width="0.1606%" height="15" fill="rgb(240,91,46)" fg:x="92" fg:w="2"/><text x="7.6396%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="7.3896%" y="549" width="0.1606%" height="15" fill="rgb(251,144,21)" fg:x="92" fg:w="2"/><text x="7.6396%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="7.3896%" y="533" width="0.1606%" height="15" fill="rgb(247,220,47)" fg:x="92" fg:w="2"/><text x="7.6396%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="7.3896%" y="517" width="0.1606%" height="15" fill="rgb(253,122,1)" fg:x="92" fg:w="2"/><text x="7.6396%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.16%)</title><rect x="7.3896%" y="501" width="0.1606%" height="15" fill="rgb(221,0,24)" fg:x="92" fg:w="2"/><text x="7.6396%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.16%)</title><rect x="7.3896%" y="485" width="0.1606%" height="15" fill="rgb(220,204,54)" fg:x="92" fg:w="2"/><text x="7.6396%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.5502%" y="565" width="0.0803%" height="15" fill="rgb(205,96,25)" fg:x="94" fg:w="1"/><text x="7.8002%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.6305%" y="565" width="0.0803%" height="15" fill="rgb(247,77,20)" fg:x="95" fg:w="1"/><text x="7.8805%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.6305%" y="549" width="0.0803%" height="15" fill="rgb(245,151,8)" fg:x="95" fg:w="1"/><text x="7.8805%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.7912%" y="533" width="0.0803%" height="15" fill="rgb(242,158,39)" fg:x="97" fg:w="1"/><text x="8.0412%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.8715%" y="533" width="0.0803%" height="15" fill="rgb(222,214,50)" fg:x="98" fg:w="1"/><text x="8.1215%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8715%" y="517" width="0.0803%" height="15" fill="rgb(229,60,39)" fg:x="98" fg:w="1"/><text x="8.1215%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8715%" y="501" width="0.0803%" height="15" fill="rgb(240,148,18)" fg:x="98" fg:w="1"/><text x="8.1215%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.8715%" y="485" width="0.0803%" height="15" fill="rgb(215,96,11)" fg:x="98" fg:w="1"/><text x="8.1215%" y="495.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="8.1124%" y="517" width="0.0803%" height="15" fill="rgb(238,162,53)" fg:x="101" fg:w="1"/><text x="8.3624%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.1928%" y="517" width="0.1606%" height="15" fill="rgb(214,83,18)" fg:x="102" fg:w="2"/><text x="8.4428%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.1928%" y="501" width="0.1606%" height="15" fill="rgb(248,117,24)" fg:x="102" fg:w="2"/><text x="8.4428%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.1928%" y="485" width="0.1606%" height="15" fill="rgb(238,190,6)" fg:x="102" fg:w="2"/><text x="8.4428%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.1928%" y="469" width="0.1606%" height="15" fill="rgb(213,51,6)" fg:x="102" fg:w="2"/><text x="8.4428%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="8.1928%" y="453" width="0.1606%" height="15" fill="rgb(212,136,1)" fg:x="102" fg:w="2"/><text x="8.4428%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="8.1928%" y="437" width="0.1606%" height="15" fill="rgb(221,192,14)" fg:x="102" fg:w="2"/><text x="8.4428%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="8.1928%" y="421" width="0.1606%" height="15" fill="rgb(244,38,54)" fg:x="102" fg:w="2"/><text x="8.4428%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.3534%" y="453" width="0.1606%" height="15" fill="rgb(240,45,28)" fg:x="104" fg:w="2"/><text x="8.6034%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="8.3534%" y="437" width="0.1606%" height="15" fill="rgb(240,123,12)" fg:x="104" fg:w="2"/><text x="8.6034%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="8.3534%" y="421" width="0.1606%" height="15" fill="rgb(216,14,30)" fg:x="104" fg:w="2"/><text x="8.6034%" y="431.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="8.3534%" y="405" width="0.1606%" height="15" fill="rgb(212,50,24)" fg:x="104" fg:w="2"/><text x="8.6034%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.04%)</title><rect x="7.5502%" y="581" width="1.0442%" height="15" fill="rgb(253,229,47)" fg:x="94" fg:w="13"/><text x="7.8002%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="7.7108%" y="565" width="0.8835%" height="15" fill="rgb(214,26,17)" fg:x="96" fg:w="11"/><text x="7.9608%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="7.7108%" y="549" width="0.8835%" height="15" fill="rgb(252,60,11)" fg:x="96" fg:w="11"/><text x="7.9608%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="7.9518%" y="533" width="0.6426%" height="15" fill="rgb(209,59,37)" fg:x="99" fg:w="8"/><text x="8.2018%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.3534%" y="517" width="0.2410%" height="15" fill="rgb(228,126,53)" fg:x="104" fg:w="3"/><text x="8.6034%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="8.3534%" y="501" width="0.2410%" height="15" fill="rgb(233,99,2)" fg:x="104" fg:w="3"/><text x="8.6034%" y="511.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="8.3534%" y="485" width="0.2410%" height="15" fill="rgb(217,106,34)" fg:x="104" fg:w="3"/><text x="8.6034%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="8.3534%" y="469" width="0.2410%" height="15" fill="rgb(222,46,19)" fg:x="104" fg:w="3"/><text x="8.6034%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="8.5141%" y="453" width="0.0803%" height="15" fill="rgb(251,87,31)" fg:x="106" fg:w="1"/><text x="8.7641%" y="463.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="8.5944%" y="549" width="0.0803%" height="15" fill="rgb(213,70,51)" fg:x="107" fg:w="1"/><text x="8.8444%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="8.5944%" y="533" width="0.0803%" height="15" fill="rgb(229,144,18)" fg:x="107" fg:w="1"/><text x="8.8444%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="8.5944%" y="517" width="0.0803%" height="15" fill="rgb(254,60,26)" fg:x="107" fg:w="1"/><text x="8.8444%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="8.5944%" y="565" width="0.1606%" height="15" fill="rgb(243,127,51)" fg:x="107" fg:w="2"/><text x="8.8444%" y="575.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="8.6747%" y="549" width="0.0803%" height="15" fill="rgb(221,51,25)" fg:x="108" fg:w="1"/><text x="8.9247%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="8.6747%" y="533" width="0.0803%" height="15" fill="rgb(205,42,7)" fg:x="108" fg:w="1"/><text x="8.9247%" y="543.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.6747%" y="517" width="0.0803%" height="15" fill="rgb(236,177,48)" fg:x="108" fg:w="1"/><text x="8.9247%" y="527.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="8.6747%" y="501" width="0.0803%" height="15" fill="rgb(226,79,31)" fg:x="108" fg:w="1"/><text x="8.9247%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.7550%" y="533" width="0.0803%" height="15" fill="rgb(216,170,12)" fg:x="109" fg:w="1"/><text x="9.0050%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8353%" y="533" width="0.0803%" height="15" fill="rgb(208,62,51)" fg:x="110" fg:w="1"/><text x="9.0853%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.8353%" y="517" width="0.0803%" height="15" fill="rgb(254,129,9)" fg:x="110" fg:w="1"/><text x="9.0853%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="8.8353%" y="501" width="0.0803%" height="15" fill="rgb(243,209,31)" fg:x="110" fg:w="1"/><text x="9.0853%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="8.8353%" y="485" width="0.0803%" height="15" fill="rgb(213,159,23)" fg:x="110" fg:w="1"/><text x="9.0853%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.9157%" y="501" width="0.0803%" height="15" fill="rgb(249,77,39)" fg:x="111" fg:w="1"/><text x="9.1657%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.9157%" y="485" width="0.0803%" height="15" fill="rgb(230,13,33)" fg:x="111" fg:w="1"/><text x="9.1657%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.9157%" y="469" width="0.0803%" height="15" fill="rgb(215,215,7)" fg:x="111" fg:w="1"/><text x="9.1657%" y="479.50"></text></g><g><title>engine::session::Session::flush (25 samples, 2.01%)</title><rect x="7.0683%" y="693" width="2.0080%" height="15" fill="rgb(222,92,25)" fg:x="88" fg:w="25"/><text x="7.3183%" y="703.50">e..</text></g><g><title>engine::session::Session::save_changes (21 samples, 1.69%)</title><rect x="7.3896%" y="677" width="1.6867%" height="15" fill="rgb(215,173,22)" fg:x="92" fg:w="21"/><text x="7.6396%" y="687.50"></text></g><g><title>engine::session::state::State::close (21 samples, 1.69%)</title><rect x="7.3896%" y="661" width="1.6867%" height="15" fill="rgb(247,205,52)" fg:x="92" fg:w="21"/><text x="7.6396%" y="671.50"></text></g><g><title>engine::session::state::State::flush_entities (21 samples, 1.69%)</title><rect x="7.3896%" y="645" width="1.6867%" height="15" fill="rgb(240,210,37)" fg:x="92" fg:w="21"/><text x="7.6396%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (19 samples, 1.53%)</title><rect x="7.5502%" y="629" width="1.5261%" height="15" fill="rgb(224,13,10)" fg:x="94" fg:w="19"/><text x="7.8002%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.53%)</title><rect x="7.5502%" y="613" width="1.5261%" height="15" fill="rgb(209,48,33)" fg:x="94" fg:w="19"/><text x="7.8002%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (19 samples, 1.53%)</title><rect x="7.5502%" y="597" width="1.5261%" height="15" fill="rgb(228,219,23)" fg:x="94" fg:w="19"/><text x="7.8002%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="8.5944%" y="581" width="0.4819%" height="15" fill="rgb(239,46,49)" fg:x="107" fg:w="6"/><text x="8.8444%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="8.7550%" y="565" width="0.3213%" height="15" fill="rgb(206,172,51)" fg:x="109" fg:w="4"/><text x="9.0050%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="8.7550%" y="549" width="0.3213%" height="15" fill="rgb(213,212,35)" fg:x="109" fg:w="4"/><text x="9.0050%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="8.9157%" y="533" width="0.1606%" height="15" fill="rgb(252,40,27)" fg:x="111" fg:w="2"/><text x="9.1657%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="8.9157%" y="517" width="0.1606%" height="15" fill="rgb(212,33,41)" fg:x="111" fg:w="2"/><text x="9.1657%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="8.9960%" y="501" width="0.0803%" height="15" fill="rgb(232,160,27)" fg:x="112" fg:w="1"/><text x="9.2460%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9960%" y="485" width="0.0803%" height="15" fill="rgb(244,160,20)" fg:x="112" fg:w="1"/><text x="9.2460%" y="495.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="9.0763%" y="693" width="0.0803%" height="15" fill="rgb(205,66,20)" fg:x="113" fg:w="1"/><text x="9.3263%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="9.0763%" y="677" width="0.0803%" height="15" fill="rgb(236,158,6)" fg:x="113" fg:w="1"/><text x="9.3263%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="9.0763%" y="661" width="0.0803%" height="15" fill="rgb(232,25,36)" fg:x="113" fg:w="1"/><text x="9.3263%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.0763%" y="645" width="0.0803%" height="15" fill="rgb(220,153,35)" fg:x="113" fg:w="1"/><text x="9.3263%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="9.0763%" y="629" width="0.0803%" height="15" fill="rgb(216,5,8)" fg:x="113" fg:w="1"/><text x="9.3263%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.0763%" y="613" width="0.0803%" height="15" fill="rgb(240,97,3)" fg:x="113" fg:w="1"/><text x="9.3263%" y="623.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="9.1566%" y="693" width="0.0803%" height="15" fill="rgb(220,99,26)" fg:x="114" fg:w="1"/><text x="9.4066%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="9.1566%" y="677" width="0.0803%" height="15" fill="rgb(237,96,2)" fg:x="114" fg:w="1"/><text x="9.4066%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="9.1566%" y="661" width="0.0803%" height="15" fill="rgb(217,197,47)" fg:x="114" fg:w="1"/><text x="9.4066%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="9.1566%" y="645" width="0.0803%" height="15" fill="rgb(252,133,54)" fg:x="114" fg:w="1"/><text x="9.4066%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="9.1566%" y="629" width="0.0803%" height="15" fill="rgb(233,37,30)" fg:x="114" fg:w="1"/><text x="9.4066%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.1566%" y="613" width="0.0803%" height="15" fill="rgb(239,182,12)" fg:x="114" fg:w="1"/><text x="9.4066%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.1566%" y="597" width="0.0803%" height="15" fill="rgb(245,83,39)" fg:x="114" fg:w="1"/><text x="9.4066%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="9.1566%" y="581" width="0.0803%" height="15" fill="rgb(222,109,36)" fg:x="114" fg:w="1"/><text x="9.4066%" y="591.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="9.1566%" y="565" width="0.0803%" height="15" fill="rgb(237,95,44)" fg:x="114" fg:w="1"/><text x="9.4066%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.1566%" y="549" width="0.0803%" height="15" fill="rgb(216,36,54)" fg:x="114" fg:w="1"/><text x="9.4066%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.1566%" y="533" width="0.0803%" height="15" fill="rgb(236,164,3)" fg:x="114" fg:w="1"/><text x="9.4066%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="9.1566%" y="517" width="0.0803%" height="15" fill="rgb(223,15,21)" fg:x="114" fg:w="1"/><text x="9.4066%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="9.1566%" y="501" width="0.0803%" height="15" fill="rgb(239,191,12)" fg:x="114" fg:w="1"/><text x="9.4066%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="9.1566%" y="485" width="0.0803%" height="15" fill="rgb(231,191,37)" fg:x="114" fg:w="1"/><text x="9.4066%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="9.1566%" y="469" width="0.0803%" height="15" fill="rgb(209,155,36)" fg:x="114" fg:w="1"/><text x="9.4066%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="9.1566%" y="453" width="0.0803%" height="15" fill="rgb(216,222,49)" fg:x="114" fg:w="1"/><text x="9.4066%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="9.1566%" y="437" width="0.0803%" height="15" fill="rgb(218,181,2)" fg:x="114" fg:w="1"/><text x="9.4066%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.2369%" y="645" width="0.0803%" height="15" fill="rgb(239,125,9)" fg:x="115" fg:w="1"/><text x="9.4869%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.2369%" y="629" width="0.0803%" height="15" fill="rgb(233,103,7)" fg:x="115" fg:w="1"/><text x="9.4869%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="9.2369%" y="677" width="0.1606%" height="15" fill="rgb(209,223,5)" fg:x="115" fg:w="2"/><text x="9.4869%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="9.2369%" y="661" width="0.1606%" height="15" fill="rgb(234,71,27)" fg:x="115" fg:w="2"/><text x="9.4869%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.3173%" y="645" width="0.0803%" height="15" fill="rgb(251,202,16)" fg:x="116" fg:w="1"/><text x="9.5673%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.3173%" y="629" width="0.0803%" height="15" fill="rgb(231,180,0)" fg:x="116" fg:w="1"/><text x="9.5673%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.3173%" y="613" width="0.0803%" height="15" fill="rgb(223,58,28)" fg:x="116" fg:w="1"/><text x="9.5673%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.3173%" y="597" width="0.0803%" height="15" fill="rgb(250,34,24)" fg:x="116" fg:w="1"/><text x="9.5673%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.3173%" y="581" width="0.0803%" height="15" fill="rgb(235,24,16)" fg:x="116" fg:w="1"/><text x="9.5673%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.3173%" y="565" width="0.0803%" height="15" fill="rgb(219,28,33)" fg:x="116" fg:w="1"/><text x="9.5673%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.3976%" y="661" width="0.0803%" height="15" fill="rgb(228,150,43)" fg:x="117" fg:w="1"/><text x="9.6476%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.3976%" y="645" width="0.0803%" height="15" fill="rgb(221,228,36)" fg:x="117" fg:w="1"/><text x="9.6476%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.3976%" y="629" width="0.0803%" height="15" fill="rgb(232,116,17)" fg:x="117" fg:w="1"/><text x="9.6476%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.3976%" y="613" width="0.0803%" height="15" fill="rgb(220,110,51)" fg:x="117" fg:w="1"/><text x="9.6476%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.3976%" y="597" width="0.0803%" height="15" fill="rgb(207,26,25)" fg:x="117" fg:w="1"/><text x="9.6476%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.3976%" y="581" width="0.0803%" height="15" fill="rgb(223,58,19)" fg:x="117" fg:w="1"/><text x="9.6476%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.3976%" y="565" width="0.0803%" height="15" fill="rgb(234,125,39)" fg:x="117" fg:w="1"/><text x="9.6476%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.3976%" y="549" width="0.0803%" height="15" fill="rgb(241,48,36)" fg:x="117" fg:w="1"/><text x="9.6476%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.3976%" y="533" width="0.0803%" height="15" fill="rgb(217,148,51)" fg:x="117" fg:w="1"/><text x="9.6476%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.3976%" y="517" width="0.0803%" height="15" fill="rgb(247,17,25)" fg:x="117" fg:w="1"/><text x="9.6476%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.3976%" y="501" width="0.0803%" height="15" fill="rgb(219,89,38)" fg:x="117" fg:w="1"/><text x="9.6476%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.3976%" y="485" width="0.0803%" height="15" fill="rgb(220,145,2)" fg:x="117" fg:w="1"/><text x="9.6476%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.3976%" y="469" width="0.0803%" height="15" fill="rgb(244,66,47)" fg:x="117" fg:w="1"/><text x="9.6476%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.3976%" y="453" width="0.0803%" height="15" fill="rgb(226,182,5)" fg:x="117" fg:w="1"/><text x="9.6476%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.4779%" y="661" width="0.0803%" height="15" fill="rgb(211,98,20)" fg:x="118" fg:w="1"/><text x="9.7279%" y="671.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="9.5582%" y="661" width="0.0803%" height="15" fill="rgb(217,103,52)" fg:x="119" fg:w="1"/><text x="9.8082%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="9.5582%" y="645" width="0.0803%" height="15" fill="rgb(208,125,52)" fg:x="119" fg:w="1"/><text x="9.8082%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.5582%" y="629" width="0.0803%" height="15" fill="rgb(244,70,13)" fg:x="119" fg:w="1"/><text x="9.8082%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="9.6386%" y="597" width="0.0803%" height="15" fill="rgb(253,124,3)" fg:x="120" fg:w="1"/><text x="9.8886%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="9.6386%" y="613" width="0.1606%" height="15" fill="rgb(222,145,32)" fg:x="120" fg:w="2"/><text x="9.8886%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.7189%" y="597" width="0.0803%" height="15" fill="rgb(232,183,47)" fg:x="121" fg:w="1"/><text x="9.9689%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.7189%" y="581" width="0.0803%" height="15" fill="rgb(246,226,4)" fg:x="121" fg:w="1"/><text x="9.9689%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.7189%" y="565" width="0.0803%" height="15" fill="rgb(228,185,46)" fg:x="121" fg:w="1"/><text x="9.9689%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.7189%" y="549" width="0.0803%" height="15" fill="rgb(213,196,4)" fg:x="121" fg:w="1"/><text x="9.9689%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="9.6386%" y="645" width="0.2410%" height="15" fill="rgb(212,2,45)" fg:x="120" fg:w="3"/><text x="9.8886%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="9.6386%" y="629" width="0.2410%" height="15" fill="rgb(217,145,50)" fg:x="120" fg:w="3"/><text x="9.8886%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7992%" y="613" width="0.0803%" height="15" fill="rgb(242,10,46)" fg:x="122" fg:w="1"/><text x="10.0492%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7992%" y="597" width="0.0803%" height="15" fill="rgb(252,91,48)" fg:x="122" fg:w="1"/><text x="10.0492%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7992%" y="581" width="0.0803%" height="15" fill="rgb(216,72,13)" fg:x="122" fg:w="1"/><text x="10.0492%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7992%" y="565" width="0.0803%" height="15" fill="rgb(219,6,37)" fg:x="122" fg:w="1"/><text x="10.0492%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="9.3976%" y="677" width="0.5622%" height="15" fill="rgb(236,185,40)" fg:x="117" fg:w="7"/><text x="9.6476%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="9.6386%" y="661" width="0.3213%" height="15" fill="rgb(208,81,48)" fg:x="120" fg:w="4"/><text x="9.8886%" y="671.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="9.8795%" y="645" width="0.0803%" height="15" fill="rgb(211,42,33)" fg:x="123" fg:w="1"/><text x="10.1295%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8795%" y="629" width="0.0803%" height="15" fill="rgb(211,90,39)" fg:x="123" fg:w="1"/><text x="10.1295%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.8795%" y="613" width="0.0803%" height="15" fill="rgb(218,136,12)" fg:x="123" fg:w="1"/><text x="10.1295%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.80%)</title><rect x="9.2369%" y="693" width="0.8032%" height="15" fill="rgb(234,12,32)" fg:x="115" fg:w="10"/><text x="9.4869%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.9598%" y="677" width="0.0803%" height="15" fill="rgb(221,164,18)" fg:x="124" fg:w="1"/><text x="10.2098%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.9598%" y="661" width="0.0803%" height="15" fill="rgb(239,135,14)" fg:x="124" fg:w="1"/><text x="10.2098%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.9598%" y="645" width="0.0803%" height="15" fill="rgb(226,198,47)" fg:x="124" fg:w="1"/><text x="10.2098%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.9598%" y="629" width="0.0803%" height="15" fill="rgb(244,121,47)" fg:x="124" fg:w="1"/><text x="10.2098%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="10.0402%" y="645" width="0.0803%" height="15" fill="rgb(226,21,48)" fg:x="125" fg:w="1"/><text x="10.2902%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.0402%" y="629" width="0.0803%" height="15" fill="rgb(215,178,47)" fg:x="125" fg:w="1"/><text x="10.2902%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="10.0402%" y="693" width="0.1606%" height="15" fill="rgb(206,212,19)" fg:x="125" fg:w="2"/><text x="10.2902%" y="703.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="10.0402%" y="677" width="0.1606%" height="15" fill="rgb(230,104,34)" fg:x="125" fg:w="2"/><text x="10.2902%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="10.0402%" y="661" width="0.1606%" height="15" fill="rgb(210,96,51)" fg:x="125" fg:w="2"/><text x="10.2902%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1205%" y="645" width="0.0803%" height="15" fill="rgb(229,111,47)" fg:x="126" fg:w="1"/><text x="10.3705%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.1205%" y="629" width="0.0803%" height="15" fill="rgb(218,174,45)" fg:x="126" fg:w="1"/><text x="10.3705%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1205%" y="613" width="0.0803%" height="15" fill="rgb(215,21,32)" fg:x="126" fg:w="1"/><text x="10.3705%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.1205%" y="597" width="0.0803%" height="15" fill="rgb(235,72,21)" fg:x="126" fg:w="1"/><text x="10.3705%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1205%" y="581" width="0.0803%" height="15" fill="rgb(250,113,30)" fg:x="126" fg:w="1"/><text x="10.3705%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="10.2008%" y="645" width="0.0803%" height="15" fill="rgb(244,136,34)" fg:x="127" fg:w="1"/><text x="10.4508%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="10.2008%" y="629" width="0.0803%" height="15" fill="rgb(213,226,47)" fg:x="127" fg:w="1"/><text x="10.4508%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.2008%" y="613" width="0.0803%" height="15" fill="rgb(224,136,40)" fg:x="127" fg:w="1"/><text x="10.4508%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.2008%" y="597" width="0.0803%" height="15" fill="rgb(253,124,12)" fg:x="127" fg:w="1"/><text x="10.4508%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.2008%" y="581" width="0.0803%" height="15" fill="rgb(210,67,8)" fg:x="127" fg:w="1"/><text x="10.4508%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.2008%" y="565" width="0.0803%" height="15" fill="rgb(210,204,0)" fg:x="127" fg:w="1"/><text x="10.4508%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.2008%" y="549" width="0.0803%" height="15" fill="rgb(217,179,22)" fg:x="127" fg:w="1"/><text x="10.4508%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.2008%" y="533" width="0.0803%" height="15" fill="rgb(237,192,33)" fg:x="127" fg:w="1"/><text x="10.4508%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.2008%" y="517" width="0.0803%" height="15" fill="rgb(211,104,28)" fg:x="127" fg:w="1"/><text x="10.4508%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.2008%" y="501" width="0.0803%" height="15" fill="rgb(214,75,30)" fg:x="127" fg:w="1"/><text x="10.4508%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.2008%" y="485" width="0.0803%" height="15" fill="rgb(220,227,12)" fg:x="127" fg:w="1"/><text x="10.4508%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.2008%" y="469" width="0.0803%" height="15" fill="rgb(233,134,28)" fg:x="127" fg:w="1"/><text x="10.4508%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.2008%" y="453" width="0.0803%" height="15" fill="rgb(215,146,24)" fg:x="127" fg:w="1"/><text x="10.4508%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.2008%" y="437" width="0.0803%" height="15" fill="rgb(248,227,20)" fg:x="127" fg:w="1"/><text x="10.4508%" y="447.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="10.2008%" y="677" width="0.1606%" height="15" fill="rgb(250,44,42)" fg:x="127" fg:w="2"/><text x="10.4508%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="10.2008%" y="661" width="0.1606%" height="15" fill="rgb(219,5,35)" fg:x="127" fg:w="2"/><text x="10.4508%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="10.2811%" y="645" width="0.0803%" height="15" fill="rgb(241,132,32)" fg:x="128" fg:w="1"/><text x="10.5311%" y="655.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="10.2811%" y="629" width="0.0803%" height="15" fill="rgb(234,212,51)" fg:x="128" fg:w="1"/><text x="10.5311%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="10.3614%" y="677" width="0.0803%" height="15" fill="rgb(242,173,29)" fg:x="129" fg:w="1"/><text x="10.6114%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="10.3614%" y="661" width="0.0803%" height="15" fill="rgb(212,159,2)" fg:x="129" fg:w="1"/><text x="10.6114%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4418%" y="597" width="0.0803%" height="15" fill="rgb(238,165,31)" fg:x="130" fg:w="1"/><text x="10.6918%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4418%" y="581" width="0.0803%" height="15" fill="rgb(241,57,36)" fg:x="130" fg:w="1"/><text x="10.6918%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4418%" y="565" width="0.0803%" height="15" fill="rgb(249,7,4)" fg:x="130" fg:w="1"/><text x="10.6918%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.4418%" y="549" width="0.0803%" height="15" fill="rgb(250,137,44)" fg:x="130" fg:w="1"/><text x="10.6918%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.4418%" y="533" width="0.0803%" height="15" fill="rgb(244,185,1)" fg:x="130" fg:w="1"/><text x="10.6918%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.4418%" y="517" width="0.0803%" height="15" fill="rgb(216,5,53)" fg:x="130" fg:w="1"/><text x="10.6918%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.4418%" y="501" width="0.0803%" height="15" fill="rgb(234,89,21)" fg:x="130" fg:w="1"/><text x="10.6918%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.4418%" y="485" width="0.0803%" height="15" fill="rgb(250,81,43)" fg:x="130" fg:w="1"/><text x="10.6918%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.4418%" y="469" width="0.0803%" height="15" fill="rgb(243,132,11)" fg:x="130" fg:w="1"/><text x="10.6918%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.4418%" y="453" width="0.0803%" height="15" fill="rgb(253,159,28)" fg:x="130" fg:w="1"/><text x="10.6918%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.4418%" y="437" width="0.0803%" height="15" fill="rgb(237,167,34)" fg:x="130" fg:w="1"/><text x="10.6918%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.4418%" y="421" width="0.0803%" height="15" fill="rgb(237,16,50)" fg:x="130" fg:w="1"/><text x="10.6918%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.4418%" y="405" width="0.0803%" height="15" fill="rgb(247,125,2)" fg:x="130" fg:w="1"/><text x="10.6918%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.4418%" y="389" width="0.0803%" height="15" fill="rgb(254,35,3)" fg:x="130" fg:w="1"/><text x="10.6918%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4418%" y="373" width="0.0803%" height="15" fill="rgb(237,209,21)" fg:x="130" fg:w="1"/><text x="10.6918%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="10.4418%" y="629" width="0.1606%" height="15" fill="rgb(224,122,20)" fg:x="130" fg:w="2"/><text x="10.6918%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="10.4418%" y="613" width="0.1606%" height="15" fill="rgb(224,11,46)" fg:x="130" fg:w="2"/><text x="10.6918%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.5221%" y="597" width="0.0803%" height="15" fill="rgb(248,21,33)" fg:x="131" fg:w="1"/><text x="10.7721%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5221%" y="581" width="0.0803%" height="15" fill="rgb(222,144,7)" fg:x="131" fg:w="1"/><text x="10.7721%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (48 samples, 3.86%)</title><rect x="6.8273%" y="709" width="3.8554%" height="15" fill="rgb(205,141,37)" fg:x="85" fg:w="48"/><text x="7.0773%" y="719.50">plug..</text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="10.2008%" y="693" width="0.4819%" height="15" fill="rgb(237,130,8)" fg:x="127" fg:w="6"/><text x="10.4508%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="10.4418%" y="677" width="0.2410%" height="15" fill="rgb(209,179,39)" fg:x="130" fg:w="3"/><text x="10.6918%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="10.4418%" y="661" width="0.2410%" height="15" fill="rgb(207,52,17)" fg:x="130" fg:w="3"/><text x="10.6918%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="10.4418%" y="645" width="0.2410%" height="15" fill="rgb(253,158,17)" fg:x="130" fg:w="3"/><text x="10.6918%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="10.6024%" y="629" width="0.0803%" height="15" fill="rgb(208,19,53)" fg:x="132" fg:w="1"/><text x="10.8524%" y="639.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="10.6827%" y="677" width="0.0803%" height="15" fill="rgb(233,152,13)" fg:x="133" fg:w="1"/><text x="10.9327%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="10.6827%" y="661" width="0.0803%" height="15" fill="rgb(231,84,1)" fg:x="133" fg:w="1"/><text x="10.9327%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6827%" y="645" width="0.0803%" height="15" fill="rgb(229,142,48)" fg:x="133" fg:w="1"/><text x="10.9327%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="10.7631%" y="661" width="0.0803%" height="15" fill="rgb(248,70,29)" fg:x="134" fg:w="1"/><text x="11.0131%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="10.7631%" y="645" width="0.0803%" height="15" fill="rgb(250,85,7)" fg:x="134" fg:w="1"/><text x="11.0131%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.7631%" y="629" width="0.0803%" height="15" fill="rgb(235,140,43)" fg:x="134" fg:w="1"/><text x="11.0131%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.7631%" y="613" width="0.0803%" height="15" fill="rgb(216,0,5)" fg:x="134" fg:w="1"/><text x="11.0131%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.7631%" y="597" width="0.0803%" height="15" fill="rgb(223,167,29)" fg:x="134" fg:w="1"/><text x="11.0131%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.7631%" y="581" width="0.0803%" height="15" fill="rgb(229,150,33)" fg:x="134" fg:w="1"/><text x="11.0131%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.7631%" y="565" width="0.0803%" height="15" fill="rgb(227,26,52)" fg:x="134" fg:w="1"/><text x="11.0131%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="10.9237%" y="629" width="0.0803%" height="15" fill="rgb(250,60,52)" fg:x="136" fg:w="1"/><text x="11.1737%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="10.9237%" y="613" width="0.0803%" height="15" fill="rgb(228,81,46)" fg:x="136" fg:w="1"/><text x="11.1737%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="10.9237%" y="597" width="0.0803%" height="15" fill="rgb(225,218,31)" fg:x="136" fg:w="1"/><text x="11.1737%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.9237%" y="581" width="0.0803%" height="15" fill="rgb(230,35,16)" fg:x="136" fg:w="1"/><text x="11.1737%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.0040%" y="597" width="0.0803%" height="15" fill="rgb(247,100,0)" fg:x="137" fg:w="1"/><text x="11.2540%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (7 samples, 0.56%)</title><rect x="10.6827%" y="709" width="0.5622%" height="15" fill="rgb(223,135,11)" fg:x="133" fg:w="7"/><text x="10.9327%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (7 samples, 0.56%)</title><rect x="10.6827%" y="693" width="0.5622%" height="15" fill="rgb(207,136,0)" fg:x="133" fg:w="7"/><text x="10.9327%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="10.7631%" y="677" width="0.4819%" height="15" fill="rgb(246,131,25)" fg:x="134" fg:w="6"/><text x="11.0131%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="10.8434%" y="661" width="0.4016%" height="15" fill="rgb(209,47,12)" fg:x="135" fg:w="5"/><text x="11.0934%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="10.9237%" y="645" width="0.3213%" height="15" fill="rgb(221,25,16)" fg:x="136" fg:w="4"/><text x="11.1737%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="11.0040%" y="629" width="0.2410%" height="15" fill="rgb(223,164,33)" fg:x="137" fg:w="3"/><text x="11.2540%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="11.0040%" y="613" width="0.2410%" height="15" fill="rgb(220,26,23)" fg:x="137" fg:w="3"/><text x="11.2540%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="11.0843%" y="597" width="0.1606%" height="15" fill="rgb(231,224,1)" fg:x="138" fg:w="2"/><text x="11.3343%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="11.0843%" y="581" width="0.1606%" height="15" fill="rgb(229,221,24)" fg:x="138" fg:w="2"/><text x="11.3343%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="11.0843%" y="565" width="0.1606%" height="15" fill="rgb(213,34,10)" fg:x="138" fg:w="2"/><text x="11.3343%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="11.0843%" y="549" width="0.1606%" height="15" fill="rgb(215,33,11)" fg:x="138" fg:w="2"/><text x="11.3343%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="11.0843%" y="533" width="0.1606%" height="15" fill="rgb(216,20,41)" fg:x="138" fg:w="2"/><text x="11.3343%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="11.0843%" y="517" width="0.1606%" height="15" fill="rgb(228,43,31)" fg:x="138" fg:w="2"/><text x="11.3343%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.1647%" y="501" width="0.0803%" height="15" fill="rgb(227,83,26)" fg:x="139" fg:w="1"/><text x="11.4147%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="11.2450%" y="677" width="0.0803%" height="15" fill="rgb(217,168,19)" fg:x="140" fg:w="1"/><text x="11.4950%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="11.2450%" y="693" width="0.1606%" height="15" fill="rgb(231,34,33)" fg:x="140" fg:w="2"/><text x="11.4950%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.3253%" y="677" width="0.0803%" height="15" fill="rgb(230,120,51)" fg:x="141" fg:w="1"/><text x="11.5753%" y="687.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="11.4056%" y="661" width="0.0803%" height="15" fill="rgb(215,138,27)" fg:x="142" fg:w="1"/><text x="11.6556%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="11.4056%" y="645" width="0.0803%" height="15" fill="rgb(246,80,47)" fg:x="142" fg:w="1"/><text x="11.6556%" y="655.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="11.4056%" y="693" width="0.1606%" height="15" fill="rgb(215,57,53)" fg:x="142" fg:w="2"/><text x="11.6556%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="11.4056%" y="677" width="0.1606%" height="15" fill="rgb(229,137,5)" fg:x="142" fg:w="2"/><text x="11.6556%" y="687.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="11.4859%" y="661" width="0.0803%" height="15" fill="rgb(210,86,2)" fg:x="143" fg:w="1"/><text x="11.7359%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4859%" y="645" width="0.0803%" height="15" fill="rgb(231,226,51)" fg:x="143" fg:w="1"/><text x="11.7359%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.4859%" y="629" width="0.0803%" height="15" fill="rgb(216,62,29)" fg:x="143" fg:w="1"/><text x="11.7359%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4859%" y="613" width="0.0803%" height="15" fill="rgb(248,202,3)" fg:x="143" fg:w="1"/><text x="11.7359%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.5663%" y="661" width="0.0803%" height="15" fill="rgb(225,181,7)" fg:x="144" fg:w="1"/><text x="11.8163%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="11.5663%" y="645" width="0.0803%" height="15" fill="rgb(247,170,54)" fg:x="144" fg:w="1"/><text x="11.8163%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.6466%" y="661" width="0.0803%" height="15" fill="rgb(236,204,33)" fg:x="145" fg:w="1"/><text x="11.8966%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.6466%" y="645" width="0.0803%" height="15" fill="rgb(216,45,30)" fg:x="145" fg:w="1"/><text x="11.8966%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.6466%" y="629" width="0.0803%" height="15" fill="rgb(213,203,16)" fg:x="145" fg:w="1"/><text x="11.8966%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.6466%" y="613" width="0.0803%" height="15" fill="rgb(215,46,16)" fg:x="145" fg:w="1"/><text x="11.8966%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.6466%" y="597" width="0.0803%" height="15" fill="rgb(217,162,46)" fg:x="145" fg:w="1"/><text x="11.8966%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.6466%" y="581" width="0.0803%" height="15" fill="rgb(224,189,20)" fg:x="145" fg:w="1"/><text x="11.8966%" y="591.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="11.7269%" y="661" width="0.0803%" height="15" fill="rgb(232,35,51)" fg:x="146" fg:w="1"/><text x="11.9769%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="11.8072%" y="645" width="0.0803%" height="15" fill="rgb(243,221,46)" fg:x="147" fg:w="1"/><text x="12.0572%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="11.8072%" y="629" width="0.0803%" height="15" fill="rgb(248,16,16)" fg:x="147" fg:w="1"/><text x="12.0572%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="11.8072%" y="613" width="0.0803%" height="15" fill="rgb(220,168,13)" fg:x="147" fg:w="1"/><text x="12.0572%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.8072%" y="597" width="0.0803%" height="15" fill="rgb(243,102,39)" fg:x="147" fg:w="1"/><text x="12.0572%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="11.8876%" y="613" width="0.0803%" height="15" fill="rgb(245,82,32)" fg:x="148" fg:w="1"/><text x="12.1376%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="11.8876%" y="597" width="0.0803%" height="15" fill="rgb(230,164,19)" fg:x="148" fg:w="1"/><text x="12.1376%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (110 samples, 8.84%)</title><rect x="3.2129%" y="725" width="8.8353%" height="15" fill="rgb(221,9,41)" fg:x="40" fg:w="110"/><text x="3.4629%" y="735.50">&lt;tests::Hold..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (10 samples, 0.80%)</title><rect x="11.2450%" y="709" width="0.8032%" height="15" fill="rgb(216,93,0)" fg:x="140" fg:w="10"/><text x="11.4950%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="11.5663%" y="693" width="0.4819%" height="15" fill="rgb(235,113,9)" fg:x="144" fg:w="6"/><text x="11.8163%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="11.5663%" y="677" width="0.4819%" height="15" fill="rgb(209,224,10)" fg:x="144" fg:w="6"/><text x="11.8163%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="11.8072%" y="661" width="0.2410%" height="15" fill="rgb(226,54,34)" fg:x="147" fg:w="3"/><text x="12.0572%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="11.8876%" y="645" width="0.1606%" height="15" fill="rgb(222,60,8)" fg:x="148" fg:w="2"/><text x="12.1376%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.8876%" y="629" width="0.1606%" height="15" fill="rgb(248,228,41)" fg:x="148" fg:w="2"/><text x="12.1376%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="11.9679%" y="613" width="0.0803%" height="15" fill="rgb(226,31,32)" fg:x="149" fg:w="1"/><text x="12.2179%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.9679%" y="597" width="0.0803%" height="15" fill="rgb(242,132,49)" fg:x="149" fg:w="1"/><text x="12.2179%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.08%)</title><rect x="12.0482%" y="725" width="0.0803%" height="15" fill="rgb(224,194,19)" fg:x="150" fg:w="1"/><text x="12.2982%" y="735.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.1285%" y="709" width="0.0803%" height="15" fill="rgb(232,200,51)" fg:x="151" fg:w="1"/><text x="12.3785%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="12.2088%" y="709" width="0.0803%" height="15" fill="rgb(235,60,46)" fg:x="152" fg:w="1"/><text x="12.4588%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.2088%" y="693" width="0.0803%" height="15" fill="rgb(240,109,52)" fg:x="152" fg:w="1"/><text x="12.4588%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.2892%" y="645" width="0.0803%" height="15" fill="rgb(215,78,37)" fg:x="153" fg:w="1"/><text x="12.5392%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.2892%" y="629" width="0.0803%" height="15" fill="rgb(225,141,7)" fg:x="153" fg:w="1"/><text x="12.5392%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.2892%" y="613" width="0.0803%" height="15" fill="rgb(216,102,54)" fg:x="153" fg:w="1"/><text x="12.5392%" y="623.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (2 samples, 0.16%)</title><rect x="12.2892%" y="693" width="0.1606%" height="15" fill="rgb(238,143,13)" fg:x="153" fg:w="2"/><text x="12.5392%" y="703.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (2 samples, 0.16%)</title><rect x="12.2892%" y="677" width="0.1606%" height="15" fill="rgb(219,45,51)" fg:x="153" fg:w="2"/><text x="12.5392%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="12.2892%" y="661" width="0.1606%" height="15" fill="rgb(242,105,46)" fg:x="153" fg:w="2"/><text x="12.5392%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.3695%" y="645" width="0.0803%" height="15" fill="rgb(206,154,49)" fg:x="154" fg:w="1"/><text x="12.6195%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3695%" y="629" width="0.0803%" height="15" fill="rgb(239,215,4)" fg:x="154" fg:w="1"/><text x="12.6195%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="12.3695%" y="613" width="0.0803%" height="15" fill="rgb(238,82,17)" fg:x="154" fg:w="1"/><text x="12.6195%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="12.3695%" y="597" width="0.0803%" height="15" fill="rgb(242,49,30)" fg:x="154" fg:w="1"/><text x="12.6195%" y="607.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="12.3695%" y="581" width="0.0803%" height="15" fill="rgb(248,5,16)" fg:x="154" fg:w="1"/><text x="12.6195%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.3695%" y="565" width="0.0803%" height="15" fill="rgb(237,138,32)" fg:x="154" fg:w="1"/><text x="12.6195%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.3695%" y="549" width="0.0803%" height="15" fill="rgb(235,79,45)" fg:x="154" fg:w="1"/><text x="12.6195%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.3695%" y="533" width="0.0803%" height="15" fill="rgb(213,105,25)" fg:x="154" fg:w="1"/><text x="12.6195%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.4498%" y="693" width="0.0803%" height="15" fill="rgb(251,131,7)" fg:x="155" fg:w="1"/><text x="12.6998%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.4498%" y="677" width="0.0803%" height="15" fill="rgb(211,155,7)" fg:x="155" fg:w="1"/><text x="12.6998%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.4498%" y="661" width="0.0803%" height="15" fill="rgb(243,70,15)" fg:x="155" fg:w="1"/><text x="12.6998%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="12.5301%" y="613" width="0.1606%" height="15" fill="rgb(215,171,2)" fg:x="156" fg:w="2"/><text x="12.7801%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.5301%" y="597" width="0.1606%" height="15" fill="rgb(244,121,35)" fg:x="156" fg:w="2"/><text x="12.7801%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.5301%" y="581" width="0.1606%" height="15" fill="rgb(249,147,17)" fg:x="156" fg:w="2"/><text x="12.7801%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.6104%" y="565" width="0.0803%" height="15" fill="rgb(241,193,52)" fg:x="157" fg:w="1"/><text x="12.8604%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.7711%" y="597" width="0.1606%" height="15" fill="rgb(217,159,39)" fg:x="159" fg:w="2"/><text x="13.0211%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.7711%" y="581" width="0.1606%" height="15" fill="rgb(248,110,0)" fg:x="159" fg:w="2"/><text x="13.0211%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.7711%" y="565" width="0.1606%" height="15" fill="rgb(233,227,0)" fg:x="159" fg:w="2"/><text x="13.0211%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.8514%" y="549" width="0.0803%" height="15" fill="rgb(252,55,2)" fg:x="160" fg:w="1"/><text x="13.1014%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.0120%" y="533" width="0.0803%" height="15" fill="rgb(224,194,24)" fg:x="162" fg:w="1"/><text x="13.2620%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.0120%" y="517" width="0.0803%" height="15" fill="rgb(247,5,33)" fg:x="162" fg:w="1"/><text x="13.2620%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="13.0120%" y="565" width="0.1606%" height="15" fill="rgb(242,66,47)" fg:x="162" fg:w="2"/><text x="13.2620%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="13.0120%" y="549" width="0.1606%" height="15" fill="rgb(213,107,12)" fg:x="162" fg:w="2"/><text x="13.2620%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.0924%" y="533" width="0.0803%" height="15" fill="rgb(206,131,1)" fg:x="163" fg:w="1"/><text x="13.3424%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="13.0120%" y="581" width="0.2410%" height="15" fill="rgb(214,9,36)" fg:x="162" fg:w="3"/><text x="13.2620%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.1727%" y="565" width="0.0803%" height="15" fill="rgb(251,215,18)" fg:x="164" fg:w="1"/><text x="13.4227%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.2530%" y="565" width="0.0803%" height="15" fill="rgb(251,64,9)" fg:x="165" fg:w="1"/><text x="13.5030%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.2530%" y="549" width="0.0803%" height="15" fill="rgb(235,68,21)" fg:x="165" fg:w="1"/><text x="13.5030%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.2530%" y="533" width="0.0803%" height="15" fill="rgb(240,69,38)" fg:x="165" fg:w="1"/><text x="13.5030%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="13.3333%" y="549" width="0.0803%" height="15" fill="rgb(231,18,27)" fg:x="166" fg:w="1"/><text x="13.5833%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.3333%" y="533" width="0.0803%" height="15" fill="rgb(215,154,25)" fg:x="166" fg:w="1"/><text x="13.5833%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.3333%" y="517" width="0.0803%" height="15" fill="rgb(224,33,46)" fg:x="166" fg:w="1"/><text x="13.5833%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.3333%" y="501" width="0.0803%" height="15" fill="rgb(248,191,53)" fg:x="166" fg:w="1"/><text x="13.5833%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="13.2530%" y="581" width="0.2410%" height="15" fill="rgb(231,3,37)" fg:x="165" fg:w="3"/><text x="13.5030%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="13.3333%" y="565" width="0.1606%" height="15" fill="rgb(209,152,2)" fg:x="166" fg:w="2"/><text x="13.5833%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.4137%" y="549" width="0.0803%" height="15" fill="rgb(212,208,43)" fg:x="167" fg:w="1"/><text x="13.6637%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="12.9317%" y="597" width="0.6426%" height="15" fill="rgb(208,60,49)" fg:x="161" fg:w="8"/><text x="13.1817%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.4940%" y="581" width="0.0803%" height="15" fill="rgb(245,135,6)" fg:x="168" fg:w="1"/><text x="13.7440%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.4940%" y="565" width="0.0803%" height="15" fill="rgb(243,86,23)" fg:x="168" fg:w="1"/><text x="13.7440%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.4940%" y="549" width="0.0803%" height="15" fill="rgb(223,7,20)" fg:x="168" fg:w="1"/><text x="13.7440%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (16 samples, 1.29%)</title><rect x="12.5301%" y="629" width="1.2851%" height="15" fill="rgb(212,182,17)" fg:x="156" fg:w="16"/><text x="12.7801%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.12%)</title><rect x="12.6908%" y="613" width="1.1245%" height="15" fill="rgb(237,94,50)" fg:x="158" fg:w="14"/><text x="12.9408%" y="623.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="13.5743%" y="597" width="0.2410%" height="15" fill="rgb(232,185,44)" fg:x="169" fg:w="3"/><text x="13.8243%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.7349%" y="581" width="0.0803%" height="15" fill="rgb(205,50,36)" fg:x="171" fg:w="1"/><text x="13.9849%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.8153%" y="565" width="0.0803%" height="15" fill="rgb(252,32,32)" fg:x="172" fg:w="1"/><text x="14.0653%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.8956%" y="565" width="0.0803%" height="15" fill="rgb(241,123,33)" fg:x="173" fg:w="1"/><text x="14.1456%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.9759%" y="549" width="0.0803%" height="15" fill="rgb(212,140,16)" fg:x="174" fg:w="1"/><text x="14.2259%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.0562%" y="517" width="0.0803%" height="15" fill="rgb(247,132,5)" fg:x="175" fg:w="1"/><text x="14.3062%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="14.0562%" y="549" width="0.1606%" height="15" fill="rgb(209,137,38)" fg:x="175" fg:w="2"/><text x="14.3062%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="14.0562%" y="533" width="0.1606%" height="15" fill="rgb(248,32,42)" fg:x="175" fg:w="2"/><text x="14.3062%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1365%" y="517" width="0.0803%" height="15" fill="rgb(216,188,40)" fg:x="176" fg:w="1"/><text x="14.3865%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1365%" y="501" width="0.0803%" height="15" fill="rgb(209,127,53)" fg:x="176" fg:w="1"/><text x="14.3865%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1365%" y="485" width="0.0803%" height="15" fill="rgb(254,162,9)" fg:x="176" fg:w="1"/><text x="14.3865%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="13.8153%" y="629" width="0.4819%" height="15" fill="rgb(219,183,10)" fg:x="172" fg:w="6"/><text x="14.0653%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="13.8153%" y="613" width="0.4819%" height="15" fill="rgb(217,192,21)" fg:x="172" fg:w="6"/><text x="14.0653%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="13.8153%" y="597" width="0.4819%" height="15" fill="rgb(251,89,27)" fg:x="172" fg:w="6"/><text x="14.0653%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="13.8153%" y="581" width="0.4819%" height="15" fill="rgb(253,55,28)" fg:x="172" fg:w="6"/><text x="14.0653%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="13.9759%" y="565" width="0.3213%" height="15" fill="rgb(216,159,8)" fg:x="174" fg:w="4"/><text x="14.2259%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.2169%" y="549" width="0.0803%" height="15" fill="rgb(231,228,44)" fg:x="177" fg:w="1"/><text x="14.4669%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.2169%" y="533" width="0.0803%" height="15" fill="rgb(247,34,48)" fg:x="177" fg:w="1"/><text x="14.4669%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.2972%" y="565" width="0.0803%" height="15" fill="rgb(247,222,18)" fg:x="178" fg:w="1"/><text x="14.5472%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.4578%" y="549" width="0.1606%" height="15" fill="rgb(227,49,4)" fg:x="180" fg:w="2"/><text x="14.7078%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="14.2972%" y="597" width="0.4016%" height="15" fill="rgb(219,189,53)" fg:x="178" fg:w="5"/><text x="14.5472%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="14.2972%" y="581" width="0.4016%" height="15" fill="rgb(241,160,53)" fg:x="178" fg:w="5"/><text x="14.5472%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="14.3775%" y="565" width="0.3213%" height="15" fill="rgb(227,115,4)" fg:x="179" fg:w="4"/><text x="14.6275%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.6185%" y="549" width="0.0803%" height="15" fill="rgb(215,28,28)" fg:x="182" fg:w="1"/><text x="14.8685%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.6185%" y="533" width="0.0803%" height="15" fill="rgb(237,143,40)" fg:x="182" fg:w="1"/><text x="14.8685%" y="543.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="14.6988%" y="597" width="0.0803%" height="15" fill="rgb(205,107,24)" fg:x="183" fg:w="1"/><text x="14.9488%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="14.6988%" y="581" width="0.0803%" height="15" fill="rgb(209,112,35)" fg:x="183" fg:w="1"/><text x="14.9488%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.6988%" y="565" width="0.0803%" height="15" fill="rgb(206,135,5)" fg:x="183" fg:w="1"/><text x="14.9488%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="14.7791%" y="581" width="0.1606%" height="15" fill="rgb(227,217,38)" fg:x="184" fg:w="2"/><text x="15.0291%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="14.8594%" y="565" width="0.0803%" height="15" fill="rgb(205,0,41)" fg:x="185" fg:w="1"/><text x="15.1094%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.8594%" y="549" width="0.0803%" height="15" fill="rgb(220,20,40)" fg:x="185" fg:w="1"/><text x="15.1094%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (9 samples, 0.72%)</title><rect x="14.2972%" y="613" width="0.7229%" height="15" fill="rgb(216,145,3)" fg:x="178" fg:w="9"/><text x="14.5472%" y="623.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="14.7791%" y="597" width="0.2410%" height="15" fill="rgb(207,130,51)" fg:x="184" fg:w="3"/><text x="15.0291%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="14.9398%" y="581" width="0.0803%" height="15" fill="rgb(252,93,13)" fg:x="186" fg:w="1"/><text x="15.1898%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.9398%" y="565" width="0.0803%" height="15" fill="rgb(210,105,15)" fg:x="186" fg:w="1"/><text x="15.1898%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9398%" y="549" width="0.0803%" height="15" fill="rgb(212,126,31)" fg:x="186" fg:w="1"/><text x="15.1898%" y="559.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="15.1807%" y="581" width="0.0803%" height="15" fill="rgb(241,167,46)" fg:x="189" fg:w="1"/><text x="15.4307%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.2610%" y="581" width="0.0803%" height="15" fill="rgb(217,143,19)" fg:x="190" fg:w="1"/><text x="15.5110%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="15.3414%" y="581" width="0.1606%" height="15" fill="rgb(235,117,33)" fg:x="191" fg:w="2"/><text x="15.5914%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="15.3414%" y="565" width="0.1606%" height="15" fill="rgb(247,95,6)" fg:x="191" fg:w="2"/><text x="15.5914%" y="575.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="15.5020%" y="581" width="0.0803%" height="15" fill="rgb(243,206,43)" fg:x="193" fg:w="1"/><text x="15.7520%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.5020%" y="565" width="0.0803%" height="15" fill="rgb(229,65,54)" fg:x="193" fg:w="1"/><text x="15.7520%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.7430%" y="517" width="0.0803%" height="15" fill="rgb(247,137,34)" fg:x="196" fg:w="1"/><text x="15.9930%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="15.7430%" y="533" width="0.1606%" height="15" fill="rgb(245,174,44)" fg:x="196" fg:w="2"/><text x="15.9930%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="15.8233%" y="517" width="0.0803%" height="15" fill="rgb(223,64,15)" fg:x="197" fg:w="1"/><text x="16.0733%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="15.9036%" y="533" width="0.1606%" height="15" fill="rgb(243,153,36)" fg:x="198" fg:w="2"/><text x="16.1536%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.9839%" y="517" width="0.0803%" height="15" fill="rgb(252,23,4)" fg:x="199" fg:w="1"/><text x="16.2339%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.9839%" y="501" width="0.0803%" height="15" fill="rgb(209,132,13)" fg:x="199" fg:w="1"/><text x="16.2339%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.9839%" y="485" width="0.0803%" height="15" fill="rgb(209,196,21)" fg:x="199" fg:w="1"/><text x="16.2339%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.9839%" y="469" width="0.0803%" height="15" fill="rgb(252,197,1)" fg:x="199" fg:w="1"/><text x="16.2339%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.9839%" y="453" width="0.0803%" height="15" fill="rgb(229,42,46)" fg:x="199" fg:w="1"/><text x="16.2339%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="16.0643%" y="517" width="0.0803%" height="15" fill="rgb(219,85,8)" fg:x="200" fg:w="1"/><text x="16.3143%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.1446%" y="501" width="0.0803%" height="15" fill="rgb(223,185,14)" fg:x="201" fg:w="1"/><text x="16.3946%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.1446%" y="485" width="0.0803%" height="15" fill="rgb(217,196,18)" fg:x="201" fg:w="1"/><text x="16.3946%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.2249%" y="469" width="0.0803%" height="15" fill="rgb(220,122,37)" fg:x="202" fg:w="1"/><text x="16.4749%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="16.1446%" y="517" width="0.3213%" height="15" fill="rgb(236,135,33)" fg:x="201" fg:w="4"/><text x="16.3946%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="16.2249%" y="501" width="0.2410%" height="15" fill="rgb(222,86,54)" fg:x="202" fg:w="3"/><text x="16.4749%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="16.2249%" y="485" width="0.2410%" height="15" fill="rgb(227,42,22)" fg:x="202" fg:w="3"/><text x="16.4749%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="16.3052%" y="469" width="0.1606%" height="15" fill="rgb(243,101,27)" fg:x="203" fg:w="2"/><text x="16.5552%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.3052%" y="453" width="0.1606%" height="15" fill="rgb(229,100,8)" fg:x="203" fg:w="2"/><text x="16.5552%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.88%)</title><rect x="15.6627%" y="565" width="0.8835%" height="15" fill="rgb(252,68,10)" fg:x="195" fg:w="11"/><text x="15.9127%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.88%)</title><rect x="15.6627%" y="549" width="0.8835%" height="15" fill="rgb(219,19,31)" fg:x="195" fg:w="11"/><text x="15.9127%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="16.0643%" y="533" width="0.4819%" height="15" fill="rgb(246,150,44)" fg:x="200" fg:w="6"/><text x="16.3143%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.4659%" y="517" width="0.0803%" height="15" fill="rgb(211,14,39)" fg:x="205" fg:w="1"/><text x="16.7159%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.5462%" y="565" width="0.0803%" height="15" fill="rgb(221,98,29)" fg:x="206" fg:w="1"/><text x="16.7962%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (21 samples, 1.69%)</title><rect x="15.0201%" y="613" width="1.6867%" height="15" fill="rgb(221,70,26)" fg:x="187" fg:w="21"/><text x="15.2701%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (21 samples, 1.69%)</title><rect x="15.0201%" y="597" width="1.6867%" height="15" fill="rgb(236,146,30)" fg:x="187" fg:w="21"/><text x="15.2701%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (14 samples, 1.12%)</title><rect x="15.5823%" y="581" width="1.1245%" height="15" fill="rgb(226,94,34)" fg:x="194" fg:w="14"/><text x="15.8323%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.6265%" y="565" width="0.0803%" height="15" fill="rgb(248,132,21)" fg:x="207" fg:w="1"/><text x="16.8765%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="16.7068%" y="469" width="0.1606%" height="15" fill="rgb(245,43,50)" fg:x="208" fg:w="2"/><text x="16.9568%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="16.7068%" y="453" width="0.1606%" height="15" fill="rgb(245,132,31)" fg:x="208" fg:w="2"/><text x="16.9568%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="16.7871%" y="437" width="0.0803%" height="15" fill="rgb(230,171,4)" fg:x="209" fg:w="1"/><text x="17.0371%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="16.7871%" y="421" width="0.0803%" height="15" fill="rgb(235,6,45)" fg:x="209" fg:w="1"/><text x="17.0371%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="16.7871%" y="405" width="0.0803%" height="15" fill="rgb(220,80,28)" fg:x="209" fg:w="1"/><text x="17.0371%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="16.7871%" y="389" width="0.0803%" height="15" fill="rgb(242,171,9)" fg:x="209" fg:w="1"/><text x="17.0371%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.7871%" y="373" width="0.0803%" height="15" fill="rgb(214,135,29)" fg:x="209" fg:w="1"/><text x="17.0371%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.7871%" y="357" width="0.0803%" height="15" fill="rgb(221,229,16)" fg:x="209" fg:w="1"/><text x="17.0371%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="16.7871%" y="341" width="0.0803%" height="15" fill="rgb(253,59,46)" fg:x="209" fg:w="1"/><text x="17.0371%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="16.9478%" y="421" width="0.0803%" height="15" fill="rgb(250,147,20)" fg:x="211" fg:w="1"/><text x="17.1978%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="16.9478%" y="437" width="0.1606%" height="15" fill="rgb(236,64,48)" fg:x="211" fg:w="2"/><text x="17.1978%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.0281%" y="421" width="0.0803%" height="15" fill="rgb(240,37,42)" fg:x="212" fg:w="1"/><text x="17.2781%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.0281%" y="405" width="0.0803%" height="15" fill="rgb(220,41,50)" fg:x="212" fg:w="1"/><text x="17.2781%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.0281%" y="389" width="0.0803%" height="15" fill="rgb(216,51,14)" fg:x="212" fg:w="1"/><text x="17.2781%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="16.7068%" y="485" width="0.5622%" height="15" fill="rgb(215,83,10)" fg:x="208" fg:w="7"/><text x="16.9568%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="16.8675%" y="469" width="0.4016%" height="15" fill="rgb(206,144,17)" fg:x="210" fg:w="5"/><text x="17.1175%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="16.9478%" y="453" width="0.3213%" height="15" fill="rgb(219,196,37)" fg:x="211" fg:w="4"/><text x="17.1978%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="17.1084%" y="437" width="0.1606%" height="15" fill="rgb(226,135,26)" fg:x="213" fg:w="2"/><text x="17.3584%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="16.7068%" y="549" width="0.6426%" height="15" fill="rgb(237,195,40)" fg:x="208" fg:w="8"/><text x="16.9568%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="16.7068%" y="533" width="0.6426%" height="15" fill="rgb(228,182,42)" fg:x="208" fg:w="8"/><text x="16.9568%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="16.7068%" y="517" width="0.6426%" height="15" fill="rgb(224,135,50)" fg:x="208" fg:w="8"/><text x="16.9568%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="16.7068%" y="501" width="0.6426%" height="15" fill="rgb(236,215,34)" fg:x="208" fg:w="8"/><text x="16.9568%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.2691%" y="485" width="0.0803%" height="15" fill="rgb(244,213,27)" fg:x="215" fg:w="1"/><text x="17.5191%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.2691%" y="469" width="0.0803%" height="15" fill="rgb(233,37,53)" fg:x="215" fg:w="1"/><text x="17.5191%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2691%" y="453" width="0.0803%" height="15" fill="rgb(222,132,14)" fg:x="215" fg:w="1"/><text x="17.5191%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="17.3494%" y="549" width="0.1606%" height="15" fill="rgb(219,202,29)" fg:x="216" fg:w="2"/><text x="17.5994%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.4297%" y="533" width="0.0803%" height="15" fill="rgb(226,157,39)" fg:x="217" fg:w="1"/><text x="17.6797%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.5100%" y="517" width="0.0803%" height="15" fill="rgb(235,213,2)" fg:x="218" fg:w="1"/><text x="17.7600%" y="527.50"></text></g><g><title>engine::session::state::State::close (67 samples, 5.38%)</title><rect x="12.2892%" y="709" width="5.3815%" height="15" fill="rgb(250,121,2)" fg:x="153" fg:w="67"/><text x="12.5392%" y="719.50">engine:..</text></g><g><title>engine::session::state::State::flush_entities (64 samples, 5.14%)</title><rect x="12.5301%" y="693" width="5.1406%" height="15" fill="rgb(206,192,33)" fg:x="156" fg:w="64"/><text x="12.7801%" y="703.50">engine..</text></g><g><title>core::iter::adapters::try_process (64 samples, 5.14%)</title><rect x="12.5301%" y="677" width="5.1406%" height="15" fill="rgb(240,161,6)" fg:x="156" fg:w="64"/><text x="12.7801%" y="687.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (64 samples, 5.14%)</title><rect x="12.5301%" y="661" width="5.1406%" height="15" fill="rgb(246,53,30)" fg:x="156" fg:w="64"/><text x="12.7801%" y="671.50">&lt;alloc..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (64 samples, 5.14%)</title><rect x="12.5301%" y="645" width="5.1406%" height="15" fill="rgb(219,123,43)" fg:x="156" fg:w="64"/><text x="12.7801%" y="655.50">engine..</text></g><g><title>kernel::model::any_entity_changes (42 samples, 3.37%)</title><rect x="14.2972%" y="629" width="3.3735%" height="15" fill="rgb(236,53,49)" fg:x="178" fg:w="42"/><text x="14.5472%" y="639.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (12 samples, 0.96%)</title><rect x="16.7068%" y="613" width="0.9639%" height="15" fill="rgb(241,156,1)" fg:x="208" fg:w="12"/><text x="16.9568%" y="623.50"></text></g><g><title>serde_json::de::from_trait (12 samples, 0.96%)</title><rect x="16.7068%" y="597" width="0.9639%" height="15" fill="rgb(209,73,26)" fg:x="208" fg:w="12"/><text x="16.9568%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.96%)</title><rect x="16.7068%" y="581" width="0.9639%" height="15" fill="rgb(206,114,3)" fg:x="208" fg:w="12"/><text x="16.9568%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.96%)</title><rect x="16.7068%" y="565" width="0.9639%" height="15" fill="rgb(230,214,9)" fg:x="208" fg:w="12"/><text x="16.9568%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.5100%" y="549" width="0.1606%" height="15" fill="rgb(240,184,46)" fg:x="218" fg:w="2"/><text x="17.7600%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.5100%" y="533" width="0.1606%" height="15" fill="rgb(242,169,54)" fg:x="218" fg:w="2"/><text x="17.7600%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="17.5904%" y="517" width="0.0803%" height="15" fill="rgb(207,168,50)" fg:x="219" fg:w="1"/><text x="17.8404%" y="527.50"></text></g><g><title>engine::session::Session::close (70 samples, 5.62%)</title><rect x="12.1285%" y="725" width="5.6225%" height="15" fill="rgb(240,114,2)" fg:x="151" fg:w="70"/><text x="12.3785%" y="735.50">engine:..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="17.6707%" y="709" width="0.0803%" height="15" fill="rgb(211,17,40)" fg:x="220" fg:w="1"/><text x="17.9207%" y="719.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="17.7510%" y="693" width="0.0803%" height="15" fill="rgb(235,97,36)" fg:x="221" fg:w="1"/><text x="18.0010%" y="703.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="17.9116%" y="533" width="0.0803%" height="15" fill="rgb(208,164,11)" fg:x="223" fg:w="1"/><text x="18.1616%" y="543.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="17.9116%" y="517" width="0.0803%" height="15" fill="rgb(242,11,17)" fg:x="223" fg:w="1"/><text x="18.1616%" y="527.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="17.9116%" y="501" width="0.0803%" height="15" fill="rgb(215,86,33)" fg:x="223" fg:w="1"/><text x="18.1616%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="17.9116%" y="485" width="0.0803%" height="15" fill="rgb(245,185,28)" fg:x="223" fg:w="1"/><text x="18.1616%" y="495.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="17.9116%" y="469" width="0.0803%" height="15" fill="rgb(231,89,42)" fg:x="223" fg:w="1"/><text x="18.1616%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="17.9116%" y="453" width="0.0803%" height="15" fill="rgb(210,18,47)" fg:x="223" fg:w="1"/><text x="18.1616%" y="463.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (1 samples, 0.08%)</title><rect x="17.9116%" y="437" width="0.0803%" height="15" fill="rgb(214,84,8)" fg:x="223" fg:w="1"/><text x="18.1616%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="17.9116%" y="421" width="0.0803%" height="15" fill="rgb(214,222,23)" fg:x="223" fg:w="1"/><text x="18.1616%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="17.9116%" y="405" width="0.0803%" height="15" fill="rgb(213,104,21)" fg:x="223" fg:w="1"/><text x="18.1616%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="17.9116%" y="389" width="0.0803%" height="15" fill="rgb(238,138,6)" fg:x="223" fg:w="1"/><text x="18.1616%" y="399.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="17.9116%" y="373" width="0.0803%" height="15" fill="rgb(205,167,50)" fg:x="223" fg:w="1"/><text x="18.1616%" y="383.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="17.9116%" y="357" width="0.0803%" height="15" fill="rgb(230,105,27)" fg:x="223" fg:w="1"/><text x="18.1616%" y="367.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="17.9116%" y="341" width="0.0803%" height="15" fill="rgb(222,97,48)" fg:x="223" fg:w="1"/><text x="18.1616%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="17.9116%" y="325" width="0.0803%" height="15" fill="rgb(222,197,14)" fg:x="223" fg:w="1"/><text x="18.1616%" y="335.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="17.9116%" y="309" width="0.0803%" height="15" fill="rgb(210,105,47)" fg:x="223" fg:w="1"/><text x="18.1616%" y="319.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="17.9116%" y="293" width="0.0803%" height="15" fill="rgb(238,158,19)" fg:x="223" fg:w="1"/><text x="18.1616%" y="303.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="17.9116%" y="277" width="0.0803%" height="15" fill="rgb(226,176,23)" fg:x="223" fg:w="1"/><text x="18.1616%" y="287.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="17.9116%" y="261" width="0.0803%" height="15" fill="rgb(208,79,31)" fg:x="223" fg:w="1"/><text x="18.1616%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="17.9116%" y="245" width="0.0803%" height="15" fill="rgb(221,154,21)" fg:x="223" fg:w="1"/><text x="18.1616%" y="255.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="17.9116%" y="229" width="0.0803%" height="15" fill="rgb(213,61,41)" fg:x="223" fg:w="1"/><text x="18.1616%" y="239.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="17.9116%" y="213" width="0.0803%" height="15" fill="rgb(215,28,33)" fg:x="223" fg:w="1"/><text x="18.1616%" y="223.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="17.9116%" y="197" width="0.0803%" height="15" fill="rgb(231,139,26)" fg:x="223" fg:w="1"/><text x="18.1616%" y="207.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="17.9116%" y="181" width="0.0803%" height="15" fill="rgb(232,159,16)" fg:x="223" fg:w="1"/><text x="18.1616%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="17.9116%" y="165" width="0.0803%" height="15" fill="rgb(233,80,10)" fg:x="223" fg:w="1"/><text x="18.1616%" y="175.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="17.9116%" y="149" width="0.0803%" height="15" fill="rgb(208,147,29)" fg:x="223" fg:w="1"/><text x="18.1616%" y="159.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="17.9116%" y="133" width="0.0803%" height="15" fill="rgb(213,10,12)" fg:x="223" fg:w="1"/><text x="18.1616%" y="143.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (1 samples, 0.08%)</title><rect x="17.9116%" y="117" width="0.0803%" height="15" fill="rgb(231,218,13)" fg:x="223" fg:w="1"/><text x="18.1616%" y="127.50"></text></g><g><title>core::fmt::Formatter::debug_struct (1 samples, 0.08%)</title><rect x="18.0723%" y="517" width="0.0803%" height="15" fill="rgb(244,199,44)" fg:x="225" fg:w="1"/><text x="18.3223%" y="527.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="18.0723%" y="501" width="0.0803%" height="15" fill="rgb(240,144,53)" fg:x="225" fg:w="1"/><text x="18.3223%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="18.0723%" y="485" width="0.0803%" height="15" fill="rgb(223,57,28)" fg:x="225" fg:w="1"/><text x="18.3223%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.0723%" y="469" width="0.0803%" height="15" fill="rgb(213,134,38)" fg:x="225" fg:w="1"/><text x="18.3223%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.0723%" y="453" width="0.0803%" height="15" fill="rgb(251,182,42)" fg:x="225" fg:w="1"/><text x="18.3223%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="18.0723%" y="437" width="0.0803%" height="15" fill="rgb(229,93,13)" fg:x="225" fg:w="1"/><text x="18.3223%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="18.0723%" y="421" width="0.0803%" height="15" fill="rgb(234,171,3)" fg:x="225" fg:w="1"/><text x="18.3223%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="18.0723%" y="405" width="0.0803%" height="15" fill="rgb(241,105,32)" fg:x="225" fg:w="1"/><text x="18.3223%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="18.0723%" y="389" width="0.0803%" height="15" fill="rgb(221,66,3)" fg:x="225" fg:w="1"/><text x="18.3223%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="18.0723%" y="373" width="0.0803%" height="15" fill="rgb(248,155,29)" fg:x="225" fg:w="1"/><text x="18.3223%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (5 samples, 0.40%)</title><rect x="17.8313%" y="677" width="0.4016%" height="15" fill="rgb(231,31,5)" fg:x="222" fg:w="5"/><text x="18.0813%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (5 samples, 0.40%)</title><rect x="17.8313%" y="661" width="0.4016%" height="15" fill="rgb(213,188,31)" fg:x="222" fg:w="5"/><text x="18.0813%" y="671.50"></text></g><g><title>core::fmt::write (5 samples, 0.40%)</title><rect x="17.8313%" y="645" width="0.4016%" height="15" fill="rgb(212,104,33)" fg:x="222" fg:w="5"/><text x="18.0813%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (5 samples, 0.40%)</title><rect x="17.8313%" y="629" width="0.4016%" height="15" fill="rgb(254,77,51)" fg:x="222" fg:w="5"/><text x="18.0813%" y="639.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (5 samples, 0.40%)</title><rect x="17.8313%" y="613" width="0.4016%" height="15" fill="rgb(234,39,26)" fg:x="222" fg:w="5"/><text x="18.0813%" y="623.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (5 samples, 0.40%)</title><rect x="17.8313%" y="597" width="0.4016%" height="15" fill="rgb(208,88,36)" fg:x="222" fg:w="5"/><text x="18.0813%" y="607.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (5 samples, 0.40%)</title><rect x="17.8313%" y="581" width="0.4016%" height="15" fill="rgb(243,222,10)" fg:x="222" fg:w="5"/><text x="18.0813%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (5 samples, 0.40%)</title><rect x="17.8313%" y="565" width="0.4016%" height="15" fill="rgb(218,133,52)" fg:x="222" fg:w="5"/><text x="18.0813%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (5 samples, 0.40%)</title><rect x="17.8313%" y="549" width="0.4016%" height="15" fill="rgb(222,25,26)" fg:x="222" fg:w="5"/><text x="18.0813%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="17.9920%" y="533" width="0.2410%" height="15" fill="rgb(243,174,24)" fg:x="224" fg:w="3"/><text x="18.2420%" y="543.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="18.1526%" y="517" width="0.0803%" height="15" fill="rgb(233,188,52)" fg:x="226" fg:w="1"/><text x="18.4026%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="18.1526%" y="501" width="0.0803%" height="15" fill="rgb(208,89,14)" fg:x="226" fg:w="1"/><text x="18.4026%" y="511.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="18.1526%" y="485" width="0.0803%" height="15" fill="rgb(205,204,21)" fg:x="226" fg:w="1"/><text x="18.4026%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="18.1526%" y="469" width="0.0803%" height="15" fill="rgb(246,39,28)" fg:x="226" fg:w="1"/><text x="18.4026%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="18.1526%" y="453" width="0.0803%" height="15" fill="rgb(235,71,19)" fg:x="226" fg:w="1"/><text x="18.4026%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="18.1526%" y="437" width="0.0803%" height="15" fill="rgb(211,62,39)" fg:x="226" fg:w="1"/><text x="18.4026%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="18.1526%" y="421" width="0.0803%" height="15" fill="rgb(246,118,20)" fg:x="226" fg:w="1"/><text x="18.4026%" y="431.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.1526%" y="405" width="0.0803%" height="15" fill="rgb(230,82,12)" fg:x="226" fg:w="1"/><text x="18.4026%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.1526%" y="389" width="0.0803%" height="15" fill="rgb(205,212,34)" fg:x="226" fg:w="1"/><text x="18.4026%" y="399.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="18.1526%" y="373" width="0.0803%" height="15" fill="rgb(239,90,1)" fg:x="226" fg:w="1"/><text x="18.4026%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="18.1526%" y="357" width="0.0803%" height="15" fill="rgb(225,198,50)" fg:x="226" fg:w="1"/><text x="18.4026%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="18.1526%" y="341" width="0.0803%" height="15" fill="rgb(227,208,48)" fg:x="226" fg:w="1"/><text x="18.4026%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="18.1526%" y="325" width="0.0803%" height="15" fill="rgb(238,134,41)" fg:x="226" fg:w="1"/><text x="18.4026%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="18.1526%" y="309" width="0.0803%" height="15" fill="rgb(241,58,39)" fg:x="226" fg:w="1"/><text x="18.4026%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="18.1526%" y="293" width="0.0803%" height="15" fill="rgb(214,126,4)" fg:x="226" fg:w="1"/><text x="18.4026%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.1526%" y="277" width="0.0803%" height="15" fill="rgb(235,149,4)" fg:x="226" fg:w="1"/><text x="18.4026%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="18.1526%" y="261" width="0.0803%" height="15" fill="rgb(236,59,29)" fg:x="226" fg:w="1"/><text x="18.4026%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.1526%" y="245" width="0.0803%" height="15" fill="rgb(246,11,33)" fg:x="226" fg:w="1"/><text x="18.4026%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="18.1526%" y="229" width="0.0803%" height="15" fill="rgb(232,180,35)" fg:x="226" fg:w="1"/><text x="18.4026%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="18.1526%" y="213" width="0.0803%" height="15" fill="rgb(220,35,37)" fg:x="226" fg:w="1"/><text x="18.4026%" y="223.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="18.1526%" y="197" width="0.0803%" height="15" fill="rgb(238,107,48)" fg:x="226" fg:w="1"/><text x="18.4026%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.1526%" y="181" width="0.0803%" height="15" fill="rgb(205,65,21)" fg:x="226" fg:w="1"/><text x="18.4026%" y="191.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_box (1 samples, 0.08%)</title><rect x="18.2329%" y="677" width="0.0803%" height="15" fill="rgb(246,138,48)" fg:x="227" fg:w="1"/><text x="18.4829%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::PerformAction&gt; (1 samples, 0.08%)</title><rect x="18.3133%" y="677" width="0.0803%" height="15" fill="rgb(209,220,47)" fg:x="228" fg:w="1"/><text x="18.5633%" y="687.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (2 samples, 0.16%)</title><rect x="18.4739%" y="661" width="0.1606%" height="15" fill="rgb(222,162,49)" fg:x="230" fg:w="2"/><text x="18.7239%" y="671.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="18.4739%" y="645" width="0.1606%" height="15" fill="rgb(243,123,11)" fg:x="230" fg:w="2"/><text x="18.7239%" y="655.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="18.4739%" y="629" width="0.1606%" height="15" fill="rgb(221,229,41)" fg:x="230" fg:w="2"/><text x="18.7239%" y="639.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="18.5542%" y="613" width="0.0803%" height="15" fill="rgb(216,68,4)" fg:x="231" fg:w="1"/><text x="18.8042%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.6345%" y="533" width="0.0803%" height="15" fill="rgb(207,88,35)" fg:x="232" fg:w="1"/><text x="18.8845%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.6345%" y="517" width="0.0803%" height="15" fill="rgb(252,2,5)" fg:x="232" fg:w="1"/><text x="18.8845%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.6345%" y="501" width="0.0803%" height="15" fill="rgb(209,173,7)" fg:x="232" fg:w="1"/><text x="18.8845%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.6345%" y="485" width="0.0803%" height="15" fill="rgb(210,198,52)" fg:x="232" fg:w="1"/><text x="18.8845%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.6345%" y="469" width="0.0803%" height="15" fill="rgb(228,152,32)" fg:x="232" fg:w="1"/><text x="18.8845%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.6345%" y="453" width="0.0803%" height="15" fill="rgb(249,98,29)" fg:x="232" fg:w="1"/><text x="18.8845%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="18.6345%" y="549" width="0.2410%" height="15" fill="rgb(205,148,48)" fg:x="232" fg:w="3"/><text x="18.8845%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="18.7149%" y="533" width="0.1606%" height="15" fill="rgb(236,69,34)" fg:x="233" fg:w="2"/><text x="18.9649%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.7149%" y="517" width="0.1606%" height="15" fill="rgb(220,151,41)" fg:x="233" fg:w="2"/><text x="18.9649%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.7952%" y="501" width="0.0803%" height="15" fill="rgb(254,106,24)" fg:x="234" fg:w="1"/><text x="19.0452%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.7952%" y="485" width="0.0803%" height="15" fill="rgb(210,37,48)" fg:x="234" fg:w="1"/><text x="19.0452%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.7952%" y="469" width="0.0803%" height="15" fill="rgb(254,131,5)" fg:x="234" fg:w="1"/><text x="19.0452%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.8755%" y="437" width="0.0803%" height="15" fill="rgb(216,55,41)" fg:x="235" fg:w="1"/><text x="19.1255%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.8755%" y="421" width="0.0803%" height="15" fill="rgb(250,35,31)" fg:x="235" fg:w="1"/><text x="19.1255%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.8755%" y="405" width="0.0803%" height="15" fill="rgb(207,124,33)" fg:x="235" fg:w="1"/><text x="19.1255%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.8755%" y="389" width="0.0803%" height="15" fill="rgb(249,175,17)" fg:x="235" fg:w="1"/><text x="19.1255%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.8755%" y="373" width="0.0803%" height="15" fill="rgb(224,175,39)" fg:x="235" fg:w="1"/><text x="19.1255%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.8755%" y="357" width="0.0803%" height="15" fill="rgb(208,67,49)" fg:x="235" fg:w="1"/><text x="19.1255%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.8755%" y="341" width="0.0803%" height="15" fill="rgb(222,188,41)" fg:x="235" fg:w="1"/><text x="19.1255%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.8755%" y="325" width="0.0803%" height="15" fill="rgb(243,213,30)" fg:x="235" fg:w="1"/><text x="19.1255%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.8755%" y="309" width="0.0803%" height="15" fill="rgb(253,100,45)" fg:x="235" fg:w="1"/><text x="19.1255%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.8755%" y="293" width="0.0803%" height="15" fill="rgb(226,24,44)" fg:x="235" fg:w="1"/><text x="19.1255%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.8755%" y="277" width="0.0803%" height="15" fill="rgb(215,41,24)" fg:x="235" fg:w="1"/><text x="19.1255%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.8755%" y="261" width="0.0803%" height="15" fill="rgb(254,53,33)" fg:x="235" fg:w="1"/><text x="19.1255%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.8755%" y="485" width="0.1606%" height="15" fill="rgb(242,103,10)" fg:x="235" fg:w="2"/><text x="19.1255%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.8755%" y="469" width="0.1606%" height="15" fill="rgb(246,29,21)" fg:x="235" fg:w="2"/><text x="19.1255%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.8755%" y="453" width="0.1606%" height="15" fill="rgb(251,154,1)" fg:x="235" fg:w="2"/><text x="19.1255%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.9558%" y="437" width="0.0803%" height="15" fill="rgb(254,212,26)" fg:x="236" fg:w="1"/><text x="19.2058%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.9558%" y="421" width="0.0803%" height="15" fill="rgb(251,187,46)" fg:x="236" fg:w="1"/><text x="19.2058%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.9558%" y="405" width="0.0803%" height="15" fill="rgb(224,208,14)" fg:x="236" fg:w="1"/><text x="19.2058%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.9558%" y="389" width="0.0803%" height="15" fill="rgb(222,176,26)" fg:x="236" fg:w="1"/><text x="19.2058%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.9558%" y="373" width="0.0803%" height="15" fill="rgb(241,219,52)" fg:x="236" fg:w="1"/><text x="19.2058%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.9558%" y="357" width="0.0803%" height="15" fill="rgb(252,198,21)" fg:x="236" fg:w="1"/><text x="19.2058%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.9558%" y="341" width="0.0803%" height="15" fill="rgb(244,196,23)" fg:x="236" fg:w="1"/><text x="19.2058%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.9558%" y="325" width="0.0803%" height="15" fill="rgb(239,121,44)" fg:x="236" fg:w="1"/><text x="19.2058%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.9558%" y="309" width="0.0803%" height="15" fill="rgb(249,203,23)" fg:x="236" fg:w="1"/><text x="19.2058%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.9558%" y="293" width="0.0803%" height="15" fill="rgb(238,219,10)" fg:x="236" fg:w="1"/><text x="19.2058%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.9558%" y="277" width="0.0803%" height="15" fill="rgb(241,35,46)" fg:x="236" fg:w="1"/><text x="19.2058%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.9558%" y="261" width="0.0803%" height="15" fill="rgb(218,28,6)" fg:x="236" fg:w="1"/><text x="19.2058%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.9558%" y="245" width="0.0803%" height="15" fill="rgb(233,151,50)" fg:x="236" fg:w="1"/><text x="19.2058%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.9558%" y="229" width="0.0803%" height="15" fill="rgb(208,57,8)" fg:x="236" fg:w="1"/><text x="19.2058%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="19.0361%" y="485" width="0.0803%" height="15" fill="rgb(253,99,10)" fg:x="237" fg:w="1"/><text x="19.2861%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.0361%" y="469" width="0.0803%" height="15" fill="rgb(237,196,49)" fg:x="237" fg:w="1"/><text x="19.2861%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.0361%" y="453" width="0.0803%" height="15" fill="rgb(209,51,3)" fg:x="237" fg:w="1"/><text x="19.2861%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.0361%" y="437" width="0.0803%" height="15" fill="rgb(238,129,10)" fg:x="237" fg:w="1"/><text x="19.2861%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.0361%" y="421" width="0.0803%" height="15" fill="rgb(246,201,16)" fg:x="237" fg:w="1"/><text x="19.2861%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.0361%" y="405" width="0.0803%" height="15" fill="rgb(250,160,20)" fg:x="237" fg:w="1"/><text x="19.2861%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.0361%" y="389" width="0.0803%" height="15" fill="rgb(251,107,25)" fg:x="237" fg:w="1"/><text x="19.2861%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="19.1165%" y="357" width="0.1606%" height="15" fill="rgb(212,103,39)" fg:x="238" fg:w="2"/><text x="19.3665%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="19.1165%" y="341" width="0.1606%" height="15" fill="rgb(207,9,29)" fg:x="238" fg:w="2"/><text x="19.3665%" y="351.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="19.1165%" y="325" width="0.1606%" height="15" fill="rgb(227,84,3)" fg:x="238" fg:w="2"/><text x="19.3665%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="19.1165%" y="309" width="0.1606%" height="15" fill="rgb(242,194,7)" fg:x="238" fg:w="2"/><text x="19.3665%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="19.1165%" y="293" width="0.1606%" height="15" fill="rgb(230,40,4)" fg:x="238" fg:w="2"/><text x="19.3665%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="19.1165%" y="277" width="0.1606%" height="15" fill="rgb(243,229,33)" fg:x="238" fg:w="2"/><text x="19.3665%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="19.1165%" y="261" width="0.1606%" height="15" fill="rgb(240,65,24)" fg:x="238" fg:w="2"/><text x="19.3665%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.1968%" y="245" width="0.0803%" height="15" fill="rgb(212,28,20)" fg:x="239" fg:w="1"/><text x="19.4468%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="19.1165%" y="389" width="0.2410%" height="15" fill="rgb(209,72,3)" fg:x="238" fg:w="3"/><text x="19.3665%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="19.1165%" y="373" width="0.2410%" height="15" fill="rgb(238,170,36)" fg:x="238" fg:w="3"/><text x="19.3665%" y="383.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="19.2771%" y="357" width="0.0803%" height="15" fill="rgb(236,19,38)" fg:x="240" fg:w="1"/><text x="19.5271%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="19.2771%" y="341" width="0.0803%" height="15" fill="rgb(230,67,43)" fg:x="240" fg:w="1"/><text x="19.5271%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="19.2771%" y="325" width="0.0803%" height="15" fill="rgb(227,14,36)" fg:x="240" fg:w="1"/><text x="19.5271%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="19.2771%" y="309" width="0.0803%" height="15" fill="rgb(247,171,49)" fg:x="240" fg:w="1"/><text x="19.5271%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="19.2771%" y="293" width="0.0803%" height="15" fill="rgb(235,164,51)" fg:x="240" fg:w="1"/><text x="19.5271%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.2771%" y="277" width="0.0803%" height="15" fill="rgb(246,107,20)" fg:x="240" fg:w="1"/><text x="19.5271%" y="287.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (10 samples, 0.80%)</title><rect x="18.6345%" y="581" width="0.8032%" height="15" fill="rgb(226,88,18)" fg:x="232" fg:w="10"/><text x="18.8845%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (10 samples, 0.80%)</title><rect x="18.6345%" y="565" width="0.8032%" height="15" fill="rgb(235,136,9)" fg:x="232" fg:w="10"/><text x="18.8845%" y="575.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.56%)</title><rect x="18.8755%" y="549" width="0.5622%" height="15" fill="rgb(209,3,34)" fg:x="235" fg:w="7"/><text x="19.1255%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.56%)</title><rect x="18.8755%" y="533" width="0.5622%" height="15" fill="rgb(213,38,19)" fg:x="235" fg:w="7"/><text x="19.1255%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="18.8755%" y="517" width="0.5622%" height="15" fill="rgb(254,24,24)" fg:x="235" fg:w="7"/><text x="19.1255%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="18.8755%" y="501" width="0.5622%" height="15" fill="rgb(219,122,42)" fg:x="235" fg:w="7"/><text x="19.1255%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="19.1165%" y="485" width="0.3213%" height="15" fill="rgb(205,128,31)" fg:x="238" fg:w="4"/><text x="19.3665%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="19.1165%" y="469" width="0.3213%" height="15" fill="rgb(212,142,0)" fg:x="238" fg:w="4"/><text x="19.3665%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="19.1165%" y="453" width="0.3213%" height="15" fill="rgb(211,25,35)" fg:x="238" fg:w="4"/><text x="19.3665%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="19.1165%" y="437" width="0.3213%" height="15" fill="rgb(220,150,53)" fg:x="238" fg:w="4"/><text x="19.3665%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="19.1165%" y="421" width="0.3213%" height="15" fill="rgb(220,30,24)" fg:x="238" fg:w="4"/><text x="19.3665%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="19.1165%" y="405" width="0.3213%" height="15" fill="rgb(218,86,23)" fg:x="238" fg:w="4"/><text x="19.3665%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="19.3574%" y="389" width="0.0803%" height="15" fill="rgb(206,62,27)" fg:x="241" fg:w="1"/><text x="19.6074%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.3574%" y="373" width="0.0803%" height="15" fill="rgb(249,174,0)" fg:x="241" fg:w="1"/><text x="19.6074%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="19.3574%" y="357" width="0.0803%" height="15" fill="rgb(246,67,27)" fg:x="241" fg:w="1"/><text x="19.6074%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="19.3574%" y="341" width="0.0803%" height="15" fill="rgb(250,195,30)" fg:x="241" fg:w="1"/><text x="19.6074%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="19.3574%" y="325" width="0.0803%" height="15" fill="rgb(251,171,50)" fg:x="241" fg:w="1"/><text x="19.6074%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.5984%" y="389" width="0.0803%" height="15" fill="rgb(236,196,10)" fg:x="244" fg:w="1"/><text x="19.8484%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.5984%" y="373" width="0.0803%" height="15" fill="rgb(249,228,52)" fg:x="244" fg:w="1"/><text x="19.8484%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.5984%" y="357" width="0.0803%" height="15" fill="rgb(219,60,51)" fg:x="244" fg:w="1"/><text x="19.8484%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.5984%" y="341" width="0.0803%" height="15" fill="rgb(240,198,24)" fg:x="244" fg:w="1"/><text x="19.8484%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.5984%" y="325" width="0.0803%" height="15" fill="rgb(240,192,40)" fg:x="244" fg:w="1"/><text x="19.8484%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.6787%" y="389" width="0.0803%" height="15" fill="rgb(219,118,5)" fg:x="245" fg:w="1"/><text x="19.9287%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="19.6787%" y="373" width="0.0803%" height="15" fill="rgb(205,202,34)" fg:x="245" fg:w="1"/><text x="19.9287%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.6787%" y="357" width="0.0803%" height="15" fill="rgb(234,153,26)" fg:x="245" fg:w="1"/><text x="19.9287%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="19.7590%" y="389" width="0.0803%" height="15" fill="rgb(229,26,29)" fg:x="246" fg:w="1"/><text x="20.0090%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.7590%" y="373" width="0.0803%" height="15" fill="rgb(237,115,21)" fg:x="246" fg:w="1"/><text x="20.0090%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="19.7590%" y="357" width="0.0803%" height="15" fill="rgb(252,144,15)" fg:x="246" fg:w="1"/><text x="20.0090%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="19.8394%" y="357" width="0.2410%" height="15" fill="rgb(232,26,13)" fg:x="247" fg:w="3"/><text x="20.0894%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="19.8394%" y="341" width="0.2410%" height="15" fill="rgb(206,44,19)" fg:x="247" fg:w="3"/><text x="20.0894%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="19.8394%" y="325" width="0.2410%" height="15" fill="rgb(249,159,2)" fg:x="247" fg:w="3"/><text x="20.0894%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="19.8394%" y="309" width="0.2410%" height="15" fill="rgb(231,5,32)" fg:x="247" fg:w="3"/><text x="20.0894%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="19.9197%" y="293" width="0.1606%" height="15" fill="rgb(249,210,18)" fg:x="248" fg:w="2"/><text x="20.1697%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="19.9197%" y="277" width="0.1606%" height="15" fill="rgb(215,223,36)" fg:x="248" fg:w="2"/><text x="20.1697%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="19.9197%" y="261" width="0.1606%" height="15" fill="rgb(245,185,20)" fg:x="248" fg:w="2"/><text x="20.1697%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="19.9197%" y="245" width="0.1606%" height="15" fill="rgb(206,224,11)" fg:x="248" fg:w="2"/><text x="20.1697%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="19.9197%" y="229" width="0.1606%" height="15" fill="rgb(248,73,42)" fg:x="248" fg:w="2"/><text x="20.1697%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="19.9197%" y="213" width="0.1606%" height="15" fill="rgb(219,149,31)" fg:x="248" fg:w="2"/><text x="20.1697%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="19.9197%" y="197" width="0.1606%" height="15" fill="rgb(243,104,17)" fg:x="248" fg:w="2"/><text x="20.1697%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="19.9197%" y="181" width="0.1606%" height="15" fill="rgb(244,117,33)" fg:x="248" fg:w="2"/><text x="20.1697%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="19.9197%" y="165" width="0.1606%" height="15" fill="rgb(251,25,47)" fg:x="248" fg:w="2"/><text x="20.1697%" y="175.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="19.9197%" y="149" width="0.1606%" height="15" fill="rgb(249,70,13)" fg:x="248" fg:w="2"/><text x="20.1697%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="19.9197%" y="133" width="0.1606%" height="15" fill="rgb(217,133,18)" fg:x="248" fg:w="2"/><text x="20.1697%" y="143.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="19.8394%" y="373" width="0.3213%" height="15" fill="rgb(248,97,28)" fg:x="247" fg:w="4"/><text x="20.0894%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.0803%" y="357" width="0.0803%" height="15" fill="rgb(237,193,4)" fg:x="250" fg:w="1"/><text x="20.3303%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.0803%" y="341" width="0.0803%" height="15" fill="rgb(247,198,45)" fg:x="250" fg:w="1"/><text x="20.3303%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.0803%" y="325" width="0.0803%" height="15" fill="rgb(245,2,20)" fg:x="250" fg:w="1"/><text x="20.3303%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.0803%" y="309" width="0.0803%" height="15" fill="rgb(210,71,36)" fg:x="250" fg:w="1"/><text x="20.3303%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.0803%" y="293" width="0.0803%" height="15" fill="rgb(238,114,30)" fg:x="250" fg:w="1"/><text x="20.3303%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.0803%" y="277" width="0.0803%" height="15" fill="rgb(241,200,2)" fg:x="250" fg:w="1"/><text x="20.3303%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (5 samples, 0.40%)</title><rect x="19.8394%" y="389" width="0.4016%" height="15" fill="rgb(232,106,18)" fg:x="247" fg:w="5"/><text x="20.0894%" y="399.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="20.1606%" y="373" width="0.0803%" height="15" fill="rgb(211,141,18)" fg:x="251" fg:w="1"/><text x="20.4106%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="20.2410%" y="229" width="0.0803%" height="15" fill="rgb(224,9,9)" fg:x="252" fg:w="1"/><text x="20.4910%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="20.2410%" y="213" width="0.0803%" height="15" fill="rgb(249,137,46)" fg:x="252" fg:w="1"/><text x="20.4910%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="20.2410%" y="245" width="0.1606%" height="15" fill="rgb(236,44,45)" fg:x="252" fg:w="2"/><text x="20.4910%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="20.3213%" y="229" width="0.0803%" height="15" fill="rgb(205,68,40)" fg:x="253" fg:w="1"/><text x="20.5713%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="20.3213%" y="213" width="0.0803%" height="15" fill="rgb(214,198,49)" fg:x="253" fg:w="1"/><text x="20.5713%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="20.4016%" y="229" width="0.0803%" height="15" fill="rgb(226,140,45)" fg:x="254" fg:w="1"/><text x="20.6516%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="20.4016%" y="213" width="0.0803%" height="15" fill="rgb(209,109,20)" fg:x="254" fg:w="1"/><text x="20.6516%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="20.2410%" y="309" width="0.3213%" height="15" fill="rgb(217,33,46)" fg:x="252" fg:w="4"/><text x="20.4910%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="20.2410%" y="293" width="0.3213%" height="15" fill="rgb(232,150,33)" fg:x="252" fg:w="4"/><text x="20.4910%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="20.2410%" y="277" width="0.3213%" height="15" fill="rgb(233,76,25)" fg:x="252" fg:w="4"/><text x="20.4910%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="20.2410%" y="261" width="0.3213%" height="15" fill="rgb(254,219,23)" fg:x="252" fg:w="4"/><text x="20.4910%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="20.4016%" y="245" width="0.1606%" height="15" fill="rgb(233,108,4)" fg:x="254" fg:w="2"/><text x="20.6516%" y="255.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="20.4819%" y="229" width="0.0803%" height="15" fill="rgb(229,98,6)" fg:x="255" fg:w="1"/><text x="20.7319%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.5622%" y="245" width="0.0803%" height="15" fill="rgb(217,40,27)" fg:x="256" fg:w="1"/><text x="20.8122%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="20.5622%" y="277" width="0.1606%" height="15" fill="rgb(221,35,43)" fg:x="256" fg:w="2"/><text x="20.8122%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="20.5622%" y="261" width="0.1606%" height="15" fill="rgb(212,107,11)" fg:x="256" fg:w="2"/><text x="20.8122%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="20.6426%" y="245" width="0.0803%" height="15" fill="rgb(245,42,44)" fg:x="257" fg:w="1"/><text x="20.8926%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="20.5622%" y="309" width="0.3213%" height="15" fill="rgb(209,31,12)" fg:x="256" fg:w="4"/><text x="20.8122%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="20.5622%" y="293" width="0.3213%" height="15" fill="rgb(210,228,54)" fg:x="256" fg:w="4"/><text x="20.8122%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="20.7229%" y="277" width="0.1606%" height="15" fill="rgb(241,19,33)" fg:x="258" fg:w="2"/><text x="20.9729%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="20.7229%" y="261" width="0.1606%" height="15" fill="rgb(229,51,27)" fg:x="258" fg:w="2"/><text x="20.9729%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.8032%" y="245" width="0.0803%" height="15" fill="rgb(214,167,49)" fg:x="259" fg:w="1"/><text x="21.0532%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.1245%" y="245" width="0.0803%" height="15" fill="rgb(248,140,47)" fg:x="263" fg:w="1"/><text x="21.3745%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.2851%" y="229" width="0.0803%" height="15" fill="rgb(228,6,51)" fg:x="265" fg:w="1"/><text x="21.5351%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="21.3655%" y="229" width="0.2410%" height="15" fill="rgb(242,44,53)" fg:x="266" fg:w="3"/><text x="21.6155%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.5261%" y="213" width="0.0803%" height="15" fill="rgb(249,90,50)" fg:x="268" fg:w="1"/><text x="21.7761%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="21.2048%" y="245" width="0.4819%" height="15" fill="rgb(222,84,19)" fg:x="264" fg:w="6"/><text x="21.4548%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="21.6064%" y="229" width="0.0803%" height="15" fill="rgb(214,140,12)" fg:x="269" fg:w="1"/><text x="21.8564%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="21.6867%" y="229" width="0.0803%" height="15" fill="rgb(210,20,43)" fg:x="270" fg:w="1"/><text x="21.9367%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="21.6867%" y="245" width="0.1606%" height="15" fill="rgb(243,1,40)" fg:x="270" fg:w="2"/><text x="21.9367%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="21.7671%" y="229" width="0.0803%" height="15" fill="rgb(224,102,26)" fg:x="271" fg:w="1"/><text x="22.0171%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="21.7671%" y="213" width="0.0803%" height="15" fill="rgb(221,179,1)" fg:x="271" fg:w="1"/><text x="22.0171%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="21.7671%" y="197" width="0.0803%" height="15" fill="rgb(216,209,47)" fg:x="271" fg:w="1"/><text x="22.0171%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.0080%" y="181" width="0.0803%" height="15" fill="rgb(251,135,9)" fg:x="274" fg:w="1"/><text x="22.2580%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="22.0884%" y="181" width="0.0803%" height="15" fill="rgb(242,9,36)" fg:x="275" fg:w="1"/><text x="22.3384%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.0884%" y="165" width="0.0803%" height="15" fill="rgb(249,60,37)" fg:x="275" fg:w="1"/><text x="22.3384%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.0884%" y="149" width="0.0803%" height="15" fill="rgb(230,66,45)" fg:x="275" fg:w="1"/><text x="22.3384%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.0884%" y="133" width="0.0803%" height="15" fill="rgb(216,1,47)" fg:x="275" fg:w="1"/><text x="22.3384%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="22.1687%" y="181" width="0.0803%" height="15" fill="rgb(235,8,23)" fg:x="276" fg:w="1"/><text x="22.4187%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="22.1687%" y="165" width="0.0803%" height="15" fill="rgb(225,136,11)" fg:x="276" fg:w="1"/><text x="22.4187%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.1687%" y="149" width="0.0803%" height="15" fill="rgb(228,63,44)" fg:x="276" fg:w="1"/><text x="22.4187%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.1687%" y="133" width="0.0803%" height="15" fill="rgb(240,43,52)" fg:x="276" fg:w="1"/><text x="22.4187%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.1687%" y="117" width="0.0803%" height="15" fill="rgb(217,167,36)" fg:x="276" fg:w="1"/><text x="22.4187%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (22 samples, 1.77%)</title><rect x="22.2490%" y="181" width="1.7671%" height="15" fill="rgb(250,19,6)" fg:x="277" fg:w="22"/><text x="22.4990%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (22 samples, 1.77%)</title><rect x="22.2490%" y="165" width="1.7671%" height="15" fill="rgb(236,60,51)" fg:x="277" fg:w="22"/><text x="22.4990%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (22 samples, 1.77%)</title><rect x="22.2490%" y="149" width="1.7671%" height="15" fill="rgb(222,217,20)" fg:x="277" fg:w="22"/><text x="22.4990%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 2.25%)</title><rect x="21.8474%" y="229" width="2.2490%" height="15" fill="rgb(242,65,52)" fg:x="272" fg:w="28"/><text x="22.0974%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (28 samples, 2.25%)</title><rect x="21.8474%" y="213" width="2.2490%" height="15" fill="rgb(217,5,41)" fg:x="272" fg:w="28"/><text x="22.0974%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (28 samples, 2.25%)</title><rect x="21.8474%" y="197" width="2.2490%" height="15" fill="rgb(223,208,53)" fg:x="272" fg:w="28"/><text x="22.0974%" y="207.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="24.0161%" y="181" width="0.0803%" height="15" fill="rgb(221,104,30)" fg:x="299" fg:w="1"/><text x="24.2661%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.0161%" y="165" width="0.0803%" height="15" fill="rgb(230,210,42)" fg:x="299" fg:w="1"/><text x="24.2661%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="24.1767%" y="213" width="0.0803%" height="15" fill="rgb(206,205,27)" fg:x="301" fg:w="1"/><text x="24.4267%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.1767%" y="197" width="0.0803%" height="15" fill="rgb(233,114,38)" fg:x="301" fg:w="1"/><text x="24.4267%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="24.0964%" y="229" width="0.2410%" height="15" fill="rgb(216,174,36)" fg:x="300" fg:w="3"/><text x="24.3464%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="24.2570%" y="213" width="0.0803%" height="15" fill="rgb(211,30,9)" fg:x="302" fg:w="1"/><text x="24.5070%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (32 samples, 2.57%)</title><rect x="21.8474%" y="245" width="2.5703%" height="15" fill="rgb(216,8,21)" fg:x="272" fg:w="32"/><text x="22.0974%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="24.3373%" y="229" width="0.0803%" height="15" fill="rgb(237,209,39)" fg:x="303" fg:w="1"/><text x="24.5873%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (43 samples, 3.45%)</title><rect x="21.0442%" y="261" width="3.4538%" height="15" fill="rgb(235,111,47)" fg:x="262" fg:w="43"/><text x="21.2942%" y="271.50">reg..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="24.4177%" y="245" width="0.0803%" height="15" fill="rgb(216,139,9)" fg:x="304" fg:w="1"/><text x="24.6677%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="24.4980%" y="229" width="0.0803%" height="15" fill="rgb(248,185,4)" fg:x="305" fg:w="1"/><text x="24.7480%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="24.4980%" y="213" width="0.0803%" height="15" fill="rgb(239,185,25)" fg:x="305" fg:w="1"/><text x="24.7480%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.4980%" y="197" width="0.0803%" height="15" fill="rgb(233,207,8)" fg:x="305" fg:w="1"/><text x="24.7480%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.4980%" y="181" width="0.0803%" height="15" fill="rgb(249,220,24)" fg:x="305" fg:w="1"/><text x="24.7480%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.4980%" y="165" width="0.0803%" height="15" fill="rgb(221,50,14)" fg:x="305" fg:w="1"/><text x="24.7480%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (47 samples, 3.78%)</title><rect x="20.8835%" y="309" width="3.7751%" height="15" fill="rgb(227,79,42)" fg:x="260" fg:w="47"/><text x="21.1335%" y="319.50">rege..</text></g><g><title>regex::builders::string::RegexBuilder::build (46 samples, 3.69%)</title><rect x="20.9639%" y="293" width="3.6948%" height="15" fill="rgb(228,218,49)" fg:x="261" fg:w="46"/><text x="21.2139%" y="303.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (46 samples, 3.69%)</title><rect x="20.9639%" y="277" width="3.6948%" height="15" fill="rgb(249,18,15)" fg:x="261" fg:w="46"/><text x="21.2139%" y="287.50">rege..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="24.4980%" y="261" width="0.1606%" height="15" fill="rgb(212,84,27)" fg:x="305" fg:w="2"/><text x="24.7480%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="24.4980%" y="245" width="0.1606%" height="15" fill="rgb(207,83,24)" fg:x="305" fg:w="2"/><text x="24.7480%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="24.5783%" y="229" width="0.0803%" height="15" fill="rgb(219,61,7)" fg:x="306" fg:w="1"/><text x="24.8283%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="24.5783%" y="213" width="0.0803%" height="15" fill="rgb(211,43,29)" fg:x="306" fg:w="1"/><text x="24.8283%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="24.6586%" y="261" width="0.2410%" height="15" fill="rgb(243,15,23)" fg:x="307" fg:w="3"/><text x="24.9086%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="24.7390%" y="245" width="0.1606%" height="15" fill="rgb(217,52,28)" fg:x="308" fg:w="2"/><text x="24.9890%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (59 samples, 4.74%)</title><rect x="20.2410%" y="325" width="4.7390%" height="15" fill="rgb(210,35,6)" fg:x="252" fg:w="59"/><text x="20.4910%" y="335.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="24.6586%" y="309" width="0.3213%" height="15" fill="rgb(237,187,28)" fg:x="307" fg:w="4"/><text x="24.9086%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="24.6586%" y="293" width="0.3213%" height="15" fill="rgb(231,136,24)" fg:x="307" fg:w="4"/><text x="24.9086%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="24.6586%" y="277" width="0.3213%" height="15" fill="rgb(205,176,52)" fg:x="307" fg:w="4"/><text x="24.9086%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="24.8996%" y="261" width="0.0803%" height="15" fill="rgb(218,65,12)" fg:x="310" fg:w="1"/><text x="25.1496%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="24.8996%" y="245" width="0.0803%" height="15" fill="rgb(234,101,21)" fg:x="310" fg:w="1"/><text x="25.1496%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.9799%" y="277" width="0.0803%" height="15" fill="rgb(206,13,20)" fg:x="311" fg:w="1"/><text x="25.2299%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="25.0602%" y="277" width="0.0803%" height="15" fill="rgb(236,89,44)" fg:x="312" fg:w="1"/><text x="25.3102%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="25.0602%" y="261" width="0.0803%" height="15" fill="rgb(225,52,17)" fg:x="312" fg:w="1"/><text x="25.3102%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="25.0602%" y="245" width="0.0803%" height="15" fill="rgb(214,27,25)" fg:x="312" fg:w="1"/><text x="25.3102%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.0602%" y="229" width="0.0803%" height="15" fill="rgb(240,141,35)" fg:x="312" fg:w="1"/><text x="25.3102%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="25.1406%" y="261" width="0.0803%" height="15" fill="rgb(216,126,3)" fg:x="313" fg:w="1"/><text x="25.3906%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="24.9799%" y="309" width="0.3213%" height="15" fill="rgb(249,196,23)" fg:x="311" fg:w="4"/><text x="25.2299%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="24.9799%" y="293" width="0.3213%" height="15" fill="rgb(215,185,43)" fg:x="311" fg:w="4"/><text x="25.2299%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="25.1406%" y="277" width="0.1606%" height="15" fill="rgb(208,194,36)" fg:x="313" fg:w="2"/><text x="25.3906%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="25.2209%" y="261" width="0.0803%" height="15" fill="rgb(245,182,12)" fg:x="314" fg:w="1"/><text x="25.4709%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.2209%" y="245" width="0.0803%" height="15" fill="rgb(244,222,52)" fg:x="314" fg:w="1"/><text x="25.4709%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="25.3815%" y="293" width="0.0803%" height="15" fill="rgb(236,222,51)" fg:x="316" fg:w="1"/><text x="25.6315%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="25.3815%" y="277" width="0.0803%" height="15" fill="rgb(254,71,22)" fg:x="316" fg:w="1"/><text x="25.6315%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.6225%" y="229" width="0.0803%" height="15" fill="rgb(250,104,15)" fg:x="319" fg:w="1"/><text x="25.8725%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="25.8635%" y="213" width="0.1606%" height="15" fill="rgb(229,223,46)" fg:x="322" fg:w="2"/><text x="26.1135%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="25.8635%" y="197" width="0.1606%" height="15" fill="rgb(209,129,18)" fg:x="322" fg:w="2"/><text x="26.1135%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="25.8635%" y="181" width="0.1606%" height="15" fill="rgb(224,160,1)" fg:x="322" fg:w="2"/><text x="26.1135%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (10 samples, 0.80%)</title><rect x="25.3012%" y="309" width="0.8032%" height="15" fill="rgb(237,112,21)" fg:x="315" fg:w="10"/><text x="25.5512%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="25.4618%" y="293" width="0.6426%" height="15" fill="rgb(215,198,53)" fg:x="317" fg:w="8"/><text x="25.7118%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="25.4618%" y="277" width="0.6426%" height="15" fill="rgb(218,227,35)" fg:x="317" fg:w="8"/><text x="25.7118%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="25.4618%" y="261" width="0.6426%" height="15" fill="rgb(232,121,22)" fg:x="317" fg:w="8"/><text x="25.7118%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.64%)</title><rect x="25.4618%" y="245" width="0.6426%" height="15" fill="rgb(235,52,54)" fg:x="317" fg:w="8"/><text x="25.7118%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="25.7028%" y="229" width="0.4016%" height="15" fill="rgb(219,21,44)" fg:x="320" fg:w="5"/><text x="25.9528%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="26.0241%" y="213" width="0.0803%" height="15" fill="rgb(221,51,43)" fg:x="324" fg:w="1"/><text x="26.2741%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="26.1044%" y="261" width="0.0803%" height="15" fill="rgb(225,77,42)" fg:x="325" fg:w="1"/><text x="26.3544%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="26.1044%" y="245" width="0.0803%" height="15" fill="rgb(214,117,53)" fg:x="325" fg:w="1"/><text x="26.3544%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="26.1044%" y="229" width="0.0803%" height="15" fill="rgb(218,227,27)" fg:x="325" fg:w="1"/><text x="26.3544%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.1044%" y="213" width="0.0803%" height="15" fill="rgb(223,214,36)" fg:x="325" fg:w="1"/><text x="26.3544%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.1044%" y="197" width="0.0803%" height="15" fill="rgb(235,21,7)" fg:x="325" fg:w="1"/><text x="26.3544%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="26.1044%" y="181" width="0.0803%" height="15" fill="rgb(244,216,4)" fg:x="325" fg:w="1"/><text x="26.3544%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.1847%" y="261" width="0.0803%" height="15" fill="rgb(249,197,24)" fg:x="326" fg:w="1"/><text x="26.4347%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="26.2651%" y="261" width="0.1606%" height="15" fill="rgb(222,169,49)" fg:x="327" fg:w="2"/><text x="26.5151%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="26.2651%" y="245" width="0.1606%" height="15" fill="rgb(207,137,33)" fg:x="327" fg:w="2"/><text x="26.5151%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.72%)</title><rect x="26.4257%" y="245" width="0.7229%" height="15" fill="rgb(219,180,40)" fg:x="329" fg:w="9"/><text x="26.6757%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.72%)</title><rect x="26.4257%" y="229" width="0.7229%" height="15" fill="rgb(250,163,42)" fg:x="329" fg:w="9"/><text x="26.6757%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="26.9880%" y="213" width="0.1606%" height="15" fill="rgb(239,163,0)" fg:x="336" fg:w="2"/><text x="27.2380%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="27.1486%" y="229" width="0.0803%" height="15" fill="rgb(252,38,28)" fg:x="338" fg:w="1"/><text x="27.3986%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="27.1486%" y="245" width="0.1606%" height="15" fill="rgb(254,203,26)" fg:x="338" fg:w="2"/><text x="27.3986%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="27.2289%" y="229" width="0.0803%" height="15" fill="rgb(209,129,32)" fg:x="339" fg:w="1"/><text x="27.4789%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="27.2289%" y="213" width="0.0803%" height="15" fill="rgb(207,177,52)" fg:x="339" fg:w="1"/><text x="27.4789%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="27.2289%" y="197" width="0.0803%" height="15" fill="rgb(230,209,36)" fg:x="339" fg:w="1"/><text x="27.4789%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.2289%" y="181" width="0.0803%" height="15" fill="rgb(238,131,0)" fg:x="339" fg:w="1"/><text x="27.4789%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.2289%" y="165" width="0.0803%" height="15" fill="rgb(218,61,31)" fg:x="339" fg:w="1"/><text x="27.4789%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.2289%" y="149" width="0.0803%" height="15" fill="rgb(232,6,53)" fg:x="339" fg:w="1"/><text x="27.4789%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="27.3896%" y="213" width="0.0803%" height="15" fill="rgb(254,100,32)" fg:x="341" fg:w="1"/><text x="27.6396%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="27.8715%" y="181" width="0.1606%" height="15" fill="rgb(229,194,49)" fg:x="347" fg:w="2"/><text x="28.1215%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="27.8715%" y="165" width="0.1606%" height="15" fill="rgb(206,208,39)" fg:x="347" fg:w="2"/><text x="28.1215%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="27.8715%" y="149" width="0.1606%" height="15" fill="rgb(246,226,14)" fg:x="347" fg:w="2"/><text x="28.1215%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (8 samples, 0.64%)</title><rect x="27.4699%" y="213" width="0.6426%" height="15" fill="rgb(226,48,32)" fg:x="342" fg:w="8"/><text x="27.7199%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.48%)</title><rect x="27.6305%" y="197" width="0.4819%" height="15" fill="rgb(252,43,54)" fg:x="344" fg:w="6"/><text x="27.8805%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.0321%" y="181" width="0.0803%" height="15" fill="rgb(207,124,0)" fg:x="349" fg:w="1"/><text x="28.2821%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (13 samples, 1.04%)</title><rect x="27.3092%" y="245" width="1.0442%" height="15" fill="rgb(248,188,30)" fg:x="340" fg:w="13"/><text x="27.5592%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (13 samples, 1.04%)</title><rect x="27.3092%" y="229" width="1.0442%" height="15" fill="rgb(232,14,43)" fg:x="340" fg:w="13"/><text x="27.5592%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="28.1124%" y="213" width="0.2410%" height="15" fill="rgb(218,52,29)" fg:x="350" fg:w="3"/><text x="28.3624%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="28.1124%" y="197" width="0.2410%" height="15" fill="rgb(218,176,50)" fg:x="350" fg:w="3"/><text x="28.3624%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="28.1124%" y="181" width="0.2410%" height="15" fill="rgb(213,112,0)" fg:x="350" fg:w="3"/><text x="28.3624%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="28.3534%" y="245" width="0.0803%" height="15" fill="rgb(244,216,8)" fg:x="353" fg:w="1"/><text x="28.6034%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="28.3534%" y="229" width="0.0803%" height="15" fill="rgb(224,148,53)" fg:x="353" fg:w="1"/><text x="28.6034%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="28.3534%" y="213" width="0.0803%" height="15" fill="rgb(241,133,40)" fg:x="353" fg:w="1"/><text x="28.6034%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="28.4337%" y="197" width="0.0803%" height="15" fill="rgb(232,17,44)" fg:x="354" fg:w="1"/><text x="28.6837%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.4337%" y="181" width="0.0803%" height="15" fill="rgb(213,32,25)" fg:x="354" fg:w="1"/><text x="28.6837%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.4337%" y="165" width="0.0803%" height="15" fill="rgb(249,115,27)" fg:x="354" fg:w="1"/><text x="28.6837%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.4337%" y="149" width="0.0803%" height="15" fill="rgb(241,50,1)" fg:x="354" fg:w="1"/><text x="28.6837%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="28.8353%" y="133" width="0.1606%" height="15" fill="rgb(244,175,40)" fg:x="359" fg:w="2"/><text x="29.0853%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="28.9960%" y="133" width="0.3213%" height="15" fill="rgb(230,94,34)" fg:x="361" fg:w="4"/><text x="29.2460%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="29.1566%" y="117" width="0.1606%" height="15" fill="rgb(223,185,29)" fg:x="363" fg:w="2"/><text x="29.4066%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="29.1566%" y="101" width="0.1606%" height="15" fill="rgb(225,193,15)" fg:x="363" fg:w="2"/><text x="29.4066%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="29.1566%" y="85" width="0.1606%" height="15" fill="rgb(252,121,38)" fg:x="363" fg:w="2"/><text x="29.4066%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="29.3173%" y="133" width="0.0803%" height="15" fill="rgb(232,44,12)" fg:x="365" fg:w="1"/><text x="29.5673%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.6386%" y="101" width="0.0803%" height="15" fill="rgb(226,45,54)" fg:x="369" fg:w="1"/><text x="29.8886%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="29.7189%" y="101" width="0.1606%" height="15" fill="rgb(209,67,17)" fg:x="370" fg:w="2"/><text x="29.9689%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.7992%" y="85" width="0.0803%" height="15" fill="rgb(219,108,52)" fg:x="371" fg:w="1"/><text x="30.0492%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.7992%" y="69" width="0.0803%" height="15" fill="rgb(216,118,19)" fg:x="371" fg:w="1"/><text x="30.0492%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.64%)</title><rect x="29.3976%" y="133" width="0.6426%" height="15" fill="rgb(228,120,40)" fg:x="366" fg:w="8"/><text x="29.6476%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.64%)</title><rect x="29.3976%" y="117" width="0.6426%" height="15" fill="rgb(221,218,34)" fg:x="366" fg:w="8"/><text x="29.6476%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="29.8795%" y="101" width="0.1606%" height="15" fill="rgb(235,89,14)" fg:x="372" fg:w="2"/><text x="30.1295%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="29.9598%" y="85" width="0.0803%" height="15" fill="rgb(248,89,7)" fg:x="373" fg:w="1"/><text x="30.2098%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.9598%" y="69" width="0.0803%" height="15" fill="rgb(212,114,34)" fg:x="373" fg:w="1"/><text x="30.2098%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.9598%" y="53" width="0.0803%" height="15" fill="rgb(246,88,32)" fg:x="373" fg:w="1"/><text x="30.2098%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="29.9598%" y="37" width="0.0803%" height="15" fill="rgb(237,135,0)" fg:x="373" fg:w="1"/><text x="30.2098%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="30.0402%" y="133" width="0.0803%" height="15" fill="rgb(220,201,54)" fg:x="374" fg:w="1"/><text x="30.2902%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="30.0402%" y="117" width="0.0803%" height="15" fill="rgb(210,142,36)" fg:x="374" fg:w="1"/><text x="30.2902%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="30.0402%" y="101" width="0.0803%" height="15" fill="rgb(247,189,26)" fg:x="374" fg:w="1"/><text x="30.2902%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="30.0402%" y="85" width="0.0803%" height="15" fill="rgb(223,89,24)" fg:x="374" fg:w="1"/><text x="30.2902%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (29 samples, 2.33%)</title><rect x="30.1205%" y="133" width="2.3293%" height="15" fill="rgb(205,90,19)" fg:x="375" fg:w="29"/><text x="30.3705%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (29 samples, 2.33%)</title><rect x="30.1205%" y="117" width="2.3293%" height="15" fill="rgb(234,57,40)" fg:x="375" fg:w="29"/><text x="30.3705%" y="127.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (29 samples, 2.33%)</title><rect x="30.1205%" y="101" width="2.3293%" height="15" fill="rgb(213,109,10)" fg:x="375" fg:w="29"/><text x="30.3705%" y="111.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="32.4498%" y="133" width="0.2410%" height="15" fill="rgb(214,189,23)" fg:x="404" fg:w="3"/><text x="32.6998%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.6104%" y="117" width="0.0803%" height="15" fill="rgb(234,200,10)" fg:x="406" fg:w="1"/><text x="32.8604%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 4.50%)</title><rect x="28.4337%" y="229" width="4.4980%" height="15" fill="rgb(221,148,16)" fg:x="354" fg:w="56"/><text x="28.6837%" y="239.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (56 samples, 4.50%)</title><rect x="28.4337%" y="213" width="4.4980%" height="15" fill="rgb(230,115,10)" fg:x="354" fg:w="56"/><text x="28.6837%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (55 samples, 4.42%)</title><rect x="28.5141%" y="197" width="4.4177%" height="15" fill="rgb(220,106,42)" fg:x="355" fg:w="55"/><text x="28.7641%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (55 samples, 4.42%)</title><rect x="28.5141%" y="181" width="4.4177%" height="15" fill="rgb(225,105,39)" fg:x="355" fg:w="55"/><text x="28.7641%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (55 samples, 4.42%)</title><rect x="28.5141%" y="165" width="4.4177%" height="15" fill="rgb(211,161,38)" fg:x="355" fg:w="55"/><text x="28.7641%" y="175.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (55 samples, 4.42%)</title><rect x="28.5141%" y="149" width="4.4177%" height="15" fill="rgb(213,23,19)" fg:x="355" fg:w="55"/><text x="28.7641%" y="159.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="32.6908%" y="133" width="0.2410%" height="15" fill="rgb(240,2,33)" fg:x="407" fg:w="3"/><text x="32.9408%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.8514%" y="117" width="0.0803%" height="15" fill="rgb(221,29,45)" fg:x="409" fg:w="1"/><text x="33.1014%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.8514%" y="101" width="0.0803%" height="15" fill="rgb(242,10,19)" fg:x="409" fg:w="1"/><text x="33.1014%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.40%)</title><rect x="33.0924%" y="213" width="0.4016%" height="15" fill="rgb(250,84,37)" fg:x="412" fg:w="5"/><text x="33.3424%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="33.1727%" y="197" width="0.3213%" height="15" fill="rgb(214,136,7)" fg:x="413" fg:w="4"/><text x="33.4227%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="33.1727%" y="181" width="0.3213%" height="15" fill="rgb(231,189,12)" fg:x="413" fg:w="4"/><text x="33.4227%" y="191.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="33.1727%" y="165" width="0.3213%" height="15" fill="rgb(244,40,16)" fg:x="413" fg:w="4"/><text x="33.4227%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (67 samples, 5.38%)</title><rect x="28.4337%" y="245" width="5.3815%" height="15" fill="rgb(217,29,15)" fg:x="354" fg:w="67"/><text x="28.6837%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="32.9317%" y="229" width="0.8835%" height="15" fill="rgb(235,172,33)" fg:x="410" fg:w="11"/><text x="33.1817%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="33.4940%" y="213" width="0.3213%" height="15" fill="rgb(206,148,28)" fg:x="417" fg:w="4"/><text x="33.7440%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (93 samples, 7.47%)</title><rect x="26.4257%" y="261" width="7.4699%" height="15" fill="rgb(251,167,37)" fg:x="329" fg:w="93"/><text x="26.6757%" y="271.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="33.8153%" y="245" width="0.0803%" height="15" fill="rgb(229,94,52)" fg:x="421" fg:w="1"/><text x="34.0653%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="33.8153%" y="229" width="0.0803%" height="15" fill="rgb(216,132,9)" fg:x="421" fg:w="1"/><text x="34.0653%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="33.8153%" y="213" width="0.0803%" height="15" fill="rgb(208,110,29)" fg:x="421" fg:w="1"/><text x="34.0653%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.8153%" y="197" width="0.0803%" height="15" fill="rgb(241,23,8)" fg:x="421" fg:w="1"/><text x="34.0653%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.8153%" y="181" width="0.0803%" height="15" fill="rgb(208,26,35)" fg:x="421" fg:w="1"/><text x="34.0653%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="33.8956%" y="229" width="0.0803%" height="15" fill="rgb(242,165,34)" fg:x="422" fg:w="1"/><text x="34.1456%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="33.8956%" y="213" width="0.0803%" height="15" fill="rgb(222,222,33)" fg:x="422" fg:w="1"/><text x="34.1456%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.8956%" y="197" width="0.0803%" height="15" fill="rgb(227,16,52)" fg:x="422" fg:w="1"/><text x="34.1456%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="33.8956%" y="261" width="0.1606%" height="15" fill="rgb(213,93,12)" fg:x="422" fg:w="2"/><text x="34.1456%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="33.8956%" y="245" width="0.1606%" height="15" fill="rgb(238,41,5)" fg:x="422" fg:w="2"/><text x="34.1456%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="33.9759%" y="229" width="0.0803%" height="15" fill="rgb(211,60,15)" fg:x="423" fg:w="1"/><text x="34.2259%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="33.9759%" y="213" width="0.0803%" height="15" fill="rgb(209,11,34)" fg:x="423" fg:w="1"/><text x="34.2259%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="34.0562%" y="229" width="0.0803%" height="15" fill="rgb(254,155,53)" fg:x="424" fg:w="1"/><text x="34.3062%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="34.0562%" y="213" width="0.0803%" height="15" fill="rgb(236,174,8)" fg:x="424" fg:w="1"/><text x="34.3062%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="34.1365%" y="229" width="0.0803%" height="15" fill="rgb(229,31,27)" fg:x="425" fg:w="1"/><text x="34.3865%" y="239.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (102 samples, 8.19%)</title><rect x="26.1044%" y="293" width="8.1928%" height="15" fill="rgb(242,226,26)" fg:x="325" fg:w="102"/><text x="26.3544%" y="303.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (102 samples, 8.19%)</title><rect x="26.1044%" y="277" width="8.1928%" height="15" fill="rgb(234,32,40)" fg:x="325" fg:w="102"/><text x="26.3544%" y="287.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="34.0562%" y="261" width="0.2410%" height="15" fill="rgb(249,226,47)" fg:x="424" fg:w="3"/><text x="34.3062%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="34.0562%" y="245" width="0.2410%" height="15" fill="rgb(212,6,26)" fg:x="424" fg:w="3"/><text x="34.3062%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="34.2169%" y="229" width="0.0803%" height="15" fill="rgb(249,202,29)" fg:x="426" fg:w="1"/><text x="34.4669%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (117 samples, 9.40%)</title><rect x="24.9799%" y="325" width="9.3976%" height="15" fill="rgb(226,106,4)" fg:x="311" fg:w="117"/><text x="25.2299%" y="335.50">indefinite::r..</text></g><g><title>regex::regex::string::Regex::new (103 samples, 8.27%)</title><rect x="26.1044%" y="309" width="8.2731%" height="15" fill="rgb(251,2,27)" fg:x="325" fg:w="103"/><text x="26.3544%" y="319.50">regex::regex..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="34.2972%" y="293" width="0.0803%" height="15" fill="rgb(236,208,0)" fg:x="427" fg:w="1"/><text x="34.5472%" y="303.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="34.2972%" y="277" width="0.0803%" height="15" fill="rgb(211,66,17)" fg:x="427" fg:w="1"/><text x="34.5472%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.3775%" y="229" width="0.0803%" height="15" fill="rgb(216,129,9)" fg:x="428" fg:w="1"/><text x="34.6275%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="34.4578%" y="229" width="0.0803%" height="15" fill="rgb(215,130,23)" fg:x="429" fg:w="1"/><text x="34.7078%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="34.5382%" y="229" width="0.0803%" height="15" fill="rgb(253,157,11)" fg:x="430" fg:w="1"/><text x="34.7882%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="34.6185%" y="229" width="0.1606%" height="15" fill="rgb(224,25,14)" fg:x="431" fg:w="2"/><text x="34.8685%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="34.6988%" y="213" width="0.0803%" height="15" fill="rgb(238,16,7)" fg:x="432" fg:w="1"/><text x="34.9488%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="34.7791%" y="213" width="0.0803%" height="15" fill="rgb(228,74,11)" fg:x="433" fg:w="1"/><text x="35.0291%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="34.7791%" y="197" width="0.0803%" height="15" fill="rgb(239,221,27)" fg:x="433" fg:w="1"/><text x="35.0291%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="34.7791%" y="181" width="0.0803%" height="15" fill="rgb(229,166,18)" fg:x="433" fg:w="1"/><text x="35.0291%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="34.7791%" y="165" width="0.0803%" height="15" fill="rgb(254,94,46)" fg:x="433" fg:w="1"/><text x="35.0291%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="34.9398%" y="197" width="0.1606%" height="15" fill="rgb(241,79,19)" fg:x="435" fg:w="2"/><text x="35.1898%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.0201%" y="181" width="0.0803%" height="15" fill="rgb(228,99,51)" fg:x="436" fg:w="1"/><text x="35.2701%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.0201%" y="165" width="0.0803%" height="15" fill="rgb(211,15,6)" fg:x="436" fg:w="1"/><text x="35.2701%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.0201%" y="149" width="0.0803%" height="15" fill="rgb(245,107,54)" fg:x="436" fg:w="1"/><text x="35.2701%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.88%)</title><rect x="34.3775%" y="245" width="0.8835%" height="15" fill="rgb(243,3,2)" fg:x="428" fg:w="11"/><text x="34.6275%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.48%)</title><rect x="34.7791%" y="229" width="0.4819%" height="15" fill="rgb(206,122,10)" fg:x="433" fg:w="6"/><text x="35.0291%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="34.8594%" y="213" width="0.4016%" height="15" fill="rgb(224,88,4)" fg:x="434" fg:w="5"/><text x="35.1094%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="35.1004%" y="197" width="0.1606%" height="15" fill="rgb(230,1,41)" fg:x="437" fg:w="2"/><text x="35.3504%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.2610%" y="197" width="0.0803%" height="15" fill="rgb(230,1,31)" fg:x="439" fg:w="1"/><text x="35.5110%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.2610%" y="181" width="0.0803%" height="15" fill="rgb(232,67,19)" fg:x="439" fg:w="1"/><text x="35.5110%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.2610%" y="165" width="0.0803%" height="15" fill="rgb(222,206,20)" fg:x="439" fg:w="1"/><text x="35.5110%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (13 samples, 1.04%)</title><rect x="34.3775%" y="293" width="1.0442%" height="15" fill="rgb(217,225,19)" fg:x="428" fg:w="13"/><text x="34.6275%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (13 samples, 1.04%)</title><rect x="34.3775%" y="277" width="1.0442%" height="15" fill="rgb(234,13,33)" fg:x="428" fg:w="13"/><text x="34.6275%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (13 samples, 1.04%)</title><rect x="34.3775%" y="261" width="1.0442%" height="15" fill="rgb(254,5,1)" fg:x="428" fg:w="13"/><text x="34.6275%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="35.2610%" y="245" width="0.1606%" height="15" fill="rgb(211,121,41)" fg:x="439" fg:w="2"/><text x="35.5110%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="35.2610%" y="229" width="0.1606%" height="15" fill="rgb(213,199,35)" fg:x="439" fg:w="2"/><text x="35.5110%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="35.2610%" y="213" width="0.1606%" height="15" fill="rgb(240,118,22)" fg:x="439" fg:w="2"/><text x="35.5110%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="35.3414%" y="197" width="0.0803%" height="15" fill="rgb(238,184,25)" fg:x="440" fg:w="1"/><text x="35.5914%" y="207.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="35.3414%" y="181" width="0.0803%" height="15" fill="rgb(210,165,6)" fg:x="440" fg:w="1"/><text x="35.5914%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (198 samples, 15.90%)</title><rect x="19.5984%" y="405" width="15.9036%" height="15" fill="rgb(235,149,5)" fg:x="244" fg:w="198"/><text x="19.8484%" y="415.50">&lt;&amp;kernel::model::EntityP..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (190 samples, 15.26%)</title><rect x="20.2410%" y="389" width="15.2610%" height="15" fill="rgb(221,63,5)" fg:x="252" fg:w="190"/><text x="20.4910%" y="399.50">plugins_core::looking::..</text></g><g><title>indefinite::indefinite (190 samples, 15.26%)</title><rect x="20.2410%" y="373" width="15.2610%" height="15" fill="rgb(250,44,41)" fg:x="252" fg:w="190"/><text x="20.4910%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (190 samples, 15.26%)</title><rect x="20.2410%" y="357" width="15.2610%" height="15" fill="rgb(235,112,47)" fg:x="252" fg:w="190"/><text x="20.4910%" y="367.50">indefinite::methods::in..</text></g><g><title>indefinite::methods::apply_rules (190 samples, 15.26%)</title><rect x="20.2410%" y="341" width="15.2610%" height="15" fill="rgb(252,176,34)" fg:x="252" fg:w="190"/><text x="20.4910%" y="351.50">indefinite::methods::ap..</text></g><g><title>indefinite::rules::other::Other::run (14 samples, 1.12%)</title><rect x="34.3775%" y="325" width="1.1245%" height="15" fill="rgb(234,50,19)" fg:x="428" fg:w="14"/><text x="34.6275%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (14 samples, 1.12%)</title><rect x="34.3775%" y="309" width="1.1245%" height="15" fill="rgb(241,195,31)" fg:x="428" fg:w="14"/><text x="34.6275%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="35.4217%" y="293" width="0.0803%" height="15" fill="rgb(212,93,11)" fg:x="441" fg:w="1"/><text x="35.6717%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="35.4217%" y="277" width="0.0803%" height="15" fill="rgb(254,98,51)" fg:x="441" fg:w="1"/><text x="35.6717%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="35.4217%" y="261" width="0.0803%" height="15" fill="rgb(246,18,45)" fg:x="441" fg:w="1"/><text x="35.6717%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="35.4217%" y="245" width="0.0803%" height="15" fill="rgb(215,148,23)" fg:x="441" fg:w="1"/><text x="35.6717%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="35.4217%" y="229" width="0.0803%" height="15" fill="rgb(227,22,7)" fg:x="441" fg:w="1"/><text x="35.6717%" y="239.50"></text></g><g><title>plugins_core::tools::contained_by (1 samples, 0.08%)</title><rect x="35.5823%" y="357" width="0.0803%" height="15" fill="rgb(207,210,37)" fg:x="443" fg:w="1"/><text x="35.8323%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="35.5823%" y="341" width="0.0803%" height="15" fill="rgb(247,147,42)" fg:x="443" fg:w="1"/><text x="35.8323%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.5823%" y="325" width="0.0803%" height="15" fill="rgb(226,213,14)" fg:x="443" fg:w="1"/><text x="35.8323%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.5823%" y="309" width="0.0803%" height="15" fill="rgb(223,18,10)" fg:x="443" fg:w="1"/><text x="35.8323%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.5823%" y="293" width="0.0803%" height="15" fill="rgb(253,34,22)" fg:x="443" fg:w="1"/><text x="35.8323%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.5823%" y="277" width="0.0803%" height="15" fill="rgb(222,90,31)" fg:x="443" fg:w="1"/><text x="35.8323%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.5823%" y="261" width="0.0803%" height="15" fill="rgb(220,182,30)" fg:x="443" fg:w="1"/><text x="35.8323%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="35.5823%" y="245" width="0.0803%" height="15" fill="rgb(229,170,12)" fg:x="443" fg:w="1"/><text x="35.8323%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="35.5823%" y="229" width="0.0803%" height="15" fill="rgb(210,101,21)" fg:x="443" fg:w="1"/><text x="35.8323%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="35.5823%" y="213" width="0.0803%" height="15" fill="rgb(237,177,31)" fg:x="443" fg:w="1"/><text x="35.8323%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.5823%" y="197" width="0.0803%" height="15" fill="rgb(215,91,34)" fg:x="443" fg:w="1"/><text x="35.8323%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.5823%" y="181" width="0.0803%" height="15" fill="rgb(229,206,16)" fg:x="443" fg:w="1"/><text x="35.8323%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="35.5823%" y="165" width="0.0803%" height="15" fill="rgb(235,207,10)" fg:x="443" fg:w="1"/><text x="35.8323%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="35.5823%" y="149" width="0.0803%" height="15" fill="rgb(247,18,10)" fg:x="443" fg:w="1"/><text x="35.8323%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="35.5823%" y="133" width="0.0803%" height="15" fill="rgb(232,4,6)" fg:x="443" fg:w="1"/><text x="35.8323%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="35.5823%" y="117" width="0.0803%" height="15" fill="rgb(247,93,45)" fg:x="443" fg:w="1"/><text x="35.8323%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.5823%" y="101" width="0.0803%" height="15" fill="rgb(240,181,18)" fg:x="443" fg:w="1"/><text x="35.8323%" y="111.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="35.6627%" y="341" width="0.1606%" height="15" fill="rgb(208,224,0)" fg:x="444" fg:w="2"/><text x="35.9127%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.7430%" y="325" width="0.0803%" height="15" fill="rgb(224,207,54)" fg:x="445" fg:w="1"/><text x="35.9930%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.7430%" y="309" width="0.0803%" height="15" fill="rgb(217,152,29)" fg:x="445" fg:w="1"/><text x="35.9930%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.7430%" y="293" width="0.0803%" height="15" fill="rgb(243,78,27)" fg:x="445" fg:w="1"/><text x="35.9930%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.7430%" y="277" width="0.0803%" height="15" fill="rgb(228,111,9)" fg:x="445" fg:w="1"/><text x="35.9930%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.7430%" y="261" width="0.0803%" height="15" fill="rgb(230,213,21)" fg:x="445" fg:w="1"/><text x="35.9930%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.7430%" y="245" width="0.0803%" height="15" fill="rgb(248,50,36)" fg:x="445" fg:w="1"/><text x="35.9930%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.7430%" y="229" width="0.0803%" height="15" fill="rgb(226,19,31)" fg:x="445" fg:w="1"/><text x="35.9930%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="35.7430%" y="213" width="0.0803%" height="15" fill="rgb(205,132,21)" fg:x="445" fg:w="1"/><text x="35.9930%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="35.7430%" y="197" width="0.0803%" height="15" fill="rgb(207,42,19)" fg:x="445" fg:w="1"/><text x="35.9930%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="35.7430%" y="181" width="0.0803%" height="15" fill="rgb(229,69,35)" fg:x="445" fg:w="1"/><text x="35.9930%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.7430%" y="165" width="0.0803%" height="15" fill="rgb(226,96,11)" fg:x="445" fg:w="1"/><text x="35.9930%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.7430%" y="149" width="0.0803%" height="15" fill="rgb(236,133,54)" fg:x="445" fg:w="1"/><text x="35.9930%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="35.7430%" y="133" width="0.0803%" height="15" fill="rgb(247,166,21)" fg:x="445" fg:w="1"/><text x="35.9930%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="35.7430%" y="117" width="0.0803%" height="15" fill="rgb(220,132,12)" fg:x="445" fg:w="1"/><text x="35.9930%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="35.7430%" y="101" width="0.0803%" height="15" fill="rgb(233,27,30)" fg:x="445" fg:w="1"/><text x="35.9930%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="35.7430%" y="85" width="0.0803%" height="15" fill="rgb(246,161,27)" fg:x="445" fg:w="1"/><text x="35.9930%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.7430%" y="69" width="0.0803%" height="15" fill="rgb(240,56,3)" fg:x="445" fg:w="1"/><text x="35.9930%" y="79.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (4 samples, 0.32%)</title><rect x="35.5823%" y="373" width="0.3213%" height="15" fill="rgb(242,190,9)" fg:x="443" fg:w="4"/><text x="35.8323%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.24%)</title><rect x="35.6627%" y="357" width="0.2410%" height="15" fill="rgb(234,3,52)" fg:x="444" fg:w="3"/><text x="35.9127%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="35.8233%" y="341" width="0.0803%" height="15" fill="rgb(220,221,19)" fg:x="446" fg:w="1"/><text x="36.0733%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="35.8233%" y="325" width="0.0803%" height="15" fill="rgb(247,178,30)" fg:x="446" fg:w="1"/><text x="36.0733%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.8233%" y="309" width="0.0803%" height="15" fill="rgb(234,212,27)" fg:x="446" fg:w="1"/><text x="36.0733%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (7 samples, 0.56%)</title><rect x="35.5020%" y="405" width="0.5622%" height="15" fill="rgb(226,199,38)" fg:x="442" fg:w="7"/><text x="35.7520%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (6 samples, 0.48%)</title><rect x="35.5823%" y="389" width="0.4819%" height="15" fill="rgb(248,114,22)" fg:x="443" fg:w="6"/><text x="35.8323%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="35.9036%" y="373" width="0.1606%" height="15" fill="rgb(221,180,4)" fg:x="447" fg:w="2"/><text x="36.1536%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="35.9036%" y="357" width="0.1606%" height="15" fill="rgb(220,229,24)" fg:x="447" fg:w="2"/><text x="36.1536%" y="367.50"></text></g><g><title>plugins_core::finding::matches_description (2 samples, 0.16%)</title><rect x="35.9036%" y="341" width="0.1606%" height="15" fill="rgb(226,184,27)" fg:x="447" fg:w="2"/><text x="36.1536%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::name (2 samples, 0.16%)</title><rect x="35.9036%" y="325" width="0.1606%" height="15" fill="rgb(232,99,15)" fg:x="447" fg:w="2"/><text x="36.1536%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="35.9036%" y="309" width="0.1606%" height="15" fill="rgb(250,167,16)" fg:x="447" fg:w="2"/><text x="36.1536%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="35.9036%" y="293" width="0.1606%" height="15" fill="rgb(243,113,6)" fg:x="447" fg:w="2"/><text x="36.1536%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="35.9036%" y="277" width="0.1606%" height="15" fill="rgb(244,147,52)" fg:x="447" fg:w="2"/><text x="36.1536%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.9839%" y="261" width="0.0803%" height="15" fill="rgb(235,59,50)" fg:x="448" fg:w="1"/><text x="36.2339%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="35.9839%" y="245" width="0.0803%" height="15" fill="rgb(250,188,6)" fg:x="448" fg:w="1"/><text x="36.2339%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.9839%" y="229" width="0.0803%" height="15" fill="rgb(236,173,11)" fg:x="448" fg:w="1"/><text x="36.2339%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="35.9839%" y="213" width="0.0803%" height="15" fill="rgb(233,64,3)" fg:x="448" fg:w="1"/><text x="36.2339%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.9839%" y="197" width="0.0803%" height="15" fill="rgb(207,92,7)" fg:x="448" fg:w="1"/><text x="36.2339%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.0643%" y="133" width="0.0803%" height="15" fill="rgb(221,30,19)" fg:x="449" fg:w="1"/><text x="36.3143%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.0643%" y="117" width="0.0803%" height="15" fill="rgb(245,22,49)" fg:x="449" fg:w="1"/><text x="36.3143%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="36.0643%" y="101" width="0.0803%" height="15" fill="rgb(218,39,20)" fg:x="449" fg:w="1"/><text x="36.3143%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="36.0643%" y="85" width="0.0803%" height="15" fill="rgb(222,144,21)" fg:x="449" fg:w="1"/><text x="36.3143%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="36.0643%" y="69" width="0.0803%" height="15" fill="rgb(222,78,51)" fg:x="449" fg:w="1"/><text x="36.3143%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="36.0643%" y="53" width="0.0803%" height="15" fill="rgb(248,213,53)" fg:x="449" fg:w="1"/><text x="36.3143%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.0643%" y="37" width="0.0803%" height="15" fill="rgb(245,28,34)" fg:x="449" fg:w="1"/><text x="36.3143%" y="47.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="36.0643%" y="229" width="0.1606%" height="15" fill="rgb(229,186,26)" fg:x="449" fg:w="2"/><text x="36.3143%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="36.0643%" y="213" width="0.1606%" height="15" fill="rgb(224,0,41)" fg:x="449" fg:w="2"/><text x="36.3143%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="36.0643%" y="197" width="0.1606%" height="15" fill="rgb(223,136,51)" fg:x="449" fg:w="2"/><text x="36.3143%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="36.0643%" y="181" width="0.1606%" height="15" fill="rgb(234,50,9)" fg:x="449" fg:w="2"/><text x="36.3143%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="36.0643%" y="165" width="0.1606%" height="15" fill="rgb(242,164,20)" fg:x="449" fg:w="2"/><text x="36.3143%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="36.0643%" y="149" width="0.1606%" height="15" fill="rgb(230,169,22)" fg:x="449" fg:w="2"/><text x="36.3143%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="36.1446%" y="133" width="0.0803%" height="15" fill="rgb(228,82,26)" fg:x="450" fg:w="1"/><text x="36.3946%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="36.1446%" y="117" width="0.0803%" height="15" fill="rgb(244,220,31)" fg:x="450" fg:w="1"/><text x="36.3946%" y="127.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (3 samples, 0.24%)</title><rect x="36.0643%" y="389" width="0.2410%" height="15" fill="rgb(214,35,25)" fg:x="449" fg:w="3"/><text x="36.3143%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (3 samples, 0.24%)</title><rect x="36.0643%" y="373" width="0.2410%" height="15" fill="rgb(245,162,54)" fg:x="449" fg:w="3"/><text x="36.3143%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (3 samples, 0.24%)</title><rect x="36.0643%" y="357" width="0.2410%" height="15" fill="rgb(210,43,24)" fg:x="449" fg:w="3"/><text x="36.3143%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (3 samples, 0.24%)</title><rect x="36.0643%" y="341" width="0.2410%" height="15" fill="rgb(226,145,51)" fg:x="449" fg:w="3"/><text x="36.3143%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (3 samples, 0.24%)</title><rect x="36.0643%" y="325" width="0.2410%" height="15" fill="rgb(237,52,53)" fg:x="449" fg:w="3"/><text x="36.3143%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (3 samples, 0.24%)</title><rect x="36.0643%" y="309" width="0.2410%" height="15" fill="rgb(216,226,7)" fg:x="449" fg:w="3"/><text x="36.3143%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (3 samples, 0.24%)</title><rect x="36.0643%" y="293" width="0.2410%" height="15" fill="rgb(206,223,18)" fg:x="449" fg:w="3"/><text x="36.3143%" y="303.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (3 samples, 0.24%)</title><rect x="36.0643%" y="277" width="0.2410%" height="15" fill="rgb(221,1,10)" fg:x="449" fg:w="3"/><text x="36.3143%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="36.0643%" y="261" width="0.2410%" height="15" fill="rgb(221,151,42)" fg:x="449" fg:w="3"/><text x="36.3143%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="36.0643%" y="245" width="0.2410%" height="15" fill="rgb(205,183,46)" fg:x="449" fg:w="3"/><text x="36.3143%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.2249%" y="229" width="0.0803%" height="15" fill="rgb(239,229,1)" fg:x="451" fg:w="1"/><text x="36.4749%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.2249%" y="213" width="0.0803%" height="15" fill="rgb(236,192,23)" fg:x="451" fg:w="1"/><text x="36.4749%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="36.2249%" y="197" width="0.0803%" height="15" fill="rgb(215,146,3)" fg:x="451" fg:w="1"/><text x="36.4749%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="36.2249%" y="181" width="0.0803%" height="15" fill="rgb(235,52,27)" fg:x="451" fg:w="1"/><text x="36.4749%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="36.2249%" y="165" width="0.0803%" height="15" fill="rgb(236,45,20)" fg:x="451" fg:w="1"/><text x="36.4749%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.2249%" y="149" width="0.0803%" height="15" fill="rgb(235,86,41)" fg:x="451" fg:w="1"/><text x="36.4749%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.2249%" y="133" width="0.0803%" height="15" fill="rgb(235,27,27)" fg:x="451" fg:w="1"/><text x="36.4749%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="36.2249%" y="117" width="0.0803%" height="15" fill="rgb(232,4,34)" fg:x="451" fg:w="1"/><text x="36.4749%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="36.2249%" y="101" width="0.0803%" height="15" fill="rgb(215,22,10)" fg:x="451" fg:w="1"/><text x="36.4749%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="36.2249%" y="85" width="0.0803%" height="15" fill="rgb(230,228,27)" fg:x="451" fg:w="1"/><text x="36.4749%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="36.2249%" y="69" width="0.0803%" height="15" fill="rgb(216,26,51)" fg:x="451" fg:w="1"/><text x="36.4749%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.2249%" y="53" width="0.0803%" height="15" fill="rgb(225,180,50)" fg:x="451" fg:w="1"/><text x="36.4749%" y="63.50"></text></g><g><title>plugins_core::library::actions::reply_ok (5 samples, 0.40%)</title><rect x="36.0643%" y="405" width="0.4016%" height="15" fill="rgb(236,211,2)" fg:x="449" fg:w="5"/><text x="36.3143%" y="415.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="36.3052%" y="389" width="0.1606%" height="15" fill="rgb(250,51,20)" fg:x="452" fg:w="2"/><text x="36.5552%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (2 samples, 0.16%)</title><rect x="36.3052%" y="373" width="0.1606%" height="15" fill="rgb(232,70,37)" fg:x="452" fg:w="2"/><text x="36.5552%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="36.3052%" y="357" width="0.1606%" height="15" fill="rgb(226,183,39)" fg:x="452" fg:w="2"/><text x="36.5552%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="36.3052%" y="341" width="0.1606%" height="15" fill="rgb(232,228,21)" fg:x="452" fg:w="2"/><text x="36.5552%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="36.3052%" y="325" width="0.1606%" height="15" fill="rgb(251,118,32)" fg:x="452" fg:w="2"/><text x="36.5552%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.3855%" y="309" width="0.0803%" height="15" fill="rgb(235,172,38)" fg:x="453" fg:w="1"/><text x="36.6355%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.3855%" y="293" width="0.0803%" height="15" fill="rgb(235,63,18)" fg:x="453" fg:w="1"/><text x="36.6355%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="36.3855%" y="277" width="0.0803%" height="15" fill="rgb(225,4,7)" fg:x="453" fg:w="1"/><text x="36.6355%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="36.4659%" y="341" width="0.0803%" height="15" fill="rgb(231,61,1)" fg:x="454" fg:w="1"/><text x="36.7159%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="36.4659%" y="325" width="0.0803%" height="15" fill="rgb(241,155,22)" fg:x="454" fg:w="1"/><text x="36.7159%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="36.4659%" y="309" width="0.0803%" height="15" fill="rgb(209,100,26)" fg:x="454" fg:w="1"/><text x="36.7159%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="36.4659%" y="293" width="0.0803%" height="15" fill="rgb(248,181,15)" fg:x="454" fg:w="1"/><text x="36.7159%" y="303.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="36.4659%" y="389" width="0.1606%" height="15" fill="rgb(214,94,31)" fg:x="454" fg:w="2"/><text x="36.7159%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="36.4659%" y="373" width="0.1606%" height="15" fill="rgb(207,16,42)" fg:x="454" fg:w="2"/><text x="36.7159%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="36.4659%" y="357" width="0.1606%" height="15" fill="rgb(208,127,13)" fg:x="454" fg:w="2"/><text x="36.7159%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="36.5462%" y="341" width="0.0803%" height="15" fill="rgb(220,211,18)" fg:x="455" fg:w="1"/><text x="36.7962%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="36.5462%" y="325" width="0.0803%" height="15" fill="rgb(221,55,38)" fg:x="455" fg:w="1"/><text x="36.7962%" y="335.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="36.5462%" y="309" width="0.0803%" height="15" fill="rgb(252,219,45)" fg:x="455" fg:w="1"/><text x="36.7962%" y="319.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="36.6265%" y="357" width="0.0803%" height="15" fill="rgb(248,53,35)" fg:x="456" fg:w="1"/><text x="36.8765%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="36.6265%" y="389" width="0.1606%" height="15" fill="rgb(210,87,2)" fg:x="456" fg:w="2"/><text x="36.8765%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="36.6265%" y="373" width="0.1606%" height="15" fill="rgb(239,133,9)" fg:x="456" fg:w="2"/><text x="36.8765%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="36.7068%" y="357" width="0.0803%" height="15" fill="rgb(214,114,5)" fg:x="457" fg:w="1"/><text x="36.9568%" y="367.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="36.7068%" y="341" width="0.0803%" height="15" fill="rgb(206,124,24)" fg:x="457" fg:w="1"/><text x="36.9568%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.7871%" y="341" width="0.0803%" height="15" fill="rgb(212,57,33)" fg:x="458" fg:w="1"/><text x="37.0371%" y="351.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="36.7871%" y="389" width="0.1606%" height="15" fill="rgb(246,21,20)" fg:x="458" fg:w="2"/><text x="37.0371%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="36.7871%" y="373" width="0.1606%" height="15" fill="rgb(253,210,39)" fg:x="458" fg:w="2"/><text x="37.0371%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="36.7871%" y="357" width="0.1606%" height="15" fill="rgb(209,187,24)" fg:x="458" fg:w="2"/><text x="37.0371%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="36.8675%" y="341" width="0.0803%" height="15" fill="rgb(246,136,17)" fg:x="459" fg:w="1"/><text x="37.1175%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="36.8675%" y="325" width="0.0803%" height="15" fill="rgb(211,0,30)" fg:x="459" fg:w="1"/><text x="37.1175%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="36.8675%" y="309" width="0.0803%" height="15" fill="rgb(216,199,7)" fg:x="459" fg:w="1"/><text x="37.1175%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.8675%" y="293" width="0.0803%" height="15" fill="rgb(207,210,19)" fg:x="459" fg:w="1"/><text x="37.1175%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.9478%" y="309" width="0.0803%" height="15" fill="rgb(237,187,39)" fg:x="460" fg:w="1"/><text x="37.1978%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.9478%" y="293" width="0.0803%" height="15" fill="rgb(243,194,42)" fg:x="460" fg:w="1"/><text x="37.1978%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.9478%" y="277" width="0.0803%" height="15" fill="rgb(225,194,19)" fg:x="460" fg:w="1"/><text x="37.1978%" y="287.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="36.9478%" y="389" width="0.1606%" height="15" fill="rgb(224,192,14)" fg:x="460" fg:w="2"/><text x="37.1978%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="36.9478%" y="373" width="0.1606%" height="15" fill="rgb(252,21,18)" fg:x="460" fg:w="2"/><text x="37.1978%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="36.9478%" y="357" width="0.1606%" height="15" fill="rgb(229,69,19)" fg:x="460" fg:w="2"/><text x="37.1978%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="36.9478%" y="341" width="0.1606%" height="15" fill="rgb(251,31,53)" fg:x="460" fg:w="2"/><text x="37.1978%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="36.9478%" y="325" width="0.1606%" height="15" fill="rgb(218,39,50)" fg:x="460" fg:w="2"/><text x="37.1978%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="37.0281%" y="309" width="0.0803%" height="15" fill="rgb(231,50,17)" fg:x="461" fg:w="1"/><text x="37.2781%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="37.0281%" y="293" width="0.0803%" height="15" fill="rgb(223,217,31)" fg:x="461" fg:w="1"/><text x="37.2781%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="37.0281%" y="277" width="0.0803%" height="15" fill="rgb(225,91,12)" fg:x="461" fg:w="1"/><text x="37.2781%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="37.0281%" y="261" width="0.0803%" height="15" fill="rgb(242,58,43)" fg:x="461" fg:w="1"/><text x="37.2781%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="37.0281%" y="245" width="0.0803%" height="15" fill="rgb(242,32,21)" fg:x="461" fg:w="1"/><text x="37.2781%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="37.0281%" y="229" width="0.0803%" height="15" fill="rgb(211,127,1)" fg:x="461" fg:w="1"/><text x="37.2781%" y="239.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="37.1084%" y="373" width="0.0803%" height="15" fill="rgb(231,93,13)" fg:x="462" fg:w="1"/><text x="37.3584%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="37.1084%" y="357" width="0.0803%" height="15" fill="rgb(218,83,4)" fg:x="462" fg:w="1"/><text x="37.3584%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="37.1084%" y="341" width="0.0803%" height="15" fill="rgb(230,218,10)" fg:x="462" fg:w="1"/><text x="37.3584%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="37.1084%" y="325" width="0.0803%" height="15" fill="rgb(235,127,18)" fg:x="462" fg:w="1"/><text x="37.3584%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.1084%" y="309" width="0.0803%" height="15" fill="rgb(213,137,46)" fg:x="462" fg:w="1"/><text x="37.3584%" y="319.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="37.1084%" y="389" width="0.1606%" height="15" fill="rgb(235,179,24)" fg:x="462" fg:w="2"/><text x="37.3584%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (1 samples, 0.08%)</title><rect x="37.1888%" y="373" width="0.0803%" height="15" fill="rgb(247,58,49)" fg:x="463" fg:w="1"/><text x="37.4388%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="37.1888%" y="357" width="0.0803%" height="15" fill="rgb(242,222,5)" fg:x="463" fg:w="1"/><text x="37.4388%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="37.1888%" y="341" width="0.0803%" height="15" fill="rgb(230,16,48)" fg:x="463" fg:w="1"/><text x="37.4388%" y="351.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="37.2691%" y="373" width="0.1606%" height="15" fill="rgb(241,192,16)" fg:x="464" fg:w="2"/><text x="37.5191%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="37.2691%" y="357" width="0.1606%" height="15" fill="rgb(209,25,37)" fg:x="464" fg:w="2"/><text x="37.5191%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="37.2691%" y="341" width="0.1606%" height="15" fill="rgb(229,215,13)" fg:x="464" fg:w="2"/><text x="37.5191%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="37.3494%" y="325" width="0.0803%" height="15" fill="rgb(213,199,8)" fg:x="465" fg:w="1"/><text x="37.5994%" y="335.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (224 samples, 17.99%)</title><rect x="19.5181%" y="421" width="17.9920%" height="15" fill="rgb(226,151,19)" fg:x="243" fg:w="224"/><text x="19.7681%" y="431.50">&lt;plugins_core::carrying::act..</text></g><g><title>plugins_core::location::model::change_location (13 samples, 1.04%)</title><rect x="36.4659%" y="405" width="1.0442%" height="15" fill="rgb(254,183,12)" fg:x="454" fg:w="13"/><text x="36.7159%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (3 samples, 0.24%)</title><rect x="37.2691%" y="389" width="0.2410%" height="15" fill="rgb(245,8,3)" fg:x="464" fg:w="3"/><text x="37.5191%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="37.4297%" y="373" width="0.0803%" height="15" fill="rgb(229,159,35)" fg:x="466" fg:w="1"/><text x="37.6797%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="37.4297%" y="357" width="0.0803%" height="15" fill="rgb(209,145,1)" fg:x="466" fg:w="1"/><text x="37.6797%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="37.4297%" y="341" width="0.0803%" height="15" fill="rgb(228,183,16)" fg:x="466" fg:w="1"/><text x="37.6797%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="37.4297%" y="325" width="0.0803%" height="15" fill="rgb(222,68,0)" fg:x="466" fg:w="1"/><text x="37.6797%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="37.4297%" y="309" width="0.0803%" height="15" fill="rgb(209,130,50)" fg:x="466" fg:w="1"/><text x="37.6797%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.4297%" y="293" width="0.0803%" height="15" fill="rgb(228,176,44)" fg:x="466" fg:w="1"/><text x="37.6797%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="37.5904%" y="389" width="0.0803%" height="15" fill="rgb(221,164,2)" fg:x="468" fg:w="1"/><text x="37.8404%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="37.5904%" y="373" width="0.0803%" height="15" fill="rgb(249,199,49)" fg:x="468" fg:w="1"/><text x="37.8404%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="37.6707%" y="357" width="0.1606%" height="15" fill="rgb(228,205,53)" fg:x="469" fg:w="2"/><text x="37.9207%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="37.6707%" y="341" width="0.1606%" height="15" fill="rgb(235,77,20)" fg:x="469" fg:w="2"/><text x="37.9207%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="37.7510%" y="325" width="0.0803%" height="15" fill="rgb(227,147,34)" fg:x="470" fg:w="1"/><text x="38.0010%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="37.7510%" y="309" width="0.0803%" height="15" fill="rgb(226,203,52)" fg:x="470" fg:w="1"/><text x="38.0010%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="37.7510%" y="293" width="0.0803%" height="15" fill="rgb(226,186,23)" fg:x="470" fg:w="1"/><text x="38.0010%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="37.7510%" y="277" width="0.0803%" height="15" fill="rgb(236,13,30)" fg:x="470" fg:w="1"/><text x="38.0010%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="37.7510%" y="261" width="0.0803%" height="15" fill="rgb(228,121,22)" fg:x="470" fg:w="1"/><text x="38.0010%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="37.7510%" y="245" width="0.0803%" height="15" fill="rgb(248,222,26)" fg:x="470" fg:w="1"/><text x="38.0010%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="37.7510%" y="229" width="0.0803%" height="15" fill="rgb(251,72,25)" fg:x="470" fg:w="1"/><text x="38.0010%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="37.7510%" y="213" width="0.0803%" height="15" fill="rgb(223,114,24)" fg:x="470" fg:w="1"/><text x="38.0010%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="37.7510%" y="197" width="0.0803%" height="15" fill="rgb(232,190,43)" fg:x="470" fg:w="1"/><text x="38.0010%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="37.7510%" y="181" width="0.0803%" height="15" fill="rgb(208,90,0)" fg:x="470" fg:w="1"/><text x="38.0010%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="37.7510%" y="165" width="0.0803%" height="15" fill="rgb(234,149,31)" fg:x="470" fg:w="1"/><text x="38.0010%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.7510%" y="149" width="0.0803%" height="15" fill="rgb(235,188,36)" fg:x="470" fg:w="1"/><text x="38.0010%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.8313%" y="293" width="0.0803%" height="15" fill="rgb(219,59,51)" fg:x="471" fg:w="1"/><text x="38.0813%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="37.8313%" y="277" width="0.0803%" height="15" fill="rgb(236,101,40)" fg:x="471" fg:w="1"/><text x="38.0813%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="37.6707%" y="373" width="0.4016%" height="15" fill="rgb(235,33,7)" fg:x="469" fg:w="5"/><text x="37.9207%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="37.8313%" y="357" width="0.2410%" height="15" fill="rgb(213,169,26)" fg:x="471" fg:w="3"/><text x="38.0813%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="37.8313%" y="341" width="0.2410%" height="15" fill="rgb(218,99,34)" fg:x="471" fg:w="3"/><text x="38.0813%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="37.8313%" y="325" width="0.2410%" height="15" fill="rgb(210,57,24)" fg:x="471" fg:w="3"/><text x="38.0813%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="37.8313%" y="309" width="0.2410%" height="15" fill="rgb(231,181,54)" fg:x="471" fg:w="3"/><text x="38.0813%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="37.9116%" y="293" width="0.1606%" height="15" fill="rgb(251,188,48)" fg:x="472" fg:w="2"/><text x="38.1616%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="37.9116%" y="277" width="0.1606%" height="15" fill="rgb(243,12,45)" fg:x="472" fg:w="2"/><text x="38.1616%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.0723%" y="373" width="0.0803%" height="15" fill="rgb(250,197,9)" fg:x="474" fg:w="1"/><text x="38.3223%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="38.1526%" y="373" width="0.0803%" height="15" fill="rgb(235,149,35)" fg:x="475" fg:w="1"/><text x="38.4026%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.1526%" y="357" width="0.0803%" height="15" fill="rgb(219,27,19)" fg:x="475" fg:w="1"/><text x="38.4026%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (8 samples, 0.64%)</title><rect x="37.6707%" y="389" width="0.6426%" height="15" fill="rgb(244,78,31)" fg:x="469" fg:w="8"/><text x="37.9207%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="38.2329%" y="373" width="0.0803%" height="15" fill="rgb(241,13,4)" fg:x="476" fg:w="1"/><text x="38.4829%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.3133%" y="389" width="0.0803%" height="15" fill="rgb(212,194,26)" fg:x="477" fg:w="1"/><text x="38.5633%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="38.3133%" y="373" width="0.0803%" height="15" fill="rgb(236,80,11)" fg:x="477" fg:w="1"/><text x="38.5633%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.3133%" y="357" width="0.0803%" height="15" fill="rgb(206,1,24)" fg:x="477" fg:w="1"/><text x="38.5633%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="38.3936%" y="309" width="0.0803%" height="15" fill="rgb(238,215,50)" fg:x="478" fg:w="1"/><text x="38.6436%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="38.3936%" y="389" width="0.1606%" height="15" fill="rgb(254,126,32)" fg:x="478" fg:w="2"/><text x="38.6436%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="38.3936%" y="373" width="0.1606%" height="15" fill="rgb(206,111,53)" fg:x="478" fg:w="2"/><text x="38.6436%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="38.3936%" y="357" width="0.1606%" height="15" fill="rgb(218,72,44)" fg:x="478" fg:w="2"/><text x="38.6436%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="38.3936%" y="341" width="0.1606%" height="15" fill="rgb(238,25,3)" fg:x="478" fg:w="2"/><text x="38.6436%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="38.3936%" y="325" width="0.1606%" height="15" fill="rgb(250,191,7)" fg:x="478" fg:w="2"/><text x="38.6436%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="38.4739%" y="309" width="0.0803%" height="15" fill="rgb(238,56,30)" fg:x="479" fg:w="1"/><text x="38.7239%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="38.4739%" y="293" width="0.0803%" height="15" fill="rgb(210,27,45)" fg:x="479" fg:w="1"/><text x="38.7239%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.5542%" y="389" width="0.0803%" height="15" fill="rgb(207,10,50)" fg:x="480" fg:w="1"/><text x="38.8042%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="38.6345%" y="357" width="0.0803%" height="15" fill="rgb(249,30,23)" fg:x="481" fg:w="1"/><text x="38.8845%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.7952%" y="261" width="0.0803%" height="15" fill="rgb(250,80,12)" fg:x="483" fg:w="1"/><text x="39.0452%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="38.6345%" y="373" width="0.3213%" height="15" fill="rgb(210,221,37)" fg:x="481" fg:w="4"/><text x="38.8845%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="38.7149%" y="357" width="0.2410%" height="15" fill="rgb(205,96,24)" fg:x="482" fg:w="3"/><text x="38.9649%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="38.7149%" y="341" width="0.2410%" height="15" fill="rgb(247,104,22)" fg:x="482" fg:w="3"/><text x="38.9649%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="38.7149%" y="325" width="0.2410%" height="15" fill="rgb(222,61,53)" fg:x="482" fg:w="3"/><text x="38.9649%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="38.7149%" y="309" width="0.2410%" height="15" fill="rgb(241,11,53)" fg:x="482" fg:w="3"/><text x="38.9649%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="38.7149%" y="293" width="0.2410%" height="15" fill="rgb(230,111,47)" fg:x="482" fg:w="3"/><text x="38.9649%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="38.7149%" y="277" width="0.2410%" height="15" fill="rgb(218,187,29)" fg:x="482" fg:w="3"/><text x="38.9649%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="38.8755%" y="261" width="0.0803%" height="15" fill="rgb(210,121,46)" fg:x="484" fg:w="1"/><text x="39.1255%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (5 samples, 0.40%)</title><rect x="38.6345%" y="389" width="0.4016%" height="15" fill="rgb(250,43,19)" fg:x="481" fg:w="5"/><text x="38.8845%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="38.9558%" y="373" width="0.0803%" height="15" fill="rgb(238,61,12)" fg:x="485" fg:w="1"/><text x="39.2058%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.9558%" y="357" width="0.0803%" height="15" fill="rgb(251,198,9)" fg:x="485" fg:w="1"/><text x="39.2058%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="39.1165%" y="309" width="0.0803%" height="15" fill="rgb(214,192,38)" fg:x="487" fg:w="1"/><text x="39.3665%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="39.1165%" y="293" width="0.0803%" height="15" fill="rgb(214,73,19)" fg:x="487" fg:w="1"/><text x="39.3665%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="39.1165%" y="277" width="0.0803%" height="15" fill="rgb(249,222,49)" fg:x="487" fg:w="1"/><text x="39.3665%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="39.1165%" y="261" width="0.0803%" height="15" fill="rgb(231,181,54)" fg:x="487" fg:w="1"/><text x="39.3665%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="39.1165%" y="245" width="0.0803%" height="15" fill="rgb(240,1,13)" fg:x="487" fg:w="1"/><text x="39.3665%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="39.1165%" y="229" width="0.0803%" height="15" fill="rgb(225,21,16)" fg:x="487" fg:w="1"/><text x="39.3665%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="39.1968%" y="229" width="0.0803%" height="15" fill="rgb(246,176,50)" fg:x="488" fg:w="1"/><text x="39.4468%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.1968%" y="213" width="0.0803%" height="15" fill="rgb(208,96,50)" fg:x="488" fg:w="1"/><text x="39.4468%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="39.1968%" y="277" width="0.1606%" height="15" fill="rgb(240,219,19)" fg:x="488" fg:w="2"/><text x="39.4468%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="39.1968%" y="261" width="0.1606%" height="15" fill="rgb(234,73,5)" fg:x="488" fg:w="2"/><text x="39.4468%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="39.1968%" y="245" width="0.1606%" height="15" fill="rgb(225,52,53)" fg:x="488" fg:w="2"/><text x="39.4468%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.2771%" y="229" width="0.0803%" height="15" fill="rgb(250,12,14)" fg:x="489" fg:w="1"/><text x="39.5271%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="39.1968%" y="309" width="0.2410%" height="15" fill="rgb(242,185,54)" fg:x="488" fg:w="3"/><text x="39.4468%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="39.1968%" y="293" width="0.2410%" height="15" fill="rgb(211,206,31)" fg:x="488" fg:w="3"/><text x="39.4468%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="39.3574%" y="277" width="0.0803%" height="15" fill="rgb(252,10,33)" fg:x="490" fg:w="1"/><text x="39.6074%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="39.3574%" y="261" width="0.0803%" height="15" fill="rgb(216,26,7)" fg:x="490" fg:w="1"/><text x="39.6074%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.3574%" y="245" width="0.0803%" height="15" fill="rgb(228,112,40)" fg:x="490" fg:w="1"/><text x="39.6074%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="39.4378%" y="261" width="0.1606%" height="15" fill="rgb(212,21,16)" fg:x="491" fg:w="2"/><text x="39.6878%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="39.4378%" y="245" width="0.1606%" height="15" fill="rgb(249,3,29)" fg:x="491" fg:w="2"/><text x="39.6878%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSetItem&gt; (1 samples, 0.08%)</title><rect x="39.5984%" y="261" width="0.0803%" height="15" fill="rgb(221,42,51)" fg:x="493" fg:w="1"/><text x="39.8484%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.7590%" y="245" width="0.0803%" height="15" fill="rgb(225,90,21)" fg:x="495" fg:w="1"/><text x="40.0090%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="39.8394%" y="245" width="0.5622%" height="15" fill="rgb(242,131,5)" fg:x="496" fg:w="7"/><text x="40.0894%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="39.9197%" y="229" width="0.4819%" height="15" fill="rgb(220,187,28)" fg:x="497" fg:w="6"/><text x="40.1697%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="40.4016%" y="229" width="0.1606%" height="15" fill="rgb(210,75,48)" fg:x="503" fg:w="2"/><text x="40.6516%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="40.4016%" y="245" width="0.2410%" height="15" fill="rgb(211,91,40)" fg:x="503" fg:w="3"/><text x="40.6516%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.5622%" y="229" width="0.0803%" height="15" fill="rgb(205,43,18)" fg:x="505" fg:w="1"/><text x="40.8122%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="40.5622%" y="213" width="0.0803%" height="15" fill="rgb(207,123,11)" fg:x="505" fg:w="1"/><text x="40.8122%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="40.5622%" y="197" width="0.0803%" height="15" fill="rgb(235,89,39)" fg:x="505" fg:w="1"/><text x="40.8122%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.7229%" y="197" width="0.0803%" height="15" fill="rgb(245,217,27)" fg:x="507" fg:w="1"/><text x="40.9729%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="40.8032%" y="181" width="0.2410%" height="15" fill="rgb(216,55,17)" fg:x="508" fg:w="3"/><text x="41.0532%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="40.8835%" y="165" width="0.1606%" height="15" fill="rgb(252,116,44)" fg:x="509" fg:w="2"/><text x="41.1335%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.8835%" y="149" width="0.1606%" height="15" fill="rgb(229,153,4)" fg:x="509" fg:w="2"/><text x="41.1335%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="40.8835%" y="133" width="0.1606%" height="15" fill="rgb(222,24,35)" fg:x="509" fg:w="2"/><text x="41.1335%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.0442%" y="149" width="0.0803%" height="15" fill="rgb(214,26,20)" fg:x="511" fg:w="1"/><text x="41.2942%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.0442%" y="133" width="0.0803%" height="15" fill="rgb(215,14,45)" fg:x="511" fg:w="1"/><text x="41.2942%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.0442%" y="117" width="0.0803%" height="15" fill="rgb(217,212,50)" fg:x="511" fg:w="1"/><text x="41.2942%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="41.0442%" y="181" width="0.1606%" height="15" fill="rgb(230,172,52)" fg:x="511" fg:w="2"/><text x="41.2942%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="41.0442%" y="165" width="0.1606%" height="15" fill="rgb(210,48,36)" fg:x="511" fg:w="2"/><text x="41.2942%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="41.1245%" y="149" width="0.0803%" height="15" fill="rgb(216,213,32)" fg:x="512" fg:w="1"/><text x="41.3745%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="41.1245%" y="133" width="0.0803%" height="15" fill="rgb(237,202,41)" fg:x="512" fg:w="1"/><text x="41.3745%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (30 samples, 2.41%)</title><rect x="41.2048%" y="181" width="2.4096%" height="15" fill="rgb(209,14,29)" fg:x="513" fg:w="30"/><text x="41.4548%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (30 samples, 2.41%)</title><rect x="41.2048%" y="165" width="2.4096%" height="15" fill="rgb(219,29,3)" fg:x="513" fg:w="30"/><text x="41.4548%" y="175.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (30 samples, 2.41%)</title><rect x="41.2048%" y="149" width="2.4096%" height="15" fill="rgb(229,13,49)" fg:x="513" fg:w="30"/><text x="41.4548%" y="159.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 2.97%)</title><rect x="40.7229%" y="229" width="2.9719%" height="15" fill="rgb(210,206,2)" fg:x="507" fg:w="37"/><text x="40.9729%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (37 samples, 2.97%)</title><rect x="40.7229%" y="213" width="2.9719%" height="15" fill="rgb(216,154,46)" fg:x="507" fg:w="37"/><text x="40.9729%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (36 samples, 2.89%)</title><rect x="40.8032%" y="197" width="2.8916%" height="15" fill="rgb(211,170,52)" fg:x="508" fg:w="36"/><text x="41.0532%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="43.6145%" y="181" width="0.0803%" height="15" fill="rgb(233,109,47)" fg:x="543" fg:w="1"/><text x="43.8645%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="43.8554%" y="213" width="0.1606%" height="15" fill="rgb(208,212,30)" fg:x="546" fg:w="2"/><text x="44.1054%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="43.8554%" y="197" width="0.1606%" height="15" fill="rgb(215,190,19)" fg:x="546" fg:w="2"/><text x="44.1054%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.8554%" y="181" width="0.1606%" height="15" fill="rgb(207,164,53)" fg:x="546" fg:w="2"/><text x="44.1054%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="43.8554%" y="165" width="0.1606%" height="15" fill="rgb(213,87,49)" fg:x="546" fg:w="2"/><text x="44.1054%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="44.0161%" y="213" width="0.1606%" height="15" fill="rgb(241,216,24)" fg:x="548" fg:w="2"/><text x="44.2661%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="43.6948%" y="229" width="0.5622%" height="15" fill="rgb(241,123,45)" fg:x="544" fg:w="7"/><text x="43.9448%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="44.1767%" y="213" width="0.0803%" height="15" fill="rgb(220,36,15)" fg:x="550" fg:w="1"/><text x="44.4267%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="44.2570%" y="229" width="0.0803%" height="15" fill="rgb(215,202,9)" fg:x="551" fg:w="1"/><text x="44.5070%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (59 samples, 4.74%)</title><rect x="39.6787%" y="261" width="4.7390%" height="15" fill="rgb(252,71,26)" fg:x="494" fg:w="59"/><text x="39.9287%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (47 samples, 3.78%)</title><rect x="40.6426%" y="245" width="3.7751%" height="15" fill="rgb(243,195,19)" fg:x="506" fg:w="47"/><text x="40.8926%" y="255.50">rege..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="44.3373%" y="229" width="0.0803%" height="15" fill="rgb(207,167,27)" fg:x="552" fg:w="1"/><text x="44.5873%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="44.3373%" y="213" width="0.0803%" height="15" fill="rgb(250,146,54)" fg:x="552" fg:w="1"/><text x="44.5873%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.3373%" y="197" width="0.0803%" height="15" fill="rgb(245,79,9)" fg:x="552" fg:w="1"/><text x="44.5873%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.3373%" y="181" width="0.0803%" height="15" fill="rgb(234,197,22)" fg:x="552" fg:w="1"/><text x="44.5873%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.3373%" y="165" width="0.0803%" height="15" fill="rgb(221,52,48)" fg:x="552" fg:w="1"/><text x="44.5873%" y="175.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="44.6586%" y="213" width="0.0803%" height="15" fill="rgb(235,80,0)" fg:x="556" fg:w="1"/><text x="44.9086%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.6586%" y="197" width="0.0803%" height="15" fill="rgb(221,117,53)" fg:x="556" fg:w="1"/><text x="44.9086%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.6586%" y="181" width="0.0803%" height="15" fill="rgb(239,48,47)" fg:x="556" fg:w="1"/><text x="44.9086%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.7390%" y="197" width="0.0803%" height="15" fill="rgb(227,191,52)" fg:x="557" fg:w="1"/><text x="44.9890%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.7390%" y="181" width="0.0803%" height="15" fill="rgb(241,118,1)" fg:x="557" fg:w="1"/><text x="44.9890%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.7390%" y="165" width="0.0803%" height="15" fill="rgb(240,85,3)" fg:x="557" fg:w="1"/><text x="44.9890%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="44.4177%" y="261" width="0.5622%" height="15" fill="rgb(237,68,37)" fg:x="553" fg:w="7"/><text x="44.6677%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="44.4177%" y="245" width="0.5622%" height="15" fill="rgb(212,9,20)" fg:x="553" fg:w="7"/><text x="44.6677%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="44.5783%" y="229" width="0.4016%" height="15" fill="rgb(218,84,17)" fg:x="555" fg:w="5"/><text x="44.8283%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="44.7390%" y="213" width="0.2410%" height="15" fill="rgb(235,147,20)" fg:x="557" fg:w="3"/><text x="44.9890%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (2 samples, 0.16%)</title><rect x="44.8193%" y="197" width="0.1606%" height="15" fill="rgb(208,224,1)" fg:x="558" fg:w="2"/><text x="45.0693%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="44.8996%" y="181" width="0.0803%" height="15" fill="rgb(232,97,50)" fg:x="559" fg:w="1"/><text x="45.1496%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.0602%" y="213" width="0.0803%" height="15" fill="rgb(238,15,45)" fg:x="561" fg:w="1"/><text x="45.3102%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.0602%" y="197" width="0.0803%" height="15" fill="rgb(231,46,18)" fg:x="561" fg:w="1"/><text x="45.3102%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="45.0602%" y="181" width="0.0803%" height="15" fill="rgb(254,169,10)" fg:x="561" fg:w="1"/><text x="45.3102%" y="191.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (73 samples, 5.86%)</title><rect x="39.4378%" y="277" width="5.8635%" height="15" fill="rgb(243,169,30)" fg:x="491" fg:w="73"/><text x="39.6878%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="44.9799%" y="261" width="0.3213%" height="15" fill="rgb(236,90,49)" fg:x="560" fg:w="4"/><text x="45.2299%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="44.9799%" y="245" width="0.3213%" height="15" fill="rgb(218,80,15)" fg:x="560" fg:w="4"/><text x="45.2299%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="45.0602%" y="229" width="0.2410%" height="15" fill="rgb(222,115,37)" fg:x="561" fg:w="3"/><text x="45.3102%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="45.1406%" y="213" width="0.1606%" height="15" fill="rgb(227,0,6)" fg:x="562" fg:w="2"/><text x="45.3906%" y="223.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="45.2209%" y="197" width="0.0803%" height="15" fill="rgb(217,189,13)" fg:x="563" fg:w="1"/><text x="45.4709%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (74 samples, 5.94%)</title><rect x="39.4378%" y="309" width="5.9438%" height="15" fill="rgb(220,74,19)" fg:x="491" fg:w="74"/><text x="39.6878%" y="319.50">regex::r..</text></g><g><title>regex::builders::string::RegexBuilder::build (74 samples, 5.94%)</title><rect x="39.4378%" y="293" width="5.9438%" height="15" fill="rgb(224,81,18)" fg:x="491" fg:w="74"/><text x="39.6878%" y="303.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="45.3012%" y="277" width="0.0803%" height="15" fill="rgb(245,178,48)" fg:x="564" fg:w="1"/><text x="45.5512%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (82 samples, 6.59%)</title><rect x="39.1165%" y="325" width="6.5863%" height="15" fill="rgb(207,78,24)" fg:x="487" fg:w="82"/><text x="39.3665%" y="335.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="45.3815%" y="309" width="0.3213%" height="15" fill="rgb(223,222,30)" fg:x="565" fg:w="4"/><text x="45.6315%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="45.3815%" y="293" width="0.3213%" height="15" fill="rgb(234,101,12)" fg:x="565" fg:w="4"/><text x="45.6315%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="45.3815%" y="277" width="0.3213%" height="15" fill="rgb(209,80,46)" fg:x="565" fg:w="4"/><text x="45.6315%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="45.3815%" y="261" width="0.3213%" height="15" fill="rgb(228,79,14)" fg:x="565" fg:w="4"/><text x="45.6315%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="45.3815%" y="245" width="0.3213%" height="15" fill="rgb(220,219,34)" fg:x="565" fg:w="4"/><text x="45.6315%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="45.7028%" y="309" width="0.1606%" height="15" fill="rgb(207,80,21)" fg:x="569" fg:w="2"/><text x="45.9528%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="45.7028%" y="293" width="0.1606%" height="15" fill="rgb(210,154,44)" fg:x="569" fg:w="2"/><text x="45.9528%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="45.7028%" y="277" width="0.1606%" height="15" fill="rgb(246,44,39)" fg:x="569" fg:w="2"/><text x="45.9528%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="45.7028%" y="261" width="0.1606%" height="15" fill="rgb(252,175,13)" fg:x="569" fg:w="2"/><text x="45.9528%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="45.7028%" y="245" width="0.1606%" height="15" fill="rgb(211,50,39)" fg:x="569" fg:w="2"/><text x="45.9528%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="45.7831%" y="229" width="0.0803%" height="15" fill="rgb(231,204,27)" fg:x="570" fg:w="1"/><text x="46.0331%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="45.8635%" y="293" width="0.0803%" height="15" fill="rgb(253,26,34)" fg:x="571" fg:w="1"/><text x="46.1135%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="45.8635%" y="277" width="0.0803%" height="15" fill="rgb(207,139,38)" fg:x="571" fg:w="1"/><text x="46.1135%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="45.8635%" y="261" width="0.0803%" height="15" fill="rgb(248,54,27)" fg:x="571" fg:w="1"/><text x="46.1135%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="45.8635%" y="245" width="0.0803%" height="15" fill="rgb(234,25,33)" fg:x="571" fg:w="1"/><text x="46.1135%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="45.8635%" y="229" width="0.0803%" height="15" fill="rgb(249,107,47)" fg:x="571" fg:w="1"/><text x="46.1135%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="46.2651%" y="213" width="0.2410%" height="15" fill="rgb(230,190,31)" fg:x="576" fg:w="3"/><text x="46.5151%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="46.2651%" y="197" width="0.2410%" height="15" fill="rgb(238,173,45)" fg:x="576" fg:w="3"/><text x="46.5151%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="46.3454%" y="181" width="0.1606%" height="15" fill="rgb(222,16,50)" fg:x="577" fg:w="2"/><text x="46.5954%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (12 samples, 0.96%)</title><rect x="45.8635%" y="309" width="0.9639%" height="15" fill="rgb(251,204,47)" fg:x="571" fg:w="12"/><text x="46.1135%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.88%)</title><rect x="45.9438%" y="293" width="0.8835%" height="15" fill="rgb(225,12,3)" fg:x="572" fg:w="11"/><text x="46.1938%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.88%)</title><rect x="45.9438%" y="277" width="0.8835%" height="15" fill="rgb(214,208,22)" fg:x="572" fg:w="11"/><text x="46.1938%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.88%)</title><rect x="45.9438%" y="261" width="0.8835%" height="15" fill="rgb(240,57,32)" fg:x="572" fg:w="11"/><text x="46.1938%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.80%)</title><rect x="46.0241%" y="245" width="0.8032%" height="15" fill="rgb(243,113,48)" fg:x="573" fg:w="10"/><text x="46.2741%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.80%)</title><rect x="46.0241%" y="229" width="0.8032%" height="15" fill="rgb(225,135,30)" fg:x="573" fg:w="10"/><text x="46.2741%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="46.5060%" y="213" width="0.3213%" height="15" fill="rgb(222,3,53)" fg:x="579" fg:w="4"/><text x="46.7560%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.8273%" y="261" width="0.0803%" height="15" fill="rgb(243,142,2)" fg:x="583" fg:w="1"/><text x="47.0773%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.8273%" y="245" width="0.0803%" height="15" fill="rgb(233,67,14)" fg:x="583" fg:w="1"/><text x="47.0773%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.8273%" y="229" width="0.0803%" height="15" fill="rgb(245,125,36)" fg:x="583" fg:w="1"/><text x="47.0773%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.9076%" y="261" width="0.0803%" height="15" fill="rgb(225,199,6)" fg:x="584" fg:w="1"/><text x="47.1576%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="46.9880%" y="261" width="0.1606%" height="15" fill="rgb(244,71,6)" fg:x="585" fg:w="2"/><text x="47.2380%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.0683%" y="245" width="0.0803%" height="15" fill="rgb(225,62,9)" fg:x="586" fg:w="1"/><text x="47.3183%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="47.0683%" y="229" width="0.0803%" height="15" fill="rgb(246,139,53)" fg:x="586" fg:w="1"/><text x="47.3183%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.0683%" y="213" width="0.0803%" height="15" fill="rgb(243,161,46)" fg:x="586" fg:w="1"/><text x="47.3183%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.0683%" y="197" width="0.0803%" height="15" fill="rgb(236,153,7)" fg:x="586" fg:w="1"/><text x="47.3183%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.2289%" y="229" width="0.0803%" height="15" fill="rgb(248,42,35)" fg:x="588" fg:w="1"/><text x="47.4789%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="47.2289%" y="245" width="0.3213%" height="15" fill="rgb(250,17,31)" fg:x="588" fg:w="4"/><text x="47.4789%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="47.3092%" y="229" width="0.2410%" height="15" fill="rgb(248,138,14)" fg:x="589" fg:w="3"/><text x="47.5592%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.4699%" y="213" width="0.0803%" height="15" fill="rgb(228,161,3)" fg:x="591" fg:w="1"/><text x="47.7199%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="47.5502%" y="245" width="0.1606%" height="15" fill="rgb(248,116,17)" fg:x="592" fg:w="2"/><text x="47.8002%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="47.5502%" y="229" width="0.1606%" height="15" fill="rgb(207,78,24)" fg:x="592" fg:w="2"/><text x="47.8002%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="47.7912%" y="213" width="0.0803%" height="15" fill="rgb(234,99,48)" fg:x="595" fg:w="1"/><text x="48.0412%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.7912%" y="197" width="0.0803%" height="15" fill="rgb(242,22,26)" fg:x="595" fg:w="1"/><text x="48.0412%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.7912%" y="181" width="0.0803%" height="15" fill="rgb(227,78,32)" fg:x="595" fg:w="1"/><text x="48.0412%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.7912%" y="165" width="0.0803%" height="15" fill="rgb(226,189,43)" fg:x="595" fg:w="1"/><text x="48.0412%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="47.8715%" y="213" width="0.2410%" height="15" fill="rgb(227,218,35)" fg:x="596" fg:w="3"/><text x="48.1215%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="48.0321%" y="197" width="0.0803%" height="15" fill="rgb(206,111,40)" fg:x="598" fg:w="1"/><text x="48.2821%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.0321%" y="181" width="0.0803%" height="15" fill="rgb(208,217,22)" fg:x="598" fg:w="1"/><text x="48.2821%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.0321%" y="165" width="0.0803%" height="15" fill="rgb(248,20,20)" fg:x="598" fg:w="1"/><text x="48.2821%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.0321%" y="149" width="0.0803%" height="15" fill="rgb(239,155,16)" fg:x="598" fg:w="1"/><text x="48.2821%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="48.1124%" y="213" width="0.0803%" height="15" fill="rgb(238,171,46)" fg:x="599" fg:w="1"/><text x="48.3624%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="48.1124%" y="197" width="0.0803%" height="15" fill="rgb(248,11,36)" fg:x="599" fg:w="1"/><text x="48.3624%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="48.1124%" y="181" width="0.0803%" height="15" fill="rgb(220,148,37)" fg:x="599" fg:w="1"/><text x="48.3624%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (7 samples, 0.56%)</title><rect x="47.7108%" y="245" width="0.5622%" height="15" fill="rgb(218,144,42)" fg:x="594" fg:w="7"/><text x="47.9608%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="47.7108%" y="229" width="0.5622%" height="15" fill="rgb(245,20,20)" fg:x="594" fg:w="7"/><text x="47.9608%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="48.1928%" y="213" width="0.0803%" height="15" fill="rgb(240,111,48)" fg:x="600" fg:w="1"/><text x="48.4428%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="48.7550%" y="133" width="0.2410%" height="15" fill="rgb(237,225,32)" fg:x="607" fg:w="3"/><text x="49.0050%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.9157%" y="117" width="0.0803%" height="15" fill="rgb(228,161,46)" fg:x="609" fg:w="1"/><text x="49.1657%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.9157%" y="101" width="0.0803%" height="15" fill="rgb(235,196,21)" fg:x="609" fg:w="1"/><text x="49.1657%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.9157%" y="85" width="0.0803%" height="15" fill="rgb(250,133,21)" fg:x="609" fg:w="1"/><text x="49.1657%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="48.9960%" y="133" width="0.2410%" height="15" fill="rgb(236,94,32)" fg:x="610" fg:w="3"/><text x="49.2460%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="49.0763%" y="117" width="0.1606%" height="15" fill="rgb(219,176,25)" fg:x="611" fg:w="2"/><text x="49.3263%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="49.0763%" y="101" width="0.1606%" height="15" fill="rgb(211,17,43)" fg:x="611" fg:w="2"/><text x="49.3263%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="49.0763%" y="85" width="0.1606%" height="15" fill="rgb(220,75,23)" fg:x="611" fg:w="2"/><text x="49.3263%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="49.2369%" y="117" width="0.0803%" height="15" fill="rgb(215,122,32)" fg:x="613" fg:w="1"/><text x="49.4869%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.2369%" y="101" width="0.0803%" height="15" fill="rgb(218,57,38)" fg:x="613" fg:w="1"/><text x="49.4869%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.2369%" y="85" width="0.0803%" height="15" fill="rgb(233,208,46)" fg:x="613" fg:w="1"/><text x="49.4869%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.2369%" y="69" width="0.0803%" height="15" fill="rgb(221,35,50)" fg:x="613" fg:w="1"/><text x="49.4869%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (22 samples, 1.77%)</title><rect x="49.2369%" y="133" width="1.7671%" height="15" fill="rgb(229,213,29)" fg:x="613" fg:w="22"/><text x="49.4869%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (21 samples, 1.69%)</title><rect x="49.3173%" y="117" width="1.6867%" height="15" fill="rgb(229,110,40)" fg:x="614" fg:w="21"/><text x="49.5673%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (21 samples, 1.69%)</title><rect x="49.3173%" y="101" width="1.6867%" height="15" fill="rgb(247,206,19)" fg:x="614" fg:w="21"/><text x="49.5673%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="51.0040%" y="133" width="0.0803%" height="15" fill="rgb(216,229,45)" fg:x="635" fg:w="1"/><text x="51.2540%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 2.89%)</title><rect x="48.2731%" y="229" width="2.8916%" height="15" fill="rgb(205,184,31)" fg:x="601" fg:w="36"/><text x="48.5231%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (36 samples, 2.89%)</title><rect x="48.2731%" y="213" width="2.8916%" height="15" fill="rgb(213,91,10)" fg:x="601" fg:w="36"/><text x="48.5231%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (36 samples, 2.89%)</title><rect x="48.2731%" y="197" width="2.8916%" height="15" fill="rgb(250,49,8)" fg:x="601" fg:w="36"/><text x="48.5231%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (36 samples, 2.89%)</title><rect x="48.2731%" y="181" width="2.8916%" height="15" fill="rgb(207,26,8)" fg:x="601" fg:w="36"/><text x="48.5231%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (36 samples, 2.89%)</title><rect x="48.2731%" y="165" width="2.8916%" height="15" fill="rgb(224,2,13)" fg:x="601" fg:w="36"/><text x="48.5231%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (36 samples, 2.89%)</title><rect x="48.2731%" y="149" width="2.8916%" height="15" fill="rgb(219,108,27)" fg:x="601" fg:w="36"/><text x="48.5231%" y="159.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="51.0843%" y="133" width="0.0803%" height="15" fill="rgb(240,89,32)" fg:x="636" fg:w="1"/><text x="51.3343%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.2450%" y="213" width="0.0803%" height="15" fill="rgb(248,205,3)" fg:x="638" fg:w="1"/><text x="51.4950%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="51.3253%" y="213" width="0.2410%" height="15" fill="rgb(236,197,47)" fg:x="639" fg:w="3"/><text x="51.5753%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="51.4056%" y="197" width="0.1606%" height="15" fill="rgb(244,185,52)" fg:x="640" fg:w="2"/><text x="51.6556%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="51.4056%" y="181" width="0.1606%" height="15" fill="rgb(210,206,23)" fg:x="640" fg:w="2"/><text x="51.6556%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.4859%" y="165" width="0.0803%" height="15" fill="rgb(251,177,30)" fg:x="641" fg:w="1"/><text x="51.7359%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (57 samples, 4.58%)</title><rect x="47.1486%" y="261" width="4.5783%" height="15" fill="rgb(243,27,45)" fg:x="587" fg:w="57"/><text x="47.3986%" y="271.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (43 samples, 3.45%)</title><rect x="48.2731%" y="245" width="3.4538%" height="15" fill="rgb(248,141,51)" fg:x="601" fg:w="43"/><text x="48.5231%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="51.1647%" y="229" width="0.5622%" height="15" fill="rgb(235,102,15)" fg:x="637" fg:w="7"/><text x="51.4147%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="51.5663%" y="213" width="0.1606%" height="15" fill="rgb(214,164,53)" fg:x="642" fg:w="2"/><text x="51.8163%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="51.8072%" y="229" width="0.1606%" height="15" fill="rgb(228,18,51)" fg:x="645" fg:w="2"/><text x="52.0572%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="51.7269%" y="261" width="0.3213%" height="15" fill="rgb(205,211,11)" fg:x="644" fg:w="4"/><text x="51.9769%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="51.7269%" y="245" width="0.3213%" height="15" fill="rgb(208,63,6)" fg:x="644" fg:w="4"/><text x="51.9769%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="51.9679%" y="229" width="0.0803%" height="15" fill="rgb(245,76,14)" fg:x="647" fg:w="1"/><text x="52.2179%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.0482%" y="213" width="0.0803%" height="15" fill="rgb(234,176,34)" fg:x="648" fg:w="1"/><text x="52.2982%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.0482%" y="197" width="0.0803%" height="15" fill="rgb(243,156,42)" fg:x="648" fg:w="1"/><text x="52.2982%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (82 samples, 6.59%)</title><rect x="45.7028%" y="325" width="6.5863%" height="15" fill="rgb(237,182,10)" fg:x="569" fg:w="82"/><text x="45.9528%" y="335.50">indefinit..</text></g><g><title>regex::regex::string::Regex::new (68 samples, 5.46%)</title><rect x="46.8273%" y="309" width="5.4618%" height="15" fill="rgb(244,117,0)" fg:x="583" fg:w="68"/><text x="47.0773%" y="319.50">regex::..</text></g><g><title>regex::builders::string::RegexBuilder::build (68 samples, 5.46%)</title><rect x="46.8273%" y="293" width="5.4618%" height="15" fill="rgb(239,91,50)" fg:x="583" fg:w="68"/><text x="47.0773%" y="303.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (68 samples, 5.46%)</title><rect x="46.8273%" y="277" width="5.4618%" height="15" fill="rgb(206,38,9)" fg:x="583" fg:w="68"/><text x="47.0773%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="52.0482%" y="261" width="0.2410%" height="15" fill="rgb(205,25,10)" fg:x="648" fg:w="3"/><text x="52.2982%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="52.0482%" y="245" width="0.2410%" height="15" fill="rgb(206,224,7)" fg:x="648" fg:w="3"/><text x="52.2982%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="52.0482%" y="229" width="0.2410%" height="15" fill="rgb(227,157,10)" fg:x="648" fg:w="3"/><text x="52.2982%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="52.1285%" y="213" width="0.1606%" height="15" fill="rgb(214,157,37)" fg:x="649" fg:w="2"/><text x="52.3785%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="52.1285%" y="197" width="0.1606%" height="15" fill="rgb(209,180,35)" fg:x="649" fg:w="2"/><text x="52.3785%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="52.2892%" y="293" width="0.0803%" height="15" fill="rgb(216,174,49)" fg:x="651" fg:w="1"/><text x="52.5392%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="52.2892%" y="277" width="0.0803%" height="15" fill="rgb(205,96,20)" fg:x="651" fg:w="1"/><text x="52.5392%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="52.3695%" y="293" width="0.1606%" height="15" fill="rgb(214,220,39)" fg:x="652" fg:w="2"/><text x="52.6195%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="52.3695%" y="277" width="0.1606%" height="15" fill="rgb(245,126,30)" fg:x="652" fg:w="2"/><text x="52.6195%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="52.3695%" y="261" width="0.1606%" height="15" fill="rgb(215,88,33)" fg:x="652" fg:w="2"/><text x="52.6195%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="52.3695%" y="245" width="0.1606%" height="15" fill="rgb(210,1,49)" fg:x="652" fg:w="2"/><text x="52.6195%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="52.3695%" y="229" width="0.1606%" height="15" fill="rgb(207,133,3)" fg:x="652" fg:w="2"/><text x="52.6195%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="52.5301%" y="245" width="0.1606%" height="15" fill="rgb(231,47,43)" fg:x="654" fg:w="2"/><text x="52.7801%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="52.5301%" y="229" width="0.1606%" height="15" fill="rgb(245,64,1)" fg:x="654" fg:w="2"/><text x="52.7801%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="52.6104%" y="213" width="0.0803%" height="15" fill="rgb(253,145,20)" fg:x="655" fg:w="1"/><text x="52.8604%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="52.6104%" y="197" width="0.0803%" height="15" fill="rgb(211,39,18)" fg:x="655" fg:w="1"/><text x="52.8604%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="52.6104%" y="181" width="0.0803%" height="15" fill="rgb(223,225,18)" fg:x="655" fg:w="1"/><text x="52.8604%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="52.6908%" y="229" width="0.0803%" height="15" fill="rgb(210,202,44)" fg:x="656" fg:w="1"/><text x="52.9408%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.6908%" y="213" width="0.0803%" height="15" fill="rgb(231,138,36)" fg:x="656" fg:w="1"/><text x="52.9408%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="52.7711%" y="229" width="0.1606%" height="15" fill="rgb(237,115,25)" fg:x="657" fg:w="2"/><text x="53.0211%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="52.7711%" y="213" width="0.1606%" height="15" fill="rgb(215,53,48)" fg:x="657" fg:w="2"/><text x="53.0211%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="52.7711%" y="197" width="0.1606%" height="15" fill="rgb(243,193,24)" fg:x="657" fg:w="2"/><text x="53.0211%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="52.8514%" y="181" width="0.0803%" height="15" fill="rgb(210,106,28)" fg:x="658" fg:w="1"/><text x="53.1014%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.8514%" y="165" width="0.0803%" height="15" fill="rgb(249,192,0)" fg:x="658" fg:w="1"/><text x="53.1014%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.8514%" y="149" width="0.0803%" height="15" fill="rgb(224,96,21)" fg:x="658" fg:w="1"/><text x="53.1014%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.8514%" y="133" width="0.0803%" height="15" fill="rgb(243,160,19)" fg:x="658" fg:w="1"/><text x="53.1014%" y="143.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="52.9317%" y="229" width="0.0803%" height="15" fill="rgb(219,205,50)" fg:x="659" fg:w="1"/><text x="53.1817%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="52.9317%" y="213" width="0.0803%" height="15" fill="rgb(218,175,44)" fg:x="659" fg:w="1"/><text x="53.1817%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="53.0120%" y="213" width="0.0803%" height="15" fill="rgb(251,84,47)" fg:x="660" fg:w="1"/><text x="53.2620%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="53.0120%" y="197" width="0.0803%" height="15" fill="rgb(241,14,16)" fg:x="660" fg:w="1"/><text x="53.2620%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="53.0120%" y="181" width="0.0803%" height="15" fill="rgb(207,142,28)" fg:x="660" fg:w="1"/><text x="53.2620%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="53.0120%" y="165" width="0.0803%" height="15" fill="rgb(208,116,22)" fg:x="660" fg:w="1"/><text x="53.2620%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="53.0120%" y="149" width="0.0803%" height="15" fill="rgb(210,0,43)" fg:x="660" fg:w="1"/><text x="53.2620%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="53.0924%" y="213" width="0.0803%" height="15" fill="rgb(246,33,21)" fg:x="661" fg:w="1"/><text x="53.3424%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="53.0924%" y="197" width="0.0803%" height="15" fill="rgb(208,158,54)" fg:x="661" fg:w="1"/><text x="53.3424%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.56%)</title><rect x="52.6908%" y="245" width="0.5622%" height="15" fill="rgb(218,99,29)" fg:x="656" fg:w="7"/><text x="52.9408%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="53.0120%" y="229" width="0.2410%" height="15" fill="rgb(226,29,7)" fg:x="660" fg:w="3"/><text x="53.2620%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="53.1727%" y="213" width="0.0803%" height="15" fill="rgb(206,178,46)" fg:x="662" fg:w="1"/><text x="53.4227%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="53.2530%" y="245" width="0.2410%" height="15" fill="rgb(205,169,32)" fg:x="663" fg:w="3"/><text x="53.5030%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="53.2530%" y="229" width="0.2410%" height="15" fill="rgb(217,4,13)" fg:x="663" fg:w="3"/><text x="53.5030%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="53.2530%" y="213" width="0.2410%" height="15" fill="rgb(210,140,37)" fg:x="663" fg:w="3"/><text x="53.5030%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="53.4137%" y="197" width="0.0803%" height="15" fill="rgb(229,80,10)" fg:x="665" fg:w="1"/><text x="53.6637%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.4137%" y="181" width="0.0803%" height="15" fill="rgb(212,175,34)" fg:x="665" fg:w="1"/><text x="53.6637%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.4137%" y="165" width="0.0803%" height="15" fill="rgb(216,207,24)" fg:x="665" fg:w="1"/><text x="53.6637%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.4137%" y="149" width="0.0803%" height="15" fill="rgb(234,163,3)" fg:x="665" fg:w="1"/><text x="53.6637%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="53.4940%" y="213" width="0.0803%" height="15" fill="rgb(248,101,16)" fg:x="666" fg:w="1"/><text x="53.7440%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_expr (1 samples, 0.08%)</title><rect x="53.4940%" y="197" width="0.0803%" height="15" fill="rgb(209,152,54)" fg:x="666" fg:w="1"/><text x="53.7440%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="53.6546%" y="181" width="0.1606%" height="15" fill="rgb(229,124,51)" fg:x="668" fg:w="2"/><text x="53.9046%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.7349%" y="165" width="0.0803%" height="15" fill="rgb(219,83,18)" fg:x="669" fg:w="1"/><text x="53.9849%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.7349%" y="149" width="0.0803%" height="15" fill="rgb(206,29,38)" fg:x="669" fg:w="1"/><text x="53.9849%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="53.5743%" y="213" width="0.3213%" height="15" fill="rgb(245,123,23)" fg:x="667" fg:w="4"/><text x="53.8243%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="53.6546%" y="197" width="0.2410%" height="15" fill="rgb(238,50,33)" fg:x="668" fg:w="3"/><text x="53.9046%" y="207.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="53.8153%" y="181" width="0.0803%" height="15" fill="rgb(234,165,23)" fg:x="670" fg:w="1"/><text x="54.0653%" y="191.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (18 samples, 1.45%)</title><rect x="52.5301%" y="277" width="1.4458%" height="15" fill="rgb(211,82,31)" fg:x="654" fg:w="18"/><text x="52.7801%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (18 samples, 1.45%)</title><rect x="52.5301%" y="261" width="1.4458%" height="15" fill="rgb(224,166,46)" fg:x="654" fg:w="18"/><text x="52.7801%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="53.4940%" y="245" width="0.4819%" height="15" fill="rgb(211,13,8)" fg:x="666" fg:w="6"/><text x="53.7440%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="53.4940%" y="229" width="0.4819%" height="15" fill="rgb(212,7,42)" fg:x="666" fg:w="6"/><text x="53.7440%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="53.8956%" y="213" width="0.0803%" height="15" fill="rgb(249,102,19)" fg:x="671" fg:w="1"/><text x="54.1456%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="53.8956%" y="197" width="0.0803%" height="15" fill="rgb(225,41,13)" fg:x="671" fg:w="1"/><text x="54.1456%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (19 samples, 1.53%)</title><rect x="52.5301%" y="293" width="1.5261%" height="15" fill="rgb(220,65,27)" fg:x="654" fg:w="19"/><text x="52.7801%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="53.9759%" y="277" width="0.0803%" height="15" fill="rgb(206,4,41)" fg:x="672" fg:w="1"/><text x="54.2259%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="53.9759%" y="261" width="0.0803%" height="15" fill="rgb(219,60,39)" fg:x="672" fg:w="1"/><text x="54.2259%" y="271.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (24 samples, 1.93%)</title><rect x="52.2892%" y="309" width="1.9277%" height="15" fill="rgb(226,4,38)" fg:x="651" fg:w="24"/><text x="52.5392%" y="319.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="54.0562%" y="293" width="0.1606%" height="15" fill="rgb(250,52,3)" fg:x="673" fg:w="2"/><text x="54.3062%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="54.0562%" y="277" width="0.1606%" height="15" fill="rgb(234,93,0)" fg:x="673" fg:w="2"/><text x="54.3062%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="54.0562%" y="261" width="0.1606%" height="15" fill="rgb(251,47,47)" fg:x="673" fg:w="2"/><text x="54.3062%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="54.0562%" y="245" width="0.1606%" height="15" fill="rgb(205,166,47)" fg:x="673" fg:w="2"/><text x="54.3062%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="54.0562%" y="229" width="0.1606%" height="15" fill="rgb(231,148,8)" fg:x="673" fg:w="2"/><text x="54.3062%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="54.1365%" y="213" width="0.0803%" height="15" fill="rgb(244,185,19)" fg:x="674" fg:w="1"/><text x="54.3865%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (208 samples, 16.71%)</title><rect x="37.5904%" y="405" width="16.7068%" height="15" fill="rgb(224,201,45)" fg:x="468" fg:w="208"/><text x="37.8404%" y="415.50">&lt;&amp;kernel::model::EntityPtr..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (190 samples, 15.26%)</title><rect x="39.0361%" y="389" width="15.2610%" height="15" fill="rgb(240,77,39)" fg:x="486" fg:w="190"/><text x="39.2861%" y="399.50">plugins_core::looking::..</text></g><g><title>indefinite::indefinite (190 samples, 15.26%)</title><rect x="39.0361%" y="373" width="15.2610%" height="15" fill="rgb(248,211,29)" fg:x="486" fg:w="190"/><text x="39.2861%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (189 samples, 15.18%)</title><rect x="39.1165%" y="357" width="15.1807%" height="15" fill="rgb(232,214,46)" fg:x="487" fg:w="189"/><text x="39.3665%" y="367.50">indefinite::methods::in..</text></g><g><title>indefinite::methods::apply_rules (189 samples, 15.18%)</title><rect x="39.1165%" y="341" width="15.1807%" height="15" fill="rgb(213,99,54)" fg:x="487" fg:w="189"/><text x="39.3665%" y="351.50">indefinite::methods::ap..</text></g><g><title>indefinite::rules::other::Other::run (25 samples, 2.01%)</title><rect x="52.2892%" y="325" width="2.0080%" height="15" fill="rgb(240,19,46)" fg:x="651" fg:w="25"/><text x="52.5392%" y="335.50">i..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="54.2169%" y="309" width="0.0803%" height="15" fill="rgb(243,89,10)" fg:x="675" fg:w="1"/><text x="54.4669%" y="319.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (1 samples, 0.08%)</title><rect x="54.2972%" y="373" width="0.0803%" height="15" fill="rgb(249,28,32)" fg:x="676" fg:w="1"/><text x="54.5472%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.2972%" y="357" width="0.0803%" height="15" fill="rgb(253,30,9)" fg:x="676" fg:w="1"/><text x="54.5472%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (2 samples, 0.16%)</title><rect x="54.2972%" y="405" width="0.1606%" height="15" fill="rgb(217,2,26)" fg:x="676" fg:w="2"/><text x="54.5472%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (2 samples, 0.16%)</title><rect x="54.2972%" y="389" width="0.1606%" height="15" fill="rgb(220,28,10)" fg:x="676" fg:w="2"/><text x="54.5472%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="54.3775%" y="373" width="0.0803%" height="15" fill="rgb(228,167,49)" fg:x="677" fg:w="1"/><text x="54.6275%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="54.3775%" y="357" width="0.0803%" height="15" fill="rgb(238,212,3)" fg:x="677" fg:w="1"/><text x="54.6275%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="54.3775%" y="341" width="0.0803%" height="15" fill="rgb(229,134,44)" fg:x="677" fg:w="1"/><text x="54.6275%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="54.4578%" y="405" width="0.0803%" height="15" fill="rgb(208,71,4)" fg:x="678" fg:w="1"/><text x="54.7078%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="54.4578%" y="389" width="0.0803%" height="15" fill="rgb(221,205,45)" fg:x="678" fg:w="1"/><text x="54.7078%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="54.4578%" y="373" width="0.0803%" height="15" fill="rgb(215,132,38)" fg:x="678" fg:w="1"/><text x="54.7078%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="54.4578%" y="357" width="0.0803%" height="15" fill="rgb(227,158,6)" fg:x="678" fg:w="1"/><text x="54.7078%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="54.4578%" y="341" width="0.0803%" height="15" fill="rgb(250,10,38)" fg:x="678" fg:w="1"/><text x="54.7078%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="54.4578%" y="325" width="0.0803%" height="15" fill="rgb(225,171,40)" fg:x="678" fg:w="1"/><text x="54.7078%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="54.4578%" y="309" width="0.0803%" height="15" fill="rgb(238,17,43)" fg:x="678" fg:w="1"/><text x="54.7078%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="54.4578%" y="293" width="0.0803%" height="15" fill="rgb(208,145,4)" fg:x="678" fg:w="1"/><text x="54.7078%" y="303.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="54.7791%" y="277" width="0.0803%" height="15" fill="rgb(232,82,7)" fg:x="682" fg:w="1"/><text x="55.0291%" y="287.50"></text></g><g><title>&lt;plugins_rune::runner::RuneReturn as plugins_rune::PerformTagged&gt;::handle (2 samples, 0.16%)</title><rect x="54.8594%" y="277" width="0.1606%" height="15" fill="rgb(205,166,38)" fg:x="683" fg:w="2"/><text x="55.1094%" y="287.50"></text></g><g><title>&lt;rune::runtime::value::Value as plugins_rune::runner::Simplifies&gt;::simplify (2 samples, 0.16%)</title><rect x="54.8594%" y="261" width="0.1606%" height="15" fill="rgb(240,228,4)" fg:x="683" fg:w="2"/><text x="55.1094%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="55.0201%" y="277" width="0.0803%" height="15" fill="rgb(233,121,40)" fg:x="685" fg:w="1"/><text x="55.2701%" y="287.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="55.0201%" y="261" width="0.0803%" height="15" fill="rgb(243,84,30)" fg:x="685" fg:w="1"/><text x="55.2701%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="55.0201%" y="245" width="0.0803%" height="15" fill="rgb(235,81,48)" fg:x="685" fg:w="1"/><text x="55.2701%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="55.0201%" y="229" width="0.0803%" height="15" fill="rgb(218,137,0)" fg:x="685" fg:w="1"/><text x="55.2701%" y="239.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="55.0201%" y="213" width="0.0803%" height="15" fill="rgb(223,151,48)" fg:x="685" fg:w="1"/><text x="55.2701%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="55.0201%" y="197" width="0.0803%" height="15" fill="rgb(247,30,19)" fg:x="685" fg:w="1"/><text x="55.2701%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.08%)</title><rect x="55.0201%" y="181" width="0.0803%" height="15" fill="rgb(205,129,29)" fg:x="685" fg:w="1"/><text x="55.2701%" y="191.50"></text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="55.0201%" y="165" width="0.0803%" height="15" fill="rgb(222,29,2)" fg:x="685" fg:w="1"/><text x="55.2701%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="55.1004%" y="229" width="0.0803%" height="15" fill="rgb(232,145,33)" fg:x="686" fg:w="1"/><text x="55.3504%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.1004%" y="213" width="0.0803%" height="15" fill="rgb(217,30,31)" fg:x="686" fg:w="1"/><text x="55.3504%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (9 samples, 0.72%)</title><rect x="54.5382%" y="389" width="0.7229%" height="15" fill="rgb(243,22,52)" fg:x="679" fg:w="9"/><text x="54.7882%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (9 samples, 0.72%)</title><rect x="54.5382%" y="373" width="0.7229%" height="15" fill="rgb(254,228,14)" fg:x="679" fg:w="9"/><text x="54.7882%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (9 samples, 0.72%)</title><rect x="54.5382%" y="357" width="0.7229%" height="15" fill="rgb(231,45,50)" fg:x="679" fg:w="9"/><text x="54.7882%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (8 samples, 0.64%)</title><rect x="54.6185%" y="341" width="0.6426%" height="15" fill="rgb(248,125,3)" fg:x="680" fg:w="8"/><text x="54.8685%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (8 samples, 0.64%)</title><rect x="54.6185%" y="325" width="0.6426%" height="15" fill="rgb(213,76,9)" fg:x="680" fg:w="8"/><text x="54.8685%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (8 samples, 0.64%)</title><rect x="54.6185%" y="309" width="0.6426%" height="15" fill="rgb(238,108,21)" fg:x="680" fg:w="8"/><text x="54.8685%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (8 samples, 0.64%)</title><rect x="54.6185%" y="293" width="0.6426%" height="15" fill="rgb(229,214,19)" fg:x="680" fg:w="8"/><text x="54.8685%" y="303.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (2 samples, 0.16%)</title><rect x="55.1004%" y="277" width="0.1606%" height="15" fill="rgb(252,201,5)" fg:x="686" fg:w="2"/><text x="55.3504%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="55.1004%" y="261" width="0.1606%" height="15" fill="rgb(233,165,49)" fg:x="686" fg:w="2"/><text x="55.3504%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="55.1004%" y="245" width="0.1606%" height="15" fill="rgb(208,165,19)" fg:x="686" fg:w="2"/><text x="55.3504%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="55.1807%" y="229" width="0.0803%" height="15" fill="rgb(216,220,31)" fg:x="687" fg:w="1"/><text x="55.4307%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="55.1807%" y="213" width="0.0803%" height="15" fill="rgb(214,8,31)" fg:x="687" fg:w="1"/><text x="55.4307%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="55.1807%" y="197" width="0.0803%" height="15" fill="rgb(220,32,32)" fg:x="687" fg:w="1"/><text x="55.4307%" y="207.50"></text></g><g><title>plugins_core::library::actions::reply_ok (10 samples, 0.80%)</title><rect x="54.5382%" y="405" width="0.8032%" height="15" fill="rgb(237,172,34)" fg:x="679" fg:w="10"/><text x="54.7882%" y="415.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="55.2610%" y="389" width="0.0803%" height="15" fill="rgb(240,209,5)" fg:x="688" fg:w="1"/><text x="55.5110%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (1 samples, 0.08%)</title><rect x="55.2610%" y="373" width="0.0803%" height="15" fill="rgb(221,219,1)" fg:x="688" fg:w="1"/><text x="55.5110%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="55.2610%" y="357" width="0.0803%" height="15" fill="rgb(237,90,36)" fg:x="688" fg:w="1"/><text x="55.5110%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="55.2610%" y="341" width="0.0803%" height="15" fill="rgb(245,14,51)" fg:x="688" fg:w="1"/><text x="55.5110%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="55.2610%" y="325" width="0.0803%" height="15" fill="rgb(211,71,49)" fg:x="688" fg:w="1"/><text x="55.5110%" y="335.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="55.3414%" y="389" width="0.0803%" height="15" fill="rgb(230,223,9)" fg:x="689" fg:w="1"/><text x="55.5914%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="55.3414%" y="373" width="0.0803%" height="15" fill="rgb(212,33,31)" fg:x="689" fg:w="1"/><text x="55.5914%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.3414%" y="357" width="0.0803%" height="15" fill="rgb(218,141,5)" fg:x="689" fg:w="1"/><text x="55.5914%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="55.4217%" y="357" width="0.0803%" height="15" fill="rgb(239,194,8)" fg:x="690" fg:w="1"/><text x="55.6717%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="55.4217%" y="341" width="0.0803%" height="15" fill="rgb(225,119,29)" fg:x="690" fg:w="1"/><text x="55.6717%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="55.4217%" y="325" width="0.0803%" height="15" fill="rgb(233,32,3)" fg:x="690" fg:w="1"/><text x="55.6717%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="55.4217%" y="309" width="0.0803%" height="15" fill="rgb(248,126,40)" fg:x="690" fg:w="1"/><text x="55.6717%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="55.4217%" y="293" width="0.0803%" height="15" fill="rgb(213,102,53)" fg:x="690" fg:w="1"/><text x="55.6717%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="55.4217%" y="277" width="0.0803%" height="15" fill="rgb(212,69,15)" fg:x="690" fg:w="1"/><text x="55.6717%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="55.4217%" y="261" width="0.0803%" height="15" fill="rgb(253,39,34)" fg:x="690" fg:w="1"/><text x="55.6717%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="55.4217%" y="245" width="0.0803%" height="15" fill="rgb(205,189,54)" fg:x="690" fg:w="1"/><text x="55.6717%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="55.4217%" y="229" width="0.0803%" height="15" fill="rgb(234,229,45)" fg:x="690" fg:w="1"/><text x="55.6717%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="55.4217%" y="213" width="0.0803%" height="15" fill="rgb(243,79,48)" fg:x="690" fg:w="1"/><text x="55.6717%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="55.4217%" y="197" width="0.0803%" height="15" fill="rgb(206,71,50)" fg:x="690" fg:w="1"/><text x="55.6717%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="55.4217%" y="181" width="0.0803%" height="15" fill="rgb(209,32,17)" fg:x="690" fg:w="1"/><text x="55.6717%" y="191.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="55.4217%" y="389" width="0.1606%" height="15" fill="rgb(219,229,6)" fg:x="690" fg:w="2"/><text x="55.6717%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="55.4217%" y="373" width="0.1606%" height="15" fill="rgb(226,25,27)" fg:x="690" fg:w="2"/><text x="55.6717%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="55.5020%" y="357" width="0.0803%" height="15" fill="rgb(218,185,23)" fg:x="691" fg:w="1"/><text x="55.7520%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="55.5020%" y="341" width="0.0803%" height="15" fill="rgb(242,123,5)" fg:x="691" fg:w="1"/><text x="55.7520%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="55.5020%" y="325" width="0.0803%" height="15" fill="rgb(215,53,19)" fg:x="691" fg:w="1"/><text x="55.7520%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.5020%" y="309" width="0.0803%" height="15" fill="rgb(233,20,30)" fg:x="691" fg:w="1"/><text x="55.7520%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.5823%" y="357" width="0.0803%" height="15" fill="rgb(209,67,20)" fg:x="692" fg:w="1"/><text x="55.8323%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="55.5823%" y="373" width="0.1606%" height="15" fill="rgb(227,181,50)" fg:x="692" fg:w="2"/><text x="55.8323%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="55.6627%" y="357" width="0.0803%" height="15" fill="rgb(252,75,38)" fg:x="693" fg:w="1"/><text x="55.9127%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="55.6627%" y="341" width="0.0803%" height="15" fill="rgb(235,9,33)" fg:x="693" fg:w="1"/><text x="55.9127%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="55.6627%" y="325" width="0.0803%" height="15" fill="rgb(208,87,30)" fg:x="693" fg:w="1"/><text x="55.9127%" y="335.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="55.5823%" y="389" width="0.2410%" height="15" fill="rgb(215,199,39)" fg:x="692" fg:w="3"/><text x="55.8323%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="55.7430%" y="373" width="0.0803%" height="15" fill="rgb(246,208,12)" fg:x="694" fg:w="1"/><text x="55.9930%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="55.7430%" y="357" width="0.0803%" height="15" fill="rgb(206,195,10)" fg:x="694" fg:w="1"/><text x="55.9930%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="55.7430%" y="341" width="0.0803%" height="15" fill="rgb(244,1,30)" fg:x="694" fg:w="1"/><text x="55.9930%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="55.7430%" y="325" width="0.0803%" height="15" fill="rgb(230,83,5)" fg:x="694" fg:w="1"/><text x="55.9930%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="55.8233%" y="373" width="0.0803%" height="15" fill="rgb(239,62,17)" fg:x="695" fg:w="1"/><text x="56.0733%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="55.8233%" y="357" width="0.0803%" height="15" fill="rgb(252,193,41)" fg:x="695" fg:w="1"/><text x="56.0733%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.8233%" y="341" width="0.0803%" height="15" fill="rgb(216,142,19)" fg:x="695" fg:w="1"/><text x="56.0733%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="55.8233%" y="325" width="0.0803%" height="15" fill="rgb(240,81,38)" fg:x="695" fg:w="1"/><text x="56.0733%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.8233%" y="309" width="0.0803%" height="15" fill="rgb(240,109,40)" fg:x="695" fg:w="1"/><text x="56.0733%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="55.8233%" y="293" width="0.0803%" height="15" fill="rgb(230,123,10)" fg:x="695" fg:w="1"/><text x="56.0733%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.8233%" y="277" width="0.0803%" height="15" fill="rgb(253,42,32)" fg:x="695" fg:w="1"/><text x="56.0733%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="55.8233%" y="261" width="0.0803%" height="15" fill="rgb(218,154,8)" fg:x="695" fg:w="1"/><text x="56.0733%" y="271.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="55.8233%" y="389" width="0.2410%" height="15" fill="rgb(216,197,10)" fg:x="695" fg:w="3"/><text x="56.0733%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="55.9036%" y="373" width="0.1606%" height="15" fill="rgb(223,107,12)" fg:x="696" fg:w="2"/><text x="56.1536%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="55.9839%" y="357" width="0.0803%" height="15" fill="rgb(241,174,42)" fg:x="697" fg:w="1"/><text x="56.2339%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="55.9839%" y="341" width="0.0803%" height="15" fill="rgb(231,78,20)" fg:x="697" fg:w="1"/><text x="56.2339%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="55.9839%" y="325" width="0.0803%" height="15" fill="rgb(230,208,49)" fg:x="697" fg:w="1"/><text x="56.2339%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="55.9839%" y="309" width="0.0803%" height="15" fill="rgb(238,11,34)" fg:x="697" fg:w="1"/><text x="56.2339%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.9839%" y="293" width="0.0803%" height="15" fill="rgb(210,130,26)" fg:x="697" fg:w="1"/><text x="56.2339%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="55.9839%" y="277" width="0.0803%" height="15" fill="rgb(242,131,11)" fg:x="697" fg:w="1"/><text x="56.2339%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.9839%" y="261" width="0.0803%" height="15" fill="rgb(237,38,28)" fg:x="697" fg:w="1"/><text x="56.2339%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="55.9839%" y="245" width="0.0803%" height="15" fill="rgb(244,180,43)" fg:x="697" fg:w="1"/><text x="56.2339%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="55.9839%" y="229" width="0.0803%" height="15" fill="rgb(214,171,19)" fg:x="697" fg:w="1"/><text x="56.2339%" y="239.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="56.0643%" y="373" width="0.0803%" height="15" fill="rgb(252,101,45)" fg:x="698" fg:w="1"/><text x="56.3143%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="56.0643%" y="357" width="0.0803%" height="15" fill="rgb(211,96,33)" fg:x="698" fg:w="1"/><text x="56.3143%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="56.0643%" y="341" width="0.0803%" height="15" fill="rgb(207,80,25)" fg:x="698" fg:w="1"/><text x="56.3143%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="56.0643%" y="325" width="0.0803%" height="15" fill="rgb(225,15,35)" fg:x="698" fg:w="1"/><text x="56.3143%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.0643%" y="309" width="0.0803%" height="15" fill="rgb(214,93,43)" fg:x="698" fg:w="1"/><text x="56.3143%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.0643%" y="293" width="0.0803%" height="15" fill="rgb(248,42,37)" fg:x="698" fg:w="1"/><text x="56.3143%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="56.0643%" y="277" width="0.0803%" height="15" fill="rgb(217,135,32)" fg:x="698" fg:w="1"/><text x="56.3143%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="56.0643%" y="261" width="0.0803%" height="15" fill="rgb(216,74,28)" fg:x="698" fg:w="1"/><text x="56.3143%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="56.0643%" y="245" width="0.0803%" height="15" fill="rgb(247,108,16)" fg:x="698" fg:w="1"/><text x="56.3143%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.0643%" y="229" width="0.0803%" height="15" fill="rgb(205,219,30)" fg:x="698" fg:w="1"/><text x="56.3143%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.0643%" y="213" width="0.0803%" height="15" fill="rgb(241,122,9)" fg:x="698" fg:w="1"/><text x="56.3143%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="56.0643%" y="197" width="0.0803%" height="15" fill="rgb(216,148,50)" fg:x="698" fg:w="1"/><text x="56.3143%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="56.0643%" y="181" width="0.0803%" height="15" fill="rgb(226,154,2)" fg:x="698" fg:w="1"/><text x="56.3143%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="56.0643%" y="165" width="0.0803%" height="15" fill="rgb(220,128,1)" fg:x="698" fg:w="1"/><text x="56.3143%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="56.0643%" y="149" width="0.0803%" height="15" fill="rgb(245,185,29)" fg:x="698" fg:w="1"/><text x="56.3143%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.0643%" y="133" width="0.0803%" height="15" fill="rgb(243,161,2)" fg:x="698" fg:w="1"/><text x="56.3143%" y="143.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="56.0643%" y="389" width="0.1606%" height="15" fill="rgb(249,215,17)" fg:x="698" fg:w="2"/><text x="56.3143%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (1 samples, 0.08%)</title><rect x="56.1446%" y="373" width="0.0803%" height="15" fill="rgb(237,67,11)" fg:x="699" fg:w="1"/><text x="56.3946%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="56.1446%" y="357" width="0.0803%" height="15" fill="rgb(239,17,24)" fg:x="699" fg:w="1"/><text x="56.3946%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="56.1446%" y="341" width="0.0803%" height="15" fill="rgb(215,97,29)" fg:x="699" fg:w="1"/><text x="56.3946%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="56.1446%" y="325" width="0.0803%" height="15" fill="rgb(253,228,42)" fg:x="699" fg:w="1"/><text x="56.3946%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="56.2249%" y="373" width="0.1606%" height="15" fill="rgb(240,85,2)" fg:x="700" fg:w="2"/><text x="56.4749%" y="383.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (236 samples, 18.96%)</title><rect x="37.5100%" y="421" width="18.9558%" height="15" fill="rgb(214,155,4)" fg:x="467" fg:w="236"/><text x="37.7600%" y="431.50">&lt;plugins_core::carrying::actio..</text></g><g><title>plugins_core::location::model::change_location (14 samples, 1.12%)</title><rect x="55.3414%" y="405" width="1.1245%" height="15" fill="rgb(247,120,22)" fg:x="689" fg:w="14"/><text x="55.5914%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (3 samples, 0.24%)</title><rect x="56.2249%" y="389" width="0.2410%" height="15" fill="rgb(211,208,6)" fg:x="700" fg:w="3"/><text x="56.4749%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="56.3855%" y="373" width="0.0803%" height="15" fill="rgb(235,99,41)" fg:x="702" fg:w="1"/><text x="56.6355%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="56.3855%" y="357" width="0.0803%" height="15" fill="rgb(223,28,8)" fg:x="702" fg:w="1"/><text x="56.6355%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="56.3855%" y="341" width="0.0803%" height="15" fill="rgb(212,71,20)" fg:x="702" fg:w="1"/><text x="56.6355%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="56.3855%" y="325" width="0.0803%" height="15" fill="rgb(206,85,3)" fg:x="702" fg:w="1"/><text x="56.6355%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="56.3855%" y="309" width="0.0803%" height="15" fill="rgb(244,180,11)" fg:x="702" fg:w="1"/><text x="56.6355%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.4659%" y="421" width="0.0803%" height="15" fill="rgb(223,16,21)" fg:x="703" fg:w="1"/><text x="56.7159%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.4659%" y="405" width="0.0803%" height="15" fill="rgb(238,85,42)" fg:x="703" fg:w="1"/><text x="56.7159%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.4659%" y="389" width="0.0803%" height="15" fill="rgb(205,85,8)" fg:x="703" fg:w="1"/><text x="56.7159%" y="399.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (464 samples, 37.27%)</title><rect x="19.4378%" y="549" width="37.2691%" height="15" fill="rgb(217,190,15)" fg:x="242" fg:w="464"/><text x="19.6878%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (463 samples, 37.19%)</title><rect x="19.5181%" y="533" width="37.1888%" height="15" fill="rgb(243,192,23)" fg:x="243" fg:w="463"/><text x="19.7681%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Mi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (463 samples, 37.19%)</title><rect x="19.5181%" y="517" width="37.1888%" height="15" fill="rgb(223,220,37)" fg:x="243" fg:w="463"/><text x="19.7681%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (463 samples, 37.19%)</title><rect x="19.5181%" y="501" width="37.1888%" height="15" fill="rgb(208,41,17)" fg:x="243" fg:w="463"/><text x="19.7681%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (463 samples, 37.19%)</title><rect x="19.5181%" y="485" width="37.1888%" height="15" fill="rgb(224,188,7)" fg:x="243" fg:w="463"/><text x="19.7681%" y="495.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (463 samples, 37.19%)</title><rect x="19.5181%" y="469" width="37.1888%" height="15" fill="rgb(236,16,50)" fg:x="243" fg:w="463"/><text x="19.7681%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (463 samples, 37.19%)</title><rect x="19.5181%" y="453" width="37.1888%" height="15" fill="rgb(238,6,24)" fg:x="243" fg:w="463"/><text x="19.7681%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (463 samples, 37.19%)</title><rect x="19.5181%" y="437" width="37.1888%" height="15" fill="rgb(253,67,45)" fg:x="243" fg:w="463"/><text x="19.7681%" y="447.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;..</text></g><g><title>kernel::model::EntityPtr::key (2 samples, 0.16%)</title><rect x="56.5462%" y="421" width="0.1606%" height="15" fill="rgb(210,89,32)" fg:x="704" fg:w="2"/><text x="56.7962%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.7871%" y="533" width="0.0803%" height="15" fill="rgb(208,89,9)" fg:x="707" fg:w="1"/><text x="57.0371%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="56.8675%" y="517" width="0.0803%" height="15" fill="rgb(222,180,44)" fg:x="708" fg:w="1"/><text x="57.1175%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="56.9478%" y="485" width="0.1606%" height="15" fill="rgb(250,181,46)" fg:x="709" fg:w="2"/><text x="57.1978%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.0281%" y="469" width="0.0803%" height="15" fill="rgb(210,190,26)" fg:x="710" fg:w="1"/><text x="57.2781%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.0281%" y="453" width="0.0803%" height="15" fill="rgb(253,49,13)" fg:x="710" fg:w="1"/><text x="57.2781%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.0281%" y="437" width="0.0803%" height="15" fill="rgb(240,184,42)" fg:x="710" fg:w="1"/><text x="57.2781%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.0281%" y="421" width="0.0803%" height="15" fill="rgb(246,59,37)" fg:x="710" fg:w="1"/><text x="57.2781%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="57.0281%" y="405" width="0.0803%" height="15" fill="rgb(207,134,54)" fg:x="710" fg:w="1"/><text x="57.2781%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="57.0281%" y="389" width="0.0803%" height="15" fill="rgb(250,122,24)" fg:x="710" fg:w="1"/><text x="57.2781%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="57.0281%" y="373" width="0.0803%" height="15" fill="rgb(239,206,3)" fg:x="710" fg:w="1"/><text x="57.2781%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="57.0281%" y="357" width="0.0803%" height="15" fill="rgb(253,220,32)" fg:x="710" fg:w="1"/><text x="57.2781%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="57.0281%" y="341" width="0.0803%" height="15" fill="rgb(209,217,48)" fg:x="710" fg:w="1"/><text x="57.2781%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.1888%" y="453" width="0.0803%" height="15" fill="rgb(242,91,39)" fg:x="712" fg:w="1"/><text x="57.4388%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="56.9478%" y="501" width="0.4016%" height="15" fill="rgb(228,4,13)" fg:x="709" fg:w="5"/><text x="57.1978%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="57.1084%" y="485" width="0.2410%" height="15" fill="rgb(223,133,4)" fg:x="711" fg:w="3"/><text x="57.3584%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="57.1084%" y="469" width="0.2410%" height="15" fill="rgb(215,105,30)" fg:x="711" fg:w="3"/><text x="57.3584%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="57.2691%" y="453" width="0.0803%" height="15" fill="rgb(230,9,4)" fg:x="713" fg:w="1"/><text x="57.5191%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="57.2691%" y="437" width="0.0803%" height="15" fill="rgb(248,15,2)" fg:x="713" fg:w="1"/><text x="57.5191%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="57.2691%" y="421" width="0.0803%" height="15" fill="rgb(208,210,22)" fg:x="713" fg:w="1"/><text x="57.5191%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.2691%" y="405" width="0.0803%" height="15" fill="rgb(208,112,41)" fg:x="713" fg:w="1"/><text x="57.5191%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.2691%" y="389" width="0.0803%" height="15" fill="rgb(232,83,14)" fg:x="713" fg:w="1"/><text x="57.5191%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.2691%" y="373" width="0.0803%" height="15" fill="rgb(229,65,11)" fg:x="713" fg:w="1"/><text x="57.5191%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.3494%" y="405" width="0.0803%" height="15" fill="rgb(228,126,24)" fg:x="714" fg:w="1"/><text x="57.5994%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.3494%" y="389" width="0.0803%" height="15" fill="rgb(218,66,33)" fg:x="714" fg:w="1"/><text x="57.5994%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="57.3494%" y="373" width="0.0803%" height="15" fill="rgb(251,49,52)" fg:x="714" fg:w="1"/><text x="57.5994%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="57.3494%" y="357" width="0.0803%" height="15" fill="rgb(219,46,37)" fg:x="714" fg:w="1"/><text x="57.5994%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="57.3494%" y="341" width="0.0803%" height="15" fill="rgb(213,53,49)" fg:x="714" fg:w="1"/><text x="57.5994%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.3494%" y="325" width="0.0803%" height="15" fill="rgb(214,134,1)" fg:x="714" fg:w="1"/><text x="57.5994%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.3494%" y="309" width="0.0803%" height="15" fill="rgb(208,139,43)" fg:x="714" fg:w="1"/><text x="57.5994%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="57.3494%" y="293" width="0.0803%" height="15" fill="rgb(231,105,35)" fg:x="714" fg:w="1"/><text x="57.5994%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="57.3494%" y="277" width="0.0803%" height="15" fill="rgb(247,189,9)" fg:x="714" fg:w="1"/><text x="57.5994%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="57.3494%" y="261" width="0.0803%" height="15" fill="rgb(252,48,51)" fg:x="714" fg:w="1"/><text x="57.5994%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="57.3494%" y="245" width="0.0803%" height="15" fill="rgb(209,121,1)" fg:x="714" fg:w="1"/><text x="57.5994%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.3494%" y="229" width="0.0803%" height="15" fill="rgb(231,40,26)" fg:x="714" fg:w="1"/><text x="57.5994%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="57.3494%" y="437" width="0.1606%" height="15" fill="rgb(251,8,13)" fg:x="714" fg:w="2"/><text x="57.5994%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="57.3494%" y="421" width="0.1606%" height="15" fill="rgb(231,110,2)" fg:x="714" fg:w="2"/><text x="57.5994%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.4297%" y="405" width="0.0803%" height="15" fill="rgb(216,153,22)" fg:x="715" fg:w="1"/><text x="57.6797%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="57.5100%" y="437" width="0.0803%" height="15" fill="rgb(249,116,49)" fg:x="716" fg:w="1"/><text x="57.7600%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.5100%" y="421" width="0.0803%" height="15" fill="rgb(230,89,2)" fg:x="716" fg:w="1"/><text x="57.7600%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.5100%" y="405" width="0.0803%" height="15" fill="rgb(231,125,23)" fg:x="716" fg:w="1"/><text x="57.7600%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="57.6707%" y="373" width="0.0803%" height="15" fill="rgb(212,217,18)" fg:x="718" fg:w="1"/><text x="57.9207%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="57.6707%" y="357" width="0.0803%" height="15" fill="rgb(210,21,33)" fg:x="718" fg:w="1"/><text x="57.9207%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="57.6707%" y="341" width="0.0803%" height="15" fill="rgb(241,97,9)" fg:x="718" fg:w="1"/><text x="57.9207%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="57.7510%" y="373" width="0.0803%" height="15" fill="rgb(221,35,31)" fg:x="719" fg:w="1"/><text x="58.0010%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="57.7510%" y="357" width="0.0803%" height="15" fill="rgb(251,23,23)" fg:x="719" fg:w="1"/><text x="58.0010%" y="367.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.56%)</title><rect x="57.3494%" y="501" width="0.5622%" height="15" fill="rgb(227,165,2)" fg:x="714" fg:w="7"/><text x="57.5994%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.56%)</title><rect x="57.3494%" y="485" width="0.5622%" height="15" fill="rgb(242,24,2)" fg:x="714" fg:w="7"/><text x="57.5994%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="57.3494%" y="469" width="0.5622%" height="15" fill="rgb(242,138,51)" fg:x="714" fg:w="7"/><text x="57.5994%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="57.3494%" y="453" width="0.5622%" height="15" fill="rgb(220,219,5)" fg:x="714" fg:w="7"/><text x="57.5994%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="57.5904%" y="437" width="0.3213%" height="15" fill="rgb(247,53,29)" fg:x="717" fg:w="4"/><text x="57.8404%" y="447.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="57.5904%" y="421" width="0.3213%" height="15" fill="rgb(233,43,39)" fg:x="717" fg:w="4"/><text x="57.8404%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="57.5904%" y="405" width="0.3213%" height="15" fill="rgb(230,128,54)" fg:x="717" fg:w="4"/><text x="57.8404%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="57.5904%" y="389" width="0.3213%" height="15" fill="rgb(218,20,12)" fg:x="717" fg:w="4"/><text x="57.8404%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="57.8313%" y="373" width="0.0803%" height="15" fill="rgb(206,51,14)" fg:x="720" fg:w="1"/><text x="58.0813%" y="383.50"></text></g><g><title>plugins_core::tools::contained_by (13 samples, 1.04%)</title><rect x="56.9478%" y="517" width="1.0442%" height="15" fill="rgb(223,16,35)" fg:x="709" fg:w="13"/><text x="57.1978%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.9116%" y="501" width="0.0803%" height="15" fill="rgb(226,165,37)" fg:x="721" fg:w="1"/><text x="58.1616%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.9116%" y="485" width="0.0803%" height="15" fill="rgb(240,26,21)" fg:x="721" fg:w="1"/><text x="58.1616%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.9116%" y="469" width="0.0803%" height="15" fill="rgb(240,72,46)" fg:x="721" fg:w="1"/><text x="58.1616%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.9920%" y="437" width="0.0803%" height="15" fill="rgb(211,33,41)" fg:x="722" fg:w="1"/><text x="58.2420%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.9920%" y="421" width="0.0803%" height="15" fill="rgb(224,157,46)" fg:x="722" fg:w="1"/><text x="58.2420%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.9920%" y="405" width="0.0803%" height="15" fill="rgb(223,59,19)" fg:x="722" fg:w="1"/><text x="58.2420%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.9920%" y="389" width="0.0803%" height="15" fill="rgb(239,187,1)" fg:x="722" fg:w="1"/><text x="58.2420%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="57.9920%" y="373" width="0.0803%" height="15" fill="rgb(226,95,9)" fg:x="722" fg:w="1"/><text x="58.2420%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="57.9920%" y="357" width="0.0803%" height="15" fill="rgb(234,61,54)" fg:x="722" fg:w="1"/><text x="58.2420%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="57.9920%" y="341" width="0.0803%" height="15" fill="rgb(205,209,47)" fg:x="722" fg:w="1"/><text x="58.2420%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="57.9920%" y="325" width="0.0803%" height="15" fill="rgb(228,7,43)" fg:x="722" fg:w="1"/><text x="58.2420%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="57.9920%" y="309" width="0.0803%" height="15" fill="rgb(240,217,52)" fg:x="722" fg:w="1"/><text x="58.2420%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="57.9920%" y="485" width="0.1606%" height="15" fill="rgb(211,178,21)" fg:x="722" fg:w="2"/><text x="58.2420%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="57.9920%" y="469" width="0.1606%" height="15" fill="rgb(205,25,34)" fg:x="722" fg:w="2"/><text x="58.2420%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="57.9920%" y="453" width="0.1606%" height="15" fill="rgb(209,57,11)" fg:x="722" fg:w="2"/><text x="58.2420%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.0723%" y="437" width="0.0803%" height="15" fill="rgb(221,99,2)" fg:x="723" fg:w="1"/><text x="58.3223%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.0723%" y="421" width="0.0803%" height="15" fill="rgb(232,79,22)" fg:x="723" fg:w="1"/><text x="58.3223%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.0723%" y="405" width="0.0803%" height="15" fill="rgb(221,145,32)" fg:x="723" fg:w="1"/><text x="58.3223%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.0723%" y="389" width="0.0803%" height="15" fill="rgb(236,133,36)" fg:x="723" fg:w="1"/><text x="58.3223%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.0723%" y="373" width="0.0803%" height="15" fill="rgb(208,224,44)" fg:x="723" fg:w="1"/><text x="58.3223%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="58.0723%" y="357" width="0.0803%" height="15" fill="rgb(235,143,15)" fg:x="723" fg:w="1"/><text x="58.3223%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="58.0723%" y="341" width="0.0803%" height="15" fill="rgb(249,83,27)" fg:x="723" fg:w="1"/><text x="58.3223%" y="351.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.2329%" y="405" width="0.0803%" height="15" fill="rgb(238,226,19)" fg:x="725" fg:w="1"/><text x="58.4829%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="58.2329%" y="389" width="0.0803%" height="15" fill="rgb(226,206,27)" fg:x="725" fg:w="1"/><text x="58.4829%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="58.2329%" y="453" width="0.1606%" height="15" fill="rgb(251,182,9)" fg:x="725" fg:w="2"/><text x="58.4829%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="58.2329%" y="437" width="0.1606%" height="15" fill="rgb(212,140,41)" fg:x="725" fg:w="2"/><text x="58.4829%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="58.2329%" y="421" width="0.1606%" height="15" fill="rgb(220,106,18)" fg:x="725" fg:w="2"/><text x="58.4829%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.3133%" y="405" width="0.0803%" height="15" fill="rgb(252,46,41)" fg:x="726" fg:w="1"/><text x="58.5633%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.3133%" y="389" width="0.0803%" height="15" fill="rgb(209,222,15)" fg:x="726" fg:w="1"/><text x="58.5633%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.3133%" y="373" width="0.0803%" height="15" fill="rgb(233,83,50)" fg:x="726" fg:w="1"/><text x="58.5633%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.64%)</title><rect x="57.9920%" y="501" width="0.6426%" height="15" fill="rgb(205,212,0)" fg:x="722" fg:w="8"/><text x="58.2420%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="58.1526%" y="485" width="0.4819%" height="15" fill="rgb(235,117,51)" fg:x="724" fg:w="6"/><text x="58.4026%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="58.1526%" y="469" width="0.4819%" height="15" fill="rgb(233,133,48)" fg:x="724" fg:w="6"/><text x="58.4026%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="58.3936%" y="453" width="0.2410%" height="15" fill="rgb(219,3,2)" fg:x="727" fg:w="3"/><text x="58.6436%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="58.3936%" y="437" width="0.2410%" height="15" fill="rgb(225,80,52)" fg:x="727" fg:w="3"/><text x="58.6436%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="58.6345%" y="501" width="0.0803%" height="15" fill="rgb(235,195,42)" fg:x="730" fg:w="1"/><text x="58.8845%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="58.6345%" y="485" width="0.0803%" height="15" fill="rgb(240,207,46)" fg:x="730" fg:w="1"/><text x="58.8845%" y="495.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="58.6345%" y="469" width="0.0803%" height="15" fill="rgb(236,112,50)" fg:x="730" fg:w="1"/><text x="58.8845%" y="479.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="58.6345%" y="453" width="0.0803%" height="15" fill="rgb(249,151,27)" fg:x="730" fg:w="1"/><text x="58.8845%" y="463.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="58.6345%" y="437" width="0.0803%" height="15" fill="rgb(253,223,52)" fg:x="730" fg:w="1"/><text x="58.8845%" y="447.50"></text></g><g><title>plugins_core::tools::occupied_by (10 samples, 0.80%)</title><rect x="57.9920%" y="517" width="0.8032%" height="15" fill="rgb(215,55,33)" fg:x="722" fg:w="10"/><text x="58.2420%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="58.7149%" y="501" width="0.0803%" height="15" fill="rgb(207,24,17)" fg:x="731" fg:w="1"/><text x="58.9649%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="58.7149%" y="485" width="0.0803%" height="15" fill="rgb(218,169,32)" fg:x="731" fg:w="1"/><text x="58.9649%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.7149%" y="469" width="0.0803%" height="15" fill="rgb(209,210,6)" fg:x="731" fg:w="1"/><text x="58.9649%" y="479.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (25 samples, 2.01%)</title><rect x="56.8675%" y="533" width="2.0080%" height="15" fill="rgb(225,208,8)" fg:x="708" fg:w="25"/><text x="57.1175%" y="543.50">p..</text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="58.7952%" y="517" width="0.0803%" height="15" fill="rgb(238,14,32)" fg:x="732" fg:w="1"/><text x="59.0452%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="58.7952%" y="501" width="0.0803%" height="15" fill="rgb(211,137,3)" fg:x="732" fg:w="1"/><text x="59.0452%" y="511.50"></text></g><g><title>engine::session::logs::capture (505 samples, 40.56%)</title><rect x="18.3936%" y="677" width="40.5622%" height="15" fill="rgb(207,171,19)" fg:x="229" fg:w="505"/><text x="18.6436%" y="687.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (502 samples, 40.32%)</title><rect x="18.6345%" y="661" width="40.3213%" height="15" fill="rgb(250,80,8)" fg:x="232" fg:w="502"/><text x="18.8845%" y="671.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (502 samples, 40.32%)</title><rect x="18.6345%" y="645" width="40.3213%" height="15" fill="rgb(209,103,53)" fg:x="232" fg:w="502"/><text x="18.8845%" y="655.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (502 samples, 40.32%)</title><rect x="18.6345%" y="629" width="40.3213%" height="15" fill="rgb(233,198,10)" fg:x="232" fg:w="502"/><text x="18.8845%" y="639.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (502 samples, 40.32%)</title><rect x="18.6345%" y="613" width="40.3213%" height="15" fill="rgb(236,125,25)" fg:x="232" fg:w="502"/><text x="18.8845%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (502 samples, 40.32%)</title><rect x="18.6345%" y="597" width="40.3213%" height="15" fill="rgb(254,182,48)" fg:x="232" fg:w="502"/><text x="18.8845%" y="607.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (492 samples, 39.52%)</title><rect x="19.4378%" y="581" width="39.5181%" height="15" fill="rgb(216,108,44)" fg:x="242" fg:w="492"/><text x="19.6878%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (492 samples, 39.52%)</title><rect x="19.4378%" y="565" width="39.5181%" height="15" fill="rgb(222,72,39)" fg:x="242" fg:w="492"/><text x="19.6878%" y="575.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (28 samples, 2.25%)</title><rect x="56.7068%" y="549" width="2.2490%" height="15" fill="rgb(252,70,39)" fg:x="706" fg:w="28"/><text x="56.9568%" y="559.50">p..</text></g><g><title>plugins_rune::sources::load_sources_from_entity (1 samples, 0.08%)</title><rect x="58.8755%" y="533" width="0.0803%" height="15" fill="rgb(243,99,34)" fg:x="733" fg:w="1"/><text x="59.1255%" y="543.50"></text></g><g><title>plugins_rune::sources::get_script (1 samples, 0.08%)</title><rect x="58.8755%" y="517" width="0.0803%" height="15" fill="rgb(252,109,12)" fg:x="733" fg:w="1"/><text x="59.1255%" y="527.50"></text></g><g><title>engine::session::Session::captured (513 samples, 41.20%)</title><rect x="17.8313%" y="693" width="41.2048%" height="15" fill="rgb(211,186,10)" fg:x="222" fg:w="513"/><text x="18.0813%" y="703.50">engine::session::Session::captured</text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="58.9558%" y="677" width="0.0803%" height="15" fill="rgb(246,90,8)" fg:x="734" fg:w="1"/><text x="59.2058%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.9558%" y="661" width="0.0803%" height="15" fill="rgb(226,91,24)" fg:x="734" fg:w="1"/><text x="59.2058%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.9558%" y="645" width="0.0803%" height="15" fill="rgb(216,28,44)" fg:x="734" fg:w="1"/><text x="59.2058%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.9558%" y="629" width="0.0803%" height="15" fill="rgb(229,36,0)" fg:x="734" fg:w="1"/><text x="59.2058%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.9558%" y="613" width="0.0803%" height="15" fill="rgb(245,97,18)" fg:x="734" fg:w="1"/><text x="59.2058%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.9558%" y="597" width="0.0803%" height="15" fill="rgb(241,97,54)" fg:x="734" fg:w="1"/><text x="59.2058%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="58.9558%" y="581" width="0.0803%" height="15" fill="rgb(234,125,17)" fg:x="734" fg:w="1"/><text x="59.2058%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="58.9558%" y="565" width="0.0803%" height="15" fill="rgb(228,172,39)" fg:x="734" fg:w="1"/><text x="59.2058%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="59.0361%" y="517" width="0.0803%" height="15" fill="rgb(227,169,1)" fg:x="735" fg:w="1"/><text x="59.2861%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="59.0361%" y="581" width="0.1606%" height="15" fill="rgb(206,13,35)" fg:x="735" fg:w="2"/><text x="59.2861%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="59.0361%" y="565" width="0.1606%" height="15" fill="rgb(211,117,30)" fg:x="735" fg:w="2"/><text x="59.2861%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="59.0361%" y="549" width="0.1606%" height="15" fill="rgb(230,198,4)" fg:x="735" fg:w="2"/><text x="59.2861%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="59.0361%" y="533" width="0.1606%" height="15" fill="rgb(213,87,54)" fg:x="735" fg:w="2"/><text x="59.2861%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="59.1165%" y="517" width="0.0803%" height="15" fill="rgb(248,43,22)" fg:x="736" fg:w="1"/><text x="59.3665%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.1165%" y="501" width="0.0803%" height="15" fill="rgb(213,175,48)" fg:x="736" fg:w="1"/><text x="59.3665%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.1165%" y="485" width="0.0803%" height="15" fill="rgb(252,55,9)" fg:x="736" fg:w="1"/><text x="59.3665%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="59.0361%" y="597" width="0.2410%" height="15" fill="rgb(231,72,33)" fg:x="735" fg:w="3"/><text x="59.2861%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;core::iter::adapters::flatten::FlatMap&lt;serde_json::map::Iter,core::option::Option&lt;alloc::vec::Vec&lt;kernel::model::entity_ref::EntityRef&gt;&gt;,kernel::model::entity_ref::find_entity_refs::{{closure}}&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="59.1968%" y="581" width="0.0803%" height="15" fill="rgb(213,2,54)" fg:x="737" fg:w="1"/><text x="59.4468%" y="591.50"></text></g><g><title>engine::session::internal::Added::find_refs (4 samples, 0.32%)</title><rect x="59.0361%" y="677" width="0.3213%" height="15" fill="rgb(208,88,25)" fg:x="735" fg:w="4"/><text x="59.2861%" y="687.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="59.0361%" y="661" width="0.3213%" height="15" fill="rgb(215,117,13)" fg:x="735" fg:w="4"/><text x="59.2861%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="59.0361%" y="645" width="0.3213%" height="15" fill="rgb(243,147,21)" fg:x="735" fg:w="4"/><text x="59.2861%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="59.0361%" y="629" width="0.3213%" height="15" fill="rgb(208,215,36)" fg:x="735" fg:w="4"/><text x="59.2861%" y="639.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="59.0361%" y="613" width="0.3213%" height="15" fill="rgb(238,187,24)" fg:x="735" fg:w="4"/><text x="59.2861%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.2771%" y="597" width="0.0803%" height="15" fill="rgb(214,173,11)" fg:x="738" fg:w="1"/><text x="59.5271%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.2771%" y="581" width="0.0803%" height="15" fill="rgb(222,71,20)" fg:x="738" fg:w="1"/><text x="59.5271%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.2771%" y="565" width="0.0803%" height="15" fill="rgb(242,125,4)" fg:x="738" fg:w="1"/><text x="59.5271%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="59.2771%" y="549" width="0.0803%" height="15" fill="rgb(217,101,52)" fg:x="738" fg:w="1"/><text x="59.5271%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="59.2771%" y="533" width="0.0803%" height="15" fill="rgb(223,2,50)" fg:x="738" fg:w="1"/><text x="59.5271%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.3574%" y="645" width="0.0803%" height="15" fill="rgb(225,197,9)" fg:x="739" fg:w="1"/><text x="59.6074%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.3574%" y="629" width="0.0803%" height="15" fill="rgb(234,76,27)" fg:x="739" fg:w="1"/><text x="59.6074%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.3574%" y="613" width="0.0803%" height="15" fill="rgb(213,161,26)" fg:x="739" fg:w="1"/><text x="59.6074%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.3574%" y="597" width="0.0803%" height="15" fill="rgb(210,228,2)" fg:x="739" fg:w="1"/><text x="59.6074%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.3574%" y="581" width="0.0803%" height="15" fill="rgb(235,4,16)" fg:x="739" fg:w="1"/><text x="59.6074%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.3574%" y="565" width="0.0803%" height="15" fill="rgb(235,83,42)" fg:x="739" fg:w="1"/><text x="59.6074%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.3574%" y="549" width="0.0803%" height="15" fill="rgb(207,116,39)" fg:x="739" fg:w="1"/><text x="59.6074%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.3574%" y="533" width="0.0803%" height="15" fill="rgb(253,206,9)" fg:x="739" fg:w="1"/><text x="59.6074%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="59.3574%" y="517" width="0.0803%" height="15" fill="rgb(234,32,47)" fg:x="739" fg:w="1"/><text x="59.6074%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="59.3574%" y="501" width="0.0803%" height="15" fill="rgb(247,40,39)" fg:x="739" fg:w="1"/><text x="59.6074%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="59.3574%" y="661" width="0.1606%" height="15" fill="rgb(236,199,13)" fg:x="739" fg:w="2"/><text x="59.6074%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.4378%" y="645" width="0.0803%" height="15" fill="rgb(240,127,44)" fg:x="740" fg:w="1"/><text x="59.6878%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.5181%" y="613" width="0.0803%" height="15" fill="rgb(248,220,47)" fg:x="741" fg:w="1"/><text x="59.7681%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.5181%" y="597" width="0.0803%" height="15" fill="rgb(240,78,9)" fg:x="741" fg:w="1"/><text x="59.7681%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.5984%" y="565" width="0.0803%" height="15" fill="rgb(245,119,5)" fg:x="742" fg:w="1"/><text x="59.8484%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.5984%" y="549" width="0.0803%" height="15" fill="rgb(238,175,31)" fg:x="742" fg:w="1"/><text x="59.8484%" y="559.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="59.5984%" y="533" width="0.0803%" height="15" fill="rgb(232,140,42)" fg:x="742" fg:w="1"/><text x="59.8484%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.5984%" y="517" width="0.0803%" height="15" fill="rgb(218,179,7)" fg:x="742" fg:w="1"/><text x="59.8484%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.5984%" y="501" width="0.0803%" height="15" fill="rgb(232,79,27)" fg:x="742" fg:w="1"/><text x="59.8484%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.5984%" y="485" width="0.0803%" height="15" fill="rgb(247,11,19)" fg:x="742" fg:w="1"/><text x="59.8484%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.5984%" y="469" width="0.0803%" height="15" fill="rgb(216,171,54)" fg:x="742" fg:w="1"/><text x="59.8484%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.5984%" y="453" width="0.0803%" height="15" fill="rgb(233,158,36)" fg:x="742" fg:w="1"/><text x="59.8484%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="59.5181%" y="661" width="0.2410%" height="15" fill="rgb(215,48,47)" fg:x="741" fg:w="3"/><text x="59.7681%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="59.5181%" y="645" width="0.2410%" height="15" fill="rgb(230,223,15)" fg:x="741" fg:w="3"/><text x="59.7681%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="59.5181%" y="629" width="0.2410%" height="15" fill="rgb(234,49,19)" fg:x="741" fg:w="3"/><text x="59.7681%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="59.5984%" y="613" width="0.1606%" height="15" fill="rgb(232,89,25)" fg:x="742" fg:w="2"/><text x="59.8484%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.5984%" y="597" width="0.1606%" height="15" fill="rgb(237,206,28)" fg:x="742" fg:w="2"/><text x="59.8484%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="59.5984%" y="581" width="0.1606%" height="15" fill="rgb(249,68,37)" fg:x="742" fg:w="2"/><text x="59.8484%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="59.6787%" y="565" width="0.0803%" height="15" fill="rgb(226,99,43)" fg:x="743" fg:w="1"/><text x="59.9287%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.6787%" y="549" width="0.0803%" height="15" fill="rgb(216,46,28)" fg:x="743" fg:w="1"/><text x="59.9287%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="59.6787%" y="533" width="0.0803%" height="15" fill="rgb(216,33,9)" fg:x="743" fg:w="1"/><text x="59.9287%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="59.6787%" y="517" width="0.0803%" height="15" fill="rgb(216,129,4)" fg:x="743" fg:w="1"/><text x="59.9287%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.6787%" y="501" width="0.0803%" height="15" fill="rgb(216,106,3)" fg:x="743" fg:w="1"/><text x="59.9287%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="59.7590%" y="565" width="0.1606%" height="15" fill="rgb(217,79,45)" fg:x="744" fg:w="2"/><text x="60.0090%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="59.7590%" y="549" width="0.1606%" height="15" fill="rgb(239,98,13)" fg:x="744" fg:w="2"/><text x="60.0090%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="59.7590%" y="533" width="0.1606%" height="15" fill="rgb(221,115,4)" fg:x="744" fg:w="2"/><text x="60.0090%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.8394%" y="517" width="0.0803%" height="15" fill="rgb(215,85,0)" fg:x="745" fg:w="1"/><text x="60.0894%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.96%)</title><rect x="59.0361%" y="693" width="0.9639%" height="15" fill="rgb(230,62,15)" fg:x="735" fg:w="12"/><text x="59.2861%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="59.3574%" y="677" width="0.6426%" height="15" fill="rgb(247,162,2)" fg:x="739" fg:w="8"/><text x="59.6074%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="59.7590%" y="661" width="0.2410%" height="15" fill="rgb(212,112,32)" fg:x="744" fg:w="3"/><text x="60.0090%" y="671.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="59.7590%" y="645" width="0.2410%" height="15" fill="rgb(216,137,9)" fg:x="744" fg:w="3"/><text x="60.0090%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="59.7590%" y="629" width="0.2410%" height="15" fill="rgb(250,149,33)" fg:x="744" fg:w="3"/><text x="60.0090%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="59.7590%" y="613" width="0.2410%" height="15" fill="rgb(246,124,31)" fg:x="744" fg:w="3"/><text x="60.0090%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="59.7590%" y="597" width="0.2410%" height="15" fill="rgb(216,210,22)" fg:x="744" fg:w="3"/><text x="60.0090%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="59.7590%" y="581" width="0.2410%" height="15" fill="rgb(228,128,36)" fg:x="744" fg:w="3"/><text x="60.0090%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.9197%" y="565" width="0.0803%" height="15" fill="rgb(231,41,0)" fg:x="746" fg:w="1"/><text x="60.1697%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.9197%" y="549" width="0.0803%" height="15" fill="rgb(232,61,26)" fg:x="746" fg:w="1"/><text x="60.1697%" y="559.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="59.9197%" y="533" width="0.0803%" height="15" fill="rgb(217,60,9)" fg:x="746" fg:w="1"/><text x="60.1697%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="59.9197%" y="517" width="0.0803%" height="15" fill="rgb(233,41,35)" fg:x="746" fg:w="1"/><text x="60.1697%" y="527.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="60.0000%" y="693" width="0.0803%" height="15" fill="rgb(253,139,43)" fg:x="747" fg:w="1"/><text x="60.2500%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="60.0000%" y="677" width="0.0803%" height="15" fill="rgb(245,100,51)" fg:x="747" fg:w="1"/><text x="60.2500%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.0000%" y="661" width="0.0803%" height="15" fill="rgb(250,208,18)" fg:x="747" fg:w="1"/><text x="60.2500%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.0000%" y="645" width="0.0803%" height="15" fill="rgb(245,33,2)" fg:x="747" fg:w="1"/><text x="60.2500%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="60.0000%" y="629" width="0.0803%" height="15" fill="rgb(244,171,31)" fg:x="747" fg:w="1"/><text x="60.2500%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.0000%" y="613" width="0.0803%" height="15" fill="rgb(229,1,43)" fg:x="747" fg:w="1"/><text x="60.2500%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="60.0803%" y="645" width="0.0803%" height="15" fill="rgb(223,153,28)" fg:x="748" fg:w="1"/><text x="60.3303%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.0803%" y="629" width="0.0803%" height="15" fill="rgb(241,4,46)" fg:x="748" fg:w="1"/><text x="60.3303%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.0803%" y="613" width="0.0803%" height="15" fill="rgb(230,81,11)" fg:x="748" fg:w="1"/><text x="60.3303%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="60.0803%" y="597" width="0.0803%" height="15" fill="rgb(253,204,39)" fg:x="748" fg:w="1"/><text x="60.3303%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.0803%" y="581" width="0.0803%" height="15" fill="rgb(250,96,8)" fg:x="748" fg:w="1"/><text x="60.3303%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.0803%" y="565" width="0.0803%" height="15" fill="rgb(219,89,54)" fg:x="748" fg:w="1"/><text x="60.3303%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.1606%" y="597" width="0.0803%" height="15" fill="rgb(235,136,39)" fg:x="749" fg:w="1"/><text x="60.4106%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.2410%" y="597" width="0.0803%" height="15" fill="rgb(230,155,37)" fg:x="750" fg:w="1"/><text x="60.4910%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.3213%" y="565" width="0.0803%" height="15" fill="rgb(235,199,50)" fg:x="751" fg:w="1"/><text x="60.5713%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="60.3213%" y="549" width="0.0803%" height="15" fill="rgb(227,81,32)" fg:x="751" fg:w="1"/><text x="60.5713%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.4016%" y="549" width="0.0803%" height="15" fill="rgb(225,6,28)" fg:x="752" fg:w="1"/><text x="60.6516%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.4016%" y="533" width="0.0803%" height="15" fill="rgb(207,211,17)" fg:x="752" fg:w="1"/><text x="60.6516%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.4016%" y="517" width="0.0803%" height="15" fill="rgb(228,31,49)" fg:x="752" fg:w="1"/><text x="60.6516%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.4016%" y="501" width="0.0803%" height="15" fill="rgb(230,185,3)" fg:x="752" fg:w="1"/><text x="60.6516%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="60.3213%" y="597" width="0.2410%" height="15" fill="rgb(206,167,15)" fg:x="751" fg:w="3"/><text x="60.5713%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="60.3213%" y="581" width="0.2410%" height="15" fill="rgb(234,2,36)" fg:x="751" fg:w="3"/><text x="60.5713%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.4016%" y="565" width="0.1606%" height="15" fill="rgb(239,160,29)" fg:x="752" fg:w="2"/><text x="60.6516%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.4819%" y="549" width="0.0803%" height="15" fill="rgb(236,117,2)" fg:x="753" fg:w="1"/><text x="60.7319%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.4819%" y="533" width="0.0803%" height="15" fill="rgb(215,117,37)" fg:x="753" fg:w="1"/><text x="60.7319%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.4819%" y="517" width="0.0803%" height="15" fill="rgb(244,48,36)" fg:x="753" fg:w="1"/><text x="60.7319%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="60.1606%" y="645" width="0.4819%" height="15" fill="rgb(223,101,37)" fg:x="749" fg:w="6"/><text x="60.4106%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="60.1606%" y="629" width="0.4819%" height="15" fill="rgb(205,200,1)" fg:x="749" fg:w="6"/><text x="60.4106%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="60.1606%" y="613" width="0.4819%" height="15" fill="rgb(209,193,20)" fg:x="749" fg:w="6"/><text x="60.4106%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.5622%" y="597" width="0.0803%" height="15" fill="rgb(214,63,13)" fg:x="754" fg:w="1"/><text x="60.8122%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.5622%" y="581" width="0.0803%" height="15" fill="rgb(253,113,46)" fg:x="754" fg:w="1"/><text x="60.8122%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.5622%" y="565" width="0.0803%" height="15" fill="rgb(237,103,34)" fg:x="754" fg:w="1"/><text x="60.8122%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.5622%" y="549" width="0.0803%" height="15" fill="rgb(223,38,25)" fg:x="754" fg:w="1"/><text x="60.8122%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.8032%" y="485" width="0.0803%" height="15" fill="rgb(251,32,32)" fg:x="757" fg:w="1"/><text x="61.0532%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.8032%" y="469" width="0.0803%" height="15" fill="rgb(228,65,22)" fg:x="757" fg:w="1"/><text x="61.0532%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="60.8032%" y="453" width="0.0803%" height="15" fill="rgb(205,11,46)" fg:x="757" fg:w="1"/><text x="61.0532%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="60.6426%" y="581" width="0.3213%" height="15" fill="rgb(220,35,2)" fg:x="755" fg:w="4"/><text x="60.8926%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="60.6426%" y="565" width="0.3213%" height="15" fill="rgb(217,151,17)" fg:x="755" fg:w="4"/><text x="60.8926%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="60.6426%" y="549" width="0.3213%" height="15" fill="rgb(243,227,35)" fg:x="755" fg:w="4"/><text x="60.8926%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="60.7229%" y="533" width="0.2410%" height="15" fill="rgb(214,0,34)" fg:x="756" fg:w="3"/><text x="60.9729%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="60.7229%" y="517" width="0.2410%" height="15" fill="rgb(209,42,37)" fg:x="756" fg:w="3"/><text x="60.9729%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="60.7229%" y="501" width="0.2410%" height="15" fill="rgb(251,176,30)" fg:x="756" fg:w="3"/><text x="60.9729%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="60.8835%" y="485" width="0.0803%" height="15" fill="rgb(223,64,40)" fg:x="758" fg:w="1"/><text x="61.1335%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (760 samples, 61.04%)</title><rect x="0.0000%" y="773" width="61.0442%" height="15" fill="rgb(227,180,23)" fg:x="0" fg:w="760"/><text x="0.2500%" y="783.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (760 samples, 61.04%)</title><rect x="0.0000%" y="757" width="61.0442%" height="15" fill="rgb(220,137,31)" fg:x="0" fg:w="760"/><text x="0.2500%" y="767.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (760 samples, 61.04%)</title><rect x="0.0000%" y="741" width="61.0442%" height="15" fill="rgb(245,124,25)" fg:x="0" fg:w="760"/><text x="0.2500%" y="751.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (539 samples, 43.29%)</title><rect x="17.7510%" y="725" width="43.2932%" height="15" fill="rgb(217,157,5)" fg:x="221" fg:w="539"/><text x="18.0010%" y="735.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (539 samples, 43.29%)</title><rect x="17.7510%" y="709" width="43.2932%" height="15" fill="rgb(225,59,2)" fg:x="221" fg:w="539"/><text x="18.0010%" y="719.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (12 samples, 0.96%)</title><rect x="60.0803%" y="693" width="0.9639%" height="15" fill="rgb(220,182,9)" fg:x="748" fg:w="12"/><text x="60.3303%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.96%)</title><rect x="60.0803%" y="677" width="0.9639%" height="15" fill="rgb(249,54,24)" fg:x="748" fg:w="12"/><text x="60.3303%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.96%)</title><rect x="60.0803%" y="661" width="0.9639%" height="15" fill="rgb(216,89,17)" fg:x="748" fg:w="12"/><text x="60.3303%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="60.6426%" y="645" width="0.4016%" height="15" fill="rgb(245,20,45)" fg:x="755" fg:w="5"/><text x="60.8926%" y="655.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="60.6426%" y="629" width="0.4016%" height="15" fill="rgb(230,83,14)" fg:x="755" fg:w="5"/><text x="60.8926%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="60.6426%" y="613" width="0.4016%" height="15" fill="rgb(246,109,11)" fg:x="755" fg:w="5"/><text x="60.8926%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="60.6426%" y="597" width="0.4016%" height="15" fill="rgb(235,85,23)" fg:x="755" fg:w="5"/><text x="60.8926%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.9639%" y="581" width="0.0803%" height="15" fill="rgb(215,101,36)" fg:x="759" fg:w="1"/><text x="61.2139%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.0442%" y="597" width="0.0803%" height="15" fill="rgb(228,140,31)" fg:x="760" fg:w="1"/><text x="61.2942%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.0442%" y="581" width="0.0803%" height="15" fill="rgb(234,162,37)" fg:x="760" fg:w="1"/><text x="61.2942%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="61.0442%" y="645" width="0.2410%" height="15" fill="rgb(221,0,24)" fg:x="760" fg:w="3"/><text x="61.2942%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (3 samples, 0.24%)</title><rect x="61.0442%" y="629" width="0.2410%" height="15" fill="rgb(230,161,41)" fg:x="760" fg:w="3"/><text x="61.2942%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="61.0442%" y="613" width="0.2410%" height="15" fill="rgb(224,46,24)" fg:x="760" fg:w="3"/><text x="61.2942%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="61.1245%" y="597" width="0.1606%" height="15" fill="rgb(205,59,32)" fg:x="761" fg:w="2"/><text x="61.3745%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="61.1245%" y="581" width="0.1606%" height="15" fill="rgb(239,31,20)" fg:x="761" fg:w="2"/><text x="61.3745%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="61.1245%" y="565" width="0.1606%" height="15" fill="rgb(233,149,44)" fg:x="761" fg:w="2"/><text x="61.3745%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="61.0442%" y="725" width="0.3213%" height="15" fill="rgb(243,47,26)" fg:x="760" fg:w="4"/><text x="61.2942%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (4 samples, 0.32%)</title><rect x="61.0442%" y="709" width="0.3213%" height="15" fill="rgb(233,107,5)" fg:x="760" fg:w="4"/><text x="61.2942%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="61.0442%" y="693" width="0.3213%" height="15" fill="rgb(248,140,33)" fg:x="760" fg:w="4"/><text x="61.2942%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="61.0442%" y="677" width="0.3213%" height="15" fill="rgb(228,178,19)" fg:x="760" fg:w="4"/><text x="61.2942%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="61.0442%" y="661" width="0.3213%" height="15" fill="rgb(224,39,49)" fg:x="760" fg:w="4"/><text x="61.2942%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="61.2851%" y="645" width="0.0803%" height="15" fill="rgb(246,56,47)" fg:x="763" fg:w="1"/><text x="61.5351%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.2851%" y="629" width="0.0803%" height="15" fill="rgb(220,73,27)" fg:x="763" fg:w="1"/><text x="61.5351%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.2851%" y="613" width="0.0803%" height="15" fill="rgb(239,112,21)" fg:x="763" fg:w="1"/><text x="61.5351%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.2851%" y="597" width="0.0803%" height="15" fill="rgb(253,14,51)" fg:x="763" fg:w="1"/><text x="61.5351%" y="607.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="61.3655%" y="629" width="0.0803%" height="15" fill="rgb(215,58,12)" fg:x="764" fg:w="1"/><text x="61.6155%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="61.3655%" y="613" width="0.0803%" height="15" fill="rgb(207,181,19)" fg:x="764" fg:w="1"/><text x="61.6155%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="61.3655%" y="597" width="0.0803%" height="15" fill="rgb(211,214,34)" fg:x="764" fg:w="1"/><text x="61.6155%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.3655%" y="581" width="0.0803%" height="15" fill="rgb(243,124,39)" fg:x="764" fg:w="1"/><text x="61.6155%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.3655%" y="565" width="0.0803%" height="15" fill="rgb(248,135,21)" fg:x="764" fg:w="1"/><text x="61.6155%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.3655%" y="549" width="0.0803%" height="15" fill="rgb(245,218,3)" fg:x="764" fg:w="1"/><text x="61.6155%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="61.4458%" y="629" width="0.0803%" height="15" fill="rgb(225,144,22)" fg:x="765" fg:w="1"/><text x="61.6958%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="61.4458%" y="613" width="0.0803%" height="15" fill="rgb(250,90,15)" fg:x="765" fg:w="1"/><text x="61.6958%" y="623.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="61.5261%" y="597" width="0.0803%" height="15" fill="rgb(224,64,29)" fg:x="766" fg:w="1"/><text x="61.7761%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="61.5261%" y="581" width="0.0803%" height="15" fill="rgb(217,50,47)" fg:x="766" fg:w="1"/><text x="61.7761%" y="591.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="61.5261%" y="629" width="0.1606%" height="15" fill="rgb(231,159,47)" fg:x="766" fg:w="2"/><text x="61.7761%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="61.5261%" y="613" width="0.1606%" height="15" fill="rgb(213,89,29)" fg:x="766" fg:w="2"/><text x="61.7761%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="61.6064%" y="597" width="0.0803%" height="15" fill="rgb(243,90,23)" fg:x="767" fg:w="1"/><text x="61.8564%" y="607.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="61.6867%" y="629" width="0.0803%" height="15" fill="rgb(213,21,6)" fg:x="768" fg:w="1"/><text x="61.9367%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="61.6867%" y="613" width="0.0803%" height="15" fill="rgb(237,139,17)" fg:x="768" fg:w="1"/><text x="61.9367%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="61.6867%" y="597" width="0.0803%" height="15" fill="rgb(250,147,17)" fg:x="768" fg:w="1"/><text x="61.9367%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="61.7671%" y="629" width="0.0803%" height="15" fill="rgb(212,208,42)" fg:x="769" fg:w="1"/><text x="62.0171%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="61.7671%" y="613" width="0.0803%" height="15" fill="rgb(215,229,40)" fg:x="769" fg:w="1"/><text x="62.0171%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="61.7671%" y="597" width="0.0803%" height="15" fill="rgb(206,204,1)" fg:x="769" fg:w="1"/><text x="62.0171%" y="607.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="61.8474%" y="629" width="0.1606%" height="15" fill="rgb(230,62,32)" fg:x="770" fg:w="2"/><text x="62.0974%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="61.8474%" y="613" width="0.1606%" height="15" fill="rgb(223,22,42)" fg:x="770" fg:w="2"/><text x="62.0974%" y="623.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="61.9277%" y="597" width="0.0803%" height="15" fill="rgb(244,6,23)" fg:x="771" fg:w="1"/><text x="62.1777%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="61.9277%" y="581" width="0.0803%" height="15" fill="rgb(240,221,42)" fg:x="771" fg:w="1"/><text x="62.1777%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (9 samples, 0.72%)</title><rect x="61.3655%" y="645" width="0.7229%" height="15" fill="rgb(222,74,7)" fg:x="764" fg:w="9"/><text x="61.6155%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.0080%" y="629" width="0.0803%" height="15" fill="rgb(227,191,38)" fg:x="772" fg:w="1"/><text x="62.2580%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="62.0884%" y="645" width="0.3213%" height="15" fill="rgb(227,89,34)" fg:x="773" fg:w="4"/><text x="62.3384%" y="655.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="62.0884%" y="629" width="0.3213%" height="15" fill="rgb(215,153,25)" fg:x="773" fg:w="4"/><text x="62.3384%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="62.0884%" y="613" width="0.3213%" height="15" fill="rgb(215,153,46)" fg:x="773" fg:w="4"/><text x="62.3384%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="62.0884%" y="597" width="0.3213%" height="15" fill="rgb(242,38,52)" fg:x="773" fg:w="4"/><text x="62.3384%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="62.0884%" y="581" width="0.3213%" height="15" fill="rgb(218,112,4)" fg:x="773" fg:w="4"/><text x="62.3384%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="62.0884%" y="565" width="0.3213%" height="15" fill="rgb(231,210,31)" fg:x="773" fg:w="4"/><text x="62.3384%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="62.0884%" y="549" width="0.3213%" height="15" fill="rgb(245,223,36)" fg:x="773" fg:w="4"/><text x="62.3384%" y="559.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="62.0884%" y="533" width="0.3213%" height="15" fill="rgb(246,41,2)" fg:x="773" fg:w="4"/><text x="62.3384%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.4096%" y="581" width="0.0803%" height="15" fill="rgb(227,51,31)" fg:x="777" fg:w="1"/><text x="62.6596%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.4096%" y="565" width="0.0803%" height="15" fill="rgb(222,95,26)" fg:x="777" fg:w="1"/><text x="62.6596%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.4096%" y="549" width="0.0803%" height="15" fill="rgb(224,190,1)" fg:x="777" fg:w="1"/><text x="62.6596%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.4096%" y="533" width="0.0803%" height="15" fill="rgb(209,90,42)" fg:x="777" fg:w="1"/><text x="62.6596%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.4096%" y="517" width="0.0803%" height="15" fill="rgb(232,225,50)" fg:x="777" fg:w="1"/><text x="62.6596%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.4096%" y="501" width="0.0803%" height="15" fill="rgb(239,89,47)" fg:x="777" fg:w="1"/><text x="62.6596%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.4096%" y="485" width="0.0803%" height="15" fill="rgb(230,212,50)" fg:x="777" fg:w="1"/><text x="62.6596%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.4096%" y="469" width="0.0803%" height="15" fill="rgb(252,1,27)" fg:x="777" fg:w="1"/><text x="62.6596%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.4096%" y="453" width="0.0803%" height="15" fill="rgb(237,179,41)" fg:x="777" fg:w="1"/><text x="62.6596%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.4096%" y="437" width="0.0803%" height="15" fill="rgb(214,151,37)" fg:x="777" fg:w="1"/><text x="62.6596%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.4096%" y="421" width="0.0803%" height="15" fill="rgb(211,74,11)" fg:x="777" fg:w="1"/><text x="62.6596%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.4096%" y="405" width="0.0803%" height="15" fill="rgb(242,21,21)" fg:x="777" fg:w="1"/><text x="62.6596%" y="415.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="62.4096%" y="629" width="0.1606%" height="15" fill="rgb(226,106,43)" fg:x="777" fg:w="2"/><text x="62.6596%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="62.4096%" y="613" width="0.1606%" height="15" fill="rgb(229,162,39)" fg:x="777" fg:w="2"/><text x="62.6596%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="62.4096%" y="597" width="0.1606%" height="15" fill="rgb(228,159,25)" fg:x="777" fg:w="2"/><text x="62.6596%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.4900%" y="581" width="0.0803%" height="15" fill="rgb(237,32,23)" fg:x="778" fg:w="1"/><text x="62.7400%" y="591.50"></text></g><g><title>&lt;std::sys::unix::os_str::Slice as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="62.5703%" y="581" width="0.0803%" height="15" fill="rgb(212,35,32)" fg:x="779" fg:w="1"/><text x="62.8203%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="62.6506%" y="517" width="0.0803%" height="15" fill="rgb(215,199,1)" fg:x="780" fg:w="1"/><text x="62.9006%" y="527.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.56%)</title><rect x="62.4096%" y="645" width="0.5622%" height="15" fill="rgb(215,67,13)" fg:x="777" fg:w="7"/><text x="62.6596%" y="655.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (5 samples, 0.40%)</title><rect x="62.5703%" y="629" width="0.4016%" height="15" fill="rgb(216,20,47)" fg:x="779" fg:w="5"/><text x="62.8203%" y="639.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="62.5703%" y="613" width="0.4016%" height="15" fill="rgb(249,183,48)" fg:x="779" fg:w="5"/><text x="62.8203%" y="623.50"></text></g><g><title>glob::fill_todo (5 samples, 0.40%)</title><rect x="62.5703%" y="597" width="0.4016%" height="15" fill="rgb(208,86,37)" fg:x="779" fg:w="5"/><text x="62.8203%" y="607.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="62.6506%" y="581" width="0.3213%" height="15" fill="rgb(251,192,7)" fg:x="780" fg:w="4"/><text x="62.9006%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="62.6506%" y="565" width="0.3213%" height="15" fill="rgb(234,196,3)" fg:x="780" fg:w="4"/><text x="62.9006%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="62.6506%" y="549" width="0.3213%" height="15" fill="rgb(229,150,39)" fg:x="780" fg:w="4"/><text x="62.9006%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="62.6506%" y="533" width="0.3213%" height="15" fill="rgb(226,19,29)" fg:x="780" fg:w="4"/><text x="62.9006%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="62.7309%" y="517" width="0.2410%" height="15" fill="rgb(226,222,2)" fg:x="781" fg:w="3"/><text x="62.9809%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="62.7309%" y="501" width="0.2410%" height="15" fill="rgb(235,85,29)" fg:x="781" fg:w="3"/><text x="62.9809%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="62.7309%" y="485" width="0.2410%" height="15" fill="rgb(237,194,43)" fg:x="781" fg:w="3"/><text x="62.9809%" y="495.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="62.7309%" y="469" width="0.2410%" height="15" fill="rgb(211,4,42)" fg:x="781" fg:w="3"/><text x="62.9809%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.9719%" y="629" width="0.0803%" height="15" fill="rgb(221,80,37)" fg:x="784" fg:w="1"/><text x="63.2219%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (22 samples, 1.77%)</title><rect x="61.3655%" y="661" width="1.7671%" height="15" fill="rgb(222,47,31)" fg:x="764" fg:w="22"/><text x="61.6155%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (2 samples, 0.16%)</title><rect x="62.9719%" y="645" width="0.1606%" height="15" fill="rgb(249,82,52)" fg:x="784" fg:w="2"/><text x="63.2219%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="63.0522%" y="629" width="0.0803%" height="15" fill="rgb(218,203,2)" fg:x="785" fg:w="1"/><text x="63.3022%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (24 samples, 1.93%)</title><rect x="61.3655%" y="725" width="1.9277%" height="15" fill="rgb(210,175,14)" fg:x="764" fg:w="24"/><text x="61.6155%" y="735.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (24 samples, 1.93%)</title><rect x="61.3655%" y="709" width="1.9277%" height="15" fill="rgb(216,210,12)" fg:x="764" fg:w="24"/><text x="61.6155%" y="719.50">e..</text></g><g><title>engine::session::Session::new (24 samples, 1.93%)</title><rect x="61.3655%" y="693" width="1.9277%" height="15" fill="rgb(229,120,18)" fg:x="764" fg:w="24"/><text x="61.6155%" y="703.50">e..</text></g><g><title>engine::session::Session::initialize (24 samples, 1.93%)</title><rect x="61.3655%" y="677" width="1.9277%" height="15" fill="rgb(231,174,12)" fg:x="764" fg:w="24"/><text x="61.6155%" y="687.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="63.1325%" y="661" width="0.1606%" height="15" fill="rgb(214,101,53)" fg:x="786" fg:w="2"/><text x="63.3825%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="63.1325%" y="645" width="0.1606%" height="15" fill="rgb(246,89,43)" fg:x="786" fg:w="2"/><text x="63.3825%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="63.1325%" y="629" width="0.1606%" height="15" fill="rgb(222,9,51)" fg:x="786" fg:w="2"/><text x="63.3825%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.1325%" y="613" width="0.1606%" height="15" fill="rgb(252,221,9)" fg:x="786" fg:w="2"/><text x="63.3825%" y="623.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="63.1325%" y="597" width="0.1606%" height="15" fill="rgb(248,28,15)" fg:x="786" fg:w="2"/><text x="63.3825%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::surround::Surroundings&gt; (1 samples, 0.08%)</title><rect x="63.2932%" y="709" width="0.0803%" height="15" fill="rgb(213,54,52)" fg:x="788" fg:w="1"/><text x="63.5432%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="63.5341%" y="565" width="0.0803%" height="15" fill="rgb(240,3,45)" fg:x="791" fg:w="1"/><text x="63.7841%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="63.5341%" y="549" width="0.0803%" height="15" fill="rgb(239,138,24)" fg:x="791" fg:w="1"/><text x="63.7841%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="63.5341%" y="533" width="0.0803%" height="15" fill="rgb(233,45,54)" fg:x="791" fg:w="1"/><text x="63.7841%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="63.5341%" y="517" width="0.0803%" height="15" fill="rgb(220,131,2)" fg:x="791" fg:w="1"/><text x="63.7841%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="63.5341%" y="501" width="0.0803%" height="15" fill="rgb(240,154,36)" fg:x="791" fg:w="1"/><text x="63.7841%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="63.5341%" y="485" width="0.0803%" height="15" fill="rgb(251,221,1)" fg:x="791" fg:w="1"/><text x="63.7841%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="63.5341%" y="469" width="0.0803%" height="15" fill="rgb(225,217,1)" fg:x="791" fg:w="1"/><text x="63.7841%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="63.3735%" y="613" width="0.3213%" height="15" fill="rgb(241,105,49)" fg:x="789" fg:w="4"/><text x="63.6235%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="63.3735%" y="597" width="0.3213%" height="15" fill="rgb(215,44,32)" fg:x="789" fg:w="4"/><text x="63.6235%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="63.5341%" y="581" width="0.1606%" height="15" fill="rgb(213,222,14)" fg:x="791" fg:w="2"/><text x="63.7841%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="63.6145%" y="565" width="0.0803%" height="15" fill="rgb(207,99,52)" fg:x="792" fg:w="1"/><text x="63.8645%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="63.6145%" y="549" width="0.0803%" height="15" fill="rgb(214,208,52)" fg:x="792" fg:w="1"/><text x="63.8645%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="63.6948%" y="565" width="0.1606%" height="15" fill="rgb(244,169,0)" fg:x="793" fg:w="2"/><text x="63.9448%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="63.6948%" y="549" width="0.1606%" height="15" fill="rgb(216,193,37)" fg:x="793" fg:w="2"/><text x="63.9448%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="63.6948%" y="613" width="0.2410%" height="15" fill="rgb(212,158,10)" fg:x="793" fg:w="3"/><text x="63.9448%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="63.6948%" y="597" width="0.2410%" height="15" fill="rgb(213,110,20)" fg:x="793" fg:w="3"/><text x="63.9448%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="63.6948%" y="581" width="0.2410%" height="15" fill="rgb(226,5,42)" fg:x="793" fg:w="3"/><text x="63.9448%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.8554%" y="565" width="0.0803%" height="15" fill="rgb(211,93,8)" fg:x="795" fg:w="1"/><text x="64.1054%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.8554%" y="549" width="0.0803%" height="15" fill="rgb(240,208,12)" fg:x="795" fg:w="1"/><text x="64.1054%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.9357%" y="581" width="0.0803%" height="15" fill="rgb(233,127,50)" fg:x="796" fg:w="1"/><text x="64.1857%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="63.9357%" y="597" width="0.1606%" height="15" fill="rgb(227,199,53)" fg:x="796" fg:w="2"/><text x="64.1857%" y="607.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="64.0161%" y="581" width="0.0803%" height="15" fill="rgb(235,199,10)" fg:x="797" fg:w="1"/><text x="64.2661%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="64.0161%" y="565" width="0.0803%" height="15" fill="rgb(228,148,35)" fg:x="797" fg:w="1"/><text x="64.2661%" y="575.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="64.0161%" y="549" width="0.0803%" height="15" fill="rgb(217,87,19)" fg:x="797" fg:w="1"/><text x="64.2661%" y="559.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="64.0161%" y="533" width="0.0803%" height="15" fill="rgb(239,9,32)" fg:x="797" fg:w="1"/><text x="64.2661%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.0161%" y="517" width="0.0803%" height="15" fill="rgb(229,101,29)" fg:x="797" fg:w="1"/><text x="64.2661%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="64.1767%" y="517" width="0.0803%" height="15" fill="rgb(208,143,26)" fg:x="799" fg:w="1"/><text x="64.4267%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="64.1767%" y="501" width="0.0803%" height="15" fill="rgb(214,10,2)" fg:x="799" fg:w="1"/><text x="64.4267%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.2570%" y="485" width="0.0803%" height="15" fill="rgb(254,203,30)" fg:x="800" fg:w="1"/><text x="64.5070%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="64.2570%" y="469" width="0.0803%" height="15" fill="rgb(242,45,3)" fg:x="800" fg:w="1"/><text x="64.5070%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="64.2570%" y="501" width="0.1606%" height="15" fill="rgb(209,146,51)" fg:x="800" fg:w="2"/><text x="64.5070%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="64.3373%" y="485" width="0.0803%" height="15" fill="rgb(222,80,5)" fg:x="801" fg:w="1"/><text x="64.5873%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="64.3373%" y="469" width="0.0803%" height="15" fill="rgb(252,80,35)" fg:x="801" fg:w="1"/><text x="64.5873%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="64.0964%" y="549" width="0.4016%" height="15" fill="rgb(246,125,28)" fg:x="798" fg:w="5"/><text x="64.3464%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="64.0964%" y="533" width="0.4016%" height="15" fill="rgb(224,143,51)" fg:x="798" fg:w="5"/><text x="64.3464%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="64.2570%" y="517" width="0.2410%" height="15" fill="rgb(205,24,17)" fg:x="800" fg:w="3"/><text x="64.5070%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.4177%" y="501" width="0.0803%" height="15" fill="rgb(253,128,30)" fg:x="802" fg:w="1"/><text x="64.6677%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.4980%" y="549" width="0.0803%" height="15" fill="rgb(214,153,25)" fg:x="803" fg:w="1"/><text x="64.7480%" y="559.50"></text></g><g><title>engine::session::Session::flush (16 samples, 1.29%)</title><rect x="63.3735%" y="709" width="1.2851%" height="15" fill="rgb(214,4,28)" fg:x="789" fg:w="16"/><text x="63.6235%" y="719.50"></text></g><g><title>engine::session::state::State::close (16 samples, 1.29%)</title><rect x="63.3735%" y="693" width="1.2851%" height="15" fill="rgb(235,179,52)" fg:x="789" fg:w="16"/><text x="63.6235%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (16 samples, 1.29%)</title><rect x="63.3735%" y="677" width="1.2851%" height="15" fill="rgb(233,27,42)" fg:x="789" fg:w="16"/><text x="63.6235%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.29%)</title><rect x="63.3735%" y="661" width="1.2851%" height="15" fill="rgb(238,35,25)" fg:x="789" fg:w="16"/><text x="63.6235%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.29%)</title><rect x="63.3735%" y="645" width="1.2851%" height="15" fill="rgb(227,44,31)" fg:x="789" fg:w="16"/><text x="63.6235%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (16 samples, 1.29%)</title><rect x="63.3735%" y="629" width="1.2851%" height="15" fill="rgb(232,201,13)" fg:x="789" fg:w="16"/><text x="63.6235%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="63.9357%" y="613" width="0.7229%" height="15" fill="rgb(224,172,52)" fg:x="796" fg:w="9"/><text x="64.1857%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="64.0964%" y="597" width="0.5622%" height="15" fill="rgb(214,27,26)" fg:x="798" fg:w="7"/><text x="64.3464%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="64.0964%" y="581" width="0.5622%" height="15" fill="rgb(210,185,52)" fg:x="798" fg:w="7"/><text x="64.3464%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="64.0964%" y="565" width="0.5622%" height="15" fill="rgb(249,59,32)" fg:x="798" fg:w="7"/><text x="64.3464%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.5783%" y="549" width="0.0803%" height="15" fill="rgb(242,209,18)" fg:x="804" fg:w="1"/><text x="64.8283%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="64.5783%" y="533" width="0.0803%" height="15" fill="rgb(229,0,18)" fg:x="804" fg:w="1"/><text x="64.8283%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="64.6586%" y="677" width="0.0803%" height="15" fill="rgb(217,138,29)" fg:x="805" fg:w="1"/><text x="64.9086%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="64.6586%" y="661" width="0.0803%" height="15" fill="rgb(215,72,42)" fg:x="805" fg:w="1"/><text x="64.9086%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6586%" y="645" width="0.0803%" height="15" fill="rgb(254,115,11)" fg:x="805" fg:w="1"/><text x="64.9086%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6586%" y="629" width="0.0803%" height="15" fill="rgb(205,133,39)" fg:x="805" fg:w="1"/><text x="64.9086%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.6586%" y="613" width="0.0803%" height="15" fill="rgb(211,36,27)" fg:x="805" fg:w="1"/><text x="64.9086%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="64.6586%" y="709" width="0.1606%" height="15" fill="rgb(221,48,10)" fg:x="805" fg:w="2"/><text x="64.9086%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="64.6586%" y="693" width="0.1606%" height="15" fill="rgb(230,172,50)" fg:x="805" fg:w="2"/><text x="64.9086%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="64.7390%" y="677" width="0.0803%" height="15" fill="rgb(249,72,18)" fg:x="806" fg:w="1"/><text x="64.9890%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="64.7390%" y="661" width="0.0803%" height="15" fill="rgb(237,58,48)" fg:x="806" fg:w="1"/><text x="64.9890%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.7390%" y="645" width="0.0803%" height="15" fill="rgb(242,123,3)" fg:x="806" fg:w="1"/><text x="64.9890%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="64.7390%" y="629" width="0.0803%" height="15" fill="rgb(232,111,32)" fg:x="806" fg:w="1"/><text x="64.9890%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="64.7390%" y="613" width="0.0803%" height="15" fill="rgb(229,108,3)" fg:x="806" fg:w="1"/><text x="64.9890%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="64.8193%" y="677" width="0.0803%" height="15" fill="rgb(222,158,10)" fg:x="807" fg:w="1"/><text x="65.0693%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="64.8193%" y="661" width="0.0803%" height="15" fill="rgb(205,34,49)" fg:x="807" fg:w="1"/><text x="65.0693%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="64.8193%" y="645" width="0.0803%" height="15" fill="rgb(232,21,14)" fg:x="807" fg:w="1"/><text x="65.0693%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="64.8193%" y="629" width="0.0803%" height="15" fill="rgb(229,127,44)" fg:x="807" fg:w="1"/><text x="65.0693%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.8193%" y="613" width="0.0803%" height="15" fill="rgb(232,171,4)" fg:x="807" fg:w="1"/><text x="65.0693%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.8193%" y="597" width="0.0803%" height="15" fill="rgb(250,92,16)" fg:x="807" fg:w="1"/><text x="65.0693%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.8996%" y="629" width="0.0803%" height="15" fill="rgb(230,103,38)" fg:x="808" fg:w="1"/><text x="65.1496%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="64.8996%" y="661" width="0.1606%" height="15" fill="rgb(253,167,9)" fg:x="808" fg:w="2"/><text x="65.1496%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="64.8996%" y="645" width="0.1606%" height="15" fill="rgb(222,118,11)" fg:x="808" fg:w="2"/><text x="65.1496%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.9799%" y="629" width="0.0803%" height="15" fill="rgb(240,202,0)" fg:x="809" fg:w="1"/><text x="65.2299%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.9799%" y="613" width="0.0803%" height="15" fill="rgb(236,124,4)" fg:x="809" fg:w="1"/><text x="65.2299%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.9799%" y="597" width="0.0803%" height="15" fill="rgb(244,128,18)" fg:x="809" fg:w="1"/><text x="65.2299%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.9799%" y="581" width="0.0803%" height="15" fill="rgb(231,206,5)" fg:x="809" fg:w="1"/><text x="65.2299%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.9799%" y="565" width="0.0803%" height="15" fill="rgb(237,111,8)" fg:x="809" fg:w="1"/><text x="65.2299%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.9799%" y="549" width="0.0803%" height="15" fill="rgb(225,127,3)" fg:x="809" fg:w="1"/><text x="65.2299%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.9799%" y="533" width="0.0803%" height="15" fill="rgb(222,85,48)" fg:x="809" fg:w="1"/><text x="65.2299%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.9799%" y="517" width="0.0803%" height="15" fill="rgb(221,108,37)" fg:x="809" fg:w="1"/><text x="65.2299%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="64.9799%" y="501" width="0.0803%" height="15" fill="rgb(226,169,36)" fg:x="809" fg:w="1"/><text x="65.2299%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="64.9799%" y="485" width="0.0803%" height="15" fill="rgb(237,76,12)" fg:x="809" fg:w="1"/><text x="65.2299%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="64.9799%" y="469" width="0.0803%" height="15" fill="rgb(210,227,32)" fg:x="809" fg:w="1"/><text x="65.2299%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.9799%" y="453" width="0.0803%" height="15" fill="rgb(214,117,20)" fg:x="809" fg:w="1"/><text x="65.2299%" y="463.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="65.0602%" y="629" width="0.0803%" height="15" fill="rgb(234,119,41)" fg:x="810" fg:w="1"/><text x="65.3102%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="65.0602%" y="613" width="0.0803%" height="15" fill="rgb(230,130,47)" fg:x="810" fg:w="1"/><text x="65.3102%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.0602%" y="597" width="0.0803%" height="15" fill="rgb(215,21,41)" fg:x="810" fg:w="1"/><text x="65.3102%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.0602%" y="581" width="0.0803%" height="15" fill="rgb(226,26,53)" fg:x="810" fg:w="1"/><text x="65.3102%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="65.0602%" y="565" width="0.0803%" height="15" fill="rgb(221,92,23)" fg:x="810" fg:w="1"/><text x="65.3102%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.0602%" y="549" width="0.0803%" height="15" fill="rgb(213,156,21)" fg:x="810" fg:w="1"/><text x="65.3102%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.0602%" y="533" width="0.0803%" height="15" fill="rgb(254,166,29)" fg:x="810" fg:w="1"/><text x="65.3102%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="65.1406%" y="613" width="0.0803%" height="15" fill="rgb(213,71,1)" fg:x="811" fg:w="1"/><text x="65.3906%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.1406%" y="597" width="0.0803%" height="15" fill="rgb(245,8,13)" fg:x="811" fg:w="1"/><text x="65.3906%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.1406%" y="581" width="0.0803%" height="15" fill="rgb(213,32,32)" fg:x="811" fg:w="1"/><text x="65.3906%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (6 samples, 0.48%)</title><rect x="64.8193%" y="709" width="0.4819%" height="15" fill="rgb(251,86,50)" fg:x="807" fg:w="6"/><text x="65.0693%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="64.8193%" y="693" width="0.4819%" height="15" fill="rgb(252,92,41)" fg:x="807" fg:w="6"/><text x="65.0693%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="64.8996%" y="677" width="0.4016%" height="15" fill="rgb(234,70,35)" fg:x="808" fg:w="5"/><text x="65.1496%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="65.0602%" y="661" width="0.2410%" height="15" fill="rgb(210,157,19)" fg:x="810" fg:w="3"/><text x="65.3102%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="65.0602%" y="645" width="0.2410%" height="15" fill="rgb(206,20,45)" fg:x="810" fg:w="3"/><text x="65.3102%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="65.1406%" y="629" width="0.1606%" height="15" fill="rgb(207,34,7)" fg:x="811" fg:w="2"/><text x="65.3906%" y="639.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="65.2209%" y="613" width="0.0803%" height="15" fill="rgb(253,151,14)" fg:x="812" fg:w="1"/><text x="65.4709%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.3012%" y="693" width="0.0803%" height="15" fill="rgb(252,1,18)" fg:x="813" fg:w="1"/><text x="65.5512%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="65.3012%" y="677" width="0.0803%" height="15" fill="rgb(214,77,52)" fg:x="813" fg:w="1"/><text x="65.5512%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="65.3815%" y="693" width="0.0803%" height="15" fill="rgb(254,106,35)" fg:x="814" fg:w="1"/><text x="65.6315%" y="703.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="65.3815%" y="677" width="0.0803%" height="15" fill="rgb(212,67,40)" fg:x="814" fg:w="1"/><text x="65.6315%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="65.3815%" y="661" width="0.0803%" height="15" fill="rgb(228,76,23)" fg:x="814" fg:w="1"/><text x="65.6315%" y="671.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="65.3815%" y="645" width="0.0803%" height="15" fill="rgb(250,198,5)" fg:x="814" fg:w="1"/><text x="65.6315%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="65.3815%" y="629" width="0.0803%" height="15" fill="rgb(209,20,25)" fg:x="814" fg:w="1"/><text x="65.6315%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.3815%" y="613" width="0.0803%" height="15" fill="rgb(236,32,4)" fg:x="814" fg:w="1"/><text x="65.6315%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.3815%" y="597" width="0.0803%" height="15" fill="rgb(215,31,6)" fg:x="814" fg:w="1"/><text x="65.6315%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.3815%" y="581" width="0.0803%" height="15" fill="rgb(207,186,49)" fg:x="814" fg:w="1"/><text x="65.6315%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="65.4618%" y="693" width="0.0803%" height="15" fill="rgb(211,212,49)" fg:x="815" fg:w="1"/><text x="65.7118%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.4618%" y="677" width="0.0803%" height="15" fill="rgb(229,51,41)" fg:x="815" fg:w="1"/><text x="65.7118%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="65.4618%" y="661" width="0.0803%" height="15" fill="rgb(205,225,36)" fg:x="815" fg:w="1"/><text x="65.7118%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="65.4618%" y="645" width="0.0803%" height="15" fill="rgb(209,213,45)" fg:x="815" fg:w="1"/><text x="65.7118%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="65.4618%" y="629" width="0.0803%" height="15" fill="rgb(219,35,49)" fg:x="815" fg:w="1"/><text x="65.7118%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="65.4618%" y="613" width="0.0803%" height="15" fill="rgb(215,205,22)" fg:x="815" fg:w="1"/><text x="65.7118%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="65.4618%" y="597" width="0.0803%" height="15" fill="rgb(248,204,34)" fg:x="815" fg:w="1"/><text x="65.7118%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.4618%" y="581" width="0.0803%" height="15" fill="rgb(219,223,31)" fg:x="815" fg:w="1"/><text x="65.7118%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.4618%" y="565" width="0.0803%" height="15" fill="rgb(236,14,8)" fg:x="815" fg:w="1"/><text x="65.7118%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="65.4618%" y="549" width="0.0803%" height="15" fill="rgb(243,129,23)" fg:x="815" fg:w="1"/><text x="65.7118%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.4618%" y="533" width="0.0803%" height="15" fill="rgb(205,204,5)" fg:x="815" fg:w="1"/><text x="65.7118%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.4618%" y="517" width="0.0803%" height="15" fill="rgb(244,115,32)" fg:x="815" fg:w="1"/><text x="65.7118%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.4618%" y="501" width="0.0803%" height="15" fill="rgb(229,123,14)" fg:x="815" fg:w="1"/><text x="65.7118%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.5422%" y="629" width="0.0803%" height="15" fill="rgb(250,85,1)" fg:x="816" fg:w="1"/><text x="65.7922%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.5422%" y="613" width="0.0803%" height="15" fill="rgb(209,141,54)" fg:x="816" fg:w="1"/><text x="65.7922%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.5422%" y="597" width="0.0803%" height="15" fill="rgb(244,107,39)" fg:x="816" fg:w="1"/><text x="65.7922%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.5422%" y="581" width="0.0803%" height="15" fill="rgb(230,68,26)" fg:x="816" fg:w="1"/><text x="65.7922%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="65.6225%" y="565" width="0.0803%" height="15" fill="rgb(220,178,33)" fg:x="817" fg:w="1"/><text x="65.8725%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.6225%" y="549" width="0.0803%" height="15" fill="rgb(220,77,53)" fg:x="817" fg:w="1"/><text x="65.8725%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.6225%" y="533" width="0.0803%" height="15" fill="rgb(224,108,19)" fg:x="817" fg:w="1"/><text x="65.8725%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.7028%" y="549" width="0.0803%" height="15" fill="rgb(223,203,27)" fg:x="818" fg:w="1"/><text x="65.9528%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.7028%" y="533" width="0.0803%" height="15" fill="rgb(211,32,46)" fg:x="818" fg:w="1"/><text x="65.9528%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.7028%" y="517" width="0.0803%" height="15" fill="rgb(240,101,27)" fg:x="818" fg:w="1"/><text x="65.9528%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="65.7831%" y="533" width="0.0803%" height="15" fill="rgb(217,210,11)" fg:x="819" fg:w="1"/><text x="66.0331%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="65.7831%" y="517" width="0.0803%" height="15" fill="rgb(236,130,21)" fg:x="819" fg:w="1"/><text x="66.0331%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.7831%" y="501" width="0.0803%" height="15" fill="rgb(250,136,8)" fg:x="819" fg:w="1"/><text x="66.0331%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="65.8635%" y="517" width="0.0803%" height="15" fill="rgb(243,223,36)" fg:x="820" fg:w="1"/><text x="66.1135%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.8635%" y="501" width="0.0803%" height="15" fill="rgb(246,184,8)" fg:x="820" fg:w="1"/><text x="66.1135%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.8635%" y="485" width="0.0803%" height="15" fill="rgb(222,158,36)" fg:x="820" fg:w="1"/><text x="66.1135%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.8635%" y="469" width="0.0803%" height="15" fill="rgb(210,220,19)" fg:x="820" fg:w="1"/><text x="66.1135%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="65.8635%" y="453" width="0.0803%" height="15" fill="rgb(246,44,38)" fg:x="820" fg:w="1"/><text x="66.1135%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.8635%" y="437" width="0.0803%" height="15" fill="rgb(246,186,14)" fg:x="820" fg:w="1"/><text x="66.1135%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.8635%" y="421" width="0.0803%" height="15" fill="rgb(233,193,20)" fg:x="820" fg:w="1"/><text x="66.1135%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.8635%" y="405" width="0.0803%" height="15" fill="rgb(215,60,5)" fg:x="820" fg:w="1"/><text x="66.1135%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="65.7831%" y="549" width="0.2410%" height="15" fill="rgb(207,128,10)" fg:x="819" fg:w="3"/><text x="66.0331%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="65.8635%" y="533" width="0.1606%" height="15" fill="rgb(238,84,54)" fg:x="820" fg:w="2"/><text x="66.1135%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.9438%" y="517" width="0.0803%" height="15" fill="rgb(213,130,11)" fg:x="821" fg:w="1"/><text x="66.1938%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="65.6225%" y="581" width="0.5622%" height="15" fill="rgb(235,62,9)" fg:x="817" fg:w="7"/><text x="65.8725%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="65.7028%" y="565" width="0.4819%" height="15" fill="rgb(222,64,24)" fg:x="818" fg:w="6"/><text x="65.9528%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="66.0241%" y="549" width="0.1606%" height="15" fill="rgb(238,193,42)" fg:x="822" fg:w="2"/><text x="66.2741%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="66.0241%" y="533" width="0.1606%" height="15" fill="rgb(243,204,46)" fg:x="822" fg:w="2"/><text x="66.2741%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="66.0241%" y="517" width="0.1606%" height="15" fill="rgb(243,196,11)" fg:x="822" fg:w="2"/><text x="66.2741%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.1044%" y="501" width="0.0803%" height="15" fill="rgb(232,77,22)" fg:x="823" fg:w="1"/><text x="66.3544%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.1044%" y="485" width="0.0803%" height="15" fill="rgb(215,80,25)" fg:x="823" fg:w="1"/><text x="66.3544%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.1044%" y="469" width="0.0803%" height="15" fill="rgb(210,173,7)" fg:x="823" fg:w="1"/><text x="66.3544%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.1847%" y="581" width="0.1606%" height="15" fill="rgb(207,101,10)" fg:x="824" fg:w="2"/><text x="66.4347%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="66.1847%" y="565" width="0.1606%" height="15" fill="rgb(246,57,48)" fg:x="824" fg:w="2"/><text x="66.4347%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.1847%" y="549" width="0.1606%" height="15" fill="rgb(236,184,40)" fg:x="824" fg:w="2"/><text x="66.4347%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.1847%" y="533" width="0.1606%" height="15" fill="rgb(210,205,13)" fg:x="824" fg:w="2"/><text x="66.4347%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.1847%" y="517" width="0.1606%" height="15" fill="rgb(231,129,42)" fg:x="824" fg:w="2"/><text x="66.4347%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="66.1847%" y="501" width="0.1606%" height="15" fill="rgb(220,229,54)" fg:x="824" fg:w="2"/><text x="66.4347%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="66.1847%" y="485" width="0.1606%" height="15" fill="rgb(230,192,26)" fg:x="824" fg:w="2"/><text x="66.4347%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="66.3454%" y="565" width="0.1606%" height="15" fill="rgb(253,18,30)" fg:x="826" fg:w="2"/><text x="66.5954%" y="575.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="66.4257%" y="549" width="0.0803%" height="15" fill="rgb(216,62,53)" fg:x="827" fg:w="1"/><text x="66.6757%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.4257%" y="533" width="0.0803%" height="15" fill="rgb(230,79,29)" fg:x="827" fg:w="1"/><text x="66.6757%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.5863%" y="485" width="0.0803%" height="15" fill="rgb(242,26,26)" fg:x="829" fg:w="1"/><text x="66.8363%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="66.5863%" y="501" width="0.1606%" height="15" fill="rgb(227,125,21)" fg:x="829" fg:w="2"/><text x="66.8363%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="66.6667%" y="485" width="0.0803%" height="15" fill="rgb(229,93,26)" fg:x="830" fg:w="1"/><text x="66.9167%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="66.6667%" y="469" width="0.0803%" height="15" fill="rgb(227,228,8)" fg:x="830" fg:w="1"/><text x="66.9167%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.6667%" y="453" width="0.0803%" height="15" fill="rgb(233,56,0)" fg:x="830" fg:w="1"/><text x="66.9167%" y="463.50"></text></g><g><title>engine::session::Session::flush (16 samples, 1.29%)</title><rect x="65.5422%" y="693" width="1.2851%" height="15" fill="rgb(225,185,17)" fg:x="816" fg:w="16"/><text x="65.7922%" y="703.50"></text></g><g><title>engine::session::Session::save_changes (16 samples, 1.29%)</title><rect x="65.5422%" y="677" width="1.2851%" height="15" fill="rgb(238,202,30)" fg:x="816" fg:w="16"/><text x="65.7922%" y="687.50"></text></g><g><title>engine::session::state::State::close (16 samples, 1.29%)</title><rect x="65.5422%" y="661" width="1.2851%" height="15" fill="rgb(236,60,13)" fg:x="816" fg:w="16"/><text x="65.7922%" y="671.50"></text></g><g><title>engine::session::state::State::flush_entities (16 samples, 1.29%)</title><rect x="65.5422%" y="645" width="1.2851%" height="15" fill="rgb(244,92,0)" fg:x="816" fg:w="16"/><text x="65.7922%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.20%)</title><rect x="65.6225%" y="629" width="1.2048%" height="15" fill="rgb(225,57,15)" fg:x="817" fg:w="15"/><text x="65.8725%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 1.20%)</title><rect x="65.6225%" y="613" width="1.2048%" height="15" fill="rgb(228,5,28)" fg:x="817" fg:w="15"/><text x="65.8725%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.20%)</title><rect x="65.6225%" y="597" width="1.2048%" height="15" fill="rgb(252,34,51)" fg:x="817" fg:w="15"/><text x="65.8725%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="66.3454%" y="581" width="0.4819%" height="15" fill="rgb(235,58,7)" fg:x="826" fg:w="6"/><text x="66.5954%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="66.5060%" y="565" width="0.3213%" height="15" fill="rgb(250,132,20)" fg:x="828" fg:w="4"/><text x="66.7560%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="66.5060%" y="549" width="0.3213%" height="15" fill="rgb(217,164,0)" fg:x="828" fg:w="4"/><text x="66.7560%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="66.5060%" y="533" width="0.3213%" height="15" fill="rgb(208,220,35)" fg:x="828" fg:w="4"/><text x="66.7560%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="66.5863%" y="517" width="0.2410%" height="15" fill="rgb(227,42,51)" fg:x="829" fg:w="3"/><text x="66.8363%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="66.7470%" y="501" width="0.0803%" height="15" fill="rgb(225,146,38)" fg:x="831" fg:w="1"/><text x="66.9970%" y="511.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="66.8273%" y="693" width="0.0803%" height="15" fill="rgb(252,108,37)" fg:x="832" fg:w="1"/><text x="67.0773%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="66.8273%" y="677" width="0.0803%" height="15" fill="rgb(244,101,24)" fg:x="832" fg:w="1"/><text x="67.0773%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="66.8273%" y="661" width="0.0803%" height="15" fill="rgb(213,161,50)" fg:x="832" fg:w="1"/><text x="67.0773%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="66.8273%" y="645" width="0.0803%" height="15" fill="rgb(248,159,19)" fg:x="832" fg:w="1"/><text x="67.0773%" y="655.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="66.9076%" y="693" width="0.0803%" height="15" fill="rgb(233,179,15)" fg:x="833" fg:w="1"/><text x="67.1576%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="66.9076%" y="677" width="0.0803%" height="15" fill="rgb(248,178,3)" fg:x="833" fg:w="1"/><text x="67.1576%" y="687.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="66.9880%" y="661" width="0.0803%" height="15" fill="rgb(245,190,41)" fg:x="834" fg:w="1"/><text x="67.2380%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="66.9880%" y="645" width="0.0803%" height="15" fill="rgb(218,151,19)" fg:x="834" fg:w="1"/><text x="67.2380%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="66.9880%" y="629" width="0.0803%" height="15" fill="rgb(245,25,44)" fg:x="834" fg:w="1"/><text x="67.2380%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.9880%" y="613" width="0.0803%" height="15" fill="rgb(235,172,47)" fg:x="834" fg:w="1"/><text x="67.2380%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.9880%" y="597" width="0.0803%" height="15" fill="rgb(246,33,12)" fg:x="834" fg:w="1"/><text x="67.2380%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="66.9880%" y="581" width="0.0803%" height="15" fill="rgb(214,124,7)" fg:x="834" fg:w="1"/><text x="67.2380%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="67.0683%" y="645" width="0.0803%" height="15" fill="rgb(246,186,18)" fg:x="835" fg:w="1"/><text x="67.3183%" y="655.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="67.1486%" y="645" width="0.0803%" height="15" fill="rgb(231,94,1)" fg:x="836" fg:w="1"/><text x="67.3986%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.1486%" y="629" width="0.0803%" height="15" fill="rgb(208,33,48)" fg:x="836" fg:w="1"/><text x="67.3986%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="67.2289%" y="613" width="0.0803%" height="15" fill="rgb(208,195,44)" fg:x="837" fg:w="1"/><text x="67.4789%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="66.9880%" y="693" width="0.4016%" height="15" fill="rgb(226,13,52)" fg:x="834" fg:w="5"/><text x="67.2380%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="66.9880%" y="677" width="0.4016%" height="15" fill="rgb(217,219,45)" fg:x="834" fg:w="5"/><text x="67.2380%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="67.0683%" y="661" width="0.3213%" height="15" fill="rgb(223,45,25)" fg:x="835" fg:w="4"/><text x="67.3183%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="67.2289%" y="645" width="0.1606%" height="15" fill="rgb(241,163,0)" fg:x="837" fg:w="2"/><text x="67.4789%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="67.2289%" y="629" width="0.1606%" height="15" fill="rgb(216,68,47)" fg:x="837" fg:w="2"/><text x="67.4789%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="67.3092%" y="613" width="0.0803%" height="15" fill="rgb(236,119,45)" fg:x="838" fg:w="1"/><text x="67.5592%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="67.3896%" y="693" width="0.0803%" height="15" fill="rgb(209,188,24)" fg:x="839" fg:w="1"/><text x="67.6396%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="67.3896%" y="677" width="0.0803%" height="15" fill="rgb(221,118,7)" fg:x="839" fg:w="1"/><text x="67.6396%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="67.3896%" y="661" width="0.0803%" height="15" fill="rgb(213,148,43)" fg:x="839" fg:w="1"/><text x="67.6396%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.3896%" y="645" width="0.0803%" height="15" fill="rgb(231,21,43)" fg:x="839" fg:w="1"/><text x="67.6396%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="67.3896%" y="629" width="0.0803%" height="15" fill="rgb(232,213,43)" fg:x="839" fg:w="1"/><text x="67.6396%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="67.3896%" y="613" width="0.0803%" height="15" fill="rgb(239,145,50)" fg:x="839" fg:w="1"/><text x="67.6396%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="67.3896%" y="597" width="0.0803%" height="15" fill="rgb(222,131,18)" fg:x="839" fg:w="1"/><text x="67.6396%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="67.3896%" y="581" width="0.0803%" height="15" fill="rgb(243,181,13)" fg:x="839" fg:w="1"/><text x="67.6396%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.3896%" y="565" width="0.0803%" height="15" fill="rgb(212,74,41)" fg:x="839" fg:w="1"/><text x="67.6396%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="67.3896%" y="549" width="0.0803%" height="15" fill="rgb(237,143,34)" fg:x="839" fg:w="1"/><text x="67.6396%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.3896%" y="533" width="0.0803%" height="15" fill="rgb(228,139,0)" fg:x="839" fg:w="1"/><text x="67.6396%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.3896%" y="517" width="0.0803%" height="15" fill="rgb(227,214,11)" fg:x="839" fg:w="1"/><text x="67.6396%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.3896%" y="501" width="0.0803%" height="15" fill="rgb(228,118,39)" fg:x="839" fg:w="1"/><text x="67.6396%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.3896%" y="485" width="0.0803%" height="15" fill="rgb(207,117,22)" fg:x="839" fg:w="1"/><text x="67.6396%" y="495.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="67.4699%" y="677" width="0.0803%" height="15" fill="rgb(225,91,8)" fg:x="840" fg:w="1"/><text x="67.7199%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="67.4699%" y="661" width="0.0803%" height="15" fill="rgb(230,219,48)" fg:x="840" fg:w="1"/><text x="67.7199%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="67.4699%" y="645" width="0.0803%" height="15" fill="rgb(244,0,23)" fg:x="840" fg:w="1"/><text x="67.7199%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="67.4699%" y="629" width="0.0803%" height="15" fill="rgb(206,212,23)" fg:x="840" fg:w="1"/><text x="67.7199%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.4699%" y="613" width="0.0803%" height="15" fill="rgb(254,62,10)" fg:x="840" fg:w="1"/><text x="67.7199%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4699%" y="597" width="0.0803%" height="15" fill="rgb(236,58,8)" fg:x="840" fg:w="1"/><text x="67.7199%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.4699%" y="581" width="0.0803%" height="15" fill="rgb(232,212,17)" fg:x="840" fg:w="1"/><text x="67.7199%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4699%" y="565" width="0.0803%" height="15" fill="rgb(206,132,9)" fg:x="840" fg:w="1"/><text x="67.7199%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4699%" y="549" width="0.0803%" height="15" fill="rgb(234,97,28)" fg:x="840" fg:w="1"/><text x="67.7199%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.4699%" y="533" width="0.0803%" height="15" fill="rgb(254,144,9)" fg:x="840" fg:w="1"/><text x="67.7199%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="67.4699%" y="517" width="0.0803%" height="15" fill="rgb(244,204,43)" fg:x="840" fg:w="1"/><text x="67.7199%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (29 samples, 2.33%)</title><rect x="65.3012%" y="709" width="2.3293%" height="15" fill="rgb(248,177,16)" fg:x="813" fg:w="29"/><text x="65.5512%" y="719.50">p..</text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="67.4699%" y="693" width="0.1606%" height="15" fill="rgb(219,110,15)" fg:x="840" fg:w="2"/><text x="67.7199%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="67.5502%" y="677" width="0.0803%" height="15" fill="rgb(212,203,25)" fg:x="841" fg:w="1"/><text x="67.8002%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="67.5502%" y="661" width="0.0803%" height="15" fill="rgb(205,50,1)" fg:x="841" fg:w="1"/><text x="67.8002%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.5502%" y="645" width="0.0803%" height="15" fill="rgb(222,152,41)" fg:x="841" fg:w="1"/><text x="67.8002%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.5502%" y="629" width="0.0803%" height="15" fill="rgb(236,83,3)" fg:x="841" fg:w="1"/><text x="67.8002%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.5502%" y="613" width="0.0803%" height="15" fill="rgb(214,30,54)" fg:x="841" fg:w="1"/><text x="67.8002%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="67.6305%" y="709" width="0.0803%" height="15" fill="rgb(250,117,31)" fg:x="842" fg:w="1"/><text x="67.8805%" y="719.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="67.6305%" y="693" width="0.0803%" height="15" fill="rgb(228,77,14)" fg:x="842" fg:w="1"/><text x="67.8805%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="67.6305%" y="677" width="0.0803%" height="15" fill="rgb(241,3,28)" fg:x="842" fg:w="1"/><text x="67.8805%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="67.6305%" y="661" width="0.0803%" height="15" fill="rgb(221,175,52)" fg:x="842" fg:w="1"/><text x="67.8805%" y="671.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="67.6305%" y="645" width="0.0803%" height="15" fill="rgb(237,91,6)" fg:x="842" fg:w="1"/><text x="67.8805%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6305%" y="629" width="0.0803%" height="15" fill="rgb(246,46,42)" fg:x="842" fg:w="1"/><text x="67.8805%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.7108%" y="677" width="0.0803%" height="15" fill="rgb(235,199,0)" fg:x="843" fg:w="1"/><text x="67.9608%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.7108%" y="661" width="0.0803%" height="15" fill="rgb(224,44,40)" fg:x="843" fg:w="1"/><text x="67.9608%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="67.7912%" y="661" width="0.0803%" height="15" fill="rgb(209,24,35)" fg:x="844" fg:w="1"/><text x="68.0412%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="67.7912%" y="645" width="0.0803%" height="15" fill="rgb(244,46,22)" fg:x="844" fg:w="1"/><text x="68.0412%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="67.8715%" y="629" width="0.0803%" height="15" fill="rgb(235,99,8)" fg:x="845" fg:w="1"/><text x="68.1215%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="67.8715%" y="613" width="0.0803%" height="15" fill="rgb(218,127,36)" fg:x="845" fg:w="1"/><text x="68.1215%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="67.8715%" y="597" width="0.0803%" height="15" fill="rgb(238,47,46)" fg:x="845" fg:w="1"/><text x="68.1215%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="67.8715%" y="581" width="0.0803%" height="15" fill="rgb(233,65,17)" fg:x="845" fg:w="1"/><text x="68.1215%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="67.8715%" y="565" width="0.0803%" height="15" fill="rgb(239,22,33)" fg:x="845" fg:w="1"/><text x="68.1215%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="67.8715%" y="549" width="0.0803%" height="15" fill="rgb(243,66,43)" fg:x="845" fg:w="1"/><text x="68.1215%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="67.8715%" y="533" width="0.0803%" height="15" fill="rgb(235,210,28)" fg:x="845" fg:w="1"/><text x="68.1215%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="67.7108%" y="709" width="0.3213%" height="15" fill="rgb(205,191,50)" fg:x="843" fg:w="4"/><text x="67.9608%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="67.7108%" y="693" width="0.3213%" height="15" fill="rgb(251,217,19)" fg:x="843" fg:w="4"/><text x="67.9608%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="67.7912%" y="677" width="0.2410%" height="15" fill="rgb(205,174,37)" fg:x="844" fg:w="3"/><text x="68.0412%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="67.8715%" y="661" width="0.1606%" height="15" fill="rgb(212,158,42)" fg:x="845" fg:w="2"/><text x="68.1215%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="67.8715%" y="645" width="0.1606%" height="15" fill="rgb(212,208,51)" fg:x="845" fg:w="2"/><text x="68.1215%" y="655.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="67.9518%" y="629" width="0.0803%" height="15" fill="rgb(225,198,20)" fg:x="846" fg:w="1"/><text x="68.2018%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.9518%" y="613" width="0.0803%" height="15" fill="rgb(247,41,44)" fg:x="846" fg:w="1"/><text x="68.2018%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="68.0321%" y="693" width="0.0803%" height="15" fill="rgb(228,33,41)" fg:x="847" fg:w="1"/><text x="68.2821%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="68.0321%" y="677" width="0.0803%" height="15" fill="rgb(215,47,52)" fg:x="847" fg:w="1"/><text x="68.2821%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.0321%" y="661" width="0.0803%" height="15" fill="rgb(248,106,37)" fg:x="847" fg:w="1"/><text x="68.2821%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="68.0321%" y="645" width="0.0803%" height="15" fill="rgb(238,91,29)" fg:x="847" fg:w="1"/><text x="68.2821%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="68.0321%" y="629" width="0.0803%" height="15" fill="rgb(226,111,40)" fg:x="847" fg:w="1"/><text x="68.2821%" y="639.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="68.0321%" y="613" width="0.0803%" height="15" fill="rgb(229,159,36)" fg:x="847" fg:w="1"/><text x="68.2821%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="68.1124%" y="661" width="0.0803%" height="15" fill="rgb(221,109,4)" fg:x="848" fg:w="1"/><text x="68.3624%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1124%" y="645" width="0.0803%" height="15" fill="rgb(236,56,25)" fg:x="848" fg:w="1"/><text x="68.3624%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="68.1928%" y="645" width="0.0803%" height="15" fill="rgb(244,113,23)" fg:x="849" fg:w="1"/><text x="68.4428%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1928%" y="629" width="0.0803%" height="15" fill="rgb(249,132,2)" fg:x="849" fg:w="1"/><text x="68.4428%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="68.1928%" y="661" width="0.1606%" height="15" fill="rgb(205,185,21)" fg:x="849" fg:w="2"/><text x="68.4428%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="68.2731%" y="645" width="0.0803%" height="15" fill="rgb(245,130,2)" fg:x="850" fg:w="1"/><text x="68.5231%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.2731%" y="629" width="0.0803%" height="15" fill="rgb(246,71,26)" fg:x="850" fg:w="1"/><text x="68.5231%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="68.2731%" y="613" width="0.0803%" height="15" fill="rgb(234,194,6)" fg:x="850" fg:w="1"/><text x="68.5231%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="68.2731%" y="597" width="0.0803%" height="15" fill="rgb(206,24,32)" fg:x="850" fg:w="1"/><text x="68.5231%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.2731%" y="581" width="0.0803%" height="15" fill="rgb(233,7,54)" fg:x="850" fg:w="1"/><text x="68.5231%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.2731%" y="565" width="0.0803%" height="15" fill="rgb(252,46,1)" fg:x="850" fg:w="1"/><text x="68.5231%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.2731%" y="549" width="0.0803%" height="15" fill="rgb(216,113,53)" fg:x="850" fg:w="1"/><text x="68.5231%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.2731%" y="533" width="0.0803%" height="15" fill="rgb(215,40,24)" fg:x="850" fg:w="1"/><text x="68.5231%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.2731%" y="517" width="0.0803%" height="15" fill="rgb(233,222,8)" fg:x="850" fg:w="1"/><text x="68.5231%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.2731%" y="501" width="0.0803%" height="15" fill="rgb(248,73,28)" fg:x="850" fg:w="1"/><text x="68.5231%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.2731%" y="485" width="0.0803%" height="15" fill="rgb(247,126,28)" fg:x="850" fg:w="1"/><text x="68.5231%" y="495.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (64 samples, 5.14%)</title><rect x="63.2932%" y="725" width="5.1406%" height="15" fill="rgb(242,173,54)" fg:x="788" fg:w="64"/><text x="63.5432%" y="735.50">&lt;tests..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.40%)</title><rect x="68.0321%" y="709" width="0.4016%" height="15" fill="rgb(244,186,22)" fg:x="847" fg:w="5"/><text x="68.2821%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="68.1124%" y="693" width="0.3213%" height="15" fill="rgb(231,187,4)" fg:x="848" fg:w="4"/><text x="68.3624%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="68.1124%" y="677" width="0.3213%" height="15" fill="rgb(252,66,47)" fg:x="848" fg:w="4"/><text x="68.3624%" y="687.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="68.3534%" y="661" width="0.0803%" height="15" fill="rgb(240,228,28)" fg:x="851" fg:w="1"/><text x="68.6034%" y="671.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="68.3534%" y="645" width="0.0803%" height="15" fill="rgb(237,63,43)" fg:x="851" fg:w="1"/><text x="68.6034%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="68.3534%" y="629" width="0.0803%" height="15" fill="rgb(214,1,44)" fg:x="851" fg:w="1"/><text x="68.6034%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="68.4337%" y="725" width="0.0803%" height="15" fill="rgb(212,2,46)" fg:x="852" fg:w="1"/><text x="68.6837%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="68.4337%" y="709" width="0.0803%" height="15" fill="rgb(213,142,5)" fg:x="852" fg:w="1"/><text x="68.6837%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="68.4337%" y="693" width="0.0803%" height="15" fill="rgb(229,135,1)" fg:x="852" fg:w="1"/><text x="68.6837%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="68.5944%" y="709" width="0.0803%" height="15" fill="rgb(252,98,38)" fg:x="854" fg:w="1"/><text x="68.8444%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.5944%" y="693" width="0.0803%" height="15" fill="rgb(206,89,40)" fg:x="854" fg:w="1"/><text x="68.8444%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.5944%" y="677" width="0.0803%" height="15" fill="rgb(219,73,36)" fg:x="854" fg:w="1"/><text x="68.8444%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.7550%" y="645" width="0.1606%" height="15" fill="rgb(207,168,32)" fg:x="856" fg:w="2"/><text x="69.0050%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="68.7550%" y="629" width="0.1606%" height="15" fill="rgb(215,113,21)" fg:x="856" fg:w="2"/><text x="69.0050%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.7550%" y="613" width="0.1606%" height="15" fill="rgb(217,144,43)" fg:x="856" fg:w="2"/><text x="69.0050%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.8353%" y="597" width="0.0803%" height="15" fill="rgb(249,48,50)" fg:x="857" fg:w="1"/><text x="69.0853%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.8353%" y="581" width="0.0803%" height="15" fill="rgb(242,1,26)" fg:x="857" fg:w="1"/><text x="69.0853%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.8353%" y="565" width="0.0803%" height="15" fill="rgb(231,167,42)" fg:x="857" fg:w="1"/><text x="69.0853%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.8353%" y="549" width="0.0803%" height="15" fill="rgb(242,177,45)" fg:x="857" fg:w="1"/><text x="69.0853%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.8353%" y="533" width="0.0803%" height="15" fill="rgb(232,121,42)" fg:x="857" fg:w="1"/><text x="69.0853%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.8353%" y="517" width="0.0803%" height="15" fill="rgb(205,8,42)" fg:x="857" fg:w="1"/><text x="69.0853%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.8353%" y="501" width="0.0803%" height="15" fill="rgb(238,199,24)" fg:x="857" fg:w="1"/><text x="69.0853%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.8353%" y="485" width="0.0803%" height="15" fill="rgb(228,112,2)" fg:x="857" fg:w="1"/><text x="69.0853%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.8353%" y="469" width="0.0803%" height="15" fill="rgb(215,115,33)" fg:x="857" fg:w="1"/><text x="69.0853%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.8353%" y="453" width="0.0803%" height="15" fill="rgb(230,209,34)" fg:x="857" fg:w="1"/><text x="69.0853%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.8353%" y="437" width="0.0803%" height="15" fill="rgb(246,76,12)" fg:x="857" fg:w="1"/><text x="69.0853%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8353%" y="421" width="0.0803%" height="15" fill="rgb(240,110,9)" fg:x="857" fg:w="1"/><text x="69.0853%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="68.9960%" y="613" width="0.0803%" height="15" fill="rgb(224,94,46)" fg:x="859" fg:w="1"/><text x="69.2460%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="68.9960%" y="597" width="0.0803%" height="15" fill="rgb(247,150,22)" fg:x="859" fg:w="1"/><text x="69.2460%" y="607.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="68.9960%" y="581" width="0.0803%" height="15" fill="rgb(249,85,13)" fg:x="859" fg:w="1"/><text x="69.2460%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.9960%" y="565" width="0.0803%" height="15" fill="rgb(208,77,41)" fg:x="859" fg:w="1"/><text x="69.2460%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.9960%" y="549" width="0.0803%" height="15" fill="rgb(240,42,44)" fg:x="859" fg:w="1"/><text x="69.2460%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.9960%" y="533" width="0.0803%" height="15" fill="rgb(222,10,51)" fg:x="859" fg:w="1"/><text x="69.2460%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (5 samples, 0.40%)</title><rect x="68.7550%" y="693" width="0.4016%" height="15" fill="rgb(208,146,53)" fg:x="856" fg:w="5"/><text x="69.0050%" y="703.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (5 samples, 0.40%)</title><rect x="68.7550%" y="677" width="0.4016%" height="15" fill="rgb(236,162,23)" fg:x="856" fg:w="5"/><text x="69.0050%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="68.7550%" y="661" width="0.4016%" height="15" fill="rgb(218,66,21)" fg:x="856" fg:w="5"/><text x="69.0050%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="68.9157%" y="645" width="0.2410%" height="15" fill="rgb(233,6,47)" fg:x="858" fg:w="3"/><text x="69.1657%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.9157%" y="629" width="0.2410%" height="15" fill="rgb(236,59,51)" fg:x="858" fg:w="3"/><text x="69.1657%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.0763%" y="613" width="0.0803%" height="15" fill="rgb(242,12,46)" fg:x="860" fg:w="1"/><text x="69.3263%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.0763%" y="597" width="0.0803%" height="15" fill="rgb(243,142,19)" fg:x="860" fg:w="1"/><text x="69.3263%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.1566%" y="693" width="0.1606%" height="15" fill="rgb(217,28,17)" fg:x="861" fg:w="2"/><text x="69.4066%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.1566%" y="677" width="0.1606%" height="15" fill="rgb(228,2,27)" fg:x="861" fg:w="2"/><text x="69.4066%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.1566%" y="661" width="0.1606%" height="15" fill="rgb(214,221,4)" fg:x="861" fg:w="2"/><text x="69.4066%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="69.1566%" y="645" width="0.1606%" height="15" fill="rgb(224,69,26)" fg:x="861" fg:w="2"/><text x="69.4066%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="69.3173%" y="613" width="0.0803%" height="15" fill="rgb(219,70,4)" fg:x="863" fg:w="1"/><text x="69.5673%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.3173%" y="597" width="0.0803%" height="15" fill="rgb(218,157,39)" fg:x="863" fg:w="1"/><text x="69.5673%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.3173%" y="581" width="0.0803%" height="15" fill="rgb(238,36,28)" fg:x="863" fg:w="1"/><text x="69.5673%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="69.3976%" y="597" width="0.3213%" height="15" fill="rgb(232,29,0)" fg:x="864" fg:w="4"/><text x="69.6476%" y="607.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="69.3976%" y="581" width="0.3213%" height="15" fill="rgb(243,138,46)" fg:x="864" fg:w="4"/><text x="69.6476%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="69.4779%" y="565" width="0.2410%" height="15" fill="rgb(232,186,41)" fg:x="865" fg:w="3"/><text x="69.7279%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="69.5582%" y="549" width="0.1606%" height="15" fill="rgb(252,166,17)" fg:x="866" fg:w="2"/><text x="69.8082%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.6386%" y="533" width="0.0803%" height="15" fill="rgb(228,179,12)" fg:x="867" fg:w="1"/><text x="69.8886%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.6386%" y="517" width="0.0803%" height="15" fill="rgb(254,205,53)" fg:x="867" fg:w="1"/><text x="69.8886%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.6386%" y="501" width="0.0803%" height="15" fill="rgb(224,163,47)" fg:x="867" fg:w="1"/><text x="69.8886%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.7189%" y="581" width="0.0803%" height="15" fill="rgb(208,43,47)" fg:x="868" fg:w="1"/><text x="69.9689%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.7189%" y="565" width="0.0803%" height="15" fill="rgb(224,198,38)" fg:x="868" fg:w="1"/><text x="69.9689%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="69.7189%" y="597" width="0.1606%" height="15" fill="rgb(234,12,40)" fg:x="868" fg:w="2"/><text x="69.9689%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.7992%" y="581" width="0.0803%" height="15" fill="rgb(237,212,39)" fg:x="869" fg:w="1"/><text x="70.0492%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.7992%" y="565" width="0.0803%" height="15" fill="rgb(253,2,33)" fg:x="869" fg:w="1"/><text x="70.0492%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.7992%" y="549" width="0.0803%" height="15" fill="rgb(251,29,16)" fg:x="869" fg:w="1"/><text x="70.0492%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="69.3173%" y="629" width="0.6426%" height="15" fill="rgb(214,38,29)" fg:x="863" fg:w="8"/><text x="69.5673%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="69.3976%" y="613" width="0.5622%" height="15" fill="rgb(226,226,29)" fg:x="864" fg:w="7"/><text x="69.6476%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.8795%" y="597" width="0.0803%" height="15" fill="rgb(236,79,42)" fg:x="870" fg:w="1"/><text x="70.1295%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.9598%" y="581" width="0.0803%" height="15" fill="rgb(222,12,36)" fg:x="871" fg:w="1"/><text x="70.2098%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.0402%" y="565" width="0.0803%" height="15" fill="rgb(232,123,44)" fg:x="872" fg:w="1"/><text x="70.2902%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="69.9598%" y="629" width="0.2410%" height="15" fill="rgb(234,93,50)" fg:x="871" fg:w="3"/><text x="70.2098%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="69.9598%" y="613" width="0.2410%" height="15" fill="rgb(210,86,49)" fg:x="871" fg:w="3"/><text x="70.2098%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="69.9598%" y="597" width="0.2410%" height="15" fill="rgb(224,91,54)" fg:x="871" fg:w="3"/><text x="70.2098%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.0402%" y="581" width="0.1606%" height="15" fill="rgb(239,169,9)" fg:x="872" fg:w="2"/><text x="70.2902%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.1205%" y="565" width="0.0803%" height="15" fill="rgb(238,29,17)" fg:x="873" fg:w="1"/><text x="70.3705%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.1205%" y="549" width="0.0803%" height="15" fill="rgb(227,160,22)" fg:x="873" fg:w="1"/><text x="70.3705%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.3614%" y="549" width="0.0803%" height="15" fill="rgb(231,129,52)" fg:x="876" fg:w="1"/><text x="70.6114%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="70.6024%" y="517" width="0.0803%" height="15" fill="rgb(241,184,9)" fg:x="879" fg:w="1"/><text x="70.8524%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="70.6024%" y="501" width="0.0803%" height="15" fill="rgb(217,43,48)" fg:x="879" fg:w="1"/><text x="70.8524%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.6024%" y="485" width="0.0803%" height="15" fill="rgb(213,49,1)" fg:x="879" fg:w="1"/><text x="70.8524%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="70.2811%" y="597" width="0.4819%" height="15" fill="rgb(223,79,39)" fg:x="875" fg:w="6"/><text x="70.5311%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="70.2811%" y="581" width="0.4819%" height="15" fill="rgb(228,227,46)" fg:x="875" fg:w="6"/><text x="70.5311%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="70.3614%" y="565" width="0.4016%" height="15" fill="rgb(245,89,41)" fg:x="876" fg:w="5"/><text x="70.6114%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="70.4418%" y="549" width="0.3213%" height="15" fill="rgb(253,83,21)" fg:x="877" fg:w="4"/><text x="70.6918%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="70.4418%" y="533" width="0.3213%" height="15" fill="rgb(229,116,51)" fg:x="877" fg:w="4"/><text x="70.6918%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.6827%" y="517" width="0.0803%" height="15" fill="rgb(246,67,26)" fg:x="880" fg:w="1"/><text x="70.9327%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.6827%" y="501" width="0.0803%" height="15" fill="rgb(250,117,20)" fg:x="880" fg:w="1"/><text x="70.9327%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="70.7631%" y="549" width="0.0803%" height="15" fill="rgb(207,88,17)" fg:x="881" fg:w="1"/><text x="71.0131%" y="559.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="70.7631%" y="533" width="0.0803%" height="15" fill="rgb(212,98,36)" fg:x="881" fg:w="1"/><text x="71.0131%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="70.7631%" y="517" width="0.0803%" height="15" fill="rgb(221,72,6)" fg:x="881" fg:w="1"/><text x="71.0131%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (9 samples, 0.72%)</title><rect x="70.2008%" y="613" width="0.7229%" height="15" fill="rgb(235,129,19)" fg:x="874" fg:w="9"/><text x="70.4508%" y="623.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="70.7631%" y="597" width="0.1606%" height="15" fill="rgb(237,200,6)" fg:x="881" fg:w="2"/><text x="71.0131%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="70.7631%" y="581" width="0.1606%" height="15" fill="rgb(239,69,54)" fg:x="881" fg:w="2"/><text x="71.0131%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="70.7631%" y="565" width="0.1606%" height="15" fill="rgb(214,68,45)" fg:x="881" fg:w="2"/><text x="71.0131%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.8434%" y="549" width="0.0803%" height="15" fill="rgb(254,160,8)" fg:x="882" fg:w="1"/><text x="71.0934%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9237%" y="581" width="0.0803%" height="15" fill="rgb(215,226,31)" fg:x="883" fg:w="1"/><text x="71.1737%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="71.0040%" y="581" width="0.0803%" height="15" fill="rgb(253,6,35)" fg:x="884" fg:w="1"/><text x="71.2540%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="71.0040%" y="565" width="0.0803%" height="15" fill="rgb(219,96,42)" fg:x="884" fg:w="1"/><text x="71.2540%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="71.2450%" y="533" width="0.0803%" height="15" fill="rgb(207,170,13)" fg:x="887" fg:w="1"/><text x="71.4950%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.2450%" y="517" width="0.0803%" height="15" fill="rgb(239,101,5)" fg:x="887" fg:w="1"/><text x="71.4950%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.2450%" y="501" width="0.0803%" height="15" fill="rgb(228,183,34)" fg:x="887" fg:w="1"/><text x="71.4950%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.2450%" y="485" width="0.0803%" height="15" fill="rgb(205,28,31)" fg:x="887" fg:w="1"/><text x="71.4950%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2450%" y="469" width="0.0803%" height="15" fill="rgb(214,118,50)" fg:x="887" fg:w="1"/><text x="71.4950%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="71.4056%" y="517" width="0.3213%" height="15" fill="rgb(213,108,51)" fg:x="889" fg:w="4"/><text x="71.6556%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="71.4056%" y="501" width="0.3213%" height="15" fill="rgb(238,56,37)" fg:x="889" fg:w="4"/><text x="71.6556%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="71.5663%" y="485" width="0.1606%" height="15" fill="rgb(214,136,28)" fg:x="891" fg:w="2"/><text x="71.8163%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.6466%" y="469" width="0.0803%" height="15" fill="rgb(221,201,54)" fg:x="892" fg:w="1"/><text x="71.8966%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.72%)</title><rect x="71.0843%" y="565" width="0.7229%" height="15" fill="rgb(228,216,39)" fg:x="885" fg:w="9"/><text x="71.3343%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.72%)</title><rect x="71.0843%" y="549" width="0.7229%" height="15" fill="rgb(207,229,49)" fg:x="885" fg:w="9"/><text x="71.3343%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="71.3253%" y="533" width="0.4819%" height="15" fill="rgb(224,23,43)" fg:x="888" fg:w="6"/><text x="71.5753%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7269%" y="517" width="0.0803%" height="15" fill="rgb(247,97,18)" fg:x="893" fg:w="1"/><text x="71.9769%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.96%)</title><rect x="70.9237%" y="613" width="0.9639%" height="15" fill="rgb(232,53,32)" fg:x="883" fg:w="12"/><text x="71.1737%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.96%)</title><rect x="70.9237%" y="597" width="0.9639%" height="15" fill="rgb(247,38,23)" fg:x="883" fg:w="12"/><text x="71.1737%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.80%)</title><rect x="71.0843%" y="581" width="0.8032%" height="15" fill="rgb(228,101,52)" fg:x="885" fg:w="10"/><text x="71.3343%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8072%" y="565" width="0.0803%" height="15" fill="rgb(231,45,36)" fg:x="894" fg:w="1"/><text x="72.0572%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="71.8876%" y="405" width="0.0803%" height="15" fill="rgb(221,183,50)" fg:x="895" fg:w="1"/><text x="72.1376%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.8876%" y="485" width="0.1606%" height="15" fill="rgb(251,132,12)" fg:x="895" fg:w="2"/><text x="72.1376%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.8876%" y="469" width="0.1606%" height="15" fill="rgb(252,50,16)" fg:x="895" fg:w="2"/><text x="72.1376%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.8876%" y="453" width="0.1606%" height="15" fill="rgb(224,60,15)" fg:x="895" fg:w="2"/><text x="72.1376%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.8876%" y="437" width="0.1606%" height="15" fill="rgb(254,2,34)" fg:x="895" fg:w="2"/><text x="72.1376%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="71.8876%" y="421" width="0.1606%" height="15" fill="rgb(232,154,8)" fg:x="895" fg:w="2"/><text x="72.1376%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.9679%" y="405" width="0.0803%" height="15" fill="rgb(235,190,52)" fg:x="896" fg:w="1"/><text x="72.2179%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="71.8876%" y="517" width="0.2410%" height="15" fill="rgb(213,218,38)" fg:x="895" fg:w="3"/><text x="72.1376%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="71.8876%" y="501" width="0.2410%" height="15" fill="rgb(237,50,37)" fg:x="895" fg:w="3"/><text x="72.1376%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.0482%" y="485" width="0.0803%" height="15" fill="rgb(235,51,35)" fg:x="897" fg:w="1"/><text x="72.2982%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.0482%" y="469" width="0.0803%" height="15" fill="rgb(244,40,52)" fg:x="897" fg:w="1"/><text x="72.2982%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0482%" y="453" width="0.0803%" height="15" fill="rgb(217,225,45)" fg:x="897" fg:w="1"/><text x="72.2982%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.1285%" y="501" width="0.0803%" height="15" fill="rgb(247,191,36)" fg:x="898" fg:w="1"/><text x="72.3785%" y="511.50"></text></g><g><title>engine::session::Session::close (47 samples, 3.78%)</title><rect x="68.5141%" y="725" width="3.7751%" height="15" fill="rgb(251,144,31)" fg:x="853" fg:w="47"/><text x="68.7641%" y="735.50">engi..</text></g><g><title>engine::session::state::State::close (45 samples, 3.61%)</title><rect x="68.6747%" y="709" width="3.6145%" height="15" fill="rgb(227,155,41)" fg:x="855" fg:w="45"/><text x="68.9247%" y="719.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (37 samples, 2.97%)</title><rect x="69.3173%" y="693" width="2.9719%" height="15" fill="rgb(236,121,36)" fg:x="863" fg:w="37"/><text x="69.5673%" y="703.50">eng..</text></g><g><title>core::iter::adapters::try_process (37 samples, 2.97%)</title><rect x="69.3173%" y="677" width="2.9719%" height="15" fill="rgb(221,128,28)" fg:x="863" fg:w="37"/><text x="69.5673%" y="687.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (37 samples, 2.97%)</title><rect x="69.3173%" y="661" width="2.9719%" height="15" fill="rgb(249,67,50)" fg:x="863" fg:w="37"/><text x="69.5673%" y="671.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (37 samples, 2.97%)</title><rect x="69.3173%" y="645" width="2.9719%" height="15" fill="rgb(241,126,38)" fg:x="863" fg:w="37"/><text x="69.5673%" y="655.50">eng..</text></g><g><title>kernel::model::any_entity_changes (26 samples, 2.09%)</title><rect x="70.2008%" y="629" width="2.0884%" height="15" fill="rgb(239,33,14)" fg:x="874" fg:w="26"/><text x="70.4508%" y="639.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="71.8876%" y="613" width="0.4016%" height="15" fill="rgb(207,221,54)" fg:x="895" fg:w="5"/><text x="72.1376%" y="623.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="71.8876%" y="597" width="0.4016%" height="15" fill="rgb(242,138,43)" fg:x="895" fg:w="5"/><text x="72.1376%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="71.8876%" y="581" width="0.4016%" height="15" fill="rgb(231,118,19)" fg:x="895" fg:w="5"/><text x="72.1376%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="71.8876%" y="565" width="0.4016%" height="15" fill="rgb(214,128,54)" fg:x="895" fg:w="5"/><text x="72.1376%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="71.8876%" y="549" width="0.4016%" height="15" fill="rgb(236,136,6)" fg:x="895" fg:w="5"/><text x="72.1376%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="71.8876%" y="533" width="0.4016%" height="15" fill="rgb(247,30,38)" fg:x="895" fg:w="5"/><text x="72.1376%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="72.1285%" y="517" width="0.1606%" height="15" fill="rgb(249,189,40)" fg:x="898" fg:w="2"/><text x="72.3785%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.2088%" y="501" width="0.0803%" height="15" fill="rgb(247,179,7)" fg:x="899" fg:w="1"/><text x="72.4588%" y="511.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="72.2892%" y="693" width="0.0803%" height="15" fill="rgb(239,46,52)" fg:x="900" fg:w="1"/><text x="72.5392%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="72.2892%" y="677" width="0.0803%" height="15" fill="rgb(225,28,52)" fg:x="900" fg:w="1"/><text x="72.5392%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.3695%" y="693" width="0.0803%" height="15" fill="rgb(217,208,44)" fg:x="901" fg:w="1"/><text x="72.6195%" y="703.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="72.4498%" y="581" width="0.0803%" height="15" fill="rgb(224,11,34)" fg:x="902" fg:w="1"/><text x="72.6998%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="72.4498%" y="565" width="0.0803%" height="15" fill="rgb(205,134,17)" fg:x="902" fg:w="1"/><text x="72.6998%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="72.4498%" y="549" width="0.0803%" height="15" fill="rgb(237,125,9)" fg:x="902" fg:w="1"/><text x="72.6998%" y="559.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="72.4498%" y="533" width="0.0803%" height="15" fill="rgb(208,139,47)" fg:x="902" fg:w="1"/><text x="72.6998%" y="543.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="72.4498%" y="517" width="0.0803%" height="15" fill="rgb(242,5,5)" fg:x="902" fg:w="1"/><text x="72.6998%" y="527.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="72.4498%" y="501" width="0.0803%" height="15" fill="rgb(218,78,2)" fg:x="902" fg:w="1"/><text x="72.6998%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="72.4498%" y="485" width="0.0803%" height="15" fill="rgb(217,75,16)" fg:x="902" fg:w="1"/><text x="72.6998%" y="495.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="72.4498%" y="469" width="0.0803%" height="15" fill="rgb(212,56,17)" fg:x="902" fg:w="1"/><text x="72.6998%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="72.4498%" y="453" width="0.0803%" height="15" fill="rgb(228,61,29)" fg:x="902" fg:w="1"/><text x="72.6998%" y="463.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (1 samples, 0.08%)</title><rect x="72.4498%" y="437" width="0.0803%" height="15" fill="rgb(247,202,38)" fg:x="902" fg:w="1"/><text x="72.6998%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="72.4498%" y="421" width="0.0803%" height="15" fill="rgb(211,216,43)" fg:x="902" fg:w="1"/><text x="72.6998%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="72.4498%" y="405" width="0.0803%" height="15" fill="rgb(220,7,49)" fg:x="902" fg:w="1"/><text x="72.6998%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="72.4498%" y="389" width="0.0803%" height="15" fill="rgb(219,158,7)" fg:x="902" fg:w="1"/><text x="72.6998%" y="399.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="72.4498%" y="373" width="0.0803%" height="15" fill="rgb(206,127,9)" fg:x="902" fg:w="1"/><text x="72.6998%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="72.4498%" y="677" width="0.1606%" height="15" fill="rgb(206,103,43)" fg:x="902" fg:w="2"/><text x="72.6998%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="72.4498%" y="661" width="0.1606%" height="15" fill="rgb(240,108,41)" fg:x="902" fg:w="2"/><text x="72.6998%" y="671.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="72.4498%" y="645" width="0.1606%" height="15" fill="rgb(252,212,6)" fg:x="902" fg:w="2"/><text x="72.6998%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="72.4498%" y="629" width="0.1606%" height="15" fill="rgb(248,105,31)" fg:x="902" fg:w="2"/><text x="72.6998%" y="639.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="72.4498%" y="613" width="0.1606%" height="15" fill="rgb(241,123,4)" fg:x="902" fg:w="2"/><text x="72.6998%" y="623.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="72.4498%" y="597" width="0.1606%" height="15" fill="rgb(223,74,37)" fg:x="902" fg:w="2"/><text x="72.6998%" y="607.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.08%)</title><rect x="72.5301%" y="581" width="0.0803%" height="15" fill="rgb(251,219,28)" fg:x="903" fg:w="1"/><text x="72.7801%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="72.5301%" y="565" width="0.0803%" height="15" fill="rgb(218,36,31)" fg:x="903" fg:w="1"/><text x="72.7801%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish::{{closure}} (1 samples, 0.08%)</title><rect x="72.5301%" y="549" width="0.0803%" height="15" fill="rgb(229,40,15)" fg:x="903" fg:w="1"/><text x="72.7801%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.5301%" y="533" width="0.0803%" height="15" fill="rgb(208,138,37)" fg:x="903" fg:w="1"/><text x="72.7801%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="72.6908%" y="661" width="0.1606%" height="15" fill="rgb(208,40,52)" fg:x="905" fg:w="2"/><text x="72.9408%" y="671.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="72.8514%" y="661" width="0.0803%" height="15" fill="rgb(246,181,48)" fg:x="907" fg:w="1"/><text x="73.1014%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="72.8514%" y="645" width="0.0803%" height="15" fill="rgb(253,178,36)" fg:x="907" fg:w="1"/><text x="73.1014%" y="655.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="72.8514%" y="629" width="0.0803%" height="15" fill="rgb(210,170,6)" fg:x="907" fg:w="1"/><text x="73.1014%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (2 samples, 0.16%)</title><rect x="72.9317%" y="661" width="0.1606%" height="15" fill="rgb(243,62,22)" fg:x="908" fg:w="2"/><text x="73.1817%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="72.9317%" y="645" width="0.1606%" height="15" fill="rgb(213,145,26)" fg:x="908" fg:w="2"/><text x="73.1817%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.0120%" y="629" width="0.0803%" height="15" fill="rgb(237,177,23)" fg:x="909" fg:w="1"/><text x="73.2620%" y="639.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (4 samples, 0.32%)</title><rect x="73.0924%" y="661" width="0.3213%" height="15" fill="rgb(252,5,24)" fg:x="910" fg:w="4"/><text x="73.3424%" y="671.50"></text></g><g><title>tracing_core::callsite::register_dispatch (4 samples, 0.32%)</title><rect x="73.0924%" y="645" width="0.3213%" height="15" fill="rgb(230,108,54)" fg:x="910" fg:w="4"/><text x="73.3424%" y="655.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (4 samples, 0.32%)</title><rect x="73.0924%" y="629" width="0.3213%" height="15" fill="rgb(252,192,41)" fg:x="910" fg:w="4"/><text x="73.3424%" y="639.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (3 samples, 0.24%)</title><rect x="73.1727%" y="613" width="0.2410%" height="15" fill="rgb(218,125,20)" fg:x="911" fg:w="3"/><text x="73.4227%" y="623.50"></text></g><g><title>tracing_core::subscriber::Subscriber::register_callsite (1 samples, 0.08%)</title><rect x="73.3333%" y="597" width="0.0803%" height="15" fill="rgb(230,223,15)" fg:x="913" fg:w="1"/><text x="73.5833%" y="607.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.4137%" y="357" width="0.0803%" height="15" fill="rgb(239,99,47)" fg:x="914" fg:w="1"/><text x="73.6637%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.4137%" y="341" width="0.0803%" height="15" fill="rgb(222,214,23)" fg:x="914" fg:w="1"/><text x="73.6637%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.4137%" y="325" width="0.0803%" height="15" fill="rgb(250,98,43)" fg:x="914" fg:w="1"/><text x="73.6637%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.4137%" y="309" width="0.0803%" height="15" fill="rgb(226,140,11)" fg:x="914" fg:w="1"/><text x="73.6637%" y="319.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.4137%" y="293" width="0.0803%" height="15" fill="rgb(239,2,22)" fg:x="914" fg:w="1"/><text x="73.6637%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.4137%" y="389" width="0.1606%" height="15" fill="rgb(209,106,26)" fg:x="914" fg:w="2"/><text x="73.6637%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.4137%" y="373" width="0.1606%" height="15" fill="rgb(209,135,11)" fg:x="914" fg:w="2"/><text x="73.6637%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.4940%" y="357" width="0.0803%" height="15" fill="rgb(241,58,6)" fg:x="915" fg:w="1"/><text x="73.7440%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="73.4137%" y="485" width="0.3213%" height="15" fill="rgb(214,78,1)" fg:x="914" fg:w="4"/><text x="73.6637%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="73.4137%" y="469" width="0.3213%" height="15" fill="rgb(229,135,33)" fg:x="914" fg:w="4"/><text x="73.6637%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="73.4137%" y="453" width="0.3213%" height="15" fill="rgb(245,87,50)" fg:x="914" fg:w="4"/><text x="73.6637%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="73.4137%" y="437" width="0.3213%" height="15" fill="rgb(222,222,8)" fg:x="914" fg:w="4"/><text x="73.6637%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="73.4137%" y="421" width="0.3213%" height="15" fill="rgb(214,97,50)" fg:x="914" fg:w="4"/><text x="73.6637%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="73.4137%" y="405" width="0.3213%" height="15" fill="rgb(244,161,51)" fg:x="914" fg:w="4"/><text x="73.6637%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.5743%" y="389" width="0.1606%" height="15" fill="rgb(225,17,4)" fg:x="916" fg:w="2"/><text x="73.8243%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.5743%" y="373" width="0.1606%" height="15" fill="rgb(238,10,13)" fg:x="916" fg:w="2"/><text x="73.8243%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.6546%" y="357" width="0.0803%" height="15" fill="rgb(239,169,14)" fg:x="917" fg:w="1"/><text x="73.9046%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="73.6546%" y="341" width="0.0803%" height="15" fill="rgb(213,105,25)" fg:x="917" fg:w="1"/><text x="73.9046%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="73.6546%" y="325" width="0.0803%" height="15" fill="rgb(233,4,17)" fg:x="917" fg:w="1"/><text x="73.9046%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6546%" y="309" width="0.0803%" height="15" fill="rgb(212,5,35)" fg:x="917" fg:w="1"/><text x="73.9046%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.6546%" y="293" width="0.0803%" height="15" fill="rgb(216,3,14)" fg:x="917" fg:w="1"/><text x="73.9046%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.6546%" y="277" width="0.0803%" height="15" fill="rgb(240,105,33)" fg:x="917" fg:w="1"/><text x="73.9046%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6546%" y="261" width="0.0803%" height="15" fill="rgb(216,73,0)" fg:x="917" fg:w="1"/><text x="73.9046%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.6546%" y="245" width="0.0803%" height="15" fill="rgb(217,153,48)" fg:x="917" fg:w="1"/><text x="73.9046%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.6546%" y="229" width="0.0803%" height="15" fill="rgb(218,180,8)" fg:x="917" fg:w="1"/><text x="73.9046%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6546%" y="213" width="0.0803%" height="15" fill="rgb(252,168,2)" fg:x="917" fg:w="1"/><text x="73.9046%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.6546%" y="197" width="0.0803%" height="15" fill="rgb(224,116,33)" fg:x="917" fg:w="1"/><text x="73.9046%" y="207.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (5 samples, 0.40%)</title><rect x="73.4137%" y="581" width="0.4016%" height="15" fill="rgb(229,205,17)" fg:x="914" fg:w="5"/><text x="73.6637%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (5 samples, 0.40%)</title><rect x="73.4137%" y="565" width="0.4016%" height="15" fill="rgb(234,1,41)" fg:x="914" fg:w="5"/><text x="73.6637%" y="575.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.40%)</title><rect x="73.4137%" y="549" width="0.4016%" height="15" fill="rgb(244,185,8)" fg:x="914" fg:w="5"/><text x="73.6637%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.40%)</title><rect x="73.4137%" y="533" width="0.4016%" height="15" fill="rgb(248,51,21)" fg:x="914" fg:w="5"/><text x="73.6637%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="73.4137%" y="517" width="0.4016%" height="15" fill="rgb(248,157,31)" fg:x="914" fg:w="5"/><text x="73.6637%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="73.4137%" y="501" width="0.4016%" height="15" fill="rgb(210,34,47)" fg:x="914" fg:w="5"/><text x="73.6637%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="73.7349%" y="485" width="0.0803%" height="15" fill="rgb(227,139,53)" fg:x="918" fg:w="1"/><text x="73.9849%" y="495.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="73.7349%" y="469" width="0.0803%" height="15" fill="rgb(232,211,37)" fg:x="918" fg:w="1"/><text x="73.9849%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7349%" y="453" width="0.0803%" height="15" fill="rgb(236,133,10)" fg:x="918" fg:w="1"/><text x="73.9849%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7349%" y="437" width="0.0803%" height="15" fill="rgb(243,202,25)" fg:x="918" fg:w="1"/><text x="73.9849%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7349%" y="421" width="0.0803%" height="15" fill="rgb(224,59,9)" fg:x="918" fg:w="1"/><text x="73.9849%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7349%" y="405" width="0.0803%" height="15" fill="rgb(206,146,16)" fg:x="918" fg:w="1"/><text x="73.9849%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7349%" y="389" width="0.0803%" height="15" fill="rgb(220,47,2)" fg:x="918" fg:w="1"/><text x="73.9849%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7349%" y="373" width="0.0803%" height="15" fill="rgb(225,124,51)" fg:x="918" fg:w="1"/><text x="73.9849%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7349%" y="357" width="0.0803%" height="15" fill="rgb(241,220,50)" fg:x="918" fg:w="1"/><text x="73.9849%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7349%" y="341" width="0.0803%" height="15" fill="rgb(232,168,5)" fg:x="918" fg:w="1"/><text x="73.9849%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7349%" y="325" width="0.0803%" height="15" fill="rgb(243,90,22)" fg:x="918" fg:w="1"/><text x="73.9849%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7349%" y="309" width="0.0803%" height="15" fill="rgb(223,153,32)" fg:x="918" fg:w="1"/><text x="73.9849%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7349%" y="293" width="0.0803%" height="15" fill="rgb(243,124,20)" fg:x="918" fg:w="1"/><text x="73.9849%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7349%" y="277" width="0.0803%" height="15" fill="rgb(246,168,39)" fg:x="918" fg:w="1"/><text x="73.9849%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7349%" y="261" width="0.0803%" height="15" fill="rgb(222,165,54)" fg:x="918" fg:w="1"/><text x="73.9849%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7349%" y="245" width="0.0803%" height="15" fill="rgb(251,142,27)" fg:x="918" fg:w="1"/><text x="73.9849%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9759%" y="357" width="0.0803%" height="15" fill="rgb(207,168,50)" fg:x="921" fg:w="1"/><text x="74.2259%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9759%" y="341" width="0.0803%" height="15" fill="rgb(250,139,25)" fg:x="921" fg:w="1"/><text x="74.2259%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9759%" y="325" width="0.0803%" height="15" fill="rgb(214,194,48)" fg:x="921" fg:w="1"/><text x="74.2259%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9759%" y="309" width="0.0803%" height="15" fill="rgb(227,138,47)" fg:x="921" fg:w="1"/><text x="74.2259%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9759%" y="293" width="0.0803%" height="15" fill="rgb(250,162,5)" fg:x="921" fg:w="1"/><text x="74.2259%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.9759%" y="277" width="0.0803%" height="15" fill="rgb(229,74,25)" fg:x="921" fg:w="1"/><text x="74.2259%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.9759%" y="261" width="0.0803%" height="15" fill="rgb(221,124,34)" fg:x="921" fg:w="1"/><text x="74.2259%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.9759%" y="245" width="0.0803%" height="15" fill="rgb(225,94,25)" fg:x="921" fg:w="1"/><text x="74.2259%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9759%" y="229" width="0.0803%" height="15" fill="rgb(210,100,12)" fg:x="921" fg:w="1"/><text x="74.2259%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9759%" y="213" width="0.0803%" height="15" fill="rgb(206,62,48)" fg:x="921" fg:w="1"/><text x="74.2259%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.9759%" y="197" width="0.0803%" height="15" fill="rgb(222,181,9)" fg:x="921" fg:w="1"/><text x="74.2259%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.9759%" y="181" width="0.0803%" height="15" fill="rgb(248,42,38)" fg:x="921" fg:w="1"/><text x="74.2259%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.9759%" y="165" width="0.0803%" height="15" fill="rgb(213,40,6)" fg:x="921" fg:w="1"/><text x="74.2259%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.9759%" y="149" width="0.0803%" height="15" fill="rgb(211,108,15)" fg:x="921" fg:w="1"/><text x="74.2259%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.9759%" y="133" width="0.0803%" height="15" fill="rgb(249,62,9)" fg:x="921" fg:w="1"/><text x="74.2259%" y="143.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="73.9759%" y="389" width="0.1606%" height="15" fill="rgb(233,26,54)" fg:x="921" fg:w="2"/><text x="74.2259%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="73.9759%" y="373" width="0.1606%" height="15" fill="rgb(210,175,26)" fg:x="921" fg:w="2"/><text x="74.2259%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.0562%" y="357" width="0.0803%" height="15" fill="rgb(210,43,33)" fg:x="922" fg:w="1"/><text x="74.3062%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.0562%" y="341" width="0.0803%" height="15" fill="rgb(224,46,17)" fg:x="922" fg:w="1"/><text x="74.3062%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.0562%" y="325" width="0.0803%" height="15" fill="rgb(254,24,38)" fg:x="922" fg:w="1"/><text x="74.3062%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.0562%" y="309" width="0.0803%" height="15" fill="rgb(248,32,0)" fg:x="922" fg:w="1"/><text x="74.3062%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.0562%" y="293" width="0.0803%" height="15" fill="rgb(224,37,41)" fg:x="922" fg:w="1"/><text x="74.3062%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.0562%" y="277" width="0.0803%" height="15" fill="rgb(252,70,22)" fg:x="922" fg:w="1"/><text x="74.3062%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.0562%" y="261" width="0.0803%" height="15" fill="rgb(241,123,50)" fg:x="922" fg:w="1"/><text x="74.3062%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.1365%" y="389" width="0.0803%" height="15" fill="rgb(246,138,33)" fg:x="923" fg:w="1"/><text x="74.3865%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="74.1365%" y="373" width="0.0803%" height="15" fill="rgb(218,39,32)" fg:x="923" fg:w="1"/><text x="74.3865%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.2972%" y="357" width="0.0803%" height="15" fill="rgb(241,229,10)" fg:x="925" fg:w="1"/><text x="74.5472%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="74.2169%" y="389" width="0.2410%" height="15" fill="rgb(212,160,10)" fg:x="924" fg:w="3"/><text x="74.4669%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="74.2169%" y="373" width="0.2410%" height="15" fill="rgb(227,48,51)" fg:x="924" fg:w="3"/><text x="74.4669%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3775%" y="357" width="0.0803%" height="15" fill="rgb(238,159,21)" fg:x="926" fg:w="1"/><text x="74.6275%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3775%" y="341" width="0.0803%" height="15" fill="rgb(216,1,10)" fg:x="926" fg:w="1"/><text x="74.6275%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.3775%" y="325" width="0.0803%" height="15" fill="rgb(209,228,25)" fg:x="926" fg:w="1"/><text x="74.6275%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3775%" y="309" width="0.0803%" height="15" fill="rgb(234,160,10)" fg:x="926" fg:w="1"/><text x="74.6275%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3775%" y="293" width="0.0803%" height="15" fill="rgb(212,66,25)" fg:x="926" fg:w="1"/><text x="74.6275%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3775%" y="277" width="0.0803%" height="15" fill="rgb(254,121,18)" fg:x="926" fg:w="1"/><text x="74.6275%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.3775%" y="261" width="0.0803%" height="15" fill="rgb(219,127,1)" fg:x="926" fg:w="1"/><text x="74.6275%" y="271.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="74.4578%" y="341" width="0.0803%" height="15" fill="rgb(219,224,42)" fg:x="927" fg:w="1"/><text x="74.7078%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="74.4578%" y="325" width="0.0803%" height="15" fill="rgb(253,130,22)" fg:x="927" fg:w="1"/><text x="74.7078%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.4578%" y="309" width="0.0803%" height="15" fill="rgb(253,39,28)" fg:x="927" fg:w="1"/><text x="74.7078%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="74.4578%" y="293" width="0.0803%" height="15" fill="rgb(231,126,37)" fg:x="927" fg:w="1"/><text x="74.7078%" y="303.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="74.4578%" y="277" width="0.0803%" height="15" fill="rgb(251,145,14)" fg:x="927" fg:w="1"/><text x="74.7078%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.5382%" y="309" width="0.0803%" height="15" fill="rgb(229,164,30)" fg:x="928" fg:w="1"/><text x="74.7882%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.5382%" y="293" width="0.0803%" height="15" fill="rgb(233,227,54)" fg:x="928" fg:w="1"/><text x="74.7882%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.5382%" y="277" width="0.0803%" height="15" fill="rgb(240,94,22)" fg:x="928" fg:w="1"/><text x="74.7882%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5382%" y="261" width="0.0803%" height="15" fill="rgb(217,56,16)" fg:x="928" fg:w="1"/><text x="74.7882%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.6185%" y="309" width="0.0803%" height="15" fill="rgb(229,133,38)" fg:x="929" fg:w="1"/><text x="74.8685%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.6185%" y="293" width="0.0803%" height="15" fill="rgb(225,139,35)" fg:x="929" fg:w="1"/><text x="74.8685%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="74.6185%" y="277" width="0.0803%" height="15" fill="rgb(223,100,16)" fg:x="929" fg:w="1"/><text x="74.8685%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="74.6185%" y="261" width="0.0803%" height="15" fill="rgb(207,43,50)" fg:x="929" fg:w="1"/><text x="74.8685%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="74.6185%" y="245" width="0.0803%" height="15" fill="rgb(237,221,9)" fg:x="929" fg:w="1"/><text x="74.8685%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="74.6185%" y="229" width="0.0803%" height="15" fill="rgb(236,134,24)" fg:x="929" fg:w="1"/><text x="74.8685%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="74.8594%" y="261" width="0.1606%" height="15" fill="rgb(222,173,4)" fg:x="932" fg:w="2"/><text x="75.1094%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.9398%" y="245" width="0.0803%" height="15" fill="rgb(234,144,52)" fg:x="933" fg:w="1"/><text x="75.1898%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="75.0201%" y="245" width="0.1606%" height="15" fill="rgb(223,41,7)" fg:x="934" fg:w="2"/><text x="75.2701%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="75.0201%" y="229" width="0.1606%" height="15" fill="rgb(226,143,9)" fg:x="934" fg:w="2"/><text x="75.2701%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="75.1807%" y="229" width="0.0803%" height="15" fill="rgb(234,43,37)" fg:x="936" fg:w="1"/><text x="75.4307%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="75.1807%" y="245" width="0.1606%" height="15" fill="rgb(224,188,11)" fg:x="936" fg:w="2"/><text x="75.4307%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="75.2610%" y="229" width="0.0803%" height="15" fill="rgb(233,113,28)" fg:x="937" fg:w="1"/><text x="75.5110%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="75.2610%" y="213" width="0.0803%" height="15" fill="rgb(215,16,1)" fg:x="937" fg:w="1"/><text x="75.5110%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.2610%" y="197" width="0.0803%" height="15" fill="rgb(238,74,38)" fg:x="937" fg:w="1"/><text x="75.5110%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="75.3414%" y="181" width="0.0803%" height="15" fill="rgb(221,66,35)" fg:x="938" fg:w="1"/><text x="75.5914%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (16 samples, 1.29%)</title><rect x="75.4217%" y="181" width="1.2851%" height="15" fill="rgb(251,225,2)" fg:x="939" fg:w="16"/><text x="75.6717%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (16 samples, 1.29%)</title><rect x="75.4217%" y="165" width="1.2851%" height="15" fill="rgb(240,169,18)" fg:x="939" fg:w="16"/><text x="75.6717%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (16 samples, 1.29%)</title><rect x="75.4217%" y="149" width="1.2851%" height="15" fill="rgb(243,130,50)" fg:x="939" fg:w="16"/><text x="75.6717%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (19 samples, 1.53%)</title><rect x="75.3414%" y="245" width="1.5261%" height="15" fill="rgb(228,75,13)" fg:x="938" fg:w="19"/><text x="75.5914%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 1.53%)</title><rect x="75.3414%" y="229" width="1.5261%" height="15" fill="rgb(252,95,35)" fg:x="938" fg:w="19"/><text x="75.5914%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (19 samples, 1.53%)</title><rect x="75.3414%" y="213" width="1.5261%" height="15" fill="rgb(222,180,54)" fg:x="938" fg:w="19"/><text x="75.5914%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (19 samples, 1.53%)</title><rect x="75.3414%" y="197" width="1.5261%" height="15" fill="rgb(250,110,34)" fg:x="938" fg:w="19"/><text x="75.5914%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="76.7068%" y="181" width="0.1606%" height="15" fill="rgb(208,100,21)" fg:x="955" fg:w="2"/><text x="76.9568%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="76.8675%" y="245" width="0.0803%" height="15" fill="rgb(209,123,47)" fg:x="957" fg:w="1"/><text x="77.1175%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="76.8675%" y="229" width="0.0803%" height="15" fill="rgb(237,147,9)" fg:x="957" fg:w="1"/><text x="77.1175%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::insert (1 samples, 0.08%)</title><rect x="76.8675%" y="213" width="0.0803%" height="15" fill="rgb(228,206,23)" fg:x="957" fg:w="1"/><text x="77.1175%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (25 samples, 2.01%)</title><rect x="75.0201%" y="261" width="2.0080%" height="15" fill="rgb(217,174,46)" fg:x="934" fg:w="25"/><text x="75.2701%" y="271.50">r..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="76.9478%" y="245" width="0.0803%" height="15" fill="rgb(231,126,21)" fg:x="958" fg:w="1"/><text x="77.1978%" y="255.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="76.9478%" y="229" width="0.0803%" height="15" fill="rgb(245,26,1)" fg:x="958" fg:w="1"/><text x="77.1978%" y="239.50"></text></g><g><title>regex::regex::string::Regex::new (30 samples, 2.41%)</title><rect x="74.6988%" y="309" width="2.4096%" height="15" fill="rgb(224,138,39)" fg:x="930" fg:w="30"/><text x="74.9488%" y="319.50">re..</text></g><g><title>regex::builders::string::RegexBuilder::build (29 samples, 2.33%)</title><rect x="74.7791%" y="293" width="2.3293%" height="15" fill="rgb(208,97,3)" fg:x="931" fg:w="29"/><text x="75.0291%" y="303.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (29 samples, 2.33%)</title><rect x="74.7791%" y="277" width="2.3293%" height="15" fill="rgb(222,77,29)" fg:x="931" fg:w="29"/><text x="75.0291%" y="287.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="77.0281%" y="261" width="0.0803%" height="15" fill="rgb(243,188,36)" fg:x="959" fg:w="1"/><text x="77.2781%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="77.0281%" y="245" width="0.0803%" height="15" fill="rgb(218,214,3)" fg:x="959" fg:w="1"/><text x="77.2781%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="77.0281%" y="229" width="0.0803%" height="15" fill="rgb(211,183,45)" fg:x="959" fg:w="1"/><text x="77.2781%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="77.0281%" y="213" width="0.0803%" height="15" fill="rgb(230,218,25)" fg:x="959" fg:w="1"/><text x="77.2781%" y="223.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="77.0281%" y="197" width="0.0803%" height="15" fill="rgb(233,86,6)" fg:x="959" fg:w="1"/><text x="77.2781%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (35 samples, 2.81%)</title><rect x="74.5382%" y="325" width="2.8112%" height="15" fill="rgb(220,59,24)" fg:x="928" fg:w="35"/><text x="74.7882%" y="335.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="77.1084%" y="309" width="0.2410%" height="15" fill="rgb(227,60,1)" fg:x="960" fg:w="3"/><text x="77.3584%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="77.1084%" y="293" width="0.2410%" height="15" fill="rgb(216,212,54)" fg:x="960" fg:w="3"/><text x="77.3584%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="77.1084%" y="277" width="0.2410%" height="15" fill="rgb(227,81,54)" fg:x="960" fg:w="3"/><text x="77.3584%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="77.1888%" y="261" width="0.1606%" height="15" fill="rgb(206,204,43)" fg:x="961" fg:w="2"/><text x="77.4388%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="77.1888%" y="245" width="0.1606%" height="15" fill="rgb(219,29,26)" fg:x="961" fg:w="2"/><text x="77.4388%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="77.2691%" y="229" width="0.0803%" height="15" fill="rgb(252,40,36)" fg:x="962" fg:w="1"/><text x="77.5191%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="77.4297%" y="277" width="0.0803%" height="15" fill="rgb(224,205,39)" fg:x="964" fg:w="1"/><text x="77.6797%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="77.4297%" y="261" width="0.0803%" height="15" fill="rgb(222,13,21)" fg:x="964" fg:w="1"/><text x="77.6797%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.4297%" y="245" width="0.0803%" height="15" fill="rgb(243,139,6)" fg:x="964" fg:w="1"/><text x="77.6797%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="77.4297%" y="309" width="0.1606%" height="15" fill="rgb(237,101,11)" fg:x="964" fg:w="2"/><text x="77.6797%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="77.4297%" y="293" width="0.1606%" height="15" fill="rgb(254,49,28)" fg:x="964" fg:w="2"/><text x="77.6797%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="77.5100%" y="277" width="0.0803%" height="15" fill="rgb(223,41,21)" fg:x="965" fg:w="1"/><text x="77.7600%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.5100%" y="261" width="0.0803%" height="15" fill="rgb(225,103,29)" fg:x="965" fg:w="1"/><text x="77.7600%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="77.5904%" y="293" width="0.0803%" height="15" fill="rgb(244,82,43)" fg:x="966" fg:w="1"/><text x="77.8404%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="77.5904%" y="277" width="0.0803%" height="15" fill="rgb(217,39,3)" fg:x="966" fg:w="1"/><text x="77.8404%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="77.5904%" y="261" width="0.0803%" height="15" fill="rgb(239,128,25)" fg:x="966" fg:w="1"/><text x="77.8404%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.5904%" y="245" width="0.0803%" height="15" fill="rgb(210,192,37)" fg:x="966" fg:w="1"/><text x="77.8404%" y="255.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (2 samples, 0.16%)</title><rect x="77.5904%" y="309" width="0.1606%" height="15" fill="rgb(219,98,18)" fg:x="966" fg:w="2"/><text x="77.8404%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="77.6707%" y="293" width="0.0803%" height="15" fill="rgb(224,228,38)" fg:x="967" fg:w="1"/><text x="77.9207%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="77.6707%" y="277" width="0.0803%" height="15" fill="rgb(241,129,43)" fg:x="967" fg:w="1"/><text x="77.9207%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="77.6707%" y="261" width="0.0803%" height="15" fill="rgb(223,8,51)" fg:x="967" fg:w="1"/><text x="77.9207%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="77.6707%" y="245" width="0.0803%" height="15" fill="rgb(233,76,24)" fg:x="967" fg:w="1"/><text x="77.9207%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="77.6707%" y="229" width="0.0803%" height="15" fill="rgb(219,115,10)" fg:x="967" fg:w="1"/><text x="77.9207%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="77.6707%" y="213" width="0.0803%" height="15" fill="rgb(222,137,12)" fg:x="967" fg:w="1"/><text x="77.9207%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.7510%" y="261" width="0.0803%" height="15" fill="rgb(216,192,16)" fg:x="968" fg:w="1"/><text x="78.0010%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.7510%" y="245" width="0.0803%" height="15" fill="rgb(247,6,27)" fg:x="968" fg:w="1"/><text x="78.0010%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.8313%" y="261" width="0.0803%" height="15" fill="rgb(254,39,44)" fg:x="969" fg:w="1"/><text x="78.0813%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="77.9116%" y="261" width="0.1606%" height="15" fill="rgb(251,116,35)" fg:x="970" fg:w="2"/><text x="78.1616%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="77.9116%" y="245" width="0.1606%" height="15" fill="rgb(208,61,44)" fg:x="970" fg:w="2"/><text x="78.1616%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="77.9920%" y="229" width="0.0803%" height="15" fill="rgb(250,34,5)" fg:x="971" fg:w="1"/><text x="78.2420%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.9920%" y="213" width="0.0803%" height="15" fill="rgb(241,40,15)" fg:x="971" fg:w="1"/><text x="78.2420%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.2329%" y="245" width="0.0803%" height="15" fill="rgb(229,182,2)" fg:x="974" fg:w="1"/><text x="78.4829%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.3936%" y="229" width="0.0803%" height="15" fill="rgb(244,148,52)" fg:x="976" fg:w="1"/><text x="78.6436%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="78.3133%" y="245" width="0.5622%" height="15" fill="rgb(225,211,4)" fg:x="975" fg:w="7"/><text x="78.5633%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="78.4739%" y="229" width="0.4016%" height="15" fill="rgb(208,222,47)" fg:x="977" fg:w="5"/><text x="78.7239%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="78.8755%" y="245" width="0.0803%" height="15" fill="rgb(233,162,0)" fg:x="982" fg:w="1"/><text x="79.1255%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="78.8755%" y="229" width="0.0803%" height="15" fill="rgb(241,54,13)" fg:x="982" fg:w="1"/><text x="79.1255%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.32%)</title><rect x="79.0361%" y="213" width="0.3213%" height="15" fill="rgb(213,89,18)" fg:x="984" fg:w="4"/><text x="79.2861%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="79.1165%" y="197" width="0.2410%" height="15" fill="rgb(215,170,37)" fg:x="985" fg:w="3"/><text x="79.3665%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="79.1968%" y="181" width="0.1606%" height="15" fill="rgb(216,133,15)" fg:x="986" fg:w="2"/><text x="79.4468%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="79.1968%" y="165" width="0.1606%" height="15" fill="rgb(230,42,19)" fg:x="986" fg:w="2"/><text x="79.4468%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.2771%" y="149" width="0.0803%" height="15" fill="rgb(221,103,41)" fg:x="987" fg:w="1"/><text x="79.5271%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="79.3574%" y="213" width="0.1606%" height="15" fill="rgb(220,142,31)" fg:x="988" fg:w="2"/><text x="79.6074%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="79.3574%" y="197" width="0.1606%" height="15" fill="rgb(239,218,4)" fg:x="988" fg:w="2"/><text x="79.6074%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="79.3574%" y="181" width="0.1606%" height="15" fill="rgb(232,16,4)" fg:x="988" fg:w="2"/><text x="79.6074%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.64%)</title><rect x="78.9558%" y="245" width="0.6426%" height="15" fill="rgb(226,213,25)" fg:x="983" fg:w="8"/><text x="79.2058%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="78.9558%" y="229" width="0.6426%" height="15" fill="rgb(235,135,19)" fg:x="983" fg:w="8"/><text x="79.2058%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="79.5181%" y="213" width="0.0803%" height="15" fill="rgb(240,107,29)" fg:x="990" fg:w="1"/><text x="79.7681%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.9197%" y="133" width="0.0803%" height="15" fill="rgb(206,164,44)" fg:x="995" fg:w="1"/><text x="80.1697%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="80.0000%" y="133" width="0.0803%" height="15" fill="rgb(210,23,48)" fg:x="996" fg:w="1"/><text x="80.2500%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.0000%" y="117" width="0.0803%" height="15" fill="rgb(212,138,25)" fg:x="996" fg:w="1"/><text x="80.2500%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.0000%" y="101" width="0.0803%" height="15" fill="rgb(224,152,3)" fg:x="996" fg:w="1"/><text x="80.2500%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.0000%" y="85" width="0.0803%" height="15" fill="rgb(214,38,23)" fg:x="996" fg:w="1"/><text x="80.2500%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="80.0803%" y="133" width="0.0803%" height="15" fill="rgb(215,161,10)" fg:x="997" fg:w="1"/><text x="80.3303%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="80.0803%" y="117" width="0.0803%" height="15" fill="rgb(240,185,7)" fg:x="997" fg:w="1"/><text x="80.3303%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="80.0803%" y="101" width="0.0803%" height="15" fill="rgb(244,104,25)" fg:x="997" fg:w="1"/><text x="80.3303%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="80.0803%" y="85" width="0.0803%" height="15" fill="rgb(242,140,44)" fg:x="997" fg:w="1"/><text x="80.3303%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.0803%" y="69" width="0.0803%" height="15" fill="rgb(245,30,19)" fg:x="997" fg:w="1"/><text x="80.3303%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.0803%" y="53" width="0.0803%" height="15" fill="rgb(219,208,35)" fg:x="997" fg:w="1"/><text x="80.3303%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.0803%" y="37" width="0.0803%" height="15" fill="rgb(235,200,7)" fg:x="997" fg:w="1"/><text x="80.3303%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (19 samples, 1.53%)</title><rect x="80.1606%" y="133" width="1.5261%" height="15" fill="rgb(220,193,10)" fg:x="998" fg:w="19"/><text x="80.4106%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (19 samples, 1.53%)</title><rect x="80.1606%" y="117" width="1.5261%" height="15" fill="rgb(212,216,39)" fg:x="998" fg:w="19"/><text x="80.4106%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (19 samples, 1.53%)</title><rect x="80.1606%" y="101" width="1.5261%" height="15" fill="rgb(212,134,19)" fg:x="998" fg:w="19"/><text x="80.4106%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="81.6867%" y="133" width="0.2410%" height="15" fill="rgb(230,57,24)" fg:x="1017" fg:w="3"/><text x="81.9367%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.8474%" y="117" width="0.0803%" height="15" fill="rgb(238,209,37)" fg:x="1019" fg:w="1"/><text x="82.0974%" y="127.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="81.9277%" y="133" width="0.0803%" height="15" fill="rgb(247,11,45)" fg:x="1020" fg:w="1"/><text x="82.1777%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 2.49%)</title><rect x="79.5984%" y="229" width="2.4900%" height="15" fill="rgb(222,126,6)" fg:x="991" fg:w="31"/><text x="79.8484%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (31 samples, 2.49%)</title><rect x="79.5984%" y="213" width="2.4900%" height="15" fill="rgb(245,77,24)" fg:x="991" fg:w="31"/><text x="79.8484%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (31 samples, 2.49%)</title><rect x="79.5984%" y="197" width="2.4900%" height="15" fill="rgb(227,14,24)" fg:x="991" fg:w="31"/><text x="79.8484%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (31 samples, 2.49%)</title><rect x="79.5984%" y="181" width="2.4900%" height="15" fill="rgb(211,112,42)" fg:x="991" fg:w="31"/><text x="79.8484%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (31 samples, 2.49%)</title><rect x="79.5984%" y="165" width="2.4900%" height="15" fill="rgb(230,103,42)" fg:x="991" fg:w="31"/><text x="79.8484%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (31 samples, 2.49%)</title><rect x="79.5984%" y="149" width="2.4900%" height="15" fill="rgb(228,125,42)" fg:x="991" fg:w="31"/><text x="79.8484%" y="159.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="82.0080%" y="133" width="0.0803%" height="15" fill="rgb(243,33,6)" fg:x="1021" fg:w="1"/><text x="82.2580%" y="143.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="82.1687%" y="213" width="0.0803%" height="15" fill="rgb(231,2,40)" fg:x="1023" fg:w="1"/><text x="82.4187%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="82.2490%" y="213" width="0.0803%" height="15" fill="rgb(224,200,53)" fg:x="1024" fg:w="1"/><text x="82.4990%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="82.2490%" y="197" width="0.0803%" height="15" fill="rgb(215,116,36)" fg:x="1024" fg:w="1"/><text x="82.4990%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.4900%" y="165" width="0.0803%" height="15" fill="rgb(240,23,51)" fg:x="1027" fg:w="1"/><text x="82.7400%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="82.3293%" y="213" width="0.3213%" height="15" fill="rgb(221,72,5)" fg:x="1025" fg:w="4"/><text x="82.5793%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="82.4900%" y="197" width="0.1606%" height="15" fill="rgb(245,142,9)" fg:x="1027" fg:w="2"/><text x="82.7400%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="82.4900%" y="181" width="0.1606%" height="15" fill="rgb(207,34,16)" fg:x="1027" fg:w="2"/><text x="82.7400%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.5703%" y="165" width="0.0803%" height="15" fill="rgb(252,101,12)" fg:x="1028" fg:w="1"/><text x="82.8203%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="82.6506%" y="213" width="0.1606%" height="15" fill="rgb(239,89,37)" fg:x="1029" fg:w="2"/><text x="82.9006%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (60 samples, 4.82%)</title><rect x="78.0723%" y="261" width="4.8193%" height="15" fill="rgb(252,227,37)" fg:x="972" fg:w="60"/><text x="78.3223%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (41 samples, 3.29%)</title><rect x="79.5984%" y="245" width="3.2932%" height="15" fill="rgb(212,164,17)" fg:x="991" fg:w="41"/><text x="79.8484%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.80%)</title><rect x="82.0884%" y="229" width="0.8032%" height="15" fill="rgb(240,86,13)" fg:x="1022" fg:w="10"/><text x="82.3384%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="82.8112%" y="213" width="0.0803%" height="15" fill="rgb(233,183,32)" fg:x="1031" fg:w="1"/><text x="83.0612%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.8916%" y="229" width="0.0803%" height="15" fill="rgb(205,201,38)" fg:x="1032" fg:w="1"/><text x="83.1416%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.8916%" y="213" width="0.0803%" height="15" fill="rgb(210,122,38)" fg:x="1032" fg:w="1"/><text x="83.1416%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="82.9719%" y="229" width="0.0803%" height="15" fill="rgb(241,174,26)" fg:x="1033" fg:w="1"/><text x="83.2219%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="82.8916%" y="261" width="0.2410%" height="15" fill="rgb(219,89,7)" fg:x="1032" fg:w="3"/><text x="83.1416%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="82.8916%" y="245" width="0.2410%" height="15" fill="rgb(246,9,24)" fg:x="1032" fg:w="3"/><text x="83.1416%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="83.0522%" y="229" width="0.0803%" height="15" fill="rgb(205,132,21)" fg:x="1034" fg:w="1"/><text x="83.3022%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="83.0522%" y="213" width="0.0803%" height="15" fill="rgb(210,11,17)" fg:x="1034" fg:w="1"/><text x="83.3022%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.2129%" y="197" width="0.0803%" height="15" fill="rgb(226,138,14)" fg:x="1036" fg:w="1"/><text x="83.4629%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.2932%" y="197" width="0.0803%" height="15" fill="rgb(224,108,44)" fg:x="1037" fg:w="1"/><text x="83.5432%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.2932%" y="181" width="0.0803%" height="15" fill="rgb(247,114,36)" fg:x="1037" fg:w="1"/><text x="83.5432%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.2932%" y="165" width="0.0803%" height="15" fill="rgb(231,183,14)" fg:x="1037" fg:w="1"/><text x="83.5432%" y="175.50"></text></g><g><title>indefinite::rules::number::Number::check (76 samples, 6.10%)</title><rect x="77.3494%" y="325" width="6.1044%" height="15" fill="rgb(218,168,4)" fg:x="963" fg:w="76"/><text x="77.5994%" y="335.50">indefini..</text></g><g><title>regex::regex::string::Regex::new (71 samples, 5.70%)</title><rect x="77.7510%" y="309" width="5.7028%" height="15" fill="rgb(210,8,3)" fg:x="968" fg:w="71"/><text x="78.0010%" y="319.50">regex::..</text></g><g><title>regex::builders::string::RegexBuilder::build (71 samples, 5.70%)</title><rect x="77.7510%" y="293" width="5.7028%" height="15" fill="rgb(216,165,0)" fg:x="968" fg:w="71"/><text x="78.0010%" y="303.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (71 samples, 5.70%)</title><rect x="77.7510%" y="277" width="5.7028%" height="15" fill="rgb(245,120,5)" fg:x="968" fg:w="71"/><text x="78.0010%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="83.1325%" y="261" width="0.3213%" height="15" fill="rgb(249,121,32)" fg:x="1035" fg:w="4"/><text x="83.3825%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="83.1325%" y="245" width="0.3213%" height="15" fill="rgb(211,55,33)" fg:x="1035" fg:w="4"/><text x="83.3825%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="83.1325%" y="229" width="0.3213%" height="15" fill="rgb(254,46,35)" fg:x="1035" fg:w="4"/><text x="83.3825%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="83.1325%" y="213" width="0.3213%" height="15" fill="rgb(213,213,19)" fg:x="1035" fg:w="4"/><text x="83.3825%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="83.3735%" y="197" width="0.0803%" height="15" fill="rgb(207,152,44)" fg:x="1038" fg:w="1"/><text x="83.6235%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="83.4538%" y="245" width="0.1606%" height="15" fill="rgb(227,195,36)" fg:x="1039" fg:w="2"/><text x="83.7038%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="83.4538%" y="229" width="0.1606%" height="15" fill="rgb(210,137,36)" fg:x="1039" fg:w="2"/><text x="83.7038%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="83.4538%" y="213" width="0.1606%" height="15" fill="rgb(253,47,47)" fg:x="1039" fg:w="2"/><text x="83.7038%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="83.4538%" y="197" width="0.1606%" height="15" fill="rgb(230,147,18)" fg:x="1039" fg:w="2"/><text x="83.7038%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="83.5341%" y="181" width="0.0803%" height="15" fill="rgb(247,33,49)" fg:x="1040" fg:w="1"/><text x="83.7841%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="83.5341%" y="165" width="0.0803%" height="15" fill="rgb(239,26,29)" fg:x="1040" fg:w="1"/><text x="83.7841%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="83.6145%" y="213" width="0.0803%" height="15" fill="rgb(245,145,52)" fg:x="1041" fg:w="1"/><text x="83.8645%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (4 samples, 0.32%)</title><rect x="83.4538%" y="293" width="0.3213%" height="15" fill="rgb(224,139,32)" fg:x="1039" fg:w="4"/><text x="83.7038%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (4 samples, 0.32%)</title><rect x="83.4538%" y="277" width="0.3213%" height="15" fill="rgb(238,202,19)" fg:x="1039" fg:w="4"/><text x="83.7038%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (4 samples, 0.32%)</title><rect x="83.4538%" y="261" width="0.3213%" height="15" fill="rgb(249,211,53)" fg:x="1039" fg:w="4"/><text x="83.7038%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="83.6145%" y="245" width="0.1606%" height="15" fill="rgb(237,229,33)" fg:x="1041" fg:w="2"/><text x="83.8645%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="83.6145%" y="229" width="0.1606%" height="15" fill="rgb(208,97,40)" fg:x="1041" fg:w="2"/><text x="83.8645%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="83.6948%" y="213" width="0.0803%" height="15" fill="rgb(254,36,16)" fg:x="1042" fg:w="1"/><text x="83.9448%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="83.6948%" y="197" width="0.0803%" height="15" fill="rgb(221,7,12)" fg:x="1042" fg:w="1"/><text x="83.9448%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="83.6948%" y="181" width="0.0803%" height="15" fill="rgb(205,11,12)" fg:x="1042" fg:w="1"/><text x="83.9448%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="83.7751%" y="229" width="0.0803%" height="15" fill="rgb(227,72,28)" fg:x="1043" fg:w="1"/><text x="84.0251%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.7751%" y="213" width="0.0803%" height="15" fill="rgb(228,7,34)" fg:x="1043" fg:w="1"/><text x="84.0251%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.7751%" y="197" width="0.0803%" height="15" fill="rgb(230,52,42)" fg:x="1043" fg:w="1"/><text x="84.0251%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (124 samples, 9.96%)</title><rect x="73.9759%" y="405" width="9.9598%" height="15" fill="rgb(219,177,53)" fg:x="921" fg:w="124"/><text x="74.2259%" y="415.50">&lt;&amp;kernel::mode..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (118 samples, 9.48%)</title><rect x="74.4578%" y="389" width="9.4779%" height="15" fill="rgb(243,196,34)" fg:x="927" fg:w="118"/><text x="74.7078%" y="399.50">plugins_core::..</text></g><g><title>indefinite::indefinite (118 samples, 9.48%)</title><rect x="74.4578%" y="373" width="9.4779%" height="15" fill="rgb(213,66,49)" fg:x="927" fg:w="118"/><text x="74.7078%" y="383.50">indefinite::in..</text></g><g><title>indefinite::methods::indefinite (118 samples, 9.48%)</title><rect x="74.4578%" y="357" width="9.4779%" height="15" fill="rgb(233,11,50)" fg:x="927" fg:w="118"/><text x="74.7078%" y="367.50">indefinite::me..</text></g><g><title>indefinite::methods::apply_rules (117 samples, 9.40%)</title><rect x="74.5382%" y="341" width="9.3976%" height="15" fill="rgb(235,190,6)" fg:x="928" fg:w="117"/><text x="74.7882%" y="351.50">indefinite::m..</text></g><g><title>indefinite::rules::other::Other::run (6 samples, 0.48%)</title><rect x="83.4538%" y="325" width="0.4819%" height="15" fill="rgb(212,64,44)" fg:x="1039" fg:w="6"/><text x="83.7038%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (6 samples, 0.48%)</title><rect x="83.4538%" y="309" width="0.4819%" height="15" fill="rgb(206,95,44)" fg:x="1039" fg:w="6"/><text x="83.7038%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="83.7751%" y="293" width="0.1606%" height="15" fill="rgb(227,136,25)" fg:x="1043" fg:w="2"/><text x="84.0251%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="83.7751%" y="277" width="0.1606%" height="15" fill="rgb(206,178,17)" fg:x="1043" fg:w="2"/><text x="84.0251%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="83.7751%" y="261" width="0.1606%" height="15" fill="rgb(208,168,35)" fg:x="1043" fg:w="2"/><text x="84.0251%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="83.7751%" y="245" width="0.1606%" height="15" fill="rgb(213,210,40)" fg:x="1043" fg:w="2"/><text x="84.0251%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="83.8554%" y="229" width="0.0803%" height="15" fill="rgb(236,60,6)" fg:x="1044" fg:w="1"/><text x="84.1054%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.8554%" y="213" width="0.0803%" height="15" fill="rgb(220,186,36)" fg:x="1044" fg:w="1"/><text x="84.1054%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.8554%" y="197" width="0.0803%" height="15" fill="rgb(225,120,49)" fg:x="1044" fg:w="1"/><text x="84.1054%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.8554%" y="181" width="0.0803%" height="15" fill="rgb(250,115,20)" fg:x="1044" fg:w="1"/><text x="84.1054%" y="191.50"></text></g><g><title>plugins_core::tools::contained_by (1 samples, 0.08%)</title><rect x="83.9357%" y="357" width="0.0803%" height="15" fill="rgb(207,214,23)" fg:x="1045" fg:w="1"/><text x="84.1857%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.9357%" y="341" width="0.0803%" height="15" fill="rgb(240,9,18)" fg:x="1045" fg:w="1"/><text x="84.1857%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="83.9357%" y="325" width="0.0803%" height="15" fill="rgb(232,170,48)" fg:x="1045" fg:w="1"/><text x="84.1857%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.9357%" y="309" width="0.0803%" height="15" fill="rgb(236,149,23)" fg:x="1045" fg:w="1"/><text x="84.1857%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="83.9357%" y="293" width="0.0803%" height="15" fill="rgb(210,125,42)" fg:x="1045" fg:w="1"/><text x="84.1857%" y="303.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="84.0161%" y="357" width="0.0803%" height="15" fill="rgb(207,201,52)" fg:x="1046" fg:w="1"/><text x="84.2661%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="84.0161%" y="341" width="0.0803%" height="15" fill="rgb(250,187,37)" fg:x="1046" fg:w="1"/><text x="84.2661%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.0161%" y="325" width="0.0803%" height="15" fill="rgb(214,186,2)" fg:x="1046" fg:w="1"/><text x="84.2661%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.0161%" y="309" width="0.0803%" height="15" fill="rgb(207,189,15)" fg:x="1046" fg:w="1"/><text x="84.2661%" y="319.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (3 samples, 0.24%)</title><rect x="83.9357%" y="373" width="0.2410%" height="15" fill="rgb(221,99,21)" fg:x="1045" fg:w="3"/><text x="84.1857%" y="383.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="84.0964%" y="357" width="0.0803%" height="15" fill="rgb(212,67,18)" fg:x="1047" fg:w="1"/><text x="84.3464%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="84.0964%" y="341" width="0.0803%" height="15" fill="rgb(226,24,24)" fg:x="1047" fg:w="1"/><text x="84.3464%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.0964%" y="325" width="0.0803%" height="15" fill="rgb(252,123,31)" fg:x="1047" fg:w="1"/><text x="84.3464%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.0964%" y="309" width="0.0803%" height="15" fill="rgb(251,227,47)" fg:x="1047" fg:w="1"/><text x="84.3464%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="84.0964%" y="293" width="0.0803%" height="15" fill="rgb(233,84,53)" fg:x="1047" fg:w="1"/><text x="84.3464%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="84.0964%" y="277" width="0.0803%" height="15" fill="rgb(228,57,19)" fg:x="1047" fg:w="1"/><text x="84.3464%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.0964%" y="261" width="0.0803%" height="15" fill="rgb(251,81,5)" fg:x="1047" fg:w="1"/><text x="84.3464%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (4 samples, 0.32%)</title><rect x="83.9357%" y="405" width="0.3213%" height="15" fill="rgb(236,211,27)" fg:x="1045" fg:w="4"/><text x="84.1857%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (4 samples, 0.32%)</title><rect x="83.9357%" y="389" width="0.3213%" height="15" fill="rgb(218,21,6)" fg:x="1045" fg:w="4"/><text x="84.1857%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="84.1767%" y="373" width="0.0803%" height="15" fill="rgb(239,104,19)" fg:x="1048" fg:w="1"/><text x="84.4267%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="84.1767%" y="357" width="0.0803%" height="15" fill="rgb(234,179,27)" fg:x="1048" fg:w="1"/><text x="84.4267%" y="367.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="84.1767%" y="341" width="0.0803%" height="15" fill="rgb(221,154,39)" fg:x="1048" fg:w="1"/><text x="84.4267%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="84.1767%" y="325" width="0.0803%" height="15" fill="rgb(228,190,1)" fg:x="1048" fg:w="1"/><text x="84.4267%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="84.1767%" y="309" width="0.0803%" height="15" fill="rgb(244,122,33)" fg:x="1048" fg:w="1"/><text x="84.4267%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="84.1767%" y="293" width="0.0803%" height="15" fill="rgb(227,56,37)" fg:x="1048" fg:w="1"/><text x="84.4267%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.1767%" y="277" width="0.0803%" height="15" fill="rgb(207,158,16)" fg:x="1048" fg:w="1"/><text x="84.4267%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.1767%" y="261" width="0.0803%" height="15" fill="rgb(251,222,30)" fg:x="1048" fg:w="1"/><text x="84.4267%" y="271.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="84.2570%" y="277" width="0.0803%" height="15" fill="rgb(240,22,49)" fg:x="1049" fg:w="1"/><text x="84.5070%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.2570%" y="261" width="0.0803%" height="15" fill="rgb(224,207,37)" fg:x="1049" fg:w="1"/><text x="84.5070%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.2570%" y="245" width="0.0803%" height="15" fill="rgb(249,188,40)" fg:x="1049" fg:w="1"/><text x="84.5070%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.2570%" y="229" width="0.0803%" height="15" fill="rgb(254,141,11)" fg:x="1049" fg:w="1"/><text x="84.5070%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.2570%" y="213" width="0.0803%" height="15" fill="rgb(231,177,6)" fg:x="1049" fg:w="1"/><text x="84.5070%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.2570%" y="197" width="0.0803%" height="15" fill="rgb(241,6,16)" fg:x="1049" fg:w="1"/><text x="84.5070%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.2570%" y="181" width="0.0803%" height="15" fill="rgb(230,50,14)" fg:x="1049" fg:w="1"/><text x="84.5070%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.2570%" y="165" width="0.0803%" height="15" fill="rgb(254,36,3)" fg:x="1049" fg:w="1"/><text x="84.5070%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.2570%" y="149" width="0.0803%" height="15" fill="rgb(226,149,37)" fg:x="1049" fg:w="1"/><text x="84.5070%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.2570%" y="133" width="0.0803%" height="15" fill="rgb(253,49,27)" fg:x="1049" fg:w="1"/><text x="84.5070%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.2570%" y="117" width="0.0803%" height="15" fill="rgb(249,182,52)" fg:x="1049" fg:w="1"/><text x="84.5070%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.2570%" y="101" width="0.0803%" height="15" fill="rgb(223,42,15)" fg:x="1049" fg:w="1"/><text x="84.5070%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="84.2570%" y="85" width="0.0803%" height="15" fill="rgb(232,31,42)" fg:x="1049" fg:w="1"/><text x="84.5070%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="84.2570%" y="69" width="0.0803%" height="15" fill="rgb(233,56,46)" fg:x="1049" fg:w="1"/><text x="84.5070%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="84.2570%" y="53" width="0.0803%" height="15" fill="rgb(241,143,21)" fg:x="1049" fg:w="1"/><text x="84.5070%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.2570%" y="37" width="0.0803%" height="15" fill="rgb(251,222,15)" fg:x="1049" fg:w="1"/><text x="84.5070%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="84.3373%" y="261" width="0.0803%" height="15" fill="rgb(242,101,40)" fg:x="1050" fg:w="1"/><text x="84.5873%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="84.3373%" y="245" width="0.0803%" height="15" fill="rgb(247,60,44)" fg:x="1050" fg:w="1"/><text x="84.5873%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="84.3373%" y="229" width="0.0803%" height="15" fill="rgb(254,48,47)" fg:x="1050" fg:w="1"/><text x="84.5873%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="84.3373%" y="213" width="0.0803%" height="15" fill="rgb(253,30,33)" fg:x="1050" fg:w="1"/><text x="84.5873%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="84.3373%" y="197" width="0.0803%" height="15" fill="rgb(253,214,47)" fg:x="1050" fg:w="1"/><text x="84.5873%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (3 samples, 0.24%)</title><rect x="84.2570%" y="373" width="0.2410%" height="15" fill="rgb(241,108,29)" fg:x="1049" fg:w="3"/><text x="84.5070%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (3 samples, 0.24%)</title><rect x="84.2570%" y="357" width="0.2410%" height="15" fill="rgb(240,36,2)" fg:x="1049" fg:w="3"/><text x="84.5070%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (3 samples, 0.24%)</title><rect x="84.2570%" y="341" width="0.2410%" height="15" fill="rgb(243,198,24)" fg:x="1049" fg:w="3"/><text x="84.5070%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (3 samples, 0.24%)</title><rect x="84.2570%" y="325" width="0.2410%" height="15" fill="rgb(225,98,27)" fg:x="1049" fg:w="3"/><text x="84.5070%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (3 samples, 0.24%)</title><rect x="84.2570%" y="309" width="0.2410%" height="15" fill="rgb(208,86,30)" fg:x="1049" fg:w="3"/><text x="84.5070%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (3 samples, 0.24%)</title><rect x="84.2570%" y="293" width="0.2410%" height="15" fill="rgb(242,157,11)" fg:x="1049" fg:w="3"/><text x="84.5070%" y="303.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (2 samples, 0.16%)</title><rect x="84.3373%" y="277" width="0.1606%" height="15" fill="rgb(244,84,16)" fg:x="1050" fg:w="2"/><text x="84.5873%" y="287.50"></text></g><g><title>rune::runtime::vec::&lt;impl rune::runtime::to_value::ToValue for alloc::vec::Vec&lt;T&gt;&gt;::to_value (1 samples, 0.08%)</title><rect x="84.4177%" y="261" width="0.0803%" height="15" fill="rgb(247,20,46)" fg:x="1051" fg:w="1"/><text x="84.6677%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (4 samples, 0.32%)</title><rect x="84.2570%" y="389" width="0.3213%" height="15" fill="rgb(240,157,20)" fg:x="1049" fg:w="4"/><text x="84.5070%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.4980%" y="373" width="0.0803%" height="15" fill="rgb(212,151,38)" fg:x="1052" fg:w="1"/><text x="84.7480%" y="383.50"></text></g><g><title>plugins_core::library::actions::reply_ok (5 samples, 0.40%)</title><rect x="84.2570%" y="405" width="0.4016%" height="15" fill="rgb(233,197,14)" fg:x="1049" fg:w="5"/><text x="84.5070%" y="415.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="84.5783%" y="389" width="0.0803%" height="15" fill="rgb(226,148,28)" fg:x="1053" fg:w="1"/><text x="84.8283%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (1 samples, 0.08%)</title><rect x="84.5783%" y="373" width="0.0803%" height="15" fill="rgb(244,141,30)" fg:x="1053" fg:w="1"/><text x="84.8283%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.5783%" y="357" width="0.0803%" height="15" fill="rgb(215,73,38)" fg:x="1053" fg:w="1"/><text x="84.8283%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="84.5783%" y="341" width="0.0803%" height="15" fill="rgb(230,148,29)" fg:x="1053" fg:w="1"/><text x="84.8283%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.5783%" y="325" width="0.0803%" height="15" fill="rgb(250,41,52)" fg:x="1053" fg:w="1"/><text x="84.8283%" y="335.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="84.6586%" y="389" width="0.0803%" height="15" fill="rgb(215,48,1)" fg:x="1054" fg:w="1"/><text x="84.9086%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.6586%" y="373" width="0.0803%" height="15" fill="rgb(205,223,38)" fg:x="1054" fg:w="1"/><text x="84.9086%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.6586%" y="357" width="0.0803%" height="15" fill="rgb(213,51,8)" fg:x="1054" fg:w="1"/><text x="84.9086%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="84.6586%" y="341" width="0.0803%" height="15" fill="rgb(248,53,11)" fg:x="1054" fg:w="1"/><text x="84.9086%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="84.6586%" y="325" width="0.0803%" height="15" fill="rgb(218,140,4)" fg:x="1054" fg:w="1"/><text x="84.9086%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="84.7390%" y="389" width="0.0803%" height="15" fill="rgb(248,161,31)" fg:x="1055" fg:w="1"/><text x="84.9890%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="84.7390%" y="373" width="0.0803%" height="15" fill="rgb(239,88,32)" fg:x="1055" fg:w="1"/><text x="84.9890%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="84.7390%" y="357" width="0.0803%" height="15" fill="rgb(234,14,28)" fg:x="1055" fg:w="1"/><text x="84.9890%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="84.7390%" y="341" width="0.0803%" height="15" fill="rgb(235,173,11)" fg:x="1055" fg:w="1"/><text x="84.9890%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.7390%" y="325" width="0.0803%" height="15" fill="rgb(222,70,2)" fg:x="1055" fg:w="1"/><text x="84.9890%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.7390%" y="309" width="0.0803%" height="15" fill="rgb(228,196,41)" fg:x="1055" fg:w="1"/><text x="84.9890%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.7390%" y="293" width="0.0803%" height="15" fill="rgb(249,19,9)" fg:x="1055" fg:w="1"/><text x="84.9890%" y="303.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="84.8193%" y="389" width="0.0803%" height="15" fill="rgb(221,16,43)" fg:x="1056" fg:w="1"/><text x="85.0693%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="84.8193%" y="373" width="0.0803%" height="15" fill="rgb(225,207,6)" fg:x="1056" fg:w="1"/><text x="85.0693%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.8193%" y="357" width="0.0803%" height="15" fill="rgb(249,32,32)" fg:x="1056" fg:w="1"/><text x="85.0693%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="84.8996%" y="341" width="0.1606%" height="15" fill="rgb(232,163,43)" fg:x="1057" fg:w="2"/><text x="85.1496%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="84.8996%" y="325" width="0.1606%" height="15" fill="rgb(236,158,54)" fg:x="1057" fg:w="2"/><text x="85.1496%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.9799%" y="309" width="0.0803%" height="15" fill="rgb(205,126,44)" fg:x="1058" fg:w="1"/><text x="85.2299%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.9799%" y="293" width="0.0803%" height="15" fill="rgb(210,162,12)" fg:x="1058" fg:w="1"/><text x="85.2299%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="84.9799%" y="277" width="0.0803%" height="15" fill="rgb(218,156,48)" fg:x="1058" fg:w="1"/><text x="85.2299%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.9799%" y="261" width="0.0803%" height="15" fill="rgb(248,210,3)" fg:x="1058" fg:w="1"/><text x="85.2299%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.9799%" y="245" width="0.0803%" height="15" fill="rgb(212,43,27)" fg:x="1058" fg:w="1"/><text x="85.2299%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.9799%" y="229" width="0.0803%" height="15" fill="rgb(241,52,6)" fg:x="1058" fg:w="1"/><text x="85.2299%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="84.9799%" y="213" width="0.0803%" height="15" fill="rgb(222,178,35)" fg:x="1058" fg:w="1"/><text x="85.2299%" y="223.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="84.8996%" y="389" width="0.3213%" height="15" fill="rgb(205,121,46)" fg:x="1057" fg:w="4"/><text x="85.1496%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="84.8996%" y="373" width="0.3213%" height="15" fill="rgb(249,67,1)" fg:x="1057" fg:w="4"/><text x="85.1496%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="84.8996%" y="357" width="0.3213%" height="15" fill="rgb(238,168,42)" fg:x="1057" fg:w="4"/><text x="85.1496%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="85.0602%" y="341" width="0.1606%" height="15" fill="rgb(205,36,48)" fg:x="1059" fg:w="2"/><text x="85.3102%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="85.0602%" y="325" width="0.1606%" height="15" fill="rgb(240,85,12)" fg:x="1059" fg:w="2"/><text x="85.3102%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="85.0602%" y="309" width="0.1606%" height="15" fill="rgb(245,27,39)" fg:x="1059" fg:w="2"/><text x="85.3102%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.1406%" y="293" width="0.0803%" height="15" fill="rgb(218,129,34)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="85.1406%" y="277" width="0.0803%" height="15" fill="rgb(221,157,12)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.1406%" y="261" width="0.0803%" height="15" fill="rgb(213,206,20)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.1406%" y="245" width="0.0803%" height="15" fill="rgb(227,115,30)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.1406%" y="229" width="0.0803%" height="15" fill="rgb(221,40,47)" fg:x="1060" fg:w="1"/><text x="85.3906%" y="239.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="85.2209%" y="373" width="0.0803%" height="15" fill="rgb(239,96,49)" fg:x="1061" fg:w="1"/><text x="85.4709%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="85.2209%" y="357" width="0.0803%" height="15" fill="rgb(223,24,38)" fg:x="1061" fg:w="1"/><text x="85.4709%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.2209%" y="341" width="0.0803%" height="15" fill="rgb(242,35,45)" fg:x="1061" fg:w="1"/><text x="85.4709%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="85.3012%" y="357" width="0.0803%" height="15" fill="rgb(236,20,9)" fg:x="1062" fg:w="1"/><text x="85.5512%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.3012%" y="341" width="0.0803%" height="15" fill="rgb(239,124,8)" fg:x="1062" fg:w="1"/><text x="85.5512%" y="351.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (144 samples, 11.57%)</title><rect x="73.9759%" y="421" width="11.5663%" height="15" fill="rgb(228,92,29)" fg:x="921" fg:w="144"/><text x="74.2259%" y="431.50">&lt;plugins_core::ca..</text></g><g><title>plugins_core::location::model::change_location (11 samples, 0.88%)</title><rect x="84.6586%" y="405" width="0.8835%" height="15" fill="rgb(251,53,39)" fg:x="1054" fg:w="11"/><text x="84.9086%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (4 samples, 0.32%)</title><rect x="85.2209%" y="389" width="0.3213%" height="15" fill="rgb(224,44,10)" fg:x="1061" fg:w="4"/><text x="85.4709%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="85.3012%" y="373" width="0.2410%" height="15" fill="rgb(254,10,15)" fg:x="1062" fg:w="3"/><text x="85.5512%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="85.3815%" y="357" width="0.1606%" height="15" fill="rgb(245,173,6)" fg:x="1063" fg:w="2"/><text x="85.6315%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="85.3815%" y="341" width="0.1606%" height="15" fill="rgb(228,74,0)" fg:x="1063" fg:w="2"/><text x="85.6315%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="85.3815%" y="325" width="0.1606%" height="15" fill="rgb(206,138,29)" fg:x="1063" fg:w="2"/><text x="85.6315%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="85.3815%" y="309" width="0.1606%" height="15" fill="rgb(253,27,43)" fg:x="1063" fg:w="2"/><text x="85.6315%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.4618%" y="293" width="0.0803%" height="15" fill="rgb(231,73,0)" fg:x="1064" fg:w="1"/><text x="85.7118%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="85.5422%" y="389" width="0.0803%" height="15" fill="rgb(218,9,23)" fg:x="1065" fg:w="1"/><text x="85.7922%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.5422%" y="373" width="0.0803%" height="15" fill="rgb(251,55,29)" fg:x="1065" fg:w="1"/><text x="85.7922%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.5422%" y="357" width="0.0803%" height="15" fill="rgb(223,180,22)" fg:x="1065" fg:w="1"/><text x="85.7922%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.6225%" y="357" width="0.0803%" height="15" fill="rgb(223,29,21)" fg:x="1066" fg:w="1"/><text x="85.8725%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.6225%" y="341" width="0.0803%" height="15" fill="rgb(251,103,37)" fg:x="1066" fg:w="1"/><text x="85.8725%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.6225%" y="325" width="0.0803%" height="15" fill="rgb(214,11,21)" fg:x="1066" fg:w="1"/><text x="85.8725%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.6225%" y="309" width="0.0803%" height="15" fill="rgb(205,137,13)" fg:x="1066" fg:w="1"/><text x="85.8725%" y="319.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="85.6225%" y="389" width="0.1606%" height="15" fill="rgb(225,58,47)" fg:x="1066" fg:w="2"/><text x="85.8725%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="85.6225%" y="373" width="0.1606%" height="15" fill="rgb(222,197,14)" fg:x="1066" fg:w="2"/><text x="85.8725%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.7028%" y="357" width="0.0803%" height="15" fill="rgb(215,210,33)" fg:x="1067" fg:w="1"/><text x="85.9528%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.7028%" y="341" width="0.0803%" height="15" fill="rgb(242,13,9)" fg:x="1067" fg:w="1"/><text x="85.9528%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="85.7028%" y="325" width="0.0803%" height="15" fill="rgb(218,31,39)" fg:x="1067" fg:w="1"/><text x="85.9528%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.7028%" y="309" width="0.0803%" height="15" fill="rgb(211,214,23)" fg:x="1067" fg:w="1"/><text x="85.9528%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.7028%" y="293" width="0.0803%" height="15" fill="rgb(237,92,14)" fg:x="1067" fg:w="1"/><text x="85.9528%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="85.7831%" y="389" width="0.0803%" height="15" fill="rgb(220,78,5)" fg:x="1068" fg:w="1"/><text x="86.0331%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.7831%" y="373" width="0.0803%" height="15" fill="rgb(237,23,21)" fg:x="1068" fg:w="1"/><text x="86.0331%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.7831%" y="357" width="0.0803%" height="15" fill="rgb(251,207,51)" fg:x="1068" fg:w="1"/><text x="86.0331%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.7831%" y="341" width="0.0803%" height="15" fill="rgb(249,206,18)" fg:x="1068" fg:w="1"/><text x="86.0331%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="85.8635%" y="357" width="0.1606%" height="15" fill="rgb(236,20,19)" fg:x="1069" fg:w="2"/><text x="86.1135%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="85.8635%" y="341" width="0.1606%" height="15" fill="rgb(214,227,29)" fg:x="1069" fg:w="2"/><text x="86.1135%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="85.8635%" y="325" width="0.1606%" height="15" fill="rgb(209,183,4)" fg:x="1069" fg:w="2"/><text x="86.1135%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.9438%" y="309" width="0.0803%" height="15" fill="rgb(233,111,23)" fg:x="1070" fg:w="1"/><text x="86.1938%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.9438%" y="293" width="0.0803%" height="15" fill="rgb(238,121,27)" fg:x="1070" fg:w="1"/><text x="86.1938%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="85.9438%" y="277" width="0.0803%" height="15" fill="rgb(236,120,41)" fg:x="1070" fg:w="1"/><text x="86.1938%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="85.9438%" y="261" width="0.0803%" height="15" fill="rgb(241,143,10)" fg:x="1070" fg:w="1"/><text x="86.1938%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="85.9438%" y="245" width="0.0803%" height="15" fill="rgb(224,86,31)" fg:x="1070" fg:w="1"/><text x="86.1938%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="85.9438%" y="229" width="0.0803%" height="15" fill="rgb(236,212,27)" fg:x="1070" fg:w="1"/><text x="86.1938%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="85.9438%" y="213" width="0.0803%" height="15" fill="rgb(219,43,51)" fg:x="1070" fg:w="1"/><text x="86.1938%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="86.0241%" y="293" width="0.0803%" height="15" fill="rgb(232,216,8)" fg:x="1071" fg:w="1"/><text x="86.2741%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::gid (5 samples, 0.40%)</title><rect x="85.8635%" y="389" width="0.4016%" height="15" fill="rgb(206,222,39)" fg:x="1069" fg:w="5"/><text x="86.1135%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="85.8635%" y="373" width="0.4016%" height="15" fill="rgb(209,149,48)" fg:x="1069" fg:w="5"/><text x="86.1135%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="86.0241%" y="357" width="0.2410%" height="15" fill="rgb(229,155,21)" fg:x="1071" fg:w="3"/><text x="86.2741%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="86.0241%" y="341" width="0.2410%" height="15" fill="rgb(246,152,26)" fg:x="1071" fg:w="3"/><text x="86.2741%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="86.0241%" y="325" width="0.2410%" height="15" fill="rgb(206,70,42)" fg:x="1071" fg:w="3"/><text x="86.2741%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="86.0241%" y="309" width="0.2410%" height="15" fill="rgb(236,9,11)" fg:x="1071" fg:w="3"/><text x="86.2741%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="86.1044%" y="293" width="0.1606%" height="15" fill="rgb(238,145,47)" fg:x="1072" fg:w="2"/><text x="86.3544%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="86.1044%" y="277" width="0.1606%" height="15" fill="rgb(252,189,7)" fg:x="1072" fg:w="2"/><text x="86.3544%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="86.1847%" y="261" width="0.0803%" height="15" fill="rgb(254,168,51)" fg:x="1073" fg:w="1"/><text x="86.4347%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.1847%" y="245" width="0.0803%" height="15" fill="rgb(227,105,46)" fg:x="1073" fg:w="1"/><text x="86.4347%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="86.3454%" y="309" width="0.0803%" height="15" fill="rgb(227,74,30)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="86.3454%" y="293" width="0.0803%" height="15" fill="rgb(206,212,44)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="86.3454%" y="277" width="0.0803%" height="15" fill="rgb(252,69,11)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="86.3454%" y="261" width="0.0803%" height="15" fill="rgb(239,116,0)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="86.3454%" y="245" width="0.0803%" height="15" fill="rgb(246,189,23)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="86.3454%" y="229" width="0.0803%" height="15" fill="rgb(229,50,41)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="86.5060%" y="261" width="0.0803%" height="15" fill="rgb(214,66,37)" fg:x="1077" fg:w="1"/><text x="86.7560%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.5863%" y="245" width="0.0803%" height="15" fill="rgb(226,28,6)" fg:x="1078" fg:w="1"/><text x="86.8363%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="86.7470%" y="229" width="0.1606%" height="15" fill="rgb(239,154,0)" fg:x="1080" fg:w="2"/><text x="86.9970%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="86.6667%" y="245" width="0.5622%" height="15" fill="rgb(233,97,11)" fg:x="1079" fg:w="7"/><text x="86.9167%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="86.9076%" y="229" width="0.3213%" height="15" fill="rgb(236,215,16)" fg:x="1082" fg:w="4"/><text x="87.1576%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="87.2289%" y="245" width="0.0803%" height="15" fill="rgb(246,188,29)" fg:x="1086" fg:w="1"/><text x="87.4789%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="87.2289%" y="229" width="0.0803%" height="15" fill="rgb(207,7,29)" fg:x="1086" fg:w="1"/><text x="87.4789%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 1.69%)</title><rect x="87.3092%" y="229" width="1.6867%" height="15" fill="rgb(238,112,43)" fg:x="1087" fg:w="21"/><text x="87.5592%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (21 samples, 1.69%)</title><rect x="87.3092%" y="213" width="1.6867%" height="15" fill="rgb(230,110,32)" fg:x="1087" fg:w="21"/><text x="87.5592%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (21 samples, 1.69%)</title><rect x="87.3092%" y="197" width="1.6867%" height="15" fill="rgb(218,197,32)" fg:x="1087" fg:w="21"/><text x="87.5592%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (20 samples, 1.61%)</title><rect x="87.3896%" y="181" width="1.6064%" height="15" fill="rgb(252,61,9)" fg:x="1088" fg:w="20"/><text x="87.6396%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (20 samples, 1.61%)</title><rect x="87.3896%" y="165" width="1.6064%" height="15" fill="rgb(244,140,14)" fg:x="1088" fg:w="20"/><text x="87.6396%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (20 samples, 1.61%)</title><rect x="87.3896%" y="149" width="1.6064%" height="15" fill="rgb(216,14,47)" fg:x="1088" fg:w="20"/><text x="87.6396%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="88.9960%" y="229" width="0.1606%" height="15" fill="rgb(224,130,52)" fg:x="1108" fg:w="2"/><text x="89.2460%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="88.9960%" y="213" width="0.1606%" height="15" fill="rgb(210,229,51)" fg:x="1108" fg:w="2"/><text x="89.2460%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="89.0763%" y="197" width="0.0803%" height="15" fill="rgb(242,13,9)" fg:x="1109" fg:w="1"/><text x="89.3263%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="89.1566%" y="229" width="0.0803%" height="15" fill="rgb(252,71,50)" fg:x="1110" fg:w="1"/><text x="89.4066%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (35 samples, 2.81%)</title><rect x="86.5863%" y="261" width="2.8112%" height="15" fill="rgb(218,225,6)" fg:x="1078" fg:w="35"/><text x="86.8363%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (26 samples, 2.09%)</title><rect x="87.3092%" y="245" width="2.0884%" height="15" fill="rgb(219,27,35)" fg:x="1087" fg:w="26"/><text x="87.5592%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="89.2369%" y="229" width="0.1606%" height="15" fill="rgb(226,30,1)" fg:x="1111" fg:w="2"/><text x="89.4869%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="89.2369%" y="213" width="0.1606%" height="15" fill="rgb(227,164,34)" fg:x="1111" fg:w="2"/><text x="89.4869%" y="223.50"></text></g><g><title>regex_syntax::hir::ClassBytesRange::start (1 samples, 0.08%)</title><rect x="89.3173%" y="197" width="0.0803%" height="15" fill="rgb(206,103,4)" fg:x="1112" fg:w="1"/><text x="89.5673%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="89.4779%" y="213" width="0.0803%" height="15" fill="rgb(214,166,19)" fg:x="1114" fg:w="1"/><text x="89.7279%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="89.3976%" y="261" width="0.2410%" height="15" fill="rgb(240,56,20)" fg:x="1113" fg:w="3"/><text x="89.6476%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="89.3976%" y="245" width="0.2410%" height="15" fill="rgb(224,25,3)" fg:x="1113" fg:w="3"/><text x="89.6476%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="89.4779%" y="229" width="0.1606%" height="15" fill="rgb(216,206,54)" fg:x="1114" fg:w="2"/><text x="89.7279%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="89.5582%" y="213" width="0.0803%" height="15" fill="rgb(225,142,10)" fg:x="1115" fg:w="1"/><text x="89.8082%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.5582%" y="197" width="0.0803%" height="15" fill="rgb(246,9,18)" fg:x="1115" fg:w="1"/><text x="89.8082%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.5582%" y="181" width="0.0803%" height="15" fill="rgb(247,140,18)" fg:x="1115" fg:w="1"/><text x="89.8082%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.5582%" y="165" width="0.0803%" height="15" fill="rgb(239,184,22)" fg:x="1115" fg:w="1"/><text x="89.8082%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (41 samples, 3.29%)</title><rect x="86.4257%" y="309" width="3.2932%" height="15" fill="rgb(227,94,44)" fg:x="1076" fg:w="41"/><text x="86.6757%" y="319.50">reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (41 samples, 3.29%)</title><rect x="86.4257%" y="293" width="3.2932%" height="15" fill="rgb(219,43,3)" fg:x="1076" fg:w="41"/><text x="86.6757%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (40 samples, 3.21%)</title><rect x="86.5060%" y="277" width="3.2129%" height="15" fill="rgb(210,76,31)" fg:x="1077" fg:w="40"/><text x="86.7560%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="89.6386%" y="261" width="0.0803%" height="15" fill="rgb(225,85,12)" fg:x="1116" fg:w="1"/><text x="89.8886%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="89.6386%" y="245" width="0.0803%" height="15" fill="rgb(214,191,28)" fg:x="1116" fg:w="1"/><text x="89.8886%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="89.6386%" y="229" width="0.0803%" height="15" fill="rgb(214,43,14)" fg:x="1116" fg:w="1"/><text x="89.8886%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="89.6386%" y="213" width="0.0803%" height="15" fill="rgb(253,117,5)" fg:x="1116" fg:w="1"/><text x="89.8886%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="89.6386%" y="197" width="0.0803%" height="15" fill="rgb(208,124,26)" fg:x="1116" fg:w="1"/><text x="89.8886%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.1205%" y="229" width="0.0803%" height="15" fill="rgb(228,208,39)" fg:x="1122" fg:w="1"/><text x="90.3705%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (51 samples, 4.10%)</title><rect x="86.2651%" y="325" width="4.0964%" height="15" fill="rgb(206,180,39)" fg:x="1074" fg:w="51"/><text x="86.5151%" y="335.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="89.7189%" y="309" width="0.6426%" height="15" fill="rgb(205,111,37)" fg:x="1117" fg:w="8"/><text x="89.9689%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="89.7189%" y="293" width="0.6426%" height="15" fill="rgb(208,121,24)" fg:x="1117" fg:w="8"/><text x="89.9689%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="89.7992%" y="277" width="0.5622%" height="15" fill="rgb(218,215,32)" fg:x="1118" fg:w="7"/><text x="90.0492%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="89.7992%" y="261" width="0.5622%" height="15" fill="rgb(244,168,53)" fg:x="1118" fg:w="7"/><text x="90.0492%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="89.7992%" y="245" width="0.5622%" height="15" fill="rgb(214,9,36)" fg:x="1118" fg:w="7"/><text x="90.0492%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="90.2008%" y="229" width="0.1606%" height="15" fill="rgb(231,4,34)" fg:x="1123" fg:w="2"/><text x="90.4508%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="90.3614%" y="309" width="0.0803%" height="15" fill="rgb(210,83,51)" fg:x="1125" fg:w="1"/><text x="90.6114%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="90.3614%" y="293" width="0.0803%" height="15" fill="rgb(224,112,1)" fg:x="1125" fg:w="1"/><text x="90.6114%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.3614%" y="277" width="0.0803%" height="15" fill="rgb(216,33,41)" fg:x="1125" fg:w="1"/><text x="90.6114%" y="287.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (2 samples, 0.16%)</title><rect x="90.4418%" y="309" width="0.1606%" height="15" fill="rgb(215,179,42)" fg:x="1126" fg:w="2"/><text x="90.6918%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="90.4418%" y="293" width="0.1606%" height="15" fill="rgb(205,81,48)" fg:x="1126" fg:w="2"/><text x="90.6918%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="90.4418%" y="277" width="0.1606%" height="15" fill="rgb(246,17,30)" fg:x="1126" fg:w="2"/><text x="90.6918%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="90.4418%" y="261" width="0.1606%" height="15" fill="rgb(226,19,16)" fg:x="1126" fg:w="2"/><text x="90.6918%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="90.4418%" y="245" width="0.1606%" height="15" fill="rgb(207,3,14)" fg:x="1126" fg:w="2"/><text x="90.6918%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="90.4418%" y="229" width="0.1606%" height="15" fill="rgb(226,77,12)" fg:x="1126" fg:w="2"/><text x="90.6918%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="90.5221%" y="213" width="0.0803%" height="15" fill="rgb(226,76,25)" fg:x="1127" fg:w="1"/><text x="90.7721%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.6024%" y="229" width="0.0803%" height="15" fill="rgb(217,216,25)" fg:x="1128" fg:w="1"/><text x="90.8524%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.6827%" y="229" width="0.0803%" height="15" fill="rgb(247,127,42)" fg:x="1129" fg:w="1"/><text x="90.9327%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="90.6024%" y="261" width="0.2410%" height="15" fill="rgb(226,10,34)" fg:x="1128" fg:w="3"/><text x="90.8524%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="90.6024%" y="245" width="0.2410%" height="15" fill="rgb(249,78,0)" fg:x="1128" fg:w="3"/><text x="90.8524%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="90.7631%" y="229" width="0.0803%" height="15" fill="rgb(226,218,38)" fg:x="1130" fg:w="1"/><text x="91.0131%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="90.8434%" y="229" width="0.0803%" height="15" fill="rgb(240,92,1)" fg:x="1131" fg:w="1"/><text x="91.0934%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.8434%" y="213" width="0.0803%" height="15" fill="rgb(237,224,33)" fg:x="1131" fg:w="1"/><text x="91.0934%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.8434%" y="197" width="0.0803%" height="15" fill="rgb(211,46,1)" fg:x="1131" fg:w="1"/><text x="91.0934%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="90.8434%" y="261" width="0.1606%" height="15" fill="rgb(239,190,4)" fg:x="1131" fg:w="2"/><text x="91.0934%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="90.8434%" y="245" width="0.1606%" height="15" fill="rgb(221,50,22)" fg:x="1131" fg:w="2"/><text x="91.0934%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="90.9237%" y="229" width="0.0803%" height="15" fill="rgb(207,176,8)" fg:x="1132" fg:w="1"/><text x="91.1737%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.9237%" y="213" width="0.0803%" height="15" fill="rgb(244,114,50)" fg:x="1132" fg:w="1"/><text x="91.1737%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="90.9237%" y="197" width="0.0803%" height="15" fill="rgb(226,206,19)" fg:x="1132" fg:w="1"/><text x="91.1737%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.9237%" y="181" width="0.0803%" height="15" fill="rgb(208,199,16)" fg:x="1132" fg:w="1"/><text x="91.1737%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.9237%" y="165" width="0.0803%" height="15" fill="rgb(208,38,14)" fg:x="1132" fg:w="1"/><text x="91.1737%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.9237%" y="149" width="0.0803%" height="15" fill="rgb(221,211,49)" fg:x="1132" fg:w="1"/><text x="91.1737%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="91.0843%" y="245" width="0.1606%" height="15" fill="rgb(227,214,34)" fg:x="1134" fg:w="2"/><text x="91.3343%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="91.0843%" y="229" width="0.1606%" height="15" fill="rgb(234,5,54)" fg:x="1134" fg:w="2"/><text x="91.3343%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="91.2450%" y="213" width="0.3213%" height="15" fill="rgb(236,215,22)" fg:x="1136" fg:w="4"/><text x="91.4950%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="91.2450%" y="197" width="0.3213%" height="15" fill="rgb(244,0,11)" fg:x="1136" fg:w="4"/><text x="91.4950%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="91.2450%" y="181" width="0.3213%" height="15" fill="rgb(212,140,16)" fg:x="1136" fg:w="4"/><text x="91.4950%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (5 samples, 0.40%)</title><rect x="91.2450%" y="245" width="0.4016%" height="15" fill="rgb(238,101,37)" fg:x="1136" fg:w="5"/><text x="91.4950%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="91.2450%" y="229" width="0.4016%" height="15" fill="rgb(247,46,3)" fg:x="1136" fg:w="5"/><text x="91.4950%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="91.5663%" y="213" width="0.0803%" height="15" fill="rgb(208,106,19)" fg:x="1140" fg:w="1"/><text x="91.8163%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="91.7269%" y="133" width="0.2410%" height="15" fill="rgb(240,227,15)" fg:x="1142" fg:w="3"/><text x="91.9769%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="91.9679%" y="133" width="0.1606%" height="15" fill="rgb(226,173,6)" fg:x="1145" fg:w="2"/><text x="92.2179%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="92.1285%" y="133" width="0.1606%" height="15" fill="rgb(213,191,1)" fg:x="1147" fg:w="2"/><text x="92.3785%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="92.2892%" y="133" width="0.0803%" height="15" fill="rgb(246,51,36)" fg:x="1149" fg:w="1"/><text x="92.5392%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.2892%" y="117" width="0.0803%" height="15" fill="rgb(238,40,32)" fg:x="1149" fg:w="1"/><text x="92.5392%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.4498%" y="101" width="0.0803%" height="15" fill="rgb(208,126,27)" fg:x="1151" fg:w="1"/><text x="92.6998%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.6908%" y="85" width="0.0803%" height="15" fill="rgb(227,117,38)" fg:x="1154" fg:w="1"/><text x="92.9408%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="92.3695%" y="133" width="0.4819%" height="15" fill="rgb(232,16,1)" fg:x="1150" fg:w="6"/><text x="92.6195%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.48%)</title><rect x="92.3695%" y="117" width="0.4819%" height="15" fill="rgb(212,111,31)" fg:x="1150" fg:w="6"/><text x="92.6195%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="92.5301%" y="101" width="0.3213%" height="15" fill="rgb(253,227,2)" fg:x="1152" fg:w="4"/><text x="92.7801%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="92.7711%" y="85" width="0.0803%" height="15" fill="rgb(216,122,17)" fg:x="1155" fg:w="1"/><text x="93.0211%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.7711%" y="69" width="0.0803%" height="15" fill="rgb(227,37,2)" fg:x="1155" fg:w="1"/><text x="93.0211%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.7711%" y="53" width="0.0803%" height="15" fill="rgb(244,113,40)" fg:x="1155" fg:w="1"/><text x="93.0211%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.7711%" y="37" width="0.0803%" height="15" fill="rgb(217,193,34)" fg:x="1155" fg:w="1"/><text x="93.0211%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (8 samples, 0.64%)</title><rect x="92.8514%" y="133" width="0.6426%" height="15" fill="rgb(212,223,15)" fg:x="1156" fg:w="8"/><text x="93.1014%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (8 samples, 0.64%)</title><rect x="92.8514%" y="117" width="0.6426%" height="15" fill="rgb(238,143,18)" fg:x="1156" fg:w="8"/><text x="93.1014%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (8 samples, 0.64%)</title><rect x="92.8514%" y="101" width="0.6426%" height="15" fill="rgb(231,18,49)" fg:x="1156" fg:w="8"/><text x="93.1014%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 2.01%)</title><rect x="91.6466%" y="229" width="2.0080%" height="15" fill="rgb(249,122,4)" fg:x="1141" fg:w="25"/><text x="91.8966%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (25 samples, 2.01%)</title><rect x="91.6466%" y="213" width="2.0080%" height="15" fill="rgb(245,138,54)" fg:x="1141" fg:w="25"/><text x="91.8966%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (25 samples, 2.01%)</title><rect x="91.6466%" y="197" width="2.0080%" height="15" fill="rgb(218,130,18)" fg:x="1141" fg:w="25"/><text x="91.8966%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (25 samples, 2.01%)</title><rect x="91.6466%" y="181" width="2.0080%" height="15" fill="rgb(235,94,13)" fg:x="1141" fg:w="25"/><text x="91.8966%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (25 samples, 2.01%)</title><rect x="91.6466%" y="165" width="2.0080%" height="15" fill="rgb(247,143,5)" fg:x="1141" fg:w="25"/><text x="91.8966%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (25 samples, 2.01%)</title><rect x="91.6466%" y="149" width="2.0080%" height="15" fill="rgb(212,59,54)" fg:x="1141" fg:w="25"/><text x="91.8966%" y="159.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="93.4940%" y="133" width="0.1606%" height="15" fill="rgb(206,121,24)" fg:x="1164" fg:w="2"/><text x="93.7440%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.6546%" y="213" width="0.0803%" height="15" fill="rgb(235,38,8)" fg:x="1166" fg:w="1"/><text x="93.9046%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.7349%" y="213" width="0.0803%" height="15" fill="rgb(227,102,26)" fg:x="1167" fg:w="1"/><text x="93.9849%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="93.8153%" y="213" width="0.3213%" height="15" fill="rgb(240,183,46)" fg:x="1168" fg:w="4"/><text x="94.0653%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.0562%" y="197" width="0.0803%" height="15" fill="rgb(208,177,23)" fg:x="1171" fg:w="1"/><text x="94.3062%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.0562%" y="181" width="0.0803%" height="15" fill="rgb(216,152,5)" fg:x="1171" fg:w="1"/><text x="94.3062%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.0562%" y="165" width="0.0803%" height="15" fill="rgb(238,199,2)" fg:x="1171" fg:w="1"/><text x="94.3062%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (40 samples, 3.21%)</title><rect x="91.0040%" y="261" width="3.2129%" height="15" fill="rgb(235,142,28)" fg:x="1133" fg:w="40"/><text x="91.2540%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (32 samples, 2.57%)</title><rect x="91.6466%" y="245" width="2.5703%" height="15" fill="rgb(225,97,25)" fg:x="1141" fg:w="32"/><text x="91.8966%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="93.6546%" y="229" width="0.5622%" height="15" fill="rgb(208,75,46)" fg:x="1166" fg:w="7"/><text x="93.9046%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="94.1365%" y="213" width="0.0803%" height="15" fill="rgb(240,136,15)" fg:x="1172" fg:w="1"/><text x="94.3865%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.2169%" y="213" width="0.0803%" height="15" fill="rgb(235,36,27)" fg:x="1173" fg:w="1"/><text x="94.4669%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (51 samples, 4.10%)</title><rect x="90.3614%" y="325" width="4.0964%" height="15" fill="rgb(231,132,23)" fg:x="1125" fg:w="51"/><text x="90.6114%" y="335.50">inde..</text></g><g><title>regex::regex::string::Regex::new (48 samples, 3.86%)</title><rect x="90.6024%" y="309" width="3.8554%" height="15" fill="rgb(205,208,20)" fg:x="1128" fg:w="48"/><text x="90.8524%" y="319.50">rege..</text></g><g><title>regex::builders::string::RegexBuilder::build (48 samples, 3.86%)</title><rect x="90.6024%" y="293" width="3.8554%" height="15" fill="rgb(215,26,40)" fg:x="1128" fg:w="48"/><text x="90.8524%" y="303.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (48 samples, 3.86%)</title><rect x="90.6024%" y="277" width="3.8554%" height="15" fill="rgb(238,183,34)" fg:x="1128" fg:w="48"/><text x="90.8524%" y="287.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="94.2169%" y="261" width="0.2410%" height="15" fill="rgb(207,96,10)" fg:x="1173" fg:w="3"/><text x="94.4669%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="94.2169%" y="245" width="0.2410%" height="15" fill="rgb(218,88,6)" fg:x="1173" fg:w="3"/><text x="94.4669%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="94.2169%" y="229" width="0.2410%" height="15" fill="rgb(217,22,49)" fg:x="1173" fg:w="3"/><text x="94.4669%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="94.2972%" y="213" width="0.1606%" height="15" fill="rgb(240,195,14)" fg:x="1174" fg:w="2"/><text x="94.5472%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="94.3775%" y="197" width="0.0803%" height="15" fill="rgb(229,48,27)" fg:x="1175" fg:w="1"/><text x="94.6275%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="94.4578%" y="293" width="0.0803%" height="15" fill="rgb(220,194,45)" fg:x="1176" fg:w="1"/><text x="94.7078%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="94.4578%" y="277" width="0.0803%" height="15" fill="rgb(252,60,20)" fg:x="1176" fg:w="1"/><text x="94.7078%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="94.4578%" y="261" width="0.0803%" height="15" fill="rgb(244,169,33)" fg:x="1176" fg:w="1"/><text x="94.7078%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.4578%" y="245" width="0.0803%" height="15" fill="rgb(234,141,34)" fg:x="1176" fg:w="1"/><text x="94.7078%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.5382%" y="245" width="0.0803%" height="15" fill="rgb(241,141,9)" fg:x="1177" fg:w="1"/><text x="94.7882%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="94.6185%" y="245" width="0.0803%" height="15" fill="rgb(246,27,36)" fg:x="1178" fg:w="1"/><text x="94.8685%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="94.6185%" y="229" width="0.0803%" height="15" fill="rgb(216,188,42)" fg:x="1178" fg:w="1"/><text x="94.8685%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="94.6988%" y="213" width="0.0803%" height="15" fill="rgb(234,205,22)" fg:x="1179" fg:w="1"/><text x="94.9488%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.6988%" y="197" width="0.0803%" height="15" fill="rgb(210,202,32)" fg:x="1179" fg:w="1"/><text x="94.9488%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="94.6988%" y="229" width="0.1606%" height="15" fill="rgb(217,0,48)" fg:x="1179" fg:w="2"/><text x="94.9488%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="94.7791%" y="213" width="0.0803%" height="15" fill="rgb(207,115,37)" fg:x="1180" fg:w="1"/><text x="95.0291%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="94.8594%" y="213" width="0.0803%" height="15" fill="rgb(237,221,44)" fg:x="1181" fg:w="1"/><text x="95.1094%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.8594%" y="197" width="0.0803%" height="15" fill="rgb(249,78,2)" fg:x="1181" fg:w="1"/><text x="95.1094%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.8594%" y="181" width="0.0803%" height="15" fill="rgb(211,169,23)" fg:x="1181" fg:w="1"/><text x="95.1094%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.8594%" y="165" width="0.0803%" height="15" fill="rgb(207,116,29)" fg:x="1181" fg:w="1"/><text x="95.1094%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.0201%" y="197" width="0.0803%" height="15" fill="rgb(240,84,33)" fg:x="1183" fg:w="1"/><text x="95.2701%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.56%)</title><rect x="94.6988%" y="245" width="0.5622%" height="15" fill="rgb(229,224,31)" fg:x="1179" fg:w="7"/><text x="94.9488%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.40%)</title><rect x="94.8594%" y="229" width="0.4016%" height="15" fill="rgb(227,90,31)" fg:x="1181" fg:w="5"/><text x="95.1094%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="94.9398%" y="213" width="0.3213%" height="15" fill="rgb(249,22,41)" fg:x="1182" fg:w="4"/><text x="95.1898%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="95.1004%" y="197" width="0.1606%" height="15" fill="rgb(239,65,11)" fg:x="1184" fg:w="2"/><text x="95.3504%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="95.1807%" y="181" width="0.0803%" height="15" fill="rgb(205,5,23)" fg:x="1185" fg:w="1"/><text x="95.4307%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1807%" y="165" width="0.0803%" height="15" fill="rgb(254,78,52)" fg:x="1185" fg:w="1"/><text x="95.4307%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1807%" y="149" width="0.0803%" height="15" fill="rgb(214,156,33)" fg:x="1185" fg:w="1"/><text x="95.4307%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.1807%" y="133" width="0.0803%" height="15" fill="rgb(208,20,30)" fg:x="1185" fg:w="1"/><text x="95.4307%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="95.2610%" y="197" width="0.0803%" height="15" fill="rgb(223,133,18)" fg:x="1186" fg:w="1"/><text x="95.5110%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="95.2610%" y="181" width="0.0803%" height="15" fill="rgb(222,91,41)" fg:x="1186" fg:w="1"/><text x="95.5110%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="95.2610%" y="245" width="0.2410%" height="15" fill="rgb(247,137,48)" fg:x="1186" fg:w="3"/><text x="95.5110%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="95.2610%" y="229" width="0.2410%" height="15" fill="rgb(239,156,11)" fg:x="1186" fg:w="3"/><text x="95.5110%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="95.2610%" y="213" width="0.2410%" height="15" fill="rgb(244,56,26)" fg:x="1186" fg:w="3"/><text x="95.5110%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="95.3414%" y="197" width="0.1606%" height="15" fill="rgb(205,131,49)" fg:x="1187" fg:w="2"/><text x="95.5914%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.3414%" y="181" width="0.1606%" height="15" fill="rgb(224,0,2)" fg:x="1187" fg:w="2"/><text x="95.5914%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.3414%" y="165" width="0.1606%" height="15" fill="rgb(247,59,36)" fg:x="1187" fg:w="2"/><text x="95.5914%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="95.3414%" y="149" width="0.1606%" height="15" fill="rgb(215,4,47)" fg:x="1187" fg:w="2"/><text x="95.5914%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="95.5020%" y="213" width="0.0803%" height="15" fill="rgb(242,72,42)" fg:x="1189" fg:w="1"/><text x="95.7520%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.5020%" y="197" width="0.0803%" height="15" fill="rgb(232,145,44)" fg:x="1189" fg:w="1"/><text x="95.7520%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.5823%" y="213" width="0.0803%" height="15" fill="rgb(205,108,43)" fg:x="1190" fg:w="1"/><text x="95.8323%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (15 samples, 1.20%)</title><rect x="94.5382%" y="293" width="1.2048%" height="15" fill="rgb(215,190,17)" fg:x="1177" fg:w="15"/><text x="94.7882%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (15 samples, 1.20%)</title><rect x="94.5382%" y="277" width="1.2048%" height="15" fill="rgb(223,90,34)" fg:x="1177" fg:w="15"/><text x="94.7882%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (15 samples, 1.20%)</title><rect x="94.5382%" y="261" width="1.2048%" height="15" fill="rgb(216,25,0)" fg:x="1177" fg:w="15"/><text x="94.7882%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="95.5020%" y="245" width="0.2410%" height="15" fill="rgb(223,51,28)" fg:x="1189" fg:w="3"/><text x="95.7520%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="95.5020%" y="229" width="0.2410%" height="15" fill="rgb(227,131,7)" fg:x="1189" fg:w="3"/><text x="95.7520%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.6627%" y="213" width="0.0803%" height="15" fill="rgb(216,72,36)" fg:x="1191" fg:w="1"/><text x="95.9127%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.6627%" y="197" width="0.0803%" height="15" fill="rgb(243,158,40)" fg:x="1191" fg:w="1"/><text x="95.9127%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (129 samples, 10.36%)</title><rect x="85.5422%" y="405" width="10.3614%" height="15" fill="rgb(218,60,54)" fg:x="1065" fg:w="129"/><text x="85.7922%" y="415.50">&lt;&amp;kernel::model..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (120 samples, 9.64%)</title><rect x="86.2651%" y="389" width="9.6386%" height="15" fill="rgb(230,15,46)" fg:x="1074" fg:w="120"/><text x="86.5151%" y="399.50">plugins_core::..</text></g><g><title>indefinite::indefinite (120 samples, 9.64%)</title><rect x="86.2651%" y="373" width="9.6386%" height="15" fill="rgb(250,22,26)" fg:x="1074" fg:w="120"/><text x="86.5151%" y="383.50">indefinite::in..</text></g><g><title>indefinite::methods::indefinite (120 samples, 9.64%)</title><rect x="86.2651%" y="357" width="9.6386%" height="15" fill="rgb(239,194,40)" fg:x="1074" fg:w="120"/><text x="86.5151%" y="367.50">indefinite::me..</text></g><g><title>indefinite::methods::apply_rules (120 samples, 9.64%)</title><rect x="86.2651%" y="341" width="9.6386%" height="15" fill="rgb(219,62,9)" fg:x="1074" fg:w="120"/><text x="86.5151%" y="351.50">indefinite::me..</text></g><g><title>indefinite::rules::other::Other::run (18 samples, 1.45%)</title><rect x="94.4578%" y="325" width="1.4458%" height="15" fill="rgb(228,45,21)" fg:x="1176" fg:w="18"/><text x="94.7078%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (18 samples, 1.45%)</title><rect x="94.4578%" y="309" width="1.4458%" height="15" fill="rgb(242,56,44)" fg:x="1176" fg:w="18"/><text x="94.7078%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="95.7430%" y="293" width="0.1606%" height="15" fill="rgb(239,170,14)" fg:x="1192" fg:w="2"/><text x="95.9930%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="95.7430%" y="277" width="0.1606%" height="15" fill="rgb(236,150,13)" fg:x="1192" fg:w="2"/><text x="95.9930%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="95.7430%" y="261" width="0.1606%" height="15" fill="rgb(228,15,30)" fg:x="1192" fg:w="2"/><text x="95.9930%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="95.8233%" y="245" width="0.0803%" height="15" fill="rgb(217,43,28)" fg:x="1193" fg:w="1"/><text x="96.0733%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="95.8233%" y="229" width="0.0803%" height="15" fill="rgb(246,223,1)" fg:x="1193" fg:w="1"/><text x="96.0733%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.8233%" y="213" width="0.0803%" height="15" fill="rgb(247,103,7)" fg:x="1193" fg:w="1"/><text x="96.0733%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.8233%" y="197" width="0.0803%" height="15" fill="rgb(205,105,39)" fg:x="1193" fg:w="1"/><text x="96.0733%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.8233%" y="181" width="0.0803%" height="15" fill="rgb(216,134,18)" fg:x="1193" fg:w="1"/><text x="96.0733%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="95.9839%" y="277" width="0.0803%" height="15" fill="rgb(226,139,50)" fg:x="1195" fg:w="1"/><text x="96.2339%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="95.9839%" y="261" width="0.0803%" height="15" fill="rgb(251,152,38)" fg:x="1195" fg:w="1"/><text x="96.2339%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="95.9839%" y="325" width="0.1606%" height="15" fill="rgb(222,63,15)" fg:x="1195" fg:w="2"/><text x="96.2339%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="95.9839%" y="309" width="0.1606%" height="15" fill="rgb(212,198,28)" fg:x="1195" fg:w="2"/><text x="96.2339%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="95.9839%" y="293" width="0.1606%" height="15" fill="rgb(216,93,38)" fg:x="1195" fg:w="2"/><text x="96.2339%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.0643%" y="277" width="0.0803%" height="15" fill="rgb(247,202,44)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.0643%" y="261" width="0.0803%" height="15" fill="rgb(237,204,46)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.0643%" y="245" width="0.0803%" height="15" fill="rgb(224,98,48)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.0643%" y="229" width="0.0803%" height="15" fill="rgb(247,105,21)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.0643%" y="213" width="0.0803%" height="15" fill="rgb(212,137,52)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.0643%" y="197" width="0.0803%" height="15" fill="rgb(223,76,33)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.0643%" y="181" width="0.0803%" height="15" fill="rgb(209,156,27)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.0643%" y="165" width="0.0803%" height="15" fill="rgb(249,81,54)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.0643%" y="149" width="0.0803%" height="15" fill="rgb(241,46,29)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.0643%" y="133" width="0.0803%" height="15" fill="rgb(213,193,39)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.0643%" y="117" width="0.0803%" height="15" fill="rgb(214,85,16)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="127.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="96.1446%" y="293" width="0.0803%" height="15" fill="rgb(216,184,17)" fg:x="1197" fg:w="1"/><text x="96.3946%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="96.1446%" y="277" width="0.0803%" height="15" fill="rgb(254,219,29)" fg:x="1197" fg:w="1"/><text x="96.3946%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="96.1446%" y="261" width="0.0803%" height="15" fill="rgb(209,148,34)" fg:x="1197" fg:w="1"/><text x="96.3946%" y="271.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.1446%" y="245" width="0.0803%" height="15" fill="rgb(253,215,11)" fg:x="1197" fg:w="1"/><text x="96.3946%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (1 samples, 0.08%)</title><rect x="96.1446%" y="229" width="0.0803%" height="15" fill="rgb(232,126,20)" fg:x="1197" fg:w="1"/><text x="96.3946%" y="239.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (5 samples, 0.40%)</title><rect x="95.9036%" y="373" width="0.4016%" height="15" fill="rgb(248,118,51)" fg:x="1194" fg:w="5"/><text x="96.1536%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="95.9839%" y="357" width="0.3213%" height="15" fill="rgb(226,121,21)" fg:x="1195" fg:w="4"/><text x="96.2339%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="95.9839%" y="341" width="0.3213%" height="15" fill="rgb(216,128,16)" fg:x="1195" fg:w="4"/><text x="96.2339%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="96.1446%" y="325" width="0.1606%" height="15" fill="rgb(205,17,9)" fg:x="1197" fg:w="2"/><text x="96.3946%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.1446%" y="309" width="0.1606%" height="15" fill="rgb(206,197,21)" fg:x="1197" fg:w="2"/><text x="96.3946%" y="319.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="96.2249%" y="293" width="0.0803%" height="15" fill="rgb(212,202,9)" fg:x="1198" fg:w="1"/><text x="96.4749%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (6 samples, 0.48%)</title><rect x="95.9036%" y="405" width="0.4819%" height="15" fill="rgb(241,131,50)" fg:x="1194" fg:w="6"/><text x="96.1536%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (6 samples, 0.48%)</title><rect x="95.9036%" y="389" width="0.4819%" height="15" fill="rgb(228,115,51)" fg:x="1194" fg:w="6"/><text x="96.1536%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="96.3052%" y="373" width="0.0803%" height="15" fill="rgb(237,209,8)" fg:x="1199" fg:w="1"/><text x="96.5552%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="96.3052%" y="357" width="0.0803%" height="15" fill="rgb(241,121,28)" fg:x="1199" fg:w="1"/><text x="96.5552%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="96.3052%" y="341" width="0.0803%" height="15" fill="rgb(238,194,51)" fg:x="1199" fg:w="1"/><text x="96.5552%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="96.3052%" y="325" width="0.0803%" height="15" fill="rgb(208,41,39)" fg:x="1199" fg:w="1"/><text x="96.5552%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="96.3052%" y="309" width="0.0803%" height="15" fill="rgb(223,95,44)" fg:x="1199" fg:w="1"/><text x="96.5552%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.3052%" y="293" width="0.0803%" height="15" fill="rgb(253,98,40)" fg:x="1199" fg:w="1"/><text x="96.5552%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.4659%" y="357" width="0.0803%" height="15" fill="rgb(210,5,12)" fg:x="1201" fg:w="1"/><text x="96.7159%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (3 samples, 0.24%)</title><rect x="96.3855%" y="389" width="0.2410%" height="15" fill="rgb(233,201,23)" fg:x="1200" fg:w="3"/><text x="96.6355%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (2 samples, 0.16%)</title><rect x="96.4659%" y="373" width="0.1606%" height="15" fill="rgb(251,68,15)" fg:x="1201" fg:w="2"/><text x="96.7159%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (1 samples, 0.08%)</title><rect x="96.5462%" y="357" width="0.0803%" height="15" fill="rgb(243,10,46)" fg:x="1202" fg:w="1"/><text x="96.7962%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="96.5462%" y="341" width="0.0803%" height="15" fill="rgb(253,130,44)" fg:x="1202" fg:w="1"/><text x="96.7962%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="96.5462%" y="325" width="0.0803%" height="15" fill="rgb(244,5,26)" fg:x="1202" fg:w="1"/><text x="96.7962%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="96.5462%" y="309" width="0.0803%" height="15" fill="rgb(220,126,20)" fg:x="1202" fg:w="1"/><text x="96.7962%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="96.5462%" y="293" width="0.0803%" height="15" fill="rgb(212,188,29)" fg:x="1202" fg:w="1"/><text x="96.7962%" y="303.50"></text></g><g><title>&lt;plugins_rune::runner::RuneReturn as plugins_rune::PerformTagged&gt;::handle (1 samples, 0.08%)</title><rect x="96.5462%" y="277" width="0.0803%" height="15" fill="rgb(227,194,48)" fg:x="1202" fg:w="1"/><text x="96.7962%" y="287.50"></text></g><g><title>&lt;rune::runtime::value::Value as plugins_rune::runner::Simplifies&gt;::simplify (1 samples, 0.08%)</title><rect x="96.5462%" y="261" width="0.0803%" height="15" fill="rgb(245,64,28)" fg:x="1202" fg:w="1"/><text x="96.7962%" y="271.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="96.6265%" y="389" width="0.0803%" height="15" fill="rgb(205,44,7)" fg:x="1203" fg:w="1"/><text x="96.8765%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (1 samples, 0.08%)</title><rect x="96.6265%" y="373" width="0.0803%" height="15" fill="rgb(213,193,11)" fg:x="1203" fg:w="1"/><text x="96.8765%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct_variant (1 samples, 0.08%)</title><rect x="96.6265%" y="357" width="0.0803%" height="15" fill="rgb(238,157,6)" fg:x="1203" fg:w="1"/><text x="96.8765%" y="367.50"></text></g><g><title>plugins_core::library::actions::reply_ok (5 samples, 0.40%)</title><rect x="96.3855%" y="405" width="0.4016%" height="15" fill="rgb(222,73,7)" fg:x="1200" fg:w="5"/><text x="96.6355%" y="415.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="96.7068%" y="389" width="0.0803%" height="15" fill="rgb(224,78,15)" fg:x="1204" fg:w="1"/><text x="96.9568%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="96.7871%" y="389" width="0.0803%" height="15" fill="rgb(218,149,46)" fg:x="1205" fg:w="1"/><text x="97.0371%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="96.7871%" y="373" width="0.0803%" height="15" fill="rgb(218,175,44)" fg:x="1205" fg:w="1"/><text x="97.0371%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="96.7871%" y="357" width="0.0803%" height="15" fill="rgb(215,183,45)" fg:x="1205" fg:w="1"/><text x="97.0371%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="96.7871%" y="341" width="0.0803%" height="15" fill="rgb(226,116,37)" fg:x="1205" fg:w="1"/><text x="97.0371%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.7871%" y="325" width="0.0803%" height="15" fill="rgb(252,224,12)" fg:x="1205" fg:w="1"/><text x="97.0371%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.7871%" y="309" width="0.0803%" height="15" fill="rgb(232,212,21)" fg:x="1205" fg:w="1"/><text x="97.0371%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="96.7871%" y="293" width="0.0803%" height="15" fill="rgb(226,191,16)" fg:x="1205" fg:w="1"/><text x="97.0371%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.7871%" y="277" width="0.0803%" height="15" fill="rgb(231,156,11)" fg:x="1205" fg:w="1"/><text x="97.0371%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.7871%" y="261" width="0.0803%" height="15" fill="rgb(225,134,49)" fg:x="1205" fg:w="1"/><text x="97.0371%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="96.7871%" y="245" width="0.0803%" height="15" fill="rgb(254,55,32)" fg:x="1205" fg:w="1"/><text x="97.0371%" y="255.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="96.8675%" y="373" width="0.0803%" height="15" fill="rgb(242,195,29)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.8675%" y="357" width="0.0803%" height="15" fill="rgb(210,155,20)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.8675%" y="341" width="0.0803%" height="15" fill="rgb(243,170,23)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.8675%" y="325" width="0.0803%" height="15" fill="rgb(242,197,51)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.8675%" y="309" width="0.0803%" height="15" fill="rgb(248,48,13)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.8675%" y="293" width="0.0803%" height="15" fill="rgb(221,185,15)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.8675%" y="277" width="0.0803%" height="15" fill="rgb(244,49,7)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.8675%" y="261" width="0.0803%" height="15" fill="rgb(213,182,52)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.8675%" y="245" width="0.0803%" height="15" fill="rgb(209,15,45)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.8675%" y="229" width="0.0803%" height="15" fill="rgb(233,23,44)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.8675%" y="213" width="0.0803%" height="15" fill="rgb(220,182,30)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.8675%" y="197" width="0.0803%" height="15" fill="rgb(219,116,33)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.8675%" y="181" width="0.0803%" height="15" fill="rgb(231,15,21)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.8675%" y="165" width="0.0803%" height="15" fill="rgb(238,119,25)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.8675%" y="149" width="0.0803%" height="15" fill="rgb(232,30,39)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="159.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="96.8675%" y="389" width="0.1606%" height="15" fill="rgb(241,26,30)" fg:x="1206" fg:w="2"/><text x="97.1175%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="96.9478%" y="373" width="0.0803%" height="15" fill="rgb(234,154,4)" fg:x="1207" fg:w="1"/><text x="97.1978%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="96.9478%" y="357" width="0.0803%" height="15" fill="rgb(229,199,39)" fg:x="1207" fg:w="1"/><text x="97.1978%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="96.9478%" y="341" width="0.0803%" height="15" fill="rgb(236,213,10)" fg:x="1207" fg:w="1"/><text x="97.1978%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="96.9478%" y="325" width="0.0803%" height="15" fill="rgb(247,28,19)" fg:x="1207" fg:w="1"/><text x="97.1978%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.9478%" y="309" width="0.0803%" height="15" fill="rgb(239,199,24)" fg:x="1207" fg:w="1"/><text x="97.1978%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.0281%" y="341" width="0.0803%" height="15" fill="rgb(246,122,13)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="351.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="97.0281%" y="389" width="0.1606%" height="15" fill="rgb(210,203,29)" fg:x="1208" fg:w="2"/><text x="97.2781%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.0281%" y="373" width="0.1606%" height="15" fill="rgb(218,4,50)" fg:x="1208" fg:w="2"/><text x="97.2781%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.0281%" y="357" width="0.1606%" height="15" fill="rgb(236,142,48)" fg:x="1208" fg:w="2"/><text x="97.2781%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1084%" y="341" width="0.0803%" height="15" fill="rgb(245,173,2)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1084%" y="325" width="0.0803%" height="15" fill="rgb(244,196,18)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.1084%" y="309" width="0.0803%" height="15" fill="rgb(221,27,33)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.1084%" y="293" width="0.0803%" height="15" fill="rgb(210,206,16)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.1084%" y="277" width="0.0803%" height="15" fill="rgb(238,161,34)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="97.1084%" y="261" width="0.0803%" height="15" fill="rgb(243,118,39)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="97.1084%" y="245" width="0.0803%" height="15" fill="rgb(234,126,9)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="97.1888%" y="357" width="0.0803%" height="15" fill="rgb(234,167,42)" fg:x="1210" fg:w="1"/><text x="97.4388%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.1888%" y="341" width="0.0803%" height="15" fill="rgb(238,54,48)" fg:x="1210" fg:w="1"/><text x="97.4388%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="97.1888%" y="325" width="0.0803%" height="15" fill="rgb(226,105,2)" fg:x="1210" fg:w="1"/><text x="97.4388%" y="335.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (148 samples, 11.89%)</title><rect x="85.5422%" y="421" width="11.8876%" height="15" fill="rgb(223,95,23)" fg:x="1065" fg:w="148"/><text x="85.7922%" y="431.50">&lt;plugins_core::car..</text></g><g><title>plugins_core::location::model::change_location (8 samples, 0.64%)</title><rect x="96.7871%" y="405" width="0.6426%" height="15" fill="rgb(249,212,19)" fg:x="1205" fg:w="8"/><text x="97.0371%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (3 samples, 0.24%)</title><rect x="97.1888%" y="389" width="0.2410%" height="15" fill="rgb(234,158,54)" fg:x="1210" fg:w="3"/><text x="97.4388%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="97.1888%" y="373" width="0.2410%" height="15" fill="rgb(247,114,32)" fg:x="1210" fg:w="3"/><text x="97.4388%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="97.2691%" y="357" width="0.1606%" height="15" fill="rgb(250,68,44)" fg:x="1211" fg:w="2"/><text x="97.5191%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="97.3494%" y="341" width="0.0803%" height="15" fill="rgb(242,3,15)" fg:x="1212" fg:w="1"/><text x="97.5994%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="97.3494%" y="325" width="0.0803%" height="15" fill="rgb(223,110,32)" fg:x="1212" fg:w="1"/><text x="97.5994%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="97.3494%" y="309" width="0.0803%" height="15" fill="rgb(216,26,54)" fg:x="1212" fg:w="1"/><text x="97.5994%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.3494%" y="293" width="0.0803%" height="15" fill="rgb(209,145,42)" fg:x="1212" fg:w="1"/><text x="97.5994%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.3494%" y="277" width="0.0803%" height="15" fill="rgb(240,111,53)" fg:x="1212" fg:w="1"/><text x="97.5994%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="97.3494%" y="261" width="0.0803%" height="15" fill="rgb(209,101,4)" fg:x="1212" fg:w="1"/><text x="97.5994%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (295 samples, 23.69%)</title><rect x="73.8153%" y="549" width="23.6948%" height="15" fill="rgb(231,74,29)" fg:x="919" fg:w="295"/><text x="74.0653%" y="559.50">kernel::plugins::mw::MiddlewareNext::h..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (295 samples, 23.69%)</title><rect x="73.8153%" y="533" width="23.6948%" height="15" fill="rgb(223,12,12)" fg:x="919" fg:w="295"/><text x="74.0653%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware as ..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (294 samples, 23.61%)</title><rect x="73.8956%" y="517" width="23.6145%" height="15" fill="rgb(207,162,2)" fg:x="920" fg:w="294"/><text x="74.1456%" y="527.50">kernel::plugins::mw::MiddlewareNext::h..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (294 samples, 23.61%)</title><rect x="73.8956%" y="501" width="23.6145%" height="15" fill="rgb(230,152,0)" fg:x="920" fg:w="294"/><text x="74.1456%" y="511.50">core::ops::function::FnOnce::call_once..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (294 samples, 23.61%)</title><rect x="73.8956%" y="485" width="23.6145%" height="15" fill="rgb(254,156,19)" fg:x="920" fg:w="294"/><text x="74.1456%" y="495.50">kernel::plugins::mw::MiddlewareNext::h..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (293 samples, 23.53%)</title><rect x="73.9759%" y="469" width="23.5341%" height="15" fill="rgb(250,28,0)" fg:x="921" fg:w="293"/><text x="74.2259%" y="479.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (293 samples, 23.53%)</title><rect x="73.9759%" y="453" width="23.5341%" height="15" fill="rgb(253,27,5)" fg:x="921" fg:w="293"/><text x="74.2259%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops:..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (293 samples, 23.53%)</title><rect x="73.9759%" y="437" width="23.5341%" height="15" fill="rgb(244,154,7)" fg:x="921" fg:w="293"/><text x="74.2259%" y="447.50">&lt;engine::session::state::State as ker..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.4297%" y="421" width="0.0803%" height="15" fill="rgb(242,108,21)" fg:x="1213" fg:w="1"/><text x="97.6797%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.5100%" y="533" width="0.0803%" height="15" fill="rgb(254,200,38)" fg:x="1214" fg:w="1"/><text x="97.7600%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.5100%" y="517" width="0.0803%" height="15" fill="rgb(250,145,41)" fg:x="1214" fg:w="1"/><text x="97.7600%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.5904%" y="533" width="0.0803%" height="15" fill="rgb(235,136,31)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.7510%" y="501" width="0.0803%" height="15" fill="rgb(215,13,18)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7510%" y="485" width="0.0803%" height="15" fill="rgb(238,199,12)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7510%" y="469" width="0.0803%" height="15" fill="rgb(242,179,49)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.7510%" y="453" width="0.0803%" height="15" fill="rgb(214,10,44)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7510%" y="437" width="0.0803%" height="15" fill="rgb(229,181,11)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.7510%" y="421" width="0.0803%" height="15" fill="rgb(244,155,10)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="97.8313%" y="389" width="0.0803%" height="15" fill="rgb(254,13,48)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="97.9116%" y="309" width="0.1606%" height="15" fill="rgb(210,164,6)" fg:x="1219" fg:w="2"/><text x="98.1616%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="97.8313%" y="437" width="0.3213%" height="15" fill="rgb(216,187,40)" fg:x="1218" fg:w="4"/><text x="98.0813%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="97.8313%" y="421" width="0.3213%" height="15" fill="rgb(208,143,21)" fg:x="1218" fg:w="4"/><text x="98.0813%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="97.8313%" y="405" width="0.3213%" height="15" fill="rgb(211,73,41)" fg:x="1218" fg:w="4"/><text x="98.0813%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="97.9116%" y="389" width="0.2410%" height="15" fill="rgb(244,69,21)" fg:x="1219" fg:w="3"/><text x="98.1616%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.9116%" y="373" width="0.2410%" height="15" fill="rgb(230,152,32)" fg:x="1219" fg:w="3"/><text x="98.1616%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="97.9116%" y="357" width="0.2410%" height="15" fill="rgb(208,110,18)" fg:x="1219" fg:w="3"/><text x="98.1616%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.9116%" y="341" width="0.2410%" height="15" fill="rgb(214,201,49)" fg:x="1219" fg:w="3"/><text x="98.1616%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.9116%" y="325" width="0.2410%" height="15" fill="rgb(253,153,27)" fg:x="1219" fg:w="3"/><text x="98.1616%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.0723%" y="309" width="0.0803%" height="15" fill="rgb(238,61,11)" fg:x="1221" fg:w="1"/><text x="98.3223%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0723%" y="293" width="0.0803%" height="15" fill="rgb(227,84,2)" fg:x="1221" fg:w="1"/><text x="98.3223%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0723%" y="277" width="0.0803%" height="15" fill="rgb(233,52,8)" fg:x="1221" fg:w="1"/><text x="98.3223%" y="287.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.40%)</title><rect x="97.8313%" y="501" width="0.4016%" height="15" fill="rgb(209,136,13)" fg:x="1218" fg:w="5"/><text x="98.0813%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.40%)</title><rect x="97.8313%" y="485" width="0.4016%" height="15" fill="rgb(229,86,25)" fg:x="1218" fg:w="5"/><text x="98.0813%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="97.8313%" y="469" width="0.4016%" height="15" fill="rgb(235,47,16)" fg:x="1218" fg:w="5"/><text x="98.0813%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="97.8313%" y="453" width="0.4016%" height="15" fill="rgb(231,186,4)" fg:x="1218" fg:w="5"/><text x="98.0813%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.1526%" y="437" width="0.0803%" height="15" fill="rgb(209,213,23)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="447.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.1526%" y="421" width="0.0803%" height="15" fill="rgb(212,142,47)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.1526%" y="405" width="0.0803%" height="15" fill="rgb(251,86,24)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.1526%" y="389" width="0.0803%" height="15" fill="rgb(206,217,17)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.1526%" y="373" width="0.0803%" height="15" fill="rgb(248,92,38)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.1526%" y="357" width="0.0803%" height="15" fill="rgb(214,25,29)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.1526%" y="341" width="0.0803%" height="15" fill="rgb(245,117,13)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.1526%" y="325" width="0.0803%" height="15" fill="rgb(205,169,9)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.1526%" y="309" width="0.0803%" height="15" fill="rgb(223,134,38)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="319.50"></text></g><g><title>plugins_core::tools::contained_by (8 samples, 0.64%)</title><rect x="97.6707%" y="517" width="0.6426%" height="15" fill="rgb(249,129,49)" fg:x="1216" fg:w="8"/><text x="97.9207%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="98.2329%" y="501" width="0.0803%" height="15" fill="rgb(229,157,45)" fg:x="1223" fg:w="1"/><text x="98.4829%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.2329%" y="485" width="0.0803%" height="15" fill="rgb(232,159,11)" fg:x="1223" fg:w="1"/><text x="98.4829%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4739%" y="485" width="0.0803%" height="15" fill="rgb(230,134,26)" fg:x="1226" fg:w="1"/><text x="98.7239%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="98.3936%" y="501" width="0.2410%" height="15" fill="rgb(234,149,40)" fg:x="1225" fg:w="3"/><text x="98.6436%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5542%" y="485" width="0.0803%" height="15" fill="rgb(221,122,15)" fg:x="1227" fg:w="1"/><text x="98.8042%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5542%" y="469" width="0.0803%" height="15" fill="rgb(228,127,0)" fg:x="1227" fg:w="1"/><text x="98.8042%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.5542%" y="453" width="0.0803%" height="15" fill="rgb(248,37,7)" fg:x="1227" fg:w="1"/><text x="98.8042%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.5542%" y="437" width="0.0803%" height="15" fill="rgb(215,140,49)" fg:x="1227" fg:w="1"/><text x="98.8042%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.5542%" y="421" width="0.0803%" height="15" fill="rgb(236,65,39)" fg:x="1227" fg:w="1"/><text x="98.8042%" y="431.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.40%)</title><rect x="98.3133%" y="517" width="0.4016%" height="15" fill="rgb(253,102,38)" fg:x="1224" fg:w="5"/><text x="98.5633%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="98.6345%" y="501" width="0.0803%" height="15" fill="rgb(244,100,34)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="98.6345%" y="485" width="0.0803%" height="15" fill="rgb(210,179,47)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.6345%" y="469" width="0.0803%" height="15" fill="rgb(231,41,37)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="479.50"></text></g><g><title>engine::session::Session::captured (328 samples, 26.35%)</title><rect x="72.4498%" y="693" width="26.3454%" height="15" fill="rgb(226,209,17)" fg:x="902" fg:w="328"/><text x="72.6998%" y="703.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (326 samples, 26.18%)</title><rect x="72.6104%" y="677" width="26.1847%" height="15" fill="rgb(231,154,20)" fg:x="904" fg:w="326"/><text x="72.8604%" y="687.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (316 samples, 25.38%)</title><rect x="73.4137%" y="661" width="25.3815%" height="15" fill="rgb(216,134,24)" fg:x="914" fg:w="316"/><text x="73.6637%" y="671.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (316 samples, 25.38%)</title><rect x="73.4137%" y="645" width="25.3815%" height="15" fill="rgb(224,71,42)" fg:x="914" fg:w="316"/><text x="73.6637%" y="655.50">&lt;engine::session::Session as kernel::acti..</text></g><g><title>kernel::plugins::mw::apply_middleware (316 samples, 25.38%)</title><rect x="73.4137%" y="629" width="25.3815%" height="15" fill="rgb(250,65,23)" fg:x="914" fg:w="316"/><text x="73.6637%" y="639.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (316 samples, 25.38%)</title><rect x="73.4137%" y="613" width="25.3815%" height="15" fill="rgb(209,160,35)" fg:x="914" fg:w="316"/><text x="73.6637%" y="623.50">kernel::plugins::mw::MiddlewareNext::hand..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (316 samples, 25.38%)</title><rect x="73.4137%" y="597" width="25.3815%" height="15" fill="rgb(215,8,11)" fg:x="914" fg:w="316"/><text x="73.6637%" y="607.50">&lt;engine::session::ExpandSurroundingsMiddl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (311 samples, 24.98%)</title><rect x="73.8153%" y="581" width="24.9799%" height="15" fill="rgb(227,27,12)" fg:x="919" fg:w="311"/><text x="74.0653%" y="591.50">kernel::plugins::mw::MiddlewareNext::han..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (311 samples, 24.98%)</title><rect x="73.8153%" y="565" width="24.9799%" height="15" fill="rgb(226,111,41)" fg:x="919" fg:w="311"/><text x="74.0653%" y="575.50">&lt;plugins_rune::RuneMiddleware as kernel:..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (16 samples, 1.29%)</title><rect x="97.5100%" y="549" width="1.2851%" height="15" fill="rgb(212,195,15)" fg:x="1214" fg:w="16"/><text x="97.7600%" y="559.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (14 samples, 1.12%)</title><rect x="97.6707%" y="533" width="1.1245%" height="15" fill="rgb(216,191,17)" fg:x="1216" fg:w="14"/><text x="97.9207%" y="543.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="98.7149%" y="517" width="0.0803%" height="15" fill="rgb(215,57,44)" fg:x="1229" fg:w="1"/><text x="98.9649%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.7149%" y="501" width="0.0803%" height="15" fill="rgb(209,38,4)" fg:x="1229" fg:w="1"/><text x="98.9649%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7149%" y="485" width="0.0803%" height="15" fill="rgb(238,49,31)" fg:x="1229" fg:w="1"/><text x="98.9649%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7149%" y="469" width="0.0803%" height="15" fill="rgb(219,48,39)" fg:x="1229" fg:w="1"/><text x="98.9649%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.7149%" y="453" width="0.0803%" height="15" fill="rgb(252,223,43)" fg:x="1229" fg:w="1"/><text x="98.9649%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.7149%" y="437" width="0.0803%" height="15" fill="rgb(247,205,46)" fg:x="1229" fg:w="1"/><text x="98.9649%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.7149%" y="421" width="0.0803%" height="15" fill="rgb(231,16,40)" fg:x="1229" fg:w="1"/><text x="98.9649%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7952%" y="645" width="0.0803%" height="15" fill="rgb(231,115,5)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7952%" y="629" width="0.0803%" height="15" fill="rgb(206,127,43)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7952%" y="613" width="0.0803%" height="15" fill="rgb(218,101,9)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7952%" y="597" width="0.0803%" height="15" fill="rgb(235,138,50)" fg:x="1230" fg:w="1"/><text x="99.0452%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.8755%" y="597" width="0.1606%" height="15" fill="rgb(214,197,52)" fg:x="1231" fg:w="2"/><text x="99.1255%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.8755%" y="581" width="0.1606%" height="15" fill="rgb(230,80,19)" fg:x="1231" fg:w="2"/><text x="99.1255%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.8755%" y="565" width="0.1606%" height="15" fill="rgb(224,77,16)" fg:x="1231" fg:w="2"/><text x="99.1255%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9558%" y="549" width="0.0803%" height="15" fill="rgb(246,4,13)" fg:x="1232" fg:w="1"/><text x="99.2058%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0361%" y="549" width="0.0803%" height="15" fill="rgb(220,177,26)" fg:x="1233" fg:w="1"/><text x="99.2861%" y="559.50"></text></g><g><title>engine::session::internal::Added::find_refs (5 samples, 0.40%)</title><rect x="98.7952%" y="677" width="0.4016%" height="15" fill="rgb(215,114,45)" fg:x="1230" fg:w="5"/><text x="99.0452%" y="687.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="98.7952%" y="661" width="0.4016%" height="15" fill="rgb(215,71,54)" fg:x="1230" fg:w="5"/><text x="99.0452%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.8755%" y="645" width="0.3213%" height="15" fill="rgb(211,155,22)" fg:x="1231" fg:w="4"/><text x="99.1255%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="98.8755%" y="629" width="0.3213%" height="15" fill="rgb(245,206,18)" fg:x="1231" fg:w="4"/><text x="99.1255%" y="639.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="98.8755%" y="613" width="0.3213%" height="15" fill="rgb(248,216,48)" fg:x="1231" fg:w="4"/><text x="99.1255%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.0361%" y="597" width="0.1606%" height="15" fill="rgb(244,84,45)" fg:x="1233" fg:w="2"/><text x="99.2861%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.0361%" y="581" width="0.1606%" height="15" fill="rgb(245,13,45)" fg:x="1233" fg:w="2"/><text x="99.2861%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.0361%" y="565" width="0.1606%" height="15" fill="rgb(247,163,2)" fg:x="1233" fg:w="2"/><text x="99.2861%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1165%" y="549" width="0.0803%" height="15" fill="rgb(211,175,10)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1165%" y="533" width="0.0803%" height="15" fill="rgb(215,186,31)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1165%" y="517" width="0.0803%" height="15" fill="rgb(207,42,11)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1968%" y="661" width="0.0803%" height="15" fill="rgb(224,197,20)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1968%" y="645" width="0.0803%" height="15" fill="rgb(244,119,36)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1968%" y="629" width="0.0803%" height="15" fill="rgb(250,60,27)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1968%" y="613" width="0.0803%" height="15" fill="rgb(252,202,1)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1968%" y="597" width="0.0803%" height="15" fill="rgb(206,53,25)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1968%" y="581" width="0.0803%" height="15" fill="rgb(210,88,4)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1968%" y="565" width="0.0803%" height="15" fill="rgb(211,144,28)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.1968%" y="549" width="0.0803%" height="15" fill="rgb(247,81,32)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.1968%" y="533" width="0.0803%" height="15" fill="rgb(225,192,11)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.1968%" y="517" width="0.0803%" height="15" fill="rgb(232,212,27)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1968%" y="501" width="0.0803%" height="15" fill="rgb(239,3,29)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1968%" y="485" width="0.0803%" height="15" fill="rgb(252,225,29)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.1968%" y="469" width="0.0803%" height="15" fill="rgb(205,151,9)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.1968%" y="453" width="0.0803%" height="15" fill="rgb(216,171,47)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.1968%" y="437" width="0.0803%" height="15" fill="rgb(206,181,1)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.1968%" y="421" width="0.0803%" height="15" fill="rgb(232,218,10)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1968%" y="405" width="0.0803%" height="15" fill="rgb(244,222,51)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.2771%" y="661" width="0.0803%" height="15" fill="rgb(252,215,16)" fg:x="1236" fg:w="1"/><text x="99.5271%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2771%" y="645" width="0.0803%" height="15" fill="rgb(212,130,13)" fg:x="1236" fg:w="1"/><text x="99.5271%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2771%" y="629" width="0.0803%" height="15" fill="rgb(227,103,37)" fg:x="1236" fg:w="1"/><text x="99.5271%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.2771%" y="613" width="0.0803%" height="15" fill="rgb(249,48,15)" fg:x="1236" fg:w="1"/><text x="99.5271%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2771%" y="597" width="0.0803%" height="15" fill="rgb(225,96,9)" fg:x="1236" fg:w="1"/><text x="99.5271%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.2771%" y="581" width="0.0803%" height="15" fill="rgb(213,81,41)" fg:x="1236" fg:w="1"/><text x="99.5271%" y="591.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.64%)</title><rect x="98.7952%" y="693" width="0.6426%" height="15" fill="rgb(230,15,12)" fg:x="1230" fg:w="8"/><text x="99.0452%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.1968%" y="677" width="0.2410%" height="15" fill="rgb(218,106,37)" fg:x="1235" fg:w="3"/><text x="99.4468%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.3574%" y="661" width="0.0803%" height="15" fill="rgb(223,172,47)" fg:x="1237" fg:w="1"/><text x="99.6074%" y="671.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.3574%" y="645" width="0.0803%" height="15" fill="rgb(246,180,49)" fg:x="1237" fg:w="1"/><text x="99.6074%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3574%" y="629" width="0.0803%" height="15" fill="rgb(231,63,37)" fg:x="1237" fg:w="1"/><text x="99.6074%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3574%" y="613" width="0.0803%" height="15" fill="rgb(235,70,40)" fg:x="1237" fg:w="1"/><text x="99.6074%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3574%" y="597" width="0.0803%" height="15" fill="rgb(250,54,26)" fg:x="1237" fg:w="1"/><text x="99.6074%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3574%" y="581" width="0.0803%" height="15" fill="rgb(214,190,1)" fg:x="1237" fg:w="1"/><text x="99.6074%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.3574%" y="565" width="0.0803%" height="15" fill="rgb(212,40,35)" fg:x="1237" fg:w="1"/><text x="99.6074%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3574%" y="549" width="0.0803%" height="15" fill="rgb(239,183,47)" fg:x="1237" fg:w="1"/><text x="99.6074%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.4378%" y="677" width="0.0803%" height="15" fill="rgb(211,171,49)" fg:x="1238" fg:w="1"/><text x="99.6878%" y="687.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="99.4378%" y="693" width="0.1606%" height="15" fill="rgb(249,186,27)" fg:x="1238" fg:w="2"/><text x="99.6878%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.5181%" y="677" width="0.0803%" height="15" fill="rgb(223,23,48)" fg:x="1239" fg:w="1"/><text x="99.7681%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5181%" y="661" width="0.0803%" height="15" fill="rgb(209,203,21)" fg:x="1239" fg:w="1"/><text x="99.7681%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6787%" y="597" width="0.0803%" height="15" fill="rgb(229,33,27)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6787%" y="581" width="0.0803%" height="15" fill="rgb(207,8,53)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6787%" y="565" width="0.0803%" height="15" fill="rgb(221,42,0)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6787%" y="549" width="0.0803%" height="15" fill="rgb(223,115,3)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6787%" y="533" width="0.0803%" height="15" fill="rgb(239,35,26)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="99.6787%" y="517" width="0.0803%" height="15" fill="rgb(233,22,9)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="99.5984%" y="645" width="0.2410%" height="15" fill="rgb(236,221,48)" fg:x="1240" fg:w="3"/><text x="99.8484%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.5984%" y="629" width="0.2410%" height="15" fill="rgb(235,52,30)" fg:x="1240" fg:w="3"/><text x="99.8484%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.5984%" y="613" width="0.2410%" height="15" fill="rgb(238,133,51)" fg:x="1240" fg:w="3"/><text x="99.8484%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7590%" y="597" width="0.0803%" height="15" fill="rgb(213,122,23)" fg:x="1242" fg:w="1"/><text x="100.0090%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7590%" y="581" width="0.0803%" height="15" fill="rgb(225,8,15)" fg:x="1242" fg:w="1"/><text x="100.0090%" y="591.50"></text></g><g><title>all (1,245 samples, 100%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(219,126,35)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1087.50"></text></g><g><title>simple-a3fc65a7 (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(246,113,21)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1071.50">simple-a3fc65a7</text></g><g><title>_start (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(241,193,32)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1055.50">_start</text></g><g><title>__libc_start_main (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(218,99,18)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1039.50">__libc_start_main</text></g><g><title>main (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(225,114,4)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1023.50">main</text></g><g><title>std::rt::lang_start_internal (1,245 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(235,0,15)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1007.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,245 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(247,45,27)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,245 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(249,88,53)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,245 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(207,58,45)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="959.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,245 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(216,7,11)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,245 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(230,40,33)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,245 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(232,24,46)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,245 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(219,222,45)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,245 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(229,85,44)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="879.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,245 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(243,71,36)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="863.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,245 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(230,203,45)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="847.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,245 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(224,77,49)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="831.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,245 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(210,186,47)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="815.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,245 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(232,146,10)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="799.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (485 samples, 38.96%)</title><rect x="61.0442%" y="773" width="38.9558%" height="15" fill="rgb(236,185,51)" fg:x="760" fg:w="485"/><text x="61.2942%" y="783.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Rout..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (485 samples, 38.96%)</title><rect x="61.0442%" y="757" width="38.9558%" height="15" fill="rgb(223,206,43)" fg:x="760" fg:w="485"/><text x="61.2942%" y="767.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (485 samples, 38.96%)</title><rect x="61.0442%" y="741" width="38.9558%" height="15" fill="rgb(227,212,9)" fg:x="760" fg:w="485"/><text x="61.2942%" y="751.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (345 samples, 27.71%)</title><rect x="72.2892%" y="725" width="27.7108%" height="15" fill="rgb(205,82,3)" fg:x="900" fg:w="345"/><text x="72.5392%" y="735.50">engine::session::Session::evaluate_and_perfo..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (345 samples, 27.71%)</title><rect x="72.2892%" y="709" width="27.7108%" height="15" fill="rgb(214,2,27)" fg:x="900" fg:w="345"/><text x="72.5392%" y="719.50">engine::session::Session::evaluate_and_perfo..</text></g><g><title>kernel::model::EntityPtrResolver::world (5 samples, 0.40%)</title><rect x="99.5984%" y="693" width="0.4016%" height="15" fill="rgb(241,37,22)" fg:x="1240" fg:w="5"/><text x="99.8484%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="99.5984%" y="677" width="0.4016%" height="15" fill="rgb(219,182,1)" fg:x="1240" fg:w="5"/><text x="99.8484%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="99.5984%" y="661" width="0.4016%" height="15" fill="rgb(208,224,23)" fg:x="1240" fg:w="5"/><text x="99.8484%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.8394%" y="645" width="0.1606%" height="15" fill="rgb(219,121,32)" fg:x="1243" fg:w="2"/><text x="100.0894%" y="655.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.8394%" y="629" width="0.1606%" height="15" fill="rgb(253,13,40)" fg:x="1243" fg:w="2"/><text x="100.0894%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8394%" y="613" width="0.1606%" height="15" fill="rgb(233,6,28)" fg:x="1243" fg:w="2"/><text x="100.0894%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8394%" y="597" width="0.1606%" height="15" fill="rgb(233,73,8)" fg:x="1243" fg:w="2"/><text x="100.0894%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8394%" y="581" width="0.1606%" height="15" fill="rgb(223,48,27)" fg:x="1243" fg:w="2"/><text x="100.0894%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9197%" y="565" width="0.0803%" height="15" fill="rgb(231,98,37)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9197%" y="549" width="0.0803%" height="15" fill="rgb(249,43,32)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9197%" y="533" width="0.0803%" height="15" fill="rgb(246,184,20)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="543.50"></text></g></svg></svg>