<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="1279"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2346%" y="629" width="0.0782%" height="15" fill="rgb(231,175,7)" fg:x="3" fg:w="1"/><text x="0.4846%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.31%)</title><rect x="0.0782%" y="693" width="0.3127%" height="15" fill="rgb(236,89,47)" fg:x="1" fg:w="4"/><text x="0.3282%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="0.0782%" y="677" width="0.3127%" height="15" fill="rgb(213,191,37)" fg:x="1" fg:w="4"/><text x="0.3282%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.2346%" y="661" width="0.1564%" height="15" fill="rgb(252,0,34)" fg:x="3" fg:w="2"/><text x="0.4846%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="0.2346%" y="645" width="0.1564%" height="15" fill="rgb(208,145,44)" fg:x="3" fg:w="2"/><text x="0.4846%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="0.3127%" y="629" width="0.0782%" height="15" fill="rgb(227,95,50)" fg:x="4" fg:w="1"/><text x="0.5627%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.5473%" y="581" width="0.0782%" height="15" fill="rgb(222,136,24)" fg:x="7" fg:w="1"/><text x="0.7973%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5473%" y="565" width="0.0782%" height="15" fill="rgb(218,105,10)" fg:x="7" fg:w="1"/><text x="0.7973%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7037%" y="565" width="0.0782%" height="15" fill="rgb(216,65,28)" fg:x="9" fg:w="1"/><text x="0.9537%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.7819%" y="565" width="0.1564%" height="15" fill="rgb(229,6,28)" fg:x="10" fg:w="2"/><text x="1.0319%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.7819%" y="549" width="0.1564%" height="15" fill="rgb(222,160,42)" fg:x="10" fg:w="2"/><text x="1.0319%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.70%)</title><rect x="0.3909%" y="629" width="0.7037%" height="15" fill="rgb(235,83,49)" fg:x="5" fg:w="9"/><text x="0.6409%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (8 samples, 0.63%)</title><rect x="0.4691%" y="613" width="0.6255%" height="15" fill="rgb(236,86,36)" fg:x="6" fg:w="8"/><text x="0.7191%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.63%)</title><rect x="0.4691%" y="597" width="0.6255%" height="15" fill="rgb(236,19,41)" fg:x="6" fg:w="8"/><text x="0.7191%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="0.6255%" y="581" width="0.4691%" height="15" fill="rgb(217,71,31)" fg:x="8" fg:w="6"/><text x="0.8755%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_channel::waker::Entry&gt; (2 samples, 0.16%)</title><rect x="0.9382%" y="565" width="0.1564%" height="15" fill="rgb(236,209,25)" fg:x="12" fg:w="2"/><text x="1.1882%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.1728%" y="597" width="0.1564%" height="15" fill="rgb(247,104,21)" fg:x="15" fg:w="2"/><text x="1.4228%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2510%" y="581" width="0.0782%" height="15" fill="rgb(243,80,38)" fg:x="16" fg:w="1"/><text x="1.5010%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4073%" y="581" width="0.0782%" height="15" fill="rgb(232,109,38)" fg:x="18" fg:w="1"/><text x="1.6573%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="1.4855%" y="565" width="0.0782%" height="15" fill="rgb(212,177,53)" fg:x="19" fg:w="1"/><text x="1.7355%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="1.4855%" y="549" width="0.0782%" height="15" fill="rgb(227,30,34)" fg:x="19" fg:w="1"/><text x="1.7355%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.4855%" y="533" width="0.0782%" height="15" fill="rgb(205,175,25)" fg:x="19" fg:w="1"/><text x="1.7355%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4855%" y="517" width="0.0782%" height="15" fill="rgb(249,39,54)" fg:x="19" fg:w="1"/><text x="1.7355%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.25%)</title><rect x="0.3909%" y="677" width="1.2510%" height="15" fill="rgb(215,54,37)" fg:x="5" fg:w="16"/><text x="0.6409%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (16 samples, 1.25%)</title><rect x="0.3909%" y="661" width="1.2510%" height="15" fill="rgb(205,60,46)" fg:x="5" fg:w="16"/><text x="0.6409%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.25%)</title><rect x="0.3909%" y="645" width="1.2510%" height="15" fill="rgb(238,89,29)" fg:x="5" fg:w="16"/><text x="0.6409%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.55%)</title><rect x="1.0946%" y="629" width="0.5473%" height="15" fill="rgb(212,48,10)" fg:x="14" fg:w="7"/><text x="1.3446%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="1.1728%" y="613" width="0.4691%" height="15" fill="rgb(237,186,28)" fg:x="15" fg:w="6"/><text x="1.4228%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="1.3292%" y="597" width="0.3127%" height="15" fill="rgb(237,204,4)" fg:x="17" fg:w="4"/><text x="1.5792%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.4855%" y="581" width="0.1564%" height="15" fill="rgb(237,15,47)" fg:x="19" fg:w="2"/><text x="1.7355%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.5637%" y="565" width="0.0782%" height="15" fill="rgb(244,110,25)" fg:x="20" fg:w="1"/><text x="1.8137%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5637%" y="549" width="0.0782%" height="15" fill="rgb(241,12,16)" fg:x="20" fg:w="1"/><text x="1.8137%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.64%)</title><rect x="0.0782%" y="709" width="1.6419%" height="15" fill="rgb(235,25,9)" fg:x="1" fg:w="21"/><text x="0.3282%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (17 samples, 1.33%)</title><rect x="0.3909%" y="693" width="1.3292%" height="15" fill="rgb(245,159,19)" fg:x="5" fg:w="17"/><text x="0.6409%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6419%" y="677" width="0.0782%" height="15" fill="rgb(236,63,32)" fg:x="21" fg:w="1"/><text x="1.8919%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (2 samples, 0.16%)</title><rect x="1.8765%" y="629" width="0.1564%" height="15" fill="rgb(235,32,52)" fg:x="24" fg:w="2"/><text x="2.1265%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="1.8765%" y="613" width="0.1564%" height="15" fill="rgb(209,176,21)" fg:x="24" fg:w="2"/><text x="2.1265%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="1.8765%" y="597" width="0.1564%" height="15" fill="rgb(205,90,42)" fg:x="24" fg:w="2"/><text x="2.1265%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="1.8765%" y="581" width="0.1564%" height="15" fill="rgb(213,132,16)" fg:x="24" fg:w="2"/><text x="2.1265%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="1.8765%" y="565" width="0.1564%" height="15" fill="rgb(232,11,22)" fg:x="24" fg:w="2"/><text x="2.1265%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="1.8765%" y="549" width="0.1564%" height="15" fill="rgb(248,167,41)" fg:x="24" fg:w="2"/><text x="2.1265%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="1.8765%" y="533" width="0.1564%" height="15" fill="rgb(209,127,6)" fg:x="24" fg:w="2"/><text x="2.1265%" y="543.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="1.8765%" y="517" width="0.1564%" height="15" fill="rgb(246,210,34)" fg:x="24" fg:w="2"/><text x="2.1265%" y="527.50"></text></g><g><title>plugins_rune::runner::SharedRunners::add_runners_for (1 samples, 0.08%)</title><rect x="2.0328%" y="613" width="0.0782%" height="15" fill="rgb(238,165,13)" fg:x="26" fg:w="1"/><text x="2.2828%" y="623.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (3 samples, 0.23%)</title><rect x="2.1110%" y="613" width="0.2346%" height="15" fill="rgb(233,98,15)" fg:x="27" fg:w="3"/><text x="2.3610%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.23%)</title><rect x="2.1110%" y="597" width="0.2346%" height="15" fill="rgb(215,215,51)" fg:x="27" fg:w="3"/><text x="2.3610%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="2.1892%" y="581" width="0.1564%" height="15" fill="rgb(217,161,25)" fg:x="28" fg:w="2"/><text x="2.4392%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.2674%" y="565" width="0.0782%" height="15" fill="rgb(217,167,48)" fg:x="29" fg:w="1"/><text x="2.5174%" y="575.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.55%)</title><rect x="2.3456%" y="597" width="0.5473%" height="15" fill="rgb(205,163,34)" fg:x="30" fg:w="7"/><text x="2.5956%" y="607.50"></text></g><g><title>glob::fill_todo (7 samples, 0.55%)</title><rect x="2.3456%" y="581" width="0.5473%" height="15" fill="rgb(241,197,31)" fg:x="30" fg:w="7"/><text x="2.5956%" y="591.50"></text></g><g><title>glob::is_dir (4 samples, 0.31%)</title><rect x="2.5801%" y="565" width="0.3127%" height="15" fill="rgb(225,123,11)" fg:x="33" fg:w="4"/><text x="2.8301%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.31%)</title><rect x="2.5801%" y="549" width="0.3127%" height="15" fill="rgb(217,4,20)" fg:x="33" fg:w="4"/><text x="2.8301%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.31%)</title><rect x="2.5801%" y="533" width="0.3127%" height="15" fill="rgb(215,55,9)" fg:x="33" fg:w="4"/><text x="2.8301%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.31%)</title><rect x="2.5801%" y="517" width="0.3127%" height="15" fill="rgb(218,165,5)" fg:x="33" fg:w="4"/><text x="2.8301%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.31%)</title><rect x="2.5801%" y="501" width="0.3127%" height="15" fill="rgb(222,175,15)" fg:x="33" fg:w="4"/><text x="2.8301%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.31%)</title><rect x="2.5801%" y="485" width="0.3127%" height="15" fill="rgb(223,85,34)" fg:x="33" fg:w="4"/><text x="2.8301%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.31%)</title><rect x="2.5801%" y="469" width="0.3127%" height="15" fill="rgb(234,228,29)" fg:x="33" fg:w="4"/><text x="2.8301%" y="479.50"></text></g><g><title>statx (4 samples, 0.31%)</title><rect x="2.5801%" y="453" width="0.3127%" height="15" fill="rgb(239,7,28)" fg:x="33" fg:w="4"/><text x="2.8301%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;glob::Paths&gt; (1 samples, 0.08%)</title><rect x="2.8929%" y="597" width="0.0782%" height="15" fill="rgb(252,222,53)" fg:x="37" fg:w="1"/><text x="3.1429%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="2.8929%" y="581" width="0.0782%" height="15" fill="rgb(232,146,44)" fg:x="37" fg:w="1"/><text x="3.1429%" y="591.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.9711%" y="565" width="0.0782%" height="15" fill="rgb(243,223,53)" fg:x="38" fg:w="1"/><text x="3.2211%" y="575.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.08%)</title><rect x="2.9711%" y="549" width="0.0782%" height="15" fill="rgb(219,128,25)" fg:x="38" fg:w="1"/><text x="3.2211%" y="559.50"></text></g><g><title>std::ffi::os_str::OsString::push (1 samples, 0.08%)</title><rect x="2.9711%" y="533" width="0.0782%" height="15" fill="rgb(223,56,32)" fg:x="38" fg:w="1"/><text x="3.2211%" y="543.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="2.9711%" y="517" width="0.0782%" height="15" fill="rgb(237,41,3)" fg:x="38" fg:w="1"/><text x="3.2211%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="2.9711%" y="501" width="0.0782%" height="15" fill="rgb(235,138,9)" fg:x="38" fg:w="1"/><text x="3.2211%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="2.9711%" y="485" width="0.0782%" height="15" fill="rgb(214,131,10)" fg:x="38" fg:w="1"/><text x="3.2211%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="2.9711%" y="469" width="0.0782%" height="15" fill="rgb(229,89,7)" fg:x="38" fg:w="1"/><text x="3.2211%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="2.9711%" y="453" width="0.0782%" height="15" fill="rgb(240,24,42)" fg:x="38" fg:w="1"/><text x="3.2211%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="2.9711%" y="437" width="0.0782%" height="15" fill="rgb(243,188,54)" fg:x="38" fg:w="1"/><text x="3.2211%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.9711%" y="421" width="0.0782%" height="15" fill="rgb(246,92,22)" fg:x="38" fg:w="1"/><text x="3.2211%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="2.9711%" y="405" width="0.0782%" height="15" fill="rgb(211,176,51)" fg:x="38" fg:w="1"/><text x="3.2211%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.9711%" y="389" width="0.0782%" height="15" fill="rgb(246,207,34)" fg:x="38" fg:w="1"/><text x="3.2211%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.9711%" y="373" width="0.0782%" height="15" fill="rgb(239,95,2)" fg:x="38" fg:w="1"/><text x="3.2211%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.0493%" y="565" width="0.0782%" height="15" fill="rgb(211,124,25)" fg:x="39" fg:w="1"/><text x="3.2993%" y="575.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (15 samples, 1.17%)</title><rect x="2.0328%" y="629" width="1.1728%" height="15" fill="rgb(231,221,19)" fg:x="26" fg:w="15"/><text x="2.2828%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (11 samples, 0.86%)</title><rect x="2.3456%" y="613" width="0.8600%" height="15" fill="rgb(239,183,19)" fg:x="30" fg:w="11"/><text x="2.5956%" y="623.50"></text></g><g><title>glob::glob (3 samples, 0.23%)</title><rect x="2.9711%" y="597" width="0.2346%" height="15" fill="rgb(221,130,29)" fg:x="38" fg:w="3"/><text x="3.2211%" y="607.50"></text></g><g><title>glob::glob_with (3 samples, 0.23%)</title><rect x="2.9711%" y="581" width="0.2346%" height="15" fill="rgb(206,130,36)" fg:x="38" fg:w="3"/><text x="3.2211%" y="591.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="3.1274%" y="565" width="0.0782%" height="15" fill="rgb(215,70,19)" fg:x="40" fg:w="1"/><text x="3.3774%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.1274%" y="549" width="0.0782%" height="15" fill="rgb(244,16,43)" fg:x="40" fg:w="1"/><text x="3.3774%" y="559.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.3620%" y="565" width="0.0782%" height="15" fill="rgb(222,115,32)" fg:x="43" fg:w="1"/><text x="3.6120%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.3620%" y="549" width="0.0782%" height="15" fill="rgb(247,48,25)" fg:x="43" fg:w="1"/><text x="3.6120%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.3620%" y="533" width="0.0782%" height="15" fill="rgb(226,180,51)" fg:x="43" fg:w="1"/><text x="3.6120%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.3620%" y="517" width="0.0782%" height="15" fill="rgb(217,142,42)" fg:x="43" fg:w="1"/><text x="3.6120%" y="527.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.23%)</title><rect x="3.2838%" y="597" width="0.2346%" height="15" fill="rgb(220,178,3)" fg:x="42" fg:w="3"/><text x="3.5338%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.23%)</title><rect x="3.2838%" y="581" width="0.2346%" height="15" fill="rgb(217,221,4)" fg:x="42" fg:w="3"/><text x="3.5338%" y="591.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.4402%" y="565" width="0.0782%" height="15" fill="rgb(237,63,43)" fg:x="44" fg:w="1"/><text x="3.6902%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.4402%" y="549" width="0.0782%" height="15" fill="rgb(220,57,8)" fg:x="44" fg:w="1"/><text x="3.6902%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.4402%" y="533" width="0.0782%" height="15" fill="rgb(254,186,27)" fg:x="44" fg:w="1"/><text x="3.6902%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.4402%" y="517" width="0.0782%" height="15" fill="rgb(251,57,28)" fg:x="44" fg:w="1"/><text x="3.6902%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.4402%" y="501" width="0.0782%" height="15" fill="rgb(215,228,0)" fg:x="44" fg:w="1"/><text x="3.6902%" y="511.50"></text></g><g><title>&lt;plugins_core::carrying::actions::GiveToAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.5184%" y="565" width="0.0782%" height="15" fill="rgb(237,218,39)" fg:x="45" fg:w="1"/><text x="3.7684%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.5184%" y="549" width="0.0782%" height="15" fill="rgb(207,2,54)" fg:x="45" fg:w="1"/><text x="3.7684%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6747%" y="549" width="0.0782%" height="15" fill="rgb(232,76,50)" fg:x="47" fg:w="1"/><text x="3.9247%" y="559.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (3 samples, 0.23%)</title><rect x="3.5966%" y="565" width="0.2346%" height="15" fill="rgb(211,85,31)" fg:x="46" fg:w="3"/><text x="3.8466%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.7529%" y="549" width="0.0782%" height="15" fill="rgb(223,210,27)" fg:x="48" fg:w="1"/><text x="4.0029%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.8311%" y="565" width="0.0782%" height="15" fill="rgb(254,36,8)" fg:x="49" fg:w="1"/><text x="4.0811%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (6 samples, 0.47%)</title><rect x="3.5184%" y="597" width="0.4691%" height="15" fill="rgb(213,4,25)" fg:x="45" fg:w="6"/><text x="3.7684%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (6 samples, 0.47%)</title><rect x="3.5184%" y="581" width="0.4691%" height="15" fill="rgb(224,2,39)" fg:x="45" fg:w="6"/><text x="3.7684%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.9093%" y="565" width="0.0782%" height="15" fill="rgb(208,8,39)" fg:x="50" fg:w="1"/><text x="4.1593%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.9093%" y="549" width="0.0782%" height="15" fill="rgb(216,226,3)" fg:x="50" fg:w="1"/><text x="4.1593%" y="559.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="3.9875%" y="597" width="0.1564%" height="15" fill="rgb(249,139,31)" fg:x="51" fg:w="2"/><text x="4.2375%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.0657%" y="581" width="0.0782%" height="15" fill="rgb(242,170,35)" fg:x="52" fg:w="1"/><text x="4.3157%" y="591.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.0657%" y="565" width="0.0782%" height="15" fill="rgb(238,14,9)" fg:x="52" fg:w="1"/><text x="4.3157%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.0657%" y="549" width="0.0782%" height="15" fill="rgb(251,81,46)" fg:x="52" fg:w="1"/><text x="4.3157%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.0657%" y="533" width="0.0782%" height="15" fill="rgb(230,23,4)" fg:x="52" fg:w="1"/><text x="4.3157%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.0657%" y="517" width="0.0782%" height="15" fill="rgb(211,85,25)" fg:x="52" fg:w="1"/><text x="4.3157%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0657%" y="501" width="0.0782%" height="15" fill="rgb(252,23,31)" fg:x="52" fg:w="1"/><text x="4.3157%" y="511.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.1439%" y="597" width="0.0782%" height="15" fill="rgb(234,163,38)" fg:x="53" fg:w="1"/><text x="4.3939%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.1439%" y="581" width="0.0782%" height="15" fill="rgb(210,190,50)" fg:x="53" fg:w="1"/><text x="4.3939%" y="591.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.1439%" y="565" width="0.0782%" height="15" fill="rgb(228,158,3)" fg:x="53" fg:w="1"/><text x="4.3939%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.1439%" y="549" width="0.0782%" height="15" fill="rgb(216,130,0)" fg:x="53" fg:w="1"/><text x="4.3939%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.1439%" y="533" width="0.0782%" height="15" fill="rgb(224,184,10)" fg:x="53" fg:w="1"/><text x="4.3939%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.1439%" y="517" width="0.0782%" height="15" fill="rgb(214,202,18)" fg:x="53" fg:w="1"/><text x="4.3939%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="4.2220%" y="597" width="0.1564%" height="15" fill="rgb(213,229,54)" fg:x="54" fg:w="2"/><text x="4.4720%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="4.2220%" y="581" width="0.1564%" height="15" fill="rgb(246,120,0)" fg:x="54" fg:w="2"/><text x="4.4720%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="4.3002%" y="565" width="0.0782%" height="15" fill="rgb(237,6,15)" fg:x="55" fg:w="1"/><text x="4.5502%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (16 samples, 1.25%)</title><rect x="3.2056%" y="629" width="1.2510%" height="15" fill="rgb(252,156,15)" fg:x="41" fg:w="16"/><text x="3.4556%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 1.25%)</title><rect x="3.2056%" y="613" width="1.2510%" height="15" fill="rgb(249,78,18)" fg:x="41" fg:w="16"/><text x="3.4556%" y="623.50"></text></g><g><title>kernel::plugins::Plugin::schema (1 samples, 0.08%)</title><rect x="4.3784%" y="597" width="0.0782%" height="15" fill="rgb(230,223,44)" fg:x="56" fg:w="1"/><text x="4.6284%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.4566%" y="629" width="0.0782%" height="15" fill="rgb(230,222,32)" fg:x="57" fg:w="1"/><text x="4.7066%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.5348%" y="613" width="0.0782%" height="15" fill="rgb(247,54,6)" fg:x="58" fg:w="1"/><text x="4.7848%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (2 samples, 0.16%)</title><rect x="4.5348%" y="629" width="0.1564%" height="15" fill="rgb(247,115,45)" fg:x="58" fg:w="2"/><text x="4.7848%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="4.6130%" y="613" width="0.0782%" height="15" fill="rgb(213,203,37)" fg:x="59" fg:w="1"/><text x="4.8630%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.6130%" y="597" width="0.0782%" height="15" fill="rgb(248,188,18)" fg:x="59" fg:w="1"/><text x="4.8630%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (38 samples, 2.97%)</title><rect x="1.7983%" y="645" width="2.9711%" height="15" fill="rgb(206,80,8)" fg:x="23" fg:w="38"/><text x="2.0483%" y="655.50">ker..</text></g><g><title>kernel::plugins::Plugin::initialize (1 samples, 0.08%)</title><rect x="4.6912%" y="629" width="0.0782%" height="15" fill="rgb(245,217,31)" fg:x="60" fg:w="1"/><text x="4.9412%" y="639.50"></text></g><g><title>engine::session::Session::initialize (39 samples, 3.05%)</title><rect x="1.7983%" y="661" width="3.0493%" height="15" fill="rgb(220,193,15)" fg:x="23" fg:w="39"/><text x="2.0483%" y="671.50">eng..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="4.7694%" y="645" width="0.0782%" height="15" fill="rgb(226,7,19)" fg:x="61" fg:w="1"/><text x="5.0194%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.7694%" y="629" width="0.0782%" height="15" fill="rgb(222,145,31)" fg:x="61" fg:w="1"/><text x="5.0194%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (41 samples, 3.21%)</title><rect x="1.7201%" y="709" width="3.2056%" height="15" fill="rgb(241,193,36)" fg:x="22" fg:w="41"/><text x="1.9701%" y="719.50">&lt;en..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (40 samples, 3.13%)</title><rect x="1.7983%" y="693" width="3.1274%" height="15" fill="rgb(225,123,33)" fg:x="23" fg:w="40"/><text x="2.0483%" y="703.50">eng..</text></g><g><title>engine::session::Session::new (40 samples, 3.13%)</title><rect x="1.7983%" y="677" width="3.1274%" height="15" fill="rgb(246,136,38)" fg:x="23" fg:w="40"/><text x="2.0483%" y="687.50">eng..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="4.8475%" y="661" width="0.0782%" height="15" fill="rgb(243,56,24)" fg:x="62" fg:w="1"/><text x="5.0975%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.8475%" y="645" width="0.0782%" height="15" fill="rgb(215,147,2)" fg:x="62" fg:w="1"/><text x="5.0975%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.9257%" y="693" width="0.0782%" height="15" fill="rgb(209,155,27)" fg:x="63" fg:w="1"/><text x="5.1757%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="4.9257%" y="677" width="0.0782%" height="15" fill="rgb(222,177,11)" fg:x="63" fg:w="1"/><text x="5.1757%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.9257%" y="661" width="0.0782%" height="15" fill="rgb(212,227,15)" fg:x="63" fg:w="1"/><text x="5.1757%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.9257%" y="645" width="0.0782%" height="15" fill="rgb(214,138,20)" fg:x="63" fg:w="1"/><text x="5.1757%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (2 samples, 0.16%)</title><rect x="5.0039%" y="693" width="0.1564%" height="15" fill="rgb(221,170,31)" fg:x="64" fg:w="2"/><text x="5.2539%" y="703.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="5.0039%" y="677" width="0.1564%" height="15" fill="rgb(253,207,5)" fg:x="64" fg:w="2"/><text x="5.2539%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::surround::Surroundings&gt; (1 samples, 0.08%)</title><rect x="5.1603%" y="693" width="0.0782%" height="15" fill="rgb(212,64,37)" fg:x="66" fg:w="1"/><text x="5.4103%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.1603%" y="677" width="0.0782%" height="15" fill="rgb(208,113,51)" fg:x="66" fg:w="1"/><text x="5.4103%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="5.2385%" y="677" width="0.0782%" height="15" fill="rgb(237,15,5)" fg:x="67" fg:w="1"/><text x="5.4885%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.2385%" y="661" width="0.0782%" height="15" fill="rgb(238,33,18)" fg:x="67" fg:w="1"/><text x="5.4885%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="5.3167%" y="549" width="0.2346%" height="15" fill="rgb(253,206,50)" fg:x="68" fg:w="3"/><text x="5.5667%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="5.3948%" y="533" width="0.1564%" height="15" fill="rgb(242,158,43)" fg:x="69" fg:w="2"/><text x="5.6448%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="5.3167%" y="597" width="0.3127%" height="15" fill="rgb(213,125,27)" fg:x="68" fg:w="4"/><text x="5.5667%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="5.3167%" y="581" width="0.3127%" height="15" fill="rgb(233,161,31)" fg:x="68" fg:w="4"/><text x="5.5667%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="5.3167%" y="565" width="0.3127%" height="15" fill="rgb(218,135,6)" fg:x="68" fg:w="4"/><text x="5.5667%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.5512%" y="549" width="0.0782%" height="15" fill="rgb(222,73,53)" fg:x="71" fg:w="1"/><text x="5.8012%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.5512%" y="533" width="0.0782%" height="15" fill="rgb(229,66,53)" fg:x="71" fg:w="1"/><text x="5.8012%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.6294%" y="565" width="0.1564%" height="15" fill="rgb(208,128,19)" fg:x="72" fg:w="2"/><text x="5.8794%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.6294%" y="549" width="0.1564%" height="15" fill="rgb(235,70,27)" fg:x="72" fg:w="2"/><text x="5.8794%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.6294%" y="533" width="0.1564%" height="15" fill="rgb(241,130,30)" fg:x="72" fg:w="2"/><text x="5.8794%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="5.6294%" y="517" width="0.1564%" height="15" fill="rgb(222,57,48)" fg:x="72" fg:w="2"/><text x="5.8794%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.7076%" y="501" width="0.0782%" height="15" fill="rgb(225,204,29)" fg:x="73" fg:w="1"/><text x="5.9576%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.7076%" y="485" width="0.0782%" height="15" fill="rgb(240,196,35)" fg:x="73" fg:w="1"/><text x="5.9576%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.7076%" y="469" width="0.0782%" height="15" fill="rgb(215,150,16)" fg:x="73" fg:w="1"/><text x="5.9576%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.23%)</title><rect x="5.6294%" y="581" width="0.2346%" height="15" fill="rgb(209,170,13)" fg:x="72" fg:w="3"/><text x="5.8794%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7858%" y="565" width="0.0782%" height="15" fill="rgb(235,75,31)" fg:x="74" fg:w="1"/><text x="6.0358%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.7858%" y="549" width="0.0782%" height="15" fill="rgb(252,1,47)" fg:x="74" fg:w="1"/><text x="6.0358%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.7858%" y="533" width="0.0782%" height="15" fill="rgb(241,2,36)" fg:x="74" fg:w="1"/><text x="6.0358%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.8640%" y="549" width="0.0782%" height="15" fill="rgb(236,191,4)" fg:x="75" fg:w="1"/><text x="6.1140%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.8640%" y="533" width="0.0782%" height="15" fill="rgb(212,65,35)" fg:x="75" fg:w="1"/><text x="6.1140%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.8640%" y="517" width="0.0782%" height="15" fill="rgb(209,49,33)" fg:x="75" fg:w="1"/><text x="6.1140%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9421%" y="533" width="0.0782%" height="15" fill="rgb(208,36,46)" fg:x="76" fg:w="1"/><text x="6.1921%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.9421%" y="517" width="0.0782%" height="15" fill="rgb(210,125,2)" fg:x="76" fg:w="1"/><text x="6.1921%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.9421%" y="501" width="0.0782%" height="15" fill="rgb(225,62,6)" fg:x="76" fg:w="1"/><text x="6.1921%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.9421%" y="485" width="0.0782%" height="15" fill="rgb(210,54,27)" fg:x="76" fg:w="1"/><text x="6.1921%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.47%)</title><rect x="5.6294%" y="597" width="0.4691%" height="15" fill="rgb(249,189,52)" fg:x="72" fg:w="6"/><text x="5.8794%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="5.8640%" y="581" width="0.2346%" height="15" fill="rgb(225,134,40)" fg:x="75" fg:w="3"/><text x="6.1140%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="5.8640%" y="565" width="0.2346%" height="15" fill="rgb(206,13,37)" fg:x="75" fg:w="3"/><text x="6.1140%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.9421%" y="549" width="0.1564%" height="15" fill="rgb(232,114,28)" fg:x="76" fg:w="2"/><text x="6.1921%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.0203%" y="533" width="0.0782%" height="15" fill="rgb(253,215,8)" fg:x="77" fg:w="1"/><text x="6.2703%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.0985%" y="565" width="0.0782%" height="15" fill="rgb(254,64,19)" fg:x="78" fg:w="1"/><text x="6.3485%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="6.0985%" y="581" width="0.1564%" height="15" fill="rgb(242,18,46)" fg:x="78" fg:w="2"/><text x="6.3485%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="6.1767%" y="565" width="0.0782%" height="15" fill="rgb(239,192,30)" fg:x="79" fg:w="1"/><text x="6.4267%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="6.2549%" y="549" width="0.1564%" height="15" fill="rgb(232,73,14)" fg:x="80" fg:w="2"/><text x="6.5049%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4113%" y="549" width="0.0782%" height="15" fill="rgb(225,51,9)" fg:x="82" fg:w="1"/><text x="6.6613%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.4113%" y="533" width="0.0782%" height="15" fill="rgb(242,217,54)" fg:x="82" fg:w="1"/><text x="6.6613%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4113%" y="517" width="0.0782%" height="15" fill="rgb(216,93,3)" fg:x="82" fg:w="1"/><text x="6.6613%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.5676%" y="501" width="0.0782%" height="15" fill="rgb(230,119,33)" fg:x="84" fg:w="1"/><text x="6.8176%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5676%" y="485" width="0.0782%" height="15" fill="rgb(238,170,27)" fg:x="84" fg:w="1"/><text x="6.8176%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.7240%" y="437" width="0.0782%" height="15" fill="rgb(229,8,2)" fg:x="86" fg:w="1"/><text x="6.9740%" y="447.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="6.7240%" y="421" width="0.0782%" height="15" fill="rgb(205,214,42)" fg:x="86" fg:w="1"/><text x="6.9740%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="6.7240%" y="405" width="0.0782%" height="15" fill="rgb(245,113,1)" fg:x="86" fg:w="1"/><text x="6.9740%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.31%)</title><rect x="6.5676%" y="533" width="0.3127%" height="15" fill="rgb(252,50,2)" fg:x="84" fg:w="4"/><text x="6.8176%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.31%)</title><rect x="6.5676%" y="517" width="0.3127%" height="15" fill="rgb(225,122,24)" fg:x="84" fg:w="4"/><text x="6.8176%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.23%)</title><rect x="6.6458%" y="501" width="0.2346%" height="15" fill="rgb(234,129,31)" fg:x="85" fg:w="3"/><text x="6.8958%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.23%)</title><rect x="6.6458%" y="485" width="0.2346%" height="15" fill="rgb(219,177,4)" fg:x="85" fg:w="3"/><text x="6.8958%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="6.7240%" y="469" width="0.1564%" height="15" fill="rgb(225,142,27)" fg:x="86" fg:w="2"/><text x="6.9740%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="6.7240%" y="453" width="0.1564%" height="15" fill="rgb(205,107,51)" fg:x="86" fg:w="2"/><text x="6.9740%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8022%" y="437" width="0.0782%" height="15" fill="rgb(236,223,15)" fg:x="87" fg:w="1"/><text x="7.0522%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8022%" y="421" width="0.0782%" height="15" fill="rgb(235,133,11)" fg:x="87" fg:w="1"/><text x="7.0522%" y="431.50"></text></g><g><title>engine::session::Session::flush (22 samples, 1.72%)</title><rect x="5.2385%" y="693" width="1.7201%" height="15" fill="rgb(247,172,13)" fg:x="67" fg:w="22"/><text x="5.4885%" y="703.50"></text></g><g><title>engine::session::state::State::close (21 samples, 1.64%)</title><rect x="5.3167%" y="677" width="1.6419%" height="15" fill="rgb(233,191,41)" fg:x="68" fg:w="21"/><text x="5.5667%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (21 samples, 1.64%)</title><rect x="5.3167%" y="661" width="1.6419%" height="15" fill="rgb(250,65,16)" fg:x="68" fg:w="21"/><text x="5.5667%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (21 samples, 1.64%)</title><rect x="5.3167%" y="645" width="1.6419%" height="15" fill="rgb(206,10,27)" fg:x="68" fg:w="21"/><text x="5.5667%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 1.64%)</title><rect x="5.3167%" y="629" width="1.6419%" height="15" fill="rgb(212,96,22)" fg:x="68" fg:w="21"/><text x="5.5667%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (21 samples, 1.64%)</title><rect x="5.3167%" y="613" width="1.6419%" height="15" fill="rgb(206,50,0)" fg:x="68" fg:w="21"/><text x="5.5667%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (11 samples, 0.86%)</title><rect x="6.0985%" y="597" width="0.8600%" height="15" fill="rgb(249,105,52)" fg:x="78" fg:w="11"/><text x="6.3485%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.70%)</title><rect x="6.2549%" y="581" width="0.7037%" height="15" fill="rgb(216,93,51)" fg:x="80" fg:w="9"/><text x="6.5049%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.70%)</title><rect x="6.2549%" y="565" width="0.7037%" height="15" fill="rgb(217,172,13)" fg:x="80" fg:w="9"/><text x="6.5049%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.47%)</title><rect x="6.4894%" y="549" width="0.4691%" height="15" fill="rgb(235,199,38)" fg:x="83" fg:w="6"/><text x="6.7394%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8804%" y="533" width="0.0782%" height="15" fill="rgb(221,97,33)" fg:x="88" fg:w="1"/><text x="7.1304%" y="543.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="6.9586%" y="693" width="0.0782%" height="15" fill="rgb(205,156,50)" fg:x="89" fg:w="1"/><text x="7.2086%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="6.9586%" y="677" width="0.0782%" height="15" fill="rgb(215,142,19)" fg:x="89" fg:w="1"/><text x="7.2086%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="6.9586%" y="661" width="0.0782%" height="15" fill="rgb(232,170,7)" fg:x="89" fg:w="1"/><text x="7.2086%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.9586%" y="645" width="0.0782%" height="15" fill="rgb(223,50,17)" fg:x="89" fg:w="1"/><text x="7.2086%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.9586%" y="629" width="0.0782%" height="15" fill="rgb(230,103,46)" fg:x="89" fg:w="1"/><text x="7.2086%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="6.9586%" y="613" width="0.0782%" height="15" fill="rgb(254,30,34)" fg:x="89" fg:w="1"/><text x="7.2086%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9586%" y="597" width="0.0782%" height="15" fill="rgb(235,198,1)" fg:x="89" fg:w="1"/><text x="7.2086%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.0367%" y="661" width="0.0782%" height="15" fill="rgb(217,105,47)" fg:x="90" fg:w="1"/><text x="7.2867%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.1149%" y="661" width="0.0782%" height="15" fill="rgb(231,18,12)" fg:x="91" fg:w="1"/><text x="7.3649%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.1931%" y="645" width="0.0782%" height="15" fill="rgb(218,196,1)" fg:x="92" fg:w="1"/><text x="7.4431%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.1931%" y="629" width="0.0782%" height="15" fill="rgb(210,32,3)" fg:x="92" fg:w="1"/><text x="7.4431%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.1931%" y="613" width="0.0782%" height="15" fill="rgb(227,178,30)" fg:x="92" fg:w="1"/><text x="7.4431%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.1931%" y="597" width="0.0782%" height="15" fill="rgb(231,140,27)" fg:x="92" fg:w="1"/><text x="7.4431%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.1931%" y="581" width="0.0782%" height="15" fill="rgb(206,66,35)" fg:x="92" fg:w="1"/><text x="7.4431%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.1931%" y="565" width="0.0782%" height="15" fill="rgb(212,34,2)" fg:x="92" fg:w="1"/><text x="7.4431%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.1931%" y="549" width="0.0782%" height="15" fill="rgb(207,201,33)" fg:x="92" fg:w="1"/><text x="7.4431%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.1931%" y="533" width="0.0782%" height="15" fill="rgb(221,135,32)" fg:x="92" fg:w="1"/><text x="7.4431%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.1931%" y="517" width="0.0782%" height="15" fill="rgb(206,77,31)" fg:x="92" fg:w="1"/><text x="7.4431%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.1931%" y="501" width="0.0782%" height="15" fill="rgb(252,198,50)" fg:x="92" fg:w="1"/><text x="7.4431%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.1931%" y="485" width="0.0782%" height="15" fill="rgb(206,79,27)" fg:x="92" fg:w="1"/><text x="7.4431%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.1931%" y="469" width="0.0782%" height="15" fill="rgb(228,108,9)" fg:x="92" fg:w="1"/><text x="7.4431%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.1931%" y="453" width="0.0782%" height="15" fill="rgb(213,9,39)" fg:x="92" fg:w="1"/><text x="7.4431%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.1931%" y="437" width="0.0782%" height="15" fill="rgb(252,51,13)" fg:x="92" fg:w="1"/><text x="7.4431%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="7.1931%" y="661" width="0.1564%" height="15" fill="rgb(218,202,39)" fg:x="92" fg:w="2"/><text x="7.4431%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.2713%" y="645" width="0.0782%" height="15" fill="rgb(214,122,21)" fg:x="93" fg:w="1"/><text x="7.5213%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.2713%" y="629" width="0.0782%" height="15" fill="rgb(217,205,48)" fg:x="93" fg:w="1"/><text x="7.5213%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.2713%" y="613" width="0.0782%" height="15" fill="rgb(230,216,13)" fg:x="93" fg:w="1"/><text x="7.5213%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="7.3495%" y="661" width="0.0782%" height="15" fill="rgb(249,118,4)" fg:x="94" fg:w="1"/><text x="7.5995%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="7.3495%" y="645" width="0.0782%" height="15" fill="rgb(212,207,40)" fg:x="94" fg:w="1"/><text x="7.5995%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="7.3495%" y="629" width="0.0782%" height="15" fill="rgb(217,156,26)" fg:x="94" fg:w="1"/><text x="7.5995%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.3495%" y="613" width="0.0782%" height="15" fill="rgb(226,86,34)" fg:x="94" fg:w="1"/><text x="7.5995%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="7.4277%" y="597" width="0.0782%" height="15" fill="rgb(217,111,30)" fg:x="95" fg:w="1"/><text x="7.6777%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.4277%" y="581" width="0.0782%" height="15" fill="rgb(228,64,18)" fg:x="95" fg:w="1"/><text x="7.6777%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="7.4277%" y="565" width="0.0782%" height="15" fill="rgb(254,217,48)" fg:x="95" fg:w="1"/><text x="7.6777%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="7.4277%" y="613" width="0.1564%" height="15" fill="rgb(226,156,48)" fg:x="95" fg:w="2"/><text x="7.6777%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.5059%" y="597" width="0.0782%" height="15" fill="rgb(236,168,20)" fg:x="96" fg:w="1"/><text x="7.7559%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5059%" y="581" width="0.0782%" height="15" fill="rgb(239,210,33)" fg:x="96" fg:w="1"/><text x="7.7559%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.5059%" y="565" width="0.0782%" height="15" fill="rgb(242,85,17)" fg:x="96" fg:w="1"/><text x="7.7559%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5059%" y="549" width="0.0782%" height="15" fill="rgb(221,196,15)" fg:x="96" fg:w="1"/><text x="7.7559%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.5059%" y="533" width="0.0782%" height="15" fill="rgb(249,76,21)" fg:x="96" fg:w="1"/><text x="7.7559%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.5059%" y="517" width="0.0782%" height="15" fill="rgb(243,67,29)" fg:x="96" fg:w="1"/><text x="7.7559%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.23%)</title><rect x="7.4277%" y="645" width="0.2346%" height="15" fill="rgb(240,159,2)" fg:x="95" fg:w="3"/><text x="7.6777%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.23%)</title><rect x="7.4277%" y="629" width="0.2346%" height="15" fill="rgb(244,64,3)" fg:x="95" fg:w="3"/><text x="7.6777%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="7.5841%" y="613" width="0.0782%" height="15" fill="rgb(220,86,40)" fg:x="97" fg:w="1"/><text x="7.8341%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.5841%" y="597" width="0.0782%" height="15" fill="rgb(222,194,51)" fg:x="97" fg:w="1"/><text x="7.8341%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.5841%" y="581" width="0.0782%" height="15" fill="rgb(207,154,19)" fg:x="97" fg:w="1"/><text x="7.8341%" y="591.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="7.6622%" y="645" width="0.1564%" height="15" fill="rgb(206,178,36)" fg:x="98" fg:w="2"/><text x="7.9122%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.7404%" y="629" width="0.0782%" height="15" fill="rgb(218,8,24)" fg:x="99" fg:w="1"/><text x="7.9904%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.7404%" y="613" width="0.0782%" height="15" fill="rgb(226,83,41)" fg:x="99" fg:w="1"/><text x="7.9904%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (12 samples, 0.94%)</title><rect x="7.0367%" y="677" width="0.9382%" height="15" fill="rgb(224,23,22)" fg:x="90" fg:w="12"/><text x="7.2867%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.55%)</title><rect x="7.4277%" y="661" width="0.5473%" height="15" fill="rgb(218,198,45)" fg:x="95" fg:w="7"/><text x="7.6777%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="7.8186%" y="645" width="0.1564%" height="15" fill="rgb(249,147,41)" fg:x="100" fg:w="2"/><text x="8.0686%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="7.8186%" y="629" width="0.1564%" height="15" fill="rgb(244,224,13)" fg:x="100" fg:w="2"/><text x="8.0686%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.8968%" y="613" width="0.0782%" height="15" fill="rgb(225,97,27)" fg:x="101" fg:w="1"/><text x="8.1468%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="7.8968%" y="597" width="0.0782%" height="15" fill="rgb(254,64,0)" fg:x="101" fg:w="1"/><text x="8.1468%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.8968%" y="581" width="0.0782%" height="15" fill="rgb(208,130,43)" fg:x="101" fg:w="1"/><text x="8.1468%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8968%" y="565" width="0.0782%" height="15" fill="rgb(247,91,25)" fg:x="101" fg:w="1"/><text x="8.1468%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.8968%" y="549" width="0.0782%" height="15" fill="rgb(215,218,42)" fg:x="101" fg:w="1"/><text x="8.1468%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8968%" y="533" width="0.0782%" height="15" fill="rgb(233,9,24)" fg:x="101" fg:w="1"/><text x="8.1468%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.8968%" y="517" width="0.0782%" height="15" fill="rgb(252,105,38)" fg:x="101" fg:w="1"/><text x="8.1468%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (13 samples, 1.02%)</title><rect x="7.0367%" y="693" width="1.0164%" height="15" fill="rgb(225,40,49)" fg:x="90" fg:w="13"/><text x="7.2867%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="7.9750%" y="677" width="0.0782%" height="15" fill="rgb(232,196,19)" fg:x="102" fg:w="1"/><text x="8.2250%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.9750%" y="661" width="0.0782%" height="15" fill="rgb(207,35,15)" fg:x="102" fg:w="1"/><text x="8.2250%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.9750%" y="645" width="0.0782%" height="15" fill="rgb(238,68,36)" fg:x="102" fg:w="1"/><text x="8.2250%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.9750%" y="629" width="0.0782%" height="15" fill="rgb(205,158,20)" fg:x="102" fg:w="1"/><text x="8.2250%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScopeRefMut&lt;plugins_core::carrying::model::Containing,kernel::model::entity::Entity&gt;&gt; (1 samples, 0.08%)</title><rect x="8.0532%" y="661" width="0.0782%" height="15" fill="rgb(232,32,22)" fg:x="103" fg:w="1"/><text x="8.3032%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="8.1314%" y="645" width="0.0782%" height="15" fill="rgb(210,169,6)" fg:x="104" fg:w="1"/><text x="8.3814%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.1314%" y="629" width="0.0782%" height="15" fill="rgb(229,28,12)" fg:x="104" fg:w="1"/><text x="8.3814%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.1314%" y="613" width="0.0782%" height="15" fill="rgb(229,78,10)" fg:x="104" fg:w="1"/><text x="8.3814%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="8.1314%" y="597" width="0.0782%" height="15" fill="rgb(223,139,54)" fg:x="104" fg:w="1"/><text x="8.3814%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.23%)</title><rect x="8.1314%" y="661" width="0.2346%" height="15" fill="rgb(207,110,4)" fg:x="104" fg:w="3"/><text x="8.3814%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="8.2095%" y="645" width="0.1564%" height="15" fill="rgb(248,30,41)" fg:x="105" fg:w="2"/><text x="8.4595%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="8.2095%" y="629" width="0.1564%" height="15" fill="rgb(235,54,25)" fg:x="105" fg:w="2"/><text x="8.4595%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="8.2095%" y="613" width="0.1564%" height="15" fill="rgb(213,107,41)" fg:x="105" fg:w="2"/><text x="8.4595%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="8.2095%" y="597" width="0.1564%" height="15" fill="rgb(237,102,9)" fg:x="105" fg:w="2"/><text x="8.4595%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="8.2095%" y="581" width="0.1564%" height="15" fill="rgb(252,137,49)" fg:x="105" fg:w="2"/><text x="8.4595%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.2095%" y="565" width="0.1564%" height="15" fill="rgb(233,202,33)" fg:x="105" fg:w="2"/><text x="8.4595%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.2095%" y="549" width="0.1564%" height="15" fill="rgb(223,14,51)" fg:x="105" fg:w="2"/><text x="8.4595%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="8.2095%" y="533" width="0.1564%" height="15" fill="rgb(248,70,23)" fg:x="105" fg:w="2"/><text x="8.4595%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.3659%" y="581" width="0.0782%" height="15" fill="rgb(209,207,47)" fg:x="107" fg:w="1"/><text x="8.6159%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.3659%" y="565" width="0.0782%" height="15" fill="rgb(245,124,2)" fg:x="107" fg:w="1"/><text x="8.6159%" y="575.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="8.3659%" y="661" width="0.1564%" height="15" fill="rgb(249,208,11)" fg:x="107" fg:w="2"/><text x="8.6159%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="8.3659%" y="645" width="0.1564%" height="15" fill="rgb(247,112,7)" fg:x="107" fg:w="2"/><text x="8.6159%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="8.3659%" y="629" width="0.1564%" height="15" fill="rgb(209,192,31)" fg:x="107" fg:w="2"/><text x="8.6159%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="8.3659%" y="613" width="0.1564%" height="15" fill="rgb(236,55,19)" fg:x="107" fg:w="2"/><text x="8.6159%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="8.3659%" y="597" width="0.1564%" height="15" fill="rgb(252,89,41)" fg:x="107" fg:w="2"/><text x="8.6159%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.4441%" y="581" width="0.0782%" height="15" fill="rgb(220,172,14)" fg:x="108" fg:w="1"/><text x="8.6941%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4441%" y="565" width="0.0782%" height="15" fill="rgb(252,65,2)" fg:x="108" fg:w="1"/><text x="8.6941%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.4441%" y="549" width="0.0782%" height="15" fill="rgb(250,20,8)" fg:x="108" fg:w="1"/><text x="8.6941%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (7 samples, 0.55%)</title><rect x="8.0532%" y="693" width="0.5473%" height="15" fill="rgb(234,149,13)" fg:x="103" fg:w="7"/><text x="8.3032%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.55%)</title><rect x="8.0532%" y="677" width="0.5473%" height="15" fill="rgb(223,219,12)" fg:x="103" fg:w="7"/><text x="8.3032%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="8.5223%" y="661" width="0.0782%" height="15" fill="rgb(234,13,49)" fg:x="109" fg:w="1"/><text x="8.7723%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.5223%" y="645" width="0.0782%" height="15" fill="rgb(214,41,25)" fg:x="109" fg:w="1"/><text x="8.7723%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="8.5223%" y="629" width="0.0782%" height="15" fill="rgb(232,198,52)" fg:x="109" fg:w="1"/><text x="8.7723%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5223%" y="613" width="0.0782%" height="15" fill="rgb(236,111,46)" fg:x="109" fg:w="1"/><text x="8.7723%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.6005%" y="645" width="0.0782%" height="15" fill="rgb(253,30,20)" fg:x="110" fg:w="1"/><text x="8.8505%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="8.6005%" y="661" width="0.1564%" height="15" fill="rgb(247,141,17)" fg:x="110" fg:w="2"/><text x="8.8505%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6787%" y="645" width="0.0782%" height="15" fill="rgb(214,195,21)" fg:x="111" fg:w="1"/><text x="8.9287%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="8.6787%" y="629" width="0.0782%" height="15" fill="rgb(214,98,12)" fg:x="111" fg:w="1"/><text x="8.9287%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.6787%" y="613" width="0.0782%" height="15" fill="rgb(239,4,26)" fg:x="111" fg:w="1"/><text x="8.9287%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.7568%" y="581" width="0.0782%" height="15" fill="rgb(234,210,35)" fg:x="112" fg:w="1"/><text x="9.0068%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.7568%" y="565" width="0.0782%" height="15" fill="rgb(252,178,27)" fg:x="112" fg:w="1"/><text x="9.0068%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.7568%" y="549" width="0.0782%" height="15" fill="rgb(217,50,1)" fg:x="112" fg:w="1"/><text x="9.0068%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.8350%" y="565" width="0.0782%" height="15" fill="rgb(233,137,5)" fg:x="113" fg:w="1"/><text x="9.0850%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.8350%" y="549" width="0.0782%" height="15" fill="rgb(217,227,25)" fg:x="113" fg:w="1"/><text x="9.0850%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.8350%" y="533" width="0.0782%" height="15" fill="rgb(242,89,38)" fg:x="113" fg:w="1"/><text x="9.0850%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.8350%" y="517" width="0.0782%" height="15" fill="rgb(212,190,30)" fg:x="113" fg:w="1"/><text x="9.0850%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.9132%" y="533" width="0.0782%" height="15" fill="rgb(222,120,8)" fg:x="114" fg:w="1"/><text x="9.1632%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.9914%" y="533" width="0.1564%" height="15" fill="rgb(227,181,9)" fg:x="115" fg:w="2"/><text x="9.2414%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.0696%" y="517" width="0.0782%" height="15" fill="rgb(222,125,29)" fg:x="116" fg:w="1"/><text x="9.3196%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.0696%" y="501" width="0.0782%" height="15" fill="rgb(215,153,31)" fg:x="116" fg:w="1"/><text x="9.3196%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.0696%" y="485" width="0.0782%" height="15" fill="rgb(228,77,30)" fg:x="116" fg:w="1"/><text x="9.3196%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.3041%" y="485" width="0.0782%" height="15" fill="rgb(226,110,9)" fg:x="119" fg:w="1"/><text x="9.5541%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.3041%" y="469" width="0.0782%" height="15" fill="rgb(219,111,7)" fg:x="119" fg:w="1"/><text x="9.5541%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.3041%" y="453" width="0.0782%" height="15" fill="rgb(229,167,25)" fg:x="119" fg:w="1"/><text x="9.5541%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.3041%" y="437" width="0.0782%" height="15" fill="rgb(209,77,43)" fg:x="119" fg:w="1"/><text x="9.5541%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="9.3041%" y="517" width="0.1564%" height="15" fill="rgb(233,70,39)" fg:x="119" fg:w="2"/><text x="9.5541%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="9.3041%" y="501" width="0.1564%" height="15" fill="rgb(207,171,44)" fg:x="119" fg:w="2"/><text x="9.5541%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.3823%" y="485" width="0.0782%" height="15" fill="rgb(244,91,6)" fg:x="120" fg:w="1"/><text x="9.6323%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="9.4605%" y="517" width="0.1564%" height="15" fill="rgb(234,136,12)" fg:x="121" fg:w="2"/><text x="9.7105%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.5387%" y="501" width="0.0782%" height="15" fill="rgb(216,210,38)" fg:x="122" fg:w="1"/><text x="9.7887%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.5387%" y="485" width="0.0782%" height="15" fill="rgb(241,227,7)" fg:x="122" fg:w="1"/><text x="9.7887%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.5387%" y="469" width="0.0782%" height="15" fill="rgb(241,222,11)" fg:x="122" fg:w="1"/><text x="9.7887%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.31%)</title><rect x="9.6169%" y="501" width="0.3127%" height="15" fill="rgb(246,86,18)" fg:x="123" fg:w="4"/><text x="9.8669%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.31%)</title><rect x="9.6169%" y="485" width="0.3127%" height="15" fill="rgb(224,151,49)" fg:x="123" fg:w="4"/><text x="9.8669%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.31%)</title><rect x="9.6169%" y="469" width="0.3127%" height="15" fill="rgb(235,4,41)" fg:x="123" fg:w="4"/><text x="9.8669%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.31%)</title><rect x="9.6169%" y="453" width="0.3127%" height="15" fill="rgb(218,30,52)" fg:x="123" fg:w="4"/><text x="9.8669%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.31%)</title><rect x="9.6169%" y="437" width="0.3127%" height="15" fill="rgb(205,124,51)" fg:x="123" fg:w="4"/><text x="9.8669%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="9.6169%" y="421" width="0.3127%" height="15" fill="rgb(237,126,51)" fg:x="123" fg:w="4"/><text x="9.8669%" y="431.50"></text></g><g><title>realloc (4 samples, 0.31%)</title><rect x="9.6169%" y="405" width="0.3127%" height="15" fill="rgb(225,32,46)" fg:x="123" fg:w="4"/><text x="9.8669%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.63%)</title><rect x="9.6169%" y="517" width="0.6255%" height="15" fill="rgb(251,60,49)" fg:x="123" fg:w="8"/><text x="9.8669%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.31%)</title><rect x="9.9296%" y="501" width="0.3127%" height="15" fill="rgb(234,18,23)" fg:x="127" fg:w="4"/><text x="10.1796%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.31%)</title><rect x="9.9296%" y="485" width="0.3127%" height="15" fill="rgb(234,25,23)" fg:x="127" fg:w="4"/><text x="10.1796%" y="495.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.23%)</title><rect x="10.0078%" y="469" width="0.2346%" height="15" fill="rgb(210,43,52)" fg:x="128" fg:w="3"/><text x="10.2578%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.23%)</title><rect x="10.0078%" y="453" width="0.2346%" height="15" fill="rgb(237,198,21)" fg:x="128" fg:w="3"/><text x="10.2578%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.23%)</title><rect x="10.0078%" y="437" width="0.2346%" height="15" fill="rgb(211,20,34)" fg:x="128" fg:w="3"/><text x="10.2578%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.23%)</title><rect x="10.0078%" y="421" width="0.2346%" height="15" fill="rgb(221,155,50)" fg:x="128" fg:w="3"/><text x="10.2578%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="10.0078%" y="405" width="0.2346%" height="15" fill="rgb(213,214,53)" fg:x="128" fg:w="3"/><text x="10.2578%" y="415.50"></text></g><g><title>realloc (3 samples, 0.23%)</title><rect x="10.0078%" y="389" width="0.2346%" height="15" fill="rgb(215,229,48)" fg:x="128" fg:w="3"/><text x="10.2578%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (19 samples, 1.49%)</title><rect x="8.9132%" y="565" width="1.4855%" height="15" fill="rgb(243,88,5)" fg:x="114" fg:w="19"/><text x="9.1632%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (19 samples, 1.49%)</title><rect x="8.9132%" y="549" width="1.4855%" height="15" fill="rgb(216,199,8)" fg:x="114" fg:w="19"/><text x="9.1632%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.25%)</title><rect x="9.1478%" y="533" width="1.2510%" height="15" fill="rgb(241,22,4)" fg:x="117" fg:w="16"/><text x="9.3978%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.2424%" y="517" width="0.1564%" height="15" fill="rgb(209,190,22)" fg:x="131" fg:w="2"/><text x="10.4924%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.3206%" y="501" width="0.0782%" height="15" fill="rgb(251,138,45)" fg:x="132" fg:w="1"/><text x="10.5706%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.3206%" y="485" width="0.0782%" height="15" fill="rgb(219,111,22)" fg:x="132" fg:w="1"/><text x="10.5706%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="10.3987%" y="533" width="0.0782%" height="15" fill="rgb(253,29,49)" fg:x="133" fg:w="1"/><text x="10.6487%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="10.3987%" y="549" width="0.1564%" height="15" fill="rgb(238,129,49)" fg:x="133" fg:w="2"/><text x="10.6487%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="10.4769%" y="533" width="0.0782%" height="15" fill="rgb(240,26,41)" fg:x="134" fg:w="1"/><text x="10.7269%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="10.4769%" y="517" width="0.0782%" height="15" fill="rgb(221,47,33)" fg:x="134" fg:w="1"/><text x="10.7269%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6333%" y="517" width="0.0782%" height="15" fill="rgb(216,200,17)" fg:x="136" fg:w="1"/><text x="10.8833%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="10.7115%" y="517" width="0.0782%" height="15" fill="rgb(230,151,26)" fg:x="137" fg:w="1"/><text x="10.9615%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="10.7115%" y="501" width="0.0782%" height="15" fill="rgb(242,182,16)" fg:x="137" fg:w="1"/><text x="10.9615%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.7897%" y="517" width="0.1564%" height="15" fill="rgb(236,35,53)" fg:x="138" fg:w="2"/><text x="11.0397%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="10.9461%" y="517" width="0.0782%" height="15" fill="rgb(214,180,28)" fg:x="140" fg:w="1"/><text x="11.1961%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.9461%" y="501" width="0.0782%" height="15" fill="rgb(208,173,36)" fg:x="140" fg:w="1"/><text x="11.1961%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9461%" y="485" width="0.0782%" height="15" fill="rgb(218,39,15)" fg:x="140" fg:w="1"/><text x="11.1961%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.1806%" y="485" width="0.0782%" height="15" fill="rgb(213,145,15)" fg:x="143" fg:w="1"/><text x="11.4306%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.2588%" y="469" width="0.0782%" height="15" fill="rgb(242,110,37)" fg:x="144" fg:w="1"/><text x="11.5088%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2588%" y="453" width="0.0782%" height="15" fill="rgb(247,146,22)" fg:x="144" fg:w="1"/><text x="11.5088%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.2588%" y="437" width="0.0782%" height="15" fill="rgb(215,191,7)" fg:x="144" fg:w="1"/><text x="11.5088%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2588%" y="421" width="0.0782%" height="15" fill="rgb(240,158,1)" fg:x="144" fg:w="1"/><text x="11.5088%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.2588%" y="405" width="0.0782%" height="15" fill="rgb(241,78,32)" fg:x="144" fg:w="1"/><text x="11.5088%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2588%" y="389" width="0.0782%" height="15" fill="rgb(248,83,10)" fg:x="144" fg:w="1"/><text x="11.5088%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.2588%" y="373" width="0.0782%" height="15" fill="rgb(241,52,0)" fg:x="144" fg:w="1"/><text x="11.5088%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.23%)</title><rect x="11.3370%" y="437" width="0.2346%" height="15" fill="rgb(238,37,13)" fg:x="145" fg:w="3"/><text x="11.5870%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4934%" y="421" width="0.0782%" height="15" fill="rgb(242,194,17)" fg:x="147" fg:w="1"/><text x="11.7434%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="11.6497%" y="421" width="0.1564%" height="15" fill="rgb(236,96,3)" fg:x="149" fg:w="2"/><text x="11.8997%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.6497%" y="405" width="0.1564%" height="15" fill="rgb(235,148,34)" fg:x="149" fg:w="2"/><text x="11.8997%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.7279%" y="389" width="0.0782%" height="15" fill="rgb(254,12,11)" fg:x="150" fg:w="1"/><text x="11.9779%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.63%)</title><rect x="11.2588%" y="485" width="0.6255%" height="15" fill="rgb(207,31,54)" fg:x="144" fg:w="8"/><text x="11.5088%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.55%)</title><rect x="11.3370%" y="469" width="0.5473%" height="15" fill="rgb(252,14,28)" fg:x="145" fg:w="7"/><text x="11.5870%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.55%)</title><rect x="11.3370%" y="453" width="0.5473%" height="15" fill="rgb(252,108,36)" fg:x="145" fg:w="7"/><text x="11.5870%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.31%)</title><rect x="11.5715%" y="437" width="0.3127%" height="15" fill="rgb(214,149,7)" fg:x="148" fg:w="4"/><text x="11.8215%" y="447.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="11.8061%" y="421" width="0.0782%" height="15" fill="rgb(243,94,12)" fg:x="151" fg:w="1"/><text x="12.0561%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="11.8061%" y="405" width="0.0782%" height="15" fill="rgb(208,36,10)" fg:x="151" fg:w="1"/><text x="12.0561%" y="415.50"></text></g><g><title>engine::session::Session::flush (43 samples, 3.36%)</title><rect x="8.6005%" y="677" width="3.3620%" height="15" fill="rgb(233,185,52)" fg:x="110" fg:w="43"/><text x="8.8505%" y="687.50">eng..</text></g><g><title>engine::session::Session::save_changes (41 samples, 3.21%)</title><rect x="8.7568%" y="661" width="3.2056%" height="15" fill="rgb(234,50,45)" fg:x="112" fg:w="41"/><text x="9.0068%" y="671.50">eng..</text></g><g><title>engine::session::state::State::close (41 samples, 3.21%)</title><rect x="8.7568%" y="645" width="3.2056%" height="15" fill="rgb(228,92,54)" fg:x="112" fg:w="41"/><text x="9.0068%" y="655.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (41 samples, 3.21%)</title><rect x="8.7568%" y="629" width="3.2056%" height="15" fill="rgb(224,85,25)" fg:x="112" fg:w="41"/><text x="9.0068%" y="639.50">eng..</text></g><g><title>core::iter::adapters::try_process (41 samples, 3.21%)</title><rect x="8.7568%" y="613" width="3.2056%" height="15" fill="rgb(246,1,45)" fg:x="112" fg:w="41"/><text x="9.0068%" y="623.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 3.21%)</title><rect x="8.7568%" y="597" width="3.2056%" height="15" fill="rgb(240,66,23)" fg:x="112" fg:w="41"/><text x="9.0068%" y="607.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (40 samples, 3.13%)</title><rect x="8.8350%" y="581" width="3.1274%" height="15" fill="rgb(222,96,27)" fg:x="113" fg:w="40"/><text x="9.0850%" y="591.50">eng..</text></g><g><title>kernel::model::any_entity_changes (20 samples, 1.56%)</title><rect x="10.3987%" y="565" width="1.5637%" height="15" fill="rgb(212,136,10)" fg:x="133" fg:w="20"/><text x="10.6487%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (18 samples, 1.41%)</title><rect x="10.5551%" y="549" width="1.4073%" height="15" fill="rgb(226,192,50)" fg:x="135" fg:w="18"/><text x="10.8051%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (17 samples, 1.33%)</title><rect x="10.6333%" y="533" width="1.3292%" height="15" fill="rgb(241,182,31)" fg:x="136" fg:w="17"/><text x="10.8833%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.94%)</title><rect x="11.0242%" y="517" width="0.9382%" height="15" fill="rgb(219,205,47)" fg:x="141" fg:w="12"/><text x="11.2742%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.78%)</title><rect x="11.1806%" y="501" width="0.7819%" height="15" fill="rgb(207,96,14)" fg:x="143" fg:w="10"/><text x="11.4306%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="11.8843%" y="485" width="0.0782%" height="15" fill="rgb(216,119,9)" fg:x="152" fg:w="1"/><text x="12.1343%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.9625%" y="645" width="0.0782%" height="15" fill="rgb(235,62,36)" fg:x="153" fg:w="1"/><text x="12.2125%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9625%" y="629" width="0.0782%" height="15" fill="rgb(214,41,27)" fg:x="153" fg:w="1"/><text x="12.2125%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9625%" y="613" width="0.0782%" height="15" fill="rgb(214,174,37)" fg:x="153" fg:w="1"/><text x="12.2125%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.9625%" y="597" width="0.0782%" height="15" fill="rgb(212,11,25)" fg:x="153" fg:w="1"/><text x="12.2125%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9625%" y="581" width="0.0782%" height="15" fill="rgb(217,71,35)" fg:x="153" fg:w="1"/><text x="12.2125%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9625%" y="565" width="0.0782%" height="15" fill="rgb(234,152,9)" fg:x="153" fg:w="1"/><text x="12.2125%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9625%" y="549" width="0.0782%" height="15" fill="rgb(228,32,51)" fg:x="153" fg:w="1"/><text x="12.2125%" y="559.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="11.9625%" y="533" width="0.0782%" height="15" fill="rgb(209,14,47)" fg:x="153" fg:w="1"/><text x="12.2125%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="12.0407%" y="645" width="0.0782%" height="15" fill="rgb(218,201,17)" fg:x="154" fg:w="1"/><text x="12.2907%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.0407%" y="629" width="0.0782%" height="15" fill="rgb(218,98,15)" fg:x="154" fg:w="1"/><text x="12.2907%" y="639.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.0407%" y="613" width="0.0782%" height="15" fill="rgb(233,202,29)" fg:x="154" fg:w="1"/><text x="12.2907%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.0407%" y="597" width="0.0782%" height="15" fill="rgb(207,196,44)" fg:x="154" fg:w="1"/><text x="12.2907%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.0407%" y="581" width="0.0782%" height="15" fill="rgb(218,63,34)" fg:x="154" fg:w="1"/><text x="12.2907%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.0407%" y="565" width="0.0782%" height="15" fill="rgb(209,10,5)" fg:x="154" fg:w="1"/><text x="12.2907%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="12.1188%" y="629" width="0.0782%" height="15" fill="rgb(224,36,28)" fg:x="155" fg:w="1"/><text x="12.3688%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="12.1188%" y="613" width="0.0782%" height="15" fill="rgb(249,178,7)" fg:x="155" fg:w="1"/><text x="12.3688%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.1188%" y="597" width="0.0782%" height="15" fill="rgb(253,163,10)" fg:x="155" fg:w="1"/><text x="12.3688%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.1188%" y="581" width="0.0782%" height="15" fill="rgb(245,67,46)" fg:x="155" fg:w="1"/><text x="12.3688%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.1188%" y="565" width="0.0782%" height="15" fill="rgb(225,14,18)" fg:x="155" fg:w="1"/><text x="12.3688%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.1188%" y="549" width="0.0782%" height="15" fill="rgb(217,41,54)" fg:x="155" fg:w="1"/><text x="12.3688%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.1188%" y="533" width="0.0782%" height="15" fill="rgb(222,111,11)" fg:x="155" fg:w="1"/><text x="12.3688%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.1188%" y="517" width="0.0782%" height="15" fill="rgb(211,85,31)" fg:x="155" fg:w="1"/><text x="12.3688%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.1188%" y="501" width="0.0782%" height="15" fill="rgb(223,29,26)" fg:x="155" fg:w="1"/><text x="12.3688%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="12.1188%" y="485" width="0.0782%" height="15" fill="rgb(236,124,50)" fg:x="155" fg:w="1"/><text x="12.3688%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="12.2752%" y="581" width="0.1564%" height="15" fill="rgb(219,148,15)" fg:x="157" fg:w="2"/><text x="12.5252%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.3534%" y="565" width="0.0782%" height="15" fill="rgb(248,159,33)" fg:x="158" fg:w="1"/><text x="12.6034%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.3534%" y="549" width="0.0782%" height="15" fill="rgb(252,65,8)" fg:x="158" fg:w="1"/><text x="12.6034%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.3534%" y="533" width="0.0782%" height="15" fill="rgb(236,45,7)" fg:x="158" fg:w="1"/><text x="12.6034%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.3534%" y="517" width="0.0782%" height="15" fill="rgb(244,3,48)" fg:x="158" fg:w="1"/><text x="12.6034%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.3534%" y="501" width="0.0782%" height="15" fill="rgb(224,123,53)" fg:x="158" fg:w="1"/><text x="12.6034%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.3534%" y="485" width="0.0782%" height="15" fill="rgb(223,173,15)" fg:x="158" fg:w="1"/><text x="12.6034%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.3534%" y="469" width="0.0782%" height="15" fill="rgb(254,181,5)" fg:x="158" fg:w="1"/><text x="12.6034%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.55%)</title><rect x="11.9625%" y="661" width="0.5473%" height="15" fill="rgb(243,124,33)" fg:x="153" fg:w="7"/><text x="12.2125%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.39%)</title><rect x="12.1188%" y="645" width="0.3909%" height="15" fill="rgb(253,220,11)" fg:x="155" fg:w="5"/><text x="12.3688%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.31%)</title><rect x="12.1970%" y="629" width="0.3127%" height="15" fill="rgb(217,14,4)" fg:x="156" fg:w="4"/><text x="12.4470%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.31%)</title><rect x="12.1970%" y="613" width="0.3127%" height="15" fill="rgb(209,196,12)" fg:x="156" fg:w="4"/><text x="12.4470%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.23%)</title><rect x="12.2752%" y="597" width="0.2346%" height="15" fill="rgb(237,108,29)" fg:x="157" fg:w="3"/><text x="12.5252%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.4316%" y="581" width="0.0782%" height="15" fill="rgb(216,173,20)" fg:x="159" fg:w="1"/><text x="12.6816%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5098%" y="661" width="0.0782%" height="15" fill="rgb(245,27,6)" fg:x="160" fg:w="1"/><text x="12.7598%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.5098%" y="645" width="0.0782%" height="15" fill="rgb(210,181,20)" fg:x="160" fg:w="1"/><text x="12.7598%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.5098%" y="629" width="0.0782%" height="15" fill="rgb(235,213,1)" fg:x="160" fg:w="1"/><text x="12.7598%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.78%)</title><rect x="11.9625%" y="677" width="0.7819%" height="15" fill="rgb(239,68,43)" fg:x="153" fg:w="10"/><text x="12.2125%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="12.5880%" y="661" width="0.1564%" height="15" fill="rgb(254,137,43)" fg:x="161" fg:w="2"/><text x="12.8380%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.5880%" y="645" width="0.1564%" height="15" fill="rgb(252,170,38)" fg:x="161" fg:w="2"/><text x="12.8380%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.5880%" y="629" width="0.1564%" height="15" fill="rgb(234,21,42)" fg:x="161" fg:w="2"/><text x="12.8380%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.5880%" y="613" width="0.1564%" height="15" fill="rgb(216,145,40)" fg:x="161" fg:w="2"/><text x="12.8380%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.6661%" y="597" width="0.0782%" height="15" fill="rgb(251,73,9)" fg:x="162" fg:w="1"/><text x="12.9161%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.6661%" y="581" width="0.0782%" height="15" fill="rgb(242,54,6)" fg:x="162" fg:w="1"/><text x="12.9161%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.6661%" y="565" width="0.0782%" height="15" fill="rgb(239,70,7)" fg:x="162" fg:w="1"/><text x="12.9161%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.6661%" y="549" width="0.0782%" height="15" fill="rgb(216,159,35)" fg:x="162" fg:w="1"/><text x="12.9161%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.6661%" y="533" width="0.0782%" height="15" fill="rgb(224,50,39)" fg:x="162" fg:w="1"/><text x="12.9161%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.6661%" y="517" width="0.0782%" height="15" fill="rgb(235,9,35)" fg:x="162" fg:w="1"/><text x="12.9161%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.6661%" y="501" width="0.0782%" height="15" fill="rgb(239,34,21)" fg:x="162" fg:w="1"/><text x="12.9161%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.6661%" y="485" width="0.0782%" height="15" fill="rgb(218,162,43)" fg:x="162" fg:w="1"/><text x="12.9161%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.6661%" y="469" width="0.0782%" height="15" fill="rgb(219,89,33)" fg:x="162" fg:w="1"/><text x="12.9161%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.6661%" y="453" width="0.0782%" height="15" fill="rgb(226,125,37)" fg:x="162" fg:w="1"/><text x="12.9161%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.6661%" y="437" width="0.0782%" height="15" fill="rgb(233,149,30)" fg:x="162" fg:w="1"/><text x="12.9161%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.6661%" y="421" width="0.0782%" height="15" fill="rgb(236,8,18)" fg:x="162" fg:w="1"/><text x="12.9161%" y="431.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="12.7443%" y="677" width="0.0782%" height="15" fill="rgb(205,176,9)" fg:x="163" fg:w="1"/><text x="12.9943%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="12.7443%" y="661" width="0.0782%" height="15" fill="rgb(252,103,44)" fg:x="163" fg:w="1"/><text x="12.9943%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="12.7443%" y="645" width="0.0782%" height="15" fill="rgb(207,68,53)" fg:x="163" fg:w="1"/><text x="12.9943%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="12.7443%" y="629" width="0.0782%" height="15" fill="rgb(218,193,48)" fg:x="163" fg:w="1"/><text x="12.9943%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.7443%" y="613" width="0.0782%" height="15" fill="rgb(234,121,52)" fg:x="163" fg:w="1"/><text x="12.9943%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.7443%" y="597" width="0.0782%" height="15" fill="rgb(227,218,49)" fg:x="163" fg:w="1"/><text x="12.9943%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.8225%" y="629" width="0.0782%" height="15" fill="rgb(221,8,7)" fg:x="164" fg:w="1"/><text x="13.0725%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.8225%" y="613" width="0.0782%" height="15" fill="rgb(217,151,36)" fg:x="164" fg:w="1"/><text x="13.0725%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8225%" y="597" width="0.0782%" height="15" fill="rgb(213,71,5)" fg:x="164" fg:w="1"/><text x="13.0725%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8225%" y="581" width="0.0782%" height="15" fill="rgb(225,145,43)" fg:x="164" fg:w="1"/><text x="13.0725%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8225%" y="565" width="0.0782%" height="15" fill="rgb(235,118,19)" fg:x="164" fg:w="1"/><text x="13.0725%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8225%" y="549" width="0.0782%" height="15" fill="rgb(214,102,36)" fg:x="164" fg:w="1"/><text x="13.0725%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8225%" y="533" width="0.0782%" height="15" fill="rgb(220,56,43)" fg:x="164" fg:w="1"/><text x="13.0725%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.8225%" y="517" width="0.0782%" height="15" fill="rgb(246,136,46)" fg:x="164" fg:w="1"/><text x="13.0725%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.8225%" y="501" width="0.0782%" height="15" fill="rgb(249,99,12)" fg:x="164" fg:w="1"/><text x="13.0725%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.8225%" y="485" width="0.0782%" height="15" fill="rgb(224,31,42)" fg:x="164" fg:w="1"/><text x="13.0725%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8225%" y="469" width="0.0782%" height="15" fill="rgb(208,96,21)" fg:x="164" fg:w="1"/><text x="13.0725%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8225%" y="453" width="0.0782%" height="15" fill="rgb(237,229,7)" fg:x="164" fg:w="1"/><text x="13.0725%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.8225%" y="437" width="0.0782%" height="15" fill="rgb(210,12,6)" fg:x="164" fg:w="1"/><text x="13.0725%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.8225%" y="421" width="0.0782%" height="15" fill="rgb(240,9,34)" fg:x="164" fg:w="1"/><text x="13.0725%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.8225%" y="405" width="0.0782%" height="15" fill="rgb(211,68,37)" fg:x="164" fg:w="1"/><text x="13.0725%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.8225%" y="389" width="0.0782%" height="15" fill="rgb(249,138,50)" fg:x="164" fg:w="1"/><text x="13.0725%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8225%" y="373" width="0.0782%" height="15" fill="rgb(243,185,40)" fg:x="164" fg:w="1"/><text x="13.0725%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="12.8225%" y="661" width="0.1564%" height="15" fill="rgb(242,92,35)" fg:x="164" fg:w="2"/><text x="13.0725%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="12.8225%" y="645" width="0.1564%" height="15" fill="rgb(244,98,5)" fg:x="164" fg:w="2"/><text x="13.0725%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="12.9007%" y="629" width="0.0782%" height="15" fill="rgb(228,186,29)" fg:x="165" fg:w="1"/><text x="13.1507%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.9007%" y="613" width="0.0782%" height="15" fill="rgb(253,7,44)" fg:x="165" fg:w="1"/><text x="13.1507%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.9007%" y="597" width="0.0782%" height="15" fill="rgb(216,11,45)" fg:x="165" fg:w="1"/><text x="13.1507%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9007%" y="581" width="0.0782%" height="15" fill="rgb(205,67,3)" fg:x="165" fg:w="1"/><text x="13.1507%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.9007%" y="565" width="0.0782%" height="15" fill="rgb(250,18,3)" fg:x="165" fg:w="1"/><text x="13.1507%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9007%" y="549" width="0.0782%" height="15" fill="rgb(241,222,43)" fg:x="165" fg:w="1"/><text x="13.1507%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.9007%" y="533" width="0.0782%" height="15" fill="rgb(233,115,3)" fg:x="165" fg:w="1"/><text x="13.1507%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.9007%" y="517" width="0.0782%" height="15" fill="rgb(215,165,25)" fg:x="165" fg:w="1"/><text x="13.1507%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (57 samples, 4.46%)</title><rect x="8.6005%" y="693" width="4.4566%" height="15" fill="rgb(234,179,6)" fg:x="110" fg:w="57"/><text x="8.8505%" y="703.50">plugi..</text></g><g><title>plugins_core::tools::set_container (3 samples, 0.23%)</title><rect x="12.8225%" y="677" width="0.2346%" height="15" fill="rgb(215,82,23)" fg:x="164" fg:w="3"/><text x="13.0725%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="12.9789%" y="661" width="0.0782%" height="15" fill="rgb(211,47,18)" fg:x="166" fg:w="1"/><text x="13.2289%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="12.9789%" y="645" width="0.0782%" height="15" fill="rgb(248,17,9)" fg:x="166" fg:w="1"/><text x="13.2289%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="12.9789%" y="629" width="0.0782%" height="15" fill="rgb(210,212,12)" fg:x="166" fg:w="1"/><text x="13.2289%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.9789%" y="613" width="0.0782%" height="15" fill="rgb(230,135,45)" fg:x="166" fg:w="1"/><text x="13.2289%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.9789%" y="597" width="0.0782%" height="15" fill="rgb(214,121,41)" fg:x="166" fg:w="1"/><text x="13.2289%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.9789%" y="581" width="0.0782%" height="15" fill="rgb(239,165,45)" fg:x="166" fg:w="1"/><text x="13.2289%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.9789%" y="565" width="0.0782%" height="15" fill="rgb(214,85,51)" fg:x="166" fg:w="1"/><text x="13.2289%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.9789%" y="549" width="0.0782%" height="15" fill="rgb(223,90,27)" fg:x="166" fg:w="1"/><text x="13.2289%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.9789%" y="533" width="0.0782%" height="15" fill="rgb(244,84,11)" fg:x="166" fg:w="1"/><text x="13.2289%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.9789%" y="517" width="0.0782%" height="15" fill="rgb(253,41,47)" fg:x="166" fg:w="1"/><text x="13.2289%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.9789%" y="501" width="0.0782%" height="15" fill="rgb(232,39,5)" fg:x="166" fg:w="1"/><text x="13.2289%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.9789%" y="485" width="0.0782%" height="15" fill="rgb(211,93,4)" fg:x="166" fg:w="1"/><text x="13.2289%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.9789%" y="469" width="0.0782%" height="15" fill="rgb(219,50,49)" fg:x="166" fg:w="1"/><text x="13.2289%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.9789%" y="453" width="0.0782%" height="15" fill="rgb(232,80,19)" fg:x="166" fg:w="1"/><text x="13.2289%" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="12.9789%" y="437" width="0.0782%" height="15" fill="rgb(215,227,39)" fg:x="166" fg:w="1"/><text x="13.2289%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="12.9789%" y="421" width="0.0782%" height="15" fill="rgb(211,99,12)" fg:x="166" fg:w="1"/><text x="13.2289%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.0571%" y="661" width="0.0782%" height="15" fill="rgb(214,158,5)" fg:x="167" fg:w="1"/><text x="13.3071%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.0571%" y="645" width="0.0782%" height="15" fill="rgb(242,19,53)" fg:x="167" fg:w="1"/><text x="13.3071%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="13.0571%" y="629" width="0.0782%" height="15" fill="rgb(208,18,20)" fg:x="167" fg:w="1"/><text x="13.3071%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.0571%" y="613" width="0.0782%" height="15" fill="rgb(250,44,11)" fg:x="167" fg:w="1"/><text x="13.3071%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.0571%" y="597" width="0.0782%" height="15" fill="rgb(238,159,13)" fg:x="167" fg:w="1"/><text x="13.3071%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.2916%" y="629" width="0.0782%" height="15" fill="rgb(231,74,18)" fg:x="170" fg:w="1"/><text x="13.5416%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.2916%" y="613" width="0.0782%" height="15" fill="rgb(229,219,45)" fg:x="170" fg:w="1"/><text x="13.5416%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.2916%" y="597" width="0.0782%" height="15" fill="rgb(210,221,1)" fg:x="170" fg:w="1"/><text x="13.5416%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.3698%" y="581" width="0.0782%" height="15" fill="rgb(209,60,51)" fg:x="171" fg:w="1"/><text x="13.6198%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.3698%" y="565" width="0.0782%" height="15" fill="rgb(252,97,34)" fg:x="171" fg:w="1"/><text x="13.6198%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.3698%" y="549" width="0.0782%" height="15" fill="rgb(243,211,37)" fg:x="171" fg:w="1"/><text x="13.6198%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3698%" y="533" width="0.0782%" height="15" fill="rgb(210,229,37)" fg:x="171" fg:w="1"/><text x="13.6198%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="13.3698%" y="613" width="0.1564%" height="15" fill="rgb(220,208,43)" fg:x="171" fg:w="2"/><text x="13.6198%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="13.3698%" y="597" width="0.1564%" height="15" fill="rgb(218,118,50)" fg:x="171" fg:w="2"/><text x="13.6198%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.4480%" y="581" width="0.0782%" height="15" fill="rgb(254,169,52)" fg:x="172" fg:w="1"/><text x="13.6980%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="13.4480%" y="565" width="0.0782%" height="15" fill="rgb(221,214,37)" fg:x="172" fg:w="1"/><text x="13.6980%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="13.4480%" y="549" width="0.0782%" height="15" fill="rgb(254,186,32)" fg:x="172" fg:w="1"/><text x="13.6980%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.4480%" y="533" width="0.0782%" height="15" fill="rgb(215,144,43)" fg:x="172" fg:w="1"/><text x="13.6980%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.31%)</title><rect x="13.2916%" y="645" width="0.3127%" height="15" fill="rgb(252,21,46)" fg:x="170" fg:w="4"/><text x="13.5416%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.23%)</title><rect x="13.3698%" y="629" width="0.2346%" height="15" fill="rgb(207,166,46)" fg:x="171" fg:w="3"/><text x="13.6198%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="13.5262%" y="613" width="0.0782%" height="15" fill="rgb(253,37,49)" fg:x="173" fg:w="1"/><text x="13.7762%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.5262%" y="597" width="0.0782%" height="15" fill="rgb(222,97,20)" fg:x="173" fg:w="1"/><text x="13.7762%" y="607.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="13.5262%" y="581" width="0.0782%" height="15" fill="rgb(244,181,26)" fg:x="173" fg:w="1"/><text x="13.7762%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.5262%" y="565" width="0.0782%" height="15" fill="rgb(241,22,29)" fg:x="173" fg:w="1"/><text x="13.7762%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.5262%" y="549" width="0.0782%" height="15" fill="rgb(206,200,43)" fg:x="173" fg:w="1"/><text x="13.7762%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (8 samples, 0.63%)</title><rect x="13.0571%" y="693" width="0.6255%" height="15" fill="rgb(226,224,43)" fg:x="167" fg:w="8"/><text x="13.3071%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (8 samples, 0.63%)</title><rect x="13.0571%" y="677" width="0.6255%" height="15" fill="rgb(253,129,28)" fg:x="167" fg:w="8"/><text x="13.3071%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.55%)</title><rect x="13.1353%" y="661" width="0.5473%" height="15" fill="rgb(252,99,33)" fg:x="168" fg:w="7"/><text x="13.3853%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.6044%" y="645" width="0.0782%" height="15" fill="rgb(208,123,45)" fg:x="174" fg:w="1"/><text x="13.8544%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.6044%" y="629" width="0.0782%" height="15" fill="rgb(251,106,12)" fg:x="174" fg:w="1"/><text x="13.8544%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.6044%" y="613" width="0.0782%" height="15" fill="rgb(240,209,35)" fg:x="174" fg:w="1"/><text x="13.8544%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.6044%" y="597" width="0.0782%" height="15" fill="rgb(214,52,50)" fg:x="174" fg:w="1"/><text x="13.8544%" y="607.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="13.6826%" y="677" width="0.0782%" height="15" fill="rgb(234,119,4)" fg:x="175" fg:w="1"/><text x="13.9326%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="13.6826%" y="661" width="0.0782%" height="15" fill="rgb(228,181,36)" fg:x="175" fg:w="1"/><text x="13.9326%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="13.6826%" y="645" width="0.0782%" height="15" fill="rgb(213,171,42)" fg:x="175" fg:w="1"/><text x="13.9326%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="13.6826%" y="629" width="0.0782%" height="15" fill="rgb(239,14,41)" fg:x="175" fg:w="1"/><text x="13.9326%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="13.6826%" y="613" width="0.0782%" height="15" fill="rgb(239,111,46)" fg:x="175" fg:w="1"/><text x="13.9326%" y="623.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="13.6826%" y="597" width="0.0782%" height="15" fill="rgb(214,72,7)" fg:x="175" fg:w="1"/><text x="13.9326%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="13.6826%" y="581" width="0.0782%" height="15" fill="rgb(221,114,1)" fg:x="175" fg:w="1"/><text x="13.9326%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.6826%" y="565" width="0.0782%" height="15" fill="rgb(213,143,14)" fg:x="175" fg:w="1"/><text x="13.9326%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.6826%" y="549" width="0.0782%" height="15" fill="rgb(220,221,53)" fg:x="175" fg:w="1"/><text x="13.9326%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.6826%" y="533" width="0.0782%" height="15" fill="rgb(236,189,27)" fg:x="175" fg:w="1"/><text x="13.9326%" y="543.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.08%)</title><rect x="13.6826%" y="517" width="0.0782%" height="15" fill="rgb(252,139,49)" fg:x="175" fg:w="1"/><text x="13.9326%" y="527.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.08%)</title><rect x="13.6826%" y="501" width="0.0782%" height="15" fill="rgb(231,158,33)" fg:x="175" fg:w="1"/><text x="13.9326%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.8389%" y="645" width="0.0782%" height="15" fill="rgb(207,201,15)" fg:x="177" fg:w="1"/><text x="14.0889%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="13.8389%" y="629" width="0.0782%" height="15" fill="rgb(218,43,48)" fg:x="177" fg:w="1"/><text x="14.0889%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="13.9953%" y="629" width="0.0782%" height="15" fill="rgb(244,63,52)" fg:x="179" fg:w="1"/><text x="14.2453%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.0735%" y="565" width="0.0782%" height="15" fill="rgb(236,60,17)" fg:x="180" fg:w="1"/><text x="14.3235%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.31%)</title><rect x="13.9171%" y="645" width="0.3127%" height="15" fill="rgb(205,206,29)" fg:x="178" fg:w="4"/><text x="14.1671%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.0735%" y="629" width="0.1564%" height="15" fill="rgb(205,209,35)" fg:x="180" fg:w="2"/><text x="14.3235%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.0735%" y="613" width="0.1564%" height="15" fill="rgb(227,112,14)" fg:x="180" fg:w="2"/><text x="14.3235%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="14.0735%" y="597" width="0.1564%" height="15" fill="rgb(248,151,9)" fg:x="180" fg:w="2"/><text x="14.3235%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.0735%" y="581" width="0.1564%" height="15" fill="rgb(247,45,40)" fg:x="180" fg:w="2"/><text x="14.3235%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1517%" y="565" width="0.0782%" height="15" fill="rgb(232,185,16)" fg:x="181" fg:w="1"/><text x="14.4017%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.2299%" y="581" width="0.0782%" height="15" fill="rgb(215,45,44)" fg:x="182" fg:w="1"/><text x="14.4799%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="14.2299%" y="629" width="0.1564%" height="15" fill="rgb(206,69,32)" fg:x="182" fg:w="2"/><text x="14.4799%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="14.2299%" y="613" width="0.1564%" height="15" fill="rgb(233,98,50)" fg:x="182" fg:w="2"/><text x="14.4799%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="14.2299%" y="597" width="0.1564%" height="15" fill="rgb(232,217,52)" fg:x="182" fg:w="2"/><text x="14.4799%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.3081%" y="581" width="0.0782%" height="15" fill="rgb(250,42,51)" fg:x="183" fg:w="1"/><text x="14.5581%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.3081%" y="565" width="0.0782%" height="15" fill="rgb(241,200,26)" fg:x="183" fg:w="1"/><text x="14.5581%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.3081%" y="549" width="0.0782%" height="15" fill="rgb(207,10,32)" fg:x="183" fg:w="1"/><text x="14.5581%" y="559.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="14.3862%" y="629" width="0.0782%" height="15" fill="rgb(214,63,15)" fg:x="184" fg:w="1"/><text x="14.6362%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.3862%" y="613" width="0.0782%" height="15" fill="rgb(234,176,14)" fg:x="184" fg:w="1"/><text x="14.6362%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.3862%" y="597" width="0.0782%" height="15" fill="rgb(226,104,52)" fg:x="184" fg:w="1"/><text x="14.6362%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="14.3862%" y="581" width="0.0782%" height="15" fill="rgb(211,222,1)" fg:x="184" fg:w="1"/><text x="14.6362%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (11 samples, 0.86%)</title><rect x="13.7608%" y="661" width="0.8600%" height="15" fill="rgb(237,7,3)" fg:x="176" fg:w="11"/><text x="14.0108%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.39%)</title><rect x="14.2299%" y="645" width="0.3909%" height="15" fill="rgb(218,143,7)" fg:x="182" fg:w="5"/><text x="14.4799%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="14.4644%" y="629" width="0.1564%" height="15" fill="rgb(208,25,22)" fg:x="185" fg:w="2"/><text x="14.7144%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.5426%" y="613" width="0.0782%" height="15" fill="rgb(228,127,16)" fg:x="186" fg:w="1"/><text x="14.7926%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.5426%" y="597" width="0.0782%" height="15" fill="rgb(237,86,27)" fg:x="186" fg:w="1"/><text x="14.7926%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (125 samples, 9.77%)</title><rect x="4.9257%" y="709" width="9.7733%" height="15" fill="rgb(207,125,19)" fg:x="63" fg:w="125"/><text x="5.1757%" y="719.50">&lt;tests::Holdin..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (13 samples, 1.02%)</title><rect x="13.6826%" y="693" width="1.0164%" height="15" fill="rgb(243,195,0)" fg:x="175" fg:w="13"/><text x="13.9326%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (12 samples, 0.94%)</title><rect x="13.7608%" y="677" width="0.9382%" height="15" fill="rgb(230,95,18)" fg:x="176" fg:w="12"/><text x="14.0108%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.6208%" y="661" width="0.0782%" height="15" fill="rgb(232,157,21)" fg:x="187" fg:w="1"/><text x="14.8708%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.6208%" y="645" width="0.0782%" height="15" fill="rgb(212,120,50)" fg:x="187" fg:w="1"/><text x="14.8708%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.6208%" y="629" width="0.0782%" height="15" fill="rgb(222,204,44)" fg:x="187" fg:w="1"/><text x="14.8708%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.6208%" y="613" width="0.0782%" height="15" fill="rgb(236,6,33)" fg:x="187" fg:w="1"/><text x="14.8708%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.6208%" y="597" width="0.0782%" height="15" fill="rgb(247,11,38)" fg:x="187" fg:w="1"/><text x="14.8708%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.6208%" y="581" width="0.0782%" height="15" fill="rgb(215,111,0)" fg:x="187" fg:w="1"/><text x="14.8708%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.6208%" y="565" width="0.0782%" height="15" fill="rgb(211,65,46)" fg:x="187" fg:w="1"/><text x="14.8708%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="14.6990%" y="709" width="0.0782%" height="15" fill="rgb(216,5,12)" fg:x="188" fg:w="1"/><text x="14.9490%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="14.6990%" y="693" width="0.0782%" height="15" fill="rgb(226,7,2)" fg:x="188" fg:w="1"/><text x="14.9490%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="14.7772%" y="693" width="0.0782%" height="15" fill="rgb(242,116,12)" fg:x="189" fg:w="1"/><text x="15.0272%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.7772%" y="677" width="0.0782%" height="15" fill="rgb(249,209,7)" fg:x="189" fg:w="1"/><text x="15.0272%" y="687.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="14.8554%" y="693" width="0.0782%" height="15" fill="rgb(232,73,17)" fg:x="190" fg:w="1"/><text x="15.1054%" y="703.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="14.8554%" y="677" width="0.0782%" height="15" fill="rgb(214,13,32)" fg:x="190" fg:w="1"/><text x="15.1054%" y="687.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="14.8554%" y="661" width="0.0782%" height="15" fill="rgb(221,125,10)" fg:x="190" fg:w="1"/><text x="15.1054%" y="671.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="14.8554%" y="645" width="0.0782%" height="15" fill="rgb(246,7,44)" fg:x="190" fg:w="1"/><text x="15.1054%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="14.8554%" y="629" width="0.0782%" height="15" fill="rgb(239,18,35)" fg:x="190" fg:w="1"/><text x="15.1054%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="14.8554%" y="613" width="0.0782%" height="15" fill="rgb(250,222,16)" fg:x="190" fg:w="1"/><text x="15.1054%" y="623.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="14.8554%" y="597" width="0.0782%" height="15" fill="rgb(219,100,8)" fg:x="190" fg:w="1"/><text x="15.1054%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.0899%" y="629" width="0.0782%" height="15" fill="rgb(240,62,13)" fg:x="193" fg:w="1"/><text x="15.3399%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.0899%" y="613" width="0.0782%" height="15" fill="rgb(253,194,2)" fg:x="193" fg:w="1"/><text x="15.3399%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.0899%" y="597" width="0.0782%" height="15" fill="rgb(235,58,31)" fg:x="193" fg:w="1"/><text x="15.3399%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.0899%" y="581" width="0.0782%" height="15" fill="rgb(231,37,11)" fg:x="193" fg:w="1"/><text x="15.3399%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.0899%" y="565" width="0.0782%" height="15" fill="rgb(235,133,0)" fg:x="193" fg:w="1"/><text x="15.3399%" y="575.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.3245%" y="565" width="0.0782%" height="15" fill="rgb(212,185,40)" fg:x="196" fg:w="1"/><text x="15.5745%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.23%)</title><rect x="15.3245%" y="597" width="0.2346%" height="15" fill="rgb(216,68,42)" fg:x="196" fg:w="3"/><text x="15.5745%" y="607.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.23%)</title><rect x="15.3245%" y="581" width="0.2346%" height="15" fill="rgb(239,81,4)" fg:x="196" fg:w="3"/><text x="15.5745%" y="591.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="15.4027%" y="565" width="0.1564%" height="15" fill="rgb(206,86,6)" fg:x="197" fg:w="2"/><text x="15.6527%" y="575.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.4808%" y="549" width="0.0782%" height="15" fill="rgb(249,95,27)" fg:x="198" fg:w="1"/><text x="15.7308%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.4808%" y="533" width="0.0782%" height="15" fill="rgb(205,155,45)" fg:x="198" fg:w="1"/><text x="15.7308%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.4808%" y="517" width="0.0782%" height="15" fill="rgb(213,55,42)" fg:x="198" fg:w="1"/><text x="15.7308%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.55%)</title><rect x="15.0899%" y="645" width="0.5473%" height="15" fill="rgb(249,197,4)" fg:x="193" fg:w="7"/><text x="15.3399%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.47%)</title><rect x="15.1681%" y="629" width="0.4691%" height="15" fill="rgb(212,128,32)" fg:x="194" fg:w="6"/><text x="15.4181%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.47%)</title><rect x="15.1681%" y="613" width="0.4691%" height="15" fill="rgb(252,47,30)" fg:x="194" fg:w="6"/><text x="15.4181%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.5590%" y="597" width="0.0782%" height="15" fill="rgb(209,79,18)" fg:x="199" fg:w="1"/><text x="15.8090%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.5590%" y="581" width="0.0782%" height="15" fill="rgb(225,81,38)" fg:x="199" fg:w="1"/><text x="15.8090%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="15.5590%" y="565" width="0.0782%" height="15" fill="rgb(205,95,16)" fg:x="199" fg:w="1"/><text x="15.8090%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (8 samples, 0.63%)</title><rect x="15.0899%" y="677" width="0.6255%" height="15" fill="rgb(214,30,4)" fg:x="193" fg:w="8"/><text x="15.3399%" y="687.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (8 samples, 0.63%)</title><rect x="15.0899%" y="661" width="0.6255%" height="15" fill="rgb(232,137,22)" fg:x="193" fg:w="8"/><text x="15.3399%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="15.6372%" y="645" width="0.0782%" height="15" fill="rgb(232,156,19)" fg:x="200" fg:w="1"/><text x="15.8872%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="15.6372%" y="629" width="0.0782%" height="15" fill="rgb(248,157,26)" fg:x="200" fg:w="1"/><text x="15.8872%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.6372%" y="613" width="0.0782%" height="15" fill="rgb(242,24,3)" fg:x="200" fg:w="1"/><text x="15.8872%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.7936%" y="629" width="0.0782%" height="15" fill="rgb(218,195,48)" fg:x="202" fg:w="1"/><text x="16.0436%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="15.7154%" y="677" width="0.2346%" height="15" fill="rgb(214,193,36)" fg:x="201" fg:w="3"/><text x="15.9654%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="15.7154%" y="661" width="0.2346%" height="15" fill="rgb(242,110,40)" fg:x="201" fg:w="3"/><text x="15.9654%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="15.7154%" y="645" width="0.2346%" height="15" fill="rgb(233,150,26)" fg:x="201" fg:w="3"/><text x="15.9654%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.8718%" y="629" width="0.0782%" height="15" fill="rgb(239,200,30)" fg:x="203" fg:w="1"/><text x="16.1218%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.8718%" y="613" width="0.0782%" height="15" fill="rgb(226,28,11)" fg:x="203" fg:w="1"/><text x="16.1218%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="16.0281%" y="613" width="0.1564%" height="15" fill="rgb(220,26,48)" fg:x="205" fg:w="2"/><text x="16.2781%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="16.0281%" y="597" width="0.1564%" height="15" fill="rgb(232,10,11)" fg:x="205" fg:w="2"/><text x="16.2781%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="16.0281%" y="581" width="0.1564%" height="15" fill="rgb(252,143,50)" fg:x="205" fg:w="2"/><text x="16.2781%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="16.0281%" y="565" width="0.1564%" height="15" fill="rgb(206,58,22)" fg:x="205" fg:w="2"/><text x="16.2781%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.1063%" y="549" width="0.0782%" height="15" fill="rgb(250,9,45)" fg:x="206" fg:w="1"/><text x="16.3563%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="16.1845%" y="581" width="0.0782%" height="15" fill="rgb(225,148,14)" fg:x="207" fg:w="1"/><text x="16.4345%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.1845%" y="565" width="0.0782%" height="15" fill="rgb(205,178,40)" fg:x="207" fg:w="1"/><text x="16.4345%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="16.1845%" y="597" width="0.1564%" height="15" fill="rgb(215,201,4)" fg:x="207" fg:w="2"/><text x="16.4345%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.2627%" y="581" width="0.0782%" height="15" fill="rgb(219,223,24)" fg:x="208" fg:w="1"/><text x="16.5127%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.2627%" y="565" width="0.0782%" height="15" fill="rgb(217,19,31)" fg:x="208" fg:w="1"/><text x="16.5127%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="16.3409%" y="581" width="0.0782%" height="15" fill="rgb(235,33,3)" fg:x="209" fg:w="1"/><text x="16.5909%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.3409%" y="565" width="0.0782%" height="15" fill="rgb(221,39,18)" fg:x="209" fg:w="1"/><text x="16.5909%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="16.4191%" y="565" width="0.0782%" height="15" fill="rgb(242,162,33)" fg:x="210" fg:w="1"/><text x="16.6691%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="16.4973%" y="533" width="0.0782%" height="15" fill="rgb(233,215,28)" fg:x="211" fg:w="1"/><text x="16.7473%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="16.4973%" y="517" width="0.0782%" height="15" fill="rgb(212,117,9)" fg:x="211" fg:w="1"/><text x="16.7473%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="16.4973%" y="565" width="0.1564%" height="15" fill="rgb(237,70,47)" fg:x="211" fg:w="2"/><text x="16.7473%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="16.4973%" y="549" width="0.1564%" height="15" fill="rgb(206,177,13)" fg:x="211" fg:w="2"/><text x="16.7473%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.5754%" y="533" width="0.0782%" height="15" fill="rgb(209,174,33)" fg:x="212" fg:w="1"/><text x="16.8254%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="16.6536%" y="565" width="0.0782%" height="15" fill="rgb(226,6,11)" fg:x="213" fg:w="1"/><text x="16.9036%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="16.7318%" y="549" width="0.0782%" height="15" fill="rgb(240,214,6)" fg:x="214" fg:w="1"/><text x="16.9818%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.7318%" y="533" width="0.0782%" height="15" fill="rgb(254,214,40)" fg:x="214" fg:w="1"/><text x="16.9818%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.7318%" y="517" width="0.0782%" height="15" fill="rgb(230,187,15)" fg:x="214" fg:w="1"/><text x="16.9818%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.7318%" y="501" width="0.0782%" height="15" fill="rgb(250,11,27)" fg:x="214" fg:w="1"/><text x="16.9818%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="16.7318%" y="485" width="0.0782%" height="15" fill="rgb(243,107,19)" fg:x="214" fg:w="1"/><text x="16.9818%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.7318%" y="469" width="0.0782%" height="15" fill="rgb(253,66,26)" fg:x="214" fg:w="1"/><text x="16.9818%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.7318%" y="453" width="0.0782%" height="15" fill="rgb(228,43,8)" fg:x="214" fg:w="1"/><text x="16.9818%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.78%)</title><rect x="16.1845%" y="613" width="0.7819%" height="15" fill="rgb(232,197,36)" fg:x="207" fg:w="10"/><text x="16.4345%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.63%)</title><rect x="16.3409%" y="597" width="0.6255%" height="15" fill="rgb(221,182,31)" fg:x="209" fg:w="8"/><text x="16.5909%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="16.4191%" y="581" width="0.5473%" height="15" fill="rgb(244,25,36)" fg:x="210" fg:w="7"/><text x="16.6691%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="16.7318%" y="565" width="0.2346%" height="15" fill="rgb(247,101,19)" fg:x="214" fg:w="3"/><text x="16.9818%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="16.8100%" y="549" width="0.1564%" height="15" fill="rgb(223,117,19)" fg:x="215" fg:w="2"/><text x="17.0600%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="16.8100%" y="533" width="0.1564%" height="15" fill="rgb(249,63,38)" fg:x="215" fg:w="2"/><text x="17.0600%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="16.8100%" y="517" width="0.1564%" height="15" fill="rgb(220,143,23)" fg:x="215" fg:w="2"/><text x="17.0600%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.8882%" y="501" width="0.0782%" height="15" fill="rgb(252,183,22)" fg:x="216" fg:w="1"/><text x="17.1382%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.8882%" y="485" width="0.0782%" height="15" fill="rgb(243,176,15)" fg:x="216" fg:w="1"/><text x="17.1382%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="17.0446%" y="501" width="0.0782%" height="15" fill="rgb(244,204,46)" fg:x="218" fg:w="1"/><text x="17.2946%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="17.0446%" y="485" width="0.0782%" height="15" fill="rgb(227,28,54)" fg:x="218" fg:w="1"/><text x="17.2946%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.0446%" y="469" width="0.0782%" height="15" fill="rgb(231,10,15)" fg:x="218" fg:w="1"/><text x="17.2946%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.0446%" y="453" width="0.0782%" height="15" fill="rgb(210,200,17)" fg:x="218" fg:w="1"/><text x="17.2946%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.0446%" y="437" width="0.0782%" height="15" fill="rgb(251,106,46)" fg:x="218" fg:w="1"/><text x="17.2946%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="16.9664%" y="581" width="0.3127%" height="15" fill="rgb(218,211,15)" fg:x="217" fg:w="4"/><text x="17.2164%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.31%)</title><rect x="16.9664%" y="565" width="0.3127%" height="15" fill="rgb(239,62,10)" fg:x="217" fg:w="4"/><text x="17.2164%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="16.9664%" y="549" width="0.3127%" height="15" fill="rgb(225,53,53)" fg:x="217" fg:w="4"/><text x="17.2164%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="16.9664%" y="533" width="0.3127%" height="15" fill="rgb(207,16,24)" fg:x="217" fg:w="4"/><text x="17.2164%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="16.9664%" y="517" width="0.3127%" height="15" fill="rgb(217,52,28)" fg:x="217" fg:w="4"/><text x="17.2164%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="17.1228%" y="501" width="0.1564%" height="15" fill="rgb(246,1,5)" fg:x="219" fg:w="2"/><text x="17.3728%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="17.1228%" y="485" width="0.1564%" height="15" fill="rgb(221,29,26)" fg:x="219" fg:w="2"/><text x="17.3728%" y="495.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="17.2791%" y="581" width="0.0782%" height="15" fill="rgb(250,133,32)" fg:x="221" fg:w="1"/><text x="17.5291%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="17.2791%" y="565" width="0.0782%" height="15" fill="rgb(236,63,16)" fg:x="221" fg:w="1"/><text x="17.5291%" y="575.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.2791%" y="549" width="0.0782%" height="15" fill="rgb(231,159,14)" fg:x="221" fg:w="1"/><text x="17.5291%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="17.3573%" y="565" width="0.0782%" height="15" fill="rgb(207,102,36)" fg:x="222" fg:w="1"/><text x="17.6073%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.55%)</title><rect x="16.9664%" y="597" width="0.5473%" height="15" fill="rgb(230,224,31)" fg:x="217" fg:w="7"/><text x="17.2164%" y="607.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="17.3573%" y="581" width="0.1564%" height="15" fill="rgb(215,182,16)" fg:x="222" fg:w="2"/><text x="17.6073%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.4355%" y="565" width="0.0782%" height="15" fill="rgb(226,113,2)" fg:x="223" fg:w="1"/><text x="17.6855%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.4355%" y="549" width="0.0782%" height="15" fill="rgb(241,18,35)" fg:x="223" fg:w="1"/><text x="17.6855%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.4355%" y="533" width="0.0782%" height="15" fill="rgb(240,165,44)" fg:x="223" fg:w="1"/><text x="17.6855%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.5137%" y="565" width="0.1564%" height="15" fill="rgb(229,130,47)" fg:x="224" fg:w="2"/><text x="17.7637%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="17.5919%" y="549" width="0.0782%" height="15" fill="rgb(223,93,7)" fg:x="225" fg:w="1"/><text x="17.8419%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6701%" y="565" width="0.0782%" height="15" fill="rgb(205,180,36)" fg:x="226" fg:w="1"/><text x="17.9201%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.6701%" y="549" width="0.0782%" height="15" fill="rgb(221,103,28)" fg:x="226" fg:w="1"/><text x="17.9201%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.6701%" y="533" width="0.0782%" height="15" fill="rgb(212,4,3)" fg:x="226" fg:w="1"/><text x="17.9201%" y="543.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="17.6701%" y="517" width="0.0782%" height="15" fill="rgb(209,221,53)" fg:x="226" fg:w="1"/><text x="17.9201%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="17.6701%" y="501" width="0.0782%" height="15" fill="rgb(233,229,52)" fg:x="226" fg:w="1"/><text x="17.9201%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="17.7482%" y="565" width="0.0782%" height="15" fill="rgb(254,127,37)" fg:x="227" fg:w="1"/><text x="17.9982%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.7482%" y="549" width="0.0782%" height="15" fill="rgb(207,161,26)" fg:x="227" fg:w="1"/><text x="17.9982%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.7482%" y="533" width="0.0782%" height="15" fill="rgb(223,75,5)" fg:x="227" fg:w="1"/><text x="17.9982%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="17.9828%" y="533" width="0.0782%" height="15" fill="rgb(235,115,52)" fg:x="230" fg:w="1"/><text x="18.2328%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.1392%" y="517" width="0.0782%" height="15" fill="rgb(240,91,46)" fg:x="232" fg:w="1"/><text x="18.3892%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1392%" y="501" width="0.0782%" height="15" fill="rgb(251,144,21)" fg:x="232" fg:w="1"/><text x="18.3892%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.2174%" y="517" width="0.0782%" height="15" fill="rgb(247,220,47)" fg:x="233" fg:w="1"/><text x="18.4674%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.2174%" y="501" width="0.0782%" height="15" fill="rgb(253,122,1)" fg:x="233" fg:w="1"/><text x="18.4674%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.2174%" y="485" width="0.0782%" height="15" fill="rgb(221,0,24)" fg:x="233" fg:w="1"/><text x="18.4674%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.2174%" y="469" width="0.0782%" height="15" fill="rgb(220,204,54)" fg:x="233" fg:w="1"/><text x="18.4674%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.2174%" y="453" width="0.0782%" height="15" fill="rgb(205,96,25)" fg:x="233" fg:w="1"/><text x="18.4674%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.4519%" y="485" width="0.0782%" height="15" fill="rgb(247,77,20)" fg:x="236" fg:w="1"/><text x="18.7019%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.4519%" y="469" width="0.0782%" height="15" fill="rgb(245,151,8)" fg:x="236" fg:w="1"/><text x="18.7019%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.23%)</title><rect x="18.6083%" y="453" width="0.2346%" height="15" fill="rgb(242,158,39)" fg:x="238" fg:w="3"/><text x="18.8583%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.7647%" y="437" width="0.0782%" height="15" fill="rgb(222,214,50)" fg:x="240" fg:w="1"/><text x="19.0147%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (13 samples, 1.02%)</title><rect x="17.9046%" y="549" width="1.0164%" height="15" fill="rgb(229,60,39)" fg:x="229" fg:w="13"/><text x="18.1546%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.86%)</title><rect x="18.0610%" y="533" width="0.8600%" height="15" fill="rgb(240,148,18)" fg:x="231" fg:w="11"/><text x="18.3110%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.63%)</title><rect x="18.2955%" y="517" width="0.6255%" height="15" fill="rgb(215,96,11)" fg:x="234" fg:w="8"/><text x="18.5455%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.55%)</title><rect x="18.3737%" y="501" width="0.5473%" height="15" fill="rgb(238,162,53)" fg:x="235" fg:w="7"/><text x="18.6237%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.39%)</title><rect x="18.5301%" y="485" width="0.3909%" height="15" fill="rgb(214,83,18)" fg:x="237" fg:w="5"/><text x="18.7801%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.31%)</title><rect x="18.6083%" y="469" width="0.3127%" height="15" fill="rgb(248,117,24)" fg:x="238" fg:w="4"/><text x="18.8583%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.8428%" y="453" width="0.0782%" height="15" fill="rgb(238,190,6)" fg:x="241" fg:w="1"/><text x="19.0928%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (19 samples, 1.49%)</title><rect x="17.5137%" y="597" width="1.4855%" height="15" fill="rgb(213,51,6)" fg:x="224" fg:w="19"/><text x="17.7637%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (19 samples, 1.49%)</title><rect x="17.5137%" y="581" width="1.4855%" height="15" fill="rgb(212,136,1)" fg:x="224" fg:w="19"/><text x="17.7637%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (15 samples, 1.17%)</title><rect x="17.8264%" y="565" width="1.1728%" height="15" fill="rgb(221,192,14)" fg:x="228" fg:w="15"/><text x="18.0764%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.9210%" y="549" width="0.0782%" height="15" fill="rgb(244,38,54)" fg:x="242" fg:w="1"/><text x="19.1710%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="19.2338%" y="405" width="0.0782%" height="15" fill="rgb(240,45,28)" fg:x="246" fg:w="1"/><text x="19.4838%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.2338%" y="389" width="0.0782%" height="15" fill="rgb(240,123,12)" fg:x="246" fg:w="1"/><text x="19.4838%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="19.3120%" y="405" width="0.0782%" height="15" fill="rgb(216,14,30)" fg:x="247" fg:w="1"/><text x="19.5620%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.3120%" y="389" width="0.0782%" height="15" fill="rgb(212,50,24)" fg:x="247" fg:w="1"/><text x="19.5620%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="19.2338%" y="437" width="0.2346%" height="15" fill="rgb(253,229,47)" fg:x="246" fg:w="3"/><text x="19.4838%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="19.2338%" y="421" width="0.2346%" height="15" fill="rgb(214,26,17)" fg:x="246" fg:w="3"/><text x="19.4838%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.3901%" y="405" width="0.0782%" height="15" fill="rgb(252,60,11)" fg:x="248" fg:w="1"/><text x="19.6401%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.3901%" y="389" width="0.0782%" height="15" fill="rgb(209,59,37)" fg:x="248" fg:w="1"/><text x="19.6401%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="19.3901%" y="373" width="0.0782%" height="15" fill="rgb(228,126,53)" fg:x="248" fg:w="1"/><text x="19.6401%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.47%)</title><rect x="19.0774%" y="469" width="0.4691%" height="15" fill="rgb(233,99,2)" fg:x="244" fg:w="6"/><text x="19.3274%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="19.2338%" y="453" width="0.3127%" height="15" fill="rgb(217,106,34)" fg:x="246" fg:w="4"/><text x="19.4838%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.4683%" y="437" width="0.0782%" height="15" fill="rgb(222,46,19)" fg:x="249" fg:w="1"/><text x="19.7183%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.63%)</title><rect x="18.9992%" y="533" width="0.6255%" height="15" fill="rgb(251,87,31)" fg:x="243" fg:w="8"/><text x="19.2492%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.63%)</title><rect x="18.9992%" y="517" width="0.6255%" height="15" fill="rgb(213,70,51)" fg:x="243" fg:w="8"/><text x="19.2492%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.55%)</title><rect x="19.0774%" y="501" width="0.5473%" height="15" fill="rgb(229,144,18)" fg:x="244" fg:w="7"/><text x="19.3274%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.55%)</title><rect x="19.0774%" y="485" width="0.5473%" height="15" fill="rgb(254,60,26)" fg:x="244" fg:w="7"/><text x="19.3274%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.5465%" y="469" width="0.0782%" height="15" fill="rgb(243,127,51)" fg:x="250" fg:w="1"/><text x="19.7965%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.5465%" y="453" width="0.0782%" height="15" fill="rgb(221,51,25)" fg:x="250" fg:w="1"/><text x="19.7965%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.5465%" y="437" width="0.0782%" height="15" fill="rgb(205,42,7)" fg:x="250" fg:w="1"/><text x="19.7965%" y="447.50"></text></g><g><title>engine::session::Session::close (64 samples, 5.00%)</title><rect x="14.7772%" y="709" width="5.0039%" height="15" fill="rgb(236,177,48)" fg:x="189" fg:w="64"/><text x="15.0272%" y="719.50">engine..</text></g><g><title>engine::session::state::State::close (62 samples, 4.85%)</title><rect x="14.9335%" y="693" width="4.8475%" height="15" fill="rgb(226,79,31)" fg:x="191" fg:w="62"/><text x="15.1835%" y="703.50">engine..</text></g><g><title>engine::session::state::State::flush_entities (49 samples, 3.83%)</title><rect x="15.9500%" y="677" width="3.8311%" height="15" fill="rgb(216,170,12)" fg:x="204" fg:w="49"/><text x="16.2000%" y="687.50">engi..</text></g><g><title>core::iter::adapters::try_process (48 samples, 3.75%)</title><rect x="16.0281%" y="661" width="3.7529%" height="15" fill="rgb(208,62,51)" fg:x="205" fg:w="48"/><text x="16.2781%" y="671.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (48 samples, 3.75%)</title><rect x="16.0281%" y="645" width="3.7529%" height="15" fill="rgb(254,129,9)" fg:x="205" fg:w="48"/><text x="16.2781%" y="655.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (48 samples, 3.75%)</title><rect x="16.0281%" y="629" width="3.7529%" height="15" fill="rgb(243,209,31)" fg:x="205" fg:w="48"/><text x="16.2781%" y="639.50">engi..</text></g><g><title>kernel::model::any_entity_changes (36 samples, 2.81%)</title><rect x="16.9664%" y="613" width="2.8147%" height="15" fill="rgb(213,159,23)" fg:x="217" fg:w="36"/><text x="17.2164%" y="623.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (10 samples, 0.78%)</title><rect x="18.9992%" y="597" width="0.7819%" height="15" fill="rgb(249,77,39)" fg:x="243" fg:w="10"/><text x="19.2492%" y="607.50"></text></g><g><title>serde_json::de::from_trait (10 samples, 0.78%)</title><rect x="18.9992%" y="581" width="0.7819%" height="15" fill="rgb(230,13,33)" fg:x="243" fg:w="10"/><text x="19.2492%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.78%)</title><rect x="18.9992%" y="565" width="0.7819%" height="15" fill="rgb(215,215,7)" fg:x="243" fg:w="10"/><text x="19.2492%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.78%)</title><rect x="18.9992%" y="549" width="0.7819%" height="15" fill="rgb(222,92,25)" fg:x="243" fg:w="10"/><text x="19.2492%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="19.6247%" y="533" width="0.1564%" height="15" fill="rgb(215,173,22)" fg:x="251" fg:w="2"/><text x="19.8747%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="19.6247%" y="517" width="0.1564%" height="15" fill="rgb(247,205,52)" fg:x="251" fg:w="2"/><text x="19.8747%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="19.8593%" y="677" width="0.0782%" height="15" fill="rgb(240,210,37)" fg:x="254" fg:w="1"/><text x="20.1093%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.8593%" y="661" width="0.0782%" height="15" fill="rgb(224,13,10)" fg:x="254" fg:w="1"/><text x="20.1093%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.8593%" y="645" width="0.0782%" height="15" fill="rgb(209,48,33)" fg:x="254" fg:w="1"/><text x="20.1093%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.8593%" y="629" width="0.0782%" height="15" fill="rgb(228,219,23)" fg:x="254" fg:w="1"/><text x="20.1093%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.8593%" y="613" width="0.0782%" height="15" fill="rgb(239,46,49)" fg:x="254" fg:w="1"/><text x="20.1093%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.8593%" y="597" width="0.0782%" height="15" fill="rgb(206,172,51)" fg:x="254" fg:w="1"/><text x="20.1093%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="20.0156%" y="645" width="0.1564%" height="15" fill="rgb(213,212,35)" fg:x="256" fg:w="2"/><text x="20.2656%" y="655.50"></text></g><g><title>&lt;plugins_core::carrying::parser::HoldActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="20.0156%" y="629" width="0.1564%" height="15" fill="rgb(252,40,27)" fg:x="256" fg:w="2"/><text x="20.2656%" y="639.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (2 samples, 0.16%)</title><rect x="20.0156%" y="613" width="0.1564%" height="15" fill="rgb(212,33,41)" fg:x="256" fg:w="2"/><text x="20.2656%" y="623.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (2 samples, 0.16%)</title><rect x="20.0156%" y="597" width="0.1564%" height="15" fill="rgb(232,160,27)" fg:x="256" fg:w="2"/><text x="20.2656%" y="607.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="20.0938%" y="581" width="0.0782%" height="15" fill="rgb(244,160,20)" fg:x="257" fg:w="1"/><text x="20.3438%" y="591.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.08%)</title><rect x="20.0938%" y="565" width="0.0782%" height="15" fill="rgb(205,66,20)" fg:x="257" fg:w="1"/><text x="20.3438%" y="575.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::Plugin&gt;::sources (1 samples, 0.08%)</title><rect x="20.1720%" y="645" width="0.0782%" height="15" fill="rgb(236,158,6)" fg:x="258" fg:w="1"/><text x="20.4220%" y="655.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (5 samples, 0.39%)</title><rect x="19.9375%" y="677" width="0.3909%" height="15" fill="rgb(232,25,36)" fg:x="255" fg:w="5"/><text x="20.1875%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.39%)</title><rect x="19.9375%" y="661" width="0.3909%" height="15" fill="rgb(220,153,35)" fg:x="255" fg:w="5"/><text x="20.1875%" y="671.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="20.2502%" y="645" width="0.0782%" height="15" fill="rgb(216,5,8)" fg:x="259" fg:w="1"/><text x="20.5002%" y="655.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="20.2502%" y="629" width="0.0782%" height="15" fill="rgb(240,97,3)" fg:x="259" fg:w="1"/><text x="20.5002%" y="639.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="20.4066%" y="517" width="0.0782%" height="15" fill="rgb(220,99,26)" fg:x="261" fg:w="1"/><text x="20.6566%" y="527.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="20.4066%" y="501" width="0.0782%" height="15" fill="rgb(237,96,2)" fg:x="261" fg:w="1"/><text x="20.6566%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.4848%" y="501" width="0.0782%" height="15" fill="rgb(217,197,47)" fg:x="262" fg:w="1"/><text x="20.7348%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (5 samples, 0.39%)</title><rect x="20.3284%" y="661" width="0.3909%" height="15" fill="rgb(252,133,54)" fg:x="260" fg:w="5"/><text x="20.5784%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (5 samples, 0.39%)</title><rect x="20.3284%" y="645" width="0.3909%" height="15" fill="rgb(233,37,30)" fg:x="260" fg:w="5"/><text x="20.5784%" y="655.50"></text></g><g><title>core::fmt::write (5 samples, 0.39%)</title><rect x="20.3284%" y="629" width="0.3909%" height="15" fill="rgb(239,182,12)" fg:x="260" fg:w="5"/><text x="20.5784%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (5 samples, 0.39%)</title><rect x="20.3284%" y="613" width="0.3909%" height="15" fill="rgb(245,83,39)" fg:x="260" fg:w="5"/><text x="20.5784%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (5 samples, 0.39%)</title><rect x="20.3284%" y="597" width="0.3909%" height="15" fill="rgb(222,109,36)" fg:x="260" fg:w="5"/><text x="20.5784%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (5 samples, 0.39%)</title><rect x="20.3284%" y="581" width="0.3909%" height="15" fill="rgb(237,95,44)" fg:x="260" fg:w="5"/><text x="20.5784%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (5 samples, 0.39%)</title><rect x="20.3284%" y="565" width="0.3909%" height="15" fill="rgb(216,36,54)" fg:x="260" fg:w="5"/><text x="20.5784%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (5 samples, 0.39%)</title><rect x="20.3284%" y="549" width="0.3909%" height="15" fill="rgb(236,164,3)" fg:x="260" fg:w="5"/><text x="20.5784%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (5 samples, 0.39%)</title><rect x="20.3284%" y="533" width="0.3909%" height="15" fill="rgb(223,15,21)" fg:x="260" fg:w="5"/><text x="20.5784%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (3 samples, 0.23%)</title><rect x="20.4848%" y="517" width="0.2346%" height="15" fill="rgb(239,191,12)" fg:x="262" fg:w="3"/><text x="20.7348%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="20.5629%" y="501" width="0.1564%" height="15" fill="rgb(231,191,37)" fg:x="263" fg:w="2"/><text x="20.8129%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="20.6411%" y="485" width="0.0782%" height="15" fill="rgb(209,155,36)" fg:x="264" fg:w="1"/><text x="20.8911%" y="495.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="20.6411%" y="469" width="0.0782%" height="15" fill="rgb(216,222,49)" fg:x="264" fg:w="1"/><text x="20.8911%" y="479.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="20.6411%" y="453" width="0.0782%" height="15" fill="rgb(218,181,2)" fg:x="264" fg:w="1"/><text x="20.8911%" y="463.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_box (1 samples, 0.08%)</title><rect x="20.7193%" y="661" width="0.0782%" height="15" fill="rgb(239,125,9)" fg:x="265" fg:w="1"/><text x="20.9693%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::PerformAction&gt; (1 samples, 0.08%)</title><rect x="20.7975%" y="661" width="0.0782%" height="15" fill="rgb(233,103,7)" fg:x="266" fg:w="1"/><text x="21.0475%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.8757%" y="645" width="0.0782%" height="15" fill="rgb(209,223,5)" fg:x="267" fg:w="1"/><text x="21.1257%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.9539%" y="645" width="0.0782%" height="15" fill="rgb(234,71,27)" fg:x="268" fg:w="1"/><text x="21.2039%" y="655.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.23%)</title><rect x="21.0321%" y="645" width="0.2346%" height="15" fill="rgb(251,202,16)" fg:x="269" fg:w="3"/><text x="21.2821%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (3 samples, 0.23%)</title><rect x="21.0321%" y="629" width="0.2346%" height="15" fill="rgb(231,180,0)" fg:x="269" fg:w="3"/><text x="21.2821%" y="639.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="21.1102%" y="613" width="0.1564%" height="15" fill="rgb(223,58,28)" fg:x="270" fg:w="2"/><text x="21.3602%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="21.1884%" y="597" width="0.0782%" height="15" fill="rgb(250,34,24)" fg:x="271" fg:w="1"/><text x="21.4384%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="21.3448%" y="517" width="0.0782%" height="15" fill="rgb(235,24,16)" fg:x="273" fg:w="1"/><text x="21.5948%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="21.3448%" y="501" width="0.0782%" height="15" fill="rgb(219,28,33)" fg:x="273" fg:w="1"/><text x="21.5948%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="21.3448%" y="485" width="0.0782%" height="15" fill="rgb(228,150,43)" fg:x="273" fg:w="1"/><text x="21.5948%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.4230%" y="517" width="0.0782%" height="15" fill="rgb(221,228,36)" fg:x="274" fg:w="1"/><text x="21.6730%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.31%)</title><rect x="21.3448%" y="533" width="0.3127%" height="15" fill="rgb(232,116,17)" fg:x="273" fg:w="4"/><text x="21.5948%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.5012%" y="517" width="0.1564%" height="15" fill="rgb(220,110,51)" fg:x="275" fg:w="2"/><text x="21.7512%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.5012%" y="501" width="0.1564%" height="15" fill="rgb(207,26,25)" fg:x="275" fg:w="2"/><text x="21.7512%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.5012%" y="485" width="0.1564%" height="15" fill="rgb(223,58,19)" fg:x="275" fg:w="2"/><text x="21.7512%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.5012%" y="469" width="0.1564%" height="15" fill="rgb(234,125,39)" fg:x="275" fg:w="2"/><text x="21.7512%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.6575%" y="421" width="0.0782%" height="15" fill="rgb(241,48,36)" fg:x="277" fg:w="1"/><text x="21.9075%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.6575%" y="469" width="0.1564%" height="15" fill="rgb(217,148,51)" fg:x="277" fg:w="2"/><text x="21.9075%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.6575%" y="453" width="0.1564%" height="15" fill="rgb(247,17,25)" fg:x="277" fg:w="2"/><text x="21.9075%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.6575%" y="437" width="0.1564%" height="15" fill="rgb(219,89,38)" fg:x="277" fg:w="2"/><text x="21.9075%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.7357%" y="421" width="0.0782%" height="15" fill="rgb(220,145,2)" fg:x="278" fg:w="1"/><text x="21.9857%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.7357%" y="405" width="0.0782%" height="15" fill="rgb(244,66,47)" fg:x="278" fg:w="1"/><text x="21.9857%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.7357%" y="389" width="0.0782%" height="15" fill="rgb(226,182,5)" fg:x="278" fg:w="1"/><text x="21.9857%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.7357%" y="373" width="0.0782%" height="15" fill="rgb(211,98,20)" fg:x="278" fg:w="1"/><text x="21.9857%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.7357%" y="357" width="0.0782%" height="15" fill="rgb(217,103,52)" fg:x="278" fg:w="1"/><text x="21.9857%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.7357%" y="341" width="0.0782%" height="15" fill="rgb(208,125,52)" fg:x="278" fg:w="1"/><text x="21.9857%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.7357%" y="325" width="0.0782%" height="15" fill="rgb(244,70,13)" fg:x="278" fg:w="1"/><text x="21.9857%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="21.7357%" y="309" width="0.0782%" height="15" fill="rgb(253,124,3)" fg:x="278" fg:w="1"/><text x="21.9857%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="21.7357%" y="293" width="0.0782%" height="15" fill="rgb(222,145,32)" fg:x="278" fg:w="1"/><text x="21.9857%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="21.7357%" y="277" width="0.0782%" height="15" fill="rgb(232,183,47)" fg:x="278" fg:w="1"/><text x="21.9857%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="21.7357%" y="261" width="0.0782%" height="15" fill="rgb(246,226,4)" fg:x="278" fg:w="1"/><text x="21.9857%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.7357%" y="245" width="0.0782%" height="15" fill="rgb(228,185,46)" fg:x="278" fg:w="1"/><text x="21.9857%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.9703%" y="373" width="0.0782%" height="15" fill="rgb(213,196,4)" fg:x="281" fg:w="1"/><text x="22.2203%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.9703%" y="357" width="0.0782%" height="15" fill="rgb(212,2,45)" fg:x="281" fg:w="1"/><text x="22.2203%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="21.9703%" y="341" width="0.0782%" height="15" fill="rgb(217,145,50)" fg:x="281" fg:w="1"/><text x="22.2203%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.9703%" y="325" width="0.0782%" height="15" fill="rgb(242,10,46)" fg:x="281" fg:w="1"/><text x="22.2203%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.9703%" y="309" width="0.0782%" height="15" fill="rgb(252,91,48)" fg:x="281" fg:w="1"/><text x="22.2203%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.9703%" y="293" width="0.0782%" height="15" fill="rgb(216,72,13)" fg:x="281" fg:w="1"/><text x="22.2203%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.9703%" y="277" width="0.0782%" height="15" fill="rgb(219,6,37)" fg:x="281" fg:w="1"/><text x="22.2203%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.9703%" y="261" width="0.0782%" height="15" fill="rgb(236,185,40)" fg:x="281" fg:w="1"/><text x="22.2203%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="21.9703%" y="245" width="0.0782%" height="15" fill="rgb(208,81,48)" fg:x="281" fg:w="1"/><text x="22.2203%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="21.9703%" y="229" width="0.0782%" height="15" fill="rgb(211,42,33)" fg:x="281" fg:w="1"/><text x="22.2203%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.9703%" y="213" width="0.0782%" height="15" fill="rgb(211,90,39)" fg:x="281" fg:w="1"/><text x="22.2203%" y="223.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.39%)</title><rect x="21.8139%" y="469" width="0.3909%" height="15" fill="rgb(218,136,12)" fg:x="279" fg:w="5"/><text x="22.0639%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.39%)</title><rect x="21.8139%" y="453" width="0.3909%" height="15" fill="rgb(234,12,32)" fg:x="279" fg:w="5"/><text x="22.0639%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.39%)</title><rect x="21.8139%" y="437" width="0.3909%" height="15" fill="rgb(221,164,18)" fg:x="279" fg:w="5"/><text x="22.0639%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.31%)</title><rect x="21.8921%" y="421" width="0.3127%" height="15" fill="rgb(239,135,14)" fg:x="280" fg:w="4"/><text x="22.1421%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="21.8921%" y="405" width="0.3127%" height="15" fill="rgb(226,198,47)" fg:x="280" fg:w="4"/><text x="22.1421%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.31%)</title><rect x="21.8921%" y="389" width="0.3127%" height="15" fill="rgb(244,121,47)" fg:x="280" fg:w="4"/><text x="22.1421%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="22.0485%" y="373" width="0.1564%" height="15" fill="rgb(226,21,48)" fg:x="282" fg:w="2"/><text x="22.2985%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="22.0485%" y="357" width="0.1564%" height="15" fill="rgb(215,178,47)" fg:x="282" fg:w="2"/><text x="22.2985%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="22.0485%" y="341" width="0.1564%" height="15" fill="rgb(206,212,19)" fg:x="282" fg:w="2"/><text x="22.2985%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="22.0485%" y="325" width="0.1564%" height="15" fill="rgb(230,104,34)" fg:x="282" fg:w="2"/><text x="22.2985%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="22.0485%" y="309" width="0.1564%" height="15" fill="rgb(210,96,51)" fg:x="282" fg:w="2"/><text x="22.2985%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.1267%" y="293" width="0.0782%" height="15" fill="rgb(229,111,47)" fg:x="283" fg:w="1"/><text x="22.3767%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.1267%" y="277" width="0.0782%" height="15" fill="rgb(218,174,45)" fg:x="283" fg:w="1"/><text x="22.3767%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="22.1267%" y="261" width="0.0782%" height="15" fill="rgb(215,21,32)" fg:x="283" fg:w="1"/><text x="22.3767%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.1267%" y="245" width="0.0782%" height="15" fill="rgb(235,72,21)" fg:x="283" fg:w="1"/><text x="22.3767%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.1267%" y="229" width="0.0782%" height="15" fill="rgb(250,113,30)" fg:x="283" fg:w="1"/><text x="22.3767%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="22.1267%" y="213" width="0.0782%" height="15" fill="rgb(244,136,34)" fg:x="283" fg:w="1"/><text x="22.3767%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="22.2830%" y="341" width="0.2346%" height="15" fill="rgb(213,226,47)" fg:x="285" fg:w="3"/><text x="22.5330%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="22.2830%" y="325" width="0.2346%" height="15" fill="rgb(224,136,40)" fg:x="285" fg:w="3"/><text x="22.5330%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="22.2830%" y="309" width="0.2346%" height="15" fill="rgb(253,124,12)" fg:x="285" fg:w="3"/><text x="22.5330%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="22.2830%" y="293" width="0.2346%" height="15" fill="rgb(210,67,8)" fg:x="285" fg:w="3"/><text x="22.5330%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="22.2830%" y="277" width="0.2346%" height="15" fill="rgb(210,204,0)" fg:x="285" fg:w="3"/><text x="22.5330%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="22.4394%" y="261" width="0.0782%" height="15" fill="rgb(217,179,22)" fg:x="287" fg:w="1"/><text x="22.6894%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.4394%" y="245" width="0.0782%" height="15" fill="rgb(237,192,33)" fg:x="287" fg:w="1"/><text x="22.6894%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="22.4394%" y="229" width="0.0782%" height="15" fill="rgb(211,104,28)" fg:x="287" fg:w="1"/><text x="22.6894%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.4394%" y="213" width="0.0782%" height="15" fill="rgb(214,75,30)" fg:x="287" fg:w="1"/><text x="22.6894%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="22.5176%" y="341" width="0.0782%" height="15" fill="rgb(220,227,12)" fg:x="288" fg:w="1"/><text x="22.7676%" y="351.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (13 samples, 1.02%)</title><rect x="21.6575%" y="533" width="1.0164%" height="15" fill="rgb(233,134,28)" fg:x="277" fg:w="13"/><text x="21.9075%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (13 samples, 1.02%)</title><rect x="21.6575%" y="517" width="1.0164%" height="15" fill="rgb(215,146,24)" fg:x="277" fg:w="13"/><text x="21.9075%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.02%)</title><rect x="21.6575%" y="501" width="1.0164%" height="15" fill="rgb(248,227,20)" fg:x="277" fg:w="13"/><text x="21.9075%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.02%)</title><rect x="21.6575%" y="485" width="1.0164%" height="15" fill="rgb(250,44,42)" fg:x="277" fg:w="13"/><text x="21.9075%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.47%)</title><rect x="22.2048%" y="469" width="0.4691%" height="15" fill="rgb(219,5,35)" fg:x="284" fg:w="6"/><text x="22.4548%" y="479.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.47%)</title><rect x="22.2048%" y="453" width="0.4691%" height="15" fill="rgb(241,132,32)" fg:x="284" fg:w="6"/><text x="22.4548%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.47%)</title><rect x="22.2048%" y="437" width="0.4691%" height="15" fill="rgb(234,212,51)" fg:x="284" fg:w="6"/><text x="22.4548%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.47%)</title><rect x="22.2048%" y="421" width="0.4691%" height="15" fill="rgb(242,173,29)" fg:x="284" fg:w="6"/><text x="22.4548%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.47%)</title><rect x="22.2048%" y="405" width="0.4691%" height="15" fill="rgb(212,159,2)" fg:x="284" fg:w="6"/><text x="22.4548%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.47%)</title><rect x="22.2048%" y="389" width="0.4691%" height="15" fill="rgb(238,165,31)" fg:x="284" fg:w="6"/><text x="22.4548%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.39%)</title><rect x="22.2830%" y="373" width="0.3909%" height="15" fill="rgb(241,57,36)" fg:x="285" fg:w="5"/><text x="22.5330%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.39%)</title><rect x="22.2830%" y="357" width="0.3909%" height="15" fill="rgb(249,7,4)" fg:x="285" fg:w="5"/><text x="22.5330%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.5958%" y="341" width="0.0782%" height="15" fill="rgb(250,137,44)" fg:x="289" fg:w="1"/><text x="22.8458%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.5958%" y="325" width="0.0782%" height="15" fill="rgb(244,185,1)" fg:x="289" fg:w="1"/><text x="22.8458%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.5958%" y="309" width="0.0782%" height="15" fill="rgb(216,5,53)" fg:x="289" fg:w="1"/><text x="22.8458%" y="319.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (19 samples, 1.49%)</title><rect x="21.3448%" y="549" width="1.4855%" height="15" fill="rgb(234,89,21)" fg:x="273" fg:w="19"/><text x="21.5948%" y="559.50"></text></g><g><title>plugins_core::finding::DefaultFinder::find_top_container (2 samples, 0.16%)</title><rect x="22.6740%" y="533" width="0.1564%" height="15" fill="rgb(250,81,43)" fg:x="290" fg:w="2"/><text x="22.9240%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="22.6740%" y="517" width="0.1564%" height="15" fill="rgb(243,132,11)" fg:x="290" fg:w="2"/><text x="22.9240%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (2 samples, 0.16%)</title><rect x="22.6740%" y="501" width="0.1564%" height="15" fill="rgb(253,159,28)" fg:x="290" fg:w="2"/><text x="22.9240%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="22.7522%" y="485" width="0.0782%" height="15" fill="rgb(237,167,34)" fg:x="291" fg:w="1"/><text x="23.0022%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="22.7522%" y="469" width="0.0782%" height="15" fill="rgb(237,16,50)" fg:x="291" fg:w="1"/><text x="23.0022%" y="479.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (20 samples, 1.56%)</title><rect x="21.3448%" y="565" width="1.5637%" height="15" fill="rgb(247,125,2)" fg:x="273" fg:w="20"/><text x="21.5948%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="22.8303%" y="549" width="0.0782%" height="15" fill="rgb(254,35,3)" fg:x="292" fg:w="1"/><text x="23.0803%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="22.8303%" y="533" width="0.0782%" height="15" fill="rgb(237,209,21)" fg:x="292" fg:w="1"/><text x="23.0803%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="22.8303%" y="517" width="0.0782%" height="15" fill="rgb(224,122,20)" fg:x="292" fg:w="1"/><text x="23.0803%" y="527.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="22.8303%" y="501" width="0.0782%" height="15" fill="rgb(224,11,46)" fg:x="292" fg:w="1"/><text x="23.0803%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="23.0649%" y="517" width="0.0782%" height="15" fill="rgb(248,21,33)" fg:x="295" fg:w="1"/><text x="23.3149%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="23.2213%" y="373" width="0.0782%" height="15" fill="rgb(222,144,7)" fg:x="297" fg:w="1"/><text x="23.4713%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.2213%" y="357" width="0.0782%" height="15" fill="rgb(205,141,37)" fg:x="297" fg:w="1"/><text x="23.4713%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.2213%" y="341" width="0.0782%" height="15" fill="rgb(237,130,8)" fg:x="297" fg:w="1"/><text x="23.4713%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.2213%" y="325" width="0.0782%" height="15" fill="rgb(209,179,39)" fg:x="297" fg:w="1"/><text x="23.4713%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="23.2213%" y="309" width="0.0782%" height="15" fill="rgb(207,52,17)" fg:x="297" fg:w="1"/><text x="23.4713%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="23.2213%" y="293" width="0.0782%" height="15" fill="rgb(253,158,17)" fg:x="297" fg:w="1"/><text x="23.4713%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="23.2213%" y="277" width="0.0782%" height="15" fill="rgb(208,19,53)" fg:x="297" fg:w="1"/><text x="23.4713%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.2213%" y="261" width="0.0782%" height="15" fill="rgb(233,152,13)" fg:x="297" fg:w="1"/><text x="23.4713%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.2213%" y="245" width="0.0782%" height="15" fill="rgb(231,84,1)" fg:x="297" fg:w="1"/><text x="23.4713%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="23.2213%" y="229" width="0.0782%" height="15" fill="rgb(229,142,48)" fg:x="297" fg:w="1"/><text x="23.4713%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="23.2213%" y="213" width="0.0782%" height="15" fill="rgb(248,70,29)" fg:x="297" fg:w="1"/><text x="23.4713%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="23.2213%" y="197" width="0.0782%" height="15" fill="rgb(250,85,7)" fg:x="297" fg:w="1"/><text x="23.4713%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="23.2213%" y="181" width="0.0782%" height="15" fill="rgb(235,140,43)" fg:x="297" fg:w="1"/><text x="23.4713%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.2213%" y="165" width="0.0782%" height="15" fill="rgb(216,0,5)" fg:x="297" fg:w="1"/><text x="23.4713%" y="175.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="23.2995%" y="373" width="0.0782%" height="15" fill="rgb(223,167,29)" fg:x="298" fg:w="1"/><text x="23.5495%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="23.2995%" y="357" width="0.0782%" height="15" fill="rgb(229,150,33)" fg:x="298" fg:w="1"/><text x="23.5495%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.2995%" y="341" width="0.0782%" height="15" fill="rgb(227,26,52)" fg:x="298" fg:w="1"/><text x="23.5495%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="23.3776%" y="357" width="0.0782%" height="15" fill="rgb(250,60,52)" fg:x="299" fg:w="1"/><text x="23.6276%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.3776%" y="341" width="0.0782%" height="15" fill="rgb(228,81,46)" fg:x="299" fg:w="1"/><text x="23.6276%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (2 samples, 0.16%)</title><rect x="23.4558%" y="357" width="0.1564%" height="15" fill="rgb(225,218,31)" fg:x="300" fg:w="2"/><text x="23.7058%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.5340%" y="341" width="0.0782%" height="15" fill="rgb(230,35,16)" fg:x="301" fg:w="1"/><text x="23.7840%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.31%)</title><rect x="23.3776%" y="373" width="0.3127%" height="15" fill="rgb(247,100,0)" fg:x="299" fg:w="4"/><text x="23.6276%" y="383.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="23.6122%" y="357" width="0.0782%" height="15" fill="rgb(223,135,11)" fg:x="302" fg:w="1"/><text x="23.8622%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.6904%" y="341" width="0.0782%" height="15" fill="rgb(207,136,0)" fg:x="303" fg:w="1"/><text x="23.9404%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.6904%" y="325" width="0.0782%" height="15" fill="rgb(246,131,25)" fg:x="303" fg:w="1"/><text x="23.9404%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.6904%" y="309" width="0.0782%" height="15" fill="rgb(209,47,12)" fg:x="303" fg:w="1"/><text x="23.9404%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (2 samples, 0.16%)</title><rect x="23.7686%" y="341" width="0.1564%" height="15" fill="rgb(221,25,16)" fg:x="304" fg:w="2"/><text x="24.0186%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.8468%" y="325" width="0.0782%" height="15" fill="rgb(223,164,33)" fg:x="305" fg:w="1"/><text x="24.0968%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.9249%" y="277" width="0.0782%" height="15" fill="rgb(220,26,23)" fg:x="306" fg:w="1"/><text x="24.1749%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.9249%" y="261" width="0.0782%" height="15" fill="rgb(231,224,1)" fg:x="306" fg:w="1"/><text x="24.1749%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.0031%" y="277" width="0.0782%" height="15" fill="rgb(229,221,24)" fg:x="307" fg:w="1"/><text x="24.2531%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (6 samples, 0.47%)</title><rect x="23.6904%" y="373" width="0.4691%" height="15" fill="rgb(213,34,10)" fg:x="303" fg:w="6"/><text x="23.9404%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.47%)</title><rect x="23.6904%" y="357" width="0.4691%" height="15" fill="rgb(215,33,11)" fg:x="303" fg:w="6"/><text x="23.9404%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.23%)</title><rect x="23.9249%" y="341" width="0.2346%" height="15" fill="rgb(216,20,41)" fg:x="306" fg:w="3"/><text x="24.1749%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="23.9249%" y="325" width="0.2346%" height="15" fill="rgb(228,43,31)" fg:x="306" fg:w="3"/><text x="24.1749%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.23%)</title><rect x="23.9249%" y="309" width="0.2346%" height="15" fill="rgb(227,83,26)" fg:x="306" fg:w="3"/><text x="24.1749%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="23.9249%" y="293" width="0.2346%" height="15" fill="rgb(217,168,19)" fg:x="306" fg:w="3"/><text x="24.1749%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.0813%" y="277" width="0.0782%" height="15" fill="rgb(231,34,33)" fg:x="308" fg:w="1"/><text x="24.3313%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.0813%" y="261" width="0.0782%" height="15" fill="rgb(230,120,51)" fg:x="308" fg:w="1"/><text x="24.3313%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="24.0813%" y="245" width="0.0782%" height="15" fill="rgb(215,138,27)" fg:x="308" fg:w="1"/><text x="24.3313%" y="255.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="24.1595%" y="325" width="0.0782%" height="15" fill="rgb(246,80,47)" fg:x="309" fg:w="1"/><text x="24.4095%" y="335.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="24.1595%" y="309" width="0.0782%" height="15" fill="rgb(215,57,53)" fg:x="309" fg:w="1"/><text x="24.4095%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="24.1595%" y="293" width="0.0782%" height="15" fill="rgb(229,137,5)" fg:x="309" fg:w="1"/><text x="24.4095%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="24.1595%" y="277" width="0.0782%" height="15" fill="rgb(210,86,2)" fg:x="309" fg:w="1"/><text x="24.4095%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.1595%" y="261" width="0.0782%" height="15" fill="rgb(231,226,51)" fg:x="309" fg:w="1"/><text x="24.4095%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.1595%" y="245" width="0.0782%" height="15" fill="rgb(216,62,29)" fg:x="309" fg:w="1"/><text x="24.4095%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="24.1595%" y="229" width="0.0782%" height="15" fill="rgb(248,202,3)" fg:x="309" fg:w="1"/><text x="24.4095%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="24.1595%" y="213" width="0.0782%" height="15" fill="rgb(225,181,7)" fg:x="309" fg:w="1"/><text x="24.4095%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="24.1595%" y="197" width="0.0782%" height="15" fill="rgb(247,170,54)" fg:x="309" fg:w="1"/><text x="24.4095%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="24.1595%" y="181" width="0.0782%" height="15" fill="rgb(236,204,33)" fg:x="309" fg:w="1"/><text x="24.4095%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="24.1595%" y="165" width="0.0782%" height="15" fill="rgb(216,45,30)" fg:x="309" fg:w="1"/><text x="24.4095%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.3941%" y="229" width="0.0782%" height="15" fill="rgb(213,203,16)" fg:x="312" fg:w="1"/><text x="24.6441%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (17 samples, 1.33%)</title><rect x="24.4722%" y="213" width="1.3292%" height="15" fill="rgb(215,46,16)" fg:x="313" fg:w="17"/><text x="24.7222%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (18 samples, 1.41%)</title><rect x="24.4722%" y="229" width="1.4073%" height="15" fill="rgb(217,162,46)" fg:x="313" fg:w="18"/><text x="24.7222%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="25.8014%" y="213" width="0.0782%" height="15" fill="rgb(224,189,20)" fg:x="330" fg:w="1"/><text x="26.0514%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::error::BuildError&gt; (1 samples, 0.08%)</title><rect x="25.8796%" y="229" width="0.0782%" height="15" fill="rgb(232,35,51)" fg:x="331" fg:w="1"/><text x="26.1296%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="25.9578%" y="229" width="0.1564%" height="15" fill="rgb(243,221,46)" fg:x="332" fg:w="2"/><text x="26.2078%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="26.0360%" y="213" width="0.0782%" height="15" fill="rgb(248,16,16)" fg:x="333" fg:w="1"/><text x="26.2860%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="26.0360%" y="197" width="0.0782%" height="15" fill="rgb(220,168,13)" fg:x="333" fg:w="1"/><text x="26.2860%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="26.2705%" y="165" width="0.0782%" height="15" fill="rgb(243,102,39)" fg:x="336" fg:w="1"/><text x="26.5205%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="26.3487%" y="165" width="0.0782%" height="15" fill="rgb(245,82,32)" fg:x="337" fg:w="1"/><text x="26.5987%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="26.3487%" y="149" width="0.0782%" height="15" fill="rgb(230,164,19)" fg:x="337" fg:w="1"/><text x="26.5987%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="26.3487%" y="133" width="0.0782%" height="15" fill="rgb(221,9,41)" fg:x="337" fg:w="1"/><text x="26.5987%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (49 samples, 3.83%)</title><rect x="26.4269%" y="165" width="3.8311%" height="15" fill="rgb(216,93,0)" fg:x="338" fg:w="49"/><text x="26.6769%" y="175.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (49 samples, 3.83%)</title><rect x="26.4269%" y="149" width="3.8311%" height="15" fill="rgb(235,113,9)" fg:x="338" fg:w="49"/><text x="26.6769%" y="159.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (49 samples, 3.83%)</title><rect x="26.4269%" y="133" width="3.8311%" height="15" fill="rgb(209,224,10)" fg:x="338" fg:w="49"/><text x="26.6769%" y="143.50">allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 4.22%)</title><rect x="26.1142%" y="213" width="4.2220%" height="15" fill="rgb(226,54,34)" fg:x="334" fg:w="54"/><text x="26.3642%" y="223.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (54 samples, 4.22%)</title><rect x="26.1142%" y="197" width="4.2220%" height="15" fill="rgb(222,60,8)" fg:x="334" fg:w="54"/><text x="26.3642%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (54 samples, 4.22%)</title><rect x="26.1142%" y="181" width="4.2220%" height="15" fill="rgb(248,228,41)" fg:x="334" fg:w="54"/><text x="26.3642%" y="191.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="30.2580%" y="165" width="0.0782%" height="15" fill="rgb(226,31,32)" fg:x="387" fg:w="1"/><text x="30.5080%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="30.4144%" y="197" width="0.1564%" height="15" fill="rgb(242,132,49)" fg:x="389" fg:w="2"/><text x="30.6644%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="30.4144%" y="181" width="0.1564%" height="15" fill="rgb(224,194,19)" fg:x="389" fg:w="2"/><text x="30.6644%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="30.4144%" y="165" width="0.1564%" height="15" fill="rgb(232,200,51)" fg:x="389" fg:w="2"/><text x="30.6644%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="30.4144%" y="149" width="0.1564%" height="15" fill="rgb(235,60,46)" fg:x="389" fg:w="2"/><text x="30.6644%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.6489%" y="149" width="0.0782%" height="15" fill="rgb(240,109,52)" fg:x="392" fg:w="1"/><text x="30.8989%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (83 samples, 6.49%)</title><rect x="24.3159%" y="245" width="6.4894%" height="15" fill="rgb(215,78,37)" fg:x="311" fg:w="83"/><text x="24.5659%" y="255.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (60 samples, 4.69%)</title><rect x="26.1142%" y="229" width="4.6912%" height="15" fill="rgb(225,141,7)" fg:x="334" fg:w="60"/><text x="26.3642%" y="239.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.47%)</title><rect x="30.3362%" y="213" width="0.4691%" height="15" fill="rgb(216,102,54)" fg:x="388" fg:w="6"/><text x="30.5862%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.23%)</title><rect x="30.5708%" y="197" width="0.2346%" height="15" fill="rgb(238,143,13)" fg:x="391" fg:w="3"/><text x="30.8208%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="30.6489%" y="181" width="0.1564%" height="15" fill="rgb(219,45,51)" fg:x="392" fg:w="2"/><text x="30.8989%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="30.6489%" y="165" width="0.1564%" height="15" fill="rgb(242,105,46)" fg:x="392" fg:w="2"/><text x="30.8989%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="30.7271%" y="149" width="0.0782%" height="15" fill="rgb(206,154,49)" fg:x="393" fg:w="1"/><text x="30.9771%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="30.8053%" y="197" width="0.0782%" height="15" fill="rgb(239,215,4)" fg:x="394" fg:w="1"/><text x="31.0553%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.47%)</title><rect x="30.8053%" y="213" width="0.4691%" height="15" fill="rgb(238,82,17)" fg:x="394" fg:w="6"/><text x="31.0553%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.39%)</title><rect x="30.8835%" y="197" width="0.3909%" height="15" fill="rgb(242,49,30)" fg:x="395" fg:w="5"/><text x="31.1335%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.39%)</title><rect x="30.8835%" y="181" width="0.3909%" height="15" fill="rgb(248,5,16)" fg:x="395" fg:w="5"/><text x="31.1335%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.39%)</title><rect x="30.8835%" y="165" width="0.3909%" height="15" fill="rgb(237,138,32)" fg:x="395" fg:w="5"/><text x="31.1335%" y="175.50"></text></g><g><title>__libc_malloc (5 samples, 0.39%)</title><rect x="30.8835%" y="149" width="0.3909%" height="15" fill="rgb(235,79,45)" fg:x="395" fg:w="5"/><text x="31.1335%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.55%)</title><rect x="30.8053%" y="245" width="0.5473%" height="15" fill="rgb(213,105,25)" fg:x="394" fg:w="7"/><text x="31.0553%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.55%)</title><rect x="30.8053%" y="229" width="0.5473%" height="15" fill="rgb(251,131,7)" fg:x="394" fg:w="7"/><text x="31.0553%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="31.2744%" y="213" width="0.0782%" height="15" fill="rgb(211,155,7)" fg:x="400" fg:w="1"/><text x="31.5244%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="31.4308%" y="213" width="0.0782%" height="15" fill="rgb(243,70,15)" fg:x="402" fg:w="1"/><text x="31.6808%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="31.4308%" y="197" width="0.0782%" height="15" fill="rgb(215,171,2)" fg:x="402" fg:w="1"/><text x="31.6808%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (96 samples, 7.51%)</title><rect x="24.2377%" y="261" width="7.5059%" height="15" fill="rgb(244,121,35)" fg:x="310" fg:w="96"/><text x="24.4877%" y="271.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.39%)</title><rect x="31.3526%" y="245" width="0.3909%" height="15" fill="rgb(249,147,17)" fg:x="401" fg:w="5"/><text x="31.6026%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.39%)</title><rect x="31.3526%" y="229" width="0.3909%" height="15" fill="rgb(241,193,52)" fg:x="401" fg:w="5"/><text x="31.6026%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (3 samples, 0.23%)</title><rect x="31.5090%" y="213" width="0.2346%" height="15" fill="rgb(217,159,39)" fg:x="403" fg:w="3"/><text x="31.7590%" y="223.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (97 samples, 7.58%)</title><rect x="24.2377%" y="277" width="7.5841%" height="15" fill="rgb(248,110,0)" fg:x="310" fg:w="97"/><text x="24.4877%" y="287.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="31.7435%" y="261" width="0.0782%" height="15" fill="rgb(233,227,0)" fg:x="406" fg:w="1"/><text x="31.9935%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (98 samples, 7.66%)</title><rect x="24.2377%" y="293" width="7.6622%" height="15" fill="rgb(252,55,2)" fg:x="310" fg:w="98"/><text x="24.4877%" y="303.50">regex::reg..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="31.8217%" y="277" width="0.0782%" height="15" fill="rgb(224,194,24)" fg:x="407" fg:w="1"/><text x="32.0717%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.8217%" y="261" width="0.0782%" height="15" fill="rgb(247,5,33)" fg:x="407" fg:w="1"/><text x="32.0717%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.9781%" y="245" width="0.0782%" height="15" fill="rgb(242,66,47)" fg:x="409" fg:w="1"/><text x="32.2281%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.2909%" y="213" width="0.0782%" height="15" fill="rgb(213,107,12)" fg:x="413" fg:w="1"/><text x="32.5409%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.2909%" y="197" width="0.0782%" height="15" fill="rgb(206,131,1)" fg:x="413" fg:w="1"/><text x="32.5409%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.2909%" y="181" width="0.0782%" height="15" fill="rgb(214,9,36)" fg:x="413" fg:w="1"/><text x="32.5409%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.3690%" y="213" width="0.0782%" height="15" fill="rgb(251,215,18)" fg:x="414" fg:w="1"/><text x="32.6190%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.3690%" y="197" width="0.0782%" height="15" fill="rgb(251,64,9)" fg:x="414" fg:w="1"/><text x="32.6190%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.3690%" y="181" width="0.0782%" height="15" fill="rgb(235,68,21)" fg:x="414" fg:w="1"/><text x="32.6190%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.4472%" y="213" width="0.0782%" height="15" fill="rgb(240,69,38)" fg:x="415" fg:w="1"/><text x="32.6972%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="32.4472%" y="197" width="0.0782%" height="15" fill="rgb(231,18,27)" fg:x="415" fg:w="1"/><text x="32.6972%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (107 samples, 8.37%)</title><rect x="24.2377%" y="309" width="8.3659%" height="15" fill="rgb(215,154,25)" fg:x="310" fg:w="107"/><text x="24.4877%" y="319.50">indefinite::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.70%)</title><rect x="31.8999%" y="293" width="0.7037%" height="15" fill="rgb(224,33,46)" fg:x="408" fg:w="9"/><text x="32.1499%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.63%)</title><rect x="31.9781%" y="277" width="0.6255%" height="15" fill="rgb(248,191,53)" fg:x="409" fg:w="8"/><text x="32.2281%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.63%)</title><rect x="31.9781%" y="261" width="0.6255%" height="15" fill="rgb(231,3,37)" fg:x="409" fg:w="8"/><text x="32.2281%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.55%)</title><rect x="32.0563%" y="245" width="0.5473%" height="15" fill="rgb(209,152,2)" fg:x="410" fg:w="7"/><text x="32.3063%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.55%)</title><rect x="32.0563%" y="229" width="0.5473%" height="15" fill="rgb(212,208,43)" fg:x="410" fg:w="7"/><text x="32.3063%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="32.5254%" y="213" width="0.0782%" height="15" fill="rgb(208,60,49)" fg:x="416" fg:w="1"/><text x="32.7754%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="32.6036%" y="293" width="0.1564%" height="15" fill="rgb(245,135,6)" fg:x="417" fg:w="2"/><text x="32.8536%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="32.6036%" y="277" width="0.1564%" height="15" fill="rgb(243,86,23)" fg:x="417" fg:w="2"/><text x="32.8536%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="32.6818%" y="261" width="0.0782%" height="15" fill="rgb(223,7,20)" fg:x="418" fg:w="1"/><text x="32.9318%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="32.6818%" y="245" width="0.0782%" height="15" fill="rgb(212,182,17)" fg:x="418" fg:w="1"/><text x="32.9318%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.6818%" y="229" width="0.0782%" height="15" fill="rgb(237,94,50)" fg:x="418" fg:w="1"/><text x="32.9318%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="32.7600%" y="277" width="0.0782%" height="15" fill="rgb(232,185,44)" fg:x="419" fg:w="1"/><text x="33.0100%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="32.7600%" y="261" width="0.0782%" height="15" fill="rgb(205,50,36)" fg:x="419" fg:w="1"/><text x="33.0100%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="32.7600%" y="245" width="0.0782%" height="15" fill="rgb(252,32,32)" fg:x="419" fg:w="1"/><text x="33.0100%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="32.7600%" y="229" width="0.0782%" height="15" fill="rgb(241,123,33)" fg:x="419" fg:w="1"/><text x="33.0100%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.2291%" y="197" width="0.0782%" height="15" fill="rgb(212,140,16)" fg:x="425" fg:w="1"/><text x="33.4791%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.2291%" y="181" width="0.0782%" height="15" fill="rgb(247,132,5)" fg:x="425" fg:w="1"/><text x="33.4791%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.2291%" y="165" width="0.0782%" height="15" fill="rgb(209,137,38)" fg:x="425" fg:w="1"/><text x="33.4791%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.23%)</title><rect x="33.3073%" y="197" width="0.2346%" height="15" fill="rgb(248,32,42)" fg:x="426" fg:w="3"/><text x="33.5573%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="33.4636%" y="181" width="0.0782%" height="15" fill="rgb(216,188,40)" fg:x="428" fg:w="1"/><text x="33.7136%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.78%)</title><rect x="32.8382%" y="229" width="0.7819%" height="15" fill="rgb(209,127,53)" fg:x="420" fg:w="10"/><text x="33.0882%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.78%)</title><rect x="32.8382%" y="213" width="0.7819%" height="15" fill="rgb(254,162,9)" fg:x="420" fg:w="10"/><text x="33.0882%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="33.5418%" y="197" width="0.0782%" height="15" fill="rgb(219,183,10)" fg:x="429" fg:w="1"/><text x="33.7918%" y="207.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (12 samples, 0.94%)</title><rect x="32.7600%" y="293" width="0.9382%" height="15" fill="rgb(217,192,21)" fg:x="419" fg:w="12"/><text x="33.0100%" y="303.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.86%)</title><rect x="32.8382%" y="277" width="0.8600%" height="15" fill="rgb(251,89,27)" fg:x="420" fg:w="11"/><text x="33.0882%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.86%)</title><rect x="32.8382%" y="261" width="0.8600%" height="15" fill="rgb(253,55,28)" fg:x="420" fg:w="11"/><text x="33.0882%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.86%)</title><rect x="32.8382%" y="245" width="0.8600%" height="15" fill="rgb(216,159,8)" fg:x="420" fg:w="11"/><text x="33.0882%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="33.6200%" y="229" width="0.0782%" height="15" fill="rgb(231,228,44)" fg:x="430" fg:w="1"/><text x="33.8700%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.7764%" y="245" width="0.0782%" height="15" fill="rgb(247,34,48)" fg:x="432" fg:w="1"/><text x="34.0264%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="33.8546%" y="213" width="0.0782%" height="15" fill="rgb(247,222,18)" fg:x="433" fg:w="1"/><text x="34.1046%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.9328%" y="213" width="0.0782%" height="15" fill="rgb(227,49,4)" fg:x="434" fg:w="1"/><text x="34.1828%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.23%)</title><rect x="33.8546%" y="245" width="0.2346%" height="15" fill="rgb(219,189,53)" fg:x="433" fg:w="3"/><text x="34.1046%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="33.8546%" y="229" width="0.2346%" height="15" fill="rgb(241,160,53)" fg:x="433" fg:w="3"/><text x="34.1046%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="34.0109%" y="213" width="0.0782%" height="15" fill="rgb(227,115,4)" fg:x="435" fg:w="1"/><text x="34.2609%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.0109%" y="197" width="0.0782%" height="15" fill="rgb(215,28,28)" fg:x="435" fg:w="1"/><text x="34.2609%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="34.0891%" y="245" width="0.0782%" height="15" fill="rgb(237,143,40)" fg:x="436" fg:w="1"/><text x="34.3391%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.0891%" y="229" width="0.0782%" height="15" fill="rgb(205,107,24)" fg:x="436" fg:w="1"/><text x="34.3391%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.1673%" y="229" width="0.0782%" height="15" fill="rgb(209,112,35)" fg:x="437" fg:w="1"/><text x="34.4173%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.2455%" y="213" width="0.0782%" height="15" fill="rgb(206,135,5)" fg:x="438" fg:w="1"/><text x="34.4955%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.94%)</title><rect x="34.2455%" y="229" width="0.9382%" height="15" fill="rgb(227,217,38)" fg:x="438" fg:w="12"/><text x="34.4955%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.86%)</title><rect x="34.3237%" y="213" width="0.8600%" height="15" fill="rgb(205,0,41)" fg:x="439" fg:w="11"/><text x="34.5737%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="35.0274%" y="197" width="0.1564%" height="15" fill="rgb(220,20,40)" fg:x="448" fg:w="2"/><text x="35.2774%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="35.3401%" y="213" width="0.0782%" height="15" fill="rgb(216,145,3)" fg:x="452" fg:w="1"/><text x="35.5901%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.31%)</title><rect x="35.1837%" y="229" width="0.3127%" height="15" fill="rgb(207,130,51)" fg:x="450" fg:w="4"/><text x="35.4337%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="35.4183%" y="213" width="0.0782%" height="15" fill="rgb(252,93,13)" fg:x="453" fg:w="1"/><text x="35.6683%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (7 samples, 0.55%)</title><rect x="35.4965%" y="197" width="0.5473%" height="15" fill="rgb(210,105,15)" fg:x="454" fg:w="7"/><text x="35.7465%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (7 samples, 0.55%)</title><rect x="35.4965%" y="181" width="0.5473%" height="15" fill="rgb(212,126,31)" fg:x="454" fg:w="7"/><text x="35.7465%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.39%)</title><rect x="35.6529%" y="165" width="0.3909%" height="15" fill="rgb(241,167,46)" fg:x="456" fg:w="5"/><text x="35.9029%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.39%)</title><rect x="35.6529%" y="149" width="0.3909%" height="15" fill="rgb(217,143,19)" fg:x="456" fg:w="5"/><text x="35.9029%" y="159.50"></text></g><g><title>realloc (5 samples, 0.39%)</title><rect x="35.6529%" y="133" width="0.3909%" height="15" fill="rgb(235,117,33)" fg:x="456" fg:w="5"/><text x="35.9029%" y="143.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (7 samples, 0.55%)</title><rect x="36.0438%" y="181" width="0.5473%" height="15" fill="rgb(247,95,6)" fg:x="461" fg:w="7"/><text x="36.2938%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (7 samples, 0.55%)</title><rect x="36.0438%" y="165" width="0.5473%" height="15" fill="rgb(243,206,43)" fg:x="461" fg:w="7"/><text x="36.2938%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (15 samples, 1.17%)</title><rect x="35.4965%" y="229" width="1.1728%" height="15" fill="rgb(229,65,54)" fg:x="454" fg:w="15"/><text x="35.7465%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (15 samples, 1.17%)</title><rect x="35.4965%" y="213" width="1.1728%" height="15" fill="rgb(247,137,34)" fg:x="454" fg:w="15"/><text x="35.7465%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (8 samples, 0.63%)</title><rect x="36.0438%" y="197" width="0.6255%" height="15" fill="rgb(245,174,44)" fg:x="461" fg:w="8"/><text x="36.2938%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="36.5911%" y="181" width="0.0782%" height="15" fill="rgb(223,64,15)" fg:x="468" fg:w="1"/><text x="36.8411%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="36.6693%" y="229" width="0.0782%" height="15" fill="rgb(243,153,36)" fg:x="469" fg:w="1"/><text x="36.9193%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="36.6693%" y="213" width="0.0782%" height="15" fill="rgb(252,23,4)" fg:x="469" fg:w="1"/><text x="36.9193%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="36.6693%" y="197" width="0.0782%" height="15" fill="rgb(209,132,13)" fg:x="469" fg:w="1"/><text x="36.9193%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="36.8256%" y="149" width="0.0782%" height="15" fill="rgb(209,196,21)" fg:x="471" fg:w="1"/><text x="37.0756%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="36.8256%" y="133" width="0.0782%" height="15" fill="rgb(252,197,1)" fg:x="471" fg:w="1"/><text x="37.0756%" y="143.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="37.3729%" y="117" width="0.0782%" height="15" fill="rgb(229,42,46)" fg:x="478" fg:w="1"/><text x="37.6229%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="37.4511%" y="117" width="0.0782%" height="15" fill="rgb(219,85,8)" fg:x="479" fg:w="1"/><text x="37.7011%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.4511%" y="101" width="0.0782%" height="15" fill="rgb(223,185,14)" fg:x="479" fg:w="1"/><text x="37.7011%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.4511%" y="85" width="0.0782%" height="15" fill="rgb(217,196,18)" fg:x="479" fg:w="1"/><text x="37.7011%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.4511%" y="69" width="0.0782%" height="15" fill="rgb(220,122,37)" fg:x="479" fg:w="1"/><text x="37.7011%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="37.5293%" y="117" width="0.0782%" height="15" fill="rgb(236,135,33)" fg:x="480" fg:w="1"/><text x="37.7793%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.5293%" y="101" width="0.0782%" height="15" fill="rgb(222,86,54)" fg:x="480" fg:w="1"/><text x="37.7793%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.5293%" y="85" width="0.0782%" height="15" fill="rgb(227,42,22)" fg:x="480" fg:w="1"/><text x="37.7793%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.5293%" y="69" width="0.0782%" height="15" fill="rgb(243,101,27)" fg:x="480" fg:w="1"/><text x="37.7793%" y="79.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.7639%" y="85" width="0.0782%" height="15" fill="rgb(229,100,8)" fg:x="483" fg:w="1"/><text x="38.0139%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="37.8421%" y="85" width="0.1564%" height="15" fill="rgb(252,68,10)" fg:x="484" fg:w="2"/><text x="38.0921%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.9203%" y="69" width="0.0782%" height="15" fill="rgb(219,19,31)" fg:x="485" fg:w="1"/><text x="38.1703%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.9203%" y="53" width="0.0782%" height="15" fill="rgb(246,150,44)" fg:x="485" fg:w="1"/><text x="38.1703%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.63%)</title><rect x="37.6075%" y="117" width="0.6255%" height="15" fill="rgb(211,14,39)" fg:x="481" fg:w="8"/><text x="37.8575%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.47%)</title><rect x="37.7639%" y="101" width="0.4691%" height="15" fill="rgb(221,98,29)" fg:x="483" fg:w="6"/><text x="38.0139%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.23%)</title><rect x="37.9984%" y="85" width="0.2346%" height="15" fill="rgb(221,70,26)" fg:x="486" fg:w="3"/><text x="38.2484%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="38.1548%" y="69" width="0.0782%" height="15" fill="rgb(236,146,30)" fg:x="488" fg:w="1"/><text x="38.4048%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="38.3112%" y="101" width="0.1564%" height="15" fill="rgb(226,94,34)" fg:x="490" fg:w="2"/><text x="38.5612%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="38.3112%" y="85" width="0.1564%" height="15" fill="rgb(248,132,21)" fg:x="490" fg:w="2"/><text x="38.5612%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.3112%" y="69" width="0.1564%" height="15" fill="rgb(245,43,50)" fg:x="490" fg:w="2"/><text x="38.5612%" y="79.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="38.3112%" y="53" width="0.1564%" height="15" fill="rgb(245,132,31)" fg:x="490" fg:w="2"/><text x="38.5612%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (42 samples, 3.28%)</title><rect x="38.2330%" y="117" width="3.2838%" height="15" fill="rgb(230,171,4)" fg:x="489" fg:w="42"/><text x="38.4830%" y="127.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (39 samples, 3.05%)</title><rect x="38.4676%" y="101" width="3.0493%" height="15" fill="rgb(235,6,45)" fg:x="492" fg:w="39"/><text x="38.7176%" y="111.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (39 samples, 3.05%)</title><rect x="38.4676%" y="85" width="3.0493%" height="15" fill="rgb(220,80,28)" fg:x="492" fg:w="39"/><text x="38.7176%" y="95.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 5.00%)</title><rect x="36.8256%" y="213" width="5.0039%" height="15" fill="rgb(242,171,9)" fg:x="471" fg:w="64"/><text x="37.0756%" y="223.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (64 samples, 5.00%)</title><rect x="36.8256%" y="197" width="5.0039%" height="15" fill="rgb(214,135,29)" fg:x="471" fg:w="64"/><text x="37.0756%" y="207.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (64 samples, 5.00%)</title><rect x="36.8256%" y="181" width="5.0039%" height="15" fill="rgb(221,229,16)" fg:x="471" fg:w="64"/><text x="37.0756%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (64 samples, 5.00%)</title><rect x="36.8256%" y="165" width="5.0039%" height="15" fill="rgb(253,59,46)" fg:x="471" fg:w="64"/><text x="37.0756%" y="175.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (63 samples, 4.93%)</title><rect x="36.9038%" y="149" width="4.9257%" height="15" fill="rgb(250,147,20)" fg:x="472" fg:w="63"/><text x="37.1538%" y="159.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (62 samples, 4.85%)</title><rect x="36.9820%" y="133" width="4.8475%" height="15" fill="rgb(236,64,48)" fg:x="473" fg:w="62"/><text x="37.2320%" y="143.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.31%)</title><rect x="41.5168%" y="117" width="0.3127%" height="15" fill="rgb(240,37,42)" fg:x="531" fg:w="4"/><text x="41.7668%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.23%)</title><rect x="41.5950%" y="101" width="0.2346%" height="15" fill="rgb(220,41,50)" fg:x="532" fg:w="3"/><text x="41.8450%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="41.6732%" y="85" width="0.1564%" height="15" fill="rgb(216,51,14)" fg:x="533" fg:w="2"/><text x="41.9232%" y="95.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="41.6732%" y="69" width="0.1564%" height="15" fill="rgb(215,83,10)" fg:x="533" fg:w="2"/><text x="41.9232%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="41.8296%" y="213" width="0.0782%" height="15" fill="rgb(206,144,17)" fg:x="535" fg:w="1"/><text x="42.0796%" y="223.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="41.9077%" y="197" width="0.1564%" height="15" fill="rgb(219,196,37)" fg:x="536" fg:w="2"/><text x="42.1577%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.31%)</title><rect x="42.0641%" y="197" width="0.3127%" height="15" fill="rgb(226,135,26)" fg:x="538" fg:w="4"/><text x="42.3141%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.2987%" y="181" width="0.0782%" height="15" fill="rgb(237,195,40)" fg:x="541" fg:w="1"/><text x="42.5487%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.2987%" y="165" width="0.0782%" height="15" fill="rgb(228,182,42)" fg:x="541" fg:w="1"/><text x="42.5487%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.2987%" y="149" width="0.0782%" height="15" fill="rgb(224,135,50)" fg:x="541" fg:w="1"/><text x="42.5487%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.23%)</title><rect x="42.3769%" y="197" width="0.2346%" height="15" fill="rgb(236,215,34)" fg:x="542" fg:w="3"/><text x="42.6269%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (110 samples, 8.60%)</title><rect x="34.1673%" y="245" width="8.6005%" height="15" fill="rgb(244,213,27)" fg:x="437" fg:w="110"/><text x="34.4173%" y="255.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (77 samples, 6.02%)</title><rect x="36.7475%" y="229" width="6.0203%" height="15" fill="rgb(233,37,53)" fg:x="470" fg:w="77"/><text x="36.9975%" y="239.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.86%)</title><rect x="41.9077%" y="213" width="0.8600%" height="15" fill="rgb(222,132,14)" fg:x="536" fg:w="11"/><text x="42.1577%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="42.6114%" y="197" width="0.1564%" height="15" fill="rgb(219,202,29)" fg:x="545" fg:w="2"/><text x="42.8614%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="42.7678%" y="245" width="0.1564%" height="15" fill="rgb(226,157,39)" fg:x="547" fg:w="2"/><text x="43.0178%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="42.7678%" y="229" width="0.1564%" height="15" fill="rgb(235,213,2)" fg:x="547" fg:w="2"/><text x="43.0178%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="42.8460%" y="213" width="0.0782%" height="15" fill="rgb(250,121,2)" fg:x="548" fg:w="1"/><text x="43.0960%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="42.8460%" y="197" width="0.0782%" height="15" fill="rgb(206,192,33)" fg:x="548" fg:w="1"/><text x="43.0960%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.8460%" y="181" width="0.0782%" height="15" fill="rgb(240,161,6)" fg:x="548" fg:w="1"/><text x="43.0960%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.8460%" y="165" width="0.0782%" height="15" fill="rgb(246,53,30)" fg:x="548" fg:w="1"/><text x="43.0960%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.8460%" y="149" width="0.0782%" height="15" fill="rgb(219,123,43)" fg:x="548" fg:w="1"/><text x="43.0960%" y="159.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="42.9242%" y="197" width="0.0782%" height="15" fill="rgb(236,53,49)" fg:x="549" fg:w="1"/><text x="43.1742%" y="207.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="42.9242%" y="181" width="0.0782%" height="15" fill="rgb(241,156,1)" fg:x="549" fg:w="1"/><text x="43.1742%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="42.9242%" y="213" width="0.1564%" height="15" fill="rgb(209,73,26)" fg:x="549" fg:w="2"/><text x="43.1742%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="43.0023%" y="197" width="0.0782%" height="15" fill="rgb(206,114,3)" fg:x="550" fg:w="1"/><text x="43.2523%" y="207.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="43.0023%" y="181" width="0.0782%" height="15" fill="rgb(230,214,9)" fg:x="550" fg:w="1"/><text x="43.2523%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="43.0023%" y="165" width="0.0782%" height="15" fill="rgb(240,184,46)" fg:x="550" fg:w="1"/><text x="43.2523%" y="175.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (120 samples, 9.38%)</title><rect x="33.7764%" y="277" width="9.3823%" height="15" fill="rgb(242,169,54)" fg:x="432" fg:w="120"/><text x="34.0264%" y="287.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (120 samples, 9.38%)</title><rect x="33.7764%" y="261" width="9.3823%" height="15" fill="rgb(207,168,50)" fg:x="432" fg:w="120"/><text x="34.0264%" y="271.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.23%)</title><rect x="42.9242%" y="245" width="0.2346%" height="15" fill="rgb(240,114,2)" fg:x="549" fg:w="3"/><text x="43.1742%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.23%)</title><rect x="42.9242%" y="229" width="0.2346%" height="15" fill="rgb(211,17,40)" fg:x="549" fg:w="3"/><text x="43.1742%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="43.0805%" y="213" width="0.0782%" height="15" fill="rgb(235,97,36)" fg:x="551" fg:w="1"/><text x="43.3305%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="43.0805%" y="197" width="0.0782%" height="15" fill="rgb(208,164,11)" fg:x="551" fg:w="1"/><text x="43.3305%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.0805%" y="181" width="0.0782%" height="15" fill="rgb(242,11,17)" fg:x="551" fg:w="1"/><text x="43.3305%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.0805%" y="165" width="0.0782%" height="15" fill="rgb(215,86,33)" fg:x="551" fg:w="1"/><text x="43.3305%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.0805%" y="149" width="0.0782%" height="15" fill="rgb(245,185,28)" fg:x="551" fg:w="1"/><text x="43.3305%" y="159.50"></text></g><g><title>indefinite::rules::number::Number::check (136 samples, 10.63%)</title><rect x="32.6036%" y="309" width="10.6333%" height="15" fill="rgb(231,89,42)" fg:x="417" fg:w="136"/><text x="32.8536%" y="319.50">indefinite::rule..</text></g><g><title>regex::regex::string::Regex::new (122 samples, 9.54%)</title><rect x="33.6982%" y="293" width="9.5387%" height="15" fill="rgb(210,18,47)" fg:x="431" fg:w="122"/><text x="33.9482%" y="303.50">regex::regex::..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="43.1587%" y="277" width="0.0782%" height="15" fill="rgb(214,84,8)" fg:x="552" fg:w="1"/><text x="43.4087%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="43.1587%" y="261" width="0.0782%" height="15" fill="rgb(214,222,23)" fg:x="552" fg:w="1"/><text x="43.4087%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="43.2369%" y="261" width="0.0782%" height="15" fill="rgb(213,104,21)" fg:x="553" fg:w="1"/><text x="43.4869%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="43.2369%" y="277" width="0.1564%" height="15" fill="rgb(238,138,6)" fg:x="553" fg:w="2"/><text x="43.4869%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="43.3151%" y="261" width="0.0782%" height="15" fill="rgb(205,167,50)" fg:x="554" fg:w="1"/><text x="43.5651%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="43.3151%" y="245" width="0.0782%" height="15" fill="rgb(230,105,27)" fg:x="554" fg:w="1"/><text x="43.5651%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="43.3151%" y="229" width="0.0782%" height="15" fill="rgb(222,97,48)" fg:x="554" fg:w="1"/><text x="43.5651%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.3151%" y="213" width="0.0782%" height="15" fill="rgb(222,197,14)" fg:x="554" fg:w="1"/><text x="43.5651%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.7060%" y="213" width="0.0782%" height="15" fill="rgb(210,105,47)" fg:x="559" fg:w="1"/><text x="43.9560%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="43.7842%" y="213" width="0.0782%" height="15" fill="rgb(238,158,19)" fg:x="560" fg:w="1"/><text x="44.0342%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="43.8624%" y="213" width="0.0782%" height="15" fill="rgb(226,176,23)" fg:x="561" fg:w="1"/><text x="44.1124%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="43.8624%" y="197" width="0.0782%" height="15" fill="rgb(208,79,31)" fg:x="561" fg:w="1"/><text x="44.1124%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="44.0188%" y="181" width="0.0782%" height="15" fill="rgb(221,154,21)" fg:x="563" fg:w="1"/><text x="44.2688%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.70%)</title><rect x="43.4715%" y="229" width="0.7037%" height="15" fill="rgb(213,61,41)" fg:x="556" fg:w="9"/><text x="43.7215%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.23%)</title><rect x="43.9406%" y="213" width="0.2346%" height="15" fill="rgb(215,28,33)" fg:x="562" fg:w="3"/><text x="44.1906%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.23%)</title><rect x="43.9406%" y="197" width="0.2346%" height="15" fill="rgb(231,139,26)" fg:x="562" fg:w="3"/><text x="44.1906%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="44.0970%" y="181" width="0.0782%" height="15" fill="rgb(232,159,16)" fg:x="564" fg:w="1"/><text x="44.3470%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="44.1751%" y="197" width="0.0782%" height="15" fill="rgb(233,80,10)" fg:x="565" fg:w="1"/><text x="44.4251%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="44.1751%" y="181" width="0.0782%" height="15" fill="rgb(208,147,29)" fg:x="565" fg:w="1"/><text x="44.4251%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="44.1751%" y="165" width="0.0782%" height="15" fill="rgb(213,10,12)" fg:x="565" fg:w="1"/><text x="44.4251%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="44.1751%" y="229" width="0.1564%" height="15" fill="rgb(231,218,13)" fg:x="565" fg:w="2"/><text x="44.4251%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="44.1751%" y="213" width="0.1564%" height="15" fill="rgb(244,199,44)" fg:x="565" fg:w="2"/><text x="44.4251%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="44.2533%" y="197" width="0.0782%" height="15" fill="rgb(240,144,53)" fg:x="566" fg:w="1"/><text x="44.5033%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="44.2533%" y="181" width="0.0782%" height="15" fill="rgb(223,57,28)" fg:x="566" fg:w="1"/><text x="44.5033%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="44.3315%" y="197" width="0.0782%" height="15" fill="rgb(213,134,38)" fg:x="567" fg:w="1"/><text x="44.5815%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="44.3315%" y="181" width="0.0782%" height="15" fill="rgb(251,182,42)" fg:x="567" fg:w="1"/><text x="44.5815%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="44.4097%" y="197" width="0.0782%" height="15" fill="rgb(229,93,13)" fg:x="568" fg:w="1"/><text x="44.6597%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="44.4097%" y="181" width="0.0782%" height="15" fill="rgb(234,171,3)" fg:x="568" fg:w="1"/><text x="44.6597%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (15 samples, 1.17%)</title><rect x="43.3933%" y="277" width="1.1728%" height="15" fill="rgb(241,105,32)" fg:x="555" fg:w="15"/><text x="43.6433%" y="287.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (15 samples, 1.17%)</title><rect x="43.3933%" y="261" width="1.1728%" height="15" fill="rgb(221,66,3)" fg:x="555" fg:w="15"/><text x="43.6433%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (15 samples, 1.17%)</title><rect x="43.3933%" y="245" width="1.1728%" height="15" fill="rgb(248,155,29)" fg:x="555" fg:w="15"/><text x="43.6433%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.23%)</title><rect x="44.3315%" y="229" width="0.2346%" height="15" fill="rgb(231,31,5)" fg:x="567" fg:w="3"/><text x="44.5815%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.23%)</title><rect x="44.3315%" y="213" width="0.2346%" height="15" fill="rgb(213,188,31)" fg:x="567" fg:w="3"/><text x="44.5815%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="44.4879%" y="197" width="0.0782%" height="15" fill="rgb(212,104,33)" fg:x="569" fg:w="1"/><text x="44.7379%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="44.5661%" y="213" width="0.0782%" height="15" fill="rgb(254,77,51)" fg:x="570" fg:w="1"/><text x="44.8161%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (275 samples, 21.50%)</title><rect x="23.2213%" y="389" width="21.5012%" height="15" fill="rgb(234,39,26)" fg:x="297" fg:w="275"/><text x="23.4713%" y="399.50">&lt;&amp;kernel::model::EntityPtr as plug..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (263 samples, 20.56%)</title><rect x="24.1595%" y="373" width="20.5629%" height="15" fill="rgb(208,88,36)" fg:x="309" fg:w="263"/><text x="24.4095%" y="383.50">plugins_core::looking::model::Un..</text></g><g><title>indefinite::indefinite (263 samples, 20.56%)</title><rect x="24.1595%" y="357" width="20.5629%" height="15" fill="rgb(243,222,10)" fg:x="309" fg:w="263"/><text x="24.4095%" y="367.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (263 samples, 20.56%)</title><rect x="24.1595%" y="341" width="20.5629%" height="15" fill="rgb(218,133,52)" fg:x="309" fg:w="263"/><text x="24.4095%" y="351.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (262 samples, 20.48%)</title><rect x="24.2377%" y="325" width="20.4848%" height="15" fill="rgb(222,25,26)" fg:x="310" fg:w="262"/><text x="24.4877%" y="335.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (19 samples, 1.49%)</title><rect x="43.2369%" y="309" width="1.4855%" height="15" fill="rgb(243,174,24)" fg:x="553" fg:w="19"/><text x="43.4869%" y="319.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (19 samples, 1.49%)</title><rect x="43.2369%" y="293" width="1.4855%" height="15" fill="rgb(233,188,52)" fg:x="553" fg:w="19"/><text x="43.4869%" y="303.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="44.5661%" y="277" width="0.1564%" height="15" fill="rgb(208,89,14)" fg:x="570" fg:w="2"/><text x="44.8161%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="44.5661%" y="261" width="0.1564%" height="15" fill="rgb(205,204,21)" fg:x="570" fg:w="2"/><text x="44.8161%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="44.5661%" y="245" width="0.1564%" height="15" fill="rgb(246,39,28)" fg:x="570" fg:w="2"/><text x="44.8161%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="44.5661%" y="229" width="0.1564%" height="15" fill="rgb(235,71,19)" fg:x="570" fg:w="2"/><text x="44.8161%" y="239.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="44.6443%" y="213" width="0.0782%" height="15" fill="rgb(211,62,39)" fg:x="571" fg:w="1"/><text x="44.8943%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="44.6443%" y="197" width="0.0782%" height="15" fill="rgb(246,118,20)" fg:x="571" fg:w="1"/><text x="44.8943%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.6443%" y="181" width="0.0782%" height="15" fill="rgb(230,82,12)" fg:x="571" fg:w="1"/><text x="44.8943%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.6443%" y="165" width="0.0782%" height="15" fill="rgb(205,212,34)" fg:x="571" fg:w="1"/><text x="44.8943%" y="175.50"></text></g><g><title>plugins_core::tools::contained_by (1 samples, 0.08%)</title><rect x="44.7224%" y="341" width="0.0782%" height="15" fill="rgb(239,90,1)" fg:x="572" fg:w="1"/><text x="44.9724%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="44.7224%" y="325" width="0.0782%" height="15" fill="rgb(225,198,50)" fg:x="572" fg:w="1"/><text x="44.9724%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="44.7224%" y="309" width="0.0782%" height="15" fill="rgb(227,208,48)" fg:x="572" fg:w="1"/><text x="44.9724%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="44.7224%" y="293" width="0.0782%" height="15" fill="rgb(238,134,41)" fg:x="572" fg:w="1"/><text x="44.9724%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="44.7224%" y="277" width="0.0782%" height="15" fill="rgb(241,58,39)" fg:x="572" fg:w="1"/><text x="44.9724%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="44.7224%" y="261" width="0.0782%" height="15" fill="rgb(214,126,4)" fg:x="572" fg:w="1"/><text x="44.9724%" y="271.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="44.7224%" y="245" width="0.0782%" height="15" fill="rgb(235,149,4)" fg:x="572" fg:w="1"/><text x="44.9724%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.8006%" y="261" width="0.0782%" height="15" fill="rgb(236,59,29)" fg:x="573" fg:w="1"/><text x="45.0506%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.8006%" y="245" width="0.0782%" height="15" fill="rgb(246,11,33)" fg:x="573" fg:w="1"/><text x="45.0506%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.8006%" y="229" width="0.0782%" height="15" fill="rgb(232,180,35)" fg:x="573" fg:w="1"/><text x="45.0506%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.8006%" y="213" width="0.0782%" height="15" fill="rgb(220,35,37)" fg:x="573" fg:w="1"/><text x="45.0506%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="44.8006%" y="197" width="0.0782%" height="15" fill="rgb(238,107,48)" fg:x="573" fg:w="1"/><text x="45.0506%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="44.8006%" y="181" width="0.0782%" height="15" fill="rgb(205,65,21)" fg:x="573" fg:w="1"/><text x="45.0506%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="44.8006%" y="165" width="0.0782%" height="15" fill="rgb(246,138,48)" fg:x="573" fg:w="1"/><text x="45.0506%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="44.8006%" y="149" width="0.0782%" height="15" fill="rgb(209,220,47)" fg:x="573" fg:w="1"/><text x="45.0506%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="44.8006%" y="133" width="0.0782%" height="15" fill="rgb(222,162,49)" fg:x="573" fg:w="1"/><text x="45.0506%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="44.8006%" y="117" width="0.0782%" height="15" fill="rgb(243,123,11)" fg:x="573" fg:w="1"/><text x="45.0506%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="44.8006%" y="101" width="0.0782%" height="15" fill="rgb(221,229,41)" fg:x="573" fg:w="1"/><text x="45.0506%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="44.8006%" y="85" width="0.0782%" height="15" fill="rgb(216,68,4)" fg:x="573" fg:w="1"/><text x="45.0506%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="44.8006%" y="69" width="0.0782%" height="15" fill="rgb(207,88,35)" fg:x="573" fg:w="1"/><text x="45.0506%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.8006%" y="53" width="0.0782%" height="15" fill="rgb(252,2,5)" fg:x="573" fg:w="1"/><text x="45.0506%" y="63.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="44.8006%" y="309" width="0.1564%" height="15" fill="rgb(209,173,7)" fg:x="573" fg:w="2"/><text x="45.0506%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="44.8006%" y="293" width="0.1564%" height="15" fill="rgb(210,198,52)" fg:x="573" fg:w="2"/><text x="45.0506%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="44.8006%" y="277" width="0.1564%" height="15" fill="rgb(228,152,32)" fg:x="573" fg:w="2"/><text x="45.0506%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.8788%" y="261" width="0.0782%" height="15" fill="rgb(249,98,29)" fg:x="574" fg:w="1"/><text x="45.1288%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.8788%" y="245" width="0.0782%" height="15" fill="rgb(205,148,48)" fg:x="574" fg:w="1"/><text x="45.1288%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="44.8788%" y="229" width="0.0782%" height="15" fill="rgb(236,69,34)" fg:x="574" fg:w="1"/><text x="45.1288%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="44.8788%" y="213" width="0.0782%" height="15" fill="rgb(220,151,41)" fg:x="574" fg:w="1"/><text x="45.1288%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="44.8788%" y="197" width="0.0782%" height="15" fill="rgb(254,106,24)" fg:x="574" fg:w="1"/><text x="45.1288%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="44.8788%" y="181" width="0.0782%" height="15" fill="rgb(210,37,48)" fg:x="574" fg:w="1"/><text x="45.1288%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="44.8788%" y="165" width="0.0782%" height="15" fill="rgb(254,131,5)" fg:x="574" fg:w="1"/><text x="45.1288%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="44.8788%" y="149" width="0.0782%" height="15" fill="rgb(216,55,41)" fg:x="574" fg:w="1"/><text x="45.1288%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="44.8788%" y="133" width="0.0782%" height="15" fill="rgb(250,35,31)" fg:x="574" fg:w="1"/><text x="45.1288%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="44.8788%" y="117" width="0.0782%" height="15" fill="rgb(207,124,33)" fg:x="574" fg:w="1"/><text x="45.1288%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="44.8788%" y="101" width="0.0782%" height="15" fill="rgb(249,175,17)" fg:x="574" fg:w="1"/><text x="45.1288%" y="111.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.23%)</title><rect x="44.8006%" y="341" width="0.2346%" height="15" fill="rgb(224,175,39)" fg:x="573" fg:w="3"/><text x="45.0506%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.23%)</title><rect x="44.8006%" y="325" width="0.2346%" height="15" fill="rgb(208,67,49)" fg:x="573" fg:w="3"/><text x="45.0506%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="44.9570%" y="309" width="0.0782%" height="15" fill="rgb(222,188,41)" fg:x="575" fg:w="1"/><text x="45.2070%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (5 samples, 0.39%)</title><rect x="44.7224%" y="389" width="0.3909%" height="15" fill="rgb(243,213,30)" fg:x="572" fg:w="5"/><text x="44.9724%" y="399.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (5 samples, 0.39%)</title><rect x="44.7224%" y="373" width="0.3909%" height="15" fill="rgb(253,100,45)" fg:x="572" fg:w="5"/><text x="44.9724%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (5 samples, 0.39%)</title><rect x="44.7224%" y="357" width="0.3909%" height="15" fill="rgb(226,24,44)" fg:x="572" fg:w="5"/><text x="44.9724%" y="367.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="45.0352%" y="341" width="0.0782%" height="15" fill="rgb(215,41,24)" fg:x="576" fg:w="1"/><text x="45.2852%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="45.0352%" y="325" width="0.0782%" height="15" fill="rgb(254,53,33)" fg:x="576" fg:w="1"/><text x="45.2852%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="45.0352%" y="309" width="0.0782%" height="15" fill="rgb(242,103,10)" fg:x="576" fg:w="1"/><text x="45.2852%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="45.0352%" y="293" width="0.0782%" height="15" fill="rgb(246,29,21)" fg:x="576" fg:w="1"/><text x="45.2852%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="45.0352%" y="277" width="0.0782%" height="15" fill="rgb(251,154,1)" fg:x="576" fg:w="1"/><text x="45.2852%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.1134%" y="389" width="0.0782%" height="15" fill="rgb(254,212,26)" fg:x="577" fg:w="1"/><text x="45.3634%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="45.2697%" y="213" width="0.0782%" height="15" fill="rgb(251,187,46)" fg:x="579" fg:w="1"/><text x="45.5197%" y="223.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (2 samples, 0.16%)</title><rect x="45.2697%" y="261" width="0.1564%" height="15" fill="rgb(224,208,14)" fg:x="579" fg:w="2"/><text x="45.5197%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="45.2697%" y="245" width="0.1564%" height="15" fill="rgb(222,176,26)" fg:x="579" fg:w="2"/><text x="45.5197%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="45.2697%" y="229" width="0.1564%" height="15" fill="rgb(241,219,52)" fg:x="579" fg:w="2"/><text x="45.5197%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.3479%" y="213" width="0.0782%" height="15" fill="rgb(252,198,21)" fg:x="580" fg:w="1"/><text x="45.5979%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.3479%" y="197" width="0.0782%" height="15" fill="rgb(244,196,23)" fg:x="580" fg:w="1"/><text x="45.5979%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="45.3479%" y="181" width="0.0782%" height="15" fill="rgb(239,121,44)" fg:x="580" fg:w="1"/><text x="45.5979%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="45.3479%" y="165" width="0.0782%" height="15" fill="rgb(249,203,23)" fg:x="580" fg:w="1"/><text x="45.5979%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="45.3479%" y="149" width="0.0782%" height="15" fill="rgb(238,219,10)" fg:x="580" fg:w="1"/><text x="45.5979%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.3479%" y="133" width="0.0782%" height="15" fill="rgb(241,35,46)" fg:x="580" fg:w="1"/><text x="45.5979%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.3479%" y="117" width="0.0782%" height="15" fill="rgb(218,28,6)" fg:x="580" fg:w="1"/><text x="45.5979%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="45.3479%" y="101" width="0.0782%" height="15" fill="rgb(233,151,50)" fg:x="580" fg:w="1"/><text x="45.5979%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="45.3479%" y="85" width="0.0782%" height="15" fill="rgb(208,57,8)" fg:x="580" fg:w="1"/><text x="45.5979%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="45.3479%" y="69" width="0.0782%" height="15" fill="rgb(253,99,10)" fg:x="580" fg:w="1"/><text x="45.5979%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="45.3479%" y="53" width="0.0782%" height="15" fill="rgb(237,196,49)" fg:x="580" fg:w="1"/><text x="45.5979%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.3479%" y="37" width="0.0782%" height="15" fill="rgb(209,51,3)" fg:x="580" fg:w="1"/><text x="45.5979%" y="47.50"></text></g><g><title>&lt;plugins_rune::runner::RuneReturn as plugins_rune::PerformTagged&gt;::handle (1 samples, 0.08%)</title><rect x="45.4261%" y="261" width="0.0782%" height="15" fill="rgb(238,129,10)" fg:x="581" fg:w="1"/><text x="45.6761%" y="271.50"></text></g><g><title>&lt;rune::runtime::value::Value as plugins_rune::runner::Simplifies&gt;::simplify (1 samples, 0.08%)</title><rect x="45.4261%" y="245" width="0.0782%" height="15" fill="rgb(246,201,16)" fg:x="581" fg:w="1"/><text x="45.6761%" y="255.50"></text></g><g><title>&lt;rune::runtime::shared::Shared&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="45.5043%" y="261" width="0.0782%" height="15" fill="rgb(250,160,20)" fg:x="582" fg:w="1"/><text x="45.7543%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;rune::runtime::value::Value&gt; (1 samples, 0.08%)</title><rect x="45.5825%" y="261" width="0.0782%" height="15" fill="rgb(251,107,25)" fg:x="583" fg:w="1"/><text x="45.8325%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="45.6607%" y="245" width="0.0782%" height="15" fill="rgb(212,103,39)" fg:x="584" fg:w="1"/><text x="45.9107%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;plugins_rune::runner::PostEvaluation&lt;rune::runtime::value::Value&gt;&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="45.6607%" y="229" width="0.0782%" height="15" fill="rgb(207,9,29)" fg:x="584" fg:w="1"/><text x="45.9107%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="45.6607%" y="213" width="0.0782%" height="15" fill="rgb(227,84,3)" fg:x="584" fg:w="1"/><text x="45.9107%" y="223.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="45.7389%" y="245" width="0.0782%" height="15" fill="rgb(242,194,7)" fg:x="585" fg:w="1"/><text x="45.9889%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="45.7389%" y="229" width="0.0782%" height="15" fill="rgb(230,40,4)" fg:x="585" fg:w="1"/><text x="45.9889%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (9 samples, 0.70%)</title><rect x="45.1916%" y="373" width="0.7037%" height="15" fill="rgb(243,229,33)" fg:x="578" fg:w="9"/><text x="45.4416%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (8 samples, 0.63%)</title><rect x="45.2697%" y="357" width="0.6255%" height="15" fill="rgb(240,65,24)" fg:x="579" fg:w="8"/><text x="45.5197%" y="367.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (8 samples, 0.63%)</title><rect x="45.2697%" y="341" width="0.6255%" height="15" fill="rgb(212,28,20)" fg:x="579" fg:w="8"/><text x="45.5197%" y="351.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (8 samples, 0.63%)</title><rect x="45.2697%" y="325" width="0.6255%" height="15" fill="rgb(209,72,3)" fg:x="579" fg:w="8"/><text x="45.5197%" y="335.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (8 samples, 0.63%)</title><rect x="45.2697%" y="309" width="0.6255%" height="15" fill="rgb(238,170,36)" fg:x="579" fg:w="8"/><text x="45.5197%" y="319.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (8 samples, 0.63%)</title><rect x="45.2697%" y="293" width="0.6255%" height="15" fill="rgb(236,19,38)" fg:x="579" fg:w="8"/><text x="45.5197%" y="303.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (8 samples, 0.63%)</title><rect x="45.2697%" y="277" width="0.6255%" height="15" fill="rgb(230,67,43)" fg:x="579" fg:w="8"/><text x="45.5197%" y="287.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (3 samples, 0.23%)</title><rect x="45.6607%" y="261" width="0.2346%" height="15" fill="rgb(227,14,36)" fg:x="584" fg:w="3"/><text x="45.9107%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="45.8170%" y="245" width="0.0782%" height="15" fill="rgb(247,171,49)" fg:x="586" fg:w="1"/><text x="46.0670%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="45.8170%" y="229" width="0.0782%" height="15" fill="rgb(235,164,51)" fg:x="586" fg:w="1"/><text x="46.0670%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="45.8170%" y="213" width="0.0782%" height="15" fill="rgb(246,107,20)" fg:x="586" fg:w="1"/><text x="46.0670%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="45.8170%" y="197" width="0.0782%" height="15" fill="rgb(226,88,18)" fg:x="586" fg:w="1"/><text x="46.0670%" y="207.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="45.8952%" y="341" width="0.1564%" height="15" fill="rgb(235,136,9)" fg:x="587" fg:w="2"/><text x="46.1452%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="45.8952%" y="325" width="0.1564%" height="15" fill="rgb(209,3,34)" fg:x="587" fg:w="2"/><text x="46.1452%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="45.9734%" y="309" width="0.0782%" height="15" fill="rgb(213,38,19)" fg:x="588" fg:w="1"/><text x="46.2234%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (3 samples, 0.23%)</title><rect x="45.8952%" y="357" width="0.2346%" height="15" fill="rgb(254,24,24)" fg:x="587" fg:w="3"/><text x="46.1452%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct_variant (1 samples, 0.08%)</title><rect x="46.0516%" y="341" width="0.0782%" height="15" fill="rgb(219,122,42)" fg:x="589" fg:w="1"/><text x="46.3016%" y="351.50"></text></g><g><title>plugins_core::library::actions::reply_ok (13 samples, 1.02%)</title><rect x="45.1916%" y="389" width="1.0164%" height="15" fill="rgb(205,128,31)" fg:x="578" fg:w="13"/><text x="45.4416%" y="399.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.31%)</title><rect x="45.8952%" y="373" width="0.3127%" height="15" fill="rgb(212,142,0)" fg:x="587" fg:w="4"/><text x="46.1452%" y="383.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="46.1298%" y="357" width="0.0782%" height="15" fill="rgb(211,25,35)" fg:x="590" fg:w="1"/><text x="46.3798%" y="367.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="46.2862%" y="373" width="0.0782%" height="15" fill="rgb(220,150,53)" fg:x="592" fg:w="1"/><text x="46.5362%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.2862%" y="357" width="0.0782%" height="15" fill="rgb(220,30,24)" fg:x="592" fg:w="1"/><text x="46.5362%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.2862%" y="341" width="0.0782%" height="15" fill="rgb(218,86,23)" fg:x="592" fg:w="1"/><text x="46.5362%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.2862%" y="325" width="0.0782%" height="15" fill="rgb(206,62,27)" fg:x="592" fg:w="1"/><text x="46.5362%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="46.3643%" y="341" width="0.0782%" height="15" fill="rgb(249,174,0)" fg:x="593" fg:w="1"/><text x="46.6143%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="46.3643%" y="325" width="0.0782%" height="15" fill="rgb(246,67,27)" fg:x="593" fg:w="1"/><text x="46.6143%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.3643%" y="309" width="0.0782%" height="15" fill="rgb(250,195,30)" fg:x="593" fg:w="1"/><text x="46.6143%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.3643%" y="293" width="0.0782%" height="15" fill="rgb(251,171,50)" fg:x="593" fg:w="1"/><text x="46.6143%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.3643%" y="277" width="0.0782%" height="15" fill="rgb(236,196,10)" fg:x="593" fg:w="1"/><text x="46.6143%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.3643%" y="261" width="0.0782%" height="15" fill="rgb(249,228,52)" fg:x="593" fg:w="1"/><text x="46.6143%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.3643%" y="245" width="0.0782%" height="15" fill="rgb(219,60,51)" fg:x="593" fg:w="1"/><text x="46.6143%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="46.3643%" y="229" width="0.0782%" height="15" fill="rgb(240,198,24)" fg:x="593" fg:w="1"/><text x="46.6143%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="46.3643%" y="213" width="0.0782%" height="15" fill="rgb(240,192,40)" fg:x="593" fg:w="1"/><text x="46.6143%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="46.3643%" y="197" width="0.0782%" height="15" fill="rgb(219,118,5)" fg:x="593" fg:w="1"/><text x="46.6143%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="46.3643%" y="181" width="0.0782%" height="15" fill="rgb(205,202,34)" fg:x="593" fg:w="1"/><text x="46.6143%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="46.3643%" y="165" width="0.0782%" height="15" fill="rgb(234,153,26)" fg:x="593" fg:w="1"/><text x="46.6143%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="46.3643%" y="149" width="0.0782%" height="15" fill="rgb(229,26,29)" fg:x="593" fg:w="1"/><text x="46.6143%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="46.3643%" y="133" width="0.0782%" height="15" fill="rgb(237,115,21)" fg:x="593" fg:w="1"/><text x="46.6143%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="46.3643%" y="117" width="0.0782%" height="15" fill="rgb(252,144,15)" fg:x="593" fg:w="1"/><text x="46.6143%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="46.3643%" y="101" width="0.0782%" height="15" fill="rgb(232,26,13)" fg:x="593" fg:w="1"/><text x="46.6143%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.3643%" y="85" width="0.0782%" height="15" fill="rgb(206,44,19)" fg:x="593" fg:w="1"/><text x="46.6143%" y="95.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="46.4425%" y="325" width="0.1564%" height="15" fill="rgb(249,159,2)" fg:x="594" fg:w="2"/><text x="46.6925%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.5207%" y="309" width="0.0782%" height="15" fill="rgb(231,5,32)" fg:x="595" fg:w="1"/><text x="46.7707%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.5207%" y="293" width="0.0782%" height="15" fill="rgb(249,210,18)" fg:x="595" fg:w="1"/><text x="46.7707%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.5207%" y="277" width="0.0782%" height="15" fill="rgb(215,223,36)" fg:x="595" fg:w="1"/><text x="46.7707%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.5207%" y="261" width="0.0782%" height="15" fill="rgb(245,185,20)" fg:x="595" fg:w="1"/><text x="46.7707%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.5207%" y="245" width="0.0782%" height="15" fill="rgb(206,224,11)" fg:x="595" fg:w="1"/><text x="46.7707%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="46.5207%" y="229" width="0.0782%" height="15" fill="rgb(248,73,42)" fg:x="595" fg:w="1"/><text x="46.7707%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="46.5207%" y="213" width="0.0782%" height="15" fill="rgb(219,149,31)" fg:x="595" fg:w="1"/><text x="46.7707%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="46.5207%" y="197" width="0.0782%" height="15" fill="rgb(243,104,17)" fg:x="595" fg:w="1"/><text x="46.7707%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="46.5207%" y="181" width="0.0782%" height="15" fill="rgb(244,117,33)" fg:x="595" fg:w="1"/><text x="46.7707%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="46.5207%" y="165" width="0.0782%" height="15" fill="rgb(251,25,47)" fg:x="595" fg:w="1"/><text x="46.7707%" y="175.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.31%)</title><rect x="46.3643%" y="373" width="0.3127%" height="15" fill="rgb(249,70,13)" fg:x="593" fg:w="4"/><text x="46.6143%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.31%)</title><rect x="46.3643%" y="357" width="0.3127%" height="15" fill="rgb(217,133,18)" fg:x="593" fg:w="4"/><text x="46.6143%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.23%)</title><rect x="46.4425%" y="341" width="0.2346%" height="15" fill="rgb(248,97,28)" fg:x="594" fg:w="3"/><text x="46.6925%" y="351.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="46.5989%" y="325" width="0.0782%" height="15" fill="rgb(237,193,4)" fg:x="596" fg:w="1"/><text x="46.8489%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="46.5989%" y="309" width="0.0782%" height="15" fill="rgb(247,198,45)" fg:x="596" fg:w="1"/><text x="46.8489%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.6771%" y="293" width="0.0782%" height="15" fill="rgb(245,2,20)" fg:x="597" fg:w="1"/><text x="46.9271%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.6771%" y="277" width="0.0782%" height="15" fill="rgb(210,71,36)" fg:x="597" fg:w="1"/><text x="46.9271%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.6771%" y="261" width="0.0782%" height="15" fill="rgb(238,114,30)" fg:x="597" fg:w="1"/><text x="46.9271%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.23%)</title><rect x="46.6771%" y="325" width="0.2346%" height="15" fill="rgb(241,200,2)" fg:x="597" fg:w="3"/><text x="46.9271%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.23%)</title><rect x="46.6771%" y="309" width="0.2346%" height="15" fill="rgb(232,106,18)" fg:x="597" fg:w="3"/><text x="46.9271%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="46.7553%" y="293" width="0.1564%" height="15" fill="rgb(211,141,18)" fg:x="598" fg:w="2"/><text x="47.0053%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="46.7553%" y="277" width="0.1564%" height="15" fill="rgb(224,9,9)" fg:x="598" fg:w="2"/><text x="47.0053%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="46.7553%" y="261" width="0.1564%" height="15" fill="rgb(249,137,46)" fg:x="598" fg:w="2"/><text x="47.0053%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="46.7553%" y="245" width="0.1564%" height="15" fill="rgb(236,44,45)" fg:x="598" fg:w="2"/><text x="47.0053%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="46.7553%" y="229" width="0.1564%" height="15" fill="rgb(205,68,40)" fg:x="598" fg:w="2"/><text x="47.0053%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="46.7553%" y="213" width="0.1564%" height="15" fill="rgb(214,198,49)" fg:x="598" fg:w="2"/><text x="47.0053%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.8335%" y="197" width="0.0782%" height="15" fill="rgb(226,140,45)" fg:x="599" fg:w="1"/><text x="47.0835%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="46.8335%" y="181" width="0.0782%" height="15" fill="rgb(209,109,20)" fg:x="599" fg:w="1"/><text x="47.0835%" y="191.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.39%)</title><rect x="46.6771%" y="373" width="0.3909%" height="15" fill="rgb(217,33,46)" fg:x="597" fg:w="5"/><text x="46.9271%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.39%)</title><rect x="46.6771%" y="357" width="0.3909%" height="15" fill="rgb(232,150,33)" fg:x="597" fg:w="5"/><text x="46.9271%" y="367.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.39%)</title><rect x="46.6771%" y="341" width="0.3909%" height="15" fill="rgb(233,76,25)" fg:x="597" fg:w="5"/><text x="46.9271%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="46.9116%" y="325" width="0.1564%" height="15" fill="rgb(254,219,23)" fg:x="600" fg:w="2"/><text x="47.1616%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="46.9116%" y="309" width="0.1564%" height="15" fill="rgb(233,108,4)" fg:x="600" fg:w="2"/><text x="47.1616%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="46.9116%" y="293" width="0.1564%" height="15" fill="rgb(229,98,6)" fg:x="600" fg:w="2"/><text x="47.1616%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="46.9116%" y="277" width="0.1564%" height="15" fill="rgb(217,40,27)" fg:x="600" fg:w="2"/><text x="47.1616%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="46.9116%" y="261" width="0.1564%" height="15" fill="rgb(221,35,43)" fg:x="600" fg:w="2"/><text x="47.1616%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="46.9116%" y="245" width="0.1564%" height="15" fill="rgb(212,107,11)" fg:x="600" fg:w="2"/><text x="47.1616%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="46.9116%" y="229" width="0.1564%" height="15" fill="rgb(245,42,44)" fg:x="600" fg:w="2"/><text x="47.1616%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="46.9898%" y="213" width="0.0782%" height="15" fill="rgb(209,31,12)" fg:x="601" fg:w="1"/><text x="47.2398%" y="223.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="47.0680%" y="373" width="0.0782%" height="15" fill="rgb(210,228,54)" fg:x="602" fg:w="1"/><text x="47.3180%" y="383.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (1 samples, 0.08%)</title><rect x="47.0680%" y="357" width="0.0782%" height="15" fill="rgb(241,19,33)" fg:x="602" fg:w="1"/><text x="47.3180%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="47.0680%" y="341" width="0.0782%" height="15" fill="rgb(229,51,27)" fg:x="602" fg:w="1"/><text x="47.3180%" y="351.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (308 samples, 24.08%)</title><rect x="23.2213%" y="405" width="24.0813%" height="15" fill="rgb(214,167,49)" fg:x="297" fg:w="308"/><text x="23.4713%" y="415.50">&lt;plugins_core::carrying::actions::Drop..</text></g><g><title>plugins_core::location::model::change_location (14 samples, 1.09%)</title><rect x="46.2080%" y="389" width="1.0946%" height="15" fill="rgb(248,140,47)" fg:x="591" fg:w="14"/><text x="46.4580%" y="399.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="47.1462%" y="373" width="0.1564%" height="15" fill="rgb(228,6,51)" fg:x="603" fg:w="2"/><text x="47.3962%" y="383.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="47.1462%" y="357" width="0.1564%" height="15" fill="rgb(242,44,53)" fg:x="603" fg:w="2"/><text x="47.3962%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="47.2244%" y="341" width="0.0782%" height="15" fill="rgb(249,90,50)" fg:x="604" fg:w="1"/><text x="47.4744%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="47.2244%" y="325" width="0.0782%" height="15" fill="rgb(222,84,19)" fg:x="604" fg:w="1"/><text x="47.4744%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="47.3026%" y="373" width="0.0782%" height="15" fill="rgb(214,140,12)" fg:x="605" fg:w="1"/><text x="47.5526%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="47.3026%" y="357" width="0.0782%" height="15" fill="rgb(210,20,43)" fg:x="605" fg:w="1"/><text x="47.5526%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="47.3026%" y="341" width="0.0782%" height="15" fill="rgb(243,1,40)" fg:x="605" fg:w="1"/><text x="47.5526%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="47.3026%" y="325" width="0.0782%" height="15" fill="rgb(224,102,26)" fg:x="605" fg:w="1"/><text x="47.5526%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="47.3026%" y="309" width="0.0782%" height="15" fill="rgb(221,179,1)" fg:x="605" fg:w="1"/><text x="47.5526%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="47.3026%" y="293" width="0.0782%" height="15" fill="rgb(216,209,47)" fg:x="605" fg:w="1"/><text x="47.5526%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="47.3026%" y="277" width="0.0782%" height="15" fill="rgb(251,135,9)" fg:x="605" fg:w="1"/><text x="47.5526%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="47.3026%" y="261" width="0.0782%" height="15" fill="rgb(242,9,36)" fg:x="605" fg:w="1"/><text x="47.5526%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="47.3808%" y="373" width="0.0782%" height="15" fill="rgb(249,60,37)" fg:x="606" fg:w="1"/><text x="47.6308%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="47.3808%" y="357" width="0.0782%" height="15" fill="rgb(230,66,45)" fg:x="606" fg:w="1"/><text x="47.6308%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="47.3808%" y="341" width="0.0782%" height="15" fill="rgb(216,1,47)" fg:x="606" fg:w="1"/><text x="47.6308%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="47.3808%" y="325" width="0.0782%" height="15" fill="rgb(235,8,23)" fg:x="606" fg:w="1"/><text x="47.6308%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="47.3808%" y="309" width="0.0782%" height="15" fill="rgb(225,136,11)" fg:x="606" fg:w="1"/><text x="47.6308%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="47.4590%" y="341" width="0.0782%" height="15" fill="rgb(228,63,44)" fg:x="607" fg:w="1"/><text x="47.7090%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="47.6153%" y="277" width="0.0782%" height="15" fill="rgb(240,43,52)" fg:x="609" fg:w="1"/><text x="47.8653%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.39%)</title><rect x="47.4590%" y="357" width="0.3909%" height="15" fill="rgb(217,167,36)" fg:x="607" fg:w="5"/><text x="47.7090%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.31%)</title><rect x="47.5371%" y="341" width="0.3127%" height="15" fill="rgb(250,19,6)" fg:x="608" fg:w="4"/><text x="47.7871%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="47.5371%" y="325" width="0.3127%" height="15" fill="rgb(236,60,51)" fg:x="608" fg:w="4"/><text x="47.7871%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.31%)</title><rect x="47.5371%" y="309" width="0.3127%" height="15" fill="rgb(222,217,20)" fg:x="608" fg:w="4"/><text x="47.7871%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="47.6153%" y="293" width="0.2346%" height="15" fill="rgb(242,65,52)" fg:x="609" fg:w="3"/><text x="47.8653%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="47.6935%" y="277" width="0.1564%" height="15" fill="rgb(217,5,41)" fg:x="610" fg:w="2"/><text x="47.9435%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="47.6935%" y="261" width="0.1564%" height="15" fill="rgb(223,208,53)" fg:x="610" fg:w="2"/><text x="47.9435%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="47.7717%" y="245" width="0.0782%" height="15" fill="rgb(221,104,30)" fg:x="611" fg:w="1"/><text x="48.0217%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.7717%" y="229" width="0.0782%" height="15" fill="rgb(230,210,42)" fg:x="611" fg:w="1"/><text x="48.0217%" y="239.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (6 samples, 0.47%)</title><rect x="47.4590%" y="373" width="0.4691%" height="15" fill="rgb(206,205,27)" fg:x="607" fg:w="6"/><text x="47.7090%" y="383.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="47.8499%" y="357" width="0.0782%" height="15" fill="rgb(233,114,38)" fg:x="612" fg:w="1"/><text x="48.0999%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="47.9281%" y="341" width="0.0782%" height="15" fill="rgb(216,174,36)" fg:x="613" fg:w="1"/><text x="48.1781%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.9281%" y="325" width="0.0782%" height="15" fill="rgb(211,30,9)" fg:x="613" fg:w="1"/><text x="48.1781%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="47.9281%" y="357" width="0.1564%" height="15" fill="rgb(216,8,21)" fg:x="613" fg:w="2"/><text x="48.1781%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="48.0063%" y="341" width="0.0782%" height="15" fill="rgb(237,209,39)" fg:x="614" fg:w="1"/><text x="48.2563%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="48.0063%" y="325" width="0.0782%" height="15" fill="rgb(235,111,47)" fg:x="614" fg:w="1"/><text x="48.2563%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="48.0063%" y="309" width="0.0782%" height="15" fill="rgb(216,139,9)" fg:x="614" fg:w="1"/><text x="48.2563%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.23%)</title><rect x="47.9281%" y="373" width="0.2346%" height="15" fill="rgb(248,185,4)" fg:x="613" fg:w="3"/><text x="48.1781%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.0844%" y="357" width="0.0782%" height="15" fill="rgb(239,185,25)" fg:x="615" fg:w="1"/><text x="48.3344%" y="367.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="48.1626%" y="325" width="0.0782%" height="15" fill="rgb(233,207,8)" fg:x="616" fg:w="1"/><text x="48.4126%" y="335.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="48.1626%" y="309" width="0.0782%" height="15" fill="rgb(249,220,24)" fg:x="616" fg:w="1"/><text x="48.4126%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="48.1626%" y="293" width="0.0782%" height="15" fill="rgb(221,50,14)" fg:x="616" fg:w="1"/><text x="48.4126%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="48.1626%" y="277" width="0.0782%" height="15" fill="rgb(227,79,42)" fg:x="616" fg:w="1"/><text x="48.4126%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="48.3190%" y="293" width="0.0782%" height="15" fill="rgb(228,218,49)" fg:x="618" fg:w="1"/><text x="48.5690%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="48.3190%" y="277" width="0.0782%" height="15" fill="rgb(249,18,15)" fg:x="618" fg:w="1"/><text x="48.5690%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="48.3190%" y="261" width="0.0782%" height="15" fill="rgb(212,84,27)" fg:x="618" fg:w="1"/><text x="48.5690%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="48.3190%" y="245" width="0.0782%" height="15" fill="rgb(207,83,24)" fg:x="618" fg:w="1"/><text x="48.5690%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="48.3190%" y="229" width="0.0782%" height="15" fill="rgb(219,61,7)" fg:x="618" fg:w="1"/><text x="48.5690%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="48.3190%" y="213" width="0.0782%" height="15" fill="rgb(211,43,29)" fg:x="618" fg:w="1"/><text x="48.5690%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="48.3972%" y="293" width="0.0782%" height="15" fill="rgb(243,15,23)" fg:x="619" fg:w="1"/><text x="48.6472%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="48.3972%" y="277" width="0.0782%" height="15" fill="rgb(217,52,28)" fg:x="619" fg:w="1"/><text x="48.6472%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="48.3972%" y="261" width="0.0782%" height="15" fill="rgb(210,35,6)" fg:x="619" fg:w="1"/><text x="48.6472%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="48.3972%" y="245" width="0.0782%" height="15" fill="rgb(237,187,28)" fg:x="619" fg:w="1"/><text x="48.6472%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.3972%" y="229" width="0.0782%" height="15" fill="rgb(231,136,24)" fg:x="619" fg:w="1"/><text x="48.6472%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="48.3972%" y="213" width="0.0782%" height="15" fill="rgb(205,176,52)" fg:x="619" fg:w="1"/><text x="48.6472%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="48.4754%" y="245" width="0.0782%" height="15" fill="rgb(218,65,12)" fg:x="620" fg:w="1"/><text x="48.7254%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.4754%" y="229" width="0.0782%" height="15" fill="rgb(234,101,21)" fg:x="620" fg:w="1"/><text x="48.7254%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="48.4754%" y="213" width="0.0782%" height="15" fill="rgb(206,13,20)" fg:x="620" fg:w="1"/><text x="48.7254%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="48.5536%" y="245" width="0.0782%" height="15" fill="rgb(236,89,44)" fg:x="621" fg:w="1"/><text x="48.8036%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.5536%" y="229" width="0.0782%" height="15" fill="rgb(225,52,17)" fg:x="621" fg:w="1"/><text x="48.8036%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.7099%" y="213" width="0.0782%" height="15" fill="rgb(214,27,25)" fg:x="623" fg:w="1"/><text x="48.9599%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (20 samples, 1.56%)</title><rect x="48.6317%" y="229" width="1.5637%" height="15" fill="rgb(240,141,35)" fg:x="622" fg:w="20"/><text x="48.8817%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (18 samples, 1.41%)</title><rect x="48.7881%" y="213" width="1.4073%" height="15" fill="rgb(216,126,3)" fg:x="624" fg:w="18"/><text x="49.0381%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="50.1955%" y="229" width="0.0782%" height="15" fill="rgb(249,196,23)" fg:x="642" fg:w="1"/><text x="50.4455%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="50.3518%" y="181" width="0.0782%" height="15" fill="rgb(215,185,43)" fg:x="644" fg:w="1"/><text x="50.6018%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.3518%" y="165" width="0.0782%" height="15" fill="rgb(208,194,36)" fg:x="644" fg:w="1"/><text x="50.6018%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.3518%" y="149" width="0.0782%" height="15" fill="rgb(245,182,12)" fg:x="644" fg:w="1"/><text x="50.6018%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="50.5082%" y="165" width="0.0782%" height="15" fill="rgb(244,222,52)" fg:x="646" fg:w="1"/><text x="50.7582%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="50.5864%" y="165" width="0.1564%" height="15" fill="rgb(236,222,51)" fg:x="647" fg:w="2"/><text x="50.8364%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="50.7428%" y="165" width="0.0782%" height="15" fill="rgb(254,71,22)" fg:x="649" fg:w="1"/><text x="50.9928%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.7428%" y="149" width="0.0782%" height="15" fill="rgb(250,104,15)" fg:x="649" fg:w="1"/><text x="50.9928%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.7428%" y="133" width="0.0782%" height="15" fill="rgb(229,223,46)" fg:x="649" fg:w="1"/><text x="50.9928%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.7428%" y="117" width="0.0782%" height="15" fill="rgb(209,129,18)" fg:x="649" fg:w="1"/><text x="50.9928%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.8210%" y="133" width="0.0782%" height="15" fill="rgb(224,160,1)" fg:x="650" fg:w="1"/><text x="51.0710%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.8210%" y="117" width="0.0782%" height="15" fill="rgb(237,112,21)" fg:x="650" fg:w="1"/><text x="51.0710%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.8210%" y="101" width="0.0782%" height="15" fill="rgb(215,198,53)" fg:x="650" fg:w="1"/><text x="51.0710%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.23%)</title><rect x="50.8210%" y="165" width="0.2346%" height="15" fill="rgb(218,227,35)" fg:x="650" fg:w="3"/><text x="51.0710%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.23%)</title><rect x="50.8210%" y="149" width="0.2346%" height="15" fill="rgb(232,121,22)" fg:x="650" fg:w="3"/><text x="51.0710%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="50.8991%" y="133" width="0.1564%" height="15" fill="rgb(235,52,54)" fg:x="651" fg:w="2"/><text x="51.1491%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (45 samples, 3.52%)</title><rect x="51.0555%" y="165" width="3.5184%" height="15" fill="rgb(219,21,44)" fg:x="653" fg:w="45"/><text x="51.3055%" y="175.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (44 samples, 3.44%)</title><rect x="51.1337%" y="149" width="3.4402%" height="15" fill="rgb(221,51,43)" fg:x="654" fg:w="44"/><text x="51.3837%" y="159.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (44 samples, 3.44%)</title><rect x="51.1337%" y="133" width="3.4402%" height="15" fill="rgb(225,77,42)" fg:x="654" fg:w="44"/><text x="51.3837%" y="143.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="54.5739%" y="165" width="0.1564%" height="15" fill="rgb(214,117,53)" fg:x="698" fg:w="2"/><text x="54.8239%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 4.46%)</title><rect x="50.3518%" y="213" width="4.4566%" height="15" fill="rgb(218,227,27)" fg:x="644" fg:w="57"/><text x="50.6018%" y="223.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (57 samples, 4.46%)</title><rect x="50.3518%" y="197" width="4.4566%" height="15" fill="rgb(223,214,36)" fg:x="644" fg:w="57"/><text x="50.6018%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (56 samples, 4.38%)</title><rect x="50.4300%" y="181" width="4.3784%" height="15" fill="rgb(235,21,7)" fg:x="645" fg:w="56"/><text x="50.6800%" y="191.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="54.7303%" y="165" width="0.0782%" height="15" fill="rgb(244,216,4)" fg:x="700" fg:w="1"/><text x="54.9803%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.8866%" y="197" width="0.0782%" height="15" fill="rgb(249,197,24)" fg:x="702" fg:w="1"/><text x="55.1366%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="54.9648%" y="197" width="0.0782%" height="15" fill="rgb(222,169,49)" fg:x="703" fg:w="1"/><text x="55.2148%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.9648%" y="181" width="0.0782%" height="15" fill="rgb(207,137,33)" fg:x="703" fg:w="1"/><text x="55.2148%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.9648%" y="165" width="0.0782%" height="15" fill="rgb(219,180,40)" fg:x="703" fg:w="1"/><text x="55.2148%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.9648%" y="149" width="0.0782%" height="15" fill="rgb(250,163,42)" fg:x="703" fg:w="1"/><text x="55.2148%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.31%)</title><rect x="54.8084%" y="213" width="0.3127%" height="15" fill="rgb(239,163,0)" fg:x="701" fg:w="4"/><text x="55.0584%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="55.0430%" y="197" width="0.0782%" height="15" fill="rgb(252,38,28)" fg:x="704" fg:w="1"/><text x="55.2930%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (63 samples, 4.93%)</title><rect x="50.2737%" y="229" width="4.9257%" height="15" fill="rgb(254,203,26)" fg:x="643" fg:w="63"/><text x="50.5237%" y="239.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="55.1212%" y="213" width="0.0782%" height="15" fill="rgb(209,129,32)" fg:x="705" fg:w="1"/><text x="55.3712%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (85 samples, 6.65%)</title><rect x="48.6317%" y="245" width="6.6458%" height="15" fill="rgb(207,177,52)" fg:x="622" fg:w="85"/><text x="48.8817%" y="255.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="55.1994%" y="229" width="0.0782%" height="15" fill="rgb(230,209,36)" fg:x="706" fg:w="1"/><text x="55.4494%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="55.1994%" y="213" width="0.0782%" height="15" fill="rgb(238,131,0)" fg:x="706" fg:w="1"/><text x="55.4494%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="55.1994%" y="197" width="0.0782%" height="15" fill="rgb(218,61,31)" fg:x="706" fg:w="1"/><text x="55.4494%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.1994%" y="181" width="0.0782%" height="15" fill="rgb(232,6,53)" fg:x="706" fg:w="1"/><text x="55.4494%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="55.2776%" y="197" width="0.0782%" height="15" fill="rgb(254,100,32)" fg:x="707" fg:w="1"/><text x="55.5276%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.23%)</title><rect x="55.2776%" y="213" width="0.2346%" height="15" fill="rgb(229,194,49)" fg:x="707" fg:w="3"/><text x="55.5276%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="55.3557%" y="197" width="0.1564%" height="15" fill="rgb(206,208,39)" fg:x="708" fg:w="2"/><text x="55.6057%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="55.3557%" y="181" width="0.1564%" height="15" fill="rgb(246,226,14)" fg:x="708" fg:w="2"/><text x="55.6057%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.3557%" y="165" width="0.1564%" height="15" fill="rgb(226,48,32)" fg:x="708" fg:w="2"/><text x="55.6057%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.3557%" y="149" width="0.1564%" height="15" fill="rgb(252,43,54)" fg:x="708" fg:w="2"/><text x="55.6057%" y="159.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="55.5903%" y="197" width="0.0782%" height="15" fill="rgb(207,124,0)" fg:x="711" fg:w="1"/><text x="55.8403%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.47%)</title><rect x="55.2776%" y="245" width="0.4691%" height="15" fill="rgb(248,188,30)" fg:x="707" fg:w="6"/><text x="55.5276%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.47%)</title><rect x="55.2776%" y="229" width="0.4691%" height="15" fill="rgb(232,14,43)" fg:x="707" fg:w="6"/><text x="55.5276%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.23%)</title><rect x="55.5121%" y="213" width="0.2346%" height="15" fill="rgb(218,52,29)" fg:x="710" fg:w="3"/><text x="55.7621%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.6685%" y="197" width="0.0782%" height="15" fill="rgb(218,176,50)" fg:x="712" fg:w="1"/><text x="55.9185%" y="207.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (95 samples, 7.43%)</title><rect x="48.4754%" y="277" width="7.4277%" height="15" fill="rgb(213,112,0)" fg:x="620" fg:w="95"/><text x="48.7254%" y="287.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (95 samples, 7.43%)</title><rect x="48.4754%" y="261" width="7.4277%" height="15" fill="rgb(244,216,8)" fg:x="620" fg:w="95"/><text x="48.7254%" y="271.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="55.7467%" y="245" width="0.1564%" height="15" fill="rgb(224,148,53)" fg:x="713" fg:w="2"/><text x="55.9967%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="55.7467%" y="229" width="0.1564%" height="15" fill="rgb(241,133,40)" fg:x="713" fg:w="2"/><text x="55.9967%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="55.8249%" y="213" width="0.0782%" height="15" fill="rgb(232,17,44)" fg:x="714" fg:w="1"/><text x="56.0749%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="55.8249%" y="197" width="0.0782%" height="15" fill="rgb(213,32,25)" fg:x="714" fg:w="1"/><text x="56.0749%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (96 samples, 7.51%)</title><rect x="48.4754%" y="293" width="7.5059%" height="15" fill="rgb(249,115,27)" fg:x="620" fg:w="96"/><text x="48.7254%" y="303.50">regex::reg..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="55.9030%" y="277" width="0.0782%" height="15" fill="rgb(241,50,1)" fg:x="715" fg:w="1"/><text x="56.1530%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.9030%" y="261" width="0.0782%" height="15" fill="rgb(244,175,40)" fg:x="715" fg:w="1"/><text x="56.1530%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.9030%" y="245" width="0.0782%" height="15" fill="rgb(230,94,34)" fg:x="715" fg:w="1"/><text x="56.1530%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="55.9030%" y="229" width="0.0782%" height="15" fill="rgb(223,185,29)" fg:x="715" fg:w="1"/><text x="56.1530%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.23%)</title><rect x="55.9812%" y="229" width="0.2346%" height="15" fill="rgb(225,193,15)" fg:x="716" fg:w="3"/><text x="56.2312%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="56.1376%" y="213" width="0.0782%" height="15" fill="rgb(252,121,38)" fg:x="718" fg:w="1"/><text x="56.3876%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.31%)</title><rect x="55.9812%" y="245" width="0.3127%" height="15" fill="rgb(232,44,12)" fg:x="716" fg:w="4"/><text x="56.2312%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="56.2158%" y="229" width="0.0782%" height="15" fill="rgb(226,45,54)" fg:x="719" fg:w="1"/><text x="56.4658%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.2158%" y="213" width="0.0782%" height="15" fill="rgb(209,67,17)" fg:x="719" fg:w="1"/><text x="56.4658%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.2158%" y="197" width="0.0782%" height="15" fill="rgb(219,108,52)" fg:x="719" fg:w="1"/><text x="56.4658%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.2158%" y="181" width="0.0782%" height="15" fill="rgb(216,118,19)" fg:x="719" fg:w="1"/><text x="56.4658%" y="191.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (103 samples, 8.05%)</title><rect x="48.3190%" y="309" width="8.0532%" height="15" fill="rgb(228,120,40)" fg:x="618" fg:w="103"/><text x="48.5690%" y="319.50">indefinite:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.39%)</title><rect x="55.9812%" y="293" width="0.3909%" height="15" fill="rgb(221,218,34)" fg:x="716" fg:w="5"/><text x="56.2312%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.39%)</title><rect x="55.9812%" y="277" width="0.3909%" height="15" fill="rgb(235,89,14)" fg:x="716" fg:w="5"/><text x="56.2312%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.39%)</title><rect x="55.9812%" y="261" width="0.3909%" height="15" fill="rgb(248,89,7)" fg:x="716" fg:w="5"/><text x="56.2312%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="56.2940%" y="245" width="0.0782%" height="15" fill="rgb(212,114,34)" fg:x="720" fg:w="1"/><text x="56.5440%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="56.2940%" y="229" width="0.0782%" height="15" fill="rgb(246,88,32)" fg:x="720" fg:w="1"/><text x="56.5440%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.2940%" y="213" width="0.0782%" height="15" fill="rgb(237,135,0)" fg:x="720" fg:w="1"/><text x="56.5440%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.2940%" y="197" width="0.0782%" height="15" fill="rgb(220,201,54)" fg:x="720" fg:w="1"/><text x="56.5440%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.2940%" y="181" width="0.0782%" height="15" fill="rgb(210,142,36)" fg:x="720" fg:w="1"/><text x="56.5440%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="56.3722%" y="293" width="0.1564%" height="15" fill="rgb(247,189,26)" fg:x="721" fg:w="2"/><text x="56.6222%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="56.3722%" y="277" width="0.1564%" height="15" fill="rgb(223,89,24)" fg:x="721" fg:w="2"/><text x="56.6222%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="56.3722%" y="261" width="0.1564%" height="15" fill="rgb(205,90,19)" fg:x="721" fg:w="2"/><text x="56.6222%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="56.4504%" y="245" width="0.0782%" height="15" fill="rgb(234,57,40)" fg:x="722" fg:w="1"/><text x="56.7004%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.4504%" y="229" width="0.0782%" height="15" fill="rgb(213,109,10)" fg:x="722" fg:w="1"/><text x="56.7004%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="56.5285%" y="277" width="0.0782%" height="15" fill="rgb(214,189,23)" fg:x="723" fg:w="1"/><text x="56.7785%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="56.5285%" y="261" width="0.0782%" height="15" fill="rgb(234,200,10)" fg:x="723" fg:w="1"/><text x="56.7785%" y="271.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.47%)</title><rect x="56.5285%" y="293" width="0.4691%" height="15" fill="rgb(221,148,16)" fg:x="723" fg:w="6"/><text x="56.7785%" y="303.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.39%)</title><rect x="56.6067%" y="277" width="0.3909%" height="15" fill="rgb(230,115,10)" fg:x="724" fg:w="5"/><text x="56.8567%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.39%)</title><rect x="56.6067%" y="261" width="0.3909%" height="15" fill="rgb(220,106,42)" fg:x="724" fg:w="5"/><text x="56.8567%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.39%)</title><rect x="56.6067%" y="245" width="0.3909%" height="15" fill="rgb(225,105,39)" fg:x="724" fg:w="5"/><text x="56.8567%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.39%)</title><rect x="56.6067%" y="229" width="0.3909%" height="15" fill="rgb(211,161,38)" fg:x="724" fg:w="5"/><text x="56.8567%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.39%)</title><rect x="56.6067%" y="213" width="0.3909%" height="15" fill="rgb(213,23,19)" fg:x="724" fg:w="5"/><text x="56.8567%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="56.8413%" y="197" width="0.1564%" height="15" fill="rgb(240,2,33)" fg:x="727" fg:w="2"/><text x="57.0913%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.9977%" y="245" width="0.0782%" height="15" fill="rgb(221,29,45)" fg:x="729" fg:w="1"/><text x="57.2477%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="57.0758%" y="213" width="0.0782%" height="15" fill="rgb(242,10,19)" fg:x="730" fg:w="1"/><text x="57.3258%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.0758%" y="197" width="0.0782%" height="15" fill="rgb(250,84,37)" fg:x="730" fg:w="1"/><text x="57.3258%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.0758%" y="181" width="0.0782%" height="15" fill="rgb(214,136,7)" fg:x="730" fg:w="1"/><text x="57.3258%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="57.1540%" y="213" width="0.0782%" height="15" fill="rgb(231,189,12)" fg:x="731" fg:w="1"/><text x="57.4040%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="57.1540%" y="197" width="0.0782%" height="15" fill="rgb(244,40,16)" fg:x="731" fg:w="1"/><text x="57.4040%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.1540%" y="181" width="0.0782%" height="15" fill="rgb(217,29,15)" fg:x="731" fg:w="1"/><text x="57.4040%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.23%)</title><rect x="57.0758%" y="245" width="0.2346%" height="15" fill="rgb(235,172,33)" fg:x="730" fg:w="3"/><text x="57.3258%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="57.0758%" y="229" width="0.2346%" height="15" fill="rgb(206,148,28)" fg:x="730" fg:w="3"/><text x="57.3258%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="57.2322%" y="213" width="0.0782%" height="15" fill="rgb(251,167,37)" fg:x="732" fg:w="1"/><text x="57.4822%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.2322%" y="197" width="0.0782%" height="15" fill="rgb(229,94,52)" fg:x="732" fg:w="1"/><text x="57.4822%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.86%)</title><rect x="57.3104%" y="229" width="0.8600%" height="15" fill="rgb(216,132,9)" fg:x="733" fg:w="11"/><text x="57.5604%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.86%)</title><rect x="57.3104%" y="213" width="0.8600%" height="15" fill="rgb(208,110,29)" fg:x="733" fg:w="11"/><text x="57.5604%" y="223.50"></text></g><g><title>__libc_free (3 samples, 0.23%)</title><rect x="57.9359%" y="197" width="0.2346%" height="15" fill="rgb(241,23,8)" fg:x="741" fg:w="3"/><text x="58.1859%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="58.1704%" y="229" width="0.0782%" height="15" fill="rgb(208,26,35)" fg:x="744" fg:w="1"/><text x="58.4204%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="58.1704%" y="213" width="0.0782%" height="15" fill="rgb(242,165,34)" fg:x="744" fg:w="1"/><text x="58.4204%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="58.3268%" y="197" width="0.0782%" height="15" fill="rgb(222,222,33)" fg:x="746" fg:w="1"/><text x="58.5768%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.3268%" y="181" width="0.0782%" height="15" fill="rgb(227,16,52)" fg:x="746" fg:w="1"/><text x="58.5768%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.3268%" y="165" width="0.0782%" height="15" fill="rgb(213,93,12)" fg:x="746" fg:w="1"/><text x="58.5768%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.3268%" y="149" width="0.0782%" height="15" fill="rgb(238,41,5)" fg:x="746" fg:w="1"/><text x="58.5768%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.39%)</title><rect x="58.4050%" y="197" width="0.3909%" height="15" fill="rgb(211,60,15)" fg:x="747" fg:w="5"/><text x="58.6550%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.39%)</title><rect x="58.4050%" y="181" width="0.3909%" height="15" fill="rgb(209,11,34)" fg:x="747" fg:w="5"/><text x="58.6550%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.31%)</title><rect x="58.4832%" y="165" width="0.3127%" height="15" fill="rgb(254,155,53)" fg:x="748" fg:w="4"/><text x="58.7332%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="58.4832%" y="149" width="0.3127%" height="15" fill="rgb(236,174,8)" fg:x="748" fg:w="4"/><text x="58.7332%" y="159.50"></text></g><g><title>realloc (4 samples, 0.31%)</title><rect x="58.4832%" y="133" width="0.3127%" height="15" fill="rgb(229,31,27)" fg:x="748" fg:w="4"/><text x="58.7332%" y="143.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="58.7959%" y="181" width="0.0782%" height="15" fill="rgb(242,226,26)" fg:x="752" fg:w="1"/><text x="59.0459%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="58.7959%" y="165" width="0.0782%" height="15" fill="rgb(234,32,40)" fg:x="752" fg:w="1"/><text x="59.0459%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="58.7959%" y="197" width="0.1564%" height="15" fill="rgb(249,226,47)" fg:x="752" fg:w="2"/><text x="59.0459%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="58.8741%" y="181" width="0.0782%" height="15" fill="rgb(212,6,26)" fg:x="753" fg:w="1"/><text x="59.1241%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (10 samples, 0.78%)</title><rect x="58.2486%" y="229" width="0.7819%" height="15" fill="rgb(249,202,29)" fg:x="745" fg:w="10"/><text x="58.4986%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (10 samples, 0.78%)</title><rect x="58.2486%" y="213" width="0.7819%" height="15" fill="rgb(226,106,4)" fg:x="745" fg:w="10"/><text x="58.4986%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="58.9523%" y="197" width="0.0782%" height="15" fill="rgb(251,2,27)" fg:x="754" fg:w="1"/><text x="59.2023%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.9523%" y="181" width="0.0782%" height="15" fill="rgb(236,208,0)" fg:x="754" fg:w="1"/><text x="59.2023%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.9523%" y="165" width="0.0782%" height="15" fill="rgb(211,66,17)" fg:x="754" fg:w="1"/><text x="59.2023%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.31%)</title><rect x="59.3432%" y="117" width="0.3127%" height="15" fill="rgb(216,129,9)" fg:x="759" fg:w="4"/><text x="59.5932%" y="127.50"></text></g><g><title>__libc_free (3 samples, 0.23%)</title><rect x="59.6560%" y="117" width="0.2346%" height="15" fill="rgb(215,130,23)" fg:x="763" fg:w="3"/><text x="59.9060%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.23%)</title><rect x="59.8905%" y="117" width="0.2346%" height="15" fill="rgb(253,157,11)" fg:x="766" fg:w="3"/><text x="60.1405%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.9687%" y="101" width="0.1564%" height="15" fill="rgb(224,25,14)" fg:x="767" fg:w="2"/><text x="60.2187%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.9687%" y="85" width="0.1564%" height="15" fill="rgb(238,16,7)" fg:x="767" fg:w="2"/><text x="60.2187%" y="95.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="59.9687%" y="69" width="0.1564%" height="15" fill="rgb(228,74,11)" fg:x="767" fg:w="2"/><text x="60.2187%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.23%)</title><rect x="60.2033%" y="85" width="0.2346%" height="15" fill="rgb(239,221,27)" fg:x="770" fg:w="3"/><text x="60.4533%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.2815%" y="69" width="0.1564%" height="15" fill="rgb(229,166,18)" fg:x="771" fg:w="2"/><text x="60.5315%" y="79.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="60.2815%" y="53" width="0.1564%" height="15" fill="rgb(254,94,46)" fg:x="771" fg:w="2"/><text x="60.5315%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.47%)</title><rect x="60.1251%" y="117" width="0.4691%" height="15" fill="rgb(241,79,19)" fg:x="769" fg:w="6"/><text x="60.3751%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.39%)</title><rect x="60.2033%" y="101" width="0.3909%" height="15" fill="rgb(228,99,51)" fg:x="770" fg:w="5"/><text x="60.4533%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="60.4378%" y="85" width="0.1564%" height="15" fill="rgb(211,15,6)" fg:x="773" fg:w="2"/><text x="60.6878%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="60.5942%" y="117" width="0.0782%" height="15" fill="rgb(245,107,54)" fg:x="775" fg:w="1"/><text x="60.8442%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="60.5942%" y="101" width="0.0782%" height="15" fill="rgb(243,3,2)" fg:x="775" fg:w="1"/><text x="60.8442%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="60.5942%" y="85" width="0.0782%" height="15" fill="rgb(206,122,10)" fg:x="775" fg:w="1"/><text x="60.8442%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (46 samples, 3.60%)</title><rect x="60.6724%" y="117" width="3.5966%" height="15" fill="rgb(224,88,4)" fg:x="776" fg:w="46"/><text x="60.9224%" y="127.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (46 samples, 3.60%)</title><rect x="60.6724%" y="101" width="3.5966%" height="15" fill="rgb(230,1,41)" fg:x="776" fg:w="46"/><text x="60.9224%" y="111.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (46 samples, 3.60%)</title><rect x="60.6724%" y="85" width="3.5966%" height="15" fill="rgb(230,1,31)" fg:x="776" fg:w="46"/><text x="60.9224%" y="95.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="64.2690%" y="117" width="0.0782%" height="15" fill="rgb(232,67,19)" fg:x="822" fg:w="1"/><text x="64.5190%" y="127.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="64.3471%" y="117" width="0.0782%" height="15" fill="rgb(222,206,20)" fg:x="823" fg:w="1"/><text x="64.5971%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 5.63%)</title><rect x="59.0305%" y="213" width="5.6294%" height="15" fill="rgb(217,225,19)" fg:x="755" fg:w="72"/><text x="59.2805%" y="223.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (72 samples, 5.63%)</title><rect x="59.0305%" y="197" width="5.6294%" height="15" fill="rgb(234,13,33)" fg:x="755" fg:w="72"/><text x="59.2805%" y="207.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (72 samples, 5.63%)</title><rect x="59.0305%" y="181" width="5.6294%" height="15" fill="rgb(254,5,1)" fg:x="755" fg:w="72"/><text x="59.2805%" y="191.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (72 samples, 5.63%)</title><rect x="59.0305%" y="165" width="5.6294%" height="15" fill="rgb(211,121,41)" fg:x="755" fg:w="72"/><text x="59.2805%" y="175.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (72 samples, 5.63%)</title><rect x="59.0305%" y="149" width="5.6294%" height="15" fill="rgb(213,199,35)" fg:x="755" fg:w="72"/><text x="59.2805%" y="159.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (72 samples, 5.63%)</title><rect x="59.0305%" y="133" width="5.6294%" height="15" fill="rgb(240,118,22)" fg:x="755" fg:w="72"/><text x="59.2805%" y="143.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.23%)</title><rect x="64.4253%" y="117" width="0.2346%" height="15" fill="rgb(238,184,25)" fg:x="824" fg:w="3"/><text x="64.6753%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="64.5035%" y="101" width="0.1564%" height="15" fill="rgb(210,165,6)" fg:x="825" fg:w="2"/><text x="64.7535%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="64.5035%" y="85" width="0.1564%" height="15" fill="rgb(235,149,5)" fg:x="825" fg:w="2"/><text x="64.7535%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7381%" y="197" width="0.0782%" height="15" fill="rgb(221,63,5)" fg:x="828" fg:w="1"/><text x="64.9881%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.23%)</title><rect x="64.8163%" y="197" width="0.2346%" height="15" fill="rgb(250,44,41)" fg:x="829" fg:w="3"/><text x="65.0663%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="64.8944%" y="181" width="0.1564%" height="15" fill="rgb(235,112,47)" fg:x="830" fg:w="2"/><text x="65.1444%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="64.8944%" y="165" width="0.1564%" height="15" fill="rgb(252,176,34)" fg:x="830" fg:w="2"/><text x="65.1444%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="64.8944%" y="149" width="0.1564%" height="15" fill="rgb(234,50,19)" fg:x="830" fg:w="2"/><text x="65.1444%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (102 samples, 7.97%)</title><rect x="57.3104%" y="245" width="7.9750%" height="15" fill="rgb(241,195,31)" fg:x="733" fg:w="102"/><text x="57.5604%" y="255.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (80 samples, 6.25%)</title><rect x="59.0305%" y="229" width="6.2549%" height="15" fill="rgb(212,93,11)" fg:x="755" fg:w="80"/><text x="59.2805%" y="239.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.63%)</title><rect x="64.6599%" y="213" width="0.6255%" height="15" fill="rgb(254,98,51)" fg:x="827" fg:w="8"/><text x="64.9099%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.23%)</title><rect x="65.0508%" y="197" width="0.2346%" height="15" fill="rgb(246,18,45)" fg:x="832" fg:w="3"/><text x="65.3008%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.2854%" y="213" width="0.0782%" height="15" fill="rgb(215,148,23)" fg:x="835" fg:w="1"/><text x="65.5354%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="65.3636%" y="213" width="0.0782%" height="15" fill="rgb(227,22,7)" fg:x="836" fg:w="1"/><text x="65.6136%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.3636%" y="197" width="0.0782%" height="15" fill="rgb(207,210,37)" fg:x="836" fg:w="1"/><text x="65.6136%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.3636%" y="181" width="0.0782%" height="15" fill="rgb(247,147,42)" fg:x="836" fg:w="1"/><text x="65.6136%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.3636%" y="165" width="0.0782%" height="15" fill="rgb(226,213,14)" fg:x="836" fg:w="1"/><text x="65.6136%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.23%)</title><rect x="65.2854%" y="245" width="0.2346%" height="15" fill="rgb(223,18,10)" fg:x="835" fg:w="3"/><text x="65.5354%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.23%)</title><rect x="65.2854%" y="229" width="0.2346%" height="15" fill="rgb(253,34,22)" fg:x="835" fg:w="3"/><text x="65.5354%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="65.4418%" y="213" width="0.0782%" height="15" fill="rgb(222,90,31)" fg:x="837" fg:w="1"/><text x="65.6918%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="65.5199%" y="213" width="0.1564%" height="15" fill="rgb(220,182,30)" fg:x="838" fg:w="2"/><text x="65.7699%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="65.5981%" y="197" width="0.0782%" height="15" fill="rgb(229,170,12)" fg:x="839" fg:w="1"/><text x="65.8481%" y="207.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="65.5981%" y="181" width="0.0782%" height="15" fill="rgb(210,101,21)" fg:x="839" fg:w="1"/><text x="65.8481%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (120 samples, 9.38%)</title><rect x="56.3722%" y="309" width="9.3823%" height="15" fill="rgb(237,177,31)" fg:x="721" fg:w="120"/><text x="56.6222%" y="319.50">indefinite::r..</text></g><g><title>regex::regex::string::Regex::new (112 samples, 8.76%)</title><rect x="56.9977%" y="293" width="8.7568%" height="15" fill="rgb(215,91,34)" fg:x="729" fg:w="112"/><text x="57.2477%" y="303.50">regex::regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (112 samples, 8.76%)</title><rect x="56.9977%" y="277" width="8.7568%" height="15" fill="rgb(229,206,16)" fg:x="729" fg:w="112"/><text x="57.2477%" y="287.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (112 samples, 8.76%)</title><rect x="56.9977%" y="261" width="8.7568%" height="15" fill="rgb(235,207,10)" fg:x="729" fg:w="112"/><text x="57.2477%" y="271.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.23%)</title><rect x="65.5199%" y="245" width="0.2346%" height="15" fill="rgb(247,18,10)" fg:x="838" fg:w="3"/><text x="65.7699%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.23%)</title><rect x="65.5199%" y="229" width="0.2346%" height="15" fill="rgb(232,4,6)" fg:x="838" fg:w="3"/><text x="65.7699%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="65.6763%" y="213" width="0.0782%" height="15" fill="rgb(247,93,45)" fg:x="840" fg:w="1"/><text x="65.9263%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="65.8327%" y="277" width="0.0782%" height="15" fill="rgb(240,181,18)" fg:x="842" fg:w="1"/><text x="66.0827%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="65.8327%" y="261" width="0.0782%" height="15" fill="rgb(208,224,0)" fg:x="842" fg:w="1"/><text x="66.0827%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.8327%" y="245" width="0.0782%" height="15" fill="rgb(224,207,54)" fg:x="842" fg:w="1"/><text x="66.0827%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="65.8327%" y="229" width="0.0782%" height="15" fill="rgb(217,152,29)" fg:x="842" fg:w="1"/><text x="66.0827%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.8327%" y="213" width="0.0782%" height="15" fill="rgb(243,78,27)" fg:x="842" fg:w="1"/><text x="66.0827%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8327%" y="197" width="0.0782%" height="15" fill="rgb(228,111,9)" fg:x="842" fg:w="1"/><text x="66.0827%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.9109%" y="229" width="0.0782%" height="15" fill="rgb(230,213,21)" fg:x="843" fg:w="1"/><text x="66.1609%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.9109%" y="213" width="0.0782%" height="15" fill="rgb(248,50,36)" fg:x="843" fg:w="1"/><text x="66.1609%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.9109%" y="197" width="0.0782%" height="15" fill="rgb(226,19,31)" fg:x="843" fg:w="1"/><text x="66.1609%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="65.9891%" y="229" width="0.0782%" height="15" fill="rgb(205,132,21)" fg:x="844" fg:w="1"/><text x="66.2391%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.9891%" y="213" width="0.0782%" height="15" fill="rgb(207,42,19)" fg:x="844" fg:w="1"/><text x="66.2391%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="66.0672%" y="197" width="0.1564%" height="15" fill="rgb(229,69,35)" fg:x="845" fg:w="2"/><text x="66.3172%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.31%)</title><rect x="66.0672%" y="213" width="0.3127%" height="15" fill="rgb(226,96,11)" fg:x="845" fg:w="4"/><text x="66.3172%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="66.2236%" y="197" width="0.1564%" height="15" fill="rgb(236,133,54)" fg:x="847" fg:w="2"/><text x="66.4736%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="66.2236%" y="181" width="0.1564%" height="15" fill="rgb(247,166,21)" fg:x="847" fg:w="2"/><text x="66.4736%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (2 samples, 0.16%)</title><rect x="66.2236%" y="165" width="0.1564%" height="15" fill="rgb(220,132,12)" fg:x="847" fg:w="2"/><text x="66.4736%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="66.2236%" y="149" width="0.1564%" height="15" fill="rgb(233,27,30)" fg:x="847" fg:w="2"/><text x="66.4736%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="66.2236%" y="133" width="0.1564%" height="15" fill="rgb(246,161,27)" fg:x="847" fg:w="2"/><text x="66.4736%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.3018%" y="117" width="0.0782%" height="15" fill="rgb(240,56,3)" fg:x="848" fg:w="1"/><text x="66.5518%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.3800%" y="197" width="0.0782%" height="15" fill="rgb(242,190,9)" fg:x="849" fg:w="1"/><text x="66.6300%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.70%)</title><rect x="66.0672%" y="229" width="0.7037%" height="15" fill="rgb(234,3,52)" fg:x="845" fg:w="9"/><text x="66.3172%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.39%)</title><rect x="66.3800%" y="213" width="0.3909%" height="15" fill="rgb(220,221,19)" fg:x="849" fg:w="5"/><text x="66.6300%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.31%)</title><rect x="66.4582%" y="197" width="0.3127%" height="15" fill="rgb(247,178,30)" fg:x="850" fg:w="4"/><text x="66.7082%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.31%)</title><rect x="66.4582%" y="181" width="0.3127%" height="15" fill="rgb(234,212,27)" fg:x="850" fg:w="4"/><text x="66.7082%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.6927%" y="165" width="0.0782%" height="15" fill="rgb(226,199,38)" fg:x="853" fg:w="1"/><text x="66.9427%" y="175.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="66.7709%" y="229" width="0.0782%" height="15" fill="rgb(248,114,22)" fg:x="854" fg:w="1"/><text x="67.0209%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="66.9273%" y="181" width="0.0782%" height="15" fill="rgb(221,180,4)" fg:x="856" fg:w="1"/><text x="67.1773%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.9273%" y="165" width="0.0782%" height="15" fill="rgb(220,229,24)" fg:x="856" fg:w="1"/><text x="67.1773%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.9273%" y="149" width="0.0782%" height="15" fill="rgb(226,184,27)" fg:x="856" fg:w="1"/><text x="67.1773%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.9273%" y="133" width="0.0782%" height="15" fill="rgb(232,99,15)" fg:x="856" fg:w="1"/><text x="67.1773%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.31%)</title><rect x="66.8491%" y="229" width="0.3127%" height="15" fill="rgb(250,167,16)" fg:x="855" fg:w="4"/><text x="67.0991%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.31%)</title><rect x="66.8491%" y="213" width="0.3127%" height="15" fill="rgb(243,113,6)" fg:x="855" fg:w="4"/><text x="67.0991%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.31%)</title><rect x="66.8491%" y="197" width="0.3127%" height="15" fill="rgb(244,147,52)" fg:x="855" fg:w="4"/><text x="67.0991%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="67.0055%" y="181" width="0.1564%" height="15" fill="rgb(235,59,50)" fg:x="857" fg:w="2"/><text x="67.2555%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="67.0837%" y="165" width="0.0782%" height="15" fill="rgb(250,188,6)" fg:x="858" fg:w="1"/><text x="67.3337%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="67.1618%" y="197" width="0.0782%" height="15" fill="rgb(236,173,11)" fg:x="859" fg:w="1"/><text x="67.4118%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="67.1618%" y="181" width="0.0782%" height="15" fill="rgb(233,64,3)" fg:x="859" fg:w="1"/><text x="67.4118%" y="191.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (19 samples, 1.49%)</title><rect x="65.9109%" y="261" width="1.4855%" height="15" fill="rgb(207,92,7)" fg:x="843" fg:w="19"/><text x="66.1609%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (19 samples, 1.49%)</title><rect x="65.9109%" y="245" width="1.4855%" height="15" fill="rgb(221,30,19)" fg:x="843" fg:w="19"/><text x="66.1609%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.23%)</title><rect x="67.1618%" y="229" width="0.2346%" height="15" fill="rgb(245,22,49)" fg:x="859" fg:w="3"/><text x="67.4118%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.23%)</title><rect x="67.1618%" y="213" width="0.2346%" height="15" fill="rgb(218,39,20)" fg:x="859" fg:w="3"/><text x="67.4118%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="67.2400%" y="197" width="0.1564%" height="15" fill="rgb(222,144,21)" fg:x="860" fg:w="2"/><text x="67.4900%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="67.3964%" y="245" width="0.0782%" height="15" fill="rgb(222,78,51)" fg:x="862" fg:w="1"/><text x="67.6464%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (21 samples, 1.64%)</title><rect x="65.9109%" y="277" width="1.6419%" height="15" fill="rgb(248,213,53)" fg:x="843" fg:w="21"/><text x="66.1609%" y="287.50"></text></g><g><title>regex::builders::string::RegexBuilder::new (2 samples, 0.16%)</title><rect x="67.3964%" y="261" width="0.1564%" height="15" fill="rgb(245,28,34)" fg:x="862" fg:w="2"/><text x="67.6464%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.4746%" y="245" width="0.0782%" height="15" fill="rgb(229,186,26)" fg:x="863" fg:w="1"/><text x="67.7246%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.4746%" y="229" width="0.0782%" height="15" fill="rgb(224,0,41)" fg:x="863" fg:w="1"/><text x="67.7246%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4746%" y="213" width="0.0782%" height="15" fill="rgb(223,136,51)" fg:x="863" fg:w="1"/><text x="67.7246%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (261 samples, 20.41%)</title><rect x="47.3026%" y="389" width="20.4066%" height="15" fill="rgb(234,50,9)" fg:x="605" fg:w="261"/><text x="47.5526%" y="399.50">&lt;&amp;kernel::model::EntityPtr as pl..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (250 samples, 19.55%)</title><rect x="48.1626%" y="373" width="19.5465%" height="15" fill="rgb(242,164,20)" fg:x="616" fg:w="250"/><text x="48.4126%" y="383.50">plugins_core::looking::model::U..</text></g><g><title>indefinite::indefinite (250 samples, 19.55%)</title><rect x="48.1626%" y="357" width="19.5465%" height="15" fill="rgb(230,169,22)" fg:x="616" fg:w="250"/><text x="48.4126%" y="367.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (250 samples, 19.55%)</title><rect x="48.1626%" y="341" width="19.5465%" height="15" fill="rgb(228,82,26)" fg:x="616" fg:w="250"/><text x="48.4126%" y="351.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (249 samples, 19.47%)</title><rect x="48.2408%" y="325" width="19.4683%" height="15" fill="rgb(244,220,31)" fg:x="617" fg:w="249"/><text x="48.4908%" y="335.50">indefinite::methods::apply_rul..</text></g><g><title>indefinite::rules::other::Other::run (25 samples, 1.95%)</title><rect x="65.7545%" y="309" width="1.9547%" height="15" fill="rgb(214,35,25)" fg:x="841" fg:w="25"/><text x="66.0045%" y="319.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (24 samples, 1.88%)</title><rect x="65.8327%" y="293" width="1.8765%" height="15" fill="rgb(245,162,54)" fg:x="842" fg:w="24"/><text x="66.0827%" y="303.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="67.5528%" y="277" width="0.1564%" height="15" fill="rgb(210,43,24)" fg:x="864" fg:w="2"/><text x="67.8028%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="67.5528%" y="261" width="0.1564%" height="15" fill="rgb(226,145,51)" fg:x="864" fg:w="2"/><text x="67.8028%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="67.5528%" y="245" width="0.1564%" height="15" fill="rgb(237,52,53)" fg:x="864" fg:w="2"/><text x="67.8028%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="67.5528%" y="229" width="0.1564%" height="15" fill="rgb(216,226,7)" fg:x="864" fg:w="2"/><text x="67.8028%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="67.5528%" y="213" width="0.1564%" height="15" fill="rgb(206,223,18)" fg:x="864" fg:w="2"/><text x="67.8028%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="67.6310%" y="197" width="0.0782%" height="15" fill="rgb(221,1,10)" fg:x="865" fg:w="1"/><text x="67.8810%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.7091%" y="309" width="0.0782%" height="15" fill="rgb(221,151,42)" fg:x="866" fg:w="1"/><text x="67.9591%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.7091%" y="293" width="0.0782%" height="15" fill="rgb(205,183,46)" fg:x="866" fg:w="1"/><text x="67.9591%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.7091%" y="277" width="0.0782%" height="15" fill="rgb(239,229,1)" fg:x="866" fg:w="1"/><text x="67.9591%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.7091%" y="261" width="0.0782%" height="15" fill="rgb(236,192,23)" fg:x="866" fg:w="1"/><text x="67.9591%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.7091%" y="245" width="0.0782%" height="15" fill="rgb(215,146,3)" fg:x="866" fg:w="1"/><text x="67.9591%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.7091%" y="229" width="0.0782%" height="15" fill="rgb(235,52,27)" fg:x="866" fg:w="1"/><text x="67.9591%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.7091%" y="213" width="0.0782%" height="15" fill="rgb(236,45,20)" fg:x="866" fg:w="1"/><text x="67.9591%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.7091%" y="197" width="0.0782%" height="15" fill="rgb(235,86,41)" fg:x="866" fg:w="1"/><text x="67.9591%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.7091%" y="181" width="0.0782%" height="15" fill="rgb(235,27,27)" fg:x="866" fg:w="1"/><text x="67.9591%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.7091%" y="165" width="0.0782%" height="15" fill="rgb(232,4,34)" fg:x="866" fg:w="1"/><text x="67.9591%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.7091%" y="149" width="0.0782%" height="15" fill="rgb(215,22,10)" fg:x="866" fg:w="1"/><text x="67.9591%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.7091%" y="133" width="0.0782%" height="15" fill="rgb(230,228,27)" fg:x="866" fg:w="1"/><text x="67.9591%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.7091%" y="117" width="0.0782%" height="15" fill="rgb(216,26,51)" fg:x="866" fg:w="1"/><text x="67.9591%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.7091%" y="101" width="0.0782%" height="15" fill="rgb(225,180,50)" fg:x="866" fg:w="1"/><text x="67.9591%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.7091%" y="85" width="0.0782%" height="15" fill="rgb(236,211,2)" fg:x="866" fg:w="1"/><text x="67.9591%" y="95.50"></text></g><g><title>plugins_core::tools::contained_by (2 samples, 0.16%)</title><rect x="67.7091%" y="341" width="0.1564%" height="15" fill="rgb(250,51,20)" fg:x="866" fg:w="2"/><text x="67.9591%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="67.7091%" y="325" width="0.1564%" height="15" fill="rgb(232,70,37)" fg:x="866" fg:w="2"/><text x="67.9591%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.7873%" y="309" width="0.0782%" height="15" fill="rgb(226,183,39)" fg:x="867" fg:w="1"/><text x="68.0373%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7873%" y="293" width="0.0782%" height="15" fill="rgb(232,228,21)" fg:x="867" fg:w="1"/><text x="68.0373%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="67.7873%" y="277" width="0.0782%" height="15" fill="rgb(251,118,32)" fg:x="867" fg:w="1"/><text x="68.0373%" y="287.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="67.7873%" y="261" width="0.0782%" height="15" fill="rgb(235,172,38)" fg:x="867" fg:w="1"/><text x="68.0373%" y="271.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="67.7873%" y="245" width="0.0782%" height="15" fill="rgb(235,63,18)" fg:x="867" fg:w="1"/><text x="68.0373%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.7873%" y="229" width="0.0782%" height="15" fill="rgb(225,4,7)" fg:x="867" fg:w="1"/><text x="68.0373%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7873%" y="213" width="0.0782%" height="15" fill="rgb(231,61,1)" fg:x="867" fg:w="1"/><text x="68.0373%" y="223.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (3 samples, 0.23%)</title><rect x="67.7091%" y="357" width="0.2346%" height="15" fill="rgb(241,155,22)" fg:x="866" fg:w="3"/><text x="67.9591%" y="367.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="67.8655%" y="341" width="0.0782%" height="15" fill="rgb(209,100,26)" fg:x="868" fg:w="1"/><text x="68.1155%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="67.8655%" y="325" width="0.0782%" height="15" fill="rgb(248,181,15)" fg:x="868" fg:w="1"/><text x="68.1155%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.8655%" y="309" width="0.0782%" height="15" fill="rgb(214,94,31)" fg:x="868" fg:w="1"/><text x="68.1155%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8655%" y="293" width="0.0782%" height="15" fill="rgb(207,16,42)" fg:x="868" fg:w="1"/><text x="68.1155%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="67.8655%" y="277" width="0.0782%" height="15" fill="rgb(208,127,13)" fg:x="868" fg:w="1"/><text x="68.1155%" y="287.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="67.8655%" y="261" width="0.0782%" height="15" fill="rgb(220,211,18)" fg:x="868" fg:w="1"/><text x="68.1155%" y="271.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="67.8655%" y="245" width="0.0782%" height="15" fill="rgb(221,55,38)" fg:x="868" fg:w="1"/><text x="68.1155%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::name (2 samples, 0.16%)</title><rect x="67.9437%" y="325" width="0.1564%" height="15" fill="rgb(252,219,45)" fg:x="869" fg:w="2"/><text x="68.1937%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="67.9437%" y="309" width="0.1564%" height="15" fill="rgb(248,53,35)" fg:x="869" fg:w="2"/><text x="68.1937%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.0219%" y="293" width="0.0782%" height="15" fill="rgb(210,87,2)" fg:x="870" fg:w="1"/><text x="68.2719%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0219%" y="277" width="0.0782%" height="15" fill="rgb(239,133,9)" fg:x="870" fg:w="1"/><text x="68.2719%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.0219%" y="261" width="0.0782%" height="15" fill="rgb(214,114,5)" fg:x="870" fg:w="1"/><text x="68.2719%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0219%" y="245" width="0.0782%" height="15" fill="rgb(206,124,24)" fg:x="870" fg:w="1"/><text x="68.2719%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.0219%" y="229" width="0.0782%" height="15" fill="rgb(212,57,33)" fg:x="870" fg:w="1"/><text x="68.2719%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0219%" y="213" width="0.0782%" height="15" fill="rgb(246,21,20)" fg:x="870" fg:w="1"/><text x="68.2719%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (7 samples, 0.55%)</title><rect x="67.7091%" y="389" width="0.5473%" height="15" fill="rgb(253,210,39)" fg:x="866" fg:w="7"/><text x="67.9591%" y="399.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (7 samples, 0.55%)</title><rect x="67.7091%" y="373" width="0.5473%" height="15" fill="rgb(209,187,24)" fg:x="866" fg:w="7"/><text x="67.9591%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (4 samples, 0.31%)</title><rect x="67.9437%" y="357" width="0.3127%" height="15" fill="rgb(246,136,17)" fg:x="869" fg:w="4"/><text x="68.1937%" y="367.50"></text></g><g><title>plugins_core::finding::matches_description (4 samples, 0.31%)</title><rect x="67.9437%" y="341" width="0.3127%" height="15" fill="rgb(211,0,30)" fg:x="869" fg:w="4"/><text x="68.1937%" y="351.50"></text></g><g><title>plugins_core::finding::matches_string (2 samples, 0.16%)</title><rect x="68.1001%" y="325" width="0.1564%" height="15" fill="rgb(216,199,7)" fg:x="871" fg:w="2"/><text x="68.3501%" y="335.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="68.1783%" y="309" width="0.0782%" height="15" fill="rgb(207,210,19)" fg:x="872" fg:w="1"/><text x="68.4283%" y="319.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="68.1783%" y="293" width="0.0782%" height="15" fill="rgb(237,187,39)" fg:x="872" fg:w="1"/><text x="68.4283%" y="303.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="68.1783%" y="277" width="0.0782%" height="15" fill="rgb(243,194,42)" fg:x="872" fg:w="1"/><text x="68.4283%" y="287.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="68.1783%" y="261" width="0.0782%" height="15" fill="rgb(225,194,19)" fg:x="872" fg:w="1"/><text x="68.4283%" y="271.50"></text></g><g><title>&lt;rune::runtime::shared::Shared&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.2565%" y="261" width="0.0782%" height="15" fill="rgb(224,192,14)" fg:x="873" fg:w="1"/><text x="68.5065%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="68.3346%" y="261" width="0.0782%" height="15" fill="rgb(252,21,18)" fg:x="874" fg:w="1"/><text x="68.5846%" y="271.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="68.3346%" y="245" width="0.0782%" height="15" fill="rgb(229,69,19)" fg:x="874" fg:w="1"/><text x="68.5846%" y="255.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="68.3346%" y="229" width="0.0782%" height="15" fill="rgb(251,31,53)" fg:x="874" fg:w="1"/><text x="68.5846%" y="239.50"></text></g><g><title>plugins_rune::runner::SharedRunners::before (1 samples, 0.08%)</title><rect x="68.4128%" y="261" width="0.0782%" height="15" fill="rgb(218,39,50)" fg:x="875" fg:w="1"/><text x="68.6628%" y="271.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="68.4910%" y="245" width="0.0782%" height="15" fill="rgb(231,50,17)" fg:x="876" fg:w="1"/><text x="68.7410%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.4910%" y="229" width="0.0782%" height="15" fill="rgb(223,217,31)" fg:x="876" fg:w="1"/><text x="68.7410%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (5 samples, 0.39%)</title><rect x="68.2565%" y="357" width="0.3909%" height="15" fill="rgb(225,91,12)" fg:x="873" fg:w="5"/><text x="68.5065%" y="367.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (5 samples, 0.39%)</title><rect x="68.2565%" y="341" width="0.3909%" height="15" fill="rgb(242,58,43)" fg:x="873" fg:w="5"/><text x="68.5065%" y="351.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (5 samples, 0.39%)</title><rect x="68.2565%" y="325" width="0.3909%" height="15" fill="rgb(242,32,21)" fg:x="873" fg:w="5"/><text x="68.5065%" y="335.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (5 samples, 0.39%)</title><rect x="68.2565%" y="309" width="0.3909%" height="15" fill="rgb(211,127,1)" fg:x="873" fg:w="5"/><text x="68.5065%" y="319.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (5 samples, 0.39%)</title><rect x="68.2565%" y="293" width="0.3909%" height="15" fill="rgb(231,93,13)" fg:x="873" fg:w="5"/><text x="68.5065%" y="303.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (5 samples, 0.39%)</title><rect x="68.2565%" y="277" width="0.3909%" height="15" fill="rgb(218,83,4)" fg:x="873" fg:w="5"/><text x="68.5065%" y="287.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (2 samples, 0.16%)</title><rect x="68.4910%" y="261" width="0.1564%" height="15" fill="rgb(230,218,10)" fg:x="876" fg:w="2"/><text x="68.7410%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.5692%" y="245" width="0.0782%" height="15" fill="rgb(235,127,18)" fg:x="877" fg:w="1"/><text x="68.8192%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="68.5692%" y="229" width="0.0782%" height="15" fill="rgb(213,137,46)" fg:x="877" fg:w="1"/><text x="68.8192%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.5692%" y="213" width="0.0782%" height="15" fill="rgb(235,179,24)" fg:x="877" fg:w="1"/><text x="68.8192%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.5692%" y="197" width="0.0782%" height="15" fill="rgb(247,58,49)" fg:x="877" fg:w="1"/><text x="68.8192%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.5692%" y="181" width="0.0782%" height="15" fill="rgb(242,222,5)" fg:x="877" fg:w="1"/><text x="68.8192%" y="191.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (6 samples, 0.47%)</title><rect x="68.2565%" y="373" width="0.4691%" height="15" fill="rgb(230,16,48)" fg:x="873" fg:w="6"/><text x="68.5065%" y="383.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="68.6474%" y="357" width="0.0782%" height="15" fill="rgb(241,192,16)" fg:x="878" fg:w="1"/><text x="68.8974%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (3 samples, 0.23%)</title><rect x="68.7256%" y="357" width="0.2346%" height="15" fill="rgb(209,25,37)" fg:x="879" fg:w="3"/><text x="68.9756%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (3 samples, 0.23%)</title><rect x="68.7256%" y="341" width="0.2346%" height="15" fill="rgb(229,215,13)" fg:x="879" fg:w="3"/><text x="68.9756%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.23%)</title><rect x="68.7256%" y="325" width="0.2346%" height="15" fill="rgb(213,199,8)" fg:x="879" fg:w="3"/><text x="68.9756%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.23%)</title><rect x="68.7256%" y="309" width="0.2346%" height="15" fill="rgb(226,151,19)" fg:x="879" fg:w="3"/><text x="68.9756%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="68.8038%" y="293" width="0.1564%" height="15" fill="rgb(254,183,12)" fg:x="880" fg:w="2"/><text x="69.0538%" y="303.50"></text></g><g><title>plugins_core::library::actions::reply_ok (10 samples, 0.78%)</title><rect x="68.2565%" y="389" width="0.7819%" height="15" fill="rgb(245,8,3)" fg:x="873" fg:w="10"/><text x="68.5065%" y="399.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.31%)</title><rect x="68.7256%" y="373" width="0.3127%" height="15" fill="rgb(229,159,35)" fg:x="879" fg:w="4"/><text x="68.9756%" y="383.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="68.9601%" y="357" width="0.0782%" height="15" fill="rgb(209,145,1)" fg:x="882" fg:w="1"/><text x="69.2101%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.9601%" y="341" width="0.0782%" height="15" fill="rgb(228,183,16)" fg:x="882" fg:w="1"/><text x="69.2101%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.9601%" y="325" width="0.0782%" height="15" fill="rgb(222,68,0)" fg:x="882" fg:w="1"/><text x="69.2101%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.1947%" y="325" width="0.0782%" height="15" fill="rgb(209,130,50)" fg:x="885" fg:w="1"/><text x="69.4447%" y="335.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.23%)</title><rect x="69.1165%" y="373" width="0.2346%" height="15" fill="rgb(228,176,44)" fg:x="884" fg:w="3"/><text x="69.3665%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.1947%" y="357" width="0.1564%" height="15" fill="rgb(221,164,2)" fg:x="885" fg:w="2"/><text x="69.4447%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.1947%" y="341" width="0.1564%" height="15" fill="rgb(249,199,49)" fg:x="885" fg:w="2"/><text x="69.4447%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="69.2729%" y="325" width="0.0782%" height="15" fill="rgb(228,205,53)" fg:x="886" fg:w="1"/><text x="69.5229%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.2729%" y="309" width="0.0782%" height="15" fill="rgb(235,77,20)" fg:x="886" fg:w="1"/><text x="69.5229%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="69.2729%" y="293" width="0.0782%" height="15" fill="rgb(227,147,34)" fg:x="886" fg:w="1"/><text x="69.5229%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2729%" y="277" width="0.0782%" height="15" fill="rgb(226,203,52)" fg:x="886" fg:w="1"/><text x="69.5229%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2729%" y="261" width="0.0782%" height="15" fill="rgb(226,186,23)" fg:x="886" fg:w="1"/><text x="69.5229%" y="271.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="69.3511%" y="357" width="0.0782%" height="15" fill="rgb(236,13,30)" fg:x="887" fg:w="1"/><text x="69.6011%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3511%" y="341" width="0.0782%" height="15" fill="rgb(228,121,22)" fg:x="887" fg:w="1"/><text x="69.6011%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.4292%" y="325" width="0.0782%" height="15" fill="rgb(248,222,26)" fg:x="888" fg:w="1"/><text x="69.6792%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="69.4292%" y="309" width="0.0782%" height="15" fill="rgb(251,72,25)" fg:x="888" fg:w="1"/><text x="69.6792%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.4292%" y="293" width="0.0782%" height="15" fill="rgb(223,114,24)" fg:x="888" fg:w="1"/><text x="69.6792%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.4292%" y="277" width="0.0782%" height="15" fill="rgb(232,190,43)" fg:x="888" fg:w="1"/><text x="69.6792%" y="287.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.31%)</title><rect x="69.3511%" y="373" width="0.3127%" height="15" fill="rgb(208,90,0)" fg:x="887" fg:w="4"/><text x="69.6011%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.23%)</title><rect x="69.4292%" y="357" width="0.2346%" height="15" fill="rgb(234,149,31)" fg:x="888" fg:w="3"/><text x="69.6792%" y="367.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.23%)</title><rect x="69.4292%" y="341" width="0.2346%" height="15" fill="rgb(235,188,36)" fg:x="888" fg:w="3"/><text x="69.6792%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="69.5074%" y="325" width="0.1564%" height="15" fill="rgb(219,59,51)" fg:x="889" fg:w="2"/><text x="69.7574%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="69.5856%" y="309" width="0.0782%" height="15" fill="rgb(236,101,40)" fg:x="890" fg:w="1"/><text x="69.8356%" y="319.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="69.5856%" y="293" width="0.0782%" height="15" fill="rgb(235,33,7)" fg:x="890" fg:w="1"/><text x="69.8356%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.6638%" y="325" width="0.0782%" height="15" fill="rgb(213,169,26)" fg:x="891" fg:w="1"/><text x="69.9138%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.6638%" y="309" width="0.0782%" height="15" fill="rgb(218,99,34)" fg:x="891" fg:w="1"/><text x="69.9138%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.6638%" y="293" width="0.0782%" height="15" fill="rgb(210,57,24)" fg:x="891" fg:w="1"/><text x="69.9138%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.6638%" y="277" width="0.0782%" height="15" fill="rgb(231,181,54)" fg:x="891" fg:w="1"/><text x="69.9138%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.6638%" y="261" width="0.0782%" height="15" fill="rgb(251,188,48)" fg:x="891" fg:w="1"/><text x="69.9138%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.6638%" y="245" width="0.0782%" height="15" fill="rgb(243,12,45)" fg:x="891" fg:w="1"/><text x="69.9138%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="69.6638%" y="229" width="0.0782%" height="15" fill="rgb(250,197,9)" fg:x="891" fg:w="1"/><text x="69.9138%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.6638%" y="213" width="0.0782%" height="15" fill="rgb(235,149,35)" fg:x="891" fg:w="1"/><text x="69.9138%" y="223.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="69.6638%" y="357" width="0.1564%" height="15" fill="rgb(219,27,19)" fg:x="891" fg:w="2"/><text x="69.9138%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.6638%" y="341" width="0.1564%" height="15" fill="rgb(244,78,31)" fg:x="891" fg:w="2"/><text x="69.9138%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7420%" y="325" width="0.0782%" height="15" fill="rgb(241,13,4)" fg:x="892" fg:w="1"/><text x="69.9920%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.8202%" y="357" width="0.0782%" height="15" fill="rgb(212,194,26)" fg:x="893" fg:w="1"/><text x="70.0702%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="69.8984%" y="341" width="0.0782%" height="15" fill="rgb(236,80,11)" fg:x="894" fg:w="1"/><text x="70.1484%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="69.8984%" y="325" width="0.0782%" height="15" fill="rgb(206,1,24)" fg:x="894" fg:w="1"/><text x="70.1484%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="69.8984%" y="309" width="0.0782%" height="15" fill="rgb(238,215,50)" fg:x="894" fg:w="1"/><text x="70.1484%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.8984%" y="293" width="0.0782%" height="15" fill="rgb(254,126,32)" fg:x="894" fg:w="1"/><text x="70.1484%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.8984%" y="277" width="0.0782%" height="15" fill="rgb(206,111,53)" fg:x="894" fg:w="1"/><text x="70.1484%" y="287.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (601 samples, 46.99%)</title><rect x="23.0649%" y="533" width="46.9898%" height="15" fill="rgb(218,72,44)" fg:x="295" fg:w="601"/><text x="23.3149%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (600 samples, 46.91%)</title><rect x="23.1431%" y="517" width="46.9116%" height="15" fill="rgb(238,25,3)" fg:x="296" fg:w="600"/><text x="23.3931%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (600 samples, 46.91%)</title><rect x="23.1431%" y="501" width="46.9116%" height="15" fill="rgb(250,191,7)" fg:x="296" fg:w="600"/><text x="23.3931%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (600 samples, 46.91%)</title><rect x="23.1431%" y="485" width="46.9116%" height="15" fill="rgb(238,56,30)" fg:x="296" fg:w="600"/><text x="23.3931%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (600 samples, 46.91%)</title><rect x="23.1431%" y="469" width="46.9116%" height="15" fill="rgb(210,27,45)" fg:x="296" fg:w="600"/><text x="23.3931%" y="479.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (600 samples, 46.91%)</title><rect x="23.1431%" y="453" width="46.9116%" height="15" fill="rgb(207,10,50)" fg:x="296" fg:w="600"/><text x="23.3931%" y="463.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (600 samples, 46.91%)</title><rect x="23.1431%" y="437" width="46.9116%" height="15" fill="rgb(249,30,23)" fg:x="296" fg:w="600"/><text x="23.3931%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (599 samples, 46.83%)</title><rect x="23.2213%" y="421" width="46.8335%" height="15" fill="rgb(250,80,12)" fg:x="297" fg:w="599"/><text x="23.4713%" y="431.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (291 samples, 22.75%)</title><rect x="47.3026%" y="405" width="22.7522%" height="15" fill="rgb(210,221,37)" fg:x="605" fg:w="291"/><text x="47.5526%" y="415.50">&lt;plugins_core::carrying::actions::Ho..</text></g><g><title>plugins_core::location::model::change_location (13 samples, 1.02%)</title><rect x="69.0383%" y="389" width="1.0164%" height="15" fill="rgb(205,96,24)" fg:x="883" fg:w="13"/><text x="69.2883%" y="399.50"></text></g><g><title>plugins_core::location::model::Location::set (5 samples, 0.39%)</title><rect x="69.6638%" y="373" width="0.3909%" height="15" fill="rgb(247,104,22)" fg:x="891" fg:w="5"/><text x="69.9138%" y="383.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="69.8984%" y="357" width="0.1564%" height="15" fill="rgb(222,61,53)" fg:x="894" fg:w="2"/><text x="70.1484%" y="367.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="69.9765%" y="341" width="0.0782%" height="15" fill="rgb(241,11,53)" fg:x="895" fg:w="1"/><text x="70.2265%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.9765%" y="325" width="0.0782%" height="15" fill="rgb(230,111,47)" fg:x="895" fg:w="1"/><text x="70.2265%" y="335.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="69.9765%" y="309" width="0.0782%" height="15" fill="rgb(218,187,29)" fg:x="895" fg:w="1"/><text x="70.2265%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.9765%" y="293" width="0.0782%" height="15" fill="rgb(210,121,46)" fg:x="895" fg:w="1"/><text x="70.2265%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9765%" y="277" width="0.0782%" height="15" fill="rgb(250,43,19)" fg:x="895" fg:w="1"/><text x="70.2265%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9765%" y="261" width="0.0782%" height="15" fill="rgb(238,61,12)" fg:x="895" fg:w="1"/><text x="70.2265%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="70.1329%" y="517" width="0.0782%" height="15" fill="rgb(251,198,9)" fg:x="897" fg:w="1"/><text x="70.3829%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1329%" y="501" width="0.0782%" height="15" fill="rgb(214,192,38)" fg:x="897" fg:w="1"/><text x="70.3829%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1329%" y="485" width="0.0782%" height="15" fill="rgb(214,73,19)" fg:x="897" fg:w="1"/><text x="70.3829%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.1329%" y="469" width="0.0782%" height="15" fill="rgb(249,222,49)" fg:x="897" fg:w="1"/><text x="70.3829%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.1329%" y="453" width="0.0782%" height="15" fill="rgb(231,181,54)" fg:x="897" fg:w="1"/><text x="70.3829%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.1329%" y="437" width="0.0782%" height="15" fill="rgb(240,1,13)" fg:x="897" fg:w="1"/><text x="70.3829%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1329%" y="421" width="0.0782%" height="15" fill="rgb(225,21,16)" fg:x="897" fg:w="1"/><text x="70.3829%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1329%" y="405" width="0.0782%" height="15" fill="rgb(246,176,50)" fg:x="897" fg:w="1"/><text x="70.3829%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.1329%" y="389" width="0.0782%" height="15" fill="rgb(208,96,50)" fg:x="897" fg:w="1"/><text x="70.3829%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.1329%" y="373" width="0.0782%" height="15" fill="rgb(240,219,19)" fg:x="897" fg:w="1"/><text x="70.3829%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.1329%" y="357" width="0.0782%" height="15" fill="rgb(234,73,5)" fg:x="897" fg:w="1"/><text x="70.3829%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.1329%" y="341" width="0.0782%" height="15" fill="rgb(225,52,53)" fg:x="897" fg:w="1"/><text x="70.3829%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1329%" y="325" width="0.0782%" height="15" fill="rgb(250,12,14)" fg:x="897" fg:w="1"/><text x="70.3829%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3675%" y="501" width="0.0782%" height="15" fill="rgb(242,185,54)" fg:x="900" fg:w="1"/><text x="70.6175%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3675%" y="485" width="0.0782%" height="15" fill="rgb(211,206,31)" fg:x="900" fg:w="1"/><text x="70.6175%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="70.4457%" y="501" width="0.1564%" height="15" fill="rgb(252,10,33)" fg:x="901" fg:w="2"/><text x="70.6957%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.5238%" y="485" width="0.0782%" height="15" fill="rgb(216,26,7)" fg:x="902" fg:w="1"/><text x="70.7738%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="70.5238%" y="469" width="0.0782%" height="15" fill="rgb(228,112,40)" fg:x="902" fg:w="1"/><text x="70.7738%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.6020%" y="501" width="0.0782%" height="15" fill="rgb(212,21,16)" fg:x="903" fg:w="1"/><text x="70.8520%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="70.6802%" y="485" width="0.0782%" height="15" fill="rgb(249,3,29)" fg:x="904" fg:w="1"/><text x="70.9302%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.6802%" y="469" width="0.0782%" height="15" fill="rgb(221,42,51)" fg:x="904" fg:w="1"/><text x="70.9302%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6802%" y="453" width="0.0782%" height="15" fill="rgb(225,90,21)" fg:x="904" fg:w="1"/><text x="70.9302%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.6802%" y="437" width="0.0782%" height="15" fill="rgb(242,131,5)" fg:x="904" fg:w="1"/><text x="70.9302%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8366%" y="421" width="0.0782%" height="15" fill="rgb(220,187,28)" fg:x="906" fg:w="1"/><text x="71.0866%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8366%" y="405" width="0.0782%" height="15" fill="rgb(210,75,48)" fg:x="906" fg:w="1"/><text x="71.0866%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8366%" y="389" width="0.0782%" height="15" fill="rgb(211,91,40)" fg:x="906" fg:w="1"/><text x="71.0866%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8366%" y="373" width="0.0782%" height="15" fill="rgb(205,43,18)" fg:x="906" fg:w="1"/><text x="71.0866%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8366%" y="357" width="0.0782%" height="15" fill="rgb(207,123,11)" fg:x="906" fg:w="1"/><text x="71.0866%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8366%" y="341" width="0.0782%" height="15" fill="rgb(235,89,39)" fg:x="906" fg:w="1"/><text x="71.0866%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.8366%" y="325" width="0.0782%" height="15" fill="rgb(245,217,27)" fg:x="906" fg:w="1"/><text x="71.0866%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.8366%" y="309" width="0.0782%" height="15" fill="rgb(216,55,17)" fg:x="906" fg:w="1"/><text x="71.0866%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.8366%" y="293" width="0.0782%" height="15" fill="rgb(252,116,44)" fg:x="906" fg:w="1"/><text x="71.0866%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.8366%" y="277" width="0.0782%" height="15" fill="rgb(229,153,4)" fg:x="906" fg:w="1"/><text x="71.0866%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.8366%" y="261" width="0.0782%" height="15" fill="rgb(222,24,35)" fg:x="906" fg:w="1"/><text x="71.0866%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.8366%" y="245" width="0.0782%" height="15" fill="rgb(214,26,20)" fg:x="906" fg:w="1"/><text x="71.0866%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.8366%" y="229" width="0.0782%" height="15" fill="rgb(215,14,45)" fg:x="906" fg:w="1"/><text x="71.0866%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.8366%" y="213" width="0.0782%" height="15" fill="rgb(217,212,50)" fg:x="906" fg:w="1"/><text x="71.0866%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.8366%" y="197" width="0.0782%" height="15" fill="rgb(230,172,52)" fg:x="906" fg:w="1"/><text x="71.0866%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8366%" y="181" width="0.0782%" height="15" fill="rgb(210,48,36)" fg:x="906" fg:w="1"/><text x="71.0866%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.9148%" y="421" width="0.0782%" height="15" fill="rgb(216,213,32)" fg:x="907" fg:w="1"/><text x="71.1648%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.9148%" y="405" width="0.0782%" height="15" fill="rgb(237,202,41)" fg:x="907" fg:w="1"/><text x="71.1648%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.9148%" y="389" width="0.0782%" height="15" fill="rgb(209,14,29)" fg:x="907" fg:w="1"/><text x="71.1648%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.9148%" y="373" width="0.0782%" height="15" fill="rgb(219,29,3)" fg:x="907" fg:w="1"/><text x="71.1648%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.9148%" y="357" width="0.0782%" height="15" fill="rgb(229,13,49)" fg:x="907" fg:w="1"/><text x="71.1648%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.9148%" y="341" width="0.0782%" height="15" fill="rgb(210,206,2)" fg:x="907" fg:w="1"/><text x="71.1648%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.9148%" y="325" width="0.0782%" height="15" fill="rgb(216,154,46)" fg:x="907" fg:w="1"/><text x="71.1648%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.9148%" y="309" width="0.0782%" height="15" fill="rgb(211,170,52)" fg:x="907" fg:w="1"/><text x="71.1648%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.9148%" y="293" width="0.0782%" height="15" fill="rgb(233,109,47)" fg:x="907" fg:w="1"/><text x="71.1648%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.9148%" y="277" width="0.0782%" height="15" fill="rgb(208,212,30)" fg:x="907" fg:w="1"/><text x="71.1648%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.9148%" y="261" width="0.0782%" height="15" fill="rgb(215,190,19)" fg:x="907" fg:w="1"/><text x="71.1648%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.9148%" y="245" width="0.0782%" height="15" fill="rgb(207,164,53)" fg:x="907" fg:w="1"/><text x="71.1648%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.9148%" y="229" width="0.0782%" height="15" fill="rgb(213,87,49)" fg:x="907" fg:w="1"/><text x="71.1648%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.9148%" y="213" width="0.0782%" height="15" fill="rgb(241,216,24)" fg:x="907" fg:w="1"/><text x="71.1648%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.9148%" y="197" width="0.0782%" height="15" fill="rgb(241,123,45)" fg:x="907" fg:w="1"/><text x="71.1648%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9148%" y="181" width="0.0782%" height="15" fill="rgb(220,36,15)" fg:x="907" fg:w="1"/><text x="71.1648%" y="191.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="70.9930%" y="421" width="0.0782%" height="15" fill="rgb(215,202,9)" fg:x="908" fg:w="1"/><text x="71.2430%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.9930%" y="405" width="0.0782%" height="15" fill="rgb(252,71,26)" fg:x="908" fg:w="1"/><text x="71.2430%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.9930%" y="389" width="0.0782%" height="15" fill="rgb(243,195,19)" fg:x="908" fg:w="1"/><text x="71.2430%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.9930%" y="373" width="0.0782%" height="15" fill="rgb(207,167,27)" fg:x="908" fg:w="1"/><text x="71.2430%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.9930%" y="357" width="0.0782%" height="15" fill="rgb(250,146,54)" fg:x="908" fg:w="1"/><text x="71.2430%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.9930%" y="341" width="0.0782%" height="15" fill="rgb(245,79,9)" fg:x="908" fg:w="1"/><text x="71.2430%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.9930%" y="325" width="0.0782%" height="15" fill="rgb(234,197,22)" fg:x="908" fg:w="1"/><text x="71.2430%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.9930%" y="309" width="0.0782%" height="15" fill="rgb(221,52,48)" fg:x="908" fg:w="1"/><text x="71.2430%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.9930%" y="293" width="0.0782%" height="15" fill="rgb(235,80,0)" fg:x="908" fg:w="1"/><text x="71.2430%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.9930%" y="277" width="0.0782%" height="15" fill="rgb(221,117,53)" fg:x="908" fg:w="1"/><text x="71.2430%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.9930%" y="261" width="0.0782%" height="15" fill="rgb(239,48,47)" fg:x="908" fg:w="1"/><text x="71.2430%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.9930%" y="245" width="0.0782%" height="15" fill="rgb(227,191,52)" fg:x="908" fg:w="1"/><text x="71.2430%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="70.9930%" y="229" width="0.0782%" height="15" fill="rgb(241,118,1)" fg:x="908" fg:w="1"/><text x="71.2430%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="70.9930%" y="213" width="0.0782%" height="15" fill="rgb(240,85,3)" fg:x="908" fg:w="1"/><text x="71.2430%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.0711%" y="325" width="0.0782%" height="15" fill="rgb(237,68,37)" fg:x="909" fg:w="1"/><text x="71.3211%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0711%" y="309" width="0.0782%" height="15" fill="rgb(212,9,20)" fg:x="909" fg:w="1"/><text x="71.3211%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.0711%" y="293" width="0.0782%" height="15" fill="rgb(218,84,17)" fg:x="909" fg:w="1"/><text x="71.3211%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0711%" y="277" width="0.0782%" height="15" fill="rgb(235,147,20)" fg:x="909" fg:w="1"/><text x="71.3211%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.0711%" y="261" width="0.0782%" height="15" fill="rgb(208,224,1)" fg:x="909" fg:w="1"/><text x="71.3211%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0711%" y="245" width="0.0782%" height="15" fill="rgb(232,97,50)" fg:x="909" fg:w="1"/><text x="71.3211%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="71.0711%" y="229" width="0.0782%" height="15" fill="rgb(238,15,45)" fg:x="909" fg:w="1"/><text x="71.3211%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="71.0711%" y="213" width="0.0782%" height="15" fill="rgb(231,46,18)" fg:x="909" fg:w="1"/><text x="71.3211%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="71.0711%" y="373" width="0.1564%" height="15" fill="rgb(254,169,10)" fg:x="909" fg:w="2"/><text x="71.3211%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.0711%" y="357" width="0.1564%" height="15" fill="rgb(243,169,30)" fg:x="909" fg:w="2"/><text x="71.3211%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.0711%" y="341" width="0.1564%" height="15" fill="rgb(236,90,49)" fg:x="909" fg:w="2"/><text x="71.3211%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.1493%" y="325" width="0.0782%" height="15" fill="rgb(218,80,15)" fg:x="910" fg:w="1"/><text x="71.3993%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.1493%" y="309" width="0.0782%" height="15" fill="rgb(222,115,37)" fg:x="910" fg:w="1"/><text x="71.3993%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.1493%" y="293" width="0.0782%" height="15" fill="rgb(227,0,6)" fg:x="910" fg:w="1"/><text x="71.3993%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.1493%" y="277" width="0.0782%" height="15" fill="rgb(217,189,13)" fg:x="910" fg:w="1"/><text x="71.3993%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.1493%" y="261" width="0.0782%" height="15" fill="rgb(220,74,19)" fg:x="910" fg:w="1"/><text x="71.3993%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.23%)</title><rect x="71.0711%" y="421" width="0.2346%" height="15" fill="rgb(224,81,18)" fg:x="909" fg:w="3"/><text x="71.3211%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.23%)</title><rect x="71.0711%" y="405" width="0.2346%" height="15" fill="rgb(245,178,48)" fg:x="909" fg:w="3"/><text x="71.3211%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="71.0711%" y="389" width="0.2346%" height="15" fill="rgb(207,78,24)" fg:x="909" fg:w="3"/><text x="71.3211%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.2275%" y="373" width="0.0782%" height="15" fill="rgb(223,222,30)" fg:x="911" fg:w="1"/><text x="71.4775%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.2275%" y="357" width="0.0782%" height="15" fill="rgb(234,101,12)" fg:x="911" fg:w="1"/><text x="71.4775%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.3057%" y="325" width="0.0782%" height="15" fill="rgb(209,80,46)" fg:x="912" fg:w="1"/><text x="71.5557%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.3057%" y="309" width="0.0782%" height="15" fill="rgb(228,79,14)" fg:x="912" fg:w="1"/><text x="71.5557%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.3057%" y="293" width="0.0782%" height="15" fill="rgb(220,219,34)" fg:x="912" fg:w="1"/><text x="71.5557%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.3057%" y="277" width="0.0782%" height="15" fill="rgb(207,80,21)" fg:x="912" fg:w="1"/><text x="71.5557%" y="287.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (9 samples, 0.70%)</title><rect x="70.7584%" y="485" width="0.7037%" height="15" fill="rgb(210,154,44)" fg:x="905" fg:w="9"/><text x="71.0084%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (9 samples, 0.70%)</title><rect x="70.7584%" y="469" width="0.7037%" height="15" fill="rgb(246,44,39)" fg:x="905" fg:w="9"/><text x="71.0084%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.70%)</title><rect x="70.7584%" y="453" width="0.7037%" height="15" fill="rgb(252,175,13)" fg:x="905" fg:w="9"/><text x="71.0084%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.70%)</title><rect x="70.7584%" y="437" width="0.7037%" height="15" fill="rgb(211,50,39)" fg:x="905" fg:w="9"/><text x="71.0084%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="71.3057%" y="421" width="0.1564%" height="15" fill="rgb(231,204,27)" fg:x="912" fg:w="2"/><text x="71.5557%" y="431.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="71.3057%" y="405" width="0.1564%" height="15" fill="rgb(253,26,34)" fg:x="912" fg:w="2"/><text x="71.5557%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.3057%" y="389" width="0.1564%" height="15" fill="rgb(207,139,38)" fg:x="912" fg:w="2"/><text x="71.5557%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.3057%" y="373" width="0.1564%" height="15" fill="rgb(248,54,27)" fg:x="912" fg:w="2"/><text x="71.5557%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.3057%" y="357" width="0.1564%" height="15" fill="rgb(234,25,33)" fg:x="912" fg:w="2"/><text x="71.5557%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.3057%" y="341" width="0.1564%" height="15" fill="rgb(249,107,47)" fg:x="912" fg:w="2"/><text x="71.5557%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.3839%" y="325" width="0.0782%" height="15" fill="rgb(230,190,31)" fg:x="913" fg:w="1"/><text x="71.6339%" y="335.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="71.3839%" y="309" width="0.0782%" height="15" fill="rgb(238,173,45)" fg:x="913" fg:w="1"/><text x="71.6339%" y="319.50"></text></g><g><title>plugins_core::tools::contained_by (11 samples, 0.86%)</title><rect x="70.6802%" y="501" width="0.8600%" height="15" fill="rgb(222,16,50)" fg:x="904" fg:w="11"/><text x="70.9302%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.4621%" y="485" width="0.0782%" height="15" fill="rgb(251,204,47)" fg:x="914" fg:w="1"/><text x="71.7121%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6966%" y="453" width="0.0782%" height="15" fill="rgb(225,12,3)" fg:x="917" fg:w="1"/><text x="71.9466%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6966%" y="437" width="0.0782%" height="15" fill="rgb(214,208,22)" fg:x="917" fg:w="1"/><text x="71.9466%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.8530%" y="437" width="0.1564%" height="15" fill="rgb(240,57,32)" fg:x="919" fg:w="2"/><text x="72.1030%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.8530%" y="421" width="0.1564%" height="15" fill="rgb(243,113,48)" fg:x="919" fg:w="2"/><text x="72.1030%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9312%" y="405" width="0.0782%" height="15" fill="rgb(225,135,30)" fg:x="920" fg:w="1"/><text x="72.1812%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.9312%" y="389" width="0.0782%" height="15" fill="rgb(222,3,53)" fg:x="920" fg:w="1"/><text x="72.1812%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.9312%" y="373" width="0.0782%" height="15" fill="rgb(243,142,2)" fg:x="920" fg:w="1"/><text x="72.1812%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.9312%" y="357" width="0.0782%" height="15" fill="rgb(233,67,14)" fg:x="920" fg:w="1"/><text x="72.1812%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9312%" y="341" width="0.0782%" height="15" fill="rgb(245,125,36)" fg:x="920" fg:w="1"/><text x="72.1812%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9312%" y="325" width="0.0782%" height="15" fill="rgb(225,199,6)" fg:x="920" fg:w="1"/><text x="72.1812%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.9312%" y="309" width="0.0782%" height="15" fill="rgb(244,71,6)" fg:x="920" fg:w="1"/><text x="72.1812%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.9312%" y="293" width="0.0782%" height="15" fill="rgb(225,62,9)" fg:x="920" fg:w="1"/><text x="72.1812%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.9312%" y="277" width="0.0782%" height="15" fill="rgb(246,139,53)" fg:x="920" fg:w="1"/><text x="72.1812%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.9312%" y="261" width="0.0782%" height="15" fill="rgb(243,161,46)" fg:x="920" fg:w="1"/><text x="72.1812%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.9312%" y="245" width="0.0782%" height="15" fill="rgb(236,153,7)" fg:x="920" fg:w="1"/><text x="72.1812%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.39%)</title><rect x="71.6966%" y="469" width="0.3909%" height="15" fill="rgb(248,42,35)" fg:x="917" fg:w="5"/><text x="71.9466%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.31%)</title><rect x="71.7748%" y="453" width="0.3127%" height="15" fill="rgb(250,17,31)" fg:x="918" fg:w="4"/><text x="72.0248%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0094%" y="437" width="0.0782%" height="15" fill="rgb(248,138,14)" fg:x="921" fg:w="1"/><text x="72.2594%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0876%" y="469" width="0.0782%" height="15" fill="rgb(228,161,3)" fg:x="922" fg:w="1"/><text x="72.3376%" y="479.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.3221%" y="389" width="0.0782%" height="15" fill="rgb(248,116,17)" fg:x="925" fg:w="1"/><text x="72.5721%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.3221%" y="373" width="0.0782%" height="15" fill="rgb(207,78,24)" fg:x="925" fg:w="1"/><text x="72.5721%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3221%" y="357" width="0.0782%" height="15" fill="rgb(234,99,48)" fg:x="925" fg:w="1"/><text x="72.5721%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.23%)</title><rect x="72.2439%" y="437" width="0.2346%" height="15" fill="rgb(242,22,26)" fg:x="924" fg:w="3"/><text x="72.4939%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="72.3221%" y="421" width="0.1564%" height="15" fill="rgb(227,78,32)" fg:x="925" fg:w="2"/><text x="72.5721%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="72.3221%" y="405" width="0.1564%" height="15" fill="rgb(226,189,43)" fg:x="925" fg:w="2"/><text x="72.5721%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.4003%" y="389" width="0.0782%" height="15" fill="rgb(227,218,35)" fg:x="926" fg:w="1"/><text x="72.6503%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4003%" y="373" width="0.0782%" height="15" fill="rgb(206,111,40)" fg:x="926" fg:w="1"/><text x="72.6503%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.4003%" y="357" width="0.0782%" height="15" fill="rgb(208,217,22)" fg:x="926" fg:w="1"/><text x="72.6503%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.5567%" y="405" width="0.0782%" height="15" fill="rgb(248,20,20)" fg:x="928" fg:w="1"/><text x="72.8067%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.5567%" y="389" width="0.0782%" height="15" fill="rgb(239,155,16)" fg:x="928" fg:w="1"/><text x="72.8067%" y="399.50"></text></g><g><title>plugins_core::tools::occupied_by (15 samples, 1.17%)</title><rect x="71.5403%" y="501" width="1.1728%" height="15" fill="rgb(238,171,46)" fg:x="915" fg:w="15"/><text x="71.7903%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (14 samples, 1.09%)</title><rect x="71.6185%" y="485" width="1.0946%" height="15" fill="rgb(248,11,36)" fg:x="916" fg:w="14"/><text x="71.8685%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.55%)</title><rect x="72.1658%" y="469" width="0.5473%" height="15" fill="rgb(220,148,37)" fg:x="923" fg:w="7"/><text x="72.4158%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.55%)</title><rect x="72.1658%" y="453" width="0.5473%" height="15" fill="rgb(218,144,42)" fg:x="923" fg:w="7"/><text x="72.4158%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.23%)</title><rect x="72.4785%" y="437" width="0.2346%" height="15" fill="rgb(245,20,20)" fg:x="927" fg:w="3"/><text x="72.7285%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="72.4785%" y="421" width="0.2346%" height="15" fill="rgb(240,111,48)" fg:x="927" fg:w="3"/><text x="72.7285%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="72.6349%" y="405" width="0.0782%" height="15" fill="rgb(237,225,32)" fg:x="929" fg:w="1"/><text x="72.8849%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.6349%" y="389" width="0.0782%" height="15" fill="rgb(228,161,46)" fg:x="929" fg:w="1"/><text x="72.8849%" y="399.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.6349%" y="373" width="0.0782%" height="15" fill="rgb(235,196,21)" fg:x="929" fg:w="1"/><text x="72.8849%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.7912%" y="437" width="0.0782%" height="15" fill="rgb(250,133,21)" fg:x="931" fg:w="1"/><text x="73.0412%" y="447.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (35 samples, 2.74%)</title><rect x="70.2111%" y="517" width="2.7365%" height="15" fill="rgb(236,94,32)" fg:x="898" fg:w="35"/><text x="70.4611%" y="527.50">pl..</text></g><g><title>plugins_core::tools::worn_by (3 samples, 0.23%)</title><rect x="72.7131%" y="501" width="0.2346%" height="15" fill="rgb(219,176,25)" fg:x="930" fg:w="3"/><text x="72.9631%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.23%)</title><rect x="72.7131%" y="485" width="0.2346%" height="15" fill="rgb(211,17,43)" fg:x="930" fg:w="3"/><text x="72.9631%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.7912%" y="469" width="0.1564%" height="15" fill="rgb(220,75,23)" fg:x="931" fg:w="2"/><text x="73.0412%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.7912%" y="453" width="0.1564%" height="15" fill="rgb(215,122,32)" fg:x="931" fg:w="2"/><text x="73.0412%" y="463.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="72.8694%" y="437" width="0.0782%" height="15" fill="rgb(218,57,38)" fg:x="932" fg:w="1"/><text x="73.1194%" y="447.50"></text></g><g><title>engine::session::Session::captured (674 samples, 52.70%)</title><rect x="20.3284%" y="677" width="52.6974%" height="15" fill="rgb(233,208,46)" fg:x="260" fg:w="674"/><text x="20.5784%" y="687.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (667 samples, 52.15%)</title><rect x="20.8757%" y="661" width="52.1501%" height="15" fill="rgb(221,35,50)" fg:x="267" fg:w="667"/><text x="21.1257%" y="671.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (662 samples, 51.76%)</title><rect x="21.2666%" y="645" width="51.7592%" height="15" fill="rgb(229,213,29)" fg:x="272" fg:w="662"/><text x="21.5166%" y="655.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (661 samples, 51.68%)</title><rect x="21.3448%" y="629" width="51.6810%" height="15" fill="rgb(229,110,40)" fg:x="273" fg:w="661"/><text x="21.5948%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (661 samples, 51.68%)</title><rect x="21.3448%" y="613" width="51.6810%" height="15" fill="rgb(247,206,19)" fg:x="273" fg:w="661"/><text x="21.5948%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (661 samples, 51.68%)</title><rect x="21.3448%" y="597" width="51.6810%" height="15" fill="rgb(216,229,45)" fg:x="273" fg:w="661"/><text x="21.5948%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (661 samples, 51.68%)</title><rect x="21.3448%" y="581" width="51.6810%" height="15" fill="rgb(205,184,31)" fg:x="273" fg:w="661"/><text x="21.5948%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::h..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (641 samples, 50.12%)</title><rect x="22.9085%" y="565" width="50.1173%" height="15" fill="rgb(213,91,10)" fg:x="293" fg:w="641"/><text x="23.1585%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (641 samples, 50.12%)</title><rect x="22.9085%" y="549" width="50.1173%" height="15" fill="rgb(250,49,8)" fg:x="293" fg:w="641"/><text x="23.1585%" y="559.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (38 samples, 2.97%)</title><rect x="70.0547%" y="533" width="2.9711%" height="15" fill="rgb(207,26,8)" fg:x="896" fg:w="38"/><text x="70.3047%" y="543.50">plu..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::new_from_surroundings (1 samples, 0.08%)</title><rect x="72.9476%" y="517" width="0.0782%" height="15" fill="rgb(224,2,13)" fg:x="933" fg:w="1"/><text x="73.1976%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.9476%" y="501" width="0.0782%" height="15" fill="rgb(219,108,27)" fg:x="933" fg:w="1"/><text x="73.1976%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0258%" y="613" width="0.0782%" height="15" fill="rgb(240,89,32)" fg:x="934" fg:w="1"/><text x="73.2758%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0258%" y="597" width="0.0782%" height="15" fill="rgb(248,205,3)" fg:x="934" fg:w="1"/><text x="73.2758%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0258%" y="581" width="0.0782%" height="15" fill="rgb(236,197,47)" fg:x="934" fg:w="1"/><text x="73.2758%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.0258%" y="629" width="0.1564%" height="15" fill="rgb(244,185,52)" fg:x="934" fg:w="2"/><text x="73.2758%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1040%" y="613" width="0.0782%" height="15" fill="rgb(210,206,23)" fg:x="935" fg:w="1"/><text x="73.3540%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1040%" y="597" width="0.0782%" height="15" fill="rgb(251,177,30)" fg:x="935" fg:w="1"/><text x="73.3540%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.1040%" y="581" width="0.0782%" height="15" fill="rgb(243,27,45)" fg:x="935" fg:w="1"/><text x="73.3540%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.1040%" y="565" width="0.0782%" height="15" fill="rgb(248,141,51)" fg:x="935" fg:w="1"/><text x="73.3540%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.1040%" y="549" width="0.0782%" height="15" fill="rgb(235,102,15)" fg:x="935" fg:w="1"/><text x="73.3540%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1040%" y="533" width="0.0782%" height="15" fill="rgb(214,164,53)" fg:x="935" fg:w="1"/><text x="73.3540%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1040%" y="517" width="0.0782%" height="15" fill="rgb(228,18,51)" fg:x="935" fg:w="1"/><text x="73.3540%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.1040%" y="501" width="0.0782%" height="15" fill="rgb(205,211,11)" fg:x="935" fg:w="1"/><text x="73.3540%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.1040%" y="485" width="0.0782%" height="15" fill="rgb(208,63,6)" fg:x="935" fg:w="1"/><text x="73.3540%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.1040%" y="469" width="0.0782%" height="15" fill="rgb(245,76,14)" fg:x="935" fg:w="1"/><text x="73.3540%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.1040%" y="453" width="0.0782%" height="15" fill="rgb(234,176,34)" fg:x="935" fg:w="1"/><text x="73.3540%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1040%" y="437" width="0.0782%" height="15" fill="rgb(243,156,42)" fg:x="935" fg:w="1"/><text x="73.3540%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.23%)</title><rect x="73.1822%" y="581" width="0.2346%" height="15" fill="rgb(237,182,10)" fg:x="936" fg:w="3"/><text x="73.4322%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.23%)</title><rect x="73.1822%" y="565" width="0.2346%" height="15" fill="rgb(244,117,0)" fg:x="936" fg:w="3"/><text x="73.4322%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.2604%" y="549" width="0.1564%" height="15" fill="rgb(239,91,50)" fg:x="937" fg:w="2"/><text x="73.5104%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.3385%" y="533" width="0.0782%" height="15" fill="rgb(206,38,9)" fg:x="938" fg:w="1"/><text x="73.5885%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4167%" y="437" width="0.0782%" height="15" fill="rgb(205,25,10)" fg:x="939" fg:w="1"/><text x="73.6667%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.4167%" y="421" width="0.0782%" height="15" fill="rgb(206,224,7)" fg:x="939" fg:w="1"/><text x="73.6667%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.4167%" y="405" width="0.0782%" height="15" fill="rgb(227,157,10)" fg:x="939" fg:w="1"/><text x="73.6667%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.4167%" y="389" width="0.0782%" height="15" fill="rgb(214,157,37)" fg:x="939" fg:w="1"/><text x="73.6667%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.4167%" y="373" width="0.0782%" height="15" fill="rgb(209,180,35)" fg:x="939" fg:w="1"/><text x="73.6667%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.4167%" y="357" width="0.0782%" height="15" fill="rgb(216,174,49)" fg:x="939" fg:w="1"/><text x="73.6667%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.4167%" y="341" width="0.0782%" height="15" fill="rgb(205,96,20)" fg:x="939" fg:w="1"/><text x="73.6667%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.4167%" y="325" width="0.0782%" height="15" fill="rgb(214,220,39)" fg:x="939" fg:w="1"/><text x="73.6667%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.4167%" y="309" width="0.0782%" height="15" fill="rgb(245,126,30)" fg:x="939" fg:w="1"/><text x="73.6667%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.4167%" y="293" width="0.0782%" height="15" fill="rgb(215,88,33)" fg:x="939" fg:w="1"/><text x="73.6667%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.4167%" y="277" width="0.0782%" height="15" fill="rgb(210,1,49)" fg:x="939" fg:w="1"/><text x="73.6667%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.4167%" y="261" width="0.0782%" height="15" fill="rgb(207,133,3)" fg:x="939" fg:w="1"/><text x="73.6667%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="73.4167%" y="245" width="0.0782%" height="15" fill="rgb(231,47,43)" fg:x="939" fg:w="1"/><text x="73.6667%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="73.4167%" y="229" width="0.0782%" height="15" fill="rgb(245,64,1)" fg:x="939" fg:w="1"/><text x="73.6667%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="73.4167%" y="485" width="0.1564%" height="15" fill="rgb(253,145,20)" fg:x="939" fg:w="2"/><text x="73.6667%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="73.4167%" y="469" width="0.1564%" height="15" fill="rgb(211,39,18)" fg:x="939" fg:w="2"/><text x="73.6667%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="73.4167%" y="453" width="0.1564%" height="15" fill="rgb(223,225,18)" fg:x="939" fg:w="2"/><text x="73.6667%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.4949%" y="437" width="0.0782%" height="15" fill="rgb(210,202,44)" fg:x="940" fg:w="1"/><text x="73.7449%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.4949%" y="421" width="0.0782%" height="15" fill="rgb(231,138,36)" fg:x="940" fg:w="1"/><text x="73.7449%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.4949%" y="405" width="0.0782%" height="15" fill="rgb(237,115,25)" fg:x="940" fg:w="1"/><text x="73.7449%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.4949%" y="389" width="0.0782%" height="15" fill="rgb(215,53,48)" fg:x="940" fg:w="1"/><text x="73.7449%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.23%)</title><rect x="73.4167%" y="533" width="0.2346%" height="15" fill="rgb(243,193,24)" fg:x="939" fg:w="3"/><text x="73.6667%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="73.4167%" y="517" width="0.2346%" height="15" fill="rgb(210,106,28)" fg:x="939" fg:w="3"/><text x="73.6667%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.23%)</title><rect x="73.4167%" y="501" width="0.2346%" height="15" fill="rgb(249,192,0)" fg:x="939" fg:w="3"/><text x="73.6667%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.5731%" y="485" width="0.0782%" height="15" fill="rgb(224,96,21)" fg:x="941" fg:w="1"/><text x="73.8231%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.5731%" y="469" width="0.0782%" height="15" fill="rgb(243,160,19)" fg:x="941" fg:w="1"/><text x="73.8231%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="73.5731%" y="453" width="0.0782%" height="15" fill="rgb(219,205,50)" fg:x="941" fg:w="1"/><text x="73.8231%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="73.5731%" y="437" width="0.0782%" height="15" fill="rgb(218,175,44)" fg:x="941" fg:w="1"/><text x="73.8231%" y="447.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="73.5731%" y="421" width="0.0782%" height="15" fill="rgb(251,84,47)" fg:x="941" fg:w="1"/><text x="73.8231%" y="431.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="73.5731%" y="405" width="0.0782%" height="15" fill="rgb(241,14,16)" fg:x="941" fg:w="1"/><text x="73.8231%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="73.5731%" y="389" width="0.0782%" height="15" fill="rgb(207,142,28)" fg:x="941" fg:w="1"/><text x="73.8231%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="73.5731%" y="373" width="0.0782%" height="15" fill="rgb(208,116,22)" fg:x="941" fg:w="1"/><text x="73.8231%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.5731%" y="357" width="0.0782%" height="15" fill="rgb(210,0,43)" fg:x="941" fg:w="1"/><text x="73.8231%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.5731%" y="341" width="0.0782%" height="15" fill="rgb(246,33,21)" fg:x="941" fg:w="1"/><text x="73.8231%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.55%)</title><rect x="73.1822%" y="629" width="0.5473%" height="15" fill="rgb(208,158,54)" fg:x="936" fg:w="7"/><text x="73.4322%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.55%)</title><rect x="73.1822%" y="613" width="0.5473%" height="15" fill="rgb(218,99,29)" fg:x="936" fg:w="7"/><text x="73.4322%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.55%)</title><rect x="73.1822%" y="597" width="0.5473%" height="15" fill="rgb(226,29,7)" fg:x="936" fg:w="7"/><text x="73.4322%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.31%)</title><rect x="73.4167%" y="581" width="0.3127%" height="15" fill="rgb(206,178,46)" fg:x="939" fg:w="4"/><text x="73.6667%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.31%)</title><rect x="73.4167%" y="565" width="0.3127%" height="15" fill="rgb(205,169,32)" fg:x="939" fg:w="4"/><text x="73.6667%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.31%)</title><rect x="73.4167%" y="549" width="0.3127%" height="15" fill="rgb(217,4,13)" fg:x="939" fg:w="4"/><text x="73.6667%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.6513%" y="533" width="0.0782%" height="15" fill="rgb(210,140,37)" fg:x="942" fg:w="1"/><text x="73.9013%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6513%" y="517" width="0.0782%" height="15" fill="rgb(229,80,10)" fg:x="942" fg:w="1"/><text x="73.9013%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.6513%" y="501" width="0.0782%" height="15" fill="rgb(212,175,34)" fg:x="942" fg:w="1"/><text x="73.9013%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.6513%" y="485" width="0.0782%" height="15" fill="rgb(216,207,24)" fg:x="942" fg:w="1"/><text x="73.9013%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.6513%" y="469" width="0.0782%" height="15" fill="rgb(234,163,3)" fg:x="942" fg:w="1"/><text x="73.9013%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.6513%" y="453" width="0.0782%" height="15" fill="rgb(248,101,16)" fg:x="942" fg:w="1"/><text x="73.9013%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.6513%" y="437" width="0.0782%" height="15" fill="rgb(209,152,54)" fg:x="942" fg:w="1"/><text x="73.9013%" y="447.50"></text></g><g><title>engine::session::internal::Added::find_refs (12 samples, 0.94%)</title><rect x="73.0258%" y="661" width="0.9382%" height="15" fill="rgb(229,124,51)" fg:x="934" fg:w="12"/><text x="73.2758%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (12 samples, 0.94%)</title><rect x="73.0258%" y="645" width="0.9382%" height="15" fill="rgb(219,83,18)" fg:x="934" fg:w="12"/><text x="73.2758%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.23%)</title><rect x="73.7295%" y="629" width="0.2346%" height="15" fill="rgb(206,29,38)" fg:x="943" fg:w="3"/><text x="73.9795%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="73.7295%" y="613" width="0.2346%" height="15" fill="rgb(245,123,23)" fg:x="943" fg:w="3"/><text x="73.9795%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="73.8077%" y="597" width="0.1564%" height="15" fill="rgb(238,50,33)" fg:x="944" fg:w="2"/><text x="74.0577%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="73.8077%" y="581" width="0.1564%" height="15" fill="rgb(234,165,23)" fg:x="944" fg:w="2"/><text x="74.0577%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="73.8077%" y="565" width="0.1564%" height="15" fill="rgb(211,82,31)" fg:x="944" fg:w="2"/><text x="74.0577%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="73.8077%" y="549" width="0.1564%" height="15" fill="rgb(224,166,46)" fg:x="944" fg:w="2"/><text x="74.0577%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="73.8077%" y="533" width="0.1564%" height="15" fill="rgb(211,13,8)" fg:x="944" fg:w="2"/><text x="74.0577%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.9640%" y="565" width="0.0782%" height="15" fill="rgb(212,7,42)" fg:x="946" fg:w="1"/><text x="74.2140%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.9640%" y="549" width="0.0782%" height="15" fill="rgb(249,102,19)" fg:x="946" fg:w="1"/><text x="74.2140%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="73.9640%" y="645" width="0.1564%" height="15" fill="rgb(225,41,13)" fg:x="946" fg:w="2"/><text x="74.2140%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.9640%" y="629" width="0.1564%" height="15" fill="rgb(220,65,27)" fg:x="946" fg:w="2"/><text x="74.2140%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.9640%" y="613" width="0.1564%" height="15" fill="rgb(206,4,41)" fg:x="946" fg:w="2"/><text x="74.2140%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="73.9640%" y="597" width="0.1564%" height="15" fill="rgb(219,60,39)" fg:x="946" fg:w="2"/><text x="74.2140%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.9640%" y="581" width="0.1564%" height="15" fill="rgb(226,4,38)" fg:x="946" fg:w="2"/><text x="74.2140%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.0422%" y="565" width="0.0782%" height="15" fill="rgb(250,52,3)" fg:x="947" fg:w="1"/><text x="74.2922%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.0422%" y="549" width="0.0782%" height="15" fill="rgb(234,93,0)" fg:x="947" fg:w="1"/><text x="74.2922%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.1204%" y="565" width="0.0782%" height="15" fill="rgb(251,47,47)" fg:x="948" fg:w="1"/><text x="74.3704%" y="575.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="74.2768%" y="485" width="0.0782%" height="15" fill="rgb(205,166,47)" fg:x="950" fg:w="1"/><text x="74.5268%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.2768%" y="469" width="0.0782%" height="15" fill="rgb(231,148,8)" fg:x="950" fg:w="1"/><text x="74.5268%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.2768%" y="453" width="0.0782%" height="15" fill="rgb(244,185,19)" fg:x="950" fg:w="1"/><text x="74.5268%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="74.2768%" y="437" width="0.0782%" height="15" fill="rgb(224,201,45)" fg:x="950" fg:w="1"/><text x="74.5268%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.2768%" y="421" width="0.0782%" height="15" fill="rgb(240,77,39)" fg:x="950" fg:w="1"/><text x="74.5268%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="74.1986%" y="549" width="0.2346%" height="15" fill="rgb(248,211,29)" fg:x="949" fg:w="3"/><text x="74.4486%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="74.1986%" y="533" width="0.2346%" height="15" fill="rgb(232,214,46)" fg:x="949" fg:w="3"/><text x="74.4486%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.2768%" y="517" width="0.1564%" height="15" fill="rgb(213,99,54)" fg:x="950" fg:w="2"/><text x="74.5268%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.2768%" y="501" width="0.1564%" height="15" fill="rgb(240,19,46)" fg:x="950" fg:w="2"/><text x="74.5268%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.3550%" y="485" width="0.0782%" height="15" fill="rgb(243,89,10)" fg:x="951" fg:w="1"/><text x="74.6050%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="74.3550%" y="469" width="0.0782%" height="15" fill="rgb(249,28,32)" fg:x="951" fg:w="1"/><text x="74.6050%" y="479.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.47%)</title><rect x="74.1204%" y="645" width="0.4691%" height="15" fill="rgb(253,30,9)" fg:x="948" fg:w="6"/><text x="74.3704%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.47%)</title><rect x="74.1204%" y="629" width="0.4691%" height="15" fill="rgb(217,2,26)" fg:x="948" fg:w="6"/><text x="74.3704%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.47%)</title><rect x="74.1204%" y="613" width="0.4691%" height="15" fill="rgb(220,28,10)" fg:x="948" fg:w="6"/><text x="74.3704%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.47%)</title><rect x="74.1204%" y="597" width="0.4691%" height="15" fill="rgb(228,167,49)" fg:x="948" fg:w="6"/><text x="74.3704%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.47%)</title><rect x="74.1204%" y="581" width="0.4691%" height="15" fill="rgb(238,212,3)" fg:x="948" fg:w="6"/><text x="74.3704%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.39%)</title><rect x="74.1986%" y="565" width="0.3909%" height="15" fill="rgb(229,134,44)" fg:x="949" fg:w="5"/><text x="74.4486%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.4332%" y="549" width="0.1564%" height="15" fill="rgb(208,71,4)" fg:x="952" fg:w="2"/><text x="74.6832%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.4332%" y="533" width="0.1564%" height="15" fill="rgb(221,205,45)" fg:x="952" fg:w="2"/><text x="74.6832%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="74.4332%" y="517" width="0.1564%" height="15" fill="rgb(215,132,38)" fg:x="952" fg:w="2"/><text x="74.6832%" y="527.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="74.4332%" y="501" width="0.1564%" height="15" fill="rgb(227,158,6)" fg:x="952" fg:w="2"/><text x="74.6832%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="74.5113%" y="485" width="0.0782%" height="15" fill="rgb(250,10,38)" fg:x="953" fg:w="1"/><text x="74.7613%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.5113%" y="469" width="0.0782%" height="15" fill="rgb(225,171,40)" fg:x="953" fg:w="1"/><text x="74.7613%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.5113%" y="453" width="0.0782%" height="15" fill="rgb(238,17,43)" fg:x="953" fg:w="1"/><text x="74.7613%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.5113%" y="437" width="0.0782%" height="15" fill="rgb(208,145,4)" fg:x="953" fg:w="1"/><text x="74.7613%" y="447.50"></text></g><g><title>engine::session::Session::load_entity (21 samples, 1.64%)</title><rect x="73.0258%" y="677" width="1.6419%" height="15" fill="rgb(232,82,7)" fg:x="934" fg:w="21"/><text x="73.2758%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.70%)</title><rect x="73.9640%" y="661" width="0.7037%" height="15" fill="rgb(205,166,38)" fg:x="946" fg:w="9"/><text x="74.2140%" y="671.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="74.5895%" y="645" width="0.0782%" height="15" fill="rgb(240,228,4)" fg:x="954" fg:w="1"/><text x="74.8395%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="74.7459%" y="645" width="0.0782%" height="15" fill="rgb(233,121,40)" fg:x="956" fg:w="1"/><text x="74.9959%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.8241%" y="629" width="0.0782%" height="15" fill="rgb(243,84,30)" fg:x="957" fg:w="1"/><text x="75.0741%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.8241%" y="613" width="0.0782%" height="15" fill="rgb(235,81,48)" fg:x="957" fg:w="1"/><text x="75.0741%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.8241%" y="597" width="0.0782%" height="15" fill="rgb(218,137,0)" fg:x="957" fg:w="1"/><text x="75.0741%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.8241%" y="581" width="0.0782%" height="15" fill="rgb(223,151,48)" fg:x="957" fg:w="1"/><text x="75.0741%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.8241%" y="565" width="0.0782%" height="15" fill="rgb(247,30,19)" fg:x="957" fg:w="1"/><text x="75.0741%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.8241%" y="549" width="0.0782%" height="15" fill="rgb(205,129,29)" fg:x="957" fg:w="1"/><text x="75.0741%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8241%" y="533" width="0.0782%" height="15" fill="rgb(222,29,2)" fg:x="957" fg:w="1"/><text x="75.0741%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.0586%" y="501" width="0.0782%" height="15" fill="rgb(232,145,33)" fg:x="960" fg:w="1"/><text x="75.3086%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.0586%" y="485" width="0.0782%" height="15" fill="rgb(217,30,31)" fg:x="960" fg:w="1"/><text x="75.3086%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.0586%" y="469" width="0.0782%" height="15" fill="rgb(243,22,52)" fg:x="960" fg:w="1"/><text x="75.3086%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.0586%" y="533" width="0.1564%" height="15" fill="rgb(254,228,14)" fg:x="960" fg:w="2"/><text x="75.3086%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.0586%" y="517" width="0.1564%" height="15" fill="rgb(231,45,50)" fg:x="960" fg:w="2"/><text x="75.3086%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1368%" y="501" width="0.0782%" height="15" fill="rgb(248,125,3)" fg:x="961" fg:w="1"/><text x="75.3868%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="75.1368%" y="485" width="0.0782%" height="15" fill="rgb(213,76,9)" fg:x="961" fg:w="1"/><text x="75.3868%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.39%)</title><rect x="74.9023%" y="629" width="0.3909%" height="15" fill="rgb(238,108,21)" fg:x="958" fg:w="5"/><text x="75.1523%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.39%)</title><rect x="74.9023%" y="613" width="0.3909%" height="15" fill="rgb(229,214,19)" fg:x="958" fg:w="5"/><text x="75.1523%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.39%)</title><rect x="74.9023%" y="597" width="0.3909%" height="15" fill="rgb(252,201,5)" fg:x="958" fg:w="5"/><text x="75.1523%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.23%)</title><rect x="75.0586%" y="581" width="0.2346%" height="15" fill="rgb(233,165,49)" fg:x="960" fg:w="3"/><text x="75.3086%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="75.0586%" y="565" width="0.2346%" height="15" fill="rgb(208,165,19)" fg:x="960" fg:w="3"/><text x="75.3086%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.23%)</title><rect x="75.0586%" y="549" width="0.2346%" height="15" fill="rgb(216,220,31)" fg:x="960" fg:w="3"/><text x="75.3086%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.2150%" y="533" width="0.0782%" height="15" fill="rgb(214,8,31)" fg:x="962" fg:w="1"/><text x="75.4650%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.2150%" y="517" width="0.0782%" height="15" fill="rgb(220,32,32)" fg:x="962" fg:w="1"/><text x="75.4650%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.2150%" y="501" width="0.0782%" height="15" fill="rgb(237,172,34)" fg:x="962" fg:w="1"/><text x="75.4650%" y="511.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="75.2932%" y="629" width="0.0782%" height="15" fill="rgb(240,209,5)" fg:x="963" fg:w="1"/><text x="75.5432%" y="639.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (10 samples, 0.78%)</title><rect x="74.6677%" y="677" width="0.7819%" height="15" fill="rgb(221,219,1)" fg:x="955" fg:w="10"/><text x="74.9177%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.78%)</title><rect x="74.6677%" y="661" width="0.7819%" height="15" fill="rgb(237,90,36)" fg:x="955" fg:w="10"/><text x="74.9177%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.63%)</title><rect x="74.8241%" y="645" width="0.6255%" height="15" fill="rgb(245,14,51)" fg:x="957" fg:w="8"/><text x="75.0741%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="75.3714%" y="629" width="0.0782%" height="15" fill="rgb(211,71,49)" fg:x="964" fg:w="1"/><text x="75.6214%" y="639.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="75.3714%" y="613" width="0.0782%" height="15" fill="rgb(230,223,9)" fg:x="964" fg:w="1"/><text x="75.6214%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.3714%" y="597" width="0.0782%" height="15" fill="rgb(212,33,31)" fg:x="964" fg:w="1"/><text x="75.6214%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3714%" y="581" width="0.0782%" height="15" fill="rgb(218,141,5)" fg:x="964" fg:w="1"/><text x="75.6214%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.3714%" y="565" width="0.0782%" height="15" fill="rgb(239,194,8)" fg:x="964" fg:w="1"/><text x="75.6214%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3714%" y="549" width="0.0782%" height="15" fill="rgb(225,119,29)" fg:x="964" fg:w="1"/><text x="75.6214%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.3714%" y="533" width="0.0782%" height="15" fill="rgb(233,32,3)" fg:x="964" fg:w="1"/><text x="75.6214%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3714%" y="517" width="0.0782%" height="15" fill="rgb(248,126,40)" fg:x="964" fg:w="1"/><text x="75.6214%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.3714%" y="501" width="0.0782%" height="15" fill="rgb(213,102,53)" fg:x="964" fg:w="1"/><text x="75.6214%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3714%" y="485" width="0.0782%" height="15" fill="rgb(212,69,15)" fg:x="964" fg:w="1"/><text x="75.6214%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.3714%" y="469" width="0.0782%" height="15" fill="rgb(253,39,34)" fg:x="964" fg:w="1"/><text x="75.6214%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="75.3714%" y="453" width="0.0782%" height="15" fill="rgb(205,189,54)" fg:x="964" fg:w="1"/><text x="75.6214%" y="463.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (713 samples, 55.75%)</title><rect x="19.7811%" y="709" width="55.7467%" height="15" fill="rgb(234,229,45)" fg:x="253" fg:w="713"/><text x="20.0311%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (713 samples, 55.75%)</title><rect x="19.7811%" y="693" width="55.7467%" height="15" fill="rgb(243,79,48)" fg:x="253" fg:w="713"/><text x="20.0311%" y="703.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::session::SetSession&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="75.4496%" y="677" width="0.0782%" height="15" fill="rgb(206,71,50)" fg:x="965" fg:w="1"/><text x="75.6996%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (967 samples, 75.61%)</title><rect x="0.0000%" y="757" width="75.6059%" height="15" fill="rgb(209,32,17)" fg:x="0" fg:w="967"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (967 samples, 75.61%)</title><rect x="0.0000%" y="741" width="75.6059%" height="15" fill="rgb(219,229,6)" fg:x="0" fg:w="967"/><text x="0.2500%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (967 samples, 75.61%)</title><rect x="0.0000%" y="725" width="75.6059%" height="15" fill="rgb(226,25,27)" fg:x="0" fg:w="967"/><text x="0.2500%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="75.5278%" y="709" width="0.0782%" height="15" fill="rgb(218,185,23)" fg:x="966" fg:w="1"/><text x="75.7778%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.5278%" y="693" width="0.0782%" height="15" fill="rgb(242,123,5)" fg:x="966" fg:w="1"/><text x="75.7778%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.6841%" y="693" width="0.0782%" height="15" fill="rgb(215,53,19)" fg:x="968" fg:w="1"/><text x="75.9341%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.6841%" y="677" width="0.0782%" height="15" fill="rgb(233,20,30)" fg:x="968" fg:w="1"/><text x="75.9341%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="75.7623%" y="693" width="0.0782%" height="15" fill="rgb(209,67,20)" fg:x="969" fg:w="1"/><text x="76.0123%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.7623%" y="677" width="0.0782%" height="15" fill="rgb(227,181,50)" fg:x="969" fg:w="1"/><text x="76.0123%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="75.7623%" y="661" width="0.0782%" height="15" fill="rgb(252,75,38)" fg:x="969" fg:w="1"/><text x="76.0123%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="75.7623%" y="645" width="0.0782%" height="15" fill="rgb(235,9,33)" fg:x="969" fg:w="1"/><text x="76.0123%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="75.7623%" y="629" width="0.0782%" height="15" fill="rgb(208,87,30)" fg:x="969" fg:w="1"/><text x="76.0123%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.7623%" y="613" width="0.0782%" height="15" fill="rgb(215,199,39)" fg:x="969" fg:w="1"/><text x="76.0123%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="75.9187%" y="581" width="0.1564%" height="15" fill="rgb(246,208,12)" fg:x="971" fg:w="2"/><text x="76.1687%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.0751%" y="581" width="0.0782%" height="15" fill="rgb(206,195,10)" fg:x="973" fg:w="1"/><text x="76.3251%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.0751%" y="565" width="0.0782%" height="15" fill="rgb(244,1,30)" fg:x="973" fg:w="1"/><text x="76.3251%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="75.8405%" y="629" width="0.3909%" height="15" fill="rgb(230,83,5)" fg:x="970" fg:w="5"/><text x="76.0905%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (4 samples, 0.31%)</title><rect x="75.9187%" y="613" width="0.3127%" height="15" fill="rgb(239,62,17)" fg:x="971" fg:w="4"/><text x="76.1687%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.31%)</title><rect x="75.9187%" y="597" width="0.3127%" height="15" fill="rgb(252,193,41)" fg:x="971" fg:w="4"/><text x="76.1687%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.1532%" y="581" width="0.0782%" height="15" fill="rgb(216,142,19)" fg:x="974" fg:w="1"/><text x="76.4032%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.55%)</title><rect x="75.8405%" y="645" width="0.5473%" height="15" fill="rgb(240,81,38)" fg:x="970" fg:w="7"/><text x="76.0905%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="76.2314%" y="629" width="0.1564%" height="15" fill="rgb(240,109,40)" fg:x="975" fg:w="2"/><text x="76.4814%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3096%" y="613" width="0.0782%" height="15" fill="rgb(230,123,10)" fg:x="976" fg:w="1"/><text x="76.5596%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.3096%" y="597" width="0.0782%" height="15" fill="rgb(253,42,32)" fg:x="976" fg:w="1"/><text x="76.5596%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (8 samples, 0.63%)</title><rect x="75.8405%" y="693" width="0.6255%" height="15" fill="rgb(218,154,8)" fg:x="970" fg:w="8"/><text x="76.0905%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.63%)</title><rect x="75.8405%" y="677" width="0.6255%" height="15" fill="rgb(216,197,10)" fg:x="970" fg:w="8"/><text x="76.0905%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (8 samples, 0.63%)</title><rect x="75.8405%" y="661" width="0.6255%" height="15" fill="rgb(223,107,12)" fg:x="970" fg:w="8"/><text x="76.0905%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.3878%" y="645" width="0.0782%" height="15" fill="rgb(241,174,42)" fg:x="977" fg:w="1"/><text x="76.6378%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.94%)</title><rect x="75.6059%" y="709" width="0.9382%" height="15" fill="rgb(231,78,20)" fg:x="967" fg:w="12"/><text x="75.8559%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="76.4660%" y="693" width="0.0782%" height="15" fill="rgb(230,208,49)" fg:x="978" fg:w="1"/><text x="76.7160%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4660%" y="677" width="0.0782%" height="15" fill="rgb(238,11,34)" fg:x="978" fg:w="1"/><text x="76.7160%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorageFactory as engine::storage::StorageFactory&gt;::create_storage (1 samples, 0.08%)</title><rect x="76.5442%" y="661" width="0.0782%" height="15" fill="rgb(210,130,26)" fg:x="979" fg:w="1"/><text x="76.7942%" y="671.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="76.5442%" y="645" width="0.0782%" height="15" fill="rgb(242,131,11)" fg:x="979" fg:w="1"/><text x="76.7942%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.6224%" y="613" width="0.0782%" height="15" fill="rgb(237,38,28)" fg:x="980" fg:w="1"/><text x="76.8724%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (2 samples, 0.16%)</title><rect x="76.6224%" y="629" width="0.1564%" height="15" fill="rgb(244,180,43)" fg:x="980" fg:w="2"/><text x="76.8724%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="76.7005%" y="613" width="0.0782%" height="15" fill="rgb(214,171,19)" fg:x="981" fg:w="1"/><text x="76.9505%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.7005%" y="597" width="0.0782%" height="15" fill="rgb(252,101,45)" fg:x="981" fg:w="1"/><text x="76.9505%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.7005%" y="581" width="0.0782%" height="15" fill="rgb(211,96,33)" fg:x="981" fg:w="1"/><text x="76.9505%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="76.7005%" y="565" width="0.0782%" height="15" fill="rgb(207,80,25)" fg:x="981" fg:w="1"/><text x="76.9505%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.8569%" y="581" width="0.0782%" height="15" fill="rgb(225,15,35)" fg:x="983" fg:w="1"/><text x="77.1069%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.8569%" y="565" width="0.0782%" height="15" fill="rgb(214,93,43)" fg:x="983" fg:w="1"/><text x="77.1069%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.8569%" y="549" width="0.0782%" height="15" fill="rgb(248,42,37)" fg:x="983" fg:w="1"/><text x="77.1069%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.8569%" y="533" width="0.0782%" height="15" fill="rgb(217,135,32)" fg:x="983" fg:w="1"/><text x="77.1069%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.8569%" y="517" width="0.0782%" height="15" fill="rgb(216,74,28)" fg:x="983" fg:w="1"/><text x="77.1069%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.8569%" y="501" width="0.0782%" height="15" fill="rgb(247,108,16)" fg:x="983" fg:w="1"/><text x="77.1069%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.8569%" y="485" width="0.0782%" height="15" fill="rgb(205,219,30)" fg:x="983" fg:w="1"/><text x="77.1069%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.8569%" y="469" width="0.0782%" height="15" fill="rgb(241,122,9)" fg:x="983" fg:w="1"/><text x="77.1069%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.8569%" y="453" width="0.0782%" height="15" fill="rgb(216,148,50)" fg:x="983" fg:w="1"/><text x="77.1069%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.8569%" y="437" width="0.0782%" height="15" fill="rgb(226,154,2)" fg:x="983" fg:w="1"/><text x="77.1069%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.8569%" y="421" width="0.0782%" height="15" fill="rgb(220,128,1)" fg:x="983" fg:w="1"/><text x="77.1069%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8569%" y="405" width="0.0782%" height="15" fill="rgb(245,185,29)" fg:x="983" fg:w="1"/><text x="77.1069%" y="415.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="76.8569%" y="613" width="0.1564%" height="15" fill="rgb(243,161,2)" fg:x="983" fg:w="2"/><text x="77.1069%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.8569%" y="597" width="0.1564%" height="15" fill="rgb(249,215,17)" fg:x="983" fg:w="2"/><text x="77.1069%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.9351%" y="581" width="0.0782%" height="15" fill="rgb(237,67,11)" fg:x="984" fg:w="1"/><text x="77.1851%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.9351%" y="565" width="0.0782%" height="15" fill="rgb(239,17,24)" fg:x="984" fg:w="1"/><text x="77.1851%" y="575.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.31%)</title><rect x="76.7787%" y="629" width="0.3127%" height="15" fill="rgb(215,97,29)" fg:x="982" fg:w="4"/><text x="77.0287%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (1 samples, 0.08%)</title><rect x="77.0133%" y="613" width="0.0782%" height="15" fill="rgb(253,228,42)" fg:x="985" fg:w="1"/><text x="77.2633%" y="623.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.0133%" y="597" width="0.0782%" height="15" fill="rgb(240,85,2)" fg:x="985" fg:w="1"/><text x="77.2633%" y="607.50"></text></g><g><title>glob::fill_todo (1 samples, 0.08%)</title><rect x="77.0133%" y="581" width="0.0782%" height="15" fill="rgb(214,155,4)" fg:x="985" fg:w="1"/><text x="77.2633%" y="591.50"></text></g><g><title>glob::is_dir (1 samples, 0.08%)</title><rect x="77.0133%" y="565" width="0.0782%" height="15" fill="rgb(247,120,22)" fg:x="985" fg:w="1"/><text x="77.2633%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="77.0133%" y="549" width="0.0782%" height="15" fill="rgb(211,208,6)" fg:x="985" fg:w="1"/><text x="77.2633%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="77.0133%" y="533" width="0.0782%" height="15" fill="rgb(235,99,41)" fg:x="985" fg:w="1"/><text x="77.2633%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="77.0133%" y="517" width="0.0782%" height="15" fill="rgb(223,28,8)" fg:x="985" fg:w="1"/><text x="77.2633%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="77.0133%" y="501" width="0.0782%" height="15" fill="rgb(212,71,20)" fg:x="985" fg:w="1"/><text x="77.2633%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="77.0133%" y="485" width="0.0782%" height="15" fill="rgb(206,85,3)" fg:x="985" fg:w="1"/><text x="77.2633%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="77.0133%" y="469" width="0.0782%" height="15" fill="rgb(244,180,11)" fg:x="985" fg:w="1"/><text x="77.2633%" y="479.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="77.0133%" y="453" width="0.0782%" height="15" fill="rgb(223,16,21)" fg:x="985" fg:w="1"/><text x="77.2633%" y="463.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="77.0915%" y="597" width="0.0782%" height="15" fill="rgb(238,85,42)" fg:x="986" fg:w="1"/><text x="77.3415%" y="607.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="77.0915%" y="581" width="0.0782%" height="15" fill="rgb(205,85,8)" fg:x="986" fg:w="1"/><text x="77.3415%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::actions::GiveToAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="77.0915%" y="565" width="0.0782%" height="15" fill="rgb(217,190,15)" fg:x="986" fg:w="1"/><text x="77.3415%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="77.0915%" y="549" width="0.0782%" height="15" fill="rgb(243,192,23)" fg:x="986" fg:w="1"/><text x="77.3415%" y="559.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="77.1697%" y="597" width="0.0782%" height="15" fill="rgb(223,220,37)" fg:x="987" fg:w="1"/><text x="77.4197%" y="607.50"></text></g><g><title>kernel::plugins::Schema::empty (1 samples, 0.08%)</title><rect x="77.1697%" y="581" width="0.0782%" height="15" fill="rgb(208,41,17)" fg:x="987" fg:w="1"/><text x="77.4197%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.23%)</title><rect x="77.0915%" y="629" width="0.2346%" height="15" fill="rgb(224,188,7)" fg:x="986" fg:w="3"/><text x="77.3415%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.23%)</title><rect x="77.0915%" y="613" width="0.2346%" height="15" fill="rgb(236,16,50)" fg:x="986" fg:w="3"/><text x="77.3415%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2478%" y="597" width="0.0782%" height="15" fill="rgb(238,6,24)" fg:x="988" fg:w="1"/><text x="77.4978%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (10 samples, 0.78%)</title><rect x="76.6224%" y="645" width="0.7819%" height="15" fill="rgb(253,67,45)" fg:x="980" fg:w="10"/><text x="76.8724%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="77.3260%" y="629" width="0.0782%" height="15" fill="rgb(210,89,32)" fg:x="989" fg:w="1"/><text x="77.5760%" y="639.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="77.3260%" y="613" width="0.0782%" height="15" fill="rgb(208,89,9)" fg:x="989" fg:w="1"/><text x="77.5760%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (12 samples, 0.94%)</title><rect x="76.5442%" y="709" width="0.9382%" height="15" fill="rgb(222,180,44)" fg:x="979" fg:w="12"/><text x="76.7942%" y="719.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (12 samples, 0.94%)</title><rect x="76.5442%" y="693" width="0.9382%" height="15" fill="rgb(250,181,46)" fg:x="979" fg:w="12"/><text x="76.7942%" y="703.50"></text></g><g><title>engine::session::Session::new (12 samples, 0.94%)</title><rect x="76.5442%" y="677" width="0.9382%" height="15" fill="rgb(210,190,26)" fg:x="979" fg:w="12"/><text x="76.7942%" y="687.50"></text></g><g><title>engine::session::Session::initialize (11 samples, 0.86%)</title><rect x="76.6224%" y="661" width="0.8600%" height="15" fill="rgb(253,49,13)" fg:x="980" fg:w="11"/><text x="76.8724%" y="671.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="77.4042%" y="645" width="0.0782%" height="15" fill="rgb(240,184,42)" fg:x="990" fg:w="1"/><text x="77.6542%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.4042%" y="629" width="0.0782%" height="15" fill="rgb(246,59,37)" fg:x="990" fg:w="1"/><text x="77.6542%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="77.4824%" y="677" width="0.0782%" height="15" fill="rgb(207,134,54)" fg:x="991" fg:w="1"/><text x="77.7324%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.4824%" y="661" width="0.0782%" height="15" fill="rgb(250,122,24)" fg:x="991" fg:w="1"/><text x="77.7324%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.5606%" y="613" width="0.0782%" height="15" fill="rgb(239,206,3)" fg:x="992" fg:w="1"/><text x="77.8106%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.5606%" y="597" width="0.0782%" height="15" fill="rgb(253,220,32)" fg:x="992" fg:w="1"/><text x="77.8106%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.5606%" y="581" width="0.0782%" height="15" fill="rgb(209,217,48)" fg:x="992" fg:w="1"/><text x="77.8106%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.6388%" y="581" width="0.0782%" height="15" fill="rgb(242,91,39)" fg:x="993" fg:w="1"/><text x="77.8888%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.6388%" y="565" width="0.0782%" height="15" fill="rgb(228,4,13)" fg:x="993" fg:w="1"/><text x="77.8888%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.6388%" y="549" width="0.0782%" height="15" fill="rgb(223,133,4)" fg:x="993" fg:w="1"/><text x="77.8888%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.6388%" y="533" width="0.0782%" height="15" fill="rgb(215,105,30)" fg:x="993" fg:w="1"/><text x="77.8888%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="77.6388%" y="597" width="0.1564%" height="15" fill="rgb(230,9,4)" fg:x="993" fg:w="2"/><text x="77.8888%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.7170%" y="581" width="0.0782%" height="15" fill="rgb(248,15,2)" fg:x="994" fg:w="1"/><text x="77.9670%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="77.7952%" y="565" width="0.1564%" height="15" fill="rgb(208,210,22)" fg:x="995" fg:w="2"/><text x="78.0452%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="77.7952%" y="549" width="0.1564%" height="15" fill="rgb(208,112,41)" fg:x="995" fg:w="2"/><text x="78.0452%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="77.7952%" y="533" width="0.1564%" height="15" fill="rgb(232,83,14)" fg:x="995" fg:w="2"/><text x="78.0452%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="77.7952%" y="517" width="0.1564%" height="15" fill="rgb(229,65,11)" fg:x="995" fg:w="2"/><text x="78.0452%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.8733%" y="501" width="0.0782%" height="15" fill="rgb(228,126,24)" fg:x="996" fg:w="1"/><text x="78.1233%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.8733%" y="485" width="0.0782%" height="15" fill="rgb(218,66,33)" fg:x="996" fg:w="1"/><text x="78.1233%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.8733%" y="469" width="0.0782%" height="15" fill="rgb(251,49,52)" fg:x="996" fg:w="1"/><text x="78.1233%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.23%)</title><rect x="77.7952%" y="581" width="0.2346%" height="15" fill="rgb(219,46,37)" fg:x="995" fg:w="3"/><text x="78.0452%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.9515%" y="565" width="0.0782%" height="15" fill="rgb(213,53,49)" fg:x="997" fg:w="1"/><text x="78.2015%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="78.1079%" y="517" width="0.1564%" height="15" fill="rgb(214,134,1)" fg:x="999" fg:w="2"/><text x="78.3579%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.31%)</title><rect x="78.0297%" y="565" width="0.3127%" height="15" fill="rgb(208,139,43)" fg:x="998" fg:w="4"/><text x="78.2797%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.31%)</title><rect x="78.0297%" y="549" width="0.3127%" height="15" fill="rgb(231,105,35)" fg:x="998" fg:w="4"/><text x="78.2797%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="78.1079%" y="533" width="0.2346%" height="15" fill="rgb(247,189,9)" fg:x="999" fg:w="3"/><text x="78.3579%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.2643%" y="517" width="0.0782%" height="15" fill="rgb(252,48,51)" fg:x="1001" fg:w="1"/><text x="78.5143%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.2643%" y="501" width="0.0782%" height="15" fill="rgb(209,121,1)" fg:x="1001" fg:w="1"/><text x="78.5143%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.2643%" y="485" width="0.0782%" height="15" fill="rgb(231,40,26)" fg:x="1001" fg:w="1"/><text x="78.5143%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.63%)</title><rect x="77.7952%" y="597" width="0.6255%" height="15" fill="rgb(251,8,13)" fg:x="995" fg:w="8"/><text x="78.0452%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="78.0297%" y="581" width="0.3909%" height="15" fill="rgb(231,110,2)" fg:x="998" fg:w="5"/><text x="78.2797%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.3425%" y="565" width="0.0782%" height="15" fill="rgb(216,153,22)" fg:x="1002" fg:w="1"/><text x="78.5925%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.3425%" y="549" width="0.0782%" height="15" fill="rgb(249,116,49)" fg:x="1002" fg:w="1"/><text x="78.5925%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.3425%" y="533" width="0.0782%" height="15" fill="rgb(230,89,2)" fg:x="1002" fg:w="1"/><text x="78.5925%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.3425%" y="517" width="0.0782%" height="15" fill="rgb(231,125,23)" fg:x="1002" fg:w="1"/><text x="78.5925%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.3425%" y="501" width="0.0782%" height="15" fill="rgb(212,217,18)" fg:x="1002" fg:w="1"/><text x="78.5925%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.3425%" y="485" width="0.0782%" height="15" fill="rgb(210,21,33)" fg:x="1002" fg:w="1"/><text x="78.5925%" y="495.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.02%)</title><rect x="77.4824%" y="693" width="1.0164%" height="15" fill="rgb(241,97,9)" fg:x="991" fg:w="13"/><text x="77.7324%" y="703.50"></text></g><g><title>engine::session::state::State::close (12 samples, 0.94%)</title><rect x="77.5606%" y="677" width="0.9382%" height="15" fill="rgb(221,35,31)" fg:x="992" fg:w="12"/><text x="77.8106%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (12 samples, 0.94%)</title><rect x="77.5606%" y="661" width="0.9382%" height="15" fill="rgb(251,23,23)" fg:x="992" fg:w="12"/><text x="77.8106%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (12 samples, 0.94%)</title><rect x="77.5606%" y="645" width="0.9382%" height="15" fill="rgb(227,165,2)" fg:x="992" fg:w="12"/><text x="77.8106%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.94%)</title><rect x="77.5606%" y="629" width="0.9382%" height="15" fill="rgb(242,24,2)" fg:x="992" fg:w="12"/><text x="77.8106%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (11 samples, 0.86%)</title><rect x="77.6388%" y="613" width="0.8600%" height="15" fill="rgb(242,138,51)" fg:x="993" fg:w="11"/><text x="77.8888%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (1 samples, 0.08%)</title><rect x="78.4206%" y="597" width="0.0782%" height="15" fill="rgb(220,219,5)" fg:x="1003" fg:w="1"/><text x="78.6706%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="78.4206%" y="581" width="0.0782%" height="15" fill="rgb(247,53,29)" fg:x="1003" fg:w="1"/><text x="78.6706%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.4206%" y="565" width="0.0782%" height="15" fill="rgb(233,43,39)" fg:x="1003" fg:w="1"/><text x="78.6706%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="78.4206%" y="549" width="0.0782%" height="15" fill="rgb(230,128,54)" fg:x="1003" fg:w="1"/><text x="78.6706%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.4206%" y="533" width="0.0782%" height="15" fill="rgb(218,20,12)" fg:x="1003" fg:w="1"/><text x="78.6706%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.4206%" y="517" width="0.0782%" height="15" fill="rgb(206,51,14)" fg:x="1003" fg:w="1"/><text x="78.6706%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.4206%" y="501" width="0.0782%" height="15" fill="rgb(223,16,35)" fg:x="1003" fg:w="1"/><text x="78.6706%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.4988%" y="645" width="0.0782%" height="15" fill="rgb(226,165,37)" fg:x="1004" fg:w="1"/><text x="78.7488%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.23%)</title><rect x="78.4988%" y="661" width="0.2346%" height="15" fill="rgb(240,26,21)" fg:x="1004" fg:w="3"/><text x="78.7488%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.5770%" y="645" width="0.1564%" height="15" fill="rgb(240,72,46)" fg:x="1005" fg:w="2"/><text x="78.8270%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.5770%" y="629" width="0.1564%" height="15" fill="rgb(211,33,41)" fg:x="1005" fg:w="2"/><text x="78.8270%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="78.5770%" y="613" width="0.1564%" height="15" fill="rgb(224,157,46)" fg:x="1005" fg:w="2"/><text x="78.8270%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.5770%" y="597" width="0.1564%" height="15" fill="rgb(223,59,19)" fg:x="1005" fg:w="2"/><text x="78.8270%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.5770%" y="581" width="0.1564%" height="15" fill="rgb(239,187,1)" fg:x="1005" fg:w="2"/><text x="78.8270%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.6552%" y="565" width="0.0782%" height="15" fill="rgb(226,95,9)" fg:x="1006" fg:w="1"/><text x="78.9052%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.6552%" y="549" width="0.0782%" height="15" fill="rgb(234,61,54)" fg:x="1006" fg:w="1"/><text x="78.9052%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.31%)</title><rect x="78.4988%" y="677" width="0.3127%" height="15" fill="rgb(205,209,47)" fg:x="1004" fg:w="4"/><text x="78.7488%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="78.7334%" y="661" width="0.0782%" height="15" fill="rgb(228,7,43)" fg:x="1007" fg:w="1"/><text x="78.9834%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="78.7334%" y="645" width="0.0782%" height="15" fill="rgb(240,217,52)" fg:x="1007" fg:w="1"/><text x="78.9834%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.7334%" y="629" width="0.0782%" height="15" fill="rgb(211,178,21)" fg:x="1007" fg:w="1"/><text x="78.9834%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="78.7334%" y="613" width="0.0782%" height="15" fill="rgb(205,25,34)" fg:x="1007" fg:w="1"/><text x="78.9834%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="78.7334%" y="597" width="0.0782%" height="15" fill="rgb(209,57,11)" fg:x="1007" fg:w="1"/><text x="78.9834%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="78.7334%" y="581" width="0.0782%" height="15" fill="rgb(221,99,2)" fg:x="1007" fg:w="1"/><text x="78.9834%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.39%)</title><rect x="78.4988%" y="693" width="0.3909%" height="15" fill="rgb(232,79,22)" fg:x="1004" fg:w="5"/><text x="78.7488%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="78.8116%" y="677" width="0.0782%" height="15" fill="rgb(221,145,32)" fg:x="1008" fg:w="1"/><text x="79.0616%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.8116%" y="661" width="0.0782%" height="15" fill="rgb(236,133,36)" fg:x="1008" fg:w="1"/><text x="79.0616%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.8116%" y="645" width="0.0782%" height="15" fill="rgb(208,224,44)" fg:x="1008" fg:w="1"/><text x="79.0616%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="78.8898%" y="661" width="0.0782%" height="15" fill="rgb(235,143,15)" fg:x="1009" fg:w="1"/><text x="79.1398%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="78.8898%" y="645" width="0.0782%" height="15" fill="rgb(249,83,27)" fg:x="1009" fg:w="1"/><text x="79.1398%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="78.8898%" y="629" width="0.0782%" height="15" fill="rgb(238,226,19)" fg:x="1009" fg:w="1"/><text x="79.1398%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="78.8898%" y="613" width="0.0782%" height="15" fill="rgb(226,206,27)" fg:x="1009" fg:w="1"/><text x="79.1398%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.8898%" y="597" width="0.0782%" height="15" fill="rgb(251,182,9)" fg:x="1009" fg:w="1"/><text x="79.1398%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.8898%" y="581" width="0.0782%" height="15" fill="rgb(212,140,41)" fg:x="1009" fg:w="1"/><text x="79.1398%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.8898%" y="565" width="0.0782%" height="15" fill="rgb(220,106,18)" fg:x="1009" fg:w="1"/><text x="79.1398%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.8898%" y="549" width="0.0782%" height="15" fill="rgb(252,46,41)" fg:x="1009" fg:w="1"/><text x="79.1398%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.8898%" y="533" width="0.0782%" height="15" fill="rgb(209,222,15)" fg:x="1009" fg:w="1"/><text x="79.1398%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.8898%" y="517" width="0.0782%" height="15" fill="rgb(233,83,50)" fg:x="1009" fg:w="1"/><text x="79.1398%" y="527.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="78.9679%" y="661" width="0.1564%" height="15" fill="rgb(205,212,0)" fg:x="1010" fg:w="2"/><text x="79.2179%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="78.9679%" y="645" width="0.1564%" height="15" fill="rgb(235,117,51)" fg:x="1010" fg:w="2"/><text x="79.2179%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="78.9679%" y="629" width="0.1564%" height="15" fill="rgb(233,133,48)" fg:x="1010" fg:w="2"/><text x="79.2179%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="78.9679%" y="613" width="0.1564%" height="15" fill="rgb(219,3,2)" fg:x="1010" fg:w="2"/><text x="79.2179%" y="623.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="79.0461%" y="597" width="0.0782%" height="15" fill="rgb(225,80,52)" fg:x="1011" fg:w="1"/><text x="79.2961%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="79.0461%" y="581" width="0.0782%" height="15" fill="rgb(235,195,42)" fg:x="1011" fg:w="1"/><text x="79.2961%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (4 samples, 0.31%)</title><rect x="78.8898%" y="693" width="0.3127%" height="15" fill="rgb(240,207,46)" fg:x="1009" fg:w="4"/><text x="79.1398%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.31%)</title><rect x="78.8898%" y="677" width="0.3127%" height="15" fill="rgb(236,112,50)" fg:x="1009" fg:w="4"/><text x="79.1398%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="79.1243%" y="661" width="0.0782%" height="15" fill="rgb(249,151,27)" fg:x="1012" fg:w="1"/><text x="79.3743%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="79.1243%" y="645" width="0.0782%" height="15" fill="rgb(253,223,52)" fg:x="1012" fg:w="1"/><text x="79.3743%" y="655.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="79.1243%" y="629" width="0.0782%" height="15" fill="rgb(215,55,33)" fg:x="1012" fg:w="1"/><text x="79.3743%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.1243%" y="613" width="0.0782%" height="15" fill="rgb(207,24,17)" fg:x="1012" fg:w="1"/><text x="79.3743%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.2025%" y="533" width="0.0782%" height="15" fill="rgb(218,169,32)" fg:x="1013" fg:w="1"/><text x="79.4525%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.2025%" y="517" width="0.0782%" height="15" fill="rgb(209,210,6)" fg:x="1013" fg:w="1"/><text x="79.4525%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="79.2025%" y="565" width="0.1564%" height="15" fill="rgb(225,208,8)" fg:x="1013" fg:w="2"/><text x="79.4525%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="79.2025%" y="549" width="0.1564%" height="15" fill="rgb(238,14,32)" fg:x="1013" fg:w="2"/><text x="79.4525%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.2807%" y="533" width="0.0782%" height="15" fill="rgb(211,137,3)" fg:x="1014" fg:w="1"/><text x="79.5307%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="79.3589%" y="565" width="0.1564%" height="15" fill="rgb(207,171,19)" fg:x="1015" fg:w="2"/><text x="79.6089%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="79.3589%" y="549" width="0.1564%" height="15" fill="rgb(250,80,8)" fg:x="1015" fg:w="2"/><text x="79.6089%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4371%" y="533" width="0.0782%" height="15" fill="rgb(209,103,53)" fg:x="1016" fg:w="1"/><text x="79.6871%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4371%" y="517" width="0.0782%" height="15" fill="rgb(233,198,10)" fg:x="1016" fg:w="1"/><text x="79.6871%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4371%" y="501" width="0.0782%" height="15" fill="rgb(236,125,25)" fg:x="1016" fg:w="1"/><text x="79.6871%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.4371%" y="485" width="0.0782%" height="15" fill="rgb(254,182,48)" fg:x="1016" fg:w="1"/><text x="79.6871%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.4371%" y="469" width="0.0782%" height="15" fill="rgb(216,108,44)" fg:x="1016" fg:w="1"/><text x="79.6871%" y="479.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="79.5152%" y="517" width="0.0782%" height="15" fill="rgb(222,72,39)" fg:x="1017" fg:w="1"/><text x="79.7652%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="79.5152%" y="501" width="0.0782%" height="15" fill="rgb(252,70,39)" fg:x="1017" fg:w="1"/><text x="79.7652%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.5934%" y="517" width="0.0782%" height="15" fill="rgb(243,99,34)" fg:x="1018" fg:w="1"/><text x="79.8434%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.5934%" y="501" width="0.0782%" height="15" fill="rgb(252,109,12)" fg:x="1018" fg:w="1"/><text x="79.8434%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.5934%" y="485" width="0.0782%" height="15" fill="rgb(211,186,10)" fg:x="1018" fg:w="1"/><text x="79.8434%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.6716%" y="453" width="0.0782%" height="15" fill="rgb(246,90,8)" fg:x="1019" fg:w="1"/><text x="79.9216%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.6716%" y="437" width="0.0782%" height="15" fill="rgb(226,91,24)" fg:x="1019" fg:w="1"/><text x="79.9216%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="79.6716%" y="501" width="0.1564%" height="15" fill="rgb(216,28,44)" fg:x="1019" fg:w="2"/><text x="79.9216%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="79.6716%" y="485" width="0.1564%" height="15" fill="rgb(229,36,0)" fg:x="1019" fg:w="2"/><text x="79.9216%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="79.6716%" y="469" width="0.1564%" height="15" fill="rgb(245,97,18)" fg:x="1019" fg:w="2"/><text x="79.9216%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.7498%" y="453" width="0.0782%" height="15" fill="rgb(241,97,54)" fg:x="1020" fg:w="1"/><text x="79.9998%" y="463.50"></text></g><g><title>engine::session::Session::flush (9 samples, 0.70%)</title><rect x="79.2025%" y="677" width="0.7037%" height="15" fill="rgb(234,125,17)" fg:x="1013" fg:w="9"/><text x="79.4525%" y="687.50"></text></g><g><title>engine::session::Session::save_changes (9 samples, 0.70%)</title><rect x="79.2025%" y="661" width="0.7037%" height="15" fill="rgb(228,172,39)" fg:x="1013" fg:w="9"/><text x="79.4525%" y="671.50"></text></g><g><title>engine::session::state::State::close (9 samples, 0.70%)</title><rect x="79.2025%" y="645" width="0.7037%" height="15" fill="rgb(227,169,1)" fg:x="1013" fg:w="9"/><text x="79.4525%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (9 samples, 0.70%)</title><rect x="79.2025%" y="629" width="0.7037%" height="15" fill="rgb(206,13,35)" fg:x="1013" fg:w="9"/><text x="79.4525%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.70%)</title><rect x="79.2025%" y="613" width="0.7037%" height="15" fill="rgb(211,117,30)" fg:x="1013" fg:w="9"/><text x="79.4525%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.70%)</title><rect x="79.2025%" y="597" width="0.7037%" height="15" fill="rgb(230,198,4)" fg:x="1013" fg:w="9"/><text x="79.4525%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (9 samples, 0.70%)</title><rect x="79.2025%" y="581" width="0.7037%" height="15" fill="rgb(213,87,54)" fg:x="1013" fg:w="9"/><text x="79.4525%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.39%)</title><rect x="79.5152%" y="565" width="0.3909%" height="15" fill="rgb(248,43,22)" fg:x="1017" fg:w="5"/><text x="79.7652%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.39%)</title><rect x="79.5152%" y="549" width="0.3909%" height="15" fill="rgb(213,175,48)" fg:x="1017" fg:w="5"/><text x="79.7652%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.39%)</title><rect x="79.5152%" y="533" width="0.3909%" height="15" fill="rgb(252,55,9)" fg:x="1017" fg:w="5"/><text x="79.7652%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.23%)</title><rect x="79.6716%" y="517" width="0.2346%" height="15" fill="rgb(231,72,33)" fg:x="1019" fg:w="3"/><text x="79.9216%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.8280%" y="501" width="0.0782%" height="15" fill="rgb(213,2,54)" fg:x="1021" fg:w="1"/><text x="80.0780%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="79.8280%" y="485" width="0.0782%" height="15" fill="rgb(208,88,25)" fg:x="1021" fg:w="1"/><text x="80.0780%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="79.9062%" y="661" width="0.0782%" height="15" fill="rgb(215,117,13)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="79.9062%" y="645" width="0.0782%" height="15" fill="rgb(243,147,21)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="79.9062%" y="629" width="0.0782%" height="15" fill="rgb(208,215,36)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="79.9062%" y="613" width="0.0782%" height="15" fill="rgb(238,187,24)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="79.9062%" y="597" width="0.0782%" height="15" fill="rgb(214,173,11)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9062%" y="581" width="0.0782%" height="15" fill="rgb(222,71,20)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9062%" y="565" width="0.0782%" height="15" fill="rgb(242,125,4)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.9062%" y="549" width="0.0782%" height="15" fill="rgb(217,101,52)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.9062%" y="533" width="0.0782%" height="15" fill="rgb(223,2,50)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.9062%" y="517" width="0.0782%" height="15" fill="rgb(225,197,9)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.9062%" y="501" width="0.0782%" height="15" fill="rgb(234,76,27)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.9062%" y="485" width="0.0782%" height="15" fill="rgb(213,161,26)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.9062%" y="469" width="0.0782%" height="15" fill="rgb(210,228,2)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.9062%" y="453" width="0.0782%" height="15" fill="rgb(235,4,16)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.9062%" y="437" width="0.0782%" height="15" fill="rgb(235,83,42)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.9062%" y="421" width="0.0782%" height="15" fill="rgb(207,116,39)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.9062%" y="405" width="0.0782%" height="15" fill="rgb(253,206,9)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.9062%" y="389" width="0.0782%" height="15" fill="rgb(234,32,47)" fg:x="1022" fg:w="1"/><text x="80.1562%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.9844%" y="661" width="0.0782%" height="15" fill="rgb(247,40,39)" fg:x="1023" fg:w="1"/><text x="80.2344%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9844%" y="645" width="0.0782%" height="15" fill="rgb(236,199,13)" fg:x="1023" fg:w="1"/><text x="80.2344%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9844%" y="629" width="0.0782%" height="15" fill="rgb(240,127,44)" fg:x="1023" fg:w="1"/><text x="80.2344%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9844%" y="613" width="0.0782%" height="15" fill="rgb(248,220,47)" fg:x="1023" fg:w="1"/><text x="80.2344%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.9844%" y="597" width="0.0782%" height="15" fill="rgb(240,78,9)" fg:x="1023" fg:w="1"/><text x="80.2344%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.9844%" y="581" width="0.0782%" height="15" fill="rgb(245,119,5)" fg:x="1023" fg:w="1"/><text x="80.2344%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.9844%" y="565" width="0.0782%" height="15" fill="rgb(238,175,31)" fg:x="1023" fg:w="1"/><text x="80.2344%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.9844%" y="549" width="0.0782%" height="15" fill="rgb(232,140,42)" fg:x="1023" fg:w="1"/><text x="80.2344%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.9844%" y="533" width="0.0782%" height="15" fill="rgb(218,179,7)" fg:x="1023" fg:w="1"/><text x="80.2344%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.9844%" y="517" width="0.0782%" height="15" fill="rgb(232,79,27)" fg:x="1023" fg:w="1"/><text x="80.2344%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.9844%" y="501" width="0.0782%" height="15" fill="rgb(247,11,19)" fg:x="1023" fg:w="1"/><text x="80.2344%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.9844%" y="485" width="0.0782%" height="15" fill="rgb(216,171,54)" fg:x="1023" fg:w="1"/><text x="80.2344%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.9844%" y="469" width="0.0782%" height="15" fill="rgb(233,158,36)" fg:x="1023" fg:w="1"/><text x="80.2344%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.9844%" y="453" width="0.0782%" height="15" fill="rgb(215,48,47)" fg:x="1023" fg:w="1"/><text x="80.2344%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.9844%" y="437" width="0.0782%" height="15" fill="rgb(230,223,15)" fg:x="1023" fg:w="1"/><text x="80.2344%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.9844%" y="421" width="0.0782%" height="15" fill="rgb(234,49,19)" fg:x="1023" fg:w="1"/><text x="80.2344%" y="431.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.39%)</title><rect x="79.9062%" y="677" width="0.3909%" height="15" fill="rgb(232,89,25)" fg:x="1022" fg:w="5"/><text x="80.1562%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.23%)</title><rect x="80.0625%" y="661" width="0.2346%" height="15" fill="rgb(237,206,28)" fg:x="1024" fg:w="3"/><text x="80.3125%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.23%)</title><rect x="80.0625%" y="645" width="0.2346%" height="15" fill="rgb(249,68,37)" fg:x="1024" fg:w="3"/><text x="80.3125%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="80.0625%" y="629" width="0.2346%" height="15" fill="rgb(226,99,43)" fg:x="1024" fg:w="3"/><text x="80.3125%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.2189%" y="613" width="0.0782%" height="15" fill="rgb(216,46,28)" fg:x="1026" fg:w="1"/><text x="80.4689%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.2189%" y="597" width="0.0782%" height="15" fill="rgb(216,33,9)" fg:x="1026" fg:w="1"/><text x="80.4689%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.2189%" y="581" width="0.0782%" height="15" fill="rgb(216,129,4)" fg:x="1026" fg:w="1"/><text x="80.4689%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.2189%" y="565" width="0.0782%" height="15" fill="rgb(216,106,3)" fg:x="1026" fg:w="1"/><text x="80.4689%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (17 samples, 1.33%)</title><rect x="79.2025%" y="693" width="1.3292%" height="15" fill="rgb(217,79,45)" fg:x="1013" fg:w="17"/><text x="79.4525%" y="703.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.23%)</title><rect x="80.2971%" y="677" width="0.2346%" height="15" fill="rgb(239,98,13)" fg:x="1027" fg:w="3"/><text x="80.5471%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.23%)</title><rect x="80.2971%" y="661" width="0.2346%" height="15" fill="rgb(221,115,4)" fg:x="1027" fg:w="3"/><text x="80.5471%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.23%)</title><rect x="80.2971%" y="645" width="0.2346%" height="15" fill="rgb(215,85,0)" fg:x="1027" fg:w="3"/><text x="80.5471%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.23%)</title><rect x="80.2971%" y="629" width="0.2346%" height="15" fill="rgb(230,62,15)" fg:x="1027" fg:w="3"/><text x="80.5471%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="80.3753%" y="613" width="0.1564%" height="15" fill="rgb(247,162,2)" fg:x="1028" fg:w="2"/><text x="80.6253%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="80.3753%" y="597" width="0.1564%" height="15" fill="rgb(212,112,32)" fg:x="1028" fg:w="2"/><text x="80.6253%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="80.3753%" y="581" width="0.1564%" height="15" fill="rgb(216,137,9)" fg:x="1028" fg:w="2"/><text x="80.6253%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="80.3753%" y="565" width="0.1564%" height="15" fill="rgb(250,149,33)" fg:x="1028" fg:w="2"/><text x="80.6253%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="80.3753%" y="549" width="0.1564%" height="15" fill="rgb(246,124,31)" fg:x="1028" fg:w="2"/><text x="80.6253%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.4535%" y="533" width="0.0782%" height="15" fill="rgb(216,210,22)" fg:x="1029" fg:w="1"/><text x="80.7035%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.4535%" y="517" width="0.0782%" height="15" fill="rgb(228,128,36)" fg:x="1029" fg:w="1"/><text x="80.7035%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.4535%" y="501" width="0.0782%" height="15" fill="rgb(231,41,0)" fg:x="1029" fg:w="1"/><text x="80.7035%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.4535%" y="485" width="0.0782%" height="15" fill="rgb(232,61,26)" fg:x="1029" fg:w="1"/><text x="80.7035%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.4535%" y="469" width="0.0782%" height="15" fill="rgb(217,60,9)" fg:x="1029" fg:w="1"/><text x="80.7035%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.4535%" y="453" width="0.0782%" height="15" fill="rgb(233,41,35)" fg:x="1029" fg:w="1"/><text x="80.7035%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.4535%" y="437" width="0.0782%" height="15" fill="rgb(253,139,43)" fg:x="1029" fg:w="1"/><text x="80.7035%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.4535%" y="421" width="0.0782%" height="15" fill="rgb(245,100,51)" fg:x="1029" fg:w="1"/><text x="80.7035%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.4535%" y="405" width="0.0782%" height="15" fill="rgb(250,208,18)" fg:x="1029" fg:w="1"/><text x="80.7035%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.4535%" y="389" width="0.0782%" height="15" fill="rgb(245,33,2)" fg:x="1029" fg:w="1"/><text x="80.7035%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.4535%" y="373" width="0.0782%" height="15" fill="rgb(244,171,31)" fg:x="1029" fg:w="1"/><text x="80.7035%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.4535%" y="357" width="0.0782%" height="15" fill="rgb(229,1,43)" fg:x="1029" fg:w="1"/><text x="80.7035%" y="367.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="80.5317%" y="693" width="0.1564%" height="15" fill="rgb(223,153,28)" fg:x="1030" fg:w="2"/><text x="80.7817%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="80.5317%" y="677" width="0.1564%" height="15" fill="rgb(241,4,46)" fg:x="1030" fg:w="2"/><text x="80.7817%" y="687.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="80.6099%" y="661" width="0.0782%" height="15" fill="rgb(230,81,11)" fg:x="1031" fg:w="1"/><text x="80.8599%" y="671.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="80.6099%" y="645" width="0.0782%" height="15" fill="rgb(253,204,39)" fg:x="1031" fg:w="1"/><text x="80.8599%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="80.6880%" y="677" width="0.0782%" height="15" fill="rgb(250,96,8)" fg:x="1032" fg:w="1"/><text x="80.9380%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="80.6880%" y="661" width="0.0782%" height="15" fill="rgb(219,89,54)" fg:x="1032" fg:w="1"/><text x="80.9380%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.6880%" y="645" width="0.0782%" height="15" fill="rgb(235,136,39)" fg:x="1032" fg:w="1"/><text x="80.9380%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.6880%" y="629" width="0.0782%" height="15" fill="rgb(230,155,37)" fg:x="1032" fg:w="1"/><text x="80.9380%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="80.7662%" y="661" width="0.0782%" height="15" fill="rgb(235,199,50)" fg:x="1033" fg:w="1"/><text x="81.0162%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="80.7662%" y="645" width="0.0782%" height="15" fill="rgb(227,81,32)" fg:x="1033" fg:w="1"/><text x="81.0162%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.7662%" y="629" width="0.0782%" height="15" fill="rgb(225,6,28)" fg:x="1033" fg:w="1"/><text x="81.0162%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.7662%" y="613" width="0.0782%" height="15" fill="rgb(207,211,17)" fg:x="1033" fg:w="1"/><text x="81.0162%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="80.7662%" y="597" width="0.0782%" height="15" fill="rgb(228,31,49)" fg:x="1033" fg:w="1"/><text x="81.0162%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="80.7662%" y="581" width="0.0782%" height="15" fill="rgb(230,185,3)" fg:x="1033" fg:w="1"/><text x="81.0162%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.7662%" y="565" width="0.0782%" height="15" fill="rgb(206,167,15)" fg:x="1033" fg:w="1"/><text x="81.0162%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.7662%" y="549" width="0.0782%" height="15" fill="rgb(234,2,36)" fg:x="1033" fg:w="1"/><text x="81.0162%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.7662%" y="533" width="0.0782%" height="15" fill="rgb(239,160,29)" fg:x="1033" fg:w="1"/><text x="81.0162%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.7662%" y="517" width="0.0782%" height="15" fill="rgb(236,117,2)" fg:x="1033" fg:w="1"/><text x="81.0162%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.7662%" y="501" width="0.0782%" height="15" fill="rgb(215,117,37)" fg:x="1033" fg:w="1"/><text x="81.0162%" y="511.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (44 samples, 3.44%)</title><rect x="77.4824%" y="709" width="3.4402%" height="15" fill="rgb(244,48,36)" fg:x="991" fg:w="44"/><text x="77.7324%" y="719.50">&lt;te..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.23%)</title><rect x="80.6880%" y="693" width="0.2346%" height="15" fill="rgb(223,101,37)" fg:x="1032" fg:w="3"/><text x="80.9380%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="80.7662%" y="677" width="0.1564%" height="15" fill="rgb(205,200,1)" fg:x="1033" fg:w="2"/><text x="81.0162%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.8444%" y="661" width="0.0782%" height="15" fill="rgb(209,193,20)" fg:x="1034" fg:w="1"/><text x="81.0944%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.8444%" y="645" width="0.0782%" height="15" fill="rgb(214,63,13)" fg:x="1034" fg:w="1"/><text x="81.0944%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.8444%" y="629" width="0.0782%" height="15" fill="rgb(253,113,46)" fg:x="1034" fg:w="1"/><text x="81.0944%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.8444%" y="613" width="0.0782%" height="15" fill="rgb(237,103,34)" fg:x="1034" fg:w="1"/><text x="81.0944%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.8444%" y="597" width="0.0782%" height="15" fill="rgb(223,38,25)" fg:x="1034" fg:w="1"/><text x="81.0944%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="80.9226%" y="693" width="0.0782%" height="15" fill="rgb(251,32,32)" fg:x="1035" fg:w="1"/><text x="81.1726%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.9226%" y="677" width="0.0782%" height="15" fill="rgb(228,65,22)" fg:x="1035" fg:w="1"/><text x="81.1726%" y="687.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (1 samples, 0.08%)</title><rect x="81.0008%" y="677" width="0.0782%" height="15" fill="rgb(205,11,46)" fg:x="1036" fg:w="1"/><text x="81.2508%" y="687.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="81.0008%" y="661" width="0.0782%" height="15" fill="rgb(220,35,2)" fg:x="1036" fg:w="1"/><text x="81.2508%" y="671.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="81.0008%" y="645" width="0.0782%" height="15" fill="rgb(217,151,17)" fg:x="1036" fg:w="1"/><text x="81.2508%" y="655.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="81.0008%" y="629" width="0.0782%" height="15" fill="rgb(243,227,35)" fg:x="1036" fg:w="1"/><text x="81.2508%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.0008%" y="613" width="0.0782%" height="15" fill="rgb(214,0,34)" fg:x="1036" fg:w="1"/><text x="81.2508%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="81.0008%" y="597" width="0.0782%" height="15" fill="rgb(209,42,37)" fg:x="1036" fg:w="1"/><text x="81.2508%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.0790%" y="677" width="0.0782%" height="15" fill="rgb(251,176,30)" fg:x="1037" fg:w="1"/><text x="81.3290%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.0790%" y="661" width="0.0782%" height="15" fill="rgb(223,64,40)" fg:x="1037" fg:w="1"/><text x="81.3290%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.1572%" y="661" width="0.0782%" height="15" fill="rgb(227,180,23)" fg:x="1038" fg:w="1"/><text x="81.4072%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;engine::session::state::ModifiedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="81.1572%" y="645" width="0.0782%" height="15" fill="rgb(220,137,31)" fg:x="1038" fg:w="1"/><text x="81.4072%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.1572%" y="629" width="0.0782%" height="15" fill="rgb(245,124,25)" fg:x="1038" fg:w="1"/><text x="81.4072%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="81.3135%" y="613" width="0.1564%" height="15" fill="rgb(217,157,5)" fg:x="1040" fg:w="2"/><text x="81.5635%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="81.3135%" y="597" width="0.1564%" height="15" fill="rgb(225,59,2)" fg:x="1040" fg:w="2"/><text x="81.5635%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.3917%" y="581" width="0.0782%" height="15" fill="rgb(220,182,9)" fg:x="1041" fg:w="1"/><text x="81.6417%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.3917%" y="565" width="0.0782%" height="15" fill="rgb(249,54,24)" fg:x="1041" fg:w="1"/><text x="81.6417%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="81.4699%" y="597" width="0.0782%" height="15" fill="rgb(216,89,17)" fg:x="1042" fg:w="1"/><text x="81.7199%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.4699%" y="581" width="0.0782%" height="15" fill="rgb(245,20,45)" fg:x="1042" fg:w="1"/><text x="81.7199%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.4699%" y="565" width="0.0782%" height="15" fill="rgb(230,83,14)" fg:x="1042" fg:w="1"/><text x="81.7199%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.5481%" y="581" width="0.0782%" height="15" fill="rgb(246,109,11)" fg:x="1043" fg:w="1"/><text x="81.7981%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.5481%" y="565" width="0.0782%" height="15" fill="rgb(235,85,23)" fg:x="1043" fg:w="1"/><text x="81.7981%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.5481%" y="549" width="0.0782%" height="15" fill="rgb(215,101,36)" fg:x="1043" fg:w="1"/><text x="81.7981%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.5481%" y="533" width="0.0782%" height="15" fill="rgb(228,140,31)" fg:x="1043" fg:w="1"/><text x="81.7981%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.6263%" y="549" width="0.0782%" height="15" fill="rgb(234,162,37)" fg:x="1044" fg:w="1"/><text x="81.8763%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.6263%" y="533" width="0.0782%" height="15" fill="rgb(221,0,24)" fg:x="1044" fg:w="1"/><text x="81.8763%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.6263%" y="517" width="0.0782%" height="15" fill="rgb(230,161,41)" fg:x="1044" fg:w="1"/><text x="81.8763%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.6263%" y="501" width="0.0782%" height="15" fill="rgb(224,46,24)" fg:x="1044" fg:w="1"/><text x="81.8763%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.6263%" y="485" width="0.0782%" height="15" fill="rgb(205,59,32)" fg:x="1044" fg:w="1"/><text x="81.8763%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.6263%" y="469" width="0.0782%" height="15" fill="rgb(239,31,20)" fg:x="1044" fg:w="1"/><text x="81.8763%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.6263%" y="453" width="0.0782%" height="15" fill="rgb(233,149,44)" fg:x="1044" fg:w="1"/><text x="81.8763%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.31%)</title><rect x="81.4699%" y="613" width="0.3127%" height="15" fill="rgb(243,47,26)" fg:x="1042" fg:w="4"/><text x="81.7199%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="81.5481%" y="597" width="0.2346%" height="15" fill="rgb(233,107,5)" fg:x="1043" fg:w="3"/><text x="81.7981%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="81.6263%" y="581" width="0.1564%" height="15" fill="rgb(248,140,33)" fg:x="1044" fg:w="2"/><text x="81.8763%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="81.6263%" y="565" width="0.1564%" height="15" fill="rgb(228,178,19)" fg:x="1044" fg:w="2"/><text x="81.8763%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="81.7045%" y="549" width="0.0782%" height="15" fill="rgb(224,39,49)" fg:x="1045" fg:w="1"/><text x="81.9545%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.7826%" y="517" width="0.0782%" height="15" fill="rgb(246,56,47)" fg:x="1046" fg:w="1"/><text x="82.0326%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.8608%" y="517" width="0.0782%" height="15" fill="rgb(220,73,27)" fg:x="1047" fg:w="1"/><text x="82.1108%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="81.9390%" y="501" width="0.0782%" height="15" fill="rgb(239,112,21)" fg:x="1048" fg:w="1"/><text x="82.1890%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="81.9390%" y="485" width="0.0782%" height="15" fill="rgb(253,14,51)" fg:x="1048" fg:w="1"/><text x="82.1890%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.9390%" y="469" width="0.0782%" height="15" fill="rgb(215,58,12)" fg:x="1048" fg:w="1"/><text x="82.1890%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.9390%" y="453" width="0.0782%" height="15" fill="rgb(207,181,19)" fg:x="1048" fg:w="1"/><text x="82.1890%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.9390%" y="437" width="0.0782%" height="15" fill="rgb(211,214,34)" fg:x="1048" fg:w="1"/><text x="82.1890%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="81.7826%" y="581" width="0.3127%" height="15" fill="rgb(243,124,39)" fg:x="1046" fg:w="4"/><text x="82.0326%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.31%)</title><rect x="81.7826%" y="565" width="0.3127%" height="15" fill="rgb(248,135,21)" fg:x="1046" fg:w="4"/><text x="82.0326%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="81.7826%" y="549" width="0.3127%" height="15" fill="rgb(245,218,3)" fg:x="1046" fg:w="4"/><text x="82.0326%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="81.7826%" y="533" width="0.3127%" height="15" fill="rgb(225,144,22)" fg:x="1046" fg:w="4"/><text x="82.0326%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="81.9390%" y="517" width="0.1564%" height="15" fill="rgb(250,90,15)" fg:x="1048" fg:w="2"/><text x="82.1890%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.0172%" y="501" width="0.0782%" height="15" fill="rgb(224,64,29)" fg:x="1049" fg:w="1"/><text x="82.2672%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.0172%" y="485" width="0.0782%" height="15" fill="rgb(217,50,47)" fg:x="1049" fg:w="1"/><text x="82.2672%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.0172%" y="469" width="0.0782%" height="15" fill="rgb(231,159,47)" fg:x="1049" fg:w="1"/><text x="82.2672%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.39%)</title><rect x="81.7826%" y="597" width="0.3909%" height="15" fill="rgb(213,89,29)" fg:x="1046" fg:w="5"/><text x="82.0326%" y="607.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="82.0954%" y="581" width="0.0782%" height="15" fill="rgb(243,90,23)" fg:x="1050" fg:w="1"/><text x="82.3454%" y="591.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="82.0954%" y="565" width="0.0782%" height="15" fill="rgb(213,21,6)" fg:x="1050" fg:w="1"/><text x="82.3454%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.0954%" y="549" width="0.0782%" height="15" fill="rgb(237,139,17)" fg:x="1050" fg:w="1"/><text x="82.3454%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="82.2518%" y="565" width="0.1564%" height="15" fill="rgb(250,147,17)" fg:x="1052" fg:w="2"/><text x="82.5018%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="82.2518%" y="549" width="0.1564%" height="15" fill="rgb(212,208,42)" fg:x="1052" fg:w="2"/><text x="82.5018%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.3299%" y="533" width="0.0782%" height="15" fill="rgb(215,229,40)" fg:x="1053" fg:w="1"/><text x="82.5799%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.4081%" y="533" width="0.0782%" height="15" fill="rgb(206,204,1)" fg:x="1054" fg:w="1"/><text x="82.6581%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="82.4863%" y="517" width="0.0782%" height="15" fill="rgb(230,62,32)" fg:x="1055" fg:w="1"/><text x="82.7363%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.4863%" y="501" width="0.0782%" height="15" fill="rgb(223,22,42)" fg:x="1055" fg:w="1"/><text x="82.7363%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.4863%" y="485" width="0.0782%" height="15" fill="rgb(244,6,23)" fg:x="1055" fg:w="1"/><text x="82.7363%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.4863%" y="469" width="0.0782%" height="15" fill="rgb(240,221,42)" fg:x="1055" fg:w="1"/><text x="82.7363%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.4863%" y="453" width="0.0782%" height="15" fill="rgb(222,74,7)" fg:x="1055" fg:w="1"/><text x="82.7363%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.39%)</title><rect x="82.4081%" y="549" width="0.3909%" height="15" fill="rgb(227,191,38)" fg:x="1054" fg:w="5"/><text x="82.6581%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.31%)</title><rect x="82.4863%" y="533" width="0.3127%" height="15" fill="rgb(227,89,34)" fg:x="1055" fg:w="4"/><text x="82.7363%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.23%)</title><rect x="82.5645%" y="517" width="0.2346%" height="15" fill="rgb(215,153,25)" fg:x="1056" fg:w="3"/><text x="82.8145%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="82.6427%" y="501" width="0.1564%" height="15" fill="rgb(215,153,46)" fg:x="1057" fg:w="2"/><text x="82.8927%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="82.6427%" y="485" width="0.1564%" height="15" fill="rgb(242,38,52)" fg:x="1057" fg:w="2"/><text x="82.8927%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="82.6427%" y="469" width="0.1564%" height="15" fill="rgb(218,112,4)" fg:x="1057" fg:w="2"/><text x="82.8927%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.7209%" y="453" width="0.0782%" height="15" fill="rgb(231,210,31)" fg:x="1058" fg:w="1"/><text x="82.9709%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.70%)</title><rect x="82.1736%" y="597" width="0.7037%" height="15" fill="rgb(245,223,36)" fg:x="1051" fg:w="9"/><text x="82.4236%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.70%)</title><rect x="82.1736%" y="581" width="0.7037%" height="15" fill="rgb(246,41,2)" fg:x="1051" fg:w="9"/><text x="82.4236%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.47%)</title><rect x="82.4081%" y="565" width="0.4691%" height="15" fill="rgb(227,51,31)" fg:x="1054" fg:w="6"/><text x="82.6581%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.7991%" y="549" width="0.0782%" height="15" fill="rgb(222,95,26)" fg:x="1059" fg:w="1"/><text x="83.0491%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.8772%" y="501" width="0.0782%" height="15" fill="rgb(224,190,1)" fg:x="1060" fg:w="1"/><text x="83.1272%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.8772%" y="485" width="0.0782%" height="15" fill="rgb(209,90,42)" fg:x="1060" fg:w="1"/><text x="83.1272%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.8772%" y="469" width="0.0782%" height="15" fill="rgb(232,225,50)" fg:x="1060" fg:w="1"/><text x="83.1272%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.8772%" y="453" width="0.0782%" height="15" fill="rgb(239,89,47)" fg:x="1060" fg:w="1"/><text x="83.1272%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="82.8772%" y="437" width="0.0782%" height="15" fill="rgb(230,212,50)" fg:x="1060" fg:w="1"/><text x="83.1272%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="82.8772%" y="533" width="0.1564%" height="15" fill="rgb(252,1,27)" fg:x="1060" fg:w="2"/><text x="83.1272%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="82.8772%" y="517" width="0.1564%" height="15" fill="rgb(237,179,41)" fg:x="1060" fg:w="2"/><text x="83.1272%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="82.9554%" y="501" width="0.0782%" height="15" fill="rgb(214,151,37)" fg:x="1061" fg:w="1"/><text x="83.2054%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9554%" y="485" width="0.0782%" height="15" fill="rgb(211,74,11)" fg:x="1061" fg:w="1"/><text x="83.2054%" y="495.50"></text></g><g><title>engine::session::Session::close (28 samples, 2.19%)</title><rect x="80.9226%" y="709" width="2.1892%" height="15" fill="rgb(242,21,21)" fg:x="1035" fg:w="28"/><text x="81.1726%" y="719.50">e..</text></g><g><title>engine::session::state::State::close (27 samples, 2.11%)</title><rect x="81.0008%" y="693" width="2.1110%" height="15" fill="rgb(226,106,43)" fg:x="1036" fg:w="27"/><text x="81.2508%" y="703.50">e..</text></g><g><title>engine::session::state::State::flush_entities (25 samples, 1.95%)</title><rect x="81.1572%" y="677" width="1.9547%" height="15" fill="rgb(229,162,39)" fg:x="1038" fg:w="25"/><text x="81.4072%" y="687.50">e..</text></g><g><title>core::iter::adapters::try_process (24 samples, 1.88%)</title><rect x="81.2353%" y="661" width="1.8765%" height="15" fill="rgb(228,159,25)" fg:x="1039" fg:w="24"/><text x="81.4853%" y="671.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 1.88%)</title><rect x="81.2353%" y="645" width="1.8765%" height="15" fill="rgb(237,32,23)" fg:x="1039" fg:w="24"/><text x="81.4853%" y="655.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (24 samples, 1.88%)</title><rect x="81.2353%" y="629" width="1.8765%" height="15" fill="rgb(212,35,32)" fg:x="1039" fg:w="24"/><text x="81.4853%" y="639.50">e..</text></g><g><title>kernel::model::any_entity_changes (17 samples, 1.33%)</title><rect x="81.7826%" y="613" width="1.3292%" height="15" fill="rgb(215,199,1)" fg:x="1046" fg:w="17"/><text x="82.0326%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.23%)</title><rect x="82.8772%" y="597" width="0.2346%" height="15" fill="rgb(215,67,13)" fg:x="1060" fg:w="3"/><text x="83.1272%" y="607.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.23%)</title><rect x="82.8772%" y="581" width="0.2346%" height="15" fill="rgb(216,20,47)" fg:x="1060" fg:w="3"/><text x="83.1272%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="82.8772%" y="565" width="0.2346%" height="15" fill="rgb(249,183,48)" fg:x="1060" fg:w="3"/><text x="83.1272%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="82.8772%" y="549" width="0.2346%" height="15" fill="rgb(208,86,37)" fg:x="1060" fg:w="3"/><text x="83.1272%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="83.0336%" y="533" width="0.0782%" height="15" fill="rgb(251,192,7)" fg:x="1062" fg:w="1"/><text x="83.2836%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.0336%" y="517" width="0.0782%" height="15" fill="rgb(234,196,3)" fg:x="1062" fg:w="1"/><text x="83.2836%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (3 samples, 0.23%)</title><rect x="83.1118%" y="677" width="0.2346%" height="15" fill="rgb(229,150,39)" fg:x="1063" fg:w="3"/><text x="83.3618%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.23%)</title><rect x="83.1118%" y="661" width="0.2346%" height="15" fill="rgb(226,19,29)" fg:x="1063" fg:w="3"/><text x="83.3618%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="83.2682%" y="645" width="0.0782%" height="15" fill="rgb(226,222,2)" fg:x="1065" fg:w="1"/><text x="83.5182%" y="655.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="83.3464%" y="677" width="0.0782%" height="15" fill="rgb(235,85,29)" fg:x="1066" fg:w="1"/><text x="83.5964%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="83.3464%" y="661" width="0.0782%" height="15" fill="rgb(237,194,43)" fg:x="1066" fg:w="1"/><text x="83.5964%" y="671.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::sources (1 samples, 0.08%)</title><rect x="83.3464%" y="645" width="0.0782%" height="15" fill="rgb(211,4,42)" fg:x="1066" fg:w="1"/><text x="83.5964%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="83.5027%" y="661" width="0.0782%" height="15" fill="rgb(221,80,37)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="83.5027%" y="645" width="0.0782%" height="15" fill="rgb(222,47,31)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="83.5027%" y="629" width="0.0782%" height="15" fill="rgb(249,82,52)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="83.5027%" y="613" width="0.0782%" height="15" fill="rgb(218,203,2)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="83.5027%" y="597" width="0.0782%" height="15" fill="rgb(210,175,14)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="83.5027%" y="581" width="0.0782%" height="15" fill="rgb(216,210,12)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="83.5027%" y="565" width="0.0782%" height="15" fill="rgb(229,120,18)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="83.5027%" y="549" width="0.0782%" height="15" fill="rgb(231,174,12)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="83.5027%" y="533" width="0.0782%" height="15" fill="rgb(214,101,53)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="83.5027%" y="517" width="0.0782%" height="15" fill="rgb(246,89,43)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="83.5027%" y="501" width="0.0782%" height="15" fill="rgb(222,9,51)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="83.5027%" y="485" width="0.0782%" height="15" fill="rgb(252,221,9)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="495.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="83.5027%" y="469" width="0.0782%" height="15" fill="rgb(248,28,15)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="479.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="83.5027%" y="453" width="0.0782%" height="15" fill="rgb(213,54,52)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="83.5027%" y="437" width="0.0782%" height="15" fill="rgb(240,3,45)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="83.5027%" y="421" width="0.0782%" height="15" fill="rgb(239,138,24)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="83.5027%" y="405" width="0.0782%" height="15" fill="rgb(233,45,54)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.5027%" y="389" width="0.0782%" height="15" fill="rgb(220,131,2)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.5027%" y="373" width="0.0782%" height="15" fill="rgb(240,154,36)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="83.5027%" y="357" width="0.0782%" height="15" fill="rgb(251,221,1)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="83.5027%" y="341" width="0.0782%" height="15" fill="rgb(225,217,1)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="83.5027%" y="325" width="0.0782%" height="15" fill="rgb(241,105,49)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="83.5027%" y="309" width="0.0782%" height="15" fill="rgb(215,44,32)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="83.5027%" y="293" width="0.0782%" height="15" fill="rgb(213,222,14)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="83.5027%" y="277" width="0.0782%" height="15" fill="rgb(207,99,52)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.5027%" y="261" width="0.0782%" height="15" fill="rgb(214,208,52)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="83.5027%" y="245" width="0.0782%" height="15" fill="rgb(244,169,0)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.5027%" y="229" width="0.0782%" height="15" fill="rgb(216,193,37)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="83.5027%" y="213" width="0.0782%" height="15" fill="rgb(212,158,10)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="83.5027%" y="197" width="0.0782%" height="15" fill="rgb(213,110,20)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="207.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="83.5027%" y="181" width="0.0782%" height="15" fill="rgb(226,5,42)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.5027%" y="165" width="0.0782%" height="15" fill="rgb(211,93,8)" fg:x="1068" fg:w="1"/><text x="83.7527%" y="175.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="83.5809%" y="645" width="0.0782%" height="15" fill="rgb(240,208,12)" fg:x="1069" fg:w="1"/><text x="83.8309%" y="655.50"></text></g><g><title>std::time::SystemTime::duration_since (1 samples, 0.08%)</title><rect x="83.5809%" y="629" width="0.0782%" height="15" fill="rgb(233,127,50)" fg:x="1069" fg:w="1"/><text x="83.8309%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.08%)</title><rect x="83.5809%" y="613" width="0.0782%" height="15" fill="rgb(227,199,53)" fg:x="1069" fg:w="1"/><text x="83.8309%" y="623.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.23%)</title><rect x="83.6591%" y="645" width="0.2346%" height="15" fill="rgb(235,199,10)" fg:x="1070" fg:w="3"/><text x="83.9091%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="83.7373%" y="629" width="0.1564%" height="15" fill="rgb(228,148,35)" fg:x="1071" fg:w="2"/><text x="83.9873%" y="639.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="83.8155%" y="613" width="0.0782%" height="15" fill="rgb(217,87,19)" fg:x="1072" fg:w="1"/><text x="84.0655%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.9719%" y="469" width="0.0782%" height="15" fill="rgb(239,9,32)" fg:x="1074" fg:w="1"/><text x="84.2219%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.9719%" y="453" width="0.0782%" height="15" fill="rgb(229,101,29)" fg:x="1074" fg:w="1"/><text x="84.2219%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.9719%" y="437" width="0.0782%" height="15" fill="rgb(208,143,26)" fg:x="1074" fg:w="1"/><text x="84.2219%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.9719%" y="421" width="0.0782%" height="15" fill="rgb(214,10,2)" fg:x="1074" fg:w="1"/><text x="84.2219%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.9719%" y="405" width="0.0782%" height="15" fill="rgb(254,203,30)" fg:x="1074" fg:w="1"/><text x="84.2219%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.0500%" y="453" width="0.0782%" height="15" fill="rgb(242,45,3)" fg:x="1075" fg:w="1"/><text x="84.3000%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.0500%" y="437" width="0.0782%" height="15" fill="rgb(209,146,51)" fg:x="1075" fg:w="1"/><text x="84.3000%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="84.0500%" y="469" width="0.1564%" height="15" fill="rgb(222,80,5)" fg:x="1075" fg:w="2"/><text x="84.3000%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.1282%" y="453" width="0.0782%" height="15" fill="rgb(252,80,35)" fg:x="1076" fg:w="1"/><text x="84.3782%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.1282%" y="437" width="0.0782%" height="15" fill="rgb(246,125,28)" fg:x="1076" fg:w="1"/><text x="84.3782%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="84.1282%" y="421" width="0.0782%" height="15" fill="rgb(224,143,51)" fg:x="1076" fg:w="1"/><text x="84.3782%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.1282%" y="405" width="0.0782%" height="15" fill="rgb(205,24,17)" fg:x="1076" fg:w="1"/><text x="84.3782%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="84.2064%" y="469" width="0.0782%" height="15" fill="rgb(253,128,30)" fg:x="1077" fg:w="1"/><text x="84.4564%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.2064%" y="453" width="0.0782%" height="15" fill="rgb(214,153,25)" fg:x="1077" fg:w="1"/><text x="84.4564%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.2064%" y="437" width="0.0782%" height="15" fill="rgb(214,4,28)" fg:x="1077" fg:w="1"/><text x="84.4564%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="84.2064%" y="421" width="0.0782%" height="15" fill="rgb(235,179,52)" fg:x="1077" fg:w="1"/><text x="84.4564%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.2064%" y="405" width="0.0782%" height="15" fill="rgb(233,27,42)" fg:x="1077" fg:w="1"/><text x="84.4564%" y="415.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (5 samples, 0.39%)</title><rect x="83.9719%" y="565" width="0.3909%" height="15" fill="rgb(238,35,25)" fg:x="1074" fg:w="5"/><text x="84.2219%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (5 samples, 0.39%)</title><rect x="83.9719%" y="549" width="0.3909%" height="15" fill="rgb(227,44,31)" fg:x="1074" fg:w="5"/><text x="84.2219%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.39%)</title><rect x="83.9719%" y="533" width="0.3909%" height="15" fill="rgb(232,201,13)" fg:x="1074" fg:w="5"/><text x="84.2219%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.39%)</title><rect x="83.9719%" y="517" width="0.3909%" height="15" fill="rgb(224,172,52)" fg:x="1074" fg:w="5"/><text x="84.2219%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.39%)</title><rect x="83.9719%" y="501" width="0.3909%" height="15" fill="rgb(214,27,26)" fg:x="1074" fg:w="5"/><text x="84.2219%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.39%)</title><rect x="83.9719%" y="485" width="0.3909%" height="15" fill="rgb(210,185,52)" fg:x="1074" fg:w="5"/><text x="84.2219%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="84.2846%" y="469" width="0.0782%" height="15" fill="rgb(249,59,32)" fg:x="1078" fg:w="1"/><text x="84.5346%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="84.2846%" y="453" width="0.0782%" height="15" fill="rgb(242,209,18)" fg:x="1078" fg:w="1"/><text x="84.5346%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.2846%" y="437" width="0.0782%" height="15" fill="rgb(229,0,18)" fg:x="1078" fg:w="1"/><text x="84.5346%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.2846%" y="421" width="0.0782%" height="15" fill="rgb(217,138,29)" fg:x="1078" fg:w="1"/><text x="84.5346%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.2846%" y="405" width="0.0782%" height="15" fill="rgb(215,72,42)" fg:x="1078" fg:w="1"/><text x="84.5346%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.2846%" y="389" width="0.0782%" height="15" fill="rgb(254,115,11)" fg:x="1078" fg:w="1"/><text x="84.5346%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.2846%" y="373" width="0.0782%" height="15" fill="rgb(205,133,39)" fg:x="1078" fg:w="1"/><text x="84.5346%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.2846%" y="357" width="0.0782%" height="15" fill="rgb(211,36,27)" fg:x="1078" fg:w="1"/><text x="84.5346%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.2846%" y="341" width="0.0782%" height="15" fill="rgb(221,48,10)" fg:x="1078" fg:w="1"/><text x="84.5346%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.2846%" y="325" width="0.0782%" height="15" fill="rgb(230,172,50)" fg:x="1078" fg:w="1"/><text x="84.5346%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.2846%" y="309" width="0.0782%" height="15" fill="rgb(249,72,18)" fg:x="1078" fg:w="1"/><text x="84.5346%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.2846%" y="293" width="0.0782%" height="15" fill="rgb(237,58,48)" fg:x="1078" fg:w="1"/><text x="84.5346%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.2846%" y="277" width="0.0782%" height="15" fill="rgb(242,123,3)" fg:x="1078" fg:w="1"/><text x="84.5346%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.2846%" y="261" width="0.0782%" height="15" fill="rgb(232,111,32)" fg:x="1078" fg:w="1"/><text x="84.5346%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="84.2846%" y="245" width="0.0782%" height="15" fill="rgb(229,108,3)" fg:x="1078" fg:w="1"/><text x="84.5346%" y="255.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="84.3628%" y="373" width="0.0782%" height="15" fill="rgb(222,158,10)" fg:x="1079" fg:w="1"/><text x="84.6128%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="84.3628%" y="357" width="0.0782%" height="15" fill="rgb(205,34,49)" fg:x="1079" fg:w="1"/><text x="84.6128%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.3628%" y="341" width="0.0782%" height="15" fill="rgb(232,21,14)" fg:x="1079" fg:w="1"/><text x="84.6128%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.3628%" y="325" width="0.0782%" height="15" fill="rgb(229,127,44)" fg:x="1079" fg:w="1"/><text x="84.6128%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="84.3628%" y="309" width="0.0782%" height="15" fill="rgb(232,171,4)" fg:x="1079" fg:w="1"/><text x="84.6128%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.3628%" y="293" width="0.0782%" height="15" fill="rgb(250,92,16)" fg:x="1079" fg:w="1"/><text x="84.6128%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.3628%" y="277" width="0.0782%" height="15" fill="rgb(230,103,38)" fg:x="1079" fg:w="1"/><text x="84.6128%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.3628%" y="261" width="0.0782%" height="15" fill="rgb(253,167,9)" fg:x="1079" fg:w="1"/><text x="84.6128%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.3628%" y="245" width="0.0782%" height="15" fill="rgb(222,118,11)" fg:x="1079" fg:w="1"/><text x="84.6128%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="84.4410%" y="357" width="0.0782%" height="15" fill="rgb(240,202,0)" fg:x="1080" fg:w="1"/><text x="84.6910%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.4410%" y="341" width="0.0782%" height="15" fill="rgb(236,124,4)" fg:x="1080" fg:w="1"/><text x="84.6910%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.4410%" y="325" width="0.0782%" height="15" fill="rgb(244,128,18)" fg:x="1080" fg:w="1"/><text x="84.6910%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.4410%" y="309" width="0.0782%" height="15" fill="rgb(231,206,5)" fg:x="1080" fg:w="1"/><text x="84.6910%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.4410%" y="293" width="0.0782%" height="15" fill="rgb(237,111,8)" fg:x="1080" fg:w="1"/><text x="84.6910%" y="303.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="84.4410%" y="373" width="0.1564%" height="15" fill="rgb(225,127,3)" fg:x="1080" fg:w="2"/><text x="84.6910%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="84.5192%" y="357" width="0.0782%" height="15" fill="rgb(222,85,48)" fg:x="1081" fg:w="1"/><text x="84.7692%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.5192%" y="341" width="0.0782%" height="15" fill="rgb(221,108,37)" fg:x="1081" fg:w="1"/><text x="84.7692%" y="351.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="84.5973%" y="373" width="0.0782%" height="15" fill="rgb(226,169,36)" fg:x="1082" fg:w="1"/><text x="84.8473%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="84.5973%" y="357" width="0.0782%" height="15" fill="rgb(237,76,12)" fg:x="1082" fg:w="1"/><text x="84.8473%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="84.5973%" y="341" width="0.0782%" height="15" fill="rgb(210,227,32)" fg:x="1082" fg:w="1"/><text x="84.8473%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="84.5973%" y="325" width="0.0782%" height="15" fill="rgb(214,117,20)" fg:x="1082" fg:w="1"/><text x="84.8473%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.6755%" y="293" width="0.0782%" height="15" fill="rgb(234,119,41)" fg:x="1083" fg:w="1"/><text x="84.9255%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="84.6755%" y="341" width="0.1564%" height="15" fill="rgb(230,130,47)" fg:x="1083" fg:w="2"/><text x="84.9255%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="84.6755%" y="325" width="0.1564%" height="15" fill="rgb(215,21,41)" fg:x="1083" fg:w="2"/><text x="84.9255%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="84.6755%" y="309" width="0.1564%" height="15" fill="rgb(226,26,53)" fg:x="1083" fg:w="2"/><text x="84.9255%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.7537%" y="293" width="0.0782%" height="15" fill="rgb(221,92,23)" fg:x="1084" fg:w="1"/><text x="85.0037%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.23%)</title><rect x="84.6755%" y="373" width="0.2346%" height="15" fill="rgb(213,156,21)" fg:x="1083" fg:w="3"/><text x="84.9255%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.23%)</title><rect x="84.6755%" y="357" width="0.2346%" height="15" fill="rgb(254,166,29)" fg:x="1083" fg:w="3"/><text x="84.9255%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.8319%" y="341" width="0.0782%" height="15" fill="rgb(213,71,1)" fg:x="1085" fg:w="1"/><text x="85.0819%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.8319%" y="325" width="0.0782%" height="15" fill="rgb(245,8,13)" fg:x="1085" fg:w="1"/><text x="85.0819%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="84.9101%" y="373" width="0.0782%" height="15" fill="rgb(213,32,32)" fg:x="1086" fg:w="1"/><text x="85.1601%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.9101%" y="357" width="0.0782%" height="15" fill="rgb(251,86,50)" fg:x="1086" fg:w="1"/><text x="85.1601%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.9101%" y="341" width="0.0782%" height="15" fill="rgb(252,92,41)" fg:x="1086" fg:w="1"/><text x="85.1601%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.9101%" y="325" width="0.0782%" height="15" fill="rgb(234,70,35)" fg:x="1086" fg:w="1"/><text x="85.1601%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.9101%" y="309" width="0.0782%" height="15" fill="rgb(210,157,19)" fg:x="1086" fg:w="1"/><text x="85.1601%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.9101%" y="293" width="0.0782%" height="15" fill="rgb(206,20,45)" fg:x="1086" fg:w="1"/><text x="85.1601%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.9101%" y="277" width="0.0782%" height="15" fill="rgb(207,34,7)" fg:x="1086" fg:w="1"/><text x="85.1601%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.9101%" y="261" width="0.0782%" height="15" fill="rgb(253,151,14)" fg:x="1086" fg:w="1"/><text x="85.1601%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.9101%" y="245" width="0.0782%" height="15" fill="rgb(252,1,18)" fg:x="1086" fg:w="1"/><text x="85.1601%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="84.9101%" y="229" width="0.0782%" height="15" fill="rgb(214,77,52)" fg:x="1086" fg:w="1"/><text x="85.1601%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="84.9101%" y="213" width="0.0782%" height="15" fill="rgb(254,106,35)" fg:x="1086" fg:w="1"/><text x="85.1601%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="84.9101%" y="197" width="0.0782%" height="15" fill="rgb(212,67,40)" fg:x="1086" fg:w="1"/><text x="85.1601%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.9101%" y="181" width="0.0782%" height="15" fill="rgb(228,76,23)" fg:x="1086" fg:w="1"/><text x="85.1601%" y="191.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="84.9883%" y="325" width="0.0782%" height="15" fill="rgb(250,198,5)" fg:x="1087" fg:w="1"/><text x="85.2383%" y="335.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="84.9883%" y="309" width="0.0782%" height="15" fill="rgb(209,20,25)" fg:x="1087" fg:w="1"/><text x="85.2383%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="84.9883%" y="293" width="0.0782%" height="15" fill="rgb(236,32,4)" fg:x="1087" fg:w="1"/><text x="85.2383%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="85.1446%" y="245" width="0.0782%" height="15" fill="rgb(215,31,6)" fg:x="1089" fg:w="1"/><text x="85.3946%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.1446%" y="229" width="0.0782%" height="15" fill="rgb(207,186,49)" fg:x="1089" fg:w="1"/><text x="85.3946%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="85.1446%" y="213" width="0.0782%" height="15" fill="rgb(211,212,49)" fg:x="1089" fg:w="1"/><text x="85.3946%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.1446%" y="197" width="0.0782%" height="15" fill="rgb(229,51,41)" fg:x="1089" fg:w="1"/><text x="85.3946%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.1446%" y="181" width="0.0782%" height="15" fill="rgb(205,225,36)" fg:x="1089" fg:w="1"/><text x="85.3946%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.1446%" y="165" width="0.0782%" height="15" fill="rgb(209,213,45)" fg:x="1089" fg:w="1"/><text x="85.3946%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.2228%" y="213" width="0.0782%" height="15" fill="rgb(219,35,49)" fg:x="1090" fg:w="1"/><text x="85.4728%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.23%)</title><rect x="85.2228%" y="229" width="0.2346%" height="15" fill="rgb(215,205,22)" fg:x="1090" fg:w="3"/><text x="85.4728%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="85.3010%" y="213" width="0.1564%" height="15" fill="rgb(248,204,34)" fg:x="1091" fg:w="2"/><text x="85.5510%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="85.4574%" y="165" width="0.1564%" height="15" fill="rgb(219,223,31)" fg:x="1093" fg:w="2"/><text x="85.7074%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.23%)</title><rect x="85.6138%" y="165" width="0.2346%" height="15" fill="rgb(236,14,8)" fg:x="1095" fg:w="3"/><text x="85.8638%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.23%)</title><rect x="85.6138%" y="149" width="0.2346%" height="15" fill="rgb(243,129,23)" fg:x="1095" fg:w="3"/><text x="85.8638%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="85.7701%" y="133" width="0.0782%" height="15" fill="rgb(205,204,5)" fg:x="1097" fg:w="1"/><text x="86.0201%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.7701%" y="117" width="0.0782%" height="15" fill="rgb(244,115,32)" fg:x="1097" fg:w="1"/><text x="86.0201%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 1.80%)</title><rect x="85.4574%" y="213" width="1.7983%" height="15" fill="rgb(229,123,14)" fg:x="1093" fg:w="23"/><text x="85.7074%" y="223.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (23 samples, 1.80%)</title><rect x="85.4574%" y="197" width="1.7983%" height="15" fill="rgb(250,85,1)" fg:x="1093" fg:w="23"/><text x="85.7074%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (23 samples, 1.80%)</title><rect x="85.4574%" y="181" width="1.7983%" height="15" fill="rgb(209,141,54)" fg:x="1093" fg:w="23"/><text x="85.7074%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (18 samples, 1.41%)</title><rect x="85.8483%" y="165" width="1.4073%" height="15" fill="rgb(244,107,39)" fg:x="1098" fg:w="18"/><text x="86.0983%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (18 samples, 1.41%)</title><rect x="85.8483%" y="149" width="1.4073%" height="15" fill="rgb(230,68,26)" fg:x="1098" fg:w="18"/><text x="86.0983%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (18 samples, 1.41%)</title><rect x="85.8483%" y="133" width="1.4073%" height="15" fill="rgb(220,178,33)" fg:x="1098" fg:w="18"/><text x="86.0983%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="87.2557%" y="213" width="0.0782%" height="15" fill="rgb(220,77,53)" fg:x="1116" fg:w="1"/><text x="87.5057%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="87.2557%" y="197" width="0.0782%" height="15" fill="rgb(224,108,19)" fg:x="1116" fg:w="1"/><text x="87.5057%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.2557%" y="181" width="0.0782%" height="15" fill="rgb(223,203,27)" fg:x="1116" fg:w="1"/><text x="87.5057%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (28 samples, 2.19%)</title><rect x="85.2228%" y="245" width="2.1892%" height="15" fill="rgb(211,32,46)" fg:x="1090" fg:w="28"/><text x="85.4728%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (25 samples, 1.95%)</title><rect x="85.4574%" y="229" width="1.9547%" height="15" fill="rgb(240,101,27)" fg:x="1093" fg:w="25"/><text x="85.7074%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="87.3339%" y="213" width="0.0782%" height="15" fill="rgb(217,210,11)" fg:x="1117" fg:w="1"/><text x="87.5839%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="87.3339%" y="197" width="0.0782%" height="15" fill="rgb(236,130,21)" fg:x="1117" fg:w="1"/><text x="87.5839%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.3339%" y="181" width="0.0782%" height="15" fill="rgb(250,136,8)" fg:x="1117" fg:w="1"/><text x="87.5839%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.3339%" y="165" width="0.0782%" height="15" fill="rgb(243,223,36)" fg:x="1117" fg:w="1"/><text x="87.5839%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.3339%" y="149" width="0.0782%" height="15" fill="rgb(246,184,8)" fg:x="1117" fg:w="1"/><text x="87.5839%" y="159.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="87.4120%" y="245" width="0.0782%" height="15" fill="rgb(222,158,36)" fg:x="1118" fg:w="1"/><text x="87.6620%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="87.4120%" y="229" width="0.0782%" height="15" fill="rgb(210,220,19)" fg:x="1118" fg:w="1"/><text x="87.6620%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="87.4120%" y="213" width="0.0782%" height="15" fill="rgb(246,44,38)" fg:x="1118" fg:w="1"/><text x="87.6620%" y="223.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="87.4120%" y="197" width="0.0782%" height="15" fill="rgb(246,186,14)" fg:x="1118" fg:w="1"/><text x="87.6620%" y="207.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="87.4120%" y="181" width="0.0782%" height="15" fill="rgb(233,193,20)" fg:x="1118" fg:w="1"/><text x="87.6620%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="87.4902%" y="245" width="0.0782%" height="15" fill="rgb(215,60,5)" fg:x="1119" fg:w="1"/><text x="87.7402%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="87.4902%" y="229" width="0.0782%" height="15" fill="rgb(207,128,10)" fg:x="1119" fg:w="1"/><text x="87.7402%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="87.4902%" y="213" width="0.0782%" height="15" fill="rgb(238,84,54)" fg:x="1119" fg:w="1"/><text x="87.7402%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="87.4902%" y="197" width="0.0782%" height="15" fill="rgb(213,130,11)" fg:x="1119" fg:w="1"/><text x="87.7402%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.4902%" y="181" width="0.0782%" height="15" fill="rgb(235,62,9)" fg:x="1119" fg:w="1"/><text x="87.7402%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.4902%" y="165" width="0.0782%" height="15" fill="rgb(222,64,24)" fg:x="1119" fg:w="1"/><text x="87.7402%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.4902%" y="149" width="0.0782%" height="15" fill="rgb(238,193,42)" fg:x="1119" fg:w="1"/><text x="87.7402%" y="159.50"></text></g><g><title>regex::regex::string::Regex::new (33 samples, 2.58%)</title><rect x="85.0665%" y="293" width="2.5801%" height="15" fill="rgb(243,204,46)" fg:x="1088" fg:w="33"/><text x="85.3165%" y="303.50">re..</text></g><g><title>regex::builders::string::RegexBuilder::build (33 samples, 2.58%)</title><rect x="85.0665%" y="277" width="2.5801%" height="15" fill="rgb(243,196,11)" fg:x="1088" fg:w="33"/><text x="85.3165%" y="287.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (32 samples, 2.50%)</title><rect x="85.1446%" y="261" width="2.5020%" height="15" fill="rgb(232,77,22)" fg:x="1089" fg:w="32"/><text x="85.3946%" y="271.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="87.5684%" y="245" width="0.0782%" height="15" fill="rgb(215,80,25)" fg:x="1120" fg:w="1"/><text x="87.8184%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="87.5684%" y="229" width="0.0782%" height="15" fill="rgb(210,173,7)" fg:x="1120" fg:w="1"/><text x="87.8184%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="87.5684%" y="213" width="0.0782%" height="15" fill="rgb(207,101,10)" fg:x="1120" fg:w="1"/><text x="87.8184%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="87.5684%" y="197" width="0.0782%" height="15" fill="rgb(246,57,48)" fg:x="1120" fg:w="1"/><text x="87.8184%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (36 samples, 2.81%)</title><rect x="85.0665%" y="309" width="2.8147%" height="15" fill="rgb(236,184,40)" fg:x="1088" fg:w="36"/><text x="85.3165%" y="319.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.23%)</title><rect x="87.6466%" y="293" width="0.2346%" height="15" fill="rgb(210,205,13)" fg:x="1121" fg:w="3"/><text x="87.8966%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.23%)</title><rect x="87.6466%" y="277" width="0.2346%" height="15" fill="rgb(231,129,42)" fg:x="1121" fg:w="3"/><text x="87.8966%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.23%)</title><rect x="87.6466%" y="261" width="0.2346%" height="15" fill="rgb(220,229,54)" fg:x="1121" fg:w="3"/><text x="87.8966%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="87.7248%" y="245" width="0.1564%" height="15" fill="rgb(230,192,26)" fg:x="1122" fg:w="2"/><text x="87.9748%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="87.7248%" y="229" width="0.1564%" height="15" fill="rgb(253,18,30)" fg:x="1122" fg:w="2"/><text x="87.9748%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="87.8030%" y="213" width="0.0782%" height="15" fill="rgb(216,62,53)" fg:x="1123" fg:w="1"/><text x="88.0530%" y="223.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (1 samples, 0.08%)</title><rect x="87.8812%" y="293" width="0.0782%" height="15" fill="rgb(230,79,29)" fg:x="1124" fg:w="1"/><text x="88.1312%" y="303.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="87.8812%" y="277" width="0.0782%" height="15" fill="rgb(242,26,26)" fg:x="1124" fg:w="1"/><text x="88.1312%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="87.8812%" y="261" width="0.0782%" height="15" fill="rgb(227,125,21)" fg:x="1124" fg:w="1"/><text x="88.1312%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="87.8812%" y="245" width="0.0782%" height="15" fill="rgb(229,93,26)" fg:x="1124" fg:w="1"/><text x="88.1312%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="87.8812%" y="229" width="0.0782%" height="15" fill="rgb(227,228,8)" fg:x="1124" fg:w="1"/><text x="88.1312%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="87.8812%" y="213" width="0.0782%" height="15" fill="rgb(233,56,0)" fg:x="1124" fg:w="1"/><text x="88.1312%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.8812%" y="197" width="0.0782%" height="15" fill="rgb(225,185,17)" fg:x="1124" fg:w="1"/><text x="88.1312%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.8812%" y="181" width="0.0782%" height="15" fill="rgb(238,202,30)" fg:x="1124" fg:w="1"/><text x="88.1312%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.8812%" y="165" width="0.0782%" height="15" fill="rgb(236,60,13)" fg:x="1124" fg:w="1"/><text x="88.1312%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="87.9593%" y="229" width="0.1564%" height="15" fill="rgb(244,92,0)" fg:x="1125" fg:w="2"/><text x="88.2093%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="87.9593%" y="213" width="0.1564%" height="15" fill="rgb(225,57,15)" fg:x="1125" fg:w="2"/><text x="88.2093%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="88.1157%" y="229" width="0.0782%" height="15" fill="rgb(228,5,28)" fg:x="1127" fg:w="1"/><text x="88.3657%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="88.1157%" y="213" width="0.0782%" height="15" fill="rgb(252,34,51)" fg:x="1127" fg:w="1"/><text x="88.3657%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="88.1157%" y="197" width="0.0782%" height="15" fill="rgb(235,58,7)" fg:x="1127" fg:w="1"/><text x="88.3657%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::insert (1 samples, 0.08%)</title><rect x="88.1157%" y="181" width="0.0782%" height="15" fill="rgb(250,132,20)" fg:x="1127" fg:w="1"/><text x="88.3657%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="88.1939%" y="229" width="0.0782%" height="15" fill="rgb(217,164,0)" fg:x="1128" fg:w="1"/><text x="88.4439%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="88.1939%" y="213" width="0.0782%" height="15" fill="rgb(208,220,35)" fg:x="1128" fg:w="1"/><text x="88.4439%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="88.1939%" y="197" width="0.0782%" height="15" fill="rgb(227,42,51)" fg:x="1128" fg:w="1"/><text x="88.4439%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="88.1939%" y="181" width="0.0782%" height="15" fill="rgb(225,146,38)" fg:x="1128" fg:w="1"/><text x="88.4439%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.1939%" y="165" width="0.0782%" height="15" fill="rgb(252,108,37)" fg:x="1128" fg:w="1"/><text x="88.4439%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.1939%" y="149" width="0.0782%" height="15" fill="rgb(244,101,24)" fg:x="1128" fg:w="1"/><text x="88.4439%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.1939%" y="133" width="0.0782%" height="15" fill="rgb(213,161,50)" fg:x="1128" fg:w="1"/><text x="88.4439%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="88.2721%" y="117" width="0.0782%" height="15" fill="rgb(248,159,19)" fg:x="1129" fg:w="1"/><text x="88.5221%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.2721%" y="101" width="0.0782%" height="15" fill="rgb(233,179,15)" fg:x="1129" fg:w="1"/><text x="88.5221%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="88.3503%" y="117" width="0.1564%" height="15" fill="rgb(248,178,3)" fg:x="1130" fg:w="2"/><text x="88.6003%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="88.3503%" y="101" width="0.1564%" height="15" fill="rgb(245,190,41)" fg:x="1130" fg:w="2"/><text x="88.6003%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="88.4285%" y="85" width="0.0782%" height="15" fill="rgb(218,151,19)" fg:x="1131" fg:w="1"/><text x="88.6785%" y="95.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="88.4285%" y="69" width="0.0782%" height="15" fill="rgb(245,25,44)" fg:x="1131" fg:w="1"/><text x="88.6785%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="88.4285%" y="53" width="0.0782%" height="15" fill="rgb(235,172,47)" fg:x="1131" fg:w="1"/><text x="88.6785%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.5066%" y="85" width="0.0782%" height="15" fill="rgb(246,33,12)" fg:x="1132" fg:w="1"/><text x="88.7566%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 1.09%)</title><rect x="88.2721%" y="213" width="1.0946%" height="15" fill="rgb(214,124,7)" fg:x="1129" fg:w="14"/><text x="88.5221%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (14 samples, 1.09%)</title><rect x="88.2721%" y="197" width="1.0946%" height="15" fill="rgb(246,186,18)" fg:x="1129" fg:w="14"/><text x="88.5221%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (14 samples, 1.09%)</title><rect x="88.2721%" y="181" width="1.0946%" height="15" fill="rgb(231,94,1)" fg:x="1129" fg:w="14"/><text x="88.5221%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (14 samples, 1.09%)</title><rect x="88.2721%" y="165" width="1.0946%" height="15" fill="rgb(208,33,48)" fg:x="1129" fg:w="14"/><text x="88.5221%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (14 samples, 1.09%)</title><rect x="88.2721%" y="149" width="1.0946%" height="15" fill="rgb(208,195,44)" fg:x="1129" fg:w="14"/><text x="88.5221%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (14 samples, 1.09%)</title><rect x="88.2721%" y="133" width="1.0946%" height="15" fill="rgb(226,13,52)" fg:x="1129" fg:w="14"/><text x="88.5221%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (11 samples, 0.86%)</title><rect x="88.5066%" y="117" width="0.8600%" height="15" fill="rgb(217,219,45)" fg:x="1132" fg:w="11"/><text x="88.7566%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (11 samples, 0.86%)</title><rect x="88.5066%" y="101" width="0.8600%" height="15" fill="rgb(223,45,25)" fg:x="1132" fg:w="11"/><text x="88.7566%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (10 samples, 0.78%)</title><rect x="88.5848%" y="85" width="0.7819%" height="15" fill="rgb(241,163,0)" fg:x="1133" fg:w="10"/><text x="88.8348%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="89.3667%" y="197" width="0.0782%" height="15" fill="rgb(216,68,47)" fg:x="1143" fg:w="1"/><text x="89.6167%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (20 samples, 1.56%)</title><rect x="87.9593%" y="245" width="1.5637%" height="15" fill="rgb(236,119,45)" fg:x="1125" fg:w="20"/><text x="88.2093%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (16 samples, 1.25%)</title><rect x="88.2721%" y="229" width="1.2510%" height="15" fill="rgb(209,188,24)" fg:x="1129" fg:w="16"/><text x="88.5221%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="89.3667%" y="213" width="0.1564%" height="15" fill="rgb(221,118,7)" fg:x="1143" fg:w="2"/><text x="89.6167%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="89.4449%" y="197" width="0.0782%" height="15" fill="rgb(213,148,43)" fg:x="1144" fg:w="1"/><text x="89.6949%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="89.5231%" y="197" width="0.0782%" height="15" fill="rgb(231,21,43)" fg:x="1145" fg:w="1"/><text x="89.7731%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="89.5231%" y="213" width="0.1564%" height="15" fill="rgb(232,213,43)" fg:x="1145" fg:w="2"/><text x="89.7731%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="89.6013%" y="197" width="0.0782%" height="15" fill="rgb(239,145,50)" fg:x="1146" fg:w="1"/><text x="89.8513%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.23%)</title><rect x="89.5231%" y="245" width="0.2346%" height="15" fill="rgb(222,131,18)" fg:x="1145" fg:w="3"/><text x="89.7731%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.23%)</title><rect x="89.5231%" y="229" width="0.2346%" height="15" fill="rgb(243,181,13)" fg:x="1145" fg:w="3"/><text x="89.7731%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="89.6794%" y="213" width="0.0782%" height="15" fill="rgb(212,74,41)" fg:x="1147" fg:w="1"/><text x="89.9294%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="89.6794%" y="197" width="0.0782%" height="15" fill="rgb(237,143,34)" fg:x="1147" fg:w="1"/><text x="89.9294%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (25 samples, 1.95%)</title><rect x="87.8812%" y="309" width="1.9547%" height="15" fill="rgb(228,139,0)" fg:x="1124" fg:w="25"/><text x="88.1312%" y="319.50">i..</text></g><g><title>regex::regex::string::Regex::new (24 samples, 1.88%)</title><rect x="87.9593%" y="293" width="1.8765%" height="15" fill="rgb(227,214,11)" fg:x="1125" fg:w="24"/><text x="88.2093%" y="303.50">r..</text></g><g><title>regex::builders::string::RegexBuilder::build (24 samples, 1.88%)</title><rect x="87.9593%" y="277" width="1.8765%" height="15" fill="rgb(228,118,39)" fg:x="1125" fg:w="24"/><text x="88.2093%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (24 samples, 1.88%)</title><rect x="87.9593%" y="261" width="1.8765%" height="15" fill="rgb(207,117,22)" fg:x="1125" fg:w="24"/><text x="88.2093%" y="271.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="89.7576%" y="245" width="0.0782%" height="15" fill="rgb(225,91,8)" fg:x="1148" fg:w="1"/><text x="90.0076%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="89.7576%" y="229" width="0.0782%" height="15" fill="rgb(230,219,48)" fg:x="1148" fg:w="1"/><text x="90.0076%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="89.7576%" y="213" width="0.0782%" height="15" fill="rgb(244,0,23)" fg:x="1148" fg:w="1"/><text x="90.0076%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="89.7576%" y="197" width="0.0782%" height="15" fill="rgb(206,212,23)" fg:x="1148" fg:w="1"/><text x="90.0076%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.8358%" y="213" width="0.0782%" height="15" fill="rgb(254,62,10)" fg:x="1149" fg:w="1"/><text x="90.0858%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="89.9140%" y="213" width="0.1564%" height="15" fill="rgb(236,58,8)" fg:x="1150" fg:w="2"/><text x="90.1640%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="89.9140%" y="197" width="0.1564%" height="15" fill="rgb(232,212,17)" fg:x="1150" fg:w="2"/><text x="90.1640%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="90.1486%" y="181" width="0.0782%" height="15" fill="rgb(206,132,9)" fg:x="1153" fg:w="1"/><text x="90.3986%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.1486%" y="165" width="0.0782%" height="15" fill="rgb(234,97,28)" fg:x="1153" fg:w="1"/><text x="90.3986%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (6 samples, 0.47%)</title><rect x="89.8358%" y="229" width="0.4691%" height="15" fill="rgb(254,144,9)" fg:x="1149" fg:w="6"/><text x="90.0858%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.23%)</title><rect x="90.0704%" y="213" width="0.2346%" height="15" fill="rgb(244,204,43)" fg:x="1152" fg:w="3"/><text x="90.3204%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.23%)</title><rect x="90.0704%" y="197" width="0.2346%" height="15" fill="rgb(248,177,16)" fg:x="1152" fg:w="3"/><text x="90.3204%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="90.2267%" y="181" width="0.0782%" height="15" fill="rgb(219,110,15)" fg:x="1154" fg:w="1"/><text x="90.4767%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.3049%" y="197" width="0.0782%" height="15" fill="rgb(212,203,25)" fg:x="1155" fg:w="1"/><text x="90.5549%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.3049%" y="181" width="0.0782%" height="15" fill="rgb(205,50,1)" fg:x="1155" fg:w="1"/><text x="90.5549%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="90.3831%" y="181" width="0.0782%" height="15" fill="rgb(222,152,41)" fg:x="1156" fg:w="1"/><text x="90.6331%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.3831%" y="165" width="0.0782%" height="15" fill="rgb(236,83,3)" fg:x="1156" fg:w="1"/><text x="90.6331%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.3831%" y="149" width="0.0782%" height="15" fill="rgb(214,30,54)" fg:x="1156" fg:w="1"/><text x="90.6331%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.3831%" y="133" width="0.0782%" height="15" fill="rgb(250,117,31)" fg:x="1156" fg:w="1"/><text x="90.6331%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.23%)</title><rect x="90.3049%" y="229" width="0.2346%" height="15" fill="rgb(228,77,14)" fg:x="1155" fg:w="3"/><text x="90.5549%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.23%)</title><rect x="90.3049%" y="213" width="0.2346%" height="15" fill="rgb(241,3,28)" fg:x="1155" fg:w="3"/><text x="90.5549%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="90.3831%" y="197" width="0.1564%" height="15" fill="rgb(221,175,52)" fg:x="1156" fg:w="2"/><text x="90.6331%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="90.4613%" y="181" width="0.0782%" height="15" fill="rgb(237,91,6)" fg:x="1157" fg:w="1"/><text x="90.7113%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (80 samples, 6.25%)</title><rect x="84.3628%" y="389" width="6.2549%" height="15" fill="rgb(246,46,42)" fg:x="1079" fg:w="80"/><text x="84.6128%" y="399.50">&lt;&amp;kernel..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (72 samples, 5.63%)</title><rect x="84.9883%" y="373" width="5.6294%" height="15" fill="rgb(235,199,0)" fg:x="1087" fg:w="72"/><text x="85.2383%" y="383.50">plugins..</text></g><g><title>indefinite::indefinite (72 samples, 5.63%)</title><rect x="84.9883%" y="357" width="5.6294%" height="15" fill="rgb(224,44,40)" fg:x="1087" fg:w="72"/><text x="85.2383%" y="367.50">indefin..</text></g><g><title>indefinite::methods::indefinite (72 samples, 5.63%)</title><rect x="84.9883%" y="341" width="5.6294%" height="15" fill="rgb(209,24,35)" fg:x="1087" fg:w="72"/><text x="85.2383%" y="351.50">indefin..</text></g><g><title>indefinite::methods::apply_rules (71 samples, 5.55%)</title><rect x="85.0665%" y="325" width="5.5512%" height="15" fill="rgb(244,46,22)" fg:x="1088" fg:w="71"/><text x="85.3165%" y="335.50">indefin..</text></g><g><title>indefinite::rules::other::Other::run (10 samples, 0.78%)</title><rect x="89.8358%" y="309" width="0.7819%" height="15" fill="rgb(235,99,8)" fg:x="1149" fg:w="10"/><text x="90.0858%" y="319.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (10 samples, 0.78%)</title><rect x="89.8358%" y="293" width="0.7819%" height="15" fill="rgb(218,127,36)" fg:x="1149" fg:w="10"/><text x="90.0858%" y="303.50"></text></g><g><title>regex::regex::string::Regex::new (10 samples, 0.78%)</title><rect x="89.8358%" y="277" width="0.7819%" height="15" fill="rgb(238,47,46)" fg:x="1149" fg:w="10"/><text x="90.0858%" y="287.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (10 samples, 0.78%)</title><rect x="89.8358%" y="261" width="0.7819%" height="15" fill="rgb(233,65,17)" fg:x="1149" fg:w="10"/><text x="90.0858%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (10 samples, 0.78%)</title><rect x="89.8358%" y="245" width="0.7819%" height="15" fill="rgb(239,22,33)" fg:x="1149" fg:w="10"/><text x="90.0858%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="90.5395%" y="229" width="0.0782%" height="15" fill="rgb(243,66,43)" fg:x="1158" fg:w="1"/><text x="90.7895%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="90.5395%" y="213" width="0.0782%" height="15" fill="rgb(235,210,28)" fg:x="1158" fg:w="1"/><text x="90.7895%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="90.5395%" y="197" width="0.0782%" height="15" fill="rgb(205,191,50)" fg:x="1158" fg:w="1"/><text x="90.7895%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (1 samples, 0.08%)</title><rect x="90.6177%" y="389" width="0.0782%" height="15" fill="rgb(251,217,19)" fg:x="1159" fg:w="1"/><text x="90.8677%" y="399.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (1 samples, 0.08%)</title><rect x="90.6177%" y="373" width="0.0782%" height="15" fill="rgb(205,174,37)" fg:x="1159" fg:w="1"/><text x="90.8677%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="90.6177%" y="357" width="0.0782%" height="15" fill="rgb(212,158,42)" fg:x="1159" fg:w="1"/><text x="90.8677%" y="367.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="90.6177%" y="341" width="0.0782%" height="15" fill="rgb(212,208,51)" fg:x="1159" fg:w="1"/><text x="90.8677%" y="351.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="90.6177%" y="325" width="0.0782%" height="15" fill="rgb(225,198,20)" fg:x="1159" fg:w="1"/><text x="90.8677%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="90.6177%" y="309" width="0.0782%" height="15" fill="rgb(247,41,44)" fg:x="1159" fg:w="1"/><text x="90.8677%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="90.6177%" y="293" width="0.0782%" height="15" fill="rgb(228,33,41)" fg:x="1159" fg:w="1"/><text x="90.8677%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (1 samples, 0.08%)</title><rect x="90.6959%" y="373" width="0.0782%" height="15" fill="rgb(215,47,52)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="90.6959%" y="357" width="0.0782%" height="15" fill="rgb(248,106,37)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="367.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (1 samples, 0.08%)</title><rect x="90.6959%" y="341" width="0.0782%" height="15" fill="rgb(238,91,29)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="351.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="90.6959%" y="325" width="0.0782%" height="15" fill="rgb(226,111,40)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="335.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="90.6959%" y="309" width="0.0782%" height="15" fill="rgb(229,159,36)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="319.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="90.6959%" y="293" width="0.0782%" height="15" fill="rgb(221,109,4)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="303.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="90.6959%" y="277" width="0.0782%" height="15" fill="rgb(236,56,25)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="287.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="90.6959%" y="261" width="0.0782%" height="15" fill="rgb(244,113,23)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.6959%" y="245" width="0.0782%" height="15" fill="rgb(249,132,2)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.6959%" y="229" width="0.0782%" height="15" fill="rgb(205,185,21)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.6959%" y="213" width="0.0782%" height="15" fill="rgb(245,130,2)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.6959%" y="197" width="0.0782%" height="15" fill="rgb(246,71,26)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.6959%" y="181" width="0.0782%" height="15" fill="rgb(234,194,6)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="191.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="90.6959%" y="165" width="0.0782%" height="15" fill="rgb(206,24,32)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="175.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="90.6959%" y="149" width="0.0782%" height="15" fill="rgb(233,7,54)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="159.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="90.6959%" y="133" width="0.0782%" height="15" fill="rgb(252,46,1)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="90.6959%" y="117" width="0.0782%" height="15" fill="rgb(216,113,53)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="90.6959%" y="101" width="0.0782%" height="15" fill="rgb(215,40,24)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="90.6959%" y="85" width="0.0782%" height="15" fill="rgb(233,222,8)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="90.6959%" y="69" width="0.0782%" height="15" fill="rgb(248,73,28)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="79.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="90.6959%" y="53" width="0.0782%" height="15" fill="rgb(247,126,28)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="63.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="90.6959%" y="37" width="0.0782%" height="15" fill="rgb(242,173,54)" fg:x="1160" fg:w="1"/><text x="90.9459%" y="47.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.7740%" y="293" width="0.0782%" height="15" fill="rgb(244,186,22)" fg:x="1161" fg:w="1"/><text x="91.0240%" y="303.50"></text></g><g><title>plugins_core::library::actions::reply_ok (3 samples, 0.23%)</title><rect x="90.6959%" y="389" width="0.2346%" height="15" fill="rgb(231,187,4)" fg:x="1160" fg:w="3"/><text x="90.9459%" y="399.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="90.7740%" y="373" width="0.1564%" height="15" fill="rgb(252,66,47)" fg:x="1161" fg:w="2"/><text x="91.0240%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (2 samples, 0.16%)</title><rect x="90.7740%" y="357" width="0.1564%" height="15" fill="rgb(240,228,28)" fg:x="1161" fg:w="2"/><text x="91.0240%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="90.7740%" y="341" width="0.1564%" height="15" fill="rgb(237,63,43)" fg:x="1161" fg:w="2"/><text x="91.0240%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="90.7740%" y="325" width="0.1564%" height="15" fill="rgb(214,1,44)" fg:x="1161" fg:w="2"/><text x="91.0240%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="90.7740%" y="309" width="0.1564%" height="15" fill="rgb(212,2,46)" fg:x="1161" fg:w="2"/><text x="91.0240%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="90.8522%" y="293" width="0.0782%" height="15" fill="rgb(213,142,5)" fg:x="1162" fg:w="1"/><text x="91.1022%" y="303.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="91.0086%" y="373" width="0.0782%" height="15" fill="rgb(229,135,1)" fg:x="1164" fg:w="1"/><text x="91.2586%" y="383.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="91.0086%" y="357" width="0.0782%" height="15" fill="rgb(252,98,38)" fg:x="1164" fg:w="1"/><text x="91.2586%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="91.0086%" y="341" width="0.0782%" height="15" fill="rgb(206,89,40)" fg:x="1164" fg:w="1"/><text x="91.2586%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="91.0086%" y="325" width="0.0782%" height="15" fill="rgb(219,73,36)" fg:x="1164" fg:w="1"/><text x="91.2586%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="91.0086%" y="309" width="0.0782%" height="15" fill="rgb(207,168,32)" fg:x="1164" fg:w="1"/><text x="91.2586%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="91.0086%" y="293" width="0.0782%" height="15" fill="rgb(215,113,21)" fg:x="1164" fg:w="1"/><text x="91.2586%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="91.0868%" y="309" width="0.0782%" height="15" fill="rgb(217,144,43)" fg:x="1165" fg:w="1"/><text x="91.3368%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.0868%" y="293" width="0.0782%" height="15" fill="rgb(249,48,50)" fg:x="1165" fg:w="1"/><text x="91.3368%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.0868%" y="277" width="0.0782%" height="15" fill="rgb(242,1,26)" fg:x="1165" fg:w="1"/><text x="91.3368%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="91.0868%" y="261" width="0.0782%" height="15" fill="rgb(231,167,42)" fg:x="1165" fg:w="1"/><text x="91.3368%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.0868%" y="245" width="0.0782%" height="15" fill="rgb(242,177,45)" fg:x="1165" fg:w="1"/><text x="91.3368%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="91.0868%" y="229" width="0.0782%" height="15" fill="rgb(232,121,42)" fg:x="1165" fg:w="1"/><text x="91.3368%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="91.0868%" y="213" width="0.0782%" height="15" fill="rgb(205,8,42)" fg:x="1165" fg:w="1"/><text x="91.3368%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.0868%" y="197" width="0.0782%" height="15" fill="rgb(238,199,24)" fg:x="1165" fg:w="1"/><text x="91.3368%" y="207.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="91.0868%" y="373" width="0.1564%" height="15" fill="rgb(228,112,2)" fg:x="1165" fg:w="2"/><text x="91.3368%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="91.0868%" y="357" width="0.1564%" height="15" fill="rgb(215,115,33)" fg:x="1165" fg:w="2"/><text x="91.3368%" y="367.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="91.0868%" y="341" width="0.1564%" height="15" fill="rgb(230,209,34)" fg:x="1165" fg:w="2"/><text x="91.3368%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="91.0868%" y="325" width="0.1564%" height="15" fill="rgb(246,76,12)" fg:x="1165" fg:w="2"/><text x="91.3368%" y="335.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="91.1650%" y="309" width="0.0782%" height="15" fill="rgb(240,110,9)" fg:x="1166" fg:w="1"/><text x="91.4150%" y="319.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (89 samples, 6.96%)</title><rect x="84.3628%" y="405" width="6.9586%" height="15" fill="rgb(224,94,46)" fg:x="1079" fg:w="89"/><text x="84.6128%" y="415.50">&lt;plugins_..</text></g><g><title>plugins_core::location::model::change_location (5 samples, 0.39%)</title><rect x="90.9304%" y="389" width="0.3909%" height="15" fill="rgb(247,150,22)" fg:x="1163" fg:w="5"/><text x="91.1804%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="91.2432%" y="373" width="0.0782%" height="15" fill="rgb(249,85,13)" fg:x="1167" fg:w="1"/><text x="91.4932%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="91.2432%" y="357" width="0.0782%" height="15" fill="rgb(208,77,41)" fg:x="1167" fg:w="1"/><text x="91.4932%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.2432%" y="341" width="0.0782%" height="15" fill="rgb(240,42,44)" fg:x="1167" fg:w="1"/><text x="91.4932%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.2432%" y="325" width="0.0782%" height="15" fill="rgb(222,10,51)" fg:x="1167" fg:w="1"/><text x="91.4932%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.2432%" y="309" width="0.0782%" height="15" fill="rgb(208,146,53)" fg:x="1167" fg:w="1"/><text x="91.4932%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.2432%" y="293" width="0.0782%" height="15" fill="rgb(236,162,23)" fg:x="1167" fg:w="1"/><text x="91.4932%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.2432%" y="277" width="0.0782%" height="15" fill="rgb(218,66,21)" fg:x="1167" fg:w="1"/><text x="91.4932%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="91.3213%" y="341" width="0.0782%" height="15" fill="rgb(233,6,47)" fg:x="1168" fg:w="1"/><text x="91.5713%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="91.3213%" y="325" width="0.0782%" height="15" fill="rgb(236,59,51)" fg:x="1168" fg:w="1"/><text x="91.5713%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="91.3213%" y="309" width="0.0782%" height="15" fill="rgb(242,12,46)" fg:x="1168" fg:w="1"/><text x="91.5713%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="91.3213%" y="293" width="0.0782%" height="15" fill="rgb(243,142,19)" fg:x="1168" fg:w="1"/><text x="91.5713%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="91.3213%" y="277" width="0.0782%" height="15" fill="rgb(217,28,17)" fg:x="1168" fg:w="1"/><text x="91.5713%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="91.3213%" y="261" width="0.0782%" height="15" fill="rgb(228,2,27)" fg:x="1168" fg:w="1"/><text x="91.5713%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="91.3213%" y="245" width="0.0782%" height="15" fill="rgb(214,221,4)" fg:x="1168" fg:w="1"/><text x="91.5713%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="91.3213%" y="229" width="0.0782%" height="15" fill="rgb(224,69,26)" fg:x="1168" fg:w="1"/><text x="91.5713%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="91.3213%" y="213" width="0.0782%" height="15" fill="rgb(219,70,4)" fg:x="1168" fg:w="1"/><text x="91.5713%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="91.3213%" y="197" width="0.0782%" height="15" fill="rgb(218,157,39)" fg:x="1168" fg:w="1"/><text x="91.5713%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="91.3213%" y="181" width="0.0782%" height="15" fill="rgb(238,36,28)" fg:x="1168" fg:w="1"/><text x="91.5713%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="91.3213%" y="165" width="0.0782%" height="15" fill="rgb(232,29,0)" fg:x="1168" fg:w="1"/><text x="91.5713%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="91.3213%" y="149" width="0.0782%" height="15" fill="rgb(243,138,46)" fg:x="1168" fg:w="1"/><text x="91.5713%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="91.3213%" y="133" width="0.0782%" height="15" fill="rgb(232,186,41)" fg:x="1168" fg:w="1"/><text x="91.5713%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.3213%" y="117" width="0.0782%" height="15" fill="rgb(252,166,17)" fg:x="1168" fg:w="1"/><text x="91.5713%" y="127.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="91.3213%" y="373" width="0.1564%" height="15" fill="rgb(228,179,12)" fg:x="1168" fg:w="2"/><text x="91.5713%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="91.3213%" y="357" width="0.1564%" height="15" fill="rgb(254,205,53)" fg:x="1168" fg:w="2"/><text x="91.5713%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="91.3995%" y="341" width="0.0782%" height="15" fill="rgb(224,163,47)" fg:x="1169" fg:w="1"/><text x="91.6495%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="91.4777%" y="341" width="0.0782%" height="15" fill="rgb(208,43,47)" fg:x="1170" fg:w="1"/><text x="91.7277%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.4777%" y="325" width="0.0782%" height="15" fill="rgb(224,198,38)" fg:x="1170" fg:w="1"/><text x="91.7277%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="91.4777%" y="373" width="0.1564%" height="15" fill="rgb(234,12,40)" fg:x="1170" fg:w="2"/><text x="91.7277%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="91.4777%" y="357" width="0.1564%" height="15" fill="rgb(237,212,39)" fg:x="1170" fg:w="2"/><text x="91.7277%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.5559%" y="341" width="0.0782%" height="15" fill="rgb(253,2,33)" fg:x="1171" fg:w="1"/><text x="91.8059%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.5559%" y="325" width="0.0782%" height="15" fill="rgb(251,29,16)" fg:x="1171" fg:w="1"/><text x="91.8059%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="91.5559%" y="309" width="0.0782%" height="15" fill="rgb(214,38,29)" fg:x="1171" fg:w="1"/><text x="91.8059%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.5559%" y="293" width="0.0782%" height="15" fill="rgb(226,226,29)" fg:x="1171" fg:w="1"/><text x="91.8059%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="91.5559%" y="277" width="0.0782%" height="15" fill="rgb(236,79,42)" fg:x="1171" fg:w="1"/><text x="91.8059%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="91.5559%" y="261" width="0.0782%" height="15" fill="rgb(222,12,36)" fg:x="1171" fg:w="1"/><text x="91.8059%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.6341%" y="245" width="0.0782%" height="15" fill="rgb(232,123,44)" fg:x="1172" fg:w="1"/><text x="91.8841%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="91.7123%" y="245" width="0.1564%" height="15" fill="rgb(234,93,50)" fg:x="1173" fg:w="2"/><text x="91.9623%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.7905%" y="229" width="0.0782%" height="15" fill="rgb(210,86,49)" fg:x="1174" fg:w="1"/><text x="92.0405%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.9468%" y="213" width="0.0782%" height="15" fill="rgb(224,91,54)" fg:x="1176" fg:w="1"/><text x="92.1968%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.55%)</title><rect x="91.9468%" y="229" width="0.5473%" height="15" fill="rgb(239,169,9)" fg:x="1176" fg:w="7"/><text x="92.1968%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.47%)</title><rect x="92.0250%" y="213" width="0.4691%" height="15" fill="rgb(238,29,17)" fg:x="1177" fg:w="6"/><text x="92.2750%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (10 samples, 0.78%)</title><rect x="92.4941%" y="165" width="0.7819%" height="15" fill="rgb(227,160,22)" fg:x="1183" fg:w="10"/><text x="92.7441%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (10 samples, 0.78%)</title><rect x="92.4941%" y="149" width="0.7819%" height="15" fill="rgb(231,129,52)" fg:x="1183" fg:w="10"/><text x="92.7441%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (10 samples, 0.78%)</title><rect x="92.4941%" y="133" width="0.7819%" height="15" fill="rgb(241,184,9)" fg:x="1183" fg:w="10"/><text x="92.7441%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (19 samples, 1.49%)</title><rect x="91.8686%" y="245" width="1.4855%" height="15" fill="rgb(217,43,48)" fg:x="1175" fg:w="19"/><text x="92.1186%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (11 samples, 0.86%)</title><rect x="92.4941%" y="229" width="0.8600%" height="15" fill="rgb(213,49,1)" fg:x="1183" fg:w="11"/><text x="92.7441%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.86%)</title><rect x="92.4941%" y="213" width="0.8600%" height="15" fill="rgb(223,79,39)" fg:x="1183" fg:w="11"/><text x="92.7441%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (11 samples, 0.86%)</title><rect x="92.4941%" y="197" width="0.8600%" height="15" fill="rgb(228,227,46)" fg:x="1183" fg:w="11"/><text x="92.7441%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (11 samples, 0.86%)</title><rect x="92.4941%" y="181" width="0.8600%" height="15" fill="rgb(245,89,41)" fg:x="1183" fg:w="11"/><text x="92.7441%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="93.2760%" y="165" width="0.0782%" height="15" fill="rgb(253,83,21)" fg:x="1193" fg:w="1"/><text x="93.5260%" y="175.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="93.3542%" y="245" width="0.0782%" height="15" fill="rgb(229,116,51)" fg:x="1194" fg:w="1"/><text x="93.6042%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="93.3542%" y="229" width="0.0782%" height="15" fill="rgb(246,67,26)" fg:x="1194" fg:w="1"/><text x="93.6042%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="93.3542%" y="213" width="0.0782%" height="15" fill="rgb(250,117,20)" fg:x="1194" fg:w="1"/><text x="93.6042%" y="223.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="93.3542%" y="197" width="0.0782%" height="15" fill="rgb(207,88,17)" fg:x="1194" fg:w="1"/><text x="93.6042%" y="207.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="93.3542%" y="181" width="0.0782%" height="15" fill="rgb(212,98,36)" fg:x="1194" fg:w="1"/><text x="93.6042%" y="191.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (24 samples, 1.88%)</title><rect x="91.6341%" y="277" width="1.8765%" height="15" fill="rgb(221,72,6)" fg:x="1172" fg:w="24"/><text x="91.8841%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (24 samples, 1.88%)</title><rect x="91.6341%" y="261" width="1.8765%" height="15" fill="rgb(235,129,19)" fg:x="1172" fg:w="24"/><text x="91.8841%" y="271.50">r..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="93.4324%" y="245" width="0.0782%" height="15" fill="rgb(237,200,6)" fg:x="1195" fg:w="1"/><text x="93.6824%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="93.4324%" y="229" width="0.0782%" height="15" fill="rgb(239,69,54)" fg:x="1195" fg:w="1"/><text x="93.6824%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="93.4324%" y="213" width="0.0782%" height="15" fill="rgb(214,68,45)" fg:x="1195" fg:w="1"/><text x="93.6824%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="93.4324%" y="197" width="0.0782%" height="15" fill="rgb(254,160,8)" fg:x="1195" fg:w="1"/><text x="93.6824%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="93.4324%" y="181" width="0.0782%" height="15" fill="rgb(215,226,31)" fg:x="1195" fg:w="1"/><text x="93.6824%" y="191.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (25 samples, 1.95%)</title><rect x="91.6341%" y="309" width="1.9547%" height="15" fill="rgb(253,6,35)" fg:x="1172" fg:w="25"/><text x="91.8841%" y="319.50">i..</text></g><g><title>regex::regex::string::Regex::new (25 samples, 1.95%)</title><rect x="91.6341%" y="293" width="1.9547%" height="15" fill="rgb(219,96,42)" fg:x="1172" fg:w="25"/><text x="91.8841%" y="303.50">r..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="93.5106%" y="277" width="0.0782%" height="15" fill="rgb(207,170,13)" fg:x="1196" fg:w="1"/><text x="93.7606%" y="287.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="93.5106%" y="261" width="0.0782%" height="15" fill="rgb(239,101,5)" fg:x="1196" fg:w="1"/><text x="93.7606%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Config::nfa_size_limit (1 samples, 0.08%)</title><rect x="93.5106%" y="245" width="0.0782%" height="15" fill="rgb(228,183,34)" fg:x="1196" fg:w="1"/><text x="93.7606%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="93.5887%" y="293" width="0.0782%" height="15" fill="rgb(205,28,31)" fg:x="1197" fg:w="1"/><text x="93.8387%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="93.5887%" y="277" width="0.0782%" height="15" fill="rgb(214,118,50)" fg:x="1197" fg:w="1"/><text x="93.8387%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="93.5887%" y="261" width="0.0782%" height="15" fill="rgb(213,108,51)" fg:x="1197" fg:w="1"/><text x="93.8387%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="93.5887%" y="245" width="0.0782%" height="15" fill="rgb(238,56,37)" fg:x="1197" fg:w="1"/><text x="93.8387%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.5887%" y="229" width="0.0782%" height="15" fill="rgb(214,136,28)" fg:x="1197" fg:w="1"/><text x="93.8387%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="93.6669%" y="277" width="0.0782%" height="15" fill="rgb(221,201,54)" fg:x="1198" fg:w="1"/><text x="93.9169%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="93.6669%" y="261" width="0.0782%" height="15" fill="rgb(228,216,39)" fg:x="1198" fg:w="1"/><text x="93.9169%" y="271.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.31%)</title><rect x="93.6669%" y="293" width="0.3127%" height="15" fill="rgb(207,229,49)" fg:x="1198" fg:w="4"/><text x="93.9169%" y="303.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.23%)</title><rect x="93.7451%" y="277" width="0.2346%" height="15" fill="rgb(224,23,43)" fg:x="1199" fg:w="3"/><text x="93.9951%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.23%)</title><rect x="93.7451%" y="261" width="0.2346%" height="15" fill="rgb(247,97,18)" fg:x="1199" fg:w="3"/><text x="93.9951%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.23%)</title><rect x="93.7451%" y="245" width="0.2346%" height="15" fill="rgb(232,53,32)" fg:x="1199" fg:w="3"/><text x="93.9951%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.23%)</title><rect x="93.7451%" y="229" width="0.2346%" height="15" fill="rgb(247,38,23)" fg:x="1199" fg:w="3"/><text x="93.9951%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.23%)</title><rect x="93.7451%" y="213" width="0.2346%" height="15" fill="rgb(228,101,52)" fg:x="1199" fg:w="3"/><text x="93.9951%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="93.9015%" y="197" width="0.0782%" height="15" fill="rgb(231,45,36)" fg:x="1201" fg:w="1"/><text x="94.1515%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="93.9797%" y="245" width="0.0782%" height="15" fill="rgb(221,183,50)" fg:x="1202" fg:w="1"/><text x="94.2297%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.9797%" y="229" width="0.0782%" height="15" fill="rgb(251,132,12)" fg:x="1202" fg:w="1"/><text x="94.2297%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.9797%" y="213" width="0.0782%" height="15" fill="rgb(252,50,16)" fg:x="1202" fg:w="1"/><text x="94.2297%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.31%)</title><rect x="94.0579%" y="229" width="0.3127%" height="15" fill="rgb(224,60,15)" fg:x="1203" fg:w="4"/><text x="94.3079%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.31%)</title><rect x="94.0579%" y="213" width="0.3127%" height="15" fill="rgb(254,2,34)" fg:x="1203" fg:w="4"/><text x="94.3079%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="94.3706%" y="229" width="0.0782%" height="15" fill="rgb(232,154,8)" fg:x="1207" fg:w="1"/><text x="94.6206%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="94.3706%" y="213" width="0.0782%" height="15" fill="rgb(235,190,52)" fg:x="1207" fg:w="1"/><text x="94.6206%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="94.5270%" y="197" width="0.0782%" height="15" fill="rgb(213,218,38)" fg:x="1209" fg:w="1"/><text x="94.7770%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (3 samples, 0.23%)</title><rect x="94.4488%" y="229" width="0.2346%" height="15" fill="rgb(237,50,37)" fg:x="1208" fg:w="3"/><text x="94.6988%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (3 samples, 0.23%)</title><rect x="94.4488%" y="213" width="0.2346%" height="15" fill="rgb(235,51,35)" fg:x="1208" fg:w="3"/><text x="94.6988%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="94.6052%" y="197" width="0.0782%" height="15" fill="rgb(244,40,52)" fg:x="1210" fg:w="1"/><text x="94.8552%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="94.6052%" y="181" width="0.0782%" height="15" fill="rgb(217,225,45)" fg:x="1210" fg:w="1"/><text x="94.8552%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="94.6052%" y="165" width="0.0782%" height="15" fill="rgb(247,191,36)" fg:x="1210" fg:w="1"/><text x="94.8552%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="94.7615%" y="117" width="0.0782%" height="15" fill="rgb(251,144,31)" fg:x="1212" fg:w="1"/><text x="95.0115%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.7615%" y="101" width="0.0782%" height="15" fill="rgb(227,155,41)" fg:x="1212" fg:w="1"/><text x="95.0115%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7615%" y="85" width="0.0782%" height="15" fill="rgb(236,121,36)" fg:x="1212" fg:w="1"/><text x="95.0115%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.7615%" y="69" width="0.0782%" height="15" fill="rgb(221,128,28)" fg:x="1212" fg:w="1"/><text x="95.0115%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.8397%" y="53" width="0.0782%" height="15" fill="rgb(249,67,50)" fg:x="1213" fg:w="1"/><text x="95.0897%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.23%)</title><rect x="94.8397%" y="117" width="0.2346%" height="15" fill="rgb(241,126,38)" fg:x="1213" fg:w="3"/><text x="95.0897%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.23%)</title><rect x="94.8397%" y="101" width="0.2346%" height="15" fill="rgb(239,33,14)" fg:x="1213" fg:w="3"/><text x="95.0897%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.23%)</title><rect x="94.8397%" y="85" width="0.2346%" height="15" fill="rgb(207,221,54)" fg:x="1213" fg:w="3"/><text x="95.0897%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="94.8397%" y="69" width="0.2346%" height="15" fill="rgb(242,138,43)" fg:x="1213" fg:w="3"/><text x="95.0897%" y="79.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="94.9179%" y="53" width="0.1564%" height="15" fill="rgb(231,118,19)" fg:x="1214" fg:w="2"/><text x="95.1679%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (18 samples, 1.41%)</title><rect x="95.0743%" y="117" width="1.4073%" height="15" fill="rgb(214,128,54)" fg:x="1216" fg:w="18"/><text x="95.3243%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (18 samples, 1.41%)</title><rect x="95.0743%" y="101" width="1.4073%" height="15" fill="rgb(236,136,6)" fg:x="1216" fg:w="18"/><text x="95.3243%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (17 samples, 1.33%)</title><rect x="95.1525%" y="85" width="1.3292%" height="15" fill="rgb(247,30,38)" fg:x="1217" fg:w="17"/><text x="95.4025%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 1.95%)</title><rect x="94.6833%" y="213" width="1.9547%" height="15" fill="rgb(249,189,40)" fg:x="1211" fg:w="25"/><text x="94.9333%" y="223.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (25 samples, 1.95%)</title><rect x="94.6833%" y="197" width="1.9547%" height="15" fill="rgb(247,179,7)" fg:x="1211" fg:w="25"/><text x="94.9333%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (25 samples, 1.95%)</title><rect x="94.6833%" y="181" width="1.9547%" height="15" fill="rgb(239,46,52)" fg:x="1211" fg:w="25"/><text x="94.9333%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (25 samples, 1.95%)</title><rect x="94.6833%" y="165" width="1.9547%" height="15" fill="rgb(225,28,52)" fg:x="1211" fg:w="25"/><text x="94.9333%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (25 samples, 1.95%)</title><rect x="94.6833%" y="149" width="1.9547%" height="15" fill="rgb(217,208,44)" fg:x="1211" fg:w="25"/><text x="94.9333%" y="159.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (25 samples, 1.95%)</title><rect x="94.6833%" y="133" width="1.9547%" height="15" fill="rgb(224,11,34)" fg:x="1211" fg:w="25"/><text x="94.9333%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="96.4816%" y="117" width="0.1564%" height="15" fill="rgb(205,134,17)" fg:x="1234" fg:w="2"/><text x="96.7316%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.6380%" y="197" width="0.0782%" height="15" fill="rgb(237,125,9)" fg:x="1236" fg:w="1"/><text x="96.8880%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.6380%" y="181" width="0.0782%" height="15" fill="rgb(208,139,47)" fg:x="1236" fg:w="1"/><text x="96.8880%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6380%" y="165" width="0.0782%" height="15" fill="rgb(242,5,5)" fg:x="1236" fg:w="1"/><text x="96.8880%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.6380%" y="149" width="0.0782%" height="15" fill="rgb(218,78,2)" fg:x="1236" fg:w="1"/><text x="96.8880%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (35 samples, 2.74%)</title><rect x="94.0579%" y="245" width="2.7365%" height="15" fill="rgb(217,75,16)" fg:x="1203" fg:w="35"/><text x="94.3079%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (27 samples, 2.11%)</title><rect x="94.6833%" y="229" width="2.1110%" height="15" fill="rgb(212,56,17)" fg:x="1211" fg:w="27"/><text x="94.9333%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="96.6380%" y="213" width="0.1564%" height="15" fill="rgb(228,61,29)" fg:x="1236" fg:w="2"/><text x="96.8880%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="96.7162%" y="197" width="0.0782%" height="15" fill="rgb(247,202,38)" fg:x="1237" fg:w="1"/><text x="96.9662%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="96.7944%" y="213" width="0.0782%" height="15" fill="rgb(211,216,43)" fg:x="1238" fg:w="1"/><text x="97.0444%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="96.8726%" y="213" width="0.0782%" height="15" fill="rgb(220,7,49)" fg:x="1239" fg:w="1"/><text x="97.1226%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="96.8726%" y="197" width="0.0782%" height="15" fill="rgb(219,158,7)" fg:x="1239" fg:w="1"/><text x="97.1226%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.8726%" y="181" width="0.0782%" height="15" fill="rgb(206,127,9)" fg:x="1239" fg:w="1"/><text x="97.1226%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.8726%" y="165" width="0.0782%" height="15" fill="rgb(206,103,43)" fg:x="1239" fg:w="1"/><text x="97.1226%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.8726%" y="149" width="0.0782%" height="15" fill="rgb(240,108,41)" fg:x="1239" fg:w="1"/><text x="97.1226%" y="159.50"></text></g><g><title>indefinite::rules::number::Number::check (44 samples, 3.44%)</title><rect x="93.5887%" y="309" width="3.4402%" height="15" fill="rgb(252,212,6)" fg:x="1197" fg:w="44"/><text x="93.8387%" y="319.50">ind..</text></g><g><title>regex::regex::string::Regex::new (39 samples, 3.05%)</title><rect x="93.9797%" y="293" width="3.0493%" height="15" fill="rgb(248,105,31)" fg:x="1202" fg:w="39"/><text x="94.2297%" y="303.50">reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (39 samples, 3.05%)</title><rect x="93.9797%" y="277" width="3.0493%" height="15" fill="rgb(241,123,4)" fg:x="1202" fg:w="39"/><text x="94.2297%" y="287.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (39 samples, 3.05%)</title><rect x="93.9797%" y="261" width="3.0493%" height="15" fill="rgb(223,74,37)" fg:x="1202" fg:w="39"/><text x="94.2297%" y="271.50">reg..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.23%)</title><rect x="96.7944%" y="245" width="0.2346%" height="15" fill="rgb(251,219,28)" fg:x="1238" fg:w="3"/><text x="97.0444%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.23%)</title><rect x="96.7944%" y="229" width="0.2346%" height="15" fill="rgb(218,36,31)" fg:x="1238" fg:w="3"/><text x="97.0444%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="96.9507%" y="213" width="0.0782%" height="15" fill="rgb(229,40,15)" fg:x="1240" fg:w="1"/><text x="97.2007%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.9507%" y="197" width="0.0782%" height="15" fill="rgb(208,138,37)" fg:x="1240" fg:w="1"/><text x="97.2007%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="97.0289%" y="277" width="0.0782%" height="15" fill="rgb(208,40,52)" fg:x="1241" fg:w="1"/><text x="97.2789%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="97.0289%" y="261" width="0.0782%" height="15" fill="rgb(246,181,48)" fg:x="1241" fg:w="1"/><text x="97.2789%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="97.0289%" y="245" width="0.0782%" height="15" fill="rgb(253,178,36)" fg:x="1241" fg:w="1"/><text x="97.2789%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="97.0289%" y="229" width="0.0782%" height="15" fill="rgb(210,170,6)" fg:x="1241" fg:w="1"/><text x="97.2789%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="97.1071%" y="277" width="0.0782%" height="15" fill="rgb(243,62,22)" fg:x="1242" fg:w="1"/><text x="97.3571%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="97.1071%" y="261" width="0.0782%" height="15" fill="rgb(213,145,26)" fg:x="1242" fg:w="1"/><text x="97.3571%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.1071%" y="245" width="0.0782%" height="15" fill="rgb(237,177,23)" fg:x="1242" fg:w="1"/><text x="97.3571%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="97.1071%" y="229" width="0.0782%" height="15" fill="rgb(252,5,24)" fg:x="1242" fg:w="1"/><text x="97.3571%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.1071%" y="213" width="0.0782%" height="15" fill="rgb(230,108,54)" fg:x="1242" fg:w="1"/><text x="97.3571%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="97.1853%" y="229" width="0.0782%" height="15" fill="rgb(252,192,41)" fg:x="1243" fg:w="1"/><text x="97.4353%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.1853%" y="213" width="0.0782%" height="15" fill="rgb(218,125,20)" fg:x="1243" fg:w="1"/><text x="97.4353%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.1853%" y="197" width="0.0782%" height="15" fill="rgb(230,223,15)" fg:x="1243" fg:w="1"/><text x="97.4353%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.1853%" y="181" width="0.0782%" height="15" fill="rgb(239,99,47)" fg:x="1243" fg:w="1"/><text x="97.4353%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1853%" y="165" width="0.0782%" height="15" fill="rgb(222,214,23)" fg:x="1243" fg:w="1"/><text x="97.4353%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.1853%" y="149" width="0.0782%" height="15" fill="rgb(250,98,43)" fg:x="1243" fg:w="1"/><text x="97.4353%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="97.2635%" y="213" width="0.0782%" height="15" fill="rgb(226,140,11)" fg:x="1244" fg:w="1"/><text x="97.5135%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="97.2635%" y="197" width="0.0782%" height="15" fill="rgb(239,2,22)" fg:x="1244" fg:w="1"/><text x="97.5135%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="97.3417%" y="213" width="0.0782%" height="15" fill="rgb(209,106,26)" fg:x="1245" fg:w="1"/><text x="97.5917%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="97.4199%" y="181" width="0.0782%" height="15" fill="rgb(209,135,11)" fg:x="1246" fg:w="1"/><text x="97.6699%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="97.4199%" y="197" width="0.2346%" height="15" fill="rgb(241,58,6)" fg:x="1246" fg:w="3"/><text x="97.6699%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="97.4980%" y="181" width="0.1564%" height="15" fill="rgb(214,78,1)" fg:x="1247" fg:w="2"/><text x="97.7480%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="97.4980%" y="165" width="0.1564%" height="15" fill="rgb(229,135,33)" fg:x="1247" fg:w="2"/><text x="97.7480%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="97.4980%" y="149" width="0.1564%" height="15" fill="rgb(245,87,50)" fg:x="1247" fg:w="2"/><text x="97.7480%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="97.5762%" y="133" width="0.0782%" height="15" fill="rgb(222,222,8)" fg:x="1248" fg:w="1"/><text x="97.8262%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.5762%" y="117" width="0.0782%" height="15" fill="rgb(214,97,50)" fg:x="1248" fg:w="1"/><text x="97.8262%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.5762%" y="101" width="0.0782%" height="15" fill="rgb(244,161,51)" fg:x="1248" fg:w="1"/><text x="97.8262%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.5762%" y="85" width="0.0782%" height="15" fill="rgb(225,17,4)" fg:x="1248" fg:w="1"/><text x="97.8262%" y="95.50"></text></g><g><title>regex_automata::meta::strategy::new (6 samples, 0.47%)</title><rect x="97.2635%" y="229" width="0.4691%" height="15" fill="rgb(238,10,13)" fg:x="1244" fg:w="6"/><text x="97.5135%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.31%)</title><rect x="97.4199%" y="213" width="0.3127%" height="15" fill="rgb(239,169,14)" fg:x="1246" fg:w="4"/><text x="97.6699%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="97.6544%" y="197" width="0.0782%" height="15" fill="rgb(213,105,25)" fg:x="1249" fg:w="1"/><text x="97.9044%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="97.7326%" y="229" width="0.0782%" height="15" fill="rgb(233,4,17)" fg:x="1250" fg:w="1"/><text x="97.9826%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="97.7326%" y="213" width="0.0782%" height="15" fill="rgb(212,5,35)" fg:x="1250" fg:w="1"/><text x="97.9826%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="97.7326%" y="197" width="0.0782%" height="15" fill="rgb(216,3,14)" fg:x="1250" fg:w="1"/><text x="97.9826%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="97.7326%" y="181" width="0.0782%" height="15" fill="rgb(240,105,33)" fg:x="1250" fg:w="1"/><text x="97.9826%" y="191.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (9 samples, 0.70%)</title><rect x="97.1853%" y="245" width="0.7037%" height="15" fill="rgb(216,73,0)" fg:x="1243" fg:w="9"/><text x="97.4353%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.8108%" y="229" width="0.0782%" height="15" fill="rgb(217,153,48)" fg:x="1251" fg:w="1"/><text x="98.0608%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.8108%" y="213" width="0.0782%" height="15" fill="rgb(218,180,8)" fg:x="1251" fg:w="1"/><text x="98.0608%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.8108%" y="197" width="0.0782%" height="15" fill="rgb(252,168,2)" fg:x="1251" fg:w="1"/><text x="98.0608%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="97.8108%" y="181" width="0.0782%" height="15" fill="rgb(224,116,33)" fg:x="1251" fg:w="1"/><text x="98.0608%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (10 samples, 0.78%)</title><rect x="97.1853%" y="277" width="0.7819%" height="15" fill="rgb(229,205,17)" fg:x="1243" fg:w="10"/><text x="97.4353%" y="287.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (10 samples, 0.78%)</title><rect x="97.1853%" y="261" width="0.7819%" height="15" fill="rgb(234,1,41)" fg:x="1243" fg:w="10"/><text x="97.4353%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="97.8890%" y="245" width="0.0782%" height="15" fill="rgb(244,185,8)" fg:x="1252" fg:w="1"/><text x="98.1390%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.8890%" y="229" width="0.0782%" height="15" fill="rgb(248,51,21)" fg:x="1252" fg:w="1"/><text x="98.1390%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.0453%" y="197" width="0.0782%" height="15" fill="rgb(248,157,31)" fg:x="1254" fg:w="1"/><text x="98.2953%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (88 samples, 6.88%)</title><rect x="91.3213%" y="389" width="6.8804%" height="15" fill="rgb(210,34,47)" fg:x="1168" fg:w="88"/><text x="91.5713%" y="399.50">&lt;&amp;kernel:..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (84 samples, 6.57%)</title><rect x="91.6341%" y="373" width="6.5676%" height="15" fill="rgb(227,139,53)" fg:x="1172" fg:w="84"/><text x="91.8841%" y="383.50">plugins_c..</text></g><g><title>indefinite::indefinite (84 samples, 6.57%)</title><rect x="91.6341%" y="357" width="6.5676%" height="15" fill="rgb(232,211,37)" fg:x="1172" fg:w="84"/><text x="91.8841%" y="367.50">indefinit..</text></g><g><title>indefinite::methods::indefinite (84 samples, 6.57%)</title><rect x="91.6341%" y="341" width="6.5676%" height="15" fill="rgb(236,133,10)" fg:x="1172" fg:w="84"/><text x="91.8841%" y="351.50">indefinit..</text></g><g><title>indefinite::methods::apply_rules (84 samples, 6.57%)</title><rect x="91.6341%" y="325" width="6.5676%" height="15" fill="rgb(243,202,25)" fg:x="1172" fg:w="84"/><text x="91.8841%" y="335.50">indefinit..</text></g><g><title>indefinite::rules::other::Other::run (15 samples, 1.17%)</title><rect x="97.0289%" y="309" width="1.1728%" height="15" fill="rgb(224,59,9)" fg:x="1241" fg:w="15"/><text x="97.2789%" y="319.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (15 samples, 1.17%)</title><rect x="97.0289%" y="293" width="1.1728%" height="15" fill="rgb(206,146,16)" fg:x="1241" fg:w="15"/><text x="97.2789%" y="303.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.23%)</title><rect x="97.9672%" y="277" width="0.2346%" height="15" fill="rgb(220,47,2)" fg:x="1253" fg:w="3"/><text x="98.2172%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.23%)</title><rect x="97.9672%" y="261" width="0.2346%" height="15" fill="rgb(225,124,51)" fg:x="1253" fg:w="3"/><text x="98.2172%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.23%)</title><rect x="97.9672%" y="245" width="0.2346%" height="15" fill="rgb(241,220,50)" fg:x="1253" fg:w="3"/><text x="98.2172%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="98.0453%" y="229" width="0.1564%" height="15" fill="rgb(232,168,5)" fg:x="1254" fg:w="2"/><text x="98.2953%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="98.0453%" y="213" width="0.1564%" height="15" fill="rgb(243,90,22)" fg:x="1254" fg:w="2"/><text x="98.2953%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="98.1235%" y="197" width="0.0782%" height="15" fill="rgb(223,153,32)" fg:x="1255" fg:w="1"/><text x="98.3735%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2799%" y="309" width="0.0782%" height="15" fill="rgb(243,124,20)" fg:x="1257" fg:w="1"/><text x="98.5299%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2799%" y="293" width="0.0782%" height="15" fill="rgb(246,168,39)" fg:x="1257" fg:w="1"/><text x="98.5299%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2799%" y="277" width="0.0782%" height="15" fill="rgb(222,165,54)" fg:x="1257" fg:w="1"/><text x="98.5299%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2799%" y="261" width="0.0782%" height="15" fill="rgb(251,142,27)" fg:x="1257" fg:w="1"/><text x="98.5299%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2799%" y="245" width="0.0782%" height="15" fill="rgb(207,168,50)" fg:x="1257" fg:w="1"/><text x="98.5299%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.2799%" y="229" width="0.0782%" height="15" fill="rgb(250,139,25)" fg:x="1257" fg:w="1"/><text x="98.5299%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.2799%" y="213" width="0.0782%" height="15" fill="rgb(214,194,48)" fg:x="1257" fg:w="1"/><text x="98.5299%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.2799%" y="197" width="0.0782%" height="15" fill="rgb(227,138,47)" fg:x="1257" fg:w="1"/><text x="98.5299%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2799%" y="181" width="0.0782%" height="15" fill="rgb(250,162,5)" fg:x="1257" fg:w="1"/><text x="98.5299%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2799%" y="165" width="0.0782%" height="15" fill="rgb(229,74,25)" fg:x="1257" fg:w="1"/><text x="98.5299%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.2799%" y="149" width="0.0782%" height="15" fill="rgb(221,124,34)" fg:x="1257" fg:w="1"/><text x="98.5299%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.2799%" y="133" width="0.0782%" height="15" fill="rgb(225,94,25)" fg:x="1257" fg:w="1"/><text x="98.5299%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.2799%" y="117" width="0.0782%" height="15" fill="rgb(210,100,12)" fg:x="1257" fg:w="1"/><text x="98.5299%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.2799%" y="101" width="0.0782%" height="15" fill="rgb(206,62,48)" fg:x="1257" fg:w="1"/><text x="98.5299%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.2799%" y="85" width="0.0782%" height="15" fill="rgb(222,181,9)" fg:x="1257" fg:w="1"/><text x="98.5299%" y="95.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (3 samples, 0.23%)</title><rect x="98.2017%" y="389" width="0.2346%" height="15" fill="rgb(248,42,38)" fg:x="1256" fg:w="3"/><text x="98.4517%" y="399.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (3 samples, 0.23%)</title><rect x="98.2017%" y="373" width="0.2346%" height="15" fill="rgb(213,40,6)" fg:x="1256" fg:w="3"/><text x="98.4517%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (3 samples, 0.23%)</title><rect x="98.2017%" y="357" width="0.2346%" height="15" fill="rgb(211,108,15)" fg:x="1256" fg:w="3"/><text x="98.4517%" y="367.50"></text></g><g><title>plugins_core::tools::contained_by (2 samples, 0.16%)</title><rect x="98.2799%" y="341" width="0.1564%" height="15" fill="rgb(249,62,9)" fg:x="1257" fg:w="2"/><text x="98.5299%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.2799%" y="325" width="0.1564%" height="15" fill="rgb(233,26,54)" fg:x="1257" fg:w="2"/><text x="98.5299%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3581%" y="309" width="0.0782%" height="15" fill="rgb(210,175,26)" fg:x="1258" fg:w="1"/><text x="98.6081%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3581%" y="293" width="0.0782%" height="15" fill="rgb(210,43,33)" fg:x="1258" fg:w="1"/><text x="98.6081%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.3581%" y="277" width="0.0782%" height="15" fill="rgb(224,46,17)" fg:x="1258" fg:w="1"/><text x="98.6081%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3581%" y="261" width="0.0782%" height="15" fill="rgb(254,24,38)" fg:x="1258" fg:w="1"/><text x="98.6081%" y="271.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="98.4363%" y="373" width="0.0782%" height="15" fill="rgb(248,32,0)" fg:x="1259" fg:w="1"/><text x="98.6863%" y="383.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="98.4363%" y="357" width="0.0782%" height="15" fill="rgb(224,37,41)" fg:x="1259" fg:w="1"/><text x="98.6863%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.4363%" y="341" width="0.0782%" height="15" fill="rgb(252,70,22)" fg:x="1259" fg:w="1"/><text x="98.6863%" y="351.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="98.5145%" y="373" width="0.0782%" height="15" fill="rgb(241,123,50)" fg:x="1260" fg:w="1"/><text x="98.7645%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="98.5145%" y="357" width="0.0782%" height="15" fill="rgb(246,138,33)" fg:x="1260" fg:w="1"/><text x="98.7645%" y="367.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="98.5145%" y="341" width="0.0782%" height="15" fill="rgb(218,39,32)" fg:x="1260" fg:w="1"/><text x="98.7645%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="98.5145%" y="325" width="0.0782%" height="15" fill="rgb(241,229,10)" fg:x="1260" fg:w="1"/><text x="98.7645%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.5145%" y="309" width="0.0782%" height="15" fill="rgb(212,160,10)" fg:x="1260" fg:w="1"/><text x="98.7645%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5145%" y="293" width="0.0782%" height="15" fill="rgb(227,48,51)" fg:x="1260" fg:w="1"/><text x="98.7645%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5145%" y="277" width="0.0782%" height="15" fill="rgb(238,159,21)" fg:x="1260" fg:w="1"/><text x="98.7645%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.5145%" y="261" width="0.0782%" height="15" fill="rgb(216,1,10)" fg:x="1260" fg:w="1"/><text x="98.7645%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5145%" y="245" width="0.0782%" height="15" fill="rgb(209,228,25)" fg:x="1260" fg:w="1"/><text x="98.7645%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.5145%" y="229" width="0.0782%" height="15" fill="rgb(234,160,10)" fg:x="1260" fg:w="1"/><text x="98.7645%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.5145%" y="213" width="0.0782%" height="15" fill="rgb(212,66,25)" fg:x="1260" fg:w="1"/><text x="98.7645%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.5145%" y="197" width="0.0782%" height="15" fill="rgb(254,121,18)" fg:x="1260" fg:w="1"/><text x="98.7645%" y="207.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (183 samples, 14.31%)</title><rect x="84.3628%" y="533" width="14.3081%" height="15" fill="rgb(219,127,1)" fg:x="1079" fg:w="183"/><text x="84.6128%" y="543.50">kernel::plugins::mw::M..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (183 samples, 14.31%)</title><rect x="84.3628%" y="517" width="14.3081%" height="15" fill="rgb(219,224,42)" fg:x="1079" fg:w="183"/><text x="84.6128%" y="527.50">&lt;plugins_dynlib::Dynam..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (183 samples, 14.31%)</title><rect x="84.3628%" y="501" width="14.3081%" height="15" fill="rgb(253,130,22)" fg:x="1079" fg:w="183"/><text x="84.6128%" y="511.50">kernel::plugins::mw::M..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (183 samples, 14.31%)</title><rect x="84.3628%" y="485" width="14.3081%" height="15" fill="rgb(253,39,28)" fg:x="1079" fg:w="183"/><text x="84.6128%" y="495.50">core::ops::function::F..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (183 samples, 14.31%)</title><rect x="84.3628%" y="469" width="14.3081%" height="15" fill="rgb(231,126,37)" fg:x="1079" fg:w="183"/><text x="84.6128%" y="479.50">kernel::plugins::mw::M..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (183 samples, 14.31%)</title><rect x="84.3628%" y="453" width="14.3081%" height="15" fill="rgb(251,145,14)" fg:x="1079" fg:w="183"/><text x="84.6128%" y="463.50">core::ops::function::F..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (183 samples, 14.31%)</title><rect x="84.3628%" y="437" width="14.3081%" height="15" fill="rgb(229,164,30)" fg:x="1079" fg:w="183"/><text x="84.6128%" y="447.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (183 samples, 14.31%)</title><rect x="84.3628%" y="421" width="14.3081%" height="15" fill="rgb(233,227,54)" fg:x="1079" fg:w="183"/><text x="84.6128%" y="431.50">&lt;engine::session::stat..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (94 samples, 7.35%)</title><rect x="91.3213%" y="405" width="7.3495%" height="15" fill="rgb(240,94,22)" fg:x="1168" fg:w="94"/><text x="91.5713%" y="415.50">&lt;plugins_c..</text></g><g><title>plugins_core::location::model::change_location (3 samples, 0.23%)</title><rect x="98.4363%" y="389" width="0.2346%" height="15" fill="rgb(217,56,16)" fg:x="1259" fg:w="3"/><text x="98.6863%" y="399.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="98.5927%" y="373" width="0.0782%" height="15" fill="rgb(229,133,38)" fg:x="1261" fg:w="1"/><text x="98.8427%" y="383.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="98.5927%" y="357" width="0.0782%" height="15" fill="rgb(225,139,35)" fg:x="1261" fg:w="1"/><text x="98.8427%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="98.5927%" y="341" width="0.0782%" height="15" fill="rgb(223,100,16)" fg:x="1261" fg:w="1"/><text x="98.8427%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.5927%" y="325" width="0.0782%" height="15" fill="rgb(207,43,50)" fg:x="1261" fg:w="1"/><text x="98.8427%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.5927%" y="309" width="0.0782%" height="15" fill="rgb(237,221,9)" fg:x="1261" fg:w="1"/><text x="98.8427%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.5927%" y="293" width="0.0782%" height="15" fill="rgb(236,134,24)" fg:x="1261" fg:w="1"/><text x="98.8427%" y="303.50"></text></g><g><title>plugins_rune::runner::SharedRunners::after (1 samples, 0.08%)</title><rect x="98.6708%" y="533" width="0.0782%" height="15" fill="rgb(222,173,4)" fg:x="1262" fg:w="1"/><text x="98.9208%" y="543.50"></text></g><g><title>plugins_rune::runner::SharedRunners::before (1 samples, 0.08%)</title><rect x="98.7490%" y="533" width="0.0782%" height="15" fill="rgb(234,144,52)" fg:x="1263" fg:w="1"/><text x="98.9990%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8272%" y="501" width="0.0782%" height="15" fill="rgb(223,41,7)" fg:x="1264" fg:w="1"/><text x="99.0772%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8272%" y="485" width="0.0782%" height="15" fill="rgb(226,143,9)" fg:x="1264" fg:w="1"/><text x="99.0772%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="98.9054%" y="469" width="0.0782%" height="15" fill="rgb(234,43,37)" fg:x="1265" fg:w="1"/><text x="99.1554%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.9054%" y="485" width="0.1564%" height="15" fill="rgb(224,188,11)" fg:x="1265" fg:w="2"/><text x="99.1554%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9836%" y="469" width="0.0782%" height="15" fill="rgb(233,113,28)" fg:x="1266" fg:w="1"/><text x="99.2336%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9836%" y="453" width="0.0782%" height="15" fill="rgb(215,16,1)" fg:x="1266" fg:w="1"/><text x="99.2336%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.9836%" y="437" width="0.0782%" height="15" fill="rgb(238,74,38)" fg:x="1266" fg:w="1"/><text x="99.2336%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9836%" y="421" width="0.0782%" height="15" fill="rgb(221,66,35)" fg:x="1266" fg:w="1"/><text x="99.2336%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.0618%" y="421" width="0.0782%" height="15" fill="rgb(251,225,2)" fg:x="1267" fg:w="1"/><text x="99.3118%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.0618%" y="405" width="0.0782%" height="15" fill="rgb(240,169,18)" fg:x="1267" fg:w="1"/><text x="99.3118%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.1400%" y="421" width="0.0782%" height="15" fill="rgb(243,130,50)" fg:x="1268" fg:w="1"/><text x="99.3900%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1400%" y="405" width="0.0782%" height="15" fill="rgb(228,75,13)" fg:x="1268" fg:w="1"/><text x="99.3900%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1400%" y="389" width="0.0782%" height="15" fill="rgb(252,95,35)" fg:x="1268" fg:w="1"/><text x="99.3900%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1400%" y="373" width="0.0782%" height="15" fill="rgb(222,180,54)" fg:x="1268" fg:w="1"/><text x="99.3900%" y="383.50"></text></g><g><title>plugins_core::tools::contained_by (6 samples, 0.47%)</title><rect x="98.9054%" y="501" width="0.4691%" height="15" fill="rgb(250,110,34)" fg:x="1265" fg:w="6"/><text x="99.1554%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.31%)</title><rect x="99.0618%" y="485" width="0.3127%" height="15" fill="rgb(208,100,21)" fg:x="1267" fg:w="4"/><text x="99.3118%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.31%)</title><rect x="99.0618%" y="469" width="0.3127%" height="15" fill="rgb(209,123,47)" fg:x="1267" fg:w="4"/><text x="99.3118%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.31%)</title><rect x="99.0618%" y="453" width="0.3127%" height="15" fill="rgb(237,147,9)" fg:x="1267" fg:w="4"/><text x="99.3118%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.31%)</title><rect x="99.0618%" y="437" width="0.3127%" height="15" fill="rgb(228,206,23)" fg:x="1267" fg:w="4"/><text x="99.3118%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.2181%" y="421" width="0.1564%" height="15" fill="rgb(217,174,46)" fg:x="1269" fg:w="2"/><text x="99.4681%" y="431.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.2181%" y="405" width="0.1564%" height="15" fill="rgb(231,126,21)" fg:x="1269" fg:w="2"/><text x="99.4681%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.2181%" y="389" width="0.1564%" height="15" fill="rgb(245,26,1)" fg:x="1269" fg:w="2"/><text x="99.4681%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.2181%" y="373" width="0.1564%" height="15" fill="rgb(224,138,39)" fg:x="1269" fg:w="2"/><text x="99.4681%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.2181%" y="357" width="0.1564%" height="15" fill="rgb(208,97,3)" fg:x="1269" fg:w="2"/><text x="99.4681%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.2181%" y="341" width="0.1564%" height="15" fill="rgb(222,77,29)" fg:x="1269" fg:w="2"/><text x="99.4681%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.2181%" y="325" width="0.1564%" height="15" fill="rgb(243,188,36)" fg:x="1269" fg:w="2"/><text x="99.4681%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.2181%" y="309" width="0.1564%" height="15" fill="rgb(218,214,3)" fg:x="1269" fg:w="2"/><text x="99.4681%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.2181%" y="293" width="0.1564%" height="15" fill="rgb(211,183,45)" fg:x="1269" fg:w="2"/><text x="99.4681%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2963%" y="277" width="0.0782%" height="15" fill="rgb(230,218,25)" fg:x="1270" fg:w="1"/><text x="99.5463%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2963%" y="261" width="0.0782%" height="15" fill="rgb(233,86,6)" fg:x="1270" fg:w="1"/><text x="99.5463%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2963%" y="245" width="0.0782%" height="15" fill="rgb(220,59,24)" fg:x="1270" fg:w="1"/><text x="99.5463%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2963%" y="229" width="0.0782%" height="15" fill="rgb(227,60,1)" fg:x="1270" fg:w="1"/><text x="99.5463%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.2963%" y="213" width="0.0782%" height="15" fill="rgb(216,212,54)" fg:x="1270" fg:w="1"/><text x="99.5463%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3745%" y="469" width="0.0782%" height="15" fill="rgb(227,81,54)" fg:x="1271" fg:w="1"/><text x="99.6245%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3745%" y="453" width="0.0782%" height="15" fill="rgb(206,204,43)" fg:x="1271" fg:w="1"/><text x="99.6245%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3745%" y="437" width="0.0782%" height="15" fill="rgb(219,29,26)" fg:x="1271" fg:w="1"/><text x="99.6245%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3745%" y="421" width="0.0782%" height="15" fill="rgb(252,40,36)" fg:x="1271" fg:w="1"/><text x="99.6245%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3745%" y="405" width="0.0782%" height="15" fill="rgb(224,205,39)" fg:x="1271" fg:w="1"/><text x="99.6245%" y="415.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="99.3745%" y="501" width="0.1564%" height="15" fill="rgb(222,13,21)" fg:x="1271" fg:w="2"/><text x="99.6245%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="99.3745%" y="485" width="0.1564%" height="15" fill="rgb(243,139,6)" fg:x="1271" fg:w="2"/><text x="99.6245%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4527%" y="469" width="0.0782%" height="15" fill="rgb(237,101,11)" fg:x="1272" fg:w="1"/><text x="99.7027%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4527%" y="453" width="0.0782%" height="15" fill="rgb(254,49,28)" fg:x="1272" fg:w="1"/><text x="99.7027%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.4527%" y="437" width="0.0782%" height="15" fill="rgb(223,41,21)" fg:x="1272" fg:w="1"/><text x="99.7027%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.4527%" y="421" width="0.0782%" height="15" fill="rgb(225,103,29)" fg:x="1272" fg:w="1"/><text x="99.7027%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="99.4527%" y="405" width="0.0782%" height="15" fill="rgb(244,82,43)" fg:x="1272" fg:w="1"/><text x="99.7027%" y="415.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.4527%" y="389" width="0.0782%" height="15" fill="rgb(217,39,3)" fg:x="1272" fg:w="1"/><text x="99.7027%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (1 samples, 0.08%)</title><rect x="99.4527%" y="373" width="0.0782%" height="15" fill="rgb(239,128,25)" fg:x="1272" fg:w="1"/><text x="99.7027%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.4527%" y="357" width="0.0782%" height="15" fill="rgb(210,192,37)" fg:x="1272" fg:w="1"/><text x="99.7027%" y="367.50"></text></g><g><title>engine::session::Session::captured (208 samples, 16.26%)</title><rect x="83.4246%" y="677" width="16.2627%" height="15" fill="rgb(219,98,18)" fg:x="1067" fg:w="208"/><text x="83.6746%" y="687.50">engine::session::Session:..</text></g><g><title>engine::session::logs::capture (206 samples, 16.11%)</title><rect x="83.5809%" y="661" width="16.1063%" height="15" fill="rgb(224,228,38)" fg:x="1069" fg:w="206"/><text x="83.8309%" y="671.50">engine::session::logs::ca..</text></g><g><title>tracing_core::dispatcher::with_default (202 samples, 15.79%)</title><rect x="83.8937%" y="645" width="15.7936%" height="15" fill="rgb(241,129,43)" fg:x="1073" fg:w="202"/><text x="84.1437%" y="655.50">tracing_core::dispatcher..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (202 samples, 15.79%)</title><rect x="83.8937%" y="629" width="15.7936%" height="15" fill="rgb(223,8,51)" fg:x="1073" fg:w="202"/><text x="84.1437%" y="639.50">&lt;engine::session::Sessio..</text></g><g><title>kernel::plugins::mw::apply_middleware (202 samples, 15.79%)</title><rect x="83.8937%" y="613" width="15.7936%" height="15" fill="rgb(233,76,24)" fg:x="1073" fg:w="202"/><text x="84.1437%" y="623.50">kernel::plugins::mw::app..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (202 samples, 15.79%)</title><rect x="83.8937%" y="597" width="15.7936%" height="15" fill="rgb(219,115,10)" fg:x="1073" fg:w="202"/><text x="84.1437%" y="607.50">kernel::plugins::mw::Mid..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (202 samples, 15.79%)</title><rect x="83.8937%" y="581" width="15.7936%" height="15" fill="rgb(222,137,12)" fg:x="1073" fg:w="202"/><text x="84.1437%" y="591.50">&lt;engine::session::Expand..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (196 samples, 15.32%)</title><rect x="84.3628%" y="565" width="15.3245%" height="15" fill="rgb(216,192,16)" fg:x="1079" fg:w="196"/><text x="84.6128%" y="575.50">kernel::plugins::mw::Mi..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (196 samples, 15.32%)</title><rect x="84.3628%" y="549" width="15.3245%" height="15" fill="rgb(247,6,27)" fg:x="1079" fg:w="196"/><text x="84.6128%" y="559.50">&lt;plugins_rune::RuneMidd..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (11 samples, 0.86%)</title><rect x="98.8272%" y="533" width="0.8600%" height="15" fill="rgb(254,39,44)" fg:x="1264" fg:w="11"/><text x="99.0772%" y="543.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (11 samples, 0.86%)</title><rect x="98.8272%" y="517" width="0.8600%" height="15" fill="rgb(251,116,35)" fg:x="1264" fg:w="11"/><text x="99.0772%" y="527.50"></text></g><g><title>plugins_core::tools::worn_by (2 samples, 0.16%)</title><rect x="99.5309%" y="501" width="0.1564%" height="15" fill="rgb(208,61,44)" fg:x="1273" fg:w="2"/><text x="99.7809%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.6091%" y="485" width="0.0782%" height="15" fill="rgb(250,34,5)" fg:x="1274" fg:w="1"/><text x="99.8591%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6091%" y="469" width="0.0782%" height="15" fill="rgb(241,40,15)" fg:x="1274" fg:w="1"/><text x="99.8591%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6091%" y="453" width="0.0782%" height="15" fill="rgb(229,182,2)" fg:x="1274" fg:w="1"/><text x="99.8591%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.6873%" y="645" width="0.0782%" height="15" fill="rgb(244,148,52)" fg:x="1275" fg:w="1"/><text x="99.9373%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6873%" y="629" width="0.0782%" height="15" fill="rgb(225,211,4)" fg:x="1275" fg:w="1"/><text x="99.9373%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6873%" y="613" width="0.0782%" height="15" fill="rgb(208,222,47)" fg:x="1275" fg:w="1"/><text x="99.9373%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6873%" y="597" width="0.0782%" height="15" fill="rgb(233,162,0)" fg:x="1275" fg:w="1"/><text x="99.9373%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6873%" y="581" width="0.0782%" height="15" fill="rgb(241,54,13)" fg:x="1275" fg:w="1"/><text x="99.9373%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6873%" y="565" width="0.0782%" height="15" fill="rgb(213,89,18)" fg:x="1275" fg:w="1"/><text x="99.9373%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.6873%" y="549" width="0.0782%" height="15" fill="rgb(215,170,37)" fg:x="1275" fg:w="1"/><text x="99.9373%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7654%" y="469" width="0.0782%" height="15" fill="rgb(216,133,15)" fg:x="1276" fg:w="1"/><text x="100.0154%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.7654%" y="453" width="0.0782%" height="15" fill="rgb(230,42,19)" fg:x="1276" fg:w="1"/><text x="100.0154%" y="463.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.23%)</title><rect x="99.6873%" y="677" width="0.2346%" height="15" fill="rgb(221,103,41)" fg:x="1275" fg:w="3"/><text x="99.9373%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.23%)</title><rect x="99.6873%" y="661" width="0.2346%" height="15" fill="rgb(220,142,31)" fg:x="1275" fg:w="3"/><text x="99.9373%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.7654%" y="645" width="0.1564%" height="15" fill="rgb(239,218,4)" fg:x="1276" fg:w="2"/><text x="100.0154%" y="655.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.7654%" y="629" width="0.1564%" height="15" fill="rgb(232,16,4)" fg:x="1276" fg:w="2"/><text x="100.0154%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.7654%" y="613" width="0.1564%" height="15" fill="rgb(226,213,25)" fg:x="1276" fg:w="2"/><text x="100.0154%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.7654%" y="597" width="0.1564%" height="15" fill="rgb(235,135,19)" fg:x="1276" fg:w="2"/><text x="100.0154%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.7654%" y="581" width="0.1564%" height="15" fill="rgb(240,107,29)" fg:x="1276" fg:w="2"/><text x="100.0154%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.7654%" y="565" width="0.1564%" height="15" fill="rgb(206,164,44)" fg:x="1276" fg:w="2"/><text x="100.0154%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.7654%" y="549" width="0.1564%" height="15" fill="rgb(210,23,48)" fg:x="1276" fg:w="2"/><text x="100.0154%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.7654%" y="533" width="0.1564%" height="15" fill="rgb(212,138,25)" fg:x="1276" fg:w="2"/><text x="100.0154%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.7654%" y="517" width="0.1564%" height="15" fill="rgb(224,152,3)" fg:x="1276" fg:w="2"/><text x="100.0154%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.7654%" y="501" width="0.1564%" height="15" fill="rgb(214,38,23)" fg:x="1276" fg:w="2"/><text x="100.0154%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.7654%" y="485" width="0.1564%" height="15" fill="rgb(215,161,10)" fg:x="1276" fg:w="2"/><text x="100.0154%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8436%" y="469" width="0.0782%" height="15" fill="rgb(240,185,7)" fg:x="1277" fg:w="1"/><text x="100.0936%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8436%" y="453" width="0.0782%" height="15" fill="rgb(244,104,25)" fg:x="1277" fg:w="1"/><text x="100.0936%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.8436%" y="437" width="0.0782%" height="15" fill="rgb(242,140,44)" fg:x="1277" fg:w="1"/><text x="100.0936%" y="447.50"></text></g><g><title>all (1,279 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(245,30,19)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="1071.50"></text></g><g><title>simple-c60e4ccb (1,279 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(219,208,35)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="1055.50">simple-c60e4ccb</text></g><g><title>_start (1,279 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(235,200,7)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="1039.50">_start</text></g><g><title>__libc_start_main (1,279 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(220,193,10)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="1023.50">__libc_start_main</text></g><g><title>main (1,279 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(212,216,39)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,279 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(212,134,19)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,279 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(230,57,24)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,279 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(238,209,37)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,279 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(247,11,45)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,279 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(222,126,6)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,279 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(245,77,24)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,279 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(227,14,24)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,279 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(211,112,42)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,279 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(230,103,42)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,279 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(228,125,42)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,279 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(243,33,6)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,279 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(231,2,40)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="815.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,279 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(224,200,53)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="799.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,279 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(215,116,36)" fg:x="0" fg:w="1279"/><text x="0.2500%" y="783.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (312 samples, 24.39%)</title><rect x="75.6059%" y="757" width="24.3941%" height="15" fill="rgb(240,23,51)" fg:x="967" fg:w="312"/><text x="75.8559%" y="767.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (312 samples, 24.39%)</title><rect x="75.6059%" y="741" width="24.3941%" height="15" fill="rgb(221,72,5)" fg:x="967" fg:w="312"/><text x="75.8559%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (312 samples, 24.39%)</title><rect x="75.6059%" y="725" width="24.3941%" height="15" fill="rgb(245,142,9)" fg:x="967" fg:w="312"/><text x="75.8559%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (216 samples, 16.89%)</title><rect x="83.1118%" y="709" width="16.8882%" height="15" fill="rgb(207,34,16)" fg:x="1063" fg:w="216"/><text x="83.3618%" y="719.50">engine::session::Session::..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (216 samples, 16.89%)</title><rect x="83.1118%" y="693" width="16.8882%" height="15" fill="rgb(252,101,12)" fg:x="1063" fg:w="216"/><text x="83.3618%" y="703.50">engine::session::Session::..</text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="99.9218%" y="677" width="0.0782%" height="15" fill="rgb(239,89,37)" fg:x="1278" fg:w="1"/><text x="100.1718%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="99.9218%" y="661" width="0.0782%" height="15" fill="rgb(252,227,37)" fg:x="1278" fg:w="1"/><text x="100.1718%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.9218%" y="645" width="0.0782%" height="15" fill="rgb(212,164,17)" fg:x="1278" fg:w="1"/><text x="100.1718%" y="655.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.9218%" y="629" width="0.0782%" height="15" fill="rgb(240,86,13)" fg:x="1278" fg:w="1"/><text x="100.1718%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9218%" y="613" width="0.0782%" height="15" fill="rgb(233,183,32)" fg:x="1278" fg:w="1"/><text x="100.1718%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9218%" y="597" width="0.0782%" height="15" fill="rgb(205,201,38)" fg:x="1278" fg:w="1"/><text x="100.1718%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.9218%" y="581" width="0.0782%" height="15" fill="rgb(210,122,38)" fg:x="1278" fg:w="1"/><text x="100.1718%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9218%" y="565" width="0.0782%" height="15" fill="rgb(241,174,26)" fg:x="1278" fg:w="1"/><text x="100.1718%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9218%" y="549" width="0.0782%" height="15" fill="rgb(219,89,7)" fg:x="1278" fg:w="1"/><text x="100.1718%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9218%" y="533" width="0.0782%" height="15" fill="rgb(246,9,24)" fg:x="1278" fg:w="1"/><text x="100.1718%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9218%" y="517" width="0.0782%" height="15" fill="rgb(205,132,21)" fg:x="1278" fg:w="1"/><text x="100.1718%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.9218%" y="501" width="0.0782%" height="15" fill="rgb(210,11,17)" fg:x="1278" fg:w="1"/><text x="100.1718%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.9218%" y="485" width="0.0782%" height="15" fill="rgb(226,138,14)" fg:x="1278" fg:w="1"/><text x="100.1718%" y="495.50"></text></g></svg></svg>