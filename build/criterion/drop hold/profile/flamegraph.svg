<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1062" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1045.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1045.00"> </text><svg id="frames" x="10" width="1180" total_samples="1246"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="613" width="0.0803%" height="15" fill="rgb(239,151,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0803%" y="565" width="0.0803%" height="15" fill="rgb(222,122,38)" fg:x="1" fg:w="1"/><text x="0.3303%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0803%" y="581" width="0.3210%" height="15" fill="rgb(243,128,1)" fg:x="1" fg:w="4"/><text x="0.3303%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.1605%" y="565" width="0.2408%" height="15" fill="rgb(225,74,21)" fg:x="2" fg:w="3"/><text x="0.4105%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3210%" y="549" width="0.0803%" height="15" fill="rgb(216,210,10)" fg:x="4" fg:w="1"/><text x="0.5710%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4013%" y="549" width="0.0803%" height="15" fill="rgb(228,76,19)" fg:x="5" fg:w="1"/><text x="0.6513%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.0000%" y="661" width="0.5618%" height="15" fill="rgb(236,80,34)" fg:x="0" fg:w="7"/><text x="0.2500%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (7 samples, 0.56%)</title><rect x="0.0000%" y="645" width="0.5618%" height="15" fill="rgb(225,173,23)" fg:x="0" fg:w="7"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.0000%" y="629" width="0.5618%" height="15" fill="rgb(253,38,1)" fg:x="0" fg:w="7"/><text x="0.2500%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (6 samples, 0.48%)</title><rect x="0.0803%" y="613" width="0.4815%" height="15" fill="rgb(206,155,35)" fg:x="1" fg:w="6"/><text x="0.3303%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0803%" y="597" width="0.4815%" height="15" fill="rgb(254,27,53)" fg:x="1" fg:w="6"/><text x="0.3303%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.4013%" y="581" width="0.1605%" height="15" fill="rgb(225,52,41)" fg:x="5" fg:w="2"/><text x="0.6513%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.4013%" y="565" width="0.1605%" height="15" fill="rgb(244,53,18)" fg:x="5" fg:w="2"/><text x="0.6513%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.4815%" y="549" width="0.0803%" height="15" fill="rgb(254,206,48)" fg:x="6" fg:w="1"/><text x="0.7315%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.4815%" y="533" width="0.0803%" height="15" fill="rgb(236,182,23)" fg:x="6" fg:w="1"/><text x="0.7315%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.4815%" y="517" width="0.0803%" height="15" fill="rgb(236,191,37)" fg:x="6" fg:w="1"/><text x="0.7315%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.4815%" y="501" width="0.0803%" height="15" fill="rgb(245,53,8)" fg:x="6" fg:w="1"/><text x="0.7315%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4815%" y="485" width="0.0803%" height="15" fill="rgb(245,147,9)" fg:x="6" fg:w="1"/><text x="0.7315%" y="495.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="0.5618%" y="549" width="0.0803%" height="15" fill="rgb(218,24,48)" fg:x="7" fg:w="1"/><text x="0.8118%" y="559.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="0.5618%" y="533" width="0.0803%" height="15" fill="rgb(254,23,9)" fg:x="7" fg:w="1"/><text x="0.8118%" y="543.50"></text></g><g><title>__pthread_mutex_lock (1 samples, 0.08%)</title><rect x="0.6421%" y="485" width="0.0803%" height="15" fill="rgb(244,105,9)" fg:x="8" fg:w="1"/><text x="0.8921%" y="495.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (9 samples, 0.72%)</title><rect x="0.5618%" y="581" width="0.7223%" height="15" fill="rgb(212,142,22)" fg:x="7" fg:w="9"/><text x="0.8118%" y="591.50"></text></g><g><title>libloading::safe::Library::new (9 samples, 0.72%)</title><rect x="0.5618%" y="565" width="0.7223%" height="15" fill="rgb(221,114,49)" fg:x="7" fg:w="9"/><text x="0.8118%" y="575.50"></text></g><g><title>dlopen (8 samples, 0.64%)</title><rect x="0.6421%" y="549" width="0.6421%" height="15" fill="rgb(223,210,25)" fg:x="8" fg:w="8"/><text x="0.8921%" y="559.50"></text></g><g><title>_dl_catch_error (8 samples, 0.64%)</title><rect x="0.6421%" y="533" width="0.6421%" height="15" fill="rgb(235,162,44)" fg:x="8" fg:w="8"/><text x="0.8921%" y="543.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.64%)</title><rect x="0.6421%" y="517" width="0.6421%" height="15" fill="rgb(237,65,45)" fg:x="8" fg:w="8"/><text x="0.8921%" y="527.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.64%)</title><rect x="0.6421%" y="501" width="0.6421%" height="15" fill="rgb(208,79,9)" fg:x="8" fg:w="8"/><text x="0.8921%" y="511.50"></text></g><g><title>_dl_catch_exception (7 samples, 0.56%)</title><rect x="0.7223%" y="485" width="0.5618%" height="15" fill="rgb(215,228,8)" fg:x="9" fg:w="7"/><text x="0.9723%" y="495.50"></text></g><g><title>_dl_find_dso_for_object (1 samples, 0.08%)</title><rect x="1.2039%" y="469" width="0.0803%" height="15" fill="rgb(205,185,17)" fg:x="15" fg:w="1"/><text x="1.4539%" y="479.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (10 samples, 0.80%)</title><rect x="0.5618%" y="597" width="0.8026%" height="15" fill="rgb(213,62,36)" fg:x="7" fg:w="10"/><text x="0.8118%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="1.2841%" y="581" width="0.0803%" height="15" fill="rgb(209,34,9)" fg:x="16" fg:w="1"/><text x="1.5341%" y="591.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="1.2841%" y="565" width="0.0803%" height="15" fill="rgb(246,151,27)" fg:x="16" fg:w="1"/><text x="1.5341%" y="575.50"></text></g><g><title>engine::session::Session::initialize (11 samples, 0.88%)</title><rect x="0.5618%" y="613" width="0.8828%" height="15" fill="rgb(218,206,3)" fg:x="7" fg:w="11"/><text x="0.8118%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="1.3644%" y="597" width="0.0803%" height="15" fill="rgb(242,202,1)" fg:x="17" fg:w="1"/><text x="1.6144%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.3644%" y="581" width="0.0803%" height="15" fill="rgb(227,185,16)" fg:x="17" fg:w="1"/><text x="1.6144%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.3644%" y="565" width="0.0803%" height="15" fill="rgb(241,1,14)" fg:x="17" fg:w="1"/><text x="1.6144%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.3644%" y="549" width="0.0803%" height="15" fill="rgb(212,113,25)" fg:x="17" fg:w="1"/><text x="1.6144%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.3644%" y="533" width="0.0803%" height="15" fill="rgb(247,37,43)" fg:x="17" fg:w="1"/><text x="1.6144%" y="543.50"></text></g><g><title>&lt;plugins_core::carrying::parser::PutInsideActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="1.5249%" y="581" width="0.0803%" height="15" fill="rgb(226,54,8)" fg:x="19" fg:w="1"/><text x="1.7749%" y="591.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (14 samples, 1.12%)</title><rect x="0.5618%" y="661" width="1.1236%" height="15" fill="rgb(251,205,25)" fg:x="7" fg:w="14"/><text x="0.8118%" y="671.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (14 samples, 1.12%)</title><rect x="0.5618%" y="645" width="1.1236%" height="15" fill="rgb(246,87,35)" fg:x="7" fg:w="14"/><text x="0.8118%" y="655.50"></text></g><g><title>engine::session::Session::new (14 samples, 1.12%)</title><rect x="0.5618%" y="629" width="1.1236%" height="15" fill="rgb(251,145,46)" fg:x="7" fg:w="14"/><text x="0.8118%" y="639.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (3 samples, 0.24%)</title><rect x="1.4446%" y="613" width="0.2408%" height="15" fill="rgb(210,210,33)" fg:x="18" fg:w="3"/><text x="1.6946%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="1.4446%" y="597" width="0.2408%" height="15" fill="rgb(221,151,11)" fg:x="18" fg:w="3"/><text x="1.6946%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.6051%" y="581" width="0.0803%" height="15" fill="rgb(208,160,28)" fg:x="20" fg:w="1"/><text x="1.8551%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.6051%" y="565" width="0.0803%" height="15" fill="rgb(243,69,29)" fg:x="20" fg:w="1"/><text x="1.8551%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="1.6854%" y="645" width="0.0803%" height="15" fill="rgb(224,144,4)" fg:x="21" fg:w="1"/><text x="1.9354%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="1.7657%" y="629" width="0.0803%" height="15" fill="rgb(211,140,38)" fg:x="22" fg:w="1"/><text x="2.0157%" y="639.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="1.8459%" y="629" width="0.0803%" height="15" fill="rgb(252,189,15)" fg:x="23" fg:w="1"/><text x="2.0959%" y="639.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="1.8459%" y="613" width="0.0803%" height="15" fill="rgb(251,175,23)" fg:x="23" fg:w="1"/><text x="2.0959%" y="623.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="1.8459%" y="597" width="0.0803%" height="15" fill="rgb(212,184,11)" fg:x="23" fg:w="1"/><text x="2.0959%" y="607.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="1.8459%" y="581" width="0.0803%" height="15" fill="rgb(217,205,6)" fg:x="23" fg:w="1"/><text x="2.0959%" y="591.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="1.8459%" y="565" width="0.0803%" height="15" fill="rgb(235,45,45)" fg:x="23" fg:w="1"/><text x="2.0959%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="1.8459%" y="549" width="0.0803%" height="15" fill="rgb(211,157,53)" fg:x="23" fg:w="1"/><text x="2.0959%" y="559.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="1.8459%" y="533" width="0.0803%" height="15" fill="rgb(212,13,8)" fg:x="23" fg:w="1"/><text x="2.0959%" y="543.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="1.8459%" y="517" width="0.0803%" height="15" fill="rgb(218,80,36)" fg:x="23" fg:w="1"/><text x="2.0959%" y="527.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.08%)</title><rect x="1.8459%" y="501" width="0.0803%" height="15" fill="rgb(211,123,43)" fg:x="23" fg:w="1"/><text x="2.0959%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.9262%" y="597" width="0.0803%" height="15" fill="rgb(206,165,2)" fg:x="24" fg:w="1"/><text x="2.1762%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="2.0064%" y="533" width="0.0803%" height="15" fill="rgb(248,63,35)" fg:x="25" fg:w="1"/><text x="2.2564%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.0064%" y="517" width="0.0803%" height="15" fill="rgb(219,133,41)" fg:x="25" fg:w="1"/><text x="2.2564%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.0867%" y="501" width="0.0803%" height="15" fill="rgb(206,175,46)" fg:x="26" fg:w="1"/><text x="2.3367%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="2.1669%" y="501" width="0.1605%" height="15" fill="rgb(224,41,35)" fg:x="27" fg:w="2"/><text x="2.4169%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.1669%" y="485" width="0.1605%" height="15" fill="rgb(226,113,24)" fg:x="27" fg:w="2"/><text x="2.4169%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="2.1669%" y="469" width="0.1605%" height="15" fill="rgb(219,51,41)" fg:x="27" fg:w="2"/><text x="2.4169%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.1669%" y="453" width="0.1605%" height="15" fill="rgb(220,145,47)" fg:x="27" fg:w="2"/><text x="2.4169%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="2.1669%" y="437" width="0.1605%" height="15" fill="rgb(239,121,47)" fg:x="27" fg:w="2"/><text x="2.4169%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.2472%" y="421" width="0.0803%" height="15" fill="rgb(207,60,40)" fg:x="28" fg:w="1"/><text x="2.4972%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.3274%" y="501" width="0.0803%" height="15" fill="rgb(224,229,11)" fg:x="29" fg:w="1"/><text x="2.5774%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="2.0064%" y="549" width="0.5618%" height="15" fill="rgb(252,28,32)" fg:x="25" fg:w="7"/><text x="2.2564%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="2.0867%" y="533" width="0.4815%" height="15" fill="rgb(207,52,49)" fg:x="26" fg:w="6"/><text x="2.3367%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="2.0867%" y="517" width="0.4815%" height="15" fill="rgb(243,51,50)" fg:x="26" fg:w="6"/><text x="2.3367%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.4077%" y="501" width="0.1605%" height="15" fill="rgb(212,92,21)" fg:x="30" fg:w="2"/><text x="2.6577%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.4077%" y="485" width="0.1605%" height="15" fill="rgb(230,183,50)" fg:x="30" fg:w="2"/><text x="2.6577%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.4880%" y="469" width="0.0803%" height="15" fill="rgb(225,48,9)" fg:x="31" fg:w="1"/><text x="2.7380%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.5682%" y="501" width="0.0803%" height="15" fill="rgb(254,44,4)" fg:x="32" fg:w="1"/><text x="2.8182%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.5682%" y="549" width="0.1605%" height="15" fill="rgb(252,128,37)" fg:x="32" fg:w="2"/><text x="2.8182%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="2.5682%" y="533" width="0.1605%" height="15" fill="rgb(227,178,8)" fg:x="32" fg:w="2"/><text x="2.8182%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.5682%" y="517" width="0.1605%" height="15" fill="rgb(205,206,32)" fg:x="32" fg:w="2"/><text x="2.8182%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.6485%" y="501" width="0.0803%" height="15" fill="rgb(220,218,22)" fg:x="33" fg:w="1"/><text x="2.8985%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.6485%" y="485" width="0.0803%" height="15" fill="rgb(236,41,28)" fg:x="33" fg:w="1"/><text x="2.8985%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6485%" y="469" width="0.0803%" height="15" fill="rgb(219,37,7)" fg:x="33" fg:w="1"/><text x="2.8985%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7287%" y="453" width="0.0803%" height="15" fill="rgb(206,160,15)" fg:x="34" fg:w="1"/><text x="2.9787%" y="463.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.12%)</title><rect x="1.7657%" y="645" width="1.1236%" height="15" fill="rgb(208,82,21)" fg:x="22" fg:w="14"/><text x="2.0157%" y="655.50"></text></g><g><title>engine::session::state::State::close (12 samples, 0.96%)</title><rect x="1.9262%" y="629" width="0.9631%" height="15" fill="rgb(226,130,25)" fg:x="24" fg:w="12"/><text x="2.1762%" y="639.50"></text></g><g><title>engine::session::state::State::flush_entities (12 samples, 0.96%)</title><rect x="1.9262%" y="613" width="0.9631%" height="15" fill="rgb(212,72,24)" fg:x="24" fg:w="12"/><text x="2.1762%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (11 samples, 0.88%)</title><rect x="2.0064%" y="597" width="0.8828%" height="15" fill="rgb(206,28,16)" fg:x="25" fg:w="11"/><text x="2.2564%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.88%)</title><rect x="2.0064%" y="581" width="0.8828%" height="15" fill="rgb(249,41,5)" fg:x="25" fg:w="11"/><text x="2.2564%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (11 samples, 0.88%)</title><rect x="2.0064%" y="565" width="0.8828%" height="15" fill="rgb(233,96,48)" fg:x="25" fg:w="11"/><text x="2.2564%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="2.7287%" y="549" width="0.1605%" height="15" fill="rgb(240,198,11)" fg:x="34" fg:w="2"/><text x="2.9787%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="2.7287%" y="533" width="0.1605%" height="15" fill="rgb(209,175,35)" fg:x="34" fg:w="2"/><text x="2.9787%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="2.7287%" y="517" width="0.1605%" height="15" fill="rgb(214,40,51)" fg:x="34" fg:w="2"/><text x="2.9787%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="2.7287%" y="501" width="0.1605%" height="15" fill="rgb(252,56,4)" fg:x="34" fg:w="2"/><text x="2.9787%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="2.7287%" y="485" width="0.1605%" height="15" fill="rgb(219,131,5)" fg:x="34" fg:w="2"/><text x="2.9787%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.7287%" y="469" width="0.1605%" height="15" fill="rgb(223,67,53)" fg:x="34" fg:w="2"/><text x="2.9787%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8090%" y="453" width="0.0803%" height="15" fill="rgb(227,154,8)" fg:x="35" fg:w="1"/><text x="3.0590%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.8090%" y="437" width="0.0803%" height="15" fill="rgb(216,174,51)" fg:x="35" fg:w="1"/><text x="3.0590%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8090%" y="421" width="0.0803%" height="15" fill="rgb(239,60,34)" fg:x="35" fg:w="1"/><text x="3.0590%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.8090%" y="405" width="0.0803%" height="15" fill="rgb(236,165,48)" fg:x="35" fg:w="1"/><text x="3.0590%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.8090%" y="389" width="0.0803%" height="15" fill="rgb(210,37,26)" fg:x="35" fg:w="1"/><text x="3.0590%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.8090%" y="373" width="0.0803%" height="15" fill="rgb(211,3,17)" fg:x="35" fg:w="1"/><text x="3.0590%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8090%" y="357" width="0.0803%" height="15" fill="rgb(234,88,49)" fg:x="35" fg:w="1"/><text x="3.0590%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8892%" y="549" width="0.0803%" height="15" fill="rgb(233,40,17)" fg:x="36" fg:w="1"/><text x="3.1392%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8892%" y="533" width="0.0803%" height="15" fill="rgb(235,127,31)" fg:x="36" fg:w="1"/><text x="3.1392%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="2.8892%" y="613" width="0.1605%" height="15" fill="rgb(248,167,17)" fg:x="36" fg:w="2"/><text x="3.1392%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="2.8892%" y="597" width="0.1605%" height="15" fill="rgb(218,179,8)" fg:x="36" fg:w="2"/><text x="3.1392%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="2.8892%" y="581" width="0.1605%" height="15" fill="rgb(216,92,14)" fg:x="36" fg:w="2"/><text x="3.1392%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="2.8892%" y="565" width="0.1605%" height="15" fill="rgb(221,198,46)" fg:x="36" fg:w="2"/><text x="3.1392%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.9695%" y="549" width="0.0803%" height="15" fill="rgb(244,7,25)" fg:x="37" fg:w="1"/><text x="3.2195%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="3.0498%" y="613" width="0.0803%" height="15" fill="rgb(233,75,6)" fg:x="38" fg:w="1"/><text x="3.2998%" y="623.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="3.0498%" y="597" width="0.0803%" height="15" fill="rgb(240,189,41)" fg:x="38" fg:w="1"/><text x="3.2998%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.0498%" y="581" width="0.0803%" height="15" fill="rgb(237,157,21)" fg:x="38" fg:w="1"/><text x="3.2998%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="2.8892%" y="629" width="0.3210%" height="15" fill="rgb(210,136,49)" fg:x="36" fg:w="4"/><text x="3.1392%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.1300%" y="613" width="0.0803%" height="15" fill="rgb(210,68,29)" fg:x="39" fg:w="1"/><text x="3.3800%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.1300%" y="597" width="0.0803%" height="15" fill="rgb(247,207,20)" fg:x="39" fg:w="1"/><text x="3.3800%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="3.1300%" y="581" width="0.0803%" height="15" fill="rgb(224,73,48)" fg:x="39" fg:w="1"/><text x="3.3800%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.1300%" y="565" width="0.0803%" height="15" fill="rgb(215,136,47)" fg:x="39" fg:w="1"/><text x="3.3800%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="3.1300%" y="549" width="0.0803%" height="15" fill="rgb(232,222,16)" fg:x="39" fg:w="1"/><text x="3.3800%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.1300%" y="533" width="0.0803%" height="15" fill="rgb(249,202,47)" fg:x="39" fg:w="1"/><text x="3.3800%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.1300%" y="517" width="0.0803%" height="15" fill="rgb(236,56,8)" fg:x="39" fg:w="1"/><text x="3.3800%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.1300%" y="501" width="0.0803%" height="15" fill="rgb(222,6,3)" fg:x="39" fg:w="1"/><text x="3.3800%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="2.8892%" y="645" width="0.4013%" height="15" fill="rgb(254,222,28)" fg:x="36" fg:w="5"/><text x="3.1392%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.2103%" y="629" width="0.0803%" height="15" fill="rgb(219,57,23)" fg:x="40" fg:w="1"/><text x="3.4603%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.2103%" y="613" width="0.0803%" height="15" fill="rgb(251,106,48)" fg:x="40" fg:w="1"/><text x="3.4603%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="3.2103%" y="597" width="0.0803%" height="15" fill="rgb(242,2,23)" fg:x="40" fg:w="1"/><text x="3.4603%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.2103%" y="581" width="0.0803%" height="15" fill="rgb(212,109,31)" fg:x="40" fg:w="1"/><text x="3.4603%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.2103%" y="565" width="0.0803%" height="15" fill="rgb(241,9,22)" fg:x="40" fg:w="1"/><text x="3.4603%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.2103%" y="549" width="0.0803%" height="15" fill="rgb(209,64,27)" fg:x="40" fg:w="1"/><text x="3.4603%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.2103%" y="533" width="0.0803%" height="15" fill="rgb(248,13,44)" fg:x="40" fg:w="1"/><text x="3.4603%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="3.2103%" y="517" width="0.0803%" height="15" fill="rgb(213,86,6)" fg:x="40" fg:w="1"/><text x="3.4603%" y="527.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="3.2905%" y="613" width="0.0803%" height="15" fill="rgb(247,11,18)" fg:x="41" fg:w="1"/><text x="3.5405%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="3.2905%" y="597" width="0.0803%" height="15" fill="rgb(252,31,11)" fg:x="41" fg:w="1"/><text x="3.5405%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.2905%" y="581" width="0.0803%" height="15" fill="rgb(215,63,51)" fg:x="41" fg:w="1"/><text x="3.5405%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.2905%" y="565" width="0.0803%" height="15" fill="rgb(222,180,4)" fg:x="41" fg:w="1"/><text x="3.5405%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="3.2905%" y="549" width="0.0803%" height="15" fill="rgb(233,4,23)" fg:x="41" fg:w="1"/><text x="3.5405%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.2905%" y="533" width="0.0803%" height="15" fill="rgb(230,116,22)" fg:x="41" fg:w="1"/><text x="3.5405%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.2905%" y="517" width="0.0803%" height="15" fill="rgb(222,20,14)" fg:x="41" fg:w="1"/><text x="3.5405%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.2905%" y="501" width="0.0803%" height="15" fill="rgb(210,176,43)" fg:x="41" fg:w="1"/><text x="3.5405%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="3.3708%" y="597" width="0.0803%" height="15" fill="rgb(219,67,32)" fg:x="42" fg:w="1"/><text x="3.6208%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.3708%" y="581" width="0.0803%" height="15" fill="rgb(228,91,39)" fg:x="42" fg:w="1"/><text x="3.6208%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.3708%" y="565" width="0.0803%" height="15" fill="rgb(254,63,14)" fg:x="42" fg:w="1"/><text x="3.6208%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.4510%" y="565" width="0.0803%" height="15" fill="rgb(216,171,39)" fg:x="43" fg:w="1"/><text x="3.7010%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.4510%" y="549" width="0.0803%" height="15" fill="rgb(248,68,25)" fg:x="43" fg:w="1"/><text x="3.7010%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="3.4510%" y="533" width="0.0803%" height="15" fill="rgb(239,63,16)" fg:x="43" fg:w="1"/><text x="3.7010%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.4510%" y="517" width="0.0803%" height="15" fill="rgb(225,111,43)" fg:x="43" fg:w="1"/><text x="3.7010%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4510%" y="501" width="0.0803%" height="15" fill="rgb(246,165,17)" fg:x="43" fg:w="1"/><text x="3.7010%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.4510%" y="485" width="0.0803%" height="15" fill="rgb(208,124,1)" fg:x="43" fg:w="1"/><text x="3.7010%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4510%" y="469" width="0.0803%" height="15" fill="rgb(234,147,33)" fg:x="43" fg:w="1"/><text x="3.7010%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (4 samples, 0.32%)</title><rect x="3.2905%" y="645" width="0.3210%" height="15" fill="rgb(240,86,30)" fg:x="41" fg:w="4"/><text x="3.5405%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="3.2905%" y="629" width="0.3210%" height="15" fill="rgb(237,34,51)" fg:x="41" fg:w="4"/><text x="3.5405%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="3.3708%" y="613" width="0.2408%" height="15" fill="rgb(232,131,41)" fg:x="42" fg:w="3"/><text x="3.6208%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="3.4510%" y="597" width="0.1605%" height="15" fill="rgb(227,129,53)" fg:x="43" fg:w="2"/><text x="3.7010%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="3.4510%" y="581" width="0.1605%" height="15" fill="rgb(230,90,35)" fg:x="43" fg:w="2"/><text x="3.7010%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.5313%" y="565" width="0.0803%" height="15" fill="rgb(248,88,27)" fg:x="44" fg:w="1"/><text x="3.7813%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="3.6116%" y="629" width="0.0803%" height="15" fill="rgb(223,18,17)" fg:x="45" fg:w="1"/><text x="3.8616%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="3.6116%" y="613" width="0.0803%" height="15" fill="rgb(241,11,10)" fg:x="45" fg:w="1"/><text x="3.8616%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="3.6116%" y="597" width="0.0803%" height="15" fill="rgb(232,111,52)" fg:x="45" fg:w="1"/><text x="3.8616%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.6116%" y="581" width="0.0803%" height="15" fill="rgb(228,67,8)" fg:x="45" fg:w="1"/><text x="3.8616%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.6116%" y="565" width="0.0803%" height="15" fill="rgb(251,168,31)" fg:x="45" fg:w="1"/><text x="3.8616%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.6116%" y="549" width="0.0803%" height="15" fill="rgb(249,164,11)" fg:x="45" fg:w="1"/><text x="3.8616%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="3.6918%" y="629" width="0.0803%" height="15" fill="rgb(239,81,9)" fg:x="46" fg:w="1"/><text x="3.9418%" y="639.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="3.6918%" y="613" width="0.0803%" height="15" fill="rgb(222,145,38)" fg:x="46" fg:w="1"/><text x="3.9418%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.6918%" y="597" width="0.0803%" height="15" fill="rgb(238,80,54)" fg:x="46" fg:w="1"/><text x="3.9418%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="4.0931%" y="501" width="0.1605%" height="15" fill="rgb(237,116,16)" fg:x="51" fg:w="2"/><text x="4.3431%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.3339%" y="485" width="0.0803%" height="15" fill="rgb(218,135,19)" fg:x="54" fg:w="1"/><text x="4.5839%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="4.4141%" y="485" width="0.3210%" height="15" fill="rgb(216,207,44)" fg:x="55" fg:w="4"/><text x="4.6641%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.5746%" y="469" width="0.1605%" height="15" fill="rgb(226,152,40)" fg:x="57" fg:w="2"/><text x="4.8246%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.5746%" y="453" width="0.1605%" height="15" fill="rgb(219,98,35)" fg:x="57" fg:w="2"/><text x="4.8246%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="4.5746%" y="437" width="0.1605%" height="15" fill="rgb(222,136,46)" fg:x="57" fg:w="2"/><text x="4.8246%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.6549%" y="421" width="0.0803%" height="15" fill="rgb(222,71,8)" fg:x="58" fg:w="1"/><text x="4.9049%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.6549%" y="405" width="0.0803%" height="15" fill="rgb(209,89,53)" fg:x="58" fg:w="1"/><text x="4.9049%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.6549%" y="389" width="0.0803%" height="15" fill="rgb(210,97,51)" fg:x="58" fg:w="1"/><text x="4.9049%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.7352%" y="469" width="0.0803%" height="15" fill="rgb(248,65,21)" fg:x="59" fg:w="1"/><text x="4.9852%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.7352%" y="453" width="0.0803%" height="15" fill="rgb(222,5,31)" fg:x="59" fg:w="1"/><text x="4.9852%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.8154%" y="469" width="0.1605%" height="15" fill="rgb(241,16,30)" fg:x="60" fg:w="2"/><text x="5.0654%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.8957%" y="453" width="0.0803%" height="15" fill="rgb(215,86,30)" fg:x="61" fg:w="1"/><text x="5.1457%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.8957%" y="437" width="0.0803%" height="15" fill="rgb(235,26,44)" fg:x="61" fg:w="1"/><text x="5.1457%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.9759%" y="453" width="0.0803%" height="15" fill="rgb(228,147,14)" fg:x="62" fg:w="1"/><text x="5.2259%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.9759%" y="437" width="0.0803%" height="15" fill="rgb(253,38,50)" fg:x="62" fg:w="1"/><text x="5.2259%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.9759%" y="421" width="0.0803%" height="15" fill="rgb(251,151,16)" fg:x="62" fg:w="1"/><text x="5.2259%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.9759%" y="405" width="0.0803%" height="15" fill="rgb(224,64,19)" fg:x="62" fg:w="1"/><text x="5.2259%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.9759%" y="389" width="0.0803%" height="15" fill="rgb(235,214,47)" fg:x="62" fg:w="1"/><text x="5.2259%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.9759%" y="373" width="0.0803%" height="15" fill="rgb(218,15,19)" fg:x="62" fg:w="1"/><text x="5.2259%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.9759%" y="357" width="0.0803%" height="15" fill="rgb(247,209,3)" fg:x="62" fg:w="1"/><text x="5.2259%" y="367.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.0562%" y="437" width="0.1605%" height="15" fill="rgb(217,29,2)" fg:x="63" fg:w="2"/><text x="5.3062%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.0562%" y="421" width="0.1605%" height="15" fill="rgb(234,9,9)" fg:x="63" fg:w="2"/><text x="5.3062%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.0562%" y="405" width="0.1605%" height="15" fill="rgb(207,43,14)" fg:x="63" fg:w="2"/><text x="5.3062%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.1364%" y="389" width="0.0803%" height="15" fill="rgb(216,219,36)" fg:x="64" fg:w="1"/><text x="5.3864%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.1364%" y="373" width="0.0803%" height="15" fill="rgb(238,12,26)" fg:x="64" fg:w="1"/><text x="5.3864%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.1364%" y="357" width="0.0803%" height="15" fill="rgb(226,67,30)" fg:x="64" fg:w="1"/><text x="5.3864%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.1364%" y="341" width="0.0803%" height="15" fill="rgb(229,154,7)" fg:x="64" fg:w="1"/><text x="5.3864%" y="351.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2167%" y="437" width="0.0803%" height="15" fill="rgb(249,90,18)" fg:x="65" fg:w="1"/><text x="5.4667%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.2167%" y="421" width="0.0803%" height="15" fill="rgb(223,53,15)" fg:x="65" fg:w="1"/><text x="5.4667%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.2167%" y="405" width="0.0803%" height="15" fill="rgb(253,86,38)" fg:x="65" fg:w="1"/><text x="5.4667%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="5.0562%" y="453" width="0.3210%" height="15" fill="rgb(222,198,9)" fg:x="63" fg:w="4"/><text x="5.3062%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.2970%" y="437" width="0.0803%" height="15" fill="rgb(240,146,25)" fg:x="66" fg:w="1"/><text x="5.5470%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.2970%" y="421" width="0.0803%" height="15" fill="rgb(225,38,10)" fg:x="66" fg:w="1"/><text x="5.5470%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="4.7352%" y="485" width="0.8026%" height="15" fill="rgb(246,93,4)" fg:x="59" fg:w="10"/><text x="4.9852%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="4.9759%" y="469" width="0.5618%" height="15" fill="rgb(222,55,18)" fg:x="62" fg:w="7"/><text x="5.2259%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.3772%" y="453" width="0.1605%" height="15" fill="rgb(233,137,48)" fg:x="67" fg:w="2"/><text x="5.6272%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.4575%" y="437" width="0.0803%" height="15" fill="rgb(214,8,54)" fg:x="68" fg:w="1"/><text x="5.7075%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.4575%" y="421" width="0.0803%" height="15" fill="rgb(206,75,4)" fg:x="68" fg:w="1"/><text x="5.7075%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (20 samples, 1.61%)</title><rect x="4.0128%" y="517" width="1.6051%" height="15" fill="rgb(238,171,14)" fg:x="50" fg:w="20"/><text x="4.2628%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.36%)</title><rect x="4.2536%" y="501" width="1.3644%" height="15" fill="rgb(233,70,41)" fg:x="53" fg:w="17"/><text x="4.5036%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.5377%" y="485" width="0.0803%" height="15" fill="rgb(214,68,36)" fg:x="69" fg:w="1"/><text x="5.7877%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.6180%" y="469" width="0.0803%" height="15" fill="rgb(223,29,5)" fg:x="70" fg:w="1"/><text x="5.8680%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="5.6982%" y="469" width="0.1605%" height="15" fill="rgb(251,22,40)" fg:x="71" fg:w="2"/><text x="5.9482%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="5.6180%" y="517" width="0.3210%" height="15" fill="rgb(210,67,41)" fg:x="70" fg:w="4"/><text x="5.8680%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="5.6180%" y="501" width="0.3210%" height="15" fill="rgb(225,177,31)" fg:x="70" fg:w="4"/><text x="5.8680%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="5.6180%" y="485" width="0.3210%" height="15" fill="rgb(221,229,11)" fg:x="70" fg:w="4"/><text x="5.8680%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.8587%" y="469" width="0.0803%" height="15" fill="rgb(247,172,52)" fg:x="73" fg:w="1"/><text x="6.1087%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="5.8587%" y="453" width="0.0803%" height="15" fill="rgb(212,73,19)" fg:x="73" fg:w="1"/><text x="6.1087%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9390%" y="469" width="0.0803%" height="15" fill="rgb(244,7,46)" fg:x="74" fg:w="1"/><text x="6.1890%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0193%" y="469" width="0.0803%" height="15" fill="rgb(230,113,20)" fg:x="75" fg:w="1"/><text x="6.2693%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0193%" y="453" width="0.0803%" height="15" fill="rgb(209,97,30)" fg:x="75" fg:w="1"/><text x="6.2693%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="6.0995%" y="469" width="0.0803%" height="15" fill="rgb(243,89,12)" fg:x="76" fg:w="1"/><text x="6.3495%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="6.0995%" y="453" width="0.0803%" height="15" fill="rgb(228,32,19)" fg:x="76" fg:w="1"/><text x="6.3495%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="6.1798%" y="421" width="0.3210%" height="15" fill="rgb(248,25,17)" fg:x="77" fg:w="4"/><text x="6.4298%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="6.2600%" y="405" width="0.2408%" height="15" fill="rgb(232,161,29)" fg:x="78" fg:w="3"/><text x="6.5100%" y="415.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="6.2600%" y="389" width="0.2408%" height="15" fill="rgb(251,192,11)" fg:x="78" fg:w="3"/><text x="6.5100%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.5008%" y="421" width="0.0803%" height="15" fill="rgb(240,47,32)" fg:x="81" fg:w="1"/><text x="6.7508%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5008%" y="405" width="0.0803%" height="15" fill="rgb(250,16,45)" fg:x="81" fg:w="1"/><text x="6.7508%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5008%" y="389" width="0.0803%" height="15" fill="rgb(227,217,42)" fg:x="81" fg:w="1"/><text x="6.7508%" y="399.50"></text></g><g><title>engine::session::Session::flush (36 samples, 2.89%)</title><rect x="3.7721%" y="629" width="2.8892%" height="15" fill="rgb(206,82,54)" fg:x="47" fg:w="36"/><text x="4.0221%" y="639.50">en..</text></g><g><title>engine::session::Session::save_changes (36 samples, 2.89%)</title><rect x="3.7721%" y="613" width="2.8892%" height="15" fill="rgb(243,145,25)" fg:x="47" fg:w="36"/><text x="4.0221%" y="623.50">en..</text></g><g><title>engine::session::state::State::close (36 samples, 2.89%)</title><rect x="3.7721%" y="597" width="2.8892%" height="15" fill="rgb(207,166,24)" fg:x="47" fg:w="36"/><text x="4.0221%" y="607.50">en..</text></g><g><title>engine::session::state::State::flush_entities (35 samples, 2.81%)</title><rect x="3.8523%" y="581" width="2.8090%" height="15" fill="rgb(215,191,44)" fg:x="48" fg:w="35"/><text x="4.1023%" y="591.50">en..</text></g><g><title>core::iter::adapters::try_process (35 samples, 2.81%)</title><rect x="3.8523%" y="565" width="2.8090%" height="15" fill="rgb(234,218,51)" fg:x="48" fg:w="35"/><text x="4.1023%" y="575.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (35 samples, 2.81%)</title><rect x="3.8523%" y="549" width="2.8090%" height="15" fill="rgb(245,133,21)" fg:x="48" fg:w="35"/><text x="4.1023%" y="559.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (35 samples, 2.81%)</title><rect x="3.8523%" y="533" width="2.8090%" height="15" fill="rgb(230,136,45)" fg:x="48" fg:w="35"/><text x="4.1023%" y="543.50">en..</text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="5.9390%" y="517" width="0.7223%" height="15" fill="rgb(247,63,43)" fg:x="74" fg:w="9"/><text x="6.1890%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="5.9390%" y="501" width="0.7223%" height="15" fill="rgb(254,223,31)" fg:x="74" fg:w="9"/><text x="6.1890%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="5.9390%" y="485" width="0.7223%" height="15" fill="rgb(236,185,0)" fg:x="74" fg:w="9"/><text x="6.1890%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="6.1798%" y="469" width="0.4815%" height="15" fill="rgb(231,139,46)" fg:x="77" fg:w="6"/><text x="6.4298%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="6.1798%" y="453" width="0.4815%" height="15" fill="rgb(236,147,31)" fg:x="77" fg:w="6"/><text x="6.4298%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="6.1798%" y="437" width="0.4815%" height="15" fill="rgb(225,222,22)" fg:x="77" fg:w="6"/><text x="6.4298%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5811%" y="421" width="0.0803%" height="15" fill="rgb(225,193,14)" fg:x="82" fg:w="1"/><text x="6.8311%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.5811%" y="405" width="0.0803%" height="15" fill="rgb(253,193,46)" fg:x="82" fg:w="1"/><text x="6.8311%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5811%" y="389" width="0.0803%" height="15" fill="rgb(218,187,39)" fg:x="82" fg:w="1"/><text x="6.8311%" y="399.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="6.6613%" y="629" width="0.0803%" height="15" fill="rgb(227,162,48)" fg:x="83" fg:w="1"/><text x="6.9113%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="6.6613%" y="613" width="0.0803%" height="15" fill="rgb(222,25,5)" fg:x="83" fg:w="1"/><text x="6.9113%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.6613%" y="597" width="0.0803%" height="15" fill="rgb(211,205,16)" fg:x="83" fg:w="1"/><text x="6.9113%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="6.6613%" y="581" width="0.0803%" height="15" fill="rgb(244,191,2)" fg:x="83" fg:w="1"/><text x="6.9113%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6613%" y="565" width="0.0803%" height="15" fill="rgb(248,159,12)" fg:x="83" fg:w="1"/><text x="6.9113%" y="575.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="6.7416%" y="629" width="0.1605%" height="15" fill="rgb(235,204,17)" fg:x="84" fg:w="2"/><text x="6.9916%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="6.7416%" y="613" width="0.1605%" height="15" fill="rgb(240,21,27)" fg:x="84" fg:w="2"/><text x="6.9916%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.16%)</title><rect x="6.7416%" y="597" width="0.1605%" height="15" fill="rgb(224,170,31)" fg:x="84" fg:w="2"/><text x="6.9916%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="6.7416%" y="581" width="0.1605%" height="15" fill="rgb(223,145,32)" fg:x="84" fg:w="2"/><text x="6.9916%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="6.7416%" y="565" width="0.1605%" height="15" fill="rgb(243,100,5)" fg:x="84" fg:w="2"/><text x="6.9916%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.16%)</title><rect x="6.7416%" y="549" width="0.1605%" height="15" fill="rgb(242,131,51)" fg:x="84" fg:w="2"/><text x="6.9916%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.9021%" y="549" width="0.0803%" height="15" fill="rgb(223,156,46)" fg:x="86" fg:w="1"/><text x="7.1521%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="6.9021%" y="613" width="0.1605%" height="15" fill="rgb(215,10,40)" fg:x="86" fg:w="2"/><text x="7.1521%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="6.9021%" y="597" width="0.1605%" height="15" fill="rgb(233,155,0)" fg:x="86" fg:w="2"/><text x="7.1521%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="6.9021%" y="581" width="0.1605%" height="15" fill="rgb(247,78,6)" fg:x="86" fg:w="2"/><text x="7.1521%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="6.9021%" y="565" width="0.1605%" height="15" fill="rgb(237,217,21)" fg:x="86" fg:w="2"/><text x="7.1521%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="6.9823%" y="549" width="0.0803%" height="15" fill="rgb(212,1,21)" fg:x="87" fg:w="1"/><text x="7.2323%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.9823%" y="533" width="0.0803%" height="15" fill="rgb(213,7,14)" fg:x="87" fg:w="1"/><text x="7.2323%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.9823%" y="517" width="0.0803%" height="15" fill="rgb(225,84,14)" fg:x="87" fg:w="1"/><text x="7.2323%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.9823%" y="501" width="0.0803%" height="15" fill="rgb(239,216,39)" fg:x="87" fg:w="1"/><text x="7.2323%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9823%" y="485" width="0.0803%" height="15" fill="rgb(253,29,23)" fg:x="87" fg:w="1"/><text x="7.2323%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.0626%" y="613" width="0.0803%" height="15" fill="rgb(220,167,50)" fg:x="88" fg:w="1"/><text x="7.3126%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0626%" y="597" width="0.0803%" height="15" fill="rgb(232,141,1)" fg:x="88" fg:w="1"/><text x="7.3126%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0626%" y="581" width="0.0803%" height="15" fill="rgb(222,210,1)" fg:x="88" fg:w="1"/><text x="7.3126%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0626%" y="565" width="0.0803%" height="15" fill="rgb(219,84,10)" fg:x="88" fg:w="1"/><text x="7.3126%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="6.9021%" y="629" width="0.3210%" height="15" fill="rgb(245,188,6)" fg:x="86" fg:w="4"/><text x="7.1521%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.1429%" y="613" width="0.0803%" height="15" fill="rgb(252,139,39)" fg:x="89" fg:w="1"/><text x="7.3929%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.1429%" y="597" width="0.0803%" height="15" fill="rgb(218,42,26)" fg:x="89" fg:w="1"/><text x="7.3929%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="7.1429%" y="581" width="0.0803%" height="15" fill="rgb(237,226,51)" fg:x="89" fg:w="1"/><text x="7.3929%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.1429%" y="565" width="0.0803%" height="15" fill="rgb(246,15,17)" fg:x="89" fg:w="1"/><text x="7.3929%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1429%" y="549" width="0.0803%" height="15" fill="rgb(228,170,42)" fg:x="89" fg:w="1"/><text x="7.3929%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.1429%" y="533" width="0.0803%" height="15" fill="rgb(248,118,53)" fg:x="89" fg:w="1"/><text x="7.3929%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1429%" y="517" width="0.0803%" height="15" fill="rgb(207,30,10)" fg:x="89" fg:w="1"/><text x="7.3929%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.1429%" y="501" width="0.0803%" height="15" fill="rgb(217,104,38)" fg:x="89" fg:w="1"/><text x="7.3929%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.1429%" y="485" width="0.0803%" height="15" fill="rgb(211,165,26)" fg:x="89" fg:w="1"/><text x="7.3929%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2231%" y="517" width="0.0803%" height="15" fill="rgb(247,38,9)" fg:x="90" fg:w="1"/><text x="7.4731%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2231%" y="501" width="0.0803%" height="15" fill="rgb(218,187,8)" fg:x="90" fg:w="1"/><text x="7.4731%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="7.2231%" y="597" width="0.1605%" height="15" fill="rgb(247,94,28)" fg:x="90" fg:w="2"/><text x="7.4731%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="7.2231%" y="581" width="0.1605%" height="15" fill="rgb(218,173,30)" fg:x="90" fg:w="2"/><text x="7.4731%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="7.2231%" y="565" width="0.1605%" height="15" fill="rgb(245,45,36)" fg:x="90" fg:w="2"/><text x="7.4731%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.2231%" y="549" width="0.1605%" height="15" fill="rgb(221,172,44)" fg:x="90" fg:w="2"/><text x="7.4731%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="7.2231%" y="533" width="0.1605%" height="15" fill="rgb(222,45,12)" fg:x="90" fg:w="2"/><text x="7.4731%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.3034%" y="517" width="0.0803%" height="15" fill="rgb(250,10,22)" fg:x="91" fg:w="1"/><text x="7.5534%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3034%" y="501" width="0.0803%" height="15" fill="rgb(239,27,0)" fg:x="91" fg:w="1"/><text x="7.5534%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.3034%" y="485" width="0.0803%" height="15" fill="rgb(223,118,22)" fg:x="91" fg:w="1"/><text x="7.5534%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3034%" y="469" width="0.0803%" height="15" fill="rgb(251,81,25)" fg:x="91" fg:w="1"/><text x="7.5534%" y="479.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3836%" y="581" width="0.0803%" height="15" fill="rgb(237,225,53)" fg:x="92" fg:w="1"/><text x="7.6336%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.3836%" y="565" width="0.0803%" height="15" fill="rgb(237,186,51)" fg:x="92" fg:w="1"/><text x="7.6336%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3836%" y="549" width="0.0803%" height="15" fill="rgb(247,209,11)" fg:x="92" fg:w="1"/><text x="7.6336%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.3836%" y="533" width="0.0803%" height="15" fill="rgb(223,109,27)" fg:x="92" fg:w="1"/><text x="7.6336%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (4 samples, 0.32%)</title><rect x="7.2231%" y="629" width="0.3210%" height="15" fill="rgb(246,181,13)" fg:x="90" fg:w="4"/><text x="7.4731%" y="639.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.32%)</title><rect x="7.2231%" y="613" width="0.3210%" height="15" fill="rgb(234,57,44)" fg:x="90" fg:w="4"/><text x="7.4731%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="7.3836%" y="597" width="0.1605%" height="15" fill="rgb(211,227,50)" fg:x="92" fg:w="2"/><text x="7.6336%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="7.4639%" y="581" width="0.0803%" height="15" fill="rgb(254,57,34)" fg:x="93" fg:w="1"/><text x="7.7139%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.4639%" y="565" width="0.0803%" height="15" fill="rgb(227,212,26)" fg:x="93" fg:w="1"/><text x="7.7139%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="7.4639%" y="549" width="0.0803%" height="15" fill="rgb(244,169,44)" fg:x="93" fg:w="1"/><text x="7.7139%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.4639%" y="533" width="0.0803%" height="15" fill="rgb(236,135,50)" fg:x="93" fg:w="1"/><text x="7.7139%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="7.5441%" y="629" width="0.1605%" height="15" fill="rgb(241,89,30)" fg:x="94" fg:w="2"/><text x="7.7941%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="7.5441%" y="613" width="0.1605%" height="15" fill="rgb(206,113,34)" fg:x="94" fg:w="2"/><text x="7.7941%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="7.5441%" y="597" width="0.1605%" height="15" fill="rgb(218,104,52)" fg:x="94" fg:w="2"/><text x="7.7941%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="7.5441%" y="581" width="0.1605%" height="15" fill="rgb(223,82,32)" fg:x="94" fg:w="2"/><text x="7.7941%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="7.5441%" y="565" width="0.1605%" height="15" fill="rgb(249,219,30)" fg:x="94" fg:w="2"/><text x="7.7941%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (2 samples, 0.16%)</title><rect x="7.5441%" y="549" width="0.1605%" height="15" fill="rgb(233,141,21)" fg:x="94" fg:w="2"/><text x="7.7941%" y="559.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="7.5441%" y="533" width="0.1605%" height="15" fill="rgb(252,87,44)" fg:x="94" fg:w="2"/><text x="7.7941%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="7.5441%" y="517" width="0.1605%" height="15" fill="rgb(229,48,33)" fg:x="94" fg:w="2"/><text x="7.7941%" y="527.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6244%" y="501" width="0.0803%" height="15" fill="rgb(229,23,22)" fg:x="95" fg:w="1"/><text x="7.8744%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.6244%" y="485" width="0.0803%" height="15" fill="rgb(244,116,16)" fg:x="95" fg:w="1"/><text x="7.8744%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6244%" y="469" width="0.0803%" height="15" fill="rgb(247,45,10)" fg:x="95" fg:w="1"/><text x="7.8744%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6244%" y="453" width="0.0803%" height="15" fill="rgb(228,60,29)" fg:x="95" fg:w="1"/><text x="7.8744%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6244%" y="437" width="0.0803%" height="15" fill="rgb(205,129,15)" fg:x="95" fg:w="1"/><text x="7.8744%" y="447.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="7.7047%" y="613" width="0.1605%" height="15" fill="rgb(206,229,4)" fg:x="96" fg:w="2"/><text x="7.9547%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="7.7047%" y="597" width="0.1605%" height="15" fill="rgb(249,191,30)" fg:x="96" fg:w="2"/><text x="7.9547%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="7.7047%" y="581" width="0.1605%" height="15" fill="rgb(250,84,54)" fg:x="96" fg:w="2"/><text x="7.9547%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.7849%" y="565" width="0.0803%" height="15" fill="rgb(207,25,53)" fg:x="97" fg:w="1"/><text x="8.0349%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="7.7849%" y="549" width="0.0803%" height="15" fill="rgb(235,40,8)" fg:x="97" fg:w="1"/><text x="8.0349%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.7849%" y="533" width="0.0803%" height="15" fill="rgb(226,169,33)" fg:x="97" fg:w="1"/><text x="8.0349%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.7849%" y="517" width="0.0803%" height="15" fill="rgb(238,110,8)" fg:x="97" fg:w="1"/><text x="8.0349%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.7849%" y="501" width="0.0803%" height="15" fill="rgb(251,206,12)" fg:x="97" fg:w="1"/><text x="8.0349%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.7849%" y="485" width="0.0803%" height="15" fill="rgb(248,171,18)" fg:x="97" fg:w="1"/><text x="8.0349%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.7849%" y="469" width="0.0803%" height="15" fill="rgb(213,65,46)" fg:x="97" fg:w="1"/><text x="8.0349%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.7849%" y="453" width="0.0803%" height="15" fill="rgb(211,154,15)" fg:x="97" fg:w="1"/><text x="8.0349%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="7.7849%" y="437" width="0.0803%" height="15" fill="rgb(217,75,43)" fg:x="97" fg:w="1"/><text x="8.0349%" y="447.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="7.8652%" y="613" width="0.0803%" height="15" fill="rgb(230,32,33)" fg:x="98" fg:w="1"/><text x="8.1152%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="7.8652%" y="597" width="0.0803%" height="15" fill="rgb(221,100,16)" fg:x="98" fg:w="1"/><text x="8.1152%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="7.8652%" y="581" width="0.0803%" height="15" fill="rgb(212,129,47)" fg:x="98" fg:w="1"/><text x="8.1152%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.8652%" y="565" width="0.0803%" height="15" fill="rgb(239,217,47)" fg:x="98" fg:w="1"/><text x="8.1152%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.8652%" y="549" width="0.0803%" height="15" fill="rgb(230,84,24)" fg:x="98" fg:w="1"/><text x="8.1152%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="7.8652%" y="533" width="0.0803%" height="15" fill="rgb(214,153,51)" fg:x="98" fg:w="1"/><text x="8.1152%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.8652%" y="517" width="0.0803%" height="15" fill="rgb(231,6,35)" fg:x="98" fg:w="1"/><text x="8.1152%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.8652%" y="501" width="0.0803%" height="15" fill="rgb(229,122,30)" fg:x="98" fg:w="1"/><text x="8.1152%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.8652%" y="485" width="0.0803%" height="15" fill="rgb(234,71,10)" fg:x="98" fg:w="1"/><text x="8.1152%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.8652%" y="469" width="0.0803%" height="15" fill="rgb(215,173,26)" fg:x="98" fg:w="1"/><text x="8.1152%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="7.8652%" y="453" width="0.0803%" height="15" fill="rgb(248,118,52)" fg:x="98" fg:w="1"/><text x="8.1152%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.9454%" y="565" width="0.0803%" height="15" fill="rgb(237,55,46)" fg:x="99" fg:w="1"/><text x="8.1954%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="7.9454%" y="549" width="0.0803%" height="15" fill="rgb(243,214,43)" fg:x="99" fg:w="1"/><text x="8.1954%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (56 samples, 4.49%)</title><rect x="3.6116%" y="645" width="4.4944%" height="15" fill="rgb(252,123,30)" fg:x="45" fg:w="56"/><text x="3.8616%" y="655.50">plugi..</text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="7.7047%" y="629" width="0.4013%" height="15" fill="rgb(215,73,39)" fg:x="96" fg:w="5"/><text x="7.9547%" y="639.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="7.9454%" y="613" width="0.1605%" height="15" fill="rgb(251,194,29)" fg:x="99" fg:w="2"/><text x="8.1954%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="7.9454%" y="597" width="0.1605%" height="15" fill="rgb(224,58,52)" fg:x="99" fg:w="2"/><text x="8.1954%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="7.9454%" y="581" width="0.1605%" height="15" fill="rgb(248,106,46)" fg:x="99" fg:w="2"/><text x="8.1954%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0257%" y="565" width="0.0803%" height="15" fill="rgb(223,80,29)" fg:x="100" fg:w="1"/><text x="8.2757%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0257%" y="549" width="0.0803%" height="15" fill="rgb(243,137,9)" fg:x="100" fg:w="1"/><text x="8.2757%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="8.0257%" y="533" width="0.0803%" height="15" fill="rgb(235,121,28)" fg:x="100" fg:w="1"/><text x="8.2757%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="8.1059%" y="645" width="0.0803%" height="15" fill="rgb(219,121,41)" fg:x="101" fg:w="1"/><text x="8.3559%" y="655.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="8.1059%" y="629" width="0.0803%" height="15" fill="rgb(251,60,6)" fg:x="101" fg:w="1"/><text x="8.3559%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="8.1059%" y="613" width="0.0803%" height="15" fill="rgb(208,12,30)" fg:x="101" fg:w="1"/><text x="8.3559%" y="623.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="8.1059%" y="597" width="0.0803%" height="15" fill="rgb(207,176,36)" fg:x="101" fg:w="1"/><text x="8.3559%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.1059%" y="581" width="0.0803%" height="15" fill="rgb(211,188,29)" fg:x="101" fg:w="1"/><text x="8.3559%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="8.1862%" y="645" width="0.0803%" height="15" fill="rgb(220,184,37)" fg:x="102" fg:w="1"/><text x="8.4362%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="8.1862%" y="629" width="0.0803%" height="15" fill="rgb(239,87,37)" fg:x="102" fg:w="1"/><text x="8.4362%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="8.1862%" y="613" width="0.0803%" height="15" fill="rgb(232,113,44)" fg:x="102" fg:w="1"/><text x="8.4362%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="8.1862%" y="597" width="0.0803%" height="15" fill="rgb(246,25,39)" fg:x="102" fg:w="1"/><text x="8.4362%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="8.1862%" y="581" width="0.0803%" height="15" fill="rgb(247,30,13)" fg:x="102" fg:w="1"/><text x="8.4362%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="8.1862%" y="565" width="0.0803%" height="15" fill="rgb(230,176,35)" fg:x="102" fg:w="1"/><text x="8.4362%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="8.1862%" y="549" width="0.0803%" height="15" fill="rgb(222,23,18)" fg:x="102" fg:w="1"/><text x="8.4362%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="8.1862%" y="533" width="0.0803%" height="15" fill="rgb(234,86,8)" fg:x="102" fg:w="1"/><text x="8.4362%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="8.1862%" y="517" width="0.0803%" height="15" fill="rgb(206,218,47)" fg:x="102" fg:w="1"/><text x="8.4362%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="8.2665%" y="629" width="0.0803%" height="15" fill="rgb(229,35,31)" fg:x="103" fg:w="1"/><text x="8.5165%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.2665%" y="613" width="0.0803%" height="15" fill="rgb(242,81,7)" fg:x="103" fg:w="1"/><text x="8.5165%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.3467%" y="597" width="0.0803%" height="15" fill="rgb(231,11,35)" fg:x="104" fg:w="1"/><text x="8.5967%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.3467%" y="581" width="0.0803%" height="15" fill="rgb(219,218,17)" fg:x="104" fg:w="1"/><text x="8.5967%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.3467%" y="565" width="0.0803%" height="15" fill="rgb(221,83,32)" fg:x="104" fg:w="1"/><text x="8.5967%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.3467%" y="549" width="0.0803%" height="15" fill="rgb(233,49,54)" fg:x="104" fg:w="1"/><text x="8.5967%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.3467%" y="533" width="0.0803%" height="15" fill="rgb(206,18,51)" fg:x="104" fg:w="1"/><text x="8.5967%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.3467%" y="517" width="0.0803%" height="15" fill="rgb(249,193,15)" fg:x="104" fg:w="1"/><text x="8.5967%" y="527.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (85 samples, 6.82%)</title><rect x="1.6854%" y="661" width="6.8218%" height="15" fill="rgb(245,186,19)" fg:x="21" fg:w="85"/><text x="1.9354%" y="671.50">&lt;tests::H..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="8.2665%" y="645" width="0.2408%" height="15" fill="rgb(230,4,24)" fg:x="103" fg:w="3"/><text x="8.5165%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="8.3467%" y="629" width="0.1605%" height="15" fill="rgb(234,75,27)" fg:x="104" fg:w="2"/><text x="8.5967%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="8.3467%" y="613" width="0.1605%" height="15" fill="rgb(244,187,35)" fg:x="104" fg:w="2"/><text x="8.5967%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="8.4270%" y="597" width="0.0803%" height="15" fill="rgb(241,97,43)" fg:x="105" fg:w="1"/><text x="8.6770%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="8.4270%" y="581" width="0.0803%" height="15" fill="rgb(236,94,2)" fg:x="105" fg:w="1"/><text x="8.6770%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="8.4270%" y="565" width="0.0803%" height="15" fill="rgb(231,175,7)" fg:x="105" fg:w="1"/><text x="8.6770%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="8.4270%" y="549" width="0.0803%" height="15" fill="rgb(236,89,47)" fg:x="105" fg:w="1"/><text x="8.6770%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4270%" y="533" width="0.0803%" height="15" fill="rgb(213,191,37)" fg:x="105" fg:w="1"/><text x="8.6770%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.4270%" y="517" width="0.0803%" height="15" fill="rgb(252,0,34)" fg:x="105" fg:w="1"/><text x="8.6770%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.4270%" y="501" width="0.0803%" height="15" fill="rgb(208,145,44)" fg:x="105" fg:w="1"/><text x="8.6770%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="8.5072%" y="645" width="0.0803%" height="15" fill="rgb(227,95,50)" fg:x="106" fg:w="1"/><text x="8.7572%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="8.5072%" y="629" width="0.0803%" height="15" fill="rgb(222,136,24)" fg:x="106" fg:w="1"/><text x="8.7572%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.5072%" y="613" width="0.0803%" height="15" fill="rgb(218,105,10)" fg:x="106" fg:w="1"/><text x="8.7572%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="8.5072%" y="597" width="0.0803%" height="15" fill="rgb(216,65,28)" fg:x="106" fg:w="1"/><text x="8.7572%" y="607.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="8.5072%" y="581" width="0.0803%" height="15" fill="rgb(229,6,28)" fg:x="106" fg:w="1"/><text x="8.7572%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="8.5072%" y="565" width="0.0803%" height="15" fill="rgb(222,160,42)" fg:x="106" fg:w="1"/><text x="8.7572%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="8.5072%" y="549" width="0.0803%" height="15" fill="rgb(235,83,49)" fg:x="106" fg:w="1"/><text x="8.7572%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.5875%" y="629" width="0.0803%" height="15" fill="rgb(236,86,36)" fg:x="107" fg:w="1"/><text x="8.8375%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5875%" y="613" width="0.0803%" height="15" fill="rgb(236,19,41)" fg:x="107" fg:w="1"/><text x="8.8375%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5875%" y="597" width="0.0803%" height="15" fill="rgb(217,71,31)" fg:x="107" fg:w="1"/><text x="8.8375%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.5875%" y="581" width="0.0803%" height="15" fill="rgb(236,209,25)" fg:x="107" fg:w="1"/><text x="8.8375%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5875%" y="565" width="0.0803%" height="15" fill="rgb(247,104,21)" fg:x="107" fg:w="1"/><text x="8.8375%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="8.6677%" y="597" width="0.1605%" height="15" fill="rgb(243,80,38)" fg:x="108" fg:w="2"/><text x="8.9177%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="8.6677%" y="581" width="0.1605%" height="15" fill="rgb(232,109,38)" fg:x="108" fg:w="2"/><text x="8.9177%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.6677%" y="565" width="0.1605%" height="15" fill="rgb(212,177,53)" fg:x="108" fg:w="2"/><text x="8.9177%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="8.7480%" y="549" width="0.0803%" height="15" fill="rgb(227,30,34)" fg:x="109" fg:w="1"/><text x="8.9980%" y="559.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="8.7480%" y="533" width="0.0803%" height="15" fill="rgb(205,175,25)" fg:x="109" fg:w="1"/><text x="8.9980%" y="543.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="8.7480%" y="517" width="0.0803%" height="15" fill="rgb(249,39,54)" fg:x="109" fg:w="1"/><text x="8.9980%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.7480%" y="501" width="0.0803%" height="15" fill="rgb(215,54,37)" fg:x="109" fg:w="1"/><text x="8.9980%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.7480%" y="485" width="0.0803%" height="15" fill="rgb(205,60,46)" fg:x="109" fg:w="1"/><text x="8.9980%" y="495.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (3 samples, 0.24%)</title><rect x="8.6677%" y="629" width="0.2408%" height="15" fill="rgb(238,89,29)" fg:x="108" fg:w="3"/><text x="8.9177%" y="639.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (3 samples, 0.24%)</title><rect x="8.6677%" y="613" width="0.2408%" height="15" fill="rgb(212,48,10)" fg:x="108" fg:w="3"/><text x="8.9177%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.8283%" y="597" width="0.0803%" height="15" fill="rgb(237,186,28)" fg:x="110" fg:w="1"/><text x="9.0783%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="8.9085%" y="613" width="0.0803%" height="15" fill="rgb(237,204,4)" fg:x="111" fg:w="1"/><text x="9.1585%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;engine::session::state::ModifiedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="8.9085%" y="597" width="0.0803%" height="15" fill="rgb(237,15,47)" fg:x="111" fg:w="1"/><text x="9.1585%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="8.9888%" y="549" width="0.0803%" height="15" fill="rgb(244,110,25)" fg:x="112" fg:w="1"/><text x="9.2388%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.9888%" y="533" width="0.0803%" height="15" fill="rgb(241,12,16)" fg:x="112" fg:w="1"/><text x="9.2388%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.9888%" y="517" width="0.0803%" height="15" fill="rgb(235,25,9)" fg:x="112" fg:w="1"/><text x="9.2388%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.9888%" y="501" width="0.0803%" height="15" fill="rgb(245,159,19)" fg:x="112" fg:w="1"/><text x="9.2388%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.0690%" y="533" width="0.0803%" height="15" fill="rgb(236,63,32)" fg:x="113" fg:w="1"/><text x="9.3190%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.0690%" y="517" width="0.0803%" height="15" fill="rgb(235,32,52)" fg:x="113" fg:w="1"/><text x="9.3190%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.0690%" y="501" width="0.0803%" height="15" fill="rgb(209,176,21)" fg:x="113" fg:w="1"/><text x="9.3190%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.0690%" y="485" width="0.0803%" height="15" fill="rgb(205,90,42)" fg:x="113" fg:w="1"/><text x="9.3190%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.0690%" y="469" width="0.0803%" height="15" fill="rgb(213,132,16)" fg:x="113" fg:w="1"/><text x="9.3190%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.0690%" y="453" width="0.0803%" height="15" fill="rgb(232,11,22)" fg:x="113" fg:w="1"/><text x="9.3190%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.0690%" y="437" width="0.0803%" height="15" fill="rgb(248,167,41)" fg:x="113" fg:w="1"/><text x="9.3190%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1493%" y="533" width="0.0803%" height="15" fill="rgb(209,127,6)" fg:x="114" fg:w="1"/><text x="9.3993%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1493%" y="517" width="0.0803%" height="15" fill="rgb(246,210,34)" fg:x="114" fg:w="1"/><text x="9.3993%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1493%" y="501" width="0.0803%" height="15" fill="rgb(238,165,13)" fg:x="114" fg:w="1"/><text x="9.3993%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1493%" y="485" width="0.0803%" height="15" fill="rgb(233,98,15)" fg:x="114" fg:w="1"/><text x="9.3993%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.1493%" y="469" width="0.0803%" height="15" fill="rgb(215,215,51)" fg:x="114" fg:w="1"/><text x="9.3993%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.1493%" y="453" width="0.0803%" height="15" fill="rgb(217,161,25)" fg:x="114" fg:w="1"/><text x="9.3993%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.1493%" y="437" width="0.0803%" height="15" fill="rgb(217,167,48)" fg:x="114" fg:w="1"/><text x="9.3993%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="9.1493%" y="421" width="0.0803%" height="15" fill="rgb(205,163,34)" fg:x="114" fg:w="1"/><text x="9.3993%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="8.9888%" y="565" width="0.3210%" height="15" fill="rgb(241,197,31)" fg:x="112" fg:w="4"/><text x="9.2388%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="9.0690%" y="549" width="0.2408%" height="15" fill="rgb(225,123,11)" fg:x="113" fg:w="3"/><text x="9.3190%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.2295%" y="533" width="0.0803%" height="15" fill="rgb(217,4,20)" fg:x="115" fg:w="1"/><text x="9.4795%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.2295%" y="517" width="0.0803%" height="15" fill="rgb(215,55,9)" fg:x="115" fg:w="1"/><text x="9.4795%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3098%" y="517" width="0.0803%" height="15" fill="rgb(218,165,5)" fg:x="116" fg:w="1"/><text x="9.5598%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.3098%" y="565" width="0.1605%" height="15" fill="rgb(222,175,15)" fg:x="116" fg:w="2"/><text x="9.5598%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="9.3098%" y="549" width="0.1605%" height="15" fill="rgb(223,85,34)" fg:x="116" fg:w="2"/><text x="9.5598%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.3098%" y="533" width="0.1605%" height="15" fill="rgb(234,228,29)" fg:x="116" fg:w="2"/><text x="9.5598%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.3900%" y="517" width="0.0803%" height="15" fill="rgb(239,7,28)" fg:x="117" fg:w="1"/><text x="9.6400%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.3900%" y="501" width="0.0803%" height="15" fill="rgb(252,222,53)" fg:x="117" fg:w="1"/><text x="9.6400%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="9.3900%" y="485" width="0.0803%" height="15" fill="rgb(232,146,44)" fg:x="117" fg:w="1"/><text x="9.6400%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.3900%" y="469" width="0.0803%" height="15" fill="rgb(243,223,53)" fg:x="117" fg:w="1"/><text x="9.6400%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.3900%" y="453" width="0.0803%" height="15" fill="rgb(219,128,25)" fg:x="117" fg:w="1"/><text x="9.6400%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3900%" y="437" width="0.0803%" height="15" fill="rgb(223,56,32)" fg:x="117" fg:w="1"/><text x="9.6400%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.4703%" y="501" width="0.0803%" height="15" fill="rgb(237,41,3)" fg:x="118" fg:w="1"/><text x="9.7203%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="9.4703%" y="549" width="0.1605%" height="15" fill="rgb(235,138,9)" fg:x="118" fg:w="2"/><text x="9.7203%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.4703%" y="533" width="0.1605%" height="15" fill="rgb(214,131,10)" fg:x="118" fg:w="2"/><text x="9.7203%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="9.4703%" y="517" width="0.1605%" height="15" fill="rgb(229,89,7)" fg:x="118" fg:w="2"/><text x="9.7203%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.5506%" y="501" width="0.0803%" height="15" fill="rgb(240,24,42)" fg:x="119" fg:w="1"/><text x="9.8006%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.5506%" y="485" width="0.0803%" height="15" fill="rgb(243,188,54)" fg:x="119" fg:w="1"/><text x="9.8006%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.5506%" y="469" width="0.0803%" height="15" fill="rgb(246,92,22)" fg:x="119" fg:w="1"/><text x="9.8006%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.9518%" y="373" width="0.0803%" height="15" fill="rgb(211,176,51)" fg:x="124" fg:w="1"/><text x="10.2018%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9518%" y="357" width="0.0803%" height="15" fill="rgb(246,207,34)" fg:x="124" fg:w="1"/><text x="10.2018%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="9.7111%" y="469" width="0.4013%" height="15" fill="rgb(239,95,2)" fg:x="121" fg:w="5"/><text x="9.9611%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="9.7111%" y="453" width="0.4013%" height="15" fill="rgb(211,124,25)" fg:x="121" fg:w="5"/><text x="9.9611%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="9.8716%" y="437" width="0.2408%" height="15" fill="rgb(231,221,19)" fg:x="123" fg:w="3"/><text x="10.1216%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="9.8716%" y="421" width="0.2408%" height="15" fill="rgb(239,183,19)" fg:x="123" fg:w="3"/><text x="10.1216%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="9.8716%" y="405" width="0.2408%" height="15" fill="rgb(221,130,29)" fg:x="123" fg:w="3"/><text x="10.1216%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="9.8716%" y="389" width="0.2408%" height="15" fill="rgb(206,130,36)" fg:x="123" fg:w="3"/><text x="10.1216%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0321%" y="373" width="0.0803%" height="15" fill="rgb(215,70,19)" fg:x="125" fg:w="1"/><text x="10.2821%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1926%" y="437" width="0.0803%" height="15" fill="rgb(244,16,43)" fg:x="127" fg:w="1"/><text x="10.4426%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="9.6308%" y="549" width="0.7223%" height="15" fill="rgb(222,115,32)" fg:x="120" fg:w="9"/><text x="9.8808%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="9.6308%" y="533" width="0.7223%" height="15" fill="rgb(247,48,25)" fg:x="120" fg:w="9"/><text x="9.8808%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="9.6308%" y="517" width="0.7223%" height="15" fill="rgb(226,180,51)" fg:x="120" fg:w="9"/><text x="9.8808%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="9.7111%" y="501" width="0.6421%" height="15" fill="rgb(217,142,42)" fg:x="121" fg:w="8"/><text x="9.9611%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="9.7111%" y="485" width="0.6421%" height="15" fill="rgb(220,178,3)" fg:x="121" fg:w="8"/><text x="9.9611%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="10.1124%" y="469" width="0.2408%" height="15" fill="rgb(217,221,4)" fg:x="126" fg:w="3"/><text x="10.3624%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.1926%" y="453" width="0.1605%" height="15" fill="rgb(237,63,43)" fg:x="127" fg:w="2"/><text x="10.4426%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2729%" y="437" width="0.0803%" height="15" fill="rgb(220,57,8)" fg:x="128" fg:w="1"/><text x="10.5229%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.2729%" y="421" width="0.0803%" height="15" fill="rgb(254,186,27)" fg:x="128" fg:w="1"/><text x="10.5229%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.4334%" y="437" width="0.0803%" height="15" fill="rgb(251,57,28)" fg:x="130" fg:w="1"/><text x="10.6834%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.4334%" y="421" width="0.0803%" height="15" fill="rgb(215,228,0)" fg:x="130" fg:w="1"/><text x="10.6834%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="10.4334%" y="453" width="0.1605%" height="15" fill="rgb(237,218,39)" fg:x="130" fg:w="2"/><text x="10.6834%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5136%" y="437" width="0.0803%" height="15" fill="rgb(207,2,54)" fg:x="131" fg:w="1"/><text x="10.7636%" y="447.50"></text></g><g><title>engine::session::Session::close (27 samples, 2.17%)</title><rect x="8.5072%" y="661" width="2.1669%" height="15" fill="rgb(232,76,50)" fg:x="106" fg:w="27"/><text x="8.7572%" y="671.50">e..</text></g><g><title>engine::session::state::State::close (26 samples, 2.09%)</title><rect x="8.5875%" y="645" width="2.0867%" height="15" fill="rgb(211,85,31)" fg:x="107" fg:w="26"/><text x="8.8375%" y="655.50">e..</text></g><g><title>engine::session::state::State::flush_entities (22 samples, 1.77%)</title><rect x="8.9085%" y="629" width="1.7657%" height="15" fill="rgb(223,210,27)" fg:x="111" fg:w="22"/><text x="9.1585%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (21 samples, 1.69%)</title><rect x="8.9888%" y="613" width="1.6854%" height="15" fill="rgb(254,36,8)" fg:x="112" fg:w="21"/><text x="9.2388%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 1.69%)</title><rect x="8.9888%" y="597" width="1.6854%" height="15" fill="rgb(213,4,25)" fg:x="112" fg:w="21"/><text x="9.2388%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (21 samples, 1.69%)</title><rect x="8.9888%" y="581" width="1.6854%" height="15" fill="rgb(224,2,39)" fg:x="112" fg:w="21"/><text x="9.2388%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (15 samples, 1.20%)</title><rect x="9.4703%" y="565" width="1.2039%" height="15" fill="rgb(208,8,39)" fg:x="118" fg:w="15"/><text x="9.7203%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="10.3531%" y="549" width="0.3210%" height="15" fill="rgb(216,226,3)" fg:x="129" fg:w="4"/><text x="10.6031%" y="559.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="10.3531%" y="533" width="0.3210%" height="15" fill="rgb(249,139,31)" fg:x="129" fg:w="4"/><text x="10.6031%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="10.3531%" y="517" width="0.3210%" height="15" fill="rgb(242,170,35)" fg:x="129" fg:w="4"/><text x="10.6031%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="10.3531%" y="501" width="0.3210%" height="15" fill="rgb(238,14,9)" fg:x="129" fg:w="4"/><text x="10.6031%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="10.4334%" y="485" width="0.2408%" height="15" fill="rgb(251,81,46)" fg:x="130" fg:w="3"/><text x="10.6834%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="10.4334%" y="469" width="0.2408%" height="15" fill="rgb(230,23,4)" fg:x="130" fg:w="3"/><text x="10.6834%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.5939%" y="453" width="0.0803%" height="15" fill="rgb(211,85,25)" fg:x="132" fg:w="1"/><text x="10.8439%" y="463.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.6742%" y="629" width="0.0803%" height="15" fill="rgb(252,23,31)" fg:x="133" fg:w="1"/><text x="10.9242%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.7544%" y="533" width="0.0803%" height="15" fill="rgb(234,163,38)" fg:x="134" fg:w="1"/><text x="11.0044%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.7544%" y="517" width="0.0803%" height="15" fill="rgb(210,190,50)" fg:x="134" fg:w="1"/><text x="11.0044%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.7544%" y="501" width="0.0803%" height="15" fill="rgb(228,158,3)" fg:x="134" fg:w="1"/><text x="11.0044%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.7544%" y="485" width="0.0803%" height="15" fill="rgb(216,130,0)" fg:x="134" fg:w="1"/><text x="11.0044%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.7544%" y="469" width="0.0803%" height="15" fill="rgb(224,184,10)" fg:x="134" fg:w="1"/><text x="11.0044%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.7544%" y="453" width="0.0803%" height="15" fill="rgb(214,202,18)" fg:x="134" fg:w="1"/><text x="11.0044%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.8347%" y="453" width="0.1605%" height="15" fill="rgb(213,229,54)" fg:x="135" fg:w="2"/><text x="11.0847%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.8347%" y="437" width="0.1605%" height="15" fill="rgb(246,120,0)" fg:x="135" fg:w="2"/><text x="11.0847%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.8347%" y="421" width="0.1605%" height="15" fill="rgb(237,6,15)" fg:x="135" fg:w="2"/><text x="11.0847%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.8347%" y="405" width="0.1605%" height="15" fill="rgb(252,156,15)" fg:x="135" fg:w="2"/><text x="11.0847%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="10.8347%" y="469" width="0.2408%" height="15" fill="rgb(249,78,18)" fg:x="135" fg:w="3"/><text x="11.0847%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.9952%" y="453" width="0.0803%" height="15" fill="rgb(230,223,44)" fg:x="137" fg:w="1"/><text x="11.2452%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.1557%" y="421" width="0.0803%" height="15" fill="rgb(230,222,32)" fg:x="139" fg:w="1"/><text x="11.4057%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.1557%" y="405" width="0.0803%" height="15" fill="rgb(247,54,6)" fg:x="139" fg:w="1"/><text x="11.4057%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.1557%" y="389" width="0.0803%" height="15" fill="rgb(247,115,45)" fg:x="139" fg:w="1"/><text x="11.4057%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.1557%" y="373" width="0.0803%" height="15" fill="rgb(213,203,37)" fg:x="139" fg:w="1"/><text x="11.4057%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="11.0754%" y="469" width="0.2408%" height="15" fill="rgb(248,188,18)" fg:x="138" fg:w="3"/><text x="11.3254%" y="479.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="11.0754%" y="453" width="0.2408%" height="15" fill="rgb(206,80,8)" fg:x="138" fg:w="3"/><text x="11.3254%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="11.0754%" y="437" width="0.2408%" height="15" fill="rgb(245,217,31)" fg:x="138" fg:w="3"/><text x="11.3254%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.2360%" y="421" width="0.0803%" height="15" fill="rgb(220,193,15)" fg:x="140" fg:w="1"/><text x="11.4860%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.2360%" y="405" width="0.0803%" height="15" fill="rgb(226,7,19)" fg:x="140" fg:w="1"/><text x="11.4860%" y="415.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.2360%" y="389" width="0.0803%" height="15" fill="rgb(222,145,31)" fg:x="140" fg:w="1"/><text x="11.4860%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.2360%" y="373" width="0.0803%" height="15" fill="rgb(241,193,36)" fg:x="140" fg:w="1"/><text x="11.4860%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.2360%" y="357" width="0.0803%" height="15" fill="rgb(225,123,33)" fg:x="140" fg:w="1"/><text x="11.4860%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="11.3965%" y="389" width="0.1605%" height="15" fill="rgb(246,136,38)" fg:x="142" fg:w="2"/><text x="11.6465%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.5570%" y="341" width="0.0803%" height="15" fill="rgb(243,56,24)" fg:x="144" fg:w="1"/><text x="11.8070%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.5570%" y="325" width="0.0803%" height="15" fill="rgb(215,147,2)" fg:x="144" fg:w="1"/><text x="11.8070%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="11.5570%" y="309" width="0.0803%" height="15" fill="rgb(209,155,27)" fg:x="144" fg:w="1"/><text x="11.8070%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.5570%" y="293" width="0.0803%" height="15" fill="rgb(222,177,11)" fg:x="144" fg:w="1"/><text x="11.8070%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.5570%" y="277" width="0.0803%" height="15" fill="rgb(212,227,15)" fg:x="144" fg:w="1"/><text x="11.8070%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.5570%" y="261" width="0.0803%" height="15" fill="rgb(214,138,20)" fg:x="144" fg:w="1"/><text x="11.8070%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.6372%" y="245" width="0.0803%" height="15" fill="rgb(221,170,31)" fg:x="145" fg:w="1"/><text x="11.8872%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="11.6372%" y="229" width="0.0803%" height="15" fill="rgb(253,207,5)" fg:x="145" fg:w="1"/><text x="11.8872%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="11.6372%" y="213" width="0.0803%" height="15" fill="rgb(212,64,37)" fg:x="145" fg:w="1"/><text x="11.8872%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="11.5570%" y="373" width="0.2408%" height="15" fill="rgb(208,113,51)" fg:x="144" fg:w="3"/><text x="11.8070%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="11.5570%" y="357" width="0.2408%" height="15" fill="rgb(237,15,5)" fg:x="144" fg:w="3"/><text x="11.8070%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="11.6372%" y="341" width="0.1605%" height="15" fill="rgb(238,33,18)" fg:x="145" fg:w="2"/><text x="11.8872%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="11.6372%" y="325" width="0.1605%" height="15" fill="rgb(253,206,50)" fg:x="145" fg:w="2"/><text x="11.8872%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="11.6372%" y="309" width="0.1605%" height="15" fill="rgb(242,158,43)" fg:x="145" fg:w="2"/><text x="11.8872%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.6372%" y="293" width="0.1605%" height="15" fill="rgb(213,125,27)" fg:x="145" fg:w="2"/><text x="11.8872%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="11.6372%" y="277" width="0.1605%" height="15" fill="rgb(233,161,31)" fg:x="145" fg:w="2"/><text x="11.8872%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.6372%" y="261" width="0.1605%" height="15" fill="rgb(218,135,6)" fg:x="145" fg:w="2"/><text x="11.8872%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="11.7175%" y="245" width="0.0803%" height="15" fill="rgb(222,73,53)" fg:x="146" fg:w="1"/><text x="11.9675%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.7175%" y="229" width="0.0803%" height="15" fill="rgb(229,66,53)" fg:x="146" fg:w="1"/><text x="11.9675%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.7175%" y="213" width="0.0803%" height="15" fill="rgb(208,128,19)" fg:x="146" fg:w="1"/><text x="11.9675%" y="223.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="11.7175%" y="197" width="0.0803%" height="15" fill="rgb(235,70,27)" fg:x="146" fg:w="1"/><text x="11.9675%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.7175%" y="181" width="0.0803%" height="15" fill="rgb(241,130,30)" fg:x="146" fg:w="1"/><text x="11.9675%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="11.7978%" y="373" width="0.1605%" height="15" fill="rgb(222,57,48)" fg:x="147" fg:w="2"/><text x="12.0478%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="11.7978%" y="357" width="0.1605%" height="15" fill="rgb(225,204,29)" fg:x="147" fg:w="2"/><text x="12.0478%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="11.7978%" y="341" width="0.1605%" height="15" fill="rgb(240,196,35)" fg:x="147" fg:w="2"/><text x="12.0478%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (11 samples, 0.88%)</title><rect x="11.3965%" y="421" width="0.8828%" height="15" fill="rgb(215,150,16)" fg:x="142" fg:w="11"/><text x="11.6465%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (11 samples, 0.88%)</title><rect x="11.3965%" y="405" width="0.8828%" height="15" fill="rgb(209,170,13)" fg:x="142" fg:w="11"/><text x="11.6465%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (9 samples, 0.72%)</title><rect x="11.5570%" y="389" width="0.7223%" height="15" fill="rgb(235,75,31)" fg:x="144" fg:w="9"/><text x="11.8070%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="11.9583%" y="373" width="0.3210%" height="15" fill="rgb(252,1,47)" fg:x="149" fg:w="4"/><text x="12.2083%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="11.9583%" y="357" width="0.3210%" height="15" fill="rgb(241,2,36)" fg:x="149" fg:w="4"/><text x="12.2083%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="12.1188%" y="341" width="0.1605%" height="15" fill="rgb(236,191,4)" fg:x="151" fg:w="2"/><text x="12.3688%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="12.1188%" y="325" width="0.1605%" height="15" fill="rgb(212,65,35)" fg:x="151" fg:w="2"/><text x="12.3688%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="12.1188%" y="309" width="0.1605%" height="15" fill="rgb(209,49,33)" fg:x="151" fg:w="2"/><text x="12.3688%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.1188%" y="293" width="0.1605%" height="15" fill="rgb(208,36,46)" fg:x="151" fg:w="2"/><text x="12.3688%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.1188%" y="277" width="0.1605%" height="15" fill="rgb(210,125,2)" fg:x="151" fg:w="2"/><text x="12.3688%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.1990%" y="261" width="0.0803%" height="15" fill="rgb(225,62,6)" fg:x="152" fg:w="1"/><text x="12.4490%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (13 samples, 1.04%)</title><rect x="11.3162%" y="469" width="1.0433%" height="15" fill="rgb(210,54,27)" fg:x="141" fg:w="13"/><text x="11.5662%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (13 samples, 1.04%)</title><rect x="11.3162%" y="453" width="1.0433%" height="15" fill="rgb(249,189,52)" fg:x="141" fg:w="13"/><text x="11.5662%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (13 samples, 1.04%)</title><rect x="11.3162%" y="437" width="1.0433%" height="15" fill="rgb(225,134,40)" fg:x="141" fg:w="13"/><text x="11.5662%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.2793%" y="421" width="0.0803%" height="15" fill="rgb(206,13,37)" fg:x="153" fg:w="1"/><text x="12.5293%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.2793%" y="405" width="0.0803%" height="15" fill="rgb(232,114,28)" fg:x="153" fg:w="1"/><text x="12.5293%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.2793%" y="389" width="0.0803%" height="15" fill="rgb(253,215,8)" fg:x="153" fg:w="1"/><text x="12.5293%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.3596%" y="325" width="0.0803%" height="15" fill="rgb(254,64,19)" fg:x="154" fg:w="1"/><text x="12.6096%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.3596%" y="309" width="0.0803%" height="15" fill="rgb(242,18,46)" fg:x="154" fg:w="1"/><text x="12.6096%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.3596%" y="293" width="0.0803%" height="15" fill="rgb(239,192,30)" fg:x="154" fg:w="1"/><text x="12.6096%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.3596%" y="277" width="0.0803%" height="15" fill="rgb(232,73,14)" fg:x="154" fg:w="1"/><text x="12.6096%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.3596%" y="261" width="0.0803%" height="15" fill="rgb(225,51,9)" fg:x="154" fg:w="1"/><text x="12.6096%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.3596%" y="245" width="0.0803%" height="15" fill="rgb(242,217,54)" fg:x="154" fg:w="1"/><text x="12.6096%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.3596%" y="229" width="0.0803%" height="15" fill="rgb(216,93,3)" fg:x="154" fg:w="1"/><text x="12.6096%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.3596%" y="213" width="0.0803%" height="15" fill="rgb(230,119,33)" fg:x="154" fg:w="1"/><text x="12.6096%" y="223.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (21 samples, 1.69%)</title><rect x="10.8347%" y="517" width="1.6854%" height="15" fill="rgb(238,170,27)" fg:x="135" fg:w="21"/><text x="11.0847%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (21 samples, 1.69%)</title><rect x="10.8347%" y="501" width="1.6854%" height="15" fill="rgb(229,8,2)" fg:x="135" fg:w="21"/><text x="11.0847%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (21 samples, 1.69%)</title><rect x="10.8347%" y="485" width="1.6854%" height="15" fill="rgb(205,214,42)" fg:x="135" fg:w="21"/><text x="11.0847%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="12.3596%" y="469" width="0.1605%" height="15" fill="rgb(245,113,1)" fg:x="154" fg:w="2"/><text x="12.6096%" y="479.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="12.3596%" y="453" width="0.1605%" height="15" fill="rgb(252,50,2)" fg:x="154" fg:w="2"/><text x="12.6096%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="12.3596%" y="437" width="0.1605%" height="15" fill="rgb(225,122,24)" fg:x="154" fg:w="2"/><text x="12.6096%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.3596%" y="421" width="0.1605%" height="15" fill="rgb(234,129,31)" fg:x="154" fg:w="2"/><text x="12.6096%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="12.3596%" y="405" width="0.1605%" height="15" fill="rgb(219,177,4)" fg:x="154" fg:w="2"/><text x="12.6096%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.3596%" y="389" width="0.1605%" height="15" fill="rgb(225,142,27)" fg:x="154" fg:w="2"/><text x="12.6096%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="12.3596%" y="373" width="0.1605%" height="15" fill="rgb(205,107,51)" fg:x="154" fg:w="2"/><text x="12.6096%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.3596%" y="357" width="0.1605%" height="15" fill="rgb(236,223,15)" fg:x="154" fg:w="2"/><text x="12.6096%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="12.3596%" y="341" width="0.1605%" height="15" fill="rgb(235,133,11)" fg:x="154" fg:w="2"/><text x="12.6096%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.4398%" y="325" width="0.0803%" height="15" fill="rgb(247,172,13)" fg:x="155" fg:w="1"/><text x="12.6898%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.4398%" y="309" width="0.0803%" height="15" fill="rgb(233,191,41)" fg:x="155" fg:w="1"/><text x="12.6898%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.4398%" y="293" width="0.0803%" height="15" fill="rgb(250,65,16)" fg:x="155" fg:w="1"/><text x="12.6898%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.4398%" y="277" width="0.0803%" height="15" fill="rgb(206,10,27)" fg:x="155" fg:w="1"/><text x="12.6898%" y="287.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="12.4398%" y="261" width="0.0803%" height="15" fill="rgb(212,96,22)" fg:x="155" fg:w="1"/><text x="12.6898%" y="271.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (23 samples, 1.85%)</title><rect x="10.7544%" y="565" width="1.8459%" height="15" fill="rgb(206,50,0)" fg:x="134" fg:w="23"/><text x="11.0044%" y="575.50">&lt;..</text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (23 samples, 1.85%)</title><rect x="10.7544%" y="549" width="1.8459%" height="15" fill="rgb(249,105,52)" fg:x="134" fg:w="23"/><text x="11.0044%" y="559.50">&lt;..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (22 samples, 1.77%)</title><rect x="10.8347%" y="533" width="1.7657%" height="15" fill="rgb(216,93,51)" fg:x="135" fg:w="22"/><text x="11.0847%" y="543.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="12.5201%" y="517" width="0.0803%" height="15" fill="rgb(217,172,13)" fg:x="156" fg:w="1"/><text x="12.7701%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="12.9213%" y="405" width="0.0803%" height="15" fill="rgb(235,199,38)" fg:x="161" fg:w="1"/><text x="13.1713%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.9213%" y="389" width="0.0803%" height="15" fill="rgb(221,97,33)" fg:x="161" fg:w="1"/><text x="13.1713%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9213%" y="373" width="0.0803%" height="15" fill="rgb(205,156,50)" fg:x="161" fg:w="1"/><text x="13.1713%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.9213%" y="357" width="0.0803%" height="15" fill="rgb(215,142,19)" fg:x="161" fg:w="1"/><text x="13.1713%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9213%" y="341" width="0.0803%" height="15" fill="rgb(232,170,7)" fg:x="161" fg:w="1"/><text x="13.1713%" y="351.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="13.0016%" y="405" width="0.2408%" height="15" fill="rgb(223,50,17)" fg:x="162" fg:w="3"/><text x="13.2516%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3 samples, 0.24%)</title><rect x="13.0016%" y="389" width="0.2408%" height="15" fill="rgb(230,103,46)" fg:x="162" fg:w="3"/><text x="13.2516%" y="399.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="13.0016%" y="373" width="0.2408%" height="15" fill="rgb(254,30,34)" fg:x="162" fg:w="3"/><text x="13.2516%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="13.0819%" y="357" width="0.1605%" height="15" fill="rgb(235,198,1)" fg:x="163" fg:w="2"/><text x="13.3319%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="13.0819%" y="341" width="0.1605%" height="15" fill="rgb(217,105,47)" fg:x="163" fg:w="2"/><text x="13.3319%" y="351.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="13.2424%" y="389" width="0.0803%" height="15" fill="rgb(231,18,12)" fg:x="165" fg:w="1"/><text x="13.4924%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.3226%" y="357" width="0.1605%" height="15" fill="rgb(218,196,1)" fg:x="166" fg:w="2"/><text x="13.5726%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.3226%" y="341" width="0.1605%" height="15" fill="rgb(210,32,3)" fg:x="166" fg:w="2"/><text x="13.5726%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.3226%" y="325" width="0.1605%" height="15" fill="rgb(227,178,30)" fg:x="166" fg:w="2"/><text x="13.5726%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="13.3226%" y="309" width="0.1605%" height="15" fill="rgb(231,140,27)" fg:x="166" fg:w="2"/><text x="13.5726%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="13.3226%" y="293" width="0.1605%" height="15" fill="rgb(206,66,35)" fg:x="166" fg:w="2"/><text x="13.5726%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="13.3226%" y="277" width="0.1605%" height="15" fill="rgb(212,34,2)" fg:x="166" fg:w="2"/><text x="13.5726%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="13.3226%" y="261" width="0.1605%" height="15" fill="rgb(207,201,33)" fg:x="166" fg:w="2"/><text x="13.5726%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="13.3226%" y="245" width="0.1605%" height="15" fill="rgb(221,135,32)" fg:x="166" fg:w="2"/><text x="13.5726%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="13.3226%" y="229" width="0.1605%" height="15" fill="rgb(206,77,31)" fg:x="166" fg:w="2"/><text x="13.5726%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="13.3226%" y="213" width="0.1605%" height="15" fill="rgb(252,198,50)" fg:x="166" fg:w="2"/><text x="13.5726%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="13.3226%" y="197" width="0.1605%" height="15" fill="rgb(206,79,27)" fg:x="166" fg:w="2"/><text x="13.5726%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="13.3226%" y="181" width="0.1605%" height="15" fill="rgb(228,108,9)" fg:x="166" fg:w="2"/><text x="13.5726%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="13.3226%" y="165" width="0.1605%" height="15" fill="rgb(213,9,39)" fg:x="166" fg:w="2"/><text x="13.5726%" y="175.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="13.3226%" y="149" width="0.1605%" height="15" fill="rgb(252,51,13)" fg:x="166" fg:w="2"/><text x="13.5726%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="13.3226%" y="133" width="0.1605%" height="15" fill="rgb(218,202,39)" fg:x="166" fg:w="2"/><text x="13.5726%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.5634%" y="293" width="0.0803%" height="15" fill="rgb(214,122,21)" fg:x="169" fg:w="1"/><text x="13.8134%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6437%" y="293" width="0.0803%" height="15" fill="rgb(217,205,48)" fg:x="170" fg:w="1"/><text x="13.8937%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.6437%" y="277" width="0.0803%" height="15" fill="rgb(230,216,13)" fg:x="170" fg:w="1"/><text x="13.8937%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.6437%" y="261" width="0.0803%" height="15" fill="rgb(249,118,4)" fg:x="170" fg:w="1"/><text x="13.8937%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (7 samples, 0.56%)</title><rect x="13.2424%" y="405" width="0.5618%" height="15" fill="rgb(212,207,40)" fg:x="165" fg:w="7"/><text x="13.4924%" y="415.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.48%)</title><rect x="13.3226%" y="389" width="0.4815%" height="15" fill="rgb(217,156,26)" fg:x="166" fg:w="6"/><text x="13.5726%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="13.3226%" y="373" width="0.4815%" height="15" fill="rgb(226,86,34)" fg:x="166" fg:w="6"/><text x="13.5726%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.32%)</title><rect x="13.4831%" y="357" width="0.3210%" height="15" fill="rgb(217,111,30)" fg:x="168" fg:w="4"/><text x="13.7331%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="13.4831%" y="341" width="0.3210%" height="15" fill="rgb(228,64,18)" fg:x="168" fg:w="4"/><text x="13.7331%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.24%)</title><rect x="13.5634%" y="325" width="0.2408%" height="15" fill="rgb(254,217,48)" fg:x="169" fg:w="3"/><text x="13.8134%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.5634%" y="309" width="0.2408%" height="15" fill="rgb(226,156,48)" fg:x="169" fg:w="3"/><text x="13.8134%" y="319.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="13.7239%" y="293" width="0.0803%" height="15" fill="rgb(236,168,20)" fg:x="171" fg:w="1"/><text x="13.9739%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.8042%" y="357" width="0.0803%" height="15" fill="rgb(239,210,33)" fg:x="172" fg:w="1"/><text x="14.0542%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.8042%" y="341" width="0.0803%" height="15" fill="rgb(242,85,17)" fg:x="172" fg:w="1"/><text x="14.0542%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.8844%" y="357" width="0.0803%" height="15" fill="rgb(221,196,15)" fg:x="173" fg:w="1"/><text x="14.1344%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (5 samples, 0.40%)</title><rect x="13.8042%" y="405" width="0.4013%" height="15" fill="rgb(249,76,21)" fg:x="172" fg:w="5"/><text x="14.0542%" y="415.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="13.8042%" y="389" width="0.4013%" height="15" fill="rgb(243,67,29)" fg:x="172" fg:w="5"/><text x="14.0542%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="13.8042%" y="373" width="0.4013%" height="15" fill="rgb(240,159,2)" fg:x="172" fg:w="5"/><text x="14.0542%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="13.9647%" y="357" width="0.2408%" height="15" fill="rgb(244,64,3)" fg:x="174" fg:w="3"/><text x="14.2147%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.9647%" y="341" width="0.2408%" height="15" fill="rgb(220,86,40)" fg:x="174" fg:w="3"/><text x="14.2147%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.24%)</title><rect x="13.9647%" y="325" width="0.2408%" height="15" fill="rgb(222,194,51)" fg:x="174" fg:w="3"/><text x="14.2147%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.9647%" y="309" width="0.2408%" height="15" fill="rgb(207,154,19)" fg:x="174" fg:w="3"/><text x="14.2147%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="14.0449%" y="293" width="0.1605%" height="15" fill="rgb(206,178,36)" fg:x="175" fg:w="2"/><text x="14.2949%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1252%" y="277" width="0.0803%" height="15" fill="rgb(218,8,24)" fg:x="176" fg:w="1"/><text x="14.3752%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.1252%" y="261" width="0.0803%" height="15" fill="rgb(226,83,41)" fg:x="176" fg:w="1"/><text x="14.3752%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.1252%" y="245" width="0.0803%" height="15" fill="rgb(224,23,22)" fg:x="176" fg:w="1"/><text x="14.3752%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.2055%" y="405" width="0.0803%" height="15" fill="rgb(218,198,45)" fg:x="177" fg:w="1"/><text x="14.4555%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.2857%" y="373" width="0.0803%" height="15" fill="rgb(249,147,41)" fg:x="178" fg:w="1"/><text x="14.5357%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7673%" y="293" width="0.0803%" height="15" fill="rgb(244,224,13)" fg:x="184" fg:w="1"/><text x="15.0173%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7673%" y="277" width="0.0803%" height="15" fill="rgb(225,97,27)" fg:x="184" fg:w="1"/><text x="15.0173%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.7673%" y="261" width="0.0803%" height="15" fill="rgb(254,64,0)" fg:x="184" fg:w="1"/><text x="15.0173%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.7673%" y="245" width="0.0803%" height="15" fill="rgb(208,130,43)" fg:x="184" fg:w="1"/><text x="15.0173%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.7673%" y="229" width="0.0803%" height="15" fill="rgb(247,91,25)" fg:x="184" fg:w="1"/><text x="15.0173%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7673%" y="213" width="0.0803%" height="15" fill="rgb(215,218,42)" fg:x="184" fg:w="1"/><text x="15.0173%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7673%" y="197" width="0.0803%" height="15" fill="rgb(233,9,24)" fg:x="184" fg:w="1"/><text x="15.0173%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.7673%" y="181" width="0.0803%" height="15" fill="rgb(252,105,38)" fg:x="184" fg:w="1"/><text x="15.0173%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.7673%" y="165" width="0.0803%" height="15" fill="rgb(225,40,49)" fg:x="184" fg:w="1"/><text x="15.0173%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.7673%" y="149" width="0.0803%" height="15" fill="rgb(232,196,19)" fg:x="184" fg:w="1"/><text x="15.0173%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.7673%" y="133" width="0.0803%" height="15" fill="rgb(207,35,15)" fg:x="184" fg:w="1"/><text x="15.0173%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.7673%" y="117" width="0.0803%" height="15" fill="rgb(238,68,36)" fg:x="184" fg:w="1"/><text x="15.0173%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="14.6067%" y="341" width="0.3210%" height="15" fill="rgb(205,158,20)" fg:x="182" fg:w="4"/><text x="14.8567%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="14.6870%" y="325" width="0.2408%" height="15" fill="rgb(232,32,22)" fg:x="183" fg:w="3"/><text x="14.9370%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.7673%" y="309" width="0.1605%" height="15" fill="rgb(210,169,6)" fg:x="184" fg:w="2"/><text x="15.0173%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.8475%" y="293" width="0.0803%" height="15" fill="rgb(229,28,12)" fg:x="185" fg:w="1"/><text x="15.0975%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.9278%" y="341" width="0.0803%" height="15" fill="rgb(229,78,10)" fg:x="186" fg:w="1"/><text x="15.1778%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.0883%" y="309" width="0.0803%" height="15" fill="rgb(223,139,54)" fg:x="188" fg:w="1"/><text x="15.3383%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.0883%" y="293" width="0.0803%" height="15" fill="rgb(207,110,4)" fg:x="188" fg:w="1"/><text x="15.3383%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="15.1685%" y="277" width="0.0803%" height="15" fill="rgb(248,30,41)" fg:x="189" fg:w="1"/><text x="15.4185%" y="287.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="15.5698%" y="245" width="0.1605%" height="15" fill="rgb(235,54,25)" fg:x="194" fg:w="2"/><text x="15.8198%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::gid (19 samples, 1.52%)</title><rect x="14.2857%" y="405" width="1.5249%" height="15" fill="rgb(213,107,41)" fg:x="178" fg:w="19"/><text x="14.5357%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (19 samples, 1.52%)</title><rect x="14.2857%" y="389" width="1.5249%" height="15" fill="rgb(237,102,9)" fg:x="178" fg:w="19"/><text x="14.5357%" y="399.50"></text></g><g><title>kernel::model::props::load_props (18 samples, 1.44%)</title><rect x="14.3660%" y="373" width="1.4446%" height="15" fill="rgb(252,137,49)" fg:x="179" fg:w="18"/><text x="14.6160%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (16 samples, 1.28%)</title><rect x="14.5265%" y="357" width="1.2841%" height="15" fill="rgb(233,202,33)" fg:x="181" fg:w="16"/><text x="14.7765%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (10 samples, 0.80%)</title><rect x="15.0080%" y="341" width="0.8026%" height="15" fill="rgb(223,14,51)" fg:x="187" fg:w="10"/><text x="15.2580%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (10 samples, 0.80%)</title><rect x="15.0080%" y="325" width="0.8026%" height="15" fill="rgb(248,70,23)" fg:x="187" fg:w="10"/><text x="15.2580%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (8 samples, 0.64%)</title><rect x="15.1685%" y="309" width="0.6421%" height="15" fill="rgb(209,207,47)" fg:x="189" fg:w="8"/><text x="15.4185%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="15.1685%" y="293" width="0.6421%" height="15" fill="rgb(245,124,2)" fg:x="189" fg:w="8"/><text x="15.4185%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (7 samples, 0.56%)</title><rect x="15.2488%" y="277" width="0.5618%" height="15" fill="rgb(249,208,11)" fg:x="190" fg:w="7"/><text x="15.4988%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="15.2488%" y="261" width="0.5618%" height="15" fill="rgb(247,112,7)" fg:x="190" fg:w="7"/><text x="15.4988%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.7303%" y="245" width="0.0803%" height="15" fill="rgb(209,192,31)" fg:x="196" fg:w="1"/><text x="15.9803%" y="255.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="15.8909%" y="341" width="0.0803%" height="15" fill="rgb(236,55,19)" fg:x="198" fg:w="1"/><text x="16.1409%" y="351.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="15.8909%" y="325" width="0.0803%" height="15" fill="rgb(252,89,41)" fg:x="198" fg:w="1"/><text x="16.1409%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="15.8909%" y="309" width="0.0803%" height="15" fill="rgb(220,172,14)" fg:x="198" fg:w="1"/><text x="16.1409%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.8909%" y="293" width="0.0803%" height="15" fill="rgb(252,65,2)" fg:x="198" fg:w="1"/><text x="16.1409%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.8909%" y="277" width="0.0803%" height="15" fill="rgb(250,20,8)" fg:x="198" fg:w="1"/><text x="16.1409%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.8909%" y="261" width="0.0803%" height="15" fill="rgb(234,149,13)" fg:x="198" fg:w="1"/><text x="16.1409%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.8909%" y="245" width="0.0803%" height="15" fill="rgb(223,219,12)" fg:x="198" fg:w="1"/><text x="16.1409%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.8909%" y="229" width="0.0803%" height="15" fill="rgb(234,13,49)" fg:x="198" fg:w="1"/><text x="16.1409%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.8909%" y="213" width="0.0803%" height="15" fill="rgb(214,41,25)" fg:x="198" fg:w="1"/><text x="16.1409%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="16.1316%" y="245" width="0.1605%" height="15" fill="rgb(232,198,52)" fg:x="201" fg:w="2"/><text x="16.3816%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="16.2119%" y="229" width="0.0803%" height="15" fill="rgb(236,111,46)" fg:x="202" fg:w="1"/><text x="16.4619%" y="239.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="16.3724%" y="229" width="0.0803%" height="15" fill="rgb(253,30,20)" fg:x="204" fg:w="1"/><text x="16.6224%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="16.4526%" y="229" width="0.0803%" height="15" fill="rgb(247,141,17)" fg:x="205" fg:w="1"/><text x="16.7026%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="15.9711%" y="325" width="0.6421%" height="15" fill="rgb(214,195,21)" fg:x="199" fg:w="8"/><text x="16.2211%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="16.0514%" y="309" width="0.5618%" height="15" fill="rgb(214,98,12)" fg:x="200" fg:w="7"/><text x="16.3014%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (7 samples, 0.56%)</title><rect x="16.0514%" y="293" width="0.5618%" height="15" fill="rgb(239,4,26)" fg:x="200" fg:w="7"/><text x="16.3014%" y="303.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (7 samples, 0.56%)</title><rect x="16.0514%" y="277" width="0.5618%" height="15" fill="rgb(234,210,35)" fg:x="200" fg:w="7"/><text x="16.3014%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (7 samples, 0.56%)</title><rect x="16.0514%" y="261" width="0.5618%" height="15" fill="rgb(252,178,27)" fg:x="200" fg:w="7"/><text x="16.3014%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (4 samples, 0.32%)</title><rect x="16.2921%" y="245" width="0.3210%" height="15" fill="rgb(217,50,1)" fg:x="203" fg:w="4"/><text x="16.5421%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="16.5329%" y="229" width="0.0803%" height="15" fill="rgb(233,137,5)" fg:x="206" fg:w="1"/><text x="16.7829%" y="239.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="16.6934%" y="309" width="0.0803%" height="15" fill="rgb(217,227,25)" fg:x="208" fg:w="1"/><text x="16.9434%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Config::hybrid_cache_capacity (1 samples, 0.08%)</title><rect x="16.6934%" y="293" width="0.0803%" height="15" fill="rgb(242,89,38)" fg:x="208" fg:w="1"/><text x="16.9434%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.7737%" y="309" width="0.0803%" height="15" fill="rgb(212,190,30)" fg:x="209" fg:w="1"/><text x="17.0237%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.9342%" y="277" width="0.0803%" height="15" fill="rgb(222,120,8)" fg:x="211" fg:w="1"/><text x="17.1842%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.0144%" y="277" width="0.0803%" height="15" fill="rgb(227,181,9)" fg:x="212" fg:w="1"/><text x="17.2644%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3355%" y="261" width="0.0803%" height="15" fill="rgb(222,125,29)" fg:x="216" fg:w="1"/><text x="17.5855%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.5762%" y="245" width="0.0803%" height="15" fill="rgb(215,153,31)" fg:x="219" fg:w="1"/><text x="17.8262%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (17 samples, 1.36%)</title><rect x="17.4157%" y="261" width="1.3644%" height="15" fill="rgb(228,77,30)" fg:x="217" fg:w="17"/><text x="17.6657%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14 samples, 1.12%)</title><rect x="17.6565%" y="245" width="1.1236%" height="15" fill="rgb(226,110,9)" fg:x="220" fg:w="14"/><text x="17.9065%" y="255.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="18.5393%" y="229" width="0.2408%" height="15" fill="rgb(219,111,7)" fg:x="231" fg:w="3"/><text x="18.7893%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="19.1814%" y="213" width="0.0803%" height="15" fill="rgb(229,167,25)" fg:x="239" fg:w="1"/><text x="19.4314%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="19.1814%" y="197" width="0.0803%" height="15" fill="rgb(209,77,43)" fg:x="239" fg:w="1"/><text x="19.4314%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="18.8604%" y="245" width="0.4815%" height="15" fill="rgb(233,70,39)" fg:x="235" fg:w="6"/><text x="19.1104%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="19.1814%" y="229" width="0.1605%" height="15" fill="rgb(207,171,44)" fg:x="239" fg:w="2"/><text x="19.4314%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.2616%" y="213" width="0.0803%" height="15" fill="rgb(244,91,6)" fg:x="240" fg:w="1"/><text x="19.5116%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.2616%" y="197" width="0.0803%" height="15" fill="rgb(234,136,12)" fg:x="240" fg:w="1"/><text x="19.5116%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.2616%" y="181" width="0.0803%" height="15" fill="rgb(216,210,38)" fg:x="240" fg:w="1"/><text x="19.5116%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="19.5024%" y="213" width="0.0803%" height="15" fill="rgb(241,227,7)" fg:x="243" fg:w="1"/><text x="19.7524%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (11 samples, 0.88%)</title><rect x="18.7801%" y="261" width="0.8828%" height="15" fill="rgb(241,222,11)" fg:x="234" fg:w="11"/><text x="19.0301%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (4 samples, 0.32%)</title><rect x="19.3419%" y="245" width="0.3210%" height="15" fill="rgb(246,86,18)" fg:x="241" fg:w="4"/><text x="19.5919%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (3 samples, 0.24%)</title><rect x="19.4222%" y="229" width="0.2408%" height="15" fill="rgb(224,151,49)" fg:x="242" fg:w="3"/><text x="19.6722%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="19.5827%" y="213" width="0.0803%" height="15" fill="rgb(235,4,41)" fg:x="244" fg:w="1"/><text x="19.8327%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="20.3050%" y="197" width="0.4013%" height="15" fill="rgb(218,30,52)" fg:x="253" fg:w="5"/><text x="20.5550%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.40%)</title><rect x="20.7063%" y="197" width="0.4013%" height="15" fill="rgb(205,124,51)" fg:x="258" fg:w="5"/><text x="20.9563%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="20.8668%" y="181" width="0.2408%" height="15" fill="rgb(237,126,51)" fg:x="260" fg:w="3"/><text x="21.1168%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="20.8668%" y="165" width="0.2408%" height="15" fill="rgb(225,32,46)" fg:x="260" fg:w="3"/><text x="21.1168%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="20.8668%" y="149" width="0.2408%" height="15" fill="rgb(251,60,49)" fg:x="260" fg:w="3"/><text x="21.1168%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="21.2681%" y="165" width="0.0803%" height="15" fill="rgb(234,18,23)" fg:x="265" fg:w="1"/><text x="21.5181%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="21.2681%" y="149" width="0.0803%" height="15" fill="rgb(234,25,23)" fg:x="265" fg:w="1"/><text x="21.5181%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.2681%" y="133" width="0.0803%" height="15" fill="rgb(210,43,52)" fg:x="265" fg:w="1"/><text x="21.5181%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.3483%" y="149" width="0.0803%" height="15" fill="rgb(237,198,21)" fg:x="266" fg:w="1"/><text x="21.5983%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (7 samples, 0.56%)</title><rect x="21.1075%" y="197" width="0.5618%" height="15" fill="rgb(211,20,34)" fg:x="263" fg:w="7"/><text x="21.3575%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="21.2681%" y="181" width="0.4013%" height="15" fill="rgb(221,155,50)" fg:x="265" fg:w="5"/><text x="21.5181%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="21.3483%" y="165" width="0.3210%" height="15" fill="rgb(213,214,53)" fg:x="266" fg:w="4"/><text x="21.5983%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="21.4286%" y="149" width="0.2408%" height="15" fill="rgb(215,229,48)" fg:x="267" fg:w="3"/><text x="21.6786%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="21.5891%" y="133" width="0.0803%" height="15" fill="rgb(243,88,5)" fg:x="269" fg:w="1"/><text x="21.8391%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="21.5891%" y="117" width="0.0803%" height="15" fill="rgb(216,199,8)" fg:x="269" fg:w="1"/><text x="21.8391%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="21.7496%" y="181" width="0.0803%" height="15" fill="rgb(241,22,4)" fg:x="271" fg:w="1"/><text x="21.9996%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="21.7496%" y="165" width="0.0803%" height="15" fill="rgb(209,190,22)" fg:x="271" fg:w="1"/><text x="21.9996%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="21.7496%" y="149" width="0.0803%" height="15" fill="rgb(251,138,45)" fg:x="271" fg:w="1"/><text x="21.9996%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="21.7496%" y="133" width="0.0803%" height="15" fill="rgb(219,111,22)" fg:x="271" fg:w="1"/><text x="21.9996%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (69 samples, 5.54%)</title><rect x="21.6693%" y="197" width="5.5377%" height="15" fill="rgb(253,29,49)" fg:x="270" fg:w="69"/><text x="21.9193%" y="207.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (67 samples, 5.38%)</title><rect x="21.8299%" y="181" width="5.3772%" height="15" fill="rgb(238,129,49)" fg:x="272" fg:w="67"/><text x="22.0799%" y="191.50">regex_a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (67 samples, 5.38%)</title><rect x="21.8299%" y="165" width="5.3772%" height="15" fill="rgb(240,26,41)" fg:x="272" fg:w="67"/><text x="22.0799%" y="175.50">alloc::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="27.2071%" y="197" width="0.4013%" height="15" fill="rgb(221,47,33)" fg:x="339" fg:w="5"/><text x="27.4571%" y="207.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="27.6083%" y="197" width="0.0803%" height="15" fill="rgb(216,200,17)" fg:x="344" fg:w="1"/><text x="27.8583%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (97 samples, 7.78%)</title><rect x="20.0642%" y="245" width="7.7849%" height="15" fill="rgb(230,151,26)" fg:x="250" fg:w="97"/><text x="20.3142%" y="255.50">&lt;core::iter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (97 samples, 7.78%)</title><rect x="20.0642%" y="229" width="7.7849%" height="15" fill="rgb(242,182,16)" fg:x="250" fg:w="97"/><text x="20.3142%" y="239.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (96 samples, 7.70%)</title><rect x="20.1445%" y="213" width="7.7047%" height="15" fill="rgb(236,35,53)" fg:x="251" fg:w="96"/><text x="20.3945%" y="223.50">regex_autom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="27.6886%" y="197" width="0.1605%" height="15" fill="rgb(214,180,28)" fg:x="345" fg:w="2"/><text x="27.9386%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.7689%" y="181" width="0.0803%" height="15" fill="rgb(208,173,36)" fg:x="346" fg:w="1"/><text x="28.0189%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.7689%" y="165" width="0.0803%" height="15" fill="rgb(218,39,15)" fg:x="346" fg:w="1"/><text x="28.0189%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.7689%" y="149" width="0.0803%" height="15" fill="rgb(213,145,15)" fg:x="346" fg:w="1"/><text x="28.0189%" y="159.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="28.3307%" y="229" width="0.0803%" height="15" fill="rgb(242,110,37)" fg:x="353" fg:w="1"/><text x="28.5807%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.4109%" y="229" width="0.0803%" height="15" fill="rgb(247,146,22)" fg:x="354" fg:w="1"/><text x="28.6609%" y="239.50"></text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.08%)</title><rect x="28.4912%" y="229" width="0.0803%" height="15" fill="rgb(215,191,7)" fg:x="355" fg:w="1"/><text x="28.7412%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (1 samples, 0.08%)</title><rect x="28.4912%" y="213" width="0.0803%" height="15" fill="rgb(240,158,1)" fg:x="355" fg:w="1"/><text x="28.7412%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="28.5714%" y="229" width="0.3210%" height="15" fill="rgb(241,78,32)" fg:x="356" fg:w="4"/><text x="28.8214%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.8122%" y="213" width="0.0803%" height="15" fill="rgb(248,83,10)" fg:x="359" fg:w="1"/><text x="29.0622%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.8122%" y="197" width="0.0803%" height="15" fill="rgb(241,52,0)" fg:x="359" fg:w="1"/><text x="29.0622%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="28.8122%" y="181" width="0.0803%" height="15" fill="rgb(238,37,13)" fg:x="359" fg:w="1"/><text x="29.0622%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="28.8925%" y="229" width="0.2408%" height="15" fill="rgb(242,194,17)" fg:x="360" fg:w="3"/><text x="29.1425%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="29.1332%" y="229" width="0.2408%" height="15" fill="rgb(236,96,3)" fg:x="363" fg:w="3"/><text x="29.3832%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (20 samples, 1.61%)</title><rect x="27.8491%" y="245" width="1.6051%" height="15" fill="rgb(235,148,34)" fg:x="347" fg:w="20"/><text x="28.0991%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="29.3740%" y="229" width="0.0803%" height="15" fill="rgb(254,12,11)" fg:x="366" fg:w="1"/><text x="29.6240%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="29.3740%" y="213" width="0.0803%" height="15" fill="rgb(207,31,54)" fg:x="366" fg:w="1"/><text x="29.6240%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.3740%" y="197" width="0.0803%" height="15" fill="rgb(252,14,28)" fg:x="366" fg:w="1"/><text x="29.6240%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.3740%" y="181" width="0.0803%" height="15" fill="rgb(252,108,36)" fg:x="366" fg:w="1"/><text x="29.6240%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.3740%" y="165" width="0.0803%" height="15" fill="rgb(214,149,7)" fg:x="366" fg:w="1"/><text x="29.6240%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="29.4543%" y="245" width="0.0803%" height="15" fill="rgb(243,94,12)" fg:x="367" fg:w="1"/><text x="29.7043%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="29.4543%" y="229" width="0.0803%" height="15" fill="rgb(208,36,10)" fg:x="367" fg:w="1"/><text x="29.7043%" y="239.50"></text></g><g><title>regex_automata::util::search::Input::set_span (1 samples, 0.08%)</title><rect x="29.5345%" y="245" width="0.0803%" height="15" fill="rgb(233,185,52)" fg:x="368" fg:w="1"/><text x="29.7845%" y="255.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="29.6950%" y="229" width="0.0803%" height="15" fill="rgb(234,50,45)" fg:x="370" fg:w="1"/><text x="29.9450%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.6950%" y="213" width="0.0803%" height="15" fill="rgb(228,92,54)" fg:x="370" fg:w="1"/><text x="29.9450%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (127 samples, 10.19%)</title><rect x="19.6629%" y="261" width="10.1926%" height="15" fill="rgb(224,85,25)" fg:x="245" fg:w="127"/><text x="19.9129%" y="271.50">regex_automata:..</text></g><g><title>regex_syntax::hir::Hir::dot (3 samples, 0.24%)</title><rect x="29.6148%" y="245" width="0.2408%" height="15" fill="rgb(246,1,45)" fg:x="369" fg:w="3"/><text x="29.8648%" y="255.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="29.7753%" y="229" width="0.0803%" height="15" fill="rgb(240,66,23)" fg:x="371" fg:w="1"/><text x="30.0253%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.7753%" y="213" width="0.0803%" height="15" fill="rgb(222,96,27)" fg:x="371" fg:w="1"/><text x="30.0253%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (160 samples, 12.84%)</title><rect x="17.0947%" y="277" width="12.8411%" height="15" fill="rgb(212,136,10)" fg:x="213" fg:w="160"/><text x="17.3447%" y="287.50">regex_automata::met..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="29.8555%" y="261" width="0.0803%" height="15" fill="rgb(226,192,50)" fg:x="372" fg:w="1"/><text x="30.1055%" y="271.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="30.2568%" y="229" width="0.0803%" height="15" fill="rgb(241,182,31)" fg:x="377" fg:w="1"/><text x="30.5068%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="30.3371%" y="213" width="0.0803%" height="15" fill="rgb(219,205,47)" fg:x="378" fg:w="1"/><text x="30.5871%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="30.3371%" y="229" width="0.1605%" height="15" fill="rgb(207,96,14)" fg:x="378" fg:w="2"/><text x="30.5871%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek (1 samples, 0.08%)</title><rect x="30.4173%" y="213" width="0.0803%" height="15" fill="rgb(216,119,9)" fg:x="379" fg:w="1"/><text x="30.6673%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (21 samples, 1.69%)</title><rect x="30.0161%" y="245" width="1.6854%" height="15" fill="rgb(235,62,36)" fg:x="374" fg:w="21"/><text x="30.2661%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (15 samples, 1.20%)</title><rect x="30.4976%" y="229" width="1.2039%" height="15" fill="rgb(214,41,27)" fg:x="380" fg:w="15"/><text x="30.7476%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (14 samples, 1.12%)</title><rect x="30.5778%" y="213" width="1.1236%" height="15" fill="rgb(214,174,37)" fg:x="381" fg:w="14"/><text x="30.8278%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 1.12%)</title><rect x="30.5778%" y="197" width="1.1236%" height="15" fill="rgb(212,11,25)" fg:x="381" fg:w="14"/><text x="30.8278%" y="207.50"></text></g><g><title>__libc_malloc (13 samples, 1.04%)</title><rect x="30.6581%" y="181" width="1.0433%" height="15" fill="rgb(217,71,35)" fg:x="382" fg:w="13"/><text x="30.9081%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (23 samples, 1.85%)</title><rect x="29.9358%" y="277" width="1.8459%" height="15" fill="rgb(234,152,9)" fg:x="373" fg:w="23"/><text x="30.1858%" y="287.50">r..</text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (23 samples, 1.85%)</title><rect x="29.9358%" y="261" width="1.8459%" height="15" fill="rgb(228,32,51)" fg:x="373" fg:w="23"/><text x="30.1858%" y="271.50">r..</text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="31.7014%" y="245" width="0.0803%" height="15" fill="rgb(209,14,47)" fg:x="395" fg:w="1"/><text x="31.9514%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.0225%" y="229" width="0.0803%" height="15" fill="rgb(218,201,17)" fg:x="399" fg:w="1"/><text x="32.2725%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.1027%" y="229" width="0.0803%" height="15" fill="rgb(218,98,15)" fg:x="400" fg:w="1"/><text x="32.3527%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.1027%" y="213" width="0.0803%" height="15" fill="rgb(233,202,29)" fg:x="400" fg:w="1"/><text x="32.3527%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.1027%" y="197" width="0.0803%" height="15" fill="rgb(207,196,44)" fg:x="400" fg:w="1"/><text x="32.3527%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="32.1830%" y="229" width="0.0803%" height="15" fill="rgb(218,63,34)" fg:x="401" fg:w="1"/><text x="32.4330%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.1830%" y="213" width="0.0803%" height="15" fill="rgb(209,10,5)" fg:x="401" fg:w="1"/><text x="32.4330%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.1830%" y="197" width="0.0803%" height="15" fill="rgb(224,36,28)" fg:x="401" fg:w="1"/><text x="32.4330%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.1830%" y="181" width="0.0803%" height="15" fill="rgb(249,178,7)" fg:x="401" fg:w="1"/><text x="32.4330%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::case_fold_simple (1 samples, 0.08%)</title><rect x="32.2632%" y="229" width="0.0803%" height="15" fill="rgb(253,163,10)" fg:x="402" fg:w="1"/><text x="32.5132%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.56%)</title><rect x="31.8620%" y="245" width="0.5618%" height="15" fill="rgb(245,67,46)" fg:x="397" fg:w="7"/><text x="32.1120%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="32.3435%" y="229" width="0.0803%" height="15" fill="rgb(225,14,18)" fg:x="403" fg:w="1"/><text x="32.5935%" y="239.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="32.3435%" y="213" width="0.0803%" height="15" fill="rgb(217,41,54)" fg:x="403" fg:w="1"/><text x="32.5935%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="32.3435%" y="197" width="0.0803%" height="15" fill="rgb(222,111,11)" fg:x="403" fg:w="1"/><text x="32.5935%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="32.4238%" y="245" width="0.0803%" height="15" fill="rgb(211,85,31)" fg:x="404" fg:w="1"/><text x="32.6738%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="32.4238%" y="229" width="0.0803%" height="15" fill="rgb(223,29,26)" fg:x="404" fg:w="1"/><text x="32.6738%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (200 samples, 16.05%)</title><rect x="16.6132%" y="325" width="16.0514%" height="15" fill="rgb(236,124,50)" fg:x="207" fg:w="200"/><text x="16.8632%" y="335.50">&lt;regex::regex::string::Re..</text></g><g><title>regex::builders::Builder::build_one_string (197 samples, 15.81%)</title><rect x="16.8539%" y="309" width="15.8106%" height="15" fill="rgb(219,148,15)" fg:x="210" fg:w="197"/><text x="17.1039%" y="319.50">regex::builders::Builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (197 samples, 15.81%)</title><rect x="16.8539%" y="293" width="15.8106%" height="15" fill="rgb(248,159,33)" fg:x="210" fg:w="197"/><text x="17.1039%" y="303.50">regex_automata::meta::re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (11 samples, 0.88%)</title><rect x="31.7817%" y="277" width="0.8828%" height="15" fill="rgb(252,65,8)" fg:x="396" fg:w="11"/><text x="32.0317%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.88%)</title><rect x="31.7817%" y="261" width="0.8828%" height="15" fill="rgb(236,45,7)" fg:x="396" fg:w="11"/><text x="32.0317%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="32.5040%" y="245" width="0.1605%" height="15" fill="rgb(244,3,48)" fg:x="405" fg:w="2"/><text x="32.7540%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="32.5843%" y="229" width="0.0803%" height="15" fill="rgb(224,123,53)" fg:x="406" fg:w="1"/><text x="32.8343%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.5843%" y="213" width="0.0803%" height="15" fill="rgb(223,173,15)" fg:x="406" fg:w="1"/><text x="32.8343%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.5843%" y="197" width="0.0803%" height="15" fill="rgb(254,181,5)" fg:x="406" fg:w="1"/><text x="32.8343%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="32.6645%" y="277" width="0.1605%" height="15" fill="rgb(243,124,33)" fg:x="407" fg:w="2"/><text x="32.9145%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="32.6645%" y="261" width="0.1605%" height="15" fill="rgb(253,220,11)" fg:x="407" fg:w="2"/><text x="32.9145%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="32.6645%" y="293" width="0.2408%" height="15" fill="rgb(217,14,4)" fg:x="407" fg:w="3"/><text x="32.9145%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="32.8250%" y="277" width="0.0803%" height="15" fill="rgb(209,196,12)" fg:x="409" fg:w="1"/><text x="33.0750%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="32.8250%" y="261" width="0.0803%" height="15" fill="rgb(237,108,29)" fg:x="409" fg:w="1"/><text x="33.0750%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.8250%" y="245" width="0.0803%" height="15" fill="rgb(216,173,20)" fg:x="409" fg:w="1"/><text x="33.0750%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.8250%" y="229" width="0.0803%" height="15" fill="rgb(245,27,6)" fg:x="409" fg:w="1"/><text x="33.0750%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="32.9053%" y="277" width="0.1605%" height="15" fill="rgb(210,181,20)" fg:x="410" fg:w="2"/><text x="33.1553%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="32.6645%" y="325" width="0.4815%" height="15" fill="rgb(235,213,1)" fg:x="407" fg:w="6"/><text x="32.9145%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="32.6645%" y="309" width="0.4815%" height="15" fill="rgb(239,68,43)" fg:x="407" fg:w="6"/><text x="32.9145%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="32.9053%" y="293" width="0.2408%" height="15" fill="rgb(254,137,43)" fg:x="410" fg:w="3"/><text x="33.1553%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="33.0658%" y="277" width="0.0803%" height="15" fill="rgb(252,170,38)" fg:x="412" fg:w="1"/><text x="33.3158%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.0658%" y="261" width="0.0803%" height="15" fill="rgb(234,21,42)" fg:x="412" fg:w="1"/><text x="33.3158%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="33.8684%" y="245" width="0.1605%" height="15" fill="rgb(216,145,40)" fg:x="422" fg:w="2"/><text x="34.1184%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="33.8684%" y="229" width="0.1605%" height="15" fill="rgb(251,73,9)" fg:x="422" fg:w="2"/><text x="34.1184%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.9486%" y="213" width="0.0803%" height="15" fill="rgb(242,54,6)" fg:x="423" fg:w="1"/><text x="34.1986%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="34.0289%" y="245" width="0.1605%" height="15" fill="rgb(239,70,7)" fg:x="424" fg:w="2"/><text x="34.2789%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="34.0289%" y="229" width="0.1605%" height="15" fill="rgb(216,159,35)" fg:x="424" fg:w="2"/><text x="34.2789%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="34.1091%" y="213" width="0.0803%" height="15" fill="rgb(224,50,39)" fg:x="425" fg:w="1"/><text x="34.3591%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (15 samples, 1.20%)</title><rect x="33.1461%" y="261" width="1.2039%" height="15" fill="rgb(235,9,35)" fg:x="413" fg:w="15"/><text x="33.3961%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="34.1894%" y="245" width="0.1605%" height="15" fill="rgb(239,34,21)" fg:x="426" fg:w="2"/><text x="34.4394%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (19 samples, 1.52%)</title><rect x="33.1461%" y="277" width="1.5249%" height="15" fill="rgb(218,162,43)" fg:x="413" fg:w="19"/><text x="33.3961%" y="287.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (4 samples, 0.32%)</title><rect x="34.3499%" y="261" width="0.3210%" height="15" fill="rgb(219,89,33)" fg:x="428" fg:w="4"/><text x="34.5999%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="34.3499%" y="245" width="0.3210%" height="15" fill="rgb(226,125,37)" fg:x="428" fg:w="4"/><text x="34.5999%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="34.3499%" y="229" width="0.3210%" height="15" fill="rgb(233,149,30)" fg:x="428" fg:w="4"/><text x="34.5999%" y="239.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="34.3499%" y="213" width="0.3210%" height="15" fill="rgb(236,8,18)" fg:x="428" fg:w="4"/><text x="34.5999%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (234 samples, 18.78%)</title><rect x="15.9711%" y="341" width="18.7801%" height="15" fill="rgb(205,176,9)" fg:x="199" fg:w="234"/><text x="16.2211%" y="351.50">indefinite::helper::Helper::g..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (20 samples, 1.61%)</title><rect x="33.1461%" y="325" width="1.6051%" height="15" fill="rgb(252,103,44)" fg:x="413" fg:w="20"/><text x="33.3961%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (20 samples, 1.61%)</title><rect x="33.1461%" y="309" width="1.6051%" height="15" fill="rgb(207,68,53)" fg:x="413" fg:w="20"/><text x="33.3961%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (20 samples, 1.61%)</title><rect x="33.1461%" y="293" width="1.6051%" height="15" fill="rgb(218,193,48)" fg:x="413" fg:w="20"/><text x="33.3961%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="34.6709%" y="277" width="0.0803%" height="15" fill="rgb(234,121,52)" fg:x="432" fg:w="1"/><text x="34.9209%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="34.6709%" y="261" width="0.0803%" height="15" fill="rgb(227,218,49)" fg:x="432" fg:w="1"/><text x="34.9209%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.6709%" y="245" width="0.0803%" height="15" fill="rgb(221,8,7)" fg:x="432" fg:w="1"/><text x="34.9209%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.6709%" y="229" width="0.0803%" height="15" fill="rgb(217,151,36)" fg:x="432" fg:w="1"/><text x="34.9209%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.6709%" y="213" width="0.0803%" height="15" fill="rgb(213,71,5)" fg:x="432" fg:w="1"/><text x="34.9209%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.7512%" y="277" width="0.0803%" height="15" fill="rgb(225,145,43)" fg:x="433" fg:w="1"/><text x="35.0012%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.7512%" y="261" width="0.0803%" height="15" fill="rgb(235,118,19)" fg:x="433" fg:w="1"/><text x="35.0012%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="34.9117%" y="245" width="0.1605%" height="15" fill="rgb(214,102,36)" fg:x="435" fg:w="2"/><text x="35.1617%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="34.9117%" y="229" width="0.1605%" height="15" fill="rgb(220,56,43)" fg:x="435" fg:w="2"/><text x="35.1617%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="34.9117%" y="213" width="0.1605%" height="15" fill="rgb(246,136,46)" fg:x="435" fg:w="2"/><text x="35.1617%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="34.9117%" y="197" width="0.1605%" height="15" fill="rgb(249,99,12)" fg:x="435" fg:w="2"/><text x="35.1617%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="35.0722%" y="245" width="0.0803%" height="15" fill="rgb(224,31,42)" fg:x="437" fg:w="1"/><text x="35.3222%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.0722%" y="229" width="0.0803%" height="15" fill="rgb(208,96,21)" fg:x="437" fg:w="1"/><text x="35.3222%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.40%)</title><rect x="34.8315%" y="277" width="0.4013%" height="15" fill="rgb(237,229,7)" fg:x="434" fg:w="5"/><text x="35.0815%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="34.8315%" y="261" width="0.4013%" height="15" fill="rgb(210,12,6)" fg:x="434" fg:w="5"/><text x="35.0815%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="35.1525%" y="245" width="0.0803%" height="15" fill="rgb(240,9,34)" fg:x="438" fg:w="1"/><text x="35.4025%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.1525%" y="229" width="0.0803%" height="15" fill="rgb(211,68,37)" fg:x="438" fg:w="1"/><text x="35.4025%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.1525%" y="213" width="0.0803%" height="15" fill="rgb(249,138,50)" fg:x="438" fg:w="1"/><text x="35.4025%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.3130%" y="261" width="0.0803%" height="15" fill="rgb(243,185,40)" fg:x="440" fg:w="1"/><text x="35.5630%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="35.3933%" y="245" width="0.1605%" height="15" fill="rgb(242,92,35)" fg:x="441" fg:w="2"/><text x="35.6433%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.80%)</title><rect x="35.3933%" y="261" width="0.8026%" height="15" fill="rgb(244,98,5)" fg:x="441" fg:w="10"/><text x="35.6433%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.64%)</title><rect x="35.5538%" y="245" width="0.6421%" height="15" fill="rgb(228,186,29)" fg:x="443" fg:w="8"/><text x="35.8038%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.1156%" y="229" width="0.0803%" height="15" fill="rgb(253,7,44)" fg:x="450" fg:w="1"/><text x="36.3656%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="36.1958%" y="245" width="0.1605%" height="15" fill="rgb(216,11,45)" fg:x="451" fg:w="2"/><text x="36.4458%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="36.1958%" y="261" width="0.2408%" height="15" fill="rgb(205,67,3)" fg:x="451" fg:w="3"/><text x="36.4458%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="36.3563%" y="245" width="0.0803%" height="15" fill="rgb(250,18,3)" fg:x="453" fg:w="1"/><text x="36.6063%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="36.3563%" y="229" width="0.0803%" height="15" fill="rgb(241,222,43)" fg:x="453" fg:w="1"/><text x="36.6063%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="36.3563%" y="213" width="0.0803%" height="15" fill="rgb(233,115,3)" fg:x="453" fg:w="1"/><text x="36.6063%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.3563%" y="197" width="0.0803%" height="15" fill="rgb(215,165,25)" fg:x="453" fg:w="1"/><text x="36.6063%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.3563%" y="181" width="0.0803%" height="15" fill="rgb(234,179,6)" fg:x="453" fg:w="1"/><text x="36.6063%" y="191.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="36.3563%" y="165" width="0.0803%" height="15" fill="rgb(215,82,23)" fg:x="453" fg:w="1"/><text x="36.6063%" y="175.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="36.3563%" y="149" width="0.0803%" height="15" fill="rgb(211,47,18)" fg:x="453" fg:w="1"/><text x="36.6063%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="36.5169%" y="229" width="0.0803%" height="15" fill="rgb(248,17,9)" fg:x="455" fg:w="1"/><text x="36.7669%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="36.5169%" y="213" width="0.0803%" height="15" fill="rgb(210,212,12)" fg:x="455" fg:w="1"/><text x="36.7669%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.5169%" y="197" width="0.0803%" height="15" fill="rgb(230,135,45)" fg:x="455" fg:w="1"/><text x="36.7669%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="36.5169%" y="181" width="0.0803%" height="15" fill="rgb(214,121,41)" fg:x="455" fg:w="1"/><text x="36.7669%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="36.7576%" y="197" width="0.1605%" height="15" fill="rgb(239,165,45)" fg:x="458" fg:w="2"/><text x="37.0076%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="36.7576%" y="181" width="0.1605%" height="15" fill="rgb(214,85,51)" fg:x="458" fg:w="2"/><text x="37.0076%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="36.7576%" y="165" width="0.1605%" height="15" fill="rgb(223,90,27)" fg:x="458" fg:w="2"/><text x="37.0076%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.40%)</title><rect x="36.5971%" y="229" width="0.4013%" height="15" fill="rgb(244,84,11)" fg:x="456" fg:w="5"/><text x="36.8471%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.40%)</title><rect x="36.5971%" y="213" width="0.4013%" height="15" fill="rgb(253,41,47)" fg:x="456" fg:w="5"/><text x="36.8471%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.9181%" y="197" width="0.0803%" height="15" fill="rgb(232,39,5)" fg:x="460" fg:w="1"/><text x="37.1681%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.9181%" y="181" width="0.0803%" height="15" fill="rgb(211,93,4)" fg:x="460" fg:w="1"/><text x="37.1681%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="36.9181%" y="165" width="0.0803%" height="15" fill="rgb(219,50,49)" fg:x="460" fg:w="1"/><text x="37.1681%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (15 samples, 1.20%)</title><rect x="36.4366%" y="245" width="1.2039%" height="15" fill="rgb(232,80,19)" fg:x="454" fg:w="15"/><text x="36.6866%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (8 samples, 0.64%)</title><rect x="36.9984%" y="229" width="0.6421%" height="15" fill="rgb(215,227,39)" fg:x="461" fg:w="8"/><text x="37.2484%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (8 samples, 0.64%)</title><rect x="36.9984%" y="213" width="0.6421%" height="15" fill="rgb(211,99,12)" fg:x="461" fg:w="8"/><text x="37.2484%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (7 samples, 0.56%)</title><rect x="37.0787%" y="197" width="0.5618%" height="15" fill="rgb(214,158,5)" fg:x="462" fg:w="7"/><text x="37.3287%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (16 samples, 1.28%)</title><rect x="36.4366%" y="261" width="1.2841%" height="15" fill="rgb(242,19,53)" fg:x="454" fg:w="16"/><text x="36.6866%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="37.6404%" y="245" width="0.0803%" height="15" fill="rgb(208,18,20)" fg:x="469" fg:w="1"/><text x="37.8904%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="37.6404%" y="229" width="0.0803%" height="15" fill="rgb(250,44,11)" fg:x="469" fg:w="1"/><text x="37.8904%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.7207%" y="229" width="0.0803%" height="15" fill="rgb(238,159,13)" fg:x="470" fg:w="1"/><text x="37.9707%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.7207%" y="213" width="0.0803%" height="15" fill="rgb(231,74,18)" fg:x="470" fg:w="1"/><text x="37.9707%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.7207%" y="197" width="0.0803%" height="15" fill="rgb(229,219,45)" fg:x="470" fg:w="1"/><text x="37.9707%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="37.8010%" y="181" width="0.0803%" height="15" fill="rgb(210,221,1)" fg:x="471" fg:w="1"/><text x="38.0510%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (7 samples, 0.56%)</title><rect x="38.8443%" y="149" width="0.5618%" height="15" fill="rgb(209,60,51)" fg:x="484" fg:w="7"/><text x="39.0943%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="39.2456%" y="133" width="0.1605%" height="15" fill="rgb(252,97,34)" fg:x="489" fg:w="2"/><text x="39.4956%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="39.2456%" y="117" width="0.1605%" height="15" fill="rgb(243,211,37)" fg:x="489" fg:w="2"/><text x="39.4956%" y="127.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="39.2456%" y="101" width="0.1605%" height="15" fill="rgb(210,229,37)" fg:x="489" fg:w="2"/><text x="39.4956%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (6 samples, 0.48%)</title><rect x="39.4061%" y="149" width="0.4815%" height="15" fill="rgb(220,208,43)" fg:x="491" fg:w="6"/><text x="39.6561%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="39.7271%" y="133" width="0.1605%" height="15" fill="rgb(218,118,50)" fg:x="495" fg:w="2"/><text x="39.9771%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="39.7271%" y="117" width="0.1605%" height="15" fill="rgb(254,169,52)" fg:x="495" fg:w="2"/><text x="39.9771%" y="127.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="39.7271%" y="101" width="0.1605%" height="15" fill="rgb(221,214,37)" fg:x="495" fg:w="2"/><text x="39.9771%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.2889%" y="85" width="0.0803%" height="15" fill="rgb(254,186,32)" fg:x="502" fg:w="1"/><text x="40.5389%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="40.2087%" y="117" width="0.3210%" height="15" fill="rgb(215,144,43)" fg:x="501" fg:w="4"/><text x="40.4587%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="40.2087%" y="101" width="0.3210%" height="15" fill="rgb(252,21,46)" fg:x="501" fg:w="4"/><text x="40.4587%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="40.3692%" y="85" width="0.1605%" height="15" fill="rgb(207,166,46)" fg:x="503" fg:w="2"/><text x="40.6192%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (11 samples, 0.88%)</title><rect x="39.8876%" y="149" width="0.8828%" height="15" fill="rgb(253,37,49)" fg:x="497" fg:w="11"/><text x="40.1376%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.64%)</title><rect x="40.1284%" y="133" width="0.6421%" height="15" fill="rgb(222,97,20)" fg:x="500" fg:w="8"/><text x="40.3784%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="40.5297%" y="117" width="0.2408%" height="15" fill="rgb(244,181,26)" fg:x="505" fg:w="3"/><text x="40.7797%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="40.6100%" y="101" width="0.1605%" height="15" fill="rgb(241,22,29)" fg:x="506" fg:w="2"/><text x="40.8600%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="40.6100%" y="85" width="0.1605%" height="15" fill="rgb(206,200,43)" fg:x="506" fg:w="2"/><text x="40.8600%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.6100%" y="69" width="0.1605%" height="15" fill="rgb(226,224,43)" fg:x="506" fg:w="2"/><text x="40.8600%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.6902%" y="53" width="0.0803%" height="15" fill="rgb(253,129,28)" fg:x="507" fg:w="1"/><text x="40.9402%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.7705%" y="117" width="0.0803%" height="15" fill="rgb(252,99,33)" fg:x="508" fg:w="1"/><text x="41.0205%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (65 samples, 5.22%)</title><rect x="40.7705%" y="149" width="5.2167%" height="15" fill="rgb(208,123,45)" fg:x="508" fg:w="65"/><text x="41.0205%" y="159.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (65 samples, 5.22%)</title><rect x="40.7705%" y="133" width="5.2167%" height="15" fill="rgb(251,106,12)" fg:x="508" fg:w="65"/><text x="41.0205%" y="143.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (64 samples, 5.14%)</title><rect x="40.8507%" y="117" width="5.1364%" height="15" fill="rgb(240,209,35)" fg:x="509" fg:w="64"/><text x="41.1007%" y="127.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="45.9872%" y="149" width="0.2408%" height="15" fill="rgb(214,52,50)" fg:x="573" fg:w="3"/><text x="46.2372%" y="159.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="46.2279%" y="149" width="0.1605%" height="15" fill="rgb(234,119,4)" fg:x="576" fg:w="2"/><text x="46.4779%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (114 samples, 9.15%)</title><rect x="37.7207%" y="245" width="9.1493%" height="15" fill="rgb(228,181,36)" fg:x="470" fg:w="114"/><text x="37.9707%" y="255.50">&lt;core::iter::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (113 samples, 9.07%)</title><rect x="37.8010%" y="229" width="9.0690%" height="15" fill="rgb(213,171,42)" fg:x="471" fg:w="113"/><text x="38.0510%" y="239.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (113 samples, 9.07%)</title><rect x="37.8010%" y="213" width="9.0690%" height="15" fill="rgb(239,14,41)" fg:x="471" fg:w="113"/><text x="38.0510%" y="223.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (113 samples, 9.07%)</title><rect x="37.8010%" y="197" width="9.0690%" height="15" fill="rgb(239,111,46)" fg:x="471" fg:w="113"/><text x="38.0510%" y="207.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (112 samples, 8.99%)</title><rect x="37.8812%" y="181" width="8.9888%" height="15" fill="rgb(214,72,7)" fg:x="472" fg:w="112"/><text x="38.1312%" y="191.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (111 samples, 8.91%)</title><rect x="37.9615%" y="165" width="8.9085%" height="15" fill="rgb(221,114,1)" fg:x="473" fg:w="111"/><text x="38.2115%" y="175.50">regex_automat..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (6 samples, 0.48%)</title><rect x="46.3884%" y="149" width="0.4815%" height="15" fill="rgb(213,143,14)" fg:x="578" fg:w="6"/><text x="46.6384%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="46.3884%" y="133" width="0.4815%" height="15" fill="rgb(220,221,53)" fg:x="578" fg:w="6"/><text x="46.6384%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="46.4687%" y="117" width="0.4013%" height="15" fill="rgb(236,189,27)" fg:x="579" fg:w="5"/><text x="46.7187%" y="127.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="46.5490%" y="101" width="0.3210%" height="15" fill="rgb(252,139,49)" fg:x="580" fg:w="4"/><text x="46.7990%" y="111.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="47.0305%" y="229" width="0.0803%" height="15" fill="rgb(231,158,33)" fg:x="586" fg:w="1"/><text x="47.2805%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="47.1108%" y="229" width="0.3210%" height="15" fill="rgb(207,201,15)" fg:x="587" fg:w="4"/><text x="47.3608%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (158 samples, 12.68%)</title><rect x="35.2327%" y="277" width="12.6806%" height="15" fill="rgb(218,43,48)" fg:x="439" fg:w="158"/><text x="35.4827%" y="287.50">regex_automata::met..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (127 samples, 10.19%)</title><rect x="37.7207%" y="261" width="10.1926%" height="15" fill="rgb(244,63,52)" fg:x="470" fg:w="127"/><text x="37.9707%" y="271.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.04%)</title><rect x="46.8700%" y="245" width="1.0433%" height="15" fill="rgb(236,60,17)" fg:x="584" fg:w="13"/><text x="47.1200%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="47.4318%" y="229" width="0.4815%" height="15" fill="rgb(205,206,29)" fg:x="591" fg:w="6"/><text x="47.6818%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="47.9936%" y="229" width="0.1605%" height="15" fill="rgb(205,209,35)" fg:x="598" fg:w="2"/><text x="48.2436%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (2 samples, 0.16%)</title><rect x="47.9936%" y="213" width="0.1605%" height="15" fill="rgb(227,112,14)" fg:x="598" fg:w="2"/><text x="48.2436%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (2 samples, 0.16%)</title><rect x="47.9936%" y="197" width="0.1605%" height="15" fill="rgb(248,151,9)" fg:x="598" fg:w="2"/><text x="48.2436%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="47.9133%" y="245" width="0.5618%" height="15" fill="rgb(247,45,40)" fg:x="597" fg:w="7"/><text x="48.1633%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="48.1541%" y="229" width="0.3210%" height="15" fill="rgb(232,185,16)" fg:x="600" fg:w="4"/><text x="48.4041%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="48.1541%" y="213" width="0.3210%" height="15" fill="rgb(215,45,44)" fg:x="600" fg:w="4"/><text x="48.4041%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="48.1541%" y="197" width="0.3210%" height="15" fill="rgb(206,69,32)" fg:x="600" fg:w="4"/><text x="48.4041%" y="207.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="48.1541%" y="181" width="0.3210%" height="15" fill="rgb(233,98,50)" fg:x="600" fg:w="4"/><text x="48.4041%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="48.4751%" y="245" width="0.0803%" height="15" fill="rgb(232,217,52)" fg:x="604" fg:w="1"/><text x="48.7251%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.4751%" y="229" width="0.0803%" height="15" fill="rgb(250,42,51)" fg:x="604" fg:w="1"/><text x="48.7251%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="48.5554%" y="245" width="0.0803%" height="15" fill="rgb(241,200,26)" fg:x="605" fg:w="1"/><text x="48.8054%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="48.5554%" y="229" width="0.0803%" height="15" fill="rgb(207,10,32)" fg:x="605" fg:w="1"/><text x="48.8054%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="48.6356%" y="229" width="0.0803%" height="15" fill="rgb(214,63,15)" fg:x="606" fg:w="1"/><text x="48.8856%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.88%)</title><rect x="47.9133%" y="277" width="0.8828%" height="15" fill="rgb(234,176,14)" fg:x="597" fg:w="11"/><text x="48.1633%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.88%)</title><rect x="47.9133%" y="261" width="0.8828%" height="15" fill="rgb(226,104,52)" fg:x="597" fg:w="11"/><text x="48.1633%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="48.6356%" y="245" width="0.1605%" height="15" fill="rgb(211,222,1)" fg:x="606" fg:w="2"/><text x="48.8856%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.7159%" y="229" width="0.0803%" height="15" fill="rgb(237,7,3)" fg:x="607" fg:w="1"/><text x="48.9659%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.7159%" y="213" width="0.0803%" height="15" fill="rgb(218,143,7)" fg:x="607" fg:w="1"/><text x="48.9659%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.7159%" y="197" width="0.0803%" height="15" fill="rgb(208,25,22)" fg:x="607" fg:w="1"/><text x="48.9659%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.9567%" y="229" width="0.0803%" height="15" fill="rgb(228,127,16)" fg:x="610" fg:w="1"/><text x="49.2067%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.9567%" y="213" width="0.0803%" height="15" fill="rgb(237,86,27)" fg:x="610" fg:w="1"/><text x="49.2067%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.9567%" y="197" width="0.0803%" height="15" fill="rgb(207,125,19)" fg:x="610" fg:w="1"/><text x="49.2067%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (9 samples, 0.72%)</title><rect x="49.0369%" y="229" width="0.7223%" height="15" fill="rgb(243,195,0)" fg:x="611" fg:w="9"/><text x="49.2869%" y="239.50"></text></g><g><title>core::slice::sort::merge_sort (7 samples, 0.56%)</title><rect x="49.1974%" y="213" width="0.5618%" height="15" fill="rgb(230,95,18)" fg:x="613" fg:w="7"/><text x="49.4474%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (11 samples, 0.88%)</title><rect x="48.9567%" y="245" width="0.8828%" height="15" fill="rgb(232,157,21)" fg:x="610" fg:w="11"/><text x="49.2067%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="49.7592%" y="229" width="0.0803%" height="15" fill="rgb(212,120,50)" fg:x="620" fg:w="1"/><text x="50.0092%" y="239.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="49.7592%" y="213" width="0.0803%" height="15" fill="rgb(222,204,44)" fg:x="620" fg:w="1"/><text x="50.0092%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.0803%" y="229" width="0.0803%" height="15" fill="rgb(236,6,33)" fg:x="624" fg:w="1"/><text x="50.3303%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.0803%" y="213" width="0.0803%" height="15" fill="rgb(247,11,38)" fg:x="624" fg:w="1"/><text x="50.3303%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.0803%" y="197" width="0.0803%" height="15" fill="rgb(215,111,0)" fg:x="624" fg:w="1"/><text x="50.3303%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.3210%" y="213" width="0.0803%" height="15" fill="rgb(211,65,46)" fg:x="627" fg:w="1"/><text x="50.5710%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.3210%" y="197" width="0.0803%" height="15" fill="rgb(216,5,12)" fg:x="627" fg:w="1"/><text x="50.5710%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.3210%" y="181" width="0.0803%" height="15" fill="rgb(226,7,2)" fg:x="627" fg:w="1"/><text x="50.5710%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::concat (4 samples, 0.32%)</title><rect x="50.1605%" y="229" width="0.3210%" height="15" fill="rgb(242,116,12)" fg:x="625" fg:w="4"/><text x="50.4105%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="50.4013%" y="213" width="0.0803%" height="15" fill="rgb(249,209,7)" fg:x="628" fg:w="1"/><text x="50.6513%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="50.4013%" y="197" width="0.0803%" height="15" fill="rgb(232,73,17)" fg:x="628" fg:w="1"/><text x="50.6513%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (9 samples, 0.72%)</title><rect x="49.8395%" y="245" width="0.7223%" height="15" fill="rgb(214,13,32)" fg:x="621" fg:w="9"/><text x="50.0895%" y="255.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="50.4815%" y="229" width="0.0803%" height="15" fill="rgb(221,125,10)" fg:x="629" fg:w="1"/><text x="50.7315%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.4815%" y="213" width="0.0803%" height="15" fill="rgb(246,7,44)" fg:x="629" fg:w="1"/><text x="50.7315%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (198 samples, 15.89%)</title><rect x="34.7512%" y="293" width="15.8909%" height="15" fill="rgb(239,18,35)" fg:x="433" fg:w="198"/><text x="35.0012%" y="303.50">regex_automata::meta::re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (23 samples, 1.85%)</title><rect x="48.7961%" y="277" width="1.8459%" height="15" fill="rgb(250,222,16)" fg:x="608" fg:w="23"/><text x="49.0461%" y="287.50">r..</text></g><g><title>regex_syntax::ast::visitor::visit (23 samples, 1.85%)</title><rect x="48.7961%" y="261" width="1.8459%" height="15" fill="rgb(219,100,8)" fg:x="608" fg:w="23"/><text x="49.0461%" y="271.50">r..</text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="50.5618%" y="245" width="0.0803%" height="15" fill="rgb(240,62,13)" fg:x="630" fg:w="1"/><text x="50.8118%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="50.5618%" y="229" width="0.0803%" height="15" fill="rgb(253,194,2)" fg:x="630" fg:w="1"/><text x="50.8118%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.5618%" y="213" width="0.0803%" height="15" fill="rgb(235,58,31)" fg:x="630" fg:w="1"/><text x="50.8118%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.5618%" y="197" width="0.0803%" height="15" fill="rgb(231,37,11)" fg:x="630" fg:w="1"/><text x="50.8118%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.5618%" y="181" width="0.0803%" height="15" fill="rgb(235,133,0)" fg:x="630" fg:w="1"/><text x="50.8118%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (199 samples, 15.97%)</title><rect x="34.7512%" y="325" width="15.9711%" height="15" fill="rgb(212,185,40)" fg:x="433" fg:w="199"/><text x="35.0012%" y="335.50">&lt;regex::regex::string::Re..</text></g><g><title>regex::builders::Builder::build_one_string (199 samples, 15.97%)</title><rect x="34.7512%" y="309" width="15.9711%" height="15" fill="rgb(216,68,42)" fg:x="433" fg:w="199"/><text x="35.0012%" y="319.50">regex::builders::Builder:..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="50.6421%" y="293" width="0.0803%" height="15" fill="rgb(239,81,4)" fg:x="631" fg:w="1"/><text x="50.8921%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.7223%" y="277" width="0.0803%" height="15" fill="rgb(206,86,6)" fg:x="632" fg:w="1"/><text x="50.9723%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="50.7223%" y="325" width="0.1605%" height="15" fill="rgb(249,95,27)" fg:x="632" fg:w="2"/><text x="50.9723%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="50.7223%" y="309" width="0.1605%" height="15" fill="rgb(205,155,45)" fg:x="632" fg:w="2"/><text x="50.9723%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="50.7223%" y="293" width="0.1605%" height="15" fill="rgb(213,55,42)" fg:x="632" fg:w="2"/><text x="50.9723%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="50.8026%" y="277" width="0.0803%" height="15" fill="rgb(249,197,4)" fg:x="633" fg:w="1"/><text x="51.0526%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="50.8828%" y="277" width="0.0803%" height="15" fill="rgb(212,128,32)" fg:x="634" fg:w="1"/><text x="51.1328%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="50.8828%" y="261" width="0.0803%" height="15" fill="rgb(252,47,30)" fg:x="634" fg:w="1"/><text x="51.1328%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="50.8828%" y="309" width="0.1605%" height="15" fill="rgb(209,79,18)" fg:x="634" fg:w="2"/><text x="51.1328%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="50.8828%" y="293" width="0.1605%" height="15" fill="rgb(225,81,38)" fg:x="634" fg:w="2"/><text x="51.1328%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="50.9631%" y="277" width="0.0803%" height="15" fill="rgb(205,95,16)" fg:x="635" fg:w="1"/><text x="51.2131%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="51.3644%" y="229" width="0.1605%" height="15" fill="rgb(214,30,4)" fg:x="640" fg:w="2"/><text x="51.6144%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="51.3644%" y="213" width="0.1605%" height="15" fill="rgb(232,137,22)" fg:x="640" fg:w="2"/><text x="51.6144%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="51.3644%" y="197" width="0.1605%" height="15" fill="rgb(232,156,19)" fg:x="640" fg:w="2"/><text x="51.6144%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (213 samples, 17.09%)</title><rect x="34.7512%" y="341" width="17.0947%" height="15" fill="rgb(248,157,26)" fg:x="433" fg:w="213"/><text x="35.0012%" y="351.50">indefinite::rules::number:..</text></g><g><title>regex::regex::string::Regex::is_match_at (12 samples, 0.96%)</title><rect x="50.8828%" y="325" width="0.9631%" height="15" fill="rgb(242,24,3)" fg:x="634" fg:w="12"/><text x="51.1328%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.80%)</title><rect x="51.0433%" y="309" width="0.8026%" height="15" fill="rgb(218,195,48)" fg:x="636" fg:w="10"/><text x="51.2933%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.80%)</title><rect x="51.0433%" y="293" width="0.8026%" height="15" fill="rgb(214,193,36)" fg:x="636" fg:w="10"/><text x="51.2933%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.80%)</title><rect x="51.0433%" y="277" width="0.8026%" height="15" fill="rgb(242,110,40)" fg:x="636" fg:w="10"/><text x="51.2933%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.80%)</title><rect x="51.0433%" y="261" width="0.8026%" height="15" fill="rgb(233,150,26)" fg:x="636" fg:w="10"/><text x="51.2933%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.80%)</title><rect x="51.0433%" y="245" width="0.8026%" height="15" fill="rgb(239,200,30)" fg:x="636" fg:w="10"/><text x="51.2933%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="51.5249%" y="229" width="0.3210%" height="15" fill="rgb(226,28,11)" fg:x="642" fg:w="4"/><text x="51.7749%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="51.8459%" y="261" width="0.0803%" height="15" fill="rgb(220,26,48)" fg:x="646" fg:w="1"/><text x="52.0959%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.8459%" y="245" width="0.0803%" height="15" fill="rgb(232,10,11)" fg:x="646" fg:w="1"/><text x="52.0959%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="51.8459%" y="229" width="0.0803%" height="15" fill="rgb(252,143,50)" fg:x="646" fg:w="1"/><text x="52.0959%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.8459%" y="213" width="0.0803%" height="15" fill="rgb(206,58,22)" fg:x="646" fg:w="1"/><text x="52.0959%" y="223.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="51.9262%" y="261" width="0.0803%" height="15" fill="rgb(250,9,45)" fg:x="647" fg:w="1"/><text x="52.1762%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="52.0867%" y="245" width="0.1605%" height="15" fill="rgb(225,148,14)" fg:x="649" fg:w="2"/><text x="52.3367%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="52.2472%" y="229" width="0.0803%" height="15" fill="rgb(205,178,40)" fg:x="651" fg:w="1"/><text x="52.4972%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.2472%" y="213" width="0.0803%" height="15" fill="rgb(215,201,4)" fg:x="651" fg:w="1"/><text x="52.4972%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="52.2472%" y="245" width="0.1605%" height="15" fill="rgb(219,223,24)" fg:x="651" fg:w="2"/><text x="52.4972%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="52.3274%" y="229" width="0.0803%" height="15" fill="rgb(217,19,31)" fg:x="652" fg:w="1"/><text x="52.5774%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="52.3274%" y="213" width="0.0803%" height="15" fill="rgb(235,33,3)" fg:x="652" fg:w="1"/><text x="52.5774%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="52.3274%" y="197" width="0.0803%" height="15" fill="rgb(221,39,18)" fg:x="652" fg:w="1"/><text x="52.5774%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.3274%" y="181" width="0.0803%" height="15" fill="rgb(242,162,33)" fg:x="652" fg:w="1"/><text x="52.5774%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="52.4077%" y="197" width="0.0803%" height="15" fill="rgb(233,215,28)" fg:x="653" fg:w="1"/><text x="52.6577%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="52.4077%" y="181" width="0.0803%" height="15" fill="rgb(212,117,9)" fg:x="653" fg:w="1"/><text x="52.6577%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="52.4077%" y="229" width="0.1605%" height="15" fill="rgb(237,70,47)" fg:x="653" fg:w="2"/><text x="52.6577%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="52.4077%" y="213" width="0.1605%" height="15" fill="rgb(206,177,13)" fg:x="653" fg:w="2"/><text x="52.6577%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="52.4880%" y="197" width="0.0803%" height="15" fill="rgb(209,174,33)" fg:x="654" fg:w="1"/><text x="52.7380%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="52.4880%" y="181" width="0.0803%" height="15" fill="rgb(226,6,11)" fg:x="654" fg:w="1"/><text x="52.7380%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="52.4880%" y="165" width="0.0803%" height="15" fill="rgb(240,214,6)" fg:x="654" fg:w="1"/><text x="52.7380%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.4880%" y="149" width="0.0803%" height="15" fill="rgb(254,214,40)" fg:x="654" fg:w="1"/><text x="52.7380%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.4880%" y="133" width="0.0803%" height="15" fill="rgb(230,187,15)" fg:x="654" fg:w="1"/><text x="52.7380%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.4880%" y="117" width="0.0803%" height="15" fill="rgb(250,11,27)" fg:x="654" fg:w="1"/><text x="52.7380%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="52.5682%" y="213" width="0.0803%" height="15" fill="rgb(243,107,19)" fg:x="655" fg:w="1"/><text x="52.8182%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.5682%" y="197" width="0.0803%" height="15" fill="rgb(253,66,26)" fg:x="655" fg:w="1"/><text x="52.8182%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.5682%" y="181" width="0.0803%" height="15" fill="rgb(228,43,8)" fg:x="655" fg:w="1"/><text x="52.8182%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.5682%" y="165" width="0.0803%" height="15" fill="rgb(232,197,36)" fg:x="655" fg:w="1"/><text x="52.8182%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.72%)</title><rect x="52.0064%" y="261" width="0.7223%" height="15" fill="rgb(221,182,31)" fg:x="648" fg:w="9"/><text x="52.2564%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="52.4077%" y="245" width="0.3210%" height="15" fill="rgb(244,25,36)" fg:x="653" fg:w="4"/><text x="52.6577%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="52.5682%" y="229" width="0.1605%" height="15" fill="rgb(247,101,19)" fg:x="655" fg:w="2"/><text x="52.8182%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="52.6485%" y="213" width="0.0803%" height="15" fill="rgb(223,117,19)" fg:x="656" fg:w="1"/><text x="52.8985%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="52.8090%" y="213" width="0.0803%" height="15" fill="rgb(249,63,38)" fg:x="658" fg:w="1"/><text x="53.0590%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="52.7287%" y="261" width="0.2408%" height="15" fill="rgb(220,143,23)" fg:x="657" fg:w="3"/><text x="52.9787%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="52.7287%" y="245" width="0.2408%" height="15" fill="rgb(252,183,22)" fg:x="657" fg:w="3"/><text x="52.9787%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="52.7287%" y="229" width="0.2408%" height="15" fill="rgb(243,176,15)" fg:x="657" fg:w="3"/><text x="52.9787%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="52.8892%" y="213" width="0.0803%" height="15" fill="rgb(244,204,46)" fg:x="659" fg:w="1"/><text x="53.1392%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="52.9695%" y="213" width="0.0803%" height="15" fill="rgb(227,28,54)" fg:x="660" fg:w="1"/><text x="53.2195%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (16 samples, 1.28%)</title><rect x="51.8459%" y="309" width="1.2841%" height="15" fill="rgb(231,10,15)" fg:x="646" fg:w="16"/><text x="52.0959%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (16 samples, 1.28%)</title><rect x="51.8459%" y="293" width="1.2841%" height="15" fill="rgb(210,200,17)" fg:x="646" fg:w="16"/><text x="52.0959%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (16 samples, 1.28%)</title><rect x="51.8459%" y="277" width="1.2841%" height="15" fill="rgb(251,106,46)" fg:x="646" fg:w="16"/><text x="52.0959%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="52.9695%" y="261" width="0.1605%" height="15" fill="rgb(218,211,15)" fg:x="660" fg:w="2"/><text x="53.2195%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="52.9695%" y="245" width="0.1605%" height="15" fill="rgb(239,62,10)" fg:x="660" fg:w="2"/><text x="53.2195%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="52.9695%" y="229" width="0.1605%" height="15" fill="rgb(225,53,53)" fg:x="660" fg:w="2"/><text x="53.2195%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="53.0498%" y="213" width="0.0803%" height="15" fill="rgb(207,16,24)" fg:x="661" fg:w="1"/><text x="53.2998%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="53.1300%" y="245" width="0.0803%" height="15" fill="rgb(217,52,28)" fg:x="662" fg:w="1"/><text x="53.3800%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="53.1300%" y="229" width="0.0803%" height="15" fill="rgb(246,1,5)" fg:x="662" fg:w="1"/><text x="53.3800%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="53.1300%" y="261" width="0.2408%" height="15" fill="rgb(221,29,26)" fg:x="662" fg:w="3"/><text x="53.3800%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="53.2103%" y="245" width="0.1605%" height="15" fill="rgb(250,133,32)" fg:x="663" fg:w="2"/><text x="53.4603%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="53.1300%" y="309" width="0.4013%" height="15" fill="rgb(236,63,16)" fg:x="662" fg:w="5"/><text x="53.3800%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="53.1300%" y="293" width="0.4013%" height="15" fill="rgb(231,159,14)" fg:x="662" fg:w="5"/><text x="53.3800%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.40%)</title><rect x="53.1300%" y="277" width="0.4013%" height="15" fill="rgb(207,102,36)" fg:x="662" fg:w="5"/><text x="53.3800%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (2 samples, 0.16%)</title><rect x="53.3708%" y="261" width="0.1605%" height="15" fill="rgb(230,224,31)" fg:x="665" fg:w="2"/><text x="53.6208%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.4510%" y="245" width="0.0803%" height="15" fill="rgb(215,182,16)" fg:x="666" fg:w="1"/><text x="53.7010%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (23 samples, 1.85%)</title><rect x="51.8459%" y="325" width="1.8459%" height="15" fill="rgb(226,113,2)" fg:x="646" fg:w="23"/><text x="52.0959%" y="335.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="53.5313%" y="309" width="0.1605%" height="15" fill="rgb(241,18,35)" fg:x="667" fg:w="2"/><text x="53.7813%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="53.5313%" y="293" width="0.1605%" height="15" fill="rgb(240,165,44)" fg:x="667" fg:w="2"/><text x="53.7813%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="53.5313%" y="277" width="0.1605%" height="15" fill="rgb(229,130,47)" fg:x="667" fg:w="2"/><text x="53.7813%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="53.5313%" y="261" width="0.1605%" height="15" fill="rgb(223,93,7)" fg:x="667" fg:w="2"/><text x="53.7813%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="53.5313%" y="245" width="0.1605%" height="15" fill="rgb(205,180,36)" fg:x="667" fg:w="2"/><text x="53.7813%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="53.6116%" y="229" width="0.0803%" height="15" fill="rgb(221,103,28)" fg:x="668" fg:w="1"/><text x="53.8616%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (511 samples, 41.01%)</title><rect x="12.8411%" y="421" width="41.0112%" height="15" fill="rgb(212,4,3)" fg:x="160" fg:w="511"/><text x="13.0911%" y="431.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (474 samples, 38.04%)</title><rect x="15.8106%" y="405" width="38.0417%" height="15" fill="rgb(209,221,53)" fg:x="197" fg:w="474"/><text x="16.0606%" y="415.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (474 samples, 38.04%)</title><rect x="15.8106%" y="389" width="38.0417%" height="15" fill="rgb(233,229,52)" fg:x="197" fg:w="474"/><text x="16.0606%" y="399.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (474 samples, 38.04%)</title><rect x="15.8106%" y="373" width="38.0417%" height="15" fill="rgb(254,127,37)" fg:x="197" fg:w="474"/><text x="16.0606%" y="383.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (474 samples, 38.04%)</title><rect x="15.8106%" y="357" width="38.0417%" height="15" fill="rgb(207,161,26)" fg:x="197" fg:w="474"/><text x="16.0606%" y="367.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (25 samples, 2.01%)</title><rect x="51.8459%" y="341" width="2.0064%" height="15" fill="rgb(223,75,5)" fg:x="646" fg:w="25"/><text x="52.0959%" y="351.50">i..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="53.6918%" y="325" width="0.1605%" height="15" fill="rgb(235,115,52)" fg:x="669" fg:w="2"/><text x="53.9418%" y="335.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="53.8523%" y="389" width="0.0803%" height="15" fill="rgb(240,91,46)" fg:x="671" fg:w="1"/><text x="54.1023%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.9326%" y="389" width="0.0803%" height="15" fill="rgb(251,144,21)" fg:x="672" fg:w="1"/><text x="54.1826%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.0931%" y="373" width="0.0803%" height="15" fill="rgb(247,220,47)" fg:x="674" fg:w="1"/><text x="54.3431%" y="383.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="54.1734%" y="373" width="0.0803%" height="15" fill="rgb(253,122,1)" fg:x="675" fg:w="1"/><text x="54.4234%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.1734%" y="357" width="0.0803%" height="15" fill="rgb(221,0,24)" fg:x="675" fg:w="1"/><text x="54.4234%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="54.2536%" y="341" width="0.1605%" height="15" fill="rgb(220,204,54)" fg:x="676" fg:w="2"/><text x="54.5036%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="54.2536%" y="325" width="0.1605%" height="15" fill="rgb(205,96,25)" fg:x="676" fg:w="2"/><text x="54.5036%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="54.2536%" y="309" width="0.1605%" height="15" fill="rgb(247,77,20)" fg:x="676" fg:w="2"/><text x="54.5036%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.3339%" y="293" width="0.0803%" height="15" fill="rgb(245,151,8)" fg:x="677" fg:w="1"/><text x="54.5839%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="54.5746%" y="309" width="0.0803%" height="15" fill="rgb(242,158,39)" fg:x="680" fg:w="1"/><text x="54.8246%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="54.5746%" y="293" width="0.0803%" height="15" fill="rgb(222,214,50)" fg:x="680" fg:w="1"/><text x="54.8246%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::size_hint (1 samples, 0.08%)</title><rect x="54.5746%" y="277" width="0.0803%" height="15" fill="rgb(229,60,39)" fg:x="680" fg:w="1"/><text x="54.8246%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="54.2536%" y="357" width="0.4815%" height="15" fill="rgb(240,148,18)" fg:x="676" fg:w="6"/><text x="54.5036%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="54.4141%" y="341" width="0.3210%" height="15" fill="rgb(215,96,11)" fg:x="678" fg:w="4"/><text x="54.6641%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="54.4141%" y="325" width="0.3210%" height="15" fill="rgb(238,162,53)" fg:x="678" fg:w="4"/><text x="54.6641%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="54.6549%" y="309" width="0.0803%" height="15" fill="rgb(214,83,18)" fg:x="681" fg:w="1"/><text x="54.9049%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="54.6549%" y="293" width="0.0803%" height="15" fill="rgb(248,117,24)" fg:x="681" fg:w="1"/><text x="54.9049%" y="303.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="54.6549%" y="277" width="0.0803%" height="15" fill="rgb(238,190,6)" fg:x="681" fg:w="1"/><text x="54.9049%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="54.6549%" y="261" width="0.0803%" height="15" fill="rgb(213,51,6)" fg:x="681" fg:w="1"/><text x="54.9049%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="54.6549%" y="245" width="0.0803%" height="15" fill="rgb(212,136,1)" fg:x="681" fg:w="1"/><text x="54.9049%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="54.8957%" y="293" width="0.1605%" height="15" fill="rgb(221,192,14)" fg:x="684" fg:w="2"/><text x="55.1457%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="54.8957%" y="277" width="0.1605%" height="15" fill="rgb(244,38,54)" fg:x="684" fg:w="2"/><text x="55.1457%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="54.8957%" y="261" width="0.1605%" height="15" fill="rgb(240,45,28)" fg:x="684" fg:w="2"/><text x="55.1457%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="54.9759%" y="245" width="0.0803%" height="15" fill="rgb(240,123,12)" fg:x="685" fg:w="1"/><text x="55.2259%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.9759%" y="229" width="0.0803%" height="15" fill="rgb(216,14,30)" fg:x="685" fg:w="1"/><text x="55.2259%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="55.0562%" y="293" width="0.0803%" height="15" fill="rgb(212,50,24)" fg:x="686" fg:w="1"/><text x="55.3062%" y="303.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="55.0562%" y="277" width="0.0803%" height="15" fill="rgb(253,229,47)" fg:x="686" fg:w="1"/><text x="55.3062%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="55.0562%" y="261" width="0.0803%" height="15" fill="rgb(214,26,17)" fg:x="686" fg:w="1"/><text x="55.3062%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="55.0562%" y="245" width="0.0803%" height="15" fill="rgb(252,60,11)" fg:x="686" fg:w="1"/><text x="55.3062%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.0562%" y="229" width="0.0803%" height="15" fill="rgb(209,59,37)" fg:x="686" fg:w="1"/><text x="55.3062%" y="239.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="55.0562%" y="213" width="0.0803%" height="15" fill="rgb(228,126,53)" fg:x="686" fg:w="1"/><text x="55.3062%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.0562%" y="197" width="0.0803%" height="15" fill="rgb(233,99,2)" fg:x="686" fg:w="1"/><text x="55.3062%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="55.0562%" y="181" width="0.0803%" height="15" fill="rgb(217,106,34)" fg:x="686" fg:w="1"/><text x="55.3062%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="55.0562%" y="165" width="0.0803%" height="15" fill="rgb(222,46,19)" fg:x="686" fg:w="1"/><text x="55.3062%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.1364%" y="293" width="0.0803%" height="15" fill="rgb(251,87,31)" fg:x="687" fg:w="1"/><text x="55.3864%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="55.3772%" y="197" width="0.0803%" height="15" fill="rgb(213,70,51)" fg:x="690" fg:w="1"/><text x="55.6272%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="55.3772%" y="181" width="0.0803%" height="15" fill="rgb(229,144,18)" fg:x="690" fg:w="1"/><text x="55.6272%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="55.3772%" y="165" width="0.0803%" height="15" fill="rgb(254,60,26)" fg:x="690" fg:w="1"/><text x="55.6272%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="55.3772%" y="149" width="0.0803%" height="15" fill="rgb(243,127,51)" fg:x="690" fg:w="1"/><text x="55.6272%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="55.4575%" y="197" width="0.0803%" height="15" fill="rgb(221,51,25)" fg:x="691" fg:w="1"/><text x="55.7075%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.4575%" y="181" width="0.0803%" height="15" fill="rgb(205,42,7)" fg:x="691" fg:w="1"/><text x="55.7075%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="55.4575%" y="165" width="0.0803%" height="15" fill="rgb(236,177,48)" fg:x="691" fg:w="1"/><text x="55.7075%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="55.4575%" y="149" width="0.0803%" height="15" fill="rgb(226,79,31)" fg:x="691" fg:w="1"/><text x="55.7075%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="55.4575%" y="133" width="0.0803%" height="15" fill="rgb(216,170,12)" fg:x="691" fg:w="1"/><text x="55.7075%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="55.3772%" y="245" width="0.2408%" height="15" fill="rgb(208,62,51)" fg:x="690" fg:w="3"/><text x="55.6272%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="55.3772%" y="229" width="0.2408%" height="15" fill="rgb(254,129,9)" fg:x="690" fg:w="3"/><text x="55.6272%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="55.3772%" y="213" width="0.2408%" height="15" fill="rgb(243,209,31)" fg:x="690" fg:w="3"/><text x="55.6272%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.5377%" y="197" width="0.0803%" height="15" fill="rgb(213,159,23)" fg:x="692" fg:w="1"/><text x="55.7877%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="55.5377%" y="181" width="0.0803%" height="15" fill="rgb(249,77,39)" fg:x="692" fg:w="1"/><text x="55.7877%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="55.5377%" y="165" width="0.0803%" height="15" fill="rgb(230,13,33)" fg:x="692" fg:w="1"/><text x="55.7877%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.5377%" y="149" width="0.0803%" height="15" fill="rgb(215,215,7)" fg:x="692" fg:w="1"/><text x="55.7877%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="55.5377%" y="133" width="0.0803%" height="15" fill="rgb(222,92,25)" fg:x="692" fg:w="1"/><text x="55.7877%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="55.5377%" y="117" width="0.0803%" height="15" fill="rgb(215,173,22)" fg:x="692" fg:w="1"/><text x="55.7877%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.5377%" y="101" width="0.0803%" height="15" fill="rgb(247,205,52)" fg:x="692" fg:w="1"/><text x="55.7877%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="55.5377%" y="85" width="0.0803%" height="15" fill="rgb(240,210,37)" fg:x="692" fg:w="1"/><text x="55.7877%" y="95.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="55.5377%" y="69" width="0.0803%" height="15" fill="rgb(224,13,10)" fg:x="692" fg:w="1"/><text x="55.7877%" y="79.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="55.5377%" y="53" width="0.0803%" height="15" fill="rgb(209,48,33)" fg:x="692" fg:w="1"/><text x="55.7877%" y="63.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.5377%" y="37" width="0.0803%" height="15" fill="rgb(228,219,23)" fg:x="692" fg:w="1"/><text x="55.7877%" y="47.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.56%)</title><rect x="55.2167%" y="293" width="0.5618%" height="15" fill="rgb(239,46,49)" fg:x="688" fg:w="7"/><text x="55.4667%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="55.2167%" y="277" width="0.5618%" height="15" fill="rgb(206,172,51)" fg:x="688" fg:w="7"/><text x="55.4667%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="55.2167%" y="261" width="0.5618%" height="15" fill="rgb(213,212,35)" fg:x="688" fg:w="7"/><text x="55.4667%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="55.6180%" y="245" width="0.1605%" height="15" fill="rgb(252,40,27)" fg:x="693" fg:w="2"/><text x="55.8680%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.6982%" y="229" width="0.0803%" height="15" fill="rgb(212,33,41)" fg:x="694" fg:w="1"/><text x="55.9482%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="55.9390%" y="181" width="0.0803%" height="15" fill="rgb(232,160,27)" fg:x="697" fg:w="1"/><text x="56.1890%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="56.0995%" y="149" width="0.0803%" height="15" fill="rgb(244,160,20)" fg:x="699" fg:w="1"/><text x="56.3495%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="56.0995%" y="133" width="0.0803%" height="15" fill="rgb(205,66,20)" fg:x="699" fg:w="1"/><text x="56.3495%" y="143.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="56.2600%" y="101" width="0.0803%" height="15" fill="rgb(236,158,6)" fg:x="701" fg:w="1"/><text x="56.5100%" y="111.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="56.2600%" y="85" width="0.0803%" height="15" fill="rgb(232,25,36)" fg:x="701" fg:w="1"/><text x="56.5100%" y="95.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="56.2600%" y="133" width="0.1605%" height="15" fill="rgb(220,153,35)" fg:x="701" fg:w="2"/><text x="56.5100%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="56.2600%" y="117" width="0.1605%" height="15" fill="rgb(216,5,8)" fg:x="701" fg:w="2"/><text x="56.5100%" y="127.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="56.3403%" y="101" width="0.0803%" height="15" fill="rgb(240,97,3)" fg:x="702" fg:w="1"/><text x="56.5903%" y="111.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (22 samples, 1.77%)</title><rect x="54.7352%" y="357" width="1.7657%" height="15" fill="rgb(220,99,26)" fg:x="682" fg:w="22"/><text x="54.9852%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (22 samples, 1.77%)</title><rect x="54.7352%" y="341" width="1.7657%" height="15" fill="rgb(237,96,2)" fg:x="682" fg:w="22"/><text x="54.9852%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (22 samples, 1.77%)</title><rect x="54.7352%" y="325" width="1.7657%" height="15" fill="rgb(217,197,47)" fg:x="682" fg:w="22"/><text x="54.9852%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (22 samples, 1.77%)</title><rect x="54.7352%" y="309" width="1.7657%" height="15" fill="rgb(252,133,54)" fg:x="682" fg:w="22"/><text x="54.9852%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (9 samples, 0.72%)</title><rect x="55.7785%" y="293" width="0.7223%" height="15" fill="rgb(233,37,30)" fg:x="695" fg:w="9"/><text x="56.0285%" y="303.50"></text></g><g><title>serde_json::de::from_trait (9 samples, 0.72%)</title><rect x="55.7785%" y="277" width="0.7223%" height="15" fill="rgb(239,182,12)" fg:x="695" fg:w="9"/><text x="56.0285%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="55.7785%" y="261" width="0.7223%" height="15" fill="rgb(245,83,39)" fg:x="695" fg:w="9"/><text x="56.0285%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="55.7785%" y="245" width="0.7223%" height="15" fill="rgb(222,109,36)" fg:x="695" fg:w="9"/><text x="56.0285%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="55.7785%" y="229" width="0.7223%" height="15" fill="rgb(237,95,44)" fg:x="695" fg:w="9"/><text x="56.0285%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="55.8587%" y="213" width="0.6421%" height="15" fill="rgb(216,36,54)" fg:x="696" fg:w="8"/><text x="56.1087%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="55.8587%" y="197" width="0.6421%" height="15" fill="rgb(236,164,3)" fg:x="696" fg:w="8"/><text x="56.1087%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="56.0193%" y="181" width="0.4815%" height="15" fill="rgb(223,15,21)" fg:x="698" fg:w="6"/><text x="56.2693%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="56.0995%" y="165" width="0.4013%" height="15" fill="rgb(239,191,12)" fg:x="699" fg:w="5"/><text x="56.3495%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="56.1798%" y="149" width="0.3210%" height="15" fill="rgb(231,191,37)" fg:x="700" fg:w="4"/><text x="56.4298%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="56.4205%" y="133" width="0.0803%" height="15" fill="rgb(209,155,36)" fg:x="703" fg:w="1"/><text x="56.6705%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.4205%" y="117" width="0.0803%" height="15" fill="rgb(216,222,49)" fg:x="703" fg:w="1"/><text x="56.6705%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.5008%" y="357" width="0.0803%" height="15" fill="rgb(218,181,2)" fg:x="704" fg:w="1"/><text x="56.7508%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.5008%" y="341" width="0.0803%" height="15" fill="rgb(239,125,9)" fg:x="704" fg:w="1"/><text x="56.7508%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.5008%" y="325" width="0.0803%" height="15" fill="rgb(233,103,7)" fg:x="704" fg:w="1"/><text x="56.7508%" y="335.50"></text></g><g><title>plugins_core::tools::contained_by (30 samples, 2.41%)</title><rect x="54.2536%" y="373" width="2.4077%" height="15" fill="rgb(209,223,5)" fg:x="676" fg:w="30"/><text x="54.5036%" y="383.50">pl..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="56.5811%" y="357" width="0.0803%" height="15" fill="rgb(234,71,27)" fg:x="705" fg:w="1"/><text x="56.8311%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.5811%" y="341" width="0.0803%" height="15" fill="rgb(251,202,16)" fg:x="705" fg:w="1"/><text x="56.8311%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="56.7416%" y="325" width="0.0803%" height="15" fill="rgb(231,180,0)" fg:x="707" fg:w="1"/><text x="56.9916%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.8218%" y="325" width="0.0803%" height="15" fill="rgb(223,58,28)" fg:x="708" fg:w="1"/><text x="57.0718%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.8218%" y="309" width="0.0803%" height="15" fill="rgb(250,34,24)" fg:x="708" fg:w="1"/><text x="57.0718%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="56.8218%" y="293" width="0.0803%" height="15" fill="rgb(235,24,16)" fg:x="708" fg:w="1"/><text x="57.0718%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="56.8218%" y="277" width="0.0803%" height="15" fill="rgb(219,28,33)" fg:x="708" fg:w="1"/><text x="57.0718%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="56.8218%" y="261" width="0.0803%" height="15" fill="rgb(228,150,43)" fg:x="708" fg:w="1"/><text x="57.0718%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="56.8218%" y="245" width="0.0803%" height="15" fill="rgb(221,228,36)" fg:x="708" fg:w="1"/><text x="57.0718%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="56.8218%" y="229" width="0.0803%" height="15" fill="rgb(232,116,17)" fg:x="708" fg:w="1"/><text x="57.0718%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="56.9021%" y="293" width="0.0803%" height="15" fill="rgb(220,110,51)" fg:x="709" fg:w="1"/><text x="57.1521%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="56.9021%" y="277" width="0.0803%" height="15" fill="rgb(207,26,25)" fg:x="709" fg:w="1"/><text x="57.1521%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="56.7416%" y="341" width="0.3210%" height="15" fill="rgb(223,58,19)" fg:x="707" fg:w="4"/><text x="56.9916%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="56.9021%" y="325" width="0.1605%" height="15" fill="rgb(234,125,39)" fg:x="709" fg:w="2"/><text x="57.1521%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="56.9021%" y="309" width="0.1605%" height="15" fill="rgb(241,48,36)" fg:x="709" fg:w="2"/><text x="57.1521%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.9823%" y="293" width="0.0803%" height="15" fill="rgb(217,148,51)" fg:x="710" fg:w="1"/><text x="57.2323%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.9823%" y="277" width="0.0803%" height="15" fill="rgb(247,17,25)" fg:x="710" fg:w="1"/><text x="57.2323%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="56.9823%" y="261" width="0.0803%" height="15" fill="rgb(219,89,38)" fg:x="710" fg:w="1"/><text x="57.2323%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="56.9823%" y="245" width="0.0803%" height="15" fill="rgb(220,145,2)" fg:x="710" fg:w="1"/><text x="57.2323%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="56.9823%" y="229" width="0.0803%" height="15" fill="rgb(244,66,47)" fg:x="710" fg:w="1"/><text x="57.2323%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.9823%" y="213" width="0.0803%" height="15" fill="rgb(226,182,5)" fg:x="710" fg:w="1"/><text x="57.2323%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.9823%" y="197" width="0.0803%" height="15" fill="rgb(211,98,20)" fg:x="710" fg:w="1"/><text x="57.2323%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="56.9823%" y="181" width="0.0803%" height="15" fill="rgb(217,103,52)" fg:x="710" fg:w="1"/><text x="57.2323%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="56.9823%" y="165" width="0.0803%" height="15" fill="rgb(208,125,52)" fg:x="710" fg:w="1"/><text x="57.2323%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="56.9823%" y="149" width="0.0803%" height="15" fill="rgb(244,70,13)" fg:x="710" fg:w="1"/><text x="57.2323%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="56.9823%" y="133" width="0.0803%" height="15" fill="rgb(253,124,3)" fg:x="710" fg:w="1"/><text x="57.2323%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.9823%" y="117" width="0.0803%" height="15" fill="rgb(222,145,32)" fg:x="710" fg:w="1"/><text x="57.2323%" y="127.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.0626%" y="277" width="0.0803%" height="15" fill="rgb(232,183,47)" fg:x="711" fg:w="1"/><text x="57.3126%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::SeqDeserializer as serde::de::SeqAccess&gt;::size_hint (1 samples, 0.08%)</title><rect x="57.1429%" y="261" width="0.0803%" height="15" fill="rgb(246,226,4)" fg:x="712" fg:w="1"/><text x="57.3929%" y="271.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="57.2231%" y="261" width="0.0803%" height="15" fill="rgb(228,185,46)" fg:x="713" fg:w="1"/><text x="57.4731%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.2231%" y="245" width="0.0803%" height="15" fill="rgb(213,196,4)" fg:x="713" fg:w="1"/><text x="57.4731%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.2231%" y="229" width="0.0803%" height="15" fill="rgb(212,2,45)" fg:x="713" fg:w="1"/><text x="57.4731%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (4 samples, 0.32%)</title><rect x="57.0626%" y="309" width="0.3210%" height="15" fill="rgb(217,145,50)" fg:x="711" fg:w="4"/><text x="57.3126%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (4 samples, 0.32%)</title><rect x="57.0626%" y="293" width="0.3210%" height="15" fill="rgb(242,10,46)" fg:x="711" fg:w="4"/><text x="57.3126%" y="303.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="57.1429%" y="277" width="0.2408%" height="15" fill="rgb(252,91,48)" fg:x="712" fg:w="3"/><text x="57.3929%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.3034%" y="261" width="0.0803%" height="15" fill="rgb(216,72,13)" fg:x="714" fg:w="1"/><text x="57.5534%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.3034%" y="245" width="0.0803%" height="15" fill="rgb(219,6,37)" fg:x="714" fg:w="1"/><text x="57.5534%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="57.3034%" y="229" width="0.0803%" height="15" fill="rgb(236,185,40)" fg:x="714" fg:w="1"/><text x="57.5534%" y="239.50"></text></g><g><title>plugins_core::tools::occupied_by (10 samples, 0.80%)</title><rect x="56.6613%" y="373" width="0.8026%" height="15" fill="rgb(208,81,48)" fg:x="706" fg:w="10"/><text x="56.9113%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (10 samples, 0.80%)</title><rect x="56.6613%" y="357" width="0.8026%" height="15" fill="rgb(211,42,33)" fg:x="706" fg:w="10"/><text x="56.9113%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="57.0626%" y="341" width="0.4013%" height="15" fill="rgb(211,90,39)" fg:x="711" fg:w="5"/><text x="57.3126%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="57.0626%" y="325" width="0.4013%" height="15" fill="rgb(218,136,12)" fg:x="711" fg:w="5"/><text x="57.3126%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.3836%" y="309" width="0.0803%" height="15" fill="rgb(234,12,32)" fg:x="715" fg:w="1"/><text x="57.6336%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.3836%" y="293" width="0.0803%" height="15" fill="rgb(221,164,18)" fg:x="715" fg:w="1"/><text x="57.6336%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="57.3836%" y="277" width="0.0803%" height="15" fill="rgb(239,135,14)" fg:x="715" fg:w="1"/><text x="57.6336%" y="287.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="57.3836%" y="261" width="0.0803%" height="15" fill="rgb(226,198,47)" fg:x="715" fg:w="1"/><text x="57.6336%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.4639%" y="341" width="0.0803%" height="15" fill="rgb(244,121,47)" fg:x="716" fg:w="1"/><text x="57.7139%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.4639%" y="325" width="0.0803%" height="15" fill="rgb(226,21,48)" fg:x="716" fg:w="1"/><text x="57.7139%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="57.5441%" y="341" width="0.0803%" height="15" fill="rgb(215,178,47)" fg:x="717" fg:w="1"/><text x="57.7941%" y="351.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (46 samples, 3.69%)</title><rect x="54.0128%" y="389" width="3.6918%" height="15" fill="rgb(206,212,19)" fg:x="673" fg:w="46"/><text x="54.2628%" y="399.50">plug..</text></g><g><title>plugins_core::tools::worn_by (3 samples, 0.24%)</title><rect x="57.4639%" y="373" width="0.2408%" height="15" fill="rgb(230,104,34)" fg:x="716" fg:w="3"/><text x="57.7139%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="57.4639%" y="357" width="0.2408%" height="15" fill="rgb(210,96,51)" fg:x="716" fg:w="3"/><text x="57.7139%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.6244%" y="341" width="0.0803%" height="15" fill="rgb(229,111,47)" fg:x="718" fg:w="1"/><text x="57.8744%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.6244%" y="325" width="0.0803%" height="15" fill="rgb(218,174,45)" fg:x="718" fg:w="1"/><text x="57.8744%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="57.6244%" y="309" width="0.0803%" height="15" fill="rgb(215,21,32)" fg:x="718" fg:w="1"/><text x="57.8744%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="57.6244%" y="293" width="0.0803%" height="15" fill="rgb(235,72,21)" fg:x="718" fg:w="1"/><text x="57.8744%" y="303.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="57.7047%" y="373" width="0.0803%" height="15" fill="rgb(250,113,30)" fg:x="719" fg:w="1"/><text x="57.9547%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item::{{closure}} (1 samples, 0.08%)</title><rect x="57.7047%" y="357" width="0.0803%" height="15" fill="rgb(244,136,34)" fg:x="719" fg:w="1"/><text x="57.9547%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.7849%" y="309" width="0.0803%" height="15" fill="rgb(213,226,47)" fg:x="720" fg:w="1"/><text x="58.0349%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.0257%" y="277" width="0.0803%" height="15" fill="rgb(224,136,40)" fg:x="723" fg:w="1"/><text x="58.2757%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.0257%" y="261" width="0.0803%" height="15" fill="rgb(253,124,12)" fg:x="723" fg:w="1"/><text x="58.2757%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="58.1059%" y="277" width="0.0803%" height="15" fill="rgb(210,67,8)" fg:x="724" fg:w="1"/><text x="58.3559%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="58.1059%" y="261" width="0.0803%" height="15" fill="rgb(210,204,0)" fg:x="724" fg:w="1"/><text x="58.3559%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.1862%" y="213" width="0.0803%" height="15" fill="rgb(217,179,22)" fg:x="725" fg:w="1"/><text x="58.4362%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (56 samples, 4.49%)</title><rect x="53.8523%" y="421" width="4.4944%" height="15" fill="rgb(237,192,33)" fg:x="671" fg:w="56"/><text x="54.1023%" y="431.50">&lt;engi..</text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (56 samples, 4.49%)</title><rect x="53.8523%" y="405" width="4.4944%" height="15" fill="rgb(211,104,28)" fg:x="671" fg:w="56"/><text x="54.1023%" y="415.50">&lt;plug..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (8 samples, 0.64%)</title><rect x="57.7047%" y="389" width="0.6421%" height="15" fill="rgb(214,75,30)" fg:x="719" fg:w="8"/><text x="57.9547%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (7 samples, 0.56%)</title><rect x="57.7849%" y="373" width="0.5618%" height="15" fill="rgb(220,227,12)" fg:x="720" fg:w="7"/><text x="58.0349%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (7 samples, 0.56%)</title><rect x="57.7849%" y="357" width="0.5618%" height="15" fill="rgb(233,134,28)" fg:x="720" fg:w="7"/><text x="58.0349%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (7 samples, 0.56%)</title><rect x="57.7849%" y="341" width="0.5618%" height="15" fill="rgb(215,146,24)" fg:x="720" fg:w="7"/><text x="58.0349%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (7 samples, 0.56%)</title><rect x="57.7849%" y="325" width="0.5618%" height="15" fill="rgb(248,227,20)" fg:x="720" fg:w="7"/><text x="58.0349%" y="335.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.48%)</title><rect x="57.8652%" y="309" width="0.4815%" height="15" fill="rgb(250,44,42)" fg:x="721" fg:w="6"/><text x="58.1152%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="57.8652%" y="293" width="0.4815%" height="15" fill="rgb(219,5,35)" fg:x="721" fg:w="6"/><text x="58.1152%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="58.1862%" y="277" width="0.1605%" height="15" fill="rgb(241,132,32)" fg:x="725" fg:w="2"/><text x="58.4362%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="58.1862%" y="261" width="0.1605%" height="15" fill="rgb(234,212,51)" fg:x="725" fg:w="2"/><text x="58.4362%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="58.1862%" y="245" width="0.1605%" height="15" fill="rgb(242,173,29)" fg:x="725" fg:w="2"/><text x="58.4362%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="58.1862%" y="229" width="0.1605%" height="15" fill="rgb(212,159,2)" fg:x="725" fg:w="2"/><text x="58.4362%" y="239.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.2665%" y="213" width="0.0803%" height="15" fill="rgb(238,165,31)" fg:x="726" fg:w="1"/><text x="58.5165%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.2665%" y="197" width="0.0803%" height="15" fill="rgb(241,57,36)" fg:x="726" fg:w="1"/><text x="58.5165%" y="207.50"></text></g><g><title>plugins_core::library::actions::reply_ok (1 samples, 0.08%)</title><rect x="58.3467%" y="421" width="0.0803%" height="15" fill="rgb(249,7,4)" fg:x="727" fg:w="1"/><text x="58.5967%" y="431.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="58.3467%" y="405" width="0.0803%" height="15" fill="rgb(250,137,44)" fg:x="727" fg:w="1"/><text x="58.5967%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (1 samples, 0.08%)</title><rect x="58.3467%" y="389" width="0.0803%" height="15" fill="rgb(244,185,1)" fg:x="727" fg:w="1"/><text x="58.5967%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="58.3467%" y="373" width="0.0803%" height="15" fill="rgb(216,5,53)" fg:x="727" fg:w="1"/><text x="58.5967%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="58.3467%" y="357" width="0.0803%" height="15" fill="rgb(234,89,21)" fg:x="727" fg:w="1"/><text x="58.5967%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="58.3467%" y="341" width="0.0803%" height="15" fill="rgb(250,81,43)" fg:x="727" fg:w="1"/><text x="58.5967%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.3467%" y="325" width="0.0803%" height="15" fill="rgb(243,132,11)" fg:x="727" fg:w="1"/><text x="58.5967%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.3467%" y="309" width="0.0803%" height="15" fill="rgb(253,159,28)" fg:x="727" fg:w="1"/><text x="58.5967%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="58.3467%" y="293" width="0.0803%" height="15" fill="rgb(237,167,34)" fg:x="727" fg:w="1"/><text x="58.5967%" y="303.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="58.5072%" y="405" width="0.1605%" height="15" fill="rgb(237,16,50)" fg:x="729" fg:w="2"/><text x="58.7572%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="58.5072%" y="389" width="0.1605%" height="15" fill="rgb(247,125,2)" fg:x="729" fg:w="2"/><text x="58.7572%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="58.5072%" y="373" width="0.1605%" height="15" fill="rgb(254,35,3)" fg:x="729" fg:w="2"/><text x="58.7572%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="58.5875%" y="357" width="0.0803%" height="15" fill="rgb(237,209,21)" fg:x="730" fg:w="1"/><text x="58.8375%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="58.5875%" y="341" width="0.0803%" height="15" fill="rgb(224,122,20)" fg:x="730" fg:w="1"/><text x="58.8375%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="58.5875%" y="325" width="0.0803%" height="15" fill="rgb(224,11,46)" fg:x="730" fg:w="1"/><text x="58.8375%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.5875%" y="309" width="0.0803%" height="15" fill="rgb(248,21,33)" fg:x="730" fg:w="1"/><text x="58.8375%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.5875%" y="293" width="0.0803%" height="15" fill="rgb(222,144,7)" fg:x="730" fg:w="1"/><text x="58.8375%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="58.5875%" y="277" width="0.0803%" height="15" fill="rgb(205,141,37)" fg:x="730" fg:w="1"/><text x="58.8375%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.6677%" y="309" width="0.0803%" height="15" fill="rgb(237,130,8)" fg:x="731" fg:w="1"/><text x="58.9177%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.6677%" y="293" width="0.0803%" height="15" fill="rgb(209,179,39)" fg:x="731" fg:w="1"/><text x="58.9177%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.6677%" y="277" width="0.0803%" height="15" fill="rgb(207,52,17)" fg:x="731" fg:w="1"/><text x="58.9177%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.6677%" y="261" width="0.0803%" height="15" fill="rgb(253,158,17)" fg:x="731" fg:w="1"/><text x="58.9177%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.6677%" y="245" width="0.0803%" height="15" fill="rgb(208,19,53)" fg:x="731" fg:w="1"/><text x="58.9177%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.6677%" y="229" width="0.0803%" height="15" fill="rgb(233,152,13)" fg:x="731" fg:w="1"/><text x="58.9177%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.6677%" y="213" width="0.0803%" height="15" fill="rgb(231,84,1)" fg:x="731" fg:w="1"/><text x="58.9177%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.6677%" y="197" width="0.0803%" height="15" fill="rgb(229,142,48)" fg:x="731" fg:w="1"/><text x="58.9177%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.6677%" y="181" width="0.0803%" height="15" fill="rgb(248,70,29)" fg:x="731" fg:w="1"/><text x="58.9177%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="58.6677%" y="165" width="0.0803%" height="15" fill="rgb(250,85,7)" fg:x="731" fg:w="1"/><text x="58.9177%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="58.6677%" y="149" width="0.0803%" height="15" fill="rgb(235,140,43)" fg:x="731" fg:w="1"/><text x="58.9177%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="58.6677%" y="133" width="0.0803%" height="15" fill="rgb(216,0,5)" fg:x="731" fg:w="1"/><text x="58.9177%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="58.6677%" y="117" width="0.0803%" height="15" fill="rgb(223,167,29)" fg:x="731" fg:w="1"/><text x="58.9177%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.6677%" y="101" width="0.0803%" height="15" fill="rgb(229,150,33)" fg:x="731" fg:w="1"/><text x="58.9177%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="58.6677%" y="325" width="0.1605%" height="15" fill="rgb(227,26,52)" fg:x="731" fg:w="2"/><text x="58.9177%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.7480%" y="309" width="0.0803%" height="15" fill="rgb(250,60,52)" fg:x="732" fg:w="1"/><text x="58.9980%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.8283%" y="261" width="0.0803%" height="15" fill="rgb(228,81,46)" fg:x="733" fg:w="1"/><text x="59.0783%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="58.6677%" y="373" width="0.3210%" height="15" fill="rgb(225,218,31)" fg:x="731" fg:w="4"/><text x="58.9177%" y="383.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="58.6677%" y="357" width="0.3210%" height="15" fill="rgb(230,35,16)" fg:x="731" fg:w="4"/><text x="58.9177%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="58.6677%" y="341" width="0.3210%" height="15" fill="rgb(247,100,0)" fg:x="731" fg:w="4"/><text x="58.9177%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="58.8283%" y="325" width="0.1605%" height="15" fill="rgb(223,135,11)" fg:x="733" fg:w="2"/><text x="59.0783%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="58.8283%" y="309" width="0.1605%" height="15" fill="rgb(207,136,0)" fg:x="733" fg:w="2"/><text x="59.0783%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="58.8283%" y="293" width="0.1605%" height="15" fill="rgb(246,131,25)" fg:x="733" fg:w="2"/><text x="59.0783%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="58.8283%" y="277" width="0.1605%" height="15" fill="rgb(209,47,12)" fg:x="733" fg:w="2"/><text x="59.0783%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.9085%" y="261" width="0.0803%" height="15" fill="rgb(221,25,16)" fg:x="734" fg:w="1"/><text x="59.1585%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.9888%" y="261" width="0.0803%" height="15" fill="rgb(223,164,33)" fg:x="735" fg:w="1"/><text x="59.2388%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.0690%" y="261" width="0.0803%" height="15" fill="rgb(220,26,23)" fg:x="736" fg:w="1"/><text x="59.3190%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.0690%" y="245" width="0.0803%" height="15" fill="rgb(231,224,1)" fg:x="736" fg:w="1"/><text x="59.3190%" y="255.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="59.0690%" y="229" width="0.0803%" height="15" fill="rgb(229,221,24)" fg:x="736" fg:w="1"/><text x="59.3190%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (7 samples, 0.56%)</title><rect x="58.6677%" y="405" width="0.5618%" height="15" fill="rgb(213,34,10)" fg:x="731" fg:w="7"/><text x="58.9177%" y="415.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (7 samples, 0.56%)</title><rect x="58.6677%" y="389" width="0.5618%" height="15" fill="rgb(215,33,11)" fg:x="731" fg:w="7"/><text x="58.9177%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="58.9888%" y="373" width="0.2408%" height="15" fill="rgb(216,20,41)" fg:x="735" fg:w="3"/><text x="59.2388%" y="383.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="58.9888%" y="357" width="0.2408%" height="15" fill="rgb(228,43,31)" fg:x="735" fg:w="3"/><text x="59.2388%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="58.9888%" y="341" width="0.2408%" height="15" fill="rgb(227,83,26)" fg:x="735" fg:w="3"/><text x="59.2388%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="58.9888%" y="325" width="0.2408%" height="15" fill="rgb(217,168,19)" fg:x="735" fg:w="3"/><text x="59.2388%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="58.9888%" y="309" width="0.2408%" height="15" fill="rgb(231,34,33)" fg:x="735" fg:w="3"/><text x="59.2388%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.24%)</title><rect x="58.9888%" y="293" width="0.2408%" height="15" fill="rgb(230,120,51)" fg:x="735" fg:w="3"/><text x="59.2388%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="58.9888%" y="277" width="0.2408%" height="15" fill="rgb(215,138,27)" fg:x="735" fg:w="3"/><text x="59.2388%" y="287.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="59.1493%" y="261" width="0.0803%" height="15" fill="rgb(246,80,47)" fg:x="737" fg:w="1"/><text x="59.3993%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="59.3098%" y="373" width="0.0803%" height="15" fill="rgb(215,57,53)" fg:x="739" fg:w="1"/><text x="59.5598%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="59.3098%" y="357" width="0.0803%" height="15" fill="rgb(229,137,5)" fg:x="739" fg:w="1"/><text x="59.5598%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="59.3098%" y="389" width="0.1605%" height="15" fill="rgb(210,86,2)" fg:x="739" fg:w="2"/><text x="59.5598%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.3900%" y="373" width="0.0803%" height="15" fill="rgb(231,226,51)" fg:x="740" fg:w="1"/><text x="59.6400%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="59.3900%" y="357" width="0.0803%" height="15" fill="rgb(216,62,29)" fg:x="740" fg:w="1"/><text x="59.6400%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.6308%" y="357" width="0.0803%" height="15" fill="rgb(248,202,3)" fg:x="743" fg:w="1"/><text x="59.8808%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.6308%" y="341" width="0.0803%" height="15" fill="rgb(225,181,7)" fg:x="743" fg:w="1"/><text x="59.8808%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.6308%" y="325" width="0.0803%" height="15" fill="rgb(247,170,54)" fg:x="743" fg:w="1"/><text x="59.8808%" y="335.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (7 samples, 0.56%)</title><rect x="59.2295%" y="405" width="0.5618%" height="15" fill="rgb(236,204,33)" fg:x="738" fg:w="7"/><text x="59.4795%" y="415.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (4 samples, 0.32%)</title><rect x="59.4703%" y="389" width="0.3210%" height="15" fill="rgb(216,45,30)" fg:x="741" fg:w="4"/><text x="59.7203%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="59.4703%" y="373" width="0.3210%" height="15" fill="rgb(213,203,16)" fg:x="741" fg:w="4"/><text x="59.7203%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="59.7111%" y="357" width="0.0803%" height="15" fill="rgb(215,46,16)" fg:x="744" fg:w="1"/><text x="59.9611%" y="367.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="59.7111%" y="341" width="0.0803%" height="15" fill="rgb(217,162,46)" fg:x="744" fg:w="1"/><text x="59.9611%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="59.7111%" y="325" width="0.0803%" height="15" fill="rgb(224,189,20)" fg:x="744" fg:w="1"/><text x="59.9611%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.7111%" y="309" width="0.0803%" height="15" fill="rgb(232,35,51)" fg:x="744" fg:w="1"/><text x="59.9611%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="59.8716%" y="389" width="0.1605%" height="15" fill="rgb(243,221,46)" fg:x="746" fg:w="2"/><text x="60.1216%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="59.8716%" y="373" width="0.1605%" height="15" fill="rgb(248,16,16)" fg:x="746" fg:w="2"/><text x="60.1216%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.8716%" y="357" width="0.1605%" height="15" fill="rgb(220,168,13)" fg:x="746" fg:w="2"/><text x="60.1216%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.9518%" y="341" width="0.0803%" height="15" fill="rgb(243,102,39)" fg:x="747" fg:w="1"/><text x="60.2018%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.9518%" y="325" width="0.0803%" height="15" fill="rgb(245,82,32)" fg:x="747" fg:w="1"/><text x="60.2018%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.9518%" y="309" width="0.0803%" height="15" fill="rgb(230,164,19)" fg:x="747" fg:w="1"/><text x="60.2018%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.9518%" y="293" width="0.0803%" height="15" fill="rgb(221,9,41)" fg:x="747" fg:w="1"/><text x="60.2018%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.1124%" y="341" width="0.0803%" height="15" fill="rgb(216,93,0)" fg:x="749" fg:w="1"/><text x="60.3624%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="60.1926%" y="341" width="0.0803%" height="15" fill="rgb(235,113,9)" fg:x="750" fg:w="1"/><text x="60.4426%" y="351.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="60.2729%" y="341" width="0.0803%" height="15" fill="rgb(209,224,10)" fg:x="751" fg:w="1"/><text x="60.5229%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.3531%" y="309" width="0.0803%" height="15" fill="rgb(226,54,34)" fg:x="752" fg:w="1"/><text x="60.6031%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.3531%" y="293" width="0.0803%" height="15" fill="rgb(222,60,8)" fg:x="752" fg:w="1"/><text x="60.6031%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.3531%" y="277" width="0.0803%" height="15" fill="rgb(248,228,41)" fg:x="752" fg:w="1"/><text x="60.6031%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.3531%" y="261" width="0.0803%" height="15" fill="rgb(226,31,32)" fg:x="752" fg:w="1"/><text x="60.6031%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (5 samples, 0.40%)</title><rect x="60.1124%" y="357" width="0.4013%" height="15" fill="rgb(242,132,49)" fg:x="749" fg:w="5"/><text x="60.3624%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="60.3531%" y="341" width="0.1605%" height="15" fill="rgb(224,194,19)" fg:x="752" fg:w="2"/><text x="60.6031%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="60.3531%" y="325" width="0.1605%" height="15" fill="rgb(232,200,51)" fg:x="752" fg:w="2"/><text x="60.6031%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.4334%" y="309" width="0.0803%" height="15" fill="rgb(235,60,46)" fg:x="753" fg:w="1"/><text x="60.6834%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.4334%" y="293" width="0.0803%" height="15" fill="rgb(240,109,52)" fg:x="753" fg:w="1"/><text x="60.6834%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.4334%" y="277" width="0.0803%" height="15" fill="rgb(215,78,37)" fg:x="753" fg:w="1"/><text x="60.6834%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.4334%" y="261" width="0.0803%" height="15" fill="rgb(225,141,7)" fg:x="753" fg:w="1"/><text x="60.6834%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.4334%" y="245" width="0.0803%" height="15" fill="rgb(216,102,54)" fg:x="753" fg:w="1"/><text x="60.6834%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="60.4334%" y="229" width="0.0803%" height="15" fill="rgb(238,143,13)" fg:x="753" fg:w="1"/><text x="60.6834%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.5136%" y="309" width="0.1605%" height="15" fill="rgb(219,45,51)" fg:x="754" fg:w="2"/><text x="60.7636%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.5136%" y="293" width="0.1605%" height="15" fill="rgb(242,105,46)" fg:x="754" fg:w="2"/><text x="60.7636%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.5136%" y="277" width="0.1605%" height="15" fill="rgb(206,154,49)" fg:x="754" fg:w="2"/><text x="60.7636%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.5939%" y="261" width="0.0803%" height="15" fill="rgb(239,215,4)" fg:x="755" fg:w="1"/><text x="60.8439%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.6742%" y="245" width="0.0803%" height="15" fill="rgb(238,82,17)" fg:x="756" fg:w="1"/><text x="60.9242%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="60.6742%" y="229" width="0.0803%" height="15" fill="rgb(242,49,30)" fg:x="756" fg:w="1"/><text x="60.9242%" y="239.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (13 samples, 1.04%)</title><rect x="59.7913%" y="405" width="1.0433%" height="15" fill="rgb(248,5,16)" fg:x="745" fg:w="13"/><text x="60.0413%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (10 samples, 0.80%)</title><rect x="60.0321%" y="389" width="0.8026%" height="15" fill="rgb(237,138,32)" fg:x="748" fg:w="10"/><text x="60.2821%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (10 samples, 0.80%)</title><rect x="60.0321%" y="373" width="0.8026%" height="15" fill="rgb(235,79,45)" fg:x="748" fg:w="10"/><text x="60.2821%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="60.5136%" y="357" width="0.3210%" height="15" fill="rgb(213,105,25)" fg:x="754" fg:w="4"/><text x="60.7636%" y="367.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="60.5136%" y="341" width="0.3210%" height="15" fill="rgb(251,131,7)" fg:x="754" fg:w="4"/><text x="60.7636%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="60.5136%" y="325" width="0.3210%" height="15" fill="rgb(211,155,7)" fg:x="754" fg:w="4"/><text x="60.7636%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.6742%" y="309" width="0.1605%" height="15" fill="rgb(243,70,15)" fg:x="756" fg:w="2"/><text x="60.9242%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.6742%" y="293" width="0.1605%" height="15" fill="rgb(215,171,2)" fg:x="756" fg:w="2"/><text x="60.9242%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.6742%" y="277" width="0.1605%" height="15" fill="rgb(244,121,35)" fg:x="756" fg:w="2"/><text x="60.9242%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.6742%" y="261" width="0.1605%" height="15" fill="rgb(249,147,17)" fg:x="756" fg:w="2"/><text x="60.9242%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.7544%" y="245" width="0.0803%" height="15" fill="rgb(241,193,52)" fg:x="757" fg:w="1"/><text x="61.0044%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.9149%" y="373" width="0.1605%" height="15" fill="rgb(217,159,39)" fg:x="759" fg:w="2"/><text x="61.1649%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.9952%" y="357" width="0.0803%" height="15" fill="rgb(248,110,0)" fg:x="760" fg:w="1"/><text x="61.2452%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="60.9149%" y="389" width="0.2408%" height="15" fill="rgb(233,227,0)" fg:x="759" fg:w="3"/><text x="61.1649%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.0754%" y="373" width="0.0803%" height="15" fill="rgb(252,55,2)" fg:x="761" fg:w="1"/><text x="61.3254%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0754%" y="357" width="0.0803%" height="15" fill="rgb(224,194,24)" fg:x="761" fg:w="1"/><text x="61.3254%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.0754%" y="341" width="0.0803%" height="15" fill="rgb(247,5,33)" fg:x="761" fg:w="1"/><text x="61.3254%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0754%" y="325" width="0.0803%" height="15" fill="rgb(242,66,47)" fg:x="761" fg:w="1"/><text x="61.3254%" y="335.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (6 samples, 0.48%)</title><rect x="60.8347%" y="405" width="0.4815%" height="15" fill="rgb(213,107,12)" fg:x="758" fg:w="6"/><text x="61.0847%" y="415.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (2 samples, 0.16%)</title><rect x="61.1557%" y="389" width="0.1605%" height="15" fill="rgb(206,131,1)" fg:x="762" fg:w="2"/><text x="61.4057%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.4767%" y="373" width="0.1605%" height="15" fill="rgb(214,9,36)" fg:x="766" fg:w="2"/><text x="61.7267%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.4767%" y="357" width="0.1605%" height="15" fill="rgb(251,215,18)" fg:x="766" fg:w="2"/><text x="61.7267%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="61.4767%" y="341" width="0.1605%" height="15" fill="rgb(251,64,9)" fg:x="766" fg:w="2"/><text x="61.7267%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="61.4767%" y="325" width="0.1605%" height="15" fill="rgb(235,68,21)" fg:x="766" fg:w="2"/><text x="61.7267%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="61.4767%" y="309" width="0.1605%" height="15" fill="rgb(240,69,38)" fg:x="766" fg:w="2"/><text x="61.7267%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="61.4767%" y="293" width="0.1605%" height="15" fill="rgb(231,18,27)" fg:x="766" fg:w="2"/><text x="61.7267%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="61.4767%" y="277" width="0.1605%" height="15" fill="rgb(215,154,25)" fg:x="766" fg:w="2"/><text x="61.7267%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="61.4767%" y="261" width="0.1605%" height="15" fill="rgb(224,33,46)" fg:x="766" fg:w="2"/><text x="61.7267%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="61.4767%" y="245" width="0.1605%" height="15" fill="rgb(248,191,53)" fg:x="766" fg:w="2"/><text x="61.7267%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="61.4767%" y="229" width="0.1605%" height="15" fill="rgb(231,3,37)" fg:x="766" fg:w="2"/><text x="61.7267%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="61.4767%" y="213" width="0.1605%" height="15" fill="rgb(209,152,2)" fg:x="766" fg:w="2"/><text x="61.7267%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="61.4767%" y="197" width="0.1605%" height="15" fill="rgb(212,208,43)" fg:x="766" fg:w="2"/><text x="61.7267%" y="207.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="61.4767%" y="181" width="0.1605%" height="15" fill="rgb(208,60,49)" fg:x="766" fg:w="2"/><text x="61.7267%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="61.4767%" y="165" width="0.1605%" height="15" fill="rgb(245,135,6)" fg:x="766" fg:w="2"/><text x="61.7267%" y="175.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (6 samples, 0.48%)</title><rect x="61.3965%" y="389" width="0.4815%" height="15" fill="rgb(243,86,23)" fg:x="765" fg:w="6"/><text x="61.6465%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="61.6372%" y="373" width="0.2408%" height="15" fill="rgb(223,7,20)" fg:x="768" fg:w="3"/><text x="61.8872%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="61.6372%" y="357" width="0.2408%" height="15" fill="rgb(212,182,17)" fg:x="768" fg:w="3"/><text x="61.8872%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="61.6372%" y="341" width="0.2408%" height="15" fill="rgb(237,94,50)" fg:x="768" fg:w="3"/><text x="61.8872%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="61.6372%" y="325" width="0.2408%" height="15" fill="rgb(232,185,44)" fg:x="768" fg:w="3"/><text x="61.8872%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.7978%" y="309" width="0.0803%" height="15" fill="rgb(205,50,36)" fg:x="770" fg:w="1"/><text x="62.0478%" y="319.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (615 samples, 49.36%)</title><rect x="12.7608%" y="437" width="49.3579%" height="15" fill="rgb(252,32,32)" fg:x="159" fg:w="615"/><text x="13.0108%" y="447.50">&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::location::change_location (46 samples, 3.69%)</title><rect x="58.4270%" y="421" width="3.6918%" height="15" fill="rgb(241,123,33)" fg:x="728" fg:w="46"/><text x="58.6770%" y="431.50">plug..</text></g><g><title>plugins_core::location::Location::set (10 samples, 0.80%)</title><rect x="61.3162%" y="405" width="0.8026%" height="15" fill="rgb(212,140,16)" fg:x="764" fg:w="10"/><text x="61.5662%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="61.8780%" y="389" width="0.2408%" height="15" fill="rgb(247,132,5)" fg:x="771" fg:w="3"/><text x="62.1280%" y="399.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (3 samples, 0.24%)</title><rect x="61.8780%" y="373" width="0.2408%" height="15" fill="rgb(209,137,38)" fg:x="771" fg:w="3"/><text x="62.1280%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="61.8780%" y="357" width="0.2408%" height="15" fill="rgb(248,32,42)" fg:x="771" fg:w="3"/><text x="62.1280%" y="367.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (3 samples, 0.24%)</title><rect x="61.8780%" y="341" width="0.2408%" height="15" fill="rgb(216,188,40)" fg:x="771" fg:w="3"/><text x="62.1280%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="61.9583%" y="325" width="0.1605%" height="15" fill="rgb(209,127,53)" fg:x="772" fg:w="2"/><text x="62.2083%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="61.9583%" y="309" width="0.1605%" height="15" fill="rgb(254,162,9)" fg:x="772" fg:w="2"/><text x="62.2083%" y="319.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="62.1188%" y="405" width="0.1605%" height="15" fill="rgb(219,183,10)" fg:x="774" fg:w="2"/><text x="62.3688%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="62.1188%" y="389" width="0.1605%" height="15" fill="rgb(217,192,21)" fg:x="774" fg:w="2"/><text x="62.3688%" y="399.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="62.1188%" y="373" width="0.1605%" height="15" fill="rgb(251,89,27)" fg:x="774" fg:w="2"/><text x="62.3688%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="62.1188%" y="357" width="0.1605%" height="15" fill="rgb(253,55,28)" fg:x="774" fg:w="2"/><text x="62.3688%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="62.1188%" y="341" width="0.1605%" height="15" fill="rgb(216,159,8)" fg:x="774" fg:w="2"/><text x="62.3688%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="62.1188%" y="325" width="0.1605%" height="15" fill="rgb(231,228,44)" fg:x="774" fg:w="2"/><text x="62.3688%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.1990%" y="309" width="0.0803%" height="15" fill="rgb(247,34,48)" fg:x="775" fg:w="1"/><text x="62.4490%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.4398%" y="293" width="0.0803%" height="15" fill="rgb(247,222,18)" fg:x="778" fg:w="1"/><text x="62.6898%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.32%)</title><rect x="62.2793%" y="405" width="0.3210%" height="15" fill="rgb(227,49,4)" fg:x="776" fg:w="4"/><text x="62.5293%" y="415.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="62.2793%" y="389" width="0.3210%" height="15" fill="rgb(219,189,53)" fg:x="776" fg:w="4"/><text x="62.5293%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="62.2793%" y="373" width="0.3210%" height="15" fill="rgb(241,160,53)" fg:x="776" fg:w="4"/><text x="62.5293%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.32%)</title><rect x="62.2793%" y="357" width="0.3210%" height="15" fill="rgb(227,115,4)" fg:x="776" fg:w="4"/><text x="62.5293%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="62.2793%" y="341" width="0.3210%" height="15" fill="rgb(215,28,28)" fg:x="776" fg:w="4"/><text x="62.5293%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.32%)</title><rect x="62.2793%" y="325" width="0.3210%" height="15" fill="rgb(237,143,40)" fg:x="776" fg:w="4"/><text x="62.5293%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="62.2793%" y="309" width="0.3210%" height="15" fill="rgb(205,107,24)" fg:x="776" fg:w="4"/><text x="62.5293%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.5201%" y="293" width="0.0803%" height="15" fill="rgb(209,112,35)" fg:x="779" fg:w="1"/><text x="62.7701%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5201%" y="277" width="0.0803%" height="15" fill="rgb(206,135,5)" fg:x="779" fg:w="1"/><text x="62.7701%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.6003%" y="229" width="0.0803%" height="15" fill="rgb(227,217,38)" fg:x="780" fg:w="1"/><text x="62.8503%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.6003%" y="213" width="0.0803%" height="15" fill="rgb(205,0,41)" fg:x="780" fg:w="1"/><text x="62.8503%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.6003%" y="197" width="0.0803%" height="15" fill="rgb(220,20,40)" fg:x="780" fg:w="1"/><text x="62.8503%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.6003%" y="181" width="0.0803%" height="15" fill="rgb(216,145,3)" fg:x="780" fg:w="1"/><text x="62.8503%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.6003%" y="165" width="0.0803%" height="15" fill="rgb(207,130,51)" fg:x="780" fg:w="1"/><text x="62.8503%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.6003%" y="149" width="0.0803%" height="15" fill="rgb(252,93,13)" fg:x="780" fg:w="1"/><text x="62.8503%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.6003%" y="133" width="0.0803%" height="15" fill="rgb(210,105,15)" fg:x="780" fg:w="1"/><text x="62.8503%" y="143.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="62.6003%" y="405" width="0.1605%" height="15" fill="rgb(212,126,31)" fg:x="780" fg:w="2"/><text x="62.8503%" y="415.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="62.6003%" y="389" width="0.1605%" height="15" fill="rgb(241,167,46)" fg:x="780" fg:w="2"/><text x="62.8503%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="62.6003%" y="373" width="0.1605%" height="15" fill="rgb(217,143,19)" fg:x="780" fg:w="2"/><text x="62.8503%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="62.6003%" y="357" width="0.1605%" height="15" fill="rgb(235,117,33)" fg:x="780" fg:w="2"/><text x="62.8503%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="62.6003%" y="341" width="0.1605%" height="15" fill="rgb(247,95,6)" fg:x="780" fg:w="2"/><text x="62.8503%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="62.6003%" y="325" width="0.1605%" height="15" fill="rgb(243,206,43)" fg:x="780" fg:w="2"/><text x="62.8503%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="62.6003%" y="309" width="0.1605%" height="15" fill="rgb(229,65,54)" fg:x="780" fg:w="2"/><text x="62.8503%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="62.6003%" y="293" width="0.1605%" height="15" fill="rgb(247,137,34)" fg:x="780" fg:w="2"/><text x="62.8503%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="62.6003%" y="277" width="0.1605%" height="15" fill="rgb(245,174,44)" fg:x="780" fg:w="2"/><text x="62.8503%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="62.6003%" y="261" width="0.1605%" height="15" fill="rgb(223,64,15)" fg:x="780" fg:w="2"/><text x="62.8503%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="62.6003%" y="245" width="0.1605%" height="15" fill="rgb(243,153,36)" fg:x="780" fg:w="2"/><text x="62.8503%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="62.6806%" y="229" width="0.0803%" height="15" fill="rgb(252,23,4)" fg:x="781" fg:w="1"/><text x="62.9306%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="62.6806%" y="213" width="0.0803%" height="15" fill="rgb(209,132,13)" fg:x="781" fg:w="1"/><text x="62.9306%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7608%" y="341" width="0.0803%" height="15" fill="rgb(209,196,21)" fg:x="782" fg:w="1"/><text x="63.0108%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7608%" y="325" width="0.0803%" height="15" fill="rgb(252,197,1)" fg:x="782" fg:w="1"/><text x="63.0108%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.8411%" y="277" width="0.0803%" height="15" fill="rgb(229,42,46)" fg:x="783" fg:w="1"/><text x="63.0911%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.8411%" y="261" width="0.0803%" height="15" fill="rgb(219,85,8)" fg:x="783" fg:w="1"/><text x="63.0911%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.9213%" y="277" width="0.0803%" height="15" fill="rgb(223,185,14)" fg:x="784" fg:w="1"/><text x="63.1713%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.32%)</title><rect x="62.7608%" y="405" width="0.3210%" height="15" fill="rgb(217,196,18)" fg:x="782" fg:w="4"/><text x="63.0108%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="62.7608%" y="389" width="0.3210%" height="15" fill="rgb(220,122,37)" fg:x="782" fg:w="4"/><text x="63.0108%" y="399.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="62.7608%" y="373" width="0.3210%" height="15" fill="rgb(236,135,33)" fg:x="782" fg:w="4"/><text x="63.0108%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="62.7608%" y="357" width="0.3210%" height="15" fill="rgb(222,86,54)" fg:x="782" fg:w="4"/><text x="63.0108%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="62.8411%" y="341" width="0.2408%" height="15" fill="rgb(227,42,22)" fg:x="783" fg:w="3"/><text x="63.0911%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="62.8411%" y="325" width="0.2408%" height="15" fill="rgb(243,101,27)" fg:x="783" fg:w="3"/><text x="63.0911%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.24%)</title><rect x="62.8411%" y="309" width="0.2408%" height="15" fill="rgb(229,100,8)" fg:x="783" fg:w="3"/><text x="63.0911%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="62.8411%" y="293" width="0.2408%" height="15" fill="rgb(252,68,10)" fg:x="783" fg:w="3"/><text x="63.0911%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.0016%" y="277" width="0.0803%" height="15" fill="rgb(219,19,31)" fg:x="785" fg:w="1"/><text x="63.2516%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.0016%" y="261" width="0.0803%" height="15" fill="rgb(246,150,44)" fg:x="785" fg:w="1"/><text x="63.2516%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="63.0819%" y="325" width="0.1605%" height="15" fill="rgb(211,14,39)" fg:x="786" fg:w="2"/><text x="63.3319%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="63.0819%" y="309" width="0.1605%" height="15" fill="rgb(221,98,29)" fg:x="786" fg:w="2"/><text x="63.3319%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="63.0819%" y="293" width="0.1605%" height="15" fill="rgb(221,70,26)" fg:x="786" fg:w="2"/><text x="63.3319%" y="303.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="63.0819%" y="277" width="0.1605%" height="15" fill="rgb(236,146,30)" fg:x="786" fg:w="2"/><text x="63.3319%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="63.0819%" y="261" width="0.1605%" height="15" fill="rgb(226,94,34)" fg:x="786" fg:w="2"/><text x="63.3319%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="63.0819%" y="245" width="0.1605%" height="15" fill="rgb(248,132,21)" fg:x="786" fg:w="2"/><text x="63.3319%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="63.0819%" y="229" width="0.1605%" height="15" fill="rgb(245,43,50)" fg:x="786" fg:w="2"/><text x="63.3319%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="63.2424%" y="309" width="0.0803%" height="15" fill="rgb(245,132,31)" fg:x="788" fg:w="1"/><text x="63.4924%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="63.2424%" y="293" width="0.0803%" height="15" fill="rgb(230,171,4)" fg:x="788" fg:w="1"/><text x="63.4924%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.2424%" y="277" width="0.0803%" height="15" fill="rgb(235,6,45)" fg:x="788" fg:w="1"/><text x="63.4924%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.4831%" y="245" width="0.0803%" height="15" fill="rgb(220,80,28)" fg:x="791" fg:w="1"/><text x="63.7331%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.88%)</title><rect x="63.4029%" y="261" width="0.8828%" height="15" fill="rgb(242,171,9)" fg:x="790" fg:w="11"/><text x="63.6529%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.72%)</title><rect x="63.5634%" y="245" width="0.7223%" height="15" fill="rgb(214,135,29)" fg:x="792" fg:w="9"/><text x="63.8134%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.2055%" y="229" width="0.0803%" height="15" fill="rgb(221,229,16)" fg:x="800" fg:w="1"/><text x="64.4555%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="64.2857%" y="245" width="0.1605%" height="15" fill="rgb(253,59,46)" fg:x="801" fg:w="2"/><text x="64.5357%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="64.2857%" y="261" width="0.2408%" height="15" fill="rgb(250,147,20)" fg:x="801" fg:w="3"/><text x="64.5357%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="64.4462%" y="245" width="0.0803%" height="15" fill="rgb(236,64,48)" fg:x="803" fg:w="1"/><text x="64.6962%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="64.6870%" y="197" width="0.0803%" height="15" fill="rgb(240,37,42)" fg:x="806" fg:w="1"/><text x="64.9370%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="64.7673%" y="197" width="0.0803%" height="15" fill="rgb(220,41,50)" fg:x="807" fg:w="1"/><text x="65.0173%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="64.7673%" y="181" width="0.0803%" height="15" fill="rgb(216,51,14)" fg:x="807" fg:w="1"/><text x="65.0173%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.8475%" y="181" width="0.0803%" height="15" fill="rgb(215,83,10)" fg:x="808" fg:w="1"/><text x="65.0975%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.8475%" y="165" width="0.0803%" height="15" fill="rgb(206,144,17)" fg:x="808" fg:w="1"/><text x="65.0975%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (27 samples, 2.17%)</title><rect x="64.8475%" y="197" width="2.1669%" height="15" fill="rgb(219,196,37)" fg:x="808" fg:w="27"/><text x="65.0975%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (26 samples, 2.09%)</title><rect x="64.9278%" y="181" width="2.0867%" height="15" fill="rgb(226,135,26)" fg:x="809" fg:w="26"/><text x="65.1778%" y="191.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (26 samples, 2.09%)</title><rect x="64.9278%" y="165" width="2.0867%" height="15" fill="rgb(237,195,40)" fg:x="809" fg:w="26"/><text x="65.1778%" y="175.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="67.0144%" y="197" width="0.1605%" height="15" fill="rgb(228,182,42)" fg:x="835" fg:w="2"/><text x="67.2644%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 2.73%)</title><rect x="64.5265%" y="245" width="2.7287%" height="15" fill="rgb(224,135,50)" fg:x="804" fg:w="34"/><text x="64.7765%" y="255.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (34 samples, 2.73%)</title><rect x="64.5265%" y="229" width="2.7287%" height="15" fill="rgb(236,215,34)" fg:x="804" fg:w="34"/><text x="64.7765%" y="239.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (34 samples, 2.73%)</title><rect x="64.5265%" y="213" width="2.7287%" height="15" fill="rgb(244,213,27)" fg:x="804" fg:w="34"/><text x="64.7765%" y="223.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="67.1750%" y="197" width="0.0803%" height="15" fill="rgb(233,37,53)" fg:x="837" fg:w="1"/><text x="67.4250%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.1750%" y="181" width="0.0803%" height="15" fill="rgb(222,132,14)" fg:x="837" fg:w="1"/><text x="67.4250%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.1750%" y="165" width="0.0803%" height="15" fill="rgb(219,202,29)" fg:x="837" fg:w="1"/><text x="67.4250%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="67.4157%" y="229" width="0.0803%" height="15" fill="rgb(226,157,39)" fg:x="840" fg:w="1"/><text x="67.6657%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.5762%" y="213" width="0.0803%" height="15" fill="rgb(235,213,2)" fg:x="842" fg:w="1"/><text x="67.8262%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.5762%" y="197" width="0.0803%" height="15" fill="rgb(250,121,2)" fg:x="842" fg:w="1"/><text x="67.8262%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.5762%" y="181" width="0.0803%" height="15" fill="rgb(206,192,33)" fg:x="842" fg:w="1"/><text x="67.8262%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="67.4960%" y="229" width="0.2408%" height="15" fill="rgb(240,161,6)" fg:x="841" fg:w="3"/><text x="67.7460%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.6565%" y="213" width="0.0803%" height="15" fill="rgb(246,53,30)" fg:x="843" fg:w="1"/><text x="67.9065%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.6565%" y="197" width="0.0803%" height="15" fill="rgb(219,123,43)" fg:x="843" fg:w="1"/><text x="67.9065%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6565%" y="181" width="0.0803%" height="15" fill="rgb(236,53,49)" fg:x="843" fg:w="1"/><text x="67.9065%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.7368%" y="213" width="0.0803%" height="15" fill="rgb(241,156,1)" fg:x="844" fg:w="1"/><text x="67.9868%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="67.2552%" y="245" width="0.6421%" height="15" fill="rgb(209,73,26)" fg:x="838" fg:w="8"/><text x="67.5052%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="67.7368%" y="229" width="0.1605%" height="15" fill="rgb(206,114,3)" fg:x="844" fg:w="2"/><text x="67.9868%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.8170%" y="213" width="0.0803%" height="15" fill="rgb(230,214,9)" fg:x="845" fg:w="1"/><text x="68.0670%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="67.8170%" y="197" width="0.0803%" height="15" fill="rgb(240,184,46)" fg:x="845" fg:w="1"/><text x="68.0670%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (43 samples, 3.45%)</title><rect x="64.5265%" y="261" width="3.4510%" height="15" fill="rgb(242,169,54)" fg:x="804" fg:w="43"/><text x="64.7765%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="67.8973%" y="245" width="0.0803%" height="15" fill="rgb(207,168,50)" fg:x="846" fg:w="1"/><text x="68.1473%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="67.8973%" y="229" width="0.0803%" height="15" fill="rgb(240,114,2)" fg:x="846" fg:w="1"/><text x="68.1473%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.8973%" y="213" width="0.0803%" height="15" fill="rgb(211,17,40)" fg:x="846" fg:w="1"/><text x="68.1473%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (59 samples, 4.74%)</title><rect x="63.3226%" y="277" width="4.7352%" height="15" fill="rgb(235,97,36)" fg:x="789" fg:w="59"/><text x="63.5726%" y="287.50">regex_..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="67.9775%" y="261" width="0.0803%" height="15" fill="rgb(208,164,11)" fg:x="847" fg:w="1"/><text x="68.2275%" y="271.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="67.9775%" y="245" width="0.0803%" height="15" fill="rgb(242,11,17)" fg:x="847" fg:w="1"/><text x="68.2275%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="68.1380%" y="213" width="0.0803%" height="15" fill="rgb(215,86,33)" fg:x="849" fg:w="1"/><text x="68.3880%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (3 samples, 0.24%)</title><rect x="68.0578%" y="229" width="0.2408%" height="15" fill="rgb(245,185,28)" fg:x="848" fg:w="3"/><text x="68.3078%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek (1 samples, 0.08%)</title><rect x="68.2183%" y="213" width="0.0803%" height="15" fill="rgb(231,89,42)" fg:x="850" fg:w="1"/><text x="68.4683%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="68.0578%" y="277" width="0.4013%" height="15" fill="rgb(210,18,47)" fg:x="848" fg:w="5"/><text x="68.3078%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="68.0578%" y="261" width="0.4013%" height="15" fill="rgb(214,84,8)" fg:x="848" fg:w="5"/><text x="68.3078%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="68.0578%" y="245" width="0.4013%" height="15" fill="rgb(214,222,23)" fg:x="848" fg:w="5"/><text x="68.3078%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="68.2986%" y="229" width="0.1605%" height="15" fill="rgb(213,104,21)" fg:x="851" fg:w="2"/><text x="68.5486%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="68.2986%" y="213" width="0.1605%" height="15" fill="rgb(238,138,6)" fg:x="851" fg:w="2"/><text x="68.5486%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="68.2986%" y="197" width="0.1605%" height="15" fill="rgb(205,167,50)" fg:x="851" fg:w="2"/><text x="68.5486%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="68.2986%" y="181" width="0.1605%" height="15" fill="rgb(230,105,27)" fg:x="851" fg:w="2"/><text x="68.5486%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.4591%" y="229" width="0.0803%" height="15" fill="rgb(222,97,48)" fg:x="853" fg:w="1"/><text x="68.7091%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="68.4591%" y="245" width="0.1605%" height="15" fill="rgb(222,197,14)" fg:x="853" fg:w="2"/><text x="68.7091%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="68.5393%" y="229" width="0.0803%" height="15" fill="rgb(210,105,47)" fg:x="854" fg:w="1"/><text x="68.7893%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="68.5393%" y="213" width="0.0803%" height="15" fill="rgb(238,158,19)" fg:x="854" fg:w="1"/><text x="68.7893%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (68 samples, 5.46%)</title><rect x="63.2424%" y="325" width="5.4575%" height="15" fill="rgb(226,176,23)" fg:x="788" fg:w="68"/><text x="63.4924%" y="335.50">&lt;regex:..</text></g><g><title>regex::builders::Builder::build_one_string (67 samples, 5.38%)</title><rect x="63.3226%" y="309" width="5.3772%" height="15" fill="rgb(208,79,31)" fg:x="789" fg:w="67"/><text x="63.5726%" y="319.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (67 samples, 5.38%)</title><rect x="63.3226%" y="293" width="5.3772%" height="15" fill="rgb(221,154,21)" fg:x="789" fg:w="67"/><text x="63.5726%" y="303.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="68.4591%" y="277" width="0.2408%" height="15" fill="rgb(213,61,41)" fg:x="853" fg:w="3"/><text x="68.7091%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="68.4591%" y="261" width="0.2408%" height="15" fill="rgb(215,28,33)" fg:x="853" fg:w="3"/><text x="68.7091%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6196%" y="245" width="0.0803%" height="15" fill="rgb(231,139,26)" fg:x="855" fg:w="1"/><text x="68.8696%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="68.6998%" y="293" width="0.0803%" height="15" fill="rgb(232,159,16)" fg:x="856" fg:w="1"/><text x="68.9498%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="68.6998%" y="277" width="0.0803%" height="15" fill="rgb(233,80,10)" fg:x="856" fg:w="1"/><text x="68.9498%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6998%" y="261" width="0.0803%" height="15" fill="rgb(208,147,29)" fg:x="856" fg:w="1"/><text x="68.9498%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="68.6998%" y="325" width="0.1605%" height="15" fill="rgb(213,10,12)" fg:x="856" fg:w="2"/><text x="68.9498%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="68.6998%" y="309" width="0.1605%" height="15" fill="rgb(231,218,13)" fg:x="856" fg:w="2"/><text x="68.9498%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="68.7801%" y="293" width="0.0803%" height="15" fill="rgb(244,199,44)" fg:x="857" fg:w="1"/><text x="69.0301%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="68.7801%" y="277" width="0.0803%" height="15" fill="rgb(240,144,53)" fg:x="857" fg:w="1"/><text x="69.0301%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="68.8604%" y="261" width="0.3210%" height="15" fill="rgb(223,57,28)" fg:x="858" fg:w="4"/><text x="69.1104%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="69.1011%" y="245" width="0.0803%" height="15" fill="rgb(213,134,38)" fg:x="861" fg:w="1"/><text x="69.3511%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (77 samples, 6.18%)</title><rect x="63.0819%" y="341" width="6.1798%" height="15" fill="rgb(251,182,42)" fg:x="786" fg:w="77"/><text x="63.3319%" y="351.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="68.8604%" y="325" width="0.4013%" height="15" fill="rgb(229,93,13)" fg:x="858" fg:w="5"/><text x="69.1104%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="68.8604%" y="309" width="0.4013%" height="15" fill="rgb(234,171,3)" fg:x="858" fg:w="5"/><text x="69.1104%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="68.8604%" y="293" width="0.4013%" height="15" fill="rgb(241,105,32)" fg:x="858" fg:w="5"/><text x="69.1104%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="68.8604%" y="277" width="0.4013%" height="15" fill="rgb(221,66,3)" fg:x="858" fg:w="5"/><text x="69.1104%" y="287.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="69.1814%" y="261" width="0.0803%" height="15" fill="rgb(248,155,29)" fg:x="862" fg:w="1"/><text x="69.4314%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.1814%" y="245" width="0.0803%" height="15" fill="rgb(231,31,5)" fg:x="862" fg:w="1"/><text x="69.4314%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.1814%" y="229" width="0.0803%" height="15" fill="rgb(213,188,31)" fg:x="862" fg:w="1"/><text x="69.4314%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.1814%" y="213" width="0.0803%" height="15" fill="rgb(212,104,33)" fg:x="862" fg:w="1"/><text x="69.4314%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="69.2616%" y="277" width="0.0803%" height="15" fill="rgb(254,77,51)" fg:x="863" fg:w="1"/><text x="69.5116%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.2616%" y="261" width="0.0803%" height="15" fill="rgb(234,39,26)" fg:x="863" fg:w="1"/><text x="69.5116%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="69.2616%" y="245" width="0.0803%" height="15" fill="rgb(208,88,36)" fg:x="863" fg:w="1"/><text x="69.5116%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="69.4222%" y="261" width="0.3210%" height="15" fill="rgb(243,222,10)" fg:x="865" fg:w="4"/><text x="69.6722%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="69.4222%" y="245" width="0.3210%" height="15" fill="rgb(218,133,52)" fg:x="865" fg:w="4"/><text x="69.6722%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.6629%" y="229" width="0.0803%" height="15" fill="rgb(222,25,26)" fg:x="868" fg:w="1"/><text x="69.9129%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="69.7432%" y="261" width="0.0803%" height="15" fill="rgb(243,174,24)" fg:x="869" fg:w="1"/><text x="69.9932%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="69.7432%" y="245" width="0.0803%" height="15" fill="rgb(233,188,52)" fg:x="869" fg:w="1"/><text x="69.9932%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="70.1445%" y="229" width="0.1605%" height="15" fill="rgb(208,89,14)" fg:x="874" fg:w="2"/><text x="70.3945%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.2247%" y="213" width="0.0803%" height="15" fill="rgb(205,204,21)" fg:x="875" fg:w="1"/><text x="70.4747%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.2247%" y="197" width="0.0803%" height="15" fill="rgb(246,39,28)" fg:x="875" fg:w="1"/><text x="70.4747%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="70.2247%" y="181" width="0.0803%" height="15" fill="rgb(235,71,19)" fg:x="875" fg:w="1"/><text x="70.4747%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="70.3050%" y="229" width="0.2408%" height="15" fill="rgb(211,62,39)" fg:x="876" fg:w="3"/><text x="70.5550%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="70.4655%" y="213" width="0.0803%" height="15" fill="rgb(246,118,20)" fg:x="878" fg:w="1"/><text x="70.7155%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="70.4655%" y="197" width="0.0803%" height="15" fill="rgb(230,82,12)" fg:x="878" fg:w="1"/><text x="70.7155%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (13 samples, 1.04%)</title><rect x="69.8234%" y="261" width="1.0433%" height="15" fill="rgb(205,212,34)" fg:x="870" fg:w="13"/><text x="70.0734%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (13 samples, 1.04%)</title><rect x="69.8234%" y="245" width="1.0433%" height="15" fill="rgb(239,90,1)" fg:x="870" fg:w="13"/><text x="70.0734%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="70.5457%" y="229" width="0.3210%" height="15" fill="rgb(225,198,50)" fg:x="879" fg:w="4"/><text x="70.7957%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="70.5457%" y="213" width="0.3210%" height="15" fill="rgb(227,208,48)" fg:x="879" fg:w="4"/><text x="70.7957%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="70.5457%" y="197" width="0.3210%" height="15" fill="rgb(238,134,41)" fg:x="879" fg:w="4"/><text x="70.7957%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="70.8668%" y="213" width="0.0803%" height="15" fill="rgb(241,58,39)" fg:x="883" fg:w="1"/><text x="71.1168%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="70.8668%" y="197" width="0.0803%" height="15" fill="rgb(214,126,4)" fg:x="883" fg:w="1"/><text x="71.1168%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.8668%" y="181" width="0.0803%" height="15" fill="rgb(235,149,4)" fg:x="883" fg:w="1"/><text x="71.1168%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8668%" y="165" width="0.0803%" height="15" fill="rgb(236,59,29)" fg:x="883" fg:w="1"/><text x="71.1168%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.1878%" y="149" width="0.0803%" height="15" fill="rgb(246,11,33)" fg:x="887" fg:w="1"/><text x="71.4378%" y="159.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="71.3483%" y="101" width="0.0803%" height="15" fill="rgb(232,180,35)" fg:x="889" fg:w="1"/><text x="71.5983%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="71.3483%" y="85" width="0.0803%" height="15" fill="rgb(220,35,37)" fg:x="889" fg:w="1"/><text x="71.5983%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="71.2681%" y="149" width="0.2408%" height="15" fill="rgb(238,107,48)" fg:x="888" fg:w="3"/><text x="71.5181%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="71.3483%" y="133" width="0.1605%" height="15" fill="rgb(205,65,21)" fg:x="889" fg:w="2"/><text x="71.5983%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="71.3483%" y="117" width="0.1605%" height="15" fill="rgb(246,138,48)" fg:x="889" fg:w="2"/><text x="71.5983%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.4286%" y="101" width="0.0803%" height="15" fill="rgb(209,220,47)" fg:x="890" fg:w="1"/><text x="71.6786%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="71.5088%" y="149" width="0.1605%" height="15" fill="rgb(222,162,49)" fg:x="891" fg:w="2"/><text x="71.7588%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.6693%" y="117" width="0.0803%" height="15" fill="rgb(243,123,11)" fg:x="893" fg:w="1"/><text x="71.9193%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.6693%" y="101" width="0.0803%" height="15" fill="rgb(221,229,41)" fg:x="893" fg:w="1"/><text x="71.9193%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.6693%" y="85" width="0.0803%" height="15" fill="rgb(216,68,4)" fg:x="893" fg:w="1"/><text x="71.9193%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="71.6693%" y="149" width="0.1605%" height="15" fill="rgb(207,88,35)" fg:x="893" fg:w="2"/><text x="71.9193%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="71.6693%" y="133" width="0.1605%" height="15" fill="rgb(252,2,5)" fg:x="893" fg:w="2"/><text x="71.9193%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="71.7496%" y="117" width="0.0803%" height="15" fill="rgb(209,173,7)" fg:x="894" fg:w="1"/><text x="71.9996%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (13 samples, 1.04%)</title><rect x="71.8299%" y="149" width="1.0433%" height="15" fill="rgb(210,198,52)" fg:x="895" fg:w="13"/><text x="72.0799%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (13 samples, 1.04%)</title><rect x="71.8299%" y="133" width="1.0433%" height="15" fill="rgb(228,152,32)" fg:x="895" fg:w="13"/><text x="72.0799%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (13 samples, 1.04%)</title><rect x="71.8299%" y="117" width="1.0433%" height="15" fill="rgb(249,98,29)" fg:x="895" fg:w="13"/><text x="72.0799%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 2.17%)</title><rect x="70.8668%" y="245" width="2.1669%" height="15" fill="rgb(205,148,48)" fg:x="883" fg:w="27"/><text x="71.1168%" y="255.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (27 samples, 2.17%)</title><rect x="70.8668%" y="229" width="2.1669%" height="15" fill="rgb(236,69,34)" fg:x="883" fg:w="27"/><text x="71.1168%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (26 samples, 2.09%)</title><rect x="70.9470%" y="213" width="2.0867%" height="15" fill="rgb(220,151,41)" fg:x="884" fg:w="26"/><text x="71.1970%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (26 samples, 2.09%)</title><rect x="70.9470%" y="197" width="2.0867%" height="15" fill="rgb(254,106,24)" fg:x="884" fg:w="26"/><text x="71.1970%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (26 samples, 2.09%)</title><rect x="70.9470%" y="181" width="2.0867%" height="15" fill="rgb(210,37,48)" fg:x="884" fg:w="26"/><text x="71.1970%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (26 samples, 2.09%)</title><rect x="70.9470%" y="165" width="2.0867%" height="15" fill="rgb(254,131,5)" fg:x="884" fg:w="26"/><text x="71.1970%" y="175.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="72.8732%" y="149" width="0.1605%" height="15" fill="rgb(216,55,41)" fg:x="908" fg:w="2"/><text x="73.1232%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.9535%" y="133" width="0.0803%" height="15" fill="rgb(250,35,31)" fg:x="909" fg:w="1"/><text x="73.2035%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.9535%" y="117" width="0.0803%" height="15" fill="rgb(207,124,33)" fg:x="909" fg:w="1"/><text x="73.2035%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.40%)</title><rect x="73.1942%" y="229" width="0.4013%" height="15" fill="rgb(249,175,17)" fg:x="912" fg:w="5"/><text x="73.4442%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="73.2745%" y="213" width="0.3210%" height="15" fill="rgb(224,175,39)" fg:x="913" fg:w="4"/><text x="73.5245%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="73.2745%" y="197" width="0.3210%" height="15" fill="rgb(208,67,49)" fg:x="913" fg:w="4"/><text x="73.5245%" y="207.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="73.2745%" y="181" width="0.3210%" height="15" fill="rgb(222,188,41)" fg:x="913" fg:w="4"/><text x="73.5245%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (35 samples, 2.81%)</title><rect x="70.8668%" y="261" width="2.8090%" height="15" fill="rgb(243,213,30)" fg:x="883" fg:w="35"/><text x="71.1168%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="73.0337%" y="245" width="0.6421%" height="15" fill="rgb(253,100,45)" fg:x="910" fg:w="8"/><text x="73.2837%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="73.5955%" y="229" width="0.0803%" height="15" fill="rgb(226,24,44)" fg:x="917" fg:w="1"/><text x="73.8455%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (55 samples, 4.41%)</title><rect x="69.3419%" y="277" width="4.4141%" height="15" fill="rgb(215,41,24)" fg:x="864" fg:w="55"/><text x="69.5919%" y="287.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="73.6758%" y="261" width="0.0803%" height="15" fill="rgb(254,53,33)" fg:x="918" fg:w="1"/><text x="73.9258%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="73.6758%" y="245" width="0.0803%" height="15" fill="rgb(242,103,10)" fg:x="918" fg:w="1"/><text x="73.9258%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="73.6758%" y="229" width="0.0803%" height="15" fill="rgb(246,29,21)" fg:x="918" fg:w="1"/><text x="73.9258%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="73.8363%" y="245" width="0.0803%" height="15" fill="rgb(251,154,1)" fg:x="920" fg:w="1"/><text x="74.0863%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="73.8363%" y="229" width="0.0803%" height="15" fill="rgb(254,212,26)" fg:x="920" fg:w="1"/><text x="74.0863%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="73.8363%" y="213" width="0.0803%" height="15" fill="rgb(251,187,46)" fg:x="920" fg:w="1"/><text x="74.0863%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="73.7560%" y="277" width="0.2408%" height="15" fill="rgb(224,208,14)" fg:x="919" fg:w="3"/><text x="74.0060%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="73.8363%" y="261" width="0.1605%" height="15" fill="rgb(222,176,26)" fg:x="920" fg:w="2"/><text x="74.0863%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="73.9165%" y="245" width="0.0803%" height="15" fill="rgb(241,219,52)" fg:x="921" fg:w="1"/><text x="74.1665%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="73.9165%" y="229" width="0.0803%" height="15" fill="rgb(252,198,21)" fg:x="921" fg:w="1"/><text x="74.1665%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="73.9968%" y="229" width="0.0803%" height="15" fill="rgb(244,196,23)" fg:x="922" fg:w="1"/><text x="74.2468%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.9968%" y="213" width="0.0803%" height="15" fill="rgb(239,121,44)" fg:x="922" fg:w="1"/><text x="74.2468%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.9968%" y="197" width="0.0803%" height="15" fill="rgb(249,203,23)" fg:x="922" fg:w="1"/><text x="74.2468%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="73.9968%" y="245" width="0.1605%" height="15" fill="rgb(238,219,10)" fg:x="922" fg:w="2"/><text x="74.2468%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="74.0770%" y="229" width="0.0803%" height="15" fill="rgb(241,35,46)" fg:x="923" fg:w="1"/><text x="74.3270%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (62 samples, 4.98%)</title><rect x="69.2616%" y="325" width="4.9759%" height="15" fill="rgb(218,28,6)" fg:x="863" fg:w="62"/><text x="69.5116%" y="335.50">&lt;regex..</text></g><g><title>regex::builders::Builder::build_one_string (62 samples, 4.98%)</title><rect x="69.2616%" y="309" width="4.9759%" height="15" fill="rgb(233,151,50)" fg:x="863" fg:w="62"/><text x="69.5116%" y="319.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (62 samples, 4.98%)</title><rect x="69.2616%" y="293" width="4.9759%" height="15" fill="rgb(208,57,8)" fg:x="863" fg:w="62"/><text x="69.5116%" y="303.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="73.9968%" y="277" width="0.2408%" height="15" fill="rgb(253,99,10)" fg:x="922" fg:w="3"/><text x="74.2468%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="73.9968%" y="261" width="0.2408%" height="15" fill="rgb(237,196,49)" fg:x="922" fg:w="3"/><text x="74.2468%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="74.1573%" y="245" width="0.0803%" height="15" fill="rgb(209,51,3)" fg:x="924" fg:w="1"/><text x="74.4073%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="74.1573%" y="229" width="0.0803%" height="15" fill="rgb(238,129,10)" fg:x="924" fg:w="1"/><text x="74.4073%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="74.1573%" y="213" width="0.0803%" height="15" fill="rgb(246,201,16)" fg:x="924" fg:w="1"/><text x="74.4073%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (63 samples, 5.06%)</title><rect x="69.2616%" y="341" width="5.0562%" height="15" fill="rgb(250,160,20)" fg:x="863" fg:w="63"/><text x="69.5116%" y="351.50">indefi..</text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="74.2376%" y="325" width="0.0803%" height="15" fill="rgb(251,107,25)" fg:x="925" fg:w="1"/><text x="74.4876%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="74.2376%" y="309" width="0.0803%" height="15" fill="rgb(212,103,39)" fg:x="925" fg:w="1"/><text x="74.4876%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="74.2376%" y="293" width="0.0803%" height="15" fill="rgb(207,9,29)" fg:x="925" fg:w="1"/><text x="74.4876%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="74.2376%" y="277" width="0.0803%" height="15" fill="rgb(227,84,3)" fg:x="925" fg:w="1"/><text x="74.4876%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.2376%" y="261" width="0.0803%" height="15" fill="rgb(242,194,7)" fg:x="925" fg:w="1"/><text x="74.4876%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3178%" y="245" width="0.0803%" height="15" fill="rgb(230,40,4)" fg:x="926" fg:w="1"/><text x="74.5678%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="74.3981%" y="245" width="0.0803%" height="15" fill="rgb(243,229,33)" fg:x="927" fg:w="1"/><text x="74.6481%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="74.3981%" y="229" width="0.0803%" height="15" fill="rgb(240,65,24)" fg:x="927" fg:w="1"/><text x="74.6481%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="74.4783%" y="213" width="0.0803%" height="15" fill="rgb(212,28,20)" fg:x="928" fg:w="1"/><text x="74.7283%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.4783%" y="197" width="0.0803%" height="15" fill="rgb(209,72,3)" fg:x="928" fg:w="1"/><text x="74.7283%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4783%" y="181" width="0.0803%" height="15" fill="rgb(238,170,36)" fg:x="928" fg:w="1"/><text x="74.7283%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.32%)</title><rect x="74.3178%" y="261" width="0.3210%" height="15" fill="rgb(236,19,38)" fg:x="926" fg:w="4"/><text x="74.5678%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="74.4783%" y="245" width="0.1605%" height="15" fill="rgb(230,67,43)" fg:x="928" fg:w="2"/><text x="74.7283%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="74.4783%" y="229" width="0.1605%" height="15" fill="rgb(227,14,36)" fg:x="928" fg:w="2"/><text x="74.7283%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="74.5586%" y="213" width="0.0803%" height="15" fill="rgb(247,171,49)" fg:x="929" fg:w="1"/><text x="74.8086%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="74.6388%" y="261" width="0.0803%" height="15" fill="rgb(235,164,51)" fg:x="930" fg:w="1"/><text x="74.8888%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="74.6388%" y="245" width="0.0803%" height="15" fill="rgb(246,107,20)" fg:x="930" fg:w="1"/><text x="74.8888%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="74.6388%" y="229" width="0.0803%" height="15" fill="rgb(226,88,18)" fg:x="930" fg:w="1"/><text x="74.8888%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="74.6388%" y="213" width="0.0803%" height="15" fill="rgb(235,136,9)" fg:x="930" fg:w="1"/><text x="74.8888%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="74.6388%" y="197" width="0.0803%" height="15" fill="rgb(209,3,34)" fg:x="930" fg:w="1"/><text x="74.8888%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="74.7191%" y="229" width="0.1605%" height="15" fill="rgb(213,38,19)" fg:x="931" fg:w="2"/><text x="74.9691%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="74.7191%" y="213" width="0.1605%" height="15" fill="rgb(254,24,24)" fg:x="931" fg:w="2"/><text x="74.9691%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="74.7994%" y="197" width="0.0803%" height="15" fill="rgb(219,122,42)" fg:x="932" fg:w="1"/><text x="75.0494%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.7994%" y="181" width="0.0803%" height="15" fill="rgb(205,128,31)" fg:x="932" fg:w="1"/><text x="75.0494%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.7994%" y="165" width="0.0803%" height="15" fill="rgb(212,142,0)" fg:x="932" fg:w="1"/><text x="75.0494%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (8 samples, 0.64%)</title><rect x="74.3178%" y="309" width="0.6421%" height="15" fill="rgb(211,25,35)" fg:x="926" fg:w="8"/><text x="74.5678%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (8 samples, 0.64%)</title><rect x="74.3178%" y="293" width="0.6421%" height="15" fill="rgb(220,150,53)" fg:x="926" fg:w="8"/><text x="74.5678%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (8 samples, 0.64%)</title><rect x="74.3178%" y="277" width="0.6421%" height="15" fill="rgb(220,30,24)" fg:x="926" fg:w="8"/><text x="74.5678%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="74.7191%" y="261" width="0.2408%" height="15" fill="rgb(218,86,23)" fg:x="931" fg:w="3"/><text x="74.9691%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="74.7191%" y="245" width="0.2408%" height="15" fill="rgb(206,62,27)" fg:x="931" fg:w="3"/><text x="74.9691%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="74.8796%" y="229" width="0.0803%" height="15" fill="rgb(249,174,0)" fg:x="933" fg:w="1"/><text x="75.1296%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="74.8796%" y="213" width="0.0803%" height="15" fill="rgb(246,67,27)" fg:x="933" fg:w="1"/><text x="75.1296%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="74.8796%" y="197" width="0.0803%" height="15" fill="rgb(250,195,30)" fg:x="933" fg:w="1"/><text x="75.1296%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="74.9599%" y="309" width="0.0803%" height="15" fill="rgb(251,171,50)" fg:x="934" fg:w="1"/><text x="75.2099%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="74.9599%" y="293" width="0.0803%" height="15" fill="rgb(236,196,10)" fg:x="934" fg:w="1"/><text x="75.2099%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="75.0401%" y="261" width="0.0803%" height="15" fill="rgb(249,228,52)" fg:x="935" fg:w="1"/><text x="75.2901%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.0401%" y="245" width="0.0803%" height="15" fill="rgb(219,60,51)" fg:x="935" fg:w="1"/><text x="75.2901%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="75.0401%" y="309" width="0.1605%" height="15" fill="rgb(240,198,24)" fg:x="935" fg:w="2"/><text x="75.2901%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="75.0401%" y="293" width="0.1605%" height="15" fill="rgb(240,192,40)" fg:x="935" fg:w="2"/><text x="75.2901%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="75.0401%" y="277" width="0.1605%" height="15" fill="rgb(219,118,5)" fg:x="935" fg:w="2"/><text x="75.2901%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="75.1204%" y="261" width="0.0803%" height="15" fill="rgb(205,202,34)" fg:x="936" fg:w="1"/><text x="75.3704%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.1204%" y="245" width="0.0803%" height="15" fill="rgb(234,153,26)" fg:x="936" fg:w="1"/><text x="75.3704%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (166 samples, 13.32%)</title><rect x="62.1188%" y="421" width="13.3226%" height="15" fill="rgb(229,26,29)" fg:x="774" fg:w="166"/><text x="62.3688%" y="431.50">&lt;&amp;kernel::model::Ent..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (154 samples, 12.36%)</title><rect x="63.0819%" y="405" width="12.3596%" height="15" fill="rgb(237,115,21)" fg:x="786" fg:w="154"/><text x="63.3319%" y="415.50">plugins_core::look..</text></g><g><title>indefinite::indefinite (154 samples, 12.36%)</title><rect x="63.0819%" y="389" width="12.3596%" height="15" fill="rgb(252,144,15)" fg:x="786" fg:w="154"/><text x="63.3319%" y="399.50">indefinite::indefi..</text></g><g><title>indefinite::methods::indefinite (154 samples, 12.36%)</title><rect x="63.0819%" y="373" width="12.3596%" height="15" fill="rgb(232,26,13)" fg:x="786" fg:w="154"/><text x="63.3319%" y="383.50">indefinite::method..</text></g><g><title>indefinite::methods::apply_rules (154 samples, 12.36%)</title><rect x="63.0819%" y="357" width="12.3596%" height="15" fill="rgb(206,44,19)" fg:x="786" fg:w="154"/><text x="63.3319%" y="367.50">indefinite::method..</text></g><g><title>indefinite::rules::other::Other::run (14 samples, 1.12%)</title><rect x="74.3178%" y="341" width="1.1236%" height="15" fill="rgb(249,159,2)" fg:x="926" fg:w="14"/><text x="74.5678%" y="351.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (14 samples, 1.12%)</title><rect x="74.3178%" y="325" width="1.1236%" height="15" fill="rgb(231,5,32)" fg:x="926" fg:w="14"/><text x="74.5678%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="75.2006%" y="309" width="0.2408%" height="15" fill="rgb(249,210,18)" fg:x="937" fg:w="3"/><text x="75.4506%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="75.2006%" y="293" width="0.2408%" height="15" fill="rgb(215,223,36)" fg:x="937" fg:w="3"/><text x="75.4506%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="75.2006%" y="277" width="0.2408%" height="15" fill="rgb(245,185,20)" fg:x="937" fg:w="3"/><text x="75.4506%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="75.2006%" y="261" width="0.2408%" height="15" fill="rgb(206,224,11)" fg:x="937" fg:w="3"/><text x="75.4506%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="75.2006%" y="245" width="0.2408%" height="15" fill="rgb(248,73,42)" fg:x="937" fg:w="3"/><text x="75.4506%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3612%" y="229" width="0.0803%" height="15" fill="rgb(219,149,31)" fg:x="939" fg:w="1"/><text x="75.6112%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3612%" y="213" width="0.0803%" height="15" fill="rgb(243,104,17)" fg:x="939" fg:w="1"/><text x="75.6112%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="75.3612%" y="197" width="0.0803%" height="15" fill="rgb(244,117,33)" fg:x="939" fg:w="1"/><text x="75.6112%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.3612%" y="181" width="0.0803%" height="15" fill="rgb(251,25,47)" fg:x="939" fg:w="1"/><text x="75.6112%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.4414%" y="341" width="0.0803%" height="15" fill="rgb(249,70,13)" fg:x="940" fg:w="1"/><text x="75.6914%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.4414%" y="325" width="0.0803%" height="15" fill="rgb(217,133,18)" fg:x="940" fg:w="1"/><text x="75.6914%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.4414%" y="309" width="0.0803%" height="15" fill="rgb(248,97,28)" fg:x="940" fg:w="1"/><text x="75.6914%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.4414%" y="293" width="0.0803%" height="15" fill="rgb(237,193,4)" fg:x="940" fg:w="1"/><text x="75.6914%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.4414%" y="277" width="0.0803%" height="15" fill="rgb(247,198,45)" fg:x="940" fg:w="1"/><text x="75.6914%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.4414%" y="261" width="0.0803%" height="15" fill="rgb(245,2,20)" fg:x="940" fg:w="1"/><text x="75.6914%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.4414%" y="245" width="0.0803%" height="15" fill="rgb(210,71,36)" fg:x="940" fg:w="1"/><text x="75.6914%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.4414%" y="229" width="0.0803%" height="15" fill="rgb(238,114,30)" fg:x="940" fg:w="1"/><text x="75.6914%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.4414%" y="213" width="0.0803%" height="15" fill="rgb(241,200,2)" fg:x="940" fg:w="1"/><text x="75.6914%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.4414%" y="197" width="0.0803%" height="15" fill="rgb(232,106,18)" fg:x="940" fg:w="1"/><text x="75.6914%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.4414%" y="181" width="0.0803%" height="15" fill="rgb(211,141,18)" fg:x="940" fg:w="1"/><text x="75.6914%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.4414%" y="165" width="0.0803%" height="15" fill="rgb(224,9,9)" fg:x="940" fg:w="1"/><text x="75.6914%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.4414%" y="149" width="0.0803%" height="15" fill="rgb(249,137,46)" fg:x="940" fg:w="1"/><text x="75.6914%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5217%" y="309" width="0.0803%" height="15" fill="rgb(236,44,45)" fg:x="941" fg:w="1"/><text x="75.7717%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.6019%" y="309" width="0.0803%" height="15" fill="rgb(205,68,40)" fg:x="942" fg:w="1"/><text x="75.8519%" y="319.50"></text></g><g><title>plugins_core::tools::contained_by (4 samples, 0.32%)</title><rect x="75.4414%" y="373" width="0.3210%" height="15" fill="rgb(214,198,49)" fg:x="940" fg:w="4"/><text x="75.6914%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="75.4414%" y="357" width="0.3210%" height="15" fill="rgb(226,140,45)" fg:x="940" fg:w="4"/><text x="75.6914%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="75.5217%" y="341" width="0.2408%" height="15" fill="rgb(209,109,20)" fg:x="941" fg:w="3"/><text x="75.7717%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.5217%" y="325" width="0.2408%" height="15" fill="rgb(217,33,46)" fg:x="941" fg:w="3"/><text x="75.7717%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.6822%" y="309" width="0.0803%" height="15" fill="rgb(232,150,33)" fg:x="943" fg:w="1"/><text x="75.9322%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6822%" y="293" width="0.0803%" height="15" fill="rgb(233,76,25)" fg:x="943" fg:w="1"/><text x="75.9322%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.6822%" y="277" width="0.0803%" height="15" fill="rgb(254,219,23)" fg:x="943" fg:w="1"/><text x="75.9322%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.7624%" y="325" width="0.0803%" height="15" fill="rgb(233,108,4)" fg:x="944" fg:w="1"/><text x="76.0124%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.7624%" y="309" width="0.0803%" height="15" fill="rgb(229,98,6)" fg:x="944" fg:w="1"/><text x="76.0124%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.7624%" y="293" width="0.0803%" height="15" fill="rgb(217,40,27)" fg:x="944" fg:w="1"/><text x="76.0124%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.7624%" y="277" width="0.0803%" height="15" fill="rgb(221,35,43)" fg:x="944" fg:w="1"/><text x="76.0124%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.7624%" y="261" width="0.0803%" height="15" fill="rgb(212,107,11)" fg:x="944" fg:w="1"/><text x="76.0124%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="75.7624%" y="245" width="0.0803%" height="15" fill="rgb(245,42,44)" fg:x="944" fg:w="1"/><text x="76.0124%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="75.7624%" y="229" width="0.0803%" height="15" fill="rgb(209,31,12)" fg:x="944" fg:w="1"/><text x="76.0124%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.8427%" y="197" width="0.0803%" height="15" fill="rgb(210,228,54)" fg:x="945" fg:w="1"/><text x="76.0927%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.8427%" y="181" width="0.0803%" height="15" fill="rgb(241,19,33)" fg:x="945" fg:w="1"/><text x="76.0927%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.8427%" y="165" width="0.0803%" height="15" fill="rgb(229,51,27)" fg:x="945" fg:w="1"/><text x="76.0927%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.8427%" y="149" width="0.0803%" height="15" fill="rgb(214,167,49)" fg:x="945" fg:w="1"/><text x="76.0927%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.8427%" y="133" width="0.0803%" height="15" fill="rgb(248,140,47)" fg:x="945" fg:w="1"/><text x="76.0927%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.8427%" y="117" width="0.0803%" height="15" fill="rgb(228,6,51)" fg:x="945" fg:w="1"/><text x="76.0927%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.8427%" y="101" width="0.0803%" height="15" fill="rgb(242,44,53)" fg:x="945" fg:w="1"/><text x="76.0927%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="75.7624%" y="341" width="0.2408%" height="15" fill="rgb(249,90,50)" fg:x="944" fg:w="3"/><text x="76.0124%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="75.8427%" y="325" width="0.1605%" height="15" fill="rgb(222,84,19)" fg:x="945" fg:w="2"/><text x="76.0927%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.8427%" y="309" width="0.1605%" height="15" fill="rgb(214,140,12)" fg:x="945" fg:w="2"/><text x="76.0927%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.8427%" y="293" width="0.1605%" height="15" fill="rgb(210,20,43)" fg:x="945" fg:w="2"/><text x="76.0927%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="75.8427%" y="277" width="0.1605%" height="15" fill="rgb(243,1,40)" fg:x="945" fg:w="2"/><text x="76.0927%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="75.8427%" y="261" width="0.1605%" height="15" fill="rgb(224,102,26)" fg:x="945" fg:w="2"/><text x="76.0927%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="75.8427%" y="245" width="0.1605%" height="15" fill="rgb(221,179,1)" fg:x="945" fg:w="2"/><text x="76.0927%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="75.8427%" y="229" width="0.1605%" height="15" fill="rgb(216,209,47)" fg:x="945" fg:w="2"/><text x="76.0927%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="75.8427%" y="213" width="0.1605%" height="15" fill="rgb(251,135,9)" fg:x="945" fg:w="2"/><text x="76.0927%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="75.9230%" y="197" width="0.0803%" height="15" fill="rgb(242,9,36)" fg:x="946" fg:w="1"/><text x="76.1730%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="75.9230%" y="181" width="0.0803%" height="15" fill="rgb(249,60,37)" fg:x="946" fg:w="1"/><text x="76.1730%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0835%" y="261" width="0.0803%" height="15" fill="rgb(230,66,45)" fg:x="948" fg:w="1"/><text x="76.3335%" y="271.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (10 samples, 0.80%)</title><rect x="75.4414%" y="389" width="0.8026%" height="15" fill="rgb(216,1,47)" fg:x="940" fg:w="10"/><text x="75.6914%" y="399.50"></text></g><g><title>plugins_core::tools::occupied_by (6 samples, 0.48%)</title><rect x="75.7624%" y="373" width="0.4815%" height="15" fill="rgb(235,8,23)" fg:x="944" fg:w="6"/><text x="76.0124%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="75.7624%" y="357" width="0.4815%" height="15" fill="rgb(225,136,11)" fg:x="944" fg:w="6"/><text x="76.0124%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="76.0032%" y="341" width="0.2408%" height="15" fill="rgb(228,63,44)" fg:x="947" fg:w="3"/><text x="76.2532%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="76.0032%" y="325" width="0.2408%" height="15" fill="rgb(240,43,52)" fg:x="947" fg:w="3"/><text x="76.2532%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="76.0032%" y="309" width="0.2408%" height="15" fill="rgb(217,167,36)" fg:x="947" fg:w="3"/><text x="76.2532%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="76.0032%" y="293" width="0.2408%" height="15" fill="rgb(250,19,6)" fg:x="947" fg:w="3"/><text x="76.2532%" y="303.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="76.0032%" y="277" width="0.2408%" height="15" fill="rgb(236,60,51)" fg:x="947" fg:w="3"/><text x="76.2532%" y="287.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.1637%" y="261" width="0.0803%" height="15" fill="rgb(222,217,20)" fg:x="949" fg:w="1"/><text x="76.4137%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.1637%" y="245" width="0.0803%" height="15" fill="rgb(242,65,52)" fg:x="949" fg:w="1"/><text x="76.4137%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="76.2440%" y="293" width="0.0803%" height="15" fill="rgb(217,5,41)" fg:x="950" fg:w="1"/><text x="76.4940%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::name (2 samples, 0.16%)</title><rect x="76.2440%" y="357" width="0.1605%" height="15" fill="rgb(223,208,53)" fg:x="950" fg:w="2"/><text x="76.4940%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="76.2440%" y="341" width="0.1605%" height="15" fill="rgb(221,104,30)" fg:x="950" fg:w="2"/><text x="76.4940%" y="351.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="76.2440%" y="325" width="0.1605%" height="15" fill="rgb(230,210,42)" fg:x="950" fg:w="2"/><text x="76.4940%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="76.2440%" y="309" width="0.1605%" height="15" fill="rgb(206,205,27)" fg:x="950" fg:w="2"/><text x="76.4940%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.3242%" y="293" width="0.0803%" height="15" fill="rgb(233,114,38)" fg:x="951" fg:w="1"/><text x="76.5742%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3242%" y="277" width="0.0803%" height="15" fill="rgb(216,174,36)" fg:x="951" fg:w="1"/><text x="76.5742%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.3242%" y="261" width="0.0803%" height="15" fill="rgb(211,30,9)" fg:x="951" fg:w="1"/><text x="76.5742%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3242%" y="245" width="0.0803%" height="15" fill="rgb(216,8,21)" fg:x="951" fg:w="1"/><text x="76.5742%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.3242%" y="229" width="0.0803%" height="15" fill="rgb(237,209,39)" fg:x="951" fg:w="1"/><text x="76.5742%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="76.3242%" y="213" width="0.0803%" height="15" fill="rgb(235,111,47)" fg:x="951" fg:w="1"/><text x="76.5742%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (15 samples, 1.20%)</title><rect x="75.4414%" y="421" width="1.2039%" height="15" fill="rgb(216,139,9)" fg:x="940" fg:w="15"/><text x="75.6914%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (15 samples, 1.20%)</title><rect x="75.4414%" y="405" width="1.2039%" height="15" fill="rgb(248,185,4)" fg:x="940" fg:w="15"/><text x="75.6914%" y="415.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (5 samples, 0.40%)</title><rect x="76.2440%" y="389" width="0.4013%" height="15" fill="rgb(239,185,25)" fg:x="950" fg:w="5"/><text x="76.4940%" y="399.50"></text></g><g><title>plugins_core::finding::matches_description (5 samples, 0.40%)</title><rect x="76.2440%" y="373" width="0.4013%" height="15" fill="rgb(233,207,8)" fg:x="950" fg:w="5"/><text x="76.4940%" y="383.50"></text></g><g><title>plugins_core::finding::matches_string (3 samples, 0.24%)</title><rect x="76.4045%" y="357" width="0.2408%" height="15" fill="rgb(249,220,24)" fg:x="952" fg:w="3"/><text x="76.6545%" y="367.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (2 samples, 0.16%)</title><rect x="76.4848%" y="341" width="0.1605%" height="15" fill="rgb(221,50,14)" fg:x="953" fg:w="2"/><text x="76.7348%" y="351.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_lower (1 samples, 0.08%)</title><rect x="76.5650%" y="325" width="0.0803%" height="15" fill="rgb(227,79,42)" fg:x="954" fg:w="1"/><text x="76.8150%" y="335.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (1 samples, 0.08%)</title><rect x="76.5650%" y="309" width="0.0803%" height="15" fill="rgb(228,218,49)" fg:x="954" fg:w="1"/><text x="76.8150%" y="319.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_uppercase (1 samples, 0.08%)</title><rect x="76.5650%" y="293" width="0.0803%" height="15" fill="rgb(249,18,15)" fg:x="954" fg:w="1"/><text x="76.8150%" y="303.50"></text></g><g><title>plugins_core::library::actions::reply_ok (2 samples, 0.16%)</title><rect x="76.6453%" y="421" width="0.1605%" height="15" fill="rgb(212,84,27)" fg:x="955" fg:w="2"/><text x="76.8953%" y="431.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="76.6453%" y="405" width="0.1605%" height="15" fill="rgb(207,83,24)" fg:x="955" fg:w="2"/><text x="76.8953%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (2 samples, 0.16%)</title><rect x="76.6453%" y="389" width="0.1605%" height="15" fill="rgb(219,61,7)" fg:x="955" fg:w="2"/><text x="76.8953%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="76.6453%" y="373" width="0.1605%" height="15" fill="rgb(211,43,29)" fg:x="955" fg:w="2"/><text x="76.8953%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="76.6453%" y="357" width="0.1605%" height="15" fill="rgb(243,15,23)" fg:x="955" fg:w="2"/><text x="76.8953%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="76.6453%" y="341" width="0.1605%" height="15" fill="rgb(217,52,28)" fg:x="955" fg:w="2"/><text x="76.8953%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="76.6453%" y="325" width="0.1605%" height="15" fill="rgb(210,35,6)" fg:x="955" fg:w="2"/><text x="76.8953%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="76.8058%" y="389" width="0.2408%" height="15" fill="rgb(237,187,28)" fg:x="957" fg:w="3"/><text x="77.0558%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.8860%" y="373" width="0.1605%" height="15" fill="rgb(231,136,24)" fg:x="958" fg:w="2"/><text x="77.1360%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.8860%" y="357" width="0.1605%" height="15" fill="rgb(205,176,52)" fg:x="958" fg:w="2"/><text x="77.1360%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.8860%" y="341" width="0.1605%" height="15" fill="rgb(218,65,12)" fg:x="958" fg:w="2"/><text x="77.1360%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.8860%" y="325" width="0.1605%" height="15" fill="rgb(234,101,21)" fg:x="958" fg:w="2"/><text x="77.1360%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="76.8860%" y="309" width="0.1605%" height="15" fill="rgb(206,13,20)" fg:x="958" fg:w="2"/><text x="77.1360%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="76.8860%" y="293" width="0.1605%" height="15" fill="rgb(236,89,44)" fg:x="958" fg:w="2"/><text x="77.1360%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="76.8860%" y="277" width="0.1605%" height="15" fill="rgb(225,52,17)" fg:x="958" fg:w="2"/><text x="77.1360%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="76.8860%" y="261" width="0.1605%" height="15" fill="rgb(214,27,25)" fg:x="958" fg:w="2"/><text x="77.1360%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="76.8860%" y="245" width="0.1605%" height="15" fill="rgb(240,141,35)" fg:x="958" fg:w="2"/><text x="77.1360%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="76.8860%" y="229" width="0.1605%" height="15" fill="rgb(216,126,3)" fg:x="958" fg:w="2"/><text x="77.1360%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="76.8860%" y="213" width="0.1605%" height="15" fill="rgb(249,196,23)" fg:x="958" fg:w="2"/><text x="77.1360%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="76.8860%" y="197" width="0.1605%" height="15" fill="rgb(215,185,43)" fg:x="958" fg:w="2"/><text x="77.1360%" y="207.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="76.8860%" y="181" width="0.1605%" height="15" fill="rgb(208,194,36)" fg:x="958" fg:w="2"/><text x="77.1360%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="76.8860%" y="165" width="0.1605%" height="15" fill="rgb(245,182,12)" fg:x="958" fg:w="2"/><text x="77.1360%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="77.0465%" y="389" width="0.0803%" height="15" fill="rgb(244,222,52)" fg:x="960" fg:w="1"/><text x="77.2965%" y="399.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (5 samples, 0.40%)</title><rect x="76.8058%" y="405" width="0.4013%" height="15" fill="rgb(236,222,51)" fg:x="957" fg:w="5"/><text x="77.0558%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.1268%" y="389" width="0.0803%" height="15" fill="rgb(254,71,22)" fg:x="961" fg:w="1"/><text x="77.3768%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1268%" y="373" width="0.0803%" height="15" fill="rgb(250,104,15)" fg:x="961" fg:w="1"/><text x="77.3768%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.1268%" y="357" width="0.0803%" height="15" fill="rgb(229,223,46)" fg:x="961" fg:w="1"/><text x="77.3768%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1268%" y="341" width="0.0803%" height="15" fill="rgb(209,129,18)" fg:x="961" fg:w="1"/><text x="77.3768%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.1268%" y="325" width="0.0803%" height="15" fill="rgb(224,160,1)" fg:x="961" fg:w="1"/><text x="77.3768%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::carrying::model::Containing&gt; (1 samples, 0.08%)</title><rect x="77.2071%" y="405" width="0.0803%" height="15" fill="rgb(237,112,21)" fg:x="962" fg:w="1"/><text x="77.4571%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="77.2071%" y="389" width="0.0803%" height="15" fill="rgb(215,198,53)" fg:x="962" fg:w="1"/><text x="77.4571%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2071%" y="373" width="0.0803%" height="15" fill="rgb(218,227,35)" fg:x="962" fg:w="1"/><text x="77.4571%" y="383.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="77.2873%" y="357" width="0.0803%" height="15" fill="rgb(232,121,22)" fg:x="963" fg:w="1"/><text x="77.5373%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.2873%" y="341" width="0.0803%" height="15" fill="rgb(235,52,54)" fg:x="963" fg:w="1"/><text x="77.5373%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.3676%" y="197" width="0.0803%" height="15" fill="rgb(219,21,44)" fg:x="964" fg:w="1"/><text x="77.6176%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.3676%" y="181" width="0.0803%" height="15" fill="rgb(221,51,43)" fg:x="964" fg:w="1"/><text x="77.6176%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.3676%" y="165" width="0.0803%" height="15" fill="rgb(225,77,42)" fg:x="964" fg:w="1"/><text x="77.6176%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.3676%" y="149" width="0.0803%" height="15" fill="rgb(214,117,53)" fg:x="964" fg:w="1"/><text x="77.6176%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.3676%" y="133" width="0.0803%" height="15" fill="rgb(218,227,27)" fg:x="964" fg:w="1"/><text x="77.6176%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.3676%" y="117" width="0.0803%" height="15" fill="rgb(223,214,36)" fg:x="964" fg:w="1"/><text x="77.6176%" y="127.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="77.3676%" y="101" width="0.0803%" height="15" fill="rgb(235,21,7)" fg:x="964" fg:w="1"/><text x="77.6176%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="77.3676%" y="85" width="0.0803%" height="15" fill="rgb(244,216,4)" fg:x="964" fg:w="1"/><text x="77.6176%" y="95.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.3676%" y="325" width="0.1605%" height="15" fill="rgb(249,197,24)" fg:x="964" fg:w="2"/><text x="77.6176%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.3676%" y="309" width="0.1605%" height="15" fill="rgb(222,169,49)" fg:x="964" fg:w="2"/><text x="77.6176%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.3676%" y="293" width="0.1605%" height="15" fill="rgb(207,137,33)" fg:x="964" fg:w="2"/><text x="77.6176%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="77.3676%" y="277" width="0.1605%" height="15" fill="rgb(219,180,40)" fg:x="964" fg:w="2"/><text x="77.6176%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="77.3676%" y="261" width="0.1605%" height="15" fill="rgb(250,163,42)" fg:x="964" fg:w="2"/><text x="77.6176%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="77.3676%" y="245" width="0.1605%" height="15" fill="rgb(239,163,0)" fg:x="964" fg:w="2"/><text x="77.6176%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="77.3676%" y="229" width="0.1605%" height="15" fill="rgb(252,38,28)" fg:x="964" fg:w="2"/><text x="77.6176%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="77.3676%" y="213" width="0.1605%" height="15" fill="rgb(254,203,26)" fg:x="964" fg:w="2"/><text x="77.6176%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="77.4478%" y="197" width="0.0803%" height="15" fill="rgb(209,129,32)" fg:x="965" fg:w="1"/><text x="77.6978%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="77.4478%" y="181" width="0.0803%" height="15" fill="rgb(207,177,52)" fg:x="965" fg:w="1"/><text x="77.6978%" y="191.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="77.2873%" y="405" width="0.3210%" height="15" fill="rgb(230,209,36)" fg:x="963" fg:w="4"/><text x="77.5373%" y="415.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="77.2873%" y="389" width="0.3210%" height="15" fill="rgb(238,131,0)" fg:x="963" fg:w="4"/><text x="77.5373%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="77.2873%" y="373" width="0.3210%" height="15" fill="rgb(218,61,31)" fg:x="963" fg:w="4"/><text x="77.5373%" y="383.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="77.3676%" y="357" width="0.2408%" height="15" fill="rgb(232,6,53)" fg:x="964" fg:w="3"/><text x="77.6176%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="77.3676%" y="341" width="0.2408%" height="15" fill="rgb(254,100,32)" fg:x="964" fg:w="3"/><text x="77.6176%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.5281%" y="325" width="0.0803%" height="15" fill="rgb(229,194,49)" fg:x="966" fg:w="1"/><text x="77.7781%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.5281%" y="309" width="0.0803%" height="15" fill="rgb(206,208,39)" fg:x="966" fg:w="1"/><text x="77.7781%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.5281%" y="293" width="0.0803%" height="15" fill="rgb(246,226,14)" fg:x="966" fg:w="1"/><text x="77.7781%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.5281%" y="277" width="0.0803%" height="15" fill="rgb(226,48,32)" fg:x="966" fg:w="1"/><text x="77.7781%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::size_hint (1 samples, 0.08%)</title><rect x="77.5281%" y="261" width="0.0803%" height="15" fill="rgb(252,43,54)" fg:x="966" fg:w="1"/><text x="77.7781%" y="271.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="77.6083%" y="405" width="0.0803%" height="15" fill="rgb(207,124,0)" fg:x="967" fg:w="1"/><text x="77.8583%" y="415.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6083%" y="389" width="0.0803%" height="15" fill="rgb(248,188,30)" fg:x="967" fg:w="1"/><text x="77.8583%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.6083%" y="373" width="0.0803%" height="15" fill="rgb(232,14,43)" fg:x="967" fg:w="1"/><text x="77.8583%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.6083%" y="357" width="0.0803%" height="15" fill="rgb(218,52,29)" fg:x="967" fg:w="1"/><text x="77.8583%" y="367.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6083%" y="341" width="0.0803%" height="15" fill="rgb(218,176,50)" fg:x="967" fg:w="1"/><text x="77.8583%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.6083%" y="325" width="0.0803%" height="15" fill="rgb(213,112,0)" fg:x="967" fg:w="1"/><text x="77.8583%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.6083%" y="309" width="0.0803%" height="15" fill="rgb(244,216,8)" fg:x="967" fg:w="1"/><text x="77.8583%" y="319.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="77.6886%" y="405" width="0.1605%" height="15" fill="rgb(224,148,53)" fg:x="968" fg:w="2"/><text x="77.9386%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="77.6886%" y="389" width="0.1605%" height="15" fill="rgb(241,133,40)" fg:x="968" fg:w="2"/><text x="77.9386%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="77.6886%" y="373" width="0.1605%" height="15" fill="rgb(232,17,44)" fg:x="968" fg:w="2"/><text x="77.9386%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="77.6886%" y="357" width="0.1605%" height="15" fill="rgb(213,32,25)" fg:x="968" fg:w="2"/><text x="77.9386%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="77.6886%" y="341" width="0.1605%" height="15" fill="rgb(249,115,27)" fg:x="968" fg:w="2"/><text x="77.9386%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="77.6886%" y="325" width="0.1605%" height="15" fill="rgb(241,50,1)" fg:x="968" fg:w="2"/><text x="77.9386%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.6886%" y="309" width="0.1605%" height="15" fill="rgb(244,175,40)" fg:x="968" fg:w="2"/><text x="77.9386%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.7689%" y="293" width="0.0803%" height="15" fill="rgb(230,94,34)" fg:x="969" fg:w="1"/><text x="78.0189%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.7689%" y="277" width="0.0803%" height="15" fill="rgb(223,185,29)" fg:x="969" fg:w="1"/><text x="78.0189%" y="287.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="77.8491%" y="405" width="0.0803%" height="15" fill="rgb(225,193,15)" fg:x="970" fg:w="1"/><text x="78.0991%" y="415.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (1 samples, 0.08%)</title><rect x="77.8491%" y="389" width="0.0803%" height="15" fill="rgb(252,121,38)" fg:x="970" fg:w="1"/><text x="78.0991%" y="399.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="77.9294%" y="389" width="0.0803%" height="15" fill="rgb(232,44,12)" fg:x="971" fg:w="1"/><text x="78.1794%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9294%" y="373" width="0.0803%" height="15" fill="rgb(226,45,54)" fg:x="971" fg:w="1"/><text x="78.1794%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.0096%" y="341" width="0.0803%" height="15" fill="rgb(209,67,17)" fg:x="972" fg:w="1"/><text x="78.2596%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="78.0096%" y="373" width="0.1605%" height="15" fill="rgb(219,108,52)" fg:x="972" fg:w="2"/><text x="78.2596%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="78.0096%" y="357" width="0.1605%" height="15" fill="rgb(216,118,19)" fg:x="972" fg:w="2"/><text x="78.2596%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.0899%" y="341" width="0.0803%" height="15" fill="rgb(228,120,40)" fg:x="973" fg:w="1"/><text x="78.3399%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.0899%" y="325" width="0.0803%" height="15" fill="rgb(221,218,34)" fg:x="973" fg:w="1"/><text x="78.3399%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.0899%" y="309" width="0.0803%" height="15" fill="rgb(235,89,14)" fg:x="973" fg:w="1"/><text x="78.3399%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.2504%" y="309" width="0.0803%" height="15" fill="rgb(248,89,7)" fg:x="975" fg:w="1"/><text x="78.5004%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (843 samples, 67.66%)</title><rect x="10.7544%" y="629" width="67.6565%" height="15" fill="rgb(212,114,34)" fg:x="134" fg:w="843"/><text x="11.0044%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (843 samples, 67.66%)</title><rect x="10.7544%" y="613" width="67.6565%" height="15" fill="rgb(246,88,32)" fg:x="134" fg:w="843"/><text x="11.0044%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (843 samples, 67.66%)</title><rect x="10.7544%" y="597" width="67.6565%" height="15" fill="rgb(237,135,0)" fg:x="134" fg:w="843"/><text x="11.0044%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (843 samples, 67.66%)</title><rect x="10.7544%" y="581" width="67.6565%" height="15" fill="rgb(220,201,54)" fg:x="134" fg:w="843"/><text x="11.0044%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (820 samples, 65.81%)</title><rect x="12.6003%" y="565" width="65.8106%" height="15" fill="rgb(210,142,36)" fg:x="157" fg:w="820"/><text x="12.8503%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (820 samples, 65.81%)</title><rect x="12.6003%" y="549" width="65.8106%" height="15" fill="rgb(247,189,26)" fg:x="157" fg:w="820"/><text x="12.8503%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (820 samples, 65.81%)</title><rect x="12.6003%" y="533" width="65.8106%" height="15" fill="rgb(223,89,24)" fg:x="157" fg:w="820"/><text x="12.8503%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (819 samples, 65.73%)</title><rect x="12.6806%" y="517" width="65.7303%" height="15" fill="rgb(205,90,19)" fg:x="158" fg:w="819"/><text x="12.9306%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (818 samples, 65.65%)</title><rect x="12.7608%" y="501" width="65.6501%" height="15" fill="rgb(234,57,40)" fg:x="159" fg:w="818"/><text x="13.0108%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (818 samples, 65.65%)</title><rect x="12.7608%" y="485" width="65.6501%" height="15" fill="rgb(213,109,10)" fg:x="159" fg:w="818"/><text x="13.0108%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (818 samples, 65.65%)</title><rect x="12.7608%" y="469" width="65.6501%" height="15" fill="rgb(214,189,23)" fg:x="159" fg:w="818"/><text x="13.0108%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (818 samples, 65.65%)</title><rect x="12.7608%" y="453" width="65.6501%" height="15" fill="rgb(234,200,10)" fg:x="159" fg:w="818"/><text x="13.0108%" y="463.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (203 samples, 16.29%)</title><rect x="62.1188%" y="437" width="16.2921%" height="15" fill="rgb(221,148,16)" fg:x="774" fg:w="203"/><text x="62.3688%" y="447.50">&lt;plugins_core::carrying::..</text></g><g><title>plugins_core::location::change_location (20 samples, 1.61%)</title><rect x="76.8058%" y="421" width="1.6051%" height="15" fill="rgb(230,115,10)" fg:x="957" fg:w="20"/><text x="77.0558%" y="431.50"></text></g><g><title>plugins_core::location::Location::set (6 samples, 0.48%)</title><rect x="77.9294%" y="405" width="0.4815%" height="15" fill="rgb(220,106,42)" fg:x="971" fg:w="6"/><text x="78.1794%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (5 samples, 0.40%)</title><rect x="78.0096%" y="389" width="0.4013%" height="15" fill="rgb(225,105,39)" fg:x="972" fg:w="5"/><text x="78.2596%" y="399.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (3 samples, 0.24%)</title><rect x="78.1701%" y="373" width="0.2408%" height="15" fill="rgb(211,161,38)" fg:x="974" fg:w="3"/><text x="78.4201%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="78.1701%" y="357" width="0.2408%" height="15" fill="rgb(213,23,19)" fg:x="974" fg:w="3"/><text x="78.4201%" y="367.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (3 samples, 0.24%)</title><rect x="78.1701%" y="341" width="0.2408%" height="15" fill="rgb(240,2,33)" fg:x="974" fg:w="3"/><text x="78.4201%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="78.2504%" y="325" width="0.1605%" height="15" fill="rgb(221,29,45)" fg:x="975" fg:w="2"/><text x="78.5004%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3307%" y="309" width="0.0803%" height="15" fill="rgb(242,10,19)" fg:x="976" fg:w="1"/><text x="78.5807%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3307%" y="293" width="0.0803%" height="15" fill="rgb(250,84,37)" fg:x="976" fg:w="1"/><text x="78.5807%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.3307%" y="277" width="0.0803%" height="15" fill="rgb(214,136,7)" fg:x="976" fg:w="1"/><text x="78.5807%" y="287.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="78.4109%" y="629" width="0.0803%" height="15" fill="rgb(231,189,12)" fg:x="977" fg:w="1"/><text x="78.6609%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="78.4109%" y="613" width="0.0803%" height="15" fill="rgb(244,40,16)" fg:x="977" fg:w="1"/><text x="78.6609%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.4109%" y="597" width="0.0803%" height="15" fill="rgb(217,29,15)" fg:x="977" fg:w="1"/><text x="78.6609%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.4109%" y="581" width="0.0803%" height="15" fill="rgb(235,172,33)" fg:x="977" fg:w="1"/><text x="78.6609%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::parser::DropActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="78.4912%" y="581" width="0.0803%" height="15" fill="rgb(206,148,28)" fg:x="978" fg:w="1"/><text x="78.7412%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="78.4912%" y="565" width="0.0803%" height="15" fill="rgb(251,167,37)" fg:x="978" fg:w="1"/><text x="78.7412%" y="575.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="78.4912%" y="629" width="0.1605%" height="15" fill="rgb(229,94,52)" fg:x="978" fg:w="2"/><text x="78.7412%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="78.4912%" y="613" width="0.1605%" height="15" fill="rgb(216,132,9)" fg:x="978" fg:w="2"/><text x="78.7412%" y="623.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="78.4912%" y="597" width="0.1605%" height="15" fill="rgb(208,110,29)" fg:x="978" fg:w="2"/><text x="78.7412%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::parser::HoldActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="78.5714%" y="581" width="0.0803%" height="15" fill="rgb(241,23,8)" fg:x="979" fg:w="1"/><text x="78.8214%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="78.5714%" y="565" width="0.0803%" height="15" fill="rgb(208,26,35)" fg:x="979" fg:w="1"/><text x="78.8214%" y="575.50"></text></g><g><title>plugins_core::library::parser::word (1 samples, 0.08%)</title><rect x="78.5714%" y="549" width="0.0803%" height="15" fill="rgb(242,165,34)" fg:x="979" fg:w="1"/><text x="78.8214%" y="559.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.08%)</title><rect x="78.5714%" y="533" width="0.0803%" height="15" fill="rgb(222,222,33)" fg:x="979" fg:w="1"/><text x="78.8214%" y="543.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="78.5714%" y="517" width="0.0803%" height="15" fill="rgb(227,16,52)" fg:x="979" fg:w="1"/><text x="78.8214%" y="527.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.08%)</title><rect x="78.5714%" y="501" width="0.0803%" height="15" fill="rgb(213,93,12)" fg:x="979" fg:w="1"/><text x="78.8214%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="78.6517%" y="613" width="0.0803%" height="15" fill="rgb(238,41,5)" fg:x="980" fg:w="1"/><text x="78.9017%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.7319%" y="581" width="0.0803%" height="15" fill="rgb(211,60,15)" fg:x="981" fg:w="1"/><text x="78.9819%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.7319%" y="565" width="0.0803%" height="15" fill="rgb(209,11,34)" fg:x="981" fg:w="1"/><text x="78.9819%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.7319%" y="549" width="0.0803%" height="15" fill="rgb(254,155,53)" fg:x="981" fg:w="1"/><text x="78.9819%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.7319%" y="533" width="0.0803%" height="15" fill="rgb(236,174,8)" fg:x="981" fg:w="1"/><text x="78.9819%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.7319%" y="517" width="0.0803%" height="15" fill="rgb(229,31,27)" fg:x="981" fg:w="1"/><text x="78.9819%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.7319%" y="501" width="0.0803%" height="15" fill="rgb(242,226,26)" fg:x="981" fg:w="1"/><text x="78.9819%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.7319%" y="485" width="0.0803%" height="15" fill="rgb(234,32,40)" fg:x="981" fg:w="1"/><text x="78.9819%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.7319%" y="469" width="0.0803%" height="15" fill="rgb(249,226,47)" fg:x="981" fg:w="1"/><text x="78.9819%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.7319%" y="453" width="0.0803%" height="15" fill="rgb(212,6,26)" fg:x="981" fg:w="1"/><text x="78.9819%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.7319%" y="437" width="0.0803%" height="15" fill="rgb(249,202,29)" fg:x="981" fg:w="1"/><text x="78.9819%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.7319%" y="421" width="0.0803%" height="15" fill="rgb(226,106,4)" fg:x="981" fg:w="1"/><text x="78.9819%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.7319%" y="405" width="0.0803%" height="15" fill="rgb(251,2,27)" fg:x="981" fg:w="1"/><text x="78.9819%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.7319%" y="389" width="0.0803%" height="15" fill="rgb(236,208,0)" fg:x="981" fg:w="1"/><text x="78.9819%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.7319%" y="373" width="0.0803%" height="15" fill="rgb(211,66,17)" fg:x="981" fg:w="1"/><text x="78.9819%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.7319%" y="357" width="0.0803%" height="15" fill="rgb(216,129,9)" fg:x="981" fg:w="1"/><text x="78.9819%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.7319%" y="341" width="0.0803%" height="15" fill="rgb(215,130,23)" fg:x="981" fg:w="1"/><text x="78.9819%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.8122%" y="485" width="0.0803%" height="15" fill="rgb(253,157,11)" fg:x="982" fg:w="1"/><text x="79.0622%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.8122%" y="469" width="0.0803%" height="15" fill="rgb(224,25,14)" fg:x="982" fg:w="1"/><text x="79.0622%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.8122%" y="453" width="0.0803%" height="15" fill="rgb(238,16,7)" fg:x="982" fg:w="1"/><text x="79.0622%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.8122%" y="437" width="0.0803%" height="15" fill="rgb(228,74,11)" fg:x="982" fg:w="1"/><text x="79.0622%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.8122%" y="421" width="0.0803%" height="15" fill="rgb(239,221,27)" fg:x="982" fg:w="1"/><text x="79.0622%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.8122%" y="405" width="0.0803%" height="15" fill="rgb(229,166,18)" fg:x="982" fg:w="1"/><text x="79.0622%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.8122%" y="389" width="0.0803%" height="15" fill="rgb(254,94,46)" fg:x="982" fg:w="1"/><text x="79.0622%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.8122%" y="373" width="0.0803%" height="15" fill="rgb(241,79,19)" fg:x="982" fg:w="1"/><text x="79.0622%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.8122%" y="357" width="0.0803%" height="15" fill="rgb(228,99,51)" fg:x="982" fg:w="1"/><text x="79.0622%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.8122%" y="341" width="0.0803%" height="15" fill="rgb(211,15,6)" fg:x="982" fg:w="1"/><text x="79.0622%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.8122%" y="325" width="0.0803%" height="15" fill="rgb(245,107,54)" fg:x="982" fg:w="1"/><text x="79.0622%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.8122%" y="309" width="0.0803%" height="15" fill="rgb(243,3,2)" fg:x="982" fg:w="1"/><text x="79.0622%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.8122%" y="293" width="0.0803%" height="15" fill="rgb(206,122,10)" fg:x="982" fg:w="1"/><text x="79.0622%" y="303.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="78.8925%" y="341" width="0.0803%" height="15" fill="rgb(224,88,4)" fg:x="983" fg:w="1"/><text x="79.1425%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="78.8925%" y="325" width="0.0803%" height="15" fill="rgb(230,1,41)" fg:x="983" fg:w="1"/><text x="79.1425%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.8925%" y="309" width="0.0803%" height="15" fill="rgb(230,1,31)" fg:x="983" fg:w="1"/><text x="79.1425%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="78.8122%" y="533" width="0.2408%" height="15" fill="rgb(232,67,19)" fg:x="982" fg:w="3"/><text x="79.0622%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="78.8122%" y="517" width="0.2408%" height="15" fill="rgb(222,206,20)" fg:x="982" fg:w="3"/><text x="79.0622%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="78.8122%" y="501" width="0.2408%" height="15" fill="rgb(217,225,19)" fg:x="982" fg:w="3"/><text x="79.0622%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="78.8925%" y="485" width="0.1605%" height="15" fill="rgb(234,13,33)" fg:x="983" fg:w="2"/><text x="79.1425%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="78.8925%" y="469" width="0.1605%" height="15" fill="rgb(254,5,1)" fg:x="983" fg:w="2"/><text x="79.1425%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="78.8925%" y="453" width="0.1605%" height="15" fill="rgb(211,121,41)" fg:x="983" fg:w="2"/><text x="79.1425%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.8925%" y="437" width="0.1605%" height="15" fill="rgb(213,199,35)" fg:x="983" fg:w="2"/><text x="79.1425%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.8925%" y="421" width="0.1605%" height="15" fill="rgb(240,118,22)" fg:x="983" fg:w="2"/><text x="79.1425%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="78.8925%" y="405" width="0.1605%" height="15" fill="rgb(238,184,25)" fg:x="983" fg:w="2"/><text x="79.1425%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (2 samples, 0.16%)</title><rect x="78.8925%" y="389" width="0.1605%" height="15" fill="rgb(210,165,6)" fg:x="983" fg:w="2"/><text x="79.1425%" y="399.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (2 samples, 0.16%)</title><rect x="78.8925%" y="373" width="0.1605%" height="15" fill="rgb(235,149,5)" fg:x="983" fg:w="2"/><text x="79.1425%" y="383.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (2 samples, 0.16%)</title><rect x="78.8925%" y="357" width="0.1605%" height="15" fill="rgb(221,63,5)" fg:x="983" fg:w="2"/><text x="79.1425%" y="367.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="78.9727%" y="341" width="0.0803%" height="15" fill="rgb(250,44,41)" fg:x="984" fg:w="1"/><text x="79.2227%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.0530%" y="469" width="0.0803%" height="15" fill="rgb(235,112,47)" fg:x="985" fg:w="1"/><text x="79.3030%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="78.8122%" y="581" width="0.4815%" height="15" fill="rgb(252,176,34)" fg:x="982" fg:w="6"/><text x="79.0622%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="78.8122%" y="565" width="0.4815%" height="15" fill="rgb(234,50,19)" fg:x="982" fg:w="6"/><text x="79.0622%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="78.8122%" y="549" width="0.4815%" height="15" fill="rgb(241,195,31)" fg:x="982" fg:w="6"/><text x="79.0622%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="79.0530%" y="533" width="0.2408%" height="15" fill="rgb(212,93,11)" fg:x="985" fg:w="3"/><text x="79.3030%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="79.0530%" y="517" width="0.2408%" height="15" fill="rgb(254,98,51)" fg:x="985" fg:w="3"/><text x="79.3030%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="79.0530%" y="501" width="0.2408%" height="15" fill="rgb(246,18,45)" fg:x="985" fg:w="3"/><text x="79.3030%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="79.0530%" y="485" width="0.2408%" height="15" fill="rgb(215,148,23)" fg:x="985" fg:w="3"/><text x="79.3030%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.1332%" y="469" width="0.1605%" height="15" fill="rgb(227,22,7)" fg:x="986" fg:w="2"/><text x="79.3832%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.1332%" y="453" width="0.1605%" height="15" fill="rgb(207,210,37)" fg:x="986" fg:w="2"/><text x="79.3832%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="79.1332%" y="437" width="0.1605%" height="15" fill="rgb(247,147,42)" fg:x="986" fg:w="2"/><text x="79.3832%" y="447.50"></text></g><g><title>engine::session::internal::Added::find_refs (8 samples, 0.64%)</title><rect x="78.7319%" y="613" width="0.6421%" height="15" fill="rgb(226,213,14)" fg:x="981" fg:w="8"/><text x="78.9819%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.64%)</title><rect x="78.7319%" y="597" width="0.6421%" height="15" fill="rgb(223,18,10)" fg:x="981" fg:w="8"/><text x="78.9819%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2937%" y="581" width="0.0803%" height="15" fill="rgb(253,34,22)" fg:x="988" fg:w="1"/><text x="79.5437%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2937%" y="565" width="0.0803%" height="15" fill="rgb(222,90,31)" fg:x="988" fg:w="1"/><text x="79.5437%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="79.2937%" y="549" width="0.0803%" height="15" fill="rgb(220,182,30)" fg:x="988" fg:w="1"/><text x="79.5437%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.80%)</title><rect x="78.6517%" y="629" width="0.8026%" height="15" fill="rgb(229,170,12)" fg:x="980" fg:w="10"/><text x="78.9017%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="79.3740%" y="613" width="0.0803%" height="15" fill="rgb(210,101,21)" fg:x="989" fg:w="1"/><text x="79.6240%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="79.3740%" y="597" width="0.0803%" height="15" fill="rgb(237,177,31)" fg:x="989" fg:w="1"/><text x="79.6240%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.3740%" y="581" width="0.0803%" height="15" fill="rgb(215,91,34)" fg:x="989" fg:w="1"/><text x="79.6240%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.3740%" y="565" width="0.0803%" height="15" fill="rgb(229,206,16)" fg:x="989" fg:w="1"/><text x="79.6240%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.3740%" y="549" width="0.0803%" height="15" fill="rgb(235,207,10)" fg:x="989" fg:w="1"/><text x="79.6240%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.3740%" y="533" width="0.0803%" height="15" fill="rgb(247,18,10)" fg:x="989" fg:w="1"/><text x="79.6240%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.3740%" y="517" width="0.0803%" height="15" fill="rgb(232,4,6)" fg:x="989" fg:w="1"/><text x="79.6240%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.3740%" y="501" width="0.0803%" height="15" fill="rgb(247,93,45)" fg:x="989" fg:w="1"/><text x="79.6240%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.3740%" y="485" width="0.0803%" height="15" fill="rgb(240,181,18)" fg:x="989" fg:w="1"/><text x="79.6240%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.3740%" y="469" width="0.0803%" height="15" fill="rgb(208,224,0)" fg:x="989" fg:w="1"/><text x="79.6240%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.3740%" y="453" width="0.0803%" height="15" fill="rgb(224,207,54)" fg:x="989" fg:w="1"/><text x="79.6240%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="79.4543%" y="581" width="0.0803%" height="15" fill="rgb(217,152,29)" fg:x="990" fg:w="1"/><text x="79.7043%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.4543%" y="565" width="0.0803%" height="15" fill="rgb(243,78,27)" fg:x="990" fg:w="1"/><text x="79.7043%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.4543%" y="549" width="0.0803%" height="15" fill="rgb(228,111,9)" fg:x="990" fg:w="1"/><text x="79.7043%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.4543%" y="533" width="0.0803%" height="15" fill="rgb(230,213,21)" fg:x="990" fg:w="1"/><text x="79.7043%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (992 samples, 79.61%)</title><rect x="0.0000%" y="709" width="79.6148%" height="15" fill="rgb(248,50,36)" fg:x="0" fg:w="992"/><text x="0.2500%" y="719.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (992 samples, 79.61%)</title><rect x="0.0000%" y="693" width="79.6148%" height="15" fill="rgb(226,19,31)" fg:x="0" fg:w="992"/><text x="0.2500%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (992 samples, 79.61%)</title><rect x="0.0000%" y="677" width="79.6148%" height="15" fill="rgb(205,132,21)" fg:x="0" fg:w="992"/><text x="0.2500%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (859 samples, 68.94%)</title><rect x="10.6742%" y="661" width="68.9406%" height="15" fill="rgb(207,42,19)" fg:x="133" fg:w="859"/><text x="10.9242%" y="671.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (859 samples, 68.94%)</title><rect x="10.6742%" y="645" width="68.9406%" height="15" fill="rgb(229,69,35)" fg:x="133" fg:w="859"/><text x="10.9242%" y="655.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (2 samples, 0.16%)</title><rect x="79.4543%" y="629" width="0.1605%" height="15" fill="rgb(226,96,11)" fg:x="990" fg:w="2"/><text x="79.7043%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="79.4543%" y="613" width="0.1605%" height="15" fill="rgb(236,133,54)" fg:x="990" fg:w="2"/><text x="79.7043%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="79.4543%" y="597" width="0.1605%" height="15" fill="rgb(247,166,21)" fg:x="990" fg:w="2"/><text x="79.7043%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="79.5345%" y="581" width="0.0803%" height="15" fill="rgb(220,132,12)" fg:x="991" fg:w="1"/><text x="79.7845%" y="591.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="79.5345%" y="565" width="0.0803%" height="15" fill="rgb(233,27,30)" fg:x="991" fg:w="1"/><text x="79.7845%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.5345%" y="549" width="0.0803%" height="15" fill="rgb(246,161,27)" fg:x="991" fg:w="1"/><text x="79.7845%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.5345%" y="533" width="0.0803%" height="15" fill="rgb(240,56,3)" fg:x="991" fg:w="1"/><text x="79.7845%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.5345%" y="517" width="0.0803%" height="15" fill="rgb(242,190,9)" fg:x="991" fg:w="1"/><text x="79.7845%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.5345%" y="501" width="0.0803%" height="15" fill="rgb(234,3,52)" fg:x="991" fg:w="1"/><text x="79.7845%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.5345%" y="485" width="0.0803%" height="15" fill="rgb(220,221,19)" fg:x="991" fg:w="1"/><text x="79.7845%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.5345%" y="469" width="0.0803%" height="15" fill="rgb(247,178,30)" fg:x="991" fg:w="1"/><text x="79.7845%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.5345%" y="453" width="0.0803%" height="15" fill="rgb(234,212,27)" fg:x="991" fg:w="1"/><text x="79.7845%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.5345%" y="437" width="0.0803%" height="15" fill="rgb(226,199,38)" fg:x="991" fg:w="1"/><text x="79.7845%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="79.5345%" y="421" width="0.0803%" height="15" fill="rgb(248,114,22)" fg:x="991" fg:w="1"/><text x="79.7845%" y="431.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (1 samples, 0.08%)</title><rect x="79.6148%" y="661" width="0.0803%" height="15" fill="rgb(221,180,4)" fg:x="992" fg:w="1"/><text x="79.8648%" y="671.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (1 samples, 0.08%)</title><rect x="79.6148%" y="645" width="0.0803%" height="15" fill="rgb(220,229,24)" fg:x="992" fg:w="1"/><text x="79.8648%" y="655.50"></text></g><g><title>engine::session::Session::new (1 samples, 0.08%)</title><rect x="79.6148%" y="629" width="0.0803%" height="15" fill="rgb(226,184,27)" fg:x="992" fg:w="1"/><text x="79.8648%" y="639.50"></text></g><g><title>engine::session::Session::initialize (1 samples, 0.08%)</title><rect x="79.6148%" y="613" width="0.0803%" height="15" fill="rgb(232,99,15)" fg:x="992" fg:w="1"/><text x="79.8648%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (1 samples, 0.08%)</title><rect x="79.6148%" y="597" width="0.0803%" height="15" fill="rgb(250,167,16)" fg:x="992" fg:w="1"/><text x="79.8648%" y="607.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="79.6148%" y="581" width="0.0803%" height="15" fill="rgb(243,113,6)" fg:x="992" fg:w="1"/><text x="79.8648%" y="591.50"></text></g><g><title>libloading::safe::Library::new (1 samples, 0.08%)</title><rect x="79.6148%" y="565" width="0.0803%" height="15" fill="rgb(244,147,52)" fg:x="992" fg:w="1"/><text x="79.8648%" y="575.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="79.6148%" y="549" width="0.0803%" height="15" fill="rgb(235,59,50)" fg:x="992" fg:w="1"/><text x="79.8648%" y="559.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="79.6148%" y="533" width="0.0803%" height="15" fill="rgb(250,188,6)" fg:x="992" fg:w="1"/><text x="79.8648%" y="543.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="79.6148%" y="517" width="0.0803%" height="15" fill="rgb(236,173,11)" fg:x="992" fg:w="1"/><text x="79.8648%" y="527.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="79.6148%" y="501" width="0.0803%" height="15" fill="rgb(233,64,3)" fg:x="992" fg:w="1"/><text x="79.8648%" y="511.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="79.6148%" y="485" width="0.0803%" height="15" fill="rgb(207,92,7)" fg:x="992" fg:w="1"/><text x="79.8648%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.6950%" y="517" width="0.0803%" height="15" fill="rgb(221,30,19)" fg:x="993" fg:w="1"/><text x="79.9450%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.6950%" y="501" width="0.0803%" height="15" fill="rgb(245,22,49)" fg:x="993" fg:w="1"/><text x="79.9450%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="79.6950%" y="549" width="0.1605%" height="15" fill="rgb(218,39,20)" fg:x="993" fg:w="2"/><text x="79.9450%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="79.6950%" y="533" width="0.1605%" height="15" fill="rgb(222,144,21)" fg:x="993" fg:w="2"/><text x="79.9450%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.7753%" y="517" width="0.0803%" height="15" fill="rgb(222,78,51)" fg:x="994" fg:w="1"/><text x="80.0253%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.7753%" y="501" width="0.0803%" height="15" fill="rgb(248,213,53)" fg:x="994" fg:w="1"/><text x="80.0253%" y="511.50"></text></g><g><title>engine::session::Session::flush (3 samples, 0.24%)</title><rect x="79.6950%" y="645" width="0.2408%" height="15" fill="rgb(245,28,34)" fg:x="993" fg:w="3"/><text x="79.9450%" y="655.50"></text></g><g><title>engine::session::state::State::close (3 samples, 0.24%)</title><rect x="79.6950%" y="629" width="0.2408%" height="15" fill="rgb(229,186,26)" fg:x="993" fg:w="3"/><text x="79.9450%" y="639.50"></text></g><g><title>engine::session::state::State::flush_entities (3 samples, 0.24%)</title><rect x="79.6950%" y="613" width="0.2408%" height="15" fill="rgb(224,0,41)" fg:x="993" fg:w="3"/><text x="79.9450%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="79.6950%" y="597" width="0.2408%" height="15" fill="rgb(223,136,51)" fg:x="993" fg:w="3"/><text x="79.9450%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="79.6950%" y="581" width="0.2408%" height="15" fill="rgb(234,50,9)" fg:x="993" fg:w="3"/><text x="79.9450%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (3 samples, 0.24%)</title><rect x="79.6950%" y="565" width="0.2408%" height="15" fill="rgb(242,164,20)" fg:x="993" fg:w="3"/><text x="79.9450%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.8555%" y="549" width="0.0803%" height="15" fill="rgb(230,169,22)" fg:x="995" fg:w="1"/><text x="80.1055%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="79.8555%" y="533" width="0.0803%" height="15" fill="rgb(228,82,26)" fg:x="995" fg:w="1"/><text x="80.1055%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.8555%" y="517" width="0.0803%" height="15" fill="rgb(244,220,31)" fg:x="995" fg:w="1"/><text x="80.1055%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.8555%" y="501" width="0.0803%" height="15" fill="rgb(214,35,25)" fg:x="995" fg:w="1"/><text x="80.1055%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.9358%" y="501" width="0.0803%" height="15" fill="rgb(245,162,54)" fg:x="996" fg:w="1"/><text x="80.1858%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.9358%" y="485" width="0.0803%" height="15" fill="rgb(210,43,24)" fg:x="996" fg:w="1"/><text x="80.1858%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.9358%" y="469" width="0.0803%" height="15" fill="rgb(226,145,51)" fg:x="996" fg:w="1"/><text x="80.1858%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.9358%" y="453" width="0.0803%" height="15" fill="rgb(237,52,53)" fg:x="996" fg:w="1"/><text x="80.1858%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.9358%" y="437" width="0.0803%" height="15" fill="rgb(216,226,7)" fg:x="996" fg:w="1"/><text x="80.1858%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.9358%" y="421" width="0.0803%" height="15" fill="rgb(206,223,18)" fg:x="996" fg:w="1"/><text x="80.1858%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.9358%" y="405" width="0.0803%" height="15" fill="rgb(221,1,10)" fg:x="996" fg:w="1"/><text x="80.1858%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.9358%" y="389" width="0.0803%" height="15" fill="rgb(221,151,42)" fg:x="996" fg:w="1"/><text x="80.1858%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="79.9358%" y="517" width="0.1605%" height="15" fill="rgb(205,183,46)" fg:x="996" fg:w="2"/><text x="80.1858%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0161%" y="501" width="0.0803%" height="15" fill="rgb(239,229,1)" fg:x="997" fg:w="1"/><text x="80.2661%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0161%" y="485" width="0.0803%" height="15" fill="rgb(236,192,23)" fg:x="997" fg:w="1"/><text x="80.2661%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="80.0161%" y="469" width="0.0803%" height="15" fill="rgb(215,146,3)" fg:x="997" fg:w="1"/><text x="80.2661%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0161%" y="453" width="0.0803%" height="15" fill="rgb(235,52,27)" fg:x="997" fg:w="1"/><text x="80.2661%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0161%" y="437" width="0.0803%" height="15" fill="rgb(236,45,20)" fg:x="997" fg:w="1"/><text x="80.2661%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0161%" y="421" width="0.0803%" height="15" fill="rgb(235,86,41)" fg:x="997" fg:w="1"/><text x="80.2661%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.0161%" y="405" width="0.0803%" height="15" fill="rgb(235,27,27)" fg:x="997" fg:w="1"/><text x="80.2661%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.0963%" y="517" width="0.0803%" height="15" fill="rgb(232,4,34)" fg:x="998" fg:w="1"/><text x="80.3463%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="80.0963%" y="501" width="0.0803%" height="15" fill="rgb(215,22,10)" fg:x="998" fg:w="1"/><text x="80.3463%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.0963%" y="485" width="0.0803%" height="15" fill="rgb(230,228,27)" fg:x="998" fg:w="1"/><text x="80.3463%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.0963%" y="469" width="0.0803%" height="15" fill="rgb(216,26,51)" fg:x="998" fg:w="1"/><text x="80.3463%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.0963%" y="453" width="0.0803%" height="15" fill="rgb(225,180,50)" fg:x="998" fg:w="1"/><text x="80.3463%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.0963%" y="437" width="0.0803%" height="15" fill="rgb(236,211,2)" fg:x="998" fg:w="1"/><text x="80.3463%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.0963%" y="421" width="0.0803%" height="15" fill="rgb(250,51,20)" fg:x="998" fg:w="1"/><text x="80.3463%" y="431.50"></text></g><g><title>engine::session::Session::flush (4 samples, 0.32%)</title><rect x="79.9358%" y="629" width="0.3210%" height="15" fill="rgb(232,70,37)" fg:x="996" fg:w="4"/><text x="80.1858%" y="639.50"></text></g><g><title>engine::session::Session::save_changes (4 samples, 0.32%)</title><rect x="79.9358%" y="613" width="0.3210%" height="15" fill="rgb(226,183,39)" fg:x="996" fg:w="4"/><text x="80.1858%" y="623.50"></text></g><g><title>engine::session::state::State::close (4 samples, 0.32%)</title><rect x="79.9358%" y="597" width="0.3210%" height="15" fill="rgb(232,228,21)" fg:x="996" fg:w="4"/><text x="80.1858%" y="607.50"></text></g><g><title>engine::session::state::State::flush_entities (4 samples, 0.32%)</title><rect x="79.9358%" y="581" width="0.3210%" height="15" fill="rgb(251,118,32)" fg:x="996" fg:w="4"/><text x="80.1858%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="79.9358%" y="565" width="0.3210%" height="15" fill="rgb(235,172,38)" fg:x="996" fg:w="4"/><text x="80.1858%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="79.9358%" y="549" width="0.3210%" height="15" fill="rgb(235,63,18)" fg:x="996" fg:w="4"/><text x="80.1858%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (4 samples, 0.32%)</title><rect x="79.9358%" y="533" width="0.3210%" height="15" fill="rgb(225,4,7)" fg:x="996" fg:w="4"/><text x="80.1858%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (1 samples, 0.08%)</title><rect x="80.1766%" y="517" width="0.0803%" height="15" fill="rgb(231,61,1)" fg:x="999" fg:w="1"/><text x="80.4266%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="80.1766%" y="501" width="0.0803%" height="15" fill="rgb(241,155,22)" fg:x="999" fg:w="1"/><text x="80.4266%" y="511.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="80.1766%" y="485" width="0.0803%" height="15" fill="rgb(209,100,26)" fg:x="999" fg:w="1"/><text x="80.4266%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.1766%" y="469" width="0.0803%" height="15" fill="rgb(248,181,15)" fg:x="999" fg:w="1"/><text x="80.4266%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.1766%" y="453" width="0.0803%" height="15" fill="rgb(214,94,31)" fg:x="999" fg:w="1"/><text x="80.4266%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.1766%" y="437" width="0.0803%" height="15" fill="rgb(207,16,42)" fg:x="999" fg:w="1"/><text x="80.4266%" y="447.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="80.2568%" y="597" width="0.0803%" height="15" fill="rgb(208,127,13)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="80.2568%" y="581" width="0.0803%" height="15" fill="rgb(220,211,18)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.2568%" y="565" width="0.0803%" height="15" fill="rgb(221,55,38)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.2568%" y="549" width="0.0803%" height="15" fill="rgb(252,219,45)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.2568%" y="533" width="0.0803%" height="15" fill="rgb(248,53,35)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (6 samples, 0.48%)</title><rect x="79.9358%" y="645" width="0.4815%" height="15" fill="rgb(210,87,2)" fg:x="996" fg:w="6"/><text x="80.1858%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="80.2568%" y="629" width="0.1605%" height="15" fill="rgb(239,133,9)" fg:x="1000" fg:w="2"/><text x="80.5068%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="80.2568%" y="613" width="0.1605%" height="15" fill="rgb(214,114,5)" fg:x="1000" fg:w="2"/><text x="80.5068%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="80.3371%" y="597" width="0.0803%" height="15" fill="rgb(206,124,24)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3371%" y="581" width="0.0803%" height="15" fill="rgb(212,57,33)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.3371%" y="565" width="0.0803%" height="15" fill="rgb(246,21,20)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="80.3371%" y="549" width="0.0803%" height="15" fill="rgb(253,210,39)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="80.3371%" y="533" width="0.0803%" height="15" fill="rgb(209,187,24)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="80.3371%" y="517" width="0.0803%" height="15" fill="rgb(246,136,17)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3371%" y="501" width="0.0803%" height="15" fill="rgb(211,0,30)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="80.3371%" y="485" width="0.0803%" height="15" fill="rgb(216,199,7)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3371%" y="469" width="0.0803%" height="15" fill="rgb(207,210,19)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="479.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (10 samples, 0.80%)</title><rect x="79.6950%" y="661" width="0.8026%" height="15" fill="rgb(237,187,39)" fg:x="993" fg:w="10"/><text x="79.9450%" y="671.50"></text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (1 samples, 0.08%)</title><rect x="80.4173%" y="645" width="0.0803%" height="15" fill="rgb(243,194,42)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="80.4173%" y="629" width="0.0803%" height="15" fill="rgb(225,194,19)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="80.4173%" y="613" width="0.0803%" height="15" fill="rgb(224,192,14)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="80.4173%" y="597" width="0.0803%" height="15" fill="rgb(252,21,18)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="80.4173%" y="581" width="0.0803%" height="15" fill="rgb(229,69,19)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="80.4173%" y="565" width="0.0803%" height="15" fill="rgb(251,31,53)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="80.4173%" y="549" width="0.0803%" height="15" fill="rgb(218,39,50)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.4173%" y="533" width="0.0803%" height="15" fill="rgb(231,50,17)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.4976%" y="629" width="0.0803%" height="15" fill="rgb(223,217,31)" fg:x="1003" fg:w="1"/><text x="80.7476%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.4976%" y="613" width="0.0803%" height="15" fill="rgb(225,91,12)" fg:x="1003" fg:w="1"/><text x="80.7476%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.4976%" y="597" width="0.0803%" height="15" fill="rgb(242,58,43)" fg:x="1003" fg:w="1"/><text x="80.7476%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="80.5778%" y="549" width="0.0803%" height="15" fill="rgb(242,32,21)" fg:x="1004" fg:w="1"/><text x="80.8278%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.5778%" y="533" width="0.0803%" height="15" fill="rgb(211,127,1)" fg:x="1004" fg:w="1"/><text x="80.8278%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="80.5778%" y="565" width="0.1605%" height="15" fill="rgb(231,93,13)" fg:x="1004" fg:w="2"/><text x="80.8278%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.6581%" y="549" width="0.0803%" height="15" fill="rgb(218,83,4)" fg:x="1005" fg:w="1"/><text x="80.9081%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.6581%" y="533" width="0.0803%" height="15" fill="rgb(230,218,10)" fg:x="1005" fg:w="1"/><text x="80.9081%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.6581%" y="517" width="0.0803%" height="15" fill="rgb(235,127,18)" fg:x="1005" fg:w="1"/><text x="80.9081%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.7384%" y="565" width="0.0803%" height="15" fill="rgb(213,137,46)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="80.7384%" y="549" width="0.0803%" height="15" fill="rgb(235,179,24)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.7384%" y="533" width="0.0803%" height="15" fill="rgb(247,58,49)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.7384%" y="517" width="0.0803%" height="15" fill="rgb(242,222,5)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.8186%" y="517" width="0.0803%" height="15" fill="rgb(230,16,48)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="527.50"></text></g><g><title>engine::session::Session::close (6 samples, 0.48%)</title><rect x="80.4976%" y="661" width="0.4815%" height="15" fill="rgb(241,192,16)" fg:x="1003" fg:w="6"/><text x="80.7476%" y="671.50"></text></g><g><title>engine::session::state::State::close (6 samples, 0.48%)</title><rect x="80.4976%" y="645" width="0.4815%" height="15" fill="rgb(209,25,37)" fg:x="1003" fg:w="6"/><text x="80.7476%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (5 samples, 0.40%)</title><rect x="80.5778%" y="629" width="0.4013%" height="15" fill="rgb(229,215,13)" fg:x="1004" fg:w="5"/><text x="80.8278%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="80.5778%" y="613" width="0.4013%" height="15" fill="rgb(213,199,8)" fg:x="1004" fg:w="5"/><text x="80.8278%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="80.5778%" y="597" width="0.4013%" height="15" fill="rgb(226,151,19)" fg:x="1004" fg:w="5"/><text x="80.8278%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (5 samples, 0.40%)</title><rect x="80.5778%" y="581" width="0.4013%" height="15" fill="rgb(254,183,12)" fg:x="1004" fg:w="5"/><text x="80.8278%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="80.8186%" y="565" width="0.1605%" height="15" fill="rgb(245,8,3)" fg:x="1007" fg:w="2"/><text x="81.0686%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="80.8186%" y="549" width="0.1605%" height="15" fill="rgb(229,159,35)" fg:x="1007" fg:w="2"/><text x="81.0686%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="80.8186%" y="533" width="0.1605%" height="15" fill="rgb(209,145,1)" fg:x="1007" fg:w="2"/><text x="81.0686%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="80.8989%" y="517" width="0.0803%" height="15" fill="rgb(228,183,16)" fg:x="1008" fg:w="1"/><text x="81.1489%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.9791%" y="341" width="0.0803%" height="15" fill="rgb(222,68,0)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.9791%" y="325" width="0.0803%" height="15" fill="rgb(209,130,50)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.9791%" y="309" width="0.0803%" height="15" fill="rgb(228,176,44)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.9791%" y="293" width="0.0803%" height="15" fill="rgb(221,164,2)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.9791%" y="277" width="0.0803%" height="15" fill="rgb(249,199,49)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.9791%" y="261" width="0.0803%" height="15" fill="rgb(228,205,53)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="271.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="80.9791%" y="565" width="0.1605%" height="15" fill="rgb(235,77,20)" fg:x="1009" fg:w="2"/><text x="81.2291%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="80.9791%" y="549" width="0.1605%" height="15" fill="rgb(227,147,34)" fg:x="1009" fg:w="2"/><text x="81.2291%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="80.9791%" y="533" width="0.1605%" height="15" fill="rgb(226,203,52)" fg:x="1009" fg:w="2"/><text x="81.2291%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="80.9791%" y="517" width="0.1605%" height="15" fill="rgb(226,186,23)" fg:x="1009" fg:w="2"/><text x="81.2291%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="80.9791%" y="501" width="0.1605%" height="15" fill="rgb(236,13,30)" fg:x="1009" fg:w="2"/><text x="81.2291%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="80.9791%" y="485" width="0.1605%" height="15" fill="rgb(228,121,22)" fg:x="1009" fg:w="2"/><text x="81.2291%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="80.9791%" y="469" width="0.1605%" height="15" fill="rgb(248,222,26)" fg:x="1009" fg:w="2"/><text x="81.2291%" y="479.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="80.9791%" y="453" width="0.1605%" height="15" fill="rgb(251,72,25)" fg:x="1009" fg:w="2"/><text x="81.2291%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="80.9791%" y="437" width="0.1605%" height="15" fill="rgb(223,114,24)" fg:x="1009" fg:w="2"/><text x="81.2291%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="80.9791%" y="421" width="0.1605%" height="15" fill="rgb(232,190,43)" fg:x="1009" fg:w="2"/><text x="81.2291%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="80.9791%" y="405" width="0.1605%" height="15" fill="rgb(208,90,0)" fg:x="1009" fg:w="2"/><text x="81.2291%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="80.9791%" y="389" width="0.1605%" height="15" fill="rgb(234,149,31)" fg:x="1009" fg:w="2"/><text x="81.2291%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="80.9791%" y="373" width="0.1605%" height="15" fill="rgb(235,188,36)" fg:x="1009" fg:w="2"/><text x="81.2291%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="80.9791%" y="357" width="0.1605%" height="15" fill="rgb(219,59,51)" fg:x="1009" fg:w="2"/><text x="81.2291%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="81.0594%" y="341" width="0.0803%" height="15" fill="rgb(236,101,40)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.0594%" y="325" width="0.0803%" height="15" fill="rgb(235,33,7)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="81.2199%" y="405" width="0.0803%" height="15" fill="rgb(213,169,26)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="415.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="81.2199%" y="389" width="0.0803%" height="15" fill="rgb(218,99,34)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="81.2199%" y="373" width="0.0803%" height="15" fill="rgb(210,57,24)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="81.2199%" y="357" width="0.0803%" height="15" fill="rgb(231,181,54)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.2199%" y="341" width="0.0803%" height="15" fill="rgb(251,188,48)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="81.2199%" y="325" width="0.0803%" height="15" fill="rgb(243,12,45)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.2199%" y="309" width="0.0803%" height="15" fill="rgb(250,197,9)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="81.2199%" y="293" width="0.0803%" height="15" fill="rgb(235,149,35)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.2199%" y="277" width="0.0803%" height="15" fill="rgb(219,27,19)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="287.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="81.3804%" y="389" width="0.0803%" height="15" fill="rgb(244,78,31)" fg:x="1014" fg:w="1"/><text x="81.6304%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.4607%" y="357" width="0.0803%" height="15" fill="rgb(241,13,4)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.4607%" y="341" width="0.0803%" height="15" fill="rgb(212,194,26)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.4607%" y="325" width="0.0803%" height="15" fill="rgb(236,80,11)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.4607%" y="309" width="0.0803%" height="15" fill="rgb(206,1,24)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.4607%" y="293" width="0.0803%" height="15" fill="rgb(238,215,50)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.4607%" y="277" width="0.0803%" height="15" fill="rgb(254,126,32)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.4607%" y="261" width="0.0803%" height="15" fill="rgb(206,111,53)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.4607%" y="245" width="0.0803%" height="15" fill="rgb(218,72,44)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.4607%" y="229" width="0.0803%" height="15" fill="rgb(238,25,3)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.4607%" y="213" width="0.0803%" height="15" fill="rgb(250,191,7)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="81.4607%" y="197" width="0.0803%" height="15" fill="rgb(238,56,30)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="81.4607%" y="181" width="0.0803%" height="15" fill="rgb(210,27,45)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="81.4607%" y="165" width="0.0803%" height="15" fill="rgb(207,10,50)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="81.4607%" y="149" width="0.0803%" height="15" fill="rgb(249,30,23)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="159.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="81.3002%" y="405" width="0.3210%" height="15" fill="rgb(250,80,12)" fg:x="1013" fg:w="4"/><text x="81.5502%" y="415.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="81.4607%" y="389" width="0.1605%" height="15" fill="rgb(210,221,37)" fg:x="1015" fg:w="2"/><text x="81.7107%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="81.4607%" y="373" width="0.1605%" height="15" fill="rgb(205,96,24)" fg:x="1015" fg:w="2"/><text x="81.7107%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.5409%" y="357" width="0.0803%" height="15" fill="rgb(247,104,22)" fg:x="1016" fg:w="1"/><text x="81.7909%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="81.5409%" y="341" width="0.0803%" height="15" fill="rgb(222,61,53)" fg:x="1016" fg:w="1"/><text x="81.7909%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="81.6212%" y="405" width="0.0803%" height="15" fill="rgb(241,11,53)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.6212%" y="389" width="0.0803%" height="15" fill="rgb(230,111,47)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="81.6212%" y="373" width="0.0803%" height="15" fill="rgb(218,187,29)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="81.6212%" y="357" width="0.0803%" height="15" fill="rgb(210,121,46)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.6212%" y="341" width="0.0803%" height="15" fill="rgb(250,43,19)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.6212%" y="325" width="0.0803%" height="15" fill="rgb(238,61,12)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.6212%" y="309" width="0.0803%" height="15" fill="rgb(251,198,9)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.8620%" y="261" width="0.0803%" height="15" fill="rgb(214,192,38)" fg:x="1020" fg:w="1"/><text x="82.1120%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="81.9422%" y="261" width="0.1605%" height="15" fill="rgb(214,73,19)" fg:x="1021" fg:w="2"/><text x="82.1922%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="81.9422%" y="245" width="0.1605%" height="15" fill="rgb(249,222,49)" fg:x="1021" fg:w="2"/><text x="82.1922%" y="255.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="82.1027%" y="245" width="0.0803%" height="15" fill="rgb(231,181,54)" fg:x="1023" fg:w="1"/><text x="82.3527%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="82.1027%" y="261" width="0.1605%" height="15" fill="rgb(240,1,13)" fg:x="1023" fg:w="2"/><text x="82.3527%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="82.1830%" y="245" width="0.0803%" height="15" fill="rgb(225,21,16)" fg:x="1024" fg:w="1"/><text x="82.4330%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.1830%" y="229" width="0.0803%" height="15" fill="rgb(246,176,50)" fg:x="1024" fg:w="1"/><text x="82.4330%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="82.2632%" y="213" width="0.0803%" height="15" fill="rgb(208,96,50)" fg:x="1025" fg:w="1"/><text x="82.5132%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.2632%" y="197" width="0.0803%" height="15" fill="rgb(240,219,19)" fg:x="1025" fg:w="1"/><text x="82.5132%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.2632%" y="181" width="0.0803%" height="15" fill="rgb(234,73,5)" fg:x="1025" fg:w="1"/><text x="82.5132%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.2632%" y="165" width="0.0803%" height="15" fill="rgb(225,52,53)" fg:x="1025" fg:w="1"/><text x="82.5132%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.5040%" y="197" width="0.0803%" height="15" fill="rgb(250,12,14)" fg:x="1028" fg:w="1"/><text x="82.7540%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="82.5843%" y="197" width="0.0803%" height="15" fill="rgb(242,185,54)" fg:x="1029" fg:w="1"/><text x="82.8343%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="82.6645%" y="181" width="0.0803%" height="15" fill="rgb(211,206,31)" fg:x="1030" fg:w="1"/><text x="82.9145%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.6645%" y="165" width="0.0803%" height="15" fill="rgb(252,10,33)" fg:x="1030" fg:w="1"/><text x="82.9145%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.6645%" y="149" width="0.0803%" height="15" fill="rgb(216,26,7)" fg:x="1030" fg:w="1"/><text x="82.9145%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.6645%" y="133" width="0.0803%" height="15" fill="rgb(228,112,40)" fg:x="1030" fg:w="1"/><text x="82.9145%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 3.93%)</title><rect x="82.2632%" y="245" width="3.9326%" height="15" fill="rgb(212,21,16)" fg:x="1025" fg:w="49"/><text x="82.5132%" y="255.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (49 samples, 3.93%)</title><rect x="82.2632%" y="229" width="3.9326%" height="15" fill="rgb(249,3,29)" fg:x="1025" fg:w="49"/><text x="82.5132%" y="239.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (48 samples, 3.85%)</title><rect x="82.3435%" y="213" width="3.8523%" height="15" fill="rgb(221,42,51)" fg:x="1026" fg:w="48"/><text x="82.5935%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (44 samples, 3.53%)</title><rect x="82.6645%" y="197" width="3.5313%" height="15" fill="rgb(225,90,21)" fg:x="1030" fg:w="44"/><text x="82.9145%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (43 samples, 3.45%)</title><rect x="82.7448%" y="181" width="3.4510%" height="15" fill="rgb(242,131,5)" fg:x="1031" fg:w="43"/><text x="82.9948%" y="191.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (43 samples, 3.45%)</title><rect x="82.7448%" y="165" width="3.4510%" height="15" fill="rgb(220,187,28)" fg:x="1031" fg:w="43"/><text x="82.9948%" y="175.50">all..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="86.2761%" y="229" width="0.1605%" height="15" fill="rgb(210,75,48)" fg:x="1075" fg:w="2"/><text x="86.5261%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="86.4366%" y="229" width="0.2408%" height="15" fill="rgb(211,91,40)" fg:x="1077" fg:w="3"/><text x="86.6866%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (62 samples, 4.98%)</title><rect x="81.7817%" y="277" width="4.9759%" height="15" fill="rgb(205,43,18)" fg:x="1019" fg:w="62"/><text x="82.0317%" y="287.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (56 samples, 4.49%)</title><rect x="82.2632%" y="261" width="4.4944%" height="15" fill="rgb(207,123,11)" fg:x="1025" fg:w="56"/><text x="82.5132%" y="271.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="86.1958%" y="245" width="0.5618%" height="15" fill="rgb(235,89,39)" fg:x="1074" fg:w="7"/><text x="86.4458%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="86.6774%" y="229" width="0.0803%" height="15" fill="rgb(245,217,27)" fg:x="1080" fg:w="1"/><text x="86.9274%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="86.6774%" y="213" width="0.0803%" height="15" fill="rgb(216,55,17)" fg:x="1080" fg:w="1"/><text x="86.9274%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.6774%" y="197" width="0.0803%" height="15" fill="rgb(252,116,44)" fg:x="1080" fg:w="1"/><text x="86.9274%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.6774%" y="181" width="0.0803%" height="15" fill="rgb(229,153,4)" fg:x="1080" fg:w="1"/><text x="86.9274%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.6774%" y="165" width="0.0803%" height="15" fill="rgb(222,24,35)" fg:x="1080" fg:w="1"/><text x="86.9274%" y="175.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="86.8379%" y="229" width="0.0803%" height="15" fill="rgb(214,26,20)" fg:x="1082" fg:w="1"/><text x="87.0879%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.8379%" y="213" width="0.0803%" height="15" fill="rgb(215,14,45)" fg:x="1082" fg:w="1"/><text x="87.0879%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.8379%" y="197" width="0.0803%" height="15" fill="rgb(217,212,50)" fg:x="1082" fg:w="1"/><text x="87.0879%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="86.7576%" y="277" width="0.2408%" height="15" fill="rgb(230,172,52)" fg:x="1081" fg:w="3"/><text x="87.0076%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="86.7576%" y="261" width="0.2408%" height="15" fill="rgb(210,48,36)" fg:x="1081" fg:w="3"/><text x="87.0076%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="86.8379%" y="245" width="0.1605%" height="15" fill="rgb(216,213,32)" fg:x="1082" fg:w="2"/><text x="87.0879%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="86.9181%" y="229" width="0.0803%" height="15" fill="rgb(237,202,41)" fg:x="1083" fg:w="1"/><text x="87.1681%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="86.9181%" y="213" width="0.0803%" height="15" fill="rgb(209,14,29)" fg:x="1083" fg:w="1"/><text x="87.1681%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="86.9181%" y="197" width="0.0803%" height="15" fill="rgb(219,29,3)" fg:x="1083" fg:w="1"/><text x="87.1681%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (68 samples, 5.46%)</title><rect x="81.7817%" y="325" width="5.4575%" height="15" fill="rgb(229,13,49)" fg:x="1019" fg:w="68"/><text x="82.0317%" y="335.50">&lt;regex:..</text></g><g><title>regex::builders::Builder::build_one_string (68 samples, 5.46%)</title><rect x="81.7817%" y="309" width="5.4575%" height="15" fill="rgb(210,206,2)" fg:x="1019" fg:w="68"/><text x="82.0317%" y="319.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (68 samples, 5.46%)</title><rect x="81.7817%" y="293" width="5.4575%" height="15" fill="rgb(216,154,46)" fg:x="1019" fg:w="68"/><text x="82.0317%" y="303.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="86.9984%" y="277" width="0.2408%" height="15" fill="rgb(211,170,52)" fg:x="1084" fg:w="3"/><text x="87.2484%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="86.9984%" y="261" width="0.2408%" height="15" fill="rgb(233,109,47)" fg:x="1084" fg:w="3"/><text x="87.2484%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="87.0787%" y="245" width="0.1605%" height="15" fill="rgb(208,212,30)" fg:x="1085" fg:w="2"/><text x="87.3287%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="87.1589%" y="229" width="0.0803%" height="15" fill="rgb(215,190,19)" fg:x="1086" fg:w="1"/><text x="87.4089%" y="239.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="87.1589%" y="213" width="0.0803%" height="15" fill="rgb(207,164,53)" fg:x="1086" fg:w="1"/><text x="87.4089%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="87.3194%" y="277" width="0.1605%" height="15" fill="rgb(213,87,49)" fg:x="1088" fg:w="2"/><text x="87.5694%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="87.3194%" y="261" width="0.1605%" height="15" fill="rgb(241,216,24)" fg:x="1088" fg:w="2"/><text x="87.5694%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.3997%" y="245" width="0.0803%" height="15" fill="rgb(241,123,45)" fg:x="1089" fg:w="1"/><text x="87.6497%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="87.3997%" y="229" width="0.0803%" height="15" fill="rgb(220,36,15)" fg:x="1089" fg:w="1"/><text x="87.6497%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (73 samples, 5.86%)</title><rect x="81.7014%" y="341" width="5.8587%" height="15" fill="rgb(215,202,9)" fg:x="1018" fg:w="73"/><text x="81.9514%" y="351.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="87.2392%" y="325" width="0.3210%" height="15" fill="rgb(252,71,26)" fg:x="1087" fg:w="4"/><text x="87.4892%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="87.3194%" y="309" width="0.2408%" height="15" fill="rgb(243,195,19)" fg:x="1088" fg:w="3"/><text x="87.5694%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="87.3194%" y="293" width="0.2408%" height="15" fill="rgb(207,167,27)" fg:x="1088" fg:w="3"/><text x="87.5694%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="87.4799%" y="277" width="0.0803%" height="15" fill="rgb(250,146,54)" fg:x="1090" fg:w="1"/><text x="87.7299%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="87.4799%" y="261" width="0.0803%" height="15" fill="rgb(245,79,9)" fg:x="1090" fg:w="1"/><text x="87.7299%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.4799%" y="245" width="0.0803%" height="15" fill="rgb(234,197,22)" fg:x="1090" fg:w="1"/><text x="87.7299%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="87.5602%" y="277" width="0.0803%" height="15" fill="rgb(221,52,48)" fg:x="1091" fg:w="1"/><text x="87.8102%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="87.6404%" y="261" width="0.1605%" height="15" fill="rgb(235,80,0)" fg:x="1092" fg:w="2"/><text x="87.8904%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="87.6404%" y="245" width="0.1605%" height="15" fill="rgb(221,117,53)" fg:x="1092" fg:w="2"/><text x="87.8904%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="87.8010%" y="261" width="0.0803%" height="15" fill="rgb(239,48,47)" fg:x="1094" fg:w="1"/><text x="88.0510%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="87.8010%" y="245" width="0.0803%" height="15" fill="rgb(227,191,52)" fg:x="1094" fg:w="1"/><text x="88.0510%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="87.8010%" y="229" width="0.0803%" height="15" fill="rgb(241,118,1)" fg:x="1094" fg:w="1"/><text x="88.0510%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="87.8010%" y="213" width="0.0803%" height="15" fill="rgb(240,85,3)" fg:x="1094" fg:w="1"/><text x="88.0510%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.8010%" y="197" width="0.0803%" height="15" fill="rgb(237,68,37)" fg:x="1094" fg:w="1"/><text x="88.0510%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.8010%" y="181" width="0.0803%" height="15" fill="rgb(212,9,20)" fg:x="1094" fg:w="1"/><text x="88.0510%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.8010%" y="165" width="0.0803%" height="15" fill="rgb(218,84,17)" fg:x="1094" fg:w="1"/><text x="88.0510%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="87.8812%" y="229" width="0.1605%" height="15" fill="rgb(235,147,20)" fg:x="1095" fg:w="2"/><text x="88.1312%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="87.9615%" y="213" width="0.0803%" height="15" fill="rgb(208,224,1)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (5 samples, 0.40%)</title><rect x="87.8812%" y="261" width="0.4013%" height="15" fill="rgb(232,97,50)" fg:x="1095" fg:w="5"/><text x="88.1312%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="87.8812%" y="245" width="0.4013%" height="15" fill="rgb(238,15,45)" fg:x="1095" fg:w="5"/><text x="88.1312%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="88.0417%" y="229" width="0.2408%" height="15" fill="rgb(231,46,18)" fg:x="1097" fg:w="3"/><text x="88.2917%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="88.0417%" y="213" width="0.2408%" height="15" fill="rgb(254,169,10)" fg:x="1097" fg:w="3"/><text x="88.2917%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="88.1220%" y="197" width="0.1605%" height="15" fill="rgb(243,169,30)" fg:x="1098" fg:w="2"/><text x="88.3720%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="88.2825%" y="197" width="0.0803%" height="15" fill="rgb(236,90,49)" fg:x="1100" fg:w="1"/><text x="88.5325%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="88.3628%" y="149" width="0.0803%" height="15" fill="rgb(218,80,15)" fg:x="1101" fg:w="1"/><text x="88.6128%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="88.4430%" y="149" width="0.1605%" height="15" fill="rgb(222,115,37)" fg:x="1102" fg:w="2"/><text x="88.6930%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.5233%" y="133" width="0.0803%" height="15" fill="rgb(227,0,6)" fg:x="1103" fg:w="1"/><text x="88.7733%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.5233%" y="117" width="0.0803%" height="15" fill="rgb(217,189,13)" fg:x="1103" fg:w="1"/><text x="88.7733%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.5233%" y="101" width="0.0803%" height="15" fill="rgb(220,74,19)" fg:x="1103" fg:w="1"/><text x="88.7733%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="88.6035%" y="149" width="0.0803%" height="15" fill="rgb(224,81,18)" fg:x="1104" fg:w="1"/><text x="88.8535%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="88.6838%" y="149" width="0.0803%" height="15" fill="rgb(245,178,48)" fg:x="1105" fg:w="1"/><text x="88.9338%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (6 samples, 0.48%)</title><rect x="88.7640%" y="149" width="0.4815%" height="15" fill="rgb(207,78,24)" fg:x="1106" fg:w="6"/><text x="89.0140%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (6 samples, 0.48%)</title><rect x="88.7640%" y="133" width="0.4815%" height="15" fill="rgb(223,222,30)" fg:x="1106" fg:w="6"/><text x="89.0140%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (6 samples, 0.48%)</title><rect x="88.7640%" y="117" width="0.4815%" height="15" fill="rgb(234,101,12)" fg:x="1106" fg:w="6"/><text x="89.0140%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="89.2456%" y="149" width="0.0803%" height="15" fill="rgb(209,80,46)" fg:x="1112" fg:w="1"/><text x="89.4956%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 1.12%)</title><rect x="88.2825%" y="245" width="1.1236%" height="15" fill="rgb(228,79,14)" fg:x="1100" fg:w="14"/><text x="88.5325%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (14 samples, 1.12%)</title><rect x="88.2825%" y="229" width="1.1236%" height="15" fill="rgb(220,219,34)" fg:x="1100" fg:w="14"/><text x="88.5325%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (14 samples, 1.12%)</title><rect x="88.2825%" y="213" width="1.1236%" height="15" fill="rgb(207,80,21)" fg:x="1100" fg:w="14"/><text x="88.5325%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (13 samples, 1.04%)</title><rect x="88.3628%" y="197" width="1.0433%" height="15" fill="rgb(210,154,44)" fg:x="1101" fg:w="13"/><text x="88.6128%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (13 samples, 1.04%)</title><rect x="88.3628%" y="181" width="1.0433%" height="15" fill="rgb(246,44,39)" fg:x="1101" fg:w="13"/><text x="88.6128%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (13 samples, 1.04%)</title><rect x="88.3628%" y="165" width="1.0433%" height="15" fill="rgb(252,175,13)" fg:x="1101" fg:w="13"/><text x="88.6128%" y="175.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="89.3258%" y="149" width="0.0803%" height="15" fill="rgb(211,50,39)" fg:x="1113" fg:w="1"/><text x="89.5758%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.3258%" y="133" width="0.0803%" height="15" fill="rgb(231,204,27)" fg:x="1113" fg:w="1"/><text x="89.5758%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.3258%" y="117" width="0.0803%" height="15" fill="rgb(253,26,34)" fg:x="1113" fg:w="1"/><text x="89.5758%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.3258%" y="101" width="0.0803%" height="15" fill="rgb(207,139,38)" fg:x="1113" fg:w="1"/><text x="89.5758%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.4061%" y="229" width="0.0803%" height="15" fill="rgb(248,54,27)" fg:x="1114" fg:w="1"/><text x="89.6561%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="89.4864%" y="229" width="0.0803%" height="15" fill="rgb(234,25,33)" fg:x="1115" fg:w="1"/><text x="89.7364%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (26 samples, 2.09%)</title><rect x="87.6404%" y="277" width="2.0867%" height="15" fill="rgb(249,107,47)" fg:x="1092" fg:w="26"/><text x="87.8904%" y="287.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (18 samples, 1.44%)</title><rect x="88.2825%" y="261" width="1.4446%" height="15" fill="rgb(230,190,31)" fg:x="1100" fg:w="18"/><text x="88.5325%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="89.4061%" y="245" width="0.3210%" height="15" fill="rgb(238,173,45)" fg:x="1114" fg:w="4"/><text x="89.6561%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="89.5666%" y="229" width="0.1605%" height="15" fill="rgb(222,16,50)" fg:x="1116" fg:w="2"/><text x="89.8166%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.6469%" y="213" width="0.0803%" height="15" fill="rgb(251,204,47)" fg:x="1117" fg:w="1"/><text x="89.8969%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.6469%" y="197" width="0.0803%" height="15" fill="rgb(225,12,3)" fg:x="1117" fg:w="1"/><text x="89.8969%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.6469%" y="181" width="0.0803%" height="15" fill="rgb(214,208,22)" fg:x="1117" fg:w="1"/><text x="89.8969%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (28 samples, 2.25%)</title><rect x="87.5602%" y="325" width="2.2472%" height="15" fill="rgb(240,57,32)" fg:x="1091" fg:w="28"/><text x="87.8102%" y="335.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (28 samples, 2.25%)</title><rect x="87.5602%" y="309" width="2.2472%" height="15" fill="rgb(243,113,48)" fg:x="1091" fg:w="28"/><text x="87.8102%" y="319.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (28 samples, 2.25%)</title><rect x="87.5602%" y="293" width="2.2472%" height="15" fill="rgb(225,135,30)" fg:x="1091" fg:w="28"/><text x="87.8102%" y="303.50">r..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="89.7271%" y="277" width="0.0803%" height="15" fill="rgb(222,3,53)" fg:x="1118" fg:w="1"/><text x="89.9771%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="89.7271%" y="261" width="0.0803%" height="15" fill="rgb(243,142,2)" fg:x="1118" fg:w="1"/><text x="89.9771%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="89.7271%" y="245" width="0.0803%" height="15" fill="rgb(233,67,14)" fg:x="1118" fg:w="1"/><text x="89.9771%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="89.7271%" y="229" width="0.0803%" height="15" fill="rgb(245,125,36)" fg:x="1118" fg:w="1"/><text x="89.9771%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="89.8074%" y="293" width="0.0803%" height="15" fill="rgb(225,199,6)" fg:x="1119" fg:w="1"/><text x="90.0574%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="89.8074%" y="277" width="0.0803%" height="15" fill="rgb(244,71,6)" fg:x="1119" fg:w="1"/><text x="90.0574%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="89.8074%" y="261" width="0.0803%" height="15" fill="rgb(225,62,9)" fg:x="1119" fg:w="1"/><text x="90.0574%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.8074%" y="245" width="0.0803%" height="15" fill="rgb(246,139,53)" fg:x="1119" fg:w="1"/><text x="90.0574%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="89.8074%" y="325" width="0.1605%" height="15" fill="rgb(243,161,46)" fg:x="1119" fg:w="2"/><text x="90.0574%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="89.8074%" y="309" width="0.1605%" height="15" fill="rgb(236,153,7)" fg:x="1119" fg:w="2"/><text x="90.0574%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="89.8876%" y="293" width="0.0803%" height="15" fill="rgb(248,42,35)" fg:x="1120" fg:w="1"/><text x="90.1376%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="89.8876%" y="277" width="0.0803%" height="15" fill="rgb(250,17,31)" fg:x="1120" fg:w="1"/><text x="90.1376%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.8876%" y="261" width="0.0803%" height="15" fill="rgb(248,138,14)" fg:x="1120" fg:w="1"/><text x="90.1376%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="90.0482%" y="261" width="0.0803%" height="15" fill="rgb(228,161,3)" fg:x="1122" fg:w="1"/><text x="90.2982%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.0482%" y="245" width="0.0803%" height="15" fill="rgb(248,116,17)" fg:x="1122" fg:w="1"/><text x="90.2982%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.0482%" y="229" width="0.0803%" height="15" fill="rgb(207,78,24)" fg:x="1122" fg:w="1"/><text x="90.2982%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="90.2889%" y="229" width="0.1605%" height="15" fill="rgb(234,99,48)" fg:x="1125" fg:w="2"/><text x="90.5389%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="90.2889%" y="213" width="0.1605%" height="15" fill="rgb(242,22,26)" fg:x="1125" fg:w="2"/><text x="90.5389%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="90.2889%" y="197" width="0.1605%" height="15" fill="rgb(227,78,32)" fg:x="1125" fg:w="2"/><text x="90.5389%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (37 samples, 2.97%)</title><rect x="87.5602%" y="341" width="2.9695%" height="15" fill="rgb(226,189,43)" fg:x="1091" fg:w="37"/><text x="87.8102%" y="351.50">ind..</text></g><g><title>regex::regex::string::Regex::is_match_at (7 samples, 0.56%)</title><rect x="89.9679%" y="325" width="0.5618%" height="15" fill="rgb(227,218,35)" fg:x="1121" fg:w="7"/><text x="90.2179%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="89.9679%" y="309" width="0.5618%" height="15" fill="rgb(206,111,40)" fg:x="1121" fg:w="7"/><text x="90.2179%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="89.9679%" y="293" width="0.5618%" height="15" fill="rgb(208,217,22)" fg:x="1121" fg:w="7"/><text x="90.2179%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="89.9679%" y="277" width="0.5618%" height="15" fill="rgb(248,20,20)" fg:x="1121" fg:w="7"/><text x="90.2179%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="90.1284%" y="261" width="0.4013%" height="15" fill="rgb(239,155,16)" fg:x="1123" fg:w="5"/><text x="90.3784%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="90.1284%" y="245" width="0.4013%" height="15" fill="rgb(238,171,46)" fg:x="1123" fg:w="5"/><text x="90.3784%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="90.4494%" y="229" width="0.0803%" height="15" fill="rgb(248,11,36)" fg:x="1127" fg:w="1"/><text x="90.6994%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.5297%" y="245" width="0.0803%" height="15" fill="rgb(220,148,37)" fg:x="1128" fg:w="1"/><text x="90.7797%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="90.6100%" y="245" width="0.0803%" height="15" fill="rgb(218,144,42)" fg:x="1129" fg:w="1"/><text x="90.8600%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="90.6100%" y="229" width="0.0803%" height="15" fill="rgb(245,20,20)" fg:x="1129" fg:w="1"/><text x="90.8600%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.6100%" y="213" width="0.0803%" height="15" fill="rgb(240,111,48)" fg:x="1129" fg:w="1"/><text x="90.8600%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="90.6902%" y="245" width="0.0803%" height="15" fill="rgb(237,225,32)" fg:x="1130" fg:w="1"/><text x="90.9402%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="90.6902%" y="229" width="0.0803%" height="15" fill="rgb(228,161,46)" fg:x="1130" fg:w="1"/><text x="90.9402%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="90.6902%" y="213" width="0.0803%" height="15" fill="rgb(235,196,21)" fg:x="1130" fg:w="1"/><text x="90.9402%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.6902%" y="197" width="0.0803%" height="15" fill="rgb(250,133,21)" fg:x="1130" fg:w="1"/><text x="90.9402%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.6902%" y="181" width="0.0803%" height="15" fill="rgb(236,94,32)" fg:x="1130" fg:w="1"/><text x="90.9402%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.7705%" y="213" width="0.0803%" height="15" fill="rgb(219,176,25)" fg:x="1131" fg:w="1"/><text x="91.0205%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="90.8507%" y="213" width="0.0803%" height="15" fill="rgb(211,17,43)" fg:x="1132" fg:w="1"/><text x="91.1007%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.8507%" y="197" width="0.0803%" height="15" fill="rgb(220,75,23)" fg:x="1132" fg:w="1"/><text x="91.1007%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.8507%" y="181" width="0.0803%" height="15" fill="rgb(215,122,32)" fg:x="1132" fg:w="1"/><text x="91.1007%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="90.8507%" y="165" width="0.0803%" height="15" fill="rgb(218,57,38)" fg:x="1132" fg:w="1"/><text x="91.1007%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="90.8507%" y="149" width="0.0803%" height="15" fill="rgb(233,208,46)" fg:x="1132" fg:w="1"/><text x="91.1007%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="90.9310%" y="213" width="0.0803%" height="15" fill="rgb(221,35,50)" fg:x="1133" fg:w="1"/><text x="91.1810%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.56%)</title><rect x="90.5297%" y="261" width="0.5618%" height="15" fill="rgb(229,213,29)" fg:x="1128" fg:w="7"/><text x="90.7797%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="90.7705%" y="245" width="0.3210%" height="15" fill="rgb(229,110,40)" fg:x="1131" fg:w="4"/><text x="91.0205%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="90.7705%" y="229" width="0.3210%" height="15" fill="rgb(247,206,19)" fg:x="1131" fg:w="4"/><text x="91.0205%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="91.0112%" y="213" width="0.0803%" height="15" fill="rgb(216,229,45)" fg:x="1134" fg:w="1"/><text x="91.2612%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="91.0915%" y="261" width="0.0803%" height="15" fill="rgb(205,184,31)" fg:x="1135" fg:w="1"/><text x="91.3415%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="91.0915%" y="245" width="0.0803%" height="15" fill="rgb(213,91,10)" fg:x="1135" fg:w="1"/><text x="91.3415%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="91.0915%" y="229" width="0.0803%" height="15" fill="rgb(250,49,8)" fg:x="1135" fg:w="1"/><text x="91.3415%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="91.0915%" y="213" width="0.0803%" height="15" fill="rgb(207,26,8)" fg:x="1135" fg:w="1"/><text x="91.3415%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.0915%" y="197" width="0.0803%" height="15" fill="rgb(224,2,13)" fg:x="1135" fg:w="1"/><text x="91.3415%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.0915%" y="181" width="0.0803%" height="15" fill="rgb(219,108,27)" fg:x="1135" fg:w="1"/><text x="91.3415%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (9 samples, 0.72%)</title><rect x="90.5297%" y="309" width="0.7223%" height="15" fill="rgb(240,89,32)" fg:x="1128" fg:w="9"/><text x="90.7797%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (9 samples, 0.72%)</title><rect x="90.5297%" y="293" width="0.7223%" height="15" fill="rgb(248,205,3)" fg:x="1128" fg:w="9"/><text x="90.7797%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (9 samples, 0.72%)</title><rect x="90.5297%" y="277" width="0.7223%" height="15" fill="rgb(236,197,47)" fg:x="1128" fg:w="9"/><text x="90.7797%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="91.1717%" y="261" width="0.0803%" height="15" fill="rgb(244,185,52)" fg:x="1136" fg:w="1"/><text x="91.4217%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="91.1717%" y="245" width="0.0803%" height="15" fill="rgb(210,206,23)" fg:x="1136" fg:w="1"/><text x="91.4217%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="91.1717%" y="229" width="0.0803%" height="15" fill="rgb(251,177,30)" fg:x="1136" fg:w="1"/><text x="91.4217%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="91.2520%" y="309" width="0.0803%" height="15" fill="rgb(243,27,45)" fg:x="1137" fg:w="1"/><text x="91.5020%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="91.2520%" y="293" width="0.0803%" height="15" fill="rgb(248,141,51)" fg:x="1137" fg:w="1"/><text x="91.5020%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="91.2520%" y="277" width="0.0803%" height="15" fill="rgb(235,102,15)" fg:x="1137" fg:w="1"/><text x="91.5020%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="91.2520%" y="261" width="0.0803%" height="15" fill="rgb(214,164,53)" fg:x="1137" fg:w="1"/><text x="91.5020%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.2520%" y="245" width="0.0803%" height="15" fill="rgb(228,18,51)" fg:x="1137" fg:w="1"/><text x="91.5020%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.2520%" y="229" width="0.0803%" height="15" fill="rgb(205,211,11)" fg:x="1137" fg:w="1"/><text x="91.5020%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (128 samples, 10.27%)</title><rect x="81.1396%" y="421" width="10.2729%" height="15" fill="rgb(208,63,6)" fg:x="1011" fg:w="128"/><text x="81.3896%" y="431.50">&lt;&amp;kernel::model..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (121 samples, 9.71%)</title><rect x="81.7014%" y="405" width="9.7111%" height="15" fill="rgb(245,76,14)" fg:x="1018" fg:w="121"/><text x="81.9514%" y="415.50">plugins_core::..</text></g><g><title>indefinite::indefinite (121 samples, 9.71%)</title><rect x="81.7014%" y="389" width="9.7111%" height="15" fill="rgb(234,176,34)" fg:x="1018" fg:w="121"/><text x="81.9514%" y="399.50">indefinite::in..</text></g><g><title>indefinite::methods::indefinite (121 samples, 9.71%)</title><rect x="81.7014%" y="373" width="9.7111%" height="15" fill="rgb(243,156,42)" fg:x="1018" fg:w="121"/><text x="81.9514%" y="383.50">indefinite::me..</text></g><g><title>indefinite::methods::apply_rules (121 samples, 9.71%)</title><rect x="81.7014%" y="357" width="9.7111%" height="15" fill="rgb(237,182,10)" fg:x="1018" fg:w="121"/><text x="81.9514%" y="367.50">indefinite::me..</text></g><g><title>indefinite::rules::other::Other::run (11 samples, 0.88%)</title><rect x="90.5297%" y="341" width="0.8828%" height="15" fill="rgb(244,117,0)" fg:x="1128" fg:w="11"/><text x="90.7797%" y="351.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (11 samples, 0.88%)</title><rect x="90.5297%" y="325" width="0.8828%" height="15" fill="rgb(239,91,50)" fg:x="1128" fg:w="11"/><text x="90.7797%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="91.3323%" y="309" width="0.0803%" height="15" fill="rgb(206,38,9)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="91.3323%" y="293" width="0.0803%" height="15" fill="rgb(205,25,10)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="91.3323%" y="277" width="0.0803%" height="15" fill="rgb(206,224,7)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="91.3323%" y="261" width="0.0803%" height="15" fill="rgb(227,157,10)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="91.3323%" y="245" width="0.0803%" height="15" fill="rgb(214,157,37)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="255.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="91.4928%" y="373" width="0.0803%" height="15" fill="rgb(209,180,35)" fg:x="1140" fg:w="1"/><text x="91.7428%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="91.5730%" y="357" width="0.0803%" height="15" fill="rgb(216,174,49)" fg:x="1141" fg:w="1"/><text x="91.8230%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.5730%" y="341" width="0.0803%" height="15" fill="rgb(205,96,20)" fg:x="1141" fg:w="1"/><text x="91.8230%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.5730%" y="325" width="0.0803%" height="15" fill="rgb(214,220,39)" fg:x="1141" fg:w="1"/><text x="91.8230%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.5730%" y="309" width="0.0803%" height="15" fill="rgb(245,126,30)" fg:x="1141" fg:w="1"/><text x="91.8230%" y="319.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="91.6533%" y="309" width="0.0803%" height="15" fill="rgb(215,88,33)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="91.6533%" y="293" width="0.0803%" height="15" fill="rgb(210,1,49)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.6533%" y="277" width="0.0803%" height="15" fill="rgb(207,133,3)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.6533%" y="261" width="0.0803%" height="15" fill="rgb(231,47,43)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="91.6533%" y="245" width="0.0803%" height="15" fill="rgb(245,64,1)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.6533%" y="229" width="0.0803%" height="15" fill="rgb(253,145,20)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="91.6533%" y="213" width="0.0803%" height="15" fill="rgb(211,39,18)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.6533%" y="197" width="0.0803%" height="15" fill="rgb(223,225,18)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="91.6533%" y="181" width="0.0803%" height="15" fill="rgb(210,202,44)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="91.6533%" y="165" width="0.0803%" height="15" fill="rgb(231,138,36)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.6533%" y="149" width="0.0803%" height="15" fill="rgb(237,115,25)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="91.6533%" y="133" width="0.0803%" height="15" fill="rgb(215,53,48)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="91.6533%" y="117" width="0.0803%" height="15" fill="rgb(243,193,24)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.6533%" y="101" width="0.0803%" height="15" fill="rgb(210,106,28)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="111.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (5 samples, 0.40%)</title><rect x="91.4125%" y="389" width="0.4013%" height="15" fill="rgb(249,192,0)" fg:x="1139" fg:w="5"/><text x="91.6625%" y="399.50"></text></g><g><title>plugins_core::tools::contained_by (3 samples, 0.24%)</title><rect x="91.5730%" y="373" width="0.2408%" height="15" fill="rgb(224,96,21)" fg:x="1141" fg:w="3"/><text x="91.8230%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="91.6533%" y="357" width="0.1605%" height="15" fill="rgb(243,160,19)" fg:x="1142" fg:w="2"/><text x="91.9033%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="91.6533%" y="341" width="0.1605%" height="15" fill="rgb(219,205,50)" fg:x="1142" fg:w="2"/><text x="91.9033%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="91.6533%" y="325" width="0.1605%" height="15" fill="rgb(218,175,44)" fg:x="1142" fg:w="2"/><text x="91.9033%" y="335.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="91.7335%" y="309" width="0.0803%" height="15" fill="rgb(251,84,47)" fg:x="1143" fg:w="1"/><text x="91.9835%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="91.7335%" y="293" width="0.0803%" height="15" fill="rgb(241,14,16)" fg:x="1143" fg:w="1"/><text x="91.9835%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (7 samples, 0.56%)</title><rect x="91.4125%" y="421" width="0.5618%" height="15" fill="rgb(207,142,28)" fg:x="1139" fg:w="7"/><text x="91.6625%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (7 samples, 0.56%)</title><rect x="91.4125%" y="405" width="0.5618%" height="15" fill="rgb(208,116,22)" fg:x="1139" fg:w="7"/><text x="91.6625%" y="415.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="91.8138%" y="389" width="0.1605%" height="15" fill="rgb(210,0,43)" fg:x="1144" fg:w="2"/><text x="92.0638%" y="399.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (139 samples, 11.16%)</title><rect x="81.1396%" y="437" width="11.1557%" height="15" fill="rgb(246,33,21)" fg:x="1011" fg:w="139"/><text x="81.3896%" y="447.50">&lt;plugins_core::c..</text></g><g><title>plugins_core::library::actions::reply_ok (4 samples, 0.32%)</title><rect x="91.9743%" y="421" width="0.3210%" height="15" fill="rgb(208,158,54)" fg:x="1146" fg:w="4"/><text x="92.2243%" y="431.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.32%)</title><rect x="91.9743%" y="405" width="0.3210%" height="15" fill="rgb(218,99,29)" fg:x="1146" fg:w="4"/><text x="92.2243%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (4 samples, 0.32%)</title><rect x="91.9743%" y="389" width="0.3210%" height="15" fill="rgb(226,29,7)" fg:x="1146" fg:w="4"/><text x="92.2243%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (4 samples, 0.32%)</title><rect x="91.9743%" y="373" width="0.3210%" height="15" fill="rgb(206,178,46)" fg:x="1146" fg:w="4"/><text x="92.2243%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="92.0546%" y="357" width="0.2408%" height="15" fill="rgb(205,169,32)" fg:x="1147" fg:w="3"/><text x="92.3046%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="92.1348%" y="341" width="0.1605%" height="15" fill="rgb(217,4,13)" fg:x="1148" fg:w="2"/><text x="92.3848%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="92.1348%" y="325" width="0.1605%" height="15" fill="rgb(210,140,37)" fg:x="1148" fg:w="2"/><text x="92.3848%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="92.2953%" y="405" width="0.0803%" height="15" fill="rgb(229,80,10)" fg:x="1150" fg:w="1"/><text x="92.5453%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="92.2953%" y="389" width="0.0803%" height="15" fill="rgb(212,175,34)" fg:x="1150" fg:w="1"/><text x="92.5453%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="92.2953%" y="373" width="0.0803%" height="15" fill="rgb(216,207,24)" fg:x="1150" fg:w="1"/><text x="92.5453%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="92.2953%" y="357" width="0.0803%" height="15" fill="rgb(234,163,3)" fg:x="1150" fg:w="1"/><text x="92.5453%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="92.3756%" y="325" width="0.0803%" height="15" fill="rgb(248,101,16)" fg:x="1151" fg:w="1"/><text x="92.6256%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.3756%" y="309" width="0.0803%" height="15" fill="rgb(209,152,54)" fg:x="1151" fg:w="1"/><text x="92.6256%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.3756%" y="293" width="0.0803%" height="15" fill="rgb(229,124,51)" fg:x="1151" fg:w="1"/><text x="92.6256%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.3756%" y="277" width="0.0803%" height="15" fill="rgb(219,83,18)" fg:x="1151" fg:w="1"/><text x="92.6256%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="92.4559%" y="325" width="0.0803%" height="15" fill="rgb(206,29,38)" fg:x="1152" fg:w="1"/><text x="92.7059%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="92.4559%" y="309" width="0.0803%" height="15" fill="rgb(245,123,23)" fg:x="1152" fg:w="1"/><text x="92.7059%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="92.4559%" y="293" width="0.0803%" height="15" fill="rgb(238,50,33)" fg:x="1152" fg:w="1"/><text x="92.7059%" y="303.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="92.4559%" y="277" width="0.0803%" height="15" fill="rgb(234,165,23)" fg:x="1152" fg:w="1"/><text x="92.7059%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="92.4559%" y="261" width="0.0803%" height="15" fill="rgb(211,82,31)" fg:x="1152" fg:w="1"/><text x="92.7059%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="92.4559%" y="245" width="0.0803%" height="15" fill="rgb(224,166,46)" fg:x="1152" fg:w="1"/><text x="92.7059%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="92.4559%" y="229" width="0.0803%" height="15" fill="rgb(211,13,8)" fg:x="1152" fg:w="1"/><text x="92.7059%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="92.5361%" y="277" width="0.1605%" height="15" fill="rgb(212,7,42)" fg:x="1153" fg:w="2"/><text x="92.7861%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="92.5361%" y="261" width="0.1605%" height="15" fill="rgb(249,102,19)" fg:x="1153" fg:w="2"/><text x="92.7861%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="92.5361%" y="245" width="0.1605%" height="15" fill="rgb(225,41,13)" fg:x="1153" fg:w="2"/><text x="92.7861%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="92.6966%" y="261" width="0.3210%" height="15" fill="rgb(220,65,27)" fg:x="1155" fg:w="4"/><text x="92.9466%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="92.6966%" y="245" width="0.3210%" height="15" fill="rgb(206,4,41)" fg:x="1155" fg:w="4"/><text x="92.9466%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="93.0177%" y="261" width="0.0803%" height="15" fill="rgb(219,60,39)" fg:x="1159" fg:w="1"/><text x="93.2677%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="93.0177%" y="245" width="0.0803%" height="15" fill="rgb(226,4,38)" fg:x="1159" fg:w="1"/><text x="93.2677%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="93.0177%" y="229" width="0.0803%" height="15" fill="rgb(250,52,3)" fg:x="1159" fg:w="1"/><text x="93.2677%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="93.0177%" y="213" width="0.0803%" height="15" fill="rgb(234,93,0)" fg:x="1159" fg:w="1"/><text x="93.2677%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="93.4189%" y="197" width="0.0803%" height="15" fill="rgb(251,47,47)" fg:x="1164" fg:w="1"/><text x="93.6689%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.4189%" y="181" width="0.0803%" height="15" fill="rgb(205,166,47)" fg:x="1164" fg:w="1"/><text x="93.6689%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.4189%" y="165" width="0.0803%" height="15" fill="rgb(231,148,8)" fg:x="1164" fg:w="1"/><text x="93.6689%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.4189%" y="149" width="0.0803%" height="15" fill="rgb(244,185,19)" fg:x="1164" fg:w="1"/><text x="93.6689%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (16 samples, 1.28%)</title><rect x="93.4992%" y="197" width="1.2841%" height="15" fill="rgb(224,201,45)" fg:x="1165" fg:w="16"/><text x="93.7492%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (16 samples, 1.28%)</title><rect x="93.4992%" y="181" width="1.2841%" height="15" fill="rgb(240,77,39)" fg:x="1165" fg:w="16"/><text x="93.7492%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (16 samples, 1.28%)</title><rect x="93.4992%" y="165" width="1.2841%" height="15" fill="rgb(248,211,29)" fg:x="1165" fg:w="16"/><text x="93.7492%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="94.7833%" y="197" width="0.0803%" height="15" fill="rgb(232,214,46)" fg:x="1181" fg:w="1"/><text x="95.0333%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 1.85%)</title><rect x="93.0979%" y="245" width="1.8459%" height="15" fill="rgb(213,99,54)" fg:x="1160" fg:w="23"/><text x="93.3479%" y="255.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (23 samples, 1.85%)</title><rect x="93.0979%" y="229" width="1.8459%" height="15" fill="rgb(240,19,46)" fg:x="1160" fg:w="23"/><text x="93.3479%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (23 samples, 1.85%)</title><rect x="93.0979%" y="213" width="1.8459%" height="15" fill="rgb(243,89,10)" fg:x="1160" fg:w="23"/><text x="93.3479%" y="223.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="94.8636%" y="197" width="0.0803%" height="15" fill="rgb(249,28,32)" fg:x="1182" fg:w="1"/><text x="95.1136%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.8636%" y="181" width="0.0803%" height="15" fill="rgb(253,30,9)" fg:x="1182" fg:w="1"/><text x="95.1136%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.8636%" y="165" width="0.0803%" height="15" fill="rgb(217,2,26)" fg:x="1182" fg:w="1"/><text x="95.1136%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.8636%" y="149" width="0.0803%" height="15" fill="rgb(220,28,10)" fg:x="1182" fg:w="1"/><text x="95.1136%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.9438%" y="229" width="0.0803%" height="15" fill="rgb(228,167,49)" fg:x="1183" fg:w="1"/><text x="95.1938%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (25 samples, 2.01%)</title><rect x="93.0979%" y="261" width="2.0064%" height="15" fill="rgb(238,212,3)" fg:x="1160" fg:w="25"/><text x="93.3479%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="94.9438%" y="245" width="0.1605%" height="15" fill="rgb(229,134,44)" fg:x="1183" fg:w="2"/><text x="95.1938%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="95.0241%" y="229" width="0.0803%" height="15" fill="rgb(208,71,4)" fg:x="1184" fg:w="1"/><text x="95.2741%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.0241%" y="213" width="0.0803%" height="15" fill="rgb(221,205,45)" fg:x="1184" fg:w="1"/><text x="95.2741%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.0241%" y="197" width="0.0803%" height="15" fill="rgb(215,132,38)" fg:x="1184" fg:w="1"/><text x="95.2741%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.0241%" y="181" width="0.0803%" height="15" fill="rgb(227,158,6)" fg:x="1184" fg:w="1"/><text x="95.2741%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (31 samples, 2.49%)</title><rect x="92.6966%" y="277" width="2.4880%" height="15" fill="rgb(250,10,38)" fg:x="1155" fg:w="31"/><text x="92.9466%" y="287.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="95.1043%" y="261" width="0.0803%" height="15" fill="rgb(225,171,40)" fg:x="1185" fg:w="1"/><text x="95.3543%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="95.1043%" y="245" width="0.0803%" height="15" fill="rgb(238,17,43)" fg:x="1185" fg:w="1"/><text x="95.3543%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="95.1043%" y="229" width="0.0803%" height="15" fill="rgb(208,145,4)" fg:x="1185" fg:w="1"/><text x="95.3543%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="95.1846%" y="229" width="0.0803%" height="15" fill="rgb(232,82,7)" fg:x="1186" fg:w="1"/><text x="95.4346%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="95.1846%" y="213" width="0.0803%" height="15" fill="rgb(205,166,38)" fg:x="1186" fg:w="1"/><text x="95.4346%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (35 samples, 2.81%)</title><rect x="92.5361%" y="325" width="2.8090%" height="15" fill="rgb(240,228,4)" fg:x="1153" fg:w="35"/><text x="92.7861%" y="335.50">&lt;r..</text></g><g><title>regex::builders::Builder::build_one_string (35 samples, 2.81%)</title><rect x="92.5361%" y="309" width="2.8090%" height="15" fill="rgb(233,121,40)" fg:x="1153" fg:w="35"/><text x="92.7861%" y="319.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (35 samples, 2.81%)</title><rect x="92.5361%" y="293" width="2.8090%" height="15" fill="rgb(243,84,30)" fg:x="1153" fg:w="35"/><text x="92.7861%" y="303.50">re..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="95.1846%" y="277" width="0.1605%" height="15" fill="rgb(235,81,48)" fg:x="1186" fg:w="2"/><text x="95.4346%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="95.1846%" y="261" width="0.1605%" height="15" fill="rgb(218,137,0)" fg:x="1186" fg:w="2"/><text x="95.4346%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="95.1846%" y="245" width="0.1605%" height="15" fill="rgb(223,151,48)" fg:x="1186" fg:w="2"/><text x="95.4346%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.2648%" y="229" width="0.0803%" height="15" fill="rgb(247,30,19)" fg:x="1187" fg:w="1"/><text x="95.5148%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.2648%" y="213" width="0.0803%" height="15" fill="rgb(205,129,29)" fg:x="1187" fg:w="1"/><text x="95.5148%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.2648%" y="197" width="0.0803%" height="15" fill="rgb(222,29,2)" fg:x="1187" fg:w="1"/><text x="95.5148%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.2648%" y="181" width="0.0803%" height="15" fill="rgb(232,145,33)" fg:x="1187" fg:w="1"/><text x="95.5148%" y="191.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (40 samples, 3.21%)</title><rect x="92.3756%" y="341" width="3.2103%" height="15" fill="rgb(217,30,31)" fg:x="1151" fg:w="40"/><text x="92.6256%" y="351.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="95.3451%" y="325" width="0.2408%" height="15" fill="rgb(243,22,52)" fg:x="1188" fg:w="3"/><text x="95.5951%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="95.3451%" y="309" width="0.2408%" height="15" fill="rgb(254,228,14)" fg:x="1188" fg:w="3"/><text x="95.5951%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="95.3451%" y="293" width="0.2408%" height="15" fill="rgb(231,45,50)" fg:x="1188" fg:w="3"/><text x="95.5951%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="95.3451%" y="277" width="0.2408%" height="15" fill="rgb(248,125,3)" fg:x="1188" fg:w="3"/><text x="95.5951%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="95.3451%" y="261" width="0.2408%" height="15" fill="rgb(213,76,9)" fg:x="1188" fg:w="3"/><text x="95.5951%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="95.4254%" y="245" width="0.1605%" height="15" fill="rgb(238,108,21)" fg:x="1189" fg:w="2"/><text x="95.6754%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.5056%" y="229" width="0.0803%" height="15" fill="rgb(229,214,19)" fg:x="1190" fg:w="1"/><text x="95.7556%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="95.7464%" y="261" width="0.0803%" height="15" fill="rgb(252,201,5)" fg:x="1193" fg:w="1"/><text x="95.9964%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="95.7464%" y="245" width="0.0803%" height="15" fill="rgb(233,165,49)" fg:x="1193" fg:w="1"/><text x="95.9964%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="95.8266%" y="229" width="0.0803%" height="15" fill="rgb(208,165,19)" fg:x="1194" fg:w="1"/><text x="96.0766%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (2 samples, 0.16%)</title><rect x="95.8266%" y="261" width="0.1605%" height="15" fill="rgb(216,220,31)" fg:x="1194" fg:w="2"/><text x="96.0766%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="95.8266%" y="245" width="0.1605%" height="15" fill="rgb(214,8,31)" fg:x="1194" fg:w="2"/><text x="96.0766%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="95.9069%" y="229" width="0.0803%" height="15" fill="rgb(220,32,32)" fg:x="1195" fg:w="1"/><text x="96.1569%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="95.9069%" y="213" width="0.0803%" height="15" fill="rgb(237,172,34)" fg:x="1195" fg:w="1"/><text x="96.1569%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.9069%" y="197" width="0.0803%" height="15" fill="rgb(240,209,5)" fg:x="1195" fg:w="1"/><text x="96.1569%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.9069%" y="181" width="0.0803%" height="15" fill="rgb(221,219,1)" fg:x="1195" fg:w="1"/><text x="96.1569%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.9069%" y="165" width="0.0803%" height="15" fill="rgb(237,90,36)" fg:x="1195" fg:w="1"/><text x="96.1569%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="95.9872%" y="149" width="0.0803%" height="15" fill="rgb(245,14,51)" fg:x="1196" fg:w="1"/><text x="96.2372%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="96.0674%" y="149" width="0.0803%" height="15" fill="rgb(211,71,49)" fg:x="1197" fg:w="1"/><text x="96.3174%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="96.0674%" y="133" width="0.0803%" height="15" fill="rgb(230,223,9)" fg:x="1197" fg:w="1"/><text x="96.3174%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (22 samples, 1.77%)</title><rect x="95.7464%" y="277" width="1.7657%" height="15" fill="rgb(212,33,31)" fg:x="1193" fg:w="22"/><text x="95.9964%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (19 samples, 1.52%)</title><rect x="95.9872%" y="261" width="1.5249%" height="15" fill="rgb(218,141,5)" fg:x="1196" fg:w="19"/><text x="96.2372%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 1.52%)</title><rect x="95.9872%" y="245" width="1.5249%" height="15" fill="rgb(239,194,8)" fg:x="1196" fg:w="19"/><text x="96.2372%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (19 samples, 1.52%)</title><rect x="95.9872%" y="229" width="1.5249%" height="15" fill="rgb(225,119,29)" fg:x="1196" fg:w="19"/><text x="96.2372%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (19 samples, 1.52%)</title><rect x="95.9872%" y="213" width="1.5249%" height="15" fill="rgb(233,32,3)" fg:x="1196" fg:w="19"/><text x="96.2372%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (19 samples, 1.52%)</title><rect x="95.9872%" y="197" width="1.5249%" height="15" fill="rgb(248,126,40)" fg:x="1196" fg:w="19"/><text x="96.2372%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (19 samples, 1.52%)</title><rect x="95.9872%" y="181" width="1.5249%" height="15" fill="rgb(213,102,53)" fg:x="1196" fg:w="19"/><text x="96.2372%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (19 samples, 1.52%)</title><rect x="95.9872%" y="165" width="1.5249%" height="15" fill="rgb(212,69,15)" fg:x="1196" fg:w="19"/><text x="96.2372%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (17 samples, 1.36%)</title><rect x="96.1477%" y="149" width="1.3644%" height="15" fill="rgb(253,39,34)" fg:x="1198" fg:w="17"/><text x="96.3977%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (17 samples, 1.36%)</title><rect x="96.1477%" y="133" width="1.3644%" height="15" fill="rgb(205,189,54)" fg:x="1198" fg:w="17"/><text x="96.3977%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (17 samples, 1.36%)</title><rect x="96.1477%" y="117" width="1.3644%" height="15" fill="rgb(234,229,45)" fg:x="1198" fg:w="17"/><text x="96.3977%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="97.5120%" y="229" width="0.0803%" height="15" fill="rgb(243,79,48)" fg:x="1215" fg:w="1"/><text x="97.7620%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="97.5120%" y="213" width="0.0803%" height="15" fill="rgb(206,71,50)" fg:x="1215" fg:w="1"/><text x="97.7620%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="97.5120%" y="197" width="0.0803%" height="15" fill="rgb(209,32,17)" fg:x="1215" fg:w="1"/><text x="97.7620%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="97.5120%" y="277" width="0.1605%" height="15" fill="rgb(219,229,6)" fg:x="1215" fg:w="2"/><text x="97.7620%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="97.5120%" y="261" width="0.1605%" height="15" fill="rgb(226,25,27)" fg:x="1215" fg:w="2"/><text x="97.7620%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="97.5120%" y="245" width="0.1605%" height="15" fill="rgb(218,185,23)" fg:x="1215" fg:w="2"/><text x="97.7620%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="97.5923%" y="229" width="0.0803%" height="15" fill="rgb(242,123,5)" fg:x="1216" fg:w="1"/><text x="97.8423%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.5923%" y="213" width="0.0803%" height="15" fill="rgb(215,53,19)" fg:x="1216" fg:w="1"/><text x="97.8423%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.5923%" y="197" width="0.0803%" height="15" fill="rgb(233,20,30)" fg:x="1216" fg:w="1"/><text x="97.8423%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5923%" y="181" width="0.0803%" height="15" fill="rgb(209,67,20)" fg:x="1216" fg:w="1"/><text x="97.8423%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="97.6726%" y="229" width="0.1605%" height="15" fill="rgb(227,181,50)" fg:x="1217" fg:w="2"/><text x="97.9226%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.7528%" y="213" width="0.0803%" height="15" fill="rgb(252,75,38)" fg:x="1218" fg:w="1"/><text x="98.0028%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.7528%" y="197" width="0.0803%" height="15" fill="rgb(235,9,33)" fg:x="1218" fg:w="1"/><text x="98.0028%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.7528%" y="181" width="0.0803%" height="15" fill="rgb(208,87,30)" fg:x="1218" fg:w="1"/><text x="98.0028%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="97.8331%" y="229" width="0.0803%" height="15" fill="rgb(215,199,39)" fg:x="1219" fg:w="1"/><text x="98.0831%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.8331%" y="213" width="0.0803%" height="15" fill="rgb(246,208,12)" fg:x="1219" fg:w="1"/><text x="98.0831%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="97.6726%" y="245" width="0.3210%" height="15" fill="rgb(206,195,10)" fg:x="1217" fg:w="4"/><text x="97.9226%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="97.9133%" y="229" width="0.0803%" height="15" fill="rgb(244,1,30)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (31 samples, 2.49%)</title><rect x="95.5859%" y="325" width="2.4880%" height="15" fill="rgb(230,83,5)" fg:x="1191" fg:w="31"/><text x="95.8359%" y="335.50">&lt;r..</text></g><g><title>regex::builders::Builder::build_one_string (31 samples, 2.49%)</title><rect x="95.5859%" y="309" width="2.4880%" height="15" fill="rgb(239,62,17)" fg:x="1191" fg:w="31"/><text x="95.8359%" y="319.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (31 samples, 2.49%)</title><rect x="95.5859%" y="293" width="2.4880%" height="15" fill="rgb(252,193,41)" fg:x="1191" fg:w="31"/><text x="95.8359%" y="303.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="97.6726%" y="277" width="0.4013%" height="15" fill="rgb(216,142,19)" fg:x="1217" fg:w="5"/><text x="97.9226%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="97.6726%" y="261" width="0.4013%" height="15" fill="rgb(240,81,38)" fg:x="1217" fg:w="5"/><text x="97.9226%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="97.9936%" y="245" width="0.0803%" height="15" fill="rgb(240,109,40)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="97.9936%" y="229" width="0.0803%" height="15" fill="rgb(230,123,10)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.9936%" y="213" width="0.0803%" height="15" fill="rgb(253,42,32)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.9936%" y="197" width="0.0803%" height="15" fill="rgb(218,154,8)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.9936%" y="181" width="0.0803%" height="15" fill="rgb(216,197,10)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (32 samples, 2.57%)</title><rect x="95.5859%" y="341" width="2.5682%" height="15" fill="rgb(223,107,12)" fg:x="1191" fg:w="32"/><text x="95.8359%" y="351.50">in..</text></g><g><title>regex::regex::string::Regex::is_match_at (1 samples, 0.08%)</title><rect x="98.0738%" y="325" width="0.0803%" height="15" fill="rgb(241,174,42)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="98.0738%" y="309" width="0.0803%" height="15" fill="rgb(231,78,20)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="98.0738%" y="293" width="0.0803%" height="15" fill="rgb(230,208,49)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="98.0738%" y="277" width="0.0803%" height="15" fill="rgb(238,11,34)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="98.0738%" y="261" width="0.0803%" height="15" fill="rgb(210,130,26)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="98.0738%" y="245" width="0.0803%" height="15" fill="rgb(242,131,11)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="98.1541%" y="261" width="0.0803%" height="15" fill="rgb(237,38,28)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="98.1541%" y="245" width="0.0803%" height="15" fill="rgb(244,180,43)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="98.1541%" y="229" width="0.0803%" height="15" fill="rgb(214,171,19)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="98.1541%" y="213" width="0.0803%" height="15" fill="rgb(252,101,45)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (75 samples, 6.02%)</title><rect x="92.2953%" y="421" width="6.0193%" height="15" fill="rgb(211,96,33)" fg:x="1150" fg:w="75"/><text x="92.5453%" y="431.50">&lt;&amp;kernel..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (74 samples, 5.94%)</title><rect x="92.3756%" y="405" width="5.9390%" height="15" fill="rgb(207,80,25)" fg:x="1151" fg:w="74"/><text x="92.6256%" y="415.50">plugins_..</text></g><g><title>indefinite::indefinite (74 samples, 5.94%)</title><rect x="92.3756%" y="389" width="5.9390%" height="15" fill="rgb(225,15,35)" fg:x="1151" fg:w="74"/><text x="92.6256%" y="399.50">indefini..</text></g><g><title>indefinite::methods::indefinite (74 samples, 5.94%)</title><rect x="92.3756%" y="373" width="5.9390%" height="15" fill="rgb(214,93,43)" fg:x="1151" fg:w="74"/><text x="92.6256%" y="383.50">indefini..</text></g><g><title>indefinite::methods::apply_rules (74 samples, 5.94%)</title><rect x="92.3756%" y="357" width="5.9390%" height="15" fill="rgb(248,42,37)" fg:x="1151" fg:w="74"/><text x="92.6256%" y="367.50">indefini..</text></g><g><title>indefinite::rules::other::Other::run (2 samples, 0.16%)</title><rect x="98.1541%" y="341" width="0.1605%" height="15" fill="rgb(217,135,32)" fg:x="1223" fg:w="2"/><text x="98.4041%" y="351.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (2 samples, 0.16%)</title><rect x="98.1541%" y="325" width="0.1605%" height="15" fill="rgb(216,74,28)" fg:x="1223" fg:w="2"/><text x="98.4041%" y="335.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (2 samples, 0.16%)</title><rect x="98.1541%" y="309" width="0.1605%" height="15" fill="rgb(247,108,16)" fg:x="1223" fg:w="2"/><text x="98.4041%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (2 samples, 0.16%)</title><rect x="98.1541%" y="293" width="0.1605%" height="15" fill="rgb(205,219,30)" fg:x="1223" fg:w="2"/><text x="98.4041%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (2 samples, 0.16%)</title><rect x="98.1541%" y="277" width="0.1605%" height="15" fill="rgb(241,122,9)" fg:x="1223" fg:w="2"/><text x="98.4041%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="98.2343%" y="261" width="0.0803%" height="15" fill="rgb(216,148,50)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="98.2343%" y="245" width="0.0803%" height="15" fill="rgb(226,154,2)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3146%" y="325" width="0.0803%" height="15" fill="rgb(220,128,1)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3146%" y="309" width="0.0803%" height="15" fill="rgb(245,185,29)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3146%" y="293" width="0.0803%" height="15" fill="rgb(243,161,2)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3146%" y="277" width="0.0803%" height="15" fill="rgb(249,215,17)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.3146%" y="261" width="0.0803%" height="15" fill="rgb(237,67,11)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.3146%" y="245" width="0.0803%" height="15" fill="rgb(239,17,24)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.3146%" y="229" width="0.0803%" height="15" fill="rgb(215,97,29)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3146%" y="213" width="0.0803%" height="15" fill="rgb(253,228,42)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3146%" y="197" width="0.0803%" height="15" fill="rgb(240,85,2)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.3146%" y="181" width="0.0803%" height="15" fill="rgb(214,155,4)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.3146%" y="165" width="0.0803%" height="15" fill="rgb(247,120,22)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.3146%" y="149" width="0.0803%" height="15" fill="rgb(211,208,6)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.3146%" y="133" width="0.0803%" height="15" fill="rgb(235,99,41)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3146%" y="117" width="0.0803%" height="15" fill="rgb(223,28,8)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.3146%" y="341" width="0.1605%" height="15" fill="rgb(212,71,20)" fg:x="1225" fg:w="2"/><text x="98.5646%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3949%" y="325" width="0.0803%" height="15" fill="rgb(206,85,3)" fg:x="1226" fg:w="1"/><text x="98.6449%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.4751%" y="309" width="0.0803%" height="15" fill="rgb(244,180,11)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="319.50"></text></g><g><title>plugins_core::tools::contained_by (4 samples, 0.32%)</title><rect x="98.3146%" y="373" width="0.3210%" height="15" fill="rgb(223,16,21)" fg:x="1225" fg:w="4"/><text x="98.5646%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="98.3146%" y="357" width="0.3210%" height="15" fill="rgb(238,85,42)" fg:x="1225" fg:w="4"/><text x="98.5646%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.4751%" y="341" width="0.1605%" height="15" fill="rgb(205,85,8)" fg:x="1227" fg:w="2"/><text x="98.7251%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.4751%" y="325" width="0.1605%" height="15" fill="rgb(217,190,15)" fg:x="1227" fg:w="2"/><text x="98.7251%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.5554%" y="309" width="0.0803%" height="15" fill="rgb(243,192,23)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5554%" y="293" width="0.0803%" height="15" fill="rgb(223,220,37)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.5554%" y="277" width="0.0803%" height="15" fill="rgb(208,41,17)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="287.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="98.6356%" y="373" width="0.0803%" height="15" fill="rgb(224,188,7)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.6356%" y="357" width="0.0803%" height="15" fill="rgb(236,16,50)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.6356%" y="341" width="0.0803%" height="15" fill="rgb(238,6,24)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.6356%" y="325" width="0.0803%" height="15" fill="rgb(253,67,45)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (6 samples, 0.48%)</title><rect x="98.3146%" y="421" width="0.4815%" height="15" fill="rgb(210,89,32)" fg:x="1225" fg:w="6"/><text x="98.5646%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (6 samples, 0.48%)</title><rect x="98.3146%" y="405" width="0.4815%" height="15" fill="rgb(208,89,9)" fg:x="1225" fg:w="6"/><text x="98.5646%" y="415.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (6 samples, 0.48%)</title><rect x="98.3146%" y="389" width="0.4815%" height="15" fill="rgb(222,180,44)" fg:x="1225" fg:w="6"/><text x="98.5646%" y="399.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="98.7159%" y="373" width="0.0803%" height="15" fill="rgb(250,181,46)" fg:x="1230" fg:w="1"/><text x="98.9659%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.7159%" y="357" width="0.0803%" height="15" fill="rgb(210,190,26)" fg:x="1230" fg:w="1"/><text x="98.9659%" y="367.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="98.7961%" y="405" width="0.0803%" height="15" fill="rgb(253,49,13)" fg:x="1231" fg:w="1"/><text x="99.0461%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="98.8764%" y="405" width="0.0803%" height="15" fill="rgb(240,184,42)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="415.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="98.8764%" y="389" width="0.0803%" height="15" fill="rgb(246,59,37)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="98.8764%" y="373" width="0.0803%" height="15" fill="rgb(207,134,54)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="98.8764%" y="357" width="0.0803%" height="15" fill="rgb(250,122,24)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.8764%" y="341" width="0.0803%" height="15" fill="rgb(239,206,3)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.8764%" y="325" width="0.0803%" height="15" fill="rgb(253,220,32)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8764%" y="309" width="0.0803%" height="15" fill="rgb(209,217,48)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.8764%" y="293" width="0.0803%" height="15" fill="rgb(242,91,39)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8764%" y="277" width="0.0803%" height="15" fill="rgb(228,4,13)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.8764%" y="261" width="0.0803%" height="15" fill="rgb(223,133,4)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8764%" y="245" width="0.0803%" height="15" fill="rgb(215,105,30)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.8764%" y="229" width="0.0803%" height="15" fill="rgb(230,9,4)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="98.9567%" y="389" width="0.0803%" height="15" fill="rgb(248,15,2)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.9567%" y="373" width="0.0803%" height="15" fill="rgb(208,210,22)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.9567%" y="357" width="0.0803%" height="15" fill="rgb(208,112,41)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.9567%" y="341" width="0.0803%" height="15" fill="rgb(232,83,14)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="351.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="98.9567%" y="405" width="0.2408%" height="15" fill="rgb(229,65,11)" fg:x="1233" fg:w="3"/><text x="99.2067%" y="415.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="99.0369%" y="389" width="0.1605%" height="15" fill="rgb(228,126,24)" fg:x="1234" fg:w="2"/><text x="99.2869%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="99.0369%" y="373" width="0.1605%" height="15" fill="rgb(218,66,33)" fg:x="1234" fg:w="2"/><text x="99.2869%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.1974%" y="389" width="0.0803%" height="15" fill="rgb(251,49,52)" fg:x="1236" fg:w="1"/><text x="99.4474%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1974%" y="373" width="0.0803%" height="15" fill="rgb(219,46,37)" fg:x="1236" fg:w="1"/><text x="99.4474%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1974%" y="357" width="0.0803%" height="15" fill="rgb(213,53,49)" fg:x="1236" fg:w="1"/><text x="99.4474%" y="367.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="99.1974%" y="405" width="0.1605%" height="15" fill="rgb(214,134,1)" fg:x="1236" fg:w="2"/><text x="99.4474%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="99.2777%" y="389" width="0.0803%" height="15" fill="rgb(208,139,43)" fg:x="1237" fg:w="1"/><text x="99.5277%" y="399.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="99.3579%" y="389" width="0.0803%" height="15" fill="rgb(231,105,35)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (231 samples, 18.54%)</title><rect x="80.9791%" y="629" width="18.5393%" height="15" fill="rgb(247,189,9)" fg:x="1009" fg:w="231"/><text x="81.2291%" y="639.50">&lt;engine::session::Session as ..</text></g><g><title>kernel::plugins::mw::apply_middleware (231 samples, 18.54%)</title><rect x="80.9791%" y="613" width="18.5393%" height="15" fill="rgb(252,48,51)" fg:x="1009" fg:w="231"/><text x="81.2291%" y="623.50">kernel::plugins::mw::apply_mi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (231 samples, 18.54%)</title><rect x="80.9791%" y="597" width="18.5393%" height="15" fill="rgb(209,121,1)" fg:x="1009" fg:w="231"/><text x="81.2291%" y="607.50">kernel::plugins::mw::Middlewa..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (231 samples, 18.54%)</title><rect x="80.9791%" y="581" width="18.5393%" height="15" fill="rgb(231,40,26)" fg:x="1009" fg:w="231"/><text x="81.2291%" y="591.50">&lt;engine::session::ExpandSurro..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (229 samples, 18.38%)</title><rect x="81.1396%" y="565" width="18.3788%" height="15" fill="rgb(251,8,13)" fg:x="1011" fg:w="229"/><text x="81.3896%" y="575.50">kernel::plugins::mw::Middlewa..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (229 samples, 18.38%)</title><rect x="81.1396%" y="549" width="18.3788%" height="15" fill="rgb(231,110,2)" fg:x="1011" fg:w="229"/><text x="81.3896%" y="559.50">&lt;plugins_dynlib::DynamicMiddl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (229 samples, 18.38%)</title><rect x="81.1396%" y="533" width="18.3788%" height="15" fill="rgb(216,153,22)" fg:x="1011" fg:w="229"/><text x="81.3896%" y="543.50">kernel::plugins::mw::Middlewa..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (229 samples, 18.38%)</title><rect x="81.1396%" y="517" width="18.3788%" height="15" fill="rgb(249,116,49)" fg:x="1011" fg:w="229"/><text x="81.3896%" y="527.50">core::ops::function::FnOnce::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (229 samples, 18.38%)</title><rect x="81.1396%" y="501" width="18.3788%" height="15" fill="rgb(230,89,2)" fg:x="1011" fg:w="229"/><text x="81.3896%" y="511.50">kernel::plugins::mw::Middlewa..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (229 samples, 18.38%)</title><rect x="81.1396%" y="485" width="18.3788%" height="15" fill="rgb(231,125,23)" fg:x="1011" fg:w="229"/><text x="81.3896%" y="495.50">core::ops::function::FnOnce::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (229 samples, 18.38%)</title><rect x="81.1396%" y="469" width="18.3788%" height="15" fill="rgb(212,217,18)" fg:x="1011" fg:w="229"/><text x="81.3896%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as co..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (229 samples, 18.38%)</title><rect x="81.1396%" y="453" width="18.3788%" height="15" fill="rgb(210,21,33)" fg:x="1011" fg:w="229"/><text x="81.3896%" y="463.50">&lt;engine::session::state::Stat..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (90 samples, 7.22%)</title><rect x="92.2953%" y="437" width="7.2231%" height="15" fill="rgb(241,97,9)" fg:x="1150" fg:w="90"/><text x="92.5453%" y="447.50">&lt;plugins_c..</text></g><g><title>plugins_core::location::change_location (9 samples, 0.72%)</title><rect x="98.7961%" y="421" width="0.7223%" height="15" fill="rgb(221,35,31)" fg:x="1231" fg:w="9"/><text x="99.0461%" y="431.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="99.3579%" y="405" width="0.1605%" height="15" fill="rgb(251,23,23)" fg:x="1238" fg:w="2"/><text x="99.6079%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="99.4382%" y="389" width="0.0803%" height="15" fill="rgb(227,165,2)" fg:x="1239" fg:w="1"/><text x="99.6882%" y="399.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="99.4382%" y="373" width="0.0803%" height="15" fill="rgb(242,24,2)" fg:x="1239" fg:w="1"/><text x="99.6882%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="99.4382%" y="357" width="0.0803%" height="15" fill="rgb(242,138,51)" fg:x="1239" fg:w="1"/><text x="99.6882%" y="367.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="99.4382%" y="341" width="0.0803%" height="15" fill="rgb(220,219,5)" fg:x="1239" fg:w="1"/><text x="99.6882%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="99.4382%" y="325" width="0.0803%" height="15" fill="rgb(247,53,29)" fg:x="1239" fg:w="1"/><text x="99.6882%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (3 samples, 0.24%)</title><rect x="99.5185%" y="629" width="0.2408%" height="15" fill="rgb(233,43,39)" fg:x="1240" fg:w="3"/><text x="99.7685%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="99.5185%" y="613" width="0.2408%" height="15" fill="rgb(230,128,54)" fg:x="1240" fg:w="3"/><text x="99.7685%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="99.5185%" y="597" width="0.2408%" height="15" fill="rgb(218,20,12)" fg:x="1240" fg:w="3"/><text x="99.7685%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6790%" y="581" width="0.0803%" height="15" fill="rgb(206,51,14)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6790%" y="565" width="0.0803%" height="15" fill="rgb(223,16,35)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6790%" y="549" width="0.0803%" height="15" fill="rgb(226,165,37)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.6790%" y="533" width="0.0803%" height="15" fill="rgb(240,26,21)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.6790%" y="517" width="0.0803%" height="15" fill="rgb(240,72,46)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.6790%" y="501" width="0.0803%" height="15" fill="rgb(211,33,41)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="99.6790%" y="485" width="0.0803%" height="15" fill="rgb(224,157,46)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.6790%" y="469" width="0.0803%" height="15" fill="rgb(223,59,19)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="479.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="99.7592%" y="629" width="0.0803%" height="15" fill="rgb(239,187,1)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="99.7592%" y="613" width="0.0803%" height="15" fill="rgb(226,95,9)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="623.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="99.7592%" y="597" width="0.0803%" height="15" fill="rgb(234,61,54)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="607.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="99.7592%" y="581" width="0.0803%" height="15" fill="rgb(205,209,47)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="99.7592%" y="565" width="0.0803%" height="15" fill="rgb(228,7,43)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="99.8395%" y="629" width="0.0803%" height="15" fill="rgb(240,217,52)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="639.50"></text></g><g><title>engine::session::internal::Added::find_refs (1 samples, 0.08%)</title><rect x="99.8395%" y="613" width="0.0803%" height="15" fill="rgb(211,178,21)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.8395%" y="597" width="0.0803%" height="15" fill="rgb(205,25,34)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8395%" y="581" width="0.0803%" height="15" fill="rgb(209,57,11)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8395%" y="565" width="0.0803%" height="15" fill="rgb(221,99,2)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.8395%" y="549" width="0.0803%" height="15" fill="rgb(232,79,22)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="99.8395%" y="533" width="0.0803%" height="15" fill="rgb(221,145,32)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.8395%" y="517" width="0.0803%" height="15" fill="rgb(236,133,36)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.8395%" y="501" width="0.0803%" height="15" fill="rgb(208,224,44)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.8395%" y="485" width="0.0803%" height="15" fill="rgb(235,143,15)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="495.50"></text></g><g><title>all (1,246 samples, 100%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(249,83,27)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1023.50"></text></g><g><title>simple-34ca68e0 (1,246 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(238,226,19)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1007.50">simple-34ca68e0</text></g><g><title>_start (1,246 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(226,206,27)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="991.50">_start</text></g><g><title>__libc_start_main (1,246 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(251,182,9)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="975.50">__libc_start_main</text></g><g><title>main (1,246 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(212,140,41)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="959.50">main</text></g><g><title>std::rt::lang_start_internal (1,246 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(220,106,18)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,246 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(252,46,41)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,246 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(209,222,15)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,246 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(233,83,50)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,246 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(205,212,0)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="879.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,246 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(235,117,51)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,246 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(233,133,48)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,246 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(219,3,2)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,246 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(225,80,52)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="815.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,246 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(235,195,42)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="799.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,246 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(240,207,46)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="783.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,246 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(236,112,50)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="767.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,246 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(249,151,27)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="751.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,246 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(253,223,52)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="735.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (254 samples, 20.39%)</title><rect x="79.6148%" y="709" width="20.3852%" height="15" fill="rgb(215,55,33)" fg:x="992" fg:w="254"/><text x="79.8648%" y="719.50">&lt;criterion::routine::Function&lt;M,..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (254 samples, 20.39%)</title><rect x="79.6148%" y="693" width="20.3852%" height="15" fill="rgb(207,24,17)" fg:x="992" fg:w="254"/><text x="79.8648%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::..</text></g><g><title>tests::evaluate_text_in_new_domain (254 samples, 20.39%)</title><rect x="79.6148%" y="677" width="20.3852%" height="15" fill="rgb(218,169,32)" fg:x="992" fg:w="254"/><text x="79.8648%" y="687.50">tests::evaluate_text_in_new_doma..</text></g><g><title>engine::session::Session::evaluate_and_perform (237 samples, 19.02%)</title><rect x="80.9791%" y="661" width="19.0209%" height="15" fill="rgb(209,210,6)" fg:x="1009" fg:w="237"/><text x="81.2291%" y="671.50">engine::session::Session::eval..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (237 samples, 19.02%)</title><rect x="80.9791%" y="645" width="19.0209%" height="15" fill="rgb(225,208,8)" fg:x="1009" fg:w="237"/><text x="81.2291%" y="655.50">engine::session::Session::eval..</text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="99.9197%" y="629" width="0.0803%" height="15" fill="rgb(238,14,32)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="99.9197%" y="613" width="0.0803%" height="15" fill="rgb(211,137,3)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.9197%" y="597" width="0.0803%" height="15" fill="rgb(207,171,19)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.9197%" y="581" width="0.0803%" height="15" fill="rgb(250,80,8)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9197%" y="565" width="0.0803%" height="15" fill="rgb(209,103,53)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9197%" y="549" width="0.0803%" height="15" fill="rgb(233,198,10)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9197%" y="533" width="0.0803%" height="15" fill="rgb(236,125,25)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9197%" y="517" width="0.0803%" height="15" fill="rgb(254,182,48)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="527.50"></text></g></svg></svg>