<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1126" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1109.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1109.00"> </text><svg id="frames" x="10" width="1180" total_samples="1219"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0820%" y="709" width="0.0820%" height="15" fill="rgb(207,35,15)" fg:x="1" fg:w="1"/><text x="0.3320%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2461%" y="645" width="0.0820%" height="15" fill="rgb(238,68,36)" fg:x="3" fg:w="1"/><text x="0.4961%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.33%)</title><rect x="0.1641%" y="709" width="0.3281%" height="15" fill="rgb(205,158,20)" fg:x="2" fg:w="4"/><text x="0.4141%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="0.1641%" y="693" width="0.3281%" height="15" fill="rgb(232,32,22)" fg:x="2" fg:w="4"/><text x="0.4141%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.25%)</title><rect x="0.2461%" y="677" width="0.2461%" height="15" fill="rgb(210,169,6)" fg:x="3" fg:w="3"/><text x="0.4961%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.25%)</title><rect x="0.2461%" y="661" width="0.2461%" height="15" fill="rgb(229,28,12)" fg:x="3" fg:w="3"/><text x="0.4961%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="0.3281%" y="645" width="0.1641%" height="15" fill="rgb(229,78,10)" fg:x="4" fg:w="2"/><text x="0.5781%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.3281%" y="629" width="0.1641%" height="15" fill="rgb(223,139,54)" fg:x="4" fg:w="2"/><text x="0.5781%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.7383%" y="581" width="0.0820%" height="15" fill="rgb(207,110,4)" fg:x="9" fg:w="1"/><text x="0.9883%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="0.5742%" y="645" width="0.4922%" height="15" fill="rgb(248,30,41)" fg:x="7" fg:w="6"/><text x="0.8242%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (5 samples, 0.41%)</title><rect x="0.6563%" y="629" width="0.4102%" height="15" fill="rgb(235,54,25)" fg:x="8" fg:w="5"/><text x="0.9063%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.41%)</title><rect x="0.6563%" y="613" width="0.4102%" height="15" fill="rgb(213,107,41)" fg:x="8" fg:w="5"/><text x="0.9063%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="0.6563%" y="597" width="0.4102%" height="15" fill="rgb(237,102,9)" fg:x="8" fg:w="5"/><text x="0.9063%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="0.8203%" y="581" width="0.2461%" height="15" fill="rgb(252,137,49)" fg:x="10" fg:w="3"/><text x="1.0703%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.9024%" y="565" width="0.1641%" height="15" fill="rgb(233,202,33)" fg:x="11" fg:w="2"/><text x="1.1524%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0664%" y="629" width="0.0820%" height="15" fill="rgb(223,14,51)" fg:x="13" fg:w="1"/><text x="1.3164%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.1485%" y="629" width="0.0820%" height="15" fill="rgb(248,70,23)" fg:x="14" fg:w="1"/><text x="1.3985%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.82%)</title><rect x="0.4922%" y="693" width="0.8203%" height="15" fill="rgb(209,207,47)" fg:x="6" fg:w="10"/><text x="0.7422%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (9 samples, 0.74%)</title><rect x="0.5742%" y="677" width="0.7383%" height="15" fill="rgb(245,124,2)" fg:x="7" fg:w="9"/><text x="0.8242%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.74%)</title><rect x="0.5742%" y="661" width="0.7383%" height="15" fill="rgb(249,208,11)" fg:x="7" fg:w="9"/><text x="0.8242%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.25%)</title><rect x="1.0664%" y="645" width="0.2461%" height="15" fill="rgb(247,112,7)" fg:x="13" fg:w="3"/><text x="1.3164%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.2305%" y="629" width="0.0820%" height="15" fill="rgb(209,192,31)" fg:x="15" fg:w="1"/><text x="1.4805%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.2305%" y="613" width="0.0820%" height="15" fill="rgb(236,55,19)" fg:x="15" fg:w="1"/><text x="1.4805%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.2305%" y="597" width="0.0820%" height="15" fill="rgb(252,89,41)" fg:x="15" fg:w="1"/><text x="1.4805%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.2305%" y="581" width="0.0820%" height="15" fill="rgb(220,172,14)" fg:x="15" fg:w="1"/><text x="1.4805%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2305%" y="565" width="0.0820%" height="15" fill="rgb(252,65,2)" fg:x="15" fg:w="1"/><text x="1.4805%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.31%)</title><rect x="0.0820%" y="725" width="1.3126%" height="15" fill="rgb(250,20,8)" fg:x="1" fg:w="16"/><text x="0.3320%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (11 samples, 0.90%)</title><rect x="0.4922%" y="709" width="0.9024%" height="15" fill="rgb(234,149,13)" fg:x="6" fg:w="11"/><text x="0.7422%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3126%" y="693" width="0.0820%" height="15" fill="rgb(223,219,12)" fg:x="16" fg:w="1"/><text x="1.5626%" y="703.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="1.3946%" y="677" width="0.0820%" height="15" fill="rgb(234,13,49)" fg:x="17" fg:w="1"/><text x="1.6446%" y="687.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="1.6407%" y="629" width="0.0820%" height="15" fill="rgb(214,41,25)" fg:x="20" fg:w="1"/><text x="1.8907%" y="639.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="1.6407%" y="613" width="0.0820%" height="15" fill="rgb(232,198,52)" fg:x="20" fg:w="1"/><text x="1.8907%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="1.6407%" y="597" width="0.0820%" height="15" fill="rgb(236,111,46)" fg:x="20" fg:w="1"/><text x="1.8907%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="1.6407%" y="581" width="0.0820%" height="15" fill="rgb(253,30,20)" fg:x="20" fg:w="1"/><text x="1.8907%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="1.6407%" y="565" width="0.0820%" height="15" fill="rgb(247,141,17)" fg:x="20" fg:w="1"/><text x="1.8907%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="1.6407%" y="549" width="0.0820%" height="15" fill="rgb(214,195,21)" fg:x="20" fg:w="1"/><text x="1.8907%" y="559.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.33%)</title><rect x="1.5587%" y="645" width="0.3281%" height="15" fill="rgb(214,98,12)" fg:x="19" fg:w="4"/><text x="1.8087%" y="655.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="1.7227%" y="629" width="0.1641%" height="15" fill="rgb(239,4,26)" fg:x="21" fg:w="2"/><text x="1.9727%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="1.7227%" y="613" width="0.1641%" height="15" fill="rgb(234,210,35)" fg:x="21" fg:w="2"/><text x="1.9727%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="1.7227%" y="597" width="0.1641%" height="15" fill="rgb(252,178,27)" fg:x="21" fg:w="2"/><text x="1.9727%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="1.7227%" y="581" width="0.1641%" height="15" fill="rgb(217,50,1)" fg:x="21" fg:w="2"/><text x="1.9727%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="1.7227%" y="565" width="0.1641%" height="15" fill="rgb(233,137,5)" fg:x="21" fg:w="2"/><text x="1.9727%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="1.7227%" y="549" width="0.1641%" height="15" fill="rgb(217,227,25)" fg:x="21" fg:w="2"/><text x="1.9727%" y="559.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="1.7227%" y="533" width="0.1641%" height="15" fill="rgb(242,89,38)" fg:x="21" fg:w="2"/><text x="1.9727%" y="543.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (1 samples, 0.08%)</title><rect x="1.8868%" y="629" width="0.0820%" height="15" fill="rgb(212,190,30)" fg:x="23" fg:w="1"/><text x="2.1368%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.8868%" y="613" width="0.0820%" height="15" fill="rgb(222,120,8)" fg:x="23" fg:w="1"/><text x="2.1368%" y="623.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="1.9688%" y="613" width="0.3281%" height="15" fill="rgb(227,181,9)" fg:x="24" fg:w="4"/><text x="2.2188%" y="623.50"></text></g><g><title>glob::fill_todo (4 samples, 0.33%)</title><rect x="1.9688%" y="597" width="0.3281%" height="15" fill="rgb(222,125,29)" fg:x="24" fg:w="4"/><text x="2.2188%" y="607.50"></text></g><g><title>glob::is_dir (4 samples, 0.33%)</title><rect x="1.9688%" y="581" width="0.3281%" height="15" fill="rgb(215,153,31)" fg:x="24" fg:w="4"/><text x="2.2188%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.33%)</title><rect x="1.9688%" y="565" width="0.3281%" height="15" fill="rgb(228,77,30)" fg:x="24" fg:w="4"/><text x="2.2188%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.33%)</title><rect x="1.9688%" y="549" width="0.3281%" height="15" fill="rgb(226,110,9)" fg:x="24" fg:w="4"/><text x="2.2188%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.33%)</title><rect x="1.9688%" y="533" width="0.3281%" height="15" fill="rgb(219,111,7)" fg:x="24" fg:w="4"/><text x="2.2188%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.33%)</title><rect x="1.9688%" y="517" width="0.3281%" height="15" fill="rgb(229,167,25)" fg:x="24" fg:w="4"/><text x="2.2188%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.33%)</title><rect x="1.9688%" y="501" width="0.3281%" height="15" fill="rgb(209,77,43)" fg:x="24" fg:w="4"/><text x="2.2188%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.33%)</title><rect x="1.9688%" y="485" width="0.3281%" height="15" fill="rgb(233,70,39)" fg:x="24" fg:w="4"/><text x="2.2188%" y="495.50"></text></g><g><title>statx (4 samples, 0.33%)</title><rect x="1.9688%" y="469" width="0.3281%" height="15" fill="rgb(207,171,44)" fg:x="24" fg:w="4"/><text x="2.2188%" y="479.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.3790%" y="581" width="0.0820%" height="15" fill="rgb(244,91,6)" fg:x="29" fg:w="1"/><text x="2.6290%" y="591.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.08%)</title><rect x="2.3790%" y="565" width="0.0820%" height="15" fill="rgb(234,136,12)" fg:x="29" fg:w="1"/><text x="2.6290%" y="575.50"></text></g><g><title>std::ffi::os_str::OsString::push (1 samples, 0.08%)</title><rect x="2.3790%" y="549" width="0.0820%" height="15" fill="rgb(216,210,38)" fg:x="29" fg:w="1"/><text x="2.6290%" y="559.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="2.3790%" y="533" width="0.0820%" height="15" fill="rgb(241,227,7)" fg:x="29" fg:w="1"/><text x="2.6290%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="2.3790%" y="517" width="0.0820%" height="15" fill="rgb(241,222,11)" fg:x="29" fg:w="1"/><text x="2.6290%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="2.3790%" y="501" width="0.0820%" height="15" fill="rgb(246,86,18)" fg:x="29" fg:w="1"/><text x="2.6290%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="2.3790%" y="485" width="0.0820%" height="15" fill="rgb(224,151,49)" fg:x="29" fg:w="1"/><text x="2.6290%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="2.3790%" y="469" width="0.0820%" height="15" fill="rgb(235,4,41)" fg:x="29" fg:w="1"/><text x="2.6290%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="2.3790%" y="453" width="0.0820%" height="15" fill="rgb(218,30,52)" fg:x="29" fg:w="1"/><text x="2.6290%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.3790%" y="437" width="0.0820%" height="15" fill="rgb(205,124,51)" fg:x="29" fg:w="1"/><text x="2.6290%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="2.3790%" y="421" width="0.0820%" height="15" fill="rgb(237,126,51)" fg:x="29" fg:w="1"/><text x="2.6290%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.3790%" y="405" width="0.0820%" height="15" fill="rgb(225,32,46)" fg:x="29" fg:w="1"/><text x="2.6290%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="2.3790%" y="389" width="0.0820%" height="15" fill="rgb(251,60,49)" fg:x="29" fg:w="1"/><text x="2.6290%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="2.3790%" y="373" width="0.0820%" height="15" fill="rgb(234,18,23)" fg:x="29" fg:w="1"/><text x="2.6290%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="2.3790%" y="357" width="0.0820%" height="15" fill="rgb(234,25,23)" fg:x="29" fg:w="1"/><text x="2.6290%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.3790%" y="341" width="0.0820%" height="15" fill="rgb(210,43,52)" fg:x="29" fg:w="1"/><text x="2.6290%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.4610%" y="581" width="0.0820%" height="15" fill="rgb(237,198,21)" fg:x="30" fg:w="1"/><text x="2.7110%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.4610%" y="565" width="0.0820%" height="15" fill="rgb(211,20,34)" fg:x="30" fg:w="1"/><text x="2.7110%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4610%" y="549" width="0.0820%" height="15" fill="rgb(221,155,50)" fg:x="30" fg:w="1"/><text x="2.7110%" y="559.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (9 samples, 0.74%)</title><rect x="1.8868%" y="645" width="0.7383%" height="15" fill="rgb(213,214,53)" fg:x="23" fg:w="9"/><text x="2.1368%" y="655.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (8 samples, 0.66%)</title><rect x="1.9688%" y="629" width="0.6563%" height="15" fill="rgb(215,229,48)" fg:x="24" fg:w="8"/><text x="2.2188%" y="639.50"></text></g><g><title>glob::glob (4 samples, 0.33%)</title><rect x="2.2970%" y="613" width="0.3281%" height="15" fill="rgb(243,88,5)" fg:x="28" fg:w="4"/><text x="2.5470%" y="623.50"></text></g><g><title>glob::glob_with (4 samples, 0.33%)</title><rect x="2.2970%" y="597" width="0.3281%" height="15" fill="rgb(216,199,8)" fg:x="28" fg:w="4"/><text x="2.5470%" y="607.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="2.5431%" y="581" width="0.0820%" height="15" fill="rgb(241,22,4)" fg:x="31" fg:w="1"/><text x="2.7931%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.5431%" y="565" width="0.0820%" height="15" fill="rgb(209,190,22)" fg:x="31" fg:w="1"/><text x="2.7931%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.5431%" y="549" width="0.0820%" height="15" fill="rgb(251,138,45)" fg:x="31" fg:w="1"/><text x="2.7931%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.5431%" y="533" width="0.0820%" height="15" fill="rgb(219,111,22)" fg:x="31" fg:w="1"/><text x="2.7931%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.5431%" y="517" width="0.0820%" height="15" fill="rgb(253,29,49)" fg:x="31" fg:w="1"/><text x="2.7931%" y="527.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.6251%" y="613" width="0.0820%" height="15" fill="rgb(238,129,49)" fg:x="32" fg:w="1"/><text x="2.8751%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.6251%" y="597" width="0.0820%" height="15" fill="rgb(240,26,41)" fg:x="32" fg:w="1"/><text x="2.8751%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="2.6251%" y="581" width="0.0820%" height="15" fill="rgb(221,47,33)" fg:x="32" fg:w="1"/><text x="2.8751%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.6251%" y="565" width="0.0820%" height="15" fill="rgb(216,200,17)" fg:x="32" fg:w="1"/><text x="2.8751%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.7071%" y="581" width="0.0820%" height="15" fill="rgb(230,151,26)" fg:x="33" fg:w="1"/><text x="2.9571%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.7071%" y="613" width="0.1641%" height="15" fill="rgb(242,182,16)" fg:x="33" fg:w="2"/><text x="2.9571%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.7071%" y="597" width="0.1641%" height="15" fill="rgb(236,35,53)" fg:x="33" fg:w="2"/><text x="2.9571%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="2.7892%" y="581" width="0.0820%" height="15" fill="rgb(214,180,28)" fg:x="34" fg:w="1"/><text x="3.0392%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.7892%" y="565" width="0.0820%" height="15" fill="rgb(208,173,36)" fg:x="34" fg:w="1"/><text x="3.0392%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8712%" y="565" width="0.0820%" height="15" fill="rgb(218,39,15)" fg:x="35" fg:w="1"/><text x="3.1212%" y="575.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="2.8712%" y="581" width="0.1641%" height="15" fill="rgb(213,145,15)" fg:x="35" fg:w="2"/><text x="3.1212%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.9532%" y="565" width="0.0820%" height="15" fill="rgb(242,110,37)" fg:x="36" fg:w="1"/><text x="3.2032%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.9532%" y="549" width="0.0820%" height="15" fill="rgb(247,146,22)" fg:x="36" fg:w="1"/><text x="3.2032%" y="559.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.25%)</title><rect x="2.8712%" y="613" width="0.2461%" height="15" fill="rgb(215,191,7)" fg:x="35" fg:w="3"/><text x="3.1212%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.25%)</title><rect x="2.8712%" y="597" width="0.2461%" height="15" fill="rgb(240,158,1)" fg:x="35" fg:w="3"/><text x="3.1212%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.0353%" y="581" width="0.0820%" height="15" fill="rgb(241,78,32)" fg:x="37" fg:w="1"/><text x="3.2853%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.0353%" y="565" width="0.0820%" height="15" fill="rgb(248,83,10)" fg:x="37" fg:w="1"/><text x="3.2853%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.1173%" y="613" width="0.0820%" height="15" fill="rgb(241,52,0)" fg:x="38" fg:w="1"/><text x="3.3673%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.1173%" y="597" width="0.0820%" height="15" fill="rgb(238,37,13)" fg:x="38" fg:w="1"/><text x="3.3673%" y="607.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.1993%" y="613" width="0.0820%" height="15" fill="rgb(242,194,17)" fg:x="39" fg:w="1"/><text x="3.4493%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.1993%" y="597" width="0.0820%" height="15" fill="rgb(236,96,3)" fg:x="39" fg:w="1"/><text x="3.4493%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.1993%" y="581" width="0.0820%" height="15" fill="rgb(235,148,34)" fg:x="39" fg:w="1"/><text x="3.4493%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.1993%" y="565" width="0.0820%" height="15" fill="rgb(254,12,11)" fg:x="39" fg:w="1"/><text x="3.4493%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.1993%" y="549" width="0.0820%" height="15" fill="rgb(207,31,54)" fg:x="39" fg:w="1"/><text x="3.4493%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.1993%" y="533" width="0.0820%" height="15" fill="rgb(252,14,28)" fg:x="39" fg:w="1"/><text x="3.4493%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.1993%" y="517" width="0.0820%" height="15" fill="rgb(252,108,36)" fg:x="39" fg:w="1"/><text x="3.4493%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.74%)</title><rect x="2.6251%" y="645" width="0.7383%" height="15" fill="rgb(214,149,7)" fg:x="32" fg:w="9"/><text x="2.8751%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.74%)</title><rect x="2.6251%" y="629" width="0.7383%" height="15" fill="rgb(243,94,12)" fg:x="32" fg:w="9"/><text x="2.8751%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.2814%" y="613" width="0.0820%" height="15" fill="rgb(208,36,10)" fg:x="40" fg:w="1"/><text x="3.5314%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.2814%" y="597" width="0.0820%" height="15" fill="rgb(233,185,52)" fg:x="40" fg:w="1"/><text x="3.5314%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (2 samples, 0.16%)</title><rect x="3.3634%" y="645" width="0.1641%" height="15" fill="rgb(234,50,45)" fg:x="41" fg:w="2"/><text x="3.6134%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="3.4454%" y="629" width="0.0820%" height="15" fill="rgb(228,92,54)" fg:x="42" fg:w="1"/><text x="3.6954%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.4454%" y="613" width="0.0820%" height="15" fill="rgb(224,85,25)" fg:x="42" fg:w="1"/><text x="3.6954%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (26 samples, 2.13%)</title><rect x="1.4766%" y="661" width="2.1329%" height="15" fill="rgb(246,1,45)" fg:x="18" fg:w="26"/><text x="1.7266%" y="671.50">k..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="3.5275%" y="645" width="0.0820%" height="15" fill="rgb(240,66,23)" fg:x="43" fg:w="1"/><text x="3.7775%" y="655.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="3.5275%" y="629" width="0.0820%" height="15" fill="rgb(222,96,27)" fg:x="43" fg:w="1"/><text x="3.7775%" y="639.50"></text></g><g><title>engine::session::Session::initialize (27 samples, 2.21%)</title><rect x="1.4766%" y="677" width="2.2149%" height="15" fill="rgb(212,136,10)" fg:x="18" fg:w="27"/><text x="1.7266%" y="687.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="3.6095%" y="661" width="0.0820%" height="15" fill="rgb(226,192,50)" fg:x="44" fg:w="1"/><text x="3.8595%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.6095%" y="645" width="0.0820%" height="15" fill="rgb(241,182,31)" fg:x="44" fg:w="1"/><text x="3.8595%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.6095%" y="629" width="0.0820%" height="15" fill="rgb(219,205,47)" fg:x="44" fg:w="1"/><text x="3.8595%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (29 samples, 2.38%)</title><rect x="1.3946%" y="725" width="2.3790%" height="15" fill="rgb(207,96,14)" fg:x="17" fg:w="29"/><text x="1.6446%" y="735.50">&lt;e..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (29 samples, 2.38%)</title><rect x="1.3946%" y="709" width="2.3790%" height="15" fill="rgb(216,119,9)" fg:x="17" fg:w="29"/><text x="1.6446%" y="719.50">en..</text></g><g><title>engine::session::Session::new (29 samples, 2.38%)</title><rect x="1.3946%" y="693" width="2.3790%" height="15" fill="rgb(235,62,36)" fg:x="17" fg:w="29"/><text x="1.6446%" y="703.50">en..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="3.6916%" y="677" width="0.0820%" height="15" fill="rgb(214,41,27)" fg:x="45" fg:w="1"/><text x="3.9416%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.6916%" y="661" width="0.0820%" height="15" fill="rgb(214,174,37)" fg:x="45" fg:w="1"/><text x="3.9416%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.6916%" y="645" width="0.0820%" height="15" fill="rgb(212,11,25)" fg:x="45" fg:w="1"/><text x="3.9416%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.8556%" y="709" width="0.0820%" height="15" fill="rgb(217,71,35)" fg:x="47" fg:w="1"/><text x="4.1056%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.8556%" y="693" width="0.0820%" height="15" fill="rgb(234,152,9)" fg:x="47" fg:w="1"/><text x="4.1056%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.8556%" y="677" width="0.0820%" height="15" fill="rgb(228,32,51)" fg:x="47" fg:w="1"/><text x="4.1056%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.8556%" y="661" width="0.0820%" height="15" fill="rgb(209,14,47)" fg:x="47" fg:w="1"/><text x="4.1056%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.9377%" y="661" width="0.0820%" height="15" fill="rgb(218,201,17)" fg:x="48" fg:w="1"/><text x="4.1877%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="3.9377%" y="645" width="0.0820%" height="15" fill="rgb(218,98,15)" fg:x="48" fg:w="1"/><text x="4.1877%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="3.9377%" y="629" width="0.0820%" height="15" fill="rgb(233,202,29)" fg:x="48" fg:w="1"/><text x="4.1877%" y="639.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="3.9377%" y="613" width="0.0820%" height="15" fill="rgb(207,196,44)" fg:x="48" fg:w="1"/><text x="4.1877%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.0197%" y="565" width="0.0820%" height="15" fill="rgb(218,63,34)" fg:x="49" fg:w="1"/><text x="4.2697%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.0197%" y="549" width="0.0820%" height="15" fill="rgb(209,10,5)" fg:x="49" fg:w="1"/><text x="4.2697%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="4.0197%" y="581" width="0.1641%" height="15" fill="rgb(224,36,28)" fg:x="49" fg:w="2"/><text x="4.2697%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="4.1017%" y="565" width="0.0820%" height="15" fill="rgb(249,178,7)" fg:x="50" fg:w="1"/><text x="4.3517%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.1017%" y="549" width="0.0820%" height="15" fill="rgb(253,163,10)" fg:x="50" fg:w="1"/><text x="4.3517%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.1017%" y="533" width="0.0820%" height="15" fill="rgb(245,67,46)" fg:x="50" fg:w="1"/><text x="4.3517%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.1017%" y="517" width="0.0820%" height="15" fill="rgb(225,14,18)" fg:x="50" fg:w="1"/><text x="4.3517%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.1017%" y="501" width="0.0820%" height="15" fill="rgb(217,41,54)" fg:x="50" fg:w="1"/><text x="4.3517%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="4.0197%" y="613" width="0.2461%" height="15" fill="rgb(222,111,11)" fg:x="49" fg:w="3"/><text x="4.2697%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="4.0197%" y="597" width="0.2461%" height="15" fill="rgb(211,85,31)" fg:x="49" fg:w="3"/><text x="4.2697%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.1838%" y="581" width="0.0820%" height="15" fill="rgb(223,29,26)" fg:x="51" fg:w="1"/><text x="4.4338%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="4.2658%" y="597" width="0.1641%" height="15" fill="rgb(236,124,50)" fg:x="52" fg:w="2"/><text x="4.5158%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.2658%" y="581" width="0.1641%" height="15" fill="rgb(219,148,15)" fg:x="52" fg:w="2"/><text x="4.5158%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.2658%" y="565" width="0.1641%" height="15" fill="rgb(248,159,33)" fg:x="52" fg:w="2"/><text x="4.5158%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.3478%" y="549" width="0.0820%" height="15" fill="rgb(252,65,8)" fg:x="53" fg:w="1"/><text x="4.5978%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.3478%" y="533" width="0.0820%" height="15" fill="rgb(236,45,7)" fg:x="53" fg:w="1"/><text x="4.5978%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.3478%" y="517" width="0.0820%" height="15" fill="rgb(244,3,48)" fg:x="53" fg:w="1"/><text x="4.5978%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.3478%" y="501" width="0.0820%" height="15" fill="rgb(224,123,53)" fg:x="53" fg:w="1"/><text x="4.5978%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.3478%" y="485" width="0.0820%" height="15" fill="rgb(223,173,15)" fg:x="53" fg:w="1"/><text x="4.5978%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.4299%" y="581" width="0.0820%" height="15" fill="rgb(254,181,5)" fg:x="54" fg:w="1"/><text x="4.6799%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4299%" y="565" width="0.0820%" height="15" fill="rgb(243,124,33)" fg:x="54" fg:w="1"/><text x="4.6799%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4299%" y="549" width="0.0820%" height="15" fill="rgb(253,220,11)" fg:x="54" fg:w="1"/><text x="4.6799%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4299%" y="533" width="0.0820%" height="15" fill="rgb(217,14,4)" fg:x="54" fg:w="1"/><text x="4.6799%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.5119%" y="565" width="0.0820%" height="15" fill="rgb(209,196,12)" fg:x="55" fg:w="1"/><text x="4.7619%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.5939%" y="565" width="0.0820%" height="15" fill="rgb(237,108,29)" fg:x="56" fg:w="1"/><text x="4.8439%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.5939%" y="549" width="0.0820%" height="15" fill="rgb(216,173,20)" fg:x="56" fg:w="1"/><text x="4.8439%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.5939%" y="533" width="0.0820%" height="15" fill="rgb(245,27,6)" fg:x="56" fg:w="1"/><text x="4.8439%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="4.5939%" y="517" width="0.0820%" height="15" fill="rgb(210,181,20)" fg:x="56" fg:w="1"/><text x="4.8439%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.6760%" y="533" width="0.0820%" height="15" fill="rgb(235,213,1)" fg:x="57" fg:w="1"/><text x="4.9260%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.6760%" y="517" width="0.0820%" height="15" fill="rgb(239,68,43)" fg:x="57" fg:w="1"/><text x="4.9260%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.6760%" y="501" width="0.0820%" height="15" fill="rgb(254,137,43)" fg:x="57" fg:w="1"/><text x="4.9260%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.6760%" y="485" width="0.0820%" height="15" fill="rgb(252,170,38)" fg:x="57" fg:w="1"/><text x="4.9260%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.6760%" y="469" width="0.0820%" height="15" fill="rgb(234,21,42)" fg:x="57" fg:w="1"/><text x="4.9260%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.6760%" y="453" width="0.0820%" height="15" fill="rgb(216,145,40)" fg:x="57" fg:w="1"/><text x="4.9260%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.6760%" y="437" width="0.0820%" height="15" fill="rgb(251,73,9)" fg:x="57" fg:w="1"/><text x="4.9260%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="4.4299%" y="597" width="0.4102%" height="15" fill="rgb(242,54,6)" fg:x="54" fg:w="5"/><text x="4.6799%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="4.5119%" y="581" width="0.3281%" height="15" fill="rgb(239,70,7)" fg:x="55" fg:w="4"/><text x="4.7619%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.6760%" y="565" width="0.1641%" height="15" fill="rgb(216,159,35)" fg:x="57" fg:w="2"/><text x="4.9260%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.6760%" y="549" width="0.1641%" height="15" fill="rgb(224,50,39)" fg:x="57" fg:w="2"/><text x="4.9260%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7580%" y="533" width="0.0820%" height="15" fill="rgb(235,9,35)" fg:x="58" fg:w="1"/><text x="5.0080%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.66%)</title><rect x="4.2658%" y="613" width="0.6563%" height="15" fill="rgb(239,34,21)" fg:x="52" fg:w="8"/><text x="4.5158%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.8400%" y="597" width="0.0820%" height="15" fill="rgb(218,162,43)" fg:x="59" fg:w="1"/><text x="5.0900%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.8400%" y="581" width="0.0820%" height="15" fill="rgb(219,89,33)" fg:x="59" fg:w="1"/><text x="5.0900%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.9221%" y="565" width="0.0820%" height="15" fill="rgb(226,125,37)" fg:x="60" fg:w="1"/><text x="5.1721%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="5.0041%" y="565" width="0.0820%" height="15" fill="rgb(233,149,30)" fg:x="61" fg:w="1"/><text x="5.2541%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.0041%" y="549" width="0.0820%" height="15" fill="rgb(236,8,18)" fg:x="61" fg:w="1"/><text x="5.2541%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.0041%" y="533" width="0.0820%" height="15" fill="rgb(205,176,9)" fg:x="61" fg:w="1"/><text x="5.2541%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.1682%" y="501" width="0.0820%" height="15" fill="rgb(252,103,44)" fg:x="63" fg:w="1"/><text x="5.4182%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.25%)</title><rect x="5.0861%" y="549" width="0.2461%" height="15" fill="rgb(207,68,53)" fg:x="62" fg:w="3"/><text x="5.3361%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="5.0861%" y="533" width="0.2461%" height="15" fill="rgb(218,193,48)" fg:x="62" fg:w="3"/><text x="5.3361%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="5.0861%" y="517" width="0.2461%" height="15" fill="rgb(234,121,52)" fg:x="62" fg:w="3"/><text x="5.3361%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.2502%" y="501" width="0.0820%" height="15" fill="rgb(227,218,49)" fg:x="64" fg:w="1"/><text x="5.5002%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2502%" y="485" width="0.0820%" height="15" fill="rgb(221,8,7)" fg:x="64" fg:w="1"/><text x="5.5002%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.2502%" y="469" width="0.0820%" height="15" fill="rgb(217,151,36)" fg:x="64" fg:w="1"/><text x="5.5002%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.2502%" y="453" width="0.0820%" height="15" fill="rgb(213,71,5)" fg:x="64" fg:w="1"/><text x="5.5002%" y="463.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.56%)</title><rect x="3.9377%" y="709" width="1.5587%" height="15" fill="rgb(225,145,43)" fg:x="48" fg:w="19"/><text x="4.1877%" y="719.50"></text></g><g><title>engine::session::state::State::close (19 samples, 1.56%)</title><rect x="3.9377%" y="693" width="1.5587%" height="15" fill="rgb(235,118,19)" fg:x="48" fg:w="19"/><text x="4.1877%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (19 samples, 1.56%)</title><rect x="3.9377%" y="677" width="1.5587%" height="15" fill="rgb(214,102,36)" fg:x="48" fg:w="19"/><text x="4.1877%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.48%)</title><rect x="4.0197%" y="661" width="1.4766%" height="15" fill="rgb(220,56,43)" fg:x="49" fg:w="18"/><text x="4.2697%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 1.48%)</title><rect x="4.0197%" y="645" width="1.4766%" height="15" fill="rgb(246,136,46)" fg:x="49" fg:w="18"/><text x="4.2697%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.48%)</title><rect x="4.0197%" y="629" width="1.4766%" height="15" fill="rgb(249,99,12)" fg:x="49" fg:w="18"/><text x="4.2697%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.57%)</title><rect x="4.9221%" y="613" width="0.5742%" height="15" fill="rgb(224,31,42)" fg:x="60" fg:w="7"/><text x="5.1721%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="4.9221%" y="597" width="0.5742%" height="15" fill="rgb(208,96,21)" fg:x="60" fg:w="7"/><text x="5.1721%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="4.9221%" y="581" width="0.5742%" height="15" fill="rgb(237,229,7)" fg:x="60" fg:w="7"/><text x="5.1721%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.41%)</title><rect x="5.0861%" y="565" width="0.4102%" height="15" fill="rgb(210,12,6)" fg:x="62" fg:w="5"/><text x="5.3361%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.3322%" y="549" width="0.1641%" height="15" fill="rgb(240,9,34)" fg:x="65" fg:w="2"/><text x="5.5822%" y="559.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="5.4963%" y="709" width="0.0820%" height="15" fill="rgb(211,68,37)" fg:x="67" fg:w="1"/><text x="5.7463%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="5.4963%" y="693" width="0.0820%" height="15" fill="rgb(249,138,50)" fg:x="67" fg:w="1"/><text x="5.7463%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4963%" y="677" width="0.0820%" height="15" fill="rgb(243,185,40)" fg:x="67" fg:w="1"/><text x="5.7463%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.4963%" y="661" width="0.0820%" height="15" fill="rgb(242,92,35)" fg:x="67" fg:w="1"/><text x="5.7463%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="5.4963%" y="645" width="0.0820%" height="15" fill="rgb(244,98,5)" fg:x="67" fg:w="1"/><text x="5.7463%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4963%" y="629" width="0.0820%" height="15" fill="rgb(228,186,29)" fg:x="67" fg:w="1"/><text x="5.7463%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.4963%" y="613" width="0.0820%" height="15" fill="rgb(253,7,44)" fg:x="67" fg:w="1"/><text x="5.7463%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4963%" y="597" width="0.0820%" height="15" fill="rgb(216,11,45)" fg:x="67" fg:w="1"/><text x="5.7463%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.5783%" y="677" width="0.0820%" height="15" fill="rgb(205,67,3)" fg:x="68" fg:w="1"/><text x="5.8283%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.5783%" y="661" width="0.0820%" height="15" fill="rgb(250,18,3)" fg:x="68" fg:w="1"/><text x="5.8283%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.5783%" y="645" width="0.0820%" height="15" fill="rgb(241,222,43)" fg:x="68" fg:w="1"/><text x="5.8283%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.5783%" y="629" width="0.0820%" height="15" fill="rgb(233,115,3)" fg:x="68" fg:w="1"/><text x="5.8283%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.5783%" y="613" width="0.0820%" height="15" fill="rgb(215,165,25)" fg:x="68" fg:w="1"/><text x="5.8283%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.5783%" y="597" width="0.0820%" height="15" fill="rgb(234,179,6)" fg:x="68" fg:w="1"/><text x="5.8283%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.5783%" y="581" width="0.0820%" height="15" fill="rgb(215,82,23)" fg:x="68" fg:w="1"/><text x="5.8283%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.5783%" y="565" width="0.0820%" height="15" fill="rgb(211,47,18)" fg:x="68" fg:w="1"/><text x="5.8283%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.5783%" y="549" width="0.0820%" height="15" fill="rgb(248,17,9)" fg:x="68" fg:w="1"/><text x="5.8283%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.5783%" y="533" width="0.0820%" height="15" fill="rgb(210,212,12)" fg:x="68" fg:w="1"/><text x="5.8283%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.5783%" y="517" width="0.0820%" height="15" fill="rgb(230,135,45)" fg:x="68" fg:w="1"/><text x="5.8283%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5783%" y="501" width="0.0820%" height="15" fill="rgb(214,121,41)" fg:x="68" fg:w="1"/><text x="5.8283%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="5.6604%" y="677" width="0.0820%" height="15" fill="rgb(239,165,45)" fg:x="69" fg:w="1"/><text x="5.9104%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.6604%" y="661" width="0.0820%" height="15" fill="rgb(214,85,51)" fg:x="69" fg:w="1"/><text x="5.9104%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.6604%" y="645" width="0.0820%" height="15" fill="rgb(223,90,27)" fg:x="69" fg:w="1"/><text x="5.9104%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.6604%" y="629" width="0.0820%" height="15" fill="rgb(244,84,11)" fg:x="69" fg:w="1"/><text x="5.9104%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="5.7424%" y="677" width="0.0820%" height="15" fill="rgb(253,41,47)" fg:x="70" fg:w="1"/><text x="5.9924%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="5.7424%" y="661" width="0.0820%" height="15" fill="rgb(232,39,5)" fg:x="70" fg:w="1"/><text x="5.9924%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="5.7424%" y="645" width="0.0820%" height="15" fill="rgb(211,93,4)" fg:x="70" fg:w="1"/><text x="5.9924%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.7424%" y="629" width="0.0820%" height="15" fill="rgb(219,50,49)" fg:x="70" fg:w="1"/><text x="5.9924%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.7424%" y="613" width="0.0820%" height="15" fill="rgb(232,80,19)" fg:x="70" fg:w="1"/><text x="5.9924%" y="623.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="5.8244%" y="661" width="0.0820%" height="15" fill="rgb(215,227,39)" fg:x="71" fg:w="1"/><text x="6.0744%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8244%" y="645" width="0.0820%" height="15" fill="rgb(211,99,12)" fg:x="71" fg:w="1"/><text x="6.0744%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="5.8244%" y="629" width="0.0820%" height="15" fill="rgb(214,158,5)" fg:x="71" fg:w="1"/><text x="6.0744%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.49%)</title><rect x="5.5783%" y="693" width="0.4922%" height="15" fill="rgb(242,19,53)" fg:x="68" fg:w="6"/><text x="5.8283%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.25%)</title><rect x="5.8244%" y="677" width="0.2461%" height="15" fill="rgb(208,18,20)" fg:x="71" fg:w="3"/><text x="6.0744%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="5.9065%" y="661" width="0.1641%" height="15" fill="rgb(250,44,11)" fg:x="72" fg:w="2"/><text x="6.1565%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="5.9065%" y="645" width="0.1641%" height="15" fill="rgb(238,159,13)" fg:x="72" fg:w="2"/><text x="6.1565%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="5.9065%" y="629" width="0.1641%" height="15" fill="rgb(231,74,18)" fg:x="72" fg:w="2"/><text x="6.1565%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="5.9065%" y="613" width="0.1641%" height="15" fill="rgb(229,219,45)" fg:x="72" fg:w="2"/><text x="6.1565%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.9065%" y="597" width="0.1641%" height="15" fill="rgb(210,221,1)" fg:x="72" fg:w="2"/><text x="6.1565%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.9065%" y="581" width="0.1641%" height="15" fill="rgb(209,60,51)" fg:x="72" fg:w="2"/><text x="6.1565%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.9065%" y="565" width="0.1641%" height="15" fill="rgb(252,97,34)" fg:x="72" fg:w="2"/><text x="6.1565%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.9065%" y="549" width="0.1641%" height="15" fill="rgb(243,211,37)" fg:x="72" fg:w="2"/><text x="6.1565%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.9065%" y="533" width="0.1641%" height="15" fill="rgb(210,229,37)" fg:x="72" fg:w="2"/><text x="6.1565%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.9885%" y="517" width="0.0820%" height="15" fill="rgb(220,208,43)" fg:x="73" fg:w="1"/><text x="6.2385%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.57%)</title><rect x="5.5783%" y="709" width="0.5742%" height="15" fill="rgb(218,118,50)" fg:x="68" fg:w="7"/><text x="5.8283%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="6.0705%" y="693" width="0.0820%" height="15" fill="rgb(254,169,52)" fg:x="74" fg:w="1"/><text x="6.3205%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.0705%" y="677" width="0.0820%" height="15" fill="rgb(221,214,37)" fg:x="74" fg:w="1"/><text x="6.3205%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.0705%" y="661" width="0.0820%" height="15" fill="rgb(254,186,32)" fg:x="74" fg:w="1"/><text x="6.3205%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.0705%" y="645" width="0.0820%" height="15" fill="rgb(215,144,43)" fg:x="74" fg:w="1"/><text x="6.3205%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.0705%" y="629" width="0.0820%" height="15" fill="rgb(252,21,46)" fg:x="74" fg:w="1"/><text x="6.3205%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.0705%" y="613" width="0.0820%" height="15" fill="rgb(207,166,46)" fg:x="74" fg:w="1"/><text x="6.3205%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.0705%" y="597" width="0.0820%" height="15" fill="rgb(253,37,49)" fg:x="74" fg:w="1"/><text x="6.3205%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.0705%" y="581" width="0.0820%" height="15" fill="rgb(222,97,20)" fg:x="74" fg:w="1"/><text x="6.3205%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.0705%" y="565" width="0.0820%" height="15" fill="rgb(244,181,26)" fg:x="74" fg:w="1"/><text x="6.3205%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.0705%" y="549" width="0.0820%" height="15" fill="rgb(241,22,29)" fg:x="74" fg:w="1"/><text x="6.3205%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.0705%" y="533" width="0.0820%" height="15" fill="rgb(206,200,43)" fg:x="74" fg:w="1"/><text x="6.3205%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.0705%" y="517" width="0.0820%" height="15" fill="rgb(226,224,43)" fg:x="74" fg:w="1"/><text x="6.3205%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.0705%" y="501" width="0.0820%" height="15" fill="rgb(253,129,28)" fg:x="74" fg:w="1"/><text x="6.3205%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.0705%" y="485" width="0.0820%" height="15" fill="rgb(252,99,33)" fg:x="74" fg:w="1"/><text x="6.3205%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.0705%" y="469" width="0.0820%" height="15" fill="rgb(208,123,45)" fg:x="74" fg:w="1"/><text x="6.3205%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.0705%" y="453" width="0.0820%" height="15" fill="rgb(251,106,12)" fg:x="74" fg:w="1"/><text x="6.3205%" y="463.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="6.1526%" y="709" width="0.0820%" height="15" fill="rgb(240,209,35)" fg:x="75" fg:w="1"/><text x="6.4026%" y="719.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="6.1526%" y="693" width="0.0820%" height="15" fill="rgb(214,52,50)" fg:x="75" fg:w="1"/><text x="6.4026%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="6.1526%" y="677" width="0.0820%" height="15" fill="rgb(234,119,4)" fg:x="75" fg:w="1"/><text x="6.4026%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1526%" y="661" width="0.0820%" height="15" fill="rgb(228,181,36)" fg:x="75" fg:w="1"/><text x="6.4026%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.1526%" y="645" width="0.0820%" height="15" fill="rgb(213,171,42)" fg:x="75" fg:w="1"/><text x="6.4026%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1526%" y="629" width="0.0820%" height="15" fill="rgb(239,14,41)" fg:x="75" fg:w="1"/><text x="6.4026%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.1526%" y="613" width="0.0820%" height="15" fill="rgb(239,111,46)" fg:x="75" fg:w="1"/><text x="6.4026%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1526%" y="597" width="0.0820%" height="15" fill="rgb(214,72,7)" fg:x="75" fg:w="1"/><text x="6.4026%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.1526%" y="581" width="0.0820%" height="15" fill="rgb(221,114,1)" fg:x="75" fg:w="1"/><text x="6.4026%" y="591.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="6.2346%" y="677" width="0.0820%" height="15" fill="rgb(213,143,14)" fg:x="76" fg:w="1"/><text x="6.4846%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (3 samples, 0.25%)</title><rect x="6.2346%" y="709" width="0.2461%" height="15" fill="rgb(220,221,53)" fg:x="76" fg:w="3"/><text x="6.4846%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.25%)</title><rect x="6.2346%" y="693" width="0.2461%" height="15" fill="rgb(236,189,27)" fg:x="76" fg:w="3"/><text x="6.4846%" y="703.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="6.3167%" y="677" width="0.1641%" height="15" fill="rgb(252,139,49)" fg:x="77" fg:w="2"/><text x="6.5667%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="6.3167%" y="661" width="0.1641%" height="15" fill="rgb(231,158,33)" fg:x="77" fg:w="2"/><text x="6.5667%" y="671.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="6.3167%" y="645" width="0.1641%" height="15" fill="rgb(207,201,15)" fg:x="77" fg:w="2"/><text x="6.5667%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="6.3167%" y="629" width="0.1641%" height="15" fill="rgb(218,43,48)" fg:x="77" fg:w="2"/><text x="6.5667%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="6.3167%" y="613" width="0.1641%" height="15" fill="rgb(244,63,52)" fg:x="77" fg:w="2"/><text x="6.5667%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="6.3167%" y="597" width="0.1641%" height="15" fill="rgb(236,60,17)" fg:x="77" fg:w="2"/><text x="6.5667%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="6.3167%" y="581" width="0.1641%" height="15" fill="rgb(205,206,29)" fg:x="77" fg:w="2"/><text x="6.5667%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="6.4807%" y="693" width="0.0820%" height="15" fill="rgb(205,209,35)" fg:x="79" fg:w="1"/><text x="6.7307%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.4807%" y="677" width="0.0820%" height="15" fill="rgb(227,112,14)" fg:x="79" fg:w="1"/><text x="6.7307%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="6.5628%" y="693" width="0.0820%" height="15" fill="rgb(248,151,9)" fg:x="80" fg:w="1"/><text x="6.8128%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.5628%" y="677" width="0.0820%" height="15" fill="rgb(247,45,40)" fg:x="80" fg:w="1"/><text x="6.8128%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.6448%" y="677" width="0.0820%" height="15" fill="rgb(232,185,16)" fg:x="81" fg:w="1"/><text x="6.8948%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.6448%" y="661" width="0.0820%" height="15" fill="rgb(215,45,44)" fg:x="81" fg:w="1"/><text x="6.8948%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="6.6448%" y="645" width="0.0820%" height="15" fill="rgb(206,69,32)" fg:x="81" fg:w="1"/><text x="6.8948%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (3 samples, 0.25%)</title><rect x="6.6448%" y="693" width="0.2461%" height="15" fill="rgb(233,98,50)" fg:x="81" fg:w="3"/><text x="6.8948%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="6.7268%" y="677" width="0.1641%" height="15" fill="rgb(232,217,52)" fg:x="82" fg:w="2"/><text x="6.9768%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="6.7268%" y="661" width="0.1641%" height="15" fill="rgb(250,42,51)" fg:x="82" fg:w="2"/><text x="6.9768%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="6.7268%" y="645" width="0.1641%" height="15" fill="rgb(241,200,26)" fg:x="82" fg:w="2"/><text x="6.9768%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.9729%" y="613" width="0.0820%" height="15" fill="rgb(207,10,32)" fg:x="85" fg:w="1"/><text x="7.2229%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="6.9729%" y="597" width="0.0820%" height="15" fill="rgb(214,63,15)" fg:x="85" fg:w="1"/><text x="7.2229%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.9729%" y="581" width="0.0820%" height="15" fill="rgb(234,176,14)" fg:x="85" fg:w="1"/><text x="7.2229%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9729%" y="565" width="0.0820%" height="15" fill="rgb(226,104,52)" fg:x="85" fg:w="1"/><text x="7.2229%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.9729%" y="549" width="0.0820%" height="15" fill="rgb(211,222,1)" fg:x="85" fg:w="1"/><text x="7.2229%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9729%" y="533" width="0.0820%" height="15" fill="rgb(237,7,3)" fg:x="85" fg:w="1"/><text x="7.2229%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.9729%" y="517" width="0.0820%" height="15" fill="rgb(218,143,7)" fg:x="85" fg:w="1"/><text x="7.2229%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9729%" y="501" width="0.0820%" height="15" fill="rgb(208,25,22)" fg:x="85" fg:w="1"/><text x="7.2229%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0550%" y="581" width="0.0820%" height="15" fill="rgb(228,127,16)" fg:x="86" fg:w="1"/><text x="7.3050%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0550%" y="565" width="0.0820%" height="15" fill="rgb(237,86,27)" fg:x="86" fg:w="1"/><text x="7.3050%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0550%" y="549" width="0.0820%" height="15" fill="rgb(207,125,19)" fg:x="86" fg:w="1"/><text x="7.3050%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.0550%" y="533" width="0.0820%" height="15" fill="rgb(243,195,0)" fg:x="86" fg:w="1"/><text x="7.3050%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.0550%" y="517" width="0.0820%" height="15" fill="rgb(230,95,18)" fg:x="86" fg:w="1"/><text x="7.3050%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.0550%" y="501" width="0.0820%" height="15" fill="rgb(232,157,21)" fg:x="86" fg:w="1"/><text x="7.3050%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.0550%" y="485" width="0.0820%" height="15" fill="rgb(212,120,50)" fg:x="86" fg:w="1"/><text x="7.3050%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.0550%" y="469" width="0.0820%" height="15" fill="rgb(222,204,44)" fg:x="86" fg:w="1"/><text x="7.3050%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.0550%" y="453" width="0.0820%" height="15" fill="rgb(236,6,33)" fg:x="86" fg:w="1"/><text x="7.3050%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.0550%" y="437" width="0.0820%" height="15" fill="rgb(247,11,38)" fg:x="86" fg:w="1"/><text x="7.3050%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.0550%" y="421" width="0.0820%" height="15" fill="rgb(215,111,0)" fg:x="86" fg:w="1"/><text x="7.3050%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.0550%" y="405" width="0.0820%" height="15" fill="rgb(211,65,46)" fg:x="86" fg:w="1"/><text x="7.3050%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.0550%" y="389" width="0.0820%" height="15" fill="rgb(216,5,12)" fg:x="86" fg:w="1"/><text x="7.3050%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.0550%" y="373" width="0.0820%" height="15" fill="rgb(226,7,2)" fg:x="86" fg:w="1"/><text x="7.3050%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.0550%" y="357" width="0.0820%" height="15" fill="rgb(242,116,12)" fg:x="86" fg:w="1"/><text x="7.3050%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.33%)</title><rect x="6.8909%" y="693" width="0.3281%" height="15" fill="rgb(249,209,7)" fg:x="84" fg:w="4"/><text x="7.1409%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="6.9729%" y="677" width="0.2461%" height="15" fill="rgb(232,73,17)" fg:x="85" fg:w="3"/><text x="7.2229%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.25%)</title><rect x="6.9729%" y="661" width="0.2461%" height="15" fill="rgb(214,13,32)" fg:x="85" fg:w="3"/><text x="7.2229%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.25%)</title><rect x="6.9729%" y="645" width="0.2461%" height="15" fill="rgb(221,125,10)" fg:x="85" fg:w="3"/><text x="7.2229%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.25%)</title><rect x="6.9729%" y="629" width="0.2461%" height="15" fill="rgb(246,7,44)" fg:x="85" fg:w="3"/><text x="7.2229%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="7.0550%" y="613" width="0.1641%" height="15" fill="rgb(239,18,35)" fg:x="86" fg:w="2"/><text x="7.3050%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="7.0550%" y="597" width="0.1641%" height="15" fill="rgb(250,222,16)" fg:x="86" fg:w="2"/><text x="7.3050%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1370%" y="581" width="0.0820%" height="15" fill="rgb(219,100,8)" fg:x="87" fg:w="1"/><text x="7.3870%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1370%" y="565" width="0.0820%" height="15" fill="rgb(240,62,13)" fg:x="87" fg:w="1"/><text x="7.3870%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.1370%" y="549" width="0.0820%" height="15" fill="rgb(253,194,2)" fg:x="87" fg:w="1"/><text x="7.3870%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1370%" y="533" width="0.0820%" height="15" fill="rgb(235,58,31)" fg:x="87" fg:w="1"/><text x="7.3870%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1370%" y="517" width="0.0820%" height="15" fill="rgb(231,37,11)" fg:x="87" fg:w="1"/><text x="7.3870%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1370%" y="501" width="0.0820%" height="15" fill="rgb(235,133,0)" fg:x="87" fg:w="1"/><text x="7.3870%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="7.2190%" y="597" width="0.0820%" height="15" fill="rgb(212,185,40)" fg:x="88" fg:w="1"/><text x="7.4690%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="7.2190%" y="581" width="0.0820%" height="15" fill="rgb(216,68,42)" fg:x="88" fg:w="1"/><text x="7.4690%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.2190%" y="565" width="0.0820%" height="15" fill="rgb(239,81,4)" fg:x="88" fg:w="1"/><text x="7.4690%" y="575.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="7.2190%" y="549" width="0.0820%" height="15" fill="rgb(206,86,6)" fg:x="88" fg:w="1"/><text x="7.4690%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="7.2190%" y="533" width="0.0820%" height="15" fill="rgb(249,95,27)" fg:x="88" fg:w="1"/><text x="7.4690%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="7.2190%" y="629" width="0.1641%" height="15" fill="rgb(205,155,45)" fg:x="88" fg:w="2"/><text x="7.4690%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="7.2190%" y="613" width="0.1641%" height="15" fill="rgb(213,55,42)" fg:x="88" fg:w="2"/><text x="7.4690%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.3011%" y="597" width="0.0820%" height="15" fill="rgb(249,197,4)" fg:x="89" fg:w="1"/><text x="7.5511%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.3831%" y="597" width="0.0820%" height="15" fill="rgb(212,128,32)" fg:x="90" fg:w="1"/><text x="7.6331%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.3831%" y="581" width="0.0820%" height="15" fill="rgb(252,47,30)" fg:x="90" fg:w="1"/><text x="7.6331%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.3831%" y="565" width="0.0820%" height="15" fill="rgb(209,79,18)" fg:x="90" fg:w="1"/><text x="7.6331%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="7.5472%" y="549" width="0.1641%" height="15" fill="rgb(225,81,38)" fg:x="92" fg:w="2"/><text x="7.7972%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.6292%" y="533" width="0.0820%" height="15" fill="rgb(205,95,16)" fg:x="93" fg:w="1"/><text x="7.8792%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.6292%" y="517" width="0.0820%" height="15" fill="rgb(214,30,4)" fg:x="93" fg:w="1"/><text x="7.8792%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="7.4651%" y="581" width="0.3281%" height="15" fill="rgb(232,137,22)" fg:x="91" fg:w="4"/><text x="7.7151%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="7.5472%" y="565" width="0.2461%" height="15" fill="rgb(232,156,19)" fg:x="92" fg:w="3"/><text x="7.7972%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.7112%" y="549" width="0.0820%" height="15" fill="rgb(248,157,26)" fg:x="94" fg:w="1"/><text x="7.9612%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="7.7933%" y="581" width="0.0820%" height="15" fill="rgb(242,24,3)" fg:x="95" fg:w="1"/><text x="8.0433%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.7933%" y="565" width="0.0820%" height="15" fill="rgb(218,195,48)" fg:x="95" fg:w="1"/><text x="8.0433%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.7933%" y="549" width="0.0820%" height="15" fill="rgb(214,193,36)" fg:x="95" fg:w="1"/><text x="8.0433%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.7933%" y="533" width="0.0820%" height="15" fill="rgb(242,110,40)" fg:x="95" fg:w="1"/><text x="8.0433%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.7933%" y="517" width="0.0820%" height="15" fill="rgb(233,150,26)" fg:x="95" fg:w="1"/><text x="8.0433%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.7933%" y="501" width="0.0820%" height="15" fill="rgb(239,200,30)" fg:x="95" fg:w="1"/><text x="8.0433%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.7933%" y="485" width="0.0820%" height="15" fill="rgb(226,28,11)" fg:x="95" fg:w="1"/><text x="8.0433%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.7933%" y="469" width="0.0820%" height="15" fill="rgb(220,26,48)" fg:x="95" fg:w="1"/><text x="8.0433%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="7.8753%" y="549" width="0.1641%" height="15" fill="rgb(232,10,11)" fg:x="96" fg:w="2"/><text x="8.1253%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.8753%" y="533" width="0.1641%" height="15" fill="rgb(252,143,50)" fg:x="96" fg:w="2"/><text x="8.1253%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.8753%" y="517" width="0.1641%" height="15" fill="rgb(206,58,22)" fg:x="96" fg:w="2"/><text x="8.1253%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.9573%" y="501" width="0.0820%" height="15" fill="rgb(250,9,45)" fg:x="97" fg:w="1"/><text x="8.2073%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.9573%" y="485" width="0.0820%" height="15" fill="rgb(225,148,14)" fg:x="97" fg:w="1"/><text x="8.2073%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.9573%" y="469" width="0.0820%" height="15" fill="rgb(205,178,40)" fg:x="97" fg:w="1"/><text x="8.2073%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.9573%" y="453" width="0.0820%" height="15" fill="rgb(215,201,4)" fg:x="97" fg:w="1"/><text x="8.2073%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.25%)</title><rect x="7.8753%" y="565" width="0.2461%" height="15" fill="rgb(219,223,24)" fg:x="96" fg:w="3"/><text x="8.1253%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0394%" y="549" width="0.0820%" height="15" fill="rgb(217,19,31)" fg:x="98" fg:w="1"/><text x="8.2894%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.2034%" y="501" width="0.1641%" height="15" fill="rgb(235,33,3)" fg:x="100" fg:w="2"/><text x="8.4534%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.2855%" y="485" width="0.0820%" height="15" fill="rgb(221,39,18)" fg:x="101" fg:w="1"/><text x="8.5355%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.2855%" y="469" width="0.0820%" height="15" fill="rgb(242,162,33)" fg:x="101" fg:w="1"/><text x="8.5355%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.2855%" y="453" width="0.0820%" height="15" fill="rgb(233,215,28)" fg:x="101" fg:w="1"/><text x="8.5355%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.25%)</title><rect x="8.2034%" y="549" width="0.2461%" height="15" fill="rgb(212,117,9)" fg:x="100" fg:w="3"/><text x="8.4534%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="8.2034%" y="533" width="0.2461%" height="15" fill="rgb(237,70,47)" fg:x="100" fg:w="3"/><text x="8.4534%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.25%)</title><rect x="8.2034%" y="517" width="0.2461%" height="15" fill="rgb(206,177,13)" fg:x="100" fg:w="3"/><text x="8.4534%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="8.3675%" y="501" width="0.0820%" height="15" fill="rgb(209,174,33)" fg:x="102" fg:w="1"/><text x="8.6175%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.4495%" y="533" width="0.0820%" height="15" fill="rgb(226,6,11)" fg:x="103" fg:w="1"/><text x="8.6995%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.5316%" y="533" width="0.0820%" height="15" fill="rgb(240,214,6)" fg:x="104" fg:w="1"/><text x="8.7816%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.5316%" y="517" width="0.0820%" height="15" fill="rgb(254,214,40)" fg:x="104" fg:w="1"/><text x="8.7816%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.5316%" y="501" width="0.0820%" height="15" fill="rgb(230,187,15)" fg:x="104" fg:w="1"/><text x="8.7816%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.5316%" y="485" width="0.0820%" height="15" fill="rgb(250,11,27)" fg:x="104" fg:w="1"/><text x="8.7816%" y="495.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="8.6136%" y="517" width="0.0820%" height="15" fill="rgb(243,107,19)" fg:x="105" fg:w="1"/><text x="8.8636%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.25%)</title><rect x="8.6957%" y="517" width="0.2461%" height="15" fill="rgb(253,66,26)" fg:x="106" fg:w="3"/><text x="8.9457%" y="527.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="8.6957%" y="501" width="0.2461%" height="15" fill="rgb(228,43,8)" fg:x="106" fg:w="3"/><text x="8.9457%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.25%)</title><rect x="8.6957%" y="485" width="0.2461%" height="15" fill="rgb(232,197,36)" fg:x="106" fg:w="3"/><text x="8.9457%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.25%)</title><rect x="8.6957%" y="469" width="0.2461%" height="15" fill="rgb(221,182,31)" fg:x="106" fg:w="3"/><text x="8.9457%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.25%)</title><rect x="8.6957%" y="453" width="0.2461%" height="15" fill="rgb(244,25,36)" fg:x="106" fg:w="3"/><text x="8.9457%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="8.6957%" y="437" width="0.2461%" height="15" fill="rgb(247,101,19)" fg:x="106" fg:w="3"/><text x="8.9457%" y="447.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="8.6957%" y="421" width="0.2461%" height="15" fill="rgb(223,117,19)" fg:x="106" fg:w="3"/><text x="8.9457%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="8.9418%" y="517" width="0.3281%" height="15" fill="rgb(249,63,38)" fg:x="109" fg:w="4"/><text x="9.1918%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.33%)</title><rect x="8.9418%" y="501" width="0.3281%" height="15" fill="rgb(220,143,23)" fg:x="109" fg:w="4"/><text x="9.1918%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.33%)</title><rect x="8.9418%" y="485" width="0.3281%" height="15" fill="rgb(252,183,22)" fg:x="109" fg:w="4"/><text x="9.1918%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.33%)</title><rect x="8.9418%" y="469" width="0.3281%" height="15" fill="rgb(243,176,15)" fg:x="109" fg:w="4"/><text x="9.1918%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.33%)</title><rect x="8.9418%" y="453" width="0.3281%" height="15" fill="rgb(244,204,46)" fg:x="109" fg:w="4"/><text x="9.1918%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.33%)</title><rect x="8.9418%" y="437" width="0.3281%" height="15" fill="rgb(227,28,54)" fg:x="109" fg:w="4"/><text x="9.1918%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="8.9418%" y="421" width="0.3281%" height="15" fill="rgb(231,10,15)" fg:x="109" fg:w="4"/><text x="9.1918%" y="431.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="8.9418%" y="405" width="0.3281%" height="15" fill="rgb(210,200,17)" fg:x="109" fg:w="4"/><text x="9.1918%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.90%)</title><rect x="8.4495%" y="549" width="0.9024%" height="15" fill="rgb(251,106,46)" fg:x="103" fg:w="11"/><text x="8.6995%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.74%)</title><rect x="8.6136%" y="533" width="0.7383%" height="15" fill="rgb(218,211,15)" fg:x="105" fg:w="9"/><text x="8.8636%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.2699%" y="517" width="0.0820%" height="15" fill="rgb(239,62,10)" fg:x="113" fg:w="1"/><text x="9.5199%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.2699%" y="501" width="0.0820%" height="15" fill="rgb(225,53,53)" fg:x="113" fg:w="1"/><text x="9.5199%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (21 samples, 1.72%)</title><rect x="7.8753%" y="581" width="1.7227%" height="15" fill="rgb(207,16,24)" fg:x="96" fg:w="21"/><text x="8.1253%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (18 samples, 1.48%)</title><rect x="8.1214%" y="565" width="1.4766%" height="15" fill="rgb(217,52,28)" fg:x="99" fg:w="18"/><text x="8.3714%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="9.3519%" y="549" width="0.2461%" height="15" fill="rgb(246,1,5)" fg:x="114" fg:w="3"/><text x="9.6019%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="9.4340%" y="533" width="0.1641%" height="15" fill="rgb(221,29,26)" fg:x="115" fg:w="2"/><text x="9.6840%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="9.4340%" y="517" width="0.1641%" height="15" fill="rgb(250,133,32)" fg:x="115" fg:w="2"/><text x="9.6840%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="9.4340%" y="501" width="0.1641%" height="15" fill="rgb(236,63,16)" fg:x="115" fg:w="2"/><text x="9.6840%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="9.4340%" y="485" width="0.1641%" height="15" fill="rgb(231,159,14)" fg:x="115" fg:w="2"/><text x="9.6840%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="9.4340%" y="469" width="0.1641%" height="15" fill="rgb(207,102,36)" fg:x="115" fg:w="2"/><text x="9.6840%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="9.6801%" y="565" width="0.0820%" height="15" fill="rgb(230,224,31)" fg:x="118" fg:w="1"/><text x="9.9301%" y="575.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::iter (1 samples, 0.08%)</title><rect x="9.6801%" y="549" width="0.0820%" height="15" fill="rgb(215,182,16)" fg:x="118" fg:w="1"/><text x="9.9301%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.7621%" y="533" width="0.1641%" height="15" fill="rgb(226,113,2)" fg:x="119" fg:w="2"/><text x="10.0121%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.8441%" y="517" width="0.0820%" height="15" fill="rgb(241,18,35)" fg:x="120" fg:w="1"/><text x="10.0941%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0902%" y="485" width="0.0820%" height="15" fill="rgb(240,165,44)" fg:x="123" fg:w="1"/><text x="10.3402%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="10.0902%" y="469" width="0.0820%" height="15" fill="rgb(229,130,47)" fg:x="123" fg:w="1"/><text x="10.3402%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="10.0082%" y="501" width="0.4102%" height="15" fill="rgb(223,93,7)" fg:x="122" fg:w="5"/><text x="10.2582%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="10.1723%" y="485" width="0.2461%" height="15" fill="rgb(205,180,36)" fg:x="124" fg:w="3"/><text x="10.4223%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.2543%" y="469" width="0.1641%" height="15" fill="rgb(221,103,28)" fg:x="125" fg:w="2"/><text x="10.5043%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.3363%" y="453" width="0.0820%" height="15" fill="rgb(212,4,3)" fg:x="126" fg:w="1"/><text x="10.5863%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.3363%" y="437" width="0.0820%" height="15" fill="rgb(209,221,53)" fg:x="126" fg:w="1"/><text x="10.5863%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.82%)</title><rect x="9.7621%" y="549" width="0.8203%" height="15" fill="rgb(233,229,52)" fg:x="119" fg:w="10"/><text x="10.0121%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.66%)</title><rect x="9.9262%" y="533" width="0.6563%" height="15" fill="rgb(254,127,37)" fg:x="121" fg:w="8"/><text x="10.1762%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.57%)</title><rect x="10.0082%" y="517" width="0.5742%" height="15" fill="rgb(207,161,26)" fg:x="122" fg:w="7"/><text x="10.2582%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="10.4184%" y="501" width="0.1641%" height="15" fill="rgb(223,75,5)" fg:x="127" fg:w="2"/><text x="10.6684%" y="511.50"></text></g><g><title>engine::session::Session::flush (42 samples, 3.45%)</title><rect x="7.2190%" y="693" width="3.4454%" height="15" fill="rgb(235,115,52)" fg:x="88" fg:w="42"/><text x="7.4690%" y="703.50">eng..</text></g><g><title>engine::session::Session::save_changes (42 samples, 3.45%)</title><rect x="7.2190%" y="677" width="3.4454%" height="15" fill="rgb(240,91,46)" fg:x="88" fg:w="42"/><text x="7.4690%" y="687.50">eng..</text></g><g><title>engine::session::state::State::close (42 samples, 3.45%)</title><rect x="7.2190%" y="661" width="3.4454%" height="15" fill="rgb(251,144,21)" fg:x="88" fg:w="42"/><text x="7.4690%" y="671.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (42 samples, 3.45%)</title><rect x="7.2190%" y="645" width="3.4454%" height="15" fill="rgb(247,220,47)" fg:x="88" fg:w="42"/><text x="7.4690%" y="655.50">eng..</text></g><g><title>core::iter::adapters::try_process (40 samples, 3.28%)</title><rect x="7.3831%" y="629" width="3.2814%" height="15" fill="rgb(253,122,1)" fg:x="90" fg:w="40"/><text x="7.6331%" y="639.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (40 samples, 3.28%)</title><rect x="7.3831%" y="613" width="3.2814%" height="15" fill="rgb(221,0,24)" fg:x="90" fg:w="40"/><text x="7.6331%" y="623.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (39 samples, 3.20%)</title><rect x="7.4651%" y="597" width="3.1993%" height="15" fill="rgb(220,204,54)" fg:x="91" fg:w="39"/><text x="7.7151%" y="607.50">eng..</text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.07%)</title><rect x="9.5980%" y="581" width="1.0664%" height="15" fill="rgb(205,96,25)" fg:x="117" fg:w="13"/><text x="9.8480%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.90%)</title><rect x="9.7621%" y="565" width="0.9024%" height="15" fill="rgb(247,77,20)" fg:x="119" fg:w="11"/><text x="10.0121%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="10.5824%" y="549" width="0.0820%" height="15" fill="rgb(245,151,8)" fg:x="129" fg:w="1"/><text x="10.8324%" y="559.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="10.7465%" y="661" width="0.0820%" height="15" fill="rgb(242,158,39)" fg:x="131" fg:w="1"/><text x="10.9965%" y="671.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="10.7465%" y="645" width="0.0820%" height="15" fill="rgb(222,214,50)" fg:x="131" fg:w="1"/><text x="10.9965%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="10.7465%" y="629" width="0.0820%" height="15" fill="rgb(229,60,39)" fg:x="131" fg:w="1"/><text x="10.9965%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="10.8285%" y="613" width="0.0820%" height="15" fill="rgb(240,148,18)" fg:x="132" fg:w="1"/><text x="11.0785%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.8285%" y="597" width="0.0820%" height="15" fill="rgb(215,96,11)" fg:x="132" fg:w="1"/><text x="11.0785%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8285%" y="581" width="0.0820%" height="15" fill="rgb(238,162,53)" fg:x="132" fg:w="1"/><text x="11.0785%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.8285%" y="565" width="0.0820%" height="15" fill="rgb(214,83,18)" fg:x="132" fg:w="1"/><text x="11.0785%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8285%" y="549" width="0.0820%" height="15" fill="rgb(248,117,24)" fg:x="132" fg:w="1"/><text x="11.0785%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.8285%" y="533" width="0.0820%" height="15" fill="rgb(238,190,6)" fg:x="132" fg:w="1"/><text x="11.0785%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8285%" y="517" width="0.0820%" height="15" fill="rgb(213,51,6)" fg:x="132" fg:w="1"/><text x="11.0785%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.8285%" y="501" width="0.0820%" height="15" fill="rgb(212,136,1)" fg:x="132" fg:w="1"/><text x="11.0785%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.9106%" y="613" width="0.0820%" height="15" fill="rgb(221,192,14)" fg:x="133" fg:w="1"/><text x="11.1606%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.9926%" y="581" width="0.1641%" height="15" fill="rgb(244,38,54)" fg:x="134" fg:w="2"/><text x="11.2426%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.9926%" y="565" width="0.1641%" height="15" fill="rgb(240,45,28)" fg:x="134" fg:w="2"/><text x="11.2426%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.9926%" y="549" width="0.1641%" height="15" fill="rgb(240,123,12)" fg:x="134" fg:w="2"/><text x="11.2426%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (5 samples, 0.41%)</title><rect x="10.8285%" y="645" width="0.4102%" height="15" fill="rgb(216,14,30)" fg:x="132" fg:w="5"/><text x="11.0785%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (5 samples, 0.41%)</title><rect x="10.8285%" y="629" width="0.4102%" height="15" fill="rgb(212,50,24)" fg:x="132" fg:w="5"/><text x="11.0785%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (3 samples, 0.25%)</title><rect x="10.9926%" y="613" width="0.2461%" height="15" fill="rgb(253,229,47)" fg:x="134" fg:w="3"/><text x="11.2426%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="10.9926%" y="597" width="0.2461%" height="15" fill="rgb(214,26,17)" fg:x="134" fg:w="3"/><text x="11.2426%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="11.1567%" y="581" width="0.0820%" height="15" fill="rgb(252,60,11)" fg:x="136" fg:w="1"/><text x="11.4067%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="11.1567%" y="565" width="0.0820%" height="15" fill="rgb(209,59,37)" fg:x="136" fg:w="1"/><text x="11.4067%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.1567%" y="549" width="0.0820%" height="15" fill="rgb(228,126,53)" fg:x="136" fg:w="1"/><text x="11.4067%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1567%" y="533" width="0.0820%" height="15" fill="rgb(233,99,2)" fg:x="136" fg:w="1"/><text x="11.4067%" y="543.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="11.2387%" y="645" width="0.0820%" height="15" fill="rgb(217,106,34)" fg:x="137" fg:w="1"/><text x="11.4887%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.2387%" y="629" width="0.0820%" height="15" fill="rgb(222,46,19)" fg:x="137" fg:w="1"/><text x="11.4887%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.2387%" y="613" width="0.0820%" height="15" fill="rgb(251,87,31)" fg:x="137" fg:w="1"/><text x="11.4887%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="11.3208%" y="597" width="0.0820%" height="15" fill="rgb(213,70,51)" fg:x="138" fg:w="1"/><text x="11.5708%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.3208%" y="581" width="0.0820%" height="15" fill="rgb(229,144,18)" fg:x="138" fg:w="1"/><text x="11.5708%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.3208%" y="565" width="0.0820%" height="15" fill="rgb(254,60,26)" fg:x="138" fg:w="1"/><text x="11.5708%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.3208%" y="549" width="0.0820%" height="15" fill="rgb(243,127,51)" fg:x="138" fg:w="1"/><text x="11.5708%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.3208%" y="533" width="0.0820%" height="15" fill="rgb(221,51,25)" fg:x="138" fg:w="1"/><text x="11.5708%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3208%" y="517" width="0.0820%" height="15" fill="rgb(205,42,7)" fg:x="138" fg:w="1"/><text x="11.5708%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="11.3208%" y="613" width="0.1641%" height="15" fill="rgb(236,177,48)" fg:x="138" fg:w="2"/><text x="11.5708%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4028%" y="597" width="0.0820%" height="15" fill="rgb(226,79,31)" fg:x="139" fg:w="1"/><text x="11.6528%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.82%)</title><rect x="10.7465%" y="677" width="0.8203%" height="15" fill="rgb(216,170,12)" fg:x="131" fg:w="10"/><text x="10.9965%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (9 samples, 0.74%)</title><rect x="10.8285%" y="661" width="0.7383%" height="15" fill="rgb(208,62,51)" fg:x="132" fg:w="9"/><text x="11.0785%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.25%)</title><rect x="11.3208%" y="645" width="0.2461%" height="15" fill="rgb(254,129,9)" fg:x="138" fg:w="3"/><text x="11.5708%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="11.3208%" y="629" width="0.2461%" height="15" fill="rgb(243,209,31)" fg:x="138" fg:w="3"/><text x="11.5708%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="11.4848%" y="613" width="0.0820%" height="15" fill="rgb(213,159,23)" fg:x="140" fg:w="1"/><text x="11.7348%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.4848%" y="597" width="0.0820%" height="15" fill="rgb(249,77,39)" fg:x="140" fg:w="1"/><text x="11.7348%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4848%" y="581" width="0.0820%" height="15" fill="rgb(230,13,33)" fg:x="140" fg:w="1"/><text x="11.7348%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4848%" y="565" width="0.0820%" height="15" fill="rgb(215,215,7)" fg:x="140" fg:w="1"/><text x="11.7348%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4848%" y="549" width="0.0820%" height="15" fill="rgb(222,92,25)" fg:x="140" fg:w="1"/><text x="11.7348%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.5669%" y="677" width="0.0820%" height="15" fill="rgb(215,173,22)" fg:x="141" fg:w="1"/><text x="11.8169%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (13 samples, 1.07%)</title><rect x="10.6645%" y="693" width="1.0664%" height="15" fill="rgb(247,205,52)" fg:x="130" fg:w="13"/><text x="10.9145%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.6489%" y="677" width="0.0820%" height="15" fill="rgb(240,210,37)" fg:x="142" fg:w="1"/><text x="11.8989%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.6489%" y="661" width="0.0820%" height="15" fill="rgb(224,13,10)" fg:x="142" fg:w="1"/><text x="11.8989%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.6489%" y="645" width="0.0820%" height="15" fill="rgb(209,48,33)" fg:x="142" fg:w="1"/><text x="11.8989%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.6489%" y="629" width="0.0820%" height="15" fill="rgb(228,219,23)" fg:x="142" fg:w="1"/><text x="11.8989%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6489%" y="613" width="0.0820%" height="15" fill="rgb(239,46,49)" fg:x="142" fg:w="1"/><text x="11.8989%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="11.7309%" y="693" width="0.1641%" height="15" fill="rgb(206,172,51)" fg:x="143" fg:w="2"/><text x="11.9809%" y="703.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="11.7309%" y="677" width="0.1641%" height="15" fill="rgb(213,212,35)" fg:x="143" fg:w="2"/><text x="11.9809%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="11.7309%" y="661" width="0.1641%" height="15" fill="rgb(252,40,27)" fg:x="143" fg:w="2"/><text x="11.9809%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="11.7309%" y="645" width="0.1641%" height="15" fill="rgb(212,33,41)" fg:x="143" fg:w="2"/><text x="11.9809%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.8130%" y="629" width="0.0820%" height="15" fill="rgb(232,160,27)" fg:x="144" fg:w="1"/><text x="12.0630%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.8130%" y="613" width="0.0820%" height="15" fill="rgb(244,160,20)" fg:x="144" fg:w="1"/><text x="12.0630%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.8130%" y="597" width="0.0820%" height="15" fill="rgb(205,66,20)" fg:x="144" fg:w="1"/><text x="12.0630%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.8130%" y="581" width="0.0820%" height="15" fill="rgb(236,158,6)" fg:x="144" fg:w="1"/><text x="12.0630%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.8130%" y="565" width="0.0820%" height="15" fill="rgb(232,25,36)" fg:x="144" fg:w="1"/><text x="12.0630%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8130%" y="549" width="0.0820%" height="15" fill="rgb(220,153,35)" fg:x="144" fg:w="1"/><text x="12.0630%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8130%" y="533" width="0.0820%" height="15" fill="rgb(216,5,8)" fg:x="144" fg:w="1"/><text x="12.0630%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.8130%" y="517" width="0.0820%" height="15" fill="rgb(240,97,3)" fg:x="144" fg:w="1"/><text x="12.0630%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.8130%" y="501" width="0.0820%" height="15" fill="rgb(220,99,26)" fg:x="144" fg:w="1"/><text x="12.0630%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.8130%" y="485" width="0.0820%" height="15" fill="rgb(237,96,2)" fg:x="144" fg:w="1"/><text x="12.0630%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.8130%" y="469" width="0.0820%" height="15" fill="rgb(217,197,47)" fg:x="144" fg:w="1"/><text x="12.0630%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.8130%" y="453" width="0.0820%" height="15" fill="rgb(252,133,54)" fg:x="144" fg:w="1"/><text x="12.0630%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.8130%" y="437" width="0.0820%" height="15" fill="rgb(233,37,30)" fg:x="144" fg:w="1"/><text x="12.0630%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.8130%" y="421" width="0.0820%" height="15" fill="rgb(239,182,12)" fg:x="144" fg:w="1"/><text x="12.0630%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.8130%" y="405" width="0.0820%" height="15" fill="rgb(245,83,39)" fg:x="144" fg:w="1"/><text x="12.0630%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.8130%" y="389" width="0.0820%" height="15" fill="rgb(222,109,36)" fg:x="144" fg:w="1"/><text x="12.0630%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.8130%" y="373" width="0.0820%" height="15" fill="rgb(237,95,44)" fg:x="144" fg:w="1"/><text x="12.0630%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="11.8950%" y="677" width="0.0820%" height="15" fill="rgb(216,36,54)" fg:x="145" fg:w="1"/><text x="12.1450%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="11.8950%" y="661" width="0.0820%" height="15" fill="rgb(236,164,3)" fg:x="145" fg:w="1"/><text x="12.1450%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.8950%" y="645" width="0.0820%" height="15" fill="rgb(223,15,21)" fg:x="145" fg:w="1"/><text x="12.1450%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.8950%" y="629" width="0.0820%" height="15" fill="rgb(239,191,12)" fg:x="145" fg:w="1"/><text x="12.1450%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.8950%" y="613" width="0.0820%" height="15" fill="rgb(231,191,37)" fg:x="145" fg:w="1"/><text x="12.1450%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.8950%" y="597" width="0.0820%" height="15" fill="rgb(209,155,36)" fg:x="145" fg:w="1"/><text x="12.1450%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.8950%" y="581" width="0.0820%" height="15" fill="rgb(216,222,49)" fg:x="145" fg:w="1"/><text x="12.1450%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.8950%" y="565" width="0.0820%" height="15" fill="rgb(218,181,2)" fg:x="145" fg:w="1"/><text x="12.1450%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.8950%" y="549" width="0.0820%" height="15" fill="rgb(239,125,9)" fg:x="145" fg:w="1"/><text x="12.1450%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.8950%" y="533" width="0.0820%" height="15" fill="rgb(233,103,7)" fg:x="145" fg:w="1"/><text x="12.1450%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.8950%" y="517" width="0.0820%" height="15" fill="rgb(209,223,5)" fg:x="145" fg:w="1"/><text x="12.1450%" y="527.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="11.9770%" y="677" width="0.0820%" height="15" fill="rgb(234,71,27)" fg:x="146" fg:w="1"/><text x="12.2270%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="11.9770%" y="661" width="0.0820%" height="15" fill="rgb(251,202,16)" fg:x="146" fg:w="1"/><text x="12.2270%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="11.9770%" y="645" width="0.0820%" height="15" fill="rgb(231,180,0)" fg:x="146" fg:w="1"/><text x="12.2270%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.9770%" y="629" width="0.0820%" height="15" fill="rgb(223,58,28)" fg:x="146" fg:w="1"/><text x="12.2270%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.9770%" y="613" width="0.0820%" height="15" fill="rgb(250,34,24)" fg:x="146" fg:w="1"/><text x="12.2270%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9770%" y="597" width="0.0820%" height="15" fill="rgb(235,24,16)" fg:x="146" fg:w="1"/><text x="12.2270%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9770%" y="581" width="0.0820%" height="15" fill="rgb(219,28,33)" fg:x="146" fg:w="1"/><text x="12.2270%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.9770%" y="565" width="0.0820%" height="15" fill="rgb(228,150,43)" fg:x="146" fg:w="1"/><text x="12.2270%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9770%" y="549" width="0.0820%" height="15" fill="rgb(221,228,36)" fg:x="146" fg:w="1"/><text x="12.2270%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9770%" y="533" width="0.0820%" height="15" fill="rgb(232,116,17)" fg:x="146" fg:w="1"/><text x="12.2270%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9770%" y="517" width="0.0820%" height="15" fill="rgb(220,110,51)" fg:x="146" fg:w="1"/><text x="12.2270%" y="527.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="11.9770%" y="501" width="0.0820%" height="15" fill="rgb(207,26,25)" fg:x="146" fg:w="1"/><text x="12.2270%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (69 samples, 5.66%)</title><rect x="6.4807%" y="709" width="5.6604%" height="15" fill="rgb(223,58,19)" fg:x="79" fg:w="69"/><text x="6.7307%" y="719.50">plugins..</text></g><g><title>plugins_core::tools::set_container (3 samples, 0.25%)</title><rect x="11.8950%" y="693" width="0.2461%" height="15" fill="rgb(234,125,39)" fg:x="145" fg:w="3"/><text x="12.1450%" y="703.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="12.0591%" y="677" width="0.0820%" height="15" fill="rgb(241,48,36)" fg:x="147" fg:w="1"/><text x="12.3091%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="12.0591%" y="661" width="0.0820%" height="15" fill="rgb(217,148,51)" fg:x="147" fg:w="1"/><text x="12.3091%" y="671.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="12.0591%" y="645" width="0.0820%" height="15" fill="rgb(247,17,25)" fg:x="147" fg:w="1"/><text x="12.3091%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.0591%" y="629" width="0.0820%" height="15" fill="rgb(219,89,38)" fg:x="147" fg:w="1"/><text x="12.3091%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="12.0591%" y="613" width="0.0820%" height="15" fill="rgb(220,145,2)" fg:x="147" fg:w="1"/><text x="12.3091%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.0591%" y="597" width="0.0820%" height="15" fill="rgb(244,66,47)" fg:x="147" fg:w="1"/><text x="12.3091%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.0591%" y="581" width="0.0820%" height="15" fill="rgb(226,182,5)" fg:x="147" fg:w="1"/><text x="12.3091%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.0591%" y="565" width="0.0820%" height="15" fill="rgb(211,98,20)" fg:x="147" fg:w="1"/><text x="12.3091%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="12.0591%" y="549" width="0.0820%" height="15" fill="rgb(217,103,52)" fg:x="147" fg:w="1"/><text x="12.3091%" y="559.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="12.1411%" y="677" width="0.0820%" height="15" fill="rgb(208,125,52)" fg:x="148" fg:w="1"/><text x="12.3911%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="12.1411%" y="661" width="0.0820%" height="15" fill="rgb(244,70,13)" fg:x="148" fg:w="1"/><text x="12.3911%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.2231%" y="597" width="0.0820%" height="15" fill="rgb(253,124,3)" fg:x="149" fg:w="1"/><text x="12.4731%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.2231%" y="581" width="0.0820%" height="15" fill="rgb(222,145,32)" fg:x="149" fg:w="1"/><text x="12.4731%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.2231%" y="565" width="0.0820%" height="15" fill="rgb(232,183,47)" fg:x="149" fg:w="1"/><text x="12.4731%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="12.3052%" y="597" width="0.0820%" height="15" fill="rgb(246,226,4)" fg:x="150" fg:w="1"/><text x="12.5552%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="12.3052%" y="581" width="0.0820%" height="15" fill="rgb(228,185,46)" fg:x="150" fg:w="1"/><text x="12.5552%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.33%)</title><rect x="12.2231%" y="629" width="0.3281%" height="15" fill="rgb(213,196,4)" fg:x="149" fg:w="4"/><text x="12.4731%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.33%)</title><rect x="12.2231%" y="613" width="0.3281%" height="15" fill="rgb(212,2,45)" fg:x="149" fg:w="4"/><text x="12.4731%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="12.3872%" y="597" width="0.1641%" height="15" fill="rgb(217,145,50)" fg:x="151" fg:w="2"/><text x="12.6372%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.3872%" y="581" width="0.1641%" height="15" fill="rgb(242,10,46)" fg:x="151" fg:w="2"/><text x="12.6372%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="12.3872%" y="565" width="0.1641%" height="15" fill="rgb(252,91,48)" fg:x="151" fg:w="2"/><text x="12.6372%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="12.4692%" y="549" width="0.0820%" height="15" fill="rgb(216,72,13)" fg:x="152" fg:w="1"/><text x="12.7192%" y="559.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="12.5513%" y="597" width="0.0820%" height="15" fill="rgb(219,6,37)" fg:x="153" fg:w="1"/><text x="12.8013%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="12.5513%" y="581" width="0.0820%" height="15" fill="rgb(236,185,40)" fg:x="153" fg:w="1"/><text x="12.8013%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (7 samples, 0.57%)</title><rect x="12.1411%" y="709" width="0.5742%" height="15" fill="rgb(208,81,48)" fg:x="148" fg:w="7"/><text x="12.3911%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (7 samples, 0.57%)</title><rect x="12.1411%" y="693" width="0.5742%" height="15" fill="rgb(211,42,33)" fg:x="148" fg:w="7"/><text x="12.3911%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.49%)</title><rect x="12.2231%" y="677" width="0.4922%" height="15" fill="rgb(211,90,39)" fg:x="149" fg:w="6"/><text x="12.4731%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.49%)</title><rect x="12.2231%" y="661" width="0.4922%" height="15" fill="rgb(218,136,12)" fg:x="149" fg:w="6"/><text x="12.4731%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.49%)</title><rect x="12.2231%" y="645" width="0.4922%" height="15" fill="rgb(234,12,32)" fg:x="149" fg:w="6"/><text x="12.4731%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="12.5513%" y="629" width="0.1641%" height="15" fill="rgb(221,164,18)" fg:x="153" fg:w="2"/><text x="12.8013%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.5513%" y="613" width="0.1641%" height="15" fill="rgb(239,135,14)" fg:x="153" fg:w="2"/><text x="12.8013%" y="623.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="12.6333%" y="597" width="0.0820%" height="15" fill="rgb(226,198,47)" fg:x="154" fg:w="1"/><text x="12.8833%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.6333%" y="581" width="0.0820%" height="15" fill="rgb(244,121,47)" fg:x="154" fg:w="1"/><text x="12.8833%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.6333%" y="565" width="0.0820%" height="15" fill="rgb(226,21,48)" fg:x="154" fg:w="1"/><text x="12.8833%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.7974%" y="693" width="0.0820%" height="15" fill="rgb(215,178,47)" fg:x="156" fg:w="1"/><text x="13.0474%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.7974%" y="677" width="0.0820%" height="15" fill="rgb(206,212,19)" fg:x="156" fg:w="1"/><text x="13.0474%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="12.7974%" y="661" width="0.0820%" height="15" fill="rgb(230,104,34)" fg:x="156" fg:w="1"/><text x="13.0474%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.7974%" y="645" width="0.0820%" height="15" fill="rgb(210,96,51)" fg:x="156" fg:w="1"/><text x="13.0474%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.7974%" y="629" width="0.0820%" height="15" fill="rgb(229,111,47)" fg:x="156" fg:w="1"/><text x="13.0474%" y="639.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="12.8794%" y="693" width="0.0820%" height="15" fill="rgb(218,174,45)" fg:x="157" fg:w="1"/><text x="13.1294%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="12.8794%" y="677" width="0.0820%" height="15" fill="rgb(215,21,32)" fg:x="157" fg:w="1"/><text x="13.1294%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.0435%" y="661" width="0.0820%" height="15" fill="rgb(235,72,21)" fg:x="159" fg:w="1"/><text x="13.2935%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.0435%" y="645" width="0.0820%" height="15" fill="rgb(250,113,30)" fg:x="159" fg:w="1"/><text x="13.2935%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0435%" y="629" width="0.0820%" height="15" fill="rgb(244,136,34)" fg:x="159" fg:w="1"/><text x="13.2935%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.0435%" y="613" width="0.0820%" height="15" fill="rgb(213,226,47)" fg:x="159" fg:w="1"/><text x="13.2935%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0435%" y="597" width="0.0820%" height="15" fill="rgb(224,136,40)" fg:x="159" fg:w="1"/><text x="13.2935%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.1255%" y="565" width="0.0820%" height="15" fill="rgb(253,124,12)" fg:x="160" fg:w="1"/><text x="13.3755%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="13.1255%" y="645" width="0.1641%" height="15" fill="rgb(210,67,8)" fg:x="160" fg:w="2"/><text x="13.3755%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="13.1255%" y="629" width="0.1641%" height="15" fill="rgb(210,204,0)" fg:x="160" fg:w="2"/><text x="13.3755%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="13.1255%" y="613" width="0.1641%" height="15" fill="rgb(217,179,22)" fg:x="160" fg:w="2"/><text x="13.3755%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.1255%" y="597" width="0.1641%" height="15" fill="rgb(237,192,33)" fg:x="160" fg:w="2"/><text x="13.3755%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.1255%" y="581" width="0.1641%" height="15" fill="rgb(211,104,28)" fg:x="160" fg:w="2"/><text x="13.3755%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.2075%" y="565" width="0.0820%" height="15" fill="rgb(214,75,30)" fg:x="161" fg:w="1"/><text x="13.4575%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.2896%" y="613" width="0.0820%" height="15" fill="rgb(220,227,12)" fg:x="162" fg:w="1"/><text x="13.5396%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.49%)</title><rect x="12.9614%" y="677" width="0.4922%" height="15" fill="rgb(233,134,28)" fg:x="158" fg:w="6"/><text x="13.2114%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.33%)</title><rect x="13.1255%" y="661" width="0.3281%" height="15" fill="rgb(215,146,24)" fg:x="160" fg:w="4"/><text x="13.3755%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="13.2896%" y="645" width="0.1641%" height="15" fill="rgb(248,227,20)" fg:x="162" fg:w="2"/><text x="13.5396%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="13.2896%" y="629" width="0.1641%" height="15" fill="rgb(250,44,42)" fg:x="162" fg:w="2"/><text x="13.5396%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="13.3716%" y="613" width="0.0820%" height="15" fill="rgb(219,5,35)" fg:x="163" fg:w="1"/><text x="13.6216%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.3716%" y="597" width="0.0820%" height="15" fill="rgb(241,132,32)" fg:x="163" fg:w="1"/><text x="13.6216%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.3716%" y="581" width="0.0820%" height="15" fill="rgb(234,212,51)" fg:x="163" fg:w="1"/><text x="13.6216%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.3716%" y="565" width="0.0820%" height="15" fill="rgb(242,173,29)" fg:x="163" fg:w="1"/><text x="13.6216%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="13.3716%" y="549" width="0.0820%" height="15" fill="rgb(212,159,2)" fg:x="163" fg:w="1"/><text x="13.6216%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="13.4537%" y="677" width="0.0820%" height="15" fill="rgb(238,165,31)" fg:x="164" fg:w="1"/><text x="13.7037%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.4537%" y="661" width="0.0820%" height="15" fill="rgb(241,57,36)" fg:x="164" fg:w="1"/><text x="13.7037%" y="671.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (120 samples, 9.84%)</title><rect x="3.7736%" y="725" width="9.8441%" height="15" fill="rgb(249,7,4)" fg:x="46" fg:w="120"/><text x="4.0236%" y="735.50">&lt;tests::Holdin..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (11 samples, 0.90%)</title><rect x="12.7153%" y="709" width="0.9024%" height="15" fill="rgb(250,137,44)" fg:x="155" fg:w="11"/><text x="12.9653%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.66%)</title><rect x="12.9614%" y="693" width="0.6563%" height="15" fill="rgb(244,185,1)" fg:x="158" fg:w="8"/><text x="13.2114%" y="703.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="13.5357%" y="677" width="0.0820%" height="15" fill="rgb(216,5,53)" fg:x="165" fg:w="1"/><text x="13.7857%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.5357%" y="661" width="0.0820%" height="15" fill="rgb(234,89,21)" fg:x="165" fg:w="1"/><text x="13.7857%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.5357%" y="645" width="0.0820%" height="15" fill="rgb(250,81,43)" fg:x="165" fg:w="1"/><text x="13.7857%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="13.6998%" y="709" width="0.0820%" height="15" fill="rgb(243,132,11)" fg:x="167" fg:w="1"/><text x="13.9498%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="13.7818%" y="709" width="0.0820%" height="15" fill="rgb(253,159,28)" fg:x="168" fg:w="1"/><text x="14.0318%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="13.7818%" y="693" width="0.0820%" height="15" fill="rgb(237,167,34)" fg:x="168" fg:w="1"/><text x="14.0318%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.7818%" y="677" width="0.0820%" height="15" fill="rgb(237,16,50)" fg:x="168" fg:w="1"/><text x="14.0318%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="13.7818%" y="661" width="0.0820%" height="15" fill="rgb(247,125,2)" fg:x="168" fg:w="1"/><text x="14.0318%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="13.7818%" y="645" width="0.0820%" height="15" fill="rgb(254,35,3)" fg:x="168" fg:w="1"/><text x="14.0318%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="13.7818%" y="629" width="0.0820%" height="15" fill="rgb(237,209,21)" fg:x="168" fg:w="1"/><text x="14.0318%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="13.7818%" y="613" width="0.0820%" height="15" fill="rgb(224,122,20)" fg:x="168" fg:w="1"/><text x="14.0318%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.7818%" y="597" width="0.0820%" height="15" fill="rgb(224,11,46)" fg:x="168" fg:w="1"/><text x="14.0318%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="13.7818%" y="581" width="0.0820%" height="15" fill="rgb(248,21,33)" fg:x="168" fg:w="1"/><text x="14.0318%" y="591.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="13.7818%" y="565" width="0.0820%" height="15" fill="rgb(222,144,7)" fg:x="168" fg:w="1"/><text x="14.0318%" y="575.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="13.7818%" y="549" width="0.0820%" height="15" fill="rgb(205,141,37)" fg:x="168" fg:w="1"/><text x="14.0318%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.7818%" y="533" width="0.0820%" height="15" fill="rgb(237,130,8)" fg:x="168" fg:w="1"/><text x="14.0318%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.7818%" y="517" width="0.0820%" height="15" fill="rgb(209,179,39)" fg:x="168" fg:w="1"/><text x="14.0318%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="13.7818%" y="501" width="0.0820%" height="15" fill="rgb(207,52,17)" fg:x="168" fg:w="1"/><text x="14.0318%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="13.7818%" y="485" width="0.0820%" height="15" fill="rgb(253,158,17)" fg:x="168" fg:w="1"/><text x="14.0318%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="13.7818%" y="469" width="0.0820%" height="15" fill="rgb(208,19,53)" fg:x="168" fg:w="1"/><text x="14.0318%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="13.7818%" y="453" width="0.0820%" height="15" fill="rgb(233,152,13)" fg:x="168" fg:w="1"/><text x="14.0318%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="13.7818%" y="437" width="0.0820%" height="15" fill="rgb(231,84,1)" fg:x="168" fg:w="1"/><text x="14.0318%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="13.7818%" y="421" width="0.0820%" height="15" fill="rgb(229,142,48)" fg:x="168" fg:w="1"/><text x="14.0318%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.7818%" y="405" width="0.0820%" height="15" fill="rgb(248,70,29)" fg:x="168" fg:w="1"/><text x="14.0318%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="13.7818%" y="389" width="0.0820%" height="15" fill="rgb(250,85,7)" fg:x="168" fg:w="1"/><text x="14.0318%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.08%)</title><rect x="13.7818%" y="373" width="0.0820%" height="15" fill="rgb(235,140,43)" fg:x="168" fg:w="1"/><text x="14.0318%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.08%)</title><rect x="13.7818%" y="357" width="0.0820%" height="15" fill="rgb(216,0,5)" fg:x="168" fg:w="1"/><text x="14.0318%" y="367.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="13.8638%" y="709" width="0.0820%" height="15" fill="rgb(223,167,29)" fg:x="169" fg:w="1"/><text x="14.1138%" y="719.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="13.8638%" y="693" width="0.0820%" height="15" fill="rgb(229,150,33)" fg:x="169" fg:w="1"/><text x="14.1138%" y="703.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="13.8638%" y="677" width="0.0820%" height="15" fill="rgb(227,26,52)" fg:x="169" fg:w="1"/><text x="14.1138%" y="687.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="13.8638%" y="661" width="0.0820%" height="15" fill="rgb(250,60,52)" fg:x="169" fg:w="1"/><text x="14.1138%" y="671.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="13.8638%" y="645" width="0.0820%" height="15" fill="rgb(228,81,46)" fg:x="169" fg:w="1"/><text x="14.1138%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="13.8638%" y="629" width="0.0820%" height="15" fill="rgb(225,218,31)" fg:x="169" fg:w="1"/><text x="14.1138%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="13.8638%" y="613" width="0.0820%" height="15" fill="rgb(230,35,16)" fg:x="169" fg:w="1"/><text x="14.1138%" y="623.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="13.8638%" y="597" width="0.0820%" height="15" fill="rgb(247,100,0)" fg:x="169" fg:w="1"/><text x="14.1138%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.1099%" y="645" width="0.1641%" height="15" fill="rgb(223,135,11)" fg:x="172" fg:w="2"/><text x="14.3599%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="14.1099%" y="629" width="0.1641%" height="15" fill="rgb(207,136,0)" fg:x="172" fg:w="2"/><text x="14.3599%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.1099%" y="613" width="0.1641%" height="15" fill="rgb(246,131,25)" fg:x="172" fg:w="2"/><text x="14.3599%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.1920%" y="597" width="0.0820%" height="15" fill="rgb(209,47,12)" fg:x="173" fg:w="1"/><text x="14.4420%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.1920%" y="581" width="0.0820%" height="15" fill="rgb(221,25,16)" fg:x="173" fg:w="1"/><text x="14.4420%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.1920%" y="565" width="0.0820%" height="15" fill="rgb(223,164,33)" fg:x="173" fg:w="1"/><text x="14.4420%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.1920%" y="549" width="0.0820%" height="15" fill="rgb(220,26,23)" fg:x="173" fg:w="1"/><text x="14.4420%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.1920%" y="533" width="0.0820%" height="15" fill="rgb(231,224,1)" fg:x="173" fg:w="1"/><text x="14.4420%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.1920%" y="517" width="0.0820%" height="15" fill="rgb(229,221,24)" fg:x="173" fg:w="1"/><text x="14.4420%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.1920%" y="501" width="0.0820%" height="15" fill="rgb(213,34,10)" fg:x="173" fg:w="1"/><text x="14.4420%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.1920%" y="485" width="0.0820%" height="15" fill="rgb(215,33,11)" fg:x="173" fg:w="1"/><text x="14.4420%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.1920%" y="469" width="0.0820%" height="15" fill="rgb(216,20,41)" fg:x="173" fg:w="1"/><text x="14.4420%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.1920%" y="453" width="0.0820%" height="15" fill="rgb(228,43,31)" fg:x="173" fg:w="1"/><text x="14.4420%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.1920%" y="437" width="0.0820%" height="15" fill="rgb(227,83,26)" fg:x="173" fg:w="1"/><text x="14.4420%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.1920%" y="421" width="0.0820%" height="15" fill="rgb(217,168,19)" fg:x="173" fg:w="1"/><text x="14.4420%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="14.2740%" y="645" width="0.0820%" height="15" fill="rgb(231,34,33)" fg:x="174" fg:w="1"/><text x="14.5240%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="14.3560%" y="613" width="0.1641%" height="15" fill="rgb(230,120,51)" fg:x="175" fg:w="2"/><text x="14.6060%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="14.3560%" y="597" width="0.1641%" height="15" fill="rgb(215,138,27)" fg:x="175" fg:w="2"/><text x="14.6060%" y="607.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="14.3560%" y="581" width="0.1641%" height="15" fill="rgb(246,80,47)" fg:x="175" fg:w="2"/><text x="14.6060%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="14.3560%" y="565" width="0.1641%" height="15" fill="rgb(215,57,53)" fg:x="175" fg:w="2"/><text x="14.6060%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.3560%" y="549" width="0.1641%" height="15" fill="rgb(229,137,5)" fg:x="175" fg:w="2"/><text x="14.6060%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.3560%" y="533" width="0.1641%" height="15" fill="rgb(210,86,2)" fg:x="175" fg:w="2"/><text x="14.6060%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.4381%" y="517" width="0.0820%" height="15" fill="rgb(231,226,51)" fg:x="176" fg:w="1"/><text x="14.6881%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.4381%" y="501" width="0.0820%" height="15" fill="rgb(216,62,29)" fg:x="176" fg:w="1"/><text x="14.6881%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.5201%" y="613" width="0.1641%" height="15" fill="rgb(248,202,3)" fg:x="177" fg:w="2"/><text x="14.7701%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.6021%" y="597" width="0.0820%" height="15" fill="rgb(225,181,7)" fg:x="178" fg:w="1"/><text x="14.8521%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="14.6021%" y="581" width="0.0820%" height="15" fill="rgb(247,170,54)" fg:x="178" fg:w="1"/><text x="14.8521%" y="591.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="14.6021%" y="565" width="0.0820%" height="15" fill="rgb(236,204,33)" fg:x="178" fg:w="1"/><text x="14.8521%" y="575.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.6021%" y="549" width="0.0820%" height="15" fill="rgb(216,45,30)" fg:x="178" fg:w="1"/><text x="14.8521%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (10 samples, 0.82%)</title><rect x="13.9459%" y="693" width="0.8203%" height="15" fill="rgb(213,203,16)" fg:x="170" fg:w="10"/><text x="14.1959%" y="703.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (9 samples, 0.74%)</title><rect x="14.0279%" y="677" width="0.7383%" height="15" fill="rgb(215,46,16)" fg:x="171" fg:w="9"/><text x="14.2779%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (9 samples, 0.74%)</title><rect x="14.0279%" y="661" width="0.7383%" height="15" fill="rgb(217,162,46)" fg:x="171" fg:w="9"/><text x="14.2779%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="14.3560%" y="645" width="0.4102%" height="15" fill="rgb(224,189,20)" fg:x="175" fg:w="5"/><text x="14.6060%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="14.3560%" y="629" width="0.4102%" height="15" fill="rgb(232,35,51)" fg:x="175" fg:w="5"/><text x="14.6060%" y="639.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="14.6842%" y="613" width="0.0820%" height="15" fill="rgb(243,221,46)" fg:x="179" fg:w="1"/><text x="14.9342%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="14.7662%" y="677" width="0.0820%" height="15" fill="rgb(248,16,16)" fg:x="180" fg:w="1"/><text x="15.0162%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.8482%" y="677" width="0.0820%" height="15" fill="rgb(220,168,13)" fg:x="181" fg:w="1"/><text x="15.0982%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.0123%" y="629" width="0.0820%" height="15" fill="rgb(243,102,39)" fg:x="183" fg:w="1"/><text x="15.2623%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.0123%" y="613" width="0.0820%" height="15" fill="rgb(245,82,32)" fg:x="183" fg:w="1"/><text x="15.2623%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.0123%" y="597" width="0.0820%" height="15" fill="rgb(230,164,19)" fg:x="183" fg:w="1"/><text x="15.2623%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.0123%" y="581" width="0.0820%" height="15" fill="rgb(221,9,41)" fg:x="183" fg:w="1"/><text x="15.2623%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.0123%" y="565" width="0.0820%" height="15" fill="rgb(216,93,0)" fg:x="183" fg:w="1"/><text x="15.2623%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.0123%" y="549" width="0.0820%" height="15" fill="rgb(235,113,9)" fg:x="183" fg:w="1"/><text x="15.2623%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.0123%" y="533" width="0.0820%" height="15" fill="rgb(209,224,10)" fg:x="183" fg:w="1"/><text x="15.2623%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="15.0943%" y="613" width="0.1641%" height="15" fill="rgb(226,54,34)" fg:x="184" fg:w="2"/><text x="15.3443%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.0943%" y="597" width="0.1641%" height="15" fill="rgb(222,60,8)" fg:x="184" fg:w="2"/><text x="15.3443%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.1764%" y="581" width="0.0820%" height="15" fill="rgb(248,228,41)" fg:x="185" fg:w="1"/><text x="15.4264%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="15.3404%" y="597" width="0.0820%" height="15" fill="rgb(226,31,32)" fg:x="187" fg:w="1"/><text x="15.5904%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.3404%" y="581" width="0.0820%" height="15" fill="rgb(242,132,49)" fg:x="187" fg:w="1"/><text x="15.5904%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.3404%" y="565" width="0.0820%" height="15" fill="rgb(224,194,19)" fg:x="187" fg:w="1"/><text x="15.5904%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.3404%" y="549" width="0.0820%" height="15" fill="rgb(232,200,51)" fg:x="187" fg:w="1"/><text x="15.5904%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="15.4225%" y="581" width="0.0820%" height="15" fill="rgb(235,60,46)" fg:x="188" fg:w="1"/><text x="15.6725%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.4225%" y="565" width="0.0820%" height="15" fill="rgb(240,109,52)" fg:x="188" fg:w="1"/><text x="15.6725%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.4225%" y="549" width="0.0820%" height="15" fill="rgb(215,78,37)" fg:x="188" fg:w="1"/><text x="15.6725%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.4225%" y="533" width="0.0820%" height="15" fill="rgb(225,141,7)" fg:x="188" fg:w="1"/><text x="15.6725%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="15.4225%" y="597" width="0.1641%" height="15" fill="rgb(216,102,54)" fg:x="188" fg:w="2"/><text x="15.6725%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="15.5045%" y="581" width="0.0820%" height="15" fill="rgb(238,143,13)" fg:x="189" fg:w="1"/><text x="15.7545%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="15.5045%" y="565" width="0.0820%" height="15" fill="rgb(219,45,51)" fg:x="189" fg:w="1"/><text x="15.7545%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.5045%" y="549" width="0.0820%" height="15" fill="rgb(242,105,46)" fg:x="189" fg:w="1"/><text x="15.7545%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.5045%" y="533" width="0.0820%" height="15" fill="rgb(206,154,49)" fg:x="189" fg:w="1"/><text x="15.7545%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.5045%" y="517" width="0.0820%" height="15" fill="rgb(239,215,4)" fg:x="189" fg:w="1"/><text x="15.7545%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.5045%" y="501" width="0.0820%" height="15" fill="rgb(238,82,17)" fg:x="189" fg:w="1"/><text x="15.7545%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.5045%" y="485" width="0.0820%" height="15" fill="rgb(242,49,30)" fg:x="189" fg:w="1"/><text x="15.7545%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.5045%" y="469" width="0.0820%" height="15" fill="rgb(248,5,16)" fg:x="189" fg:w="1"/><text x="15.7545%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.57%)</title><rect x="15.0943%" y="629" width="0.5742%" height="15" fill="rgb(237,138,32)" fg:x="184" fg:w="7"/><text x="15.3443%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="15.2584%" y="613" width="0.4102%" height="15" fill="rgb(235,79,45)" fg:x="186" fg:w="5"/><text x="15.5084%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.5865%" y="597" width="0.0820%" height="15" fill="rgb(213,105,25)" fg:x="190" fg:w="1"/><text x="15.8365%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.5865%" y="581" width="0.0820%" height="15" fill="rgb(251,131,7)" fg:x="190" fg:w="1"/><text x="15.8365%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.5865%" y="565" width="0.0820%" height="15" fill="rgb(211,155,7)" fg:x="190" fg:w="1"/><text x="15.8365%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.5865%" y="549" width="0.0820%" height="15" fill="rgb(243,70,15)" fg:x="190" fg:w="1"/><text x="15.8365%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.5865%" y="533" width="0.0820%" height="15" fill="rgb(215,171,2)" fg:x="190" fg:w="1"/><text x="15.8365%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.5865%" y="517" width="0.0820%" height="15" fill="rgb(244,121,35)" fg:x="190" fg:w="1"/><text x="15.8365%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.8326%" y="565" width="0.0820%" height="15" fill="rgb(249,147,17)" fg:x="193" fg:w="1"/><text x="16.0826%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="15.7506%" y="597" width="0.3281%" height="15" fill="rgb(241,193,52)" fg:x="192" fg:w="4"/><text x="16.0006%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.33%)</title><rect x="15.7506%" y="581" width="0.3281%" height="15" fill="rgb(217,159,39)" fg:x="192" fg:w="4"/><text x="16.0006%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="15.9147%" y="565" width="0.1641%" height="15" fill="rgb(248,110,0)" fg:x="194" fg:w="2"/><text x="16.1647%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="15.9147%" y="549" width="0.1641%" height="15" fill="rgb(233,227,0)" fg:x="194" fg:w="2"/><text x="16.1647%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="15.9147%" y="533" width="0.1641%" height="15" fill="rgb(252,55,2)" fg:x="194" fg:w="2"/><text x="16.1647%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="15.9147%" y="517" width="0.1641%" height="15" fill="rgb(224,194,24)" fg:x="194" fg:w="2"/><text x="16.1647%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="15.9147%" y="501" width="0.1641%" height="15" fill="rgb(247,5,33)" fg:x="194" fg:w="2"/><text x="16.1647%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.9967%" y="485" width="0.0820%" height="15" fill="rgb(242,66,47)" fg:x="195" fg:w="1"/><text x="16.2467%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.49%)</title><rect x="15.6686%" y="613" width="0.4922%" height="15" fill="rgb(213,107,12)" fg:x="191" fg:w="6"/><text x="15.9186%" y="623.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="16.0788%" y="597" width="0.0820%" height="15" fill="rgb(206,131,1)" fg:x="196" fg:w="1"/><text x="16.3288%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="16.0788%" y="581" width="0.0820%" height="15" fill="rgb(214,9,36)" fg:x="196" fg:w="1"/><text x="16.3288%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="16.0788%" y="565" width="0.0820%" height="15" fill="rgb(251,215,18)" fg:x="196" fg:w="1"/><text x="16.3288%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="16.0788%" y="549" width="0.0820%" height="15" fill="rgb(251,64,9)" fg:x="196" fg:w="1"/><text x="16.3288%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="16.0788%" y="533" width="0.0820%" height="15" fill="rgb(235,68,21)" fg:x="196" fg:w="1"/><text x="16.3288%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="16.0788%" y="517" width="0.0820%" height="15" fill="rgb(240,69,38)" fg:x="196" fg:w="1"/><text x="16.3288%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.5710%" y="581" width="0.0820%" height="15" fill="rgb(231,18,27)" fg:x="202" fg:w="1"/><text x="16.8210%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="16.7350%" y="565" width="0.0820%" height="15" fill="rgb(215,154,25)" fg:x="204" fg:w="1"/><text x="16.9850%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="16.8991%" y="549" width="0.0820%" height="15" fill="rgb(224,33,46)" fg:x="206" fg:w="1"/><text x="17.1491%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9811%" y="533" width="0.0820%" height="15" fill="rgb(248,191,53)" fg:x="207" fg:w="1"/><text x="17.2311%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.9811%" y="517" width="0.0820%" height="15" fill="rgb(231,3,37)" fg:x="207" fg:w="1"/><text x="17.2311%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.2272%" y="501" width="0.0820%" height="15" fill="rgb(209,152,2)" fg:x="210" fg:w="1"/><text x="17.4772%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2272%" y="485" width="0.0820%" height="15" fill="rgb(212,208,43)" fg:x="210" fg:w="1"/><text x="17.4772%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.2272%" y="469" width="0.0820%" height="15" fill="rgb(208,60,49)" fg:x="210" fg:w="1"/><text x="17.4772%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2272%" y="453" width="0.0820%" height="15" fill="rgb(245,135,6)" fg:x="210" fg:w="1"/><text x="17.4772%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.2272%" y="437" width="0.0820%" height="15" fill="rgb(243,86,23)" fg:x="210" fg:w="1"/><text x="17.4772%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.2272%" y="421" width="0.0820%" height="15" fill="rgb(223,7,20)" fg:x="210" fg:w="1"/><text x="17.4772%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.33%)</title><rect x="17.0632%" y="533" width="0.3281%" height="15" fill="rgb(212,182,17)" fg:x="208" fg:w="4"/><text x="17.3132%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="17.0632%" y="517" width="0.3281%" height="15" fill="rgb(237,94,50)" fg:x="208" fg:w="4"/><text x="17.3132%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3093%" y="501" width="0.0820%" height="15" fill="rgb(232,185,44)" fg:x="211" fg:w="1"/><text x="17.5593%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="17.7194%" y="485" width="0.1641%" height="15" fill="rgb(205,50,36)" fg:x="216" fg:w="2"/><text x="17.9694%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="17.6374%" y="517" width="0.4102%" height="15" fill="rgb(252,32,32)" fg:x="215" fg:w="5"/><text x="17.8874%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="17.6374%" y="501" width="0.4102%" height="15" fill="rgb(241,123,33)" fg:x="215" fg:w="5"/><text x="17.8874%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="17.8835%" y="485" width="0.1641%" height="15" fill="rgb(212,140,16)" fg:x="218" fg:w="2"/><text x="18.1335%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (16 samples, 1.31%)</title><rect x="16.8171%" y="565" width="1.3126%" height="15" fill="rgb(247,132,5)" fg:x="205" fg:w="16"/><text x="17.0671%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (14 samples, 1.15%)</title><rect x="16.9811%" y="549" width="1.1485%" height="15" fill="rgb(209,137,38)" fg:x="207" fg:w="14"/><text x="17.2311%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.74%)</title><rect x="17.3913%" y="533" width="0.7383%" height="15" fill="rgb(248,32,42)" fg:x="212" fg:w="9"/><text x="17.6413%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0476%" y="517" width="0.0820%" height="15" fill="rgb(216,188,40)" fg:x="220" fg:w="1"/><text x="18.2976%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (25 samples, 2.05%)</title><rect x="16.1608%" y="613" width="2.0509%" height="15" fill="rgb(209,127,53)" fg:x="197" fg:w="25"/><text x="16.4108%" y="623.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (22 samples, 1.80%)</title><rect x="16.4069%" y="597" width="1.8048%" height="15" fill="rgb(254,162,9)" fg:x="200" fg:w="22"/><text x="16.6569%" y="607.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (19 samples, 1.56%)</title><rect x="16.6530%" y="581" width="1.5587%" height="15" fill="rgb(219,183,10)" fg:x="203" fg:w="19"/><text x="16.9030%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1296%" y="565" width="0.0820%" height="15" fill="rgb(217,192,21)" fg:x="221" fg:w="1"/><text x="18.3796%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="18.2116%" y="421" width="0.0820%" height="15" fill="rgb(251,89,27)" fg:x="222" fg:w="1"/><text x="18.4616%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="18.2116%" y="437" width="0.1641%" height="15" fill="rgb(253,55,28)" fg:x="222" fg:w="2"/><text x="18.4616%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.2937%" y="421" width="0.0820%" height="15" fill="rgb(216,159,8)" fg:x="223" fg:w="1"/><text x="18.5437%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="18.2116%" y="469" width="0.2461%" height="15" fill="rgb(231,228,44)" fg:x="222" fg:w="3"/><text x="18.4616%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="18.2116%" y="453" width="0.2461%" height="15" fill="rgb(247,34,48)" fg:x="222" fg:w="3"/><text x="18.4616%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="18.3757%" y="437" width="0.0820%" height="15" fill="rgb(247,222,18)" fg:x="224" fg:w="1"/><text x="18.6257%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.3757%" y="421" width="0.0820%" height="15" fill="rgb(227,49,4)" fg:x="224" fg:w="1"/><text x="18.6257%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="18.4578%" y="405" width="0.0820%" height="15" fill="rgb(219,189,53)" fg:x="225" fg:w="1"/><text x="18.7078%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="18.4578%" y="469" width="0.1641%" height="15" fill="rgb(241,160,53)" fg:x="225" fg:w="2"/><text x="18.7078%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="18.4578%" y="453" width="0.1641%" height="15" fill="rgb(227,115,4)" fg:x="225" fg:w="2"/><text x="18.7078%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="18.4578%" y="437" width="0.1641%" height="15" fill="rgb(215,28,28)" fg:x="225" fg:w="2"/><text x="18.7078%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="18.4578%" y="421" width="0.1641%" height="15" fill="rgb(237,143,40)" fg:x="225" fg:w="2"/><text x="18.7078%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.5398%" y="405" width="0.0820%" height="15" fill="rgb(205,107,24)" fg:x="226" fg:w="1"/><text x="18.7898%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="18.2116%" y="501" width="0.4922%" height="15" fill="rgb(209,112,35)" fg:x="222" fg:w="6"/><text x="18.4616%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="18.2116%" y="485" width="0.4922%" height="15" fill="rgb(206,135,5)" fg:x="222" fg:w="6"/><text x="18.4616%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.6218%" y="469" width="0.0820%" height="15" fill="rgb(227,217,38)" fg:x="227" fg:w="1"/><text x="18.8718%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.6218%" y="453" width="0.0820%" height="15" fill="rgb(205,0,41)" fg:x="227" fg:w="1"/><text x="18.8718%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="18.2116%" y="517" width="0.5742%" height="15" fill="rgb(220,20,40)" fg:x="222" fg:w="7"/><text x="18.4616%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.7039%" y="501" width="0.0820%" height="15" fill="rgb(216,145,3)" fg:x="228" fg:w="1"/><text x="18.9539%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="18.7859%" y="501" width="0.1641%" height="15" fill="rgb(207,130,51)" fg:x="229" fg:w="2"/><text x="19.0359%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (4 samples, 0.33%)</title><rect x="18.7859%" y="517" width="0.3281%" height="15" fill="rgb(252,93,13)" fg:x="229" fg:w="4"/><text x="19.0359%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="18.9500%" y="501" width="0.1641%" height="15" fill="rgb(210,105,15)" fg:x="231" fg:w="2"/><text x="19.2000%" y="511.50"></text></g><g><title>engine::session::Session::close (69 samples, 5.66%)</title><rect x="13.6177%" y="725" width="5.6604%" height="15" fill="rgb(212,126,31)" fg:x="166" fg:w="69"/><text x="13.8677%" y="735.50">engine:..</text></g><g><title>engine::session::state::State::close (65 samples, 5.33%)</title><rect x="13.9459%" y="709" width="5.3322%" height="15" fill="rgb(241,167,46)" fg:x="170" fg:w="65"/><text x="14.1959%" y="719.50">engine:..</text></g><g><title>engine::session::state::State::flush_entities (55 samples, 4.51%)</title><rect x="14.7662%" y="693" width="4.5119%" height="15" fill="rgb(217,143,19)" fg:x="180" fg:w="55"/><text x="15.0162%" y="703.50">engin..</text></g><g><title>core::iter::adapters::try_process (53 samples, 4.35%)</title><rect x="14.9303%" y="677" width="4.3478%" height="15" fill="rgb(235,117,33)" fg:x="182" fg:w="53"/><text x="15.1803%" y="687.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (53 samples, 4.35%)</title><rect x="14.9303%" y="661" width="4.3478%" height="15" fill="rgb(247,95,6)" fg:x="182" fg:w="53"/><text x="15.1803%" y="671.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (53 samples, 4.35%)</title><rect x="14.9303%" y="645" width="4.3478%" height="15" fill="rgb(243,206,43)" fg:x="182" fg:w="53"/><text x="15.1803%" y="655.50">engin..</text></g><g><title>kernel::model::any_entity_changes (44 samples, 3.61%)</title><rect x="15.6686%" y="629" width="3.6095%" height="15" fill="rgb(229,65,54)" fg:x="191" fg:w="44"/><text x="15.9186%" y="639.50">kern..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (13 samples, 1.07%)</title><rect x="18.2116%" y="613" width="1.0664%" height="15" fill="rgb(247,137,34)" fg:x="222" fg:w="13"/><text x="18.4616%" y="623.50"></text></g><g><title>serde_json::de::from_trait (13 samples, 1.07%)</title><rect x="18.2116%" y="597" width="1.0664%" height="15" fill="rgb(245,174,44)" fg:x="222" fg:w="13"/><text x="18.4616%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.07%)</title><rect x="18.2116%" y="581" width="1.0664%" height="15" fill="rgb(223,64,15)" fg:x="222" fg:w="13"/><text x="18.4616%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.07%)</title><rect x="18.2116%" y="565" width="1.0664%" height="15" fill="rgb(243,153,36)" fg:x="222" fg:w="13"/><text x="18.4616%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.07%)</title><rect x="18.2116%" y="549" width="1.0664%" height="15" fill="rgb(252,23,4)" fg:x="222" fg:w="13"/><text x="18.4616%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.07%)</title><rect x="18.2116%" y="533" width="1.0664%" height="15" fill="rgb(209,132,13)" fg:x="222" fg:w="13"/><text x="18.4616%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="19.1140%" y="517" width="0.1641%" height="15" fill="rgb(209,196,21)" fg:x="233" fg:w="2"/><text x="19.3640%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="19.1140%" y="501" width="0.1641%" height="15" fill="rgb(252,197,1)" fg:x="233" fg:w="2"/><text x="19.3640%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.1961%" y="485" width="0.0820%" height="15" fill="rgb(229,42,46)" fg:x="234" fg:w="1"/><text x="19.4461%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="19.5242%" y="661" width="0.0820%" height="15" fill="rgb(219,85,8)" fg:x="238" fg:w="1"/><text x="19.7742%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.5242%" y="645" width="0.0820%" height="15" fill="rgb(223,185,14)" fg:x="238" fg:w="1"/><text x="19.7742%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="19.5242%" y="629" width="0.0820%" height="15" fill="rgb(217,196,18)" fg:x="238" fg:w="1"/><text x="19.7742%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (4 samples, 0.33%)</title><rect x="19.4422%" y="693" width="0.3281%" height="15" fill="rgb(220,122,37)" fg:x="237" fg:w="4"/><text x="19.6922%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="19.4422%" y="677" width="0.3281%" height="15" fill="rgb(236,135,33)" fg:x="237" fg:w="4"/><text x="19.6922%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="19.6062%" y="661" width="0.1641%" height="15" fill="rgb(222,86,54)" fg:x="239" fg:w="2"/><text x="19.8562%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.6062%" y="645" width="0.1641%" height="15" fill="rgb(227,42,22)" fg:x="239" fg:w="2"/><text x="19.8562%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.6883%" y="629" width="0.0820%" height="15" fill="rgb(243,101,27)" fg:x="240" fg:w="1"/><text x="19.9383%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.6883%" y="613" width="0.0820%" height="15" fill="rgb(229,100,8)" fg:x="240" fg:w="1"/><text x="19.9383%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.6883%" y="597" width="0.0820%" height="15" fill="rgb(252,68,10)" fg:x="240" fg:w="1"/><text x="19.9383%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.6883%" y="581" width="0.0820%" height="15" fill="rgb(219,19,31)" fg:x="240" fg:w="1"/><text x="19.9383%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="19.7703%" y="661" width="0.1641%" height="15" fill="rgb(246,150,44)" fg:x="241" fg:w="2"/><text x="20.0203%" y="671.50"></text></g><g><title>&lt;plugins_core::carrying::parser::HoldActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="19.8523%" y="645" width="0.0820%" height="15" fill="rgb(211,14,39)" fg:x="242" fg:w="1"/><text x="20.1023%" y="655.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (1 samples, 0.08%)</title><rect x="19.8523%" y="629" width="0.0820%" height="15" fill="rgb(221,98,29)" fg:x="242" fg:w="1"/><text x="20.1023%" y="639.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.08%)</title><rect x="19.8523%" y="613" width="0.0820%" height="15" fill="rgb(221,70,26)" fg:x="242" fg:w="1"/><text x="20.1023%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="19.8523%" y="597" width="0.0820%" height="15" fill="rgb(236,146,30)" fg:x="242" fg:w="1"/><text x="20.1023%" y="607.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.08%)</title><rect x="19.8523%" y="581" width="0.0820%" height="15" fill="rgb(226,94,34)" fg:x="242" fg:w="1"/><text x="20.1023%" y="591.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="19.9344%" y="661" width="0.0820%" height="15" fill="rgb(248,132,21)" fg:x="243" fg:w="1"/><text x="20.1844%" y="671.50"></text></g><g><title>&lt;plugins_core::chat::parser::SpeakActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="19.9344%" y="645" width="0.0820%" height="15" fill="rgb(245,43,50)" fg:x="243" fg:w="1"/><text x="20.1844%" y="655.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="20.0164%" y="661" width="0.0820%" height="15" fill="rgb(245,132,31)" fg:x="244" fg:w="1"/><text x="20.2664%" y="671.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="20.0164%" y="645" width="0.0820%" height="15" fill="rgb(230,171,4)" fg:x="244" fg:w="1"/><text x="20.2664%" y="655.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="20.0164%" y="629" width="0.0820%" height="15" fill="rgb(235,6,45)" fg:x="244" fg:w="1"/><text x="20.2664%" y="639.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="20.0164%" y="613" width="0.0820%" height="15" fill="rgb(220,80,28)" fg:x="244" fg:w="1"/><text x="20.2664%" y="623.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (5 samples, 0.41%)</title><rect x="19.7703%" y="693" width="0.4102%" height="15" fill="rgb(242,171,9)" fg:x="241" fg:w="5"/><text x="20.0203%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.41%)</title><rect x="19.7703%" y="677" width="0.4102%" height="15" fill="rgb(214,135,29)" fg:x="241" fg:w="5"/><text x="20.0203%" y="687.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::sources (1 samples, 0.08%)</title><rect x="20.0984%" y="661" width="0.0820%" height="15" fill="rgb(221,229,16)" fg:x="245" fg:w="1"/><text x="20.3484%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::DomainError&gt; (1 samples, 0.08%)</title><rect x="20.1805%" y="693" width="0.0820%" height="15" fill="rgb(253,59,46)" fg:x="246" fg:w="1"/><text x="20.4305%" y="703.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="20.5086%" y="453" width="0.0820%" height="15" fill="rgb(250,147,20)" fg:x="250" fg:w="1"/><text x="20.7586%" y="463.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (1 samples, 0.08%)</title><rect x="20.5086%" y="437" width="0.0820%" height="15" fill="rgb(236,64,48)" fg:x="250" fg:w="1"/><text x="20.7586%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="20.5086%" y="421" width="0.0820%" height="15" fill="rgb(240,37,42)" fg:x="250" fg:w="1"/><text x="20.7586%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="20.5086%" y="405" width="0.0820%" height="15" fill="rgb(220,41,50)" fg:x="250" fg:w="1"/><text x="20.7586%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="20.5086%" y="389" width="0.0820%" height="15" fill="rgb(216,51,14)" fg:x="250" fg:w="1"/><text x="20.7586%" y="399.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="20.5086%" y="373" width="0.0820%" height="15" fill="rgb(215,83,10)" fg:x="250" fg:w="1"/><text x="20.7586%" y="383.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="20.5086%" y="357" width="0.0820%" height="15" fill="rgb(206,144,17)" fg:x="250" fg:w="1"/><text x="20.7586%" y="367.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="20.5086%" y="341" width="0.0820%" height="15" fill="rgb(219,196,37)" fg:x="250" fg:w="1"/><text x="20.7586%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="20.5086%" y="325" width="0.0820%" height="15" fill="rgb(226,135,26)" fg:x="250" fg:w="1"/><text x="20.7586%" y="335.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="20.5086%" y="309" width="0.0820%" height="15" fill="rgb(237,195,40)" fg:x="250" fg:w="1"/><text x="20.7586%" y="319.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="20.5086%" y="293" width="0.0820%" height="15" fill="rgb(228,182,42)" fg:x="250" fg:w="1"/><text x="20.7586%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (1 samples, 0.08%)</title><rect x="20.5906%" y="277" width="0.0820%" height="15" fill="rgb(224,135,50)" fg:x="251" fg:w="1"/><text x="20.8406%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (1 samples, 0.08%)</title><rect x="20.5906%" y="261" width="0.0820%" height="15" fill="rgb(236,215,34)" fg:x="251" fg:w="1"/><text x="20.8406%" y="271.50"></text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (1 samples, 0.08%)</title><rect x="20.5906%" y="245" width="0.0820%" height="15" fill="rgb(244,213,27)" fg:x="251" fg:w="1"/><text x="20.8406%" y="255.50"></text></g><g><title>core::unicode::unicode_data::skip_search (1 samples, 0.08%)</title><rect x="20.5906%" y="229" width="0.0820%" height="15" fill="rgb(233,37,53)" fg:x="251" fg:w="1"/><text x="20.8406%" y="239.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (3 samples, 0.25%)</title><rect x="20.5086%" y="533" width="0.2461%" height="15" fill="rgb(222,132,14)" fg:x="250" fg:w="3"/><text x="20.7586%" y="543.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (3 samples, 0.25%)</title><rect x="20.5086%" y="517" width="0.2461%" height="15" fill="rgb(219,202,29)" fg:x="250" fg:w="3"/><text x="20.7586%" y="527.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (3 samples, 0.25%)</title><rect x="20.5086%" y="501" width="0.2461%" height="15" fill="rgb(226,157,39)" fg:x="250" fg:w="3"/><text x="20.7586%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.25%)</title><rect x="20.5086%" y="485" width="0.2461%" height="15" fill="rgb(235,213,2)" fg:x="250" fg:w="3"/><text x="20.7586%" y="495.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (3 samples, 0.25%)</title><rect x="20.5086%" y="469" width="0.2461%" height="15" fill="rgb(250,121,2)" fg:x="250" fg:w="3"/><text x="20.7586%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="20.5906%" y="453" width="0.1641%" height="15" fill="rgb(206,192,33)" fg:x="251" fg:w="2"/><text x="20.8406%" y="463.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (2 samples, 0.16%)</title><rect x="20.5906%" y="437" width="0.1641%" height="15" fill="rgb(240,161,6)" fg:x="251" fg:w="2"/><text x="20.8406%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="20.5906%" y="421" width="0.1641%" height="15" fill="rgb(246,53,30)" fg:x="251" fg:w="2"/><text x="20.8406%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="20.5906%" y="405" width="0.1641%" height="15" fill="rgb(219,123,43)" fg:x="251" fg:w="2"/><text x="20.8406%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="20.5906%" y="389" width="0.1641%" height="15" fill="rgb(236,53,49)" fg:x="251" fg:w="2"/><text x="20.8406%" y="399.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="20.5906%" y="373" width="0.1641%" height="15" fill="rgb(241,156,1)" fg:x="251" fg:w="2"/><text x="20.8406%" y="383.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (2 samples, 0.16%)</title><rect x="20.5906%" y="357" width="0.1641%" height="15" fill="rgb(209,73,26)" fg:x="251" fg:w="2"/><text x="20.8406%" y="367.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (2 samples, 0.16%)</title><rect x="20.5906%" y="341" width="0.1641%" height="15" fill="rgb(206,114,3)" fg:x="251" fg:w="2"/><text x="20.8406%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="20.5906%" y="325" width="0.1641%" height="15" fill="rgb(230,214,9)" fg:x="251" fg:w="2"/><text x="20.8406%" y="335.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (2 samples, 0.16%)</title><rect x="20.5906%" y="309" width="0.1641%" height="15" fill="rgb(240,184,46)" fg:x="251" fg:w="2"/><text x="20.8406%" y="319.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="20.5906%" y="293" width="0.1641%" height="15" fill="rgb(242,169,54)" fg:x="251" fg:w="2"/><text x="20.8406%" y="303.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="20.6727%" y="277" width="0.0820%" height="15" fill="rgb(207,168,50)" fg:x="252" fg:w="1"/><text x="20.9227%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.6727%" y="261" width="0.0820%" height="15" fill="rgb(240,114,2)" fg:x="252" fg:w="1"/><text x="20.9227%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.6727%" y="245" width="0.0820%" height="15" fill="rgb(211,17,40)" fg:x="252" fg:w="1"/><text x="20.9227%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="20.6727%" y="229" width="0.0820%" height="15" fill="rgb(235,97,36)" fg:x="252" fg:w="1"/><text x="20.9227%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="20.6727%" y="213" width="0.0820%" height="15" fill="rgb(208,164,11)" fg:x="252" fg:w="1"/><text x="20.9227%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="20.6727%" y="197" width="0.0820%" height="15" fill="rgb(242,11,17)" fg:x="252" fg:w="1"/><text x="20.9227%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="20.6727%" y="181" width="0.0820%" height="15" fill="rgb(215,86,33)" fg:x="252" fg:w="1"/><text x="20.9227%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="20.6727%" y="165" width="0.0820%" height="15" fill="rgb(245,185,28)" fg:x="252" fg:w="1"/><text x="20.9227%" y="175.50"></text></g><g><title>alloc::fmt::format::format_inner (5 samples, 0.41%)</title><rect x="20.4266%" y="677" width="0.4102%" height="15" fill="rgb(231,89,42)" fg:x="249" fg:w="5"/><text x="20.6766%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (5 samples, 0.41%)</title><rect x="20.4266%" y="661" width="0.4102%" height="15" fill="rgb(210,18,47)" fg:x="249" fg:w="5"/><text x="20.6766%" y="671.50"></text></g><g><title>core::fmt::write (5 samples, 0.41%)</title><rect x="20.4266%" y="645" width="0.4102%" height="15" fill="rgb(214,84,8)" fg:x="249" fg:w="5"/><text x="20.6766%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (5 samples, 0.41%)</title><rect x="20.4266%" y="629" width="0.4102%" height="15" fill="rgb(214,222,23)" fg:x="249" fg:w="5"/><text x="20.6766%" y="639.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (5 samples, 0.41%)</title><rect x="20.4266%" y="613" width="0.4102%" height="15" fill="rgb(213,104,21)" fg:x="249" fg:w="5"/><text x="20.6766%" y="623.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (5 samples, 0.41%)</title><rect x="20.4266%" y="597" width="0.4102%" height="15" fill="rgb(238,138,6)" fg:x="249" fg:w="5"/><text x="20.6766%" y="607.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (5 samples, 0.41%)</title><rect x="20.4266%" y="581" width="0.4102%" height="15" fill="rgb(205,167,50)" fg:x="249" fg:w="5"/><text x="20.6766%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (4 samples, 0.33%)</title><rect x="20.5086%" y="565" width="0.3281%" height="15" fill="rgb(230,105,27)" fg:x="250" fg:w="4"/><text x="20.7586%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (4 samples, 0.33%)</title><rect x="20.5086%" y="549" width="0.3281%" height="15" fill="rgb(222,97,48)" fg:x="250" fg:w="4"/><text x="20.7586%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="20.7547%" y="533" width="0.0820%" height="15" fill="rgb(222,197,14)" fg:x="253" fg:w="1"/><text x="21.0047%" y="543.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="20.7547%" y="517" width="0.0820%" height="15" fill="rgb(210,105,47)" fg:x="253" fg:w="1"/><text x="21.0047%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="20.7547%" y="501" width="0.0820%" height="15" fill="rgb(238,158,19)" fg:x="253" fg:w="1"/><text x="21.0047%" y="511.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="20.7547%" y="485" width="0.0820%" height="15" fill="rgb(226,176,23)" fg:x="253" fg:w="1"/><text x="21.0047%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="20.7547%" y="469" width="0.0820%" height="15" fill="rgb(208,79,31)" fg:x="253" fg:w="1"/><text x="21.0047%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.7547%" y="453" width="0.0820%" height="15" fill="rgb(221,154,21)" fg:x="253" fg:w="1"/><text x="21.0047%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.7547%" y="437" width="0.0820%" height="15" fill="rgb(213,61,41)" fg:x="253" fg:w="1"/><text x="21.0047%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="20.7547%" y="421" width="0.0820%" height="15" fill="rgb(215,28,33)" fg:x="253" fg:w="1"/><text x="21.0047%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="20.7547%" y="405" width="0.0820%" height="15" fill="rgb(231,139,26)" fg:x="253" fg:w="1"/><text x="21.0047%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="20.7547%" y="389" width="0.0820%" height="15" fill="rgb(232,159,16)" fg:x="253" fg:w="1"/><text x="21.0047%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="20.7547%" y="373" width="0.0820%" height="15" fill="rgb(233,80,10)" fg:x="253" fg:w="1"/><text x="21.0047%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="20.7547%" y="357" width="0.0820%" height="15" fill="rgb(208,147,29)" fg:x="253" fg:w="1"/><text x="21.0047%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.8368%" y="661" width="0.0820%" height="15" fill="rgb(213,10,12)" fg:x="254" fg:w="1"/><text x="21.0868%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="20.9188%" y="661" width="0.0820%" height="15" fill="rgb(231,218,13)" fg:x="255" fg:w="1"/><text x="21.1688%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (1 samples, 0.08%)</title><rect x="20.9188%" y="645" width="0.0820%" height="15" fill="rgb(244,199,44)" fg:x="255" fg:w="1"/><text x="21.1688%" y="655.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (1 samples, 0.08%)</title><rect x="21.0008%" y="645" width="0.0820%" height="15" fill="rgb(240,144,53)" fg:x="256" fg:w="1"/><text x="21.2508%" y="655.50"></text></g><g><title>chrono::offset::utc::Utc::now (2 samples, 0.16%)</title><rect x="21.0008%" y="661" width="0.1641%" height="15" fill="rgb(223,57,28)" fg:x="256" fg:w="2"/><text x="21.2508%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="21.0829%" y="645" width="0.0820%" height="15" fill="rgb(213,134,38)" fg:x="257" fg:w="1"/><text x="21.3329%" y="655.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="21.0829%" y="629" width="0.0820%" height="15" fill="rgb(251,182,42)" fg:x="257" fg:w="1"/><text x="21.3329%" y="639.50"></text></g><g><title>tracing_core::dispatcher::get_default (1 samples, 0.08%)</title><rect x="21.1649%" y="661" width="0.0820%" height="15" fill="rgb(229,93,13)" fg:x="258" fg:w="1"/><text x="21.4149%" y="671.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::downgrade (1 samples, 0.08%)</title><rect x="21.1649%" y="645" width="0.0820%" height="15" fill="rgb(234,171,3)" fg:x="258" fg:w="1"/><text x="21.4149%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.2469%" y="629" width="0.0820%" height="15" fill="rgb(241,105,32)" fg:x="259" fg:w="1"/><text x="21.4969%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.5751%" y="533" width="0.1641%" height="15" fill="rgb(221,66,3)" fg:x="263" fg:w="2"/><text x="21.8251%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.5751%" y="517" width="0.1641%" height="15" fill="rgb(248,155,29)" fg:x="263" fg:w="2"/><text x="21.8251%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="21.7391%" y="533" width="0.0820%" height="15" fill="rgb(231,31,5)" fg:x="265" fg:w="1"/><text x="21.9891%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.41%)</title><rect x="21.4930%" y="549" width="0.4102%" height="15" fill="rgb(213,188,31)" fg:x="262" fg:w="5"/><text x="21.7430%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.8212%" y="533" width="0.0820%" height="15" fill="rgb(212,104,33)" fg:x="266" fg:w="1"/><text x="22.0712%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.8212%" y="517" width="0.0820%" height="15" fill="rgb(254,77,51)" fg:x="266" fg:w="1"/><text x="22.0712%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.8212%" y="501" width="0.0820%" height="15" fill="rgb(234,39,26)" fg:x="266" fg:w="1"/><text x="22.0712%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.8212%" y="485" width="0.0820%" height="15" fill="rgb(208,88,36)" fg:x="266" fg:w="1"/><text x="22.0712%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.8212%" y="469" width="0.0820%" height="15" fill="rgb(243,222,10)" fg:x="266" fg:w="1"/><text x="22.0712%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.9032%" y="389" width="0.0820%" height="15" fill="rgb(218,133,52)" fg:x="267" fg:w="1"/><text x="22.1532%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.9032%" y="373" width="0.0820%" height="15" fill="rgb(222,25,26)" fg:x="267" fg:w="1"/><text x="22.1532%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="21.9032%" y="357" width="0.0820%" height="15" fill="rgb(243,174,24)" fg:x="267" fg:w="1"/><text x="22.1532%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.9852%" y="389" width="0.0820%" height="15" fill="rgb(233,188,52)" fg:x="268" fg:w="1"/><text x="22.2352%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="22.0673%" y="389" width="0.0820%" height="15" fill="rgb(208,89,14)" fg:x="269" fg:w="1"/><text x="22.3173%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="22.0673%" y="373" width="0.0820%" height="15" fill="rgb(205,204,21)" fg:x="269" fg:w="1"/><text x="22.3173%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="22.0673%" y="357" width="0.0820%" height="15" fill="rgb(246,39,28)" fg:x="269" fg:w="1"/><text x="22.3173%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="22.0673%" y="341" width="0.0820%" height="15" fill="rgb(235,71,19)" fg:x="269" fg:w="1"/><text x="22.3173%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="22.0673%" y="325" width="0.0820%" height="15" fill="rgb(211,62,39)" fg:x="269" fg:w="1"/><text x="22.3173%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="22.1493%" y="341" width="0.0820%" height="15" fill="rgb(246,118,20)" fg:x="270" fg:w="1"/><text x="22.3993%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="22.1493%" y="325" width="0.0820%" height="15" fill="rgb(230,82,12)" fg:x="270" fg:w="1"/><text x="22.3993%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.1493%" y="309" width="0.0820%" height="15" fill="rgb(205,212,34)" fg:x="270" fg:w="1"/><text x="22.3993%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.1493%" y="293" width="0.0820%" height="15" fill="rgb(239,90,1)" fg:x="270" fg:w="1"/><text x="22.3993%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="22.1493%" y="277" width="0.0820%" height="15" fill="rgb(225,198,50)" fg:x="270" fg:w="1"/><text x="22.3993%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.1493%" y="261" width="0.0820%" height="15" fill="rgb(227,208,48)" fg:x="270" fg:w="1"/><text x="22.3993%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.1493%" y="245" width="0.0820%" height="15" fill="rgb(238,134,41)" fg:x="270" fg:w="1"/><text x="22.3993%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="22.1493%" y="229" width="0.0820%" height="15" fill="rgb(241,58,39)" fg:x="270" fg:w="1"/><text x="22.3993%" y="239.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.41%)</title><rect x="21.9032%" y="485" width="0.4102%" height="15" fill="rgb(214,126,4)" fg:x="267" fg:w="5"/><text x="22.1532%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="21.9032%" y="469" width="0.4102%" height="15" fill="rgb(235,149,4)" fg:x="267" fg:w="5"/><text x="22.1532%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="21.9032%" y="453" width="0.4102%" height="15" fill="rgb(236,59,29)" fg:x="267" fg:w="5"/><text x="22.1532%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.41%)</title><rect x="21.9032%" y="437" width="0.4102%" height="15" fill="rgb(246,11,33)" fg:x="267" fg:w="5"/><text x="22.1532%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="21.9032%" y="421" width="0.4102%" height="15" fill="rgb(232,180,35)" fg:x="267" fg:w="5"/><text x="22.1532%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.41%)</title><rect x="21.9032%" y="405" width="0.4102%" height="15" fill="rgb(220,35,37)" fg:x="267" fg:w="5"/><text x="22.1532%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="22.1493%" y="389" width="0.1641%" height="15" fill="rgb(238,107,48)" fg:x="270" fg:w="2"/><text x="22.3993%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="22.1493%" y="373" width="0.1641%" height="15" fill="rgb(205,65,21)" fg:x="270" fg:w="2"/><text x="22.3993%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="22.1493%" y="357" width="0.1641%" height="15" fill="rgb(246,138,48)" fg:x="270" fg:w="2"/><text x="22.3993%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.2313%" y="341" width="0.0820%" height="15" fill="rgb(209,220,47)" fg:x="271" fg:w="1"/><text x="22.4813%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.2313%" y="325" width="0.0820%" height="15" fill="rgb(222,162,49)" fg:x="271" fg:w="1"/><text x="22.4813%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="22.2313%" y="309" width="0.0820%" height="15" fill="rgb(243,123,11)" fg:x="271" fg:w="1"/><text x="22.4813%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.2313%" y="293" width="0.0820%" height="15" fill="rgb(221,229,41)" fg:x="271" fg:w="1"/><text x="22.4813%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.2313%" y="277" width="0.0820%" height="15" fill="rgb(216,68,4)" fg:x="271" fg:w="1"/><text x="22.4813%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.3954%" y="293" width="0.0820%" height="15" fill="rgb(207,88,35)" fg:x="273" fg:w="1"/><text x="22.6454%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="22.3954%" y="277" width="0.0820%" height="15" fill="rgb(252,2,5)" fg:x="273" fg:w="1"/><text x="22.6454%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.3954%" y="261" width="0.0820%" height="15" fill="rgb(209,173,7)" fg:x="273" fg:w="1"/><text x="22.6454%" y="271.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (15 samples, 1.23%)</title><rect x="21.3290%" y="565" width="1.2305%" height="15" fill="rgb(210,198,52)" fg:x="260" fg:w="15"/><text x="21.5790%" y="575.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.66%)</title><rect x="21.9032%" y="549" width="0.6563%" height="15" fill="rgb(228,152,32)" fg:x="267" fg:w="8"/><text x="22.1532%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.66%)</title><rect x="21.9032%" y="533" width="0.6563%" height="15" fill="rgb(249,98,29)" fg:x="267" fg:w="8"/><text x="22.1532%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.66%)</title><rect x="21.9032%" y="517" width="0.6563%" height="15" fill="rgb(205,148,48)" fg:x="267" fg:w="8"/><text x="22.1532%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.66%)</title><rect x="21.9032%" y="501" width="0.6563%" height="15" fill="rgb(236,69,34)" fg:x="267" fg:w="8"/><text x="22.1532%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.25%)</title><rect x="22.3134%" y="485" width="0.2461%" height="15" fill="rgb(220,151,41)" fg:x="272" fg:w="3"/><text x="22.5634%" y="495.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.25%)</title><rect x="22.3134%" y="469" width="0.2461%" height="15" fill="rgb(254,106,24)" fg:x="272" fg:w="3"/><text x="22.5634%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="22.3134%" y="453" width="0.2461%" height="15" fill="rgb(210,37,48)" fg:x="272" fg:w="3"/><text x="22.5634%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="22.3134%" y="437" width="0.2461%" height="15" fill="rgb(254,131,5)" fg:x="272" fg:w="3"/><text x="22.5634%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="22.3134%" y="421" width="0.2461%" height="15" fill="rgb(216,55,41)" fg:x="272" fg:w="3"/><text x="22.5634%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="22.3134%" y="405" width="0.2461%" height="15" fill="rgb(250,35,31)" fg:x="272" fg:w="3"/><text x="22.5634%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="22.3134%" y="389" width="0.2461%" height="15" fill="rgb(207,124,33)" fg:x="272" fg:w="3"/><text x="22.5634%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="22.3134%" y="373" width="0.2461%" height="15" fill="rgb(249,175,17)" fg:x="272" fg:w="3"/><text x="22.5634%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="22.3134%" y="357" width="0.2461%" height="15" fill="rgb(224,175,39)" fg:x="272" fg:w="3"/><text x="22.5634%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="22.3134%" y="341" width="0.2461%" height="15" fill="rgb(208,67,49)" fg:x="272" fg:w="3"/><text x="22.5634%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="22.3954%" y="325" width="0.1641%" height="15" fill="rgb(222,188,41)" fg:x="273" fg:w="2"/><text x="22.6454%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="22.3954%" y="309" width="0.1641%" height="15" fill="rgb(243,213,30)" fg:x="273" fg:w="2"/><text x="22.6454%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.4774%" y="293" width="0.0820%" height="15" fill="rgb(253,100,45)" fg:x="274" fg:w="1"/><text x="22.7274%" y="303.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (16 samples, 1.31%)</title><rect x="21.3290%" y="581" width="1.3126%" height="15" fill="rgb(226,24,44)" fg:x="260" fg:w="16"/><text x="21.5790%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="22.5595%" y="565" width="0.0820%" height="15" fill="rgb(215,41,24)" fg:x="275" fg:w="1"/><text x="22.8095%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="22.5595%" y="549" width="0.0820%" height="15" fill="rgb(254,53,33)" fg:x="275" fg:w="1"/><text x="22.8095%" y="559.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="22.5595%" y="533" width="0.0820%" height="15" fill="rgb(242,103,10)" fg:x="275" fg:w="1"/><text x="22.8095%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.5595%" y="517" width="0.0820%" height="15" fill="rgb(246,29,21)" fg:x="275" fg:w="1"/><text x="22.8095%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.6415%" y="581" width="0.0820%" height="15" fill="rgb(251,154,1)" fg:x="276" fg:w="1"/><text x="22.8915%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="22.8876%" y="373" width="0.0820%" height="15" fill="rgb(254,212,26)" fg:x="279" fg:w="1"/><text x="23.1376%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.8876%" y="357" width="0.0820%" height="15" fill="rgb(251,187,46)" fg:x="279" fg:w="1"/><text x="23.1376%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.8876%" y="341" width="0.0820%" height="15" fill="rgb(224,208,14)" fg:x="279" fg:w="1"/><text x="23.1376%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="22.8876%" y="325" width="0.0820%" height="15" fill="rgb(222,176,26)" fg:x="279" fg:w="1"/><text x="23.1376%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.8876%" y="309" width="0.0820%" height="15" fill="rgb(241,219,52)" fg:x="279" fg:w="1"/><text x="23.1376%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.8876%" y="293" width="0.0820%" height="15" fill="rgb(252,198,21)" fg:x="279" fg:w="1"/><text x="23.1376%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.8876%" y="277" width="0.0820%" height="15" fill="rgb(244,196,23)" fg:x="279" fg:w="1"/><text x="23.1376%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="22.9696%" y="373" width="0.0820%" height="15" fill="rgb(239,121,44)" fg:x="280" fg:w="1"/><text x="23.2196%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.9696%" y="357" width="0.0820%" height="15" fill="rgb(249,203,23)" fg:x="280" fg:w="1"/><text x="23.2196%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.33%)</title><rect x="22.8056%" y="389" width="0.3281%" height="15" fill="rgb(238,219,10)" fg:x="278" fg:w="4"/><text x="23.0556%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="23.0517%" y="373" width="0.0820%" height="15" fill="rgb(241,35,46)" fg:x="281" fg:w="1"/><text x="23.3017%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="23.1337%" y="389" width="0.1641%" height="15" fill="rgb(218,28,6)" fg:x="282" fg:w="2"/><text x="23.3837%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="23.1337%" y="373" width="0.1641%" height="15" fill="rgb(233,151,50)" fg:x="282" fg:w="2"/><text x="23.3837%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.2158%" y="357" width="0.0820%" height="15" fill="rgb(208,57,8)" fg:x="283" fg:w="1"/><text x="23.4658%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.2158%" y="341" width="0.0820%" height="15" fill="rgb(253,99,10)" fg:x="283" fg:w="1"/><text x="23.4658%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.2158%" y="325" width="0.0820%" height="15" fill="rgb(237,196,49)" fg:x="283" fg:w="1"/><text x="23.4658%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="23.2158%" y="309" width="0.0820%" height="15" fill="rgb(209,51,3)" fg:x="283" fg:w="1"/><text x="23.4658%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="23.2158%" y="293" width="0.0820%" height="15" fill="rgb(238,129,10)" fg:x="283" fg:w="1"/><text x="23.4658%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="23.2158%" y="277" width="0.0820%" height="15" fill="rgb(246,201,16)" fg:x="283" fg:w="1"/><text x="23.4658%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.2158%" y="261" width="0.0820%" height="15" fill="rgb(250,160,20)" fg:x="283" fg:w="1"/><text x="23.4658%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.2158%" y="245" width="0.0820%" height="15" fill="rgb(251,107,25)" fg:x="283" fg:w="1"/><text x="23.4658%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="23.2158%" y="229" width="0.0820%" height="15" fill="rgb(212,103,39)" fg:x="283" fg:w="1"/><text x="23.4658%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="23.2158%" y="213" width="0.0820%" height="15" fill="rgb(207,9,29)" fg:x="283" fg:w="1"/><text x="23.4658%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="23.2158%" y="197" width="0.0820%" height="15" fill="rgb(227,84,3)" fg:x="283" fg:w="1"/><text x="23.4658%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="23.2158%" y="181" width="0.0820%" height="15" fill="rgb(242,194,7)" fg:x="283" fg:w="1"/><text x="23.4658%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.2158%" y="165" width="0.0820%" height="15" fill="rgb(230,40,4)" fg:x="283" fg:w="1"/><text x="23.4658%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.2978%" y="357" width="0.0820%" height="15" fill="rgb(243,229,33)" fg:x="284" fg:w="1"/><text x="23.5478%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.2978%" y="341" width="0.0820%" height="15" fill="rgb(240,65,24)" fg:x="284" fg:w="1"/><text x="23.5478%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="23.3798%" y="357" width="0.0820%" height="15" fill="rgb(212,28,20)" fg:x="285" fg:w="1"/><text x="23.6298%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.25%)</title><rect x="23.2978%" y="389" width="0.2461%" height="15" fill="rgb(209,72,3)" fg:x="284" fg:w="3"/><text x="23.5478%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.25%)</title><rect x="23.2978%" y="373" width="0.2461%" height="15" fill="rgb(238,170,36)" fg:x="284" fg:w="3"/><text x="23.5478%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.4619%" y="357" width="0.0820%" height="15" fill="rgb(236,19,38)" fg:x="286" fg:w="1"/><text x="23.7119%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.4619%" y="341" width="0.0820%" height="15" fill="rgb(230,67,43)" fg:x="286" fg:w="1"/><text x="23.7119%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.4619%" y="325" width="0.0820%" height="15" fill="rgb(227,14,36)" fg:x="286" fg:w="1"/><text x="23.7119%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="23.5439%" y="389" width="0.0820%" height="15" fill="rgb(247,171,49)" fg:x="287" fg:w="1"/><text x="23.7939%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.5439%" y="373" width="0.0820%" height="15" fill="rgb(235,164,51)" fg:x="287" fg:w="1"/><text x="23.7939%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.5439%" y="357" width="0.0820%" height="15" fill="rgb(246,107,20)" fg:x="287" fg:w="1"/><text x="23.7939%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="23.5439%" y="341" width="0.0820%" height="15" fill="rgb(226,88,18)" fg:x="287" fg:w="1"/><text x="23.7939%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="23.5439%" y="325" width="0.0820%" height="15" fill="rgb(235,136,9)" fg:x="287" fg:w="1"/><text x="23.7939%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="23.5439%" y="309" width="0.0820%" height="15" fill="rgb(209,3,34)" fg:x="287" fg:w="1"/><text x="23.7939%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.5439%" y="293" width="0.0820%" height="15" fill="rgb(213,38,19)" fg:x="287" fg:w="1"/><text x="23.7939%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.5439%" y="277" width="0.0820%" height="15" fill="rgb(254,24,24)" fg:x="287" fg:w="1"/><text x="23.7939%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="23.5439%" y="261" width="0.0820%" height="15" fill="rgb(219,122,42)" fg:x="287" fg:w="1"/><text x="23.7939%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="23.5439%" y="245" width="0.0820%" height="15" fill="rgb(205,128,31)" fg:x="287" fg:w="1"/><text x="23.7939%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="23.5439%" y="229" width="0.0820%" height="15" fill="rgb(212,142,0)" fg:x="287" fg:w="1"/><text x="23.7939%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="23.5439%" y="213" width="0.0820%" height="15" fill="rgb(211,25,35)" fg:x="287" fg:w="1"/><text x="23.7939%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.5439%" y="197" width="0.0820%" height="15" fill="rgb(220,150,53)" fg:x="287" fg:w="1"/><text x="23.7939%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="23.7080%" y="229" width="0.0820%" height="15" fill="rgb(220,30,24)" fg:x="289" fg:w="1"/><text x="23.9580%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="23.7080%" y="213" width="0.0820%" height="15" fill="rgb(218,86,23)" fg:x="289" fg:w="1"/><text x="23.9580%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.7080%" y="197" width="0.0820%" height="15" fill="rgb(206,62,27)" fg:x="289" fg:w="1"/><text x="23.9580%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.7080%" y="181" width="0.0820%" height="15" fill="rgb(249,174,0)" fg:x="289" fg:w="1"/><text x="23.9580%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="23.7080%" y="261" width="0.1641%" height="15" fill="rgb(246,67,27)" fg:x="289" fg:w="2"/><text x="23.9580%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="23.7080%" y="245" width="0.1641%" height="15" fill="rgb(250,195,30)" fg:x="289" fg:w="2"/><text x="23.9580%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.7900%" y="229" width="0.0820%" height="15" fill="rgb(251,171,50)" fg:x="290" fg:w="1"/><text x="24.0400%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.57%)</title><rect x="23.9541%" y="245" width="0.5742%" height="15" fill="rgb(236,196,10)" fg:x="292" fg:w="7"/><text x="24.2041%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.57%)</title><rect x="23.9541%" y="229" width="0.5742%" height="15" fill="rgb(249,228,52)" fg:x="292" fg:w="7"/><text x="24.2041%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (2 samples, 0.16%)</title><rect x="24.5283%" y="245" width="0.1641%" height="15" fill="rgb(219,60,51)" fg:x="299" fg:w="2"/><text x="24.7783%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="24.6924%" y="245" width="0.0820%" height="15" fill="rgb(240,198,24)" fg:x="301" fg:w="1"/><text x="24.9424%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="24.6924%" y="229" width="0.0820%" height="15" fill="rgb(240,192,40)" fg:x="301" fg:w="1"/><text x="24.9424%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="24.6924%" y="213" width="0.0820%" height="15" fill="rgb(219,118,5)" fg:x="301" fg:w="1"/><text x="24.9424%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="24.7744%" y="181" width="0.0820%" height="15" fill="rgb(205,202,34)" fg:x="302" fg:w="1"/><text x="25.0244%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.8564%" y="181" width="0.0820%" height="15" fill="rgb(234,153,26)" fg:x="303" fg:w="1"/><text x="25.1064%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="24.9385%" y="181" width="0.0820%" height="15" fill="rgb(229,26,29)" fg:x="304" fg:w="1"/><text x="25.1885%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="24.9385%" y="165" width="0.0820%" height="15" fill="rgb(237,115,21)" fg:x="304" fg:w="1"/><text x="25.1885%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.9385%" y="149" width="0.0820%" height="15" fill="rgb(252,144,15)" fg:x="304" fg:w="1"/><text x="25.1885%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.9385%" y="133" width="0.0820%" height="15" fill="rgb(232,26,13)" fg:x="304" fg:w="1"/><text x="25.1885%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.9385%" y="117" width="0.0820%" height="15" fill="rgb(206,44,19)" fg:x="304" fg:w="1"/><text x="25.1885%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (41 samples, 3.36%)</title><rect x="25.0205%" y="181" width="3.3634%" height="15" fill="rgb(249,159,2)" fg:x="305" fg:w="41"/><text x="25.2705%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (41 samples, 3.36%)</title><rect x="25.0205%" y="165" width="3.3634%" height="15" fill="rgb(231,5,32)" fg:x="305" fg:w="41"/><text x="25.2705%" y="175.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (41 samples, 3.36%)</title><rect x="25.0205%" y="149" width="3.3634%" height="15" fill="rgb(249,210,18)" fg:x="305" fg:w="41"/><text x="25.2705%" y="159.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 3.77%)</title><rect x="24.7744%" y="229" width="3.7736%" height="15" fill="rgb(215,223,36)" fg:x="302" fg:w="46"/><text x="25.0244%" y="239.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (46 samples, 3.77%)</title><rect x="24.7744%" y="213" width="3.7736%" height="15" fill="rgb(245,185,20)" fg:x="302" fg:w="46"/><text x="25.0244%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (46 samples, 3.77%)</title><rect x="24.7744%" y="197" width="3.7736%" height="15" fill="rgb(206,224,11)" fg:x="302" fg:w="46"/><text x="25.0244%" y="207.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="28.3839%" y="181" width="0.1641%" height="15" fill="rgb(248,73,42)" fg:x="346" fg:w="2"/><text x="28.6339%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="28.6300%" y="213" width="0.0820%" height="15" fill="rgb(219,149,31)" fg:x="349" fg:w="1"/><text x="28.8800%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.6300%" y="197" width="0.0820%" height="15" fill="rgb(243,104,17)" fg:x="349" fg:w="1"/><text x="28.8800%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.6300%" y="181" width="0.0820%" height="15" fill="rgb(244,117,33)" fg:x="349" fg:w="1"/><text x="28.8800%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.6300%" y="165" width="0.0820%" height="15" fill="rgb(251,25,47)" fg:x="349" fg:w="1"/><text x="28.8800%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="28.7121%" y="213" width="0.3281%" height="15" fill="rgb(249,70,13)" fg:x="350" fg:w="4"/><text x="28.9621%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.57%)</title><rect x="28.5480%" y="229" width="0.5742%" height="15" fill="rgb(217,133,18)" fg:x="348" fg:w="7"/><text x="28.7980%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="29.0402%" y="213" width="0.0820%" height="15" fill="rgb(248,97,28)" fg:x="354" fg:w="1"/><text x="29.2902%" y="223.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="29.1222%" y="213" width="0.0820%" height="15" fill="rgb(237,193,4)" fg:x="355" fg:w="1"/><text x="29.3722%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.1222%" y="197" width="0.0820%" height="15" fill="rgb(247,198,45)" fg:x="355" fg:w="1"/><text x="29.3722%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.1222%" y="181" width="0.0820%" height="15" fill="rgb(245,2,20)" fg:x="355" fg:w="1"/><text x="29.3722%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.1222%" y="165" width="0.0820%" height="15" fill="rgb(210,71,36)" fg:x="355" fg:w="1"/><text x="29.3722%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (55 samples, 4.51%)</title><rect x="24.7744%" y="245" width="4.5119%" height="15" fill="rgb(238,114,30)" fg:x="302" fg:w="55"/><text x="25.0244%" y="255.50">regex..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="29.1222%" y="229" width="0.1641%" height="15" fill="rgb(241,200,2)" fg:x="355" fg:w="2"/><text x="29.3722%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="29.2043%" y="213" width="0.0820%" height="15" fill="rgb(232,106,18)" fg:x="356" fg:w="1"/><text x="29.4543%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.2043%" y="197" width="0.0820%" height="15" fill="rgb(211,141,18)" fg:x="356" fg:w="1"/><text x="29.4543%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (67 samples, 5.50%)</title><rect x="23.8720%" y="261" width="5.4963%" height="15" fill="rgb(224,9,9)" fg:x="291" fg:w="67"/><text x="24.1220%" y="271.50">regex_a..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="29.2863%" y="245" width="0.0820%" height="15" fill="rgb(249,137,46)" fg:x="357" fg:w="1"/><text x="29.5363%" y="255.50"></text></g><g><title>regex_syntax::hir::literal::Seq::optimize_by_preference (1 samples, 0.08%)</title><rect x="29.2863%" y="229" width="0.0820%" height="15" fill="rgb(236,44,45)" fg:x="357" fg:w="1"/><text x="29.5363%" y="239.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="29.3683%" y="261" width="0.0820%" height="15" fill="rgb(205,68,40)" fg:x="358" fg:w="1"/><text x="29.6183%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="29.3683%" y="245" width="0.0820%" height="15" fill="rgb(214,198,49)" fg:x="358" fg:w="1"/><text x="29.6183%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="29.3683%" y="229" width="0.0820%" height="15" fill="rgb(226,140,45)" fg:x="358" fg:w="1"/><text x="29.6183%" y="239.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="29.3683%" y="213" width="0.0820%" height="15" fill="rgb(209,109,20)" fg:x="358" fg:w="1"/><text x="29.6183%" y="223.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="29.3683%" y="197" width="0.0820%" height="15" fill="rgb(217,33,46)" fg:x="358" fg:w="1"/><text x="29.6183%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="29.7785%" y="213" width="0.0820%" height="15" fill="rgb(232,150,33)" fg:x="363" fg:w="1"/><text x="30.0285%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="29.7785%" y="197" width="0.0820%" height="15" fill="rgb(233,76,25)" fg:x="363" fg:w="1"/><text x="30.0285%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="29.7785%" y="181" width="0.0820%" height="15" fill="rgb(254,219,23)" fg:x="363" fg:w="1"/><text x="30.0285%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="29.7785%" y="165" width="0.0820%" height="15" fill="rgb(233,108,4)" fg:x="363" fg:w="1"/><text x="30.0285%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (77 samples, 6.32%)</title><rect x="23.6259%" y="309" width="6.3167%" height="15" fill="rgb(229,98,6)" fg:x="288" fg:w="77"/><text x="23.8759%" y="319.50">&lt;regex::..</text></g><g><title>regex::builders::string::RegexBuilder::build (77 samples, 6.32%)</title><rect x="23.6259%" y="293" width="6.3167%" height="15" fill="rgb(217,40,27)" fg:x="288" fg:w="77"/><text x="23.8759%" y="303.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (77 samples, 6.32%)</title><rect x="23.6259%" y="277" width="6.3167%" height="15" fill="rgb(221,35,43)" fg:x="288" fg:w="77"/><text x="23.8759%" y="287.50">regex_au..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.49%)</title><rect x="29.4504%" y="261" width="0.4922%" height="15" fill="rgb(212,107,11)" fg:x="359" fg:w="6"/><text x="29.7004%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.49%)</title><rect x="29.4504%" y="245" width="0.4922%" height="15" fill="rgb(245,42,44)" fg:x="359" fg:w="6"/><text x="29.7004%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.33%)</title><rect x="29.6144%" y="229" width="0.3281%" height="15" fill="rgb(209,31,12)" fg:x="361" fg:w="4"/><text x="29.8644%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="29.8605%" y="213" width="0.0820%" height="15" fill="rgb(210,228,54)" fg:x="364" fg:w="1"/><text x="30.1105%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.8605%" y="197" width="0.0820%" height="15" fill="rgb(241,19,33)" fg:x="364" fg:w="1"/><text x="30.1105%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.8605%" y="181" width="0.0820%" height="15" fill="rgb(229,51,27)" fg:x="364" fg:w="1"/><text x="30.1105%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.8605%" y="165" width="0.0820%" height="15" fill="rgb(214,167,49)" fg:x="364" fg:w="1"/><text x="30.1105%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.33%)</title><rect x="29.9426%" y="277" width="0.3281%" height="15" fill="rgb(248,140,47)" fg:x="365" fg:w="4"/><text x="30.1926%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.25%)</title><rect x="30.0246%" y="261" width="0.2461%" height="15" fill="rgb(228,6,51)" fg:x="366" fg:w="3"/><text x="30.2746%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.25%)</title><rect x="30.0246%" y="245" width="0.2461%" height="15" fill="rgb(242,44,53)" fg:x="366" fg:w="3"/><text x="30.2746%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (82 samples, 6.73%)</title><rect x="23.6259%" y="325" width="6.7268%" height="15" fill="rgb(249,90,50)" fg:x="288" fg:w="82"/><text x="23.8759%" y="335.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="29.9426%" y="309" width="0.4102%" height="15" fill="rgb(222,84,19)" fg:x="365" fg:w="5"/><text x="30.1926%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="29.9426%" y="293" width="0.4102%" height="15" fill="rgb(214,140,12)" fg:x="365" fg:w="5"/><text x="30.1926%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::Core::is_match_nofail (1 samples, 0.08%)</title><rect x="30.2707%" y="277" width="0.0820%" height="15" fill="rgb(210,20,43)" fg:x="369" fg:w="1"/><text x="30.5207%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.3527%" y="261" width="0.0820%" height="15" fill="rgb(243,1,40)" fg:x="370" fg:w="1"/><text x="30.6027%" y="271.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="30.4348%" y="261" width="0.0820%" height="15" fill="rgb(224,102,26)" fg:x="371" fg:w="1"/><text x="30.6848%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.66%)</title><rect x="30.5168%" y="245" width="0.6563%" height="15" fill="rgb(221,179,1)" fg:x="372" fg:w="8"/><text x="30.7668%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.57%)</title><rect x="30.5989%" y="229" width="0.5742%" height="15" fill="rgb(216,209,47)" fg:x="373" fg:w="7"/><text x="30.8489%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="31.0090%" y="213" width="0.1641%" height="15" fill="rgb(251,135,9)" fg:x="378" fg:w="2"/><text x="31.2590%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="31.2551%" y="229" width="0.1641%" height="15" fill="rgb(242,9,36)" fg:x="381" fg:w="2"/><text x="31.5051%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.33%)</title><rect x="31.1731%" y="245" width="0.3281%" height="15" fill="rgb(249,60,37)" fg:x="380" fg:w="4"/><text x="31.4231%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="31.4192%" y="229" width="0.0820%" height="15" fill="rgb(230,66,45)" fg:x="383" fg:w="1"/><text x="31.6692%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.5833%" y="213" width="0.0820%" height="15" fill="rgb(216,1,47)" fg:x="385" fg:w="1"/><text x="31.8333%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.5833%" y="197" width="0.0820%" height="15" fill="rgb(235,8,23)" fg:x="385" fg:w="1"/><text x="31.8333%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.5833%" y="181" width="0.0820%" height="15" fill="rgb(225,136,11)" fg:x="385" fg:w="1"/><text x="31.8333%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (7 samples, 0.57%)</title><rect x="31.5012%" y="245" width="0.5742%" height="15" fill="rgb(228,63,44)" fg:x="384" fg:w="7"/><text x="31.7512%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.57%)</title><rect x="31.5012%" y="229" width="0.5742%" height="15" fill="rgb(240,43,52)" fg:x="384" fg:w="7"/><text x="31.7512%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.41%)</title><rect x="31.6653%" y="213" width="0.4102%" height="15" fill="rgb(217,167,36)" fg:x="386" fg:w="5"/><text x="31.9153%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.25%)</title><rect x="31.8294%" y="197" width="0.2461%" height="15" fill="rgb(250,19,6)" fg:x="388" fg:w="3"/><text x="32.0794%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="31.9114%" y="181" width="0.1641%" height="15" fill="rgb(236,60,51)" fg:x="389" fg:w="2"/><text x="32.1614%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="31.9114%" y="165" width="0.1641%" height="15" fill="rgb(222,217,20)" fg:x="389" fg:w="2"/><text x="32.1614%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="31.9114%" y="149" width="0.1641%" height="15" fill="rgb(242,65,52)" fg:x="389" fg:w="2"/><text x="32.1614%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.25%)</title><rect x="32.2395%" y="133" width="0.2461%" height="15" fill="rgb(217,5,41)" fg:x="393" fg:w="3"/><text x="32.4895%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.4856%" y="133" width="0.0820%" height="15" fill="rgb(223,208,53)" fg:x="396" fg:w="1"/><text x="32.7356%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="32.5677%" y="133" width="0.0820%" height="15" fill="rgb(221,104,30)" fg:x="397" fg:w="1"/><text x="32.8177%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="32.6497%" y="133" width="0.0820%" height="15" fill="rgb(230,210,42)" fg:x="398" fg:w="1"/><text x="32.8997%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.8138%" y="69" width="0.0820%" height="15" fill="rgb(206,205,27)" fg:x="400" fg:w="1"/><text x="33.0638%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="32.8138%" y="101" width="0.1641%" height="15" fill="rgb(233,114,38)" fg:x="400" fg:w="2"/><text x="33.0638%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="32.8138%" y="85" width="0.1641%" height="15" fill="rgb(216,174,36)" fg:x="400" fg:w="2"/><text x="33.0638%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.8958%" y="69" width="0.0820%" height="15" fill="rgb(211,30,9)" fg:x="401" fg:w="1"/><text x="33.1458%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.1419%" y="85" width="0.0820%" height="15" fill="rgb(216,8,21)" fg:x="404" fg:w="1"/><text x="33.3919%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.66%)</title><rect x="32.7317%" y="133" width="0.6563%" height="15" fill="rgb(237,209,39)" fg:x="399" fg:w="8"/><text x="32.9817%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.66%)</title><rect x="32.7317%" y="117" width="0.6563%" height="15" fill="rgb(235,111,47)" fg:x="399" fg:w="8"/><text x="32.9817%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.41%)</title><rect x="32.9779%" y="101" width="0.4102%" height="15" fill="rgb(216,139,9)" fg:x="402" fg:w="5"/><text x="33.2279%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="33.2240%" y="85" width="0.1641%" height="15" fill="rgb(248,185,4)" fg:x="405" fg:w="2"/><text x="33.4740%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.3060%" y="69" width="0.0820%" height="15" fill="rgb(239,185,25)" fg:x="406" fg:w="1"/><text x="33.5560%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.3060%" y="53" width="0.0820%" height="15" fill="rgb(233,207,8)" fg:x="406" fg:w="1"/><text x="33.5560%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.3060%" y="37" width="0.0820%" height="15" fill="rgb(249,220,24)" fg:x="406" fg:w="1"/><text x="33.5560%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (48 samples, 3.94%)</title><rect x="33.3880%" y="133" width="3.9377%" height="15" fill="rgb(221,50,14)" fg:x="407" fg:w="48"/><text x="33.6380%" y="143.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (48 samples, 3.94%)</title><rect x="33.3880%" y="117" width="3.9377%" height="15" fill="rgb(227,79,42)" fg:x="407" fg:w="48"/><text x="33.6380%" y="127.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (48 samples, 3.94%)</title><rect x="33.3880%" y="101" width="3.9377%" height="15" fill="rgb(228,218,49)" fg:x="407" fg:w="48"/><text x="33.6380%" y="111.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="37.3257%" y="133" width="0.0820%" height="15" fill="rgb(249,18,15)" fg:x="455" fg:w="1"/><text x="37.5757%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 5.41%)</title><rect x="32.1575%" y="229" width="5.4143%" height="15" fill="rgb(212,84,27)" fg:x="392" fg:w="66"/><text x="32.4075%" y="239.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (66 samples, 5.41%)</title><rect x="32.1575%" y="213" width="5.4143%" height="15" fill="rgb(207,83,24)" fg:x="392" fg:w="66"/><text x="32.4075%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (66 samples, 5.41%)</title><rect x="32.1575%" y="197" width="5.4143%" height="15" fill="rgb(219,61,7)" fg:x="392" fg:w="66"/><text x="32.4075%" y="207.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (66 samples, 5.41%)</title><rect x="32.1575%" y="181" width="5.4143%" height="15" fill="rgb(211,43,29)" fg:x="392" fg:w="66"/><text x="32.4075%" y="191.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (66 samples, 5.41%)</title><rect x="32.1575%" y="165" width="5.4143%" height="15" fill="rgb(243,15,23)" fg:x="392" fg:w="66"/><text x="32.4075%" y="175.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (66 samples, 5.41%)</title><rect x="32.1575%" y="149" width="5.4143%" height="15" fill="rgb(217,52,28)" fg:x="392" fg:w="66"/><text x="32.4075%" y="159.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="37.4077%" y="133" width="0.1641%" height="15" fill="rgb(210,35,6)" fg:x="456" fg:w="2"/><text x="37.6577%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.4897%" y="117" width="0.0820%" height="15" fill="rgb(237,187,28)" fg:x="457" fg:w="1"/><text x="37.7397%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.4897%" y="101" width="0.0820%" height="15" fill="rgb(231,136,24)" fg:x="457" fg:w="1"/><text x="37.7397%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="37.5718%" y="229" width="0.0820%" height="15" fill="rgb(205,176,52)" fg:x="458" fg:w="1"/><text x="37.8218%" y="239.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="37.6538%" y="213" width="0.0820%" height="15" fill="rgb(218,65,12)" fg:x="459" fg:w="1"/><text x="37.9038%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="37.7358%" y="213" width="0.1641%" height="15" fill="rgb(234,101,21)" fg:x="460" fg:w="2"/><text x="37.9858%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.8999%" y="213" width="0.0820%" height="15" fill="rgb(206,13,20)" fg:x="462" fg:w="1"/><text x="38.1499%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.8999%" y="197" width="0.0820%" height="15" fill="rgb(236,89,44)" fg:x="462" fg:w="1"/><text x="38.1499%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="37.8999%" y="181" width="0.0820%" height="15" fill="rgb(225,52,17)" fg:x="462" fg:w="1"/><text x="38.1499%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="37.8999%" y="165" width="0.0820%" height="15" fill="rgb(214,27,25)" fg:x="462" fg:w="1"/><text x="38.1499%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="37.9820%" y="213" width="0.1641%" height="15" fill="rgb(240,141,35)" fg:x="463" fg:w="2"/><text x="38.2320%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.0640%" y="197" width="0.0820%" height="15" fill="rgb(216,126,3)" fg:x="464" fg:w="1"/><text x="38.3140%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.0640%" y="181" width="0.0820%" height="15" fill="rgb(249,196,23)" fg:x="464" fg:w="1"/><text x="38.3140%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.0640%" y="165" width="0.0820%" height="15" fill="rgb(215,185,43)" fg:x="464" fg:w="1"/><text x="38.3140%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="38.1460%" y="213" width="0.1641%" height="15" fill="rgb(208,194,36)" fg:x="465" fg:w="2"/><text x="38.3960%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (96 samples, 7.88%)</title><rect x="30.5168%" y="261" width="7.8753%" height="15" fill="rgb(245,182,12)" fg:x="372" fg:w="96"/><text x="30.7668%" y="271.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (77 samples, 6.32%)</title><rect x="32.0755%" y="245" width="6.3167%" height="15" fill="rgb(244,222,52)" fg:x="391" fg:w="77"/><text x="32.3255%" y="255.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.74%)</title><rect x="37.6538%" y="229" width="0.7383%" height="15" fill="rgb(236,222,51)" fg:x="459" fg:w="9"/><text x="37.9038%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="38.3101%" y="213" width="0.0820%" height="15" fill="rgb(254,71,22)" fg:x="467" fg:w="1"/><text x="38.5601%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="38.3921%" y="229" width="0.0820%" height="15" fill="rgb(250,104,15)" fg:x="468" fg:w="1"/><text x="38.6421%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="38.3921%" y="213" width="0.0820%" height="15" fill="rgb(229,223,46)" fg:x="468" fg:w="1"/><text x="38.6421%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="38.4742%" y="229" width="0.0820%" height="15" fill="rgb(209,129,18)" fg:x="469" fg:w="1"/><text x="38.7242%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.4742%" y="213" width="0.0820%" height="15" fill="rgb(224,160,1)" fg:x="469" fg:w="1"/><text x="38.7242%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="38.5562%" y="229" width="0.0820%" height="15" fill="rgb(237,112,21)" fg:x="470" fg:w="1"/><text x="38.8062%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="38.5562%" y="213" width="0.0820%" height="15" fill="rgb(215,198,53)" fg:x="470" fg:w="1"/><text x="38.8062%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.49%)</title><rect x="38.3921%" y="261" width="0.4922%" height="15" fill="rgb(218,227,35)" fg:x="468" fg:w="6"/><text x="38.6421%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.49%)</title><rect x="38.3921%" y="245" width="0.4922%" height="15" fill="rgb(232,121,22)" fg:x="468" fg:w="6"/><text x="38.6421%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.25%)</title><rect x="38.6382%" y="229" width="0.2461%" height="15" fill="rgb(235,52,54)" fg:x="471" fg:w="3"/><text x="38.8882%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="38.8023%" y="213" width="0.0820%" height="15" fill="rgb(219,21,44)" fg:x="473" fg:w="1"/><text x="39.0523%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="38.8843%" y="213" width="0.0820%" height="15" fill="rgb(221,51,43)" fg:x="474" fg:w="1"/><text x="39.1343%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="38.8843%" y="197" width="0.0820%" height="15" fill="rgb(225,77,42)" fg:x="474" fg:w="1"/><text x="39.1343%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="38.9664%" y="213" width="0.0820%" height="15" fill="rgb(214,117,53)" fg:x="475" fg:w="1"/><text x="39.2164%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="38.9664%" y="197" width="0.0820%" height="15" fill="rgb(218,227,27)" fg:x="475" fg:w="1"/><text x="39.2164%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.25%)</title><rect x="38.8843%" y="229" width="0.2461%" height="15" fill="rgb(223,214,36)" fg:x="474" fg:w="3"/><text x="39.1343%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="39.0484%" y="213" width="0.0820%" height="15" fill="rgb(235,21,7)" fg:x="476" fg:w="1"/><text x="39.2984%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="39.0484%" y="197" width="0.0820%" height="15" fill="rgb(244,216,4)" fg:x="476" fg:w="1"/><text x="39.2984%" y="207.50"></text></g><g><title>regex_syntax::hir::Properties::capture (2 samples, 0.16%)</title><rect x="39.1304%" y="213" width="0.1641%" height="15" fill="rgb(249,197,24)" fg:x="477" fg:w="2"/><text x="39.3804%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="39.2125%" y="197" width="0.0820%" height="15" fill="rgb(222,169,49)" fg:x="478" fg:w="1"/><text x="39.4625%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (110 samples, 9.02%)</title><rect x="30.3527%" y="277" width="9.0238%" height="15" fill="rgb(207,137,33)" fg:x="370" fg:w="110"/><text x="30.6027%" y="287.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.49%)</title><rect x="38.8843%" y="261" width="0.4922%" height="15" fill="rgb(219,180,40)" fg:x="474" fg:w="6"/><text x="39.1343%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.49%)</title><rect x="38.8843%" y="245" width="0.4922%" height="15" fill="rgb(250,163,42)" fg:x="474" fg:w="6"/><text x="39.1343%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.25%)</title><rect x="39.1304%" y="229" width="0.2461%" height="15" fill="rgb(239,163,0)" fg:x="477" fg:w="3"/><text x="39.3804%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::pop (1 samples, 0.08%)</title><rect x="39.2945%" y="213" width="0.0820%" height="15" fill="rgb(252,38,28)" fg:x="479" fg:w="1"/><text x="39.5445%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (111 samples, 9.11%)</title><rect x="30.3527%" y="309" width="9.1058%" height="15" fill="rgb(254,203,26)" fg:x="370" fg:w="111"/><text x="30.6027%" y="319.50">&lt;regex::regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (111 samples, 9.11%)</title><rect x="30.3527%" y="293" width="9.1058%" height="15" fill="rgb(209,129,32)" fg:x="370" fg:w="111"/><text x="30.6027%" y="303.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="39.3765%" y="277" width="0.0820%" height="15" fill="rgb(207,177,52)" fg:x="480" fg:w="1"/><text x="39.6265%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="39.4586%" y="309" width="0.1641%" height="15" fill="rgb(230,209,36)" fg:x="481" fg:w="2"/><text x="39.7086%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="39.4586%" y="293" width="0.1641%" height="15" fill="rgb(238,131,0)" fg:x="481" fg:w="2"/><text x="39.7086%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="39.5406%" y="277" width="0.0820%" height="15" fill="rgb(218,61,31)" fg:x="482" fg:w="1"/><text x="39.7906%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="39.5406%" y="261" width="0.0820%" height="15" fill="rgb(232,6,53)" fg:x="482" fg:w="1"/><text x="39.7906%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="39.5406%" y="245" width="0.0820%" height="15" fill="rgb(254,100,32)" fg:x="482" fg:w="1"/><text x="39.7906%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.5406%" y="229" width="0.0820%" height="15" fill="rgb(229,194,49)" fg:x="482" fg:w="1"/><text x="39.7906%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="39.8687%" y="213" width="0.1641%" height="15" fill="rgb(206,208,39)" fg:x="486" fg:w="2"/><text x="40.1187%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="39.8687%" y="197" width="0.1641%" height="15" fill="rgb(246,226,14)" fg:x="486" fg:w="2"/><text x="40.1187%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="39.8687%" y="181" width="0.1641%" height="15" fill="rgb(226,48,32)" fg:x="486" fg:w="2"/><text x="40.1187%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.0328%" y="213" width="0.0820%" height="15" fill="rgb(252,43,54)" fg:x="488" fg:w="1"/><text x="40.2828%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="40.0328%" y="197" width="0.0820%" height="15" fill="rgb(207,124,0)" fg:x="488" fg:w="1"/><text x="40.2828%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (121 samples, 9.93%)</title><rect x="30.3527%" y="325" width="9.9262%" height="15" fill="rgb(248,188,30)" fg:x="370" fg:w="121"/><text x="30.6027%" y="335.50">indefinite::ru..</text></g><g><title>regex::regex::string::Regex::is_match_at (8 samples, 0.66%)</title><rect x="39.6226%" y="309" width="0.6563%" height="15" fill="rgb(232,14,43)" fg:x="483" fg:w="8"/><text x="39.8726%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.57%)</title><rect x="39.7047%" y="293" width="0.5742%" height="15" fill="rgb(218,52,29)" fg:x="484" fg:w="7"/><text x="39.9547%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.57%)</title><rect x="39.7047%" y="277" width="0.5742%" height="15" fill="rgb(218,176,50)" fg:x="484" fg:w="7"/><text x="39.9547%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.57%)</title><rect x="39.7047%" y="261" width="0.5742%" height="15" fill="rgb(213,112,0)" fg:x="484" fg:w="7"/><text x="39.9547%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.57%)</title><rect x="39.7047%" y="245" width="0.5742%" height="15" fill="rgb(244,216,8)" fg:x="484" fg:w="7"/><text x="39.9547%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.57%)</title><rect x="39.7047%" y="229" width="0.5742%" height="15" fill="rgb(224,148,53)" fg:x="484" fg:w="7"/><text x="39.9547%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="40.1148%" y="213" width="0.1641%" height="15" fill="rgb(241,133,40)" fg:x="489" fg:w="2"/><text x="40.3648%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.2789%" y="245" width="0.0820%" height="15" fill="rgb(232,17,44)" fg:x="491" fg:w="1"/><text x="40.5289%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.2789%" y="229" width="0.0820%" height="15" fill="rgb(213,32,25)" fg:x="491" fg:w="1"/><text x="40.5289%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="40.2789%" y="213" width="0.0820%" height="15" fill="rgb(249,115,27)" fg:x="491" fg:w="1"/><text x="40.5289%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="40.3610%" y="245" width="0.0820%" height="15" fill="rgb(241,50,1)" fg:x="492" fg:w="1"/><text x="40.6110%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.3610%" y="229" width="0.0820%" height="15" fill="rgb(244,175,40)" fg:x="492" fg:w="1"/><text x="40.6110%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="40.3610%" y="213" width="0.0820%" height="15" fill="rgb(230,94,34)" fg:x="492" fg:w="1"/><text x="40.6110%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.3610%" y="197" width="0.0820%" height="15" fill="rgb(223,185,29)" fg:x="492" fg:w="1"/><text x="40.6110%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="40.3610%" y="181" width="0.0820%" height="15" fill="rgb(225,193,15)" fg:x="492" fg:w="1"/><text x="40.6110%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="40.5250%" y="229" width="0.1641%" height="15" fill="rgb(252,121,38)" fg:x="494" fg:w="2"/><text x="40.7750%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.6071%" y="213" width="0.0820%" height="15" fill="rgb(232,44,12)" fg:x="495" fg:w="1"/><text x="40.8571%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.6891%" y="197" width="0.0820%" height="15" fill="rgb(226,45,54)" fg:x="496" fg:w="1"/><text x="40.9391%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (5 samples, 0.41%)</title><rect x="40.4430%" y="245" width="0.4102%" height="15" fill="rgb(209,67,17)" fg:x="493" fg:w="5"/><text x="40.6930%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="40.6891%" y="229" width="0.1641%" height="15" fill="rgb(219,108,52)" fg:x="496" fg:w="2"/><text x="40.9391%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="40.6891%" y="213" width="0.1641%" height="15" fill="rgb(216,118,19)" fg:x="496" fg:w="2"/><text x="40.9391%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="40.7711%" y="197" width="0.0820%" height="15" fill="rgb(228,120,40)" fg:x="497" fg:w="1"/><text x="41.0211%" y="207.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="40.8532%" y="245" width="0.0820%" height="15" fill="rgb(221,218,34)" fg:x="498" fg:w="1"/><text x="41.1032%" y="255.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (9 samples, 0.74%)</title><rect x="40.2789%" y="293" width="0.7383%" height="15" fill="rgb(235,89,14)" fg:x="491" fg:w="9"/><text x="40.5289%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (9 samples, 0.74%)</title><rect x="40.2789%" y="277" width="0.7383%" height="15" fill="rgb(248,89,7)" fg:x="491" fg:w="9"/><text x="40.5289%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (9 samples, 0.74%)</title><rect x="40.2789%" y="261" width="0.7383%" height="15" fill="rgb(212,114,34)" fg:x="491" fg:w="9"/><text x="40.5289%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="40.9352%" y="245" width="0.0820%" height="15" fill="rgb(246,88,32)" fg:x="499" fg:w="1"/><text x="41.1852%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="40.9352%" y="229" width="0.0820%" height="15" fill="rgb(237,135,0)" fg:x="499" fg:w="1"/><text x="41.1852%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="40.9352%" y="213" width="0.0820%" height="15" fill="rgb(220,201,54)" fg:x="499" fg:w="1"/><text x="41.1852%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="41.0172%" y="261" width="0.0820%" height="15" fill="rgb(210,142,36)" fg:x="500" fg:w="1"/><text x="41.2672%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="41.0172%" y="245" width="0.0820%" height="15" fill="rgb(247,189,26)" fg:x="500" fg:w="1"/><text x="41.2672%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.0172%" y="229" width="0.0820%" height="15" fill="rgb(223,89,24)" fg:x="500" fg:w="1"/><text x="41.2672%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="41.0172%" y="293" width="0.1641%" height="15" fill="rgb(205,90,19)" fg:x="500" fg:w="2"/><text x="41.2672%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="41.0172%" y="277" width="0.1641%" height="15" fill="rgb(234,57,40)" fg:x="500" fg:w="2"/><text x="41.2672%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="41.0993%" y="261" width="0.0820%" height="15" fill="rgb(213,109,10)" fg:x="501" fg:w="1"/><text x="41.3493%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="41.0993%" y="245" width="0.0820%" height="15" fill="rgb(214,189,23)" fg:x="501" fg:w="1"/><text x="41.3493%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.0993%" y="229" width="0.0820%" height="15" fill="rgb(234,200,10)" fg:x="501" fg:w="1"/><text x="41.3493%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.1813%" y="229" width="0.0820%" height="15" fill="rgb(221,148,16)" fg:x="502" fg:w="1"/><text x="41.4313%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.4274%" y="213" width="0.0820%" height="15" fill="rgb(230,115,10)" fg:x="505" fg:w="1"/><text x="41.6774%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.4274%" y="197" width="0.0820%" height="15" fill="rgb(220,106,42)" fg:x="505" fg:w="1"/><text x="41.6774%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.4274%" y="181" width="0.0820%" height="15" fill="rgb(225,105,39)" fg:x="505" fg:w="1"/><text x="41.6774%" y="191.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (16 samples, 1.31%)</title><rect x="40.2789%" y="309" width="1.3126%" height="15" fill="rgb(211,161,38)" fg:x="491" fg:w="16"/><text x="40.5289%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="41.1813%" y="293" width="0.4102%" height="15" fill="rgb(213,23,19)" fg:x="502" fg:w="5"/><text x="41.4313%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="41.1813%" y="277" width="0.4102%" height="15" fill="rgb(240,2,33)" fg:x="502" fg:w="5"/><text x="41.4313%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="41.1813%" y="261" width="0.4102%" height="15" fill="rgb(221,29,45)" fg:x="502" fg:w="5"/><text x="41.4313%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="41.1813%" y="245" width="0.4102%" height="15" fill="rgb(242,10,19)" fg:x="502" fg:w="5"/><text x="41.4313%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.33%)</title><rect x="41.2633%" y="229" width="0.3281%" height="15" fill="rgb(250,84,37)" fg:x="503" fg:w="4"/><text x="41.5133%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.5094%" y="213" width="0.0820%" height="15" fill="rgb(214,136,7)" fg:x="506" fg:w="1"/><text x="41.7594%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="41.5094%" y="197" width="0.0820%" height="15" fill="rgb(231,189,12)" fg:x="506" fg:w="1"/><text x="41.7594%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="41.5094%" y="181" width="0.0820%" height="15" fill="rgb(244,40,16)" fg:x="506" fg:w="1"/><text x="41.7594%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (230 samples, 18.87%)</title><rect x="22.8056%" y="405" width="18.8679%" height="15" fill="rgb(217,29,15)" fg:x="278" fg:w="230"/><text x="23.0556%" y="415.50">&lt;&amp;kernel::model::EntityPtr as..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (220 samples, 18.05%)</title><rect x="23.6259%" y="389" width="18.0476%" height="15" fill="rgb(235,172,33)" fg:x="288" fg:w="220"/><text x="23.8759%" y="399.50">plugins_core::looking::model..</text></g><g><title>indefinite::indefinite (220 samples, 18.05%)</title><rect x="23.6259%" y="373" width="18.0476%" height="15" fill="rgb(206,148,28)" fg:x="288" fg:w="220"/><text x="23.8759%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (220 samples, 18.05%)</title><rect x="23.6259%" y="357" width="18.0476%" height="15" fill="rgb(251,167,37)" fg:x="288" fg:w="220"/><text x="23.8759%" y="367.50">indefinite::methods::indefin..</text></g><g><title>indefinite::methods::apply_rules (220 samples, 18.05%)</title><rect x="23.6259%" y="341" width="18.0476%" height="15" fill="rgb(229,94,52)" fg:x="288" fg:w="220"/><text x="23.8759%" y="351.50">indefinite::methods::apply_r..</text></g><g><title>indefinite::rules::other::Other::run (17 samples, 1.39%)</title><rect x="40.2789%" y="325" width="1.3946%" height="15" fill="rgb(216,132,9)" fg:x="491" fg:w="17"/><text x="40.5289%" y="335.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="41.5915%" y="309" width="0.0820%" height="15" fill="rgb(208,110,29)" fg:x="507" fg:w="1"/><text x="41.8415%" y="319.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="41.6735%" y="357" width="0.0820%" height="15" fill="rgb(241,23,8)" fg:x="508" fg:w="1"/><text x="41.9235%" y="367.50"></text></g><g><title>plugins_core::tools::contained_by (1 samples, 0.08%)</title><rect x="41.7555%" y="357" width="0.0820%" height="15" fill="rgb(208,26,35)" fg:x="509" fg:w="1"/><text x="42.0055%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="41.7555%" y="341" width="0.0820%" height="15" fill="rgb(242,165,34)" fg:x="509" fg:w="1"/><text x="42.0055%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.7555%" y="325" width="0.0820%" height="15" fill="rgb(222,222,33)" fg:x="509" fg:w="1"/><text x="42.0055%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.7555%" y="309" width="0.0820%" height="15" fill="rgb(227,16,52)" fg:x="509" fg:w="1"/><text x="42.0055%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="41.7555%" y="293" width="0.0820%" height="15" fill="rgb(213,93,12)" fg:x="509" fg:w="1"/><text x="42.0055%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="41.7555%" y="277" width="0.0820%" height="15" fill="rgb(238,41,5)" fg:x="509" fg:w="1"/><text x="42.0055%" y="287.50"></text></g><g><title>serde_json::value::de::SeqDeserializer::new (1 samples, 0.08%)</title><rect x="41.7555%" y="261" width="0.0820%" height="15" fill="rgb(211,60,15)" fg:x="509" fg:w="1"/><text x="42.0055%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.8376%" y="325" width="0.0820%" height="15" fill="rgb(209,11,34)" fg:x="510" fg:w="1"/><text x="42.0876%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.8376%" y="309" width="0.0820%" height="15" fill="rgb(254,155,53)" fg:x="510" fg:w="1"/><text x="42.0876%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.8376%" y="293" width="0.0820%" height="15" fill="rgb(236,174,8)" fg:x="510" fg:w="1"/><text x="42.0876%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.8376%" y="277" width="0.0820%" height="15" fill="rgb(229,31,27)" fg:x="510" fg:w="1"/><text x="42.0876%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.8376%" y="261" width="0.0820%" height="15" fill="rgb(242,226,26)" fg:x="510" fg:w="1"/><text x="42.0876%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.8376%" y="245" width="0.0820%" height="15" fill="rgb(234,32,40)" fg:x="510" fg:w="1"/><text x="42.0876%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.8376%" y="229" width="0.0820%" height="15" fill="rgb(249,226,47)" fg:x="510" fg:w="1"/><text x="42.0876%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="41.8376%" y="213" width="0.0820%" height="15" fill="rgb(212,6,26)" fg:x="510" fg:w="1"/><text x="42.0876%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="41.8376%" y="197" width="0.0820%" height="15" fill="rgb(249,202,29)" fg:x="510" fg:w="1"/><text x="42.0876%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="41.8376%" y="181" width="0.0820%" height="15" fill="rgb(226,106,4)" fg:x="510" fg:w="1"/><text x="42.0876%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="41.8376%" y="165" width="0.0820%" height="15" fill="rgb(251,2,27)" fg:x="510" fg:w="1"/><text x="42.0876%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="41.8376%" y="149" width="0.0820%" height="15" fill="rgb(236,208,0)" fg:x="510" fg:w="1"/><text x="42.0876%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="41.8376%" y="133" width="0.0820%" height="15" fill="rgb(211,66,17)" fg:x="510" fg:w="1"/><text x="42.0876%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="41.8376%" y="117" width="0.0820%" height="15" fill="rgb(216,129,9)" fg:x="510" fg:w="1"/><text x="42.0876%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="41.8376%" y="101" width="0.0820%" height="15" fill="rgb(215,130,23)" fg:x="510" fg:w="1"/><text x="42.0876%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="41.8376%" y="85" width="0.0820%" height="15" fill="rgb(253,157,11)" fg:x="510" fg:w="1"/><text x="42.0876%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.8376%" y="69" width="0.0820%" height="15" fill="rgb(224,25,14)" fg:x="510" fg:w="1"/><text x="42.0876%" y="79.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="41.8376%" y="341" width="0.1641%" height="15" fill="rgb(238,16,7)" fg:x="510" fg:w="2"/><text x="42.0876%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.9196%" y="325" width="0.0820%" height="15" fill="rgb(228,74,11)" fg:x="511" fg:w="1"/><text x="42.1696%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.9196%" y="309" width="0.0820%" height="15" fill="rgb(239,221,27)" fg:x="511" fg:w="1"/><text x="42.1696%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="41.9196%" y="293" width="0.0820%" height="15" fill="rgb(229,166,18)" fg:x="511" fg:w="1"/><text x="42.1696%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="41.9196%" y="277" width="0.0820%" height="15" fill="rgb(254,94,46)" fg:x="511" fg:w="1"/><text x="42.1696%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="41.9196%" y="261" width="0.0820%" height="15" fill="rgb(241,79,19)" fg:x="511" fg:w="1"/><text x="42.1696%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.9196%" y="245" width="0.0820%" height="15" fill="rgb(228,99,51)" fg:x="511" fg:w="1"/><text x="42.1696%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.9196%" y="229" width="0.0820%" height="15" fill="rgb(211,15,6)" fg:x="511" fg:w="1"/><text x="42.1696%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="41.9196%" y="213" width="0.0820%" height="15" fill="rgb(245,107,54)" fg:x="511" fg:w="1"/><text x="42.1696%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.9196%" y="197" width="0.0820%" height="15" fill="rgb(243,3,2)" fg:x="511" fg:w="1"/><text x="42.1696%" y="207.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (5 samples, 0.41%)</title><rect x="41.6735%" y="373" width="0.4102%" height="15" fill="rgb(206,122,10)" fg:x="508" fg:w="5"/><text x="41.9235%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.25%)</title><rect x="41.8376%" y="357" width="0.2461%" height="15" fill="rgb(224,88,4)" fg:x="510" fg:w="3"/><text x="42.0876%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="42.0016%" y="341" width="0.0820%" height="15" fill="rgb(230,1,41)" fg:x="512" fg:w="1"/><text x="42.2516%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="42.0016%" y="325" width="0.0820%" height="15" fill="rgb(230,1,31)" fg:x="512" fg:w="1"/><text x="42.2516%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.0837%" y="293" width="0.0820%" height="15" fill="rgb(232,67,19)" fg:x="513" fg:w="1"/><text x="42.3337%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.0837%" y="277" width="0.0820%" height="15" fill="rgb(222,206,20)" fg:x="513" fg:w="1"/><text x="42.3337%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.0837%" y="261" width="0.0820%" height="15" fill="rgb(217,225,19)" fg:x="513" fg:w="1"/><text x="42.3337%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="42.0837%" y="245" width="0.0820%" height="15" fill="rgb(234,13,33)" fg:x="513" fg:w="1"/><text x="42.3337%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="42.0837%" y="229" width="0.0820%" height="15" fill="rgb(254,5,1)" fg:x="513" fg:w="1"/><text x="42.3337%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="42.0837%" y="213" width="0.0820%" height="15" fill="rgb(211,121,41)" fg:x="513" fg:w="1"/><text x="42.3337%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="42.0837%" y="197" width="0.0820%" height="15" fill="rgb(213,199,35)" fg:x="513" fg:w="1"/><text x="42.3337%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="42.0837%" y="181" width="0.0820%" height="15" fill="rgb(240,118,22)" fg:x="513" fg:w="1"/><text x="42.3337%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="42.0837%" y="165" width="0.0820%" height="15" fill="rgb(238,184,25)" fg:x="513" fg:w="1"/><text x="42.3337%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="42.0837%" y="149" width="0.0820%" height="15" fill="rgb(210,165,6)" fg:x="513" fg:w="1"/><text x="42.3337%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="42.0837%" y="133" width="0.0820%" height="15" fill="rgb(235,149,5)" fg:x="513" fg:w="1"/><text x="42.3337%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="42.0837%" y="117" width="0.0820%" height="15" fill="rgb(221,63,5)" fg:x="513" fg:w="1"/><text x="42.3337%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="42.0837%" y="101" width="0.0820%" height="15" fill="rgb(250,44,41)" fg:x="513" fg:w="1"/><text x="42.3337%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="42.0837%" y="85" width="0.0820%" height="15" fill="rgb(235,112,47)" fg:x="513" fg:w="1"/><text x="42.3337%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.0837%" y="69" width="0.0820%" height="15" fill="rgb(252,176,34)" fg:x="513" fg:w="1"/><text x="42.3337%" y="79.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (7 samples, 0.57%)</title><rect x="41.6735%" y="405" width="0.5742%" height="15" fill="rgb(234,50,19)" fg:x="508" fg:w="7"/><text x="41.9235%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (7 samples, 0.57%)</title><rect x="41.6735%" y="389" width="0.5742%" height="15" fill="rgb(241,195,31)" fg:x="508" fg:w="7"/><text x="41.9235%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="42.0837%" y="373" width="0.1641%" height="15" fill="rgb(212,93,11)" fg:x="513" fg:w="2"/><text x="42.3337%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="42.0837%" y="357" width="0.1641%" height="15" fill="rgb(254,98,51)" fg:x="513" fg:w="2"/><text x="42.3337%" y="367.50"></text></g><g><title>plugins_core::finding::matches_description (2 samples, 0.16%)</title><rect x="42.0837%" y="341" width="0.1641%" height="15" fill="rgb(246,18,45)" fg:x="513" fg:w="2"/><text x="42.3337%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::name (2 samples, 0.16%)</title><rect x="42.0837%" y="325" width="0.1641%" height="15" fill="rgb(215,148,23)" fg:x="513" fg:w="2"/><text x="42.3337%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="42.0837%" y="309" width="0.1641%" height="15" fill="rgb(227,22,7)" fg:x="513" fg:w="2"/><text x="42.3337%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.1657%" y="293" width="0.0820%" height="15" fill="rgb(207,210,37)" fg:x="514" fg:w="1"/><text x="42.4157%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="42.2477%" y="373" width="0.0820%" height="15" fill="rgb(247,147,42)" fg:x="515" fg:w="1"/><text x="42.4977%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (1 samples, 0.08%)</title><rect x="42.2477%" y="357" width="0.0820%" height="15" fill="rgb(226,213,14)" fg:x="515" fg:w="1"/><text x="42.4977%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="42.2477%" y="341" width="0.0820%" height="15" fill="rgb(223,18,10)" fg:x="515" fg:w="1"/><text x="42.4977%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="42.2477%" y="325" width="0.0820%" height="15" fill="rgb(253,34,22)" fg:x="515" fg:w="1"/><text x="42.4977%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="42.2477%" y="309" width="0.0820%" height="15" fill="rgb(222,90,31)" fg:x="515" fg:w="1"/><text x="42.4977%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="42.2477%" y="293" width="0.0820%" height="15" fill="rgb(220,182,30)" fg:x="515" fg:w="1"/><text x="42.4977%" y="303.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="42.2477%" y="277" width="0.0820%" height="15" fill="rgb(229,170,12)" fg:x="515" fg:w="1"/><text x="42.4977%" y="287.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="42.2477%" y="261" width="0.0820%" height="15" fill="rgb(210,101,21)" fg:x="515" fg:w="1"/><text x="42.4977%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="42.2477%" y="245" width="0.0820%" height="15" fill="rgb(237,177,31)" fg:x="515" fg:w="1"/><text x="42.4977%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="42.2477%" y="229" width="0.0820%" height="15" fill="rgb(215,91,34)" fg:x="515" fg:w="1"/><text x="42.4977%" y="239.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="42.2477%" y="213" width="0.0820%" height="15" fill="rgb(229,206,16)" fg:x="515" fg:w="1"/><text x="42.4977%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="42.2477%" y="197" width="0.0820%" height="15" fill="rgb(235,207,10)" fg:x="515" fg:w="1"/><text x="42.4977%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.08%)</title><rect x="42.2477%" y="181" width="0.0820%" height="15" fill="rgb(247,18,10)" fg:x="515" fg:w="1"/><text x="42.4977%" y="191.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (2 samples, 0.16%)</title><rect x="42.2477%" y="389" width="0.1641%" height="15" fill="rgb(232,4,6)" fg:x="515" fg:w="2"/><text x="42.4977%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.3298%" y="373" width="0.0820%" height="15" fill="rgb(247,93,45)" fg:x="516" fg:w="1"/><text x="42.5798%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.4118%" y="309" width="0.0820%" height="15" fill="rgb(240,181,18)" fg:x="517" fg:w="1"/><text x="42.6618%" y="319.50"></text></g><g><title>plugins_core::library::actions::reply_ok (4 samples, 0.33%)</title><rect x="42.2477%" y="405" width="0.3281%" height="15" fill="rgb(208,224,0)" fg:x="515" fg:w="4"/><text x="42.4977%" y="415.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="42.4118%" y="389" width="0.1641%" height="15" fill="rgb(224,207,54)" fg:x="517" fg:w="2"/><text x="42.6618%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (2 samples, 0.16%)</title><rect x="42.4118%" y="373" width="0.1641%" height="15" fill="rgb(217,152,29)" fg:x="517" fg:w="2"/><text x="42.6618%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="42.4118%" y="357" width="0.1641%" height="15" fill="rgb(243,78,27)" fg:x="517" fg:w="2"/><text x="42.6618%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="42.4118%" y="341" width="0.1641%" height="15" fill="rgb(228,111,9)" fg:x="517" fg:w="2"/><text x="42.6618%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="42.4118%" y="325" width="0.1641%" height="15" fill="rgb(230,213,21)" fg:x="517" fg:w="2"/><text x="42.6618%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.4938%" y="309" width="0.0820%" height="15" fill="rgb(248,50,36)" fg:x="518" fg:w="1"/><text x="42.7438%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.4938%" y="293" width="0.0820%" height="15" fill="rgb(226,19,31)" fg:x="518" fg:w="1"/><text x="42.7438%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="42.4938%" y="277" width="0.0820%" height="15" fill="rgb(205,132,21)" fg:x="518" fg:w="1"/><text x="42.7438%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.5759%" y="373" width="0.0820%" height="15" fill="rgb(207,42,19)" fg:x="519" fg:w="1"/><text x="42.8259%" y="383.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.25%)</title><rect x="42.5759%" y="389" width="0.2461%" height="15" fill="rgb(229,69,35)" fg:x="519" fg:w="3"/><text x="42.8259%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="42.6579%" y="373" width="0.1641%" height="15" fill="rgb(226,96,11)" fg:x="520" fg:w="2"/><text x="42.9079%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="42.6579%" y="357" width="0.1641%" height="15" fill="rgb(236,133,54)" fg:x="520" fg:w="2"/><text x="42.9079%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="42.7400%" y="341" width="0.0820%" height="15" fill="rgb(247,166,21)" fg:x="521" fg:w="1"/><text x="42.9900%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScopeRefMut&lt;plugins_core::carrying::model::Containing,kernel::model::entity::Entity&gt;&gt; (1 samples, 0.08%)</title><rect x="42.8220%" y="389" width="0.0820%" height="15" fill="rgb(220,132,12)" fg:x="522" fg:w="1"/><text x="43.0720%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.8220%" y="373" width="0.0820%" height="15" fill="rgb(233,27,30)" fg:x="522" fg:w="1"/><text x="43.0720%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="42.9040%" y="325" width="0.0820%" height="15" fill="rgb(246,161,27)" fg:x="523" fg:w="1"/><text x="43.1540%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="42.9040%" y="357" width="0.1641%" height="15" fill="rgb(240,56,3)" fg:x="523" fg:w="2"/><text x="43.1540%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="42.9040%" y="341" width="0.1641%" height="15" fill="rgb(242,190,9)" fg:x="523" fg:w="2"/><text x="43.1540%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.9861%" y="325" width="0.0820%" height="15" fill="rgb(234,3,52)" fg:x="524" fg:w="1"/><text x="43.2361%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.9861%" y="309" width="0.0820%" height="15" fill="rgb(220,221,19)" fg:x="524" fg:w="1"/><text x="43.2361%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="42.9861%" y="293" width="0.0820%" height="15" fill="rgb(247,178,30)" fg:x="524" fg:w="1"/><text x="43.2361%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.9861%" y="277" width="0.0820%" height="15" fill="rgb(234,212,27)" fg:x="524" fg:w="1"/><text x="43.2361%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="43.0681%" y="325" width="0.0820%" height="15" fill="rgb(226,199,38)" fg:x="525" fg:w="1"/><text x="43.3181%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="43.0681%" y="309" width="0.0820%" height="15" fill="rgb(248,114,22)" fg:x="525" fg:w="1"/><text x="43.3181%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.33%)</title><rect x="42.9040%" y="389" width="0.3281%" height="15" fill="rgb(221,180,4)" fg:x="523" fg:w="4"/><text x="43.1540%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.33%)</title><rect x="42.9040%" y="373" width="0.3281%" height="15" fill="rgb(220,229,24)" fg:x="523" fg:w="4"/><text x="43.1540%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="43.0681%" y="357" width="0.1641%" height="15" fill="rgb(226,184,27)" fg:x="525" fg:w="2"/><text x="43.3181%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="43.0681%" y="341" width="0.1641%" height="15" fill="rgb(232,99,15)" fg:x="525" fg:w="2"/><text x="43.3181%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.1501%" y="325" width="0.0820%" height="15" fill="rgb(250,167,16)" fg:x="526" fg:w="1"/><text x="43.4001%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.1501%" y="309" width="0.0820%" height="15" fill="rgb(243,113,6)" fg:x="526" fg:w="1"/><text x="43.4001%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="43.1501%" y="293" width="0.0820%" height="15" fill="rgb(244,147,52)" fg:x="526" fg:w="1"/><text x="43.4001%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.1501%" y="277" width="0.0820%" height="15" fill="rgb(235,59,50)" fg:x="526" fg:w="1"/><text x="43.4001%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="43.3142%" y="341" width="0.0820%" height="15" fill="rgb(250,188,6)" fg:x="528" fg:w="1"/><text x="43.5642%" y="351.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.25%)</title><rect x="43.2322%" y="389" width="0.2461%" height="15" fill="rgb(236,173,11)" fg:x="527" fg:w="3"/><text x="43.4822%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="43.3142%" y="373" width="0.1641%" height="15" fill="rgb(233,64,3)" fg:x="528" fg:w="2"/><text x="43.5642%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="43.3142%" y="357" width="0.1641%" height="15" fill="rgb(207,92,7)" fg:x="528" fg:w="2"/><text x="43.5642%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="43.3962%" y="341" width="0.0820%" height="15" fill="rgb(221,30,19)" fg:x="529" fg:w="1"/><text x="43.6462%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="43.3962%" y="325" width="0.0820%" height="15" fill="rgb(245,22,49)" fg:x="529" fg:w="1"/><text x="43.6462%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="43.3962%" y="309" width="0.0820%" height="15" fill="rgb(218,39,20)" fg:x="529" fg:w="1"/><text x="43.6462%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="43.4783%" y="245" width="0.0820%" height="15" fill="rgb(222,144,21)" fg:x="530" fg:w="1"/><text x="43.7283%" y="255.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="43.4783%" y="341" width="0.1641%" height="15" fill="rgb(222,78,51)" fg:x="530" fg:w="2"/><text x="43.7283%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="43.4783%" y="325" width="0.1641%" height="15" fill="rgb(248,213,53)" fg:x="530" fg:w="2"/><text x="43.7283%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="43.4783%" y="309" width="0.1641%" height="15" fill="rgb(245,28,34)" fg:x="530" fg:w="2"/><text x="43.7283%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="43.4783%" y="293" width="0.1641%" height="15" fill="rgb(229,186,26)" fg:x="530" fg:w="2"/><text x="43.7283%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="43.4783%" y="277" width="0.1641%" height="15" fill="rgb(224,0,41)" fg:x="530" fg:w="2"/><text x="43.7283%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="43.4783%" y="261" width="0.1641%" height="15" fill="rgb(223,136,51)" fg:x="530" fg:w="2"/><text x="43.7283%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.5603%" y="245" width="0.0820%" height="15" fill="rgb(234,50,9)" fg:x="531" fg:w="1"/><text x="43.8103%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.5603%" y="229" width="0.0820%" height="15" fill="rgb(242,164,20)" fg:x="531" fg:w="1"/><text x="43.8103%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.6423%" y="309" width="0.0820%" height="15" fill="rgb(230,169,22)" fg:x="532" fg:w="1"/><text x="43.8923%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.6423%" y="293" width="0.0820%" height="15" fill="rgb(228,82,26)" fg:x="532" fg:w="1"/><text x="43.8923%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.6423%" y="277" width="0.0820%" height="15" fill="rgb(244,220,31)" fg:x="532" fg:w="1"/><text x="43.8923%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.6423%" y="261" width="0.0820%" height="15" fill="rgb(214,35,25)" fg:x="532" fg:w="1"/><text x="43.8923%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.6423%" y="245" width="0.0820%" height="15" fill="rgb(245,162,54)" fg:x="532" fg:w="1"/><text x="43.8923%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="43.6423%" y="229" width="0.0820%" height="15" fill="rgb(210,43,24)" fg:x="532" fg:w="1"/><text x="43.8923%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="43.6423%" y="213" width="0.0820%" height="15" fill="rgb(226,145,51)" fg:x="532" fg:w="1"/><text x="43.8923%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="43.6423%" y="197" width="0.0820%" height="15" fill="rgb(237,52,53)" fg:x="532" fg:w="1"/><text x="43.8923%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.6423%" y="181" width="0.0820%" height="15" fill="rgb(216,226,7)" fg:x="532" fg:w="1"/><text x="43.8923%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.6423%" y="165" width="0.0820%" height="15" fill="rgb(206,223,18)" fg:x="532" fg:w="1"/><text x="43.8923%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="43.6423%" y="149" width="0.0820%" height="15" fill="rgb(221,1,10)" fg:x="532" fg:w="1"/><text x="43.8923%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="43.6423%" y="133" width="0.0820%" height="15" fill="rgb(221,151,42)" fg:x="532" fg:w="1"/><text x="43.8923%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="43.6423%" y="117" width="0.0820%" height="15" fill="rgb(205,183,46)" fg:x="532" fg:w="1"/><text x="43.8923%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="43.6423%" y="101" width="0.0820%" height="15" fill="rgb(239,229,1)" fg:x="532" fg:w="1"/><text x="43.8923%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.6423%" y="85" width="0.0820%" height="15" fill="rgb(236,192,23)" fg:x="532" fg:w="1"/><text x="43.8923%" y="95.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="43.6423%" y="341" width="0.1641%" height="15" fill="rgb(215,146,3)" fg:x="532" fg:w="2"/><text x="43.8923%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="43.6423%" y="325" width="0.1641%" height="15" fill="rgb(235,52,27)" fg:x="532" fg:w="2"/><text x="43.8923%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.7244%" y="309" width="0.0820%" height="15" fill="rgb(236,45,20)" fg:x="533" fg:w="1"/><text x="43.9744%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.7244%" y="293" width="0.0820%" height="15" fill="rgb(235,86,41)" fg:x="533" fg:w="1"/><text x="43.9744%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="43.7244%" y="277" width="0.0820%" height="15" fill="rgb(235,27,27)" fg:x="533" fg:w="1"/><text x="43.9744%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.7244%" y="261" width="0.0820%" height="15" fill="rgb(232,4,34)" fg:x="533" fg:w="1"/><text x="43.9744%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="43.7244%" y="245" width="0.0820%" height="15" fill="rgb(215,22,10)" fg:x="533" fg:w="1"/><text x="43.9744%" y="255.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.41%)</title><rect x="43.4783%" y="389" width="0.4102%" height="15" fill="rgb(230,228,27)" fg:x="530" fg:w="5"/><text x="43.7283%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.41%)</title><rect x="43.4783%" y="373" width="0.4102%" height="15" fill="rgb(216,26,51)" fg:x="530" fg:w="5"/><text x="43.7283%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.41%)</title><rect x="43.4783%" y="357" width="0.4102%" height="15" fill="rgb(225,180,50)" fg:x="530" fg:w="5"/><text x="43.7283%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.8064%" y="341" width="0.0820%" height="15" fill="rgb(236,211,2)" fg:x="534" fg:w="1"/><text x="44.0564%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.8064%" y="325" width="0.0820%" height="15" fill="rgb(250,51,20)" fg:x="534" fg:w="1"/><text x="44.0564%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="43.8064%" y="309" width="0.0820%" height="15" fill="rgb(232,70,37)" fg:x="534" fg:w="1"/><text x="44.0564%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="43.8064%" y="293" width="0.0820%" height="15" fill="rgb(226,183,39)" fg:x="534" fg:w="1"/><text x="44.0564%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="43.8064%" y="277" width="0.0820%" height="15" fill="rgb(232,228,21)" fg:x="534" fg:w="1"/><text x="44.0564%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.8064%" y="261" width="0.0820%" height="15" fill="rgb(251,118,32)" fg:x="534" fg:w="1"/><text x="44.0564%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.8064%" y="245" width="0.0820%" height="15" fill="rgb(235,172,38)" fg:x="534" fg:w="1"/><text x="44.0564%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="43.8064%" y="229" width="0.0820%" height="15" fill="rgb(235,63,18)" fg:x="534" fg:w="1"/><text x="44.0564%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="43.8064%" y="213" width="0.0820%" height="15" fill="rgb(225,4,7)" fg:x="534" fg:w="1"/><text x="44.0564%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="43.8064%" y="197" width="0.0820%" height="15" fill="rgb(231,61,1)" fg:x="534" fg:w="1"/><text x="44.0564%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="43.8064%" y="181" width="0.0820%" height="15" fill="rgb(241,155,22)" fg:x="534" fg:w="1"/><text x="44.0564%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.8064%" y="165" width="0.0820%" height="15" fill="rgb(209,100,26)" fg:x="534" fg:w="1"/><text x="44.0564%" y="175.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="43.8884%" y="389" width="0.0820%" height="15" fill="rgb(248,181,15)" fg:x="535" fg:w="1"/><text x="44.1384%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (1 samples, 0.08%)</title><rect x="43.8884%" y="373" width="0.0820%" height="15" fill="rgb(214,94,31)" fg:x="535" fg:w="1"/><text x="44.1384%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="43.8884%" y="357" width="0.0820%" height="15" fill="rgb(207,16,42)" fg:x="535" fg:w="1"/><text x="44.1384%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="43.8884%" y="341" width="0.0820%" height="15" fill="rgb(208,127,13)" fg:x="535" fg:w="1"/><text x="44.1384%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="43.8884%" y="325" width="0.0820%" height="15" fill="rgb(220,211,18)" fg:x="535" fg:w="1"/><text x="44.1384%" y="335.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="43.9705%" y="373" width="0.0820%" height="15" fill="rgb(221,55,38)" fg:x="536" fg:w="1"/><text x="44.2205%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.9705%" y="357" width="0.0820%" height="15" fill="rgb(252,219,45)" fg:x="536" fg:w="1"/><text x="44.2205%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.9705%" y="341" width="0.0820%" height="15" fill="rgb(248,53,35)" fg:x="536" fg:w="1"/><text x="44.2205%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.9705%" y="325" width="0.0820%" height="15" fill="rgb(210,87,2)" fg:x="536" fg:w="1"/><text x="44.2205%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.9705%" y="309" width="0.0820%" height="15" fill="rgb(239,133,9)" fg:x="536" fg:w="1"/><text x="44.2205%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="43.9705%" y="293" width="0.0820%" height="15" fill="rgb(214,114,5)" fg:x="536" fg:w="1"/><text x="44.2205%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="43.9705%" y="277" width="0.0820%" height="15" fill="rgb(206,124,24)" fg:x="536" fg:w="1"/><text x="44.2205%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="43.9705%" y="261" width="0.0820%" height="15" fill="rgb(212,57,33)" fg:x="536" fg:w="1"/><text x="44.2205%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.9705%" y="245" width="0.0820%" height="15" fill="rgb(246,21,20)" fg:x="536" fg:w="1"/><text x="44.2205%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.9705%" y="229" width="0.0820%" height="15" fill="rgb(253,210,39)" fg:x="536" fg:w="1"/><text x="44.2205%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="43.9705%" y="213" width="0.0820%" height="15" fill="rgb(209,187,24)" fg:x="536" fg:w="1"/><text x="44.2205%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="43.9705%" y="197" width="0.0820%" height="15" fill="rgb(246,136,17)" fg:x="536" fg:w="1"/><text x="44.2205%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="43.9705%" y="181" width="0.0820%" height="15" fill="rgb(211,0,30)" fg:x="536" fg:w="1"/><text x="44.2205%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="43.9705%" y="165" width="0.0820%" height="15" fill="rgb(216,199,7)" fg:x="536" fg:w="1"/><text x="44.2205%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.9705%" y="149" width="0.0820%" height="15" fill="rgb(207,210,19)" fg:x="536" fg:w="1"/><text x="44.2205%" y="159.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (260 samples, 21.33%)</title><rect x="22.8056%" y="421" width="21.3290%" height="15" fill="rgb(237,187,39)" fg:x="278" fg:w="260"/><text x="23.0556%" y="431.50">&lt;plugins_core::carrying::actions::..</text></g><g><title>plugins_core::location::model::change_location (19 samples, 1.56%)</title><rect x="42.5759%" y="405" width="1.5587%" height="15" fill="rgb(243,194,42)" fg:x="519" fg:w="19"/><text x="42.8259%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="43.9705%" y="389" width="0.1641%" height="15" fill="rgb(225,194,19)" fg:x="536" fg:w="2"/><text x="44.2205%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="44.0525%" y="373" width="0.0820%" height="15" fill="rgb(224,192,14)" fg:x="537" fg:w="1"/><text x="44.3025%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="44.0525%" y="357" width="0.0820%" height="15" fill="rgb(252,21,18)" fg:x="537" fg:w="1"/><text x="44.3025%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="44.0525%" y="341" width="0.0820%" height="15" fill="rgb(229,69,19)" fg:x="537" fg:w="1"/><text x="44.3025%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="44.0525%" y="325" width="0.0820%" height="15" fill="rgb(251,31,53)" fg:x="537" fg:w="1"/><text x="44.3025%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="44.0525%" y="309" width="0.0820%" height="15" fill="rgb(218,39,50)" fg:x="537" fg:w="1"/><text x="44.3025%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.2166%" y="357" width="0.0820%" height="15" fill="rgb(231,50,17)" fg:x="539" fg:w="1"/><text x="44.4666%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.2166%" y="341" width="0.0820%" height="15" fill="rgb(223,217,31)" fg:x="539" fg:w="1"/><text x="44.4666%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="44.2166%" y="389" width="0.1641%" height="15" fill="rgb(225,91,12)" fg:x="539" fg:w="2"/><text x="44.4666%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="44.2166%" y="373" width="0.1641%" height="15" fill="rgb(242,58,43)" fg:x="539" fg:w="2"/><text x="44.4666%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="44.2986%" y="357" width="0.0820%" height="15" fill="rgb(242,32,21)" fg:x="540" fg:w="1"/><text x="44.5486%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="44.2986%" y="341" width="0.0820%" height="15" fill="rgb(211,127,1)" fg:x="540" fg:w="1"/><text x="44.5486%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="44.2986%" y="325" width="0.0820%" height="15" fill="rgb(231,93,13)" fg:x="540" fg:w="1"/><text x="44.5486%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="44.2986%" y="309" width="0.0820%" height="15" fill="rgb(218,83,4)" fg:x="540" fg:w="1"/><text x="44.5486%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="44.2986%" y="293" width="0.0820%" height="15" fill="rgb(230,218,10)" fg:x="540" fg:w="1"/><text x="44.5486%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="44.2986%" y="277" width="0.0820%" height="15" fill="rgb(235,127,18)" fg:x="540" fg:w="1"/><text x="44.5486%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.3806%" y="357" width="0.0820%" height="15" fill="rgb(213,137,46)" fg:x="541" fg:w="1"/><text x="44.6306%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.3806%" y="341" width="0.0820%" height="15" fill="rgb(235,179,24)" fg:x="541" fg:w="1"/><text x="44.6306%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.25%)</title><rect x="44.3806%" y="389" width="0.2461%" height="15" fill="rgb(247,58,49)" fg:x="541" fg:w="3"/><text x="44.6306%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.25%)</title><rect x="44.3806%" y="373" width="0.2461%" height="15" fill="rgb(242,222,5)" fg:x="541" fg:w="3"/><text x="44.6306%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="44.4627%" y="357" width="0.1641%" height="15" fill="rgb(230,16,48)" fg:x="542" fg:w="2"/><text x="44.7127%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="44.5447%" y="341" width="0.0820%" height="15" fill="rgb(241,192,16)" fg:x="543" fg:w="1"/><text x="44.7947%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.5447%" y="325" width="0.0820%" height="15" fill="rgb(209,25,37)" fg:x="543" fg:w="1"/><text x="44.7947%" y="335.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="44.6267%" y="389" width="0.1641%" height="15" fill="rgb(229,215,13)" fg:x="544" fg:w="2"/><text x="44.8767%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="44.6267%" y="373" width="0.1641%" height="15" fill="rgb(213,199,8)" fg:x="544" fg:w="2"/><text x="44.8767%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="44.6267%" y="357" width="0.1641%" height="15" fill="rgb(226,151,19)" fg:x="544" fg:w="2"/><text x="44.8767%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="44.6267%" y="341" width="0.1641%" height="15" fill="rgb(254,183,12)" fg:x="544" fg:w="2"/><text x="44.8767%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="44.6267%" y="325" width="0.1641%" height="15" fill="rgb(245,8,3)" fg:x="544" fg:w="2"/><text x="44.8767%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="44.6267%" y="309" width="0.1641%" height="15" fill="rgb(229,159,35)" fg:x="544" fg:w="2"/><text x="44.8767%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.7088%" y="293" width="0.0820%" height="15" fill="rgb(209,145,1)" fg:x="545" fg:w="1"/><text x="44.9588%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.7088%" y="277" width="0.0820%" height="15" fill="rgb(228,183,16)" fg:x="545" fg:w="1"/><text x="44.9588%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="44.7908%" y="373" width="0.0820%" height="15" fill="rgb(222,68,0)" fg:x="546" fg:w="1"/><text x="45.0408%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="44.7908%" y="389" width="0.1641%" height="15" fill="rgb(209,130,50)" fg:x="546" fg:w="2"/><text x="45.0408%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="44.8728%" y="373" width="0.0820%" height="15" fill="rgb(228,176,44)" fg:x="547" fg:w="1"/><text x="45.1228%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.8728%" y="357" width="0.0820%" height="15" fill="rgb(221,164,2)" fg:x="547" fg:w="1"/><text x="45.1228%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.8728%" y="341" width="0.0820%" height="15" fill="rgb(249,199,49)" fg:x="547" fg:w="1"/><text x="45.1228%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.8728%" y="325" width="0.0820%" height="15" fill="rgb(228,205,53)" fg:x="547" fg:w="1"/><text x="45.1228%" y="335.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="44.9549%" y="325" width="0.0820%" height="15" fill="rgb(235,77,20)" fg:x="548" fg:w="1"/><text x="45.2049%" y="335.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="44.9549%" y="309" width="0.0820%" height="15" fill="rgb(227,147,34)" fg:x="548" fg:w="1"/><text x="45.2049%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="44.9549%" y="293" width="0.0820%" height="15" fill="rgb(226,203,52)" fg:x="548" fg:w="1"/><text x="45.2049%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="44.9549%" y="277" width="0.0820%" height="15" fill="rgb(226,186,23)" fg:x="548" fg:w="1"/><text x="45.2049%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="44.9549%" y="261" width="0.0820%" height="15" fill="rgb(236,13,30)" fg:x="548" fg:w="1"/><text x="45.2049%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="44.9549%" y="245" width="0.0820%" height="15" fill="rgb(228,121,22)" fg:x="548" fg:w="1"/><text x="45.2049%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="44.9549%" y="229" width="0.0820%" height="15" fill="rgb(248,222,26)" fg:x="548" fg:w="1"/><text x="45.2049%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="44.9549%" y="213" width="0.0820%" height="15" fill="rgb(251,72,25)" fg:x="548" fg:w="1"/><text x="45.2049%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="44.9549%" y="197" width="0.0820%" height="15" fill="rgb(223,114,24)" fg:x="548" fg:w="1"/><text x="45.2049%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.9549%" y="181" width="0.0820%" height="15" fill="rgb(232,190,43)" fg:x="548" fg:w="1"/><text x="45.2049%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.90%)</title><rect x="45.0369%" y="245" width="0.9024%" height="15" fill="rgb(208,90,0)" fg:x="549" fg:w="11"/><text x="45.2869%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.90%)</title><rect x="45.0369%" y="229" width="0.9024%" height="15" fill="rgb(234,149,31)" fg:x="549" fg:w="11"/><text x="45.2869%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="45.9393%" y="245" width="0.0820%" height="15" fill="rgb(235,188,36)" fg:x="560" fg:w="1"/><text x="46.1893%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="45.9393%" y="229" width="0.0820%" height="15" fill="rgb(219,59,51)" fg:x="560" fg:w="1"/><text x="46.1893%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="46.0213%" y="245" width="0.1641%" height="15" fill="rgb(236,101,40)" fg:x="561" fg:w="2"/><text x="46.2713%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="46.0213%" y="229" width="0.1641%" height="15" fill="rgb(235,33,7)" fg:x="561" fg:w="2"/><text x="46.2713%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="46.1854%" y="245" width="0.0820%" height="15" fill="rgb(213,169,26)" fg:x="563" fg:w="1"/><text x="46.4354%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="46.4315%" y="149" width="0.1641%" height="15" fill="rgb(218,99,34)" fg:x="566" fg:w="2"/><text x="46.6815%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="46.4315%" y="133" width="0.1641%" height="15" fill="rgb(210,57,24)" fg:x="566" fg:w="2"/><text x="46.6815%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="46.4315%" y="117" width="0.1641%" height="15" fill="rgb(231,181,54)" fg:x="566" fg:w="2"/><text x="46.6815%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.33%)</title><rect x="46.3495%" y="181" width="0.3281%" height="15" fill="rgb(251,188,48)" fg:x="565" fg:w="4"/><text x="46.5995%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.33%)</title><rect x="46.3495%" y="165" width="0.3281%" height="15" fill="rgb(243,12,45)" fg:x="565" fg:w="4"/><text x="46.5995%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="46.5956%" y="149" width="0.0820%" height="15" fill="rgb(250,197,9)" fg:x="568" fg:w="1"/><text x="46.8456%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="46.5956%" y="133" width="0.0820%" height="15" fill="rgb(235,149,35)" fg:x="568" fg:w="1"/><text x="46.8456%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.5956%" y="117" width="0.0820%" height="15" fill="rgb(219,27,19)" fg:x="568" fg:w="1"/><text x="46.8456%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.5956%" y="101" width="0.0820%" height="15" fill="rgb(244,78,31)" fg:x="568" fg:w="1"/><text x="46.8456%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.5956%" y="85" width="0.0820%" height="15" fill="rgb(241,13,4)" fg:x="568" fg:w="1"/><text x="46.8456%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (42 samples, 3.45%)</title><rect x="46.6776%" y="181" width="3.4454%" height="15" fill="rgb(212,194,26)" fg:x="569" fg:w="42"/><text x="46.9276%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (42 samples, 3.45%)</title><rect x="46.6776%" y="165" width="3.4454%" height="15" fill="rgb(236,80,11)" fg:x="569" fg:w="42"/><text x="46.9276%" y="175.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (42 samples, 3.45%)</title><rect x="46.6776%" y="149" width="3.4454%" height="15" fill="rgb(206,1,24)" fg:x="569" fg:w="42"/><text x="46.9276%" y="159.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 3.94%)</title><rect x="46.2674%" y="229" width="3.9377%" height="15" fill="rgb(238,215,50)" fg:x="564" fg:w="48"/><text x="46.5174%" y="239.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (48 samples, 3.94%)</title><rect x="46.2674%" y="213" width="3.9377%" height="15" fill="rgb(254,126,32)" fg:x="564" fg:w="48"/><text x="46.5174%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (48 samples, 3.94%)</title><rect x="46.2674%" y="197" width="3.9377%" height="15" fill="rgb(206,111,53)" fg:x="564" fg:w="48"/><text x="46.5174%" y="207.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="50.1231%" y="181" width="0.0820%" height="15" fill="rgb(218,72,44)" fg:x="611" fg:w="1"/><text x="50.3731%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.1231%" y="165" width="0.0820%" height="15" fill="rgb(238,25,3)" fg:x="611" fg:w="1"/><text x="50.3731%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="50.2051%" y="213" width="0.0820%" height="15" fill="rgb(250,191,7)" fg:x="612" fg:w="1"/><text x="50.4551%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.2051%" y="197" width="0.0820%" height="15" fill="rgb(238,56,30)" fg:x="612" fg:w="1"/><text x="50.4551%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.2051%" y="181" width="0.0820%" height="15" fill="rgb(210,27,45)" fg:x="612" fg:w="1"/><text x="50.4551%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.2051%" y="165" width="0.0820%" height="15" fill="rgb(207,10,50)" fg:x="612" fg:w="1"/><text x="50.4551%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="50.2871%" y="213" width="0.1641%" height="15" fill="rgb(249,30,23)" fg:x="613" fg:w="2"/><text x="50.5371%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (52 samples, 4.27%)</title><rect x="46.2674%" y="245" width="4.2658%" height="15" fill="rgb(250,80,12)" fg:x="564" fg:w="52"/><text x="46.5174%" y="255.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.33%)</title><rect x="50.2051%" y="229" width="0.3281%" height="15" fill="rgb(210,221,37)" fg:x="612" fg:w="4"/><text x="50.4551%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="50.4512%" y="213" width="0.0820%" height="15" fill="rgb(205,96,24)" fg:x="615" fg:w="1"/><text x="50.7012%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (68 samples, 5.58%)</title><rect x="45.0369%" y="261" width="5.5783%" height="15" fill="rgb(247,104,22)" fg:x="549" fg:w="68"/><text x="45.2869%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="50.5332%" y="245" width="0.0820%" height="15" fill="rgb(222,61,53)" fg:x="616" fg:w="1"/><text x="50.7832%" y="255.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (70 samples, 5.74%)</title><rect x="45.0369%" y="309" width="5.7424%" height="15" fill="rgb(241,11,53)" fg:x="549" fg:w="70"/><text x="45.2869%" y="319.50">&lt;regex:..</text></g><g><title>regex::builders::string::RegexBuilder::build (70 samples, 5.74%)</title><rect x="45.0369%" y="293" width="5.7424%" height="15" fill="rgb(230,111,47)" fg:x="549" fg:w="70"/><text x="45.2869%" y="303.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (70 samples, 5.74%)</title><rect x="45.0369%" y="277" width="5.7424%" height="15" fill="rgb(218,187,29)" fg:x="549" fg:w="70"/><text x="45.2869%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="50.6153%" y="261" width="0.1641%" height="15" fill="rgb(210,121,46)" fg:x="617" fg:w="2"/><text x="50.8653%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="50.6153%" y="245" width="0.1641%" height="15" fill="rgb(250,43,19)" fg:x="617" fg:w="2"/><text x="50.8653%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="50.6973%" y="229" width="0.0820%" height="15" fill="rgb(238,61,12)" fg:x="618" fg:w="1"/><text x="50.9473%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="50.6973%" y="213" width="0.0820%" height="15" fill="rgb(251,198,9)" fg:x="618" fg:w="1"/><text x="50.9473%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.6973%" y="197" width="0.0820%" height="15" fill="rgb(214,192,38)" fg:x="618" fg:w="1"/><text x="50.9473%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.6973%" y="181" width="0.0820%" height="15" fill="rgb(214,73,19)" fg:x="618" fg:w="1"/><text x="50.9473%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.6973%" y="165" width="0.0820%" height="15" fill="rgb(249,222,49)" fg:x="618" fg:w="1"/><text x="50.9473%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="50.8614%" y="293" width="0.0820%" height="15" fill="rgb(231,181,54)" fg:x="620" fg:w="1"/><text x="51.1114%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="50.9434%" y="277" width="0.0820%" height="15" fill="rgb(240,1,13)" fg:x="621" fg:w="1"/><text x="51.1934%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.33%)</title><rect x="50.7793%" y="309" width="0.3281%" height="15" fill="rgb(225,21,16)" fg:x="619" fg:w="4"/><text x="51.0293%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="50.9434%" y="293" width="0.1641%" height="15" fill="rgb(246,176,50)" fg:x="621" fg:w="2"/><text x="51.1934%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="51.0254%" y="277" width="0.0820%" height="15" fill="rgb(208,96,50)" fg:x="622" fg:w="1"/><text x="51.2754%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="51.1895%" y="245" width="0.1641%" height="15" fill="rgb(240,219,19)" fg:x="624" fg:w="2"/><text x="51.4395%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (79 samples, 6.48%)</title><rect x="45.0369%" y="325" width="6.4807%" height="15" fill="rgb(234,73,5)" fg:x="549" fg:w="79"/><text x="45.2869%" y="335.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="51.1075%" y="309" width="0.4102%" height="15" fill="rgb(225,52,53)" fg:x="623" fg:w="5"/><text x="51.3575%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="51.1075%" y="293" width="0.4102%" height="15" fill="rgb(250,12,14)" fg:x="623" fg:w="5"/><text x="51.3575%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="51.1075%" y="277" width="0.4102%" height="15" fill="rgb(242,185,54)" fg:x="623" fg:w="5"/><text x="51.3575%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.33%)</title><rect x="51.1895%" y="261" width="0.3281%" height="15" fill="rgb(211,206,31)" fg:x="624" fg:w="4"/><text x="51.4395%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="51.3536%" y="245" width="0.1641%" height="15" fill="rgb(252,10,33)" fg:x="626" fg:w="2"/><text x="51.6036%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="51.3536%" y="229" width="0.1641%" height="15" fill="rgb(216,26,7)" fg:x="626" fg:w="2"/><text x="51.6036%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="51.3536%" y="213" width="0.1641%" height="15" fill="rgb(228,112,40)" fg:x="626" fg:w="2"/><text x="51.6036%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="51.3536%" y="197" width="0.1641%" height="15" fill="rgb(212,21,16)" fg:x="626" fg:w="2"/><text x="51.6036%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="51.7637%" y="229" width="0.0820%" height="15" fill="rgb(249,3,29)" fg:x="631" fg:w="1"/><text x="52.0137%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.7637%" y="213" width="0.0820%" height="15" fill="rgb(221,42,51)" fg:x="631" fg:w="1"/><text x="52.0137%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="51.7637%" y="261" width="0.1641%" height="15" fill="rgb(225,90,21)" fg:x="631" fg:w="2"/><text x="52.0137%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="51.7637%" y="245" width="0.1641%" height="15" fill="rgb(242,131,5)" fg:x="631" fg:w="2"/><text x="52.0137%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_syntax::hir::Hir]&gt; (1 samples, 0.08%)</title><rect x="51.8458%" y="229" width="0.0820%" height="15" fill="rgb(220,187,28)" fg:x="632" fg:w="1"/><text x="52.0958%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.9278%" y="261" width="0.0820%" height="15" fill="rgb(210,75,48)" fg:x="633" fg:w="1"/><text x="52.1778%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.0098%" y="261" width="0.0820%" height="15" fill="rgb(211,91,40)" fg:x="634" fg:w="1"/><text x="52.2598%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.90%)</title><rect x="52.2559%" y="245" width="0.9024%" height="15" fill="rgb(205,43,18)" fg:x="637" fg:w="11"/><text x="52.5059%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.90%)</title><rect x="52.2559%" y="229" width="0.9024%" height="15" fill="rgb(207,123,11)" fg:x="637" fg:w="11"/><text x="52.5059%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.0763%" y="213" width="0.0820%" height="15" fill="rgb(235,89,39)" fg:x="647" fg:w="1"/><text x="53.3263%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="53.1583%" y="245" width="0.1641%" height="15" fill="rgb(245,217,27)" fg:x="648" fg:w="2"/><text x="53.4083%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="53.1583%" y="229" width="0.1641%" height="15" fill="rgb(216,55,17)" fg:x="648" fg:w="2"/><text x="53.4083%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.4865%" y="213" width="0.0820%" height="15" fill="rgb(252,116,44)" fg:x="652" fg:w="1"/><text x="53.7365%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="53.5685%" y="213" width="0.0820%" height="15" fill="rgb(229,153,4)" fg:x="653" fg:w="1"/><text x="53.8185%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.5685%" y="197" width="0.0820%" height="15" fill="rgb(222,24,35)" fg:x="653" fg:w="1"/><text x="53.8185%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.5685%" y="181" width="0.0820%" height="15" fill="rgb(214,26,20)" fg:x="653" fg:w="1"/><text x="53.8185%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.5685%" y="165" width="0.0820%" height="15" fill="rgb(215,14,45)" fg:x="653" fg:w="1"/><text x="53.8185%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (13 samples, 1.07%)</title><rect x="53.3224%" y="245" width="1.0664%" height="15" fill="rgb(217,212,50)" fg:x="650" fg:w="13"/><text x="53.5724%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (13 samples, 1.07%)</title><rect x="53.3224%" y="229" width="1.0664%" height="15" fill="rgb(230,172,52)" fg:x="650" fg:w="13"/><text x="53.5724%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (9 samples, 0.74%)</title><rect x="53.6505%" y="213" width="0.7383%" height="15" fill="rgb(210,48,36)" fg:x="654" fg:w="9"/><text x="53.9005%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (7 samples, 0.57%)</title><rect x="53.8146%" y="197" width="0.5742%" height="15" fill="rgb(216,213,32)" fg:x="656" fg:w="7"/><text x="54.0646%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.33%)</title><rect x="54.0607%" y="181" width="0.3281%" height="15" fill="rgb(237,202,41)" fg:x="659" fg:w="4"/><text x="54.3107%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="54.0607%" y="165" width="0.3281%" height="15" fill="rgb(209,14,29)" fg:x="659" fg:w="4"/><text x="54.3107%" y="175.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="54.0607%" y="149" width="0.3281%" height="15" fill="rgb(219,29,3)" fg:x="659" fg:w="4"/><text x="54.3107%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="54.3888%" y="245" width="0.0820%" height="15" fill="rgb(229,13,49)" fg:x="663" fg:w="1"/><text x="54.6388%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="54.3888%" y="229" width="0.0820%" height="15" fill="rgb(210,206,2)" fg:x="663" fg:w="1"/><text x="54.6388%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="54.3888%" y="213" width="0.0820%" height="15" fill="rgb(216,154,46)" fg:x="663" fg:w="1"/><text x="54.6388%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="54.3888%" y="197" width="0.0820%" height="15" fill="rgb(211,170,52)" fg:x="663" fg:w="1"/><text x="54.6388%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="55.0451%" y="133" width="0.1641%" height="15" fill="rgb(233,109,47)" fg:x="671" fg:w="2"/><text x="55.2951%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.2092%" y="133" width="0.0820%" height="15" fill="rgb(208,212,30)" fg:x="673" fg:w="1"/><text x="55.4592%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.33%)</title><rect x="55.2912%" y="133" width="0.3281%" height="15" fill="rgb(215,190,19)" fg:x="674" fg:w="4"/><text x="55.5412%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="55.6194%" y="133" width="0.0820%" height="15" fill="rgb(207,164,53)" fg:x="678" fg:w="1"/><text x="55.8694%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.8655%" y="69" width="0.0820%" height="15" fill="rgb(213,87,49)" fg:x="681" fg:w="1"/><text x="56.1155%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="55.8655%" y="101" width="0.1641%" height="15" fill="rgb(241,216,24)" fg:x="681" fg:w="2"/><text x="56.1155%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.8655%" y="85" width="0.1641%" height="15" fill="rgb(241,123,45)" fg:x="681" fg:w="2"/><text x="56.1155%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.9475%" y="69" width="0.0820%" height="15" fill="rgb(220,36,15)" fg:x="682" fg:w="1"/><text x="56.1975%" y="79.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="56.3577%" y="85" width="0.1641%" height="15" fill="rgb(215,202,9)" fg:x="687" fg:w="2"/><text x="56.6077%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (12 samples, 0.98%)</title><rect x="55.7014%" y="133" width="0.9844%" height="15" fill="rgb(252,71,26)" fg:x="679" fg:w="12"/><text x="55.9514%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (10 samples, 0.82%)</title><rect x="55.8655%" y="117" width="0.8203%" height="15" fill="rgb(243,195,19)" fg:x="681" fg:w="10"/><text x="56.1155%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (8 samples, 0.66%)</title><rect x="56.0295%" y="101" width="0.6563%" height="15" fill="rgb(207,167,27)" fg:x="683" fg:w="8"/><text x="56.2795%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="56.5217%" y="85" width="0.1641%" height="15" fill="rgb(250,146,54)" fg:x="689" fg:w="2"/><text x="56.7717%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.6038%" y="69" width="0.0820%" height="15" fill="rgb(245,79,9)" fg:x="690" fg:w="1"/><text x="56.8538%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.6038%" y="53" width="0.0820%" height="15" fill="rgb(234,197,22)" fg:x="690" fg:w="1"/><text x="56.8538%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.6038%" y="37" width="0.0820%" height="15" fill="rgb(221,52,48)" fg:x="690" fg:w="1"/><text x="56.8538%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (33 samples, 2.71%)</title><rect x="56.6858%" y="133" width="2.7071%" height="15" fill="rgb(235,80,0)" fg:x="691" fg:w="33"/><text x="56.9358%" y="143.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (33 samples, 2.71%)</title><rect x="56.6858%" y="117" width="2.7071%" height="15" fill="rgb(221,117,53)" fg:x="691" fg:w="33"/><text x="56.9358%" y="127.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (33 samples, 2.71%)</title><rect x="56.6858%" y="101" width="2.7071%" height="15" fill="rgb(239,48,47)" fg:x="691" fg:w="33"/><text x="56.9358%" y="111.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="59.3929%" y="133" width="0.1641%" height="15" fill="rgb(227,191,52)" fg:x="724" fg:w="2"/><text x="59.6429%" y="143.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="59.5570%" y="133" width="0.0820%" height="15" fill="rgb(241,118,1)" fg:x="726" fg:w="1"/><text x="59.8070%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="59.7211%" y="85" width="0.1641%" height="15" fill="rgb(240,85,3)" fg:x="728" fg:w="2"/><text x="59.9711%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 5.50%)</title><rect x="54.4709%" y="229" width="5.4963%" height="15" fill="rgb(237,68,37)" fg:x="664" fg:w="67"/><text x="54.7209%" y="239.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (67 samples, 5.50%)</title><rect x="54.4709%" y="213" width="5.4963%" height="15" fill="rgb(212,9,20)" fg:x="664" fg:w="67"/><text x="54.7209%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (67 samples, 5.50%)</title><rect x="54.4709%" y="197" width="5.4963%" height="15" fill="rgb(218,84,17)" fg:x="664" fg:w="67"/><text x="54.7209%" y="207.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (67 samples, 5.50%)</title><rect x="54.4709%" y="181" width="5.4963%" height="15" fill="rgb(235,147,20)" fg:x="664" fg:w="67"/><text x="54.7209%" y="191.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (67 samples, 5.50%)</title><rect x="54.4709%" y="165" width="5.4963%" height="15" fill="rgb(208,224,1)" fg:x="664" fg:w="67"/><text x="54.7209%" y="175.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (67 samples, 5.50%)</title><rect x="54.4709%" y="149" width="5.4963%" height="15" fill="rgb(232,97,50)" fg:x="664" fg:w="67"/><text x="54.7209%" y="159.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.33%)</title><rect x="59.6390%" y="133" width="0.3281%" height="15" fill="rgb(238,15,45)" fg:x="727" fg:w="4"/><text x="59.8890%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="59.7211%" y="117" width="0.2461%" height="15" fill="rgb(231,46,18)" fg:x="728" fg:w="3"/><text x="59.9711%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="59.7211%" y="101" width="0.2461%" height="15" fill="rgb(254,169,10)" fg:x="728" fg:w="3"/><text x="59.9711%" y="111.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="59.8852%" y="85" width="0.0820%" height="15" fill="rgb(243,169,30)" fg:x="730" fg:w="1"/><text x="60.1352%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="59.8852%" y="69" width="0.0820%" height="15" fill="rgb(236,90,49)" fg:x="730" fg:w="1"/><text x="60.1352%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.9672%" y="213" width="0.0820%" height="15" fill="rgb(218,80,15)" fg:x="731" fg:w="1"/><text x="60.2172%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (103 samples, 8.45%)</title><rect x="52.0919%" y="261" width="8.4495%" height="15" fill="rgb(222,115,37)" fg:x="635" fg:w="103"/><text x="52.3419%" y="271.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (74 samples, 6.07%)</title><rect x="54.4709%" y="245" width="6.0705%" height="15" fill="rgb(227,0,6)" fg:x="664" fg:w="74"/><text x="54.7209%" y="255.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.57%)</title><rect x="59.9672%" y="229" width="0.5742%" height="15" fill="rgb(217,189,13)" fg:x="731" fg:w="7"/><text x="60.2172%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.49%)</title><rect x="60.0492%" y="213" width="0.4922%" height="15" fill="rgb(220,74,19)" fg:x="732" fg:w="6"/><text x="60.2992%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.4594%" y="197" width="0.0820%" height="15" fill="rgb(224,81,18)" fg:x="737" fg:w="1"/><text x="60.7094%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.4594%" y="181" width="0.0820%" height="15" fill="rgb(245,178,48)" fg:x="737" fg:w="1"/><text x="60.7094%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.4594%" y="165" width="0.0820%" height="15" fill="rgb(207,78,24)" fg:x="737" fg:w="1"/><text x="60.7094%" y="175.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="60.5414%" y="261" width="0.0820%" height="15" fill="rgb(223,222,30)" fg:x="738" fg:w="1"/><text x="60.7914%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="60.5414%" y="245" width="0.0820%" height="15" fill="rgb(234,101,12)" fg:x="738" fg:w="1"/><text x="60.7914%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="60.5414%" y="229" width="0.0820%" height="15" fill="rgb(209,80,46)" fg:x="738" fg:w="1"/><text x="60.7914%" y="239.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="60.5414%" y="213" width="0.0820%" height="15" fill="rgb(228,79,14)" fg:x="738" fg:w="1"/><text x="60.7914%" y="223.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="60.5414%" y="197" width="0.0820%" height="15" fill="rgb(220,219,34)" fg:x="738" fg:w="1"/><text x="60.7914%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="60.6235%" y="261" width="0.0820%" height="15" fill="rgb(207,80,21)" fg:x="739" fg:w="1"/><text x="60.8735%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="60.6235%" y="245" width="0.0820%" height="15" fill="rgb(210,154,44)" fg:x="739" fg:w="1"/><text x="60.8735%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="60.6235%" y="229" width="0.0820%" height="15" fill="rgb(246,44,39)" fg:x="739" fg:w="1"/><text x="60.8735%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="60.7055%" y="229" width="0.0820%" height="15" fill="rgb(252,175,13)" fg:x="740" fg:w="1"/><text x="60.9555%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="60.7055%" y="213" width="0.0820%" height="15" fill="rgb(211,50,39)" fg:x="740" fg:w="1"/><text x="60.9555%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (113 samples, 9.27%)</title><rect x="51.5997%" y="309" width="9.2699%" height="15" fill="rgb(231,204,27)" fg:x="629" fg:w="113"/><text x="51.8497%" y="319.50">&lt;regex::regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (113 samples, 9.27%)</title><rect x="51.5997%" y="293" width="9.2699%" height="15" fill="rgb(253,26,34)" fg:x="629" fg:w="113"/><text x="51.8497%" y="303.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (112 samples, 9.19%)</title><rect x="51.6817%" y="277" width="9.1879%" height="15" fill="rgb(207,139,38)" fg:x="630" fg:w="112"/><text x="51.9317%" y="287.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="60.7055%" y="261" width="0.1641%" height="15" fill="rgb(248,54,27)" fg:x="740" fg:w="2"/><text x="60.9555%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="60.7055%" y="245" width="0.1641%" height="15" fill="rgb(234,25,33)" fg:x="740" fg:w="2"/><text x="60.9555%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="60.7875%" y="229" width="0.0820%" height="15" fill="rgb(249,107,47)" fg:x="741" fg:w="1"/><text x="61.0375%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="60.7875%" y="213" width="0.0820%" height="15" fill="rgb(230,190,31)" fg:x="741" fg:w="1"/><text x="61.0375%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.7875%" y="197" width="0.0820%" height="15" fill="rgb(238,173,45)" fg:x="741" fg:w="1"/><text x="61.0375%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="60.8696%" y="309" width="0.0820%" height="15" fill="rgb(222,16,50)" fg:x="742" fg:w="1"/><text x="61.1196%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="60.8696%" y="293" width="0.0820%" height="15" fill="rgb(251,204,47)" fg:x="742" fg:w="1"/><text x="61.1196%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.8696%" y="277" width="0.0820%" height="15" fill="rgb(225,12,3)" fg:x="742" fg:w="1"/><text x="61.1196%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.8696%" y="261" width="0.0820%" height="15" fill="rgb(214,208,22)" fg:x="742" fg:w="1"/><text x="61.1196%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.8696%" y="245" width="0.0820%" height="15" fill="rgb(240,57,32)" fg:x="742" fg:w="1"/><text x="61.1196%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="60.9516%" y="293" width="0.0820%" height="15" fill="rgb(243,113,48)" fg:x="743" fg:w="1"/><text x="61.2016%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="60.9516%" y="277" width="0.0820%" height="15" fill="rgb(225,135,30)" fg:x="743" fg:w="1"/><text x="61.2016%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="60.9516%" y="261" width="0.0820%" height="15" fill="rgb(222,3,53)" fg:x="743" fg:w="1"/><text x="61.2016%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="60.9516%" y="245" width="0.0820%" height="15" fill="rgb(243,142,2)" fg:x="743" fg:w="1"/><text x="61.2016%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="60.9516%" y="229" width="0.0820%" height="15" fill="rgb(233,67,14)" fg:x="743" fg:w="1"/><text x="61.2016%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="61.1157%" y="229" width="0.0820%" height="15" fill="rgb(245,125,36)" fg:x="745" fg:w="1"/><text x="61.3657%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="61.1157%" y="245" width="0.1641%" height="15" fill="rgb(225,199,6)" fg:x="745" fg:w="2"/><text x="61.3657%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="61.1977%" y="229" width="0.0820%" height="15" fill="rgb(244,71,6)" fg:x="746" fg:w="1"/><text x="61.4477%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (120 samples, 9.84%)</title><rect x="51.5176%" y="325" width="9.8441%" height="15" fill="rgb(225,62,9)" fg:x="628" fg:w="120"/><text x="51.7676%" y="335.50">indefinite::ru..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.41%)</title><rect x="60.9516%" y="309" width="0.4102%" height="15" fill="rgb(246,139,53)" fg:x="743" fg:w="5"/><text x="61.2016%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.33%)</title><rect x="61.0336%" y="293" width="0.3281%" height="15" fill="rgb(243,161,46)" fg:x="744" fg:w="4"/><text x="61.2836%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.33%)</title><rect x="61.0336%" y="277" width="0.3281%" height="15" fill="rgb(236,153,7)" fg:x="744" fg:w="4"/><text x="61.2836%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.33%)</title><rect x="61.0336%" y="261" width="0.3281%" height="15" fill="rgb(248,42,35)" fg:x="744" fg:w="4"/><text x="61.2836%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="61.2797%" y="245" width="0.0820%" height="15" fill="rgb(250,17,31)" fg:x="747" fg:w="1"/><text x="61.5297%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="61.2797%" y="229" width="0.0820%" height="15" fill="rgb(248,138,14)" fg:x="747" fg:w="1"/><text x="61.5297%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.2797%" y="213" width="0.0820%" height="15" fill="rgb(228,161,3)" fg:x="747" fg:w="1"/><text x="61.5297%" y="223.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="61.3618%" y="309" width="0.0820%" height="15" fill="rgb(248,116,17)" fg:x="748" fg:w="1"/><text x="61.6118%" y="319.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="61.3618%" y="293" width="0.0820%" height="15" fill="rgb(207,78,24)" fg:x="748" fg:w="1"/><text x="61.6118%" y="303.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="61.3618%" y="277" width="0.0820%" height="15" fill="rgb(234,99,48)" fg:x="748" fg:w="1"/><text x="61.6118%" y="287.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="61.3618%" y="261" width="0.0820%" height="15" fill="rgb(242,22,26)" fg:x="748" fg:w="1"/><text x="61.6118%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="61.3618%" y="245" width="0.0820%" height="15" fill="rgb(227,78,32)" fg:x="748" fg:w="1"/><text x="61.6118%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.4438%" y="245" width="0.0820%" height="15" fill="rgb(226,189,43)" fg:x="749" fg:w="1"/><text x="61.6938%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.4438%" y="229" width="0.0820%" height="15" fill="rgb(227,218,35)" fg:x="749" fg:w="1"/><text x="61.6938%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.4438%" y="213" width="0.0820%" height="15" fill="rgb(206,111,40)" fg:x="749" fg:w="1"/><text x="61.6938%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.5258%" y="245" width="0.0820%" height="15" fill="rgb(208,217,22)" fg:x="750" fg:w="1"/><text x="61.7758%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.5258%" y="229" width="0.0820%" height="15" fill="rgb(248,20,20)" fg:x="750" fg:w="1"/><text x="61.7758%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.6899%" y="229" width="0.0820%" height="15" fill="rgb(239,155,16)" fg:x="752" fg:w="1"/><text x="61.9399%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="61.7719%" y="213" width="0.0820%" height="15" fill="rgb(238,171,46)" fg:x="753" fg:w="1"/><text x="62.0219%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="61.7719%" y="197" width="0.0820%" height="15" fill="rgb(248,11,36)" fg:x="753" fg:w="1"/><text x="62.0219%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.7719%" y="181" width="0.0820%" height="15" fill="rgb(220,148,37)" fg:x="753" fg:w="1"/><text x="62.0219%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="61.7719%" y="229" width="0.1641%" height="15" fill="rgb(218,144,42)" fg:x="753" fg:w="2"/><text x="62.0219%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="61.8540%" y="213" width="0.0820%" height="15" fill="rgb(245,20,20)" fg:x="754" fg:w="1"/><text x="62.1040%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="61.9360%" y="213" width="0.0820%" height="15" fill="rgb(240,111,48)" fg:x="755" fg:w="1"/><text x="62.1860%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="61.9360%" y="197" width="0.0820%" height="15" fill="rgb(237,225,32)" fg:x="755" fg:w="1"/><text x="62.1860%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="61.9360%" y="181" width="0.0820%" height="15" fill="rgb(228,161,46)" fg:x="755" fg:w="1"/><text x="62.1860%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.57%)</title><rect x="61.6079%" y="245" width="0.5742%" height="15" fill="rgb(235,196,21)" fg:x="751" fg:w="7"/><text x="61.8579%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.25%)</title><rect x="61.9360%" y="229" width="0.2461%" height="15" fill="rgb(250,133,21)" fg:x="755" fg:w="3"/><text x="62.1860%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="62.0180%" y="213" width="0.1641%" height="15" fill="rgb(236,94,32)" fg:x="756" fg:w="2"/><text x="62.2680%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="62.0180%" y="197" width="0.1641%" height="15" fill="rgb(219,176,25)" fg:x="756" fg:w="2"/><text x="62.2680%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="62.1821%" y="245" width="0.1641%" height="15" fill="rgb(211,17,43)" fg:x="758" fg:w="2"/><text x="62.4321%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="62.1821%" y="229" width="0.1641%" height="15" fill="rgb(220,75,23)" fg:x="758" fg:w="2"/><text x="62.4321%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="62.1821%" y="213" width="0.1641%" height="15" fill="rgb(215,122,32)" fg:x="758" fg:w="2"/><text x="62.4321%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="62.1821%" y="197" width="0.1641%" height="15" fill="rgb(218,57,38)" fg:x="758" fg:w="2"/><text x="62.4321%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="62.2642%" y="181" width="0.0820%" height="15" fill="rgb(233,208,46)" fg:x="759" fg:w="1"/><text x="62.5142%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="62.3462%" y="213" width="0.0820%" height="15" fill="rgb(221,35,50)" fg:x="760" fg:w="1"/><text x="62.5962%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="62.3462%" y="197" width="0.0820%" height="15" fill="rgb(229,213,29)" fg:x="760" fg:w="1"/><text x="62.5962%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (13 samples, 1.07%)</title><rect x="61.4438%" y="293" width="1.0664%" height="15" fill="rgb(229,110,40)" fg:x="749" fg:w="13"/><text x="61.6938%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (13 samples, 1.07%)</title><rect x="61.4438%" y="277" width="1.0664%" height="15" fill="rgb(247,206,19)" fg:x="749" fg:w="13"/><text x="61.6938%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (13 samples, 1.07%)</title><rect x="61.4438%" y="261" width="1.0664%" height="15" fill="rgb(216,229,45)" fg:x="749" fg:w="13"/><text x="61.6938%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="62.3462%" y="245" width="0.1641%" height="15" fill="rgb(205,184,31)" fg:x="760" fg:w="2"/><text x="62.5962%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="62.3462%" y="229" width="0.1641%" height="15" fill="rgb(213,91,10)" fg:x="760" fg:w="2"/><text x="62.5962%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="62.4282%" y="213" width="0.0820%" height="15" fill="rgb(250,49,8)" fg:x="761" fg:w="1"/><text x="62.6782%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="62.5103%" y="293" width="0.0820%" height="15" fill="rgb(207,26,8)" fg:x="762" fg:w="1"/><text x="62.7603%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="62.5103%" y="277" width="0.0820%" height="15" fill="rgb(224,2,13)" fg:x="762" fg:w="1"/><text x="62.7603%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="62.5103%" y="261" width="0.0820%" height="15" fill="rgb(219,108,27)" fg:x="762" fg:w="1"/><text x="62.7603%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="62.5103%" y="245" width="0.0820%" height="15" fill="rgb(240,89,32)" fg:x="762" fg:w="1"/><text x="62.7603%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.5103%" y="229" width="0.0820%" height="15" fill="rgb(248,205,3)" fg:x="762" fg:w="1"/><text x="62.7603%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (16 samples, 1.31%)</title><rect x="61.4438%" y="309" width="1.3126%" height="15" fill="rgb(236,197,47)" fg:x="749" fg:w="16"/><text x="61.6938%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="62.5923%" y="293" width="0.1641%" height="15" fill="rgb(244,185,52)" fg:x="763" fg:w="2"/><text x="62.8423%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="62.6743%" y="277" width="0.0820%" height="15" fill="rgb(210,206,23)" fg:x="764" fg:w="1"/><text x="62.9243%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="62.6743%" y="261" width="0.0820%" height="15" fill="rgb(251,177,30)" fg:x="764" fg:w="1"/><text x="62.9243%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="62.6743%" y="245" width="0.0820%" height="15" fill="rgb(243,27,45)" fg:x="764" fg:w="1"/><text x="62.9243%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="62.6743%" y="229" width="0.0820%" height="15" fill="rgb(248,141,51)" fg:x="764" fg:w="1"/><text x="62.9243%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="62.6743%" y="213" width="0.0820%" height="15" fill="rgb(235,102,15)" fg:x="764" fg:w="1"/><text x="62.9243%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (228 samples, 18.70%)</title><rect x="44.1345%" y="405" width="18.7039%" height="15" fill="rgb(214,164,53)" fg:x="538" fg:w="228"/><text x="44.3845%" y="415.50">&lt;&amp;kernel::model::EntityPtr as..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (218 samples, 17.88%)</title><rect x="44.9549%" y="389" width="17.8835%" height="15" fill="rgb(228,18,51)" fg:x="548" fg:w="218"/><text x="45.2049%" y="399.50">plugins_core::looking::model..</text></g><g><title>indefinite::indefinite (218 samples, 17.88%)</title><rect x="44.9549%" y="373" width="17.8835%" height="15" fill="rgb(205,211,11)" fg:x="548" fg:w="218"/><text x="45.2049%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (218 samples, 17.88%)</title><rect x="44.9549%" y="357" width="17.8835%" height="15" fill="rgb(208,63,6)" fg:x="548" fg:w="218"/><text x="45.2049%" y="367.50">indefinite::methods::indefin..</text></g><g><title>indefinite::methods::apply_rules (218 samples, 17.88%)</title><rect x="44.9549%" y="341" width="17.8835%" height="15" fill="rgb(245,76,14)" fg:x="548" fg:w="218"/><text x="45.2049%" y="351.50">indefinite::methods::apply_r..</text></g><g><title>indefinite::rules::other::Other::run (18 samples, 1.48%)</title><rect x="61.3618%" y="325" width="1.4766%" height="15" fill="rgb(234,176,34)" fg:x="748" fg:w="18"/><text x="61.6118%" y="335.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="62.7564%" y="309" width="0.0820%" height="15" fill="rgb(243,156,42)" fg:x="765" fg:w="1"/><text x="63.0064%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.8384%" y="325" width="0.0820%" height="15" fill="rgb(237,182,10)" fg:x="766" fg:w="1"/><text x="63.0884%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.8384%" y="309" width="0.0820%" height="15" fill="rgb(244,117,0)" fg:x="766" fg:w="1"/><text x="63.0884%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.8384%" y="293" width="0.0820%" height="15" fill="rgb(239,91,50)" fg:x="766" fg:w="1"/><text x="63.0884%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.8384%" y="277" width="0.0820%" height="15" fill="rgb(206,38,9)" fg:x="766" fg:w="1"/><text x="63.0884%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.8384%" y="261" width="0.0820%" height="15" fill="rgb(205,25,10)" fg:x="766" fg:w="1"/><text x="63.0884%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.8384%" y="245" width="0.0820%" height="15" fill="rgb(206,224,7)" fg:x="766" fg:w="1"/><text x="63.0884%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.8384%" y="229" width="0.0820%" height="15" fill="rgb(227,157,10)" fg:x="766" fg:w="1"/><text x="63.0884%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.8384%" y="213" width="0.0820%" height="15" fill="rgb(214,157,37)" fg:x="766" fg:w="1"/><text x="63.0884%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="62.8384%" y="197" width="0.0820%" height="15" fill="rgb(209,180,35)" fg:x="766" fg:w="1"/><text x="63.0884%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="62.8384%" y="181" width="0.0820%" height="15" fill="rgb(216,174,49)" fg:x="766" fg:w="1"/><text x="63.0884%" y="191.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (3 samples, 0.25%)</title><rect x="62.8384%" y="373" width="0.2461%" height="15" fill="rgb(205,96,20)" fg:x="766" fg:w="3"/><text x="63.0884%" y="383.50"></text></g><g><title>plugins_core::tools::contained_by (3 samples, 0.25%)</title><rect x="62.8384%" y="357" width="0.2461%" height="15" fill="rgb(214,220,39)" fg:x="766" fg:w="3"/><text x="63.0884%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="62.8384%" y="341" width="0.2461%" height="15" fill="rgb(245,126,30)" fg:x="766" fg:w="3"/><text x="63.0884%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.9204%" y="325" width="0.1641%" height="15" fill="rgb(215,88,33)" fg:x="767" fg:w="2"/><text x="63.1704%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.9204%" y="309" width="0.1641%" height="15" fill="rgb(210,1,49)" fg:x="767" fg:w="2"/><text x="63.1704%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="62.9204%" y="293" width="0.1641%" height="15" fill="rgb(207,133,3)" fg:x="767" fg:w="2"/><text x="63.1704%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="62.9204%" y="277" width="0.1641%" height="15" fill="rgb(231,47,43)" fg:x="767" fg:w="2"/><text x="63.1704%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="62.9204%" y="261" width="0.1641%" height="15" fill="rgb(245,64,1)" fg:x="767" fg:w="2"/><text x="63.1704%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.0025%" y="245" width="0.0820%" height="15" fill="rgb(253,145,20)" fg:x="768" fg:w="1"/><text x="63.2525%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.0025%" y="229" width="0.0820%" height="15" fill="rgb(211,39,18)" fg:x="768" fg:w="1"/><text x="63.2525%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.0025%" y="213" width="0.0820%" height="15" fill="rgb(223,225,18)" fg:x="768" fg:w="1"/><text x="63.2525%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (4 samples, 0.33%)</title><rect x="62.8384%" y="405" width="0.3281%" height="15" fill="rgb(210,202,44)" fg:x="766" fg:w="4"/><text x="63.0884%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (4 samples, 0.33%)</title><rect x="62.8384%" y="389" width="0.3281%" height="15" fill="rgb(231,138,36)" fg:x="766" fg:w="4"/><text x="63.0884%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="63.0845%" y="373" width="0.0820%" height="15" fill="rgb(237,115,25)" fg:x="769" fg:w="1"/><text x="63.3345%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="63.0845%" y="357" width="0.0820%" height="15" fill="rgb(215,53,48)" fg:x="769" fg:w="1"/><text x="63.3345%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="63.0845%" y="341" width="0.0820%" height="15" fill="rgb(243,193,24)" fg:x="769" fg:w="1"/><text x="63.3345%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="63.0845%" y="325" width="0.0820%" height="15" fill="rgb(210,106,28)" fg:x="769" fg:w="1"/><text x="63.3345%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.0845%" y="309" width="0.0820%" height="15" fill="rgb(249,192,0)" fg:x="769" fg:w="1"/><text x="63.3345%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.0845%" y="293" width="0.0820%" height="15" fill="rgb(224,96,21)" fg:x="769" fg:w="1"/><text x="63.3345%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="63.0845%" y="277" width="0.0820%" height="15" fill="rgb(243,160,19)" fg:x="769" fg:w="1"/><text x="63.3345%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.0845%" y="261" width="0.0820%" height="15" fill="rgb(219,205,50)" fg:x="769" fg:w="1"/><text x="63.3345%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.0845%" y="245" width="0.0820%" height="15" fill="rgb(218,175,44)" fg:x="769" fg:w="1"/><text x="63.3345%" y="255.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="63.2486%" y="277" width="0.0820%" height="15" fill="rgb(251,84,47)" fg:x="771" fg:w="1"/><text x="63.4986%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.2486%" y="261" width="0.0820%" height="15" fill="rgb(241,14,16)" fg:x="771" fg:w="1"/><text x="63.4986%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.2486%" y="245" width="0.0820%" height="15" fill="rgb(207,142,28)" fg:x="771" fg:w="1"/><text x="63.4986%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.2486%" y="229" width="0.0820%" height="15" fill="rgb(208,116,22)" fg:x="771" fg:w="1"/><text x="63.4986%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.2486%" y="213" width="0.0820%" height="15" fill="rgb(210,0,43)" fg:x="771" fg:w="1"/><text x="63.4986%" y="223.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="63.3306%" y="277" width="0.0820%" height="15" fill="rgb(246,33,21)" fg:x="772" fg:w="1"/><text x="63.5806%" y="287.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="63.3306%" y="261" width="0.0820%" height="15" fill="rgb(208,158,54)" fg:x="772" fg:w="1"/><text x="63.5806%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="63.3306%" y="245" width="0.0820%" height="15" fill="rgb(218,99,29)" fg:x="772" fg:w="1"/><text x="63.5806%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="63.3306%" y="229" width="0.0820%" height="15" fill="rgb(226,29,7)" fg:x="772" fg:w="1"/><text x="63.5806%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (4 samples, 0.33%)</title><rect x="63.1665%" y="389" width="0.3281%" height="15" fill="rgb(206,178,46)" fg:x="770" fg:w="4"/><text x="63.4165%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (3 samples, 0.25%)</title><rect x="63.2486%" y="373" width="0.2461%" height="15" fill="rgb(205,169,32)" fg:x="771" fg:w="3"/><text x="63.4986%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (3 samples, 0.25%)</title><rect x="63.2486%" y="357" width="0.2461%" height="15" fill="rgb(217,4,13)" fg:x="771" fg:w="3"/><text x="63.4986%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (3 samples, 0.25%)</title><rect x="63.2486%" y="341" width="0.2461%" height="15" fill="rgb(210,140,37)" fg:x="771" fg:w="3"/><text x="63.4986%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (3 samples, 0.25%)</title><rect x="63.2486%" y="325" width="0.2461%" height="15" fill="rgb(229,80,10)" fg:x="771" fg:w="3"/><text x="63.4986%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (3 samples, 0.25%)</title><rect x="63.2486%" y="309" width="0.2461%" height="15" fill="rgb(212,175,34)" fg:x="771" fg:w="3"/><text x="63.4986%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (3 samples, 0.25%)</title><rect x="63.2486%" y="293" width="0.2461%" height="15" fill="rgb(216,207,24)" fg:x="771" fg:w="3"/><text x="63.4986%" y="303.50"></text></g><g><title>plugins_rune::runner::SharedRunners::after (1 samples, 0.08%)</title><rect x="63.4126%" y="277" width="0.0820%" height="15" fill="rgb(234,163,3)" fg:x="773" fg:w="1"/><text x="63.6626%" y="287.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (3 samples, 0.25%)</title><rect x="63.4947%" y="389" width="0.2461%" height="15" fill="rgb(248,101,16)" fg:x="774" fg:w="3"/><text x="63.7447%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (3 samples, 0.25%)</title><rect x="63.4947%" y="373" width="0.2461%" height="15" fill="rgb(209,152,54)" fg:x="774" fg:w="3"/><text x="63.7447%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (3 samples, 0.25%)</title><rect x="63.4947%" y="357" width="0.2461%" height="15" fill="rgb(229,124,51)" fg:x="774" fg:w="3"/><text x="63.7447%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.25%)</title><rect x="63.4947%" y="341" width="0.2461%" height="15" fill="rgb(219,83,18)" fg:x="774" fg:w="3"/><text x="63.7447%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="63.4947%" y="325" width="0.2461%" height="15" fill="rgb(206,29,38)" fg:x="774" fg:w="3"/><text x="63.7447%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="63.5767%" y="309" width="0.1641%" height="15" fill="rgb(245,123,23)" fg:x="775" fg:w="2"/><text x="63.8267%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.6587%" y="293" width="0.0820%" height="15" fill="rgb(238,50,33)" fg:x="776" fg:w="1"/><text x="63.9087%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Carrying&gt; (1 samples, 0.08%)</title><rect x="63.7408%" y="389" width="0.0820%" height="15" fill="rgb(234,165,23)" fg:x="777" fg:w="1"/><text x="63.9908%" y="399.50"></text></g><g><title>plugins_core::library::actions::reply_ok (9 samples, 0.74%)</title><rect x="63.1665%" y="405" width="0.7383%" height="15" fill="rgb(211,82,31)" fg:x="770" fg:w="9"/><text x="63.4165%" y="415.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="63.8228%" y="389" width="0.0820%" height="15" fill="rgb(224,166,46)" fg:x="778" fg:w="1"/><text x="64.0728%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="63.9048%" y="357" width="0.0820%" height="15" fill="rgb(211,13,8)" fg:x="779" fg:w="1"/><text x="64.1548%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="63.9048%" y="341" width="0.0820%" height="15" fill="rgb(212,7,42)" fg:x="779" fg:w="1"/><text x="64.1548%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="63.9048%" y="389" width="0.1641%" height="15" fill="rgb(249,102,19)" fg:x="779" fg:w="2"/><text x="64.1548%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="63.9048%" y="373" width="0.1641%" height="15" fill="rgb(225,41,13)" fg:x="779" fg:w="2"/><text x="64.1548%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="63.9869%" y="357" width="0.0820%" height="15" fill="rgb(220,65,27)" fg:x="780" fg:w="1"/><text x="64.2369%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="63.9869%" y="341" width="0.0820%" height="15" fill="rgb(206,4,41)" fg:x="780" fg:w="1"/><text x="64.2369%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.9869%" y="325" width="0.0820%" height="15" fill="rgb(219,60,39)" fg:x="780" fg:w="1"/><text x="64.2369%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.9869%" y="309" width="0.0820%" height="15" fill="rgb(226,4,38)" fg:x="780" fg:w="1"/><text x="64.2369%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.9869%" y="293" width="0.0820%" height="15" fill="rgb(250,52,3)" fg:x="780" fg:w="1"/><text x="64.2369%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.9869%" y="277" width="0.0820%" height="15" fill="rgb(234,93,0)" fg:x="780" fg:w="1"/><text x="64.2369%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.9869%" y="261" width="0.0820%" height="15" fill="rgb(251,47,47)" fg:x="780" fg:w="1"/><text x="64.2369%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.9869%" y="245" width="0.0820%" height="15" fill="rgb(205,166,47)" fg:x="780" fg:w="1"/><text x="64.2369%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.9869%" y="229" width="0.0820%" height="15" fill="rgb(231,148,8)" fg:x="780" fg:w="1"/><text x="64.2369%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="63.9869%" y="213" width="0.0820%" height="15" fill="rgb(244,185,19)" fg:x="780" fg:w="1"/><text x="64.2369%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="63.9869%" y="197" width="0.0820%" height="15" fill="rgb(224,201,45)" fg:x="780" fg:w="1"/><text x="64.2369%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="64.0689%" y="373" width="0.0820%" height="15" fill="rgb(240,77,39)" fg:x="781" fg:w="1"/><text x="64.3189%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="64.0689%" y="357" width="0.0820%" height="15" fill="rgb(248,211,29)" fg:x="781" fg:w="1"/><text x="64.3189%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="64.0689%" y="341" width="0.0820%" height="15" fill="rgb(232,214,46)" fg:x="781" fg:w="1"/><text x="64.3189%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.0689%" y="325" width="0.0820%" height="15" fill="rgb(213,99,54)" fg:x="781" fg:w="1"/><text x="64.3189%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.2330%" y="341" width="0.0820%" height="15" fill="rgb(240,19,46)" fg:x="783" fg:w="1"/><text x="64.4830%" y="351.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.33%)</title><rect x="64.0689%" y="389" width="0.3281%" height="15" fill="rgb(243,89,10)" fg:x="781" fg:w="4"/><text x="64.3189%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (3 samples, 0.25%)</title><rect x="64.1509%" y="373" width="0.2461%" height="15" fill="rgb(249,28,32)" fg:x="782" fg:w="3"/><text x="64.4009%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="64.1509%" y="357" width="0.2461%" height="15" fill="rgb(253,30,9)" fg:x="782" fg:w="3"/><text x="64.4009%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.3150%" y="341" width="0.0820%" height="15" fill="rgb(217,2,26)" fg:x="784" fg:w="1"/><text x="64.5650%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.4791%" y="341" width="0.0820%" height="15" fill="rgb(220,28,10)" fg:x="786" fg:w="1"/><text x="64.7291%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="64.4791%" y="325" width="0.0820%" height="15" fill="rgb(228,167,49)" fg:x="786" fg:w="1"/><text x="64.7291%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.4791%" y="309" width="0.0820%" height="15" fill="rgb(238,212,3)" fg:x="786" fg:w="1"/><text x="64.7291%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.4791%" y="293" width="0.0820%" height="15" fill="rgb(229,134,44)" fg:x="786" fg:w="1"/><text x="64.7291%" y="303.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.25%)</title><rect x="64.3970%" y="389" width="0.2461%" height="15" fill="rgb(208,71,4)" fg:x="785" fg:w="3"/><text x="64.6470%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="64.4791%" y="373" width="0.1641%" height="15" fill="rgb(221,205,45)" fg:x="786" fg:w="2"/><text x="64.7291%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="64.4791%" y="357" width="0.1641%" height="15" fill="rgb(215,132,38)" fg:x="786" fg:w="2"/><text x="64.7291%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="64.5611%" y="341" width="0.0820%" height="15" fill="rgb(227,158,6)" fg:x="787" fg:w="1"/><text x="64.8111%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="64.5611%" y="325" width="0.0820%" height="15" fill="rgb(250,10,38)" fg:x="787" fg:w="1"/><text x="64.8111%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.5611%" y="309" width="0.0820%" height="15" fill="rgb(225,171,40)" fg:x="787" fg:w="1"/><text x="64.8111%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.5611%" y="293" width="0.0820%" height="15" fill="rgb(238,17,43)" fg:x="787" fg:w="1"/><text x="64.8111%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.5611%" y="277" width="0.0820%" height="15" fill="rgb(208,145,4)" fg:x="787" fg:w="1"/><text x="64.8111%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.5611%" y="261" width="0.0820%" height="15" fill="rgb(232,82,7)" fg:x="787" fg:w="1"/><text x="64.8111%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.5611%" y="245" width="0.0820%" height="15" fill="rgb(205,166,38)" fg:x="787" fg:w="1"/><text x="64.8111%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.5611%" y="229" width="0.0820%" height="15" fill="rgb(240,228,4)" fg:x="787" fg:w="1"/><text x="64.8111%" y="239.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="64.6432%" y="389" width="0.0820%" height="15" fill="rgb(233,121,40)" fg:x="788" fg:w="1"/><text x="64.8932%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="64.6432%" y="373" width="0.0820%" height="15" fill="rgb(243,84,30)" fg:x="788" fg:w="1"/><text x="64.8932%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6432%" y="357" width="0.0820%" height="15" fill="rgb(235,81,48)" fg:x="788" fg:w="1"/><text x="64.8932%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6432%" y="341" width="0.0820%" height="15" fill="rgb(218,137,0)" fg:x="788" fg:w="1"/><text x="64.8932%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6432%" y="325" width="0.0820%" height="15" fill="rgb(223,151,48)" fg:x="788" fg:w="1"/><text x="64.8932%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.6432%" y="309" width="0.0820%" height="15" fill="rgb(247,30,19)" fg:x="788" fg:w="1"/><text x="64.8932%" y="319.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (252 samples, 20.67%)</title><rect x="44.1345%" y="421" width="20.6727%" height="15" fill="rgb(205,129,29)" fg:x="538" fg:w="252"/><text x="44.3845%" y="431.50">&lt;plugins_core::carrying::actions:..</text></g><g><title>plugins_core::location::model::change_location (11 samples, 0.90%)</title><rect x="63.9048%" y="405" width="0.9024%" height="15" fill="rgb(222,29,2)" fg:x="779" fg:w="11"/><text x="64.1548%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="64.7252%" y="389" width="0.0820%" height="15" fill="rgb(232,145,33)" fg:x="789" fg:w="1"/><text x="64.9752%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="64.7252%" y="373" width="0.0820%" height="15" fill="rgb(217,30,31)" fg:x="789" fg:w="1"/><text x="64.9752%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="64.7252%" y="357" width="0.0820%" height="15" fill="rgb(243,22,52)" fg:x="789" fg:w="1"/><text x="64.9752%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.7252%" y="341" width="0.0820%" height="15" fill="rgb(254,228,14)" fg:x="789" fg:w="1"/><text x="64.9752%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="64.7252%" y="325" width="0.0820%" height="15" fill="rgb(231,45,50)" fg:x="789" fg:w="1"/><text x="64.9752%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.7252%" y="309" width="0.0820%" height="15" fill="rgb(248,125,3)" fg:x="789" fg:w="1"/><text x="64.9752%" y="319.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (514 samples, 42.17%)</title><rect x="22.7235%" y="549" width="42.1657%" height="15" fill="rgb(213,76,9)" fg:x="277" fg:w="514"/><text x="22.9735%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (514 samples, 42.17%)</title><rect x="22.7235%" y="533" width="42.1657%" height="15" fill="rgb(238,108,21)" fg:x="277" fg:w="514"/><text x="22.9735%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (514 samples, 42.17%)</title><rect x="22.7235%" y="517" width="42.1657%" height="15" fill="rgb(229,214,19)" fg:x="277" fg:w="514"/><text x="22.9735%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (514 samples, 42.17%)</title><rect x="22.7235%" y="501" width="42.1657%" height="15" fill="rgb(252,201,5)" fg:x="277" fg:w="514"/><text x="22.9735%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (514 samples, 42.17%)</title><rect x="22.7235%" y="485" width="42.1657%" height="15" fill="rgb(233,165,49)" fg:x="277" fg:w="514"/><text x="22.9735%" y="495.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (514 samples, 42.17%)</title><rect x="22.7235%" y="469" width="42.1657%" height="15" fill="rgb(208,165,19)" fg:x="277" fg:w="514"/><text x="22.9735%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (514 samples, 42.17%)</title><rect x="22.7235%" y="453" width="42.1657%" height="15" fill="rgb(216,220,31)" fg:x="277" fg:w="514"/><text x="22.9735%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_o..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (514 samples, 42.17%)</title><rect x="22.7235%" y="437" width="42.1657%" height="15" fill="rgb(214,8,31)" fg:x="277" fg:w="514"/><text x="22.9735%" y="447.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::emote::actions::LaughAction as kernel::actions::Action&gt;::perform (1 samples, 0.08%)</title><rect x="64.8072%" y="421" width="0.0820%" height="15" fill="rgb(220,32,32)" fg:x="790" fg:w="1"/><text x="65.0572%" y="431.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="64.8893%" y="533" width="0.0820%" height="15" fill="rgb(237,172,34)" fg:x="791" fg:w="1"/><text x="65.1393%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.8893%" y="517" width="0.0820%" height="15" fill="rgb(240,209,5)" fg:x="791" fg:w="1"/><text x="65.1393%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.8893%" y="501" width="0.0820%" height="15" fill="rgb(221,219,1)" fg:x="791" fg:w="1"/><text x="65.1393%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.8893%" y="485" width="0.0820%" height="15" fill="rgb(237,90,36)" fg:x="791" fg:w="1"/><text x="65.1393%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.8893%" y="469" width="0.0820%" height="15" fill="rgb(245,14,51)" fg:x="791" fg:w="1"/><text x="65.1393%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.8893%" y="453" width="0.0820%" height="15" fill="rgb(211,71,49)" fg:x="791" fg:w="1"/><text x="65.1393%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.8893%" y="437" width="0.0820%" height="15" fill="rgb(230,223,9)" fg:x="791" fg:w="1"/><text x="65.1393%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.8893%" y="421" width="0.0820%" height="15" fill="rgb(212,33,31)" fg:x="791" fg:w="1"/><text x="65.1393%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.8893%" y="405" width="0.0820%" height="15" fill="rgb(218,141,5)" fg:x="791" fg:w="1"/><text x="65.1393%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="64.8893%" y="389" width="0.0820%" height="15" fill="rgb(239,194,8)" fg:x="791" fg:w="1"/><text x="65.1393%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="64.8893%" y="373" width="0.0820%" height="15" fill="rgb(225,119,29)" fg:x="791" fg:w="1"/><text x="65.1393%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="64.8893%" y="357" width="0.0820%" height="15" fill="rgb(233,32,3)" fg:x="791" fg:w="1"/><text x="65.1393%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.8893%" y="341" width="0.0820%" height="15" fill="rgb(248,126,40)" fg:x="791" fg:w="1"/><text x="65.1393%" y="351.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.0533%" y="517" width="0.0820%" height="15" fill="rgb(213,102,53)" fg:x="793" fg:w="1"/><text x="65.3033%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="65.1354%" y="485" width="0.0820%" height="15" fill="rgb(212,69,15)" fg:x="794" fg:w="1"/><text x="65.3854%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="65.1354%" y="469" width="0.0820%" height="15" fill="rgb(253,39,34)" fg:x="794" fg:w="1"/><text x="65.3854%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.2174%" y="453" width="0.0820%" height="15" fill="rgb(205,189,54)" fg:x="795" fg:w="1"/><text x="65.4674%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="65.1354%" y="501" width="0.3281%" height="15" fill="rgb(234,229,45)" fg:x="794" fg:w="4"/><text x="65.3854%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="65.2174%" y="485" width="0.2461%" height="15" fill="rgb(243,79,48)" fg:x="795" fg:w="3"/><text x="65.4674%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="65.2174%" y="469" width="0.2461%" height="15" fill="rgb(206,71,50)" fg:x="795" fg:w="3"/><text x="65.4674%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="65.2994%" y="453" width="0.1641%" height="15" fill="rgb(209,32,17)" fg:x="796" fg:w="2"/><text x="65.5494%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="65.2994%" y="437" width="0.1641%" height="15" fill="rgb(219,229,6)" fg:x="796" fg:w="2"/><text x="65.5494%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="65.2994%" y="421" width="0.1641%" height="15" fill="rgb(226,25,27)" fg:x="796" fg:w="2"/><text x="65.5494%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="65.2994%" y="405" width="0.1641%" height="15" fill="rgb(218,185,23)" fg:x="796" fg:w="2"/><text x="65.5494%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="65.2994%" y="389" width="0.1641%" height="15" fill="rgb(242,123,5)" fg:x="796" fg:w="2"/><text x="65.5494%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="65.3815%" y="373" width="0.0820%" height="15" fill="rgb(215,53,19)" fg:x="797" fg:w="1"/><text x="65.6315%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.4635%" y="437" width="0.0820%" height="15" fill="rgb(233,20,30)" fg:x="798" fg:w="1"/><text x="65.7135%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.4635%" y="421" width="0.0820%" height="15" fill="rgb(209,67,20)" fg:x="798" fg:w="1"/><text x="65.7135%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.4635%" y="405" width="0.0820%" height="15" fill="rgb(227,181,50)" fg:x="798" fg:w="1"/><text x="65.7135%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.4635%" y="389" width="0.0820%" height="15" fill="rgb(252,75,38)" fg:x="798" fg:w="1"/><text x="65.7135%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.5455%" y="357" width="0.0820%" height="15" fill="rgb(235,9,33)" fg:x="799" fg:w="1"/><text x="65.7955%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="65.5455%" y="437" width="0.1641%" height="15" fill="rgb(208,87,30)" fg:x="799" fg:w="2"/><text x="65.7955%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="65.5455%" y="421" width="0.1641%" height="15" fill="rgb(215,199,39)" fg:x="799" fg:w="2"/><text x="65.7955%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="65.5455%" y="405" width="0.1641%" height="15" fill="rgb(246,208,12)" fg:x="799" fg:w="2"/><text x="65.7955%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="65.5455%" y="389" width="0.1641%" height="15" fill="rgb(206,195,10)" fg:x="799" fg:w="2"/><text x="65.7955%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="65.5455%" y="373" width="0.1641%" height="15" fill="rgb(244,1,30)" fg:x="799" fg:w="2"/><text x="65.7955%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.6276%" y="357" width="0.0820%" height="15" fill="rgb(230,83,5)" fg:x="800" fg:w="1"/><text x="65.8776%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.7096%" y="389" width="0.0820%" height="15" fill="rgb(239,62,17)" fg:x="801" fg:w="1"/><text x="65.9596%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="65.7916%" y="389" width="0.0820%" height="15" fill="rgb(252,193,41)" fg:x="802" fg:w="1"/><text x="66.0416%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.7916%" y="373" width="0.0820%" height="15" fill="rgb(216,142,19)" fg:x="802" fg:w="1"/><text x="66.0416%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.7916%" y="357" width="0.0820%" height="15" fill="rgb(240,81,38)" fg:x="802" fg:w="1"/><text x="66.0416%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.25%)</title><rect x="65.7096%" y="437" width="0.2461%" height="15" fill="rgb(240,109,40)" fg:x="801" fg:w="3"/><text x="65.9596%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="65.7096%" y="421" width="0.2461%" height="15" fill="rgb(230,123,10)" fg:x="801" fg:w="3"/><text x="65.9596%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="65.7096%" y="405" width="0.2461%" height="15" fill="rgb(253,42,32)" fg:x="801" fg:w="3"/><text x="65.9596%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.8737%" y="389" width="0.0820%" height="15" fill="rgb(218,154,8)" fg:x="803" fg:w="1"/><text x="66.1237%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.8737%" y="373" width="0.0820%" height="15" fill="rgb(216,197,10)" fg:x="803" fg:w="1"/><text x="66.1237%" y="383.50"></text></g><g><title>plugins_core::tools::contained_by (12 samples, 0.98%)</title><rect x="65.1354%" y="517" width="0.9844%" height="15" fill="rgb(223,107,12)" fg:x="794" fg:w="12"/><text x="65.3854%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.66%)</title><rect x="65.4635%" y="501" width="0.6563%" height="15" fill="rgb(241,174,42)" fg:x="798" fg:w="8"/><text x="65.7135%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.66%)</title><rect x="65.4635%" y="485" width="0.6563%" height="15" fill="rgb(231,78,20)" fg:x="798" fg:w="8"/><text x="65.7135%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.66%)</title><rect x="65.4635%" y="469" width="0.6563%" height="15" fill="rgb(230,208,49)" fg:x="798" fg:w="8"/><text x="65.7135%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.66%)</title><rect x="65.4635%" y="453" width="0.6563%" height="15" fill="rgb(238,11,34)" fg:x="798" fg:w="8"/><text x="65.7135%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="65.9557%" y="437" width="0.1641%" height="15" fill="rgb(210,130,26)" fg:x="804" fg:w="2"/><text x="66.2057%" y="447.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="65.9557%" y="421" width="0.1641%" height="15" fill="rgb(242,131,11)" fg:x="804" fg:w="2"/><text x="66.2057%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="65.9557%" y="405" width="0.1641%" height="15" fill="rgb(237,38,28)" fg:x="804" fg:w="2"/><text x="66.2057%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.9557%" y="389" width="0.1641%" height="15" fill="rgb(244,180,43)" fg:x="804" fg:w="2"/><text x="66.2057%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="65.9557%" y="373" width="0.1641%" height="15" fill="rgb(214,171,19)" fg:x="804" fg:w="2"/><text x="66.2057%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.0377%" y="357" width="0.0820%" height="15" fill="rgb(252,101,45)" fg:x="805" fg:w="1"/><text x="66.2877%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.0377%" y="341" width="0.0820%" height="15" fill="rgb(211,96,33)" fg:x="805" fg:w="1"/><text x="66.2877%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.0377%" y="325" width="0.0820%" height="15" fill="rgb(207,80,25)" fg:x="805" fg:w="1"/><text x="66.2877%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.0377%" y="309" width="0.0820%" height="15" fill="rgb(225,15,35)" fg:x="805" fg:w="1"/><text x="66.2877%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.0377%" y="293" width="0.0820%" height="15" fill="rgb(214,93,43)" fg:x="805" fg:w="1"/><text x="66.2877%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.1198%" y="421" width="0.0820%" height="15" fill="rgb(248,42,37)" fg:x="806" fg:w="1"/><text x="66.3698%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.1198%" y="405" width="0.0820%" height="15" fill="rgb(217,135,32)" fg:x="806" fg:w="1"/><text x="66.3698%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.1198%" y="389" width="0.0820%" height="15" fill="rgb(216,74,28)" fg:x="806" fg:w="1"/><text x="66.3698%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.1198%" y="373" width="0.0820%" height="15" fill="rgb(247,108,16)" fg:x="806" fg:w="1"/><text x="66.3698%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.1198%" y="357" width="0.0820%" height="15" fill="rgb(205,219,30)" fg:x="806" fg:w="1"/><text x="66.3698%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.1198%" y="341" width="0.0820%" height="15" fill="rgb(241,122,9)" fg:x="806" fg:w="1"/><text x="66.3698%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.1198%" y="325" width="0.0820%" height="15" fill="rgb(216,148,50)" fg:x="806" fg:w="1"/><text x="66.3698%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.1198%" y="309" width="0.0820%" height="15" fill="rgb(226,154,2)" fg:x="806" fg:w="1"/><text x="66.3698%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.1198%" y="293" width="0.0820%" height="15" fill="rgb(220,128,1)" fg:x="806" fg:w="1"/><text x="66.3698%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.1198%" y="277" width="0.0820%" height="15" fill="rgb(245,185,29)" fg:x="806" fg:w="1"/><text x="66.3698%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.1198%" y="261" width="0.0820%" height="15" fill="rgb(243,161,2)" fg:x="806" fg:w="1"/><text x="66.3698%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.1198%" y="245" width="0.0820%" height="15" fill="rgb(249,215,17)" fg:x="806" fg:w="1"/><text x="66.3698%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.1198%" y="437" width="0.1641%" height="15" fill="rgb(237,67,11)" fg:x="806" fg:w="2"/><text x="66.3698%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.2018%" y="421" width="0.0820%" height="15" fill="rgb(239,17,24)" fg:x="807" fg:w="1"/><text x="66.4518%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.2018%" y="405" width="0.0820%" height="15" fill="rgb(215,97,29)" fg:x="807" fg:w="1"/><text x="66.4518%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.2018%" y="389" width="0.0820%" height="15" fill="rgb(253,228,42)" fg:x="807" fg:w="1"/><text x="66.4518%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.2018%" y="373" width="0.0820%" height="15" fill="rgb(240,85,2)" fg:x="807" fg:w="1"/><text x="66.4518%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.2018%" y="357" width="0.0820%" height="15" fill="rgb(214,155,4)" fg:x="807" fg:w="1"/><text x="66.4518%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.2018%" y="341" width="0.0820%" height="15" fill="rgb(247,120,22)" fg:x="807" fg:w="1"/><text x="66.4518%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.2018%" y="325" width="0.0820%" height="15" fill="rgb(211,208,6)" fg:x="807" fg:w="1"/><text x="66.4518%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.2018%" y="309" width="0.0820%" height="15" fill="rgb(235,99,41)" fg:x="807" fg:w="1"/><text x="66.4518%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.2018%" y="293" width="0.0820%" height="15" fill="rgb(223,28,8)" fg:x="807" fg:w="1"/><text x="66.4518%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.2018%" y="277" width="0.0820%" height="15" fill="rgb(212,71,20)" fg:x="807" fg:w="1"/><text x="66.4518%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.2018%" y="261" width="0.0820%" height="15" fill="rgb(206,85,3)" fg:x="807" fg:w="1"/><text x="66.4518%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.2018%" y="245" width="0.0820%" height="15" fill="rgb(244,180,11)" fg:x="807" fg:w="1"/><text x="66.4518%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="66.1198%" y="485" width="0.2461%" height="15" fill="rgb(223,16,21)" fg:x="806" fg:w="3"/><text x="66.3698%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.25%)</title><rect x="66.1198%" y="469" width="0.2461%" height="15" fill="rgb(238,85,42)" fg:x="806" fg:w="3"/><text x="66.3698%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="66.1198%" y="453" width="0.2461%" height="15" fill="rgb(205,85,8)" fg:x="806" fg:w="3"/><text x="66.3698%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.2838%" y="437" width="0.0820%" height="15" fill="rgb(217,190,15)" fg:x="808" fg:w="1"/><text x="66.5338%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.2838%" y="421" width="0.0820%" height="15" fill="rgb(243,192,23)" fg:x="808" fg:w="1"/><text x="66.5338%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.2838%" y="405" width="0.0820%" height="15" fill="rgb(223,220,37)" fg:x="808" fg:w="1"/><text x="66.5338%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.2838%" y="389" width="0.0820%" height="15" fill="rgb(208,41,17)" fg:x="808" fg:w="1"/><text x="66.5338%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.2838%" y="373" width="0.0820%" height="15" fill="rgb(224,188,7)" fg:x="808" fg:w="1"/><text x="66.5338%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="66.2838%" y="357" width="0.0820%" height="15" fill="rgb(236,16,50)" fg:x="808" fg:w="1"/><text x="66.5338%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="66.2838%" y="341" width="0.0820%" height="15" fill="rgb(238,6,24)" fg:x="808" fg:w="1"/><text x="66.5338%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="66.3659%" y="485" width="0.0820%" height="15" fill="rgb(253,67,45)" fg:x="809" fg:w="1"/><text x="66.6159%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.3659%" y="469" width="0.0820%" height="15" fill="rgb(210,89,32)" fg:x="809" fg:w="1"/><text x="66.6159%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.6120%" y="405" width="0.0820%" height="15" fill="rgb(208,89,9)" fg:x="812" fg:w="1"/><text x="66.8620%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="66.6120%" y="453" width="0.1641%" height="15" fill="rgb(222,180,44)" fg:x="812" fg:w="2"/><text x="66.8620%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="66.6120%" y="437" width="0.1641%" height="15" fill="rgb(250,181,46)" fg:x="812" fg:w="2"/><text x="66.8620%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="66.6120%" y="421" width="0.1641%" height="15" fill="rgb(210,190,26)" fg:x="812" fg:w="2"/><text x="66.8620%" y="431.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.6940%" y="405" width="0.0820%" height="15" fill="rgb(253,49,13)" fg:x="813" fg:w="1"/><text x="66.9440%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (9 samples, 0.74%)</title><rect x="66.1198%" y="501" width="0.7383%" height="15" fill="rgb(240,184,42)" fg:x="806" fg:w="9"/><text x="66.3698%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="66.4479%" y="485" width="0.4102%" height="15" fill="rgb(246,59,37)" fg:x="810" fg:w="5"/><text x="66.6979%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="66.4479%" y="469" width="0.4102%" height="15" fill="rgb(207,134,54)" fg:x="810" fg:w="5"/><text x="66.6979%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.7760%" y="453" width="0.0820%" height="15" fill="rgb(250,122,24)" fg:x="814" fg:w="1"/><text x="67.0260%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.7760%" y="437" width="0.0820%" height="15" fill="rgb(239,206,3)" fg:x="814" fg:w="1"/><text x="67.0260%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="66.7760%" y="421" width="0.0820%" height="15" fill="rgb(253,220,32)" fg:x="814" fg:w="1"/><text x="67.0260%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="66.7760%" y="405" width="0.0820%" height="15" fill="rgb(209,217,48)" fg:x="814" fg:w="1"/><text x="67.0260%" y="415.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="66.7760%" y="389" width="0.0820%" height="15" fill="rgb(242,91,39)" fg:x="814" fg:w="1"/><text x="67.0260%" y="399.50"></text></g><g><title>plugins_core::tools::occupied_by (11 samples, 0.90%)</title><rect x="66.1198%" y="517" width="0.9024%" height="15" fill="rgb(228,4,13)" fg:x="806" fg:w="11"/><text x="66.3698%" y="527.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="66.8581%" y="501" width="0.1641%" height="15" fill="rgb(223,133,4)" fg:x="815" fg:w="2"/><text x="67.1081%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.9401%" y="485" width="0.0820%" height="15" fill="rgb(215,105,30)" fg:x="816" fg:w="1"/><text x="67.1901%" y="495.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="66.9401%" y="469" width="0.0820%" height="15" fill="rgb(230,9,4)" fg:x="816" fg:w="1"/><text x="67.1901%" y="479.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="66.9401%" y="453" width="0.0820%" height="15" fill="rgb(248,15,2)" fg:x="816" fg:w="1"/><text x="67.1901%" y="463.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="66.9401%" y="437" width="0.0820%" height="15" fill="rgb(208,210,22)" fg:x="816" fg:w="1"/><text x="67.1901%" y="447.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="66.9401%" y="421" width="0.0820%" height="15" fill="rgb(208,112,41)" fg:x="816" fg:w="1"/><text x="67.1901%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.9401%" y="405" width="0.0820%" height="15" fill="rgb(232,83,14)" fg:x="816" fg:w="1"/><text x="67.1901%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="66.9401%" y="389" width="0.0820%" height="15" fill="rgb(229,65,11)" fg:x="816" fg:w="1"/><text x="67.1901%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (27 samples, 2.21%)</title><rect x="64.9713%" y="533" width="2.2149%" height="15" fill="rgb(228,126,24)" fg:x="792" fg:w="27"/><text x="65.2213%" y="543.50">p..</text></g><g><title>plugins_core::tools::worn_by (2 samples, 0.16%)</title><rect x="67.0221%" y="517" width="0.1641%" height="15" fill="rgb(218,66,33)" fg:x="817" fg:w="2"/><text x="67.2721%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="67.1042%" y="501" width="0.0820%" height="15" fill="rgb(251,49,52)" fg:x="818" fg:w="1"/><text x="67.3542%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.1042%" y="485" width="0.0820%" height="15" fill="rgb(219,46,37)" fg:x="818" fg:w="1"/><text x="67.3542%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.1042%" y="469" width="0.0820%" height="15" fill="rgb(213,53,49)" fg:x="818" fg:w="1"/><text x="67.3542%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.1042%" y="453" width="0.0820%" height="15" fill="rgb(214,134,1)" fg:x="818" fg:w="1"/><text x="67.3542%" y="463.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::new_from_surroundings (1 samples, 0.08%)</title><rect x="67.1862%" y="533" width="0.0820%" height="15" fill="rgb(208,139,43)" fg:x="819" fg:w="1"/><text x="67.4362%" y="543.50"></text></g><g><title>engine::session::Session::captured (574 samples, 47.09%)</title><rect x="20.2625%" y="693" width="47.0878%" height="15" fill="rgb(231,105,35)" fg:x="247" fg:w="574"/><text x="20.5125%" y="703.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (567 samples, 46.51%)</title><rect x="20.8368%" y="677" width="46.5135%" height="15" fill="rgb(247,189,9)" fg:x="254" fg:w="567"/><text x="21.0868%" y="687.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (562 samples, 46.10%)</title><rect x="21.2469%" y="661" width="46.1034%" height="15" fill="rgb(252,48,51)" fg:x="259" fg:w="562"/><text x="21.4969%" y="671.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (562 samples, 46.10%)</title><rect x="21.2469%" y="645" width="46.1034%" height="15" fill="rgb(209,121,1)" fg:x="259" fg:w="562"/><text x="21.4969%" y="655.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (561 samples, 46.02%)</title><rect x="21.3290%" y="629" width="46.0213%" height="15" fill="rgb(231,40,26)" fg:x="260" fg:w="561"/><text x="21.5790%" y="639.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (561 samples, 46.02%)</title><rect x="21.3290%" y="613" width="46.0213%" height="15" fill="rgb(251,8,13)" fg:x="260" fg:w="561"/><text x="21.5790%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (561 samples, 46.02%)</title><rect x="21.3290%" y="597" width="46.0213%" height="15" fill="rgb(231,110,2)" fg:x="260" fg:w="561"/><text x="21.5790%" y="607.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (544 samples, 44.63%)</title><rect x="22.7235%" y="581" width="44.6267%" height="15" fill="rgb(216,153,22)" fg:x="277" fg:w="544"/><text x="22.9735%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (544 samples, 44.63%)</title><rect x="22.7235%" y="565" width="44.6267%" height="15" fill="rgb(249,116,49)" fg:x="277" fg:w="544"/><text x="22.9735%" y="575.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (30 samples, 2.46%)</title><rect x="64.8893%" y="549" width="2.4610%" height="15" fill="rgb(230,89,2)" fg:x="791" fg:w="30"/><text x="65.1393%" y="559.50">pl..</text></g><g><title>plugins_rune::sources::load_sources_from_entity (1 samples, 0.08%)</title><rect x="67.2683%" y="533" width="0.0820%" height="15" fill="rgb(231,125,23)" fg:x="820" fg:w="1"/><text x="67.5183%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (2 samples, 0.16%)</title><rect x="67.3503%" y="677" width="0.1641%" height="15" fill="rgb(212,217,18)" fg:x="821" fg:w="2"/><text x="67.6003%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.5964%" y="645" width="0.0820%" height="15" fill="rgb(210,21,33)" fg:x="824" fg:w="1"/><text x="67.8464%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.5964%" y="629" width="0.0820%" height="15" fill="rgb(241,97,9)" fg:x="824" fg:w="1"/><text x="67.8464%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.5964%" y="613" width="0.0820%" height="15" fill="rgb(221,35,31)" fg:x="824" fg:w="1"/><text x="67.8464%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.5964%" y="597" width="0.0820%" height="15" fill="rgb(251,23,23)" fg:x="824" fg:w="1"/><text x="67.8464%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.5964%" y="581" width="0.0820%" height="15" fill="rgb(227,165,2)" fg:x="824" fg:w="1"/><text x="67.8464%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.5964%" y="565" width="0.0820%" height="15" fill="rgb(242,24,2)" fg:x="824" fg:w="1"/><text x="67.8464%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.5964%" y="549" width="0.0820%" height="15" fill="rgb(242,138,51)" fg:x="824" fg:w="1"/><text x="67.8464%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.5964%" y="533" width="0.0820%" height="15" fill="rgb(220,219,5)" fg:x="824" fg:w="1"/><text x="67.8464%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.5964%" y="517" width="0.0820%" height="15" fill="rgb(247,53,29)" fg:x="824" fg:w="1"/><text x="67.8464%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.5964%" y="501" width="0.0820%" height="15" fill="rgb(233,43,39)" fg:x="824" fg:w="1"/><text x="67.8464%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.5964%" y="485" width="0.0820%" height="15" fill="rgb(230,128,54)" fg:x="824" fg:w="1"/><text x="67.8464%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.5964%" y="469" width="0.0820%" height="15" fill="rgb(218,20,12)" fg:x="824" fg:w="1"/><text x="67.8464%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.5964%" y="453" width="0.0820%" height="15" fill="rgb(206,51,14)" fg:x="824" fg:w="1"/><text x="67.8464%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.5964%" y="437" width="0.0820%" height="15" fill="rgb(223,16,35)" fg:x="824" fg:w="1"/><text x="67.8464%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.5964%" y="421" width="0.0820%" height="15" fill="rgb(226,165,37)" fg:x="824" fg:w="1"/><text x="67.8464%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.5964%" y="405" width="0.0820%" height="15" fill="rgb(240,26,21)" fg:x="824" fg:w="1"/><text x="67.8464%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.6784%" y="597" width="0.1641%" height="15" fill="rgb(240,72,46)" fg:x="825" fg:w="2"/><text x="67.9284%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.7605%" y="581" width="0.0820%" height="15" fill="rgb(211,33,41)" fg:x="826" fg:w="1"/><text x="68.0105%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.8425%" y="549" width="0.0820%" height="15" fill="rgb(224,157,46)" fg:x="827" fg:w="1"/><text x="68.0925%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.8425%" y="533" width="0.0820%" height="15" fill="rgb(223,59,19)" fg:x="827" fg:w="1"/><text x="68.0925%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.8425%" y="517" width="0.0820%" height="15" fill="rgb(239,187,1)" fg:x="827" fg:w="1"/><text x="68.0925%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.8425%" y="501" width="0.0820%" height="15" fill="rgb(226,95,9)" fg:x="827" fg:w="1"/><text x="68.0925%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.8425%" y="485" width="0.0820%" height="15" fill="rgb(234,61,54)" fg:x="827" fg:w="1"/><text x="68.0925%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.8425%" y="469" width="0.0820%" height="15" fill="rgb(205,209,47)" fg:x="827" fg:w="1"/><text x="68.0925%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.8425%" y="453" width="0.0820%" height="15" fill="rgb(228,7,43)" fg:x="827" fg:w="1"/><text x="68.0925%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.8425%" y="437" width="0.0820%" height="15" fill="rgb(240,217,52)" fg:x="827" fg:w="1"/><text x="68.0925%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.8425%" y="421" width="0.0820%" height="15" fill="rgb(211,178,21)" fg:x="827" fg:w="1"/><text x="68.0925%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.8425%" y="405" width="0.0820%" height="15" fill="rgb(205,25,34)" fg:x="827" fg:w="1"/><text x="68.0925%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.8425%" y="389" width="0.0820%" height="15" fill="rgb(209,57,11)" fg:x="827" fg:w="1"/><text x="68.0925%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.8425%" y="373" width="0.0820%" height="15" fill="rgb(221,99,2)" fg:x="827" fg:w="1"/><text x="68.0925%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.8425%" y="357" width="0.0820%" height="15" fill="rgb(232,79,22)" fg:x="827" fg:w="1"/><text x="68.0925%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.8425%" y="341" width="0.0820%" height="15" fill="rgb(221,145,32)" fg:x="827" fg:w="1"/><text x="68.0925%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="67.8425%" y="325" width="0.0820%" height="15" fill="rgb(236,133,36)" fg:x="827" fg:w="1"/><text x="68.0925%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.9245%" y="501" width="0.0820%" height="15" fill="rgb(208,224,44)" fg:x="828" fg:w="1"/><text x="68.1745%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="67.9245%" y="485" width="0.0820%" height="15" fill="rgb(235,143,15)" fg:x="828" fg:w="1"/><text x="68.1745%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="67.6784%" y="645" width="0.4102%" height="15" fill="rgb(249,83,27)" fg:x="825" fg:w="5"/><text x="67.9284%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="67.6784%" y="629" width="0.4102%" height="15" fill="rgb(238,226,19)" fg:x="825" fg:w="5"/><text x="67.9284%" y="639.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.41%)</title><rect x="67.6784%" y="613" width="0.4102%" height="15" fill="rgb(226,206,27)" fg:x="825" fg:w="5"/><text x="67.9284%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="67.8425%" y="597" width="0.2461%" height="15" fill="rgb(251,182,9)" fg:x="827" fg:w="3"/><text x="68.0925%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.25%)</title><rect x="67.8425%" y="581" width="0.2461%" height="15" fill="rgb(212,140,41)" fg:x="827" fg:w="3"/><text x="68.0925%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.25%)</title><rect x="67.8425%" y="565" width="0.2461%" height="15" fill="rgb(220,106,18)" fg:x="827" fg:w="3"/><text x="68.0925%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="67.9245%" y="549" width="0.1641%" height="15" fill="rgb(252,46,41)" fg:x="828" fg:w="2"/><text x="68.1745%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="67.9245%" y="533" width="0.1641%" height="15" fill="rgb(209,222,15)" fg:x="828" fg:w="2"/><text x="68.1745%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="67.9245%" y="517" width="0.1641%" height="15" fill="rgb(233,83,50)" fg:x="828" fg:w="2"/><text x="68.1745%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.0066%" y="501" width="0.0820%" height="15" fill="rgb(205,212,0)" fg:x="829" fg:w="1"/><text x="68.2566%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0066%" y="485" width="0.0820%" height="15" fill="rgb(235,117,51)" fg:x="829" fg:w="1"/><text x="68.2566%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="68.0066%" y="469" width="0.0820%" height="15" fill="rgb(233,133,48)" fg:x="829" fg:w="1"/><text x="68.2566%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="68.0066%" y="453" width="0.0820%" height="15" fill="rgb(219,3,2)" fg:x="829" fg:w="1"/><text x="68.2566%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="68.0066%" y="437" width="0.0820%" height="15" fill="rgb(225,80,52)" fg:x="829" fg:w="1"/><text x="68.2566%" y="447.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="68.0066%" y="421" width="0.0820%" height="15" fill="rgb(235,195,42)" fg:x="829" fg:w="1"/><text x="68.2566%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="68.0066%" y="405" width="0.0820%" height="15" fill="rgb(240,207,46)" fg:x="829" fg:w="1"/><text x="68.2566%" y="415.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="68.0066%" y="389" width="0.0820%" height="15" fill="rgb(236,112,50)" fg:x="829" fg:w="1"/><text x="68.2566%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="68.0066%" y="373" width="0.0820%" height="15" fill="rgb(249,151,27)" fg:x="829" fg:w="1"/><text x="68.2566%" y="383.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="68.0066%" y="357" width="0.0820%" height="15" fill="rgb(253,223,52)" fg:x="829" fg:w="1"/><text x="68.2566%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="68.0066%" y="341" width="0.0820%" height="15" fill="rgb(215,55,33)" fg:x="829" fg:w="1"/><text x="68.2566%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="68.0066%" y="325" width="0.0820%" height="15" fill="rgb(207,24,17)" fg:x="829" fg:w="1"/><text x="68.2566%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="68.0066%" y="309" width="0.0820%" height="15" fill="rgb(218,169,32)" fg:x="829" fg:w="1"/><text x="68.2566%" y="319.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="68.0066%" y="293" width="0.0820%" height="15" fill="rgb(209,210,6)" fg:x="829" fg:w="1"/><text x="68.2566%" y="303.50"></text></g><g><title>engine::session::internal::Added::find_refs (8 samples, 0.66%)</title><rect x="67.5144%" y="677" width="0.6563%" height="15" fill="rgb(225,208,8)" fg:x="823" fg:w="8"/><text x="67.7644%" y="687.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.66%)</title><rect x="67.5144%" y="661" width="0.6563%" height="15" fill="rgb(238,14,32)" fg:x="823" fg:w="8"/><text x="67.7644%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.0886%" y="645" width="0.0820%" height="15" fill="rgb(211,137,3)" fg:x="830" fg:w="1"/><text x="68.3386%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0886%" y="629" width="0.0820%" height="15" fill="rgb(207,171,19)" fg:x="830" fg:w="1"/><text x="68.3386%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.0886%" y="613" width="0.0820%" height="15" fill="rgb(250,80,8)" fg:x="830" fg:w="1"/><text x="68.3386%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="68.0886%" y="597" width="0.0820%" height="15" fill="rgb(209,103,53)" fg:x="830" fg:w="1"/><text x="68.3386%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.0886%" y="581" width="0.0820%" height="15" fill="rgb(233,198,10)" fg:x="830" fg:w="1"/><text x="68.3386%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.0886%" y="565" width="0.0820%" height="15" fill="rgb(236,125,25)" fg:x="830" fg:w="1"/><text x="68.3386%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.0886%" y="549" width="0.0820%" height="15" fill="rgb(254,182,48)" fg:x="830" fg:w="1"/><text x="68.3386%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.0886%" y="533" width="0.0820%" height="15" fill="rgb(216,108,44)" fg:x="830" fg:w="1"/><text x="68.3386%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.1706%" y="661" width="0.1641%" height="15" fill="rgb(222,72,39)" fg:x="831" fg:w="2"/><text x="68.4206%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.1706%" y="645" width="0.1641%" height="15" fill="rgb(252,70,39)" fg:x="831" fg:w="2"/><text x="68.4206%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.1706%" y="629" width="0.1641%" height="15" fill="rgb(243,99,34)" fg:x="831" fg:w="2"/><text x="68.4206%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.1706%" y="613" width="0.1641%" height="15" fill="rgb(252,109,12)" fg:x="831" fg:w="2"/><text x="68.4206%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.1706%" y="597" width="0.1641%" height="15" fill="rgb(211,186,10)" fg:x="831" fg:w="2"/><text x="68.4206%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.2527%" y="581" width="0.0820%" height="15" fill="rgb(246,90,8)" fg:x="832" fg:w="1"/><text x="68.5027%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.2527%" y="565" width="0.0820%" height="15" fill="rgb(226,91,24)" fg:x="832" fg:w="1"/><text x="68.5027%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.2527%" y="549" width="0.0820%" height="15" fill="rgb(216,28,44)" fg:x="832" fg:w="1"/><text x="68.5027%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.2527%" y="533" width="0.0820%" height="15" fill="rgb(229,36,0)" fg:x="832" fg:w="1"/><text x="68.5027%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.2527%" y="517" width="0.0820%" height="15" fill="rgb(245,97,18)" fg:x="832" fg:w="1"/><text x="68.5027%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.2527%" y="501" width="0.0820%" height="15" fill="rgb(241,97,54)" fg:x="832" fg:w="1"/><text x="68.5027%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.2527%" y="485" width="0.0820%" height="15" fill="rgb(234,125,17)" fg:x="832" fg:w="1"/><text x="68.5027%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.2527%" y="469" width="0.0820%" height="15" fill="rgb(228,172,39)" fg:x="832" fg:w="1"/><text x="68.5027%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.2527%" y="453" width="0.0820%" height="15" fill="rgb(227,169,1)" fg:x="832" fg:w="1"/><text x="68.5027%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.2527%" y="437" width="0.0820%" height="15" fill="rgb(206,13,35)" fg:x="832" fg:w="1"/><text x="68.5027%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.2527%" y="421" width="0.0820%" height="15" fill="rgb(211,117,30)" fg:x="832" fg:w="1"/><text x="68.5027%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.2527%" y="405" width="0.0820%" height="15" fill="rgb(230,198,4)" fg:x="832" fg:w="1"/><text x="68.5027%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.3347%" y="661" width="0.0820%" height="15" fill="rgb(213,87,54)" fg:x="833" fg:w="1"/><text x="68.5847%" y="671.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="68.4167%" y="661" width="0.0820%" height="15" fill="rgb(248,43,22)" fg:x="834" fg:w="1"/><text x="68.6667%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4167%" y="645" width="0.0820%" height="15" fill="rgb(213,175,48)" fg:x="834" fg:w="1"/><text x="68.6667%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.4167%" y="629" width="0.0820%" height="15" fill="rgb(252,55,9)" fg:x="834" fg:w="1"/><text x="68.6667%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="68.4167%" y="613" width="0.0820%" height="15" fill="rgb(231,72,33)" fg:x="834" fg:w="1"/><text x="68.6667%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="68.4988%" y="613" width="0.0820%" height="15" fill="rgb(213,2,54)" fg:x="835" fg:w="1"/><text x="68.7488%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.5808%" y="613" width="0.0820%" height="15" fill="rgb(208,88,25)" fg:x="836" fg:w="1"/><text x="68.8308%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.5808%" y="597" width="0.0820%" height="15" fill="rgb(215,117,13)" fg:x="836" fg:w="1"/><text x="68.8308%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.5808%" y="581" width="0.0820%" height="15" fill="rgb(243,147,21)" fg:x="836" fg:w="1"/><text x="68.8308%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.6628%" y="565" width="0.0820%" height="15" fill="rgb(208,215,36)" fg:x="837" fg:w="1"/><text x="68.9128%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.6628%" y="549" width="0.0820%" height="15" fill="rgb(238,187,24)" fg:x="837" fg:w="1"/><text x="68.9128%" y="559.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="68.6628%" y="533" width="0.0820%" height="15" fill="rgb(214,173,11)" fg:x="837" fg:w="1"/><text x="68.9128%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.6628%" y="517" width="0.0820%" height="15" fill="rgb(222,71,20)" fg:x="837" fg:w="1"/><text x="68.9128%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.7449%" y="565" width="0.0820%" height="15" fill="rgb(242,125,4)" fg:x="838" fg:w="1"/><text x="68.9949%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.7449%" y="549" width="0.0820%" height="15" fill="rgb(217,101,52)" fg:x="838" fg:w="1"/><text x="68.9949%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.41%)</title><rect x="68.4988%" y="661" width="0.4102%" height="15" fill="rgb(223,2,50)" fg:x="835" fg:w="5"/><text x="68.7488%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="68.4988%" y="645" width="0.4102%" height="15" fill="rgb(225,197,9)" fg:x="835" fg:w="5"/><text x="68.7488%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="68.4988%" y="629" width="0.4102%" height="15" fill="rgb(234,76,27)" fg:x="835" fg:w="5"/><text x="68.7488%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.25%)</title><rect x="68.6628%" y="613" width="0.2461%" height="15" fill="rgb(213,161,26)" fg:x="837" fg:w="3"/><text x="68.9128%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="68.6628%" y="597" width="0.2461%" height="15" fill="rgb(210,228,2)" fg:x="837" fg:w="3"/><text x="68.9128%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.25%)</title><rect x="68.6628%" y="581" width="0.2461%" height="15" fill="rgb(235,4,16)" fg:x="837" fg:w="3"/><text x="68.9128%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8269%" y="565" width="0.0820%" height="15" fill="rgb(235,83,42)" fg:x="839" fg:w="1"/><text x="69.0769%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8269%" y="549" width="0.0820%" height="15" fill="rgb(207,116,39)" fg:x="839" fg:w="1"/><text x="69.0769%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="68.8269%" y="533" width="0.0820%" height="15" fill="rgb(253,206,9)" fg:x="839" fg:w="1"/><text x="69.0769%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8269%" y="517" width="0.0820%" height="15" fill="rgb(234,32,47)" fg:x="839" fg:w="1"/><text x="69.0769%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8269%" y="501" width="0.0820%" height="15" fill="rgb(247,40,39)" fg:x="839" fg:w="1"/><text x="69.0769%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="68.8269%" y="485" width="0.0820%" height="15" fill="rgb(236,199,13)" fg:x="839" fg:w="1"/><text x="69.0769%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8269%" y="469" width="0.0820%" height="15" fill="rgb(240,127,44)" fg:x="839" fg:w="1"/><text x="69.0769%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.9089%" y="517" width="0.0820%" height="15" fill="rgb(248,220,47)" fg:x="840" fg:w="1"/><text x="69.1589%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.9089%" y="501" width="0.0820%" height="15" fill="rgb(240,78,9)" fg:x="840" fg:w="1"/><text x="69.1589%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9089%" y="485" width="0.0820%" height="15" fill="rgb(245,119,5)" fg:x="840" fg:w="1"/><text x="69.1589%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9089%" y="469" width="0.0820%" height="15" fill="rgb(238,175,31)" fg:x="840" fg:w="1"/><text x="69.1589%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.9089%" y="453" width="0.0820%" height="15" fill="rgb(232,140,42)" fg:x="840" fg:w="1"/><text x="69.1589%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.9089%" y="597" width="0.1641%" height="15" fill="rgb(218,179,7)" fg:x="840" fg:w="2"/><text x="69.1589%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.9089%" y="581" width="0.1641%" height="15" fill="rgb(232,79,27)" fg:x="840" fg:w="2"/><text x="69.1589%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.9089%" y="565" width="0.1641%" height="15" fill="rgb(247,11,19)" fg:x="840" fg:w="2"/><text x="69.1589%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.9089%" y="549" width="0.1641%" height="15" fill="rgb(216,171,54)" fg:x="840" fg:w="2"/><text x="69.1589%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.9089%" y="533" width="0.1641%" height="15" fill="rgb(233,158,36)" fg:x="840" fg:w="2"/><text x="69.1589%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.9910%" y="517" width="0.0820%" height="15" fill="rgb(215,48,47)" fg:x="841" fg:w="1"/><text x="69.2410%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9910%" y="501" width="0.0820%" height="15" fill="rgb(230,223,15)" fg:x="841" fg:w="1"/><text x="69.2410%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (22 samples, 1.80%)</title><rect x="67.3503%" y="693" width="1.8048%" height="15" fill="rgb(234,49,19)" fg:x="821" fg:w="22"/><text x="67.6003%" y="703.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.98%)</title><rect x="68.1706%" y="677" width="0.9844%" height="15" fill="rgb(232,89,25)" fg:x="831" fg:w="12"/><text x="68.4206%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.25%)</title><rect x="68.9089%" y="661" width="0.2461%" height="15" fill="rgb(237,206,28)" fg:x="840" fg:w="3"/><text x="69.1589%" y="671.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.25%)</title><rect x="68.9089%" y="645" width="0.2461%" height="15" fill="rgb(249,68,37)" fg:x="840" fg:w="3"/><text x="69.1589%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="68.9089%" y="629" width="0.2461%" height="15" fill="rgb(226,99,43)" fg:x="840" fg:w="3"/><text x="69.1589%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="68.9089%" y="613" width="0.2461%" height="15" fill="rgb(216,46,28)" fg:x="840" fg:w="3"/><text x="69.1589%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.0730%" y="597" width="0.0820%" height="15" fill="rgb(216,33,9)" fg:x="842" fg:w="1"/><text x="69.3230%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.0730%" y="581" width="0.0820%" height="15" fill="rgb(216,129,4)" fg:x="842" fg:w="1"/><text x="69.3230%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="69.1550%" y="645" width="0.2461%" height="15" fill="rgb(216,106,3)" fg:x="843" fg:w="3"/><text x="69.4050%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.2371%" y="629" width="0.1641%" height="15" fill="rgb(217,79,45)" fg:x="844" fg:w="2"/><text x="69.4871%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.2371%" y="613" width="0.1641%" height="15" fill="rgb(239,98,13)" fg:x="844" fg:w="2"/><text x="69.4871%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.2371%" y="597" width="0.1641%" height="15" fill="rgb(221,115,4)" fg:x="844" fg:w="2"/><text x="69.4871%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3191%" y="581" width="0.0820%" height="15" fill="rgb(215,85,0)" fg:x="845" fg:w="1"/><text x="69.5691%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.3191%" y="565" width="0.0820%" height="15" fill="rgb(230,62,15)" fg:x="845" fg:w="1"/><text x="69.5691%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.3191%" y="549" width="0.0820%" height="15" fill="rgb(247,162,2)" fg:x="845" fg:w="1"/><text x="69.5691%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.3191%" y="533" width="0.0820%" height="15" fill="rgb(212,112,32)" fg:x="845" fg:w="1"/><text x="69.5691%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.3191%" y="517" width="0.0820%" height="15" fill="rgb(216,137,9)" fg:x="845" fg:w="1"/><text x="69.5691%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.3191%" y="501" width="0.0820%" height="15" fill="rgb(250,149,33)" fg:x="845" fg:w="1"/><text x="69.5691%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.3191%" y="485" width="0.0820%" height="15" fill="rgb(246,124,31)" fg:x="845" fg:w="1"/><text x="69.5691%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.3191%" y="469" width="0.0820%" height="15" fill="rgb(216,210,22)" fg:x="845" fg:w="1"/><text x="69.5691%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.3191%" y="453" width="0.0820%" height="15" fill="rgb(228,128,36)" fg:x="845" fg:w="1"/><text x="69.5691%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.3191%" y="437" width="0.0820%" height="15" fill="rgb(231,41,0)" fg:x="845" fg:w="1"/><text x="69.5691%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.3191%" y="421" width="0.0820%" height="15" fill="rgb(232,61,26)" fg:x="845" fg:w="1"/><text x="69.5691%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.3191%" y="405" width="0.0820%" height="15" fill="rgb(217,60,9)" fg:x="845" fg:w="1"/><text x="69.5691%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.3191%" y="389" width="0.0820%" height="15" fill="rgb(233,41,35)" fg:x="845" fg:w="1"/><text x="69.5691%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="69.4011%" y="597" width="0.0820%" height="15" fill="rgb(253,139,43)" fg:x="846" fg:w="1"/><text x="69.6511%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4832%" y="549" width="0.0820%" height="15" fill="rgb(245,100,51)" fg:x="847" fg:w="1"/><text x="69.7332%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.25%)</title><rect x="69.4011%" y="645" width="0.2461%" height="15" fill="rgb(250,208,18)" fg:x="846" fg:w="3"/><text x="69.6511%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="69.4011%" y="629" width="0.2461%" height="15" fill="rgb(245,33,2)" fg:x="846" fg:w="3"/><text x="69.6511%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="69.4011%" y="613" width="0.2461%" height="15" fill="rgb(244,171,31)" fg:x="846" fg:w="3"/><text x="69.6511%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="69.4832%" y="597" width="0.1641%" height="15" fill="rgb(229,1,43)" fg:x="847" fg:w="2"/><text x="69.7332%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.4832%" y="581" width="0.1641%" height="15" fill="rgb(223,153,28)" fg:x="847" fg:w="2"/><text x="69.7332%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.4832%" y="565" width="0.1641%" height="15" fill="rgb(241,4,46)" fg:x="847" fg:w="2"/><text x="69.7332%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.5652%" y="549" width="0.0820%" height="15" fill="rgb(230,81,11)" fg:x="848" fg:w="1"/><text x="69.8152%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.5652%" y="533" width="0.0820%" height="15" fill="rgb(253,204,39)" fg:x="848" fg:w="1"/><text x="69.8152%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.5652%" y="517" width="0.0820%" height="15" fill="rgb(250,96,8)" fg:x="848" fg:w="1"/><text x="69.8152%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.5652%" y="501" width="0.0820%" height="15" fill="rgb(219,89,54)" fg:x="848" fg:w="1"/><text x="69.8152%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (853 samples, 69.98%)</title><rect x="0.0000%" y="773" width="69.9754%" height="15" fill="rgb(235,136,39)" fg:x="0" fg:w="853"/><text x="0.2500%" y="783.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (853 samples, 69.98%)</title><rect x="0.0000%" y="757" width="69.9754%" height="15" fill="rgb(230,155,37)" fg:x="0" fg:w="853"/><text x="0.2500%" y="767.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (853 samples, 69.98%)</title><rect x="0.0000%" y="741" width="69.9754%" height="15" fill="rgb(235,199,50)" fg:x="0" fg:w="853"/><text x="0.2500%" y="751.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (618 samples, 50.70%)</title><rect x="19.2781%" y="725" width="50.6973%" height="15" fill="rgb(227,81,32)" fg:x="235" fg:w="618"/><text x="19.5281%" y="735.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (618 samples, 50.70%)</title><rect x="19.2781%" y="709" width="50.6973%" height="15" fill="rgb(225,6,28)" fg:x="235" fg:w="618"/><text x="19.5281%" y="719.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (10 samples, 0.82%)</title><rect x="69.1550%" y="693" width="0.8203%" height="15" fill="rgb(207,211,17)" fg:x="843" fg:w="10"/><text x="69.4050%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.82%)</title><rect x="69.1550%" y="677" width="0.8203%" height="15" fill="rgb(228,31,49)" fg:x="843" fg:w="10"/><text x="69.4050%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.82%)</title><rect x="69.1550%" y="661" width="0.8203%" height="15" fill="rgb(230,185,3)" fg:x="843" fg:w="10"/><text x="69.4050%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.33%)</title><rect x="69.6473%" y="645" width="0.3281%" height="15" fill="rgb(206,167,15)" fg:x="849" fg:w="4"/><text x="69.8973%" y="655.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="69.6473%" y="629" width="0.3281%" height="15" fill="rgb(234,2,36)" fg:x="849" fg:w="4"/><text x="69.8973%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="69.6473%" y="613" width="0.3281%" height="15" fill="rgb(239,160,29)" fg:x="849" fg:w="4"/><text x="69.8973%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="69.6473%" y="597" width="0.3281%" height="15" fill="rgb(236,117,2)" fg:x="849" fg:w="4"/><text x="69.8973%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="69.7293%" y="581" width="0.2461%" height="15" fill="rgb(215,117,37)" fg:x="850" fg:w="3"/><text x="69.9793%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="69.7293%" y="565" width="0.2461%" height="15" fill="rgb(244,48,36)" fg:x="850" fg:w="3"/><text x="69.9793%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="69.7293%" y="549" width="0.2461%" height="15" fill="rgb(223,101,37)" fg:x="850" fg:w="3"/><text x="69.9793%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.8934%" y="533" width="0.0820%" height="15" fill="rgb(205,200,1)" fg:x="852" fg:w="1"/><text x="70.1434%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.8934%" y="517" width="0.0820%" height="15" fill="rgb(209,193,20)" fg:x="852" fg:w="1"/><text x="70.1434%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.8934%" y="501" width="0.0820%" height="15" fill="rgb(214,63,13)" fg:x="852" fg:w="1"/><text x="70.1434%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.8934%" y="485" width="0.0820%" height="15" fill="rgb(253,113,46)" fg:x="852" fg:w="1"/><text x="70.1434%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.8934%" y="469" width="0.0820%" height="15" fill="rgb(237,103,34)" fg:x="852" fg:w="1"/><text x="70.1434%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.8934%" y="453" width="0.0820%" height="15" fill="rgb(223,38,25)" fg:x="852" fg:w="1"/><text x="70.1434%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="69.8934%" y="437" width="0.0820%" height="15" fill="rgb(251,32,32)" fg:x="852" fg:w="1"/><text x="70.1434%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="70.0574%" y="709" width="0.1641%" height="15" fill="rgb(228,65,22)" fg:x="854" fg:w="2"/><text x="70.3074%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="70.0574%" y="693" width="0.1641%" height="15" fill="rgb(205,11,46)" fg:x="854" fg:w="2"/><text x="70.3074%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="70.0574%" y="677" width="0.1641%" height="15" fill="rgb(220,35,2)" fg:x="854" fg:w="2"/><text x="70.3074%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="70.0574%" y="661" width="0.1641%" height="15" fill="rgb(217,151,17)" fg:x="854" fg:w="2"/><text x="70.3074%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="70.0574%" y="645" width="0.1641%" height="15" fill="rgb(243,227,35)" fg:x="854" fg:w="2"/><text x="70.3074%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="70.0574%" y="629" width="0.1641%" height="15" fill="rgb(214,0,34)" fg:x="854" fg:w="2"/><text x="70.3074%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.2215%" y="597" width="0.0820%" height="15" fill="rgb(209,42,37)" fg:x="856" fg:w="1"/><text x="70.4715%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.3035%" y="597" width="0.0820%" height="15" fill="rgb(251,176,30)" fg:x="857" fg:w="1"/><text x="70.5535%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.3035%" y="581" width="0.0820%" height="15" fill="rgb(223,64,40)" fg:x="857" fg:w="1"/><text x="70.5535%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="70.2215%" y="645" width="0.2461%" height="15" fill="rgb(227,180,23)" fg:x="856" fg:w="3"/><text x="70.4715%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (3 samples, 0.25%)</title><rect x="70.2215%" y="629" width="0.2461%" height="15" fill="rgb(220,137,31)" fg:x="856" fg:w="3"/><text x="70.4715%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.25%)</title><rect x="70.2215%" y="613" width="0.2461%" height="15" fill="rgb(245,124,25)" fg:x="856" fg:w="3"/><text x="70.4715%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.3856%" y="597" width="0.0820%" height="15" fill="rgb(217,157,5)" fg:x="858" fg:w="1"/><text x="70.6356%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="70.3856%" y="581" width="0.0820%" height="15" fill="rgb(225,59,2)" fg:x="858" fg:w="1"/><text x="70.6356%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="70.3856%" y="565" width="0.0820%" height="15" fill="rgb(220,182,9)" fg:x="858" fg:w="1"/><text x="70.6356%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.3856%" y="549" width="0.0820%" height="15" fill="rgb(249,54,24)" fg:x="858" fg:w="1"/><text x="70.6356%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.66%)</title><rect x="69.9754%" y="725" width="0.6563%" height="15" fill="rgb(216,89,17)" fg:x="853" fg:w="8"/><text x="70.2254%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (5 samples, 0.41%)</title><rect x="70.2215%" y="709" width="0.4102%" height="15" fill="rgb(245,20,45)" fg:x="856" fg:w="5"/><text x="70.4715%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="70.2215%" y="693" width="0.4102%" height="15" fill="rgb(230,83,14)" fg:x="856" fg:w="5"/><text x="70.4715%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (5 samples, 0.41%)</title><rect x="70.2215%" y="677" width="0.4102%" height="15" fill="rgb(246,109,11)" fg:x="856" fg:w="5"/><text x="70.4715%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="70.2215%" y="661" width="0.4102%" height="15" fill="rgb(235,85,23)" fg:x="856" fg:w="5"/><text x="70.4715%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="70.4676%" y="645" width="0.1641%" height="15" fill="rgb(215,101,36)" fg:x="859" fg:w="2"/><text x="70.7176%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.5496%" y="629" width="0.0820%" height="15" fill="rgb(228,140,31)" fg:x="860" fg:w="1"/><text x="70.7996%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.5496%" y="613" width="0.0820%" height="15" fill="rgb(234,162,37)" fg:x="860" fg:w="1"/><text x="70.7996%" y="623.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="70.7137%" y="613" width="0.1641%" height="15" fill="rgb(221,0,24)" fg:x="862" fg:w="2"/><text x="70.9637%" y="623.50"></text></g><g><title>glob::fill_todo (2 samples, 0.16%)</title><rect x="70.7137%" y="597" width="0.1641%" height="15" fill="rgb(230,161,41)" fg:x="862" fg:w="2"/><text x="70.9637%" y="607.50"></text></g><g><title>glob::is_dir (2 samples, 0.16%)</title><rect x="70.7137%" y="581" width="0.1641%" height="15" fill="rgb(224,46,24)" fg:x="862" fg:w="2"/><text x="70.9637%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="70.7137%" y="565" width="0.1641%" height="15" fill="rgb(205,59,32)" fg:x="862" fg:w="2"/><text x="70.9637%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="70.7137%" y="549" width="0.1641%" height="15" fill="rgb(239,31,20)" fg:x="862" fg:w="2"/><text x="70.9637%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="70.7137%" y="533" width="0.1641%" height="15" fill="rgb(233,149,44)" fg:x="862" fg:w="2"/><text x="70.9637%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="70.7137%" y="517" width="0.1641%" height="15" fill="rgb(243,47,26)" fg:x="862" fg:w="2"/><text x="70.9637%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="70.7137%" y="501" width="0.1641%" height="15" fill="rgb(233,107,5)" fg:x="862" fg:w="2"/><text x="70.9637%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="70.7137%" y="485" width="0.1641%" height="15" fill="rgb(248,140,33)" fg:x="862" fg:w="2"/><text x="70.9637%" y="495.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="70.7137%" y="469" width="0.1641%" height="15" fill="rgb(228,178,19)" fg:x="862" fg:w="2"/><text x="70.9637%" y="479.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.9598%" y="565" width="0.0820%" height="15" fill="rgb(224,39,49)" fg:x="865" fg:w="1"/><text x="71.2098%" y="575.50"></text></g><g><title>std::path::Components::include_cur_dir (1 samples, 0.08%)</title><rect x="70.9598%" y="549" width="0.0820%" height="15" fill="rgb(246,56,47)" fg:x="865" fg:w="1"/><text x="71.2098%" y="559.50"></text></g><g><title>std::path::Components::is_sep_byte (1 samples, 0.08%)</title><rect x="70.9598%" y="533" width="0.0820%" height="15" fill="rgb(220,73,27)" fg:x="865" fg:w="1"/><text x="71.2098%" y="543.50"></text></g><g><title>std::sys::unix::path::is_sep_byte (1 samples, 0.08%)</title><rect x="70.9598%" y="517" width="0.0820%" height="15" fill="rgb(239,112,21)" fg:x="865" fg:w="1"/><text x="71.2098%" y="527.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.49%)</title><rect x="70.6317%" y="645" width="0.4922%" height="15" fill="rgb(253,14,51)" fg:x="861" fg:w="6"/><text x="70.8817%" y="655.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (6 samples, 0.49%)</title><rect x="70.6317%" y="629" width="0.4922%" height="15" fill="rgb(215,58,12)" fg:x="861" fg:w="6"/><text x="70.8817%" y="639.50"></text></g><g><title>glob::glob (3 samples, 0.25%)</title><rect x="70.8778%" y="613" width="0.2461%" height="15" fill="rgb(207,181,19)" fg:x="864" fg:w="3"/><text x="71.1278%" y="623.50"></text></g><g><title>glob::glob_with (3 samples, 0.25%)</title><rect x="70.8778%" y="597" width="0.2461%" height="15" fill="rgb(211,214,34)" fg:x="864" fg:w="3"/><text x="71.1278%" y="607.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="70.8778%" y="581" width="0.2461%" height="15" fill="rgb(243,124,39)" fg:x="864" fg:w="3"/><text x="71.1278%" y="591.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.08%)</title><rect x="71.0418%" y="565" width="0.0820%" height="15" fill="rgb(248,135,21)" fg:x="866" fg:w="1"/><text x="71.2918%" y="575.50"></text></g><g><title>std::ffi::os_str::OsString::push (1 samples, 0.08%)</title><rect x="71.0418%" y="549" width="0.0820%" height="15" fill="rgb(245,218,3)" fg:x="866" fg:w="1"/><text x="71.2918%" y="559.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="71.0418%" y="533" width="0.0820%" height="15" fill="rgb(225,144,22)" fg:x="866" fg:w="1"/><text x="71.2918%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="71.0418%" y="517" width="0.0820%" height="15" fill="rgb(250,90,15)" fg:x="866" fg:w="1"/><text x="71.2918%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="71.0418%" y="501" width="0.0820%" height="15" fill="rgb(224,64,29)" fg:x="866" fg:w="1"/><text x="71.2918%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="71.0418%" y="485" width="0.0820%" height="15" fill="rgb(217,50,47)" fg:x="866" fg:w="1"/><text x="71.2918%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="71.0418%" y="469" width="0.0820%" height="15" fill="rgb(231,159,47)" fg:x="866" fg:w="1"/><text x="71.2918%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="71.0418%" y="453" width="0.0820%" height="15" fill="rgb(213,89,29)" fg:x="866" fg:w="1"/><text x="71.2918%" y="463.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="71.1239%" y="613" width="0.0820%" height="15" fill="rgb(243,90,23)" fg:x="867" fg:w="1"/><text x="71.3739%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="71.1239%" y="597" width="0.0820%" height="15" fill="rgb(213,21,6)" fg:x="867" fg:w="1"/><text x="71.3739%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="71.1239%" y="581" width="0.0820%" height="15" fill="rgb(237,139,17)" fg:x="867" fg:w="1"/><text x="71.3739%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.1239%" y="565" width="0.0820%" height="15" fill="rgb(250,147,17)" fg:x="867" fg:w="1"/><text x="71.3739%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::actions::TakeOutAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="71.2059%" y="581" width="0.0820%" height="15" fill="rgb(212,208,42)" fg:x="868" fg:w="1"/><text x="71.4559%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="71.2059%" y="565" width="0.0820%" height="15" fill="rgb(215,229,40)" fg:x="868" fg:w="1"/><text x="71.4559%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.2059%" y="549" width="0.0820%" height="15" fill="rgb(206,204,1)" fg:x="868" fg:w="1"/><text x="71.4559%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.2059%" y="533" width="0.0820%" height="15" fill="rgb(230,62,32)" fg:x="868" fg:w="1"/><text x="71.4559%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2059%" y="517" width="0.0820%" height="15" fill="rgb(223,22,42)" fg:x="868" fg:w="1"/><text x="71.4559%" y="527.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="71.2059%" y="613" width="0.1641%" height="15" fill="rgb(244,6,23)" fg:x="868" fg:w="2"/><text x="71.4559%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="71.2059%" y="597" width="0.1641%" height="15" fill="rgb(240,221,42)" fg:x="868" fg:w="2"/><text x="71.4559%" y="607.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="71.2879%" y="581" width="0.0820%" height="15" fill="rgb(222,74,7)" fg:x="869" fg:w="1"/><text x="71.5379%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="71.2879%" y="565" width="0.0820%" height="15" fill="rgb(227,191,38)" fg:x="869" fg:w="1"/><text x="71.5379%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="71.1239%" y="645" width="0.3281%" height="15" fill="rgb(227,89,34)" fg:x="867" fg:w="4"/><text x="71.3739%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.33%)</title><rect x="71.1239%" y="629" width="0.3281%" height="15" fill="rgb(215,153,25)" fg:x="867" fg:w="4"/><text x="71.3739%" y="639.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="71.3700%" y="613" width="0.0820%" height="15" fill="rgb(215,153,46)" fg:x="870" fg:w="1"/><text x="71.6200%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="71.3700%" y="597" width="0.0820%" height="15" fill="rgb(242,38,52)" fg:x="870" fg:w="1"/><text x="71.6200%" y="607.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="71.3700%" y="581" width="0.0820%" height="15" fill="rgb(218,112,4)" fg:x="870" fg:w="1"/><text x="71.6200%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="71.4520%" y="645" width="0.0820%" height="15" fill="rgb(231,210,31)" fg:x="871" fg:w="1"/><text x="71.7020%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.4520%" y="629" width="0.0820%" height="15" fill="rgb(245,223,36)" fg:x="871" fg:w="1"/><text x="71.7020%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (13 samples, 1.07%)</title><rect x="70.6317%" y="661" width="1.0664%" height="15" fill="rgb(246,41,2)" fg:x="861" fg:w="13"/><text x="70.8817%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="71.5340%" y="645" width="0.1641%" height="15" fill="rgb(227,51,31)" fg:x="872" fg:w="2"/><text x="71.7840%" y="655.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="71.5340%" y="629" width="0.1641%" height="15" fill="rgb(222,95,26)" fg:x="872" fg:w="2"/><text x="71.7840%" y="639.50"></text></g><g><title>engine::session::Session::initialize (14 samples, 1.15%)</title><rect x="70.6317%" y="677" width="1.1485%" height="15" fill="rgb(224,190,1)" fg:x="861" fg:w="14"/><text x="70.8817%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="71.6981%" y="661" width="0.0820%" height="15" fill="rgb(209,90,42)" fg:x="874" fg:w="1"/><text x="71.9481%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.6981%" y="645" width="0.0820%" height="15" fill="rgb(232,225,50)" fg:x="874" fg:w="1"/><text x="71.9481%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6981%" y="629" width="0.0820%" height="15" fill="rgb(239,89,47)" fg:x="874" fg:w="1"/><text x="71.9481%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (15 samples, 1.23%)</title><rect x="70.6317%" y="725" width="1.2305%" height="15" fill="rgb(230,212,50)" fg:x="861" fg:w="15"/><text x="70.8817%" y="735.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (15 samples, 1.23%)</title><rect x="70.6317%" y="709" width="1.2305%" height="15" fill="rgb(252,1,27)" fg:x="861" fg:w="15"/><text x="70.8817%" y="719.50"></text></g><g><title>engine::session::Session::new (15 samples, 1.23%)</title><rect x="70.6317%" y="693" width="1.2305%" height="15" fill="rgb(237,179,41)" fg:x="861" fg:w="15"/><text x="70.8817%" y="703.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="71.7801%" y="677" width="0.0820%" height="15" fill="rgb(214,151,37)" fg:x="875" fg:w="1"/><text x="72.0301%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.7801%" y="661" width="0.0820%" height="15" fill="rgb(211,74,11)" fg:x="875" fg:w="1"/><text x="72.0301%" y="671.50"></text></g><g><title>&lt;plugins_core::helping::HelpingPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="71.7801%" y="645" width="0.0820%" height="15" fill="rgb(242,21,21)" fg:x="875" fg:w="1"/><text x="72.0301%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="71.8622%" y="709" width="0.0820%" height="15" fill="rgb(226,106,43)" fg:x="876" fg:w="1"/><text x="72.1122%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.9442%" y="549" width="0.0820%" height="15" fill="rgb(229,162,39)" fg:x="877" fg:w="1"/><text x="72.1942%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.9442%" y="533" width="0.0820%" height="15" fill="rgb(228,159,25)" fg:x="877" fg:w="1"/><text x="72.1942%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="71.9442%" y="581" width="0.1641%" height="15" fill="rgb(237,32,23)" fg:x="877" fg:w="2"/><text x="72.1942%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="71.9442%" y="565" width="0.1641%" height="15" fill="rgb(212,35,32)" fg:x="877" fg:w="2"/><text x="72.1942%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.0263%" y="549" width="0.0820%" height="15" fill="rgb(215,199,1)" fg:x="878" fg:w="1"/><text x="72.2763%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.0263%" y="533" width="0.0820%" height="15" fill="rgb(215,67,13)" fg:x="878" fg:w="1"/><text x="72.2763%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="71.9442%" y="613" width="0.2461%" height="15" fill="rgb(216,20,47)" fg:x="877" fg:w="3"/><text x="72.1942%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="71.9442%" y="597" width="0.2461%" height="15" fill="rgb(249,183,48)" fg:x="877" fg:w="3"/><text x="72.1942%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.1083%" y="581" width="0.0820%" height="15" fill="rgb(208,86,37)" fg:x="879" fg:w="1"/><text x="72.3583%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.1083%" y="565" width="0.0820%" height="15" fill="rgb(251,192,7)" fg:x="879" fg:w="1"/><text x="72.3583%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="72.1903%" y="597" width="0.0820%" height="15" fill="rgb(234,196,3)" fg:x="880" fg:w="1"/><text x="72.4403%" y="607.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="72.1903%" y="581" width="0.0820%" height="15" fill="rgb(229,150,39)" fg:x="880" fg:w="1"/><text x="72.4403%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.1903%" y="565" width="0.0820%" height="15" fill="rgb(226,19,29)" fg:x="880" fg:w="1"/><text x="72.4403%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.2724%" y="565" width="0.0820%" height="15" fill="rgb(226,222,2)" fg:x="881" fg:w="1"/><text x="72.5224%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="72.2724%" y="549" width="0.0820%" height="15" fill="rgb(235,85,29)" fg:x="881" fg:w="1"/><text x="72.5224%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="72.3544%" y="565" width="0.0820%" height="15" fill="rgb(237,194,43)" fg:x="882" fg:w="1"/><text x="72.6044%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="72.3544%" y="549" width="0.0820%" height="15" fill="rgb(211,4,42)" fg:x="882" fg:w="1"/><text x="72.6044%" y="559.50"></text></g><g><title>engine::session::Session::flush (7 samples, 0.57%)</title><rect x="71.9442%" y="709" width="0.5742%" height="15" fill="rgb(221,80,37)" fg:x="877" fg:w="7"/><text x="72.1942%" y="719.50"></text></g><g><title>engine::session::state::State::close (7 samples, 0.57%)</title><rect x="71.9442%" y="693" width="0.5742%" height="15" fill="rgb(222,47,31)" fg:x="877" fg:w="7"/><text x="72.1942%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (7 samples, 0.57%)</title><rect x="71.9442%" y="677" width="0.5742%" height="15" fill="rgb(249,82,52)" fg:x="877" fg:w="7"/><text x="72.1942%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (7 samples, 0.57%)</title><rect x="71.9442%" y="661" width="0.5742%" height="15" fill="rgb(218,203,2)" fg:x="877" fg:w="7"/><text x="72.1942%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="71.9442%" y="645" width="0.5742%" height="15" fill="rgb(210,175,14)" fg:x="877" fg:w="7"/><text x="72.1942%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (7 samples, 0.57%)</title><rect x="71.9442%" y="629" width="0.5742%" height="15" fill="rgb(216,210,12)" fg:x="877" fg:w="7"/><text x="72.1942%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.33%)</title><rect x="72.1903%" y="613" width="0.3281%" height="15" fill="rgb(229,120,18)" fg:x="880" fg:w="4"/><text x="72.4403%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.25%)</title><rect x="72.2724%" y="597" width="0.2461%" height="15" fill="rgb(231,174,12)" fg:x="881" fg:w="3"/><text x="72.5224%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="72.2724%" y="581" width="0.2461%" height="15" fill="rgb(214,101,53)" fg:x="881" fg:w="3"/><text x="72.5224%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="72.4364%" y="565" width="0.0820%" height="15" fill="rgb(246,89,43)" fg:x="883" fg:w="1"/><text x="72.6864%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.4364%" y="549" width="0.0820%" height="15" fill="rgb(222,9,51)" fg:x="883" fg:w="1"/><text x="72.6864%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4364%" y="533" width="0.0820%" height="15" fill="rgb(252,221,9)" fg:x="883" fg:w="1"/><text x="72.6864%" y="543.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="72.5185%" y="709" width="0.0820%" height="15" fill="rgb(248,28,15)" fg:x="884" fg:w="1"/><text x="72.7685%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="72.5185%" y="693" width="0.0820%" height="15" fill="rgb(213,54,52)" fg:x="884" fg:w="1"/><text x="72.7685%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="72.5185%" y="677" width="0.0820%" height="15" fill="rgb(240,3,45)" fg:x="884" fg:w="1"/><text x="72.7685%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.5185%" y="661" width="0.0820%" height="15" fill="rgb(239,138,24)" fg:x="884" fg:w="1"/><text x="72.7685%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.5185%" y="645" width="0.0820%" height="15" fill="rgb(233,45,54)" fg:x="884" fg:w="1"/><text x="72.7685%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="72.6005%" y="677" width="0.0820%" height="15" fill="rgb(220,131,2)" fg:x="885" fg:w="1"/><text x="72.8505%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="72.6005%" y="661" width="0.0820%" height="15" fill="rgb(240,154,36)" fg:x="885" fg:w="1"/><text x="72.8505%" y="671.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.6005%" y="645" width="0.0820%" height="15" fill="rgb(251,221,1)" fg:x="885" fg:w="1"/><text x="72.8505%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6005%" y="629" width="0.0820%" height="15" fill="rgb(225,217,1)" fg:x="885" fg:w="1"/><text x="72.8505%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6005%" y="613" width="0.0820%" height="15" fill="rgb(241,105,49)" fg:x="885" fg:w="1"/><text x="72.8505%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6005%" y="597" width="0.0820%" height="15" fill="rgb(215,44,32)" fg:x="885" fg:w="1"/><text x="72.8505%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.6005%" y="581" width="0.0820%" height="15" fill="rgb(213,222,14)" fg:x="885" fg:w="1"/><text x="72.8505%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="72.6825%" y="629" width="0.0820%" height="15" fill="rgb(207,99,52)" fg:x="886" fg:w="1"/><text x="72.9325%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6825%" y="613" width="0.0820%" height="15" fill="rgb(214,208,52)" fg:x="886" fg:w="1"/><text x="72.9325%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6825%" y="597" width="0.0820%" height="15" fill="rgb(244,169,0)" fg:x="886" fg:w="1"/><text x="72.9325%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.6825%" y="581" width="0.0820%" height="15" fill="rgb(216,193,37)" fg:x="886" fg:w="1"/><text x="72.9325%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6825%" y="565" width="0.0820%" height="15" fill="rgb(212,158,10)" fg:x="886" fg:w="1"/><text x="72.9325%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6825%" y="549" width="0.0820%" height="15" fill="rgb(213,110,20)" fg:x="886" fg:w="1"/><text x="72.9325%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6825%" y="533" width="0.0820%" height="15" fill="rgb(226,5,42)" fg:x="886" fg:w="1"/><text x="72.9325%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.25%)</title><rect x="72.6005%" y="693" width="0.2461%" height="15" fill="rgb(211,93,8)" fg:x="885" fg:w="3"/><text x="72.8505%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="72.6825%" y="677" width="0.1641%" height="15" fill="rgb(240,208,12)" fg:x="886" fg:w="2"/><text x="72.9325%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="72.6825%" y="661" width="0.1641%" height="15" fill="rgb(233,127,50)" fg:x="886" fg:w="2"/><text x="72.9325%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="72.6825%" y="645" width="0.1641%" height="15" fill="rgb(227,199,53)" fg:x="886" fg:w="2"/><text x="72.9325%" y="655.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="72.7646%" y="629" width="0.0820%" height="15" fill="rgb(235,199,10)" fg:x="887" fg:w="1"/><text x="73.0146%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7646%" y="613" width="0.0820%" height="15" fill="rgb(228,148,35)" fg:x="887" fg:w="1"/><text x="73.0146%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.33%)</title><rect x="72.6005%" y="709" width="0.3281%" height="15" fill="rgb(217,87,19)" fg:x="885" fg:w="4"/><text x="72.8505%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="72.8466%" y="693" width="0.0820%" height="15" fill="rgb(239,9,32)" fg:x="888" fg:w="1"/><text x="73.0966%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8466%" y="677" width="0.0820%" height="15" fill="rgb(229,101,29)" fg:x="888" fg:w="1"/><text x="73.0966%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8466%" y="661" width="0.0820%" height="15" fill="rgb(208,143,26)" fg:x="888" fg:w="1"/><text x="73.0966%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.8466%" y="645" width="0.0820%" height="15" fill="rgb(214,10,2)" fg:x="888" fg:w="1"/><text x="73.0966%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.8466%" y="629" width="0.0820%" height="15" fill="rgb(254,203,30)" fg:x="888" fg:w="1"/><text x="73.0966%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.8466%" y="613" width="0.0820%" height="15" fill="rgb(242,45,3)" fg:x="888" fg:w="1"/><text x="73.0966%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.8466%" y="597" width="0.0820%" height="15" fill="rgb(209,146,51)" fg:x="888" fg:w="1"/><text x="73.0966%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.8466%" y="581" width="0.0820%" height="15" fill="rgb(222,80,5)" fg:x="888" fg:w="1"/><text x="73.0966%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.8466%" y="565" width="0.0820%" height="15" fill="rgb(252,80,35)" fg:x="888" fg:w="1"/><text x="73.0966%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.8466%" y="549" width="0.0820%" height="15" fill="rgb(246,125,28)" fg:x="888" fg:w="1"/><text x="73.0966%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="72.9286%" y="709" width="0.0820%" height="15" fill="rgb(224,143,51)" fg:x="889" fg:w="1"/><text x="73.1786%" y="719.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="72.9286%" y="693" width="0.0820%" height="15" fill="rgb(205,24,17)" fg:x="889" fg:w="1"/><text x="73.1786%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="72.9286%" y="677" width="0.0820%" height="15" fill="rgb(253,128,30)" fg:x="889" fg:w="1"/><text x="73.1786%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="72.9286%" y="661" width="0.0820%" height="15" fill="rgb(214,153,25)" fg:x="889" fg:w="1"/><text x="73.1786%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.9286%" y="645" width="0.0820%" height="15" fill="rgb(214,4,28)" fg:x="889" fg:w="1"/><text x="73.1786%" y="655.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="73.0107%" y="709" width="0.0820%" height="15" fill="rgb(235,179,52)" fg:x="890" fg:w="1"/><text x="73.2607%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="73.0107%" y="693" width="0.0820%" height="15" fill="rgb(233,27,42)" fg:x="890" fg:w="1"/><text x="73.2607%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="73.0107%" y="677" width="0.0820%" height="15" fill="rgb(238,35,25)" fg:x="890" fg:w="1"/><text x="73.2607%" y="687.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="73.0927%" y="661" width="0.0820%" height="15" fill="rgb(227,44,31)" fg:x="891" fg:w="1"/><text x="73.3427%" y="671.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="73.0927%" y="645" width="0.0820%" height="15" fill="rgb(232,201,13)" fg:x="891" fg:w="1"/><text x="73.3427%" y="655.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="73.0927%" y="629" width="0.0820%" height="15" fill="rgb(224,172,52)" fg:x="891" fg:w="1"/><text x="73.3427%" y="639.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="73.0927%" y="613" width="0.0820%" height="15" fill="rgb(214,27,26)" fg:x="891" fg:w="1"/><text x="73.3427%" y="623.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="73.0927%" y="597" width="0.0820%" height="15" fill="rgb(210,185,52)" fg:x="891" fg:w="1"/><text x="73.3427%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="73.0927%" y="581" width="0.0820%" height="15" fill="rgb(249,59,32)" fg:x="891" fg:w="1"/><text x="73.3427%" y="591.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="73.0927%" y="565" width="0.0820%" height="15" fill="rgb(242,209,18)" fg:x="891" fg:w="1"/><text x="73.3427%" y="575.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="73.0927%" y="549" width="0.0820%" height="15" fill="rgb(229,0,18)" fg:x="891" fg:w="1"/><text x="73.3427%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.1747%" y="549" width="0.0820%" height="15" fill="rgb(217,138,29)" fg:x="892" fg:w="1"/><text x="73.4247%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.1747%" y="533" width="0.0820%" height="15" fill="rgb(215,72,42)" fg:x="892" fg:w="1"/><text x="73.4247%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="73.1747%" y="581" width="0.1641%" height="15" fill="rgb(254,115,11)" fg:x="892" fg:w="2"/><text x="73.4247%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="73.1747%" y="565" width="0.1641%" height="15" fill="rgb(205,133,39)" fg:x="892" fg:w="2"/><text x="73.4247%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2568%" y="549" width="0.0820%" height="15" fill="rgb(211,36,27)" fg:x="893" fg:w="1"/><text x="73.5068%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.3388%" y="549" width="0.0820%" height="15" fill="rgb(221,48,10)" fg:x="894" fg:w="1"/><text x="73.5888%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.3388%" y="533" width="0.0820%" height="15" fill="rgb(230,172,50)" fg:x="894" fg:w="1"/><text x="73.5888%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.3388%" y="517" width="0.0820%" height="15" fill="rgb(249,72,18)" fg:x="894" fg:w="1"/><text x="73.5888%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.3388%" y="501" width="0.0820%" height="15" fill="rgb(237,58,48)" fg:x="894" fg:w="1"/><text x="73.5888%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.3388%" y="485" width="0.0820%" height="15" fill="rgb(242,123,3)" fg:x="894" fg:w="1"/><text x="73.5888%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.3388%" y="469" width="0.0820%" height="15" fill="rgb(232,111,32)" fg:x="894" fg:w="1"/><text x="73.5888%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.3388%" y="453" width="0.0820%" height="15" fill="rgb(229,108,3)" fg:x="894" fg:w="1"/><text x="73.5888%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.33%)</title><rect x="73.3388%" y="565" width="0.3281%" height="15" fill="rgb(222,158,10)" fg:x="894" fg:w="4"/><text x="73.5888%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="73.4208%" y="549" width="0.2461%" height="15" fill="rgb(205,34,49)" fg:x="895" fg:w="3"/><text x="73.6708%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.6669%" y="549" width="0.0820%" height="15" fill="rgb(232,21,14)" fg:x="898" fg:w="1"/><text x="73.9169%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.6669%" y="533" width="0.0820%" height="15" fill="rgb(229,127,44)" fg:x="898" fg:w="1"/><text x="73.9169%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.6669%" y="517" width="0.0820%" height="15" fill="rgb(232,171,4)" fg:x="898" fg:w="1"/><text x="73.9169%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.6669%" y="501" width="0.0820%" height="15" fill="rgb(250,92,16)" fg:x="898" fg:w="1"/><text x="73.9169%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.7490%" y="533" width="0.0820%" height="15" fill="rgb(230,103,38)" fg:x="899" fg:w="1"/><text x="73.9990%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7490%" y="517" width="0.0820%" height="15" fill="rgb(253,167,9)" fg:x="899" fg:w="1"/><text x="73.9990%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7490%" y="501" width="0.0820%" height="15" fill="rgb(222,118,11)" fg:x="899" fg:w="1"/><text x="73.9990%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7490%" y="485" width="0.0820%" height="15" fill="rgb(240,202,0)" fg:x="899" fg:w="1"/><text x="73.9990%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.7490%" y="469" width="0.0820%" height="15" fill="rgb(236,124,4)" fg:x="899" fg:w="1"/><text x="73.9990%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.8310%" y="533" width="0.0820%" height="15" fill="rgb(244,128,18)" fg:x="900" fg:w="1"/><text x="74.0810%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.8310%" y="517" width="0.0820%" height="15" fill="rgb(231,206,5)" fg:x="900" fg:w="1"/><text x="74.0810%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.8310%" y="501" width="0.0820%" height="15" fill="rgb(237,111,8)" fg:x="900" fg:w="1"/><text x="74.0810%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.9130%" y="517" width="0.0820%" height="15" fill="rgb(225,127,3)" fg:x="901" fg:w="1"/><text x="74.1630%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.9130%" y="501" width="0.0820%" height="15" fill="rgb(222,85,48)" fg:x="901" fg:w="1"/><text x="74.1630%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.9130%" y="485" width="0.0820%" height="15" fill="rgb(221,108,37)" fg:x="901" fg:w="1"/><text x="74.1630%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.9130%" y="469" width="0.0820%" height="15" fill="rgb(226,169,36)" fg:x="901" fg:w="1"/><text x="74.1630%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.9130%" y="453" width="0.0820%" height="15" fill="rgb(237,76,12)" fg:x="901" fg:w="1"/><text x="74.1630%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.9130%" y="437" width="0.0820%" height="15" fill="rgb(210,227,32)" fg:x="901" fg:w="1"/><text x="74.1630%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.9130%" y="421" width="0.0820%" height="15" fill="rgb(214,117,20)" fg:x="901" fg:w="1"/><text x="74.1630%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.74%)</title><rect x="73.3388%" y="581" width="0.7383%" height="15" fill="rgb(234,119,41)" fg:x="894" fg:w="9"/><text x="73.5888%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="73.6669%" y="565" width="0.4102%" height="15" fill="rgb(230,130,47)" fg:x="898" fg:w="5"/><text x="73.9169%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="73.7490%" y="549" width="0.3281%" height="15" fill="rgb(215,21,41)" fg:x="899" fg:w="4"/><text x="73.9990%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.9130%" y="533" width="0.1641%" height="15" fill="rgb(226,26,53)" fg:x="901" fg:w="2"/><text x="74.1630%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.9951%" y="517" width="0.0820%" height="15" fill="rgb(221,92,23)" fg:x="902" fg:w="1"/><text x="74.2451%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.9951%" y="501" width="0.0820%" height="15" fill="rgb(213,156,21)" fg:x="902" fg:w="1"/><text x="74.2451%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.9951%" y="485" width="0.0820%" height="15" fill="rgb(254,166,29)" fg:x="902" fg:w="1"/><text x="74.2451%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.9951%" y="469" width="0.0820%" height="15" fill="rgb(213,71,1)" fg:x="902" fg:w="1"/><text x="74.2451%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.9951%" y="453" width="0.0820%" height="15" fill="rgb(245,8,13)" fg:x="902" fg:w="1"/><text x="74.2451%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.9951%" y="437" width="0.0820%" height="15" fill="rgb(213,32,32)" fg:x="902" fg:w="1"/><text x="74.2451%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.9951%" y="421" width="0.0820%" height="15" fill="rgb(251,86,50)" fg:x="902" fg:w="1"/><text x="74.2451%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.9951%" y="405" width="0.0820%" height="15" fill="rgb(252,92,41)" fg:x="902" fg:w="1"/><text x="74.2451%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.0771%" y="485" width="0.0820%" height="15" fill="rgb(234,70,35)" fg:x="903" fg:w="1"/><text x="74.3271%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.0771%" y="469" width="0.0820%" height="15" fill="rgb(210,157,19)" fg:x="903" fg:w="1"/><text x="74.3271%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.2412%" y="453" width="0.0820%" height="15" fill="rgb(206,20,45)" fg:x="905" fg:w="1"/><text x="74.4912%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.3232%" y="453" width="0.0820%" height="15" fill="rgb(207,34,7)" fg:x="906" fg:w="1"/><text x="74.5732%" y="463.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.48%)</title><rect x="73.0927%" y="693" width="1.4766%" height="15" fill="rgb(253,151,14)" fg:x="891" fg:w="18"/><text x="73.3427%" y="703.50"></text></g><g><title>engine::session::Session::save_changes (18 samples, 1.48%)</title><rect x="73.0927%" y="677" width="1.4766%" height="15" fill="rgb(252,1,18)" fg:x="891" fg:w="18"/><text x="73.3427%" y="687.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.39%)</title><rect x="73.1747%" y="661" width="1.3946%" height="15" fill="rgb(214,77,52)" fg:x="892" fg:w="17"/><text x="73.4247%" y="671.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.39%)</title><rect x="73.1747%" y="645" width="1.3946%" height="15" fill="rgb(254,106,35)" fg:x="892" fg:w="17"/><text x="73.4247%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.39%)</title><rect x="73.1747%" y="629" width="1.3946%" height="15" fill="rgb(212,67,40)" fg:x="892" fg:w="17"/><text x="73.4247%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 1.39%)</title><rect x="73.1747%" y="613" width="1.3946%" height="15" fill="rgb(228,76,23)" fg:x="892" fg:w="17"/><text x="73.4247%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.39%)</title><rect x="73.1747%" y="597" width="1.3946%" height="15" fill="rgb(250,198,5)" fg:x="892" fg:w="17"/><text x="73.4247%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.49%)</title><rect x="74.0771%" y="581" width="0.4922%" height="15" fill="rgb(209,20,25)" fg:x="903" fg:w="6"/><text x="74.3271%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.49%)</title><rect x="74.0771%" y="565" width="0.4922%" height="15" fill="rgb(236,32,4)" fg:x="903" fg:w="6"/><text x="74.3271%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="74.0771%" y="549" width="0.4922%" height="15" fill="rgb(215,31,6)" fg:x="903" fg:w="6"/><text x="74.3271%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="74.0771%" y="533" width="0.4922%" height="15" fill="rgb(207,186,49)" fg:x="903" fg:w="6"/><text x="74.3271%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.49%)</title><rect x="74.0771%" y="517" width="0.4922%" height="15" fill="rgb(211,212,49)" fg:x="903" fg:w="6"/><text x="74.3271%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="74.0771%" y="501" width="0.4922%" height="15" fill="rgb(229,51,41)" fg:x="903" fg:w="6"/><text x="74.3271%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="74.1591%" y="485" width="0.4102%" height="15" fill="rgb(205,225,36)" fg:x="904" fg:w="5"/><text x="74.4091%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="74.1591%" y="469" width="0.4102%" height="15" fill="rgb(209,213,45)" fg:x="904" fg:w="5"/><text x="74.4091%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="74.4053%" y="453" width="0.1641%" height="15" fill="rgb(219,35,49)" fg:x="907" fg:w="2"/><text x="74.6553%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="74.4053%" y="437" width="0.1641%" height="15" fill="rgb(215,205,22)" fg:x="907" fg:w="2"/><text x="74.6553%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4873%" y="421" width="0.0820%" height="15" fill="rgb(248,204,34)" fg:x="908" fg:w="1"/><text x="74.7373%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4873%" y="405" width="0.0820%" height="15" fill="rgb(219,223,31)" fg:x="908" fg:w="1"/><text x="74.7373%" y="415.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="74.5693%" y="693" width="0.0820%" height="15" fill="rgb(236,14,8)" fg:x="909" fg:w="1"/><text x="74.8193%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="74.5693%" y="677" width="0.0820%" height="15" fill="rgb(243,129,23)" fg:x="909" fg:w="1"/><text x="74.8193%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.5693%" y="661" width="0.0820%" height="15" fill="rgb(205,204,5)" fg:x="909" fg:w="1"/><text x="74.8193%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="74.5693%" y="645" width="0.0820%" height="15" fill="rgb(244,115,32)" fg:x="909" fg:w="1"/><text x="74.8193%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="74.5693%" y="629" width="0.0820%" height="15" fill="rgb(229,123,14)" fg:x="909" fg:w="1"/><text x="74.8193%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="74.5693%" y="613" width="0.0820%" height="15" fill="rgb(250,85,1)" fg:x="909" fg:w="1"/><text x="74.8193%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.5693%" y="597" width="0.0820%" height="15" fill="rgb(209,141,54)" fg:x="909" fg:w="1"/><text x="74.8193%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.5693%" y="581" width="0.0820%" height="15" fill="rgb(244,107,39)" fg:x="909" fg:w="1"/><text x="74.8193%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.5693%" y="565" width="0.0820%" height="15" fill="rgb(230,68,26)" fg:x="909" fg:w="1"/><text x="74.8193%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.5693%" y="549" width="0.0820%" height="15" fill="rgb(220,178,33)" fg:x="909" fg:w="1"/><text x="74.8193%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.5693%" y="533" width="0.0820%" height="15" fill="rgb(220,77,53)" fg:x="909" fg:w="1"/><text x="74.8193%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.5693%" y="517" width="0.0820%" height="15" fill="rgb(224,108,19)" fg:x="909" fg:w="1"/><text x="74.8193%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.5693%" y="501" width="0.0820%" height="15" fill="rgb(223,203,27)" fg:x="909" fg:w="1"/><text x="74.8193%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.5693%" y="485" width="0.0820%" height="15" fill="rgb(211,32,46)" fg:x="909" fg:w="1"/><text x="74.8193%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.5693%" y="469" width="0.0820%" height="15" fill="rgb(240,101,27)" fg:x="909" fg:w="1"/><text x="74.8193%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.5693%" y="453" width="0.0820%" height="15" fill="rgb(217,210,11)" fg:x="909" fg:w="1"/><text x="74.8193%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.5693%" y="437" width="0.0820%" height="15" fill="rgb(236,130,21)" fg:x="909" fg:w="1"/><text x="74.8193%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.5693%" y="421" width="0.0820%" height="15" fill="rgb(250,136,8)" fg:x="909" fg:w="1"/><text x="74.8193%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.5693%" y="405" width="0.0820%" height="15" fill="rgb(243,223,36)" fg:x="909" fg:w="1"/><text x="74.8193%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.5693%" y="389" width="0.0820%" height="15" fill="rgb(246,184,8)" fg:x="909" fg:w="1"/><text x="74.8193%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5693%" y="373" width="0.0820%" height="15" fill="rgb(222,158,36)" fg:x="909" fg:w="1"/><text x="74.8193%" y="383.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="74.6514%" y="677" width="0.0820%" height="15" fill="rgb(210,220,19)" fg:x="910" fg:w="1"/><text x="74.9014%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="74.6514%" y="661" width="0.0820%" height="15" fill="rgb(246,44,38)" fg:x="910" fg:w="1"/><text x="74.9014%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.6514%" y="645" width="0.0820%" height="15" fill="rgb(246,186,14)" fg:x="910" fg:w="1"/><text x="74.9014%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.6514%" y="629" width="0.0820%" height="15" fill="rgb(233,193,20)" fg:x="910" fg:w="1"/><text x="74.9014%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="74.6514%" y="613" width="0.0820%" height="15" fill="rgb(215,60,5)" fg:x="910" fg:w="1"/><text x="74.9014%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.6514%" y="597" width="0.0820%" height="15" fill="rgb(207,128,10)" fg:x="910" fg:w="1"/><text x="74.9014%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.6514%" y="581" width="0.0820%" height="15" fill="rgb(238,84,54)" fg:x="910" fg:w="1"/><text x="74.9014%" y="591.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="74.7334%" y="677" width="0.0820%" height="15" fill="rgb(213,130,11)" fg:x="911" fg:w="1"/><text x="74.9834%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="74.7334%" y="661" width="0.0820%" height="15" fill="rgb(235,62,9)" fg:x="911" fg:w="1"/><text x="74.9834%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="74.7334%" y="645" width="0.0820%" height="15" fill="rgb(222,64,24)" fg:x="911" fg:w="1"/><text x="74.9834%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.7334%" y="629" width="0.0820%" height="15" fill="rgb(238,193,42)" fg:x="911" fg:w="1"/><text x="74.9834%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.7334%" y="613" width="0.0820%" height="15" fill="rgb(243,204,46)" fg:x="911" fg:w="1"/><text x="74.9834%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.7334%" y="597" width="0.0820%" height="15" fill="rgb(243,196,11)" fg:x="911" fg:w="1"/><text x="74.9834%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (22 samples, 1.80%)</title><rect x="73.0927%" y="709" width="1.8048%" height="15" fill="rgb(232,77,22)" fg:x="891" fg:w="22"/><text x="73.3427%" y="719.50">p..</text></g><g><title>plugins_core::tools::set_container (3 samples, 0.25%)</title><rect x="74.6514%" y="693" width="0.2461%" height="15" fill="rgb(215,80,25)" fg:x="910" fg:w="3"/><text x="74.9014%" y="703.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="74.8154%" y="677" width="0.0820%" height="15" fill="rgb(210,173,7)" fg:x="912" fg:w="1"/><text x="75.0654%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="74.8154%" y="661" width="0.0820%" height="15" fill="rgb(207,101,10)" fg:x="912" fg:w="1"/><text x="75.0654%" y="671.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="74.8154%" y="645" width="0.0820%" height="15" fill="rgb(246,57,48)" fg:x="912" fg:w="1"/><text x="75.0654%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.8154%" y="629" width="0.0820%" height="15" fill="rgb(236,184,40)" fg:x="912" fg:w="1"/><text x="75.0654%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="74.8154%" y="613" width="0.0820%" height="15" fill="rgb(210,205,13)" fg:x="912" fg:w="1"/><text x="75.0654%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.8154%" y="597" width="0.0820%" height="15" fill="rgb(231,129,42)" fg:x="912" fg:w="1"/><text x="75.0654%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.8154%" y="581" width="0.0820%" height="15" fill="rgb(220,229,54)" fg:x="912" fg:w="1"/><text x="75.0654%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="74.8975%" y="677" width="0.0820%" height="15" fill="rgb(230,192,26)" fg:x="913" fg:w="1"/><text x="75.1475%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="74.8975%" y="661" width="0.0820%" height="15" fill="rgb(253,18,30)" fg:x="913" fg:w="1"/><text x="75.1475%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8975%" y="645" width="0.0820%" height="15" fill="rgb(216,62,53)" fg:x="913" fg:w="1"/><text x="75.1475%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="74.9795%" y="597" width="0.0820%" height="15" fill="rgb(230,79,29)" fg:x="914" fg:w="1"/><text x="75.2295%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.9795%" y="581" width="0.0820%" height="15" fill="rgb(242,26,26)" fg:x="914" fg:w="1"/><text x="75.2295%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="74.9795%" y="661" width="0.1641%" height="15" fill="rgb(227,125,21)" fg:x="914" fg:w="2"/><text x="75.2295%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="74.9795%" y="645" width="0.1641%" height="15" fill="rgb(229,93,26)" fg:x="914" fg:w="2"/><text x="75.2295%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="74.9795%" y="629" width="0.1641%" height="15" fill="rgb(227,228,8)" fg:x="914" fg:w="2"/><text x="75.2295%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="74.9795%" y="613" width="0.1641%" height="15" fill="rgb(233,56,0)" fg:x="914" fg:w="2"/><text x="75.2295%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="75.0615%" y="597" width="0.0820%" height="15" fill="rgb(225,185,17)" fg:x="915" fg:w="1"/><text x="75.3115%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="75.0615%" y="581" width="0.0820%" height="15" fill="rgb(238,202,30)" fg:x="915" fg:w="1"/><text x="75.3115%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.0615%" y="565" width="0.0820%" height="15" fill="rgb(236,60,13)" fg:x="915" fg:w="1"/><text x="75.3115%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.0615%" y="549" width="0.0820%" height="15" fill="rgb(244,92,0)" fg:x="915" fg:w="1"/><text x="75.3115%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.33%)</title><rect x="74.8975%" y="709" width="0.3281%" height="15" fill="rgb(225,57,15)" fg:x="913" fg:w="4"/><text x="75.1475%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.33%)</title><rect x="74.8975%" y="693" width="0.3281%" height="15" fill="rgb(228,5,28)" fg:x="913" fg:w="4"/><text x="75.1475%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.25%)</title><rect x="74.9795%" y="677" width="0.2461%" height="15" fill="rgb(252,34,51)" fg:x="914" fg:w="3"/><text x="75.2295%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="75.1436%" y="661" width="0.0820%" height="15" fill="rgb(235,58,7)" fg:x="916" fg:w="1"/><text x="75.3936%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.1436%" y="645" width="0.0820%" height="15" fill="rgb(250,132,20)" fg:x="916" fg:w="1"/><text x="75.3936%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.1436%" y="629" width="0.0820%" height="15" fill="rgb(217,164,0)" fg:x="916" fg:w="1"/><text x="75.3936%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.1436%" y="613" width="0.0820%" height="15" fill="rgb(208,220,35)" fg:x="916" fg:w="1"/><text x="75.3936%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.1436%" y="597" width="0.0820%" height="15" fill="rgb(227,42,51)" fg:x="916" fg:w="1"/><text x="75.3936%" y="607.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="75.2256%" y="677" width="0.0820%" height="15" fill="rgb(225,146,38)" fg:x="917" fg:w="1"/><text x="75.4756%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="75.2256%" y="693" width="0.1641%" height="15" fill="rgb(252,108,37)" fg:x="917" fg:w="2"/><text x="75.4756%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="75.3076%" y="677" width="0.0820%" height="15" fill="rgb(244,101,24)" fg:x="918" fg:w="1"/><text x="75.5576%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.3076%" y="661" width="0.0820%" height="15" fill="rgb(213,161,50)" fg:x="918" fg:w="1"/><text x="75.5576%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="75.3076%" y="645" width="0.0820%" height="15" fill="rgb(248,159,19)" fg:x="918" fg:w="1"/><text x="75.5576%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="75.3076%" y="629" width="0.0820%" height="15" fill="rgb(233,179,15)" fg:x="918" fg:w="1"/><text x="75.5576%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.3076%" y="613" width="0.0820%" height="15" fill="rgb(248,178,3)" fg:x="918" fg:w="1"/><text x="75.5576%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.3076%" y="597" width="0.0820%" height="15" fill="rgb(245,190,41)" fg:x="918" fg:w="1"/><text x="75.5576%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.3076%" y="581" width="0.0820%" height="15" fill="rgb(218,151,19)" fg:x="918" fg:w="1"/><text x="75.5576%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="75.3897%" y="645" width="0.0820%" height="15" fill="rgb(245,25,44)" fg:x="919" fg:w="1"/><text x="75.6397%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="75.3897%" y="629" width="0.0820%" height="15" fill="rgb(235,172,47)" fg:x="919" fg:w="1"/><text x="75.6397%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="75.3897%" y="677" width="0.1641%" height="15" fill="rgb(246,33,12)" fg:x="919" fg:w="2"/><text x="75.6397%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="75.3897%" y="661" width="0.1641%" height="15" fill="rgb(214,124,7)" fg:x="919" fg:w="2"/><text x="75.6397%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="75.4717%" y="645" width="0.0820%" height="15" fill="rgb(246,186,18)" fg:x="920" fg:w="1"/><text x="75.7217%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.4717%" y="629" width="0.0820%" height="15" fill="rgb(231,94,1)" fg:x="920" fg:w="1"/><text x="75.7217%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (46 samples, 3.77%)</title><rect x="71.8622%" y="725" width="3.7736%" height="15" fill="rgb(208,33,48)" fg:x="876" fg:w="46"/><text x="72.1122%" y="735.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.41%)</title><rect x="75.2256%" y="709" width="0.4102%" height="15" fill="rgb(208,195,44)" fg:x="917" fg:w="5"/><text x="75.4756%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.25%)</title><rect x="75.3897%" y="693" width="0.2461%" height="15" fill="rgb(226,13,52)" fg:x="919" fg:w="3"/><text x="75.6397%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.5537%" y="677" width="0.0820%" height="15" fill="rgb(217,219,45)" fg:x="921" fg:w="1"/><text x="75.8037%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.5537%" y="661" width="0.0820%" height="15" fill="rgb(223,45,25)" fg:x="921" fg:w="1"/><text x="75.8037%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.5537%" y="645" width="0.0820%" height="15" fill="rgb(241,163,0)" fg:x="921" fg:w="1"/><text x="75.8037%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.6358%" y="645" width="0.0820%" height="15" fill="rgb(216,68,47)" fg:x="922" fg:w="1"/><text x="75.8858%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.6358%" y="629" width="0.0820%" height="15" fill="rgb(236,119,45)" fg:x="922" fg:w="1"/><text x="75.8858%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="75.6358%" y="661" width="0.2461%" height="15" fill="rgb(209,188,24)" fg:x="922" fg:w="3"/><text x="75.8858%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.7178%" y="645" width="0.1641%" height="15" fill="rgb(221,118,7)" fg:x="923" fg:w="2"/><text x="75.9678%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.7178%" y="629" width="0.1641%" height="15" fill="rgb(213,148,43)" fg:x="923" fg:w="2"/><text x="75.9678%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.7178%" y="613" width="0.1641%" height="15" fill="rgb(231,21,43)" fg:x="923" fg:w="2"/><text x="75.9678%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.7178%" y="597" width="0.1641%" height="15" fill="rgb(232,213,43)" fg:x="923" fg:w="2"/><text x="75.9678%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.7998%" y="581" width="0.0820%" height="15" fill="rgb(239,145,50)" fg:x="924" fg:w="1"/><text x="76.0498%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.7998%" y="565" width="0.0820%" height="15" fill="rgb(222,131,18)" fg:x="924" fg:w="1"/><text x="76.0498%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (4 samples, 0.33%)</title><rect x="75.6358%" y="693" width="0.3281%" height="15" fill="rgb(243,181,13)" fg:x="922" fg:w="4"/><text x="75.8858%" y="703.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (4 samples, 0.33%)</title><rect x="75.6358%" y="677" width="0.3281%" height="15" fill="rgb(212,74,41)" fg:x="922" fg:w="4"/><text x="75.8858%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="75.8819%" y="661" width="0.0820%" height="15" fill="rgb(237,143,34)" fg:x="925" fg:w="1"/><text x="76.1319%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.9639%" y="693" width="0.1641%" height="15" fill="rgb(228,139,0)" fg:x="926" fg:w="2"/><text x="76.2139%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.9639%" y="677" width="0.1641%" height="15" fill="rgb(227,214,11)" fg:x="926" fg:w="2"/><text x="76.2139%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.0459%" y="661" width="0.0820%" height="15" fill="rgb(228,118,39)" fg:x="927" fg:w="1"/><text x="76.2959%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.0459%" y="645" width="0.0820%" height="15" fill="rgb(207,117,22)" fg:x="927" fg:w="1"/><text x="76.2959%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="76.1280%" y="597" width="0.1641%" height="15" fill="rgb(225,91,8)" fg:x="928" fg:w="2"/><text x="76.3780%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="76.1280%" y="581" width="0.1641%" height="15" fill="rgb(230,219,48)" fg:x="928" fg:w="2"/><text x="76.3780%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.2100%" y="565" width="0.0820%" height="15" fill="rgb(244,0,23)" fg:x="929" fg:w="1"/><text x="76.4600%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.2100%" y="549" width="0.0820%" height="15" fill="rgb(206,212,23)" fg:x="929" fg:w="1"/><text x="76.4600%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.2100%" y="533" width="0.0820%" height="15" fill="rgb(254,62,10)" fg:x="929" fg:w="1"/><text x="76.4600%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.2100%" y="517" width="0.0820%" height="15" fill="rgb(236,58,8)" fg:x="929" fg:w="1"/><text x="76.4600%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.2100%" y="501" width="0.0820%" height="15" fill="rgb(232,212,17)" fg:x="929" fg:w="1"/><text x="76.4600%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.33%)</title><rect x="76.1280%" y="613" width="0.3281%" height="15" fill="rgb(206,132,9)" fg:x="928" fg:w="4"/><text x="76.3780%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="76.2920%" y="597" width="0.1641%" height="15" fill="rgb(234,97,28)" fg:x="930" fg:w="2"/><text x="76.5420%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.4561%" y="597" width="0.0820%" height="15" fill="rgb(254,144,9)" fg:x="932" fg:w="1"/><text x="76.7061%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.4561%" y="581" width="0.0820%" height="15" fill="rgb(244,204,43)" fg:x="932" fg:w="1"/><text x="76.7061%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.4561%" y="565" width="0.0820%" height="15" fill="rgb(248,177,16)" fg:x="932" fg:w="1"/><text x="76.7061%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.4561%" y="549" width="0.0820%" height="15" fill="rgb(219,110,15)" fg:x="932" fg:w="1"/><text x="76.7061%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.4561%" y="533" width="0.0820%" height="15" fill="rgb(212,203,25)" fg:x="932" fg:w="1"/><text x="76.7061%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.4561%" y="517" width="0.0820%" height="15" fill="rgb(205,50,1)" fg:x="932" fg:w="1"/><text x="76.7061%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.4561%" y="501" width="0.0820%" height="15" fill="rgb(222,152,41)" fg:x="932" fg:w="1"/><text x="76.7061%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.5381%" y="581" width="0.0820%" height="15" fill="rgb(236,83,3)" fg:x="933" fg:w="1"/><text x="76.7881%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5381%" y="565" width="0.0820%" height="15" fill="rgb(214,30,54)" fg:x="933" fg:w="1"/><text x="76.7881%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5381%" y="549" width="0.0820%" height="15" fill="rgb(250,117,31)" fg:x="933" fg:w="1"/><text x="76.7881%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.5381%" y="533" width="0.0820%" height="15" fill="rgb(228,77,14)" fg:x="933" fg:w="1"/><text x="76.7881%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.5381%" y="517" width="0.0820%" height="15" fill="rgb(241,3,28)" fg:x="933" fg:w="1"/><text x="76.7881%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.5381%" y="501" width="0.0820%" height="15" fill="rgb(221,175,52)" fg:x="933" fg:w="1"/><text x="76.7881%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.5381%" y="485" width="0.0820%" height="15" fill="rgb(237,91,6)" fg:x="933" fg:w="1"/><text x="76.7881%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="76.6202%" y="581" width="0.1641%" height="15" fill="rgb(246,46,42)" fg:x="934" fg:w="2"/><text x="76.8702%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.7022%" y="565" width="0.0820%" height="15" fill="rgb(235,199,0)" fg:x="935" fg:w="1"/><text x="76.9522%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.7842%" y="565" width="0.0820%" height="15" fill="rgb(224,44,40)" fg:x="936" fg:w="1"/><text x="77.0342%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.7842%" y="549" width="0.0820%" height="15" fill="rgb(209,24,35)" fg:x="936" fg:w="1"/><text x="77.0342%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.7842%" y="533" width="0.0820%" height="15" fill="rgb(244,46,22)" fg:x="936" fg:w="1"/><text x="77.0342%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.7842%" y="517" width="0.0820%" height="15" fill="rgb(235,99,8)" fg:x="936" fg:w="1"/><text x="77.0342%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.7842%" y="501" width="0.0820%" height="15" fill="rgb(218,127,36)" fg:x="936" fg:w="1"/><text x="77.0342%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.7842%" y="485" width="0.0820%" height="15" fill="rgb(238,47,46)" fg:x="936" fg:w="1"/><text x="77.0342%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.7842%" y="469" width="0.0820%" height="15" fill="rgb(233,65,17)" fg:x="936" fg:w="1"/><text x="77.0342%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.7842%" y="581" width="0.1641%" height="15" fill="rgb(239,22,33)" fg:x="936" fg:w="2"/><text x="77.0342%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.8663%" y="565" width="0.0820%" height="15" fill="rgb(243,66,43)" fg:x="937" fg:w="1"/><text x="77.1163%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.90%)</title><rect x="76.1280%" y="629" width="0.9024%" height="15" fill="rgb(235,210,28)" fg:x="928" fg:w="11"/><text x="76.3780%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="76.4561%" y="613" width="0.5742%" height="15" fill="rgb(205,191,50)" fg:x="932" fg:w="7"/><text x="76.7061%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="76.5381%" y="597" width="0.4922%" height="15" fill="rgb(251,217,19)" fg:x="933" fg:w="6"/><text x="76.7881%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.9483%" y="581" width="0.0820%" height="15" fill="rgb(205,174,37)" fg:x="938" fg:w="1"/><text x="77.1983%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::compare::Modified&gt; (1 samples, 0.08%)</title><rect x="77.0304%" y="629" width="0.0820%" height="15" fill="rgb(212,158,42)" fg:x="939" fg:w="1"/><text x="77.2804%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.1124%" y="549" width="0.0820%" height="15" fill="rgb(212,208,51)" fg:x="940" fg:w="1"/><text x="77.3624%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="77.1944%" y="517" width="0.0820%" height="15" fill="rgb(225,198,20)" fg:x="941" fg:w="1"/><text x="77.4444%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.1944%" y="501" width="0.0820%" height="15" fill="rgb(247,41,44)" fg:x="941" fg:w="1"/><text x="77.4444%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.1944%" y="485" width="0.0820%" height="15" fill="rgb(228,33,41)" fg:x="941" fg:w="1"/><text x="77.4444%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.1944%" y="469" width="0.0820%" height="15" fill="rgb(215,47,52)" fg:x="941" fg:w="1"/><text x="77.4444%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.1944%" y="453" width="0.0820%" height="15" fill="rgb(248,106,37)" fg:x="941" fg:w="1"/><text x="77.4444%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2765%" y="501" width="0.0820%" height="15" fill="rgb(238,91,29)" fg:x="942" fg:w="1"/><text x="77.5265%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.33%)</title><rect x="77.1124%" y="613" width="0.3281%" height="15" fill="rgb(226,111,40)" fg:x="940" fg:w="4"/><text x="77.3624%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="77.1124%" y="597" width="0.3281%" height="15" fill="rgb(229,159,36)" fg:x="940" fg:w="4"/><text x="77.3624%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.33%)</title><rect x="77.1124%" y="581" width="0.3281%" height="15" fill="rgb(221,109,4)" fg:x="940" fg:w="4"/><text x="77.3624%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="77.1124%" y="565" width="0.3281%" height="15" fill="rgb(236,56,25)" fg:x="940" fg:w="4"/><text x="77.3624%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="77.1944%" y="549" width="0.2461%" height="15" fill="rgb(244,113,23)" fg:x="941" fg:w="3"/><text x="77.4444%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="77.1944%" y="533" width="0.2461%" height="15" fill="rgb(249,132,2)" fg:x="941" fg:w="3"/><text x="77.4444%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.2765%" y="517" width="0.1641%" height="15" fill="rgb(205,185,21)" fg:x="942" fg:w="2"/><text x="77.5265%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.3585%" y="501" width="0.0820%" height="15" fill="rgb(245,130,2)" fg:x="943" fg:w="1"/><text x="77.6085%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4405%" y="581" width="0.0820%" height="15" fill="rgb(246,71,26)" fg:x="944" fg:w="1"/><text x="77.6905%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.4405%" y="565" width="0.0820%" height="15" fill="rgb(234,194,6)" fg:x="944" fg:w="1"/><text x="77.6905%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4405%" y="549" width="0.0820%" height="15" fill="rgb(206,24,32)" fg:x="944" fg:w="1"/><text x="77.6905%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="77.6046%" y="565" width="0.0820%" height="15" fill="rgb(233,7,54)" fg:x="946" fg:w="1"/><text x="77.8546%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.6046%" y="549" width="0.0820%" height="15" fill="rgb(252,46,1)" fg:x="946" fg:w="1"/><text x="77.8546%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6046%" y="533" width="0.0820%" height="15" fill="rgb(216,113,53)" fg:x="946" fg:w="1"/><text x="77.8546%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.33%)</title><rect x="77.4405%" y="613" width="0.3281%" height="15" fill="rgb(215,40,24)" fg:x="944" fg:w="4"/><text x="77.6905%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="77.4405%" y="597" width="0.3281%" height="15" fill="rgb(233,222,8)" fg:x="944" fg:w="4"/><text x="77.6905%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.25%)</title><rect x="77.5226%" y="581" width="0.2461%" height="15" fill="rgb(248,73,28)" fg:x="945" fg:w="3"/><text x="77.7726%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.6866%" y="565" width="0.0820%" height="15" fill="rgb(247,126,28)" fg:x="947" fg:w="1"/><text x="77.9366%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6866%" y="549" width="0.0820%" height="15" fill="rgb(242,173,54)" fg:x="947" fg:w="1"/><text x="77.9366%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.9327%" y="469" width="0.0820%" height="15" fill="rgb(244,186,22)" fg:x="950" fg:w="1"/><text x="78.1827%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.9327%" y="453" width="0.0820%" height="15" fill="rgb(231,187,4)" fg:x="950" fg:w="1"/><text x="78.1827%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.9327%" y="437" width="0.0820%" height="15" fill="rgb(252,66,47)" fg:x="950" fg:w="1"/><text x="78.1827%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9327%" y="421" width="0.0820%" height="15" fill="rgb(240,228,28)" fg:x="950" fg:w="1"/><text x="78.1827%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="77.8507%" y="485" width="0.3281%" height="15" fill="rgb(237,63,43)" fg:x="949" fg:w="4"/><text x="78.1007%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.0148%" y="469" width="0.1641%" height="15" fill="rgb(214,1,44)" fg:x="951" fg:w="2"/><text x="78.2648%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="78.0148%" y="453" width="0.1641%" height="15" fill="rgb(212,2,46)" fg:x="951" fg:w="2"/><text x="78.2648%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="78.0148%" y="437" width="0.1641%" height="15" fill="rgb(213,142,5)" fg:x="951" fg:w="2"/><text x="78.2648%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="77.8507%" y="501" width="0.4102%" height="15" fill="rgb(229,135,1)" fg:x="949" fg:w="5"/><text x="78.1007%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.1788%" y="485" width="0.0820%" height="15" fill="rgb(252,98,38)" fg:x="953" fg:w="1"/><text x="78.4288%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1788%" y="469" width="0.0820%" height="15" fill="rgb(206,89,40)" fg:x="953" fg:w="1"/><text x="78.4288%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="77.8507%" y="517" width="0.4922%" height="15" fill="rgb(219,73,36)" fg:x="949" fg:w="6"/><text x="78.1007%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.2609%" y="501" width="0.0820%" height="15" fill="rgb(207,168,32)" fg:x="954" fg:w="1"/><text x="78.5109%" y="511.50"></text></g><g><title>engine::session::state::State::close (34 samples, 2.79%)</title><rect x="75.6358%" y="709" width="2.7892%" height="15" fill="rgb(215,113,21)" fg:x="922" fg:w="34"/><text x="75.8858%" y="719.50">en..</text></g><g><title>engine::session::state::State::flush_entities (28 samples, 2.30%)</title><rect x="76.1280%" y="693" width="2.2970%" height="15" fill="rgb(217,144,43)" fg:x="928" fg:w="28"/><text x="76.3780%" y="703.50">e..</text></g><g><title>core::iter::adapters::try_process (28 samples, 2.30%)</title><rect x="76.1280%" y="677" width="2.2970%" height="15" fill="rgb(249,48,50)" fg:x="928" fg:w="28"/><text x="76.3780%" y="687.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 2.30%)</title><rect x="76.1280%" y="661" width="2.2970%" height="15" fill="rgb(242,1,26)" fg:x="928" fg:w="28"/><text x="76.3780%" y="671.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (28 samples, 2.30%)</title><rect x="76.1280%" y="645" width="2.2970%" height="15" fill="rgb(231,167,42)" fg:x="928" fg:w="28"/><text x="76.3780%" y="655.50">e..</text></g><g><title>kernel::model::any_entity_changes (16 samples, 1.31%)</title><rect x="77.1124%" y="629" width="1.3126%" height="15" fill="rgb(242,177,45)" fg:x="940" fg:w="16"/><text x="77.3624%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.66%)</title><rect x="77.7687%" y="613" width="0.6563%" height="15" fill="rgb(232,121,42)" fg:x="948" fg:w="8"/><text x="78.0187%" y="623.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.66%)</title><rect x="77.7687%" y="597" width="0.6563%" height="15" fill="rgb(205,8,42)" fg:x="948" fg:w="8"/><text x="78.0187%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.66%)</title><rect x="77.7687%" y="581" width="0.6563%" height="15" fill="rgb(238,199,24)" fg:x="948" fg:w="8"/><text x="78.0187%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.66%)</title><rect x="77.7687%" y="565" width="0.6563%" height="15" fill="rgb(228,112,2)" fg:x="948" fg:w="8"/><text x="78.0187%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.66%)</title><rect x="77.7687%" y="549" width="0.6563%" height="15" fill="rgb(215,115,33)" fg:x="948" fg:w="8"/><text x="78.0187%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.66%)</title><rect x="77.7687%" y="533" width="0.6563%" height="15" fill="rgb(230,209,34)" fg:x="948" fg:w="8"/><text x="78.0187%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3429%" y="517" width="0.0820%" height="15" fill="rgb(246,76,12)" fg:x="955" fg:w="1"/><text x="78.5929%" y="527.50"></text></g><g><title>engine::session::Session::close (35 samples, 2.87%)</title><rect x="75.6358%" y="725" width="2.8712%" height="15" fill="rgb(240,110,9)" fg:x="922" fg:w="35"/><text x="75.8858%" y="735.50">en..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="78.4249%" y="709" width="0.0820%" height="15" fill="rgb(224,94,46)" fg:x="956" fg:w="1"/><text x="78.6749%" y="719.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="78.5070%" y="693" width="0.0820%" height="15" fill="rgb(247,150,22)" fg:x="957" fg:w="1"/><text x="78.7570%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="78.5070%" y="677" width="0.0820%" height="15" fill="rgb(249,85,13)" fg:x="957" fg:w="1"/><text x="78.7570%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.5070%" y="661" width="0.0820%" height="15" fill="rgb(208,77,41)" fg:x="957" fg:w="1"/><text x="78.7570%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.5070%" y="645" width="0.0820%" height="15" fill="rgb(240,42,44)" fg:x="957" fg:w="1"/><text x="78.7570%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.5070%" y="629" width="0.0820%" height="15" fill="rgb(222,10,51)" fg:x="957" fg:w="1"/><text x="78.7570%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.5070%" y="613" width="0.0820%" height="15" fill="rgb(208,146,53)" fg:x="957" fg:w="1"/><text x="78.7570%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.5070%" y="597" width="0.0820%" height="15" fill="rgb(236,162,23)" fg:x="957" fg:w="1"/><text x="78.7570%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::parser::DropActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="78.5890%" y="645" width="0.0820%" height="15" fill="rgb(218,66,21)" fg:x="958" fg:w="1"/><text x="78.8390%" y="655.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="78.5890%" y="629" width="0.0820%" height="15" fill="rgb(233,6,47)" fg:x="958" fg:w="1"/><text x="78.8390%" y="639.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="78.5890%" y="613" width="0.0820%" height="15" fill="rgb(236,59,51)" fg:x="958" fg:w="1"/><text x="78.8390%" y="623.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (1 samples, 0.08%)</title><rect x="78.5890%" y="597" width="0.0820%" height="15" fill="rgb(242,12,46)" fg:x="958" fg:w="1"/><text x="78.8390%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.08%)</title><rect x="78.5890%" y="581" width="0.0820%" height="15" fill="rgb(243,142,19)" fg:x="958" fg:w="1"/><text x="78.8390%" y="591.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="78.5890%" y="565" width="0.0820%" height="15" fill="rgb(217,28,17)" fg:x="958" fg:w="1"/><text x="78.8390%" y="575.50"></text></g><g><title>core::slice::memchr::repeat_byte (1 samples, 0.08%)</title><rect x="78.5890%" y="549" width="0.0820%" height="15" fill="rgb(228,2,27)" fg:x="958" fg:w="1"/><text x="78.8390%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="78.5890%" y="661" width="0.1641%" height="15" fill="rgb(214,221,4)" fg:x="958" fg:w="2"/><text x="78.8390%" y="671.50"></text></g><g><title>&lt;plugins_core::carrying::parser::HoldActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="78.6710%" y="645" width="0.0820%" height="15" fill="rgb(224,69,26)" fg:x="959" fg:w="1"/><text x="78.9210%" y="655.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (3 samples, 0.25%)</title><rect x="78.5890%" y="693" width="0.2461%" height="15" fill="rgb(219,70,4)" fg:x="958" fg:w="3"/><text x="78.8390%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.25%)</title><rect x="78.5890%" y="677" width="0.2461%" height="15" fill="rgb(218,157,39)" fg:x="958" fg:w="3"/><text x="78.8390%" y="687.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="78.7531%" y="661" width="0.0820%" height="15" fill="rgb(238,36,28)" fg:x="960" fg:w="1"/><text x="79.0031%" y="671.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="78.7531%" y="645" width="0.0820%" height="15" fill="rgb(232,29,0)" fg:x="960" fg:w="1"/><text x="79.0031%" y="655.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="78.9992%" y="453" width="0.0820%" height="15" fill="rgb(243,138,46)" fg:x="963" fg:w="1"/><text x="79.2492%" y="463.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (1 samples, 0.08%)</title><rect x="78.9992%" y="437" width="0.0820%" height="15" fill="rgb(232,186,41)" fg:x="963" fg:w="1"/><text x="79.2492%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="78.9992%" y="421" width="0.0820%" height="15" fill="rgb(252,166,17)" fg:x="963" fg:w="1"/><text x="79.2492%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="78.9992%" y="405" width="0.0820%" height="15" fill="rgb(228,179,12)" fg:x="963" fg:w="1"/><text x="79.2492%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="78.9992%" y="389" width="0.0820%" height="15" fill="rgb(254,205,53)" fg:x="963" fg:w="1"/><text x="79.2492%" y="399.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="78.9992%" y="373" width="0.0820%" height="15" fill="rgb(224,163,47)" fg:x="963" fg:w="1"/><text x="79.2492%" y="383.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="78.9992%" y="357" width="0.0820%" height="15" fill="rgb(208,43,47)" fg:x="963" fg:w="1"/><text x="79.2492%" y="367.50"></text></g><g><title>core::fmt::builders::debug_tuple_new (1 samples, 0.08%)</title><rect x="78.9992%" y="341" width="0.0820%" height="15" fill="rgb(224,198,38)" fg:x="963" fg:w="1"/><text x="79.2492%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="78.9992%" y="325" width="0.0820%" height="15" fill="rgb(234,12,40)" fg:x="963" fg:w="1"/><text x="79.2492%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.9992%" y="309" width="0.0820%" height="15" fill="rgb(237,212,39)" fg:x="963" fg:w="1"/><text x="79.2492%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.9992%" y="293" width="0.0820%" height="15" fill="rgb(253,2,33)" fg:x="963" fg:w="1"/><text x="79.2492%" y="303.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="78.9992%" y="277" width="0.0820%" height="15" fill="rgb(251,29,16)" fg:x="963" fg:w="1"/><text x="79.2492%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="78.9992%" y="261" width="0.0820%" height="15" fill="rgb(214,38,29)" fg:x="963" fg:w="1"/><text x="79.2492%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="78.9992%" y="245" width="0.0820%" height="15" fill="rgb(226,226,29)" fg:x="963" fg:w="1"/><text x="79.2492%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="78.9992%" y="229" width="0.0820%" height="15" fill="rgb(236,79,42)" fg:x="963" fg:w="1"/><text x="79.2492%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="78.9992%" y="213" width="0.0820%" height="15" fill="rgb(222,12,36)" fg:x="963" fg:w="1"/><text x="79.2492%" y="223.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="78.9992%" y="581" width="0.1641%" height="15" fill="rgb(232,123,44)" fg:x="963" fg:w="2"/><text x="79.2492%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="78.9992%" y="565" width="0.1641%" height="15" fill="rgb(234,93,50)" fg:x="963" fg:w="2"/><text x="79.2492%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="78.9992%" y="549" width="0.1641%" height="15" fill="rgb(210,86,49)" fg:x="963" fg:w="2"/><text x="79.2492%" y="559.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="78.9992%" y="533" width="0.1641%" height="15" fill="rgb(224,91,54)" fg:x="963" fg:w="2"/><text x="79.2492%" y="543.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (2 samples, 0.16%)</title><rect x="78.9992%" y="517" width="0.1641%" height="15" fill="rgb(239,169,9)" fg:x="963" fg:w="2"/><text x="79.2492%" y="527.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (2 samples, 0.16%)</title><rect x="78.9992%" y="501" width="0.1641%" height="15" fill="rgb(238,29,17)" fg:x="963" fg:w="2"/><text x="79.2492%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="78.9992%" y="485" width="0.1641%" height="15" fill="rgb(227,160,22)" fg:x="963" fg:w="2"/><text x="79.2492%" y="495.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (2 samples, 0.16%)</title><rect x="78.9992%" y="469" width="0.1641%" height="15" fill="rgb(231,129,52)" fg:x="963" fg:w="2"/><text x="79.2492%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="79.0812%" y="453" width="0.0820%" height="15" fill="rgb(241,184,9)" fg:x="964" fg:w="1"/><text x="79.3312%" y="463.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (1 samples, 0.08%)</title><rect x="79.0812%" y="437" width="0.0820%" height="15" fill="rgb(217,43,48)" fg:x="964" fg:w="1"/><text x="79.3312%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="79.0812%" y="421" width="0.0820%" height="15" fill="rgb(213,49,1)" fg:x="964" fg:w="1"/><text x="79.3312%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="79.0812%" y="405" width="0.0820%" height="15" fill="rgb(223,79,39)" fg:x="964" fg:w="1"/><text x="79.3312%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="79.0812%" y="389" width="0.0820%" height="15" fill="rgb(228,227,46)" fg:x="964" fg:w="1"/><text x="79.3312%" y="399.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="79.0812%" y="373" width="0.0820%" height="15" fill="rgb(245,89,41)" fg:x="964" fg:w="1"/><text x="79.3312%" y="383.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="79.0812%" y="357" width="0.0820%" height="15" fill="rgb(253,83,21)" fg:x="964" fg:w="1"/><text x="79.3312%" y="367.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="79.0812%" y="341" width="0.0820%" height="15" fill="rgb(229,116,51)" fg:x="964" fg:w="1"/><text x="79.3312%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="79.0812%" y="325" width="0.0820%" height="15" fill="rgb(246,67,26)" fg:x="964" fg:w="1"/><text x="79.3312%" y="335.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="79.0812%" y="309" width="0.0820%" height="15" fill="rgb(250,117,20)" fg:x="964" fg:w="1"/><text x="79.3312%" y="319.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.25%)</title><rect x="78.9992%" y="677" width="0.2461%" height="15" fill="rgb(207,88,17)" fg:x="963" fg:w="3"/><text x="79.2492%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.25%)</title><rect x="78.9992%" y="661" width="0.2461%" height="15" fill="rgb(212,98,36)" fg:x="963" fg:w="3"/><text x="79.2492%" y="671.50"></text></g><g><title>core::fmt::write (3 samples, 0.25%)</title><rect x="78.9992%" y="645" width="0.2461%" height="15" fill="rgb(221,72,6)" fg:x="963" fg:w="3"/><text x="79.2492%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.25%)</title><rect x="78.9992%" y="629" width="0.2461%" height="15" fill="rgb(235,129,19)" fg:x="963" fg:w="3"/><text x="79.2492%" y="639.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (3 samples, 0.25%)</title><rect x="78.9992%" y="613" width="0.2461%" height="15" fill="rgb(237,200,6)" fg:x="963" fg:w="3"/><text x="79.2492%" y="623.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (3 samples, 0.25%)</title><rect x="78.9992%" y="597" width="0.2461%" height="15" fill="rgb(239,69,54)" fg:x="963" fg:w="3"/><text x="79.2492%" y="607.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.08%)</title><rect x="79.1632%" y="581" width="0.0820%" height="15" fill="rgb(214,68,45)" fg:x="965" fg:w="1"/><text x="79.4132%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::PerformAction&gt; (1 samples, 0.08%)</title><rect x="79.2453%" y="677" width="0.0820%" height="15" fill="rgb(254,160,8)" fg:x="966" fg:w="1"/><text x="79.4953%" y="687.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (2 samples, 0.16%)</title><rect x="79.3273%" y="661" width="0.1641%" height="15" fill="rgb(215,226,31)" fg:x="967" fg:w="2"/><text x="79.5773%" y="671.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="79.3273%" y="645" width="0.1641%" height="15" fill="rgb(253,6,35)" fg:x="967" fg:w="2"/><text x="79.5773%" y="655.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="79.3273%" y="629" width="0.1641%" height="15" fill="rgb(219,96,42)" fg:x="967" fg:w="2"/><text x="79.5773%" y="639.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="79.4094%" y="613" width="0.0820%" height="15" fill="rgb(207,170,13)" fg:x="968" fg:w="1"/><text x="79.6594%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.5734%" y="517" width="0.0820%" height="15" fill="rgb(239,101,5)" fg:x="970" fg:w="1"/><text x="79.8234%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.5734%" y="501" width="0.0820%" height="15" fill="rgb(228,183,34)" fg:x="970" fg:w="1"/><text x="79.8234%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.5734%" y="485" width="0.0820%" height="15" fill="rgb(205,28,31)" fg:x="970" fg:w="1"/><text x="79.8234%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.5734%" y="469" width="0.0820%" height="15" fill="rgb(214,118,50)" fg:x="970" fg:w="1"/><text x="79.8234%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.5734%" y="453" width="0.0820%" height="15" fill="rgb(213,108,51)" fg:x="970" fg:w="1"/><text x="79.8234%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.5734%" y="437" width="0.0820%" height="15" fill="rgb(238,56,37)" fg:x="970" fg:w="1"/><text x="79.8234%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.5734%" y="421" width="0.0820%" height="15" fill="rgb(214,136,28)" fg:x="970" fg:w="1"/><text x="79.8234%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.5734%" y="405" width="0.0820%" height="15" fill="rgb(221,201,54)" fg:x="970" fg:w="1"/><text x="79.8234%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.5734%" y="389" width="0.0820%" height="15" fill="rgb(228,216,39)" fg:x="970" fg:w="1"/><text x="79.8234%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.5734%" y="373" width="0.0820%" height="15" fill="rgb(207,229,49)" fg:x="970" fg:w="1"/><text x="79.8234%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.5734%" y="357" width="0.0820%" height="15" fill="rgb(224,23,43)" fg:x="970" fg:w="1"/><text x="79.8234%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.5734%" y="341" width="0.0820%" height="15" fill="rgb(247,97,18)" fg:x="970" fg:w="1"/><text x="79.8234%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.5734%" y="325" width="0.0820%" height="15" fill="rgb(232,53,32)" fg:x="970" fg:w="1"/><text x="79.8234%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="79.5734%" y="549" width="0.1641%" height="15" fill="rgb(247,38,23)" fg:x="970" fg:w="2"/><text x="79.8234%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.5734%" y="533" width="0.1641%" height="15" fill="rgb(228,101,52)" fg:x="970" fg:w="2"/><text x="79.8234%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.6555%" y="517" width="0.0820%" height="15" fill="rgb(231,45,36)" fg:x="971" fg:w="1"/><text x="79.9055%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="79.7375%" y="485" width="0.0820%" height="15" fill="rgb(221,183,50)" fg:x="972" fg:w="1"/><text x="79.9875%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.7375%" y="469" width="0.0820%" height="15" fill="rgb(251,132,12)" fg:x="972" fg:w="1"/><text x="79.9875%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.7375%" y="453" width="0.0820%" height="15" fill="rgb(252,50,16)" fg:x="972" fg:w="1"/><text x="79.9875%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="79.8195%" y="485" width="0.0820%" height="15" fill="rgb(224,60,15)" fg:x="973" fg:w="1"/><text x="80.0695%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.8195%" y="469" width="0.0820%" height="15" fill="rgb(254,2,34)" fg:x="973" fg:w="1"/><text x="80.0695%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8195%" y="453" width="0.0820%" height="15" fill="rgb(232,154,8)" fg:x="973" fg:w="1"/><text x="80.0695%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.8195%" y="437" width="0.0820%" height="15" fill="rgb(235,190,52)" fg:x="973" fg:w="1"/><text x="80.0695%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8195%" y="421" width="0.0820%" height="15" fill="rgb(213,218,38)" fg:x="973" fg:w="1"/><text x="80.0695%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.8195%" y="405" width="0.0820%" height="15" fill="rgb(237,50,37)" fg:x="973" fg:w="1"/><text x="80.0695%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.8195%" y="389" width="0.0820%" height="15" fill="rgb(235,51,35)" fg:x="973" fg:w="1"/><text x="80.0695%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.8195%" y="373" width="0.0820%" height="15" fill="rgb(244,40,52)" fg:x="973" fg:w="1"/><text x="80.0695%" y="383.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="79.8195%" y="357" width="0.0820%" height="15" fill="rgb(217,225,45)" fg:x="973" fg:w="1"/><text x="80.0695%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.8195%" y="341" width="0.0820%" height="15" fill="rgb(247,191,36)" fg:x="973" fg:w="1"/><text x="80.0695%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.8195%" y="325" width="0.0820%" height="15" fill="rgb(251,144,31)" fg:x="973" fg:w="1"/><text x="80.0695%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.8195%" y="309" width="0.0820%" height="15" fill="rgb(227,155,41)" fg:x="973" fg:w="1"/><text x="80.0695%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.8195%" y="293" width="0.0820%" height="15" fill="rgb(236,121,36)" fg:x="973" fg:w="1"/><text x="80.0695%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.8195%" y="277" width="0.0820%" height="15" fill="rgb(221,128,28)" fg:x="973" fg:w="1"/><text x="80.0695%" y="287.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="79.8195%" y="261" width="0.0820%" height="15" fill="rgb(249,67,50)" fg:x="973" fg:w="1"/><text x="80.0695%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="79.8195%" y="245" width="0.0820%" height="15" fill="rgb(241,126,38)" fg:x="973" fg:w="1"/><text x="80.0695%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.8195%" y="229" width="0.0820%" height="15" fill="rgb(239,33,14)" fg:x="973" fg:w="1"/><text x="80.0695%" y="239.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (5 samples, 0.41%)</title><rect x="79.5734%" y="581" width="0.4102%" height="15" fill="rgb(207,221,54)" fg:x="970" fg:w="5"/><text x="79.8234%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (5 samples, 0.41%)</title><rect x="79.5734%" y="565" width="0.4102%" height="15" fill="rgb(242,138,43)" fg:x="970" fg:w="5"/><text x="79.8234%" y="575.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.25%)</title><rect x="79.7375%" y="549" width="0.2461%" height="15" fill="rgb(231,118,19)" fg:x="972" fg:w="3"/><text x="79.9875%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.25%)</title><rect x="79.7375%" y="533" width="0.2461%" height="15" fill="rgb(214,128,54)" fg:x="972" fg:w="3"/><text x="79.9875%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.25%)</title><rect x="79.7375%" y="517" width="0.2461%" height="15" fill="rgb(236,136,6)" fg:x="972" fg:w="3"/><text x="79.9875%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.25%)</title><rect x="79.7375%" y="501" width="0.2461%" height="15" fill="rgb(247,30,38)" fg:x="972" fg:w="3"/><text x="79.9875%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="79.9016%" y="485" width="0.0820%" height="15" fill="rgb(249,189,40)" fg:x="974" fg:w="1"/><text x="80.1516%" y="495.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="79.9016%" y="469" width="0.0820%" height="15" fill="rgb(247,179,7)" fg:x="974" fg:w="1"/><text x="80.1516%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.9016%" y="453" width="0.0820%" height="15" fill="rgb(239,46,52)" fg:x="974" fg:w="1"/><text x="80.1516%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.9016%" y="437" width="0.0820%" height="15" fill="rgb(225,28,52)" fg:x="974" fg:w="1"/><text x="80.1516%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.9016%" y="421" width="0.0820%" height="15" fill="rgb(217,208,44)" fg:x="974" fg:w="1"/><text x="80.1516%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.9016%" y="405" width="0.0820%" height="15" fill="rgb(224,11,34)" fg:x="974" fg:w="1"/><text x="80.1516%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.9016%" y="389" width="0.0820%" height="15" fill="rgb(205,134,17)" fg:x="974" fg:w="1"/><text x="80.1516%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.9016%" y="373" width="0.0820%" height="15" fill="rgb(237,125,9)" fg:x="974" fg:w="1"/><text x="80.1516%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.9016%" y="357" width="0.0820%" height="15" fill="rgb(208,139,47)" fg:x="974" fg:w="1"/><text x="80.1516%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="79.9836%" y="373" width="0.0820%" height="15" fill="rgb(242,5,5)" fg:x="975" fg:w="1"/><text x="80.2336%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="79.9836%" y="389" width="0.1641%" height="15" fill="rgb(218,78,2)" fg:x="975" fg:w="2"/><text x="80.2336%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.0656%" y="373" width="0.0820%" height="15" fill="rgb(217,75,16)" fg:x="976" fg:w="1"/><text x="80.3156%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.0656%" y="357" width="0.0820%" height="15" fill="rgb(212,56,17)" fg:x="976" fg:w="1"/><text x="80.3156%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.0656%" y="341" width="0.0820%" height="15" fill="rgb(228,61,29)" fg:x="976" fg:w="1"/><text x="80.3156%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.0656%" y="325" width="0.0820%" height="15" fill="rgb(247,202,38)" fg:x="976" fg:w="1"/><text x="80.3156%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.0656%" y="309" width="0.0820%" height="15" fill="rgb(211,216,43)" fg:x="976" fg:w="1"/><text x="80.3156%" y="319.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="80.1477%" y="389" width="0.0820%" height="15" fill="rgb(220,7,49)" fg:x="977" fg:w="1"/><text x="80.3977%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.2297%" y="357" width="0.0820%" height="15" fill="rgb(219,158,7)" fg:x="978" fg:w="1"/><text x="80.4797%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="80.2297%" y="341" width="0.0820%" height="15" fill="rgb(206,127,9)" fg:x="978" fg:w="1"/><text x="80.4797%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="80.2297%" y="389" width="0.1641%" height="15" fill="rgb(206,103,43)" fg:x="978" fg:w="2"/><text x="80.4797%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="80.2297%" y="373" width="0.1641%" height="15" fill="rgb(240,108,41)" fg:x="978" fg:w="2"/><text x="80.4797%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.3117%" y="357" width="0.0820%" height="15" fill="rgb(252,212,6)" fg:x="979" fg:w="1"/><text x="80.5617%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.3117%" y="341" width="0.0820%" height="15" fill="rgb(248,105,31)" fg:x="979" fg:w="1"/><text x="80.5617%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.3117%" y="325" width="0.0820%" height="15" fill="rgb(241,123,4)" fg:x="979" fg:w="1"/><text x="80.5617%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.3117%" y="309" width="0.0820%" height="15" fill="rgb(223,74,37)" fg:x="979" fg:w="1"/><text x="80.5617%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.3117%" y="293" width="0.0820%" height="15" fill="rgb(251,219,28)" fg:x="979" fg:w="1"/><text x="80.5617%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.3117%" y="277" width="0.0820%" height="15" fill="rgb(218,36,31)" fg:x="979" fg:w="1"/><text x="80.5617%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.3117%" y="261" width="0.0820%" height="15" fill="rgb(229,40,15)" fg:x="979" fg:w="1"/><text x="80.5617%" y="271.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="80.3938%" y="389" width="0.0820%" height="15" fill="rgb(208,138,37)" fg:x="980" fg:w="1"/><text x="80.6438%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="80.4758%" y="389" width="0.0820%" height="15" fill="rgb(208,40,52)" fg:x="981" fg:w="1"/><text x="80.7258%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.4758%" y="373" width="0.0820%" height="15" fill="rgb(246,181,48)" fg:x="981" fg:w="1"/><text x="80.7258%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.4758%" y="357" width="0.0820%" height="15" fill="rgb(253,178,36)" fg:x="981" fg:w="1"/><text x="80.7258%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4758%" y="341" width="0.0820%" height="15" fill="rgb(210,170,6)" fg:x="981" fg:w="1"/><text x="80.7258%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.4758%" y="325" width="0.0820%" height="15" fill="rgb(243,62,22)" fg:x="981" fg:w="1"/><text x="80.7258%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4758%" y="309" width="0.0820%" height="15" fill="rgb(213,145,26)" fg:x="981" fg:w="1"/><text x="80.7258%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.5578%" y="309" width="0.0820%" height="15" fill="rgb(237,177,23)" fg:x="982" fg:w="1"/><text x="80.8078%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.5578%" y="293" width="0.0820%" height="15" fill="rgb(252,5,24)" fg:x="982" fg:w="1"/><text x="80.8078%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="80.5578%" y="277" width="0.0820%" height="15" fill="rgb(230,108,54)" fg:x="982" fg:w="1"/><text x="80.8078%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="80.5578%" y="261" width="0.0820%" height="15" fill="rgb(252,192,41)" fg:x="982" fg:w="1"/><text x="80.8078%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="80.5578%" y="245" width="0.0820%" height="15" fill="rgb(218,125,20)" fg:x="982" fg:w="1"/><text x="80.8078%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.6399%" y="261" width="0.0820%" height="15" fill="rgb(230,223,15)" fg:x="983" fg:w="1"/><text x="80.8899%" y="271.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="80.7219%" y="261" width="0.0820%" height="15" fill="rgb(239,99,47)" fg:x="984" fg:w="1"/><text x="80.9719%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.7219%" y="245" width="0.0820%" height="15" fill="rgb(222,214,23)" fg:x="984" fg:w="1"/><text x="80.9719%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.25%)</title><rect x="80.8039%" y="229" width="0.2461%" height="15" fill="rgb(250,98,43)" fg:x="985" fg:w="3"/><text x="81.0539%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.33%)</title><rect x="80.8039%" y="245" width="0.3281%" height="15" fill="rgb(226,140,11)" fg:x="985" fg:w="4"/><text x="81.0539%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="81.0500%" y="229" width="0.0820%" height="15" fill="rgb(239,2,22)" fg:x="988" fg:w="1"/><text x="81.3000%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.33%)</title><rect x="81.1321%" y="245" width="0.3281%" height="15" fill="rgb(209,106,26)" fg:x="989" fg:w="4"/><text x="81.3821%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="81.2961%" y="229" width="0.1641%" height="15" fill="rgb(209,135,11)" fg:x="991" fg:w="2"/><text x="81.5461%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (13 samples, 1.07%)</title><rect x="81.4602%" y="181" width="1.0664%" height="15" fill="rgb(241,58,6)" fg:x="993" fg:w="13"/><text x="81.7102%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (13 samples, 1.07%)</title><rect x="81.4602%" y="165" width="1.0664%" height="15" fill="rgb(214,78,1)" fg:x="993" fg:w="13"/><text x="81.7102%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (13 samples, 1.07%)</title><rect x="81.4602%" y="149" width="1.0664%" height="15" fill="rgb(229,135,33)" fg:x="993" fg:w="13"/><text x="81.7102%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 1.15%)</title><rect x="81.4602%" y="229" width="1.1485%" height="15" fill="rgb(245,87,50)" fg:x="993" fg:w="14"/><text x="81.7102%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (14 samples, 1.15%)</title><rect x="81.4602%" y="213" width="1.1485%" height="15" fill="rgb(222,222,8)" fg:x="993" fg:w="14"/><text x="81.7102%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (14 samples, 1.15%)</title><rect x="81.4602%" y="197" width="1.1485%" height="15" fill="rgb(214,97,50)" fg:x="993" fg:w="14"/><text x="81.7102%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="82.5267%" y="181" width="0.0820%" height="15" fill="rgb(244,161,51)" fg:x="1006" fg:w="1"/><text x="82.7767%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.5267%" y="165" width="0.0820%" height="15" fill="rgb(225,17,4)" fg:x="1006" fg:w="1"/><text x="82.7767%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.6087%" y="213" width="0.0820%" height="15" fill="rgb(238,10,13)" fg:x="1007" fg:w="1"/><text x="82.8587%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.6087%" y="197" width="0.0820%" height="15" fill="rgb(239,169,14)" fg:x="1007" fg:w="1"/><text x="82.8587%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.25%)</title><rect x="82.6087%" y="229" width="0.2461%" height="15" fill="rgb(213,105,25)" fg:x="1007" fg:w="3"/><text x="82.8587%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="82.6907%" y="213" width="0.1641%" height="15" fill="rgb(233,4,17)" fg:x="1008" fg:w="2"/><text x="82.9407%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (18 samples, 1.48%)</title><rect x="81.4602%" y="245" width="1.4766%" height="15" fill="rgb(212,5,35)" fg:x="993" fg:w="18"/><text x="81.7102%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="82.8548%" y="229" width="0.0820%" height="15" fill="rgb(216,3,14)" fg:x="1010" fg:w="1"/><text x="83.1048%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="82.8548%" y="213" width="0.0820%" height="15" fill="rgb(240,105,33)" fg:x="1010" fg:w="1"/><text x="83.1048%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::Interval::difference (1 samples, 0.08%)</title><rect x="82.8548%" y="197" width="0.0820%" height="15" fill="rgb(216,73,0)" fg:x="1010" fg:w="1"/><text x="83.1048%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="82.9368%" y="245" width="0.0820%" height="15" fill="rgb(217,153,48)" fg:x="1011" fg:w="1"/><text x="83.1868%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="82.9368%" y="229" width="0.0820%" height="15" fill="rgb(218,180,8)" fg:x="1011" fg:w="1"/><text x="83.1868%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="82.9368%" y="213" width="0.0820%" height="15" fill="rgb(252,168,2)" fg:x="1011" fg:w="1"/><text x="83.1868%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.9368%" y="197" width="0.0820%" height="15" fill="rgb(224,116,33)" fg:x="1011" fg:w="1"/><text x="83.1868%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.9368%" y="181" width="0.0820%" height="15" fill="rgb(229,205,17)" fg:x="1011" fg:w="1"/><text x="83.1868%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9368%" y="165" width="0.0820%" height="15" fill="rgb(234,1,41)" fg:x="1011" fg:w="1"/><text x="83.1868%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (28 samples, 2.30%)</title><rect x="80.8039%" y="261" width="2.2970%" height="15" fill="rgb(244,185,8)" fg:x="985" fg:w="28"/><text x="81.0539%" y="271.50">r..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="83.0189%" y="245" width="0.0820%" height="15" fill="rgb(248,51,21)" fg:x="1012" fg:w="1"/><text x="83.2689%" y="255.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (31 samples, 2.54%)</title><rect x="80.6399%" y="309" width="2.5431%" height="15" fill="rgb(248,157,31)" fg:x="983" fg:w="31"/><text x="80.8899%" y="319.50">&lt;r..</text></g><g><title>regex::builders::string::RegexBuilder::build (31 samples, 2.54%)</title><rect x="80.6399%" y="293" width="2.5431%" height="15" fill="rgb(210,34,47)" fg:x="983" fg:w="31"/><text x="80.8899%" y="303.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (31 samples, 2.54%)</title><rect x="80.6399%" y="277" width="2.5431%" height="15" fill="rgb(227,139,53)" fg:x="983" fg:w="31"/><text x="80.8899%" y="287.50">re..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="83.1009%" y="261" width="0.0820%" height="15" fill="rgb(232,211,37)" fg:x="1013" fg:w="1"/><text x="83.3509%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="83.1009%" y="245" width="0.0820%" height="15" fill="rgb(236,133,10)" fg:x="1013" fg:w="1"/><text x="83.3509%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="83.1009%" y="229" width="0.0820%" height="15" fill="rgb(243,202,25)" fg:x="1013" fg:w="1"/><text x="83.3509%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="83.1829%" y="309" width="0.0820%" height="15" fill="rgb(224,59,9)" fg:x="1014" fg:w="1"/><text x="83.4329%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="83.1829%" y="293" width="0.0820%" height="15" fill="rgb(206,146,16)" fg:x="1014" fg:w="1"/><text x="83.4329%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="83.1829%" y="277" width="0.0820%" height="15" fill="rgb(220,47,2)" fg:x="1014" fg:w="1"/><text x="83.4329%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="83.1829%" y="261" width="0.0820%" height="15" fill="rgb(225,124,51)" fg:x="1014" fg:w="1"/><text x="83.4329%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="83.4290%" y="229" width="0.0820%" height="15" fill="rgb(241,220,50)" fg:x="1017" fg:w="1"/><text x="83.6790%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (37 samples, 3.04%)</title><rect x="80.5578%" y="325" width="3.0353%" height="15" fill="rgb(232,168,5)" fg:x="982" fg:w="37"/><text x="80.8078%" y="335.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.33%)</title><rect x="83.2650%" y="309" width="0.3281%" height="15" fill="rgb(243,90,22)" fg:x="1015" fg:w="4"/><text x="83.5150%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.33%)</title><rect x="83.2650%" y="293" width="0.3281%" height="15" fill="rgb(223,153,32)" fg:x="1015" fg:w="4"/><text x="83.5150%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.33%)</title><rect x="83.2650%" y="277" width="0.3281%" height="15" fill="rgb(243,124,20)" fg:x="1015" fg:w="4"/><text x="83.5150%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.33%)</title><rect x="83.2650%" y="261" width="0.3281%" height="15" fill="rgb(246,168,39)" fg:x="1015" fg:w="4"/><text x="83.5150%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.33%)</title><rect x="83.2650%" y="245" width="0.3281%" height="15" fill="rgb(222,165,54)" fg:x="1015" fg:w="4"/><text x="83.5150%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="83.5111%" y="229" width="0.0820%" height="15" fill="rgb(251,142,27)" fg:x="1018" fg:w="1"/><text x="83.7611%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.33%)</title><rect x="83.5931%" y="245" width="0.3281%" height="15" fill="rgb(207,168,50)" fg:x="1019" fg:w="4"/><text x="83.8431%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.25%)</title><rect x="83.6751%" y="229" width="0.2461%" height="15" fill="rgb(250,139,25)" fg:x="1020" fg:w="3"/><text x="83.9251%" y="239.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="84.0033%" y="149" width="0.0820%" height="15" fill="rgb(214,194,48)" fg:x="1024" fg:w="1"/><text x="84.2533%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.25%)</title><rect x="83.9212%" y="213" width="0.2461%" height="15" fill="rgb(227,138,47)" fg:x="1023" fg:w="3"/><text x="84.1712%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.25%)</title><rect x="83.9212%" y="197" width="0.2461%" height="15" fill="rgb(250,162,5)" fg:x="1023" fg:w="3"/><text x="84.1712%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="84.0033%" y="181" width="0.1641%" height="15" fill="rgb(229,74,25)" fg:x="1024" fg:w="2"/><text x="84.2533%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="84.0033%" y="165" width="0.1641%" height="15" fill="rgb(221,124,34)" fg:x="1024" fg:w="2"/><text x="84.2533%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.0853%" y="149" width="0.0820%" height="15" fill="rgb(225,94,25)" fg:x="1025" fg:w="1"/><text x="84.3353%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.33%)</title><rect x="83.9212%" y="245" width="0.3281%" height="15" fill="rgb(210,100,12)" fg:x="1023" fg:w="4"/><text x="84.1712%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (4 samples, 0.33%)</title><rect x="83.9212%" y="229" width="0.3281%" height="15" fill="rgb(206,62,48)" fg:x="1023" fg:w="4"/><text x="84.1712%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="84.1674%" y="213" width="0.0820%" height="15" fill="rgb(222,181,9)" fg:x="1026" fg:w="1"/><text x="84.4174%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="84.1674%" y="197" width="0.0820%" height="15" fill="rgb(248,42,38)" fg:x="1026" fg:w="1"/><text x="84.4174%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="84.1674%" y="181" width="0.0820%" height="15" fill="rgb(213,40,6)" fg:x="1026" fg:w="1"/><text x="84.4174%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="84.2494%" y="197" width="0.0820%" height="15" fill="rgb(211,108,15)" fg:x="1027" fg:w="1"/><text x="84.4994%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.2494%" y="181" width="0.0820%" height="15" fill="rgb(249,62,9)" fg:x="1027" fg:w="1"/><text x="84.4994%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.2494%" y="165" width="0.0820%" height="15" fill="rgb(233,26,54)" fg:x="1027" fg:w="1"/><text x="84.4994%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.2494%" y="149" width="0.0820%" height="15" fill="rgb(210,175,26)" fg:x="1027" fg:w="1"/><text x="84.4994%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="84.4955%" y="133" width="0.0820%" height="15" fill="rgb(210,43,33)" fg:x="1030" fg:w="1"/><text x="84.7455%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.5775%" y="133" width="0.0820%" height="15" fill="rgb(224,46,17)" fg:x="1031" fg:w="1"/><text x="84.8275%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (21 samples, 1.72%)</title><rect x="84.6596%" y="133" width="1.7227%" height="15" fill="rgb(254,24,38)" fg:x="1032" fg:w="21"/><text x="84.9096%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (21 samples, 1.72%)</title><rect x="84.6596%" y="117" width="1.7227%" height="15" fill="rgb(248,32,0)" fg:x="1032" fg:w="21"/><text x="84.9096%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (21 samples, 1.72%)</title><rect x="84.6596%" y="101" width="1.7227%" height="15" fill="rgb(224,37,41)" fg:x="1032" fg:w="21"/><text x="84.9096%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 2.21%)</title><rect x="84.2494%" y="229" width="2.2149%" height="15" fill="rgb(252,70,22)" fg:x="1027" fg:w="27"/><text x="84.4994%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (27 samples, 2.21%)</title><rect x="84.2494%" y="213" width="2.2149%" height="15" fill="rgb(241,123,50)" fg:x="1027" fg:w="27"/><text x="84.4994%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (26 samples, 2.13%)</title><rect x="84.3314%" y="197" width="2.1329%" height="15" fill="rgb(246,138,33)" fg:x="1028" fg:w="26"/><text x="84.5814%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (26 samples, 2.13%)</title><rect x="84.3314%" y="181" width="2.1329%" height="15" fill="rgb(218,39,32)" fg:x="1028" fg:w="26"/><text x="84.5814%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (26 samples, 2.13%)</title><rect x="84.3314%" y="165" width="2.1329%" height="15" fill="rgb(241,229,10)" fg:x="1028" fg:w="26"/><text x="84.5814%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (26 samples, 2.13%)</title><rect x="84.3314%" y="149" width="2.1329%" height="15" fill="rgb(212,160,10)" fg:x="1028" fg:w="26"/><text x="84.5814%" y="159.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="86.3823%" y="133" width="0.0820%" height="15" fill="rgb(227,48,51)" fg:x="1053" fg:w="1"/><text x="86.6323%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (37 samples, 3.04%)</title><rect x="83.5931%" y="261" width="3.0353%" height="15" fill="rgb(238,159,21)" fg:x="1019" fg:w="37"/><text x="83.8431%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (29 samples, 2.38%)</title><rect x="84.2494%" y="245" width="2.3790%" height="15" fill="rgb(216,1,10)" fg:x="1027" fg:w="29"/><text x="84.4994%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="86.4643%" y="229" width="0.1641%" height="15" fill="rgb(209,228,25)" fg:x="1054" fg:w="2"/><text x="86.7143%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.5463%" y="213" width="0.0820%" height="15" fill="rgb(234,160,10)" fg:x="1055" fg:w="1"/><text x="86.7963%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (38 samples, 3.12%)</title><rect x="83.5931%" y="309" width="3.1173%" height="15" fill="rgb(212,66,25)" fg:x="1019" fg:w="38"/><text x="83.8431%" y="319.50">&lt;re..</text></g><g><title>regex::builders::string::RegexBuilder::build (38 samples, 3.12%)</title><rect x="83.5931%" y="293" width="3.1173%" height="15" fill="rgb(254,121,18)" fg:x="1019" fg:w="38"/><text x="83.8431%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (38 samples, 3.12%)</title><rect x="83.5931%" y="277" width="3.1173%" height="15" fill="rgb(219,127,1)" fg:x="1019" fg:w="38"/><text x="83.8431%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="86.6284%" y="261" width="0.0820%" height="15" fill="rgb(219,224,42)" fg:x="1056" fg:w="1"/><text x="86.8784%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="86.6284%" y="245" width="0.0820%" height="15" fill="rgb(253,130,22)" fg:x="1056" fg:w="1"/><text x="86.8784%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="86.6284%" y="229" width="0.0820%" height="15" fill="rgb(253,39,28)" fg:x="1056" fg:w="1"/><text x="86.8784%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="86.6284%" y="213" width="0.0820%" height="15" fill="rgb(231,126,37)" fg:x="1056" fg:w="1"/><text x="86.8784%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="86.6284%" y="197" width="0.0820%" height="15" fill="rgb(251,145,14)" fg:x="1056" fg:w="1"/><text x="86.8784%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.7925%" y="213" width="0.0820%" height="15" fill="rgb(229,164,30)" fg:x="1058" fg:w="1"/><text x="87.0425%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.7925%" y="197" width="0.0820%" height="15" fill="rgb(233,227,54)" fg:x="1058" fg:w="1"/><text x="87.0425%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.7925%" y="181" width="0.0820%" height="15" fill="rgb(240,94,22)" fg:x="1058" fg:w="1"/><text x="87.0425%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (42 samples, 3.45%)</title><rect x="83.5931%" y="325" width="3.4454%" height="15" fill="rgb(217,56,16)" fg:x="1019" fg:w="42"/><text x="83.8431%" y="335.50">ind..</text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.33%)</title><rect x="86.7104%" y="309" width="0.3281%" height="15" fill="rgb(229,133,38)" fg:x="1057" fg:w="4"/><text x="86.9604%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.33%)</title><rect x="86.7104%" y="293" width="0.3281%" height="15" fill="rgb(225,139,35)" fg:x="1057" fg:w="4"/><text x="86.9604%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.33%)</title><rect x="86.7104%" y="277" width="0.3281%" height="15" fill="rgb(223,100,16)" fg:x="1057" fg:w="4"/><text x="86.9604%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.33%)</title><rect x="86.7104%" y="261" width="0.3281%" height="15" fill="rgb(207,43,50)" fg:x="1057" fg:w="4"/><text x="86.9604%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.33%)</title><rect x="86.7104%" y="245" width="0.3281%" height="15" fill="rgb(237,221,9)" fg:x="1057" fg:w="4"/><text x="86.9604%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.33%)</title><rect x="86.7104%" y="229" width="0.3281%" height="15" fill="rgb(236,134,24)" fg:x="1057" fg:w="4"/><text x="86.9604%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="86.8745%" y="213" width="0.1641%" height="15" fill="rgb(222,173,4)" fg:x="1059" fg:w="2"/><text x="87.1245%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="87.1206%" y="213" width="0.0820%" height="15" fill="rgb(234,144,52)" fg:x="1062" fg:w="1"/><text x="87.3706%" y="223.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="87.1206%" y="197" width="0.0820%" height="15" fill="rgb(223,41,7)" fg:x="1062" fg:w="1"/><text x="87.3706%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.1206%" y="181" width="0.0820%" height="15" fill="rgb(226,143,9)" fg:x="1062" fg:w="1"/><text x="87.3706%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="87.1206%" y="229" width="0.1641%" height="15" fill="rgb(234,43,37)" fg:x="1062" fg:w="2"/><text x="87.3706%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="87.2026%" y="213" width="0.0820%" height="15" fill="rgb(224,188,11)" fg:x="1063" fg:w="1"/><text x="87.4526%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (3 samples, 0.25%)</title><rect x="87.1206%" y="293" width="0.2461%" height="15" fill="rgb(233,113,28)" fg:x="1062" fg:w="3"/><text x="87.3706%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (3 samples, 0.25%)</title><rect x="87.1206%" y="277" width="0.2461%" height="15" fill="rgb(215,16,1)" fg:x="1062" fg:w="3"/><text x="87.3706%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (3 samples, 0.25%)</title><rect x="87.1206%" y="261" width="0.2461%" height="15" fill="rgb(238,74,38)" fg:x="1062" fg:w="3"/><text x="87.3706%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (3 samples, 0.25%)</title><rect x="87.1206%" y="245" width="0.2461%" height="15" fill="rgb(221,66,35)" fg:x="1062" fg:w="3"/><text x="87.3706%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="87.2847%" y="229" width="0.0820%" height="15" fill="rgb(251,225,2)" fg:x="1064" fg:w="1"/><text x="87.5347%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="87.2847%" y="213" width="0.0820%" height="15" fill="rgb(240,169,18)" fg:x="1064" fg:w="1"/><text x="87.5347%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="87.2847%" y="197" width="0.0820%" height="15" fill="rgb(243,130,50)" fg:x="1064" fg:w="1"/><text x="87.5347%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="87.3667%" y="293" width="0.0820%" height="15" fill="rgb(228,75,13)" fg:x="1065" fg:w="1"/><text x="87.6167%" y="303.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (92 samples, 7.55%)</title><rect x="79.9836%" y="405" width="7.5472%" height="15" fill="rgb(252,95,35)" fg:x="975" fg:w="92"/><text x="80.2336%" y="415.50">&lt;&amp;kernel::..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (85 samples, 6.97%)</title><rect x="80.5578%" y="389" width="6.9729%" height="15" fill="rgb(222,180,54)" fg:x="982" fg:w="85"/><text x="80.8078%" y="399.50">plugins_c..</text></g><g><title>indefinite::indefinite (85 samples, 6.97%)</title><rect x="80.5578%" y="373" width="6.9729%" height="15" fill="rgb(250,110,34)" fg:x="982" fg:w="85"/><text x="80.8078%" y="383.50">indefinit..</text></g><g><title>indefinite::methods::indefinite (85 samples, 6.97%)</title><rect x="80.5578%" y="357" width="6.9729%" height="15" fill="rgb(208,100,21)" fg:x="982" fg:w="85"/><text x="80.8078%" y="367.50">indefinit..</text></g><g><title>indefinite::methods::apply_rules (85 samples, 6.97%)</title><rect x="80.5578%" y="341" width="6.9729%" height="15" fill="rgb(209,123,47)" fg:x="982" fg:w="85"/><text x="80.8078%" y="351.50">indefinit..</text></g><g><title>indefinite::rules::other::Other::run (6 samples, 0.49%)</title><rect x="87.0386%" y="325" width="0.4922%" height="15" fill="rgb(237,147,9)" fg:x="1061" fg:w="6"/><text x="87.2886%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (6 samples, 0.49%)</title><rect x="87.0386%" y="309" width="0.4922%" height="15" fill="rgb(228,206,23)" fg:x="1061" fg:w="6"/><text x="87.2886%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="87.4487%" y="293" width="0.0820%" height="15" fill="rgb(217,174,46)" fg:x="1066" fg:w="1"/><text x="87.6987%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="87.4487%" y="277" width="0.0820%" height="15" fill="rgb(231,126,21)" fg:x="1066" fg:w="1"/><text x="87.6987%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="87.4487%" y="261" width="0.0820%" height="15" fill="rgb(245,26,1)" fg:x="1066" fg:w="1"/><text x="87.6987%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="87.4487%" y="245" width="0.0820%" height="15" fill="rgb(224,138,39)" fg:x="1066" fg:w="1"/><text x="87.6987%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="87.4487%" y="229" width="0.0820%" height="15" fill="rgb(208,97,3)" fg:x="1066" fg:w="1"/><text x="87.6987%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.4487%" y="213" width="0.0820%" height="15" fill="rgb(222,77,29)" fg:x="1066" fg:w="1"/><text x="87.6987%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.4487%" y="197" width="0.0820%" height="15" fill="rgb(243,188,36)" fg:x="1066" fg:w="1"/><text x="87.6987%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.4487%" y="181" width="0.0820%" height="15" fill="rgb(218,214,3)" fg:x="1066" fg:w="1"/><text x="87.6987%" y="191.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="87.5308%" y="357" width="0.0820%" height="15" fill="rgb(211,183,45)" fg:x="1067" fg:w="1"/><text x="87.7808%" y="367.50"></text></g><g><title>plugins_core::tools::contained_by (1 samples, 0.08%)</title><rect x="87.6128%" y="357" width="0.0820%" height="15" fill="rgb(230,218,25)" fg:x="1068" fg:w="1"/><text x="87.8628%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.6128%" y="341" width="0.0820%" height="15" fill="rgb(233,86,6)" fg:x="1068" fg:w="1"/><text x="87.8628%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.6128%" y="325" width="0.0820%" height="15" fill="rgb(220,59,24)" fg:x="1068" fg:w="1"/><text x="87.8628%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.6128%" y="309" width="0.0820%" height="15" fill="rgb(227,60,1)" fg:x="1068" fg:w="1"/><text x="87.8628%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="87.6128%" y="293" width="0.0820%" height="15" fill="rgb(216,212,54)" fg:x="1068" fg:w="1"/><text x="87.8628%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.6128%" y="277" width="0.0820%" height="15" fill="rgb(227,81,54)" fg:x="1068" fg:w="1"/><text x="87.8628%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.6128%" y="261" width="0.0820%" height="15" fill="rgb(206,204,43)" fg:x="1068" fg:w="1"/><text x="87.8628%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="87.6128%" y="245" width="0.0820%" height="15" fill="rgb(219,29,26)" fg:x="1068" fg:w="1"/><text x="87.8628%" y="255.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.6948%" y="341" width="0.0820%" height="15" fill="rgb(252,40,36)" fg:x="1069" fg:w="1"/><text x="87.9448%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.6948%" y="325" width="0.0820%" height="15" fill="rgb(224,205,39)" fg:x="1069" fg:w="1"/><text x="87.9448%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.6948%" y="309" width="0.0820%" height="15" fill="rgb(222,13,21)" fg:x="1069" fg:w="1"/><text x="87.9448%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="87.6948%" y="293" width="0.0820%" height="15" fill="rgb(243,139,6)" fg:x="1069" fg:w="1"/><text x="87.9448%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="87.6948%" y="277" width="0.0820%" height="15" fill="rgb(237,101,11)" fg:x="1069" fg:w="1"/><text x="87.9448%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="87.6948%" y="261" width="0.0820%" height="15" fill="rgb(254,49,28)" fg:x="1069" fg:w="1"/><text x="87.9448%" y="271.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="87.6948%" y="245" width="0.0820%" height="15" fill="rgb(223,41,21)" fg:x="1069" fg:w="1"/><text x="87.9448%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.6948%" y="229" width="0.0820%" height="15" fill="rgb(225,103,29)" fg:x="1069" fg:w="1"/><text x="87.9448%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.6948%" y="213" width="0.0820%" height="15" fill="rgb(244,82,43)" fg:x="1069" fg:w="1"/><text x="87.9448%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.6948%" y="197" width="0.0820%" height="15" fill="rgb(217,39,3)" fg:x="1069" fg:w="1"/><text x="87.9448%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.6948%" y="181" width="0.0820%" height="15" fill="rgb(239,128,25)" fg:x="1069" fg:w="1"/><text x="87.9448%" y="191.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (4 samples, 0.33%)</title><rect x="87.5308%" y="373" width="0.3281%" height="15" fill="rgb(210,192,37)" fg:x="1067" fg:w="4"/><text x="87.7808%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="87.6948%" y="357" width="0.1641%" height="15" fill="rgb(219,98,18)" fg:x="1069" fg:w="2"/><text x="87.9448%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="87.7769%" y="341" width="0.0820%" height="15" fill="rgb(224,228,38)" fg:x="1070" fg:w="1"/><text x="88.0269%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="87.7769%" y="325" width="0.0820%" height="15" fill="rgb(241,129,43)" fg:x="1070" fg:w="1"/><text x="88.0269%" y="335.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="87.7769%" y="309" width="0.0820%" height="15" fill="rgb(223,8,51)" fg:x="1070" fg:w="1"/><text x="88.0269%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (5 samples, 0.41%)</title><rect x="87.5308%" y="405" width="0.4102%" height="15" fill="rgb(233,76,24)" fg:x="1067" fg:w="5"/><text x="87.7808%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (5 samples, 0.41%)</title><rect x="87.5308%" y="389" width="0.4102%" height="15" fill="rgb(219,115,10)" fg:x="1067" fg:w="5"/><text x="87.7808%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="87.8589%" y="373" width="0.0820%" height="15" fill="rgb(222,137,12)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="87.8589%" y="357" width="0.0820%" height="15" fill="rgb(216,192,16)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="367.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="87.8589%" y="341" width="0.0820%" height="15" fill="rgb(247,6,27)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="87.8589%" y="325" width="0.0820%" height="15" fill="rgb(254,39,44)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="87.8589%" y="309" width="0.0820%" height="15" fill="rgb(251,116,35)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.8589%" y="293" width="0.0820%" height="15" fill="rgb(208,61,44)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.8589%" y="277" width="0.0820%" height="15" fill="rgb(250,34,5)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.8589%" y="261" width="0.0820%" height="15" fill="rgb(241,40,15)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.8589%" y="245" width="0.0820%" height="15" fill="rgb(229,182,2)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.8589%" y="229" width="0.0820%" height="15" fill="rgb(244,148,52)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="87.8589%" y="213" width="0.0820%" height="15" fill="rgb(225,211,4)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="87.8589%" y="197" width="0.0820%" height="15" fill="rgb(208,222,47)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="87.8589%" y="181" width="0.0820%" height="15" fill="rgb(233,162,0)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.8589%" y="165" width="0.0820%" height="15" fill="rgb(241,54,13)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.8589%" y="149" width="0.0820%" height="15" fill="rgb(213,89,18)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="87.8589%" y="133" width="0.0820%" height="15" fill="rgb(215,170,37)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="87.8589%" y="117" width="0.0820%" height="15" fill="rgb(216,133,15)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="87.8589%" y="101" width="0.0820%" height="15" fill="rgb(230,42,19)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="87.8589%" y="85" width="0.0820%" height="15" fill="rgb(221,103,41)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.8589%" y="69" width="0.0820%" height="15" fill="rgb(220,142,31)" fg:x="1071" fg:w="1"/><text x="88.1089%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="88.0230%" y="213" width="0.1641%" height="15" fill="rgb(239,218,4)" fg:x="1073" fg:w="2"/><text x="88.2730%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="88.0230%" y="197" width="0.1641%" height="15" fill="rgb(232,16,4)" fg:x="1073" fg:w="2"/><text x="88.2730%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="88.0230%" y="181" width="0.1641%" height="15" fill="rgb(226,213,25)" fg:x="1073" fg:w="2"/><text x="88.2730%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="88.0230%" y="165" width="0.1641%" height="15" fill="rgb(235,135,19)" fg:x="1073" fg:w="2"/><text x="88.2730%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="88.0230%" y="149" width="0.1641%" height="15" fill="rgb(240,107,29)" fg:x="1073" fg:w="2"/><text x="88.2730%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="88.0230%" y="133" width="0.1641%" height="15" fill="rgb(206,164,44)" fg:x="1073" fg:w="2"/><text x="88.2730%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="88.0230%" y="117" width="0.1641%" height="15" fill="rgb(210,23,48)" fg:x="1073" fg:w="2"/><text x="88.2730%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="88.0230%" y="101" width="0.1641%" height="15" fill="rgb(212,138,25)" fg:x="1073" fg:w="2"/><text x="88.2730%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="88.0230%" y="85" width="0.1641%" height="15" fill="rgb(224,152,3)" fg:x="1073" fg:w="2"/><text x="88.2730%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="88.0230%" y="69" width="0.1641%" height="15" fill="rgb(214,38,23)" fg:x="1073" fg:w="2"/><text x="88.2730%" y="79.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="88.0230%" y="53" width="0.1641%" height="15" fill="rgb(215,161,10)" fg:x="1073" fg:w="2"/><text x="88.2730%" y="63.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="88.0230%" y="37" width="0.1641%" height="15" fill="rgb(240,185,7)" fg:x="1073" fg:w="2"/><text x="88.2730%" y="47.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (3 samples, 0.25%)</title><rect x="88.0230%" y="277" width="0.2461%" height="15" fill="rgb(244,104,25)" fg:x="1073" fg:w="3"/><text x="88.2730%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="88.0230%" y="261" width="0.2461%" height="15" fill="rgb(242,140,44)" fg:x="1073" fg:w="3"/><text x="88.2730%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="88.0230%" y="245" width="0.2461%" height="15" fill="rgb(245,30,19)" fg:x="1073" fg:w="3"/><text x="88.2730%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="88.0230%" y="229" width="0.2461%" height="15" fill="rgb(219,208,35)" fg:x="1073" fg:w="3"/><text x="88.2730%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.1870%" y="213" width="0.0820%" height="15" fill="rgb(235,200,7)" fg:x="1075" fg:w="1"/><text x="88.4370%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (5 samples, 0.41%)</title><rect x="87.9409%" y="389" width="0.4102%" height="15" fill="rgb(220,193,10)" fg:x="1072" fg:w="5"/><text x="88.1909%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (4 samples, 0.33%)</title><rect x="88.0230%" y="373" width="0.3281%" height="15" fill="rgb(212,216,39)" fg:x="1073" fg:w="4"/><text x="88.2730%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (4 samples, 0.33%)</title><rect x="88.0230%" y="357" width="0.3281%" height="15" fill="rgb(212,134,19)" fg:x="1073" fg:w="4"/><text x="88.2730%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (4 samples, 0.33%)</title><rect x="88.0230%" y="341" width="0.3281%" height="15" fill="rgb(230,57,24)" fg:x="1073" fg:w="4"/><text x="88.2730%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (4 samples, 0.33%)</title><rect x="88.0230%" y="325" width="0.3281%" height="15" fill="rgb(238,209,37)" fg:x="1073" fg:w="4"/><text x="88.2730%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (4 samples, 0.33%)</title><rect x="88.0230%" y="309" width="0.3281%" height="15" fill="rgb(247,11,45)" fg:x="1073" fg:w="4"/><text x="88.2730%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (4 samples, 0.33%)</title><rect x="88.0230%" y="293" width="0.3281%" height="15" fill="rgb(222,126,6)" fg:x="1073" fg:w="4"/><text x="88.2730%" y="303.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="88.2691%" y="277" width="0.0820%" height="15" fill="rgb(245,77,24)" fg:x="1076" fg:w="1"/><text x="88.5191%" y="287.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="88.2691%" y="261" width="0.0820%" height="15" fill="rgb(227,14,24)" fg:x="1076" fg:w="1"/><text x="88.5191%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="88.2691%" y="245" width="0.0820%" height="15" fill="rgb(211,112,42)" fg:x="1076" fg:w="1"/><text x="88.5191%" y="255.50"></text></g><g><title>&lt;twox_hash::sixty_four::XxHash64 as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="88.2691%" y="229" width="0.0820%" height="15" fill="rgb(230,103,42)" fg:x="1076" fg:w="1"/><text x="88.5191%" y="239.50"></text></g><g><title>plugins_core::library::actions::reply_ok (7 samples, 0.57%)</title><rect x="87.9409%" y="405" width="0.5742%" height="15" fill="rgb(228,125,42)" fg:x="1072" fg:w="7"/><text x="88.1909%" y="415.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="88.3511%" y="389" width="0.1641%" height="15" fill="rgb(243,33,6)" fg:x="1077" fg:w="2"/><text x="88.6011%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (2 samples, 0.16%)</title><rect x="88.3511%" y="373" width="0.1641%" height="15" fill="rgb(231,2,40)" fg:x="1077" fg:w="2"/><text x="88.6011%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="88.3511%" y="357" width="0.1641%" height="15" fill="rgb(224,200,53)" fg:x="1077" fg:w="2"/><text x="88.6011%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="88.4331%" y="341" width="0.0820%" height="15" fill="rgb(215,116,36)" fg:x="1078" fg:w="1"/><text x="88.6831%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="88.4331%" y="325" width="0.0820%" height="15" fill="rgb(240,23,51)" fg:x="1078" fg:w="1"/><text x="88.6831%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.4331%" y="309" width="0.0820%" height="15" fill="rgb(221,72,5)" fg:x="1078" fg:w="1"/><text x="88.6831%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.4331%" y="293" width="0.0820%" height="15" fill="rgb(245,142,9)" fg:x="1078" fg:w="1"/><text x="88.6831%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="88.4331%" y="277" width="0.0820%" height="15" fill="rgb(207,34,16)" fg:x="1078" fg:w="1"/><text x="88.6831%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.5972%" y="373" width="0.0820%" height="15" fill="rgb(252,101,12)" fg:x="1080" fg:w="1"/><text x="88.8472%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.5972%" y="357" width="0.0820%" height="15" fill="rgb(239,89,37)" fg:x="1080" fg:w="1"/><text x="88.8472%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.5972%" y="341" width="0.0820%" height="15" fill="rgb(252,227,37)" fg:x="1080" fg:w="1"/><text x="88.8472%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.5972%" y="325" width="0.0820%" height="15" fill="rgb(212,164,17)" fg:x="1080" fg:w="1"/><text x="88.8472%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.5972%" y="309" width="0.0820%" height="15" fill="rgb(240,86,13)" fg:x="1080" fg:w="1"/><text x="88.8472%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="88.5972%" y="293" width="0.0820%" height="15" fill="rgb(233,183,32)" fg:x="1080" fg:w="1"/><text x="88.8472%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="88.5972%" y="277" width="0.0820%" height="15" fill="rgb(205,201,38)" fg:x="1080" fg:w="1"/><text x="88.8472%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="88.5972%" y="261" width="0.0820%" height="15" fill="rgb(210,122,38)" fg:x="1080" fg:w="1"/><text x="88.8472%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.5972%" y="245" width="0.0820%" height="15" fill="rgb(241,174,26)" fg:x="1080" fg:w="1"/><text x="88.8472%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.5972%" y="229" width="0.0820%" height="15" fill="rgb(219,89,7)" fg:x="1080" fg:w="1"/><text x="88.8472%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="88.5972%" y="213" width="0.0820%" height="15" fill="rgb(246,9,24)" fg:x="1080" fg:w="1"/><text x="88.8472%" y="223.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="88.5972%" y="389" width="0.1641%" height="15" fill="rgb(205,132,21)" fg:x="1080" fg:w="2"/><text x="88.8472%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.6792%" y="373" width="0.0820%" height="15" fill="rgb(210,11,17)" fg:x="1081" fg:w="1"/><text x="88.9292%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.6792%" y="357" width="0.0820%" height="15" fill="rgb(226,138,14)" fg:x="1081" fg:w="1"/><text x="88.9292%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="88.6792%" y="341" width="0.0820%" height="15" fill="rgb(224,108,44)" fg:x="1081" fg:w="1"/><text x="88.9292%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="88.7613%" y="389" width="0.0820%" height="15" fill="rgb(247,114,36)" fg:x="1082" fg:w="1"/><text x="89.0113%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="88.7613%" y="373" width="0.0820%" height="15" fill="rgb(231,183,14)" fg:x="1082" fg:w="1"/><text x="89.0113%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="88.7613%" y="357" width="0.0820%" height="15" fill="rgb(218,168,4)" fg:x="1082" fg:w="1"/><text x="89.0113%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="88.7613%" y="341" width="0.0820%" height="15" fill="rgb(210,8,3)" fg:x="1082" fg:w="1"/><text x="89.0113%" y="351.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (109 samples, 8.94%)</title><rect x="79.9836%" y="421" width="8.9418%" height="15" fill="rgb(216,165,0)" fg:x="975" fg:w="109"/><text x="80.2336%" y="431.50">&lt;plugins_core..</text></g><g><title>plugins_core::location::model::change_location (5 samples, 0.41%)</title><rect x="88.5152%" y="405" width="0.4102%" height="15" fill="rgb(245,120,5)" fg:x="1079" fg:w="5"/><text x="88.7652%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="88.8433%" y="389" width="0.0820%" height="15" fill="rgb(249,121,32)" fg:x="1083" fg:w="1"/><text x="89.0933%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="88.8433%" y="373" width="0.0820%" height="15" fill="rgb(211,55,33)" fg:x="1083" fg:w="1"/><text x="89.0933%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="88.8433%" y="357" width="0.0820%" height="15" fill="rgb(254,46,35)" fg:x="1083" fg:w="1"/><text x="89.0933%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="88.8433%" y="341" width="0.0820%" height="15" fill="rgb(213,213,19)" fg:x="1083" fg:w="1"/><text x="89.0933%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="88.8433%" y="325" width="0.0820%" height="15" fill="rgb(207,152,44)" fg:x="1083" fg:w="1"/><text x="89.0933%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="88.8433%" y="309" width="0.0820%" height="15" fill="rgb(227,195,36)" fg:x="1083" fg:w="1"/><text x="89.0933%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.8433%" y="293" width="0.0820%" height="15" fill="rgb(210,137,36)" fg:x="1083" fg:w="1"/><text x="89.0933%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.8433%" y="277" width="0.0820%" height="15" fill="rgb(253,47,47)" fg:x="1083" fg:w="1"/><text x="89.0933%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="89.0894%" y="389" width="0.0820%" height="15" fill="rgb(230,147,18)" fg:x="1086" fg:w="1"/><text x="89.3394%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="89.0894%" y="373" width="0.0820%" height="15" fill="rgb(247,33,49)" fg:x="1086" fg:w="1"/><text x="89.3394%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="89.0894%" y="357" width="0.0820%" height="15" fill="rgb(239,26,29)" fg:x="1086" fg:w="1"/><text x="89.3394%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.0894%" y="341" width="0.0820%" height="15" fill="rgb(245,145,52)" fg:x="1086" fg:w="1"/><text x="89.3394%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="89.0894%" y="325" width="0.0820%" height="15" fill="rgb(224,139,32)" fg:x="1086" fg:w="1"/><text x="89.3394%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.0894%" y="309" width="0.0820%" height="15" fill="rgb(238,202,19)" fg:x="1086" fg:w="1"/><text x="89.3394%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="89.0894%" y="293" width="0.0820%" height="15" fill="rgb(249,211,53)" fg:x="1086" fg:w="1"/><text x="89.3394%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.0894%" y="277" width="0.0820%" height="15" fill="rgb(237,229,33)" fg:x="1086" fg:w="1"/><text x="89.3394%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="89.1715%" y="389" width="0.0820%" height="15" fill="rgb(208,97,40)" fg:x="1087" fg:w="1"/><text x="89.4215%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="89.1715%" y="373" width="0.0820%" height="15" fill="rgb(254,36,16)" fg:x="1087" fg:w="1"/><text x="89.4215%" y="383.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="89.1715%" y="357" width="0.0820%" height="15" fill="rgb(221,7,12)" fg:x="1087" fg:w="1"/><text x="89.4215%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="89.2535%" y="389" width="0.0820%" height="15" fill="rgb(205,11,12)" fg:x="1088" fg:w="1"/><text x="89.5035%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="89.2535%" y="373" width="0.0820%" height="15" fill="rgb(227,72,28)" fg:x="1088" fg:w="1"/><text x="89.5035%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="89.2535%" y="357" width="0.0820%" height="15" fill="rgb(228,7,34)" fg:x="1088" fg:w="1"/><text x="89.5035%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.2535%" y="341" width="0.0820%" height="15" fill="rgb(230,52,42)" fg:x="1088" fg:w="1"/><text x="89.5035%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="89.2535%" y="325" width="0.0820%" height="15" fill="rgb(219,177,53)" fg:x="1088" fg:w="1"/><text x="89.5035%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.2535%" y="309" width="0.0820%" height="15" fill="rgb(243,196,34)" fg:x="1088" fg:w="1"/><text x="89.5035%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.2535%" y="293" width="0.0820%" height="15" fill="rgb(213,66,49)" fg:x="1088" fg:w="1"/><text x="89.5035%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="89.4996%" y="309" width="0.1641%" height="15" fill="rgb(233,11,50)" fg:x="1091" fg:w="2"/><text x="89.7496%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="89.4996%" y="293" width="0.1641%" height="15" fill="rgb(235,190,6)" fg:x="1091" fg:w="2"/><text x="89.7496%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="89.4996%" y="277" width="0.1641%" height="15" fill="rgb(212,64,44)" fg:x="1091" fg:w="2"/><text x="89.7496%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="89.4996%" y="261" width="0.1641%" height="15" fill="rgb(206,95,44)" fg:x="1091" fg:w="2"/><text x="89.7496%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="89.5816%" y="245" width="0.0820%" height="15" fill="rgb(227,136,25)" fg:x="1092" fg:w="1"/><text x="89.8316%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="89.5816%" y="229" width="0.0820%" height="15" fill="rgb(206,178,17)" fg:x="1092" fg:w="1"/><text x="89.8316%" y="239.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="89.5816%" y="213" width="0.0820%" height="15" fill="rgb(208,168,35)" fg:x="1092" fg:w="1"/><text x="89.8316%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="89.6637%" y="261" width="0.0820%" height="15" fill="rgb(213,210,40)" fg:x="1093" fg:w="1"/><text x="89.9137%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.6637%" y="245" width="0.0820%" height="15" fill="rgb(236,60,6)" fg:x="1093" fg:w="1"/><text x="89.9137%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="89.6637%" y="229" width="0.0820%" height="15" fill="rgb(220,186,36)" fg:x="1093" fg:w="1"/><text x="89.9137%" y="239.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.6637%" y="213" width="0.0820%" height="15" fill="rgb(225,120,49)" fg:x="1093" fg:w="1"/><text x="89.9137%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.33%)</title><rect x="89.7457%" y="245" width="0.3281%" height="15" fill="rgb(250,115,20)" fg:x="1094" fg:w="4"/><text x="89.9957%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.33%)</title><rect x="89.7457%" y="229" width="0.3281%" height="15" fill="rgb(207,214,23)" fg:x="1094" fg:w="4"/><text x="89.9957%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="90.0738%" y="181" width="0.0820%" height="15" fill="rgb(240,9,18)" fg:x="1098" fg:w="1"/><text x="90.3238%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="90.0738%" y="165" width="0.0820%" height="15" fill="rgb(232,170,48)" fg:x="1098" fg:w="1"/><text x="90.3238%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.0738%" y="149" width="0.0820%" height="15" fill="rgb(236,149,23)" fg:x="1098" fg:w="1"/><text x="90.3238%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.0738%" y="133" width="0.0820%" height="15" fill="rgb(210,125,42)" fg:x="1098" fg:w="1"/><text x="90.3238%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.0738%" y="117" width="0.0820%" height="15" fill="rgb(207,201,52)" fg:x="1098" fg:w="1"/><text x="90.3238%" y="127.50"></text></g><g><title>regex_automata::meta::strategy::new (25 samples, 2.05%)</title><rect x="89.7457%" y="261" width="2.0509%" height="15" fill="rgb(250,187,37)" fg:x="1094" fg:w="25"/><text x="89.9957%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (21 samples, 1.72%)</title><rect x="90.0738%" y="245" width="1.7227%" height="15" fill="rgb(214,186,2)" fg:x="1098" fg:w="21"/><text x="90.3238%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 1.72%)</title><rect x="90.0738%" y="229" width="1.7227%" height="15" fill="rgb(207,189,15)" fg:x="1098" fg:w="21"/><text x="90.3238%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (21 samples, 1.72%)</title><rect x="90.0738%" y="213" width="1.7227%" height="15" fill="rgb(221,99,21)" fg:x="1098" fg:w="21"/><text x="90.3238%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (21 samples, 1.72%)</title><rect x="90.0738%" y="197" width="1.7227%" height="15" fill="rgb(212,67,18)" fg:x="1098" fg:w="21"/><text x="90.3238%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (20 samples, 1.64%)</title><rect x="90.1559%" y="181" width="1.6407%" height="15" fill="rgb(226,24,24)" fg:x="1099" fg:w="20"/><text x="90.4059%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (20 samples, 1.64%)</title><rect x="90.1559%" y="165" width="1.6407%" height="15" fill="rgb(252,123,31)" fg:x="1099" fg:w="20"/><text x="90.4059%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (20 samples, 1.64%)</title><rect x="90.1559%" y="149" width="1.6407%" height="15" fill="rgb(251,227,47)" fg:x="1099" fg:w="20"/><text x="90.4059%" y="159.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="91.9606%" y="213" width="0.1641%" height="15" fill="rgb(233,84,53)" fg:x="1121" fg:w="2"/><text x="92.2106%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.41%)</title><rect x="91.7966%" y="261" width="0.4102%" height="15" fill="rgb(228,57,19)" fg:x="1119" fg:w="5"/><text x="92.0466%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.41%)</title><rect x="91.7966%" y="245" width="0.4102%" height="15" fill="rgb(251,81,5)" fg:x="1119" fg:w="5"/><text x="92.0466%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.25%)</title><rect x="91.9606%" y="229" width="0.2461%" height="15" fill="rgb(236,211,27)" fg:x="1121" fg:w="3"/><text x="92.2106%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="92.1247%" y="213" width="0.0820%" height="15" fill="rgb(218,21,6)" fg:x="1123" fg:w="1"/><text x="92.3747%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.1247%" y="197" width="0.0820%" height="15" fill="rgb(239,104,19)" fg:x="1123" fg:w="1"/><text x="92.3747%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.1247%" y="181" width="0.0820%" height="15" fill="rgb(234,179,27)" fg:x="1123" fg:w="1"/><text x="92.3747%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.1247%" y="165" width="0.0820%" height="15" fill="rgb(221,154,39)" fg:x="1123" fg:w="1"/><text x="92.3747%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (32 samples, 2.63%)</title><rect x="89.6637%" y="309" width="2.6251%" height="15" fill="rgb(228,190,1)" fg:x="1093" fg:w="32"/><text x="89.9137%" y="319.50">&lt;r..</text></g><g><title>regex::builders::string::RegexBuilder::build (32 samples, 2.63%)</title><rect x="89.6637%" y="293" width="2.6251%" height="15" fill="rgb(244,122,33)" fg:x="1093" fg:w="32"/><text x="89.9137%" y="303.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (32 samples, 2.63%)</title><rect x="89.6637%" y="277" width="2.6251%" height="15" fill="rgb(227,56,37)" fg:x="1093" fg:w="32"/><text x="89.9137%" y="287.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="92.2067%" y="261" width="0.0820%" height="15" fill="rgb(207,158,16)" fg:x="1124" fg:w="1"/><text x="92.4567%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="92.2067%" y="245" width="0.0820%" height="15" fill="rgb(251,222,30)" fg:x="1124" fg:w="1"/><text x="92.4567%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="92.2067%" y="229" width="0.0820%" height="15" fill="rgb(240,22,49)" fg:x="1124" fg:w="1"/><text x="92.4567%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="92.2067%" y="213" width="0.0820%" height="15" fill="rgb(224,207,37)" fg:x="1124" fg:w="1"/><text x="92.4567%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="92.2067%" y="197" width="0.0820%" height="15" fill="rgb(249,188,40)" fg:x="1124" fg:w="1"/><text x="92.4567%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (35 samples, 2.87%)</title><rect x="89.4996%" y="325" width="2.8712%" height="15" fill="rgb(254,141,11)" fg:x="1091" fg:w="35"/><text x="89.7496%" y="335.50">in..</text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="92.2888%" y="309" width="0.0820%" height="15" fill="rgb(231,177,6)" fg:x="1125" fg:w="1"/><text x="92.5388%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="92.2888%" y="293" width="0.0820%" height="15" fill="rgb(241,6,16)" fg:x="1125" fg:w="1"/><text x="92.5388%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="92.2888%" y="277" width="0.0820%" height="15" fill="rgb(230,50,14)" fg:x="1125" fg:w="1"/><text x="92.5388%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="92.2888%" y="261" width="0.0820%" height="15" fill="rgb(254,36,3)" fg:x="1125" fg:w="1"/><text x="92.5388%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="92.2888%" y="245" width="0.0820%" height="15" fill="rgb(226,149,37)" fg:x="1125" fg:w="1"/><text x="92.5388%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.2888%" y="229" width="0.0820%" height="15" fill="rgb(253,49,27)" fg:x="1125" fg:w="1"/><text x="92.5388%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.2888%" y="213" width="0.0820%" height="15" fill="rgb(249,182,52)" fg:x="1125" fg:w="1"/><text x="92.5388%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.3708%" y="261" width="0.0820%" height="15" fill="rgb(223,42,15)" fg:x="1126" fg:w="1"/><text x="92.6208%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.3708%" y="245" width="0.0820%" height="15" fill="rgb(232,31,42)" fg:x="1126" fg:w="1"/><text x="92.6208%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.3708%" y="229" width="0.0820%" height="15" fill="rgb(233,56,46)" fg:x="1126" fg:w="1"/><text x="92.6208%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="92.4528%" y="261" width="0.0820%" height="15" fill="rgb(241,143,21)" fg:x="1127" fg:w="1"/><text x="92.7028%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.4528%" y="245" width="0.0820%" height="15" fill="rgb(251,222,15)" fg:x="1127" fg:w="1"/><text x="92.7028%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="92.4528%" y="229" width="0.0820%" height="15" fill="rgb(242,101,40)" fg:x="1127" fg:w="1"/><text x="92.7028%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.4528%" y="213" width="0.0820%" height="15" fill="rgb(247,60,44)" fg:x="1127" fg:w="1"/><text x="92.7028%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="92.4528%" y="197" width="0.0820%" height="15" fill="rgb(254,48,47)" fg:x="1127" fg:w="1"/><text x="92.7028%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.4528%" y="181" width="0.0820%" height="15" fill="rgb(253,30,33)" fg:x="1127" fg:w="1"/><text x="92.7028%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.4528%" y="165" width="0.0820%" height="15" fill="rgb(253,214,47)" fg:x="1127" fg:w="1"/><text x="92.7028%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.4528%" y="149" width="0.0820%" height="15" fill="rgb(241,108,29)" fg:x="1127" fg:w="1"/><text x="92.7028%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.25%)</title><rect x="92.6169%" y="245" width="0.2461%" height="15" fill="rgb(240,36,2)" fg:x="1129" fg:w="3"/><text x="92.8669%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.25%)</title><rect x="92.6169%" y="229" width="0.2461%" height="15" fill="rgb(243,198,24)" fg:x="1129" fg:w="3"/><text x="92.8669%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="92.8630%" y="213" width="0.0820%" height="15" fill="rgb(225,98,27)" fg:x="1132" fg:w="1"/><text x="93.1130%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="92.9450%" y="213" width="0.0820%" height="15" fill="rgb(208,86,30)" fg:x="1133" fg:w="1"/><text x="93.1950%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.33%)</title><rect x="92.8630%" y="245" width="0.3281%" height="15" fill="rgb(242,157,11)" fg:x="1132" fg:w="4"/><text x="93.1130%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (4 samples, 0.33%)</title><rect x="92.8630%" y="229" width="0.3281%" height="15" fill="rgb(244,84,16)" fg:x="1132" fg:w="4"/><text x="93.1130%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="93.0271%" y="213" width="0.1641%" height="15" fill="rgb(247,20,46)" fg:x="1134" fg:w="2"/><text x="93.2771%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="93.0271%" y="197" width="0.1641%" height="15" fill="rgb(240,157,20)" fg:x="1134" fg:w="2"/><text x="93.2771%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="93.0271%" y="181" width="0.1641%" height="15" fill="rgb(212,151,38)" fg:x="1134" fg:w="2"/><text x="93.2771%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="93.1911%" y="197" width="0.0820%" height="15" fill="rgb(233,197,14)" fg:x="1136" fg:w="1"/><text x="93.4411%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.1911%" y="181" width="0.0820%" height="15" fill="rgb(226,148,28)" fg:x="1136" fg:w="1"/><text x="93.4411%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.1911%" y="165" width="0.0820%" height="15" fill="rgb(244,141,30)" fg:x="1136" fg:w="1"/><text x="93.4411%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.1911%" y="149" width="0.0820%" height="15" fill="rgb(215,73,38)" fg:x="1136" fg:w="1"/><text x="93.4411%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="93.6013%" y="133" width="0.0820%" height="15" fill="rgb(230,148,29)" fg:x="1141" fg:w="1"/><text x="93.8513%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.6833%" y="101" width="0.0820%" height="15" fill="rgb(250,41,52)" fg:x="1142" fg:w="1"/><text x="93.9333%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.6833%" y="85" width="0.0820%" height="15" fill="rgb(215,48,1)" fg:x="1142" fg:w="1"/><text x="93.9333%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.6833%" y="69" width="0.0820%" height="15" fill="rgb(205,223,38)" fg:x="1142" fg:w="1"/><text x="93.9333%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.33%)</title><rect x="93.6833%" y="133" width="0.3281%" height="15" fill="rgb(213,51,8)" fg:x="1142" fg:w="4"/><text x="93.9333%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.33%)</title><rect x="93.6833%" y="117" width="0.3281%" height="15" fill="rgb(248,53,11)" fg:x="1142" fg:w="4"/><text x="93.9333%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.25%)</title><rect x="93.7654%" y="101" width="0.2461%" height="15" fill="rgb(218,140,4)" fg:x="1143" fg:w="3"/><text x="94.0154%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 2.38%)</title><rect x="93.1911%" y="229" width="2.3790%" height="15" fill="rgb(248,161,31)" fg:x="1136" fg:w="29"/><text x="93.4411%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (29 samples, 2.38%)</title><rect x="93.1911%" y="213" width="2.3790%" height="15" fill="rgb(239,88,32)" fg:x="1136" fg:w="29"/><text x="93.4411%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (28 samples, 2.30%)</title><rect x="93.2732%" y="197" width="2.2970%" height="15" fill="rgb(234,14,28)" fg:x="1137" fg:w="28"/><text x="93.5232%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (28 samples, 2.30%)</title><rect x="93.2732%" y="181" width="2.2970%" height="15" fill="rgb(235,173,11)" fg:x="1137" fg:w="28"/><text x="93.5232%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (28 samples, 2.30%)</title><rect x="93.2732%" y="165" width="2.2970%" height="15" fill="rgb(222,70,2)" fg:x="1137" fg:w="28"/><text x="93.5232%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (28 samples, 2.30%)</title><rect x="93.2732%" y="149" width="2.2970%" height="15" fill="rgb(228,196,41)" fg:x="1137" fg:w="28"/><text x="93.5232%" y="159.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (19 samples, 1.56%)</title><rect x="94.0115%" y="133" width="1.5587%" height="15" fill="rgb(249,19,9)" fg:x="1146" fg:w="19"/><text x="94.2615%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (19 samples, 1.56%)</title><rect x="94.0115%" y="117" width="1.5587%" height="15" fill="rgb(221,16,43)" fg:x="1146" fg:w="19"/><text x="94.2615%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (19 samples, 1.56%)</title><rect x="94.0115%" y="101" width="1.5587%" height="15" fill="rgb(225,207,6)" fg:x="1146" fg:w="19"/><text x="94.2615%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.6522%" y="213" width="0.0820%" height="15" fill="rgb(249,32,32)" fg:x="1166" fg:w="1"/><text x="95.9022%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.6522%" y="197" width="0.0820%" height="15" fill="rgb(232,163,43)" fg:x="1166" fg:w="1"/><text x="95.9022%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.6522%" y="181" width="0.0820%" height="15" fill="rgb(236,158,54)" fg:x="1166" fg:w="1"/><text x="95.9022%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (43 samples, 3.53%)</title><rect x="92.5349%" y="261" width="3.5275%" height="15" fill="rgb(205,126,44)" fg:x="1128" fg:w="43"/><text x="92.7849%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (35 samples, 2.87%)</title><rect x="93.1911%" y="245" width="2.8712%" height="15" fill="rgb(210,162,12)" fg:x="1136" fg:w="35"/><text x="93.4411%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.49%)</title><rect x="95.5701%" y="229" width="0.4922%" height="15" fill="rgb(218,156,48)" fg:x="1165" fg:w="6"/><text x="95.8201%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.33%)</title><rect x="95.7342%" y="213" width="0.3281%" height="15" fill="rgb(248,210,3)" fg:x="1167" fg:w="4"/><text x="95.9842%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="96.0623%" y="261" width="0.0820%" height="15" fill="rgb(212,43,27)" fg:x="1171" fg:w="1"/><text x="96.3123%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="96.0623%" y="245" width="0.0820%" height="15" fill="rgb(241,52,6)" fg:x="1171" fg:w="1"/><text x="96.3123%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="96.0623%" y="229" width="0.0820%" height="15" fill="rgb(222,178,35)" fg:x="1171" fg:w="1"/><text x="96.3123%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (47 samples, 3.86%)</title><rect x="92.3708%" y="277" width="3.8556%" height="15" fill="rgb(205,121,46)" fg:x="1126" fg:w="47"/><text x="92.6208%" y="287.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="96.1444%" y="261" width="0.0820%" height="15" fill="rgb(249,67,1)" fg:x="1172" fg:w="1"/><text x="96.3944%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.1444%" y="245" width="0.0820%" height="15" fill="rgb(238,168,42)" fg:x="1172" fg:w="1"/><text x="96.3944%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.1444%" y="229" width="0.0820%" height="15" fill="rgb(205,36,48)" fg:x="1172" fg:w="1"/><text x="96.3944%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (48 samples, 3.94%)</title><rect x="92.3708%" y="309" width="3.9377%" height="15" fill="rgb(240,85,12)" fg:x="1126" fg:w="48"/><text x="92.6208%" y="319.50">&lt;reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (48 samples, 3.94%)</title><rect x="92.3708%" y="293" width="3.9377%" height="15" fill="rgb(245,27,39)" fg:x="1126" fg:w="48"/><text x="92.6208%" y="303.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="96.2264%" y="277" width="0.0820%" height="15" fill="rgb(218,129,34)" fg:x="1173" fg:w="1"/><text x="96.4764%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.3905%" y="213" width="0.0820%" height="15" fill="rgb(221,157,12)" fg:x="1175" fg:w="1"/><text x="96.6405%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.3905%" y="197" width="0.0820%" height="15" fill="rgb(213,206,20)" fg:x="1175" fg:w="1"/><text x="96.6405%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.3905%" y="181" width="0.0820%" height="15" fill="rgb(227,115,30)" fg:x="1175" fg:w="1"/><text x="96.6405%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (53 samples, 4.35%)</title><rect x="92.3708%" y="325" width="4.3478%" height="15" fill="rgb(221,40,47)" fg:x="1126" fg:w="53"/><text x="92.6208%" y="335.50">indef..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.41%)</title><rect x="96.3084%" y="309" width="0.4102%" height="15" fill="rgb(239,96,49)" fg:x="1174" fg:w="5"/><text x="96.5584%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="96.3084%" y="293" width="0.4102%" height="15" fill="rgb(223,24,38)" fg:x="1174" fg:w="5"/><text x="96.5584%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="96.3084%" y="277" width="0.4102%" height="15" fill="rgb(242,35,45)" fg:x="1174" fg:w="5"/><text x="96.5584%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="96.3084%" y="261" width="0.4102%" height="15" fill="rgb(236,20,9)" fg:x="1174" fg:w="5"/><text x="96.5584%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="96.3084%" y="245" width="0.4102%" height="15" fill="rgb(239,124,8)" fg:x="1174" fg:w="5"/><text x="96.5584%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.41%)</title><rect x="96.3084%" y="229" width="0.4102%" height="15" fill="rgb(228,92,29)" fg:x="1174" fg:w="5"/><text x="96.5584%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.25%)</title><rect x="96.4725%" y="213" width="0.2461%" height="15" fill="rgb(251,53,39)" fg:x="1176" fg:w="3"/><text x="96.7225%" y="223.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="96.7186%" y="309" width="0.0820%" height="15" fill="rgb(224,44,10)" fg:x="1179" fg:w="1"/><text x="96.9686%" y="319.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="96.7186%" y="293" width="0.0820%" height="15" fill="rgb(254,10,15)" fg:x="1179" fg:w="1"/><text x="96.9686%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="96.7186%" y="277" width="0.0820%" height="15" fill="rgb(245,173,6)" fg:x="1179" fg:w="1"/><text x="96.9686%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.7186%" y="261" width="0.0820%" height="15" fill="rgb(228,74,0)" fg:x="1179" fg:w="1"/><text x="96.9686%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.7186%" y="245" width="0.0820%" height="15" fill="rgb(206,138,29)" fg:x="1179" fg:w="1"/><text x="96.9686%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.7186%" y="229" width="0.0820%" height="15" fill="rgb(253,27,43)" fg:x="1179" fg:w="1"/><text x="96.9686%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.7186%" y="213" width="0.0820%" height="15" fill="rgb(231,73,0)" fg:x="1179" fg:w="1"/><text x="96.9686%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.7186%" y="197" width="0.0820%" height="15" fill="rgb(218,9,23)" fg:x="1179" fg:w="1"/><text x="96.9686%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.7186%" y="181" width="0.0820%" height="15" fill="rgb(251,55,29)" fg:x="1179" fg:w="1"/><text x="96.9686%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.8007%" y="245" width="0.0820%" height="15" fill="rgb(223,180,22)" fg:x="1180" fg:w="1"/><text x="97.0507%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.8007%" y="229" width="0.0820%" height="15" fill="rgb(223,29,21)" fg:x="1180" fg:w="1"/><text x="97.0507%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.8007%" y="213" width="0.0820%" height="15" fill="rgb(251,103,37)" fg:x="1180" fg:w="1"/><text x="97.0507%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.8007%" y="197" width="0.0820%" height="15" fill="rgb(214,11,21)" fg:x="1180" fg:w="1"/><text x="97.0507%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.8007%" y="181" width="0.0820%" height="15" fill="rgb(205,137,13)" fg:x="1180" fg:w="1"/><text x="97.0507%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (1 samples, 0.08%)</title><rect x="96.8827%" y="245" width="0.0820%" height="15" fill="rgb(225,58,47)" fg:x="1181" fg:w="1"/><text x="97.1327%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="96.8827%" y="229" width="0.0820%" height="15" fill="rgb(222,197,14)" fg:x="1181" fg:w="1"/><text x="97.1327%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="96.8827%" y="213" width="0.0820%" height="15" fill="rgb(215,210,33)" fg:x="1181" fg:w="1"/><text x="97.1327%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="96.8827%" y="197" width="0.0820%" height="15" fill="rgb(242,13,9)" fg:x="1181" fg:w="1"/><text x="97.1327%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="96.9647%" y="245" width="0.0820%" height="15" fill="rgb(218,31,39)" fg:x="1182" fg:w="1"/><text x="97.2147%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="96.9647%" y="229" width="0.0820%" height="15" fill="rgb(211,214,23)" fg:x="1182" fg:w="1"/><text x="97.2147%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="96.9647%" y="213" width="0.0820%" height="15" fill="rgb(237,92,14)" fg:x="1182" fg:w="1"/><text x="97.2147%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="96.9647%" y="197" width="0.0820%" height="15" fill="rgb(220,78,5)" fg:x="1182" fg:w="1"/><text x="97.2147%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (99 samples, 8.12%)</title><rect x="89.0074%" y="405" width="8.1214%" height="15" fill="rgb(237,23,21)" fg:x="1085" fg:w="99"/><text x="89.2574%" y="415.50">&lt;&amp;kernel::m..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (95 samples, 7.79%)</title><rect x="89.3355%" y="389" width="7.7933%" height="15" fill="rgb(251,207,51)" fg:x="1089" fg:w="95"/><text x="89.5855%" y="399.50">plugins_cor..</text></g><g><title>indefinite::indefinite (94 samples, 7.71%)</title><rect x="89.4176%" y="373" width="7.7112%" height="15" fill="rgb(249,206,18)" fg:x="1090" fg:w="94"/><text x="89.6676%" y="383.50">indefinite:..</text></g><g><title>indefinite::methods::indefinite (94 samples, 7.71%)</title><rect x="89.4176%" y="357" width="7.7112%" height="15" fill="rgb(236,20,19)" fg:x="1090" fg:w="94"/><text x="89.6676%" y="367.50">indefinite:..</text></g><g><title>indefinite::methods::apply_rules (93 samples, 7.63%)</title><rect x="89.4996%" y="341" width="7.6292%" height="15" fill="rgb(214,227,29)" fg:x="1091" fg:w="93"/><text x="89.7496%" y="351.50">indefinite..</text></g><g><title>indefinite::rules::other::Other::run (5 samples, 0.41%)</title><rect x="96.7186%" y="325" width="0.4102%" height="15" fill="rgb(209,183,4)" fg:x="1179" fg:w="5"/><text x="96.9686%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (4 samples, 0.33%)</title><rect x="96.8007%" y="309" width="0.3281%" height="15" fill="rgb(233,111,23)" fg:x="1180" fg:w="4"/><text x="97.0507%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (4 samples, 0.33%)</title><rect x="96.8007%" y="293" width="0.3281%" height="15" fill="rgb(238,121,27)" fg:x="1180" fg:w="4"/><text x="97.0507%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (4 samples, 0.33%)</title><rect x="96.8007%" y="277" width="0.3281%" height="15" fill="rgb(236,120,41)" fg:x="1180" fg:w="4"/><text x="97.0507%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (4 samples, 0.33%)</title><rect x="96.8007%" y="261" width="0.3281%" height="15" fill="rgb(241,143,10)" fg:x="1180" fg:w="4"/><text x="97.0507%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.0468%" y="245" width="0.0820%" height="15" fill="rgb(224,86,31)" fg:x="1183" fg:w="1"/><text x="97.2968%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.0468%" y="229" width="0.0820%" height="15" fill="rgb(236,212,27)" fg:x="1183" fg:w="1"/><text x="97.2968%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="97.0468%" y="213" width="0.0820%" height="15" fill="rgb(219,43,51)" fg:x="1183" fg:w="1"/><text x="97.2968%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (1 samples, 0.08%)</title><rect x="97.1288%" y="405" width="0.0820%" height="15" fill="rgb(232,216,8)" fg:x="1184" fg:w="1"/><text x="97.3788%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (1 samples, 0.08%)</title><rect x="97.1288%" y="389" width="0.0820%" height="15" fill="rgb(206,222,39)" fg:x="1184" fg:w="1"/><text x="97.3788%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (1 samples, 0.08%)</title><rect x="97.1288%" y="373" width="0.0820%" height="15" fill="rgb(209,149,48)" fg:x="1184" fg:w="1"/><text x="97.3788%" y="383.50"></text></g><g><title>plugins_core::tools::contained_by (1 samples, 0.08%)</title><rect x="97.1288%" y="357" width="0.0820%" height="15" fill="rgb(229,155,21)" fg:x="1184" fg:w="1"/><text x="97.3788%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.1288%" y="341" width="0.0820%" height="15" fill="rgb(246,152,26)" fg:x="1184" fg:w="1"/><text x="97.3788%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.1288%" y="325" width="0.0820%" height="15" fill="rgb(206,70,42)" fg:x="1184" fg:w="1"/><text x="97.3788%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1288%" y="309" width="0.0820%" height="15" fill="rgb(236,9,11)" fg:x="1184" fg:w="1"/><text x="97.3788%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.1288%" y="293" width="0.0820%" height="15" fill="rgb(238,145,47)" fg:x="1184" fg:w="1"/><text x="97.3788%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.1288%" y="277" width="0.0820%" height="15" fill="rgb(252,189,7)" fg:x="1184" fg:w="1"/><text x="97.3788%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.1288%" y="261" width="0.0820%" height="15" fill="rgb(254,168,51)" fg:x="1184" fg:w="1"/><text x="97.3788%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.1288%" y="245" width="0.0820%" height="15" fill="rgb(227,105,46)" fg:x="1184" fg:w="1"/><text x="97.3788%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1288%" y="229" width="0.0820%" height="15" fill="rgb(227,74,30)" fg:x="1184" fg:w="1"/><text x="97.3788%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="97.2108%" y="405" width="0.0820%" height="15" fill="rgb(206,212,44)" fg:x="1185" fg:w="1"/><text x="97.4608%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.2108%" y="389" width="0.0820%" height="15" fill="rgb(252,69,11)" fg:x="1185" fg:w="1"/><text x="97.4608%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.2108%" y="373" width="0.0820%" height="15" fill="rgb(239,116,0)" fg:x="1185" fg:w="1"/><text x="97.4608%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.2108%" y="357" width="0.0820%" height="15" fill="rgb(246,189,23)" fg:x="1185" fg:w="1"/><text x="97.4608%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.2108%" y="341" width="0.0820%" height="15" fill="rgb(229,50,41)" fg:x="1185" fg:w="1"/><text x="97.4608%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.2108%" y="325" width="0.0820%" height="15" fill="rgb(214,66,37)" fg:x="1185" fg:w="1"/><text x="97.4608%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.2108%" y="309" width="0.0820%" height="15" fill="rgb(226,28,6)" fg:x="1185" fg:w="1"/><text x="97.4608%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.2108%" y="293" width="0.0820%" height="15" fill="rgb(239,154,0)" fg:x="1185" fg:w="1"/><text x="97.4608%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.2108%" y="277" width="0.0820%" height="15" fill="rgb(233,97,11)" fg:x="1185" fg:w="1"/><text x="97.4608%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.2108%" y="261" width="0.0820%" height="15" fill="rgb(236,215,16)" fg:x="1185" fg:w="1"/><text x="97.4608%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.2108%" y="245" width="0.0820%" height="15" fill="rgb(246,188,29)" fg:x="1185" fg:w="1"/><text x="97.4608%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.2108%" y="229" width="0.0820%" height="15" fill="rgb(207,7,29)" fg:x="1185" fg:w="1"/><text x="97.4608%" y="239.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="97.3749%" y="277" width="0.0820%" height="15" fill="rgb(238,112,43)" fg:x="1187" fg:w="1"/><text x="97.6249%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.3749%" y="261" width="0.0820%" height="15" fill="rgb(230,110,32)" fg:x="1187" fg:w="1"/><text x="97.6249%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.3749%" y="245" width="0.0820%" height="15" fill="rgb(218,197,32)" fg:x="1187" fg:w="1"/><text x="97.6249%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.3749%" y="229" width="0.0820%" height="15" fill="rgb(252,61,9)" fg:x="1187" fg:w="1"/><text x="97.6249%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.3749%" y="213" width="0.0820%" height="15" fill="rgb(244,140,14)" fg:x="1187" fg:w="1"/><text x="97.6249%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.3749%" y="197" width="0.0820%" height="15" fill="rgb(216,14,47)" fg:x="1187" fg:w="1"/><text x="97.6249%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.3749%" y="181" width="0.0820%" height="15" fill="rgb(224,130,52)" fg:x="1187" fg:w="1"/><text x="97.6249%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.3749%" y="165" width="0.0820%" height="15" fill="rgb(210,229,51)" fg:x="1187" fg:w="1"/><text x="97.6249%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.3749%" y="149" width="0.0820%" height="15" fill="rgb(242,13,9)" fg:x="1187" fg:w="1"/><text x="97.6249%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.3749%" y="133" width="0.0820%" height="15" fill="rgb(252,71,50)" fg:x="1187" fg:w="1"/><text x="97.6249%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.3749%" y="117" width="0.0820%" height="15" fill="rgb(218,225,6)" fg:x="1187" fg:w="1"/><text x="97.6249%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.3749%" y="101" width="0.0820%" height="15" fill="rgb(219,27,35)" fg:x="1187" fg:w="1"/><text x="97.6249%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.3749%" y="85" width="0.0820%" height="15" fill="rgb(226,30,1)" fg:x="1187" fg:w="1"/><text x="97.6249%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3749%" y="69" width="0.0820%" height="15" fill="rgb(227,164,34)" fg:x="1187" fg:w="1"/><text x="97.6249%" y="79.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (3 samples, 0.25%)</title><rect x="97.2929%" y="389" width="0.2461%" height="15" fill="rgb(206,103,4)" fg:x="1186" fg:w="3"/><text x="97.5429%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (3 samples, 0.25%)</title><rect x="97.2929%" y="373" width="0.2461%" height="15" fill="rgb(214,166,19)" fg:x="1186" fg:w="3"/><text x="97.5429%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (3 samples, 0.25%)</title><rect x="97.2929%" y="357" width="0.2461%" height="15" fill="rgb(240,56,20)" fg:x="1186" fg:w="3"/><text x="97.5429%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (3 samples, 0.25%)</title><rect x="97.2929%" y="341" width="0.2461%" height="15" fill="rgb(224,25,3)" fg:x="1186" fg:w="3"/><text x="97.5429%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (3 samples, 0.25%)</title><rect x="97.2929%" y="325" width="0.2461%" height="15" fill="rgb(216,206,54)" fg:x="1186" fg:w="3"/><text x="97.5429%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (3 samples, 0.25%)</title><rect x="97.2929%" y="309" width="0.2461%" height="15" fill="rgb(225,142,10)" fg:x="1186" fg:w="3"/><text x="97.5429%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (3 samples, 0.25%)</title><rect x="97.2929%" y="293" width="0.2461%" height="15" fill="rgb(246,9,18)" fg:x="1186" fg:w="3"/><text x="97.5429%" y="303.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="97.4569%" y="277" width="0.0820%" height="15" fill="rgb(247,140,18)" fg:x="1188" fg:w="1"/><text x="97.7069%" y="287.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="97.4569%" y="261" width="0.0820%" height="15" fill="rgb(239,184,22)" fg:x="1188" fg:w="1"/><text x="97.7069%" y="271.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (1 samples, 0.08%)</title><rect x="97.5390%" y="373" width="0.0820%" height="15" fill="rgb(227,94,44)" fg:x="1189" fg:w="1"/><text x="97.7890%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="97.5390%" y="357" width="0.0820%" height="15" fill="rgb(219,43,3)" fg:x="1189" fg:w="1"/><text x="97.7890%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5390%" y="341" width="0.0820%" height="15" fill="rgb(210,76,31)" fg:x="1189" fg:w="1"/><text x="97.7890%" y="351.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="97.5390%" y="389" width="0.1641%" height="15" fill="rgb(225,85,12)" fg:x="1189" fg:w="2"/><text x="97.7890%" y="399.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="97.6210%" y="373" width="0.0820%" height="15" fill="rgb(214,191,28)" fg:x="1190" fg:w="1"/><text x="97.8710%" y="383.50"></text></g><g><title>plugins_core::library::actions::reply_ok (6 samples, 0.49%)</title><rect x="97.2929%" y="405" width="0.4922%" height="15" fill="rgb(214,43,14)" fg:x="1186" fg:w="6"/><text x="97.5429%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Carrying&gt; (1 samples, 0.08%)</title><rect x="97.7030%" y="389" width="0.0820%" height="15" fill="rgb(253,117,5)" fg:x="1191" fg:w="1"/><text x="97.9530%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.7030%" y="373" width="0.0820%" height="15" fill="rgb(208,124,26)" fg:x="1191" fg:w="1"/><text x="97.9530%" y="383.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="97.7851%" y="389" width="0.0820%" height="15" fill="rgb(228,208,39)" fg:x="1192" fg:w="1"/><text x="98.0351%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7851%" y="373" width="0.0820%" height="15" fill="rgb(206,180,39)" fg:x="1192" fg:w="1"/><text x="98.0351%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7851%" y="357" width="0.0820%" height="15" fill="rgb(205,111,37)" fg:x="1192" fg:w="1"/><text x="98.0351%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7851%" y="341" width="0.0820%" height="15" fill="rgb(208,121,24)" fg:x="1192" fg:w="1"/><text x="98.0351%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7851%" y="325" width="0.0820%" height="15" fill="rgb(218,215,32)" fg:x="1192" fg:w="1"/><text x="98.0351%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="97.8671%" y="373" width="0.0820%" height="15" fill="rgb(244,168,53)" fg:x="1193" fg:w="1"/><text x="98.1171%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="97.8671%" y="357" width="0.0820%" height="15" fill="rgb(214,9,36)" fg:x="1193" fg:w="1"/><text x="98.1171%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="97.8671%" y="341" width="0.0820%" height="15" fill="rgb(231,4,34)" fg:x="1193" fg:w="1"/><text x="98.1171%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="97.8671%" y="325" width="0.0820%" height="15" fill="rgb(210,83,51)" fg:x="1193" fg:w="1"/><text x="98.1171%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="97.8671%" y="309" width="0.0820%" height="15" fill="rgb(224,112,1)" fg:x="1193" fg:w="1"/><text x="98.1171%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="97.8671%" y="293" width="0.0820%" height="15" fill="rgb(216,33,41)" fg:x="1193" fg:w="1"/><text x="98.1171%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.8671%" y="277" width="0.0820%" height="15" fill="rgb(215,179,42)" fg:x="1193" fg:w="1"/><text x="98.1171%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="97.9491%" y="357" width="0.0820%" height="15" fill="rgb(205,81,48)" fg:x="1194" fg:w="1"/><text x="98.1991%" y="367.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.33%)</title><rect x="97.8671%" y="389" width="0.3281%" height="15" fill="rgb(246,17,30)" fg:x="1193" fg:w="4"/><text x="98.1171%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (3 samples, 0.25%)</title><rect x="97.9491%" y="373" width="0.2461%" height="15" fill="rgb(226,19,16)" fg:x="1194" fg:w="3"/><text x="98.1991%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="98.0312%" y="357" width="0.1641%" height="15" fill="rgb(207,3,14)" fg:x="1195" fg:w="2"/><text x="98.2812%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="98.0312%" y="341" width="0.1641%" height="15" fill="rgb(226,77,12)" fg:x="1195" fg:w="2"/><text x="98.2812%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="98.1132%" y="325" width="0.0820%" height="15" fill="rgb(226,76,25)" fg:x="1196" fg:w="1"/><text x="98.3632%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.1132%" y="309" width="0.0820%" height="15" fill="rgb(217,216,25)" fg:x="1196" fg:w="1"/><text x="98.3632%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1132%" y="293" width="0.0820%" height="15" fill="rgb(247,127,42)" fg:x="1196" fg:w="1"/><text x="98.3632%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.1952%" y="373" width="0.0820%" height="15" fill="rgb(226,10,34)" fg:x="1197" fg:w="1"/><text x="98.4452%" y="383.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="98.1952%" y="389" width="0.1641%" height="15" fill="rgb(249,78,0)" fg:x="1197" fg:w="2"/><text x="98.4452%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="98.2773%" y="373" width="0.0820%" height="15" fill="rgb(226,218,38)" fg:x="1198" fg:w="1"/><text x="98.5273%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="98.2773%" y="357" width="0.0820%" height="15" fill="rgb(240,92,1)" fg:x="1198" fg:w="1"/><text x="98.5273%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="98.2773%" y="341" width="0.0820%" height="15" fill="rgb(237,224,33)" fg:x="1198" fg:w="1"/><text x="98.5273%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.2773%" y="325" width="0.0820%" height="15" fill="rgb(211,46,1)" fg:x="1198" fg:w="1"/><text x="98.5273%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2773%" y="309" width="0.0820%" height="15" fill="rgb(239,190,4)" fg:x="1198" fg:w="1"/><text x="98.5273%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2773%" y="293" width="0.0820%" height="15" fill="rgb(221,50,22)" fg:x="1198" fg:w="1"/><text x="98.5273%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.2773%" y="277" width="0.0820%" height="15" fill="rgb(207,176,8)" fg:x="1198" fg:w="1"/><text x="98.5273%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2773%" y="261" width="0.0820%" height="15" fill="rgb(244,114,50)" fg:x="1198" fg:w="1"/><text x="98.5273%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2773%" y="245" width="0.0820%" height="15" fill="rgb(226,206,19)" fg:x="1198" fg:w="1"/><text x="98.5273%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2773%" y="229" width="0.0820%" height="15" fill="rgb(208,199,16)" fg:x="1198" fg:w="1"/><text x="98.5273%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.2773%" y="213" width="0.0820%" height="15" fill="rgb(208,38,14)" fg:x="1198" fg:w="1"/><text x="98.5273%" y="223.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="98.3593%" y="389" width="0.0820%" height="15" fill="rgb(221,211,49)" fg:x="1199" fg:w="1"/><text x="98.6093%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.3593%" y="373" width="0.0820%" height="15" fill="rgb(227,214,34)" fg:x="1199" fg:w="1"/><text x="98.6093%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3593%" y="357" width="0.0820%" height="15" fill="rgb(234,5,54)" fg:x="1199" fg:w="1"/><text x="98.6093%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3593%" y="341" width="0.0820%" height="15" fill="rgb(236,215,22)" fg:x="1199" fg:w="1"/><text x="98.6093%" y="351.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (227 samples, 18.62%)</title><rect x="79.9836%" y="549" width="18.6218%" height="15" fill="rgb(244,0,11)" fg:x="975" fg:w="227"/><text x="80.2336%" y="559.50">kernel::plugins::mw::Middlewa..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (227 samples, 18.62%)</title><rect x="79.9836%" y="533" width="18.6218%" height="15" fill="rgb(212,140,16)" fg:x="975" fg:w="227"/><text x="80.2336%" y="543.50">&lt;plugins_dynlib::DynamicMiddl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (227 samples, 18.62%)</title><rect x="79.9836%" y="517" width="18.6218%" height="15" fill="rgb(238,101,37)" fg:x="975" fg:w="227"/><text x="80.2336%" y="527.50">kernel::plugins::mw::Middlewa..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (227 samples, 18.62%)</title><rect x="79.9836%" y="501" width="18.6218%" height="15" fill="rgb(247,46,3)" fg:x="975" fg:w="227"/><text x="80.2336%" y="511.50">core::ops::function::FnOnce::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (227 samples, 18.62%)</title><rect x="79.9836%" y="485" width="18.6218%" height="15" fill="rgb(208,106,19)" fg:x="975" fg:w="227"/><text x="80.2336%" y="495.50">kernel::plugins::mw::Middlewa..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (227 samples, 18.62%)</title><rect x="79.9836%" y="469" width="18.6218%" height="15" fill="rgb(240,227,15)" fg:x="975" fg:w="227"/><text x="80.2336%" y="479.50">core::ops::function::FnOnce::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (227 samples, 18.62%)</title><rect x="79.9836%" y="453" width="18.6218%" height="15" fill="rgb(226,173,6)" fg:x="975" fg:w="227"/><text x="80.2336%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as co..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (227 samples, 18.62%)</title><rect x="79.9836%" y="437" width="18.6218%" height="15" fill="rgb(213,191,1)" fg:x="975" fg:w="227"/><text x="80.2336%" y="447.50">&lt;engine::session::state::Stat..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (118 samples, 9.68%)</title><rect x="88.9253%" y="421" width="9.6801%" height="15" fill="rgb(246,51,36)" fg:x="1084" fg:w="118"/><text x="89.1753%" y="431.50">&lt;plugins_core:..</text></g><g><title>plugins_core::location::model::change_location (10 samples, 0.82%)</title><rect x="97.7851%" y="405" width="0.8203%" height="15" fill="rgb(238,40,32)" fg:x="1192" fg:w="10"/><text x="98.0351%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="98.4413%" y="389" width="0.1641%" height="15" fill="rgb(208,126,27)" fg:x="1200" fg:w="2"/><text x="98.6913%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="98.4413%" y="373" width="0.1641%" height="15" fill="rgb(227,117,38)" fg:x="1200" fg:w="2"/><text x="98.6913%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="98.4413%" y="357" width="0.1641%" height="15" fill="rgb(232,16,1)" fg:x="1200" fg:w="2"/><text x="98.6913%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.5234%" y="341" width="0.0820%" height="15" fill="rgb(212,111,31)" fg:x="1201" fg:w="1"/><text x="98.7734%" y="351.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.6874%" y="533" width="0.0820%" height="15" fill="rgb(253,227,2)" fg:x="1203" fg:w="1"/><text x="98.9374%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8515%" y="485" width="0.0820%" height="15" fill="rgb(216,122,17)" fg:x="1205" fg:w="1"/><text x="99.1015%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8515%" y="469" width="0.0820%" height="15" fill="rgb(227,37,2)" fg:x="1205" fg:w="1"/><text x="99.1015%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8515%" y="453" width="0.0820%" height="15" fill="rgb(244,113,40)" fg:x="1205" fg:w="1"/><text x="99.1015%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8515%" y="437" width="0.0820%" height="15" fill="rgb(217,193,34)" fg:x="1205" fg:w="1"/><text x="99.1015%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="98.8515%" y="501" width="0.2461%" height="15" fill="rgb(212,223,15)" fg:x="1205" fg:w="3"/><text x="99.1015%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (2 samples, 0.16%)</title><rect x="98.9336%" y="485" width="0.1641%" height="15" fill="rgb(238,143,18)" fg:x="1206" fg:w="2"/><text x="99.1836%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.0156%" y="469" width="0.0820%" height="15" fill="rgb(231,18,49)" fg:x="1207" fg:w="1"/><text x="99.2656%" y="479.50"></text></g><g><title>plugins_core::tools::contained_by (4 samples, 0.33%)</title><rect x="98.8515%" y="517" width="0.3281%" height="15" fill="rgb(249,122,4)" fg:x="1205" fg:w="4"/><text x="99.1015%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="99.0976%" y="501" width="0.0820%" height="15" fill="rgb(245,138,54)" fg:x="1208" fg:w="1"/><text x="99.3476%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="99.0976%" y="485" width="0.0820%" height="15" fill="rgb(218,130,18)" fg:x="1208" fg:w="1"/><text x="99.3476%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="99.0976%" y="469" width="0.0820%" height="15" fill="rgb(235,94,13)" fg:x="1208" fg:w="1"/><text x="99.3476%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.0976%" y="453" width="0.0820%" height="15" fill="rgb(247,143,5)" fg:x="1208" fg:w="1"/><text x="99.3476%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0976%" y="437" width="0.0820%" height="15" fill="rgb(212,59,54)" fg:x="1208" fg:w="1"/><text x="99.3476%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0976%" y="421" width="0.0820%" height="15" fill="rgb(206,121,24)" fg:x="1208" fg:w="1"/><text x="99.3476%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0976%" y="405" width="0.0820%" height="15" fill="rgb(235,38,8)" fg:x="1208" fg:w="1"/><text x="99.3476%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="99.1797%" y="485" width="0.0820%" height="15" fill="rgb(227,102,26)" fg:x="1209" fg:w="1"/><text x="99.4297%" y="495.50"></text></g><g><title>engine::session::Session::captured (251 samples, 20.59%)</title><rect x="78.8351%" y="693" width="20.5906%" height="15" fill="rgb(240,183,46)" fg:x="961" fg:w="251"/><text x="79.0851%" y="703.50">engine::session::Session::captur..</text></g><g><title>engine::session::logs::capture (245 samples, 20.10%)</title><rect x="79.3273%" y="677" width="20.0984%" height="15" fill="rgb(208,177,23)" fg:x="967" fg:w="245"/><text x="79.5773%" y="687.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (243 samples, 19.93%)</title><rect x="79.4914%" y="661" width="19.9344%" height="15" fill="rgb(216,152,5)" fg:x="969" fg:w="243"/><text x="79.7414%" y="671.50">tracing_core::dispatcher::with_..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (243 samples, 19.93%)</title><rect x="79.4914%" y="645" width="19.9344%" height="15" fill="rgb(238,199,2)" fg:x="969" fg:w="243"/><text x="79.7414%" y="655.50">&lt;engine::session::Session as ke..</text></g><g><title>kernel::plugins::mw::apply_middleware (242 samples, 19.85%)</title><rect x="79.5734%" y="629" width="19.8523%" height="15" fill="rgb(235,142,28)" fg:x="970" fg:w="242"/><text x="79.8234%" y="639.50">kernel::plugins::mw::apply_midd..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (242 samples, 19.85%)</title><rect x="79.5734%" y="613" width="19.8523%" height="15" fill="rgb(225,97,25)" fg:x="970" fg:w="242"/><text x="79.8234%" y="623.50">kernel::plugins::mw::Middleware..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (242 samples, 19.85%)</title><rect x="79.5734%" y="597" width="19.8523%" height="15" fill="rgb(208,75,46)" fg:x="970" fg:w="242"/><text x="79.8234%" y="607.50">&lt;engine::session::ExpandSurroun..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (237 samples, 19.44%)</title><rect x="79.9836%" y="581" width="19.4422%" height="15" fill="rgb(240,136,15)" fg:x="975" fg:w="237"/><text x="80.2336%" y="591.50">kernel::plugins::mw::Middlewar..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (237 samples, 19.44%)</title><rect x="79.9836%" y="565" width="19.4422%" height="15" fill="rgb(235,36,27)" fg:x="975" fg:w="237"/><text x="80.2336%" y="575.50">&lt;plugins_rune::RuneMiddleware ..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (10 samples, 0.82%)</title><rect x="98.6054%" y="549" width="0.8203%" height="15" fill="rgb(231,132,23)" fg:x="1202" fg:w="10"/><text x="98.8554%" y="559.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (8 samples, 0.66%)</title><rect x="98.7695%" y="533" width="0.6563%" height="15" fill="rgb(205,208,20)" fg:x="1204" fg:w="8"/><text x="99.0195%" y="543.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.25%)</title><rect x="99.1797%" y="517" width="0.2461%" height="15" fill="rgb(215,26,40)" fg:x="1209" fg:w="3"/><text x="99.4297%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="99.1797%" y="501" width="0.2461%" height="15" fill="rgb(238,183,34)" fg:x="1209" fg:w="3"/><text x="99.4297%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.2617%" y="485" width="0.1641%" height="15" fill="rgb(207,96,10)" fg:x="1210" fg:w="2"/><text x="99.5117%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.2617%" y="469" width="0.1641%" height="15" fill="rgb(218,88,6)" fg:x="1210" fg:w="2"/><text x="99.5117%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3437%" y="453" width="0.0820%" height="15" fill="rgb(217,22,49)" fg:x="1211" fg:w="1"/><text x="99.5937%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3437%" y="437" width="0.0820%" height="15" fill="rgb(240,195,14)" fg:x="1211" fg:w="1"/><text x="99.5937%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4258%" y="597" width="0.0820%" height="15" fill="rgb(229,48,27)" fg:x="1212" fg:w="1"/><text x="99.6758%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4258%" y="581" width="0.0820%" height="15" fill="rgb(220,194,45)" fg:x="1212" fg:w="1"/><text x="99.6758%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4258%" y="565" width="0.0820%" height="15" fill="rgb(252,60,20)" fg:x="1212" fg:w="1"/><text x="99.6758%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4258%" y="549" width="0.0820%" height="15" fill="rgb(244,169,33)" fg:x="1212" fg:w="1"/><text x="99.6758%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4258%" y="533" width="0.0820%" height="15" fill="rgb(234,141,34)" fg:x="1212" fg:w="1"/><text x="99.6758%" y="543.50"></text></g><g><title>engine::session::internal::Added::find_refs (2 samples, 0.16%)</title><rect x="99.4258%" y="677" width="0.1641%" height="15" fill="rgb(241,141,9)" fg:x="1212" fg:w="2"/><text x="99.6758%" y="687.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.4258%" y="661" width="0.1641%" height="15" fill="rgb(246,27,36)" fg:x="1212" fg:w="2"/><text x="99.6758%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.4258%" y="645" width="0.1641%" height="15" fill="rgb(216,188,42)" fg:x="1212" fg:w="2"/><text x="99.6758%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.4258%" y="629" width="0.1641%" height="15" fill="rgb(234,205,22)" fg:x="1212" fg:w="2"/><text x="99.6758%" y="639.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.4258%" y="613" width="0.1641%" height="15" fill="rgb(210,202,32)" fg:x="1212" fg:w="2"/><text x="99.6758%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.5078%" y="597" width="0.0820%" height="15" fill="rgb(217,0,48)" fg:x="1213" fg:w="1"/><text x="99.7578%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.5078%" y="581" width="0.0820%" height="15" fill="rgb(207,115,37)" fg:x="1213" fg:w="1"/><text x="99.7578%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.5078%" y="565" width="0.0820%" height="15" fill="rgb(237,221,44)" fg:x="1213" fg:w="1"/><text x="99.7578%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.5078%" y="549" width="0.0820%" height="15" fill="rgb(249,78,2)" fg:x="1213" fg:w="1"/><text x="99.7578%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.5078%" y="533" width="0.0820%" height="15" fill="rgb(211,169,23)" fg:x="1213" fg:w="1"/><text x="99.7578%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.5078%" y="517" width="0.0820%" height="15" fill="rgb(207,116,29)" fg:x="1213" fg:w="1"/><text x="99.7578%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5078%" y="501" width="0.0820%" height="15" fill="rgb(240,84,33)" fg:x="1213" fg:w="1"/><text x="99.7578%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5078%" y="485" width="0.0820%" height="15" fill="rgb(229,224,31)" fg:x="1213" fg:w="1"/><text x="99.7578%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="99.5078%" y="469" width="0.0820%" height="15" fill="rgb(227,90,31)" fg:x="1213" fg:w="1"/><text x="99.7578%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="99.5078%" y="453" width="0.0820%" height="15" fill="rgb(249,22,41)" fg:x="1213" fg:w="1"/><text x="99.7578%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5898%" y="661" width="0.0820%" height="15" fill="rgb(239,65,11)" fg:x="1214" fg:w="1"/><text x="99.8398%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5898%" y="645" width="0.0820%" height="15" fill="rgb(205,5,23)" fg:x="1214" fg:w="1"/><text x="99.8398%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5898%" y="629" width="0.0820%" height="15" fill="rgb(254,78,52)" fg:x="1214" fg:w="1"/><text x="99.8398%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5898%" y="613" width="0.0820%" height="15" fill="rgb(214,156,33)" fg:x="1214" fg:w="1"/><text x="99.8398%" y="623.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.33%)</title><rect x="99.4258%" y="693" width="0.3281%" height="15" fill="rgb(208,20,30)" fg:x="1212" fg:w="4"/><text x="99.6758%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.5898%" y="677" width="0.1641%" height="15" fill="rgb(223,133,18)" fg:x="1214" fg:w="2"/><text x="99.8398%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.6719%" y="661" width="0.0820%" height="15" fill="rgb(222,91,41)" fg:x="1215" fg:w="1"/><text x="99.9219%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6719%" y="645" width="0.0820%" height="15" fill="rgb(247,137,48)" fg:x="1215" fg:w="1"/><text x="99.9219%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6719%" y="629" width="0.0820%" height="15" fill="rgb(239,156,11)" fg:x="1215" fg:w="1"/><text x="99.9219%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6719%" y="613" width="0.0820%" height="15" fill="rgb(244,56,26)" fg:x="1215" fg:w="1"/><text x="99.9219%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6719%" y="597" width="0.0820%" height="15" fill="rgb(205,131,49)" fg:x="1215" fg:w="1"/><text x="99.9219%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6719%" y="581" width="0.0820%" height="15" fill="rgb(224,0,2)" fg:x="1215" fg:w="1"/><text x="99.9219%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6719%" y="565" width="0.0820%" height="15" fill="rgb(247,59,36)" fg:x="1215" fg:w="1"/><text x="99.9219%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6719%" y="549" width="0.0820%" height="15" fill="rgb(215,4,47)" fg:x="1215" fg:w="1"/><text x="99.9219%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6719%" y="533" width="0.0820%" height="15" fill="rgb(242,72,42)" fg:x="1215" fg:w="1"/><text x="99.9219%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6719%" y="517" width="0.0820%" height="15" fill="rgb(232,145,44)" fg:x="1215" fg:w="1"/><text x="99.9219%" y="527.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.6719%" y="501" width="0.0820%" height="15" fill="rgb(205,108,43)" fg:x="1215" fg:w="1"/><text x="99.9219%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6719%" y="485" width="0.0820%" height="15" fill="rgb(215,190,17)" fg:x="1215" fg:w="1"/><text x="99.9219%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.7539%" y="645" width="0.0820%" height="15" fill="rgb(223,90,34)" fg:x="1216" fg:w="1"/><text x="100.0039%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7539%" y="629" width="0.0820%" height="15" fill="rgb(216,25,0)" fg:x="1216" fg:w="1"/><text x="100.0039%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7539%" y="613" width="0.0820%" height="15" fill="rgb(223,51,28)" fg:x="1216" fg:w="1"/><text x="100.0039%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.7539%" y="597" width="0.0820%" height="15" fill="rgb(227,131,7)" fg:x="1216" fg:w="1"/><text x="100.0039%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7539%" y="581" width="0.0820%" height="15" fill="rgb(216,72,36)" fg:x="1216" fg:w="1"/><text x="100.0039%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7539%" y="565" width="0.0820%" height="15" fill="rgb(243,158,40)" fg:x="1216" fg:w="1"/><text x="100.0039%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7539%" y="549" width="0.0820%" height="15" fill="rgb(218,60,54)" fg:x="1216" fg:w="1"/><text x="100.0039%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7539%" y="533" width="0.0820%" height="15" fill="rgb(230,15,46)" fg:x="1216" fg:w="1"/><text x="100.0039%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7539%" y="517" width="0.0820%" height="15" fill="rgb(250,22,26)" fg:x="1216" fg:w="1"/><text x="100.0039%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.7539%" y="661" width="0.1641%" height="15" fill="rgb(239,194,40)" fg:x="1216" fg:w="2"/><text x="100.0039%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.8359%" y="645" width="0.0820%" height="15" fill="rgb(219,62,9)" fg:x="1217" fg:w="1"/><text x="100.0859%" y="655.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.8359%" y="629" width="0.0820%" height="15" fill="rgb(228,45,21)" fg:x="1217" fg:w="1"/><text x="100.0859%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8359%" y="613" width="0.0820%" height="15" fill="rgb(242,56,44)" fg:x="1217" fg:w="1"/><text x="100.0859%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8359%" y="597" width="0.0820%" height="15" fill="rgb(239,170,14)" fg:x="1217" fg:w="1"/><text x="100.0859%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8359%" y="581" width="0.0820%" height="15" fill="rgb(236,150,13)" fg:x="1217" fg:w="1"/><text x="100.0859%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8359%" y="565" width="0.0820%" height="15" fill="rgb(228,15,30)" fg:x="1217" fg:w="1"/><text x="100.0859%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8359%" y="549" width="0.0820%" height="15" fill="rgb(217,43,28)" fg:x="1217" fg:w="1"/><text x="100.0859%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8359%" y="533" width="0.0820%" height="15" fill="rgb(246,223,1)" fg:x="1217" fg:w="1"/><text x="100.0859%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8359%" y="517" width="0.0820%" height="15" fill="rgb(247,103,7)" fg:x="1217" fg:w="1"/><text x="100.0859%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8359%" y="501" width="0.0820%" height="15" fill="rgb(205,105,39)" fg:x="1217" fg:w="1"/><text x="100.0859%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8359%" y="485" width="0.0820%" height="15" fill="rgb(216,134,18)" fg:x="1217" fg:w="1"/><text x="100.0859%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8359%" y="469" width="0.0820%" height="15" fill="rgb(226,139,50)" fg:x="1217" fg:w="1"/><text x="100.0859%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.8359%" y="453" width="0.0820%" height="15" fill="rgb(251,152,38)" fg:x="1217" fg:w="1"/><text x="100.0859%" y="463.50"></text></g><g><title>all (1,219 samples, 100%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(222,63,15)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="1087.50"></text></g><g><title>simple-2ed4cb03 (1,219 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(212,198,28)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="1071.50">simple-2ed4cb03</text></g><g><title>_start (1,219 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(216,93,38)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="1055.50">_start</text></g><g><title>__libc_start_main (1,219 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(247,202,44)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="1039.50">__libc_start_main</text></g><g><title>main (1,219 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(237,204,46)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="1023.50">main</text></g><g><title>std::rt::lang_start_internal (1,219 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(224,98,48)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="1007.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,219 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(247,105,21)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,219 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(212,137,52)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,219 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(223,76,33)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="959.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,219 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(209,156,27)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,219 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(249,81,54)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,219 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(241,46,29)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,219 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(213,193,39)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,219 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(214,85,16)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="879.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,219 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(216,184,17)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="863.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,219 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(254,219,29)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="847.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,219 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(209,148,34)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="831.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,219 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(253,215,11)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="815.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,219 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(232,126,20)" fg:x="0" fg:w="1219"/><text x="0.2500%" y="799.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (366 samples, 30.02%)</title><rect x="69.9754%" y="773" width="30.0246%" height="15" fill="rgb(248,118,51)" fg:x="853" fg:w="366"/><text x="70.2254%" y="783.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterio..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (366 samples, 30.02%)</title><rect x="69.9754%" y="757" width="30.0246%" height="15" fill="rgb(226,121,21)" fg:x="853" fg:w="366"/><text x="70.2254%" y="767.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (366 samples, 30.02%)</title><rect x="69.9754%" y="741" width="30.0246%" height="15" fill="rgb(216,128,16)" fg:x="853" fg:w="366"/><text x="70.2254%" y="751.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (262 samples, 21.49%)</title><rect x="78.5070%" y="725" width="21.4930%" height="15" fill="rgb(205,17,9)" fg:x="957" fg:w="262"/><text x="78.7570%" y="735.50">engine::session::Session::evaluate..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (262 samples, 21.49%)</title><rect x="78.5070%" y="709" width="21.4930%" height="15" fill="rgb(206,197,21)" fg:x="957" fg:w="262"/><text x="78.7570%" y="719.50">engine::session::Session::evaluate..</text></g><g><title>kernel::model::EntityPtrResolver::world (3 samples, 0.25%)</title><rect x="99.7539%" y="693" width="0.2461%" height="15" fill="rgb(212,202,9)" fg:x="1216" fg:w="3"/><text x="100.0039%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.25%)</title><rect x="99.7539%" y="677" width="0.2461%" height="15" fill="rgb(241,131,50)" fg:x="1216" fg:w="3"/><text x="100.0039%" y="687.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="99.9180%" y="661" width="0.0820%" height="15" fill="rgb(228,115,51)" fg:x="1218" fg:w="1"/><text x="100.1680%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.9180%" y="645" width="0.0820%" height="15" fill="rgb(237,209,8)" fg:x="1218" fg:w="1"/><text x="100.1680%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.9180%" y="629" width="0.0820%" height="15" fill="rgb(241,121,28)" fg:x="1218" fg:w="1"/><text x="100.1680%" y="639.50"></text></g></svg></svg>