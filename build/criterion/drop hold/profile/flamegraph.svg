<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1246"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0803%" y="677" width="0.0803%" height="15" fill="rgb(220,56,43)" fg:x="1" fg:w="1"/><text x="0.3303%" y="687.50"></text></g><g><title>__libc_free (5 samples, 0.40%)</title><rect x="0.1605%" y="661" width="0.4013%" height="15" fill="rgb(246,136,46)" fg:x="2" fg:w="5"/><text x="0.4105%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (7 samples, 0.56%)</title><rect x="0.0803%" y="725" width="0.5618%" height="15" fill="rgb(249,99,12)" fg:x="1" fg:w="7"/><text x="0.3303%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.0803%" y="709" width="0.5618%" height="15" fill="rgb(224,31,42)" fg:x="1" fg:w="7"/><text x="0.3303%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (7 samples, 0.56%)</title><rect x="0.0803%" y="693" width="0.5618%" height="15" fill="rgb(208,96,21)" fg:x="1" fg:w="7"/><text x="0.3303%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (6 samples, 0.48%)</title><rect x="0.1605%" y="677" width="0.4815%" height="15" fill="rgb(237,229,7)" fg:x="2" fg:w="6"/><text x="0.4105%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="0.5618%" y="661" width="0.0803%" height="15" fill="rgb(210,12,6)" fg:x="7" fg:w="1"/><text x="0.8118%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5618%" y="645" width="0.0803%" height="15" fill="rgb(240,9,34)" fg:x="7" fg:w="1"/><text x="0.8118%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8026%" y="629" width="0.0803%" height="15" fill="rgb(211,68,37)" fg:x="10" fg:w="1"/><text x="1.0526%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9631%" y="613" width="0.0803%" height="15" fill="rgb(249,138,50)" fg:x="12" fg:w="1"/><text x="1.2131%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.0433%" y="613" width="0.0803%" height="15" fill="rgb(243,185,40)" fg:x="13" fg:w="1"/><text x="1.2933%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0433%" y="597" width="0.0803%" height="15" fill="rgb(242,92,35)" fg:x="13" fg:w="1"/><text x="1.2933%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.1236%" y="597" width="0.0803%" height="15" fill="rgb(244,98,5)" fg:x="14" fg:w="1"/><text x="1.3736%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.7223%" y="661" width="0.5618%" height="15" fill="rgb(228,186,29)" fg:x="9" fg:w="7"/><text x="0.9723%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="0.7223%" y="645" width="0.5618%" height="15" fill="rgb(253,7,44)" fg:x="9" fg:w="7"/><text x="0.9723%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.8828%" y="629" width="0.4013%" height="15" fill="rgb(216,11,45)" fg:x="11" fg:w="5"/><text x="1.1328%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.1236%" y="613" width="0.1605%" height="15" fill="rgb(205,67,3)" fg:x="14" fg:w="2"/><text x="1.3736%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.2039%" y="597" width="0.0803%" height="15" fill="rgb(250,18,3)" fg:x="15" fg:w="1"/><text x="1.4539%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.4446%" y="613" width="0.0803%" height="15" fill="rgb(241,222,43)" fg:x="18" fg:w="1"/><text x="1.6946%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.4446%" y="597" width="0.0803%" height="15" fill="rgb(233,115,3)" fg:x="18" fg:w="1"/><text x="1.6946%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (12 samples, 0.96%)</title><rect x="0.6421%" y="725" width="0.9631%" height="15" fill="rgb(215,165,25)" fg:x="8" fg:w="12"/><text x="0.8921%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.96%)</title><rect x="0.6421%" y="709" width="0.9631%" height="15" fill="rgb(234,179,6)" fg:x="8" fg:w="12"/><text x="0.8921%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (12 samples, 0.96%)</title><rect x="0.6421%" y="693" width="0.9631%" height="15" fill="rgb(215,82,23)" fg:x="8" fg:w="12"/><text x="0.8921%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.96%)</title><rect x="0.6421%" y="677" width="0.9631%" height="15" fill="rgb(211,47,18)" fg:x="8" fg:w="12"/><text x="0.8921%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="1.2841%" y="661" width="0.3210%" height="15" fill="rgb(248,17,9)" fg:x="16" fg:w="4"/><text x="1.5341%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="1.2841%" y="645" width="0.3210%" height="15" fill="rgb(210,212,12)" fg:x="16" fg:w="4"/><text x="1.5341%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.3644%" y="629" width="0.2408%" height="15" fill="rgb(230,135,45)" fg:x="17" fg:w="3"/><text x="1.6144%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.5249%" y="613" width="0.0803%" height="15" fill="rgb(214,121,41)" fg:x="19" fg:w="1"/><text x="1.7749%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5249%" y="597" width="0.0803%" height="15" fill="rgb(239,165,45)" fg:x="19" fg:w="1"/><text x="1.7749%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.69%)</title><rect x="0.0000%" y="741" width="1.6854%" height="15" fill="rgb(214,85,51)" fg:x="0" fg:w="21"/><text x="0.2500%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::Captured&gt; (1 samples, 0.08%)</title><rect x="1.6051%" y="725" width="0.0803%" height="15" fill="rgb(223,90,27)" fg:x="20" fg:w="1"/><text x="1.8551%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.7657%" y="693" width="0.0803%" height="15" fill="rgb(244,84,11)" fg:x="22" fg:w="1"/><text x="2.0157%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="1.7657%" y="677" width="0.0803%" height="15" fill="rgb(253,41,47)" fg:x="22" fg:w="1"/><text x="2.0157%" y="687.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="1.8459%" y="645" width="0.0803%" height="15" fill="rgb(232,39,5)" fg:x="23" fg:w="1"/><text x="2.0959%" y="655.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="1.8459%" y="629" width="0.0803%" height="15" fill="rgb(211,93,4)" fg:x="23" fg:w="1"/><text x="2.0959%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="1.8459%" y="613" width="0.0803%" height="15" fill="rgb(219,50,49)" fg:x="23" fg:w="1"/><text x="2.0959%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="1.8459%" y="597" width="0.0803%" height="15" fill="rgb(232,80,19)" fg:x="23" fg:w="1"/><text x="2.0959%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="1.8459%" y="581" width="0.0803%" height="15" fill="rgb(215,227,39)" fg:x="23" fg:w="1"/><text x="2.0959%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="1.8459%" y="565" width="0.0803%" height="15" fill="rgb(211,99,12)" fg:x="23" fg:w="1"/><text x="2.0959%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="1.8459%" y="661" width="0.2408%" height="15" fill="rgb(214,158,5)" fg:x="23" fg:w="3"/><text x="2.0959%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="1.9262%" y="645" width="0.1605%" height="15" fill="rgb(242,19,53)" fg:x="24" fg:w="2"/><text x="2.1762%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="1.9262%" y="629" width="0.1605%" height="15" fill="rgb(208,18,20)" fg:x="24" fg:w="2"/><text x="2.1762%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="1.9262%" y="613" width="0.1605%" height="15" fill="rgb(250,44,11)" fg:x="24" fg:w="2"/><text x="2.1762%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="1.9262%" y="597" width="0.1605%" height="15" fill="rgb(238,159,13)" fg:x="24" fg:w="2"/><text x="2.1762%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="1.9262%" y="581" width="0.1605%" height="15" fill="rgb(231,74,18)" fg:x="24" fg:w="2"/><text x="2.1762%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="1.9262%" y="565" width="0.1605%" height="15" fill="rgb(229,219,45)" fg:x="24" fg:w="2"/><text x="2.1762%" y="575.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="1.9262%" y="549" width="0.1605%" height="15" fill="rgb(210,221,1)" fg:x="24" fg:w="2"/><text x="2.1762%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.1669%" y="613" width="0.0803%" height="15" fill="rgb(209,60,51)" fg:x="27" fg:w="1"/><text x="2.4169%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.1669%" y="597" width="0.0803%" height="15" fill="rgb(252,97,34)" fg:x="27" fg:w="1"/><text x="2.4169%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.1669%" y="581" width="0.0803%" height="15" fill="rgb(243,211,37)" fg:x="27" fg:w="1"/><text x="2.4169%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.1669%" y="565" width="0.0803%" height="15" fill="rgb(210,229,37)" fg:x="27" fg:w="1"/><text x="2.4169%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.1669%" y="549" width="0.0803%" height="15" fill="rgb(220,208,43)" fg:x="27" fg:w="1"/><text x="2.4169%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.1669%" y="533" width="0.0803%" height="15" fill="rgb(218,118,50)" fg:x="27" fg:w="1"/><text x="2.4169%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.1669%" y="517" width="0.0803%" height="15" fill="rgb(254,169,52)" fg:x="27" fg:w="1"/><text x="2.4169%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.1669%" y="501" width="0.0803%" height="15" fill="rgb(221,214,37)" fg:x="27" fg:w="1"/><text x="2.4169%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.1669%" y="485" width="0.0803%" height="15" fill="rgb(254,186,32)" fg:x="27" fg:w="1"/><text x="2.4169%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.1669%" y="469" width="0.0803%" height="15" fill="rgb(215,144,43)" fg:x="27" fg:w="1"/><text x="2.4169%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.1669%" y="453" width="0.0803%" height="15" fill="rgb(252,21,46)" fg:x="27" fg:w="1"/><text x="2.4169%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.1669%" y="437" width="0.0803%" height="15" fill="rgb(207,166,46)" fg:x="27" fg:w="1"/><text x="2.4169%" y="447.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (5 samples, 0.40%)</title><rect x="2.0867%" y="645" width="0.4013%" height="15" fill="rgb(253,37,49)" fg:x="26" fg:w="5"/><text x="2.3367%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.40%)</title><rect x="2.0867%" y="629" width="0.4013%" height="15" fill="rgb(222,97,20)" fg:x="26" fg:w="5"/><text x="2.3367%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="2.2472%" y="613" width="0.2408%" height="15" fill="rgb(244,181,26)" fg:x="28" fg:w="3"/><text x="2.4972%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.4077%" y="597" width="0.0803%" height="15" fill="rgb(241,22,29)" fg:x="30" fg:w="1"/><text x="2.6577%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.4077%" y="581" width="0.0803%" height="15" fill="rgb(206,200,43)" fg:x="30" fg:w="1"/><text x="2.6577%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.4077%" y="565" width="0.0803%" height="15" fill="rgb(226,224,43)" fg:x="30" fg:w="1"/><text x="2.6577%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.4077%" y="549" width="0.0803%" height="15" fill="rgb(253,129,28)" fg:x="30" fg:w="1"/><text x="2.6577%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.4077%" y="533" width="0.0803%" height="15" fill="rgb(252,99,33)" fg:x="30" fg:w="1"/><text x="2.6577%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.4077%" y="517" width="0.0803%" height="15" fill="rgb(208,123,45)" fg:x="30" fg:w="1"/><text x="2.6577%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.4077%" y="501" width="0.0803%" height="15" fill="rgb(251,106,12)" fg:x="30" fg:w="1"/><text x="2.6577%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.4077%" y="485" width="0.0803%" height="15" fill="rgb(240,209,35)" fg:x="30" fg:w="1"/><text x="2.6577%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.4077%" y="469" width="0.0803%" height="15" fill="rgb(214,52,50)" fg:x="30" fg:w="1"/><text x="2.6577%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.4077%" y="453" width="0.0803%" height="15" fill="rgb(234,119,4)" fg:x="30" fg:w="1"/><text x="2.6577%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.4077%" y="437" width="0.0803%" height="15" fill="rgb(228,181,36)" fg:x="30" fg:w="1"/><text x="2.6577%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4077%" y="421" width="0.0803%" height="15" fill="rgb(213,171,42)" fg:x="30" fg:w="1"/><text x="2.6577%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6485%" y="597" width="0.0803%" height="15" fill="rgb(239,14,41)" fg:x="33" fg:w="1"/><text x="2.8985%" y="607.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="2.4880%" y="629" width="0.5618%" height="15" fill="rgb(239,111,46)" fg:x="31" fg:w="7"/><text x="2.7380%" y="639.50"></text></g><g><title>glob::fill_todo (7 samples, 0.56%)</title><rect x="2.4880%" y="613" width="0.5618%" height="15" fill="rgb(214,72,7)" fg:x="31" fg:w="7"/><text x="2.7380%" y="623.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="2.7287%" y="597" width="0.3210%" height="15" fill="rgb(221,114,1)" fg:x="34" fg:w="4"/><text x="2.9787%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="2.7287%" y="581" width="0.3210%" height="15" fill="rgb(213,143,14)" fg:x="34" fg:w="4"/><text x="2.9787%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="2.7287%" y="565" width="0.3210%" height="15" fill="rgb(220,221,53)" fg:x="34" fg:w="4"/><text x="2.9787%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="2.7287%" y="549" width="0.3210%" height="15" fill="rgb(236,189,27)" fg:x="34" fg:w="4"/><text x="2.9787%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="2.7287%" y="533" width="0.3210%" height="15" fill="rgb(252,139,49)" fg:x="34" fg:w="4"/><text x="2.9787%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="2.7287%" y="517" width="0.3210%" height="15" fill="rgb(231,158,33)" fg:x="34" fg:w="4"/><text x="2.9787%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="2.7287%" y="501" width="0.3210%" height="15" fill="rgb(207,201,15)" fg:x="34" fg:w="4"/><text x="2.9787%" y="511.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="2.7287%" y="485" width="0.3210%" height="15" fill="rgb(218,43,48)" fg:x="34" fg:w="4"/><text x="2.9787%" y="495.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.1300%" y="597" width="0.1605%" height="15" fill="rgb(244,63,52)" fg:x="39" fg:w="2"/><text x="3.3800%" y="607.50"></text></g><g><title>std::path::PathBuf::_push (2 samples, 0.16%)</title><rect x="3.1300%" y="581" width="0.1605%" height="15" fill="rgb(236,60,17)" fg:x="39" fg:w="2"/><text x="3.3800%" y="591.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (17 samples, 1.36%)</title><rect x="2.0867%" y="661" width="1.3644%" height="15" fill="rgb(205,206,29)" fg:x="26" fg:w="17"/><text x="2.3367%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (12 samples, 0.96%)</title><rect x="2.4880%" y="645" width="0.9631%" height="15" fill="rgb(205,209,35)" fg:x="31" fg:w="12"/><text x="2.7380%" y="655.50"></text></g><g><title>glob::glob (5 samples, 0.40%)</title><rect x="3.0498%" y="629" width="0.4013%" height="15" fill="rgb(227,112,14)" fg:x="38" fg:w="5"/><text x="3.2998%" y="639.50"></text></g><g><title>glob::glob_with (5 samples, 0.40%)</title><rect x="3.0498%" y="613" width="0.4013%" height="15" fill="rgb(248,151,9)" fg:x="38" fg:w="5"/><text x="3.2998%" y="623.50"></text></g><g><title>glob::Pattern::new (2 samples, 0.16%)</title><rect x="3.2905%" y="597" width="0.1605%" height="15" fill="rgb(247,45,40)" fg:x="41" fg:w="2"/><text x="3.5405%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.2905%" y="581" width="0.1605%" height="15" fill="rgb(232,185,16)" fg:x="41" fg:w="2"/><text x="3.5405%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6116%" y="581" width="0.0803%" height="15" fill="rgb(215,45,44)" fg:x="45" fg:w="1"/><text x="3.8616%" y="591.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="3.6116%" y="629" width="0.1605%" height="15" fill="rgb(206,69,32)" fg:x="45" fg:w="2"/><text x="3.8616%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="3.6116%" y="613" width="0.1605%" height="15" fill="rgb(233,98,50)" fg:x="45" fg:w="2"/><text x="3.8616%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="3.6116%" y="597" width="0.1605%" height="15" fill="rgb(232,217,52)" fg:x="45" fg:w="2"/><text x="3.8616%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.6918%" y="581" width="0.0803%" height="15" fill="rgb(250,42,51)" fg:x="46" fg:w="1"/><text x="3.9418%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.6918%" y="565" width="0.0803%" height="15" fill="rgb(241,200,26)" fg:x="46" fg:w="1"/><text x="3.9418%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6918%" y="549" width="0.0803%" height="15" fill="rgb(207,10,32)" fg:x="46" fg:w="1"/><text x="3.9418%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.7721%" y="597" width="0.0803%" height="15" fill="rgb(214,63,15)" fg:x="47" fg:w="1"/><text x="4.0221%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.7721%" y="581" width="0.0803%" height="15" fill="rgb(234,176,14)" fg:x="47" fg:w="1"/><text x="4.0221%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.7721%" y="565" width="0.0803%" height="15" fill="rgb(226,104,52)" fg:x="47" fg:w="1"/><text x="4.0221%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.7721%" y="549" width="0.0803%" height="15" fill="rgb(211,222,1)" fg:x="47" fg:w="1"/><text x="4.0221%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7721%" y="533" width="0.0803%" height="15" fill="rgb(237,7,3)" fg:x="47" fg:w="1"/><text x="4.0221%" y="543.50"></text></g><g><title>&lt;plugins_core::carrying::actions::GiveToAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.8523%" y="597" width="0.0803%" height="15" fill="rgb(218,143,7)" fg:x="48" fg:w="1"/><text x="4.1023%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="3.7721%" y="629" width="0.2408%" height="15" fill="rgb(208,25,22)" fg:x="47" fg:w="3"/><text x="4.0221%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="3.7721%" y="613" width="0.2408%" height="15" fill="rgb(228,127,16)" fg:x="47" fg:w="3"/><text x="4.0221%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="3.9326%" y="597" width="0.0803%" height="15" fill="rgb(237,86,27)" fg:x="49" fg:w="1"/><text x="4.1826%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.9326%" y="581" width="0.0803%" height="15" fill="rgb(207,125,19)" fg:x="49" fg:w="1"/><text x="4.1826%" y="591.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.0128%" y="613" width="0.0803%" height="15" fill="rgb(243,195,0)" fg:x="50" fg:w="1"/><text x="4.2628%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.0128%" y="597" width="0.0803%" height="15" fill="rgb(230,95,18)" fg:x="50" fg:w="1"/><text x="4.2628%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0128%" y="581" width="0.0803%" height="15" fill="rgb(232,157,21)" fg:x="50" fg:w="1"/><text x="4.2628%" y="591.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="4.0128%" y="629" width="0.1605%" height="15" fill="rgb(212,120,50)" fg:x="50" fg:w="2"/><text x="4.2628%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.0931%" y="613" width="0.0803%" height="15" fill="rgb(222,204,44)" fg:x="51" fg:w="1"/><text x="4.3431%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.0931%" y="597" width="0.0803%" height="15" fill="rgb(236,6,33)" fg:x="51" fg:w="1"/><text x="4.3431%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.0931%" y="581" width="0.0803%" height="15" fill="rgb(247,11,38)" fg:x="51" fg:w="1"/><text x="4.3431%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.0931%" y="565" width="0.0803%" height="15" fill="rgb(215,111,0)" fg:x="51" fg:w="1"/><text x="4.3431%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0931%" y="549" width="0.0803%" height="15" fill="rgb(211,65,46)" fg:x="51" fg:w="1"/><text x="4.3431%" y="559.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.1734%" y="629" width="0.0803%" height="15" fill="rgb(216,5,12)" fg:x="52" fg:w="1"/><text x="4.4234%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.1734%" y="613" width="0.0803%" height="15" fill="rgb(226,7,2)" fg:x="52" fg:w="1"/><text x="4.4234%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.1734%" y="597" width="0.0803%" height="15" fill="rgb(242,116,12)" fg:x="52" fg:w="1"/><text x="4.4234%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.1734%" y="581" width="0.0803%" height="15" fill="rgb(249,209,7)" fg:x="52" fg:w="1"/><text x="4.4234%" y="591.50"></text></g><g><title>&lt;plugins_core::memory::MemoryPlugin as kernel::plugins::Plugin&gt;::key (1 samples, 0.08%)</title><rect x="4.2536%" y="629" width="0.0803%" height="15" fill="rgb(232,73,17)" fg:x="53" fg:w="1"/><text x="4.5036%" y="639.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.3339%" y="629" width="0.0803%" height="15" fill="rgb(214,13,32)" fg:x="54" fg:w="1"/><text x="4.5839%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.3339%" y="613" width="0.0803%" height="15" fill="rgb(221,125,10)" fg:x="54" fg:w="1"/><text x="4.5839%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.3339%" y="597" width="0.0803%" height="15" fill="rgb(246,7,44)" fg:x="54" fg:w="1"/><text x="4.5839%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.3339%" y="581" width="0.0803%" height="15" fill="rgb(239,18,35)" fg:x="54" fg:w="1"/><text x="4.5839%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (13 samples, 1.04%)</title><rect x="3.4510%" y="661" width="1.0433%" height="15" fill="rgb(250,222,16)" fg:x="43" fg:w="13"/><text x="3.7010%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 1.04%)</title><rect x="3.4510%" y="645" width="1.0433%" height="15" fill="rgb(219,100,8)" fg:x="43" fg:w="13"/><text x="3.7010%" y="655.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.4141%" y="629" width="0.0803%" height="15" fill="rgb(240,62,13)" fg:x="55" fg:w="1"/><text x="4.6641%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.4141%" y="613" width="0.0803%" height="15" fill="rgb(253,194,2)" fg:x="55" fg:w="1"/><text x="4.6641%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="4.5746%" y="645" width="0.1605%" height="15" fill="rgb(235,58,31)" fg:x="57" fg:w="2"/><text x="4.8246%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (38 samples, 3.05%)</title><rect x="1.8459%" y="677" width="3.0498%" height="15" fill="rgb(231,37,11)" fg:x="23" fg:w="38"/><text x="2.0959%" y="687.50">ker..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (5 samples, 0.40%)</title><rect x="4.4944%" y="661" width="0.4013%" height="15" fill="rgb(235,133,0)" fg:x="56" fg:w="5"/><text x="4.7444%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="4.7352%" y="645" width="0.1605%" height="15" fill="rgb(212,185,40)" fg:x="59" fg:w="2"/><text x="4.9852%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="4.7352%" y="629" width="0.1605%" height="15" fill="rgb(216,68,42)" fg:x="59" fg:w="2"/><text x="4.9852%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.9759%" y="645" width="0.0803%" height="15" fill="rgb(239,81,4)" fg:x="62" fg:w="1"/><text x="5.2259%" y="655.50"></text></g><g><title>engine::session::Session::initialize (44 samples, 3.53%)</title><rect x="1.8459%" y="693" width="3.5313%" height="15" fill="rgb(206,86,6)" fg:x="23" fg:w="44"/><text x="2.0959%" y="703.50">eng..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (6 samples, 0.48%)</title><rect x="4.8957%" y="677" width="0.4815%" height="15" fill="rgb(249,95,27)" fg:x="61" fg:w="6"/><text x="5.1457%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="4.8957%" y="661" width="0.4815%" height="15" fill="rgb(205,155,45)" fg:x="61" fg:w="6"/><text x="5.1457%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="5.0562%" y="645" width="0.3210%" height="15" fill="rgb(213,55,42)" fg:x="63" fg:w="4"/><text x="5.3062%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="5.0562%" y="629" width="0.3210%" height="15" fill="rgb(249,197,4)" fg:x="63" fg:w="4"/><text x="5.3062%" y="639.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="5.0562%" y="613" width="0.3210%" height="15" fill="rgb(212,128,32)" fg:x="63" fg:w="4"/><text x="5.3062%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (47 samples, 3.77%)</title><rect x="1.6854%" y="741" width="3.7721%" height="15" fill="rgb(252,47,30)" fg:x="21" fg:w="47"/><text x="1.9354%" y="751.50">&lt;eng..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (47 samples, 3.77%)</title><rect x="1.6854%" y="725" width="3.7721%" height="15" fill="rgb(209,79,18)" fg:x="21" fg:w="47"/><text x="1.9354%" y="735.50">engi..</text></g><g><title>engine::session::Session::new (46 samples, 3.69%)</title><rect x="1.7657%" y="709" width="3.6918%" height="15" fill="rgb(225,81,38)" fg:x="22" fg:w="46"/><text x="2.0157%" y="719.50">engi..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="5.3772%" y="693" width="0.0803%" height="15" fill="rgb(205,95,16)" fg:x="67" fg:w="1"/><text x="5.6272%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.3772%" y="677" width="0.0803%" height="15" fill="rgb(214,30,4)" fg:x="67" fg:w="1"/><text x="5.6272%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.4575%" y="677" width="0.0803%" height="15" fill="rgb(232,137,22)" fg:x="68" fg:w="1"/><text x="5.7075%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.4575%" y="661" width="0.0803%" height="15" fill="rgb(232,156,19)" fg:x="68" fg:w="1"/><text x="5.7075%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="5.4575%" y="725" width="0.1605%" height="15" fill="rgb(248,157,26)" fg:x="68" fg:w="2"/><text x="5.7075%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (2 samples, 0.16%)</title><rect x="5.4575%" y="709" width="0.1605%" height="15" fill="rgb(242,24,3)" fg:x="68" fg:w="2"/><text x="5.7075%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="5.4575%" y="693" width="0.1605%" height="15" fill="rgb(218,195,48)" fg:x="68" fg:w="2"/><text x="5.7075%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.5377%" y="677" width="0.0803%" height="15" fill="rgb(214,193,36)" fg:x="69" fg:w="1"/><text x="5.7877%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.5377%" y="661" width="0.0803%" height="15" fill="rgb(242,110,40)" fg:x="69" fg:w="1"/><text x="5.7877%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.5377%" y="645" width="0.0803%" height="15" fill="rgb(233,150,26)" fg:x="69" fg:w="1"/><text x="5.7877%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="5.6180%" y="725" width="0.0803%" height="15" fill="rgb(239,200,30)" fg:x="70" fg:w="1"/><text x="5.8680%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;kernel::model::entity_ref::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="5.6180%" y="709" width="0.0803%" height="15" fill="rgb(226,28,11)" fg:x="70" fg:w="1"/><text x="5.8680%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="5.7785%" y="709" width="0.1605%" height="15" fill="rgb(220,26,48)" fg:x="72" fg:w="2"/><text x="6.0285%" y="719.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="5.7785%" y="693" width="0.1605%" height="15" fill="rgb(232,10,11)" fg:x="72" fg:w="2"/><text x="6.0285%" y="703.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="5.9390%" y="709" width="0.0803%" height="15" fill="rgb(252,143,50)" fg:x="74" fg:w="1"/><text x="6.1890%" y="719.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="5.9390%" y="693" width="0.0803%" height="15" fill="rgb(206,58,22)" fg:x="74" fg:w="1"/><text x="6.1890%" y="703.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="5.9390%" y="677" width="0.0803%" height="15" fill="rgb(250,9,45)" fg:x="74" fg:w="1"/><text x="6.1890%" y="687.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="5.9390%" y="661" width="0.0803%" height="15" fill="rgb(225,148,14)" fg:x="74" fg:w="1"/><text x="6.1890%" y="671.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="5.9390%" y="645" width="0.0803%" height="15" fill="rgb(205,178,40)" fg:x="74" fg:w="1"/><text x="6.1890%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="5.9390%" y="629" width="0.0803%" height="15" fill="rgb(215,201,4)" fg:x="74" fg:w="1"/><text x="6.1890%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="5.9390%" y="613" width="0.0803%" height="15" fill="rgb(219,223,24)" fg:x="74" fg:w="1"/><text x="6.1890%" y="623.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="5.9390%" y="597" width="0.0803%" height="15" fill="rgb(217,19,31)" fg:x="74" fg:w="1"/><text x="6.1890%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.0193%" y="645" width="0.0803%" height="15" fill="rgb(235,33,3)" fg:x="75" fg:w="1"/><text x="6.2693%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.0193%" y="629" width="0.0803%" height="15" fill="rgb(221,39,18)" fg:x="75" fg:w="1"/><text x="6.2693%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="6.1798%" y="565" width="0.0803%" height="15" fill="rgb(242,162,33)" fg:x="77" fg:w="1"/><text x="6.4298%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.1798%" y="549" width="0.0803%" height="15" fill="rgb(233,215,28)" fg:x="77" fg:w="1"/><text x="6.4298%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.2600%" y="565" width="0.0803%" height="15" fill="rgb(212,117,9)" fg:x="78" fg:w="1"/><text x="6.5100%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="6.1798%" y="581" width="0.3210%" height="15" fill="rgb(237,70,47)" fg:x="77" fg:w="4"/><text x="6.4298%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="6.3403%" y="565" width="0.1605%" height="15" fill="rgb(206,177,13)" fg:x="79" fg:w="2"/><text x="6.5903%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="6.3403%" y="549" width="0.1605%" height="15" fill="rgb(209,174,33)" fg:x="79" fg:w="2"/><text x="6.5903%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.5008%" y="581" width="0.0803%" height="15" fill="rgb(226,6,11)" fg:x="81" fg:w="1"/><text x="6.7508%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="6.1798%" y="597" width="0.4815%" height="15" fill="rgb(240,214,6)" fg:x="77" fg:w="6"/><text x="6.4298%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.5811%" y="581" width="0.0803%" height="15" fill="rgb(254,214,40)" fg:x="82" fg:w="1"/><text x="6.8311%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6613%" y="597" width="0.0803%" height="15" fill="rgb(230,187,15)" fg:x="83" fg:w="1"/><text x="6.9113%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="6.0995%" y="629" width="0.7223%" height="15" fill="rgb(250,11,27)" fg:x="76" fg:w="9"/><text x="6.3495%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="6.0995%" y="613" width="0.7223%" height="15" fill="rgb(243,107,19)" fg:x="76" fg:w="9"/><text x="6.3495%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.7416%" y="597" width="0.0803%" height="15" fill="rgb(253,66,26)" fg:x="84" fg:w="1"/><text x="6.9916%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.8218%" y="613" width="0.0803%" height="15" fill="rgb(228,43,8)" fg:x="85" fg:w="1"/><text x="7.0718%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="6.9021%" y="613" width="0.0803%" height="15" fill="rgb(232,197,36)" fg:x="86" fg:w="1"/><text x="7.1521%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.9021%" y="597" width="0.0803%" height="15" fill="rgb(221,182,31)" fg:x="86" fg:w="1"/><text x="7.1521%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.9021%" y="581" width="0.0803%" height="15" fill="rgb(244,25,36)" fg:x="86" fg:w="1"/><text x="7.1521%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.9021%" y="565" width="0.0803%" height="15" fill="rgb(247,101,19)" fg:x="86" fg:w="1"/><text x="7.1521%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.9823%" y="597" width="0.0803%" height="15" fill="rgb(223,117,19)" fg:x="87" fg:w="1"/><text x="7.2323%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.9823%" y="581" width="0.0803%" height="15" fill="rgb(249,63,38)" fg:x="87" fg:w="1"/><text x="7.2323%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.0626%" y="581" width="0.0803%" height="15" fill="rgb(220,143,23)" fg:x="88" fg:w="1"/><text x="7.3126%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.1429%" y="549" width="0.0803%" height="15" fill="rgb(252,183,22)" fg:x="89" fg:w="1"/><text x="7.3929%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.1429%" y="533" width="0.0803%" height="15" fill="rgb(243,176,15)" fg:x="89" fg:w="1"/><text x="7.3929%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.1429%" y="517" width="0.0803%" height="15" fill="rgb(244,204,46)" fg:x="89" fg:w="1"/><text x="7.3929%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.1429%" y="501" width="0.0803%" height="15" fill="rgb(227,28,54)" fg:x="89" fg:w="1"/><text x="7.3929%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.1429%" y="485" width="0.0803%" height="15" fill="rgb(231,10,15)" fg:x="89" fg:w="1"/><text x="7.3929%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="7.1429%" y="581" width="0.1605%" height="15" fill="rgb(210,200,17)" fg:x="89" fg:w="2"/><text x="7.3929%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.1429%" y="565" width="0.1605%" height="15" fill="rgb(251,106,46)" fg:x="89" fg:w="2"/><text x="7.3929%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.2231%" y="549" width="0.0803%" height="15" fill="rgb(218,211,15)" fg:x="90" fg:w="1"/><text x="7.4731%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.3034%" y="581" width="0.0803%" height="15" fill="rgb(239,62,10)" fg:x="91" fg:w="1"/><text x="7.5534%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.3034%" y="565" width="0.0803%" height="15" fill="rgb(225,53,53)" fg:x="91" fg:w="1"/><text x="7.5534%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.3034%" y="549" width="0.0803%" height="15" fill="rgb(207,16,24)" fg:x="91" fg:w="1"/><text x="7.5534%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.3034%" y="533" width="0.0803%" height="15" fill="rgb(217,52,28)" fg:x="91" fg:w="1"/><text x="7.5534%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.3034%" y="517" width="0.0803%" height="15" fill="rgb(246,1,5)" fg:x="91" fg:w="1"/><text x="7.5534%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.3034%" y="501" width="0.0803%" height="15" fill="rgb(221,29,26)" fg:x="91" fg:w="1"/><text x="7.5534%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.3034%" y="485" width="0.0803%" height="15" fill="rgb(250,133,32)" fg:x="91" fg:w="1"/><text x="7.5534%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="7.0626%" y="597" width="0.4013%" height="15" fill="rgb(236,63,16)" fg:x="88" fg:w="5"/><text x="7.3126%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3836%" y="581" width="0.0803%" height="15" fill="rgb(231,159,14)" fg:x="92" fg:w="1"/><text x="7.6336%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.3836%" y="565" width="0.0803%" height="15" fill="rgb(207,102,36)" fg:x="92" fg:w="1"/><text x="7.6336%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.3836%" y="549" width="0.0803%" height="15" fill="rgb(230,224,31)" fg:x="92" fg:w="1"/><text x="7.6336%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.3836%" y="533" width="0.0803%" height="15" fill="rgb(215,182,16)" fg:x="92" fg:w="1"/><text x="7.6336%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.3836%" y="517" width="0.0803%" height="15" fill="rgb(226,113,2)" fg:x="92" fg:w="1"/><text x="7.6336%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.3836%" y="501" width="0.0803%" height="15" fill="rgb(241,18,35)" fg:x="92" fg:w="1"/><text x="7.6336%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.88%)</title><rect x="6.8218%" y="629" width="0.8828%" height="15" fill="rgb(240,165,44)" fg:x="85" fg:w="11"/><text x="7.0718%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="6.9823%" y="613" width="0.7223%" height="15" fill="rgb(229,130,47)" fg:x="87" fg:w="9"/><text x="7.2323%" y="623.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="7.4639%" y="597" width="0.2408%" height="15" fill="rgb(223,93,7)" fg:x="93" fg:w="3"/><text x="7.7139%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.5441%" y="581" width="0.1605%" height="15" fill="rgb(205,180,36)" fg:x="94" fg:w="2"/><text x="7.7941%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.6244%" y="565" width="0.0803%" height="15" fill="rgb(221,103,28)" fg:x="95" fg:w="1"/><text x="7.8744%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="7.7047%" y="613" width="0.0803%" height="15" fill="rgb(212,4,3)" fg:x="96" fg:w="1"/><text x="7.9547%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.7047%" y="597" width="0.0803%" height="15" fill="rgb(209,221,53)" fg:x="96" fg:w="1"/><text x="7.9547%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.7849%" y="581" width="0.0803%" height="15" fill="rgb(233,229,52)" fg:x="97" fg:w="1"/><text x="8.0349%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="7.7849%" y="565" width="0.0803%" height="15" fill="rgb(254,127,37)" fg:x="97" fg:w="1"/><text x="8.0349%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0257%" y="533" width="0.0803%" height="15" fill="rgb(207,161,26)" fg:x="100" fg:w="1"/><text x="8.2757%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.0257%" y="517" width="0.0803%" height="15" fill="rgb(223,75,5)" fg:x="100" fg:w="1"/><text x="8.2757%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.1059%" y="533" width="0.0803%" height="15" fill="rgb(235,115,52)" fg:x="101" fg:w="1"/><text x="8.3559%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1059%" y="517" width="0.0803%" height="15" fill="rgb(240,91,46)" fg:x="101" fg:w="1"/><text x="8.3559%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.1059%" y="501" width="0.0803%" height="15" fill="rgb(251,144,21)" fg:x="101" fg:w="1"/><text x="8.3559%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1059%" y="485" width="0.0803%" height="15" fill="rgb(247,220,47)" fg:x="101" fg:w="1"/><text x="8.3559%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1059%" y="469" width="0.0803%" height="15" fill="rgb(253,122,1)" fg:x="101" fg:w="1"/><text x="8.3559%" y="479.50"></text></g><g><title>engine::session::Session::flush (33 samples, 2.65%)</title><rect x="5.6982%" y="725" width="2.6485%" height="15" fill="rgb(221,0,24)" fg:x="71" fg:w="33"/><text x="5.9482%" y="735.50">en..</text></g><g><title>engine::session::state::State::close (29 samples, 2.33%)</title><rect x="6.0193%" y="709" width="2.3274%" height="15" fill="rgb(220,204,54)" fg:x="75" fg:w="29"/><text x="6.2693%" y="719.50">e..</text></g><g><title>engine::session::state::State::flush_entities (29 samples, 2.33%)</title><rect x="6.0193%" y="693" width="2.3274%" height="15" fill="rgb(205,96,25)" fg:x="75" fg:w="29"/><text x="6.2693%" y="703.50">e..</text></g><g><title>core::iter::adapters::try_process (29 samples, 2.33%)</title><rect x="6.0193%" y="677" width="2.3274%" height="15" fill="rgb(247,77,20)" fg:x="75" fg:w="29"/><text x="6.2693%" y="687.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (29 samples, 2.33%)</title><rect x="6.0193%" y="661" width="2.3274%" height="15" fill="rgb(245,151,8)" fg:x="75" fg:w="29"/><text x="6.2693%" y="671.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (28 samples, 2.25%)</title><rect x="6.0995%" y="645" width="2.2472%" height="15" fill="rgb(242,158,39)" fg:x="76" fg:w="28"/><text x="6.3495%" y="655.50">e..</text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="7.7047%" y="629" width="0.6421%" height="15" fill="rgb(222,214,50)" fg:x="96" fg:w="8"/><text x="7.9547%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="7.7849%" y="613" width="0.5618%" height="15" fill="rgb(229,60,39)" fg:x="97" fg:w="7"/><text x="8.0349%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="7.7849%" y="597" width="0.5618%" height="15" fill="rgb(240,148,18)" fg:x="97" fg:w="7"/><text x="8.0349%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="7.8652%" y="581" width="0.4815%" height="15" fill="rgb(215,96,11)" fg:x="98" fg:w="6"/><text x="8.1152%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="7.8652%" y="565" width="0.4815%" height="15" fill="rgb(238,162,53)" fg:x="98" fg:w="6"/><text x="8.1152%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="7.9454%" y="549" width="0.4013%" height="15" fill="rgb(214,83,18)" fg:x="99" fg:w="5"/><text x="8.1954%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="8.1862%" y="533" width="0.1605%" height="15" fill="rgb(248,117,24)" fg:x="102" fg:w="2"/><text x="8.4362%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.2665%" y="517" width="0.0803%" height="15" fill="rgb(238,190,6)" fg:x="103" fg:w="1"/><text x="8.5165%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2665%" y="501" width="0.0803%" height="15" fill="rgb(213,51,6)" fg:x="103" fg:w="1"/><text x="8.5165%" y="511.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.3467%" y="709" width="0.0803%" height="15" fill="rgb(212,136,1)" fg:x="104" fg:w="1"/><text x="8.5967%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="8.3467%" y="693" width="0.0803%" height="15" fill="rgb(221,192,14)" fg:x="104" fg:w="1"/><text x="8.5967%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.3467%" y="677" width="0.0803%" height="15" fill="rgb(244,38,54)" fg:x="104" fg:w="1"/><text x="8.5967%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.3467%" y="661" width="0.0803%" height="15" fill="rgb(240,45,28)" fg:x="104" fg:w="1"/><text x="8.5967%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.3467%" y="645" width="0.0803%" height="15" fill="rgb(240,123,12)" fg:x="104" fg:w="1"/><text x="8.5967%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.3467%" y="629" width="0.0803%" height="15" fill="rgb(216,14,30)" fg:x="104" fg:w="1"/><text x="8.5967%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="8.3467%" y="613" width="0.0803%" height="15" fill="rgb(212,50,24)" fg:x="104" fg:w="1"/><text x="8.5967%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.3467%" y="597" width="0.0803%" height="15" fill="rgb(253,229,47)" fg:x="104" fg:w="1"/><text x="8.5967%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.3467%" y="581" width="0.0803%" height="15" fill="rgb(214,26,17)" fg:x="104" fg:w="1"/><text x="8.5967%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="8.4270%" y="693" width="0.0803%" height="15" fill="rgb(252,60,11)" fg:x="105" fg:w="1"/><text x="8.6770%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.4270%" y="677" width="0.0803%" height="15" fill="rgb(209,59,37)" fg:x="105" fg:w="1"/><text x="8.6770%" y="687.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="8.4270%" y="661" width="0.0803%" height="15" fill="rgb(228,126,53)" fg:x="105" fg:w="1"/><text x="8.6770%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.4270%" y="645" width="0.0803%" height="15" fill="rgb(233,99,2)" fg:x="105" fg:w="1"/><text x="8.6770%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4270%" y="629" width="0.0803%" height="15" fill="rgb(217,106,34)" fg:x="105" fg:w="1"/><text x="8.6770%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.4270%" y="613" width="0.0803%" height="15" fill="rgb(222,46,19)" fg:x="105" fg:w="1"/><text x="8.6770%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.4270%" y="597" width="0.0803%" height="15" fill="rgb(251,87,31)" fg:x="105" fg:w="1"/><text x="8.6770%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.4270%" y="581" width="0.0803%" height="15" fill="rgb(213,70,51)" fg:x="105" fg:w="1"/><text x="8.6770%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5072%" y="629" width="0.0803%" height="15" fill="rgb(229,144,18)" fg:x="106" fg:w="1"/><text x="8.7572%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5072%" y="613" width="0.0803%" height="15" fill="rgb(254,60,26)" fg:x="106" fg:w="1"/><text x="8.7572%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5072%" y="597" width="0.0803%" height="15" fill="rgb(243,127,51)" fg:x="106" fg:w="1"/><text x="8.7572%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5875%" y="597" width="0.0803%" height="15" fill="rgb(221,51,25)" fg:x="107" fg:w="1"/><text x="8.8375%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="8.3467%" y="725" width="0.4013%" height="15" fill="rgb(205,42,7)" fg:x="104" fg:w="5"/><text x="8.5967%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="8.4270%" y="709" width="0.3210%" height="15" fill="rgb(236,177,48)" fg:x="105" fg:w="4"/><text x="8.6770%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="8.5072%" y="693" width="0.2408%" height="15" fill="rgb(226,79,31)" fg:x="106" fg:w="3"/><text x="8.7572%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="8.5072%" y="677" width="0.2408%" height="15" fill="rgb(216,170,12)" fg:x="106" fg:w="3"/><text x="8.7572%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="8.5072%" y="661" width="0.2408%" height="15" fill="rgb(208,62,51)" fg:x="106" fg:w="3"/><text x="8.7572%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="8.5072%" y="645" width="0.2408%" height="15" fill="rgb(254,129,9)" fg:x="106" fg:w="3"/><text x="8.7572%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="8.5875%" y="629" width="0.1605%" height="15" fill="rgb(243,209,31)" fg:x="107" fg:w="2"/><text x="8.8375%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.5875%" y="613" width="0.1605%" height="15" fill="rgb(213,159,23)" fg:x="107" fg:w="2"/><text x="8.8375%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.6677%" y="597" width="0.0803%" height="15" fill="rgb(249,77,39)" fg:x="108" fg:w="1"/><text x="8.9177%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.6677%" y="581" width="0.0803%" height="15" fill="rgb(230,13,33)" fg:x="108" fg:w="1"/><text x="8.9177%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.6677%" y="565" width="0.0803%" height="15" fill="rgb(215,215,7)" fg:x="108" fg:w="1"/><text x="8.9177%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.6677%" y="549" width="0.0803%" height="15" fill="rgb(222,92,25)" fg:x="108" fg:w="1"/><text x="8.9177%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="8.7480%" y="725" width="0.1605%" height="15" fill="rgb(215,173,22)" fg:x="109" fg:w="2"/><text x="8.9980%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="8.7480%" y="709" width="0.1605%" height="15" fill="rgb(247,205,52)" fg:x="109" fg:w="2"/><text x="8.9980%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="8.7480%" y="693" width="0.1605%" height="15" fill="rgb(240,210,37)" fg:x="109" fg:w="2"/><text x="8.9980%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8283%" y="677" width="0.0803%" height="15" fill="rgb(224,13,10)" fg:x="110" fg:w="1"/><text x="9.0783%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.8283%" y="661" width="0.0803%" height="15" fill="rgb(209,48,33)" fg:x="110" fg:w="1"/><text x="9.0783%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8283%" y="645" width="0.0803%" height="15" fill="rgb(228,219,23)" fg:x="110" fg:w="1"/><text x="9.0783%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.8283%" y="629" width="0.0803%" height="15" fill="rgb(239,46,49)" fg:x="110" fg:w="1"/><text x="9.0783%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8283%" y="613" width="0.0803%" height="15" fill="rgb(206,172,51)" fg:x="110" fg:w="1"/><text x="9.0783%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.8283%" y="597" width="0.0803%" height="15" fill="rgb(213,212,35)" fg:x="110" fg:w="1"/><text x="9.0783%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8283%" y="581" width="0.0803%" height="15" fill="rgb(252,40,27)" fg:x="110" fg:w="1"/><text x="9.0783%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.9085%" y="661" width="0.0803%" height="15" fill="rgb(212,33,41)" fg:x="111" fg:w="1"/><text x="9.1585%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="8.9085%" y="645" width="0.0803%" height="15" fill="rgb(232,160,27)" fg:x="111" fg:w="1"/><text x="9.1585%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9085%" y="629" width="0.0803%" height="15" fill="rgb(244,160,20)" fg:x="111" fg:w="1"/><text x="9.1585%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9085%" y="613" width="0.0803%" height="15" fill="rgb(205,66,20)" fg:x="111" fg:w="1"/><text x="9.1585%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.9085%" y="597" width="0.0803%" height="15" fill="rgb(236,158,6)" fg:x="111" fg:w="1"/><text x="9.1585%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9085%" y="581" width="0.0803%" height="15" fill="rgb(232,25,36)" fg:x="111" fg:w="1"/><text x="9.1585%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9085%" y="565" width="0.0803%" height="15" fill="rgb(220,153,35)" fg:x="111" fg:w="1"/><text x="9.1585%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9085%" y="549" width="0.0803%" height="15" fill="rgb(216,5,8)" fg:x="111" fg:w="1"/><text x="9.1585%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.9085%" y="533" width="0.0803%" height="15" fill="rgb(240,97,3)" fg:x="111" fg:w="1"/><text x="9.1585%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="8.9085%" y="693" width="0.1605%" height="15" fill="rgb(220,99,26)" fg:x="111" fg:w="2"/><text x="9.1585%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="8.9085%" y="677" width="0.1605%" height="15" fill="rgb(237,96,2)" fg:x="111" fg:w="2"/><text x="9.1585%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.9888%" y="661" width="0.0803%" height="15" fill="rgb(217,197,47)" fg:x="112" fg:w="1"/><text x="9.2388%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.9888%" y="645" width="0.0803%" height="15" fill="rgb(252,133,54)" fg:x="112" fg:w="1"/><text x="9.2388%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="9.0690%" y="677" width="0.0803%" height="15" fill="rgb(233,37,30)" fg:x="113" fg:w="1"/><text x="9.3190%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.0690%" y="661" width="0.0803%" height="15" fill="rgb(239,182,12)" fg:x="113" fg:w="1"/><text x="9.3190%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.0690%" y="645" width="0.0803%" height="15" fill="rgb(245,83,39)" fg:x="113" fg:w="1"/><text x="9.3190%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.0690%" y="629" width="0.0803%" height="15" fill="rgb(222,109,36)" fg:x="113" fg:w="1"/><text x="9.3190%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.0690%" y="613" width="0.0803%" height="15" fill="rgb(237,95,44)" fg:x="113" fg:w="1"/><text x="9.3190%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="9.1493%" y="645" width="0.0803%" height="15" fill="rgb(216,36,54)" fg:x="114" fg:w="1"/><text x="9.3993%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.1493%" y="629" width="0.0803%" height="15" fill="rgb(236,164,3)" fg:x="114" fg:w="1"/><text x="9.3993%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.1493%" y="613" width="0.0803%" height="15" fill="rgb(223,15,21)" fg:x="114" fg:w="1"/><text x="9.3993%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1493%" y="597" width="0.0803%" height="15" fill="rgb(239,191,12)" fg:x="114" fg:w="1"/><text x="9.3993%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.1493%" y="581" width="0.0803%" height="15" fill="rgb(231,191,37)" fg:x="114" fg:w="1"/><text x="9.3993%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1493%" y="565" width="0.0803%" height="15" fill="rgb(209,155,36)" fg:x="114" fg:w="1"/><text x="9.3993%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.1493%" y="549" width="0.0803%" height="15" fill="rgb(216,222,49)" fg:x="114" fg:w="1"/><text x="9.3993%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1493%" y="533" width="0.0803%" height="15" fill="rgb(218,181,2)" fg:x="114" fg:w="1"/><text x="9.3993%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.1493%" y="517" width="0.0803%" height="15" fill="rgb(239,125,9)" fg:x="114" fg:w="1"/><text x="9.3993%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.1493%" y="501" width="0.0803%" height="15" fill="rgb(233,103,7)" fg:x="114" fg:w="1"/><text x="9.3993%" y="511.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="9.0690%" y="693" width="0.2408%" height="15" fill="rgb(209,223,5)" fg:x="113" fg:w="3"/><text x="9.3190%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="9.1493%" y="677" width="0.1605%" height="15" fill="rgb(234,71,27)" fg:x="114" fg:w="2"/><text x="9.3993%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="9.1493%" y="661" width="0.1605%" height="15" fill="rgb(251,202,16)" fg:x="114" fg:w="2"/><text x="9.3993%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="9.2295%" y="645" width="0.0803%" height="15" fill="rgb(231,180,0)" fg:x="115" fg:w="1"/><text x="9.4795%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.2295%" y="629" width="0.0803%" height="15" fill="rgb(223,58,28)" fg:x="115" fg:w="1"/><text x="9.4795%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="9.2295%" y="613" width="0.0803%" height="15" fill="rgb(250,34,24)" fg:x="115" fg:w="1"/><text x="9.4795%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.2295%" y="597" width="0.0803%" height="15" fill="rgb(235,24,16)" fg:x="115" fg:w="1"/><text x="9.4795%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (6 samples, 0.48%)</title><rect x="8.9085%" y="725" width="0.4815%" height="15" fill="rgb(219,28,33)" fg:x="111" fg:w="6"/><text x="9.1585%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="8.9085%" y="709" width="0.4815%" height="15" fill="rgb(228,150,43)" fg:x="111" fg:w="6"/><text x="9.1585%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="9.3098%" y="693" width="0.0803%" height="15" fill="rgb(221,228,36)" fg:x="116" fg:w="1"/><text x="9.5598%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="9.3098%" y="677" width="0.0803%" height="15" fill="rgb(232,116,17)" fg:x="116" fg:w="1"/><text x="9.5598%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="9.3098%" y="661" width="0.0803%" height="15" fill="rgb(220,110,51)" fg:x="116" fg:w="1"/><text x="9.5598%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.3098%" y="645" width="0.0803%" height="15" fill="rgb(207,26,25)" fg:x="116" fg:w="1"/><text x="9.5598%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="9.3098%" y="629" width="0.0803%" height="15" fill="rgb(223,58,19)" fg:x="116" fg:w="1"/><text x="9.5598%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.3098%" y="613" width="0.0803%" height="15" fill="rgb(234,125,39)" fg:x="116" fg:w="1"/><text x="9.5598%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="9.3900%" y="709" width="0.0803%" height="15" fill="rgb(241,48,36)" fg:x="117" fg:w="1"/><text x="9.6400%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="9.3900%" y="693" width="0.0803%" height="15" fill="rgb(217,148,51)" fg:x="117" fg:w="1"/><text x="9.6400%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="9.3900%" y="677" width="0.0803%" height="15" fill="rgb(247,17,25)" fg:x="117" fg:w="1"/><text x="9.6400%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="9.3900%" y="661" width="0.0803%" height="15" fill="rgb(219,89,38)" fg:x="117" fg:w="1"/><text x="9.6400%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="9.3900%" y="645" width="0.0803%" height="15" fill="rgb(220,145,2)" fg:x="117" fg:w="1"/><text x="9.6400%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="9.3900%" y="629" width="0.0803%" height="15" fill="rgb(244,66,47)" fg:x="117" fg:w="1"/><text x="9.6400%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.3900%" y="613" width="0.0803%" height="15" fill="rgb(226,182,5)" fg:x="117" fg:w="1"/><text x="9.6400%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.3900%" y="597" width="0.0803%" height="15" fill="rgb(211,98,20)" fg:x="117" fg:w="1"/><text x="9.6400%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.3900%" y="581" width="0.0803%" height="15" fill="rgb(217,103,52)" fg:x="117" fg:w="1"/><text x="9.6400%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.3900%" y="565" width="0.0803%" height="15" fill="rgb(208,125,52)" fg:x="117" fg:w="1"/><text x="9.6400%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.3900%" y="549" width="0.0803%" height="15" fill="rgb(244,70,13)" fg:x="117" fg:w="1"/><text x="9.6400%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.3900%" y="533" width="0.0803%" height="15" fill="rgb(253,124,3)" fg:x="117" fg:w="1"/><text x="9.6400%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.3900%" y="517" width="0.0803%" height="15" fill="rgb(222,145,32)" fg:x="117" fg:w="1"/><text x="9.6400%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.5506%" y="677" width="0.0803%" height="15" fill="rgb(232,183,47)" fg:x="119" fg:w="1"/><text x="9.8006%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="9.5506%" y="661" width="0.0803%" height="15" fill="rgb(246,226,4)" fg:x="119" fg:w="1"/><text x="9.8006%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.5506%" y="645" width="0.0803%" height="15" fill="rgb(228,185,46)" fg:x="119" fg:w="1"/><text x="9.8006%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (3 samples, 0.24%)</title><rect x="9.4703%" y="693" width="0.2408%" height="15" fill="rgb(213,196,4)" fg:x="118" fg:w="3"/><text x="9.7203%" y="703.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="9.6308%" y="677" width="0.0803%" height="15" fill="rgb(212,2,45)" fg:x="120" fg:w="1"/><text x="9.8808%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="9.7111%" y="645" width="0.1605%" height="15" fill="rgb(217,145,50)" fg:x="121" fg:w="2"/><text x="9.9611%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="9.7111%" y="629" width="0.1605%" height="15" fill="rgb(242,10,46)" fg:x="121" fg:w="2"/><text x="9.9611%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="9.7111%" y="613" width="0.1605%" height="15" fill="rgb(252,91,48)" fg:x="121" fg:w="2"/><text x="9.9611%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.7913%" y="597" width="0.0803%" height="15" fill="rgb(216,72,13)" fg:x="122" fg:w="1"/><text x="10.0413%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.9518%" y="613" width="0.0803%" height="15" fill="rgb(219,6,37)" fg:x="124" fg:w="1"/><text x="10.2018%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.9518%" y="597" width="0.0803%" height="15" fill="rgb(236,185,40)" fg:x="124" fg:w="1"/><text x="10.2018%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.9518%" y="581" width="0.0803%" height="15" fill="rgb(208,81,48)" fg:x="124" fg:w="1"/><text x="10.2018%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.1926%" y="533" width="0.0803%" height="15" fill="rgb(211,42,33)" fg:x="127" fg:w="1"/><text x="10.4426%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.1926%" y="517" width="0.0803%" height="15" fill="rgb(211,90,39)" fg:x="127" fg:w="1"/><text x="10.4426%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.1926%" y="501" width="0.0803%" height="15" fill="rgb(218,136,12)" fg:x="127" fg:w="1"/><text x="10.4426%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="10.1124%" y="549" width="0.2408%" height="15" fill="rgb(234,12,32)" fg:x="126" fg:w="3"/><text x="10.3624%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.2729%" y="533" width="0.0803%" height="15" fill="rgb(221,164,18)" fg:x="128" fg:w="1"/><text x="10.5229%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.2729%" y="517" width="0.0803%" height="15" fill="rgb(239,135,14)" fg:x="128" fg:w="1"/><text x="10.5229%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.3531%" y="549" width="0.0803%" height="15" fill="rgb(226,198,47)" fg:x="129" fg:w="1"/><text x="10.6031%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.3531%" y="533" width="0.0803%" height="15" fill="rgb(244,121,47)" fg:x="129" fg:w="1"/><text x="10.6031%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="10.1124%" y="565" width="0.4013%" height="15" fill="rgb(226,21,48)" fg:x="126" fg:w="5"/><text x="10.3624%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="10.4334%" y="549" width="0.0803%" height="15" fill="rgb(215,178,47)" fg:x="130" fg:w="1"/><text x="10.6834%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.4334%" y="533" width="0.0803%" height="15" fill="rgb(206,212,19)" fg:x="130" fg:w="1"/><text x="10.6834%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.4334%" y="517" width="0.0803%" height="15" fill="rgb(230,104,34)" fg:x="130" fg:w="1"/><text x="10.6834%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.4334%" y="501" width="0.0803%" height="15" fill="rgb(210,96,51)" fg:x="130" fg:w="1"/><text x="10.6834%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.5136%" y="565" width="0.0803%" height="15" fill="rgb(229,111,47)" fg:x="131" fg:w="1"/><text x="10.7636%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="10.1124%" y="597" width="0.5618%" height="15" fill="rgb(218,174,45)" fg:x="126" fg:w="7"/><text x="10.3624%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="10.1124%" y="581" width="0.5618%" height="15" fill="rgb(215,21,32)" fg:x="126" fg:w="7"/><text x="10.3624%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.5939%" y="565" width="0.0803%" height="15" fill="rgb(235,72,21)" fg:x="132" fg:w="1"/><text x="10.8439%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.6742%" y="581" width="0.0803%" height="15" fill="rgb(250,113,30)" fg:x="133" fg:w="1"/><text x="10.9242%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.6742%" y="565" width="0.0803%" height="15" fill="rgb(244,136,34)" fg:x="133" fg:w="1"/><text x="10.9242%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.6742%" y="549" width="0.0803%" height="15" fill="rgb(213,226,47)" fg:x="133" fg:w="1"/><text x="10.9242%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.6742%" y="533" width="0.0803%" height="15" fill="rgb(224,136,40)" fg:x="133" fg:w="1"/><text x="10.9242%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.6742%" y="517" width="0.0803%" height="15" fill="rgb(253,124,12)" fg:x="133" fg:w="1"/><text x="10.9242%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.8347%" y="517" width="0.0803%" height="15" fill="rgb(210,67,8)" fg:x="135" fg:w="1"/><text x="11.0847%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.8347%" y="501" width="0.0803%" height="15" fill="rgb(210,204,0)" fg:x="135" fg:w="1"/><text x="11.0847%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.9149%" y="517" width="0.0803%" height="15" fill="rgb(217,179,22)" fg:x="136" fg:w="1"/><text x="11.1649%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.9149%" y="501" width="0.0803%" height="15" fill="rgb(237,192,33)" fg:x="136" fg:w="1"/><text x="11.1649%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.9149%" y="485" width="0.0803%" height="15" fill="rgb(211,104,28)" fg:x="136" fg:w="1"/><text x="11.1649%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.9149%" y="469" width="0.0803%" height="15" fill="rgb(214,75,30)" fg:x="136" fg:w="1"/><text x="11.1649%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.9149%" y="453" width="0.0803%" height="15" fill="rgb(220,227,12)" fg:x="136" fg:w="1"/><text x="11.1649%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="10.8347%" y="549" width="0.2408%" height="15" fill="rgb(233,134,28)" fg:x="135" fg:w="3"/><text x="11.0847%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="10.8347%" y="533" width="0.2408%" height="15" fill="rgb(215,146,24)" fg:x="135" fg:w="3"/><text x="11.0847%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.9952%" y="517" width="0.0803%" height="15" fill="rgb(248,227,20)" fg:x="137" fg:w="1"/><text x="11.2452%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="11.0754%" y="549" width="0.2408%" height="15" fill="rgb(250,44,42)" fg:x="138" fg:w="3"/><text x="11.3254%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.2360%" y="533" width="0.0803%" height="15" fill="rgb(219,5,35)" fg:x="140" fg:w="1"/><text x="11.4860%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.2360%" y="517" width="0.0803%" height="15" fill="rgb(241,132,32)" fg:x="140" fg:w="1"/><text x="11.4860%" y="527.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="11.3162%" y="533" width="0.0803%" height="15" fill="rgb(234,212,51)" fg:x="141" fg:w="1"/><text x="11.5662%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.3965%" y="533" width="0.0803%" height="15" fill="rgb(242,173,29)" fg:x="142" fg:w="1"/><text x="11.6465%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.3965%" y="517" width="0.0803%" height="15" fill="rgb(212,159,2)" fg:x="142" fg:w="1"/><text x="11.6465%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.3965%" y="501" width="0.0803%" height="15" fill="rgb(238,165,31)" fg:x="142" fg:w="1"/><text x="11.6465%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.3965%" y="485" width="0.0803%" height="15" fill="rgb(241,57,36)" fg:x="142" fg:w="1"/><text x="11.6465%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.3965%" y="469" width="0.0803%" height="15" fill="rgb(249,7,4)" fg:x="142" fg:w="1"/><text x="11.6465%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.3965%" y="453" width="0.0803%" height="15" fill="rgb(250,137,44)" fg:x="142" fg:w="1"/><text x="11.6465%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="11.3965%" y="437" width="0.0803%" height="15" fill="rgb(244,185,1)" fg:x="142" fg:w="1"/><text x="11.6465%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4767%" y="533" width="0.0803%" height="15" fill="rgb(216,5,53)" fg:x="143" fg:w="1"/><text x="11.7267%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.4767%" y="517" width="0.0803%" height="15" fill="rgb(234,89,21)" fg:x="143" fg:w="1"/><text x="11.7267%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.4767%" y="501" width="0.0803%" height="15" fill="rgb(250,81,43)" fg:x="143" fg:w="1"/><text x="11.7267%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.4767%" y="485" width="0.0803%" height="15" fill="rgb(243,132,11)" fg:x="143" fg:w="1"/><text x="11.7267%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.4767%" y="469" width="0.0803%" height="15" fill="rgb(253,159,28)" fg:x="143" fg:w="1"/><text x="11.7267%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.4767%" y="453" width="0.0803%" height="15" fill="rgb(237,167,34)" fg:x="143" fg:w="1"/><text x="11.7267%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.4767%" y="437" width="0.0803%" height="15" fill="rgb(237,16,50)" fg:x="143" fg:w="1"/><text x="11.7267%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="11.4767%" y="421" width="0.0803%" height="15" fill="rgb(247,125,2)" fg:x="143" fg:w="1"/><text x="11.7267%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="11.3162%" y="549" width="0.3210%" height="15" fill="rgb(254,35,3)" fg:x="141" fg:w="4"/><text x="11.5662%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.5570%" y="533" width="0.0803%" height="15" fill="rgb(237,209,21)" fg:x="144" fg:w="1"/><text x="11.8070%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="10.8347%" y="565" width="0.8828%" height="15" fill="rgb(224,122,20)" fg:x="135" fg:w="11"/><text x="11.0847%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.6372%" y="549" width="0.0803%" height="15" fill="rgb(224,11,46)" fg:x="145" fg:w="1"/><text x="11.8872%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.6372%" y="533" width="0.0803%" height="15" fill="rgb(248,21,33)" fg:x="145" fg:w="1"/><text x="11.8872%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.12%)</title><rect x="10.7544%" y="581" width="1.1236%" height="15" fill="rgb(222,144,7)" fg:x="134" fg:w="14"/><text x="11.0044%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.7175%" y="565" width="0.1605%" height="15" fill="rgb(205,141,37)" fg:x="146" fg:w="2"/><text x="11.9675%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (17 samples, 1.36%)</title><rect x="10.6742%" y="597" width="1.3644%" height="15" fill="rgb(237,130,8)" fg:x="133" fg:w="17"/><text x="10.9242%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.8780%" y="581" width="0.1605%" height="15" fill="rgb(209,179,39)" fg:x="148" fg:w="2"/><text x="12.1280%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.9583%" y="565" width="0.0803%" height="15" fill="rgb(207,52,17)" fg:x="149" fg:w="1"/><text x="12.2083%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::compare::Modified&gt; (1 samples, 0.08%)</title><rect x="12.0385%" y="597" width="0.0803%" height="15" fill="rgb(253,158,17)" fg:x="150" fg:w="1"/><text x="12.2885%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.0385%" y="581" width="0.0803%" height="15" fill="rgb(208,19,53)" fg:x="150" fg:w="1"/><text x="12.2885%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.1188%" y="565" width="0.0803%" height="15" fill="rgb(233,152,13)" fg:x="151" fg:w="1"/><text x="12.3688%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="12.1188%" y="549" width="0.0803%" height="15" fill="rgb(231,84,1)" fg:x="151" fg:w="1"/><text x="12.3688%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="12.1188%" y="533" width="0.0803%" height="15" fill="rgb(229,142,48)" fg:x="151" fg:w="1"/><text x="12.3688%" y="543.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="12.1990%" y="565" width="0.0803%" height="15" fill="rgb(248,70,29)" fg:x="152" fg:w="1"/><text x="12.4490%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.1990%" y="549" width="0.0803%" height="15" fill="rgb(250,85,7)" fg:x="152" fg:w="1"/><text x="12.4490%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1990%" y="533" width="0.0803%" height="15" fill="rgb(235,140,43)" fg:x="152" fg:w="1"/><text x="12.4490%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="12.1188%" y="581" width="0.2408%" height="15" fill="rgb(216,0,5)" fg:x="151" fg:w="3"/><text x="12.3688%" y="591.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="12.2793%" y="565" width="0.0803%" height="15" fill="rgb(223,167,29)" fg:x="153" fg:w="1"/><text x="12.5293%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="12.4398%" y="549" width="0.2408%" height="15" fill="rgb(229,150,33)" fg:x="155" fg:w="3"/><text x="12.6898%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="12.5201%" y="533" width="0.1605%" height="15" fill="rgb(227,26,52)" fg:x="156" fg:w="2"/><text x="12.7701%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="12.6806%" y="549" width="0.0803%" height="15" fill="rgb(250,60,52)" fg:x="158" fg:w="1"/><text x="12.9306%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.8411%" y="501" width="0.1605%" height="15" fill="rgb(228,81,46)" fg:x="160" fg:w="2"/><text x="13.0911%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9213%" y="485" width="0.0803%" height="15" fill="rgb(225,218,31)" fg:x="161" fg:w="1"/><text x="13.1713%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="13.0016%" y="501" width="0.0803%" height="15" fill="rgb(230,35,16)" fg:x="162" fg:w="1"/><text x="13.2516%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.0016%" y="485" width="0.0803%" height="15" fill="rgb(247,100,0)" fg:x="162" fg:w="1"/><text x="13.2516%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.0016%" y="469" width="0.0803%" height="15" fill="rgb(223,135,11)" fg:x="162" fg:w="1"/><text x="13.2516%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.0016%" y="453" width="0.0803%" height="15" fill="rgb(207,136,0)" fg:x="162" fg:w="1"/><text x="13.2516%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.0016%" y="437" width="0.0803%" height="15" fill="rgb(246,131,25)" fg:x="162" fg:w="1"/><text x="13.2516%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.2424%" y="469" width="0.0803%" height="15" fill="rgb(209,47,12)" fg:x="165" fg:w="1"/><text x="13.4924%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="13.2424%" y="453" width="0.0803%" height="15" fill="rgb(221,25,16)" fg:x="165" fg:w="1"/><text x="13.4924%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="13.3226%" y="453" width="0.2408%" height="15" fill="rgb(223,164,33)" fg:x="166" fg:w="3"/><text x="13.5726%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="13.4029%" y="437" width="0.1605%" height="15" fill="rgb(220,26,23)" fg:x="167" fg:w="2"/><text x="13.6529%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="13.4029%" y="421" width="0.1605%" height="15" fill="rgb(231,224,1)" fg:x="167" fg:w="2"/><text x="13.6529%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.80%)</title><rect x="12.8411%" y="517" width="0.8026%" height="15" fill="rgb(229,221,24)" fg:x="160" fg:w="10"/><text x="13.0911%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="13.0819%" y="501" width="0.5618%" height="15" fill="rgb(213,34,10)" fg:x="163" fg:w="7"/><text x="13.3319%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="13.0819%" y="485" width="0.5618%" height="15" fill="rgb(215,33,11)" fg:x="163" fg:w="7"/><text x="13.3319%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="13.3226%" y="469" width="0.3210%" height="15" fill="rgb(216,20,41)" fg:x="166" fg:w="4"/><text x="13.5726%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.5634%" y="453" width="0.0803%" height="15" fill="rgb(228,43,31)" fg:x="169" fg:w="1"/><text x="13.8134%" y="463.50"></text></g><g><title>engine::session::Session::flush (53 samples, 4.25%)</title><rect x="9.4703%" y="709" width="4.2536%" height="15" fill="rgb(227,83,26)" fg:x="118" fg:w="53"/><text x="9.7203%" y="719.50">engin..</text></g><g><title>engine::session::Session::save_changes (50 samples, 4.01%)</title><rect x="9.7111%" y="693" width="4.0128%" height="15" fill="rgb(217,168,19)" fg:x="121" fg:w="50"/><text x="9.9611%" y="703.50">engi..</text></g><g><title>engine::session::state::State::close (50 samples, 4.01%)</title><rect x="9.7111%" y="677" width="4.0128%" height="15" fill="rgb(231,34,33)" fg:x="121" fg:w="50"/><text x="9.9611%" y="687.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (50 samples, 4.01%)</title><rect x="9.7111%" y="661" width="4.0128%" height="15" fill="rgb(230,120,51)" fg:x="121" fg:w="50"/><text x="9.9611%" y="671.50">engi..</text></g><g><title>core::iter::adapters::try_process (48 samples, 3.85%)</title><rect x="9.8716%" y="645" width="3.8523%" height="15" fill="rgb(215,138,27)" fg:x="123" fg:w="48"/><text x="10.1216%" y="655.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (48 samples, 3.85%)</title><rect x="9.8716%" y="629" width="3.8523%" height="15" fill="rgb(246,80,47)" fg:x="123" fg:w="48"/><text x="10.1216%" y="639.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (46 samples, 3.69%)</title><rect x="10.0321%" y="613" width="3.6918%" height="15" fill="rgb(215,57,53)" fg:x="125" fg:w="46"/><text x="10.2821%" y="623.50">engi..</text></g><g><title>kernel::model::any_entity_changes (20 samples, 1.61%)</title><rect x="12.1188%" y="597" width="1.6051%" height="15" fill="rgb(229,137,5)" fg:x="151" fg:w="20"/><text x="12.3688%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (17 samples, 1.36%)</title><rect x="12.3596%" y="581" width="1.3644%" height="15" fill="rgb(210,86,2)" fg:x="154" fg:w="17"/><text x="12.6096%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (17 samples, 1.36%)</title><rect x="12.3596%" y="565" width="1.3644%" height="15" fill="rgb(231,226,51)" fg:x="154" fg:w="17"/><text x="12.6096%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.96%)</title><rect x="12.7608%" y="549" width="0.9631%" height="15" fill="rgb(216,62,29)" fg:x="159" fg:w="12"/><text x="13.0108%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.88%)</title><rect x="12.8411%" y="533" width="0.8828%" height="15" fill="rgb(248,202,3)" fg:x="160" fg:w="11"/><text x="13.0911%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="13.6437%" y="517" width="0.0803%" height="15" fill="rgb(225,181,7)" fg:x="170" fg:w="1"/><text x="13.8937%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6437%" y="501" width="0.0803%" height="15" fill="rgb(247,170,54)" fg:x="170" fg:w="1"/><text x="13.8937%" y="511.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="13.7239%" y="709" width="0.0803%" height="15" fill="rgb(236,204,33)" fg:x="171" fg:w="1"/><text x="13.9739%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="13.7239%" y="693" width="0.0803%" height="15" fill="rgb(216,45,30)" fg:x="171" fg:w="1"/><text x="13.9739%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.7239%" y="677" width="0.0803%" height="15" fill="rgb(213,203,16)" fg:x="171" fg:w="1"/><text x="13.9739%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.7239%" y="661" width="0.0803%" height="15" fill="rgb(215,46,16)" fg:x="171" fg:w="1"/><text x="13.9739%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="13.8042%" y="677" width="0.0803%" height="15" fill="rgb(217,162,46)" fg:x="172" fg:w="1"/><text x="14.0542%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="13.8042%" y="661" width="0.0803%" height="15" fill="rgb(224,189,20)" fg:x="172" fg:w="1"/><text x="14.0542%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="13.8042%" y="645" width="0.0803%" height="15" fill="rgb(232,35,51)" fg:x="172" fg:w="1"/><text x="14.0542%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="13.8042%" y="629" width="0.0803%" height="15" fill="rgb(243,221,46)" fg:x="172" fg:w="1"/><text x="14.0542%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.8042%" y="613" width="0.0803%" height="15" fill="rgb(248,16,16)" fg:x="172" fg:w="1"/><text x="14.0542%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.8042%" y="597" width="0.0803%" height="15" fill="rgb(220,168,13)" fg:x="172" fg:w="1"/><text x="14.0542%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.8042%" y="581" width="0.0803%" height="15" fill="rgb(243,102,39)" fg:x="172" fg:w="1"/><text x="14.0542%" y="591.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="13.8042%" y="565" width="0.0803%" height="15" fill="rgb(245,82,32)" fg:x="172" fg:w="1"/><text x="14.0542%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="13.8042%" y="549" width="0.0803%" height="15" fill="rgb(230,164,19)" fg:x="172" fg:w="1"/><text x="14.0542%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="13.8042%" y="533" width="0.0803%" height="15" fill="rgb(221,9,41)" fg:x="172" fg:w="1"/><text x="14.0542%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="13.8042%" y="517" width="0.0803%" height="15" fill="rgb(216,93,0)" fg:x="172" fg:w="1"/><text x="14.0542%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="13.8042%" y="501" width="0.0803%" height="15" fill="rgb(235,113,9)" fg:x="172" fg:w="1"/><text x="14.0542%" y="511.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="13.8042%" y="693" width="0.1605%" height="15" fill="rgb(209,224,10)" fg:x="172" fg:w="2"/><text x="14.0542%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.8844%" y="677" width="0.0803%" height="15" fill="rgb(226,54,34)" fg:x="173" fg:w="1"/><text x="14.1344%" y="687.50"></text></g><g><title>plugins_core::build::Build::new (3 samples, 0.24%)</title><rect x="13.8042%" y="709" width="0.2408%" height="15" fill="rgb(222,60,8)" fg:x="172" fg:w="3"/><text x="14.0542%" y="719.50"></text></g><g><title>kernel::model::builder::EntityBuilder::with_key (1 samples, 0.08%)</title><rect x="13.9647%" y="693" width="0.0803%" height="15" fill="rgb(248,228,41)" fg:x="174" fg:w="1"/><text x="14.2147%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.0449%" y="613" width="0.0803%" height="15" fill="rgb(226,31,32)" fg:x="175" fg:w="1"/><text x="14.2949%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="14.0449%" y="677" width="0.1605%" height="15" fill="rgb(242,132,49)" fg:x="175" fg:w="2"/><text x="14.2949%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="14.0449%" y="661" width="0.1605%" height="15" fill="rgb(224,194,19)" fg:x="175" fg:w="2"/><text x="14.2949%" y="671.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="14.0449%" y="645" width="0.1605%" height="15" fill="rgb(232,200,51)" fg:x="175" fg:w="2"/><text x="14.2949%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="14.0449%" y="629" width="0.1605%" height="15" fill="rgb(235,60,46)" fg:x="175" fg:w="2"/><text x="14.2949%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1252%" y="613" width="0.0803%" height="15" fill="rgb(240,109,52)" fg:x="176" fg:w="1"/><text x="14.3752%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1252%" y="597" width="0.0803%" height="15" fill="rgb(215,78,37)" fg:x="176" fg:w="1"/><text x="14.3752%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="14.2055%" y="629" width="0.0803%" height="15" fill="rgb(225,141,7)" fg:x="177" fg:w="1"/><text x="14.4555%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.2055%" y="613" width="0.0803%" height="15" fill="rgb(216,102,54)" fg:x="177" fg:w="1"/><text x="14.4555%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.2055%" y="597" width="0.0803%" height="15" fill="rgb(238,143,13)" fg:x="177" fg:w="1"/><text x="14.4555%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.2055%" y="581" width="0.0803%" height="15" fill="rgb(219,45,51)" fg:x="177" fg:w="1"/><text x="14.4555%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.2055%" y="565" width="0.0803%" height="15" fill="rgb(242,105,46)" fg:x="177" fg:w="1"/><text x="14.4555%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="14.2857%" y="629" width="0.0803%" height="15" fill="rgb(206,154,49)" fg:x="178" fg:w="1"/><text x="14.5357%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.2857%" y="613" width="0.0803%" height="15" fill="rgb(239,215,4)" fg:x="178" fg:w="1"/><text x="14.5357%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.3660%" y="613" width="0.0803%" height="15" fill="rgb(238,82,17)" fg:x="179" fg:w="1"/><text x="14.6160%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="14.3660%" y="597" width="0.0803%" height="15" fill="rgb(242,49,30)" fg:x="179" fg:w="1"/><text x="14.6160%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="14.3660%" y="581" width="0.0803%" height="15" fill="rgb(248,5,16)" fg:x="179" fg:w="1"/><text x="14.6160%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="14.3660%" y="565" width="0.0803%" height="15" fill="rgb(237,138,32)" fg:x="179" fg:w="1"/><text x="14.6160%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.3660%" y="549" width="0.0803%" height="15" fill="rgb(235,79,45)" fg:x="179" fg:w="1"/><text x="14.6160%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.3660%" y="533" width="0.0803%" height="15" fill="rgb(213,105,25)" fg:x="179" fg:w="1"/><text x="14.6160%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="14.2055%" y="661" width="0.3210%" height="15" fill="rgb(251,131,7)" fg:x="177" fg:w="4"/><text x="14.4555%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.32%)</title><rect x="14.2055%" y="645" width="0.3210%" height="15" fill="rgb(211,155,7)" fg:x="177" fg:w="4"/><text x="14.4555%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="14.3660%" y="629" width="0.1605%" height="15" fill="rgb(243,70,15)" fg:x="179" fg:w="2"/><text x="14.6160%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="14.4462%" y="613" width="0.0803%" height="15" fill="rgb(215,171,2)" fg:x="180" fg:w="1"/><text x="14.6962%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="14.0449%" y="709" width="0.5618%" height="15" fill="rgb(244,121,35)" fg:x="175" fg:w="7"/><text x="14.2949%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="14.0449%" y="693" width="0.5618%" height="15" fill="rgb(249,147,17)" fg:x="175" fg:w="7"/><text x="14.2949%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="14.2055%" y="677" width="0.4013%" height="15" fill="rgb(241,193,52)" fg:x="177" fg:w="5"/><text x="14.4555%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="14.5265%" y="661" width="0.0803%" height="15" fill="rgb(217,159,39)" fg:x="181" fg:w="1"/><text x="14.7765%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.5265%" y="645" width="0.0803%" height="15" fill="rgb(248,110,0)" fg:x="181" fg:w="1"/><text x="14.7765%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.5265%" y="629" width="0.0803%" height="15" fill="rgb(233,227,0)" fg:x="181" fg:w="1"/><text x="14.7765%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="14.6067%" y="693" width="0.0803%" height="15" fill="rgb(252,55,2)" fg:x="182" fg:w="1"/><text x="14.8567%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="14.6067%" y="677" width="0.0803%" height="15" fill="rgb(224,194,24)" fg:x="182" fg:w="1"/><text x="14.8567%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.6067%" y="661" width="0.0803%" height="15" fill="rgb(247,5,33)" fg:x="182" fg:w="1"/><text x="14.8567%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.6067%" y="645" width="0.0803%" height="15" fill="rgb(242,66,47)" fg:x="182" fg:w="1"/><text x="14.8567%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.6067%" y="629" width="0.0803%" height="15" fill="rgb(213,107,12)" fg:x="182" fg:w="1"/><text x="14.8567%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.6067%" y="613" width="0.0803%" height="15" fill="rgb(206,131,1)" fg:x="182" fg:w="1"/><text x="14.8567%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.6067%" y="597" width="0.0803%" height="15" fill="rgb(214,9,36)" fg:x="182" fg:w="1"/><text x="14.8567%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.6067%" y="581" width="0.0803%" height="15" fill="rgb(251,215,18)" fg:x="182" fg:w="1"/><text x="14.8567%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (67 samples, 5.38%)</title><rect x="9.3900%" y="725" width="5.3772%" height="15" fill="rgb(251,64,9)" fg:x="117" fg:w="67"/><text x="9.6400%" y="735.50">plugins..</text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="14.6067%" y="709" width="0.1605%" height="15" fill="rgb(235,68,21)" fg:x="182" fg:w="2"/><text x="14.8567%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="14.6870%" y="693" width="0.0803%" height="15" fill="rgb(240,69,38)" fg:x="183" fg:w="1"/><text x="14.9370%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="14.6870%" y="677" width="0.0803%" height="15" fill="rgb(231,18,27)" fg:x="183" fg:w="1"/><text x="14.9370%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="14.6870%" y="661" width="0.0803%" height="15" fill="rgb(215,154,25)" fg:x="183" fg:w="1"/><text x="14.9370%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.6870%" y="645" width="0.0803%" height="15" fill="rgb(224,33,46)" fg:x="183" fg:w="1"/><text x="14.9370%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.6870%" y="629" width="0.0803%" height="15" fill="rgb(248,191,53)" fg:x="183" fg:w="1"/><text x="14.9370%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.6870%" y="613" width="0.0803%" height="15" fill="rgb(231,3,37)" fg:x="183" fg:w="1"/><text x="14.9370%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.6870%" y="597" width="0.0803%" height="15" fill="rgb(209,152,2)" fg:x="183" fg:w="1"/><text x="14.9370%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="14.7673%" y="693" width="0.0803%" height="15" fill="rgb(212,208,43)" fg:x="184" fg:w="1"/><text x="15.0173%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.7673%" y="677" width="0.0803%" height="15" fill="rgb(208,60,49)" fg:x="184" fg:w="1"/><text x="15.0173%" y="687.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="14.8475%" y="693" width="0.0803%" height="15" fill="rgb(245,135,6)" fg:x="185" fg:w="1"/><text x="15.0975%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="14.8475%" y="677" width="0.0803%" height="15" fill="rgb(243,86,23)" fg:x="185" fg:w="1"/><text x="15.0975%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="14.8475%" y="661" width="0.0803%" height="15" fill="rgb(223,7,20)" fg:x="185" fg:w="1"/><text x="15.0975%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="14.8475%" y="645" width="0.0803%" height="15" fill="rgb(212,182,17)" fg:x="185" fg:w="1"/><text x="15.0975%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="14.8475%" y="629" width="0.0803%" height="15" fill="rgb(237,94,50)" fg:x="185" fg:w="1"/><text x="15.0975%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.8475%" y="613" width="0.0803%" height="15" fill="rgb(232,185,44)" fg:x="185" fg:w="1"/><text x="15.0975%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.8475%" y="597" width="0.0803%" height="15" fill="rgb(205,50,36)" fg:x="185" fg:w="1"/><text x="15.0975%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="14.8475%" y="581" width="0.0803%" height="15" fill="rgb(252,32,32)" fg:x="185" fg:w="1"/><text x="15.0975%" y="591.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="14.8475%" y="565" width="0.0803%" height="15" fill="rgb(241,123,33)" fg:x="185" fg:w="1"/><text x="15.0975%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.8475%" y="549" width="0.0803%" height="15" fill="rgb(212,140,16)" fg:x="185" fg:w="1"/><text x="15.0975%" y="559.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.9278%" y="677" width="0.0803%" height="15" fill="rgb(247,132,5)" fg:x="186" fg:w="1"/><text x="15.1778%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.9278%" y="661" width="0.0803%" height="15" fill="rgb(209,137,38)" fg:x="186" fg:w="1"/><text x="15.1778%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.9278%" y="645" width="0.0803%" height="15" fill="rgb(248,32,42)" fg:x="186" fg:w="1"/><text x="15.1778%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.9278%" y="629" width="0.0803%" height="15" fill="rgb(216,188,40)" fg:x="186" fg:w="1"/><text x="15.1778%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9278%" y="613" width="0.0803%" height="15" fill="rgb(209,127,53)" fg:x="186" fg:w="1"/><text x="15.1778%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="15.0080%" y="661" width="0.0803%" height="15" fill="rgb(254,162,9)" fg:x="187" fg:w="1"/><text x="15.2580%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.0080%" y="645" width="0.0803%" height="15" fill="rgb(219,183,10)" fg:x="187" fg:w="1"/><text x="15.2580%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.0080%" y="629" width="0.0803%" height="15" fill="rgb(217,192,21)" fg:x="187" fg:w="1"/><text x="15.2580%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.0080%" y="613" width="0.0803%" height="15" fill="rgb(251,89,27)" fg:x="187" fg:w="1"/><text x="15.2580%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.0080%" y="597" width="0.0803%" height="15" fill="rgb(253,55,28)" fg:x="187" fg:w="1"/><text x="15.2580%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.0080%" y="581" width="0.0803%" height="15" fill="rgb(216,159,8)" fg:x="187" fg:w="1"/><text x="15.2580%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.0080%" y="565" width="0.0803%" height="15" fill="rgb(231,228,44)" fg:x="187" fg:w="1"/><text x="15.2580%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.0080%" y="549" width="0.0803%" height="15" fill="rgb(247,34,48)" fg:x="187" fg:w="1"/><text x="15.2580%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.0080%" y="533" width="0.0803%" height="15" fill="rgb(247,222,18)" fg:x="187" fg:w="1"/><text x="15.2580%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.0080%" y="517" width="0.0803%" height="15" fill="rgb(227,49,4)" fg:x="187" fg:w="1"/><text x="15.2580%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.0080%" y="501" width="0.0803%" height="15" fill="rgb(219,189,53)" fg:x="187" fg:w="1"/><text x="15.2580%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.0080%" y="485" width="0.0803%" height="15" fill="rgb(241,160,53)" fg:x="187" fg:w="1"/><text x="15.2580%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.0080%" y="469" width="0.0803%" height="15" fill="rgb(227,115,4)" fg:x="187" fg:w="1"/><text x="15.2580%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.0080%" y="453" width="0.0803%" height="15" fill="rgb(215,28,28)" fg:x="187" fg:w="1"/><text x="15.2580%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.0080%" y="437" width="0.0803%" height="15" fill="rgb(237,143,40)" fg:x="187" fg:w="1"/><text x="15.2580%" y="447.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="15.0883%" y="645" width="0.0803%" height="15" fill="rgb(205,107,24)" fg:x="188" fg:w="1"/><text x="15.3383%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="15.0883%" y="629" width="0.0803%" height="15" fill="rgb(209,112,35)" fg:x="188" fg:w="1"/><text x="15.3383%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="15.0883%" y="613" width="0.0803%" height="15" fill="rgb(206,135,5)" fg:x="188" fg:w="1"/><text x="15.3383%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="15.0883%" y="597" width="0.0803%" height="15" fill="rgb(227,217,38)" fg:x="188" fg:w="1"/><text x="15.3383%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="15.0883%" y="581" width="0.0803%" height="15" fill="rgb(205,0,41)" fg:x="188" fg:w="1"/><text x="15.3383%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.0883%" y="565" width="0.0803%" height="15" fill="rgb(220,20,40)" fg:x="188" fg:w="1"/><text x="15.3383%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="14.9278%" y="693" width="0.3210%" height="15" fill="rgb(216,145,3)" fg:x="186" fg:w="4"/><text x="15.1778%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="15.0080%" y="677" width="0.2408%" height="15" fill="rgb(207,130,51)" fg:x="187" fg:w="3"/><text x="15.2580%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="15.0883%" y="661" width="0.1605%" height="15" fill="rgb(252,93,13)" fg:x="188" fg:w="2"/><text x="15.3383%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="15.1685%" y="645" width="0.0803%" height="15" fill="rgb(210,105,15)" fg:x="189" fg:w="1"/><text x="15.4185%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.1685%" y="629" width="0.0803%" height="15" fill="rgb(212,126,31)" fg:x="189" fg:w="1"/><text x="15.4185%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="15.1685%" y="613" width="0.0803%" height="15" fill="rgb(241,167,46)" fg:x="189" fg:w="1"/><text x="15.4185%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="15.1685%" y="597" width="0.0803%" height="15" fill="rgb(217,143,19)" fg:x="189" fg:w="1"/><text x="15.4185%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (7 samples, 0.56%)</title><rect x="14.7673%" y="725" width="0.5618%" height="15" fill="rgb(235,117,33)" fg:x="184" fg:w="7"/><text x="15.0173%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (7 samples, 0.56%)</title><rect x="14.7673%" y="709" width="0.5618%" height="15" fill="rgb(247,95,6)" fg:x="184" fg:w="7"/><text x="15.0173%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="15.2488%" y="693" width="0.0803%" height="15" fill="rgb(243,206,43)" fg:x="190" fg:w="1"/><text x="15.4988%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.2488%" y="677" width="0.0803%" height="15" fill="rgb(229,65,54)" fg:x="190" fg:w="1"/><text x="15.4988%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="15.2488%" y="661" width="0.0803%" height="15" fill="rgb(247,137,34)" fg:x="190" fg:w="1"/><text x="15.4988%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.2488%" y="645" width="0.0803%" height="15" fill="rgb(245,174,44)" fg:x="190" fg:w="1"/><text x="15.4988%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.2488%" y="629" width="0.0803%" height="15" fill="rgb(223,64,15)" fg:x="190" fg:w="1"/><text x="15.4988%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.2488%" y="613" width="0.0803%" height="15" fill="rgb(243,153,36)" fg:x="190" fg:w="1"/><text x="15.4988%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="15.2488%" y="597" width="0.0803%" height="15" fill="rgb(252,23,4)" fg:x="190" fg:w="1"/><text x="15.4988%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="15.4093%" y="709" width="0.0803%" height="15" fill="rgb(209,132,13)" fg:x="192" fg:w="1"/><text x="15.6593%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="15.4093%" y="693" width="0.0803%" height="15" fill="rgb(209,196,21)" fg:x="192" fg:w="1"/><text x="15.6593%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.4093%" y="677" width="0.0803%" height="15" fill="rgb(252,197,1)" fg:x="192" fg:w="1"/><text x="15.6593%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="15.4093%" y="661" width="0.0803%" height="15" fill="rgb(229,42,46)" fg:x="192" fg:w="1"/><text x="15.6593%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="15.4093%" y="645" width="0.0803%" height="15" fill="rgb(219,85,8)" fg:x="192" fg:w="1"/><text x="15.6593%" y="655.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="15.4896%" y="709" width="0.0803%" height="15" fill="rgb(223,185,14)" fg:x="193" fg:w="1"/><text x="15.7396%" y="719.50"></text></g><g><title>kernel::model::builder::EntityBuilder::with_key (1 samples, 0.08%)</title><rect x="15.4896%" y="693" width="0.0803%" height="15" fill="rgb(217,196,18)" fg:x="193" fg:w="1"/><text x="15.7396%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.8106%" y="677" width="0.0803%" height="15" fill="rgb(220,122,37)" fg:x="197" fg:w="1"/><text x="16.0606%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="15.8909%" y="677" width="0.0803%" height="15" fill="rgb(236,135,33)" fg:x="198" fg:w="1"/><text x="16.1409%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.8909%" y="661" width="0.0803%" height="15" fill="rgb(222,86,54)" fg:x="198" fg:w="1"/><text x="16.1409%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.8909%" y="645" width="0.0803%" height="15" fill="rgb(227,42,22)" fg:x="198" fg:w="1"/><text x="16.1409%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.8909%" y="629" width="0.0803%" height="15" fill="rgb(243,101,27)" fg:x="198" fg:w="1"/><text x="16.1409%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.9711%" y="581" width="0.0803%" height="15" fill="rgb(229,100,8)" fg:x="199" fg:w="1"/><text x="16.2211%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (133 samples, 10.67%)</title><rect x="5.4575%" y="741" width="10.6742%" height="15" fill="rgb(252,68,10)" fg:x="68" fg:w="133"/><text x="5.7075%" y="751.50">&lt;tests::HoldingK..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (10 samples, 0.80%)</title><rect x="15.3291%" y="725" width="0.8026%" height="15" fill="rgb(219,19,31)" fg:x="191" fg:w="10"/><text x="15.5791%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="15.5698%" y="709" width="0.5618%" height="15" fill="rgb(246,150,44)" fg:x="194" fg:w="7"/><text x="15.8198%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="15.7303%" y="693" width="0.4013%" height="15" fill="rgb(211,14,39)" fg:x="196" fg:w="5"/><text x="15.9803%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="15.9711%" y="677" width="0.1605%" height="15" fill="rgb(221,98,29)" fg:x="199" fg:w="2"/><text x="16.2211%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="15.9711%" y="661" width="0.1605%" height="15" fill="rgb(221,70,26)" fg:x="199" fg:w="2"/><text x="16.2211%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="15.9711%" y="645" width="0.1605%" height="15" fill="rgb(236,146,30)" fg:x="199" fg:w="2"/><text x="16.2211%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="15.9711%" y="629" width="0.1605%" height="15" fill="rgb(226,94,34)" fg:x="199" fg:w="2"/><text x="16.2211%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.9711%" y="613" width="0.1605%" height="15" fill="rgb(248,132,21)" fg:x="199" fg:w="2"/><text x="16.2211%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.9711%" y="597" width="0.1605%" height="15" fill="rgb(245,43,50)" fg:x="199" fg:w="2"/><text x="16.2211%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.0514%" y="581" width="0.0803%" height="15" fill="rgb(245,132,31)" fg:x="200" fg:w="1"/><text x="16.3014%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.0514%" y="565" width="0.0803%" height="15" fill="rgb(230,171,4)" fg:x="200" fg:w="1"/><text x="16.3014%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.0514%" y="549" width="0.0803%" height="15" fill="rgb(235,6,45)" fg:x="200" fg:w="1"/><text x="16.3014%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.0514%" y="533" width="0.0803%" height="15" fill="rgb(220,80,28)" fg:x="200" fg:w="1"/><text x="16.3014%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="16.1316%" y="725" width="0.0803%" height="15" fill="rgb(242,171,9)" fg:x="201" fg:w="1"/><text x="16.3816%" y="735.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="16.2119%" y="725" width="0.0803%" height="15" fill="rgb(214,135,29)" fg:x="202" fg:w="1"/><text x="16.4619%" y="735.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="16.2119%" y="709" width="0.0803%" height="15" fill="rgb(221,229,16)" fg:x="202" fg:w="1"/><text x="16.4619%" y="719.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="16.2119%" y="693" width="0.0803%" height="15" fill="rgb(253,59,46)" fg:x="202" fg:w="1"/><text x="16.4619%" y="703.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="16.2119%" y="677" width="0.0803%" height="15" fill="rgb(250,147,20)" fg:x="202" fg:w="1"/><text x="16.4619%" y="687.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="16.2119%" y="661" width="0.0803%" height="15" fill="rgb(236,64,48)" fg:x="202" fg:w="1"/><text x="16.4619%" y="671.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="16.2119%" y="645" width="0.0803%" height="15" fill="rgb(240,37,42)" fg:x="202" fg:w="1"/><text x="16.4619%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="16.2119%" y="629" width="0.0803%" height="15" fill="rgb(220,41,50)" fg:x="202" fg:w="1"/><text x="16.4619%" y="639.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="16.2119%" y="613" width="0.0803%" height="15" fill="rgb(216,51,14)" fg:x="202" fg:w="1"/><text x="16.4619%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.3724%" y="677" width="0.0803%" height="15" fill="rgb(215,83,10)" fg:x="204" fg:w="1"/><text x="16.6224%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.3724%" y="661" width="0.0803%" height="15" fill="rgb(206,144,17)" fg:x="204" fg:w="1"/><text x="16.6224%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="16.2921%" y="709" width="0.3210%" height="15" fill="rgb(219,196,37)" fg:x="203" fg:w="4"/><text x="16.5421%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="16.2921%" y="693" width="0.3210%" height="15" fill="rgb(226,135,26)" fg:x="203" fg:w="4"/><text x="16.5421%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.4526%" y="677" width="0.1605%" height="15" fill="rgb(237,195,40)" fg:x="205" fg:w="2"/><text x="16.7026%" y="687.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="16.4526%" y="661" width="0.1605%" height="15" fill="rgb(228,182,42)" fg:x="205" fg:w="2"/><text x="16.7026%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.6132%" y="613" width="0.0803%" height="15" fill="rgb(224,135,50)" fg:x="207" fg:w="1"/><text x="16.8632%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.6132%" y="597" width="0.0803%" height="15" fill="rgb(236,215,34)" fg:x="207" fg:w="1"/><text x="16.8632%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.6132%" y="581" width="0.0803%" height="15" fill="rgb(244,213,27)" fg:x="207" fg:w="1"/><text x="16.8632%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.6132%" y="565" width="0.0803%" height="15" fill="rgb(233,37,53)" fg:x="207" fg:w="1"/><text x="16.8632%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.6132%" y="549" width="0.0803%" height="15" fill="rgb(222,132,14)" fg:x="207" fg:w="1"/><text x="16.8632%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.6132%" y="533" width="0.0803%" height="15" fill="rgb(219,202,29)" fg:x="207" fg:w="1"/><text x="16.8632%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.6132%" y="517" width="0.0803%" height="15" fill="rgb(226,157,39)" fg:x="207" fg:w="1"/><text x="16.8632%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.6132%" y="501" width="0.0803%" height="15" fill="rgb(235,213,2)" fg:x="207" fg:w="1"/><text x="16.8632%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.6132%" y="485" width="0.0803%" height="15" fill="rgb(250,121,2)" fg:x="207" fg:w="1"/><text x="16.8632%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.6132%" y="469" width="0.0803%" height="15" fill="rgb(206,192,33)" fg:x="207" fg:w="1"/><text x="16.8632%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.6132%" y="453" width="0.0803%" height="15" fill="rgb(240,161,6)" fg:x="207" fg:w="1"/><text x="16.8632%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.6132%" y="437" width="0.0803%" height="15" fill="rgb(246,53,30)" fg:x="207" fg:w="1"/><text x="16.8632%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.6132%" y="421" width="0.0803%" height="15" fill="rgb(219,123,43)" fg:x="207" fg:w="1"/><text x="16.8632%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.6132%" y="629" width="0.1605%" height="15" fill="rgb(236,53,49)" fg:x="207" fg:w="2"/><text x="16.8632%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.6934%" y="613" width="0.0803%" height="15" fill="rgb(241,156,1)" fg:x="208" fg:w="1"/><text x="16.9434%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.6934%" y="597" width="0.0803%" height="15" fill="rgb(209,73,26)" fg:x="208" fg:w="1"/><text x="16.9434%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.6934%" y="581" width="0.0803%" height="15" fill="rgb(206,114,3)" fg:x="208" fg:w="1"/><text x="16.9434%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.6934%" y="565" width="0.0803%" height="15" fill="rgb(230,214,9)" fg:x="208" fg:w="1"/><text x="16.9434%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.6934%" y="549" width="0.0803%" height="15" fill="rgb(240,184,46)" fg:x="208" fg:w="1"/><text x="16.9434%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="16.6934%" y="533" width="0.0803%" height="15" fill="rgb(242,169,54)" fg:x="208" fg:w="1"/><text x="16.9434%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="16.6934%" y="517" width="0.0803%" height="15" fill="rgb(207,168,50)" fg:x="208" fg:w="1"/><text x="16.9434%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="16.6132%" y="661" width="0.2408%" height="15" fill="rgb(240,114,2)" fg:x="207" fg:w="3"/><text x="16.8632%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="16.6132%" y="645" width="0.2408%" height="15" fill="rgb(211,17,40)" fg:x="207" fg:w="3"/><text x="16.8632%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.7737%" y="629" width="0.0803%" height="15" fill="rgb(235,97,36)" fg:x="209" fg:w="1"/><text x="17.0237%" y="639.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (4 samples, 0.32%)</title><rect x="16.6132%" y="709" width="0.3210%" height="15" fill="rgb(208,164,11)" fg:x="207" fg:w="4"/><text x="16.8632%" y="719.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (4 samples, 0.32%)</title><rect x="16.6132%" y="693" width="0.3210%" height="15" fill="rgb(242,11,17)" fg:x="207" fg:w="4"/><text x="16.8632%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="16.6132%" y="677" width="0.3210%" height="15" fill="rgb(215,86,33)" fg:x="207" fg:w="4"/><text x="16.8632%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.8539%" y="661" width="0.0803%" height="15" fill="rgb(245,185,28)" fg:x="210" fg:w="1"/><text x="17.1039%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.8539%" y="645" width="0.0803%" height="15" fill="rgb(231,89,42)" fg:x="210" fg:w="1"/><text x="17.1039%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.8539%" y="629" width="0.0803%" height="15" fill="rgb(210,18,47)" fg:x="210" fg:w="1"/><text x="17.1039%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.8539%" y="613" width="0.0803%" height="15" fill="rgb(214,84,8)" fg:x="210" fg:w="1"/><text x="17.1039%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="16.8539%" y="597" width="0.0803%" height="15" fill="rgb(214,222,23)" fg:x="210" fg:w="1"/><text x="17.1039%" y="607.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="16.8539%" y="581" width="0.0803%" height="15" fill="rgb(213,104,21)" fg:x="210" fg:w="1"/><text x="17.1039%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="16.9342%" y="693" width="0.0803%" height="15" fill="rgb(238,138,6)" fg:x="211" fg:w="1"/><text x="17.1842%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="16.9342%" y="677" width="0.0803%" height="15" fill="rgb(205,167,50)" fg:x="211" fg:w="1"/><text x="17.1842%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0144%" y="581" width="0.0803%" height="15" fill="rgb(230,105,27)" fg:x="212" fg:w="1"/><text x="17.2644%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="17.0144%" y="597" width="0.1605%" height="15" fill="rgb(222,97,48)" fg:x="212" fg:w="2"/><text x="17.2644%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.0947%" y="581" width="0.0803%" height="15" fill="rgb(222,197,14)" fg:x="213" fg:w="1"/><text x="17.3447%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0947%" y="565" width="0.0803%" height="15" fill="rgb(210,105,47)" fg:x="213" fg:w="1"/><text x="17.3447%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.1750%" y="565" width="0.0803%" height="15" fill="rgb(238,158,19)" fg:x="214" fg:w="1"/><text x="17.4250%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="17.0144%" y="645" width="0.3210%" height="15" fill="rgb(226,176,23)" fg:x="212" fg:w="4"/><text x="17.2644%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="17.0144%" y="629" width="0.3210%" height="15" fill="rgb(208,79,31)" fg:x="212" fg:w="4"/><text x="17.2644%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="17.0144%" y="613" width="0.3210%" height="15" fill="rgb(221,154,21)" fg:x="212" fg:w="4"/><text x="17.2644%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="17.1750%" y="597" width="0.1605%" height="15" fill="rgb(213,61,41)" fg:x="214" fg:w="2"/><text x="17.4250%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="17.1750%" y="581" width="0.1605%" height="15" fill="rgb(215,28,33)" fg:x="214" fg:w="2"/><text x="17.4250%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.2552%" y="565" width="0.0803%" height="15" fill="rgb(231,139,26)" fg:x="215" fg:w="1"/><text x="17.5052%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="17.3355%" y="645" width="0.0803%" height="15" fill="rgb(232,159,16)" fg:x="216" fg:w="1"/><text x="17.5855%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="17.3355%" y="629" width="0.0803%" height="15" fill="rgb(233,80,10)" fg:x="216" fg:w="1"/><text x="17.5855%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.3355%" y="613" width="0.0803%" height="15" fill="rgb(208,147,29)" fg:x="216" fg:w="1"/><text x="17.5855%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.3355%" y="597" width="0.0803%" height="15" fill="rgb(213,10,12)" fg:x="216" fg:w="1"/><text x="17.5855%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.3355%" y="581" width="0.0803%" height="15" fill="rgb(231,218,13)" fg:x="216" fg:w="1"/><text x="17.5855%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.3355%" y="565" width="0.0803%" height="15" fill="rgb(244,199,44)" fg:x="216" fg:w="1"/><text x="17.5855%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.3355%" y="549" width="0.0803%" height="15" fill="rgb(240,144,53)" fg:x="216" fg:w="1"/><text x="17.5855%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3355%" y="533" width="0.0803%" height="15" fill="rgb(223,57,28)" fg:x="216" fg:w="1"/><text x="17.5855%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="17.4960%" y="613" width="0.2408%" height="15" fill="rgb(213,134,38)" fg:x="218" fg:w="3"/><text x="17.7460%" y="623.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="17.4960%" y="597" width="0.2408%" height="15" fill="rgb(251,182,42)" fg:x="218" fg:w="3"/><text x="17.7460%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="17.4960%" y="581" width="0.2408%" height="15" fill="rgb(229,93,13)" fg:x="218" fg:w="3"/><text x="17.7460%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="17.4960%" y="565" width="0.2408%" height="15" fill="rgb(234,171,3)" fg:x="218" fg:w="3"/><text x="17.7460%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="17.5762%" y="549" width="0.1605%" height="15" fill="rgb(241,105,32)" fg:x="219" fg:w="2"/><text x="17.8262%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.6565%" y="533" width="0.0803%" height="15" fill="rgb(221,66,3)" fg:x="220" fg:w="1"/><text x="17.9065%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.6565%" y="517" width="0.0803%" height="15" fill="rgb(248,155,29)" fg:x="220" fg:w="1"/><text x="17.9065%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="17.4960%" y="629" width="0.3210%" height="15" fill="rgb(231,31,5)" fg:x="218" fg:w="4"/><text x="17.7460%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.7368%" y="613" width="0.0803%" height="15" fill="rgb(213,188,31)" fg:x="221" fg:w="1"/><text x="17.9868%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.7368%" y="597" width="0.0803%" height="15" fill="rgb(212,104,33)" fg:x="221" fg:w="1"/><text x="17.9868%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="17.7368%" y="581" width="0.0803%" height="15" fill="rgb(254,77,51)" fg:x="221" fg:w="1"/><text x="17.9868%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.8973%" y="613" width="0.0803%" height="15" fill="rgb(234,39,26)" fg:x="223" fg:w="1"/><text x="18.1473%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="17.9775%" y="613" width="0.2408%" height="15" fill="rgb(208,88,36)" fg:x="224" fg:w="3"/><text x="18.2275%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.0578%" y="597" width="0.1605%" height="15" fill="rgb(243,222,10)" fg:x="225" fg:w="2"/><text x="18.3078%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.1380%" y="581" width="0.0803%" height="15" fill="rgb(218,133,52)" fg:x="226" fg:w="1"/><text x="18.3880%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.1380%" y="565" width="0.0803%" height="15" fill="rgb(222,25,26)" fg:x="226" fg:w="1"/><text x="18.3880%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.2183%" y="597" width="0.0803%" height="15" fill="rgb(243,174,24)" fg:x="227" fg:w="1"/><text x="18.4683%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.2183%" y="581" width="0.0803%" height="15" fill="rgb(233,188,52)" fg:x="227" fg:w="1"/><text x="18.4683%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="18.2183%" y="565" width="0.0803%" height="15" fill="rgb(208,89,14)" fg:x="227" fg:w="1"/><text x="18.4683%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.2183%" y="549" width="0.0803%" height="15" fill="rgb(205,204,21)" fg:x="227" fg:w="1"/><text x="18.4683%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.2183%" y="533" width="0.0803%" height="15" fill="rgb(246,39,28)" fg:x="227" fg:w="1"/><text x="18.4683%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="18.2986%" y="597" width="0.1605%" height="15" fill="rgb(235,71,19)" fg:x="228" fg:w="2"/><text x="18.5486%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.2986%" y="581" width="0.1605%" height="15" fill="rgb(211,62,39)" fg:x="228" fg:w="2"/><text x="18.5486%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.3788%" y="565" width="0.0803%" height="15" fill="rgb(246,118,20)" fg:x="229" fg:w="1"/><text x="18.6288%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.3788%" y="549" width="0.0803%" height="15" fill="rgb(230,82,12)" fg:x="229" fg:w="1"/><text x="18.6288%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="18.4591%" y="581" width="0.1605%" height="15" fill="rgb(205,212,34)" fg:x="230" fg:w="2"/><text x="18.7091%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.4591%" y="565" width="0.1605%" height="15" fill="rgb(239,90,1)" fg:x="230" fg:w="2"/><text x="18.7091%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="18.4591%" y="549" width="0.1605%" height="15" fill="rgb(225,198,50)" fg:x="230" fg:w="2"/><text x="18.7091%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="18.4591%" y="533" width="0.1605%" height="15" fill="rgb(227,208,48)" fg:x="230" fg:w="2"/><text x="18.7091%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.5393%" y="517" width="0.0803%" height="15" fill="rgb(238,134,41)" fg:x="231" fg:w="1"/><text x="18.7893%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.5393%" y="501" width="0.0803%" height="15" fill="rgb(241,58,39)" fg:x="231" fg:w="1"/><text x="18.7893%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.5393%" y="485" width="0.0803%" height="15" fill="rgb(214,126,4)" fg:x="231" fg:w="1"/><text x="18.7893%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6196%" y="581" width="0.0803%" height="15" fill="rgb(235,149,4)" fg:x="232" fg:w="1"/><text x="18.8696%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6196%" y="565" width="0.0803%" height="15" fill="rgb(236,59,29)" fg:x="232" fg:w="1"/><text x="18.8696%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="17.8170%" y="629" width="0.9631%" height="15" fill="rgb(246,11,33)" fg:x="222" fg:w="12"/><text x="18.0670%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="18.2183%" y="613" width="0.5618%" height="15" fill="rgb(232,180,35)" fg:x="227" fg:w="7"/><text x="18.4683%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="18.4591%" y="597" width="0.3210%" height="15" fill="rgb(220,35,37)" fg:x="230" fg:w="4"/><text x="18.7091%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.6998%" y="581" width="0.0803%" height="15" fill="rgb(238,107,48)" fg:x="233" fg:w="1"/><text x="18.9498%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.6998%" y="565" width="0.0803%" height="15" fill="rgb(205,65,21)" fg:x="233" fg:w="1"/><text x="18.9498%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (19 samples, 1.52%)</title><rect x="17.4157%" y="645" width="1.5249%" height="15" fill="rgb(246,138,48)" fg:x="217" fg:w="19"/><text x="17.6657%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.7801%" y="629" width="0.1605%" height="15" fill="rgb(209,220,47)" fg:x="234" fg:w="2"/><text x="19.0301%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.8604%" y="613" width="0.0803%" height="15" fill="rgb(222,162,49)" fg:x="235" fg:w="1"/><text x="19.1104%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.8604%" y="597" width="0.0803%" height="15" fill="rgb(243,123,11)" fg:x="235" fg:w="1"/><text x="19.1104%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.8604%" y="581" width="0.0803%" height="15" fill="rgb(221,229,41)" fg:x="235" fg:w="1"/><text x="19.1104%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.0209%" y="565" width="0.0803%" height="15" fill="rgb(216,68,4)" fg:x="237" fg:w="1"/><text x="19.2709%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.0209%" y="549" width="0.0803%" height="15" fill="rgb(207,88,35)" fg:x="237" fg:w="1"/><text x="19.2709%" y="559.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="19.1011%" y="549" width="0.2408%" height="15" fill="rgb(252,2,5)" fg:x="238" fg:w="3"/><text x="19.3511%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.3419%" y="549" width="0.0803%" height="15" fill="rgb(209,173,7)" fg:x="241" fg:w="1"/><text x="19.5919%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.3419%" y="533" width="0.0803%" height="15" fill="rgb(210,198,52)" fg:x="241" fg:w="1"/><text x="19.5919%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="18.9406%" y="613" width="0.6421%" height="15" fill="rgb(228,152,32)" fg:x="236" fg:w="8"/><text x="19.1906%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.64%)</title><rect x="18.9406%" y="597" width="0.6421%" height="15" fill="rgb(249,98,29)" fg:x="236" fg:w="8"/><text x="19.1906%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="19.0209%" y="581" width="0.5618%" height="15" fill="rgb(205,148,48)" fg:x="237" fg:w="7"/><text x="19.2709%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="19.1011%" y="565" width="0.4815%" height="15" fill="rgb(236,69,34)" fg:x="238" fg:w="6"/><text x="19.3511%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="19.4222%" y="549" width="0.1605%" height="15" fill="rgb(220,151,41)" fg:x="242" fg:w="2"/><text x="19.6722%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="19.5024%" y="533" width="0.0803%" height="15" fill="rgb(254,106,24)" fg:x="243" fg:w="1"/><text x="19.7524%" y="543.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="19.5827%" y="613" width="0.0803%" height="15" fill="rgb(210,37,48)" fg:x="244" fg:w="1"/><text x="19.8327%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="19.5827%" y="597" width="0.0803%" height="15" fill="rgb(254,131,5)" fg:x="244" fg:w="1"/><text x="19.8327%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="19.5827%" y="581" width="0.0803%" height="15" fill="rgb(216,55,41)" fg:x="244" fg:w="1"/><text x="19.8327%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (10 samples, 0.80%)</title><rect x="18.9406%" y="629" width="0.8026%" height="15" fill="rgb(250,35,31)" fg:x="236" fg:w="10"/><text x="19.1906%" y="639.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="19.6629%" y="613" width="0.0803%" height="15" fill="rgb(207,124,33)" fg:x="245" fg:w="1"/><text x="19.9129%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="19.6629%" y="597" width="0.0803%" height="15" fill="rgb(249,175,17)" fg:x="245" fg:w="1"/><text x="19.9129%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="19.6629%" y="581" width="0.0803%" height="15" fill="rgb(224,175,39)" fg:x="245" fg:w="1"/><text x="19.9129%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="19.6629%" y="565" width="0.0803%" height="15" fill="rgb(208,67,49)" fg:x="245" fg:w="1"/><text x="19.9129%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.6629%" y="549" width="0.0803%" height="15" fill="rgb(222,188,41)" fg:x="245" fg:w="1"/><text x="19.9129%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.8234%" y="597" width="0.0803%" height="15" fill="rgb(243,213,30)" fg:x="247" fg:w="1"/><text x="20.0734%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="19.9037%" y="597" width="0.1605%" height="15" fill="rgb(253,100,45)" fg:x="248" fg:w="2"/><text x="20.1537%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="19.9839%" y="581" width="0.0803%" height="15" fill="rgb(226,24,44)" fg:x="249" fg:w="1"/><text x="20.2339%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.0642%" y="565" width="0.0803%" height="15" fill="rgb(215,41,24)" fg:x="250" fg:w="1"/><text x="20.3142%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.0642%" y="549" width="0.0803%" height="15" fill="rgb(254,53,33)" fg:x="250" fg:w="1"/><text x="20.3142%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="20.0642%" y="597" width="0.1605%" height="15" fill="rgb(242,103,10)" fg:x="250" fg:w="2"/><text x="20.3142%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="20.0642%" y="581" width="0.1605%" height="15" fill="rgb(246,29,21)" fg:x="250" fg:w="2"/><text x="20.3142%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="20.1445%" y="565" width="0.0803%" height="15" fill="rgb(251,154,1)" fg:x="251" fg:w="1"/><text x="20.3945%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="20.2247%" y="597" width="0.0803%" height="15" fill="rgb(254,212,26)" fg:x="252" fg:w="1"/><text x="20.4747%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.2247%" y="581" width="0.0803%" height="15" fill="rgb(251,187,46)" fg:x="252" fg:w="1"/><text x="20.4747%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.2247%" y="565" width="0.0803%" height="15" fill="rgb(224,208,14)" fg:x="252" fg:w="1"/><text x="20.4747%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="20.3050%" y="565" width="0.0803%" height="15" fill="rgb(222,176,26)" fg:x="253" fg:w="1"/><text x="20.5550%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.3852%" y="549" width="0.0803%" height="15" fill="rgb(241,219,52)" fg:x="254" fg:w="1"/><text x="20.6352%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.3852%" y="533" width="0.0803%" height="15" fill="rgb(252,198,21)" fg:x="254" fg:w="1"/><text x="20.6352%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="20.4655%" y="517" width="0.0803%" height="15" fill="rgb(244,196,23)" fg:x="255" fg:w="1"/><text x="20.7155%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.4655%" y="501" width="0.0803%" height="15" fill="rgb(239,121,44)" fg:x="255" fg:w="1"/><text x="20.7155%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="20.4655%" y="549" width="0.1605%" height="15" fill="rgb(249,203,23)" fg:x="255" fg:w="2"/><text x="20.7155%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="20.4655%" y="533" width="0.1605%" height="15" fill="rgb(238,219,10)" fg:x="255" fg:w="2"/><text x="20.7155%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.5457%" y="517" width="0.0803%" height="15" fill="rgb(241,35,46)" fg:x="256" fg:w="1"/><text x="20.7957%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.8668%" y="517" width="0.0803%" height="15" fill="rgb(218,28,6)" fg:x="260" fg:w="1"/><text x="21.1168%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="20.9470%" y="501" width="0.1605%" height="15" fill="rgb(233,151,50)" fg:x="261" fg:w="2"/><text x="21.1970%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="20.9470%" y="485" width="0.1605%" height="15" fill="rgb(208,57,8)" fg:x="261" fg:w="2"/><text x="21.1970%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.88%)</title><rect x="20.3852%" y="565" width="0.8828%" height="15" fill="rgb(253,99,10)" fg:x="254" fg:w="11"/><text x="20.6352%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.64%)</title><rect x="20.6260%" y="549" width="0.6421%" height="15" fill="rgb(237,196,49)" fg:x="257" fg:w="8"/><text x="20.8760%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="20.7865%" y="533" width="0.4815%" height="15" fill="rgb(209,51,3)" fg:x="259" fg:w="6"/><text x="21.0365%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="20.9470%" y="517" width="0.3210%" height="15" fill="rgb(238,129,10)" fg:x="261" fg:w="4"/><text x="21.1970%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="21.1075%" y="501" width="0.1605%" height="15" fill="rgb(246,201,16)" fg:x="263" fg:w="2"/><text x="21.3575%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (20 samples, 1.61%)</title><rect x="19.7432%" y="629" width="1.6051%" height="15" fill="rgb(250,160,20)" fg:x="246" fg:w="20"/><text x="19.9932%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (20 samples, 1.61%)</title><rect x="19.7432%" y="613" width="1.6051%" height="15" fill="rgb(251,107,25)" fg:x="246" fg:w="20"/><text x="19.9932%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.04%)</title><rect x="20.3050%" y="597" width="1.0433%" height="15" fill="rgb(212,103,39)" fg:x="253" fg:w="13"/><text x="20.5550%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (13 samples, 1.04%)</title><rect x="20.3050%" y="581" width="1.0433%" height="15" fill="rgb(207,9,29)" fg:x="253" fg:w="13"/><text x="20.5550%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="21.2681%" y="565" width="0.0803%" height="15" fill="rgb(227,84,3)" fg:x="265" fg:w="1"/><text x="21.5181%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.4286%" y="437" width="0.0803%" height="15" fill="rgb(242,194,7)" fg:x="267" fg:w="1"/><text x="21.6786%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.4286%" y="421" width="0.0803%" height="15" fill="rgb(230,40,4)" fg:x="267" fg:w="1"/><text x="21.6786%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.4286%" y="405" width="0.0803%" height="15" fill="rgb(243,229,33)" fg:x="267" fg:w="1"/><text x="21.6786%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.4286%" y="389" width="0.0803%" height="15" fill="rgb(240,65,24)" fg:x="267" fg:w="1"/><text x="21.6786%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="21.4286%" y="485" width="0.1605%" height="15" fill="rgb(212,28,20)" fg:x="267" fg:w="2"/><text x="21.6786%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="21.4286%" y="469" width="0.1605%" height="15" fill="rgb(209,72,3)" fg:x="267" fg:w="2"/><text x="21.6786%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="21.4286%" y="453" width="0.1605%" height="15" fill="rgb(238,170,36)" fg:x="267" fg:w="2"/><text x="21.6786%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.5088%" y="437" width="0.0803%" height="15" fill="rgb(236,19,38)" fg:x="268" fg:w="1"/><text x="21.7588%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="21.5891%" y="469" width="0.3210%" height="15" fill="rgb(230,67,43)" fg:x="269" fg:w="4"/><text x="21.8391%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="21.6693%" y="453" width="0.2408%" height="15" fill="rgb(227,14,36)" fg:x="270" fg:w="3"/><text x="21.9193%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="21.7496%" y="437" width="0.1605%" height="15" fill="rgb(247,171,49)" fg:x="271" fg:w="2"/><text x="21.9996%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="21.7496%" y="421" width="0.1605%" height="15" fill="rgb(235,164,51)" fg:x="271" fg:w="2"/><text x="21.9996%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="21.7496%" y="405" width="0.1605%" height="15" fill="rgb(246,107,20)" fg:x="271" fg:w="2"/><text x="21.9996%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="21.9101%" y="453" width="0.0803%" height="15" fill="rgb(226,88,18)" fg:x="273" fg:w="1"/><text x="22.1601%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="21.4286%" y="501" width="0.7223%" height="15" fill="rgb(235,136,9)" fg:x="267" fg:w="9"/><text x="21.6786%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="21.5891%" y="485" width="0.5618%" height="15" fill="rgb(209,3,34)" fg:x="269" fg:w="7"/><text x="21.8391%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="21.9101%" y="469" width="0.2408%" height="15" fill="rgb(213,38,19)" fg:x="273" fg:w="3"/><text x="22.1601%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="21.9904%" y="453" width="0.1605%" height="15" fill="rgb(254,24,24)" fg:x="274" fg:w="2"/><text x="22.2404%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="22.1509%" y="501" width="0.2408%" height="15" fill="rgb(219,122,42)" fg:x="276" fg:w="3"/><text x="22.4009%" y="511.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="22.1509%" y="485" width="0.2408%" height="15" fill="rgb(205,128,31)" fg:x="276" fg:w="3"/><text x="22.4009%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.12%)</title><rect x="21.3483%" y="517" width="1.1236%" height="15" fill="rgb(212,142,0)" fg:x="266" fg:w="14"/><text x="21.5983%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.3917%" y="501" width="0.0803%" height="15" fill="rgb(211,25,35)" fg:x="279" fg:w="1"/><text x="22.6417%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.3917%" y="485" width="0.0803%" height="15" fill="rgb(220,150,53)" fg:x="279" fg:w="1"/><text x="22.6417%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.3917%" y="469" width="0.0803%" height="15" fill="rgb(220,30,24)" fg:x="279" fg:w="1"/><text x="22.6417%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 1.20%)</title><rect x="21.3483%" y="533" width="1.2039%" height="15" fill="rgb(218,86,23)" fg:x="266" fg:w="15"/><text x="21.5983%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.4719%" y="517" width="0.0803%" height="15" fill="rgb(206,62,27)" fg:x="280" fg:w="1"/><text x="22.7219%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="22.5522%" y="533" width="0.0803%" height="15" fill="rgb(249,174,0)" fg:x="281" fg:w="1"/><text x="22.8022%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.5522%" y="517" width="0.0803%" height="15" fill="rgb(246,67,27)" fg:x="281" fg:w="1"/><text x="22.8022%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (17 samples, 1.36%)</title><rect x="21.3483%" y="565" width="1.3644%" height="15" fill="rgb(250,195,30)" fg:x="266" fg:w="17"/><text x="21.5983%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (17 samples, 1.36%)</title><rect x="21.3483%" y="549" width="1.3644%" height="15" fill="rgb(251,171,50)" fg:x="266" fg:w="17"/><text x="21.5983%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.6324%" y="533" width="0.0803%" height="15" fill="rgb(236,196,10)" fg:x="282" fg:w="1"/><text x="22.8824%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.6324%" y="517" width="0.0803%" height="15" fill="rgb(249,228,52)" fg:x="282" fg:w="1"/><text x="22.8824%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="22.6324%" y="501" width="0.0803%" height="15" fill="rgb(219,60,51)" fg:x="282" fg:w="1"/><text x="22.8824%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="22.7127%" y="565" width="0.1605%" height="15" fill="rgb(240,198,24)" fg:x="283" fg:w="2"/><text x="22.9627%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="22.7127%" y="549" width="0.1605%" height="15" fill="rgb(240,192,40)" fg:x="283" fg:w="2"/><text x="22.9627%" y="559.50"></text></g><g><title>engine::session::Session::close (87 samples, 6.98%)</title><rect x="16.1316%" y="741" width="6.9823%" height="15" fill="rgb(219,118,5)" fg:x="201" fg:w="87"/><text x="16.3816%" y="751.50">engine::s..</text></g><g><title>engine::session::state::State::close (85 samples, 6.82%)</title><rect x="16.2921%" y="725" width="6.8218%" height="15" fill="rgb(205,202,34)" fg:x="203" fg:w="85"/><text x="16.5421%" y="735.50">engine::s..</text></g><g><title>engine::session::state::State::flush_entities (77 samples, 6.18%)</title><rect x="16.9342%" y="709" width="6.1798%" height="15" fill="rgb(234,153,26)" fg:x="211" fg:w="77"/><text x="17.1842%" y="719.50">engine::..</text></g><g><title>core::iter::adapters::try_process (76 samples, 6.10%)</title><rect x="17.0144%" y="693" width="6.0995%" height="15" fill="rgb(229,26,29)" fg:x="212" fg:w="76"/><text x="17.2644%" y="703.50">core::it..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (76 samples, 6.10%)</title><rect x="17.0144%" y="677" width="6.0995%" height="15" fill="rgb(237,115,21)" fg:x="212" fg:w="76"/><text x="17.2644%" y="687.50">&lt;alloc::..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (76 samples, 6.10%)</title><rect x="17.0144%" y="661" width="6.0995%" height="15" fill="rgb(252,144,15)" fg:x="212" fg:w="76"/><text x="17.2644%" y="671.50">engine::..</text></g><g><title>kernel::model::any_entity_changes (52 samples, 4.17%)</title><rect x="18.9406%" y="645" width="4.1734%" height="15" fill="rgb(232,26,13)" fg:x="236" fg:w="52"/><text x="19.1906%" y="655.50">kerne..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (22 samples, 1.77%)</title><rect x="21.3483%" y="629" width="1.7657%" height="15" fill="rgb(206,44,19)" fg:x="266" fg:w="22"/><text x="21.5983%" y="639.50"></text></g><g><title>serde_json::de::from_trait (22 samples, 1.77%)</title><rect x="21.3483%" y="613" width="1.7657%" height="15" fill="rgb(249,159,2)" fg:x="266" fg:w="22"/><text x="21.5983%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (22 samples, 1.77%)</title><rect x="21.3483%" y="597" width="1.7657%" height="15" fill="rgb(231,5,32)" fg:x="266" fg:w="22"/><text x="21.5983%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (22 samples, 1.77%)</title><rect x="21.3483%" y="581" width="1.7657%" height="15" fill="rgb(249,210,18)" fg:x="266" fg:w="22"/><text x="21.5983%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="22.8732%" y="565" width="0.2408%" height="15" fill="rgb(215,223,36)" fg:x="285" fg:w="3"/><text x="23.1232%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="23.1140%" y="677" width="0.1605%" height="15" fill="rgb(245,185,20)" fg:x="288" fg:w="2"/><text x="23.3640%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="23.1140%" y="661" width="0.1605%" height="15" fill="rgb(206,224,11)" fg:x="288" fg:w="2"/><text x="23.3640%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.1942%" y="645" width="0.0803%" height="15" fill="rgb(248,73,42)" fg:x="289" fg:w="1"/><text x="23.4442%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.1942%" y="629" width="0.0803%" height="15" fill="rgb(219,149,31)" fg:x="289" fg:w="1"/><text x="23.4442%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="23.1942%" y="613" width="0.0803%" height="15" fill="rgb(243,104,17)" fg:x="289" fg:w="1"/><text x="23.4442%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="23.1942%" y="597" width="0.0803%" height="15" fill="rgb(244,117,33)" fg:x="289" fg:w="1"/><text x="23.4442%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="23.1942%" y="581" width="0.0803%" height="15" fill="rgb(251,25,47)" fg:x="289" fg:w="1"/><text x="23.4442%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="23.1942%" y="565" width="0.0803%" height="15" fill="rgb(249,70,13)" fg:x="289" fg:w="1"/><text x="23.4442%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="23.1942%" y="549" width="0.0803%" height="15" fill="rgb(217,133,18)" fg:x="289" fg:w="1"/><text x="23.4442%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="23.1140%" y="693" width="0.2408%" height="15" fill="rgb(248,97,28)" fg:x="288" fg:w="3"/><text x="23.3640%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.2745%" y="677" width="0.0803%" height="15" fill="rgb(237,193,4)" fg:x="290" fg:w="1"/><text x="23.5245%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.2745%" y="661" width="0.0803%" height="15" fill="rgb(247,198,45)" fg:x="290" fg:w="1"/><text x="23.5245%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (4 samples, 0.32%)</title><rect x="23.1140%" y="709" width="0.3210%" height="15" fill="rgb(245,2,20)" fg:x="288" fg:w="4"/><text x="23.3640%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="23.3547%" y="693" width="0.0803%" height="15" fill="rgb(210,71,36)" fg:x="291" fg:w="1"/><text x="23.6047%" y="703.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="23.4350%" y="709" width="0.1605%" height="15" fill="rgb(238,114,30)" fg:x="292" fg:w="2"/><text x="23.6850%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="23.4350%" y="693" width="0.1605%" height="15" fill="rgb(241,200,2)" fg:x="292" fg:w="2"/><text x="23.6850%" y="703.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="23.5152%" y="677" width="0.0803%" height="15" fill="rgb(232,106,18)" fg:x="293" fg:w="1"/><text x="23.7652%" y="687.50"></text></g><g><title>core::fmt::Formatter::debug_tuple (1 samples, 0.08%)</title><rect x="23.7560%" y="373" width="0.0803%" height="15" fill="rgb(211,141,18)" fg:x="296" fg:w="1"/><text x="24.0060%" y="383.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (4 samples, 0.32%)</title><rect x="23.6758%" y="437" width="0.3210%" height="15" fill="rgb(224,9,9)" fg:x="295" fg:w="4"/><text x="23.9258%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (4 samples, 0.32%)</title><rect x="23.6758%" y="421" width="0.3210%" height="15" fill="rgb(249,137,46)" fg:x="295" fg:w="4"/><text x="23.9258%" y="431.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (4 samples, 0.32%)</title><rect x="23.6758%" y="405" width="0.3210%" height="15" fill="rgb(236,44,45)" fg:x="295" fg:w="4"/><text x="23.9258%" y="415.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="23.7560%" y="389" width="0.2408%" height="15" fill="rgb(205,68,40)" fg:x="296" fg:w="3"/><text x="24.0060%" y="399.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (2 samples, 0.16%)</title><rect x="23.8363%" y="373" width="0.1605%" height="15" fill="rgb(214,198,49)" fg:x="297" fg:w="2"/><text x="24.0863%" y="383.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (2 samples, 0.16%)</title><rect x="23.8363%" y="357" width="0.1605%" height="15" fill="rgb(226,140,45)" fg:x="297" fg:w="2"/><text x="24.0863%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="23.8363%" y="341" width="0.1605%" height="15" fill="rgb(209,109,20)" fg:x="297" fg:w="2"/><text x="24.0863%" y="351.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (2 samples, 0.16%)</title><rect x="23.8363%" y="325" width="0.1605%" height="15" fill="rgb(217,33,46)" fg:x="297" fg:w="2"/><text x="24.0863%" y="335.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="23.9165%" y="309" width="0.0803%" height="15" fill="rgb(232,150,33)" fg:x="298" fg:w="1"/><text x="24.1665%" y="319.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (1 samples, 0.08%)</title><rect x="23.9165%" y="293" width="0.0803%" height="15" fill="rgb(233,76,25)" fg:x="298" fg:w="1"/><text x="24.1665%" y="303.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (5 samples, 0.40%)</title><rect x="23.6758%" y="597" width="0.4013%" height="15" fill="rgb(254,219,23)" fg:x="295" fg:w="5"/><text x="23.9258%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (5 samples, 0.40%)</title><rect x="23.6758%" y="581" width="0.4013%" height="15" fill="rgb(233,108,4)" fg:x="295" fg:w="5"/><text x="23.9258%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (5 samples, 0.40%)</title><rect x="23.6758%" y="565" width="0.4013%" height="15" fill="rgb(229,98,6)" fg:x="295" fg:w="5"/><text x="23.9258%" y="575.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (5 samples, 0.40%)</title><rect x="23.6758%" y="549" width="0.4013%" height="15" fill="rgb(217,40,27)" fg:x="295" fg:w="5"/><text x="23.9258%" y="559.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (5 samples, 0.40%)</title><rect x="23.6758%" y="533" width="0.4013%" height="15" fill="rgb(221,35,43)" fg:x="295" fg:w="5"/><text x="23.9258%" y="543.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (5 samples, 0.40%)</title><rect x="23.6758%" y="517" width="0.4013%" height="15" fill="rgb(212,107,11)" fg:x="295" fg:w="5"/><text x="23.9258%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (5 samples, 0.40%)</title><rect x="23.6758%" y="501" width="0.4013%" height="15" fill="rgb(245,42,44)" fg:x="295" fg:w="5"/><text x="23.9258%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (5 samples, 0.40%)</title><rect x="23.6758%" y="485" width="0.4013%" height="15" fill="rgb(209,31,12)" fg:x="295" fg:w="5"/><text x="23.9258%" y="495.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as core::fmt::Debug&gt;::fmt (5 samples, 0.40%)</title><rect x="23.6758%" y="469" width="0.4013%" height="15" fill="rgb(210,228,54)" fg:x="295" fg:w="5"/><text x="23.9258%" y="479.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (5 samples, 0.40%)</title><rect x="23.6758%" y="453" width="0.4013%" height="15" fill="rgb(241,19,33)" fg:x="295" fg:w="5"/><text x="23.9258%" y="463.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="23.9968%" y="437" width="0.0803%" height="15" fill="rgb(229,51,27)" fg:x="299" fg:w="1"/><text x="24.2468%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="23.9968%" y="421" width="0.0803%" height="15" fill="rgb(214,167,49)" fg:x="299" fg:w="1"/><text x="24.2468%" y="431.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.9968%" y="405" width="0.0803%" height="15" fill="rgb(248,140,47)" fg:x="299" fg:w="1"/><text x="24.2468%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.9968%" y="389" width="0.0803%" height="15" fill="rgb(228,6,51)" fg:x="299" fg:w="1"/><text x="24.2468%" y="399.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="23.9968%" y="373" width="0.0803%" height="15" fill="rgb(242,44,53)" fg:x="299" fg:w="1"/><text x="24.2468%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="23.9968%" y="357" width="0.0803%" height="15" fill="rgb(249,90,50)" fg:x="299" fg:w="1"/><text x="24.2468%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="23.9968%" y="341" width="0.0803%" height="15" fill="rgb(222,84,19)" fg:x="299" fg:w="1"/><text x="24.2468%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="23.9968%" y="325" width="0.0803%" height="15" fill="rgb(214,140,12)" fg:x="299" fg:w="1"/><text x="24.2468%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="23.9968%" y="309" width="0.0803%" height="15" fill="rgb(210,20,43)" fg:x="299" fg:w="1"/><text x="24.2468%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="23.9968%" y="293" width="0.0803%" height="15" fill="rgb(243,1,40)" fg:x="299" fg:w="1"/><text x="24.2468%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="23.9968%" y="277" width="0.0803%" height="15" fill="rgb(224,102,26)" fg:x="299" fg:w="1"/><text x="24.2468%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="23.9968%" y="261" width="0.0803%" height="15" fill="rgb(221,179,1)" fg:x="299" fg:w="1"/><text x="24.2468%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.9968%" y="245" width="0.0803%" height="15" fill="rgb(216,209,47)" fg:x="299" fg:w="1"/><text x="24.2468%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="23.9968%" y="229" width="0.0803%" height="15" fill="rgb(251,135,9)" fg:x="299" fg:w="1"/><text x="24.2468%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="23.9968%" y="213" width="0.0803%" height="15" fill="rgb(242,9,36)" fg:x="299" fg:w="1"/><text x="24.2468%" y="223.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="23.9968%" y="197" width="0.0803%" height="15" fill="rgb(249,60,37)" fg:x="299" fg:w="1"/><text x="24.2468%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.9968%" y="181" width="0.0803%" height="15" fill="rgb(230,66,45)" fg:x="299" fg:w="1"/><text x="24.2468%" y="191.50"></text></g><g><title>alloc::fmt::format::format_inner (8 samples, 0.64%)</title><rect x="23.5955%" y="693" width="0.6421%" height="15" fill="rgb(216,1,47)" fg:x="294" fg:w="8"/><text x="23.8455%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (8 samples, 0.64%)</title><rect x="23.5955%" y="677" width="0.6421%" height="15" fill="rgb(235,8,23)" fg:x="294" fg:w="8"/><text x="23.8455%" y="687.50"></text></g><g><title>core::fmt::write (8 samples, 0.64%)</title><rect x="23.5955%" y="661" width="0.6421%" height="15" fill="rgb(225,136,11)" fg:x="294" fg:w="8"/><text x="23.8455%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (8 samples, 0.64%)</title><rect x="23.5955%" y="645" width="0.6421%" height="15" fill="rgb(228,63,44)" fg:x="294" fg:w="8"/><text x="23.8455%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (7 samples, 0.56%)</title><rect x="23.6758%" y="629" width="0.5618%" height="15" fill="rgb(240,43,52)" fg:x="295" fg:w="7"/><text x="23.9258%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (7 samples, 0.56%)</title><rect x="23.6758%" y="613" width="0.5618%" height="15" fill="rgb(217,167,36)" fg:x="295" fg:w="7"/><text x="23.9258%" y="623.50"></text></g><g><title>core::fmt::builders::debug_struct_new (2 samples, 0.16%)</title><rect x="24.0770%" y="597" width="0.1605%" height="15" fill="rgb(250,19,6)" fg:x="300" fg:w="2"/><text x="24.3270%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (2 samples, 0.16%)</title><rect x="24.0770%" y="581" width="0.1605%" height="15" fill="rgb(236,60,51)" fg:x="300" fg:w="2"/><text x="24.3270%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="24.0770%" y="565" width="0.1605%" height="15" fill="rgb(222,217,20)" fg:x="300" fg:w="2"/><text x="24.3270%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.1573%" y="549" width="0.0803%" height="15" fill="rgb(242,65,52)" fg:x="301" fg:w="1"/><text x="24.4073%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="24.1573%" y="533" width="0.0803%" height="15" fill="rgb(217,5,41)" fg:x="301" fg:w="1"/><text x="24.4073%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="24.1573%" y="517" width="0.0803%" height="15" fill="rgb(223,208,53)" fg:x="301" fg:w="1"/><text x="24.4073%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="24.1573%" y="501" width="0.0803%" height="15" fill="rgb(221,104,30)" fg:x="301" fg:w="1"/><text x="24.4073%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="24.1573%" y="485" width="0.0803%" height="15" fill="rgb(230,210,42)" fg:x="301" fg:w="1"/><text x="24.4073%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="24.1573%" y="469" width="0.0803%" height="15" fill="rgb(206,205,27)" fg:x="301" fg:w="1"/><text x="24.4073%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="24.1573%" y="453" width="0.0803%" height="15" fill="rgb(233,114,38)" fg:x="301" fg:w="1"/><text x="24.4073%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="24.1573%" y="437" width="0.0803%" height="15" fill="rgb(216,174,36)" fg:x="301" fg:w="1"/><text x="24.4073%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="24.1573%" y="421" width="0.0803%" height="15" fill="rgb(211,30,9)" fg:x="301" fg:w="1"/><text x="24.4073%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.1573%" y="405" width="0.0803%" height="15" fill="rgb(216,8,21)" fg:x="301" fg:w="1"/><text x="24.4073%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="24.3178%" y="677" width="0.0803%" height="15" fill="rgb(237,209,39)" fg:x="303" fg:w="1"/><text x="24.5678%" y="687.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="24.3981%" y="677" width="0.0803%" height="15" fill="rgb(235,111,47)" fg:x="304" fg:w="1"/><text x="24.6481%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="24.3981%" y="661" width="0.0803%" height="15" fill="rgb(216,139,9)" fg:x="304" fg:w="1"/><text x="24.6481%" y="671.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="24.3981%" y="645" width="0.0803%" height="15" fill="rgb(248,185,4)" fg:x="304" fg:w="1"/><text x="24.6481%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="24.3981%" y="629" width="0.0803%" height="15" fill="rgb(239,185,25)" fg:x="304" fg:w="1"/><text x="24.6481%" y="639.50"></text></g><g><title>tracing_core::subscriber::Subscriber::register_callsite (1 samples, 0.08%)</title><rect x="24.3981%" y="613" width="0.0803%" height="15" fill="rgb(233,207,8)" fg:x="304" fg:w="1"/><text x="24.6481%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="24.5586%" y="565" width="0.0803%" height="15" fill="rgb(249,220,24)" fg:x="306" fg:w="1"/><text x="24.8086%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.5586%" y="549" width="0.0803%" height="15" fill="rgb(221,50,14)" fg:x="306" fg:w="1"/><text x="24.8086%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.5586%" y="533" width="0.0803%" height="15" fill="rgb(227,79,42)" fg:x="306" fg:w="1"/><text x="24.8086%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.5586%" y="517" width="0.0803%" height="15" fill="rgb(228,218,49)" fg:x="306" fg:w="1"/><text x="24.8086%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.5586%" y="501" width="0.0803%" height="15" fill="rgb(249,18,15)" fg:x="306" fg:w="1"/><text x="24.8086%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.5586%" y="485" width="0.0803%" height="15" fill="rgb(212,84,27)" fg:x="306" fg:w="1"/><text x="24.8086%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="24.6388%" y="501" width="0.0803%" height="15" fill="rgb(207,83,24)" fg:x="307" fg:w="1"/><text x="24.8888%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.6388%" y="485" width="0.0803%" height="15" fill="rgb(219,61,7)" fg:x="307" fg:w="1"/><text x="24.8888%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="24.7191%" y="405" width="0.0803%" height="15" fill="rgb(211,43,29)" fg:x="308" fg:w="1"/><text x="24.9691%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="24.7191%" y="389" width="0.0803%" height="15" fill="rgb(243,15,23)" fg:x="308" fg:w="1"/><text x="24.9691%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="24.7191%" y="373" width="0.0803%" height="15" fill="rgb(217,52,28)" fg:x="308" fg:w="1"/><text x="24.9691%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="24.7191%" y="357" width="0.0803%" height="15" fill="rgb(210,35,6)" fg:x="308" fg:w="1"/><text x="24.9691%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="24.7191%" y="341" width="0.0803%" height="15" fill="rgb(237,187,28)" fg:x="308" fg:w="1"/><text x="24.9691%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="24.7191%" y="325" width="0.0803%" height="15" fill="rgb(231,136,24)" fg:x="308" fg:w="1"/><text x="24.9691%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.7191%" y="309" width="0.0803%" height="15" fill="rgb(205,176,52)" fg:x="308" fg:w="1"/><text x="24.9691%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="24.7994%" y="357" width="0.0803%" height="15" fill="rgb(218,65,12)" fg:x="309" fg:w="1"/><text x="25.0494%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="24.7994%" y="341" width="0.0803%" height="15" fill="rgb(234,101,21)" fg:x="309" fg:w="1"/><text x="25.0494%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="24.7191%" y="501" width="0.3210%" height="15" fill="rgb(206,13,20)" fg:x="308" fg:w="4"/><text x="24.9691%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="24.7191%" y="485" width="0.3210%" height="15" fill="rgb(236,89,44)" fg:x="308" fg:w="4"/><text x="24.9691%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="24.7191%" y="469" width="0.3210%" height="15" fill="rgb(225,52,17)" fg:x="308" fg:w="4"/><text x="24.9691%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="24.7191%" y="453" width="0.3210%" height="15" fill="rgb(214,27,25)" fg:x="308" fg:w="4"/><text x="24.9691%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="24.7191%" y="437" width="0.3210%" height="15" fill="rgb(240,141,35)" fg:x="308" fg:w="4"/><text x="24.9691%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="24.7191%" y="421" width="0.3210%" height="15" fill="rgb(216,126,3)" fg:x="308" fg:w="4"/><text x="24.9691%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="24.7994%" y="405" width="0.2408%" height="15" fill="rgb(249,196,23)" fg:x="309" fg:w="3"/><text x="25.0494%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="24.7994%" y="389" width="0.2408%" height="15" fill="rgb(215,185,43)" fg:x="309" fg:w="3"/><text x="25.0494%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.24%)</title><rect x="24.7994%" y="373" width="0.2408%" height="15" fill="rgb(208,194,36)" fg:x="309" fg:w="3"/><text x="25.0494%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="24.8796%" y="357" width="0.1605%" height="15" fill="rgb(245,182,12)" fg:x="310" fg:w="2"/><text x="25.1296%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="24.8796%" y="341" width="0.1605%" height="15" fill="rgb(244,222,52)" fg:x="310" fg:w="2"/><text x="25.1296%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="24.8796%" y="325" width="0.1605%" height="15" fill="rgb(236,222,51)" fg:x="310" fg:w="2"/><text x="25.1296%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="24.8796%" y="309" width="0.1605%" height="15" fill="rgb(254,71,22)" fg:x="310" fg:w="2"/><text x="25.1296%" y="319.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="24.9599%" y="293" width="0.0803%" height="15" fill="rgb(250,104,15)" fg:x="311" fg:w="1"/><text x="25.2099%" y="303.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="25.0401%" y="501" width="0.0803%" height="15" fill="rgb(229,223,46)" fg:x="312" fg:w="1"/><text x="25.2901%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="25.0401%" y="485" width="0.0803%" height="15" fill="rgb(209,129,18)" fg:x="312" fg:w="1"/><text x="25.2901%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="25.0401%" y="469" width="0.0803%" height="15" fill="rgb(224,160,1)" fg:x="312" fg:w="1"/><text x="25.2901%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.1204%" y="373" width="0.0803%" height="15" fill="rgb(237,112,21)" fg:x="313" fg:w="1"/><text x="25.3704%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.1204%" y="357" width="0.0803%" height="15" fill="rgb(215,198,53)" fg:x="313" fg:w="1"/><text x="25.3704%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.1204%" y="341" width="0.0803%" height="15" fill="rgb(218,227,35)" fg:x="313" fg:w="1"/><text x="25.3704%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.1204%" y="325" width="0.0803%" height="15" fill="rgb(232,121,22)" fg:x="313" fg:w="1"/><text x="25.3704%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.1204%" y="309" width="0.0803%" height="15" fill="rgb(235,52,54)" fg:x="313" fg:w="1"/><text x="25.3704%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.1204%" y="293" width="0.0803%" height="15" fill="rgb(219,21,44)" fg:x="313" fg:w="1"/><text x="25.3704%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.1204%" y="277" width="0.0803%" height="15" fill="rgb(221,51,43)" fg:x="313" fg:w="1"/><text x="25.3704%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.1204%" y="261" width="0.0803%" height="15" fill="rgb(225,77,42)" fg:x="313" fg:w="1"/><text x="25.3704%" y="271.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.64%)</title><rect x="24.6388%" y="549" width="0.6421%" height="15" fill="rgb(214,117,53)" fg:x="307" fg:w="8"/><text x="24.8888%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.64%)</title><rect x="24.6388%" y="533" width="0.6421%" height="15" fill="rgb(218,227,27)" fg:x="307" fg:w="8"/><text x="24.8888%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="24.6388%" y="517" width="0.6421%" height="15" fill="rgb(223,214,36)" fg:x="307" fg:w="8"/><text x="24.8888%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="25.1204%" y="501" width="0.1605%" height="15" fill="rgb(235,21,7)" fg:x="313" fg:w="2"/><text x="25.3704%" y="511.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="25.1204%" y="485" width="0.1605%" height="15" fill="rgb(244,216,4)" fg:x="313" fg:w="2"/><text x="25.3704%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="25.1204%" y="469" width="0.1605%" height="15" fill="rgb(249,197,24)" fg:x="313" fg:w="2"/><text x="25.3704%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="25.1204%" y="453" width="0.1605%" height="15" fill="rgb(222,169,49)" fg:x="313" fg:w="2"/><text x="25.3704%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="25.1204%" y="437" width="0.1605%" height="15" fill="rgb(207,137,33)" fg:x="313" fg:w="2"/><text x="25.3704%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="25.1204%" y="421" width="0.1605%" height="15" fill="rgb(219,180,40)" fg:x="313" fg:w="2"/><text x="25.3704%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="25.1204%" y="405" width="0.1605%" height="15" fill="rgb(250,163,42)" fg:x="313" fg:w="2"/><text x="25.3704%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="25.1204%" y="389" width="0.1605%" height="15" fill="rgb(239,163,0)" fg:x="313" fg:w="2"/><text x="25.3704%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.2006%" y="373" width="0.0803%" height="15" fill="rgb(252,38,28)" fg:x="314" fg:w="1"/><text x="25.4506%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="25.2006%" y="357" width="0.0803%" height="15" fill="rgb(254,203,26)" fg:x="314" fg:w="1"/><text x="25.4506%" y="367.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (11 samples, 0.88%)</title><rect x="24.4783%" y="597" width="0.8828%" height="15" fill="rgb(209,129,32)" fg:x="305" fg:w="11"/><text x="24.7283%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (11 samples, 0.88%)</title><rect x="24.4783%" y="581" width="0.8828%" height="15" fill="rgb(207,177,52)" fg:x="305" fg:w="11"/><text x="24.7283%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (9 samples, 0.72%)</title><rect x="24.6388%" y="565" width="0.7223%" height="15" fill="rgb(230,209,36)" fg:x="307" fg:w="9"/><text x="24.8888%" y="575.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="25.2809%" y="549" width="0.0803%" height="15" fill="rgb(238,131,0)" fg:x="315" fg:w="1"/><text x="25.5309%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="25.4414%" y="357" width="0.1605%" height="15" fill="rgb(218,61,31)" fg:x="317" fg:w="2"/><text x="25.6914%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="25.4414%" y="341" width="0.1605%" height="15" fill="rgb(232,6,53)" fg:x="317" fg:w="2"/><text x="25.6914%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="25.4414%" y="373" width="0.2408%" height="15" fill="rgb(254,100,32)" fg:x="317" fg:w="3"/><text x="25.6914%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.6019%" y="357" width="0.0803%" height="15" fill="rgb(229,194,49)" fg:x="319" fg:w="1"/><text x="25.8519%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (6 samples, 0.48%)</title><rect x="25.4414%" y="405" width="0.4815%" height="15" fill="rgb(206,208,39)" fg:x="317" fg:w="6"/><text x="25.6914%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="25.4414%" y="389" width="0.4815%" height="15" fill="rgb(246,226,14)" fg:x="317" fg:w="6"/><text x="25.6914%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="25.6822%" y="373" width="0.2408%" height="15" fill="rgb(226,48,32)" fg:x="320" fg:w="3"/><text x="25.9322%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="25.6822%" y="357" width="0.2408%" height="15" fill="rgb(252,43,54)" fg:x="320" fg:w="3"/><text x="25.9322%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="25.7624%" y="341" width="0.1605%" height="15" fill="rgb(207,124,0)" fg:x="321" fg:w="2"/><text x="26.0124%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="25.7624%" y="325" width="0.1605%" height="15" fill="rgb(248,188,30)" fg:x="321" fg:w="2"/><text x="26.0124%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="25.7624%" y="309" width="0.1605%" height="15" fill="rgb(232,14,43)" fg:x="321" fg:w="2"/><text x="26.0124%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.8427%" y="293" width="0.0803%" height="15" fill="rgb(218,52,29)" fg:x="322" fg:w="1"/><text x="26.0927%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.9230%" y="373" width="0.0803%" height="15" fill="rgb(218,176,50)" fg:x="323" fg:w="1"/><text x="26.1730%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.9230%" y="357" width="0.0803%" height="15" fill="rgb(213,112,0)" fg:x="323" fg:w="1"/><text x="26.1730%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.9230%" y="341" width="0.0803%" height="15" fill="rgb(244,216,8)" fg:x="323" fg:w="1"/><text x="26.1730%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.9230%" y="325" width="0.0803%" height="15" fill="rgb(224,148,53)" fg:x="323" fg:w="1"/><text x="26.1730%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.9230%" y="309" width="0.0803%" height="15" fill="rgb(241,133,40)" fg:x="323" fg:w="1"/><text x="26.1730%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.9230%" y="293" width="0.0803%" height="15" fill="rgb(232,17,44)" fg:x="323" fg:w="1"/><text x="26.1730%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.9230%" y="277" width="0.0803%" height="15" fill="rgb(213,32,25)" fg:x="323" fg:w="1"/><text x="26.1730%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.9230%" y="261" width="0.0803%" height="15" fill="rgb(249,115,27)" fg:x="323" fg:w="1"/><text x="26.1730%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.9230%" y="245" width="0.0803%" height="15" fill="rgb(241,50,1)" fg:x="323" fg:w="1"/><text x="26.1730%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.9230%" y="229" width="0.0803%" height="15" fill="rgb(244,175,40)" fg:x="323" fg:w="1"/><text x="26.1730%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.9230%" y="213" width="0.0803%" height="15" fill="rgb(230,94,34)" fg:x="323" fg:w="1"/><text x="26.1730%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.9230%" y="197" width="0.0803%" height="15" fill="rgb(223,185,29)" fg:x="323" fg:w="1"/><text x="26.1730%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.9230%" y="181" width="0.0803%" height="15" fill="rgb(225,193,15)" fg:x="323" fg:w="1"/><text x="26.1730%" y="191.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="25.9230%" y="405" width="0.1605%" height="15" fill="rgb(252,121,38)" fg:x="323" fg:w="2"/><text x="26.1730%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="25.9230%" y="389" width="0.1605%" height="15" fill="rgb(232,44,12)" fg:x="323" fg:w="2"/><text x="26.1730%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.0032%" y="373" width="0.0803%" height="15" fill="rgb(226,45,54)" fg:x="324" fg:w="1"/><text x="26.2532%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.0032%" y="357" width="0.0803%" height="15" fill="rgb(209,67,17)" fg:x="324" fg:w="1"/><text x="26.2532%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.0032%" y="341" width="0.0803%" height="15" fill="rgb(219,108,52)" fg:x="324" fg:w="1"/><text x="26.2532%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.0032%" y="325" width="0.0803%" height="15" fill="rgb(216,118,19)" fg:x="324" fg:w="1"/><text x="26.2532%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="26.0835%" y="405" width="0.2408%" height="15" fill="rgb(228,120,40)" fg:x="325" fg:w="3"/><text x="26.3335%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="26.0835%" y="389" width="0.2408%" height="15" fill="rgb(221,218,34)" fg:x="325" fg:w="3"/><text x="26.3335%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="26.0835%" y="373" width="0.2408%" height="15" fill="rgb(235,89,14)" fg:x="325" fg:w="3"/><text x="26.3335%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="26.0835%" y="357" width="0.2408%" height="15" fill="rgb(248,89,7)" fg:x="325" fg:w="3"/><text x="26.3335%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="26.0835%" y="341" width="0.2408%" height="15" fill="rgb(212,114,34)" fg:x="325" fg:w="3"/><text x="26.3335%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="26.0835%" y="325" width="0.2408%" height="15" fill="rgb(246,88,32)" fg:x="325" fg:w="3"/><text x="26.3335%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="26.0835%" y="309" width="0.2408%" height="15" fill="rgb(237,135,0)" fg:x="325" fg:w="3"/><text x="26.3335%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="26.0835%" y="293" width="0.2408%" height="15" fill="rgb(220,201,54)" fg:x="325" fg:w="3"/><text x="26.3335%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.2440%" y="277" width="0.0803%" height="15" fill="rgb(210,142,36)" fg:x="327" fg:w="1"/><text x="26.4940%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="26.3242%" y="261" width="0.0803%" height="15" fill="rgb(247,189,26)" fg:x="328" fg:w="1"/><text x="26.5742%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="26.3242%" y="325" width="0.1605%" height="15" fill="rgb(223,89,24)" fg:x="328" fg:w="2"/><text x="26.5742%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="26.3242%" y="309" width="0.1605%" height="15" fill="rgb(205,90,19)" fg:x="328" fg:w="2"/><text x="26.5742%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="26.3242%" y="293" width="0.1605%" height="15" fill="rgb(234,57,40)" fg:x="328" fg:w="2"/><text x="26.5742%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="26.3242%" y="277" width="0.1605%" height="15" fill="rgb(213,109,10)" fg:x="328" fg:w="2"/><text x="26.5742%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="26.4045%" y="261" width="0.0803%" height="15" fill="rgb(214,189,23)" fg:x="329" fg:w="1"/><text x="26.6545%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="26.4045%" y="245" width="0.0803%" height="15" fill="rgb(234,200,10)" fg:x="329" fg:w="1"/><text x="26.6545%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="26.4848%" y="293" width="0.1605%" height="15" fill="rgb(221,148,16)" fg:x="330" fg:w="2"/><text x="26.7348%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="26.4848%" y="277" width="0.1605%" height="15" fill="rgb(230,115,10)" fg:x="330" fg:w="2"/><text x="26.7348%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.5650%" y="261" width="0.0803%" height="15" fill="rgb(220,106,42)" fg:x="331" fg:w="1"/><text x="26.8150%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="26.4848%" y="325" width="0.2408%" height="15" fill="rgb(225,105,39)" fg:x="330" fg:w="3"/><text x="26.7348%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="26.4848%" y="309" width="0.2408%" height="15" fill="rgb(211,161,38)" fg:x="330" fg:w="3"/><text x="26.7348%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="26.6453%" y="293" width="0.0803%" height="15" fill="rgb(213,23,19)" fg:x="332" fg:w="1"/><text x="26.8953%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="26.6453%" y="277" width="0.0803%" height="15" fill="rgb(240,2,33)" fg:x="332" fg:w="1"/><text x="26.8953%" y="287.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::new (1 samples, 0.08%)</title><rect x="26.7255%" y="309" width="0.0803%" height="15" fill="rgb(221,29,45)" fg:x="333" fg:w="1"/><text x="26.9755%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.7255%" y="293" width="0.0803%" height="15" fill="rgb(242,10,19)" fg:x="333" fg:w="1"/><text x="26.9755%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.7255%" y="277" width="0.0803%" height="15" fill="rgb(250,84,37)" fg:x="333" fg:w="1"/><text x="26.9755%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.7255%" y="261" width="0.0803%" height="15" fill="rgb(214,136,7)" fg:x="333" fg:w="1"/><text x="26.9755%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="26.8058%" y="277" width="0.0803%" height="15" fill="rgb(231,189,12)" fg:x="334" fg:w="1"/><text x="27.0558%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::Properties&gt; (1 samples, 0.08%)</title><rect x="26.8860%" y="277" width="0.0803%" height="15" fill="rgb(244,40,16)" fg:x="335" fg:w="1"/><text x="27.1360%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.96%)</title><rect x="27.2071%" y="261" width="0.9631%" height="15" fill="rgb(217,29,15)" fg:x="339" fg:w="12"/><text x="27.4571%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.80%)</title><rect x="27.3676%" y="245" width="0.8026%" height="15" fill="rgb(235,172,33)" fg:x="341" fg:w="10"/><text x="27.6176%" y="255.50"></text></g><g><title>regex_automata::meta::reverse_inner::extract (1 samples, 0.08%)</title><rect x="28.1701%" y="261" width="0.0803%" height="15" fill="rgb(206,148,28)" fg:x="351" fg:w="1"/><text x="28.4201%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="28.2504%" y="261" width="0.0803%" height="15" fill="rgb(251,167,37)" fg:x="352" fg:w="1"/><text x="28.5004%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="28.3307%" y="261" width="0.0803%" height="15" fill="rgb(229,94,52)" fg:x="353" fg:w="1"/><text x="28.5807%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="28.3307%" y="245" width="0.0803%" height="15" fill="rgb(216,132,9)" fg:x="353" fg:w="1"/><text x="28.5807%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="28.6517%" y="197" width="0.1605%" height="15" fill="rgb(208,110,29)" fg:x="357" fg:w="2"/><text x="28.9017%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="28.8122%" y="197" width="0.0803%" height="15" fill="rgb(241,23,8)" fg:x="359" fg:w="1"/><text x="29.0622%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.8122%" y="181" width="0.0803%" height="15" fill="rgb(208,26,35)" fg:x="359" fg:w="1"/><text x="29.0622%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.8122%" y="165" width="0.0803%" height="15" fill="rgb(242,165,34)" fg:x="359" fg:w="1"/><text x="29.0622%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="28.8122%" y="149" width="0.0803%" height="15" fill="rgb(222,222,33)" fg:x="359" fg:w="1"/><text x="29.0622%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="28.8925%" y="165" width="0.1605%" height="15" fill="rgb(227,16,52)" fg:x="360" fg:w="2"/><text x="29.1425%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (46 samples, 3.69%)</title><rect x="28.8925%" y="197" width="3.6918%" height="15" fill="rgb(213,93,12)" fg:x="360" fg:w="46"/><text x="29.1425%" y="207.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (46 samples, 3.69%)</title><rect x="28.8925%" y="181" width="3.6918%" height="15" fill="rgb(238,41,5)" fg:x="360" fg:w="46"/><text x="29.1425%" y="191.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (44 samples, 3.53%)</title><rect x="29.0530%" y="165" width="3.5313%" height="15" fill="rgb(211,60,15)" fg:x="362" fg:w="44"/><text x="29.3030%" y="175.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 4.25%)</title><rect x="28.4109%" y="245" width="4.2536%" height="15" fill="rgb(209,11,34)" fg:x="354" fg:w="53"/><text x="28.6609%" y="255.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.25%)</title><rect x="28.4109%" y="229" width="4.2536%" height="15" fill="rgb(254,155,53)" fg:x="354" fg:w="53"/><text x="28.6609%" y="239.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (53 samples, 4.25%)</title><rect x="28.4109%" y="213" width="4.2536%" height="15" fill="rgb(236,174,8)" fg:x="354" fg:w="53"/><text x="28.6609%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="32.5843%" y="197" width="0.0803%" height="15" fill="rgb(229,31,27)" fg:x="406" fg:w="1"/><text x="32.8343%" y="207.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="32.6645%" y="229" width="0.0803%" height="15" fill="rgb(242,226,26)" fg:x="407" fg:w="1"/><text x="32.9145%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.7448%" y="229" width="0.0803%" height="15" fill="rgb(234,32,40)" fg:x="408" fg:w="1"/><text x="32.9948%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="32.8250%" y="229" width="0.0803%" height="15" fill="rgb(249,226,47)" fg:x="409" fg:w="1"/><text x="33.0750%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="32.9053%" y="229" width="0.3210%" height="15" fill="rgb(212,6,26)" fg:x="410" fg:w="4"/><text x="33.1553%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="33.0658%" y="213" width="0.1605%" height="15" fill="rgb(249,202,29)" fg:x="412" fg:w="2"/><text x="33.3158%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="33.0658%" y="197" width="0.1605%" height="15" fill="rgb(226,106,4)" fg:x="412" fg:w="2"/><text x="33.3158%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="33.0658%" y="181" width="0.1605%" height="15" fill="rgb(251,2,27)" fg:x="412" fg:w="2"/><text x="33.3158%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="32.6645%" y="245" width="0.6421%" height="15" fill="rgb(236,208,0)" fg:x="407" fg:w="8"/><text x="32.9145%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="33.2263%" y="229" width="0.0803%" height="15" fill="rgb(211,66,17)" fg:x="414" fg:w="1"/><text x="33.4763%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (80 samples, 6.42%)</title><rect x="26.9663%" y="277" width="6.4205%" height="15" fill="rgb(216,129,9)" fg:x="336" fg:w="80"/><text x="27.2163%" y="287.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (62 samples, 4.98%)</title><rect x="28.4109%" y="261" width="4.9759%" height="15" fill="rgb(215,130,23)" fg:x="354" fg:w="62"/><text x="28.6609%" y="271.50">regex_..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="33.3066%" y="245" width="0.0803%" height="15" fill="rgb(253,157,11)" fg:x="415" fg:w="1"/><text x="33.5566%" y="255.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="33.3066%" y="229" width="0.0803%" height="15" fill="rgb(224,25,14)" fg:x="415" fg:w="1"/><text x="33.5566%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="33.3868%" y="277" width="0.0803%" height="15" fill="rgb(238,16,7)" fg:x="416" fg:w="1"/><text x="33.6368%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="33.3868%" y="261" width="0.0803%" height="15" fill="rgb(228,74,11)" fg:x="416" fg:w="1"/><text x="33.6368%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="33.3868%" y="245" width="0.0803%" height="15" fill="rgb(239,221,27)" fg:x="416" fg:w="1"/><text x="33.6368%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="33.3868%" y="229" width="0.0803%" height="15" fill="rgb(229,166,18)" fg:x="416" fg:w="1"/><text x="33.6368%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek_space (1 samples, 0.08%)</title><rect x="33.3868%" y="213" width="0.0803%" height="15" fill="rgb(254,94,46)" fg:x="416" fg:w="1"/><text x="33.6368%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="33.5474%" y="245" width="0.1605%" height="15" fill="rgb(241,79,19)" fg:x="418" fg:w="2"/><text x="33.7974%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="33.6276%" y="229" width="0.0803%" height="15" fill="rgb(228,99,51)" fg:x="419" fg:w="1"/><text x="33.8776%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.6276%" y="213" width="0.0803%" height="15" fill="rgb(211,15,6)" fg:x="419" fg:w="1"/><text x="33.8776%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.6276%" y="197" width="0.0803%" height="15" fill="rgb(245,107,54)" fg:x="419" fg:w="1"/><text x="33.8776%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (88 samples, 7.06%)</title><rect x="26.7255%" y="325" width="7.0626%" height="15" fill="rgb(243,3,2)" fg:x="333" fg:w="88"/><text x="26.9755%" y="335.50">regex::re..</text></g><g><title>regex::builders::string::RegexBuilder::build (87 samples, 6.98%)</title><rect x="26.8058%" y="309" width="6.9823%" height="15" fill="rgb(206,122,10)" fg:x="334" fg:w="87"/><text x="27.0558%" y="319.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (87 samples, 6.98%)</title><rect x="26.8058%" y="293" width="6.9823%" height="15" fill="rgb(224,88,4)" fg:x="334" fg:w="87"/><text x="27.0558%" y="303.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="33.4671%" y="277" width="0.3210%" height="15" fill="rgb(230,1,41)" fg:x="417" fg:w="4"/><text x="33.7171%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="33.4671%" y="261" width="0.3210%" height="15" fill="rgb(230,1,31)" fg:x="417" fg:w="4"/><text x="33.7171%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.7079%" y="245" width="0.0803%" height="15" fill="rgb(232,67,19)" fg:x="420" fg:w="1"/><text x="33.9579%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.7079%" y="229" width="0.0803%" height="15" fill="rgb(222,206,20)" fg:x="420" fg:w="1"/><text x="33.9579%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.7079%" y="213" width="0.0803%" height="15" fill="rgb(217,225,19)" fg:x="420" fg:w="1"/><text x="33.9579%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="33.9486%" y="245" width="0.1605%" height="15" fill="rgb(234,13,33)" fg:x="423" fg:w="2"/><text x="34.1986%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="33.9486%" y="229" width="0.1605%" height="15" fill="rgb(254,5,1)" fg:x="423" fg:w="2"/><text x="34.1986%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="33.9486%" y="213" width="0.1605%" height="15" fill="rgb(211,121,41)" fg:x="423" fg:w="2"/><text x="34.1986%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="33.7881%" y="277" width="0.4815%" height="15" fill="rgb(213,199,35)" fg:x="421" fg:w="6"/><text x="34.0381%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="33.7881%" y="261" width="0.4815%" height="15" fill="rgb(240,118,22)" fg:x="421" fg:w="6"/><text x="34.0381%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="34.1091%" y="245" width="0.1605%" height="15" fill="rgb(238,184,25)" fg:x="425" fg:w="2"/><text x="34.3591%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (100 samples, 8.03%)</title><rect x="26.3242%" y="341" width="8.0257%" height="15" fill="rgb(210,165,6)" fg:x="328" fg:w="100"/><text x="26.5742%" y="351.50">indefinite:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="33.7881%" y="325" width="0.5618%" height="15" fill="rgb(235,149,5)" fg:x="421" fg:w="7"/><text x="34.0381%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="33.7881%" y="309" width="0.5618%" height="15" fill="rgb(221,63,5)" fg:x="421" fg:w="7"/><text x="34.0381%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="33.7881%" y="293" width="0.5618%" height="15" fill="rgb(250,44,41)" fg:x="421" fg:w="7"/><text x="34.0381%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="34.2697%" y="277" width="0.0803%" height="15" fill="rgb(235,112,47)" fg:x="427" fg:w="1"/><text x="34.5197%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.3499%" y="309" width="0.0803%" height="15" fill="rgb(252,176,34)" fg:x="428" fg:w="1"/><text x="34.5999%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="34.5104%" y="277" width="0.0803%" height="15" fill="rgb(234,50,19)" fg:x="430" fg:w="1"/><text x="34.7604%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.5104%" y="261" width="0.0803%" height="15" fill="rgb(241,195,31)" fg:x="430" fg:w="1"/><text x="34.7604%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.5104%" y="245" width="0.0803%" height="15" fill="rgb(212,93,11)" fg:x="430" fg:w="1"/><text x="34.7604%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="34.5907%" y="261" width="0.0803%" height="15" fill="rgb(254,98,51)" fg:x="431" fg:w="1"/><text x="34.8407%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="34.6709%" y="245" width="0.1605%" height="15" fill="rgb(246,18,45)" fg:x="432" fg:w="2"/><text x="34.9209%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="34.6709%" y="229" width="0.1605%" height="15" fill="rgb(215,148,23)" fg:x="432" fg:w="2"/><text x="34.9209%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="34.6709%" y="213" width="0.1605%" height="15" fill="rgb(227,22,7)" fg:x="432" fg:w="2"/><text x="34.9209%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="34.6709%" y="197" width="0.1605%" height="15" fill="rgb(207,210,37)" fg:x="432" fg:w="2"/><text x="34.9209%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="34.7512%" y="181" width="0.0803%" height="15" fill="rgb(247,147,42)" fg:x="433" fg:w="1"/><text x="35.0012%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="34.8315%" y="229" width="0.0803%" height="15" fill="rgb(226,213,14)" fg:x="434" fg:w="1"/><text x="35.0815%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="34.9117%" y="229" width="0.3210%" height="15" fill="rgb(223,18,10)" fg:x="435" fg:w="4"/><text x="35.1617%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.1525%" y="213" width="0.0803%" height="15" fill="rgb(253,34,22)" fg:x="438" fg:w="1"/><text x="35.4025%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.72%)</title><rect x="34.5907%" y="277" width="0.7223%" height="15" fill="rgb(222,90,31)" fg:x="431" fg:w="9"/><text x="34.8407%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (8 samples, 0.64%)</title><rect x="34.6709%" y="261" width="0.6421%" height="15" fill="rgb(220,182,30)" fg:x="432" fg:w="8"/><text x="34.9209%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="34.8315%" y="245" width="0.4815%" height="15" fill="rgb(229,170,12)" fg:x="434" fg:w="6"/><text x="35.0815%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="35.2327%" y="229" width="0.0803%" height="15" fill="rgb(210,101,21)" fg:x="439" fg:w="1"/><text x="35.4827%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="35.3130%" y="229" width="0.0803%" height="15" fill="rgb(237,177,31)" fg:x="440" fg:w="1"/><text x="35.5630%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.3130%" y="213" width="0.0803%" height="15" fill="rgb(215,91,34)" fg:x="440" fg:w="1"/><text x="35.5630%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.3130%" y="197" width="0.0803%" height="15" fill="rgb(229,206,16)" fg:x="440" fg:w="1"/><text x="35.5630%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.3130%" y="181" width="0.0803%" height="15" fill="rgb(235,207,10)" fg:x="440" fg:w="1"/><text x="35.5630%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="35.3130%" y="245" width="0.2408%" height="15" fill="rgb(247,18,10)" fg:x="440" fg:w="3"/><text x="35.5630%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="35.3933%" y="229" width="0.1605%" height="15" fill="rgb(232,4,6)" fg:x="441" fg:w="2"/><text x="35.6433%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="35.3933%" y="213" width="0.1605%" height="15" fill="rgb(247,93,45)" fg:x="441" fg:w="2"/><text x="35.6433%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="35.3933%" y="197" width="0.1605%" height="15" fill="rgb(240,181,18)" fg:x="441" fg:w="2"/><text x="35.6433%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="35.3933%" y="181" width="0.1605%" height="15" fill="rgb(208,224,0)" fg:x="441" fg:w="2"/><text x="35.6433%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (16 samples, 1.28%)</title><rect x="34.3499%" y="325" width="1.2841%" height="15" fill="rgb(224,207,54)" fg:x="428" fg:w="16"/><text x="34.5999%" y="335.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (15 samples, 1.20%)</title><rect x="34.4302%" y="309" width="1.2039%" height="15" fill="rgb(217,152,29)" fg:x="429" fg:w="15"/><text x="34.6802%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (15 samples, 1.20%)</title><rect x="34.4302%" y="293" width="1.2039%" height="15" fill="rgb(243,78,27)" fg:x="429" fg:w="15"/><text x="34.6802%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="35.3130%" y="277" width="0.3210%" height="15" fill="rgb(228,111,9)" fg:x="440" fg:w="4"/><text x="35.5630%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="35.3130%" y="261" width="0.3210%" height="15" fill="rgb(230,213,21)" fg:x="440" fg:w="4"/><text x="35.5630%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="35.5538%" y="245" width="0.0803%" height="15" fill="rgb(248,50,36)" fg:x="443" fg:w="1"/><text x="35.8038%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.5538%" y="229" width="0.0803%" height="15" fill="rgb(226,19,31)" fg:x="443" fg:w="1"/><text x="35.8038%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="35.6340%" y="277" width="0.1605%" height="15" fill="rgb(205,132,21)" fg:x="444" fg:w="2"/><text x="35.8840%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="35.6340%" y="261" width="0.1605%" height="15" fill="rgb(207,42,19)" fg:x="444" fg:w="2"/><text x="35.8840%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.7143%" y="245" width="0.0803%" height="15" fill="rgb(229,69,35)" fg:x="445" fg:w="1"/><text x="35.9643%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.7143%" y="229" width="0.0803%" height="15" fill="rgb(226,96,11)" fg:x="445" fg:w="1"/><text x="35.9643%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (19 samples, 1.52%)</title><rect x="34.3499%" y="341" width="1.5249%" height="15" fill="rgb(236,133,54)" fg:x="428" fg:w="19"/><text x="34.5999%" y="351.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="35.6340%" y="325" width="0.2408%" height="15" fill="rgb(247,166,21)" fg:x="444" fg:w="3"/><text x="35.8840%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="35.6340%" y="309" width="0.2408%" height="15" fill="rgb(220,132,12)" fg:x="444" fg:w="3"/><text x="35.8840%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="35.6340%" y="293" width="0.2408%" height="15" fill="rgb(233,27,30)" fg:x="444" fg:w="3"/><text x="35.8840%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="35.7945%" y="277" width="0.0803%" height="15" fill="rgb(246,161,27)" fg:x="446" fg:w="1"/><text x="36.0445%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="35.7945%" y="261" width="0.0803%" height="15" fill="rgb(240,56,3)" fg:x="446" fg:w="1"/><text x="36.0445%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.1958%" y="197" width="0.0803%" height="15" fill="rgb(242,190,9)" fg:x="451" fg:w="1"/><text x="36.4458%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="36.1958%" y="229" width="0.1605%" height="15" fill="rgb(234,3,52)" fg:x="451" fg:w="2"/><text x="36.4458%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="36.1958%" y="213" width="0.1605%" height="15" fill="rgb(220,221,19)" fg:x="451" fg:w="2"/><text x="36.4458%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="36.2761%" y="197" width="0.0803%" height="15" fill="rgb(247,178,30)" fg:x="452" fg:w="1"/><text x="36.5261%" y="207.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (8 samples, 0.64%)</title><rect x="35.8748%" y="325" width="0.6421%" height="15" fill="rgb(234,212,27)" fg:x="447" fg:w="8"/><text x="36.1248%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="35.8748%" y="309" width="0.6421%" height="15" fill="rgb(226,199,38)" fg:x="447" fg:w="8"/><text x="36.1248%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="35.8748%" y="293" width="0.6421%" height="15" fill="rgb(248,114,22)" fg:x="447" fg:w="8"/><text x="36.1248%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="35.8748%" y="277" width="0.6421%" height="15" fill="rgb(221,180,4)" fg:x="447" fg:w="8"/><text x="36.1248%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.64%)</title><rect x="35.8748%" y="261" width="0.6421%" height="15" fill="rgb(220,229,24)" fg:x="447" fg:w="8"/><text x="36.1248%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="35.8748%" y="245" width="0.6421%" height="15" fill="rgb(226,184,27)" fg:x="447" fg:w="8"/><text x="36.1248%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="36.3563%" y="229" width="0.1605%" height="15" fill="rgb(232,99,15)" fg:x="453" fg:w="2"/><text x="36.6063%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.5169%" y="245" width="0.0803%" height="15" fill="rgb(250,167,16)" fg:x="455" fg:w="1"/><text x="36.7669%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.5971%" y="245" width="0.0803%" height="15" fill="rgb(243,113,6)" fg:x="456" fg:w="1"/><text x="36.8471%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="36.5169%" y="277" width="0.2408%" height="15" fill="rgb(244,147,52)" fg:x="455" fg:w="3"/><text x="36.7669%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="36.5169%" y="261" width="0.2408%" height="15" fill="rgb(235,59,50)" fg:x="455" fg:w="3"/><text x="36.7669%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="36.6774%" y="245" width="0.0803%" height="15" fill="rgb(250,188,6)" fg:x="457" fg:w="1"/><text x="36.9274%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.7576%" y="277" width="0.0803%" height="15" fill="rgb(236,173,11)" fg:x="458" fg:w="1"/><text x="37.0076%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="36.8379%" y="277" width="0.1605%" height="15" fill="rgb(233,64,3)" fg:x="459" fg:w="2"/><text x="37.0879%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="36.8379%" y="261" width="0.1605%" height="15" fill="rgb(207,92,7)" fg:x="459" fg:w="2"/><text x="37.0879%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="36.8379%" y="245" width="0.1605%" height="15" fill="rgb(221,30,19)" fg:x="459" fg:w="2"/><text x="37.0879%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (2 samples, 0.16%)</title><rect x="36.9984%" y="277" width="0.1605%" height="15" fill="rgb(245,22,49)" fg:x="461" fg:w="2"/><text x="37.2484%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.1589%" y="261" width="0.0803%" height="15" fill="rgb(218,39,20)" fg:x="463" fg:w="1"/><text x="37.4089%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.88%)</title><rect x="37.2392%" y="261" width="0.8828%" height="15" fill="rgb(222,144,21)" fg:x="464" fg:w="11"/><text x="37.4892%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.88%)</title><rect x="37.2392%" y="245" width="0.8828%" height="15" fill="rgb(222,78,51)" fg:x="464" fg:w="11"/><text x="37.4892%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.0417%" y="229" width="0.0803%" height="15" fill="rgb(248,213,53)" fg:x="474" fg:w="1"/><text x="38.2917%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="38.1220%" y="261" width="0.4013%" height="15" fill="rgb(245,28,34)" fg:x="475" fg:w="5"/><text x="38.3720%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="38.1220%" y="245" width="0.4013%" height="15" fill="rgb(229,186,26)" fg:x="475" fg:w="5"/><text x="38.3720%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::sparse_set::SparseSet&gt; (1 samples, 0.08%)</title><rect x="38.6035%" y="229" width="0.0803%" height="15" fill="rgb(224,0,41)" fg:x="481" fg:w="1"/><text x="38.8535%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.6035%" y="213" width="0.0803%" height="15" fill="rgb(223,136,51)" fg:x="481" fg:w="1"/><text x="38.8535%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (9 samples, 0.72%)</title><rect x="38.6838%" y="229" width="0.7223%" height="15" fill="rgb(234,50,9)" fg:x="482" fg:w="9"/><text x="38.9338%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="39.1653%" y="213" width="0.2408%" height="15" fill="rgb(242,164,20)" fg:x="488" fg:w="3"/><text x="39.4153%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.3258%" y="197" width="0.0803%" height="15" fill="rgb(230,169,22)" fg:x="490" fg:w="1"/><text x="39.5758%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.3258%" y="181" width="0.0803%" height="15" fill="rgb(228,82,26)" fg:x="490" fg:w="1"/><text x="39.5758%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.3258%" y="165" width="0.0803%" height="15" fill="rgb(244,220,31)" fg:x="490" fg:w="1"/><text x="39.5758%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="39.4061%" y="229" width="0.2408%" height="15" fill="rgb(214,35,25)" fg:x="491" fg:w="3"/><text x="39.6561%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="39.4061%" y="213" width="0.2408%" height="15" fill="rgb(245,162,54)" fg:x="491" fg:w="3"/><text x="39.6561%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="39.4061%" y="197" width="0.2408%" height="15" fill="rgb(210,43,24)" fg:x="491" fg:w="3"/><text x="39.6561%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (15 samples, 1.20%)</title><rect x="38.5233%" y="261" width="1.2039%" height="15" fill="rgb(226,145,51)" fg:x="480" fg:w="15"/><text x="38.7733%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (15 samples, 1.20%)</title><rect x="38.5233%" y="245" width="1.2039%" height="15" fill="rgb(237,52,53)" fg:x="480" fg:w="15"/><text x="38.7733%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="39.6469%" y="229" width="0.0803%" height="15" fill="rgb(216,226,7)" fg:x="494" fg:w="1"/><text x="39.8969%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="39.7271%" y="213" width="0.0803%" height="15" fill="rgb(206,223,18)" fg:x="495" fg:w="1"/><text x="39.9771%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="39.8074%" y="197" width="0.0803%" height="15" fill="rgb(221,1,10)" fg:x="496" fg:w="1"/><text x="40.0574%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.3692%" y="149" width="0.0803%" height="15" fill="rgb(221,151,42)" fg:x="503" fg:w="1"/><text x="40.6192%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.4494%" y="149" width="0.0803%" height="15" fill="rgb(205,183,46)" fg:x="504" fg:w="1"/><text x="40.6994%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.4494%" y="133" width="0.0803%" height="15" fill="rgb(239,229,1)" fg:x="504" fg:w="1"/><text x="40.6994%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.4494%" y="117" width="0.0803%" height="15" fill="rgb(236,192,23)" fg:x="504" fg:w="1"/><text x="40.6994%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.4494%" y="101" width="0.0803%" height="15" fill="rgb(215,146,3)" fg:x="504" fg:w="1"/><text x="40.6994%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="40.5297%" y="149" width="0.0803%" height="15" fill="rgb(235,52,27)" fg:x="505" fg:w="1"/><text x="40.7797%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.1717%" y="101" width="0.0803%" height="15" fill="rgb(236,45,20)" fg:x="513" fg:w="1"/><text x="41.4217%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9 samples, 0.72%)</title><rect x="40.6100%" y="149" width="0.7223%" height="15" fill="rgb(235,86,41)" fg:x="506" fg:w="9"/><text x="40.8600%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.64%)</title><rect x="40.6902%" y="133" width="0.6421%" height="15" fill="rgb(235,27,27)" fg:x="507" fg:w="8"/><text x="40.9402%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (8 samples, 0.64%)</title><rect x="40.6902%" y="117" width="0.6421%" height="15" fill="rgb(232,4,34)" fg:x="507" fg:w="8"/><text x="40.9402%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="41.2520%" y="101" width="0.0803%" height="15" fill="rgb(215,22,10)" fg:x="514" fg:w="1"/><text x="41.5020%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.2520%" y="85" width="0.0803%" height="15" fill="rgb(230,228,27)" fg:x="514" fg:w="1"/><text x="41.5020%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.2520%" y="69" width="0.0803%" height="15" fill="rgb(216,26,51)" fg:x="514" fg:w="1"/><text x="41.5020%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.2520%" y="53" width="0.0803%" height="15" fill="rgb(225,180,50)" fg:x="514" fg:w="1"/><text x="41.5020%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (25 samples, 2.01%)</title><rect x="41.3323%" y="149" width="2.0064%" height="15" fill="rgb(236,211,2)" fg:x="515" fg:w="25"/><text x="41.5823%" y="159.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (25 samples, 2.01%)</title><rect x="41.3323%" y="133" width="2.0064%" height="15" fill="rgb(250,51,20)" fg:x="515" fg:w="25"/><text x="41.5823%" y="143.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (25 samples, 2.01%)</title><rect x="41.3323%" y="117" width="2.0064%" height="15" fill="rgb(232,70,37)" fg:x="515" fg:w="25"/><text x="41.5823%" y="127.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 3.85%)</title><rect x="39.7271%" y="245" width="3.8523%" height="15" fill="rgb(226,183,39)" fg:x="495" fg:w="48"/><text x="39.9771%" y="255.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (48 samples, 3.85%)</title><rect x="39.7271%" y="229" width="3.8523%" height="15" fill="rgb(232,228,21)" fg:x="495" fg:w="48"/><text x="39.9771%" y="239.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (47 samples, 3.77%)</title><rect x="39.8074%" y="213" width="3.7721%" height="15" fill="rgb(251,118,32)" fg:x="496" fg:w="47"/><text x="40.0574%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (46 samples, 3.69%)</title><rect x="39.8876%" y="197" width="3.6918%" height="15" fill="rgb(235,172,38)" fg:x="497" fg:w="46"/><text x="40.1376%" y="207.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (45 samples, 3.61%)</title><rect x="39.9679%" y="181" width="3.6116%" height="15" fill="rgb(235,63,18)" fg:x="498" fg:w="45"/><text x="40.2179%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (45 samples, 3.61%)</title><rect x="39.9679%" y="165" width="3.6116%" height="15" fill="rgb(225,4,7)" fg:x="498" fg:w="45"/><text x="40.2179%" y="175.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="43.3387%" y="149" width="0.2408%" height="15" fill="rgb(231,61,1)" fg:x="540" fg:w="3"/><text x="43.5887%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.4992%" y="133" width="0.0803%" height="15" fill="rgb(241,155,22)" fg:x="542" fg:w="1"/><text x="43.7492%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.4992%" y="117" width="0.0803%" height="15" fill="rgb(209,100,26)" fg:x="542" fg:w="1"/><text x="43.7492%" y="127.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.5795%" y="229" width="0.0803%" height="15" fill="rgb(248,181,15)" fg:x="543" fg:w="1"/><text x="43.8295%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.40%)</title><rect x="43.6597%" y="229" width="0.4013%" height="15" fill="rgb(214,94,31)" fg:x="544" fg:w="5"/><text x="43.9097%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="43.6597%" y="213" width="0.4013%" height="15" fill="rgb(207,16,42)" fg:x="544" fg:w="5"/><text x="43.9097%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="43.6597%" y="197" width="0.4013%" height="15" fill="rgb(208,127,13)" fg:x="544" fg:w="5"/><text x="43.9097%" y="207.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="43.7400%" y="181" width="0.3210%" height="15" fill="rgb(220,211,18)" fg:x="545" fg:w="4"/><text x="43.9900%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="44.0610%" y="229" width="0.3210%" height="15" fill="rgb(221,55,38)" fg:x="549" fg:w="4"/><text x="44.3110%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (91 samples, 7.30%)</title><rect x="37.1589%" y="277" width="7.3034%" height="15" fill="rgb(252,219,45)" fg:x="463" fg:w="91"/><text x="37.4089%" y="287.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (59 samples, 4.74%)</title><rect x="39.7271%" y="261" width="4.7352%" height="15" fill="rgb(248,53,35)" fg:x="495" fg:w="59"/><text x="39.9771%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="43.5795%" y="245" width="0.8828%" height="15" fill="rgb(210,87,2)" fg:x="543" fg:w="11"/><text x="43.8295%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="44.3820%" y="229" width="0.0803%" height="15" fill="rgb(239,133,9)" fg:x="553" fg:w="1"/><text x="44.6320%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="44.4623%" y="229" width="0.0803%" height="15" fill="rgb(214,114,5)" fg:x="554" fg:w="1"/><text x="44.7123%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="44.4623%" y="277" width="0.1605%" height="15" fill="rgb(206,124,24)" fg:x="554" fg:w="2"/><text x="44.7123%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="44.4623%" y="261" width="0.1605%" height="15" fill="rgb(212,57,33)" fg:x="554" fg:w="2"/><text x="44.7123%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="44.4623%" y="245" width="0.1605%" height="15" fill="rgb(246,21,20)" fg:x="554" fg:w="2"/><text x="44.7123%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="44.5425%" y="229" width="0.0803%" height="15" fill="rgb(253,210,39)" fg:x="555" fg:w="1"/><text x="44.7925%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="44.5425%" y="213" width="0.0803%" height="15" fill="rgb(209,187,24)" fg:x="555" fg:w="1"/><text x="44.7925%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="44.5425%" y="197" width="0.0803%" height="15" fill="rgb(246,136,17)" fg:x="555" fg:w="1"/><text x="44.7925%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="44.5425%" y="181" width="0.0803%" height="15" fill="rgb(211,0,30)" fg:x="555" fg:w="1"/><text x="44.7925%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="44.6228%" y="229" width="0.1605%" height="15" fill="rgb(216,199,7)" fg:x="556" fg:w="2"/><text x="44.8728%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="44.6228%" y="213" width="0.1605%" height="15" fill="rgb(207,210,19)" fg:x="556" fg:w="2"/><text x="44.8728%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="44.6228%" y="197" width="0.1605%" height="15" fill="rgb(237,187,39)" fg:x="556" fg:w="2"/><text x="44.8728%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="44.6228%" y="245" width="0.3210%" height="15" fill="rgb(243,194,42)" fg:x="556" fg:w="4"/><text x="44.8728%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="44.7833%" y="229" width="0.1605%" height="15" fill="rgb(225,194,19)" fg:x="558" fg:w="2"/><text x="45.0333%" y="239.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="44.7833%" y="213" width="0.1605%" height="15" fill="rgb(224,192,14)" fg:x="558" fg:w="2"/><text x="45.0333%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="45.0241%" y="229" width="0.0803%" height="15" fill="rgb(252,21,18)" fg:x="561" fg:w="1"/><text x="45.2741%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::literal (1 samples, 0.08%)</title><rect x="45.0241%" y="213" width="0.0803%" height="15" fill="rgb(229,69,19)" fg:x="561" fg:w="1"/><text x="45.2741%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="44.9438%" y="245" width="0.2408%" height="15" fill="rgb(251,31,53)" fg:x="560" fg:w="3"/><text x="45.1938%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="45.1043%" y="229" width="0.0803%" height="15" fill="rgb(218,39,50)" fg:x="562" fg:w="1"/><text x="45.3543%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (247 samples, 19.82%)</title><rect x="25.4414%" y="421" width="19.8234%" height="15" fill="rgb(231,50,17)" fg:x="317" fg:w="247"/><text x="25.6914%" y="431.50">&lt;&amp;kernel::model::EntityPtr as p..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (236 samples, 18.94%)</title><rect x="26.3242%" y="405" width="18.9406%" height="15" fill="rgb(223,217,31)" fg:x="328" fg:w="236"/><text x="26.5742%" y="415.50">plugins_core::looking::model::..</text></g><g><title>indefinite::indefinite (236 samples, 18.94%)</title><rect x="26.3242%" y="389" width="18.9406%" height="15" fill="rgb(225,91,12)" fg:x="328" fg:w="236"/><text x="26.5742%" y="399.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (236 samples, 18.94%)</title><rect x="26.3242%" y="373" width="18.9406%" height="15" fill="rgb(242,58,43)" fg:x="328" fg:w="236"/><text x="26.5742%" y="383.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (236 samples, 18.94%)</title><rect x="26.3242%" y="357" width="18.9406%" height="15" fill="rgb(242,32,21)" fg:x="328" fg:w="236"/><text x="26.5742%" y="367.50">indefinite::methods::apply_rul..</text></g><g><title>indefinite::rules::number::Number::check (117 samples, 9.39%)</title><rect x="35.8748%" y="341" width="9.3900%" height="15" fill="rgb(211,127,1)" fg:x="447" fg:w="117"/><text x="36.1248%" y="351.50">indefinite::r..</text></g><g><title>regex::regex::string::Regex::new (109 samples, 8.75%)</title><rect x="36.5169%" y="325" width="8.7480%" height="15" fill="rgb(231,93,13)" fg:x="455" fg:w="109"/><text x="36.7669%" y="335.50">regex::regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (109 samples, 8.75%)</title><rect x="36.5169%" y="309" width="8.7480%" height="15" fill="rgb(218,83,4)" fg:x="455" fg:w="109"/><text x="36.7669%" y="319.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (109 samples, 8.75%)</title><rect x="36.5169%" y="293" width="8.7480%" height="15" fill="rgb(230,218,10)" fg:x="455" fg:w="109"/><text x="36.7669%" y="303.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.64%)</title><rect x="44.6228%" y="277" width="0.6421%" height="15" fill="rgb(235,127,18)" fg:x="556" fg:w="8"/><text x="44.8728%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.64%)</title><rect x="44.6228%" y="261" width="0.6421%" height="15" fill="rgb(213,137,46)" fg:x="556" fg:w="8"/><text x="44.8728%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="45.1846%" y="245" width="0.0803%" height="15" fill="rgb(235,179,24)" fg:x="563" fg:w="1"/><text x="45.4346%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.2648%" y="389" width="0.0803%" height="15" fill="rgb(247,58,49)" fg:x="564" fg:w="1"/><text x="45.5148%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="45.3451%" y="341" width="0.0803%" height="15" fill="rgb(242,222,5)" fg:x="565" fg:w="1"/><text x="45.5951%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.3451%" y="325" width="0.0803%" height="15" fill="rgb(230,16,48)" fg:x="565" fg:w="1"/><text x="45.5951%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.3451%" y="309" width="0.0803%" height="15" fill="rgb(241,192,16)" fg:x="565" fg:w="1"/><text x="45.5951%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="45.3451%" y="293" width="0.0803%" height="15" fill="rgb(209,25,37)" fg:x="565" fg:w="1"/><text x="45.5951%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="45.3451%" y="277" width="0.0803%" height="15" fill="rgb(229,215,13)" fg:x="565" fg:w="1"/><text x="45.5951%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="45.3451%" y="261" width="0.0803%" height="15" fill="rgb(213,199,8)" fg:x="565" fg:w="1"/><text x="45.5951%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.3451%" y="245" width="0.0803%" height="15" fill="rgb(226,151,19)" fg:x="565" fg:w="1"/><text x="45.5951%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.3451%" y="229" width="0.0803%" height="15" fill="rgb(254,183,12)" fg:x="565" fg:w="1"/><text x="45.5951%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="45.3451%" y="213" width="0.0803%" height="15" fill="rgb(245,8,3)" fg:x="565" fg:w="1"/><text x="45.5951%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="45.3451%" y="197" width="0.0803%" height="15" fill="rgb(229,159,35)" fg:x="565" fg:w="1"/><text x="45.5951%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="45.3451%" y="181" width="0.0803%" height="15" fill="rgb(209,145,1)" fg:x="565" fg:w="1"/><text x="45.5951%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="45.3451%" y="165" width="0.0803%" height="15" fill="rgb(228,183,16)" fg:x="565" fg:w="1"/><text x="45.5951%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.3451%" y="149" width="0.0803%" height="15" fill="rgb(222,68,0)" fg:x="565" fg:w="1"/><text x="45.5951%" y="159.50"></text></g><g><title>plugins_core::tools::contained_by (2 samples, 0.16%)</title><rect x="45.3451%" y="373" width="0.1605%" height="15" fill="rgb(209,130,50)" fg:x="565" fg:w="2"/><text x="45.5951%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="45.3451%" y="357" width="0.1605%" height="15" fill="rgb(228,176,44)" fg:x="565" fg:w="2"/><text x="45.5951%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="45.4254%" y="341" width="0.0803%" height="15" fill="rgb(221,164,2)" fg:x="566" fg:w="1"/><text x="45.6754%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="45.4254%" y="325" width="0.0803%" height="15" fill="rgb(249,199,49)" fg:x="566" fg:w="1"/><text x="45.6754%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="45.4254%" y="309" width="0.0803%" height="15" fill="rgb(228,205,53)" fg:x="566" fg:w="1"/><text x="45.6754%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="45.4254%" y="293" width="0.0803%" height="15" fill="rgb(235,77,20)" fg:x="566" fg:w="1"/><text x="45.6754%" y="303.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="45.4254%" y="277" width="0.0803%" height="15" fill="rgb(227,147,34)" fg:x="566" fg:w="1"/><text x="45.6754%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="45.4254%" y="261" width="0.0803%" height="15" fill="rgb(226,203,52)" fg:x="566" fg:w="1"/><text x="45.6754%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="45.4254%" y="245" width="0.0803%" height="15" fill="rgb(226,186,23)" fg:x="566" fg:w="1"/><text x="45.6754%" y="255.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (3 samples, 0.24%)</title><rect x="45.3451%" y="389" width="0.2408%" height="15" fill="rgb(236,13,30)" fg:x="565" fg:w="3"/><text x="45.5951%" y="399.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="45.5056%" y="373" width="0.0803%" height="15" fill="rgb(228,121,22)" fg:x="567" fg:w="1"/><text x="45.7556%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="45.5056%" y="357" width="0.0803%" height="15" fill="rgb(248,222,26)" fg:x="567" fg:w="1"/><text x="45.7556%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="45.5056%" y="341" width="0.0803%" height="15" fill="rgb(251,72,25)" fg:x="567" fg:w="1"/><text x="45.7556%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.5056%" y="325" width="0.0803%" height="15" fill="rgb(223,114,24)" fg:x="567" fg:w="1"/><text x="45.7556%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="45.5056%" y="309" width="0.0803%" height="15" fill="rgb(232,190,43)" fg:x="567" fg:w="1"/><text x="45.7556%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="45.5056%" y="293" width="0.0803%" height="15" fill="rgb(208,90,0)" fg:x="567" fg:w="1"/><text x="45.7556%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.5056%" y="277" width="0.0803%" height="15" fill="rgb(234,149,31)" fg:x="567" fg:w="1"/><text x="45.7556%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.5056%" y="261" width="0.0803%" height="15" fill="rgb(235,188,36)" fg:x="567" fg:w="1"/><text x="45.7556%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="45.5056%" y="245" width="0.0803%" height="15" fill="rgb(219,59,51)" fg:x="567" fg:w="1"/><text x="45.7556%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="45.5056%" y="229" width="0.0803%" height="15" fill="rgb(236,101,40)" fg:x="567" fg:w="1"/><text x="45.7556%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="45.5056%" y="213" width="0.0803%" height="15" fill="rgb(235,33,7)" fg:x="567" fg:w="1"/><text x="45.7556%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.5056%" y="197" width="0.0803%" height="15" fill="rgb(213,169,26)" fg:x="567" fg:w="1"/><text x="45.7556%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.5056%" y="181" width="0.0803%" height="15" fill="rgb(218,99,34)" fg:x="567" fg:w="1"/><text x="45.7556%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="45.5056%" y="165" width="0.0803%" height="15" fill="rgb(210,57,24)" fg:x="567" fg:w="1"/><text x="45.7556%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="45.5056%" y="149" width="0.0803%" height="15" fill="rgb(231,181,54)" fg:x="567" fg:w="1"/><text x="45.7556%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="45.5056%" y="133" width="0.0803%" height="15" fill="rgb(251,188,48)" fg:x="567" fg:w="1"/><text x="45.7556%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="45.5056%" y="117" width="0.0803%" height="15" fill="rgb(243,12,45)" fg:x="567" fg:w="1"/><text x="45.7556%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.5859%" y="373" width="0.0803%" height="15" fill="rgb(250,197,9)" fg:x="568" fg:w="1"/><text x="45.8359%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="45.6661%" y="309" width="0.0803%" height="15" fill="rgb(235,149,35)" fg:x="569" fg:w="1"/><text x="45.9161%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="45.6661%" y="293" width="0.0803%" height="15" fill="rgb(219,27,19)" fg:x="569" fg:w="1"/><text x="45.9161%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="45.6661%" y="277" width="0.0803%" height="15" fill="rgb(244,78,31)" fg:x="569" fg:w="1"/><text x="45.9161%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.6661%" y="261" width="0.0803%" height="15" fill="rgb(241,13,4)" fg:x="569" fg:w="1"/><text x="45.9161%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.6661%" y="245" width="0.0803%" height="15" fill="rgb(212,194,26)" fg:x="569" fg:w="1"/><text x="45.9161%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="45.6661%" y="229" width="0.0803%" height="15" fill="rgb(236,80,11)" fg:x="569" fg:w="1"/><text x="45.9161%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="45.6661%" y="213" width="0.0803%" height="15" fill="rgb(206,1,24)" fg:x="569" fg:w="1"/><text x="45.9161%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="45.6661%" y="197" width="0.0803%" height="15" fill="rgb(238,215,50)" fg:x="569" fg:w="1"/><text x="45.9161%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.6661%" y="181" width="0.0803%" height="15" fill="rgb(254,126,32)" fg:x="569" fg:w="1"/><text x="45.9161%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.6661%" y="165" width="0.0803%" height="15" fill="rgb(206,111,53)" fg:x="569" fg:w="1"/><text x="45.9161%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="45.6661%" y="149" width="0.0803%" height="15" fill="rgb(218,72,44)" fg:x="569" fg:w="1"/><text x="45.9161%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="45.6661%" y="133" width="0.0803%" height="15" fill="rgb(238,25,3)" fg:x="569" fg:w="1"/><text x="45.9161%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="45.6661%" y="117" width="0.0803%" height="15" fill="rgb(250,191,7)" fg:x="569" fg:w="1"/><text x="45.9161%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="45.6661%" y="101" width="0.0803%" height="15" fill="rgb(238,56,30)" fg:x="569" fg:w="1"/><text x="45.9161%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.6661%" y="85" width="0.0803%" height="15" fill="rgb(210,27,45)" fg:x="569" fg:w="1"/><text x="45.9161%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.7464%" y="309" width="0.0803%" height="15" fill="rgb(207,10,50)" fg:x="570" fg:w="1"/><text x="45.9964%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.7464%" y="293" width="0.0803%" height="15" fill="rgb(249,30,23)" fg:x="570" fg:w="1"/><text x="45.9964%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.7464%" y="277" width="0.0803%" height="15" fill="rgb(250,80,12)" fg:x="570" fg:w="1"/><text x="45.9964%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="45.7464%" y="261" width="0.0803%" height="15" fill="rgb(210,221,37)" fg:x="570" fg:w="1"/><text x="45.9964%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="45.7464%" y="245" width="0.0803%" height="15" fill="rgb(205,96,24)" fg:x="570" fg:w="1"/><text x="45.9964%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="45.7464%" y="229" width="0.0803%" height="15" fill="rgb(247,104,22)" fg:x="570" fg:w="1"/><text x="45.9964%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.7464%" y="213" width="0.0803%" height="15" fill="rgb(222,61,53)" fg:x="570" fg:w="1"/><text x="45.9964%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.7464%" y="197" width="0.0803%" height="15" fill="rgb(241,11,53)" fg:x="570" fg:w="1"/><text x="45.9964%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="45.7464%" y="181" width="0.0803%" height="15" fill="rgb(230,111,47)" fg:x="570" fg:w="1"/><text x="45.9964%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="45.7464%" y="165" width="0.0803%" height="15" fill="rgb(218,187,29)" fg:x="570" fg:w="1"/><text x="45.9964%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="45.7464%" y="149" width="0.0803%" height="15" fill="rgb(210,121,46)" fg:x="570" fg:w="1"/><text x="45.9964%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="45.7464%" y="133" width="0.0803%" height="15" fill="rgb(250,43,19)" fg:x="570" fg:w="1"/><text x="45.9964%" y="143.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (9 samples, 0.72%)</title><rect x="45.2648%" y="421" width="0.7223%" height="15" fill="rgb(238,61,12)" fg:x="564" fg:w="9"/><text x="45.5148%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (9 samples, 0.72%)</title><rect x="45.2648%" y="405" width="0.7223%" height="15" fill="rgb(251,198,9)" fg:x="564" fg:w="9"/><text x="45.5148%" y="415.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (5 samples, 0.40%)</title><rect x="45.5859%" y="389" width="0.4013%" height="15" fill="rgb(214,192,38)" fg:x="568" fg:w="5"/><text x="45.8359%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (4 samples, 0.32%)</title><rect x="45.6661%" y="373" width="0.3210%" height="15" fill="rgb(214,73,19)" fg:x="569" fg:w="4"/><text x="45.9161%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (4 samples, 0.32%)</title><rect x="45.6661%" y="357" width="0.3210%" height="15" fill="rgb(249,222,49)" fg:x="569" fg:w="4"/><text x="45.9161%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (4 samples, 0.32%)</title><rect x="45.6661%" y="341" width="0.3210%" height="15" fill="rgb(231,181,54)" fg:x="569" fg:w="4"/><text x="45.9161%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="45.6661%" y="325" width="0.3210%" height="15" fill="rgb(240,1,13)" fg:x="569" fg:w="4"/><text x="45.9161%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="45.8266%" y="309" width="0.1605%" height="15" fill="rgb(225,21,16)" fg:x="571" fg:w="2"/><text x="46.0766%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="45.8266%" y="293" width="0.1605%" height="15" fill="rgb(246,176,50)" fg:x="571" fg:w="2"/><text x="46.0766%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="45.8266%" y="277" width="0.1605%" height="15" fill="rgb(208,96,50)" fg:x="571" fg:w="2"/><text x="46.0766%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="45.8266%" y="261" width="0.1605%" height="15" fill="rgb(240,219,19)" fg:x="571" fg:w="2"/><text x="46.0766%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="45.8266%" y="245" width="0.1605%" height="15" fill="rgb(234,73,5)" fg:x="571" fg:w="2"/><text x="46.0766%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="45.8266%" y="229" width="0.1605%" height="15" fill="rgb(225,52,53)" fg:x="571" fg:w="2"/><text x="46.0766%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.9872%" y="421" width="0.0803%" height="15" fill="rgb(250,12,14)" fg:x="573" fg:w="1"/><text x="46.2372%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.1477%" y="277" width="0.0803%" height="15" fill="rgb(242,185,54)" fg:x="575" fg:w="1"/><text x="46.3977%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.1477%" y="261" width="0.0803%" height="15" fill="rgb(211,206,31)" fg:x="575" fg:w="1"/><text x="46.3977%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.1477%" y="245" width="0.0803%" height="15" fill="rgb(252,10,33)" fg:x="575" fg:w="1"/><text x="46.3977%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.1477%" y="229" width="0.0803%" height="15" fill="rgb(216,26,7)" fg:x="575" fg:w="1"/><text x="46.3977%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.1477%" y="213" width="0.0803%" height="15" fill="rgb(228,112,40)" fg:x="575" fg:w="1"/><text x="46.3977%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="46.1477%" y="197" width="0.0803%" height="15" fill="rgb(212,21,16)" fg:x="575" fg:w="1"/><text x="46.3977%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="46.1477%" y="181" width="0.0803%" height="15" fill="rgb(249,3,29)" fg:x="575" fg:w="1"/><text x="46.3977%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="46.1477%" y="165" width="0.0803%" height="15" fill="rgb(221,42,51)" fg:x="575" fg:w="1"/><text x="46.3977%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="46.1477%" y="149" width="0.0803%" height="15" fill="rgb(225,90,21)" fg:x="575" fg:w="1"/><text x="46.3977%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="46.1477%" y="133" width="0.0803%" height="15" fill="rgb(242,131,5)" fg:x="575" fg:w="1"/><text x="46.3977%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="46.1477%" y="117" width="0.0803%" height="15" fill="rgb(220,187,28)" fg:x="575" fg:w="1"/><text x="46.3977%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="46.1477%" y="101" width="0.0803%" height="15" fill="rgb(210,75,48)" fg:x="575" fg:w="1"/><text x="46.3977%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="46.1477%" y="85" width="0.0803%" height="15" fill="rgb(211,91,40)" fg:x="575" fg:w="1"/><text x="46.3977%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="46.1477%" y="69" width="0.0803%" height="15" fill="rgb(205,43,18)" fg:x="575" fg:w="1"/><text x="46.3977%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.1477%" y="53" width="0.0803%" height="15" fill="rgb(207,123,11)" fg:x="575" fg:w="1"/><text x="46.3977%" y="63.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (2 samples, 0.16%)</title><rect x="46.1477%" y="293" width="0.1605%" height="15" fill="rgb(235,89,39)" fg:x="575" fg:w="2"/><text x="46.3977%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.2279%" y="277" width="0.0803%" height="15" fill="rgb(245,217,27)" fg:x="576" fg:w="1"/><text x="46.4779%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.2279%" y="261" width="0.0803%" height="15" fill="rgb(216,55,17)" fg:x="576" fg:w="1"/><text x="46.4779%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="46.2279%" y="245" width="0.0803%" height="15" fill="rgb(252,116,44)" fg:x="576" fg:w="1"/><text x="46.4779%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="46.2279%" y="229" width="0.0803%" height="15" fill="rgb(229,153,4)" fg:x="576" fg:w="1"/><text x="46.4779%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="46.2279%" y="213" width="0.0803%" height="15" fill="rgb(222,24,35)" fg:x="576" fg:w="1"/><text x="46.4779%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="46.2279%" y="197" width="0.0803%" height="15" fill="rgb(214,26,20)" fg:x="576" fg:w="1"/><text x="46.4779%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="46.2279%" y="181" width="0.0803%" height="15" fill="rgb(215,14,45)" fg:x="576" fg:w="1"/><text x="46.4779%" y="191.50"></text></g><g><title>&lt;plugins_rune::runner::RuneReturn as plugins_rune::PerformTagged&gt;::handle (1 samples, 0.08%)</title><rect x="46.3082%" y="293" width="0.0803%" height="15" fill="rgb(217,212,50)" fg:x="577" fg:w="1"/><text x="46.5582%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.3884%" y="293" width="0.0803%" height="15" fill="rgb(230,172,52)" fg:x="578" fg:w="1"/><text x="46.6384%" y="303.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="46.4687%" y="293" width="0.0803%" height="15" fill="rgb(210,48,36)" fg:x="579" fg:w="1"/><text x="46.7187%" y="303.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="46.4687%" y="277" width="0.0803%" height="15" fill="rgb(216,213,32)" fg:x="579" fg:w="1"/><text x="46.7187%" y="287.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="46.4687%" y="261" width="0.0803%" height="15" fill="rgb(237,202,41)" fg:x="579" fg:w="1"/><text x="46.7187%" y="271.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="46.4687%" y="245" width="0.0803%" height="15" fill="rgb(209,14,29)" fg:x="579" fg:w="1"/><text x="46.7187%" y="255.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="46.4687%" y="229" width="0.0803%" height="15" fill="rgb(219,29,3)" fg:x="579" fg:w="1"/><text x="46.7187%" y="239.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="46.4687%" y="213" width="0.0803%" height="15" fill="rgb(229,13,49)" fg:x="579" fg:w="1"/><text x="46.7187%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.08%)</title><rect x="46.4687%" y="197" width="0.0803%" height="15" fill="rgb(210,206,2)" fg:x="579" fg:w="1"/><text x="46.7187%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.4687%" y="181" width="0.0803%" height="15" fill="rgb(216,154,46)" fg:x="579" fg:w="1"/><text x="46.7187%" y="191.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="46.6292%" y="229" width="0.0803%" height="15" fill="rgb(211,170,52)" fg:x="581" fg:w="1"/><text x="46.8792%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.6292%" y="213" width="0.0803%" height="15" fill="rgb(233,109,47)" fg:x="581" fg:w="1"/><text x="46.8792%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="46.6292%" y="277" width="0.1605%" height="15" fill="rgb(208,212,30)" fg:x="581" fg:w="2"/><text x="46.8792%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="46.6292%" y="261" width="0.1605%" height="15" fill="rgb(215,190,19)" fg:x="581" fg:w="2"/><text x="46.8792%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="46.6292%" y="245" width="0.1605%" height="15" fill="rgb(207,164,53)" fg:x="581" fg:w="2"/><text x="46.8792%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="46.7095%" y="229" width="0.0803%" height="15" fill="rgb(213,87,49)" fg:x="582" fg:w="1"/><text x="46.9595%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="46.7095%" y="213" width="0.0803%" height="15" fill="rgb(241,216,24)" fg:x="582" fg:w="1"/><text x="46.9595%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (10 samples, 0.80%)</title><rect x="46.0674%" y="405" width="0.8026%" height="15" fill="rgb(241,123,45)" fg:x="574" fg:w="10"/><text x="46.3174%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (10 samples, 0.80%)</title><rect x="46.0674%" y="389" width="0.8026%" height="15" fill="rgb(220,36,15)" fg:x="574" fg:w="10"/><text x="46.3174%" y="399.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (10 samples, 0.80%)</title><rect x="46.0674%" y="373" width="0.8026%" height="15" fill="rgb(215,202,9)" fg:x="574" fg:w="10"/><text x="46.3174%" y="383.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (10 samples, 0.80%)</title><rect x="46.0674%" y="357" width="0.8026%" height="15" fill="rgb(252,71,26)" fg:x="574" fg:w="10"/><text x="46.3174%" y="367.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (10 samples, 0.80%)</title><rect x="46.0674%" y="341" width="0.8026%" height="15" fill="rgb(243,195,19)" fg:x="574" fg:w="10"/><text x="46.3174%" y="351.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (10 samples, 0.80%)</title><rect x="46.0674%" y="325" width="0.8026%" height="15" fill="rgb(207,167,27)" fg:x="574" fg:w="10"/><text x="46.3174%" y="335.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (10 samples, 0.80%)</title><rect x="46.0674%" y="309" width="0.8026%" height="15" fill="rgb(250,146,54)" fg:x="574" fg:w="10"/><text x="46.3174%" y="319.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (4 samples, 0.32%)</title><rect x="46.5490%" y="293" width="0.3210%" height="15" fill="rgb(245,79,9)" fg:x="580" fg:w="4"/><text x="46.7990%" y="303.50"></text></g><g><title>rune::runtime::vec::&lt;impl rune::runtime::to_value::ToValue for alloc::vec::Vec&lt;T&gt;&gt;::to_value (1 samples, 0.08%)</title><rect x="46.7897%" y="277" width="0.0803%" height="15" fill="rgb(234,197,22)" fg:x="583" fg:w="1"/><text x="47.0397%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.7897%" y="261" width="0.0803%" height="15" fill="rgb(221,52,48)" fg:x="583" fg:w="1"/><text x="47.0397%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="46.8700%" y="357" width="0.0803%" height="15" fill="rgb(235,80,0)" fg:x="584" fg:w="1"/><text x="47.1200%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="47.1108%" y="325" width="0.1605%" height="15" fill="rgb(221,117,53)" fg:x="587" fg:w="2"/><text x="47.3608%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (7 samples, 0.56%)</title><rect x="46.8700%" y="373" width="0.5618%" height="15" fill="rgb(239,48,47)" fg:x="584" fg:w="7"/><text x="47.1200%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (6 samples, 0.48%)</title><rect x="46.9502%" y="357" width="0.4815%" height="15" fill="rgb(227,191,52)" fg:x="585" fg:w="6"/><text x="47.2002%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="46.9502%" y="341" width="0.4815%" height="15" fill="rgb(241,118,1)" fg:x="585" fg:w="6"/><text x="47.2002%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="47.2713%" y="325" width="0.1605%" height="15" fill="rgb(240,85,3)" fg:x="589" fg:w="2"/><text x="47.5213%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="47.3515%" y="309" width="0.0803%" height="15" fill="rgb(237,68,37)" fg:x="590" fg:w="1"/><text x="47.6015%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (8 samples, 0.64%)</title><rect x="46.8700%" y="389" width="0.6421%" height="15" fill="rgb(212,9,20)" fg:x="584" fg:w="8"/><text x="47.1200%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct_variant (1 samples, 0.08%)</title><rect x="47.4318%" y="373" width="0.0803%" height="15" fill="rgb(218,84,17)" fg:x="591" fg:w="1"/><text x="47.6818%" y="383.50"></text></g><g><title>plugins_core::library::actions::reply_ok (19 samples, 1.52%)</title><rect x="46.0674%" y="421" width="1.5249%" height="15" fill="rgb(235,147,20)" fg:x="574" fg:w="19"/><text x="46.3174%" y="431.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (9 samples, 0.72%)</title><rect x="46.8700%" y="405" width="0.7223%" height="15" fill="rgb(208,224,1)" fg:x="584" fg:w="9"/><text x="47.1200%" y="415.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="47.5120%" y="389" width="0.0803%" height="15" fill="rgb(232,97,50)" fg:x="592" fg:w="1"/><text x="47.7620%" y="399.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="47.5923%" y="405" width="0.0803%" height="15" fill="rgb(238,15,45)" fg:x="593" fg:w="1"/><text x="47.8423%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScopeRefMut&lt;plugins_core::carrying::model::Containing,kernel::model::entity::Entity&gt;&gt; (1 samples, 0.08%)</title><rect x="47.6726%" y="405" width="0.0803%" height="15" fill="rgb(231,46,18)" fg:x="594" fg:w="1"/><text x="47.9226%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="47.7528%" y="405" width="0.1605%" height="15" fill="rgb(254,169,10)" fg:x="595" fg:w="2"/><text x="48.0028%" y="415.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="47.7528%" y="389" width="0.1605%" height="15" fill="rgb(243,169,30)" fg:x="595" fg:w="2"/><text x="48.0028%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="47.7528%" y="373" width="0.1605%" height="15" fill="rgb(236,90,49)" fg:x="595" fg:w="2"/><text x="48.0028%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="47.7528%" y="357" width="0.1605%" height="15" fill="rgb(218,80,15)" fg:x="595" fg:w="2"/><text x="48.0028%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="47.8331%" y="341" width="0.0803%" height="15" fill="rgb(222,115,37)" fg:x="596" fg:w="1"/><text x="48.0831%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="47.8331%" y="325" width="0.0803%" height="15" fill="rgb(227,0,6)" fg:x="596" fg:w="1"/><text x="48.0831%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="47.9133%" y="389" width="0.0803%" height="15" fill="rgb(217,189,13)" fg:x="597" fg:w="1"/><text x="48.1633%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="47.9133%" y="373" width="0.0803%" height="15" fill="rgb(220,74,19)" fg:x="597" fg:w="1"/><text x="48.1633%" y="383.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="47.9133%" y="405" width="0.1605%" height="15" fill="rgb(224,81,18)" fg:x="597" fg:w="2"/><text x="48.1633%" y="415.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="47.9936%" y="389" width="0.0803%" height="15" fill="rgb(245,178,48)" fg:x="598" fg:w="1"/><text x="48.2436%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="47.9936%" y="373" width="0.0803%" height="15" fill="rgb(207,78,24)" fg:x="598" fg:w="1"/><text x="48.2436%" y="383.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="48.0738%" y="405" width="0.0803%" height="15" fill="rgb(223,222,30)" fg:x="599" fg:w="1"/><text x="48.3238%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="48.0738%" y="389" width="0.0803%" height="15" fill="rgb(234,101,12)" fg:x="599" fg:w="1"/><text x="48.3238%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="48.0738%" y="373" width="0.0803%" height="15" fill="rgb(209,80,46)" fg:x="599" fg:w="1"/><text x="48.3238%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="48.0738%" y="357" width="0.0803%" height="15" fill="rgb(228,79,14)" fg:x="599" fg:w="1"/><text x="48.3238%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="48.0738%" y="341" width="0.0803%" height="15" fill="rgb(220,219,34)" fg:x="599" fg:w="1"/><text x="48.3238%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="48.0738%" y="325" width="0.0803%" height="15" fill="rgb(207,80,21)" fg:x="599" fg:w="1"/><text x="48.3238%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="48.0738%" y="309" width="0.0803%" height="15" fill="rgb(210,154,44)" fg:x="599" fg:w="1"/><text x="48.3238%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="48.0738%" y="293" width="0.0803%" height="15" fill="rgb(246,44,39)" fg:x="599" fg:w="1"/><text x="48.3238%" y="303.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="48.1541%" y="405" width="0.1605%" height="15" fill="rgb(252,175,13)" fg:x="600" fg:w="2"/><text x="48.4041%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="48.1541%" y="389" width="0.1605%" height="15" fill="rgb(211,50,39)" fg:x="600" fg:w="2"/><text x="48.4041%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="48.1541%" y="373" width="0.1605%" height="15" fill="rgb(231,204,27)" fg:x="600" fg:w="2"/><text x="48.4041%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="48.1541%" y="357" width="0.1605%" height="15" fill="rgb(253,26,34)" fg:x="600" fg:w="2"/><text x="48.4041%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="48.1541%" y="341" width="0.1605%" height="15" fill="rgb(207,139,38)" fg:x="600" fg:w="2"/><text x="48.4041%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="48.1541%" y="325" width="0.1605%" height="15" fill="rgb(248,54,27)" fg:x="600" fg:w="2"/><text x="48.4041%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="48.1541%" y="309" width="0.1605%" height="15" fill="rgb(234,25,33)" fg:x="600" fg:w="2"/><text x="48.4041%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="48.1541%" y="293" width="0.1605%" height="15" fill="rgb(249,107,47)" fg:x="600" fg:w="2"/><text x="48.4041%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="48.2343%" y="277" width="0.0803%" height="15" fill="rgb(230,190,31)" fg:x="601" fg:w="1"/><text x="48.4843%" y="287.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="48.3146%" y="389" width="0.0803%" height="15" fill="rgb(238,173,45)" fg:x="602" fg:w="1"/><text x="48.5646%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="48.3146%" y="373" width="0.0803%" height="15" fill="rgb(222,16,50)" fg:x="602" fg:w="1"/><text x="48.5646%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="48.3146%" y="357" width="0.0803%" height="15" fill="rgb(251,204,47)" fg:x="602" fg:w="1"/><text x="48.5646%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="48.3146%" y="341" width="0.0803%" height="15" fill="rgb(225,12,3)" fg:x="602" fg:w="1"/><text x="48.5646%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="48.3146%" y="325" width="0.0803%" height="15" fill="rgb(214,208,22)" fg:x="602" fg:w="1"/><text x="48.5646%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="48.3146%" y="309" width="0.0803%" height="15" fill="rgb(240,57,32)" fg:x="602" fg:w="1"/><text x="48.5646%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="48.3146%" y="293" width="0.0803%" height="15" fill="rgb(243,113,48)" fg:x="602" fg:w="1"/><text x="48.5646%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="48.3146%" y="277" width="0.0803%" height="15" fill="rgb(225,135,30)" fg:x="602" fg:w="1"/><text x="48.5646%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="48.3146%" y="261" width="0.0803%" height="15" fill="rgb(222,3,53)" fg:x="602" fg:w="1"/><text x="48.5646%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="48.3146%" y="245" width="0.0803%" height="15" fill="rgb(243,142,2)" fg:x="602" fg:w="1"/><text x="48.5646%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="48.3146%" y="229" width="0.0803%" height="15" fill="rgb(233,67,14)" fg:x="602" fg:w="1"/><text x="48.5646%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="48.3146%" y="213" width="0.0803%" height="15" fill="rgb(245,125,36)" fg:x="602" fg:w="1"/><text x="48.5646%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="48.3146%" y="197" width="0.0803%" height="15" fill="rgb(225,199,6)" fg:x="602" fg:w="1"/><text x="48.5646%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="48.3146%" y="181" width="0.0803%" height="15" fill="rgb(244,71,6)" fg:x="602" fg:w="1"/><text x="48.5646%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.3146%" y="165" width="0.0803%" height="15" fill="rgb(225,62,9)" fg:x="602" fg:w="1"/><text x="48.5646%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="48.3949%" y="373" width="0.1605%" height="15" fill="rgb(246,139,53)" fg:x="603" fg:w="2"/><text x="48.6449%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="48.4751%" y="357" width="0.0803%" height="15" fill="rgb(243,161,46)" fg:x="604" fg:w="1"/><text x="48.7251%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="48.4751%" y="341" width="0.0803%" height="15" fill="rgb(236,153,7)" fg:x="604" fg:w="1"/><text x="48.7251%" y="351.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (289 samples, 23.19%)</title><rect x="25.4414%" y="437" width="23.1942%" height="15" fill="rgb(248,42,35)" fg:x="317" fg:w="289"/><text x="25.6914%" y="447.50">&lt;plugins_core::carrying::actions::Dro..</text></g><g><title>plugins_core::location::model::change_location (13 samples, 1.04%)</title><rect x="47.5923%" y="421" width="1.0433%" height="15" fill="rgb(250,17,31)" fg:x="593" fg:w="13"/><text x="47.8423%" y="431.50"></text></g><g><title>plugins_core::location::model::Location::set (4 samples, 0.32%)</title><rect x="48.3146%" y="405" width="0.3210%" height="15" fill="rgb(248,138,14)" fg:x="602" fg:w="4"/><text x="48.5646%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="48.3949%" y="389" width="0.2408%" height="15" fill="rgb(228,161,3)" fg:x="603" fg:w="3"/><text x="48.6449%" y="399.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="48.5554%" y="373" width="0.0803%" height="15" fill="rgb(248,116,17)" fg:x="605" fg:w="1"/><text x="48.8054%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="48.5554%" y="357" width="0.0803%" height="15" fill="rgb(207,78,24)" fg:x="605" fg:w="1"/><text x="48.8054%" y="367.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="48.5554%" y="341" width="0.0803%" height="15" fill="rgb(234,99,48)" fg:x="605" fg:w="1"/><text x="48.8054%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="48.5554%" y="325" width="0.0803%" height="15" fill="rgb(242,22,26)" fg:x="605" fg:w="1"/><text x="48.8054%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="48.5554%" y="309" width="0.0803%" height="15" fill="rgb(227,78,32)" fg:x="605" fg:w="1"/><text x="48.8054%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="48.7159%" y="373" width="0.0803%" height="15" fill="rgb(226,189,43)" fg:x="607" fg:w="1"/><text x="48.9659%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="48.6356%" y="389" width="0.3210%" height="15" fill="rgb(227,218,35)" fg:x="606" fg:w="4"/><text x="48.8856%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="48.7961%" y="373" width="0.1605%" height="15" fill="rgb(206,111,40)" fg:x="608" fg:w="2"/><text x="49.0461%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="48.7961%" y="357" width="0.1605%" height="15" fill="rgb(208,217,22)" fg:x="608" fg:w="2"/><text x="49.0461%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="48.7961%" y="341" width="0.1605%" height="15" fill="rgb(248,20,20)" fg:x="608" fg:w="2"/><text x="49.0461%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="48.7961%" y="325" width="0.1605%" height="15" fill="rgb(239,155,16)" fg:x="608" fg:w="2"/><text x="49.0461%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="48.8764%" y="309" width="0.0803%" height="15" fill="rgb(238,171,46)" fg:x="609" fg:w="1"/><text x="49.1264%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="48.8764%" y="293" width="0.0803%" height="15" fill="rgb(248,11,36)" fg:x="609" fg:w="1"/><text x="49.1264%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="48.8764%" y="277" width="0.0803%" height="15" fill="rgb(220,148,37)" fg:x="609" fg:w="1"/><text x="49.1264%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.8764%" y="261" width="0.0803%" height="15" fill="rgb(218,144,42)" fg:x="609" fg:w="1"/><text x="49.1264%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.40%)</title><rect x="48.6356%" y="405" width="0.4013%" height="15" fill="rgb(245,20,20)" fg:x="606" fg:w="5"/><text x="48.8856%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.9567%" y="389" width="0.0803%" height="15" fill="rgb(240,111,48)" fg:x="610" fg:w="1"/><text x="49.2067%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="49.0369%" y="341" width="0.0803%" height="15" fill="rgb(237,225,32)" fg:x="611" fg:w="1"/><text x="49.2869%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="49.0369%" y="325" width="0.0803%" height="15" fill="rgb(228,161,46)" fg:x="611" fg:w="1"/><text x="49.2869%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="49.0369%" y="309" width="0.0803%" height="15" fill="rgb(235,196,21)" fg:x="611" fg:w="1"/><text x="49.2869%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="49.0369%" y="293" width="0.0803%" height="15" fill="rgb(250,133,21)" fg:x="611" fg:w="1"/><text x="49.2869%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="49.0369%" y="277" width="0.0803%" height="15" fill="rgb(236,94,32)" fg:x="611" fg:w="1"/><text x="49.2869%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="49.0369%" y="261" width="0.0803%" height="15" fill="rgb(219,176,25)" fg:x="611" fg:w="1"/><text x="49.2869%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="49.0369%" y="245" width="0.0803%" height="15" fill="rgb(211,17,43)" fg:x="611" fg:w="1"/><text x="49.2869%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="49.0369%" y="229" width="0.0803%" height="15" fill="rgb(220,75,23)" fg:x="611" fg:w="1"/><text x="49.2869%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="49.0369%" y="213" width="0.0803%" height="15" fill="rgb(215,122,32)" fg:x="611" fg:w="1"/><text x="49.2869%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="49.0369%" y="197" width="0.0803%" height="15" fill="rgb(218,57,38)" fg:x="611" fg:w="1"/><text x="49.2869%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="49.0369%" y="181" width="0.0803%" height="15" fill="rgb(233,208,46)" fg:x="611" fg:w="1"/><text x="49.2869%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="49.0369%" y="165" width="0.0803%" height="15" fill="rgb(221,35,50)" fg:x="611" fg:w="1"/><text x="49.2869%" y="175.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="49.0369%" y="149" width="0.0803%" height="15" fill="rgb(229,213,29)" fg:x="611" fg:w="1"/><text x="49.2869%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="49.0369%" y="373" width="0.1605%" height="15" fill="rgb(229,110,40)" fg:x="611" fg:w="2"/><text x="49.2869%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="49.0369%" y="357" width="0.1605%" height="15" fill="rgb(247,206,19)" fg:x="611" fg:w="2"/><text x="49.2869%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.1172%" y="341" width="0.0803%" height="15" fill="rgb(216,229,45)" fg:x="612" fg:w="1"/><text x="49.3672%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="49.0369%" y="389" width="0.2408%" height="15" fill="rgb(205,184,31)" fg:x="611" fg:w="3"/><text x="49.2869%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="49.1974%" y="373" width="0.0803%" height="15" fill="rgb(213,91,10)" fg:x="613" fg:w="1"/><text x="49.4474%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="49.1974%" y="357" width="0.0803%" height="15" fill="rgb(250,49,8)" fg:x="613" fg:w="1"/><text x="49.4474%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="49.1974%" y="341" width="0.0803%" height="15" fill="rgb(207,26,8)" fg:x="613" fg:w="1"/><text x="49.4474%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="49.1974%" y="325" width="0.0803%" height="15" fill="rgb(224,2,13)" fg:x="613" fg:w="1"/><text x="49.4474%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="49.1974%" y="309" width="0.0803%" height="15" fill="rgb(219,108,27)" fg:x="613" fg:w="1"/><text x="49.4474%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="49.1974%" y="293" width="0.0803%" height="15" fill="rgb(240,89,32)" fg:x="613" fg:w="1"/><text x="49.4474%" y="303.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="49.0369%" y="405" width="0.3210%" height="15" fill="rgb(248,205,3)" fg:x="611" fg:w="4"/><text x="49.2869%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="49.2777%" y="389" width="0.0803%" height="15" fill="rgb(236,197,47)" fg:x="614" fg:w="1"/><text x="49.5277%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.2777%" y="373" width="0.0803%" height="15" fill="rgb(244,185,52)" fg:x="614" fg:w="1"/><text x="49.5277%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="49.3579%" y="373" width="0.0803%" height="15" fill="rgb(210,206,23)" fg:x="615" fg:w="1"/><text x="49.6079%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.3579%" y="357" width="0.0803%" height="15" fill="rgb(251,177,30)" fg:x="615" fg:w="1"/><text x="49.6079%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="49.3579%" y="389" width="0.1605%" height="15" fill="rgb(243,27,45)" fg:x="615" fg:w="2"/><text x="49.6079%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="49.4382%" y="373" width="0.0803%" height="15" fill="rgb(248,141,51)" fg:x="616" fg:w="1"/><text x="49.6882%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="49.5185%" y="373" width="0.1605%" height="15" fill="rgb(235,102,15)" fg:x="617" fg:w="2"/><text x="49.7685%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="49.5185%" y="357" width="0.1605%" height="15" fill="rgb(214,164,53)" fg:x="617" fg:w="2"/><text x="49.7685%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="49.5185%" y="341" width="0.1605%" height="15" fill="rgb(228,18,51)" fg:x="617" fg:w="2"/><text x="49.7685%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="49.5987%" y="325" width="0.0803%" height="15" fill="rgb(205,211,11)" fg:x="618" fg:w="1"/><text x="49.8487%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="49.5987%" y="309" width="0.0803%" height="15" fill="rgb(208,63,6)" fg:x="618" fg:w="1"/><text x="49.8487%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="49.5987%" y="293" width="0.0803%" height="15" fill="rgb(245,76,14)" fg:x="618" fg:w="1"/><text x="49.8487%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="49.5987%" y="277" width="0.0803%" height="15" fill="rgb(234,176,34)" fg:x="618" fg:w="1"/><text x="49.8487%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="49.5987%" y="261" width="0.0803%" height="15" fill="rgb(243,156,42)" fg:x="618" fg:w="1"/><text x="49.8487%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="49.5987%" y="245" width="0.0803%" height="15" fill="rgb(237,182,10)" fg:x="618" fg:w="1"/><text x="49.8487%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="49.5987%" y="229" width="0.0803%" height="15" fill="rgb(244,117,0)" fg:x="618" fg:w="1"/><text x="49.8487%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="49.6790%" y="373" width="0.0803%" height="15" fill="rgb(239,91,50)" fg:x="619" fg:w="1"/><text x="49.9290%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="49.6790%" y="357" width="0.0803%" height="15" fill="rgb(206,38,9)" fg:x="619" fg:w="1"/><text x="49.9290%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="49.6790%" y="341" width="0.0803%" height="15" fill="rgb(205,25,10)" fg:x="619" fg:w="1"/><text x="49.9290%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="49.6790%" y="325" width="0.0803%" height="15" fill="rgb(206,224,7)" fg:x="619" fg:w="1"/><text x="49.9290%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="49.6790%" y="309" width="0.0803%" height="15" fill="rgb(227,157,10)" fg:x="619" fg:w="1"/><text x="49.9290%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="49.6790%" y="293" width="0.0803%" height="15" fill="rgb(214,157,37)" fg:x="619" fg:w="1"/><text x="49.9290%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="49.6790%" y="277" width="0.0803%" height="15" fill="rgb(209,180,35)" fg:x="619" fg:w="1"/><text x="49.9290%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="49.6790%" y="261" width="0.0803%" height="15" fill="rgb(216,174,49)" fg:x="619" fg:w="1"/><text x="49.9290%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="49.6790%" y="245" width="0.0803%" height="15" fill="rgb(205,96,20)" fg:x="619" fg:w="1"/><text x="49.9290%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="49.6790%" y="229" width="0.0803%" height="15" fill="rgb(214,220,39)" fg:x="619" fg:w="1"/><text x="49.9290%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="49.6790%" y="213" width="0.0803%" height="15" fill="rgb(245,126,30)" fg:x="619" fg:w="1"/><text x="49.9290%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="49.6790%" y="197" width="0.0803%" height="15" fill="rgb(215,88,33)" fg:x="619" fg:w="1"/><text x="49.9290%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.6790%" y="181" width="0.0803%" height="15" fill="rgb(210,1,49)" fg:x="619" fg:w="1"/><text x="49.9290%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.7592%" y="373" width="0.0803%" height="15" fill="rgb(207,133,3)" fg:x="620" fg:w="1"/><text x="50.0092%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::gid (7 samples, 0.56%)</title><rect x="49.3579%" y="405" width="0.5618%" height="15" fill="rgb(231,47,43)" fg:x="615" fg:w="7"/><text x="49.6079%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="49.5185%" y="389" width="0.4013%" height="15" fill="rgb(245,64,1)" fg:x="617" fg:w="5"/><text x="49.7685%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="49.8395%" y="373" width="0.0803%" height="15" fill="rgb(253,145,20)" fg:x="621" fg:w="1"/><text x="50.0895%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="49.8395%" y="357" width="0.0803%" height="15" fill="rgb(211,39,18)" fg:x="621" fg:w="1"/><text x="50.0895%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="49.8395%" y="341" width="0.0803%" height="15" fill="rgb(223,225,18)" fg:x="621" fg:w="1"/><text x="50.0895%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="49.8395%" y="325" width="0.0803%" height="15" fill="rgb(210,202,44)" fg:x="621" fg:w="1"/><text x="50.0895%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="49.8395%" y="309" width="0.0803%" height="15" fill="rgb(231,138,36)" fg:x="621" fg:w="1"/><text x="50.0895%" y="319.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="49.9197%" y="341" width="0.0803%" height="15" fill="rgb(237,115,25)" fg:x="622" fg:w="1"/><text x="50.1697%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="50.0000%" y="325" width="0.0803%" height="15" fill="rgb(215,53,48)" fg:x="623" fg:w="1"/><text x="50.2500%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="50.0000%" y="309" width="0.0803%" height="15" fill="rgb(243,193,24)" fg:x="623" fg:w="1"/><text x="50.2500%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="50.0803%" y="325" width="0.1605%" height="15" fill="rgb(210,106,28)" fg:x="624" fg:w="2"/><text x="50.3303%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="50.0803%" y="309" width="0.1605%" height="15" fill="rgb(249,192,0)" fg:x="624" fg:w="2"/><text x="50.3303%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="50.0803%" y="293" width="0.1605%" height="15" fill="rgb(224,96,21)" fg:x="624" fg:w="2"/><text x="50.3303%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="50.0803%" y="277" width="0.1605%" height="15" fill="rgb(243,160,19)" fg:x="624" fg:w="2"/><text x="50.3303%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="50.1605%" y="261" width="0.0803%" height="15" fill="rgb(219,205,50)" fg:x="625" fg:w="1"/><text x="50.4105%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.1605%" y="245" width="0.0803%" height="15" fill="rgb(218,175,44)" fg:x="625" fg:w="1"/><text x="50.4105%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.1605%" y="229" width="0.0803%" height="15" fill="rgb(251,84,47)" fg:x="625" fg:w="1"/><text x="50.4105%" y="239.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::new (1 samples, 0.08%)</title><rect x="50.2408%" y="309" width="0.0803%" height="15" fill="rgb(241,14,16)" fg:x="626" fg:w="1"/><text x="50.4908%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="50.2408%" y="293" width="0.0803%" height="15" fill="rgb(207,142,28)" fg:x="626" fg:w="1"/><text x="50.4908%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.2408%" y="277" width="0.0803%" height="15" fill="rgb(208,116,22)" fg:x="626" fg:w="1"/><text x="50.4908%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.3210%" y="277" width="0.0803%" height="15" fill="rgb(210,0,43)" fg:x="627" fg:w="1"/><text x="50.5710%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="50.3210%" y="261" width="0.0803%" height="15" fill="rgb(246,33,21)" fg:x="627" fg:w="1"/><text x="50.5710%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.5618%" y="245" width="0.0803%" height="15" fill="rgb(208,158,54)" fg:x="630" fg:w="1"/><text x="50.8118%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.64%)</title><rect x="50.4815%" y="261" width="0.6421%" height="15" fill="rgb(218,99,29)" fg:x="629" fg:w="8"/><text x="50.7315%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="50.6421%" y="245" width="0.4815%" height="15" fill="rgb(226,29,7)" fg:x="631" fg:w="6"/><text x="50.8921%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.0433%" y="229" width="0.0803%" height="15" fill="rgb(206,178,46)" fg:x="636" fg:w="1"/><text x="51.2933%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="51.2039%" y="197" width="0.0803%" height="15" fill="rgb(205,169,32)" fg:x="638" fg:w="1"/><text x="51.4539%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.2841%" y="197" width="0.0803%" height="15" fill="rgb(217,4,13)" fg:x="639" fg:w="1"/><text x="51.5341%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="51.3644%" y="197" width="0.0803%" height="15" fill="rgb(210,140,37)" fg:x="640" fg:w="1"/><text x="51.6144%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="51.3644%" y="181" width="0.0803%" height="15" fill="rgb(229,80,10)" fg:x="640" fg:w="1"/><text x="51.6144%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="51.3644%" y="165" width="0.0803%" height="15" fill="rgb(212,175,34)" fg:x="640" fg:w="1"/><text x="51.6144%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="51.3644%" y="149" width="0.0803%" height="15" fill="rgb(216,207,24)" fg:x="640" fg:w="1"/><text x="51.6144%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="51.4446%" y="181" width="0.0803%" height="15" fill="rgb(234,163,3)" fg:x="641" fg:w="1"/><text x="51.6946%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.4446%" y="165" width="0.0803%" height="15" fill="rgb(248,101,16)" fg:x="641" fg:w="1"/><text x="51.6946%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.4446%" y="149" width="0.0803%" height="15" fill="rgb(209,152,54)" fg:x="641" fg:w="1"/><text x="51.6946%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.4446%" y="133" width="0.0803%" height="15" fill="rgb(229,124,51)" fg:x="641" fg:w="1"/><text x="51.6946%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 3.45%)</title><rect x="51.1236%" y="245" width="3.4510%" height="15" fill="rgb(219,83,18)" fg:x="637" fg:w="43"/><text x="51.3736%" y="255.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (43 samples, 3.45%)</title><rect x="51.1236%" y="229" width="3.4510%" height="15" fill="rgb(206,29,38)" fg:x="637" fg:w="43"/><text x="51.3736%" y="239.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (43 samples, 3.45%)</title><rect x="51.1236%" y="213" width="3.4510%" height="15" fill="rgb(245,123,23)" fg:x="637" fg:w="43"/><text x="51.3736%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (39 samples, 3.13%)</title><rect x="51.4446%" y="197" width="3.1300%" height="15" fill="rgb(238,50,33)" fg:x="641" fg:w="39"/><text x="51.6946%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (38 samples, 3.05%)</title><rect x="51.5249%" y="181" width="3.0498%" height="15" fill="rgb(234,165,23)" fg:x="642" fg:w="38"/><text x="51.7749%" y="191.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (38 samples, 3.05%)</title><rect x="51.5249%" y="165" width="3.0498%" height="15" fill="rgb(211,82,31)" fg:x="642" fg:w="38"/><text x="51.7749%" y="175.50">all..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.5746%" y="245" width="0.0803%" height="15" fill="rgb(224,166,46)" fg:x="680" fg:w="1"/><text x="54.8246%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="54.6549%" y="229" width="0.1605%" height="15" fill="rgb(211,13,8)" fg:x="681" fg:w="2"/><text x="54.9049%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.7352%" y="213" width="0.0803%" height="15" fill="rgb(212,7,42)" fg:x="682" fg:w="1"/><text x="54.9852%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.7352%" y="197" width="0.0803%" height="15" fill="rgb(249,102,19)" fg:x="682" fg:w="1"/><text x="54.9852%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.7352%" y="181" width="0.0803%" height="15" fill="rgb(225,41,13)" fg:x="682" fg:w="1"/><text x="54.9852%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (47 samples, 3.77%)</title><rect x="51.1236%" y="261" width="3.7721%" height="15" fill="rgb(220,65,27)" fg:x="637" fg:w="47"/><text x="51.3736%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="54.6549%" y="245" width="0.2408%" height="15" fill="rgb(206,4,41)" fg:x="681" fg:w="3"/><text x="54.9049%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="54.8154%" y="229" width="0.0803%" height="15" fill="rgb(219,60,39)" fg:x="683" fg:w="1"/><text x="55.0654%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.8154%" y="213" width="0.0803%" height="15" fill="rgb(226,4,38)" fg:x="683" fg:w="1"/><text x="55.0654%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.8154%" y="197" width="0.0803%" height="15" fill="rgb(250,52,3)" fg:x="683" fg:w="1"/><text x="55.0654%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.8154%" y="181" width="0.0803%" height="15" fill="rgb(234,93,0)" fg:x="683" fg:w="1"/><text x="55.0654%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (57 samples, 4.57%)</title><rect x="50.4013%" y="277" width="4.5746%" height="15" fill="rgb(251,47,47)" fg:x="628" fg:w="57"/><text x="50.6513%" y="287.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="54.8957%" y="261" width="0.0803%" height="15" fill="rgb(205,166,47)" fg:x="684" fg:w="1"/><text x="55.1457%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="54.9759%" y="245" width="0.1605%" height="15" fill="rgb(231,148,8)" fg:x="685" fg:w="2"/><text x="55.2259%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="55.0562%" y="229" width="0.0803%" height="15" fill="rgb(244,185,19)" fg:x="686" fg:w="1"/><text x="55.3062%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="55.0562%" y="213" width="0.0803%" height="15" fill="rgb(224,201,45)" fg:x="686" fg:w="1"/><text x="55.3062%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="54.9759%" y="277" width="0.2408%" height="15" fill="rgb(240,77,39)" fg:x="685" fg:w="3"/><text x="55.2259%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="54.9759%" y="261" width="0.2408%" height="15" fill="rgb(248,211,29)" fg:x="685" fg:w="3"/><text x="55.2259%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="55.1364%" y="245" width="0.0803%" height="15" fill="rgb(232,214,46)" fg:x="687" fg:w="1"/><text x="55.3864%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="55.2167%" y="245" width="0.0803%" height="15" fill="rgb(213,99,54)" fg:x="688" fg:w="1"/><text x="55.4667%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (64 samples, 5.14%)</title><rect x="50.2408%" y="325" width="5.1364%" height="15" fill="rgb(240,19,46)" fg:x="626" fg:w="64"/><text x="50.4908%" y="335.50">regex:..</text></g><g><title>regex::builders::string::RegexBuilder::build (63 samples, 5.06%)</title><rect x="50.3210%" y="309" width="5.0562%" height="15" fill="rgb(243,89,10)" fg:x="627" fg:w="63"/><text x="50.5710%" y="319.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (63 samples, 5.06%)</title><rect x="50.3210%" y="293" width="5.0562%" height="15" fill="rgb(249,28,32)" fg:x="627" fg:w="63"/><text x="50.5710%" y="303.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="55.2167%" y="277" width="0.1605%" height="15" fill="rgb(253,30,9)" fg:x="688" fg:w="2"/><text x="55.4667%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="55.2167%" y="261" width="0.1605%" height="15" fill="rgb(217,2,26)" fg:x="688" fg:w="2"/><text x="55.4667%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="55.2970%" y="245" width="0.0803%" height="15" fill="rgb(220,28,10)" fg:x="689" fg:w="1"/><text x="55.5470%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="55.2970%" y="229" width="0.0803%" height="15" fill="rgb(228,167,49)" fg:x="689" fg:w="1"/><text x="55.5470%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (68 samples, 5.46%)</title><rect x="50.0000%" y="341" width="5.4575%" height="15" fill="rgb(238,212,3)" fg:x="623" fg:w="68"/><text x="50.2500%" y="351.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="55.3772%" y="325" width="0.0803%" height="15" fill="rgb(229,134,44)" fg:x="690" fg:w="1"/><text x="55.6272%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="55.3772%" y="309" width="0.0803%" height="15" fill="rgb(208,71,4)" fg:x="690" fg:w="1"/><text x="55.6272%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="55.3772%" y="293" width="0.0803%" height="15" fill="rgb(221,205,45)" fg:x="690" fg:w="1"/><text x="55.6272%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="55.3772%" y="277" width="0.0803%" height="15" fill="rgb(215,132,38)" fg:x="690" fg:w="1"/><text x="55.6272%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="55.3772%" y="261" width="0.0803%" height="15" fill="rgb(227,158,6)" fg:x="690" fg:w="1"/><text x="55.6272%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="55.3772%" y="245" width="0.0803%" height="15" fill="rgb(250,10,38)" fg:x="690" fg:w="1"/><text x="55.6272%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="55.4575%" y="325" width="0.0803%" height="15" fill="rgb(225,171,40)" fg:x="691" fg:w="1"/><text x="55.7075%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.4575%" y="309" width="0.0803%" height="15" fill="rgb(238,17,43)" fg:x="691" fg:w="1"/><text x="55.7075%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="55.5377%" y="277" width="0.0803%" height="15" fill="rgb(208,145,4)" fg:x="692" fg:w="1"/><text x="55.7877%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.5377%" y="261" width="0.0803%" height="15" fill="rgb(232,82,7)" fg:x="692" fg:w="1"/><text x="55.7877%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="55.5377%" y="245" width="0.0803%" height="15" fill="rgb(205,166,38)" fg:x="692" fg:w="1"/><text x="55.7877%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.5377%" y="229" width="0.0803%" height="15" fill="rgb(240,228,4)" fg:x="692" fg:w="1"/><text x="55.7877%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="55.5377%" y="213" width="0.0803%" height="15" fill="rgb(233,121,40)" fg:x="692" fg:w="1"/><text x="55.7877%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.6180%" y="261" width="0.1605%" height="15" fill="rgb(243,84,30)" fg:x="693" fg:w="2"/><text x="55.8680%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="55.7785%" y="261" width="0.3210%" height="15" fill="rgb(235,81,48)" fg:x="695" fg:w="4"/><text x="56.0285%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="55.7785%" y="245" width="0.3210%" height="15" fill="rgb(218,137,0)" fg:x="695" fg:w="4"/><text x="56.0285%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="56.0193%" y="229" width="0.0803%" height="15" fill="rgb(223,151,48)" fg:x="698" fg:w="1"/><text x="56.2693%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.0193%" y="213" width="0.0803%" height="15" fill="rgb(247,30,19)" fg:x="698" fg:w="1"/><text x="56.2693%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.0193%" y="197" width="0.0803%" height="15" fill="rgb(205,129,29)" fg:x="698" fg:w="1"/><text x="56.2693%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="56.0193%" y="181" width="0.0803%" height="15" fill="rgb(222,29,2)" fg:x="698" fg:w="1"/><text x="56.2693%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="56.0193%" y="165" width="0.0803%" height="15" fill="rgb(232,145,33)" fg:x="698" fg:w="1"/><text x="56.2693%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="56.1798%" y="229" width="0.1605%" height="15" fill="rgb(217,30,31)" fg:x="700" fg:w="2"/><text x="56.4298%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.40%)</title><rect x="56.0995%" y="261" width="0.4013%" height="15" fill="rgb(243,22,52)" fg:x="699" fg:w="5"/><text x="56.3495%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="56.0995%" y="245" width="0.4013%" height="15" fill="rgb(254,228,14)" fg:x="699" fg:w="5"/><text x="56.3495%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="56.3403%" y="229" width="0.1605%" height="15" fill="rgb(231,45,50)" fg:x="702" fg:w="2"/><text x="56.5903%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (12 samples, 0.96%)</title><rect x="55.6180%" y="277" width="0.9631%" height="15" fill="rgb(248,125,3)" fg:x="693" fg:w="12"/><text x="55.8680%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="56.5008%" y="261" width="0.0803%" height="15" fill="rgb(213,76,9)" fg:x="704" fg:w="1"/><text x="56.7508%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="56.5008%" y="245" width="0.0803%" height="15" fill="rgb(238,108,21)" fg:x="704" fg:w="1"/><text x="56.7508%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.5008%" y="229" width="0.0803%" height="15" fill="rgb(229,214,19)" fg:x="704" fg:w="1"/><text x="56.7508%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="56.5811%" y="229" width="0.0803%" height="15" fill="rgb(252,201,5)" fg:x="705" fg:w="1"/><text x="56.8311%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.5811%" y="213" width="0.0803%" height="15" fill="rgb(233,165,49)" fg:x="705" fg:w="1"/><text x="56.8311%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.5811%" y="197" width="0.0803%" height="15" fill="rgb(208,165,19)" fg:x="705" fg:w="1"/><text x="56.8311%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.5811%" y="181" width="0.0803%" height="15" fill="rgb(216,220,31)" fg:x="705" fg:w="1"/><text x="56.8311%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="56.6613%" y="229" width="0.0803%" height="15" fill="rgb(214,8,31)" fg:x="706" fg:w="1"/><text x="56.9113%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="56.6613%" y="213" width="0.0803%" height="15" fill="rgb(220,32,32)" fg:x="706" fg:w="1"/><text x="56.9113%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="56.6613%" y="197" width="0.0803%" height="15" fill="rgb(237,172,34)" fg:x="706" fg:w="1"/><text x="56.9113%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="56.7416%" y="229" width="0.0803%" height="15" fill="rgb(240,209,5)" fg:x="707" fg:w="1"/><text x="56.9916%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="56.7416%" y="213" width="0.0803%" height="15" fill="rgb(221,219,1)" fg:x="707" fg:w="1"/><text x="56.9916%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="56.5811%" y="277" width="0.4013%" height="15" fill="rgb(237,90,36)" fg:x="705" fg:w="5"/><text x="56.8311%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="56.5811%" y="261" width="0.4013%" height="15" fill="rgb(245,14,51)" fg:x="705" fg:w="5"/><text x="56.8311%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="56.5811%" y="245" width="0.4013%" height="15" fill="rgb(211,71,49)" fg:x="705" fg:w="5"/><text x="56.8311%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="56.8218%" y="229" width="0.1605%" height="15" fill="rgb(230,223,9)" fg:x="708" fg:w="2"/><text x="57.0718%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="56.8218%" y="213" width="0.1605%" height="15" fill="rgb(212,33,31)" fg:x="708" fg:w="2"/><text x="57.0718%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="56.8218%" y="197" width="0.1605%" height="15" fill="rgb(218,141,5)" fg:x="708" fg:w="2"/><text x="57.0718%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="56.8218%" y="181" width="0.1605%" height="15" fill="rgb(239,194,8)" fg:x="708" fg:w="2"/><text x="57.0718%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (20 samples, 1.61%)</title><rect x="55.5377%" y="325" width="1.6051%" height="15" fill="rgb(225,119,29)" fg:x="692" fg:w="20"/><text x="55.7877%" y="335.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (20 samples, 1.61%)</title><rect x="55.5377%" y="309" width="1.6051%" height="15" fill="rgb(233,32,3)" fg:x="692" fg:w="20"/><text x="55.7877%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (20 samples, 1.61%)</title><rect x="55.5377%" y="293" width="1.6051%" height="15" fill="rgb(248,126,40)" fg:x="692" fg:w="20"/><text x="55.7877%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="56.9823%" y="277" width="0.1605%" height="15" fill="rgb(213,102,53)" fg:x="710" fg:w="2"/><text x="57.2323%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="56.9823%" y="261" width="0.1605%" height="15" fill="rgb(212,69,15)" fg:x="710" fg:w="2"/><text x="57.2323%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="56.9823%" y="245" width="0.1605%" height="15" fill="rgb(253,39,34)" fg:x="710" fg:w="2"/><text x="57.2323%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="57.0626%" y="229" width="0.0803%" height="15" fill="rgb(205,189,54)" fg:x="711" fg:w="1"/><text x="57.3126%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.0626%" y="213" width="0.0803%" height="15" fill="rgb(234,229,45)" fg:x="711" fg:w="1"/><text x="57.3126%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.0626%" y="197" width="0.0803%" height="15" fill="rgb(243,79,48)" fg:x="711" fg:w="1"/><text x="57.3126%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.0626%" y="181" width="0.0803%" height="15" fill="rgb(206,71,50)" fg:x="711" fg:w="1"/><text x="57.3126%" y="191.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::props_union (1 samples, 0.08%)</title><rect x="57.1429%" y="325" width="0.0803%" height="15" fill="rgb(209,32,17)" fg:x="712" fg:w="1"/><text x="57.3929%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="57.4639%" y="245" width="0.0803%" height="15" fill="rgb(219,229,6)" fg:x="716" fg:w="1"/><text x="57.7139%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="57.4639%" y="229" width="0.0803%" height="15" fill="rgb(226,25,27)" fg:x="716" fg:w="1"/><text x="57.7139%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="57.5441%" y="245" width="0.0803%" height="15" fill="rgb(218,185,23)" fg:x="717" fg:w="1"/><text x="57.7941%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="57.2231%" y="261" width="0.4815%" height="15" fill="rgb(242,123,5)" fg:x="713" fg:w="6"/><text x="57.4731%" y="271.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="57.6244%" y="245" width="0.0803%" height="15" fill="rgb(215,53,19)" fg:x="718" fg:w="1"/><text x="57.8744%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.6244%" y="229" width="0.0803%" height="15" fill="rgb(233,20,30)" fg:x="718" fg:w="1"/><text x="57.8744%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (29 samples, 2.33%)</title><rect x="55.4575%" y="341" width="2.3274%" height="15" fill="rgb(209,67,20)" fg:x="691" fg:w="29"/><text x="55.7075%" y="351.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="57.2231%" y="325" width="0.5618%" height="15" fill="rgb(227,181,50)" fg:x="713" fg:w="7"/><text x="57.4731%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="57.2231%" y="309" width="0.5618%" height="15" fill="rgb(252,75,38)" fg:x="713" fg:w="7"/><text x="57.4731%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="57.2231%" y="293" width="0.5618%" height="15" fill="rgb(235,9,33)" fg:x="713" fg:w="7"/><text x="57.4731%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="57.2231%" y="277" width="0.5618%" height="15" fill="rgb(208,87,30)" fg:x="713" fg:w="7"/><text x="57.4731%" y="287.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="57.7047%" y="261" width="0.0803%" height="15" fill="rgb(215,199,39)" fg:x="719" fg:w="1"/><text x="57.9547%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.7047%" y="245" width="0.0803%" height="15" fill="rgb(246,208,12)" fg:x="719" fg:w="1"/><text x="57.9547%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.7047%" y="229" width="0.0803%" height="15" fill="rgb(206,195,10)" fg:x="719" fg:w="1"/><text x="57.9547%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.7047%" y="213" width="0.0803%" height="15" fill="rgb(244,1,30)" fg:x="719" fg:w="1"/><text x="57.9547%" y="223.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="57.7849%" y="341" width="0.0803%" height="15" fill="rgb(230,83,5)" fg:x="720" fg:w="1"/><text x="58.0349%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.8652%" y="309" width="0.0803%" height="15" fill="rgb(239,62,17)" fg:x="721" fg:w="1"/><text x="58.1152%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="57.8652%" y="325" width="0.2408%" height="15" fill="rgb(252,193,41)" fg:x="721" fg:w="3"/><text x="58.1152%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="57.9454%" y="309" width="0.1605%" height="15" fill="rgb(216,142,19)" fg:x="722" fg:w="2"/><text x="58.1954%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="57.9454%" y="293" width="0.1605%" height="15" fill="rgb(240,81,38)" fg:x="722" fg:w="2"/><text x="58.1954%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="57.9454%" y="277" width="0.1605%" height="15" fill="rgb(240,109,40)" fg:x="722" fg:w="2"/><text x="58.1954%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.0257%" y="261" width="0.0803%" height="15" fill="rgb(230,123,10)" fg:x="723" fg:w="1"/><text x="58.2757%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="58.1059%" y="309" width="0.0803%" height="15" fill="rgb(253,42,32)" fg:x="724" fg:w="1"/><text x="58.3559%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="58.1059%" y="293" width="0.0803%" height="15" fill="rgb(218,154,8)" fg:x="724" fg:w="1"/><text x="58.3559%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="58.1059%" y="277" width="0.0803%" height="15" fill="rgb(216,197,10)" fg:x="724" fg:w="1"/><text x="58.3559%" y="287.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 0.08%)</title><rect x="58.1059%" y="261" width="0.0803%" height="15" fill="rgb(223,107,12)" fg:x="724" fg:w="1"/><text x="58.3559%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.08%)</title><rect x="58.1059%" y="245" width="0.0803%" height="15" fill="rgb(241,174,42)" fg:x="724" fg:w="1"/><text x="58.3559%" y="255.50"></text></g><g><title>core::cmp::max (1 samples, 0.08%)</title><rect x="58.1059%" y="229" width="0.0803%" height="15" fill="rgb(231,78,20)" fg:x="724" fg:w="1"/><text x="58.3559%" y="239.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.08%)</title><rect x="58.1059%" y="213" width="0.0803%" height="15" fill="rgb(230,208,49)" fg:x="724" fg:w="1"/><text x="58.3559%" y="223.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.08%)</title><rect x="58.1059%" y="197" width="0.0803%" height="15" fill="rgb(238,11,34)" fg:x="724" fg:w="1"/><text x="58.3559%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.2665%" y="245" width="0.0803%" height="15" fill="rgb(210,130,26)" fg:x="726" fg:w="1"/><text x="58.5165%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.5875%" y="229" width="0.0803%" height="15" fill="rgb(242,131,11)" fg:x="730" fg:w="1"/><text x="58.8375%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.5875%" y="213" width="0.0803%" height="15" fill="rgb(237,38,28)" fg:x="730" fg:w="1"/><text x="58.8375%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.5875%" y="197" width="0.0803%" height="15" fill="rgb(244,180,43)" fg:x="730" fg:w="1"/><text x="58.8375%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="58.3467%" y="245" width="0.4013%" height="15" fill="rgb(214,171,19)" fg:x="727" fg:w="5"/><text x="58.5967%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.6677%" y="229" width="0.0803%" height="15" fill="rgb(252,101,45)" fg:x="731" fg:w="1"/><text x="58.9177%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (12 samples, 0.96%)</title><rect x="58.1059%" y="325" width="0.9631%" height="15" fill="rgb(211,96,33)" fg:x="724" fg:w="12"/><text x="58.3559%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.88%)</title><rect x="58.1862%" y="309" width="0.8828%" height="15" fill="rgb(207,80,25)" fg:x="725" fg:w="11"/><text x="58.4362%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.88%)</title><rect x="58.1862%" y="293" width="0.8828%" height="15" fill="rgb(225,15,35)" fg:x="725" fg:w="11"/><text x="58.4362%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.88%)</title><rect x="58.1862%" y="277" width="0.8828%" height="15" fill="rgb(214,93,43)" fg:x="725" fg:w="11"/><text x="58.4362%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.88%)</title><rect x="58.1862%" y="261" width="0.8828%" height="15" fill="rgb(248,42,37)" fg:x="725" fg:w="11"/><text x="58.4362%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (4 samples, 0.32%)</title><rect x="58.7480%" y="245" width="0.3210%" height="15" fill="rgb(217,135,32)" fg:x="732" fg:w="4"/><text x="58.9980%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="58.8283%" y="229" width="0.2408%" height="15" fill="rgb(216,74,28)" fg:x="733" fg:w="3"/><text x="59.0783%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="58.9085%" y="213" width="0.1605%" height="15" fill="rgb(247,108,16)" fg:x="734" fg:w="2"/><text x="59.1585%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="58.9085%" y="197" width="0.1605%" height="15" fill="rgb(205,219,30)" fg:x="734" fg:w="2"/><text x="59.1585%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="59.0690%" y="277" width="0.1605%" height="15" fill="rgb(241,122,9)" fg:x="736" fg:w="2"/><text x="59.3190%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.1493%" y="261" width="0.0803%" height="15" fill="rgb(216,148,50)" fg:x="737" fg:w="1"/><text x="59.3993%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.1493%" y="245" width="0.0803%" height="15" fill="rgb(226,154,2)" fg:x="737" fg:w="1"/><text x="59.3993%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.3098%" y="245" width="0.0803%" height="15" fill="rgb(220,128,1)" fg:x="739" fg:w="1"/><text x="59.5598%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="59.2295%" y="277" width="0.3210%" height="15" fill="rgb(245,185,29)" fg:x="738" fg:w="4"/><text x="59.4795%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="59.2295%" y="261" width="0.3210%" height="15" fill="rgb(243,161,2)" fg:x="738" fg:w="4"/><text x="59.4795%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="59.3900%" y="245" width="0.1605%" height="15" fill="rgb(249,215,17)" fg:x="740" fg:w="2"/><text x="59.6400%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="59.3900%" y="229" width="0.1605%" height="15" fill="rgb(237,67,11)" fg:x="740" fg:w="2"/><text x="59.6400%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="59.4703%" y="213" width="0.0803%" height="15" fill="rgb(239,17,24)" fg:x="741" fg:w="1"/><text x="59.7203%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="59.5506%" y="245" width="0.1605%" height="15" fill="rgb(215,97,29)" fg:x="742" fg:w="2"/><text x="59.8006%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="59.5506%" y="261" width="0.4815%" height="15" fill="rgb(253,228,42)" fg:x="742" fg:w="6"/><text x="59.8006%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="59.7111%" y="245" width="0.3210%" height="15" fill="rgb(240,85,2)" fg:x="744" fg:w="4"/><text x="59.9611%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.9518%" y="229" width="0.0803%" height="15" fill="rgb(214,155,4)" fg:x="747" fg:w="1"/><text x="60.2018%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="60.0321%" y="261" width="0.0803%" height="15" fill="rgb(247,120,22)" fg:x="748" fg:w="1"/><text x="60.2821%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="60.1124%" y="261" width="0.0803%" height="15" fill="rgb(211,208,6)" fg:x="749" fg:w="1"/><text x="60.3624%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="60.1124%" y="245" width="0.0803%" height="15" fill="rgb(235,99,41)" fg:x="749" fg:w="1"/><text x="60.3624%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="60.5136%" y="229" width="0.0803%" height="15" fill="rgb(223,28,8)" fg:x="754" fg:w="1"/><text x="60.7636%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.5136%" y="213" width="0.0803%" height="15" fill="rgb(212,71,20)" fg:x="754" fg:w="1"/><text x="60.7636%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.5136%" y="197" width="0.0803%" height="15" fill="rgb(206,85,3)" fg:x="754" fg:w="1"/><text x="60.7636%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.5136%" y="181" width="0.0803%" height="15" fill="rgb(244,180,11)" fg:x="754" fg:w="1"/><text x="60.7636%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (9 samples, 0.72%)</title><rect x="60.5939%" y="229" width="0.7223%" height="15" fill="rgb(223,16,21)" fg:x="755" fg:w="9"/><text x="60.8439%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (8 samples, 0.64%)</title><rect x="60.6742%" y="213" width="0.6421%" height="15" fill="rgb(238,85,42)" fg:x="756" fg:w="8"/><text x="60.9242%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.40%)</title><rect x="60.9149%" y="197" width="0.4013%" height="15" fill="rgb(205,85,8)" fg:x="759" fg:w="5"/><text x="61.1649%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="60.9149%" y="181" width="0.4013%" height="15" fill="rgb(217,190,15)" fg:x="759" fg:w="5"/><text x="61.1649%" y="191.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="60.9149%" y="165" width="0.4013%" height="15" fill="rgb(243,192,23)" fg:x="759" fg:w="5"/><text x="61.1649%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (8 samples, 0.64%)</title><rect x="61.3162%" y="229" width="0.6421%" height="15" fill="rgb(223,220,37)" fg:x="764" fg:w="8"/><text x="61.5662%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (8 samples, 0.64%)</title><rect x="61.3162%" y="213" width="0.6421%" height="15" fill="rgb(208,41,17)" fg:x="764" fg:w="8"/><text x="61.5662%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (8 samples, 0.64%)</title><rect x="61.3162%" y="197" width="0.6421%" height="15" fill="rgb(224,188,7)" fg:x="764" fg:w="8"/><text x="61.5662%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (23 samples, 1.85%)</title><rect x="60.1926%" y="261" width="1.8459%" height="15" fill="rgb(236,16,50)" fg:x="750" fg:w="23"/><text x="60.4426%" y="271.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (22 samples, 1.77%)</title><rect x="60.2729%" y="245" width="1.7657%" height="15" fill="rgb(238,6,24)" fg:x="751" fg:w="22"/><text x="60.5229%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="61.9583%" y="229" width="0.0803%" height="15" fill="rgb(253,67,45)" fg:x="772" fg:w="1"/><text x="62.2083%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.9583%" y="213" width="0.0803%" height="15" fill="rgb(210,89,32)" fg:x="772" fg:w="1"/><text x="62.2083%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="62.0385%" y="261" width="0.0803%" height="15" fill="rgb(208,89,9)" fg:x="773" fg:w="1"/><text x="62.2885%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="62.0385%" y="245" width="0.0803%" height="15" fill="rgb(222,180,44)" fg:x="773" fg:w="1"/><text x="62.2885%" y="255.50"></text></g><g><title>regex_syntax::parser::ParserBuilder::new (1 samples, 0.08%)</title><rect x="62.0385%" y="229" width="0.0803%" height="15" fill="rgb(250,181,46)" fg:x="773" fg:w="1"/><text x="62.2885%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="62.2793%" y="197" width="0.0803%" height="15" fill="rgb(210,190,26)" fg:x="776" fg:w="1"/><text x="62.5293%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="62.8411%" y="149" width="0.1605%" height="15" fill="rgb(253,49,13)" fg:x="783" fg:w="2"/><text x="63.0911%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="63.0016%" y="149" width="0.2408%" height="15" fill="rgb(240,184,42)" fg:x="785" fg:w="3"/><text x="63.2516%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="63.0819%" y="133" width="0.1605%" height="15" fill="rgb(246,59,37)" fg:x="786" fg:w="2"/><text x="63.3319%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.0819%" y="117" width="0.1605%" height="15" fill="rgb(207,134,54)" fg:x="786" fg:w="2"/><text x="63.3319%" y="127.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="63.0819%" y="101" width="0.1605%" height="15" fill="rgb(250,122,24)" fg:x="786" fg:w="2"/><text x="63.3319%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="63.2424%" y="149" width="0.0803%" height="15" fill="rgb(239,206,3)" fg:x="788" fg:w="1"/><text x="63.4924%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="63.4029%" y="117" width="0.1605%" height="15" fill="rgb(253,220,32)" fg:x="790" fg:w="2"/><text x="63.6529%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.4029%" y="101" width="0.1605%" height="15" fill="rgb(209,217,48)" fg:x="790" fg:w="2"/><text x="63.6529%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="63.4029%" y="85" width="0.1605%" height="15" fill="rgb(242,91,39)" fg:x="790" fg:w="2"/><text x="63.6529%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="63.3226%" y="149" width="0.4815%" height="15" fill="rgb(228,4,13)" fg:x="789" fg:w="6"/><text x="63.5726%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="63.4029%" y="133" width="0.4013%" height="15" fill="rgb(223,133,4)" fg:x="790" fg:w="5"/><text x="63.6529%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="63.5634%" y="117" width="0.2408%" height="15" fill="rgb(215,105,30)" fg:x="792" fg:w="3"/><text x="63.8134%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="63.8042%" y="149" width="0.0803%" height="15" fill="rgb(230,9,4)" fg:x="795" fg:w="1"/><text x="64.0542%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="63.8042%" y="133" width="0.0803%" height="15" fill="rgb(248,15,2)" fg:x="795" fg:w="1"/><text x="64.0542%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="63.8042%" y="117" width="0.0803%" height="15" fill="rgb(208,210,22)" fg:x="795" fg:w="1"/><text x="64.0542%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.8844%" y="117" width="0.0803%" height="15" fill="rgb(208,112,41)" fg:x="796" fg:w="1"/><text x="64.1344%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (28 samples, 2.25%)</title><rect x="63.8844%" y="149" width="2.2472%" height="15" fill="rgb(232,83,14)" fg:x="796" fg:w="28"/><text x="64.1344%" y="159.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (28 samples, 2.25%)</title><rect x="63.8844%" y="133" width="2.2472%" height="15" fill="rgb(229,65,11)" fg:x="796" fg:w="28"/><text x="64.1344%" y="143.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (27 samples, 2.17%)</title><rect x="63.9647%" y="117" width="2.1669%" height="15" fill="rgb(228,126,24)" fg:x="797" fg:w="27"/><text x="64.2147%" y="127.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="66.1316%" y="149" width="0.2408%" height="15" fill="rgb(218,66,33)" fg:x="824" fg:w="3"/><text x="66.3816%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.2921%" y="133" width="0.0803%" height="15" fill="rgb(251,49,52)" fg:x="826" fg:w="1"/><text x="66.5421%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="66.3724%" y="149" width="0.0803%" height="15" fill="rgb(219,46,37)" fg:x="827" fg:w="1"/><text x="66.6224%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 4.49%)</title><rect x="62.1188%" y="245" width="4.4944%" height="15" fill="rgb(213,53,49)" fg:x="774" fg:w="56"/><text x="62.3688%" y="255.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (56 samples, 4.49%)</title><rect x="62.1188%" y="229" width="4.4944%" height="15" fill="rgb(214,134,1)" fg:x="774" fg:w="56"/><text x="62.3688%" y="239.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (56 samples, 4.49%)</title><rect x="62.1188%" y="213" width="4.4944%" height="15" fill="rgb(208,139,43)" fg:x="774" fg:w="56"/><text x="62.3688%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.25%)</title><rect x="62.3596%" y="197" width="4.2536%" height="15" fill="rgb(231,105,35)" fg:x="777" fg:w="53"/><text x="62.6096%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (53 samples, 4.25%)</title><rect x="62.3596%" y="181" width="4.2536%" height="15" fill="rgb(247,189,9)" fg:x="777" fg:w="53"/><text x="62.6096%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (53 samples, 4.25%)</title><rect x="62.3596%" y="165" width="4.2536%" height="15" fill="rgb(252,48,51)" fg:x="777" fg:w="53"/><text x="62.6096%" y="175.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="66.4526%" y="149" width="0.1605%" height="15" fill="rgb(209,121,1)" fg:x="828" fg:w="2"/><text x="66.7026%" y="159.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="66.9342%" y="229" width="0.0803%" height="15" fill="rgb(231,40,26)" fg:x="834" fg:w="1"/><text x="67.1842%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.40%)</title><rect x="67.0144%" y="229" width="0.4013%" height="15" fill="rgb(251,8,13)" fg:x="835" fg:w="5"/><text x="67.2644%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.3355%" y="213" width="0.0803%" height="15" fill="rgb(231,110,2)" fg:x="839" fg:w="1"/><text x="67.5855%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.3355%" y="197" width="0.0803%" height="15" fill="rgb(216,153,22)" fg:x="839" fg:w="1"/><text x="67.5855%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.3355%" y="181" width="0.0803%" height="15" fill="rgb(249,116,49)" fg:x="839" fg:w="1"/><text x="67.5855%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="67.4157%" y="229" width="0.4013%" height="15" fill="rgb(230,89,2)" fg:x="840" fg:w="5"/><text x="67.6657%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="67.8170%" y="229" width="0.2408%" height="15" fill="rgb(231,125,23)" fg:x="845" fg:w="3"/><text x="68.0670%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (75 samples, 6.02%)</title><rect x="62.1188%" y="261" width="6.0193%" height="15" fill="rgb(212,217,18)" fg:x="774" fg:w="75"/><text x="62.3688%" y="271.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (19 samples, 1.52%)</title><rect x="66.6132%" y="245" width="1.5249%" height="15" fill="rgb(210,21,33)" fg:x="830" fg:w="19"/><text x="66.8632%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="68.0578%" y="229" width="0.0803%" height="15" fill="rgb(241,97,9)" fg:x="848" fg:w="1"/><text x="68.3078%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.0578%" y="213" width="0.0803%" height="15" fill="rgb(221,35,31)" fg:x="848" fg:w="1"/><text x="68.3078%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.0578%" y="197" width="0.0803%" height="15" fill="rgb(251,23,23)" fg:x="848" fg:w="1"/><text x="68.3078%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.0578%" y="181" width="0.0803%" height="15" fill="rgb(227,165,2)" fg:x="848" fg:w="1"/><text x="68.3078%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (108 samples, 8.67%)</title><rect x="59.5506%" y="277" width="8.6677%" height="15" fill="rgb(242,24,2)" fg:x="742" fg:w="108"/><text x="59.8006%" y="287.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="68.1380%" y="261" width="0.0803%" height="15" fill="rgb(242,138,51)" fg:x="849" fg:w="1"/><text x="68.3880%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="68.1380%" y="245" width="0.0803%" height="15" fill="rgb(220,219,5)" fg:x="849" fg:w="1"/><text x="68.3880%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="68.1380%" y="229" width="0.0803%" height="15" fill="rgb(247,53,29)" fg:x="849" fg:w="1"/><text x="68.3880%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.1380%" y="213" width="0.0803%" height="15" fill="rgb(233,43,39)" fg:x="849" fg:w="1"/><text x="68.3880%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.1380%" y="197" width="0.0803%" height="15" fill="rgb(230,128,54)" fg:x="849" fg:w="1"/><text x="68.3880%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="68.2183%" y="245" width="0.2408%" height="15" fill="rgb(218,20,12)" fg:x="850" fg:w="3"/><text x="68.4683%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="68.2183%" y="229" width="0.2408%" height="15" fill="rgb(206,51,14)" fg:x="850" fg:w="3"/><text x="68.4683%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="68.2986%" y="213" width="0.1605%" height="15" fill="rgb(223,16,35)" fg:x="851" fg:w="2"/><text x="68.5486%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="68.2986%" y="197" width="0.1605%" height="15" fill="rgb(226,165,37)" fg:x="851" fg:w="2"/><text x="68.5486%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="68.2986%" y="181" width="0.1605%" height="15" fill="rgb(240,26,21)" fg:x="851" fg:w="2"/><text x="68.5486%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="68.2183%" y="277" width="0.3210%" height="15" fill="rgb(240,72,46)" fg:x="850" fg:w="4"/><text x="68.4683%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="68.2183%" y="261" width="0.3210%" height="15" fill="rgb(211,33,41)" fg:x="850" fg:w="4"/><text x="68.4683%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="68.4591%" y="245" width="0.0803%" height="15" fill="rgb(224,157,46)" fg:x="853" fg:w="1"/><text x="68.7091%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (250 samples, 20.06%)</title><rect x="48.6356%" y="421" width="20.0642%" height="15" fill="rgb(223,59,19)" fg:x="606" fg:w="250"/><text x="48.8856%" y="431.50">&lt;&amp;kernel::model::EntityPtr as pl..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (234 samples, 18.78%)</title><rect x="49.9197%" y="405" width="18.7801%" height="15" fill="rgb(239,187,1)" fg:x="622" fg:w="234"/><text x="50.1697%" y="415.50">plugins_core::looking::model:..</text></g><g><title>indefinite::indefinite (234 samples, 18.78%)</title><rect x="49.9197%" y="389" width="18.7801%" height="15" fill="rgb(226,95,9)" fg:x="622" fg:w="234"/><text x="50.1697%" y="399.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (234 samples, 18.78%)</title><rect x="49.9197%" y="373" width="18.7801%" height="15" fill="rgb(234,61,54)" fg:x="622" fg:w="234"/><text x="50.1697%" y="383.50">indefinite::methods::indefini..</text></g><g><title>indefinite::methods::apply_rules (234 samples, 18.78%)</title><rect x="49.9197%" y="357" width="18.7801%" height="15" fill="rgb(205,209,47)" fg:x="622" fg:w="234"/><text x="50.1697%" y="367.50">indefinite::methods::apply_ru..</text></g><g><title>indefinite::rules::number::Number::check (135 samples, 10.83%)</title><rect x="57.8652%" y="341" width="10.8347%" height="15" fill="rgb(228,7,43)" fg:x="721" fg:w="135"/><text x="58.1152%" y="351.50">indefinite::rule..</text></g><g><title>regex::regex::string::Regex::new (120 samples, 9.63%)</title><rect x="59.0690%" y="325" width="9.6308%" height="15" fill="rgb(240,217,52)" fg:x="736" fg:w="120"/><text x="59.3190%" y="335.50">regex::regex::..</text></g><g><title>regex::builders::string::RegexBuilder::build (120 samples, 9.63%)</title><rect x="59.0690%" y="309" width="9.6308%" height="15" fill="rgb(211,178,21)" fg:x="736" fg:w="120"/><text x="59.3190%" y="319.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (120 samples, 9.63%)</title><rect x="59.0690%" y="293" width="9.6308%" height="15" fill="rgb(205,25,34)" fg:x="736" fg:w="120"/><text x="59.3190%" y="303.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="68.5393%" y="277" width="0.1605%" height="15" fill="rgb(209,57,11)" fg:x="854" fg:w="2"/><text x="68.7893%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="68.5393%" y="261" width="0.1605%" height="15" fill="rgb(221,99,2)" fg:x="854" fg:w="2"/><text x="68.7893%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="68.5393%" y="245" width="0.1605%" height="15" fill="rgb(232,79,22)" fg:x="854" fg:w="2"/><text x="68.7893%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="68.5393%" y="229" width="0.1605%" height="15" fill="rgb(221,145,32)" fg:x="854" fg:w="2"/><text x="68.7893%" y="239.50"></text></g><g><title>plugins_core::tools::contained_by (1 samples, 0.08%)</title><rect x="68.6998%" y="373" width="0.0803%" height="15" fill="rgb(236,133,36)" fg:x="856" fg:w="1"/><text x="68.9498%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="68.6998%" y="357" width="0.0803%" height="15" fill="rgb(208,224,44)" fg:x="856" fg:w="1"/><text x="68.9498%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.6998%" y="341" width="0.0803%" height="15" fill="rgb(235,143,15)" fg:x="856" fg:w="1"/><text x="68.9498%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.7801%" y="341" width="0.0803%" height="15" fill="rgb(249,83,27)" fg:x="857" fg:w="1"/><text x="69.0301%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.7801%" y="325" width="0.0803%" height="15" fill="rgb(238,226,19)" fg:x="857" fg:w="1"/><text x="69.0301%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="68.7801%" y="357" width="0.3210%" height="15" fill="rgb(226,206,27)" fg:x="857" fg:w="4"/><text x="69.0301%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="68.8604%" y="341" width="0.2408%" height="15" fill="rgb(251,182,9)" fg:x="858" fg:w="3"/><text x="69.1104%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.8604%" y="325" width="0.2408%" height="15" fill="rgb(212,140,41)" fg:x="858" fg:w="3"/><text x="69.1104%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="68.9406%" y="309" width="0.1605%" height="15" fill="rgb(220,106,18)" fg:x="859" fg:w="2"/><text x="69.1906%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="68.9406%" y="293" width="0.1605%" height="15" fill="rgb(252,46,41)" fg:x="859" fg:w="2"/><text x="69.1906%" y="303.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="68.9406%" y="277" width="0.1605%" height="15" fill="rgb(209,222,15)" fg:x="859" fg:w="2"/><text x="69.1906%" y="287.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.9406%" y="261" width="0.1605%" height="15" fill="rgb(233,83,50)" fg:x="859" fg:w="2"/><text x="69.1906%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.9406%" y="245" width="0.1605%" height="15" fill="rgb(205,212,0)" fg:x="859" fg:w="2"/><text x="69.1906%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.9406%" y="229" width="0.1605%" height="15" fill="rgb(235,117,51)" fg:x="859" fg:w="2"/><text x="69.1906%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.0209%" y="213" width="0.0803%" height="15" fill="rgb(233,133,48)" fg:x="860" fg:w="1"/><text x="69.2709%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.0209%" y="197" width="0.0803%" height="15" fill="rgb(219,3,2)" fg:x="860" fg:w="1"/><text x="69.2709%" y="207.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (6 samples, 0.48%)</title><rect x="68.6998%" y="389" width="0.4815%" height="15" fill="rgb(225,80,52)" fg:x="856" fg:w="6"/><text x="68.9498%" y="399.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.40%)</title><rect x="68.7801%" y="373" width="0.4013%" height="15" fill="rgb(235,195,42)" fg:x="857" fg:w="5"/><text x="69.0301%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="69.1011%" y="357" width="0.0803%" height="15" fill="rgb(240,207,46)" fg:x="861" fg:w="1"/><text x="69.3511%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.1011%" y="341" width="0.0803%" height="15" fill="rgb(236,112,50)" fg:x="861" fg:w="1"/><text x="69.3511%" y="351.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="69.1011%" y="325" width="0.0803%" height="15" fill="rgb(249,151,27)" fg:x="861" fg:w="1"/><text x="69.3511%" y="335.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="69.1011%" y="309" width="0.0803%" height="15" fill="rgb(253,223,52)" fg:x="861" fg:w="1"/><text x="69.3511%" y="319.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="69.1011%" y="293" width="0.0803%" height="15" fill="rgb(215,55,33)" fg:x="861" fg:w="1"/><text x="69.3511%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.2616%" y="341" width="0.0803%" height="15" fill="rgb(207,24,17)" fg:x="863" fg:w="1"/><text x="69.5116%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="69.2616%" y="325" width="0.0803%" height="15" fill="rgb(218,169,32)" fg:x="863" fg:w="1"/><text x="69.5116%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2616%" y="309" width="0.0803%" height="15" fill="rgb(209,210,6)" fg:x="863" fg:w="1"/><text x="69.5116%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (9 samples, 0.72%)</title><rect x="68.6998%" y="421" width="0.7223%" height="15" fill="rgb(225,208,8)" fg:x="856" fg:w="9"/><text x="68.9498%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (9 samples, 0.72%)</title><rect x="68.6998%" y="405" width="0.7223%" height="15" fill="rgb(238,14,32)" fg:x="856" fg:w="9"/><text x="68.9498%" y="415.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (3 samples, 0.24%)</title><rect x="69.1814%" y="389" width="0.2408%" height="15" fill="rgb(211,137,3)" fg:x="862" fg:w="3"/><text x="69.4314%" y="399.50"></text></g><g><title>plugins_core::finding::matches_description (3 samples, 0.24%)</title><rect x="69.1814%" y="373" width="0.2408%" height="15" fill="rgb(207,171,19)" fg:x="862" fg:w="3"/><text x="69.4314%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::name (2 samples, 0.16%)</title><rect x="69.2616%" y="357" width="0.1605%" height="15" fill="rgb(250,80,8)" fg:x="863" fg:w="2"/><text x="69.5116%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="69.3419%" y="341" width="0.0803%" height="15" fill="rgb(209,103,53)" fg:x="864" fg:w="1"/><text x="69.5919%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.3419%" y="325" width="0.0803%" height="15" fill="rgb(233,198,10)" fg:x="864" fg:w="1"/><text x="69.5919%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.5827%" y="245" width="0.1605%" height="15" fill="rgb(236,125,25)" fg:x="867" fg:w="2"/><text x="69.8327%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.6629%" y="229" width="0.0803%" height="15" fill="rgb(254,182,48)" fg:x="868" fg:w="1"/><text x="69.9129%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="69.5827%" y="277" width="0.2408%" height="15" fill="rgb(216,108,44)" fg:x="867" fg:w="3"/><text x="69.8327%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="69.5827%" y="261" width="0.2408%" height="15" fill="rgb(222,72,39)" fg:x="867" fg:w="3"/><text x="69.8327%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7432%" y="245" width="0.0803%" height="15" fill="rgb(252,70,39)" fg:x="869" fg:w="1"/><text x="69.9932%" y="255.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (4 samples, 0.32%)</title><rect x="69.5827%" y="293" width="0.3210%" height="15" fill="rgb(243,99,34)" fg:x="867" fg:w="4"/><text x="69.8327%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8234%" y="277" width="0.0803%" height="15" fill="rgb(252,109,12)" fg:x="870" fg:w="1"/><text x="70.0734%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8234%" y="261" width="0.0803%" height="15" fill="rgb(211,186,10)" fg:x="870" fg:w="1"/><text x="70.0734%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.8234%" y="245" width="0.0803%" height="15" fill="rgb(246,90,8)" fg:x="870" fg:w="1"/><text x="70.0734%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.8234%" y="229" width="0.0803%" height="15" fill="rgb(226,91,24)" fg:x="870" fg:w="1"/><text x="70.0734%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.8234%" y="213" width="0.0803%" height="15" fill="rgb(216,28,44)" fg:x="870" fg:w="1"/><text x="70.0734%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.8234%" y="197" width="0.0803%" height="15" fill="rgb(229,36,0)" fg:x="870" fg:w="1"/><text x="70.0734%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.8234%" y="181" width="0.0803%" height="15" fill="rgb(245,97,18)" fg:x="870" fg:w="1"/><text x="70.0734%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.8234%" y="165" width="0.0803%" height="15" fill="rgb(241,97,54)" fg:x="870" fg:w="1"/><text x="70.0734%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.8234%" y="149" width="0.0803%" height="15" fill="rgb(234,125,17)" fg:x="870" fg:w="1"/><text x="70.0734%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.8234%" y="133" width="0.0803%" height="15" fill="rgb(228,172,39)" fg:x="870" fg:w="1"/><text x="70.0734%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.8234%" y="117" width="0.0803%" height="15" fill="rgb(227,169,1)" fg:x="870" fg:w="1"/><text x="70.0734%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8234%" y="101" width="0.0803%" height="15" fill="rgb(206,13,35)" fg:x="870" fg:w="1"/><text x="70.0734%" y="111.50"></text></g><g><title>&lt;plugins_rune::runner::RuneReturn as plugins_rune::PerformTagged&gt;::handle (1 samples, 0.08%)</title><rect x="69.9037%" y="293" width="0.0803%" height="15" fill="rgb(211,117,30)" fg:x="871" fg:w="1"/><text x="70.1537%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.9037%" y="277" width="0.0803%" height="15" fill="rgb(230,198,4)" fg:x="871" fg:w="1"/><text x="70.1537%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.1445%" y="229" width="0.0803%" height="15" fill="rgb(213,87,54)" fg:x="874" fg:w="1"/><text x="70.3945%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (11 samples, 0.88%)</title><rect x="69.4222%" y="405" width="0.8828%" height="15" fill="rgb(248,43,22)" fg:x="865" fg:w="11"/><text x="69.6722%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (11 samples, 0.88%)</title><rect x="69.4222%" y="389" width="0.8828%" height="15" fill="rgb(213,175,48)" fg:x="865" fg:w="11"/><text x="69.6722%" y="399.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (10 samples, 0.80%)</title><rect x="69.5024%" y="373" width="0.8026%" height="15" fill="rgb(252,55,9)" fg:x="866" fg:w="10"/><text x="69.7524%" y="383.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (10 samples, 0.80%)</title><rect x="69.5024%" y="357" width="0.8026%" height="15" fill="rgb(231,72,33)" fg:x="866" fg:w="10"/><text x="69.7524%" y="367.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (9 samples, 0.72%)</title><rect x="69.5827%" y="341" width="0.7223%" height="15" fill="rgb(213,2,54)" fg:x="867" fg:w="9"/><text x="69.8327%" y="351.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (9 samples, 0.72%)</title><rect x="69.5827%" y="325" width="0.7223%" height="15" fill="rgb(208,88,25)" fg:x="867" fg:w="9"/><text x="69.8327%" y="335.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (9 samples, 0.72%)</title><rect x="69.5827%" y="309" width="0.7223%" height="15" fill="rgb(215,117,13)" fg:x="867" fg:w="9"/><text x="69.8327%" y="319.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (4 samples, 0.32%)</title><rect x="69.9839%" y="293" width="0.3210%" height="15" fill="rgb(243,147,21)" fg:x="872" fg:w="4"/><text x="70.2339%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="69.9839%" y="277" width="0.3210%" height="15" fill="rgb(208,215,36)" fg:x="872" fg:w="4"/><text x="70.2339%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="69.9839%" y="261" width="0.3210%" height="15" fill="rgb(238,187,24)" fg:x="872" fg:w="4"/><text x="70.2339%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="70.0642%" y="245" width="0.2408%" height="15" fill="rgb(214,173,11)" fg:x="873" fg:w="3"/><text x="70.3142%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.2247%" y="229" width="0.0803%" height="15" fill="rgb(222,71,20)" fg:x="875" fg:w="1"/><text x="70.4747%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3050%" y="357" width="0.0803%" height="15" fill="rgb(242,125,4)" fg:x="876" fg:w="1"/><text x="70.5550%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (2 samples, 0.16%)</title><rect x="70.3050%" y="389" width="0.1605%" height="15" fill="rgb(217,101,52)" fg:x="876" fg:w="2"/><text x="70.5550%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="70.3050%" y="373" width="0.1605%" height="15" fill="rgb(223,2,50)" fg:x="876" fg:w="2"/><text x="70.5550%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="70.3852%" y="357" width="0.0803%" height="15" fill="rgb(225,197,9)" fg:x="877" fg:w="1"/><text x="70.6352%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.3852%" y="341" width="0.0803%" height="15" fill="rgb(234,76,27)" fg:x="877" fg:w="1"/><text x="70.6352%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.3852%" y="325" width="0.0803%" height="15" fill="rgb(213,161,26)" fg:x="877" fg:w="1"/><text x="70.6352%" y="335.50"></text></g><g><title>plugins_core::library::actions::reply_ok (15 samples, 1.20%)</title><rect x="69.4222%" y="421" width="1.2039%" height="15" fill="rgb(210,228,2)" fg:x="865" fg:w="15"/><text x="69.6722%" y="431.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.32%)</title><rect x="70.3050%" y="405" width="0.3210%" height="15" fill="rgb(235,4,16)" fg:x="876" fg:w="4"/><text x="70.5550%" y="415.50"></text></g><g><title>replies::identifier_to_key (2 samples, 0.16%)</title><rect x="70.4655%" y="389" width="0.1605%" height="15" fill="rgb(235,83,42)" fg:x="878" fg:w="2"/><text x="70.7155%" y="399.50"></text></g><g><title>&lt;core::char::ToUppercase as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.08%)</title><rect x="70.5457%" y="373" width="0.0803%" height="15" fill="rgb(207,116,39)" fg:x="879" fg:w="1"/><text x="70.7957%" y="383.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="70.7063%" y="405" width="0.0803%" height="15" fill="rgb(253,206,9)" fg:x="881" fg:w="1"/><text x="70.9563%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.7063%" y="389" width="0.0803%" height="15" fill="rgb(234,32,47)" fg:x="881" fg:w="1"/><text x="70.9563%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7865%" y="341" width="0.0803%" height="15" fill="rgb(247,40,39)" fg:x="882" fg:w="1"/><text x="71.0365%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="70.7865%" y="373" width="0.1605%" height="15" fill="rgb(236,199,13)" fg:x="882" fg:w="2"/><text x="71.0365%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="70.7865%" y="357" width="0.1605%" height="15" fill="rgb(240,127,44)" fg:x="882" fg:w="2"/><text x="71.0365%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.8668%" y="341" width="0.0803%" height="15" fill="rgb(248,220,47)" fg:x="883" fg:w="1"/><text x="71.1168%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="70.7865%" y="405" width="0.2408%" height="15" fill="rgb(240,78,9)" fg:x="882" fg:w="3"/><text x="71.0365%" y="415.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="70.7865%" y="389" width="0.2408%" height="15" fill="rgb(245,119,5)" fg:x="882" fg:w="3"/><text x="71.0365%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.9470%" y="373" width="0.0803%" height="15" fill="rgb(238,175,31)" fg:x="884" fg:w="1"/><text x="71.1970%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.9470%" y="357" width="0.0803%" height="15" fill="rgb(232,140,42)" fg:x="884" fg:w="1"/><text x="71.1970%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.9470%" y="341" width="0.0803%" height="15" fill="rgb(218,179,7)" fg:x="884" fg:w="1"/><text x="71.1970%" y="351.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="71.0273%" y="405" width="0.0803%" height="15" fill="rgb(232,79,27)" fg:x="885" fg:w="1"/><text x="71.2773%" y="415.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="71.0273%" y="389" width="0.0803%" height="15" fill="rgb(247,11,19)" fg:x="885" fg:w="1"/><text x="71.2773%" y="399.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="71.1075%" y="389" width="0.0803%" height="15" fill="rgb(216,171,54)" fg:x="886" fg:w="1"/><text x="71.3575%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="71.1075%" y="405" width="0.2408%" height="15" fill="rgb(233,158,36)" fg:x="886" fg:w="3"/><text x="71.3575%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="71.1878%" y="389" width="0.1605%" height="15" fill="rgb(215,48,47)" fg:x="887" fg:w="2"/><text x="71.4378%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="71.2681%" y="373" width="0.0803%" height="15" fill="rgb(230,223,15)" fg:x="888" fg:w="1"/><text x="71.5181%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.2681%" y="357" width="0.0803%" height="15" fill="rgb(234,49,19)" fg:x="888" fg:w="1"/><text x="71.5181%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="71.2681%" y="341" width="0.0803%" height="15" fill="rgb(232,89,25)" fg:x="888" fg:w="1"/><text x="71.5181%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.2681%" y="325" width="0.0803%" height="15" fill="rgb(237,206,28)" fg:x="888" fg:w="1"/><text x="71.5181%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="71.3483%" y="389" width="0.1605%" height="15" fill="rgb(249,68,37)" fg:x="889" fg:w="2"/><text x="71.5983%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.3483%" y="373" width="0.1605%" height="15" fill="rgb(226,99,43)" fg:x="889" fg:w="2"/><text x="71.5983%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.3483%" y="357" width="0.1605%" height="15" fill="rgb(216,46,28)" fg:x="889" fg:w="2"/><text x="71.5983%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.4286%" y="341" width="0.0803%" height="15" fill="rgb(216,33,9)" fg:x="890" fg:w="1"/><text x="71.6786%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4286%" y="325" width="0.0803%" height="15" fill="rgb(216,129,4)" fg:x="890" fg:w="1"/><text x="71.6786%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.4286%" y="309" width="0.0803%" height="15" fill="rgb(216,106,3)" fg:x="890" fg:w="1"/><text x="71.6786%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4286%" y="293" width="0.0803%" height="15" fill="rgb(217,79,45)" fg:x="890" fg:w="1"/><text x="71.6786%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.4286%" y="277" width="0.0803%" height="15" fill="rgb(239,98,13)" fg:x="890" fg:w="1"/><text x="71.6786%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.4286%" y="261" width="0.0803%" height="15" fill="rgb(221,115,4)" fg:x="890" fg:w="1"/><text x="71.6786%" y="271.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (3 samples, 0.24%)</title><rect x="71.3483%" y="405" width="0.2408%" height="15" fill="rgb(215,85,0)" fg:x="889" fg:w="3"/><text x="71.5983%" y="415.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (1 samples, 0.08%)</title><rect x="71.5088%" y="389" width="0.0803%" height="15" fill="rgb(230,62,15)" fg:x="891" fg:w="1"/><text x="71.7588%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.5088%" y="373" width="0.0803%" height="15" fill="rgb(247,162,2)" fg:x="891" fg:w="1"/><text x="71.7588%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="71.5088%" y="357" width="0.0803%" height="15" fill="rgb(212,112,32)" fg:x="891" fg:w="1"/><text x="71.7588%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.5891%" y="389" width="0.0803%" height="15" fill="rgb(216,137,9)" fg:x="892" fg:w="1"/><text x="71.8391%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6693%" y="309" width="0.0803%" height="15" fill="rgb(250,149,33)" fg:x="893" fg:w="1"/><text x="71.9193%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="71.6693%" y="325" width="0.1605%" height="15" fill="rgb(246,124,31)" fg:x="893" fg:w="2"/><text x="71.9193%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.7496%" y="309" width="0.0803%" height="15" fill="rgb(216,210,22)" fg:x="894" fg:w="1"/><text x="71.9996%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.7496%" y="293" width="0.0803%" height="15" fill="rgb(228,128,36)" fg:x="894" fg:w="1"/><text x="71.9996%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="71.7496%" y="277" width="0.0803%" height="15" fill="rgb(231,41,0)" fg:x="894" fg:w="1"/><text x="71.9996%" y="287.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (579 samples, 46.47%)</title><rect x="25.4414%" y="565" width="46.4687%" height="15" fill="rgb(232,61,26)" fg:x="317" fg:w="579"/><text x="25.6914%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (579 samples, 46.47%)</title><rect x="25.4414%" y="549" width="46.4687%" height="15" fill="rgb(217,60,9)" fg:x="317" fg:w="579"/><text x="25.6914%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::hand..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (579 samples, 46.47%)</title><rect x="25.4414%" y="533" width="46.4687%" height="15" fill="rgb(233,41,35)" fg:x="317" fg:w="579"/><text x="25.6914%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (579 samples, 46.47%)</title><rect x="25.4414%" y="517" width="46.4687%" height="15" fill="rgb(253,139,43)" fg:x="317" fg:w="579"/><text x="25.6914%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (579 samples, 46.47%)</title><rect x="25.4414%" y="501" width="46.4687%" height="15" fill="rgb(245,100,51)" fg:x="317" fg:w="579"/><text x="25.6914%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (579 samples, 46.47%)</title><rect x="25.4414%" y="485" width="46.4687%" height="15" fill="rgb(250,208,18)" fg:x="317" fg:w="579"/><text x="25.6914%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (579 samples, 46.47%)</title><rect x="25.4414%" y="469" width="46.4687%" height="15" fill="rgb(245,33,2)" fg:x="317" fg:w="579"/><text x="25.6914%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (579 samples, 46.47%)</title><rect x="25.4414%" y="453" width="46.4687%" height="15" fill="rgb(244,171,31)" fg:x="317" fg:w="579"/><text x="25.6914%" y="463.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (290 samples, 23.27%)</title><rect x="48.6356%" y="437" width="23.2745%" height="15" fill="rgb(229,1,43)" fg:x="606" fg:w="290"/><text x="48.8856%" y="447.50">&lt;plugins_core::carrying::actions::Hol..</text></g><g><title>plugins_core::location::model::change_location (16 samples, 1.28%)</title><rect x="70.6260%" y="421" width="1.2841%" height="15" fill="rgb(223,153,28)" fg:x="880" fg:w="16"/><text x="70.8760%" y="431.50"></text></g><g><title>plugins_core::location::model::Location::set (4 samples, 0.32%)</title><rect x="71.5891%" y="405" width="0.3210%" height="15" fill="rgb(241,4,46)" fg:x="892" fg:w="4"/><text x="71.8391%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="71.6693%" y="389" width="0.2408%" height="15" fill="rgb(230,81,11)" fg:x="893" fg:w="3"/><text x="71.9193%" y="399.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (3 samples, 0.24%)</title><rect x="71.6693%" y="373" width="0.2408%" height="15" fill="rgb(253,204,39)" fg:x="893" fg:w="3"/><text x="71.9193%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="71.6693%" y="357" width="0.2408%" height="15" fill="rgb(250,96,8)" fg:x="893" fg:w="3"/><text x="71.9193%" y="367.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (3 samples, 0.24%)</title><rect x="71.6693%" y="341" width="0.2408%" height="15" fill="rgb(219,89,54)" fg:x="893" fg:w="3"/><text x="71.9193%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="71.8299%" y="325" width="0.0803%" height="15" fill="rgb(235,136,39)" fg:x="895" fg:w="1"/><text x="72.0799%" y="335.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.9101%" y="533" width="0.0803%" height="15" fill="rgb(230,155,37)" fg:x="896" fg:w="1"/><text x="72.1601%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.9101%" y="517" width="0.0803%" height="15" fill="rgb(235,199,50)" fg:x="896" fg:w="1"/><text x="72.1601%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.9904%" y="501" width="0.1605%" height="15" fill="rgb(227,81,32)" fg:x="897" fg:w="2"/><text x="72.2404%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.9904%" y="485" width="0.1605%" height="15" fill="rgb(225,6,28)" fg:x="897" fg:w="2"/><text x="72.2404%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.0706%" y="469" width="0.0803%" height="15" fill="rgb(207,211,17)" fg:x="898" fg:w="1"/><text x="72.3206%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.0706%" y="453" width="0.0803%" height="15" fill="rgb(228,31,49)" fg:x="898" fg:w="1"/><text x="72.3206%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.0706%" y="437" width="0.0803%" height="15" fill="rgb(230,185,3)" fg:x="898" fg:w="1"/><text x="72.3206%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.0706%" y="421" width="0.0803%" height="15" fill="rgb(206,167,15)" fg:x="898" fg:w="1"/><text x="72.3206%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.0706%" y="405" width="0.0803%" height="15" fill="rgb(234,2,36)" fg:x="898" fg:w="1"/><text x="72.3206%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.0706%" y="389" width="0.0803%" height="15" fill="rgb(239,160,29)" fg:x="898" fg:w="1"/><text x="72.3206%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="72.1509%" y="501" width="0.0803%" height="15" fill="rgb(236,117,2)" fg:x="899" fg:w="1"/><text x="72.4009%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.2311%" y="469" width="0.0803%" height="15" fill="rgb(215,117,37)" fg:x="900" fg:w="1"/><text x="72.4811%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="71.9904%" y="517" width="0.4013%" height="15" fill="rgb(244,48,36)" fg:x="897" fg:w="5"/><text x="72.2404%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.2311%" y="501" width="0.1605%" height="15" fill="rgb(223,101,37)" fg:x="900" fg:w="2"/><text x="72.4811%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.2311%" y="485" width="0.1605%" height="15" fill="rgb(205,200,1)" fg:x="900" fg:w="2"/><text x="72.4811%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.3114%" y="469" width="0.0803%" height="15" fill="rgb(209,193,20)" fg:x="901" fg:w="1"/><text x="72.5614%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3114%" y="453" width="0.0803%" height="15" fill="rgb(214,63,13)" fg:x="901" fg:w="1"/><text x="72.5614%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.3114%" y="437" width="0.0803%" height="15" fill="rgb(253,113,46)" fg:x="901" fg:w="1"/><text x="72.5614%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.3917%" y="453" width="0.0803%" height="15" fill="rgb(237,103,34)" fg:x="902" fg:w="1"/><text x="72.6417%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.3917%" y="437" width="0.0803%" height="15" fill="rgb(223,38,25)" fg:x="902" fg:w="1"/><text x="72.6417%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.3917%" y="421" width="0.0803%" height="15" fill="rgb(251,32,32)" fg:x="902" fg:w="1"/><text x="72.6417%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3917%" y="405" width="0.0803%" height="15" fill="rgb(228,65,22)" fg:x="902" fg:w="1"/><text x="72.6417%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="72.4719%" y="453" width="0.0803%" height="15" fill="rgb(205,11,46)" fg:x="903" fg:w="1"/><text x="72.7219%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.4719%" y="437" width="0.0803%" height="15" fill="rgb(220,35,2)" fg:x="903" fg:w="1"/><text x="72.7219%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="72.5522%" y="453" width="0.0803%" height="15" fill="rgb(217,151,17)" fg:x="904" fg:w="1"/><text x="72.8022%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.5522%" y="437" width="0.0803%" height="15" fill="rgb(243,227,35)" fg:x="904" fg:w="1"/><text x="72.8022%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.5522%" y="421" width="0.0803%" height="15" fill="rgb(214,0,34)" fg:x="904" fg:w="1"/><text x="72.8022%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.5522%" y="405" width="0.0803%" height="15" fill="rgb(209,42,37)" fg:x="904" fg:w="1"/><text x="72.8022%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.5522%" y="389" width="0.0803%" height="15" fill="rgb(251,176,30)" fg:x="904" fg:w="1"/><text x="72.8022%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.5522%" y="373" width="0.0803%" height="15" fill="rgb(223,64,40)" fg:x="904" fg:w="1"/><text x="72.8022%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.5522%" y="357" width="0.0803%" height="15" fill="rgb(227,180,23)" fg:x="904" fg:w="1"/><text x="72.8022%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.5522%" y="341" width="0.0803%" height="15" fill="rgb(220,137,31)" fg:x="904" fg:w="1"/><text x="72.8022%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.5522%" y="325" width="0.0803%" height="15" fill="rgb(245,124,25)" fg:x="904" fg:w="1"/><text x="72.8022%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.5522%" y="309" width="0.0803%" height="15" fill="rgb(217,157,5)" fg:x="904" fg:w="1"/><text x="72.8022%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.5522%" y="293" width="0.0803%" height="15" fill="rgb(225,59,2)" fg:x="904" fg:w="1"/><text x="72.8022%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.5522%" y="277" width="0.0803%" height="15" fill="rgb(220,182,9)" fg:x="904" fg:w="1"/><text x="72.8022%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.5522%" y="261" width="0.0803%" height="15" fill="rgb(249,54,24)" fg:x="904" fg:w="1"/><text x="72.8022%" y="271.50"></text></g><g><title>plugins_core::tools::contained_by (9 samples, 0.72%)</title><rect x="71.9904%" y="533" width="0.7223%" height="15" fill="rgb(216,89,17)" fg:x="897" fg:w="9"/><text x="72.2404%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="72.3917%" y="517" width="0.3210%" height="15" fill="rgb(245,20,45)" fg:x="902" fg:w="4"/><text x="72.6417%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="72.3917%" y="501" width="0.3210%" height="15" fill="rgb(230,83,14)" fg:x="902" fg:w="4"/><text x="72.6417%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="72.3917%" y="485" width="0.3210%" height="15" fill="rgb(246,109,11)" fg:x="902" fg:w="4"/><text x="72.6417%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="72.3917%" y="469" width="0.3210%" height="15" fill="rgb(235,85,23)" fg:x="902" fg:w="4"/><text x="72.6417%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="72.6324%" y="453" width="0.0803%" height="15" fill="rgb(215,101,36)" fg:x="905" fg:w="1"/><text x="72.8824%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="72.6324%" y="437" width="0.0803%" height="15" fill="rgb(228,140,31)" fg:x="905" fg:w="1"/><text x="72.8824%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.6324%" y="421" width="0.0803%" height="15" fill="rgb(234,162,37)" fg:x="905" fg:w="1"/><text x="72.8824%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.6324%" y="405" width="0.0803%" height="15" fill="rgb(221,0,24)" fg:x="905" fg:w="1"/><text x="72.8824%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.6324%" y="389" width="0.0803%" height="15" fill="rgb(230,161,41)" fg:x="905" fg:w="1"/><text x="72.8824%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.6324%" y="373" width="0.0803%" height="15" fill="rgb(224,46,24)" fg:x="905" fg:w="1"/><text x="72.8824%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.6324%" y="357" width="0.0803%" height="15" fill="rgb(205,59,32)" fg:x="905" fg:w="1"/><text x="72.8824%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.6324%" y="341" width="0.0803%" height="15" fill="rgb(239,31,20)" fg:x="905" fg:w="1"/><text x="72.8824%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.6324%" y="325" width="0.0803%" height="15" fill="rgb(233,149,44)" fg:x="905" fg:w="1"/><text x="72.8824%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.6324%" y="309" width="0.0803%" height="15" fill="rgb(243,47,26)" fg:x="905" fg:w="1"/><text x="72.8824%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6324%" y="293" width="0.0803%" height="15" fill="rgb(233,107,5)" fg:x="905" fg:w="1"/><text x="72.8824%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6324%" y="277" width="0.0803%" height="15" fill="rgb(248,140,33)" fg:x="905" fg:w="1"/><text x="72.8824%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7127%" y="485" width="0.0803%" height="15" fill="rgb(228,178,19)" fg:x="906" fg:w="1"/><text x="72.9627%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7127%" y="469" width="0.0803%" height="15" fill="rgb(224,39,49)" fg:x="906" fg:w="1"/><text x="72.9627%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.7127%" y="453" width="0.0803%" height="15" fill="rgb(246,56,47)" fg:x="906" fg:w="1"/><text x="72.9627%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.7127%" y="437" width="0.0803%" height="15" fill="rgb(220,73,27)" fg:x="906" fg:w="1"/><text x="72.9627%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.7127%" y="421" width="0.0803%" height="15" fill="rgb(239,112,21)" fg:x="906" fg:w="1"/><text x="72.9627%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.7127%" y="405" width="0.0803%" height="15" fill="rgb(253,14,51)" fg:x="906" fg:w="1"/><text x="72.9627%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.7127%" y="389" width="0.0803%" height="15" fill="rgb(215,58,12)" fg:x="906" fg:w="1"/><text x="72.9627%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7929%" y="437" width="0.0803%" height="15" fill="rgb(207,181,19)" fg:x="907" fg:w="1"/><text x="73.0429%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7929%" y="421" width="0.0803%" height="15" fill="rgb(211,214,34)" fg:x="907" fg:w="1"/><text x="73.0429%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7929%" y="405" width="0.0803%" height="15" fill="rgb(243,124,39)" fg:x="907" fg:w="1"/><text x="73.0429%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.7929%" y="389" width="0.0803%" height="15" fill="rgb(248,135,21)" fg:x="907" fg:w="1"/><text x="73.0429%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.7929%" y="373" width="0.0803%" height="15" fill="rgb(245,218,3)" fg:x="907" fg:w="1"/><text x="73.0429%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.7929%" y="357" width="0.0803%" height="15" fill="rgb(225,144,22)" fg:x="907" fg:w="1"/><text x="73.0429%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.7929%" y="341" width="0.0803%" height="15" fill="rgb(250,90,15)" fg:x="907" fg:w="1"/><text x="73.0429%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.7929%" y="325" width="0.0803%" height="15" fill="rgb(224,64,29)" fg:x="907" fg:w="1"/><text x="73.0429%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.7929%" y="309" width="0.0803%" height="15" fill="rgb(217,50,47)" fg:x="907" fg:w="1"/><text x="73.0429%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.7929%" y="293" width="0.0803%" height="15" fill="rgb(231,159,47)" fg:x="907" fg:w="1"/><text x="73.0429%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.7929%" y="277" width="0.0803%" height="15" fill="rgb(213,89,29)" fg:x="907" fg:w="1"/><text x="73.0429%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.7929%" y="261" width="0.0803%" height="15" fill="rgb(243,90,23)" fg:x="907" fg:w="1"/><text x="73.0429%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7929%" y="245" width="0.0803%" height="15" fill="rgb(213,21,6)" fg:x="907" fg:w="1"/><text x="73.0429%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="72.7127%" y="501" width="0.2408%" height="15" fill="rgb(237,139,17)" fg:x="906" fg:w="3"/><text x="72.9627%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="72.7929%" y="485" width="0.1605%" height="15" fill="rgb(250,147,17)" fg:x="907" fg:w="2"/><text x="73.0429%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.7929%" y="469" width="0.1605%" height="15" fill="rgb(212,208,42)" fg:x="907" fg:w="2"/><text x="73.0429%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.7929%" y="453" width="0.1605%" height="15" fill="rgb(215,229,40)" fg:x="907" fg:w="2"/><text x="73.0429%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.8732%" y="437" width="0.0803%" height="15" fill="rgb(206,204,1)" fg:x="908" fg:w="1"/><text x="73.1232%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.8732%" y="421" width="0.0803%" height="15" fill="rgb(230,62,32)" fg:x="908" fg:w="1"/><text x="73.1232%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.8732%" y="405" width="0.0803%" height="15" fill="rgb(223,22,42)" fg:x="908" fg:w="1"/><text x="73.1232%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.8732%" y="389" width="0.0803%" height="15" fill="rgb(244,6,23)" fg:x="908" fg:w="1"/><text x="73.1232%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.8732%" y="373" width="0.0803%" height="15" fill="rgb(240,221,42)" fg:x="908" fg:w="1"/><text x="73.1232%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.8732%" y="357" width="0.0803%" height="15" fill="rgb(222,74,7)" fg:x="908" fg:w="1"/><text x="73.1232%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.8732%" y="341" width="0.0803%" height="15" fill="rgb(227,191,38)" fg:x="908" fg:w="1"/><text x="73.1232%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.8732%" y="325" width="0.0803%" height="15" fill="rgb(227,89,34)" fg:x="908" fg:w="1"/><text x="73.1232%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.8732%" y="309" width="0.0803%" height="15" fill="rgb(215,153,25)" fg:x="908" fg:w="1"/><text x="73.1232%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.8732%" y="293" width="0.0803%" height="15" fill="rgb(215,153,46)" fg:x="908" fg:w="1"/><text x="73.1232%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.8732%" y="277" width="0.0803%" height="15" fill="rgb(242,38,52)" fg:x="908" fg:w="1"/><text x="73.1232%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8732%" y="261" width="0.0803%" height="15" fill="rgb(218,112,4)" fg:x="908" fg:w="1"/><text x="73.1232%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.9535%" y="501" width="0.0803%" height="15" fill="rgb(231,210,31)" fg:x="909" fg:w="1"/><text x="73.2035%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (2 samples, 0.16%)</title><rect x="73.3547%" y="405" width="0.1605%" height="15" fill="rgb(245,223,36)" fg:x="914" fg:w="2"/><text x="73.6047%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.4350%" y="389" width="0.0803%" height="15" fill="rgb(246,41,2)" fg:x="915" fg:w="1"/><text x="73.6850%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (4 samples, 0.32%)</title><rect x="73.2745%" y="469" width="0.3210%" height="15" fill="rgb(227,51,31)" fg:x="913" fg:w="4"/><text x="73.5245%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (4 samples, 0.32%)</title><rect x="73.2745%" y="453" width="0.3210%" height="15" fill="rgb(222,95,26)" fg:x="913" fg:w="4"/><text x="73.5245%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (4 samples, 0.32%)</title><rect x="73.2745%" y="437" width="0.3210%" height="15" fill="rgb(224,190,1)" fg:x="913" fg:w="4"/><text x="73.5245%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (3 samples, 0.24%)</title><rect x="73.3547%" y="421" width="0.2408%" height="15" fill="rgb(209,90,42)" fg:x="914" fg:w="3"/><text x="73.6047%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.5152%" y="405" width="0.0803%" height="15" fill="rgb(232,225,50)" fg:x="916" fg:w="1"/><text x="73.7652%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.5152%" y="389" width="0.0803%" height="15" fill="rgb(239,89,47)" fg:x="916" fg:w="1"/><text x="73.7652%" y="399.50"></text></g><g><title>plugins_core::tools::occupied_by (13 samples, 1.04%)</title><rect x="72.7127%" y="533" width="1.0433%" height="15" fill="rgb(230,212,50)" fg:x="906" fg:w="13"/><text x="72.9627%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (13 samples, 1.04%)</title><rect x="72.7127%" y="517" width="1.0433%" height="15" fill="rgb(252,1,27)" fg:x="906" fg:w="13"/><text x="72.9627%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (9 samples, 0.72%)</title><rect x="73.0337%" y="501" width="0.7223%" height="15" fill="rgb(237,179,41)" fg:x="910" fg:w="9"/><text x="73.2837%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (9 samples, 0.72%)</title><rect x="73.0337%" y="485" width="0.7223%" height="15" fill="rgb(214,151,37)" fg:x="910" fg:w="9"/><text x="73.2837%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.5955%" y="469" width="0.1605%" height="15" fill="rgb(211,74,11)" fg:x="917" fg:w="2"/><text x="73.8455%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6758%" y="453" width="0.0803%" height="15" fill="rgb(242,21,21)" fg:x="918" fg:w="1"/><text x="73.9258%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.6758%" y="437" width="0.0803%" height="15" fill="rgb(226,106,43)" fg:x="918" fg:w="1"/><text x="73.9258%" y="447.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (24 samples, 1.93%)</title><rect x="71.9101%" y="549" width="1.9262%" height="15" fill="rgb(229,162,39)" fg:x="896" fg:w="24"/><text x="72.1601%" y="559.50">p..</text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="73.7560%" y="533" width="0.0803%" height="15" fill="rgb(228,159,25)" fg:x="919" fg:w="1"/><text x="74.0060%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="73.7560%" y="517" width="0.0803%" height="15" fill="rgb(237,32,23)" fg:x="919" fg:w="1"/><text x="74.0060%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="73.7560%" y="501" width="0.0803%" height="15" fill="rgb(212,35,32)" fg:x="919" fg:w="1"/><text x="74.0060%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.7560%" y="485" width="0.0803%" height="15" fill="rgb(215,199,1)" fg:x="919" fg:w="1"/><text x="74.0060%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.7560%" y="469" width="0.0803%" height="15" fill="rgb(215,67,13)" fg:x="919" fg:w="1"/><text x="74.0060%" y="479.50"></text></g><g><title>engine::session::Session::captured (628 samples, 50.40%)</title><rect x="23.5955%" y="709" width="50.4013%" height="15" fill="rgb(216,20,47)" fg:x="294" fg:w="628"/><text x="23.8455%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (620 samples, 49.76%)</title><rect x="24.2376%" y="693" width="49.7592%" height="15" fill="rgb(249,183,48)" fg:x="302" fg:w="620"/><text x="24.4876%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (617 samples, 49.52%)</title><rect x="24.4783%" y="677" width="49.5185%" height="15" fill="rgb(208,86,37)" fg:x="305" fg:w="617"/><text x="24.7283%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (617 samples, 49.52%)</title><rect x="24.4783%" y="661" width="49.5185%" height="15" fill="rgb(251,192,7)" fg:x="305" fg:w="617"/><text x="24.7283%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (617 samples, 49.52%)</title><rect x="24.4783%" y="645" width="49.5185%" height="15" fill="rgb(234,196,3)" fg:x="305" fg:w="617"/><text x="24.7283%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (617 samples, 49.52%)</title><rect x="24.4783%" y="629" width="49.5185%" height="15" fill="rgb(229,150,39)" fg:x="305" fg:w="617"/><text x="24.7283%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (617 samples, 49.52%)</title><rect x="24.4783%" y="613" width="49.5185%" height="15" fill="rgb(226,19,29)" fg:x="305" fg:w="617"/><text x="24.7283%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (606 samples, 48.64%)</title><rect x="25.3612%" y="597" width="48.6356%" height="15" fill="rgb(226,222,2)" fg:x="316" fg:w="606"/><text x="25.6112%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (606 samples, 48.64%)</title><rect x="25.3612%" y="581" width="48.6356%" height="15" fill="rgb(235,85,29)" fg:x="316" fg:w="606"/><text x="25.6112%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (26 samples, 2.09%)</title><rect x="71.9101%" y="565" width="2.0867%" height="15" fill="rgb(237,194,43)" fg:x="896" fg:w="26"/><text x="72.1601%" y="575.50">p..</text></g><g><title>plugins_rune::sources::load_sources_from_entity (2 samples, 0.16%)</title><rect x="73.8363%" y="549" width="0.1605%" height="15" fill="rgb(211,4,42)" fg:x="920" fg:w="2"/><text x="74.0863%" y="559.50"></text></g><g><title>plugins_rune::sources::get_script (2 samples, 0.16%)</title><rect x="73.8363%" y="533" width="0.1605%" height="15" fill="rgb(221,80,37)" fg:x="920" fg:w="2"/><text x="74.0863%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="73.8363%" y="517" width="0.1605%" height="15" fill="rgb(222,47,31)" fg:x="920" fg:w="2"/><text x="74.0863%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (2 samples, 0.16%)</title><rect x="73.8363%" y="501" width="0.1605%" height="15" fill="rgb(249,82,52)" fg:x="920" fg:w="2"/><text x="74.0863%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="73.8363%" y="485" width="0.1605%" height="15" fill="rgb(218,203,2)" fg:x="920" fg:w="2"/><text x="74.0863%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.9165%" y="469" width="0.0803%" height="15" fill="rgb(210,175,14)" fg:x="921" fg:w="1"/><text x="74.1665%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9968%" y="597" width="0.0803%" height="15" fill="rgb(216,210,12)" fg:x="922" fg:w="1"/><text x="74.2468%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9968%" y="581" width="0.0803%" height="15" fill="rgb(229,120,18)" fg:x="922" fg:w="1"/><text x="74.2468%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9968%" y="565" width="0.0803%" height="15" fill="rgb(231,174,12)" fg:x="922" fg:w="1"/><text x="74.2468%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.9968%" y="549" width="0.0803%" height="15" fill="rgb(214,101,53)" fg:x="922" fg:w="1"/><text x="74.2468%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.9968%" y="533" width="0.0803%" height="15" fill="rgb(246,89,43)" fg:x="922" fg:w="1"/><text x="74.2468%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.9968%" y="517" width="0.0803%" height="15" fill="rgb(222,9,51)" fg:x="922" fg:w="1"/><text x="74.2468%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9968%" y="501" width="0.0803%" height="15" fill="rgb(252,221,9)" fg:x="922" fg:w="1"/><text x="74.2468%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9968%" y="485" width="0.0803%" height="15" fill="rgb(248,28,15)" fg:x="922" fg:w="1"/><text x="74.2468%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.9968%" y="469" width="0.0803%" height="15" fill="rgb(213,54,52)" fg:x="922" fg:w="1"/><text x="74.2468%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.9968%" y="453" width="0.0803%" height="15" fill="rgb(240,3,45)" fg:x="922" fg:w="1"/><text x="74.2468%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.9968%" y="437" width="0.0803%" height="15" fill="rgb(239,138,24)" fg:x="922" fg:w="1"/><text x="74.2468%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.9968%" y="421" width="0.0803%" height="15" fill="rgb(233,45,54)" fg:x="922" fg:w="1"/><text x="74.2468%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.9968%" y="405" width="0.0803%" height="15" fill="rgb(220,131,2)" fg:x="922" fg:w="1"/><text x="74.2468%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.9968%" y="661" width="0.1605%" height="15" fill="rgb(240,154,36)" fg:x="922" fg:w="2"/><text x="74.2468%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.9968%" y="645" width="0.1605%" height="15" fill="rgb(251,221,1)" fg:x="922" fg:w="2"/><text x="74.2468%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.9968%" y="629" width="0.1605%" height="15" fill="rgb(225,217,1)" fg:x="922" fg:w="2"/><text x="74.2468%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.9968%" y="613" width="0.1605%" height="15" fill="rgb(241,105,49)" fg:x="922" fg:w="2"/><text x="74.2468%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0770%" y="597" width="0.0803%" height="15" fill="rgb(215,44,32)" fg:x="923" fg:w="1"/><text x="74.3270%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0770%" y="581" width="0.0803%" height="15" fill="rgb(213,222,14)" fg:x="923" fg:w="1"/><text x="74.3270%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.0770%" y="565" width="0.0803%" height="15" fill="rgb(207,99,52)" fg:x="923" fg:w="1"/><text x="74.3270%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.0770%" y="549" width="0.0803%" height="15" fill="rgb(214,208,52)" fg:x="923" fg:w="1"/><text x="74.3270%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.0770%" y="533" width="0.0803%" height="15" fill="rgb(244,169,0)" fg:x="923" fg:w="1"/><text x="74.3270%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.0770%" y="517" width="0.0803%" height="15" fill="rgb(216,193,37)" fg:x="923" fg:w="1"/><text x="74.3270%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.0770%" y="501" width="0.0803%" height="15" fill="rgb(212,158,10)" fg:x="923" fg:w="1"/><text x="74.3270%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.0770%" y="485" width="0.0803%" height="15" fill="rgb(213,110,20)" fg:x="923" fg:w="1"/><text x="74.3270%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.0770%" y="469" width="0.0803%" height="15" fill="rgb(226,5,42)" fg:x="923" fg:w="1"/><text x="74.3270%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.0770%" y="453" width="0.0803%" height="15" fill="rgb(211,93,8)" fg:x="923" fg:w="1"/><text x="74.3270%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.0770%" y="437" width="0.0803%" height="15" fill="rgb(240,208,12)" fg:x="923" fg:w="1"/><text x="74.3270%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1573%" y="613" width="0.0803%" height="15" fill="rgb(233,127,50)" fg:x="924" fg:w="1"/><text x="74.4073%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1573%" y="597" width="0.0803%" height="15" fill="rgb(227,199,53)" fg:x="924" fg:w="1"/><text x="74.4073%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.3178%" y="517" width="0.0803%" height="15" fill="rgb(235,199,10)" fg:x="926" fg:w="1"/><text x="74.5678%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3178%" y="501" width="0.0803%" height="15" fill="rgb(228,148,35)" fg:x="926" fg:w="1"/><text x="74.5678%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3178%" y="485" width="0.0803%" height="15" fill="rgb(217,87,19)" fg:x="926" fg:w="1"/><text x="74.5678%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.3178%" y="469" width="0.0803%" height="15" fill="rgb(239,9,32)" fg:x="926" fg:w="1"/><text x="74.5678%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.3178%" y="453" width="0.0803%" height="15" fill="rgb(229,101,29)" fg:x="926" fg:w="1"/><text x="74.5678%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.3178%" y="437" width="0.0803%" height="15" fill="rgb(208,143,26)" fg:x="926" fg:w="1"/><text x="74.5678%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3178%" y="421" width="0.0803%" height="15" fill="rgb(214,10,2)" fg:x="926" fg:w="1"/><text x="74.5678%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3178%" y="405" width="0.0803%" height="15" fill="rgb(254,203,30)" fg:x="926" fg:w="1"/><text x="74.5678%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.3178%" y="389" width="0.0803%" height="15" fill="rgb(242,45,3)" fg:x="926" fg:w="1"/><text x="74.5678%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.3178%" y="373" width="0.0803%" height="15" fill="rgb(209,146,51)" fg:x="926" fg:w="1"/><text x="74.5678%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.3178%" y="357" width="0.0803%" height="15" fill="rgb(222,80,5)" fg:x="926" fg:w="1"/><text x="74.5678%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.3178%" y="341" width="0.0803%" height="15" fill="rgb(252,80,35)" fg:x="926" fg:w="1"/><text x="74.5678%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3178%" y="325" width="0.0803%" height="15" fill="rgb(246,125,28)" fg:x="926" fg:w="1"/><text x="74.5678%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="74.2376%" y="613" width="0.2408%" height="15" fill="rgb(224,143,51)" fg:x="925" fg:w="3"/><text x="74.4876%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="74.2376%" y="597" width="0.2408%" height="15" fill="rgb(205,24,17)" fg:x="925" fg:w="3"/><text x="74.4876%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="74.2376%" y="581" width="0.2408%" height="15" fill="rgb(253,128,30)" fg:x="925" fg:w="3"/><text x="74.4876%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="74.2376%" y="565" width="0.2408%" height="15" fill="rgb(214,153,25)" fg:x="925" fg:w="3"/><text x="74.4876%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="74.2376%" y="549" width="0.2408%" height="15" fill="rgb(214,4,28)" fg:x="925" fg:w="3"/><text x="74.4876%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="74.2376%" y="533" width="0.2408%" height="15" fill="rgb(235,179,52)" fg:x="925" fg:w="3"/><text x="74.4876%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.3981%" y="517" width="0.0803%" height="15" fill="rgb(233,27,42)" fg:x="927" fg:w="1"/><text x="74.6481%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.3981%" y="501" width="0.0803%" height="15" fill="rgb(238,35,25)" fg:x="927" fg:w="1"/><text x="74.6481%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="74.3981%" y="485" width="0.0803%" height="15" fill="rgb(227,44,31)" fg:x="927" fg:w="1"/><text x="74.6481%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3981%" y="469" width="0.0803%" height="15" fill="rgb(232,201,13)" fg:x="927" fg:w="1"/><text x="74.6481%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3981%" y="453" width="0.0803%" height="15" fill="rgb(224,172,52)" fg:x="927" fg:w="1"/><text x="74.6481%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="74.4783%" y="581" width="0.1605%" height="15" fill="rgb(214,27,26)" fg:x="928" fg:w="2"/><text x="74.7283%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.6388%" y="581" width="0.0803%" height="15" fill="rgb(210,185,52)" fg:x="930" fg:w="1"/><text x="74.8888%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="74.1573%" y="661" width="0.6421%" height="15" fill="rgb(249,59,32)" fg:x="924" fg:w="8"/><text x="74.4073%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="74.1573%" y="645" width="0.6421%" height="15" fill="rgb(242,209,18)" fg:x="924" fg:w="8"/><text x="74.4073%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.64%)</title><rect x="74.1573%" y="629" width="0.6421%" height="15" fill="rgb(229,0,18)" fg:x="924" fg:w="8"/><text x="74.4073%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="74.4783%" y="613" width="0.3210%" height="15" fill="rgb(217,138,29)" fg:x="928" fg:w="4"/><text x="74.7283%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="74.4783%" y="597" width="0.3210%" height="15" fill="rgb(215,72,42)" fg:x="928" fg:w="4"/><text x="74.7283%" y="607.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="74.7191%" y="581" width="0.0803%" height="15" fill="rgb(254,115,11)" fg:x="931" fg:w="1"/><text x="74.9691%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.7994%" y="629" width="0.0803%" height="15" fill="rgb(205,133,39)" fg:x="932" fg:w="1"/><text x="75.0494%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.7994%" y="613" width="0.0803%" height="15" fill="rgb(211,36,27)" fg:x="932" fg:w="1"/><text x="75.0494%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.7994%" y="597" width="0.0803%" height="15" fill="rgb(221,48,10)" fg:x="932" fg:w="1"/><text x="75.0494%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.8796%" y="629" width="0.0803%" height="15" fill="rgb(230,172,50)" fg:x="933" fg:w="1"/><text x="75.1296%" y="639.50"></text></g><g><title>engine::session::internal::Added::find_refs (13 samples, 1.04%)</title><rect x="73.9968%" y="693" width="1.0433%" height="15" fill="rgb(249,72,18)" fg:x="922" fg:w="13"/><text x="74.2468%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (13 samples, 1.04%)</title><rect x="73.9968%" y="677" width="1.0433%" height="15" fill="rgb(237,58,48)" fg:x="922" fg:w="13"/><text x="74.2468%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="74.7994%" y="661" width="0.2408%" height="15" fill="rgb(242,123,3)" fg:x="932" fg:w="3"/><text x="75.0494%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="74.7994%" y="645" width="0.2408%" height="15" fill="rgb(232,111,32)" fg:x="932" fg:w="3"/><text x="75.0494%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.9599%" y="629" width="0.0803%" height="15" fill="rgb(229,108,3)" fg:x="934" fg:w="1"/><text x="75.2099%" y="639.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="75.0401%" y="677" width="0.0803%" height="15" fill="rgb(222,158,10)" fg:x="935" fg:w="1"/><text x="75.2901%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0401%" y="661" width="0.0803%" height="15" fill="rgb(205,34,49)" fg:x="935" fg:w="1"/><text x="75.2901%" y="671.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.2006%" y="581" width="0.0803%" height="15" fill="rgb(232,21,14)" fg:x="937" fg:w="1"/><text x="75.4506%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.2006%" y="565" width="0.0803%" height="15" fill="rgb(229,127,44)" fg:x="937" fg:w="1"/><text x="75.4506%" y="575.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.2006%" y="549" width="0.0803%" height="15" fill="rgb(232,171,4)" fg:x="937" fg:w="1"/><text x="75.4506%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.2006%" y="533" width="0.0803%" height="15" fill="rgb(250,92,16)" fg:x="937" fg:w="1"/><text x="75.4506%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.2006%" y="517" width="0.0803%" height="15" fill="rgb(230,103,38)" fg:x="937" fg:w="1"/><text x="75.4506%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.2006%" y="501" width="0.0803%" height="15" fill="rgb(253,167,9)" fg:x="937" fg:w="1"/><text x="75.4506%" y="511.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.2006%" y="485" width="0.0803%" height="15" fill="rgb(222,118,11)" fg:x="937" fg:w="1"/><text x="75.4506%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="75.2006%" y="469" width="0.0803%" height="15" fill="rgb(240,202,0)" fg:x="937" fg:w="1"/><text x="75.4506%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.2809%" y="581" width="0.0803%" height="15" fill="rgb(236,124,4)" fg:x="938" fg:w="1"/><text x="75.5309%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.2809%" y="565" width="0.0803%" height="15" fill="rgb(244,128,18)" fg:x="938" fg:w="1"/><text x="75.5309%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.2809%" y="549" width="0.0803%" height="15" fill="rgb(231,206,5)" fg:x="938" fg:w="1"/><text x="75.5309%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.2809%" y="533" width="0.0803%" height="15" fill="rgb(237,111,8)" fg:x="938" fg:w="1"/><text x="75.5309%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="75.1204%" y="677" width="0.3210%" height="15" fill="rgb(225,127,3)" fg:x="936" fg:w="4"/><text x="75.3704%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="75.1204%" y="661" width="0.3210%" height="15" fill="rgb(222,85,48)" fg:x="936" fg:w="4"/><text x="75.3704%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="75.1204%" y="645" width="0.3210%" height="15" fill="rgb(221,108,37)" fg:x="936" fg:w="4"/><text x="75.3704%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="75.1204%" y="629" width="0.3210%" height="15" fill="rgb(226,169,36)" fg:x="936" fg:w="4"/><text x="75.3704%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.2006%" y="613" width="0.2408%" height="15" fill="rgb(237,76,12)" fg:x="937" fg:w="3"/><text x="75.4506%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="75.2006%" y="597" width="0.2408%" height="15" fill="rgb(210,227,32)" fg:x="937" fg:w="3"/><text x="75.4506%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.3612%" y="581" width="0.0803%" height="15" fill="rgb(214,117,20)" fg:x="939" fg:w="1"/><text x="75.6112%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3612%" y="565" width="0.0803%" height="15" fill="rgb(234,119,41)" fg:x="939" fg:w="1"/><text x="75.6112%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="75.3612%" y="549" width="0.0803%" height="15" fill="rgb(230,130,47)" fg:x="939" fg:w="1"/><text x="75.6112%" y="559.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="75.3612%" y="533" width="0.0803%" height="15" fill="rgb(215,21,41)" fg:x="939" fg:w="1"/><text x="75.6112%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="75.3612%" y="517" width="0.0803%" height="15" fill="rgb(226,26,53)" fg:x="939" fg:w="1"/><text x="75.6112%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.4414%" y="533" width="0.0803%" height="15" fill="rgb(221,92,23)" fg:x="940" fg:w="1"/><text x="75.6914%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.4414%" y="517" width="0.0803%" height="15" fill="rgb(213,156,21)" fg:x="940" fg:w="1"/><text x="75.6914%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.4414%" y="501" width="0.0803%" height="15" fill="rgb(254,166,29)" fg:x="940" fg:w="1"/><text x="75.6914%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="75.4414%" y="485" width="0.0803%" height="15" fill="rgb(213,71,1)" fg:x="940" fg:w="1"/><text x="75.6914%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.4414%" y="549" width="0.1605%" height="15" fill="rgb(245,8,13)" fg:x="940" fg:w="2"/><text x="75.6914%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.5217%" y="533" width="0.0803%" height="15" fill="rgb(213,32,32)" fg:x="941" fg:w="1"/><text x="75.7717%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.5217%" y="517" width="0.0803%" height="15" fill="rgb(251,86,50)" fg:x="941" fg:w="1"/><text x="75.7717%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.5217%" y="501" width="0.0803%" height="15" fill="rgb(252,92,41)" fg:x="941" fg:w="1"/><text x="75.7717%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.4414%" y="613" width="0.2408%" height="15" fill="rgb(234,70,35)" fg:x="940" fg:w="3"/><text x="75.6914%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.4414%" y="597" width="0.2408%" height="15" fill="rgb(210,157,19)" fg:x="940" fg:w="3"/><text x="75.6914%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.4414%" y="581" width="0.2408%" height="15" fill="rgb(206,20,45)" fg:x="940" fg:w="3"/><text x="75.6914%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.4414%" y="565" width="0.2408%" height="15" fill="rgb(207,34,7)" fg:x="940" fg:w="3"/><text x="75.6914%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.6019%" y="549" width="0.0803%" height="15" fill="rgb(253,151,14)" fg:x="942" fg:w="1"/><text x="75.8519%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (22 samples, 1.77%)</title><rect x="73.9968%" y="709" width="1.7657%" height="15" fill="rgb(252,1,18)" fg:x="922" fg:w="22"/><text x="74.2468%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.72%)</title><rect x="75.0401%" y="693" width="0.7223%" height="15" fill="rgb(214,77,52)" fg:x="935" fg:w="9"/><text x="75.2901%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="75.4414%" y="677" width="0.3210%" height="15" fill="rgb(254,106,35)" fg:x="940" fg:w="4"/><text x="75.6914%" y="687.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="75.4414%" y="661" width="0.3210%" height="15" fill="rgb(212,67,40)" fg:x="940" fg:w="4"/><text x="75.6914%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="75.4414%" y="645" width="0.3210%" height="15" fill="rgb(228,76,23)" fg:x="940" fg:w="4"/><text x="75.6914%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="75.4414%" y="629" width="0.3210%" height="15" fill="rgb(250,198,5)" fg:x="940" fg:w="4"/><text x="75.6914%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.6822%" y="613" width="0.0803%" height="15" fill="rgb(209,20,25)" fg:x="943" fg:w="1"/><text x="75.9322%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.7624%" y="661" width="0.1605%" height="15" fill="rgb(236,32,4)" fg:x="944" fg:w="2"/><text x="76.0124%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.7624%" y="645" width="0.1605%" height="15" fill="rgb(215,31,6)" fg:x="944" fg:w="2"/><text x="76.0124%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.7624%" y="629" width="0.1605%" height="15" fill="rgb(207,186,49)" fg:x="944" fg:w="2"/><text x="76.0124%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.7624%" y="613" width="0.1605%" height="15" fill="rgb(211,212,49)" fg:x="944" fg:w="2"/><text x="76.0124%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.8427%" y="597" width="0.0803%" height="15" fill="rgb(229,51,41)" fg:x="945" fg:w="1"/><text x="76.0927%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.8427%" y="581" width="0.0803%" height="15" fill="rgb(205,225,36)" fg:x="945" fg:w="1"/><text x="76.0927%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.8427%" y="565" width="0.0803%" height="15" fill="rgb(209,213,45)" fg:x="945" fg:w="1"/><text x="76.0927%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.8427%" y="549" width="0.0803%" height="15" fill="rgb(219,35,49)" fg:x="945" fg:w="1"/><text x="76.0927%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.8427%" y="533" width="0.0803%" height="15" fill="rgb(215,205,22)" fg:x="945" fg:w="1"/><text x="76.0927%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="75.8427%" y="517" width="0.0803%" height="15" fill="rgb(248,204,34)" fg:x="945" fg:w="1"/><text x="76.0927%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="75.8427%" y="501" width="0.0803%" height="15" fill="rgb(219,223,31)" fg:x="945" fg:w="1"/><text x="76.0927%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="76.0032%" y="565" width="0.1605%" height="15" fill="rgb(236,14,8)" fg:x="947" fg:w="2"/><text x="76.2532%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.0835%" y="549" width="0.0803%" height="15" fill="rgb(243,129,23)" fg:x="948" fg:w="1"/><text x="76.3335%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.0835%" y="533" width="0.0803%" height="15" fill="rgb(205,204,5)" fg:x="948" fg:w="1"/><text x="76.3335%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.0835%" y="517" width="0.0803%" height="15" fill="rgb(244,115,32)" fg:x="948" fg:w="1"/><text x="76.3335%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="75.9230%" y="661" width="0.3210%" height="15" fill="rgb(229,123,14)" fg:x="946" fg:w="4"/><text x="76.1730%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="75.9230%" y="645" width="0.3210%" height="15" fill="rgb(250,85,1)" fg:x="946" fg:w="4"/><text x="76.1730%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="75.9230%" y="629" width="0.3210%" height="15" fill="rgb(209,141,54)" fg:x="946" fg:w="4"/><text x="76.1730%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="76.0032%" y="613" width="0.2408%" height="15" fill="rgb(244,107,39)" fg:x="947" fg:w="3"/><text x="76.2532%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="76.0032%" y="597" width="0.2408%" height="15" fill="rgb(230,68,26)" fg:x="947" fg:w="3"/><text x="76.2532%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="76.0032%" y="581" width="0.2408%" height="15" fill="rgb(220,178,33)" fg:x="947" fg:w="3"/><text x="76.2532%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="76.1637%" y="565" width="0.0803%" height="15" fill="rgb(220,77,53)" fg:x="949" fg:w="1"/><text x="76.4137%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.1637%" y="549" width="0.0803%" height="15" fill="rgb(224,108,19)" fg:x="949" fg:w="1"/><text x="76.4137%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.1637%" y="533" width="0.0803%" height="15" fill="rgb(223,203,27)" fg:x="949" fg:w="1"/><text x="76.4137%" y="543.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="76.2440%" y="661" width="0.0803%" height="15" fill="rgb(211,32,46)" fg:x="950" fg:w="1"/><text x="76.4940%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="76.4045%" y="565" width="0.1605%" height="15" fill="rgb(240,101,27)" fg:x="952" fg:w="2"/><text x="76.6545%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.4045%" y="549" width="0.1605%" height="15" fill="rgb(217,210,11)" fg:x="952" fg:w="2"/><text x="76.6545%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="76.4045%" y="533" width="0.1605%" height="15" fill="rgb(236,130,21)" fg:x="952" fg:w="2"/><text x="76.6545%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.4045%" y="517" width="0.1605%" height="15" fill="rgb(250,136,8)" fg:x="952" fg:w="2"/><text x="76.6545%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.4848%" y="501" width="0.0803%" height="15" fill="rgb(243,223,36)" fg:x="953" fg:w="1"/><text x="76.7348%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.4848%" y="485" width="0.0803%" height="15" fill="rgb(246,184,8)" fg:x="953" fg:w="1"/><text x="76.7348%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.4848%" y="469" width="0.0803%" height="15" fill="rgb(222,158,36)" fg:x="953" fg:w="1"/><text x="76.7348%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="76.4848%" y="453" width="0.0803%" height="15" fill="rgb(210,220,19)" fg:x="953" fg:w="1"/><text x="76.7348%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="76.3242%" y="597" width="0.3210%" height="15" fill="rgb(246,44,38)" fg:x="951" fg:w="4"/><text x="76.5742%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="76.3242%" y="581" width="0.3210%" height="15" fill="rgb(246,186,14)" fg:x="951" fg:w="4"/><text x="76.5742%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.5650%" y="565" width="0.0803%" height="15" fill="rgb(233,193,20)" fg:x="954" fg:w="1"/><text x="76.8150%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.5650%" y="549" width="0.0803%" height="15" fill="rgb(215,60,5)" fg:x="954" fg:w="1"/><text x="76.8150%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.5650%" y="533" width="0.0803%" height="15" fill="rgb(207,128,10)" fg:x="954" fg:w="1"/><text x="76.8150%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (12 samples, 0.96%)</title><rect x="75.7624%" y="709" width="0.9631%" height="15" fill="rgb(238,84,54)" fg:x="944" fg:w="12"/><text x="76.0124%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.96%)</title><rect x="75.7624%" y="693" width="0.9631%" height="15" fill="rgb(213,130,11)" fg:x="944" fg:w="12"/><text x="76.0124%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.96%)</title><rect x="75.7624%" y="677" width="0.9631%" height="15" fill="rgb(235,62,9)" fg:x="944" fg:w="12"/><text x="76.0124%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="76.3242%" y="661" width="0.4013%" height="15" fill="rgb(222,64,24)" fg:x="951" fg:w="5"/><text x="76.5742%" y="671.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="76.3242%" y="645" width="0.4013%" height="15" fill="rgb(238,193,42)" fg:x="951" fg:w="5"/><text x="76.5742%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="76.3242%" y="629" width="0.4013%" height="15" fill="rgb(243,204,46)" fg:x="951" fg:w="5"/><text x="76.5742%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="76.3242%" y="613" width="0.4013%" height="15" fill="rgb(243,196,11)" fg:x="951" fg:w="5"/><text x="76.5742%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.6453%" y="597" width="0.0803%" height="15" fill="rgb(232,77,22)" fg:x="955" fg:w="1"/><text x="76.8953%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6453%" y="581" width="0.0803%" height="15" fill="rgb(215,80,25)" fg:x="955" fg:w="1"/><text x="76.8953%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (957 samples, 76.81%)</title><rect x="0.0000%" y="789" width="76.8058%" height="15" fill="rgb(210,173,7)" fg:x="0" fg:w="957"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (957 samples, 76.81%)</title><rect x="0.0000%" y="773" width="76.8058%" height="15" fill="rgb(207,101,10)" fg:x="0" fg:w="957"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (957 samples, 76.81%)</title><rect x="0.0000%" y="757" width="76.8058%" height="15" fill="rgb(246,57,48)" fg:x="0" fg:w="957"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (669 samples, 53.69%)</title><rect x="23.1140%" y="741" width="53.6918%" height="15" fill="rgb(236,184,40)" fg:x="288" fg:w="669"/><text x="23.3640%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (669 samples, 53.69%)</title><rect x="23.1140%" y="725" width="53.6918%" height="15" fill="rgb(210,205,13)" fg:x="288" fg:w="669"/><text x="23.3640%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::session::SetSession&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="76.7255%" y="709" width="0.0803%" height="15" fill="rgb(231,129,42)" fg:x="956" fg:w="1"/><text x="76.9755%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="76.8860%" y="725" width="0.3210%" height="15" fill="rgb(220,229,54)" fg:x="958" fg:w="4"/><text x="77.1360%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="76.8860%" y="709" width="0.3210%" height="15" fill="rgb(230,192,26)" fg:x="958" fg:w="4"/><text x="77.1360%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="76.8860%" y="693" width="0.3210%" height="15" fill="rgb(253,18,30)" fg:x="958" fg:w="4"/><text x="77.1360%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4 samples, 0.32%)</title><rect x="76.8860%" y="677" width="0.3210%" height="15" fill="rgb(216,62,53)" fg:x="958" fg:w="4"/><text x="77.1360%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.1268%" y="661" width="0.0803%" height="15" fill="rgb(230,79,29)" fg:x="961" fg:w="1"/><text x="77.3768%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.2071%" y="661" width="0.0803%" height="15" fill="rgb(242,26,26)" fg:x="962" fg:w="1"/><text x="77.4571%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.2071%" y="645" width="0.0803%" height="15" fill="rgb(227,125,21)" fg:x="962" fg:w="1"/><text x="77.4571%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.2071%" y="629" width="0.0803%" height="15" fill="rgb(229,93,26)" fg:x="962" fg:w="1"/><text x="77.4571%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.2071%" y="613" width="0.0803%" height="15" fill="rgb(227,228,8)" fg:x="962" fg:w="1"/><text x="77.4571%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.2071%" y="597" width="0.0803%" height="15" fill="rgb(233,56,0)" fg:x="962" fg:w="1"/><text x="77.4571%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.2071%" y="581" width="0.0803%" height="15" fill="rgb(225,185,17)" fg:x="962" fg:w="1"/><text x="77.4571%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2873%" y="629" width="0.0803%" height="15" fill="rgb(238,202,30)" fg:x="963" fg:w="1"/><text x="77.5373%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="76.8860%" y="741" width="0.5618%" height="15" fill="rgb(236,60,13)" fg:x="958" fg:w="7"/><text x="77.1360%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (3 samples, 0.24%)</title><rect x="77.2071%" y="725" width="0.2408%" height="15" fill="rgb(244,92,0)" fg:x="962" fg:w="3"/><text x="77.4571%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="77.2071%" y="709" width="0.2408%" height="15" fill="rgb(225,57,15)" fg:x="962" fg:w="3"/><text x="77.4571%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="77.2071%" y="693" width="0.2408%" height="15" fill="rgb(228,5,28)" fg:x="962" fg:w="3"/><text x="77.4571%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="77.2071%" y="677" width="0.2408%" height="15" fill="rgb(252,34,51)" fg:x="962" fg:w="3"/><text x="77.4571%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="77.2873%" y="661" width="0.1605%" height="15" fill="rgb(235,58,7)" fg:x="963" fg:w="2"/><text x="77.5373%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="77.2873%" y="645" width="0.1605%" height="15" fill="rgb(250,132,20)" fg:x="963" fg:w="2"/><text x="77.5373%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3676%" y="629" width="0.0803%" height="15" fill="rgb(217,164,0)" fg:x="964" fg:w="1"/><text x="77.6176%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3676%" y="613" width="0.0803%" height="15" fill="rgb(208,220,35)" fg:x="964" fg:w="1"/><text x="77.6176%" y="623.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="77.5281%" y="661" width="0.2408%" height="15" fill="rgb(227,42,51)" fg:x="966" fg:w="3"/><text x="77.7781%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (3 samples, 0.24%)</title><rect x="77.5281%" y="645" width="0.2408%" height="15" fill="rgb(225,146,38)" fg:x="966" fg:w="3"/><text x="77.7781%" y="655.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="77.5281%" y="629" width="0.2408%" height="15" fill="rgb(252,108,37)" fg:x="966" fg:w="3"/><text x="77.7781%" y="639.50"></text></g><g><title>glob::fill_todo (3 samples, 0.24%)</title><rect x="77.5281%" y="613" width="0.2408%" height="15" fill="rgb(244,101,24)" fg:x="966" fg:w="3"/><text x="77.7781%" y="623.50"></text></g><g><title>glob::is_dir (3 samples, 0.24%)</title><rect x="77.5281%" y="597" width="0.2408%" height="15" fill="rgb(213,161,50)" fg:x="966" fg:w="3"/><text x="77.7781%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="77.5281%" y="581" width="0.2408%" height="15" fill="rgb(248,159,19)" fg:x="966" fg:w="3"/><text x="77.7781%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="77.5281%" y="565" width="0.2408%" height="15" fill="rgb(233,179,15)" fg:x="966" fg:w="3"/><text x="77.7781%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="77.5281%" y="549" width="0.2408%" height="15" fill="rgb(248,178,3)" fg:x="966" fg:w="3"/><text x="77.7781%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="77.5281%" y="533" width="0.2408%" height="15" fill="rgb(245,190,41)" fg:x="966" fg:w="3"/><text x="77.7781%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="77.5281%" y="517" width="0.2408%" height="15" fill="rgb(218,151,19)" fg:x="966" fg:w="3"/><text x="77.7781%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="77.5281%" y="501" width="0.2408%" height="15" fill="rgb(245,25,44)" fg:x="966" fg:w="3"/><text x="77.7781%" y="511.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="77.5281%" y="485" width="0.2408%" height="15" fill="rgb(235,172,47)" fg:x="966" fg:w="3"/><text x="77.7781%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.7689%" y="661" width="0.0803%" height="15" fill="rgb(246,33,12)" fg:x="969" fg:w="1"/><text x="78.0189%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="77.7689%" y="645" width="0.0803%" height="15" fill="rgb(214,124,7)" fg:x="969" fg:w="1"/><text x="78.0189%" y="655.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="77.7689%" y="629" width="0.0803%" height="15" fill="rgb(246,186,18)" fg:x="969" fg:w="1"/><text x="78.0189%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="77.7689%" y="613" width="0.0803%" height="15" fill="rgb(231,94,1)" fg:x="969" fg:w="1"/><text x="78.0189%" y="623.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="77.7689%" y="597" width="0.0803%" height="15" fill="rgb(208,33,48)" fg:x="969" fg:w="1"/><text x="78.0189%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="77.7689%" y="581" width="0.0803%" height="15" fill="rgb(208,195,44)" fg:x="969" fg:w="1"/><text x="78.0189%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (5 samples, 0.40%)</title><rect x="77.5281%" y="677" width="0.4013%" height="15" fill="rgb(226,13,52)" fg:x="966" fg:w="5"/><text x="77.7781%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="77.8491%" y="661" width="0.0803%" height="15" fill="rgb(217,219,45)" fg:x="970" fg:w="1"/><text x="78.0991%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.8491%" y="645" width="0.0803%" height="15" fill="rgb(223,45,25)" fg:x="970" fg:w="1"/><text x="78.0991%" y="655.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (7 samples, 0.56%)</title><rect x="77.4478%" y="741" width="0.5618%" height="15" fill="rgb(241,163,0)" fg:x="965" fg:w="7"/><text x="77.6978%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (7 samples, 0.56%)</title><rect x="77.4478%" y="725" width="0.5618%" height="15" fill="rgb(216,68,47)" fg:x="965" fg:w="7"/><text x="77.6978%" y="735.50"></text></g><g><title>engine::session::Session::new (7 samples, 0.56%)</title><rect x="77.4478%" y="709" width="0.5618%" height="15" fill="rgb(236,119,45)" fg:x="965" fg:w="7"/><text x="77.6978%" y="719.50"></text></g><g><title>engine::session::Session::initialize (7 samples, 0.56%)</title><rect x="77.4478%" y="693" width="0.5618%" height="15" fill="rgb(209,188,24)" fg:x="965" fg:w="7"/><text x="77.6978%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="77.9294%" y="677" width="0.0803%" height="15" fill="rgb(221,118,7)" fg:x="971" fg:w="1"/><text x="78.1794%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.9294%" y="661" width="0.0803%" height="15" fill="rgb(213,148,43)" fg:x="971" fg:w="1"/><text x="78.1794%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::middleware (1 samples, 0.08%)</title><rect x="77.9294%" y="645" width="0.0803%" height="15" fill="rgb(231,21,43)" fg:x="971" fg:w="1"/><text x="78.1794%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9294%" y="629" width="0.0803%" height="15" fill="rgb(232,213,43)" fg:x="971" fg:w="1"/><text x="78.1794%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.0096%" y="677" width="0.0803%" height="15" fill="rgb(239,145,50)" fg:x="972" fg:w="1"/><text x="78.2596%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.0899%" y="645" width="0.0803%" height="15" fill="rgb(222,131,18)" fg:x="973" fg:w="1"/><text x="78.3399%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.1701%" y="613" width="0.0803%" height="15" fill="rgb(243,181,13)" fg:x="974" fg:w="1"/><text x="78.4201%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.1701%" y="597" width="0.0803%" height="15" fill="rgb(212,74,41)" fg:x="974" fg:w="1"/><text x="78.4201%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.1701%" y="581" width="0.0803%" height="15" fill="rgb(237,143,34)" fg:x="974" fg:w="1"/><text x="78.4201%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.1701%" y="565" width="0.0803%" height="15" fill="rgb(228,139,0)" fg:x="974" fg:w="1"/><text x="78.4201%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="78.2504%" y="597" width="0.2408%" height="15" fill="rgb(227,214,11)" fg:x="975" fg:w="3"/><text x="78.5004%" y="607.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="78.2504%" y="581" width="0.2408%" height="15" fill="rgb(228,118,39)" fg:x="975" fg:w="3"/><text x="78.5004%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="78.3307%" y="565" width="0.1605%" height="15" fill="rgb(207,117,22)" fg:x="976" fg:w="2"/><text x="78.5807%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="78.3307%" y="549" width="0.1605%" height="15" fill="rgb(225,91,8)" fg:x="976" fg:w="2"/><text x="78.5807%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="78.3307%" y="533" width="0.1605%" height="15" fill="rgb(230,219,48)" fg:x="976" fg:w="2"/><text x="78.5807%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="78.3307%" y="517" width="0.1605%" height="15" fill="rgb(244,0,23)" fg:x="976" fg:w="2"/><text x="78.5807%" y="527.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="78.3307%" y="501" width="0.1605%" height="15" fill="rgb(206,212,23)" fg:x="976" fg:w="2"/><text x="78.5807%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.4912%" y="581" width="0.0803%" height="15" fill="rgb(254,62,10)" fg:x="978" fg:w="1"/><text x="78.7412%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="78.1701%" y="629" width="0.4815%" height="15" fill="rgb(236,58,8)" fg:x="974" fg:w="6"/><text x="78.4201%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="78.2504%" y="613" width="0.4013%" height="15" fill="rgb(232,212,17)" fg:x="975" fg:w="5"/><text x="78.5004%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="78.4912%" y="597" width="0.1605%" height="15" fill="rgb(206,132,9)" fg:x="978" fg:w="2"/><text x="78.7412%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.5714%" y="581" width="0.0803%" height="15" fill="rgb(234,97,28)" fg:x="979" fg:w="1"/><text x="78.8214%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.5714%" y="565" width="0.0803%" height="15" fill="rgb(254,144,9)" fg:x="979" fg:w="1"/><text x="78.8214%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.5714%" y="549" width="0.0803%" height="15" fill="rgb(244,204,43)" fg:x="979" fg:w="1"/><text x="78.8214%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.5714%" y="533" width="0.0803%" height="15" fill="rgb(248,177,16)" fg:x="979" fg:w="1"/><text x="78.8214%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.5714%" y="517" width="0.0803%" height="15" fill="rgb(219,110,15)" fg:x="979" fg:w="1"/><text x="78.8214%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.5714%" y="501" width="0.0803%" height="15" fill="rgb(212,203,25)" fg:x="979" fg:w="1"/><text x="78.8214%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.5714%" y="485" width="0.0803%" height="15" fill="rgb(205,50,1)" fg:x="979" fg:w="1"/><text x="78.8214%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="78.6517%" y="581" width="0.0803%" height="15" fill="rgb(222,152,41)" fg:x="980" fg:w="1"/><text x="78.9017%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.6517%" y="565" width="0.0803%" height="15" fill="rgb(236,83,3)" fg:x="980" fg:w="1"/><text x="78.9017%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6517%" y="549" width="0.0803%" height="15" fill="rgb(214,30,54)" fg:x="980" fg:w="1"/><text x="78.9017%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="78.7319%" y="565" width="0.0803%" height="15" fill="rgb(250,117,31)" fg:x="981" fg:w="1"/><text x="78.9819%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.7319%" y="549" width="0.0803%" height="15" fill="rgb(228,77,14)" fg:x="981" fg:w="1"/><text x="78.9819%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.7319%" y="533" width="0.0803%" height="15" fill="rgb(241,3,28)" fg:x="981" fg:w="1"/><text x="78.9819%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.7319%" y="517" width="0.0803%" height="15" fill="rgb(221,175,52)" fg:x="981" fg:w="1"/><text x="78.9819%" y="527.50"></text></g><g><title>engine::session::Session::flush (11 samples, 0.88%)</title><rect x="78.0096%" y="725" width="0.8828%" height="15" fill="rgb(237,91,6)" fg:x="972" fg:w="11"/><text x="78.2596%" y="735.50"></text></g><g><title>engine::session::state::State::close (11 samples, 0.88%)</title><rect x="78.0096%" y="709" width="0.8828%" height="15" fill="rgb(246,46,42)" fg:x="972" fg:w="11"/><text x="78.2596%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (11 samples, 0.88%)</title><rect x="78.0096%" y="693" width="0.8828%" height="15" fill="rgb(235,199,0)" fg:x="972" fg:w="11"/><text x="78.2596%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (10 samples, 0.80%)</title><rect x="78.0899%" y="677" width="0.8026%" height="15" fill="rgb(224,44,40)" fg:x="973" fg:w="10"/><text x="78.3399%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.80%)</title><rect x="78.0899%" y="661" width="0.8026%" height="15" fill="rgb(209,24,35)" fg:x="973" fg:w="10"/><text x="78.3399%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (9 samples, 0.72%)</title><rect x="78.1701%" y="645" width="0.7223%" height="15" fill="rgb(244,46,22)" fg:x="974" fg:w="9"/><text x="78.4201%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="78.6517%" y="629" width="0.2408%" height="15" fill="rgb(235,99,8)" fg:x="980" fg:w="3"/><text x="78.9017%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="78.6517%" y="613" width="0.2408%" height="15" fill="rgb(218,127,36)" fg:x="980" fg:w="3"/><text x="78.9017%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="78.6517%" y="597" width="0.2408%" height="15" fill="rgb(238,47,46)" fg:x="980" fg:w="3"/><text x="78.9017%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="78.7319%" y="581" width="0.1605%" height="15" fill="rgb(233,65,17)" fg:x="981" fg:w="2"/><text x="78.9819%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.8122%" y="565" width="0.0803%" height="15" fill="rgb(239,22,33)" fg:x="982" fg:w="1"/><text x="79.0622%" y="575.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="78.8925%" y="725" width="0.0803%" height="15" fill="rgb(243,66,43)" fg:x="983" fg:w="1"/><text x="79.1425%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="78.8925%" y="709" width="0.0803%" height="15" fill="rgb(235,210,28)" fg:x="983" fg:w="1"/><text x="79.1425%" y="719.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="78.8925%" y="693" width="0.0803%" height="15" fill="rgb(205,191,50)" fg:x="983" fg:w="1"/><text x="79.1425%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.8925%" y="677" width="0.0803%" height="15" fill="rgb(251,217,19)" fg:x="983" fg:w="1"/><text x="79.1425%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="78.9727%" y="725" width="0.0803%" height="15" fill="rgb(205,174,37)" fg:x="984" fg:w="1"/><text x="79.2227%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="78.9727%" y="709" width="0.0803%" height="15" fill="rgb(212,158,42)" fg:x="984" fg:w="1"/><text x="79.2227%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="78.9727%" y="693" width="0.0803%" height="15" fill="rgb(212,208,51)" fg:x="984" fg:w="1"/><text x="79.2227%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="78.9727%" y="677" width="0.0803%" height="15" fill="rgb(225,198,20)" fg:x="984" fg:w="1"/><text x="79.2227%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.9727%" y="661" width="0.0803%" height="15" fill="rgb(247,41,44)" fg:x="984" fg:w="1"/><text x="79.2227%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="78.9727%" y="645" width="0.0803%" height="15" fill="rgb(228,33,41)" fg:x="984" fg:w="1"/><text x="79.2227%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="78.9727%" y="629" width="0.0803%" height="15" fill="rgb(215,47,52)" fg:x="984" fg:w="1"/><text x="79.2227%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.9727%" y="613" width="0.0803%" height="15" fill="rgb(248,106,37)" fg:x="984" fg:w="1"/><text x="79.2227%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.9727%" y="597" width="0.0803%" height="15" fill="rgb(238,91,29)" fg:x="984" fg:w="1"/><text x="79.2227%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.9727%" y="581" width="0.0803%" height="15" fill="rgb(226,111,40)" fg:x="984" fg:w="1"/><text x="79.2227%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="79.0530%" y="725" width="0.1605%" height="15" fill="rgb(229,159,36)" fg:x="985" fg:w="2"/><text x="79.3030%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="79.0530%" y="709" width="0.1605%" height="15" fill="rgb(221,109,4)" fg:x="985" fg:w="2"/><text x="79.3030%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="79.0530%" y="693" width="0.1605%" height="15" fill="rgb(236,56,25)" fg:x="985" fg:w="2"/><text x="79.3030%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (2 samples, 0.16%)</title><rect x="79.0530%" y="677" width="0.1605%" height="15" fill="rgb(244,113,23)" fg:x="985" fg:w="2"/><text x="79.3030%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="79.0530%" y="661" width="0.1605%" height="15" fill="rgb(249,132,2)" fg:x="985" fg:w="2"/><text x="79.3030%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (2 samples, 0.16%)</title><rect x="79.0530%" y="645" width="0.1605%" height="15" fill="rgb(205,185,21)" fg:x="985" fg:w="2"/><text x="79.3030%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="79.0530%" y="629" width="0.1605%" height="15" fill="rgb(245,130,2)" fg:x="985" fg:w="2"/><text x="79.3030%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="79.0530%" y="613" width="0.1605%" height="15" fill="rgb(246,71,26)" fg:x="985" fg:w="2"/><text x="79.3030%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="79.0530%" y="597" width="0.1605%" height="15" fill="rgb(234,194,6)" fg:x="985" fg:w="2"/><text x="79.3030%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="79.0530%" y="581" width="0.1605%" height="15" fill="rgb(206,24,32)" fg:x="985" fg:w="2"/><text x="79.3030%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.1332%" y="565" width="0.0803%" height="15" fill="rgb(233,7,54)" fg:x="986" fg:w="1"/><text x="79.3832%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="79.1332%" y="549" width="0.0803%" height="15" fill="rgb(252,46,1)" fg:x="986" fg:w="1"/><text x="79.3832%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="79.2135%" y="693" width="0.0803%" height="15" fill="rgb(216,113,53)" fg:x="987" fg:w="1"/><text x="79.4635%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="79.2135%" y="677" width="0.0803%" height="15" fill="rgb(215,40,24)" fg:x="987" fg:w="1"/><text x="79.4635%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="79.2135%" y="661" width="0.0803%" height="15" fill="rgb(233,222,8)" fg:x="987" fg:w="1"/><text x="79.4635%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="79.2135%" y="645" width="0.0803%" height="15" fill="rgb(248,73,28)" fg:x="987" fg:w="1"/><text x="79.4635%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.2135%" y="629" width="0.0803%" height="15" fill="rgb(247,126,28)" fg:x="987" fg:w="1"/><text x="79.4635%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="79.2937%" y="645" width="0.0803%" height="15" fill="rgb(242,173,54)" fg:x="988" fg:w="1"/><text x="79.5437%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="79.2937%" y="629" width="0.0803%" height="15" fill="rgb(244,186,22)" fg:x="988" fg:w="1"/><text x="79.5437%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2937%" y="613" width="0.0803%" height="15" fill="rgb(231,187,4)" fg:x="988" fg:w="1"/><text x="79.5437%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2937%" y="597" width="0.0803%" height="15" fill="rgb(252,66,47)" fg:x="988" fg:w="1"/><text x="79.5437%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.2937%" y="581" width="0.0803%" height="15" fill="rgb(240,228,28)" fg:x="988" fg:w="1"/><text x="79.5437%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2937%" y="565" width="0.0803%" height="15" fill="rgb(237,63,43)" fg:x="988" fg:w="1"/><text x="79.5437%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2937%" y="549" width="0.0803%" height="15" fill="rgb(214,1,44)" fg:x="988" fg:w="1"/><text x="79.5437%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2937%" y="533" width="0.0803%" height="15" fill="rgb(212,2,46)" fg:x="988" fg:w="1"/><text x="79.5437%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3740%" y="565" width="0.0803%" height="15" fill="rgb(213,142,5)" fg:x="989" fg:w="1"/><text x="79.6240%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3740%" y="549" width="0.0803%" height="15" fill="rgb(229,135,1)" fg:x="989" fg:w="1"/><text x="79.6240%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.3740%" y="533" width="0.0803%" height="15" fill="rgb(252,98,38)" fg:x="989" fg:w="1"/><text x="79.6240%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.3740%" y="517" width="0.0803%" height="15" fill="rgb(206,89,40)" fg:x="989" fg:w="1"/><text x="79.6240%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.3740%" y="501" width="0.0803%" height="15" fill="rgb(219,73,36)" fg:x="989" fg:w="1"/><text x="79.6240%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="79.3740%" y="485" width="0.0803%" height="15" fill="rgb(207,168,32)" fg:x="989" fg:w="1"/><text x="79.6240%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.3740%" y="469" width="0.0803%" height="15" fill="rgb(215,113,21)" fg:x="989" fg:w="1"/><text x="79.6240%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (4 samples, 0.32%)</title><rect x="79.2135%" y="725" width="0.3210%" height="15" fill="rgb(217,144,43)" fg:x="987" fg:w="4"/><text x="79.4635%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="79.2135%" y="709" width="0.3210%" height="15" fill="rgb(249,48,50)" fg:x="987" fg:w="4"/><text x="79.4635%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="79.2937%" y="693" width="0.2408%" height="15" fill="rgb(242,1,26)" fg:x="988" fg:w="3"/><text x="79.5437%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="79.2937%" y="677" width="0.2408%" height="15" fill="rgb(231,167,42)" fg:x="988" fg:w="3"/><text x="79.5437%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="79.2937%" y="661" width="0.2408%" height="15" fill="rgb(242,177,45)" fg:x="988" fg:w="3"/><text x="79.5437%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="79.3740%" y="645" width="0.1605%" height="15" fill="rgb(232,121,42)" fg:x="989" fg:w="2"/><text x="79.6240%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="79.3740%" y="629" width="0.1605%" height="15" fill="rgb(205,8,42)" fg:x="989" fg:w="2"/><text x="79.6240%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.3740%" y="613" width="0.1605%" height="15" fill="rgb(238,199,24)" fg:x="989" fg:w="2"/><text x="79.6240%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.3740%" y="597" width="0.1605%" height="15" fill="rgb(228,112,2)" fg:x="989" fg:w="2"/><text x="79.6240%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.3740%" y="581" width="0.1605%" height="15" fill="rgb(215,115,33)" fg:x="989" fg:w="2"/><text x="79.6240%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.4543%" y="565" width="0.0803%" height="15" fill="rgb(230,209,34)" fg:x="990" fg:w="1"/><text x="79.7043%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.5345%" y="645" width="0.0803%" height="15" fill="rgb(246,76,12)" fg:x="991" fg:w="1"/><text x="79.7845%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="79.5345%" y="629" width="0.0803%" height="15" fill="rgb(240,110,9)" fg:x="991" fg:w="1"/><text x="79.7845%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="79.5345%" y="613" width="0.0803%" height="15" fill="rgb(224,94,46)" fg:x="991" fg:w="1"/><text x="79.7845%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="79.5345%" y="597" width="0.0803%" height="15" fill="rgb(247,150,22)" fg:x="991" fg:w="1"/><text x="79.7845%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.5345%" y="581" width="0.0803%" height="15" fill="rgb(249,85,13)" fg:x="991" fg:w="1"/><text x="79.7845%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.5345%" y="565" width="0.0803%" height="15" fill="rgb(208,77,41)" fg:x="991" fg:w="1"/><text x="79.7845%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.6148%" y="597" width="0.0803%" height="15" fill="rgb(240,42,44)" fg:x="992" fg:w="1"/><text x="79.8648%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.6148%" y="581" width="0.0803%" height="15" fill="rgb(222,10,51)" fg:x="992" fg:w="1"/><text x="79.8648%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.6148%" y="565" width="0.0803%" height="15" fill="rgb(208,146,53)" fg:x="992" fg:w="1"/><text x="79.8648%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="79.6148%" y="549" width="0.0803%" height="15" fill="rgb(236,162,23)" fg:x="992" fg:w="1"/><text x="79.8648%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.6148%" y="533" width="0.0803%" height="15" fill="rgb(218,66,21)" fg:x="992" fg:w="1"/><text x="79.8648%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.6950%" y="581" width="0.0803%" height="15" fill="rgb(233,6,47)" fg:x="993" fg:w="1"/><text x="79.9450%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.6950%" y="565" width="0.0803%" height="15" fill="rgb(236,59,51)" fg:x="993" fg:w="1"/><text x="79.9450%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.6950%" y="549" width="0.0803%" height="15" fill="rgb(242,12,46)" fg:x="993" fg:w="1"/><text x="79.9450%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.6950%" y="533" width="0.0803%" height="15" fill="rgb(243,142,19)" fg:x="993" fg:w="1"/><text x="79.9450%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.7753%" y="549" width="0.0803%" height="15" fill="rgb(217,28,17)" fg:x="994" fg:w="1"/><text x="80.0253%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.7753%" y="533" width="0.0803%" height="15" fill="rgb(228,2,27)" fg:x="994" fg:w="1"/><text x="80.0253%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.7753%" y="517" width="0.0803%" height="15" fill="rgb(214,221,4)" fg:x="994" fg:w="1"/><text x="80.0253%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.8555%" y="533" width="0.0803%" height="15" fill="rgb(224,69,26)" fg:x="995" fg:w="1"/><text x="80.1055%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.8555%" y="517" width="0.0803%" height="15" fill="rgb(219,70,4)" fg:x="995" fg:w="1"/><text x="80.1055%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="79.6950%" y="597" width="0.3210%" height="15" fill="rgb(218,157,39)" fg:x="993" fg:w="4"/><text x="79.9450%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="79.7753%" y="581" width="0.2408%" height="15" fill="rgb(238,36,28)" fg:x="994" fg:w="3"/><text x="80.0253%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="79.7753%" y="565" width="0.2408%" height="15" fill="rgb(232,29,0)" fg:x="994" fg:w="3"/><text x="80.0253%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="79.8555%" y="549" width="0.1605%" height="15" fill="rgb(243,138,46)" fg:x="995" fg:w="2"/><text x="80.1055%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.9358%" y="533" width="0.0803%" height="15" fill="rgb(232,186,41)" fg:x="996" fg:w="1"/><text x="80.1858%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.9358%" y="517" width="0.0803%" height="15" fill="rgb(252,166,17)" fg:x="996" fg:w="1"/><text x="80.1858%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.9358%" y="501" width="0.0803%" height="15" fill="rgb(228,179,12)" fg:x="996" fg:w="1"/><text x="80.1858%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.9358%" y="485" width="0.0803%" height="15" fill="rgb(254,205,53)" fg:x="996" fg:w="1"/><text x="80.1858%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="80.0161%" y="581" width="0.0803%" height="15" fill="rgb(224,163,47)" fg:x="997" fg:w="1"/><text x="80.2661%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.0161%" y="565" width="0.0803%" height="15" fill="rgb(208,43,47)" fg:x="997" fg:w="1"/><text x="80.2661%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.0963%" y="501" width="0.0803%" height="15" fill="rgb(224,198,38)" fg:x="998" fg:w="1"/><text x="80.3463%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="80.1766%" y="501" width="0.0803%" height="15" fill="rgb(234,12,40)" fg:x="999" fg:w="1"/><text x="80.4266%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1766%" y="485" width="0.0803%" height="15" fill="rgb(237,212,39)" fg:x="999" fg:w="1"/><text x="80.4266%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.1766%" y="469" width="0.0803%" height="15" fill="rgb(253,2,33)" fg:x="999" fg:w="1"/><text x="80.4266%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1766%" y="453" width="0.0803%" height="15" fill="rgb(251,29,16)" fg:x="999" fg:w="1"/><text x="80.4266%" y="463.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.80%)</title><rect x="79.5345%" y="709" width="0.8026%" height="15" fill="rgb(214,38,29)" fg:x="991" fg:w="10"/><text x="79.7845%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (10 samples, 0.80%)</title><rect x="79.5345%" y="693" width="0.8026%" height="15" fill="rgb(226,226,29)" fg:x="991" fg:w="10"/><text x="79.7845%" y="703.50"></text></g><g><title>engine::session::state::State::close (10 samples, 0.80%)</title><rect x="79.5345%" y="677" width="0.8026%" height="15" fill="rgb(236,79,42)" fg:x="991" fg:w="10"/><text x="79.7845%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (10 samples, 0.80%)</title><rect x="79.5345%" y="661" width="0.8026%" height="15" fill="rgb(222,12,36)" fg:x="991" fg:w="10"/><text x="79.7845%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.72%)</title><rect x="79.6148%" y="645" width="0.7223%" height="15" fill="rgb(232,123,44)" fg:x="992" fg:w="9"/><text x="79.8648%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="79.6148%" y="629" width="0.7223%" height="15" fill="rgb(234,93,50)" fg:x="992" fg:w="9"/><text x="79.8648%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (9 samples, 0.72%)</title><rect x="79.6148%" y="613" width="0.7223%" height="15" fill="rgb(210,86,49)" fg:x="992" fg:w="9"/><text x="79.8648%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="80.0161%" y="597" width="0.3210%" height="15" fill="rgb(224,91,54)" fg:x="997" fg:w="4"/><text x="80.2661%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="80.0963%" y="581" width="0.2408%" height="15" fill="rgb(239,169,9)" fg:x="998" fg:w="3"/><text x="80.3463%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="80.0963%" y="565" width="0.2408%" height="15" fill="rgb(238,29,17)" fg:x="998" fg:w="3"/><text x="80.3463%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="80.0963%" y="549" width="0.2408%" height="15" fill="rgb(227,160,22)" fg:x="998" fg:w="3"/><text x="80.3463%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="80.0963%" y="533" width="0.2408%" height="15" fill="rgb(231,129,52)" fg:x="998" fg:w="3"/><text x="80.3463%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="80.0963%" y="517" width="0.2408%" height="15" fill="rgb(241,184,9)" fg:x="998" fg:w="3"/><text x="80.3463%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.2568%" y="501" width="0.0803%" height="15" fill="rgb(217,43,48)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.2568%" y="485" width="0.0803%" height="15" fill="rgb(213,49,1)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.2568%" y="469" width="0.0803%" height="15" fill="rgb(223,79,39)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.2568%" y="453" width="0.0803%" height="15" fill="rgb(228,227,46)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.3371%" y="629" width="0.0803%" height="15" fill="rgb(245,89,41)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="80.3371%" y="709" width="0.1605%" height="15" fill="rgb(253,83,21)" fg:x="1001" fg:w="2"/><text x="80.5871%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="80.3371%" y="693" width="0.1605%" height="15" fill="rgb(229,116,51)" fg:x="1001" fg:w="2"/><text x="80.5871%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="80.3371%" y="677" width="0.1605%" height="15" fill="rgb(246,67,26)" fg:x="1001" fg:w="2"/><text x="80.5871%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="80.3371%" y="661" width="0.1605%" height="15" fill="rgb(250,117,20)" fg:x="1001" fg:w="2"/><text x="80.5871%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="80.3371%" y="645" width="0.1605%" height="15" fill="rgb(207,88,17)" fg:x="1001" fg:w="2"/><text x="80.5871%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="80.4173%" y="629" width="0.0803%" height="15" fill="rgb(212,98,36)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.4173%" y="613" width="0.0803%" height="15" fill="rgb(221,72,6)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.4173%" y="597" width="0.0803%" height="15" fill="rgb(235,129,19)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.4173%" y="581" width="0.0803%" height="15" fill="rgb(237,200,6)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.4173%" y="565" width="0.0803%" height="15" fill="rgb(239,69,54)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="80.4976%" y="677" width="0.0803%" height="15" fill="rgb(214,68,45)" fg:x="1003" fg:w="1"/><text x="80.7476%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="80.4976%" y="661" width="0.0803%" height="15" fill="rgb(254,160,8)" fg:x="1003" fg:w="1"/><text x="80.7476%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.4976%" y="645" width="0.0803%" height="15" fill="rgb(215,226,31)" fg:x="1003" fg:w="1"/><text x="80.7476%" y="655.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="80.4976%" y="629" width="0.0803%" height="15" fill="rgb(253,6,35)" fg:x="1003" fg:w="1"/><text x="80.7476%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.4976%" y="613" width="0.0803%" height="15" fill="rgb(219,96,42)" fg:x="1003" fg:w="1"/><text x="80.7476%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (14 samples, 1.12%)</title><rect x="79.5345%" y="725" width="1.1236%" height="15" fill="rgb(207,170,13)" fg:x="991" fg:w="14"/><text x="79.7845%" y="735.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="80.4976%" y="709" width="0.1605%" height="15" fill="rgb(239,101,5)" fg:x="1003" fg:w="2"/><text x="80.7476%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="80.4976%" y="693" width="0.1605%" height="15" fill="rgb(228,183,34)" fg:x="1003" fg:w="2"/><text x="80.7476%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.5778%" y="677" width="0.0803%" height="15" fill="rgb(205,28,31)" fg:x="1004" fg:w="1"/><text x="80.8278%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="80.6581%" y="693" width="0.0803%" height="15" fill="rgb(214,118,50)" fg:x="1005" fg:w="1"/><text x="80.9081%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.7384%" y="677" width="0.0803%" height="15" fill="rgb(213,108,51)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.7384%" y="661" width="0.0803%" height="15" fill="rgb(238,56,37)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="80.7384%" y="645" width="0.0803%" height="15" fill="rgb(214,136,28)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.7384%" y="629" width="0.0803%" height="15" fill="rgb(221,201,54)" fg:x="1006" fg:w="1"/><text x="80.9884%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="80.6581%" y="725" width="0.2408%" height="15" fill="rgb(228,216,39)" fg:x="1005" fg:w="3"/><text x="80.9081%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="80.6581%" y="709" width="0.2408%" height="15" fill="rgb(207,229,49)" fg:x="1005" fg:w="3"/><text x="80.9081%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="80.7384%" y="693" width="0.1605%" height="15" fill="rgb(224,23,43)" fg:x="1006" fg:w="2"/><text x="80.9884%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="80.8186%" y="677" width="0.0803%" height="15" fill="rgb(247,97,18)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="80.8186%" y="661" width="0.0803%" height="15" fill="rgb(232,53,32)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8186%" y="645" width="0.0803%" height="15" fill="rgb(247,38,23)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.8186%" y="629" width="0.0803%" height="15" fill="rgb(228,101,52)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="80.8186%" y="613" width="0.0803%" height="15" fill="rgb(231,45,36)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="80.8186%" y="597" width="0.0803%" height="15" fill="rgb(221,183,50)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.8186%" y="581" width="0.0803%" height="15" fill="rgb(251,132,12)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8186%" y="565" width="0.0803%" height="15" fill="rgb(252,50,16)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.8186%" y="549" width="0.0803%" height="15" fill="rgb(224,60,15)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8186%" y="533" width="0.0803%" height="15" fill="rgb(254,2,34)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.8186%" y="517" width="0.0803%" height="15" fill="rgb(232,154,8)" fg:x="1007" fg:w="1"/><text x="81.0686%" y="527.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="80.8989%" y="709" width="0.0803%" height="15" fill="rgb(235,190,52)" fg:x="1008" fg:w="1"/><text x="81.1489%" y="719.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (38 samples, 3.05%)</title><rect x="78.0096%" y="741" width="3.0498%" height="15" fill="rgb(213,218,38)" fg:x="972" fg:w="38"/><text x="78.2596%" y="751.50">&lt;te..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (2 samples, 0.16%)</title><rect x="80.8989%" y="725" width="0.1605%" height="15" fill="rgb(237,50,37)" fg:x="1008" fg:w="2"/><text x="81.1489%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="80.9791%" y="709" width="0.0803%" height="15" fill="rgb(235,51,35)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="80.9791%" y="693" width="0.0803%" height="15" fill="rgb(244,40,52)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="80.9791%" y="677" width="0.0803%" height="15" fill="rgb(217,225,45)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="80.9791%" y="661" width="0.0803%" height="15" fill="rgb(247,191,36)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.9791%" y="645" width="0.0803%" height="15" fill="rgb(251,144,31)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.9791%" y="629" width="0.0803%" height="15" fill="rgb(227,155,41)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.9791%" y="613" width="0.0803%" height="15" fill="rgb(236,121,36)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.9791%" y="597" width="0.0803%" height="15" fill="rgb(221,128,28)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.9791%" y="581" width="0.0803%" height="15" fill="rgb(249,67,50)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.9791%" y="565" width="0.0803%" height="15" fill="rgb(241,126,38)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.9791%" y="549" width="0.0803%" height="15" fill="rgb(239,33,14)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.9791%" y="533" width="0.0803%" height="15" fill="rgb(207,221,54)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.9791%" y="517" width="0.0803%" height="15" fill="rgb(242,138,43)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.9791%" y="501" width="0.0803%" height="15" fill="rgb(231,118,19)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.9791%" y="485" width="0.0803%" height="15" fill="rgb(214,128,54)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.9791%" y="469" width="0.0803%" height="15" fill="rgb(236,136,6)" fg:x="1009" fg:w="1"/><text x="81.2291%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="81.0594%" y="741" width="0.0803%" height="15" fill="rgb(247,30,38)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.0594%" y="725" width="0.0803%" height="15" fill="rgb(249,189,40)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.0594%" y="709" width="0.0803%" height="15" fill="rgb(247,179,7)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.0594%" y="693" width="0.0803%" height="15" fill="rgb(239,46,52)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.0594%" y="677" width="0.0803%" height="15" fill="rgb(225,28,52)" fg:x="1010" fg:w="1"/><text x="81.3094%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.1396%" y="661" width="0.0803%" height="15" fill="rgb(217,208,44)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.1396%" y="645" width="0.0803%" height="15" fill="rgb(224,11,34)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.1396%" y="629" width="0.0803%" height="15" fill="rgb(205,134,17)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.1396%" y="613" width="0.0803%" height="15" fill="rgb(237,125,9)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.1396%" y="597" width="0.0803%" height="15" fill="rgb(208,139,47)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.1396%" y="581" width="0.0803%" height="15" fill="rgb(242,5,5)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.1396%" y="565" width="0.0803%" height="15" fill="rgb(218,78,2)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.1396%" y="549" width="0.0803%" height="15" fill="rgb(217,75,16)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.1396%" y="533" width="0.0803%" height="15" fill="rgb(212,56,17)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.1396%" y="517" width="0.0803%" height="15" fill="rgb(228,61,29)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="81.1396%" y="501" width="0.0803%" height="15" fill="rgb(247,202,38)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="81.1396%" y="485" width="0.0803%" height="15" fill="rgb(211,216,43)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="81.1396%" y="469" width="0.0803%" height="15" fill="rgb(220,7,49)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="81.1396%" y="453" width="0.0803%" height="15" fill="rgb(219,158,7)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="81.1396%" y="437" width="0.0803%" height="15" fill="rgb(206,127,9)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="81.1396%" y="421" width="0.0803%" height="15" fill="rgb(206,103,43)" fg:x="1011" fg:w="1"/><text x="81.3896%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (2 samples, 0.16%)</title><rect x="81.1396%" y="709" width="0.1605%" height="15" fill="rgb(240,108,41)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="719.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (2 samples, 0.16%)</title><rect x="81.1396%" y="693" width="0.1605%" height="15" fill="rgb(252,212,6)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="81.1396%" y="677" width="0.1605%" height="15" fill="rgb(248,105,31)" fg:x="1011" fg:w="2"/><text x="81.3896%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.2199%" y="661" width="0.0803%" height="15" fill="rgb(241,123,4)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.2199%" y="645" width="0.0803%" height="15" fill="rgb(223,74,37)" fg:x="1012" fg:w="1"/><text x="81.4699%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.3002%" y="693" width="0.0803%" height="15" fill="rgb(251,219,28)" fg:x="1013" fg:w="1"/><text x="81.5502%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="81.3002%" y="677" width="0.0803%" height="15" fill="rgb(218,36,31)" fg:x="1013" fg:w="1"/><text x="81.5502%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="81.3002%" y="661" width="0.0803%" height="15" fill="rgb(229,40,15)" fg:x="1013" fg:w="1"/><text x="81.5502%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.3804%" y="629" width="0.0803%" height="15" fill="rgb(208,138,37)" fg:x="1014" fg:w="1"/><text x="81.6304%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.3804%" y="613" width="0.0803%" height="15" fill="rgb(208,40,52)" fg:x="1014" fg:w="1"/><text x="81.6304%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.3804%" y="597" width="0.0803%" height="15" fill="rgb(246,181,48)" fg:x="1014" fg:w="1"/><text x="81.6304%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="81.3804%" y="645" width="0.1605%" height="15" fill="rgb(253,178,36)" fg:x="1014" fg:w="2"/><text x="81.6304%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.4607%" y="629" width="0.0803%" height="15" fill="rgb(210,170,6)" fg:x="1015" fg:w="1"/><text x="81.7107%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.5409%" y="613" width="0.0803%" height="15" fill="rgb(243,62,22)" fg:x="1016" fg:w="1"/><text x="81.7909%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="81.5409%" y="629" width="0.1605%" height="15" fill="rgb(213,145,26)" fg:x="1016" fg:w="2"/><text x="81.7909%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.6212%" y="613" width="0.0803%" height="15" fill="rgb(237,177,23)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.6212%" y="597" width="0.0803%" height="15" fill="rgb(252,5,24)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.6212%" y="581" width="0.0803%" height="15" fill="rgb(230,108,54)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.7014%" y="613" width="0.0803%" height="15" fill="rgb(252,192,41)" fg:x="1018" fg:w="1"/><text x="81.9514%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.7014%" y="597" width="0.0803%" height="15" fill="rgb(218,125,20)" fg:x="1018" fg:w="1"/><text x="81.9514%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.7817%" y="565" width="0.0803%" height="15" fill="rgb(230,223,15)" fg:x="1019" fg:w="1"/><text x="82.0317%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.7817%" y="549" width="0.0803%" height="15" fill="rgb(239,99,47)" fg:x="1019" fg:w="1"/><text x="82.0317%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.7817%" y="533" width="0.0803%" height="15" fill="rgb(222,214,23)" fg:x="1019" fg:w="1"/><text x="82.0317%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.7817%" y="517" width="0.0803%" height="15" fill="rgb(250,98,43)" fg:x="1019" fg:w="1"/><text x="82.0317%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.7817%" y="501" width="0.0803%" height="15" fill="rgb(226,140,11)" fg:x="1019" fg:w="1"/><text x="82.0317%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.7817%" y="485" width="0.0803%" height="15" fill="rgb(239,2,22)" fg:x="1019" fg:w="1"/><text x="82.0317%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.7817%" y="469" width="0.0803%" height="15" fill="rgb(209,106,26)" fg:x="1019" fg:w="1"/><text x="82.0317%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="81.7817%" y="597" width="0.1605%" height="15" fill="rgb(209,135,11)" fg:x="1019" fg:w="2"/><text x="82.0317%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="81.7817%" y="581" width="0.1605%" height="15" fill="rgb(241,58,6)" fg:x="1019" fg:w="2"/><text x="82.0317%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="81.8620%" y="565" width="0.0803%" height="15" fill="rgb(214,78,1)" fg:x="1020" fg:w="1"/><text x="82.1120%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="81.5409%" y="645" width="0.4815%" height="15" fill="rgb(229,135,33)" fg:x="1016" fg:w="6"/><text x="81.7909%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="81.7014%" y="629" width="0.3210%" height="15" fill="rgb(245,87,50)" fg:x="1018" fg:w="4"/><text x="81.9514%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="81.7817%" y="613" width="0.2408%" height="15" fill="rgb(222,222,8)" fg:x="1019" fg:w="3"/><text x="82.0317%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.9422%" y="597" width="0.0803%" height="15" fill="rgb(214,97,50)" fg:x="1021" fg:w="1"/><text x="82.1922%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.9422%" y="581" width="0.0803%" height="15" fill="rgb(244,161,51)" fg:x="1021" fg:w="1"/><text x="82.1922%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.9422%" y="565" width="0.0803%" height="15" fill="rgb(225,17,4)" fg:x="1021" fg:w="1"/><text x="82.1922%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="82.1027%" y="533" width="0.0803%" height="15" fill="rgb(238,10,13)" fg:x="1023" fg:w="1"/><text x="82.3527%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="82.1027%" y="517" width="0.0803%" height="15" fill="rgb(239,169,14)" fg:x="1023" fg:w="1"/><text x="82.3527%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="82.0225%" y="613" width="0.2408%" height="15" fill="rgb(213,105,25)" fg:x="1022" fg:w="3"/><text x="82.2725%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="82.0225%" y="597" width="0.2408%" height="15" fill="rgb(233,4,17)" fg:x="1022" fg:w="3"/><text x="82.2725%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="82.0225%" y="581" width="0.2408%" height="15" fill="rgb(212,5,35)" fg:x="1022" fg:w="3"/><text x="82.2725%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="82.1027%" y="565" width="0.1605%" height="15" fill="rgb(216,3,14)" fg:x="1023" fg:w="2"/><text x="82.3527%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="82.1027%" y="549" width="0.1605%" height="15" fill="rgb(240,105,33)" fg:x="1023" fg:w="2"/><text x="82.3527%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.1830%" y="533" width="0.0803%" height="15" fill="rgb(216,73,0)" fg:x="1024" fg:w="1"/><text x="82.4330%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="82.2632%" y="613" width="0.0803%" height="15" fill="rgb(217,153,48)" fg:x="1025" fg:w="1"/><text x="82.5132%" y="623.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="82.3435%" y="613" width="0.0803%" height="15" fill="rgb(218,180,8)" fg:x="1026" fg:w="1"/><text x="82.5935%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="82.3435%" y="597" width="0.0803%" height="15" fill="rgb(252,168,2)" fg:x="1026" fg:w="1"/><text x="82.5935%" y="607.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.3435%" y="581" width="0.0803%" height="15" fill="rgb(224,116,33)" fg:x="1026" fg:w="1"/><text x="82.5935%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="82.3435%" y="565" width="0.0803%" height="15" fill="rgb(229,205,17)" fg:x="1026" fg:w="1"/><text x="82.5935%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="82.3435%" y="549" width="0.0803%" height="15" fill="rgb(234,1,41)" fg:x="1026" fg:w="1"/><text x="82.5935%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.3435%" y="533" width="0.0803%" height="15" fill="rgb(244,185,8)" fg:x="1026" fg:w="1"/><text x="82.5935%" y="543.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="82.5040%" y="549" width="0.0803%" height="15" fill="rgb(248,51,21)" fg:x="1028" fg:w="1"/><text x="82.7540%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="82.5040%" y="533" width="0.0803%" height="15" fill="rgb(248,157,31)" fg:x="1028" fg:w="1"/><text x="82.7540%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="82.5040%" y="581" width="0.1605%" height="15" fill="rgb(210,34,47)" fg:x="1028" fg:w="2"/><text x="82.7540%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="82.5040%" y="565" width="0.1605%" height="15" fill="rgb(227,139,53)" fg:x="1028" fg:w="2"/><text x="82.7540%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="82.5843%" y="549" width="0.0803%" height="15" fill="rgb(232,211,37)" fg:x="1029" fg:w="1"/><text x="82.8343%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="82.5843%" y="533" width="0.0803%" height="15" fill="rgb(236,133,10)" fg:x="1029" fg:w="1"/><text x="82.8343%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (9 samples, 0.72%)</title><rect x="82.0225%" y="629" width="0.7223%" height="15" fill="rgb(243,202,25)" fg:x="1022" fg:w="9"/><text x="82.2725%" y="639.50"></text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="82.4238%" y="613" width="0.3210%" height="15" fill="rgb(224,59,9)" fg:x="1027" fg:w="4"/><text x="82.6738%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="82.5040%" y="597" width="0.2408%" height="15" fill="rgb(206,146,16)" fg:x="1028" fg:w="3"/><text x="82.7540%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.6645%" y="581" width="0.0803%" height="15" fill="rgb(220,47,2)" fg:x="1030" fg:w="1"/><text x="82.9145%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.7448%" y="597" width="0.0803%" height="15" fill="rgb(225,124,51)" fg:x="1031" fg:w="1"/><text x="82.9948%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="82.7448%" y="581" width="0.0803%" height="15" fill="rgb(241,220,50)" fg:x="1031" fg:w="1"/><text x="82.9948%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="82.8250%" y="597" width="0.0803%" height="15" fill="rgb(232,168,5)" fg:x="1032" fg:w="1"/><text x="83.0750%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.8250%" y="581" width="0.0803%" height="15" fill="rgb(243,90,22)" fg:x="1032" fg:w="1"/><text x="83.0750%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.8250%" y="565" width="0.0803%" height="15" fill="rgb(223,153,32)" fg:x="1032" fg:w="1"/><text x="83.0750%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.9053%" y="549" width="0.0803%" height="15" fill="rgb(243,124,20)" fg:x="1033" fg:w="1"/><text x="83.1553%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9053%" y="533" width="0.0803%" height="15" fill="rgb(246,168,39)" fg:x="1033" fg:w="1"/><text x="83.1553%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="82.9856%" y="549" width="0.0803%" height="15" fill="rgb(222,165,54)" fg:x="1034" fg:w="1"/><text x="83.2356%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.9856%" y="533" width="0.0803%" height="15" fill="rgb(251,142,27)" fg:x="1034" fg:w="1"/><text x="83.2356%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9856%" y="517" width="0.0803%" height="15" fill="rgb(207,168,50)" fg:x="1034" fg:w="1"/><text x="83.2356%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="83.1461%" y="533" width="0.0803%" height="15" fill="rgb(250,139,25)" fg:x="1036" fg:w="1"/><text x="83.3961%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="82.7448%" y="629" width="0.5618%" height="15" fill="rgb(214,194,48)" fg:x="1031" fg:w="7"/><text x="82.9948%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="82.7448%" y="613" width="0.5618%" height="15" fill="rgb(227,138,47)" fg:x="1031" fg:w="7"/><text x="82.9948%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="82.9053%" y="597" width="0.4013%" height="15" fill="rgb(250,162,5)" fg:x="1033" fg:w="5"/><text x="83.1553%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="82.9053%" y="581" width="0.4013%" height="15" fill="rgb(229,74,25)" fg:x="1033" fg:w="5"/><text x="83.1553%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="82.9053%" y="565" width="0.4013%" height="15" fill="rgb(221,124,34)" fg:x="1033" fg:w="5"/><text x="83.1553%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="83.0658%" y="549" width="0.2408%" height="15" fill="rgb(225,94,25)" fg:x="1035" fg:w="3"/><text x="83.3158%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.2263%" y="533" width="0.0803%" height="15" fill="rgb(210,100,12)" fg:x="1037" fg:w="1"/><text x="83.4763%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.2263%" y="517" width="0.0803%" height="15" fill="rgb(206,62,48)" fg:x="1037" fg:w="1"/><text x="83.4763%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.2263%" y="501" width="0.0803%" height="15" fill="rgb(222,181,9)" fg:x="1037" fg:w="1"/><text x="83.4763%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="83.3066%" y="437" width="0.0803%" height="15" fill="rgb(248,42,38)" fg:x="1038" fg:w="1"/><text x="83.5566%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="83.3066%" y="421" width="0.0803%" height="15" fill="rgb(213,40,6)" fg:x="1038" fg:w="1"/><text x="83.5566%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="83.3066%" y="501" width="0.1605%" height="15" fill="rgb(211,108,15)" fg:x="1038" fg:w="2"/><text x="83.5566%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="83.3066%" y="485" width="0.1605%" height="15" fill="rgb(249,62,9)" fg:x="1038" fg:w="2"/><text x="83.5566%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="83.3066%" y="469" width="0.1605%" height="15" fill="rgb(233,26,54)" fg:x="1038" fg:w="2"/><text x="83.5566%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="83.3066%" y="453" width="0.1605%" height="15" fill="rgb(210,175,26)" fg:x="1038" fg:w="2"/><text x="83.5566%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.3868%" y="437" width="0.0803%" height="15" fill="rgb(210,43,33)" fg:x="1039" fg:w="1"/><text x="83.6368%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.3868%" y="421" width="0.0803%" height="15" fill="rgb(224,46,17)" fg:x="1039" fg:w="1"/><text x="83.6368%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.3868%" y="405" width="0.0803%" height="15" fill="rgb(254,24,38)" fg:x="1039" fg:w="1"/><text x="83.6368%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="83.3066%" y="533" width="0.2408%" height="15" fill="rgb(248,32,0)" fg:x="1038" fg:w="3"/><text x="83.5566%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="83.3066%" y="517" width="0.2408%" height="15" fill="rgb(224,37,41)" fg:x="1038" fg:w="3"/><text x="83.5566%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.4671%" y="501" width="0.0803%" height="15" fill="rgb(252,70,22)" fg:x="1040" fg:w="1"/><text x="83.7171%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="83.3066%" y="565" width="0.3210%" height="15" fill="rgb(241,123,50)" fg:x="1038" fg:w="4"/><text x="83.5566%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="83.3066%" y="549" width="0.3210%" height="15" fill="rgb(246,138,33)" fg:x="1038" fg:w="4"/><text x="83.5566%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.5474%" y="533" width="0.0803%" height="15" fill="rgb(218,39,32)" fg:x="1041" fg:w="1"/><text x="83.7974%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="83.6276%" y="565" width="0.0803%" height="15" fill="rgb(241,229,10)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="83.6276%" y="549" width="0.0803%" height="15" fill="rgb(212,160,10)" fg:x="1042" fg:w="1"/><text x="83.8776%" y="559.50"></text></g><g><title>engine::session::Session::close (33 samples, 2.65%)</title><rect x="81.1396%" y="741" width="2.6485%" height="15" fill="rgb(227,48,51)" fg:x="1011" fg:w="33"/><text x="81.3896%" y="751.50">en..</text></g><g><title>engine::session::state::State::close (33 samples, 2.65%)</title><rect x="81.1396%" y="725" width="2.6485%" height="15" fill="rgb(238,159,21)" fg:x="1011" fg:w="33"/><text x="81.3896%" y="735.50">en..</text></g><g><title>engine::session::state::State::flush_entities (31 samples, 2.49%)</title><rect x="81.3002%" y="709" width="2.4880%" height="15" fill="rgb(216,1,10)" fg:x="1013" fg:w="31"/><text x="81.5502%" y="719.50">en..</text></g><g><title>core::iter::adapters::try_process (30 samples, 2.41%)</title><rect x="81.3804%" y="693" width="2.4077%" height="15" fill="rgb(209,228,25)" fg:x="1014" fg:w="30"/><text x="81.6304%" y="703.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30 samples, 2.41%)</title><rect x="81.3804%" y="677" width="2.4077%" height="15" fill="rgb(234,160,10)" fg:x="1014" fg:w="30"/><text x="81.6304%" y="687.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (30 samples, 2.41%)</title><rect x="81.3804%" y="661" width="2.4077%" height="15" fill="rgb(212,66,25)" fg:x="1014" fg:w="30"/><text x="81.6304%" y="671.50">en..</text></g><g><title>kernel::model::any_entity_changes (22 samples, 1.77%)</title><rect x="82.0225%" y="645" width="1.7657%" height="15" fill="rgb(254,121,18)" fg:x="1022" fg:w="22"/><text x="82.2725%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="83.3066%" y="629" width="0.4815%" height="15" fill="rgb(219,127,1)" fg:x="1038" fg:w="6"/><text x="83.5566%" y="639.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="83.3066%" y="613" width="0.4815%" height="15" fill="rgb(219,224,42)" fg:x="1038" fg:w="6"/><text x="83.5566%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="83.3066%" y="597" width="0.4815%" height="15" fill="rgb(253,130,22)" fg:x="1038" fg:w="6"/><text x="83.5566%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="83.3066%" y="581" width="0.4815%" height="15" fill="rgb(253,39,28)" fg:x="1038" fg:w="6"/><text x="83.5566%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.7079%" y="565" width="0.0803%" height="15" fill="rgb(231,126,37)" fg:x="1043" fg:w="1"/><text x="83.9579%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.7079%" y="549" width="0.0803%" height="15" fill="rgb(251,145,14)" fg:x="1043" fg:w="1"/><text x="83.9579%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.7079%" y="533" width="0.0803%" height="15" fill="rgb(229,164,30)" fg:x="1043" fg:w="1"/><text x="83.9579%" y="543.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="83.7881%" y="677" width="0.0803%" height="15" fill="rgb(233,227,54)" fg:x="1044" fg:w="1"/><text x="84.0381%" y="687.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="83.8684%" y="677" width="0.0803%" height="15" fill="rgb(240,94,22)" fg:x="1045" fg:w="1"/><text x="84.1184%" y="687.50"></text></g><g><title>&lt;plugins_core::chat::parser::SpeakActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="83.8684%" y="661" width="0.0803%" height="15" fill="rgb(217,56,16)" fg:x="1045" fg:w="1"/><text x="84.1184%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="83.8684%" y="645" width="0.0803%" height="15" fill="rgb(229,133,38)" fg:x="1045" fg:w="1"/><text x="84.1184%" y="655.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (3 samples, 0.24%)</title><rect x="83.7881%" y="709" width="0.2408%" height="15" fill="rgb(225,139,35)" fg:x="1044" fg:w="3"/><text x="84.0381%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="83.7881%" y="693" width="0.2408%" height="15" fill="rgb(223,100,16)" fg:x="1044" fg:w="3"/><text x="84.0381%" y="703.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="83.9486%" y="677" width="0.0803%" height="15" fill="rgb(207,43,50)" fg:x="1046" fg:w="1"/><text x="84.1986%" y="687.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="83.9486%" y="661" width="0.0803%" height="15" fill="rgb(237,221,9)" fg:x="1046" fg:w="1"/><text x="84.1986%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="83.9486%" y="645" width="0.0803%" height="15" fill="rgb(236,134,24)" fg:x="1046" fg:w="1"/><text x="84.1986%" y="655.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="84.1091%" y="549" width="0.0803%" height="15" fill="rgb(222,173,4)" fg:x="1048" fg:w="1"/><text x="84.3591%" y="559.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="84.1091%" y="533" width="0.0803%" height="15" fill="rgb(234,144,52)" fg:x="1048" fg:w="1"/><text x="84.3591%" y="543.50"></text></g><g><title>core::fmt::builders::debug_tuple_new (1 samples, 0.08%)</title><rect x="84.1091%" y="517" width="0.0803%" height="15" fill="rgb(223,41,7)" fg:x="1048" fg:w="1"/><text x="84.3591%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="84.1091%" y="501" width="0.0803%" height="15" fill="rgb(226,143,9)" fg:x="1048" fg:w="1"/><text x="84.3591%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.1091%" y="485" width="0.0803%" height="15" fill="rgb(234,43,37)" fg:x="1048" fg:w="1"/><text x="84.3591%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.1091%" y="469" width="0.0803%" height="15" fill="rgb(224,188,11)" fg:x="1048" fg:w="1"/><text x="84.3591%" y="479.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="84.1091%" y="453" width="0.0803%" height="15" fill="rgb(233,113,28)" fg:x="1048" fg:w="1"/><text x="84.3591%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="84.1091%" y="437" width="0.0803%" height="15" fill="rgb(215,16,1)" fg:x="1048" fg:w="1"/><text x="84.3591%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="84.1091%" y="421" width="0.0803%" height="15" fill="rgb(238,74,38)" fg:x="1048" fg:w="1"/><text x="84.3591%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="84.1091%" y="405" width="0.0803%" height="15" fill="rgb(221,66,35)" fg:x="1048" fg:w="1"/><text x="84.3591%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="84.1091%" y="389" width="0.0803%" height="15" fill="rgb(251,225,2)" fg:x="1048" fg:w="1"/><text x="84.3591%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="84.0289%" y="693" width="0.2408%" height="15" fill="rgb(240,169,18)" fg:x="1047" fg:w="3"/><text x="84.2789%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="84.0289%" y="677" width="0.2408%" height="15" fill="rgb(243,130,50)" fg:x="1047" fg:w="3"/><text x="84.2789%" y="687.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="84.0289%" y="661" width="0.2408%" height="15" fill="rgb(228,75,13)" fg:x="1047" fg:w="3"/><text x="84.2789%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="84.0289%" y="645" width="0.2408%" height="15" fill="rgb(252,95,35)" fg:x="1047" fg:w="3"/><text x="84.2789%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="84.1091%" y="629" width="0.1605%" height="15" fill="rgb(222,180,54)" fg:x="1048" fg:w="2"/><text x="84.3591%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="84.1091%" y="613" width="0.1605%" height="15" fill="rgb(250,110,34)" fg:x="1048" fg:w="2"/><text x="84.3591%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="84.1091%" y="597" width="0.1605%" height="15" fill="rgb(208,100,21)" fg:x="1048" fg:w="2"/><text x="84.3591%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="84.1091%" y="581" width="0.1605%" height="15" fill="rgb(209,123,47)" fg:x="1048" fg:w="2"/><text x="84.3591%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="84.1091%" y="565" width="0.1605%" height="15" fill="rgb(237,147,9)" fg:x="1048" fg:w="2"/><text x="84.3591%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="84.1894%" y="549" width="0.0803%" height="15" fill="rgb(228,206,23)" fg:x="1049" fg:w="1"/><text x="84.4394%" y="559.50"></text></g><g><title>core::fmt::Formatter::debug_struct (1 samples, 0.08%)</title><rect x="84.1894%" y="533" width="0.0803%" height="15" fill="rgb(217,174,46)" fg:x="1049" fg:w="1"/><text x="84.4394%" y="543.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="84.1894%" y="517" width="0.0803%" height="15" fill="rgb(231,126,21)" fg:x="1049" fg:w="1"/><text x="84.4394%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="84.1894%" y="501" width="0.0803%" height="15" fill="rgb(245,26,1)" fg:x="1049" fg:w="1"/><text x="84.4394%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.1894%" y="485" width="0.0803%" height="15" fill="rgb(224,138,39)" fg:x="1049" fg:w="1"/><text x="84.4394%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.1894%" y="469" width="0.0803%" height="15" fill="rgb(208,97,3)" fg:x="1049" fg:w="1"/><text x="84.4394%" y="479.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="84.1894%" y="453" width="0.0803%" height="15" fill="rgb(222,77,29)" fg:x="1049" fg:w="1"/><text x="84.4394%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="84.1894%" y="437" width="0.0803%" height="15" fill="rgb(243,188,36)" fg:x="1049" fg:w="1"/><text x="84.4394%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="84.1894%" y="421" width="0.0803%" height="15" fill="rgb(218,214,3)" fg:x="1049" fg:w="1"/><text x="84.4394%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="84.1894%" y="405" width="0.0803%" height="15" fill="rgb(211,183,45)" fg:x="1049" fg:w="1"/><text x="84.4394%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="84.1894%" y="389" width="0.0803%" height="15" fill="rgb(230,218,25)" fg:x="1049" fg:w="1"/><text x="84.4394%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="84.1894%" y="373" width="0.0803%" height="15" fill="rgb(233,86,6)" fg:x="1049" fg:w="1"/><text x="84.4394%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.2697%" y="677" width="0.0803%" height="15" fill="rgb(220,59,24)" fg:x="1050" fg:w="1"/><text x="84.5197%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="84.3499%" y="501" width="0.0803%" height="15" fill="rgb(227,60,1)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.3499%" y="485" width="0.0803%" height="15" fill="rgb(216,212,54)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.3499%" y="469" width="0.0803%" height="15" fill="rgb(227,81,54)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.3499%" y="453" width="0.0803%" height="15" fill="rgb(206,204,43)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.3499%" y="437" width="0.0803%" height="15" fill="rgb(219,29,26)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.3499%" y="421" width="0.0803%" height="15" fill="rgb(252,40,36)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.3499%" y="405" width="0.0803%" height="15" fill="rgb(224,205,39)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.3499%" y="389" width="0.0803%" height="15" fill="rgb(222,13,21)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.3499%" y="373" width="0.0803%" height="15" fill="rgb(243,139,6)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.3499%" y="357" width="0.0803%" height="15" fill="rgb(237,101,11)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.3499%" y="341" width="0.0803%" height="15" fill="rgb(254,49,28)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="351.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.08%)</title><rect x="84.3499%" y="325" width="0.0803%" height="15" fill="rgb(223,41,21)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.08%)</title><rect x="84.3499%" y="309" width="0.0803%" height="15" fill="rgb(225,103,29)" fg:x="1051" fg:w="1"/><text x="84.5999%" y="319.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="84.3499%" y="597" width="0.1605%" height="15" fill="rgb(244,82,43)" fg:x="1051" fg:w="2"/><text x="84.5999%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (2 samples, 0.16%)</title><rect x="84.3499%" y="581" width="0.1605%" height="15" fill="rgb(217,39,3)" fg:x="1051" fg:w="2"/><text x="84.5999%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="84.3499%" y="565" width="0.1605%" height="15" fill="rgb(239,128,25)" fg:x="1051" fg:w="2"/><text x="84.5999%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="84.3499%" y="549" width="0.1605%" height="15" fill="rgb(210,192,37)" fg:x="1051" fg:w="2"/><text x="84.5999%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="84.3499%" y="533" width="0.1605%" height="15" fill="rgb(219,98,18)" fg:x="1051" fg:w="2"/><text x="84.5999%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="84.3499%" y="517" width="0.1605%" height="15" fill="rgb(224,228,38)" fg:x="1051" fg:w="2"/><text x="84.5999%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="84.4302%" y="501" width="0.0803%" height="15" fill="rgb(241,129,43)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="511.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="84.4302%" y="485" width="0.0803%" height="15" fill="rgb(223,8,51)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.4302%" y="469" width="0.0803%" height="15" fill="rgb(233,76,24)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.4302%" y="453" width="0.0803%" height="15" fill="rgb(219,115,10)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.4302%" y="437" width="0.0803%" height="15" fill="rgb(222,137,12)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.4302%" y="421" width="0.0803%" height="15" fill="rgb(216,192,16)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.4302%" y="405" width="0.0803%" height="15" fill="rgb(247,6,27)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.4302%" y="389" width="0.0803%" height="15" fill="rgb(254,39,44)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.4302%" y="373" width="0.0803%" height="15" fill="rgb(251,116,35)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.4302%" y="357" width="0.0803%" height="15" fill="rgb(208,61,44)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.4302%" y="341" width="0.0803%" height="15" fill="rgb(250,34,5)" fg:x="1052" fg:w="1"/><text x="84.6802%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="84.5907%" y="405" width="0.1605%" height="15" fill="rgb(241,40,15)" fg:x="1054" fg:w="2"/><text x="84.8407%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (2 samples, 0.16%)</title><rect x="84.5907%" y="389" width="0.1605%" height="15" fill="rgb(229,182,2)" fg:x="1054" fg:w="2"/><text x="84.8407%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="84.5907%" y="373" width="0.1605%" height="15" fill="rgb(244,148,52)" fg:x="1054" fg:w="2"/><text x="84.8407%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="84.7512%" y="405" width="0.0803%" height="15" fill="rgb(225,211,4)" fg:x="1056" fg:w="1"/><text x="85.0012%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="84.7512%" y="389" width="0.0803%" height="15" fill="rgb(208,222,47)" fg:x="1056" fg:w="1"/><text x="85.0012%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.7512%" y="373" width="0.0803%" height="15" fill="rgb(233,162,0)" fg:x="1056" fg:w="1"/><text x="85.0012%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.7512%" y="357" width="0.0803%" height="15" fill="rgb(241,54,13)" fg:x="1056" fg:w="1"/><text x="85.0012%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="84.7512%" y="341" width="0.0803%" height="15" fill="rgb(213,89,18)" fg:x="1056" fg:w="1"/><text x="85.0012%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.7512%" y="325" width="0.0803%" height="15" fill="rgb(215,170,37)" fg:x="1056" fg:w="1"/><text x="85.0012%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.7512%" y="309" width="0.0803%" height="15" fill="rgb(216,133,15)" fg:x="1056" fg:w="1"/><text x="85.0012%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="84.8315%" y="405" width="0.0803%" height="15" fill="rgb(230,42,19)" fg:x="1057" fg:w="1"/><text x="85.0815%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="84.8315%" y="389" width="0.0803%" height="15" fill="rgb(221,103,41)" fg:x="1057" fg:w="1"/><text x="85.0815%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.8315%" y="373" width="0.0803%" height="15" fill="rgb(220,142,31)" fg:x="1057" fg:w="1"/><text x="85.0815%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.8315%" y="357" width="0.0803%" height="15" fill="rgb(239,218,4)" fg:x="1057" fg:w="1"/><text x="85.0815%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="84.8315%" y="341" width="0.0803%" height="15" fill="rgb(232,16,4)" fg:x="1057" fg:w="1"/><text x="85.0815%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.8315%" y="325" width="0.0803%" height="15" fill="rgb(226,213,25)" fg:x="1057" fg:w="1"/><text x="85.0815%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.8315%" y="309" width="0.0803%" height="15" fill="rgb(235,135,19)" fg:x="1057" fg:w="1"/><text x="85.0815%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.8315%" y="293" width="0.0803%" height="15" fill="rgb(240,107,29)" fg:x="1057" fg:w="1"/><text x="85.0815%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="84.9117%" y="325" width="0.0803%" height="15" fill="rgb(206,164,44)" fg:x="1058" fg:w="1"/><text x="85.1617%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="84.9117%" y="309" width="0.0803%" height="15" fill="rgb(210,23,48)" fg:x="1058" fg:w="1"/><text x="85.1617%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="84.9117%" y="293" width="0.0803%" height="15" fill="rgb(212,138,25)" fg:x="1058" fg:w="1"/><text x="85.1617%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="84.9117%" y="277" width="0.0803%" height="15" fill="rgb(224,152,3)" fg:x="1058" fg:w="1"/><text x="85.1617%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="84.9117%" y="261" width="0.0803%" height="15" fill="rgb(214,38,23)" fg:x="1058" fg:w="1"/><text x="85.1617%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="84.9117%" y="245" width="0.0803%" height="15" fill="rgb(215,161,10)" fg:x="1058" fg:w="1"/><text x="85.1617%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="84.9117%" y="229" width="0.0803%" height="15" fill="rgb(240,185,7)" fg:x="1058" fg:w="1"/><text x="85.1617%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="84.9920%" y="277" width="0.0803%" height="15" fill="rgb(244,104,25)" fg:x="1059" fg:w="1"/><text x="85.2420%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.9920%" y="261" width="0.0803%" height="15" fill="rgb(242,140,44)" fg:x="1059" fg:w="1"/><text x="85.2420%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="84.9920%" y="245" width="0.0803%" height="15" fill="rgb(245,30,19)" fg:x="1059" fg:w="1"/><text x="85.2420%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.9920%" y="229" width="0.0803%" height="15" fill="rgb(219,208,35)" fg:x="1059" fg:w="1"/><text x="85.2420%" y="239.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="85.0722%" y="277" width="0.0803%" height="15" fill="rgb(235,200,7)" fg:x="1060" fg:w="1"/><text x="85.3222%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="85.1525%" y="261" width="0.3210%" height="15" fill="rgb(220,193,10)" fg:x="1061" fg:w="4"/><text x="85.4025%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="85.1525%" y="245" width="0.3210%" height="15" fill="rgb(212,216,39)" fg:x="1061" fg:w="4"/><text x="85.4025%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="85.5538%" y="245" width="0.0803%" height="15" fill="rgb(212,134,19)" fg:x="1066" fg:w="1"/><text x="85.8038%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="85.4735%" y="261" width="0.2408%" height="15" fill="rgb(230,57,24)" fg:x="1065" fg:w="3"/><text x="85.7235%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="85.6340%" y="245" width="0.0803%" height="15" fill="rgb(238,209,37)" fg:x="1067" fg:w="1"/><text x="85.8840%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="85.6340%" y="229" width="0.0803%" height="15" fill="rgb(247,11,45)" fg:x="1067" fg:w="1"/><text x="85.8840%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.7143%" y="229" width="0.0803%" height="15" fill="rgb(222,126,6)" fg:x="1068" fg:w="1"/><text x="85.9643%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.7143%" y="213" width="0.0803%" height="15" fill="rgb(245,77,24)" fg:x="1068" fg:w="1"/><text x="85.9643%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="85.7945%" y="197" width="0.0803%" height="15" fill="rgb(227,14,24)" fg:x="1069" fg:w="1"/><text x="86.0445%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.7945%" y="181" width="0.0803%" height="15" fill="rgb(211,112,42)" fg:x="1069" fg:w="1"/><text x="86.0445%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="85.8748%" y="197" width="0.1605%" height="15" fill="rgb(230,103,42)" fg:x="1070" fg:w="2"/><text x="86.1248%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="85.8748%" y="181" width="0.1605%" height="15" fill="rgb(228,125,42)" fg:x="1070" fg:w="2"/><text x="86.1248%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="85.9551%" y="165" width="0.0803%" height="15" fill="rgb(243,33,6)" fg:x="1071" fg:w="1"/><text x="86.2051%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.0353%" y="165" width="0.0803%" height="15" fill="rgb(231,2,40)" fg:x="1072" fg:w="1"/><text x="86.2853%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 1.28%)</title><rect x="85.7143%" y="245" width="1.2841%" height="15" fill="rgb(224,200,53)" fg:x="1068" fg:w="16"/><text x="85.9643%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (15 samples, 1.20%)</title><rect x="85.7945%" y="229" width="1.2039%" height="15" fill="rgb(215,116,36)" fg:x="1069" fg:w="15"/><text x="86.0445%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (15 samples, 1.20%)</title><rect x="85.7945%" y="213" width="1.2039%" height="15" fill="rgb(240,23,51)" fg:x="1069" fg:w="15"/><text x="86.0445%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (12 samples, 0.96%)</title><rect x="86.0353%" y="197" width="0.9631%" height="15" fill="rgb(221,72,5)" fg:x="1072" fg:w="12"/><text x="86.2853%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (12 samples, 0.96%)</title><rect x="86.0353%" y="181" width="0.9631%" height="15" fill="rgb(245,142,9)" fg:x="1072" fg:w="12"/><text x="86.2853%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (11 samples, 0.88%)</title><rect x="86.1156%" y="165" width="0.8828%" height="15" fill="rgb(207,34,16)" fg:x="1073" fg:w="11"/><text x="86.3656%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="86.9984%" y="245" width="0.0803%" height="15" fill="rgb(252,101,12)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="86.9984%" y="229" width="0.0803%" height="15" fill="rgb(239,89,37)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.9984%" y="213" width="0.0803%" height="15" fill="rgb(252,227,37)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.9984%" y="197" width="0.0803%" height="15" fill="rgb(212,164,17)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.9984%" y="181" width="0.0803%" height="15" fill="rgb(240,86,13)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (25 samples, 2.01%)</title><rect x="85.1525%" y="277" width="2.0064%" height="15" fill="rgb(233,183,32)" fg:x="1061" fg:w="25"/><text x="85.4025%" y="287.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (18 samples, 1.44%)</title><rect x="85.7143%" y="261" width="1.4446%" height="15" fill="rgb(205,201,38)" fg:x="1068" fg:w="18"/><text x="85.9643%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="87.0787%" y="245" width="0.0803%" height="15" fill="rgb(210,122,38)" fg:x="1085" fg:w="1"/><text x="87.3287%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="87.0787%" y="229" width="0.0803%" height="15" fill="rgb(241,174,26)" fg:x="1085" fg:w="1"/><text x="87.3287%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (29 samples, 2.33%)</title><rect x="84.9920%" y="293" width="2.3274%" height="15" fill="rgb(219,89,7)" fg:x="1059" fg:w="29"/><text x="85.2420%" y="303.50">r..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="87.1589%" y="277" width="0.1605%" height="15" fill="rgb(246,9,24)" fg:x="1086" fg:w="2"/><text x="87.4089%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="87.1589%" y="261" width="0.1605%" height="15" fill="rgb(205,132,21)" fg:x="1086" fg:w="2"/><text x="87.4089%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="87.1589%" y="245" width="0.1605%" height="15" fill="rgb(210,11,17)" fg:x="1086" fg:w="2"/><text x="87.4089%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="87.1589%" y="229" width="0.1605%" height="15" fill="rgb(226,138,14)" fg:x="1086" fg:w="2"/><text x="87.4089%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="87.1589%" y="213" width="0.1605%" height="15" fill="rgb(224,108,44)" fg:x="1086" fg:w="2"/><text x="87.4089%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="87.1589%" y="197" width="0.1605%" height="15" fill="rgb(247,114,36)" fg:x="1086" fg:w="2"/><text x="87.4089%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="87.1589%" y="181" width="0.1605%" height="15" fill="rgb(231,183,14)" fg:x="1086" fg:w="2"/><text x="87.4089%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (30 samples, 2.41%)</title><rect x="84.9920%" y="325" width="2.4077%" height="15" fill="rgb(218,168,4)" fg:x="1059" fg:w="30"/><text x="85.2420%" y="335.50">re..</text></g><g><title>regex::builders::string::RegexBuilder::build (30 samples, 2.41%)</title><rect x="84.9920%" y="309" width="2.4077%" height="15" fill="rgb(210,8,3)" fg:x="1059" fg:w="30"/><text x="85.2420%" y="319.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="87.3194%" y="293" width="0.0803%" height="15" fill="rgb(216,165,0)" fg:x="1088" fg:w="1"/><text x="87.5694%" y="303.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (34 samples, 2.73%)</title><rect x="84.9117%" y="341" width="2.7287%" height="15" fill="rgb(245,120,5)" fg:x="1058" fg:w="34"/><text x="85.1617%" y="351.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="87.3997%" y="325" width="0.2408%" height="15" fill="rgb(249,121,32)" fg:x="1089" fg:w="3"/><text x="87.6497%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="87.3997%" y="309" width="0.2408%" height="15" fill="rgb(211,55,33)" fg:x="1089" fg:w="3"/><text x="87.6497%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="87.3997%" y="293" width="0.2408%" height="15" fill="rgb(254,46,35)" fg:x="1089" fg:w="3"/><text x="87.6497%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="87.3997%" y="277" width="0.2408%" height="15" fill="rgb(213,213,19)" fg:x="1089" fg:w="3"/><text x="87.6497%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="87.3997%" y="261" width="0.2408%" height="15" fill="rgb(207,152,44)" fg:x="1089" fg:w="3"/><text x="87.6497%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="87.5602%" y="245" width="0.0803%" height="15" fill="rgb(227,195,36)" fg:x="1091" fg:w="1"/><text x="87.8102%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (1 samples, 0.08%)</title><rect x="87.6404%" y="277" width="0.0803%" height="15" fill="rgb(210,137,36)" fg:x="1092" fg:w="1"/><text x="87.8904%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="87.6404%" y="261" width="0.0803%" height="15" fill="rgb(253,47,47)" fg:x="1092" fg:w="1"/><text x="87.8904%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="87.7207%" y="277" width="0.1605%" height="15" fill="rgb(230,147,18)" fg:x="1093" fg:w="2"/><text x="87.9707%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="87.7207%" y="261" width="0.1605%" height="15" fill="rgb(247,33,49)" fg:x="1093" fg:w="2"/><text x="87.9707%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="87.7207%" y="245" width="0.1605%" height="15" fill="rgb(239,26,29)" fg:x="1093" fg:w="2"/><text x="87.9707%" y="255.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="87.8010%" y="229" width="0.0803%" height="15" fill="rgb(245,145,52)" fg:x="1094" fg:w="1"/><text x="88.0510%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.8010%" y="213" width="0.0803%" height="15" fill="rgb(224,139,32)" fg:x="1094" fg:w="1"/><text x="88.0510%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.8010%" y="197" width="0.0803%" height="15" fill="rgb(238,202,19)" fg:x="1094" fg:w="1"/><text x="88.0510%" y="207.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="87.8010%" y="181" width="0.0803%" height="15" fill="rgb(249,211,53)" fg:x="1094" fg:w="1"/><text x="88.0510%" y="191.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (4 samples, 0.32%)</title><rect x="87.6404%" y="341" width="0.3210%" height="15" fill="rgb(237,229,33)" fg:x="1092" fg:w="4"/><text x="87.8904%" y="351.50"></text></g><g><title>regex::regex::string::Regex::new (4 samples, 0.32%)</title><rect x="87.6404%" y="325" width="0.3210%" height="15" fill="rgb(208,97,40)" fg:x="1092" fg:w="4"/><text x="87.8904%" y="335.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (4 samples, 0.32%)</title><rect x="87.6404%" y="309" width="0.3210%" height="15" fill="rgb(254,36,16)" fg:x="1092" fg:w="4"/><text x="87.8904%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (4 samples, 0.32%)</title><rect x="87.6404%" y="293" width="0.3210%" height="15" fill="rgb(221,7,12)" fg:x="1092" fg:w="4"/><text x="87.8904%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="87.8812%" y="277" width="0.0803%" height="15" fill="rgb(205,11,12)" fg:x="1095" fg:w="1"/><text x="88.1312%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="87.8812%" y="261" width="0.0803%" height="15" fill="rgb(227,72,28)" fg:x="1095" fg:w="1"/><text x="88.1312%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="87.8812%" y="245" width="0.0803%" height="15" fill="rgb(228,7,34)" fg:x="1095" fg:w="1"/><text x="88.1312%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.8812%" y="229" width="0.0803%" height="15" fill="rgb(230,52,42)" fg:x="1095" fg:w="1"/><text x="88.1312%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.8812%" y="213" width="0.0803%" height="15" fill="rgb(219,177,53)" fg:x="1095" fg:w="1"/><text x="88.1312%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="87.9615%" y="325" width="0.0803%" height="15" fill="rgb(243,196,34)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="87.9615%" y="309" width="0.0803%" height="15" fill="rgb(213,66,49)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="87.9615%" y="293" width="0.0803%" height="15" fill="rgb(233,11,50)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.9615%" y="277" width="0.0803%" height="15" fill="rgb(235,190,6)" fg:x="1096" fg:w="1"/><text x="88.2115%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.1220%" y="229" width="0.0803%" height="15" fill="rgb(212,64,44)" fg:x="1098" fg:w="1"/><text x="88.3720%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.32%)</title><rect x="88.0417%" y="325" width="0.3210%" height="15" fill="rgb(206,95,44)" fg:x="1097" fg:w="4"/><text x="88.2917%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="88.0417%" y="309" width="0.3210%" height="15" fill="rgb(227,136,25)" fg:x="1097" fg:w="4"/><text x="88.2917%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="88.0417%" y="293" width="0.3210%" height="15" fill="rgb(206,178,17)" fg:x="1097" fg:w="4"/><text x="88.2917%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="88.0417%" y="277" width="0.3210%" height="15" fill="rgb(208,168,35)" fg:x="1097" fg:w="4"/><text x="88.2917%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="88.0417%" y="261" width="0.3210%" height="15" fill="rgb(213,210,40)" fg:x="1097" fg:w="4"/><text x="88.2917%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="88.0417%" y="245" width="0.3210%" height="15" fill="rgb(236,60,6)" fg:x="1097" fg:w="4"/><text x="88.2917%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="88.2022%" y="229" width="0.1605%" height="15" fill="rgb(220,186,36)" fg:x="1099" fg:w="2"/><text x="88.4522%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="88.3628%" y="277" width="0.0803%" height="15" fill="rgb(225,120,49)" fg:x="1101" fg:w="1"/><text x="88.6128%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.3628%" y="261" width="0.0803%" height="15" fill="rgb(250,115,20)" fg:x="1101" fg:w="1"/><text x="88.6128%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="88.3628%" y="245" width="0.0803%" height="15" fill="rgb(207,214,23)" fg:x="1101" fg:w="1"/><text x="88.6128%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="88.3628%" y="229" width="0.0803%" height="15" fill="rgb(240,9,18)" fg:x="1101" fg:w="1"/><text x="88.6128%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.3628%" y="213" width="0.0803%" height="15" fill="rgb(232,170,48)" fg:x="1101" fg:w="1"/><text x="88.6128%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="88.4430%" y="245" width="0.1605%" height="15" fill="rgb(236,149,23)" fg:x="1102" fg:w="2"/><text x="88.6930%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="88.4430%" y="261" width="0.3210%" height="15" fill="rgb(210,125,42)" fg:x="1102" fg:w="4"/><text x="88.6930%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="88.6035%" y="245" width="0.1605%" height="15" fill="rgb(207,201,52)" fg:x="1104" fg:w="2"/><text x="88.8535%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="88.7640%" y="261" width="0.0803%" height="15" fill="rgb(250,187,37)" fg:x="1106" fg:w="1"/><text x="89.0140%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="88.7640%" y="245" width="0.0803%" height="15" fill="rgb(214,186,2)" fg:x="1106" fg:w="1"/><text x="89.0140%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="89.0048%" y="229" width="0.1605%" height="15" fill="rgb(207,189,15)" fg:x="1109" fg:w="2"/><text x="89.2548%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="89.0851%" y="213" width="0.0803%" height="15" fill="rgb(221,99,21)" fg:x="1110" fg:w="1"/><text x="89.3351%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.0851%" y="197" width="0.0803%" height="15" fill="rgb(212,67,18)" fg:x="1110" fg:w="1"/><text x="89.3351%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.0851%" y="181" width="0.0803%" height="15" fill="rgb(226,24,24)" fg:x="1110" fg:w="1"/><text x="89.3351%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.0851%" y="165" width="0.0803%" height="15" fill="rgb(252,123,31)" fg:x="1110" fg:w="1"/><text x="89.3351%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.1653%" y="197" width="0.0803%" height="15" fill="rgb(251,227,47)" fg:x="1111" fg:w="1"/><text x="89.4153%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (6 samples, 0.48%)</title><rect x="88.8443%" y="261" width="0.4815%" height="15" fill="rgb(233,84,53)" fg:x="1107" fg:w="6"/><text x="89.0943%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="88.8443%" y="245" width="0.4815%" height="15" fill="rgb(228,57,19)" fg:x="1107" fg:w="6"/><text x="89.0943%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="89.1653%" y="229" width="0.1605%" height="15" fill="rgb(251,81,5)" fg:x="1111" fg:w="2"/><text x="89.4153%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="89.1653%" y="213" width="0.1605%" height="15" fill="rgb(236,211,27)" fg:x="1111" fg:w="2"/><text x="89.4153%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="89.2456%" y="197" width="0.0803%" height="15" fill="rgb(218,21,6)" fg:x="1112" fg:w="1"/><text x="89.4956%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="89.5666%" y="149" width="0.2408%" height="15" fill="rgb(239,104,19)" fg:x="1116" fg:w="3"/><text x="89.8166%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="89.6469%" y="133" width="0.1605%" height="15" fill="rgb(234,179,27)" fg:x="1117" fg:w="2"/><text x="89.8969%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.6469%" y="117" width="0.1605%" height="15" fill="rgb(221,154,39)" fg:x="1117" fg:w="2"/><text x="89.8969%" y="127.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.6469%" y="101" width="0.1605%" height="15" fill="rgb(228,190,1)" fg:x="1117" fg:w="2"/><text x="89.8969%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="89.8074%" y="149" width="0.0803%" height="15" fill="rgb(244,122,33)" fg:x="1119" fg:w="1"/><text x="90.0574%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="89.8876%" y="149" width="0.0803%" height="15" fill="rgb(227,56,37)" fg:x="1120" fg:w="1"/><text x="90.1376%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.8876%" y="133" width="0.0803%" height="15" fill="rgb(207,158,16)" fg:x="1120" fg:w="1"/><text x="90.1376%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.0482%" y="117" width="0.0803%" height="15" fill="rgb(251,222,30)" fg:x="1122" fg:w="1"/><text x="90.2982%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.0482%" y="101" width="0.0803%" height="15" fill="rgb(240,22,49)" fg:x="1122" fg:w="1"/><text x="90.2982%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.0482%" y="85" width="0.0803%" height="15" fill="rgb(224,207,37)" fg:x="1122" fg:w="1"/><text x="90.2982%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="89.9679%" y="149" width="0.3210%" height="15" fill="rgb(249,188,40)" fg:x="1121" fg:w="4"/><text x="90.2179%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="89.9679%" y="133" width="0.3210%" height="15" fill="rgb(254,141,11)" fg:x="1121" fg:w="4"/><text x="90.2179%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="90.1284%" y="117" width="0.1605%" height="15" fill="rgb(231,177,6)" fg:x="1123" fg:w="2"/><text x="90.3784%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.2087%" y="101" width="0.0803%" height="15" fill="rgb(241,6,16)" fg:x="1124" fg:w="1"/><text x="90.4587%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (6 samples, 0.48%)</title><rect x="90.2889%" y="149" width="0.4815%" height="15" fill="rgb(230,50,14)" fg:x="1125" fg:w="6"/><text x="90.5389%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (6 samples, 0.48%)</title><rect x="90.2889%" y="133" width="0.4815%" height="15" fill="rgb(254,36,3)" fg:x="1125" fg:w="6"/><text x="90.5389%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (6 samples, 0.48%)</title><rect x="90.2889%" y="117" width="0.4815%" height="15" fill="rgb(226,149,37)" fg:x="1125" fg:w="6"/><text x="90.5389%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 1.52%)</title><rect x="89.3258%" y="245" width="1.5249%" height="15" fill="rgb(253,49,27)" fg:x="1113" fg:w="19"/><text x="89.5758%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (19 samples, 1.52%)</title><rect x="89.3258%" y="229" width="1.5249%" height="15" fill="rgb(249,182,52)" fg:x="1113" fg:w="19"/><text x="89.5758%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (19 samples, 1.52%)</title><rect x="89.3258%" y="213" width="1.5249%" height="15" fill="rgb(223,42,15)" fg:x="1113" fg:w="19"/><text x="89.5758%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (19 samples, 1.52%)</title><rect x="89.3258%" y="197" width="1.5249%" height="15" fill="rgb(232,31,42)" fg:x="1113" fg:w="19"/><text x="89.5758%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (19 samples, 1.52%)</title><rect x="89.3258%" y="181" width="1.5249%" height="15" fill="rgb(233,56,46)" fg:x="1113" fg:w="19"/><text x="89.5758%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (19 samples, 1.52%)</title><rect x="89.3258%" y="165" width="1.5249%" height="15" fill="rgb(241,143,21)" fg:x="1113" fg:w="19"/><text x="89.5758%" y="175.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="90.7705%" y="149" width="0.0803%" height="15" fill="rgb(251,222,15)" fg:x="1131" fg:w="1"/><text x="91.0205%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="90.8507%" y="229" width="0.0803%" height="15" fill="rgb(242,101,40)" fg:x="1132" fg:w="1"/><text x="91.1007%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="90.8507%" y="245" width="0.1605%" height="15" fill="rgb(247,60,44)" fg:x="1132" fg:w="2"/><text x="91.1007%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="90.9310%" y="229" width="0.0803%" height="15" fill="rgb(254,48,47)" fg:x="1133" fg:w="1"/><text x="91.1810%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (33 samples, 2.65%)</title><rect x="88.4430%" y="277" width="2.6485%" height="15" fill="rgb(253,30,33)" fg:x="1102" fg:w="33"/><text x="88.6930%" y="287.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (22 samples, 1.77%)</title><rect x="89.3258%" y="261" width="1.7657%" height="15" fill="rgb(253,214,47)" fg:x="1113" fg:w="22"/><text x="89.5758%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::properties (1 samples, 0.08%)</title><rect x="91.0112%" y="245" width="0.0803%" height="15" fill="rgb(241,108,29)" fg:x="1134" fg:w="1"/><text x="91.2612%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (82 samples, 6.58%)</title><rect x="84.5907%" y="421" width="6.5811%" height="15" fill="rgb(240,36,2)" fg:x="1054" fg:w="82"/><text x="84.8407%" y="431.50">&lt;&amp;kernel:..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (78 samples, 6.26%)</title><rect x="84.9117%" y="405" width="6.2600%" height="15" fill="rgb(243,198,24)" fg:x="1058" fg:w="78"/><text x="85.1617%" y="415.50">plugins_..</text></g><g><title>indefinite::indefinite (78 samples, 6.26%)</title><rect x="84.9117%" y="389" width="6.2600%" height="15" fill="rgb(225,98,27)" fg:x="1058" fg:w="78"/><text x="85.1617%" y="399.50">indefini..</text></g><g><title>indefinite::methods::indefinite (78 samples, 6.26%)</title><rect x="84.9117%" y="373" width="6.2600%" height="15" fill="rgb(208,86,30)" fg:x="1058" fg:w="78"/><text x="85.1617%" y="383.50">indefini..</text></g><g><title>indefinite::methods::apply_rules (78 samples, 6.26%)</title><rect x="84.9117%" y="357" width="6.2600%" height="15" fill="rgb(242,157,11)" fg:x="1058" fg:w="78"/><text x="85.1617%" y="367.50">indefini..</text></g><g><title>indefinite::rules::number::Number::check (40 samples, 3.21%)</title><rect x="87.9615%" y="341" width="3.2103%" height="15" fill="rgb(244,84,16)" fg:x="1096" fg:w="40"/><text x="88.2115%" y="351.50">ind..</text></g><g><title>regex::regex::string::Regex::new (35 samples, 2.81%)</title><rect x="88.3628%" y="325" width="2.8090%" height="15" fill="rgb(247,20,46)" fg:x="1101" fg:w="35"/><text x="88.6128%" y="335.50">re..</text></g><g><title>regex::builders::string::RegexBuilder::build (35 samples, 2.81%)</title><rect x="88.3628%" y="309" width="2.8090%" height="15" fill="rgb(240,157,20)" fg:x="1101" fg:w="35"/><text x="88.6128%" y="319.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (35 samples, 2.81%)</title><rect x="88.3628%" y="293" width="2.8090%" height="15" fill="rgb(212,151,38)" fg:x="1101" fg:w="35"/><text x="88.6128%" y="303.50">re..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="91.0915%" y="277" width="0.0803%" height="15" fill="rgb(233,197,14)" fg:x="1135" fg:w="1"/><text x="91.3415%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="91.0915%" y="261" width="0.0803%" height="15" fill="rgb(226,148,28)" fg:x="1135" fg:w="1"/><text x="91.3415%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="91.0915%" y="245" width="0.0803%" height="15" fill="rgb(244,141,30)" fg:x="1135" fg:w="1"/><text x="91.3415%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="91.0915%" y="229" width="0.0803%" height="15" fill="rgb(215,73,38)" fg:x="1135" fg:w="1"/><text x="91.3415%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.1717%" y="389" width="0.0803%" height="15" fill="rgb(230,148,29)" fg:x="1136" fg:w="1"/><text x="91.4217%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (2 samples, 0.16%)</title><rect x="91.1717%" y="421" width="0.1605%" height="15" fill="rgb(250,41,52)" fg:x="1136" fg:w="2"/><text x="91.4217%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (2 samples, 0.16%)</title><rect x="91.1717%" y="405" width="0.1605%" height="15" fill="rgb(215,48,1)" fg:x="1136" fg:w="2"/><text x="91.4217%" y="415.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="91.2520%" y="389" width="0.0803%" height="15" fill="rgb(205,223,38)" fg:x="1137" fg:w="1"/><text x="91.5020%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="91.2520%" y="373" width="0.0803%" height="15" fill="rgb(213,51,8)" fg:x="1137" fg:w="1"/><text x="91.5020%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="91.2520%" y="357" width="0.0803%" height="15" fill="rgb(248,53,11)" fg:x="1137" fg:w="1"/><text x="91.5020%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="91.2520%" y="341" width="0.0803%" height="15" fill="rgb(218,140,4)" fg:x="1137" fg:w="1"/><text x="91.5020%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="91.2520%" y="325" width="0.0803%" height="15" fill="rgb(248,161,31)" fg:x="1137" fg:w="1"/><text x="91.5020%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.2520%" y="309" width="0.0803%" height="15" fill="rgb(239,88,32)" fg:x="1137" fg:w="1"/><text x="91.5020%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.2520%" y="293" width="0.0803%" height="15" fill="rgb(234,14,28)" fg:x="1137" fg:w="1"/><text x="91.5020%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="91.2520%" y="277" width="0.0803%" height="15" fill="rgb(235,173,11)" fg:x="1137" fg:w="1"/><text x="91.5020%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.2520%" y="261" width="0.0803%" height="15" fill="rgb(222,70,2)" fg:x="1137" fg:w="1"/><text x="91.5020%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::size_hint (1 samples, 0.08%)</title><rect x="91.2520%" y="245" width="0.0803%" height="15" fill="rgb(228,196,41)" fg:x="1137" fg:w="1"/><text x="91.5020%" y="255.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="91.3323%" y="293" width="0.0803%" height="15" fill="rgb(249,19,9)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="91.3323%" y="277" width="0.0803%" height="15" fill="rgb(221,16,43)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="91.3323%" y="261" width="0.0803%" height="15" fill="rgb(225,207,6)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="91.3323%" y="245" width="0.0803%" height="15" fill="rgb(249,32,32)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="91.3323%" y="229" width="0.0803%" height="15" fill="rgb(232,163,43)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="91.3323%" y="213" width="0.0803%" height="15" fill="rgb(236,158,54)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="91.3323%" y="197" width="0.0803%" height="15" fill="rgb(205,126,44)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="91.3323%" y="181" width="0.0803%" height="15" fill="rgb(210,162,12)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="91.3323%" y="165" width="0.0803%" height="15" fill="rgb(218,156,48)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="91.3323%" y="149" width="0.0803%" height="15" fill="rgb(248,210,3)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="91.3323%" y="133" width="0.0803%" height="15" fill="rgb(212,43,27)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="91.3323%" y="117" width="0.0803%" height="15" fill="rgb(241,52,6)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="91.3323%" y="101" width="0.0803%" height="15" fill="rgb(222,178,35)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="91.3323%" y="85" width="0.0803%" height="15" fill="rgb(205,121,46)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="91.3323%" y="69" width="0.0803%" height="15" fill="rgb(249,67,1)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="91.3323%" y="53" width="0.0803%" height="15" fill="rgb(238,168,42)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="91.3323%" y="37" width="0.0803%" height="15" fill="rgb(205,36,48)" fg:x="1138" fg:w="1"/><text x="91.5823%" y="47.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (2 samples, 0.16%)</title><rect x="91.3323%" y="405" width="0.1605%" height="15" fill="rgb(240,85,12)" fg:x="1138" fg:w="2"/><text x="91.5823%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (2 samples, 0.16%)</title><rect x="91.3323%" y="389" width="0.1605%" height="15" fill="rgb(245,27,39)" fg:x="1138" fg:w="2"/><text x="91.5823%" y="399.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (2 samples, 0.16%)</title><rect x="91.3323%" y="373" width="0.1605%" height="15" fill="rgb(218,129,34)" fg:x="1138" fg:w="2"/><text x="91.5823%" y="383.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (2 samples, 0.16%)</title><rect x="91.3323%" y="357" width="0.1605%" height="15" fill="rgb(221,157,12)" fg:x="1138" fg:w="2"/><text x="91.5823%" y="367.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (2 samples, 0.16%)</title><rect x="91.3323%" y="341" width="0.1605%" height="15" fill="rgb(213,206,20)" fg:x="1138" fg:w="2"/><text x="91.5823%" y="351.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (2 samples, 0.16%)</title><rect x="91.3323%" y="325" width="0.1605%" height="15" fill="rgb(227,115,30)" fg:x="1138" fg:w="2"/><text x="91.5823%" y="335.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (2 samples, 0.16%)</title><rect x="91.3323%" y="309" width="0.1605%" height="15" fill="rgb(221,40,47)" fg:x="1138" fg:w="2"/><text x="91.5823%" y="319.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (1 samples, 0.08%)</title><rect x="91.4125%" y="293" width="0.0803%" height="15" fill="rgb(239,96,49)" fg:x="1139" fg:w="1"/><text x="91.6625%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="91.4125%" y="277" width="0.0803%" height="15" fill="rgb(223,24,38)" fg:x="1139" fg:w="1"/><text x="91.6625%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="91.4125%" y="261" width="0.0803%" height="15" fill="rgb(242,35,45)" fg:x="1139" fg:w="1"/><text x="91.6625%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="91.4125%" y="245" width="0.0803%" height="15" fill="rgb(236,20,9)" fg:x="1139" fg:w="1"/><text x="91.6625%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="91.4125%" y="229" width="0.0803%" height="15" fill="rgb(239,124,8)" fg:x="1139" fg:w="1"/><text x="91.6625%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="91.4125%" y="213" width="0.0803%" height="15" fill="rgb(228,92,29)" fg:x="1139" fg:w="1"/><text x="91.6625%" y="223.50"></text></g><g><title>plugins_core::library::actions::reply_ok (3 samples, 0.24%)</title><rect x="91.3323%" y="421" width="0.2408%" height="15" fill="rgb(251,53,39)" fg:x="1138" fg:w="3"/><text x="91.5823%" y="431.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="91.4928%" y="405" width="0.0803%" height="15" fill="rgb(224,44,10)" fg:x="1140" fg:w="1"/><text x="91.7428%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (1 samples, 0.08%)</title><rect x="91.4928%" y="389" width="0.0803%" height="15" fill="rgb(254,10,15)" fg:x="1140" fg:w="1"/><text x="91.7428%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="91.4928%" y="373" width="0.0803%" height="15" fill="rgb(245,173,6)" fg:x="1140" fg:w="1"/><text x="91.7428%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="91.4928%" y="357" width="0.0803%" height="15" fill="rgb(228,74,0)" fg:x="1140" fg:w="1"/><text x="91.7428%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="91.4928%" y="341" width="0.0803%" height="15" fill="rgb(206,138,29)" fg:x="1140" fg:w="1"/><text x="91.7428%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="91.4928%" y="325" width="0.0803%" height="15" fill="rgb(253,27,43)" fg:x="1140" fg:w="1"/><text x="91.7428%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="91.4928%" y="309" width="0.0803%" height="15" fill="rgb(231,73,0)" fg:x="1140" fg:w="1"/><text x="91.7428%" y="319.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="91.5730%" y="405" width="0.0803%" height="15" fill="rgb(218,9,23)" fg:x="1141" fg:w="1"/><text x="91.8230%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="91.5730%" y="389" width="0.0803%" height="15" fill="rgb(251,55,29)" fg:x="1141" fg:w="1"/><text x="91.8230%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="91.6533%" y="405" width="0.0803%" height="15" fill="rgb(223,180,22)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="415.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="91.6533%" y="389" width="0.0803%" height="15" fill="rgb(223,29,21)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="91.6533%" y="373" width="0.0803%" height="15" fill="rgb(251,103,37)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="91.6533%" y="357" width="0.0803%" height="15" fill="rgb(214,11,21)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.6533%" y="341" width="0.0803%" height="15" fill="rgb(205,137,13)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.6533%" y="325" width="0.0803%" height="15" fill="rgb(225,58,47)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="91.6533%" y="309" width="0.0803%" height="15" fill="rgb(222,197,14)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.6533%" y="293" width="0.0803%" height="15" fill="rgb(215,210,33)" fg:x="1142" fg:w="1"/><text x="91.9033%" y="303.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="91.7335%" y="405" width="0.0803%" height="15" fill="rgb(242,13,9)" fg:x="1143" fg:w="1"/><text x="91.9835%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="91.7335%" y="389" width="0.0803%" height="15" fill="rgb(218,31,39)" fg:x="1143" fg:w="1"/><text x="91.9835%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="91.7335%" y="373" width="0.0803%" height="15" fill="rgb(211,214,23)" fg:x="1143" fg:w="1"/><text x="91.9835%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="91.7335%" y="357" width="0.0803%" height="15" fill="rgb(237,92,14)" fg:x="1143" fg:w="1"/><text x="91.9835%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="91.7335%" y="341" width="0.0803%" height="15" fill="rgb(220,78,5)" fg:x="1143" fg:w="1"/><text x="91.9835%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="91.7335%" y="325" width="0.0803%" height="15" fill="rgb(237,23,21)" fg:x="1143" fg:w="1"/><text x="91.9835%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="91.7335%" y="309" width="0.0803%" height="15" fill="rgb(251,207,51)" fg:x="1143" fg:w="1"/><text x="91.9835%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="91.7335%" y="293" width="0.0803%" height="15" fill="rgb(249,206,18)" fg:x="1143" fg:w="1"/><text x="91.9835%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="91.7335%" y="277" width="0.0803%" height="15" fill="rgb(236,20,19)" fg:x="1143" fg:w="1"/><text x="91.9835%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="91.7335%" y="261" width="0.0803%" height="15" fill="rgb(214,227,29)" fg:x="1143" fg:w="1"/><text x="91.9835%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="91.7335%" y="245" width="0.0803%" height="15" fill="rgb(209,183,4)" fg:x="1143" fg:w="1"/><text x="91.9835%" y="255.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="91.8138%" y="405" width="0.0803%" height="15" fill="rgb(233,111,23)" fg:x="1144" fg:w="1"/><text x="92.0638%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="91.8138%" y="389" width="0.0803%" height="15" fill="rgb(238,121,27)" fg:x="1144" fg:w="1"/><text x="92.0638%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.8138%" y="373" width="0.0803%" height="15" fill="rgb(236,120,41)" fg:x="1144" fg:w="1"/><text x="92.0638%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.8138%" y="357" width="0.0803%" height="15" fill="rgb(241,143,10)" fg:x="1144" fg:w="1"/><text x="92.0638%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.8138%" y="341" width="0.0803%" height="15" fill="rgb(224,86,31)" fg:x="1144" fg:w="1"/><text x="92.0638%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.8138%" y="325" width="0.0803%" height="15" fill="rgb(236,212,27)" fg:x="1144" fg:w="1"/><text x="92.0638%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.8138%" y="309" width="0.0803%" height="15" fill="rgb(219,43,51)" fg:x="1144" fg:w="1"/><text x="92.0638%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.8138%" y="293" width="0.0803%" height="15" fill="rgb(232,216,8)" fg:x="1144" fg:w="1"/><text x="92.0638%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="91.8138%" y="277" width="0.0803%" height="15" fill="rgb(206,222,39)" fg:x="1144" fg:w="1"/><text x="92.0638%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.8138%" y="261" width="0.0803%" height="15" fill="rgb(209,149,48)" fg:x="1144" fg:w="1"/><text x="92.0638%" y="271.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (93 samples, 7.46%)</title><rect x="84.5104%" y="437" width="7.4639%" height="15" fill="rgb(229,155,21)" fg:x="1053" fg:w="93"/><text x="84.7604%" y="447.50">&lt;plugins_c..</text></g><g><title>plugins_core::location::model::change_location (5 samples, 0.40%)</title><rect x="91.5730%" y="421" width="0.4013%" height="15" fill="rgb(246,152,26)" fg:x="1141" fg:w="5"/><text x="91.8230%" y="431.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="91.8941%" y="405" width="0.0803%" height="15" fill="rgb(206,70,42)" fg:x="1145" fg:w="1"/><text x="92.1441%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="91.8941%" y="389" width="0.0803%" height="15" fill="rgb(236,9,11)" fg:x="1145" fg:w="1"/><text x="92.1441%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="91.8941%" y="373" width="0.0803%" height="15" fill="rgb(238,145,47)" fg:x="1145" fg:w="1"/><text x="92.1441%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.8941%" y="357" width="0.0803%" height="15" fill="rgb(252,189,7)" fg:x="1145" fg:w="1"/><text x="92.1441%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="91.9743%" y="405" width="0.0803%" height="15" fill="rgb(254,168,51)" fg:x="1146" fg:w="1"/><text x="92.2243%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.9743%" y="389" width="0.0803%" height="15" fill="rgb(227,105,46)" fg:x="1146" fg:w="1"/><text x="92.2243%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="92.0546%" y="373" width="0.0803%" height="15" fill="rgb(227,74,30)" fg:x="1147" fg:w="1"/><text x="92.3046%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="92.0546%" y="357" width="0.0803%" height="15" fill="rgb(206,212,44)" fg:x="1147" fg:w="1"/><text x="92.3046%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="92.0546%" y="341" width="0.0803%" height="15" fill="rgb(252,69,11)" fg:x="1147" fg:w="1"/><text x="92.3046%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="92.0546%" y="325" width="0.0803%" height="15" fill="rgb(239,116,0)" fg:x="1147" fg:w="1"/><text x="92.3046%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="92.0546%" y="309" width="0.0803%" height="15" fill="rgb(246,189,23)" fg:x="1147" fg:w="1"/><text x="92.3046%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="92.0546%" y="293" width="0.0803%" height="15" fill="rgb(229,50,41)" fg:x="1147" fg:w="1"/><text x="92.3046%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="92.0546%" y="277" width="0.0803%" height="15" fill="rgb(214,66,37)" fg:x="1147" fg:w="1"/><text x="92.3046%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="92.0546%" y="261" width="0.0803%" height="15" fill="rgb(226,28,6)" fg:x="1147" fg:w="1"/><text x="92.3046%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="92.0546%" y="245" width="0.0803%" height="15" fill="rgb(239,154,0)" fg:x="1147" fg:w="1"/><text x="92.3046%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="92.0546%" y="229" width="0.0803%" height="15" fill="rgb(233,97,11)" fg:x="1147" fg:w="1"/><text x="92.3046%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="92.0546%" y="213" width="0.0803%" height="15" fill="rgb(236,215,16)" fg:x="1147" fg:w="1"/><text x="92.3046%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="92.0546%" y="197" width="0.0803%" height="15" fill="rgb(246,188,29)" fg:x="1147" fg:w="1"/><text x="92.3046%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="92.0546%" y="181" width="0.0803%" height="15" fill="rgb(207,7,29)" fg:x="1147" fg:w="1"/><text x="92.3046%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="92.0546%" y="165" width="0.0803%" height="15" fill="rgb(238,112,43)" fg:x="1147" fg:w="1"/><text x="92.3046%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.0546%" y="149" width="0.0803%" height="15" fill="rgb(230,110,32)" fg:x="1147" fg:w="1"/><text x="92.3046%" y="159.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="92.0546%" y="405" width="0.3210%" height="15" fill="rgb(218,197,32)" fg:x="1147" fg:w="4"/><text x="92.3046%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="92.0546%" y="389" width="0.3210%" height="15" fill="rgb(252,61,9)" fg:x="1147" fg:w="4"/><text x="92.3046%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="92.1348%" y="373" width="0.2408%" height="15" fill="rgb(244,140,14)" fg:x="1148" fg:w="3"/><text x="92.3848%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="92.1348%" y="357" width="0.2408%" height="15" fill="rgb(216,14,47)" fg:x="1148" fg:w="3"/><text x="92.3848%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="92.1348%" y="341" width="0.2408%" height="15" fill="rgb(224,130,52)" fg:x="1148" fg:w="3"/><text x="92.3848%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="92.1348%" y="325" width="0.2408%" height="15" fill="rgb(210,229,51)" fg:x="1148" fg:w="3"/><text x="92.3848%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="92.1348%" y="309" width="0.2408%" height="15" fill="rgb(242,13,9)" fg:x="1148" fg:w="3"/><text x="92.3848%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="92.1348%" y="293" width="0.2408%" height="15" fill="rgb(252,71,50)" fg:x="1148" fg:w="3"/><text x="92.3848%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="92.2953%" y="277" width="0.0803%" height="15" fill="rgb(218,225,6)" fg:x="1150" fg:w="1"/><text x="92.5453%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="92.3756%" y="389" width="0.1605%" height="15" fill="rgb(219,27,35)" fg:x="1151" fg:w="2"/><text x="92.6256%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="92.3756%" y="373" width="0.1605%" height="15" fill="rgb(226,30,1)" fg:x="1151" fg:w="2"/><text x="92.6256%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="92.3756%" y="357" width="0.1605%" height="15" fill="rgb(227,164,34)" fg:x="1151" fg:w="2"/><text x="92.6256%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="92.3756%" y="341" width="0.1605%" height="15" fill="rgb(206,103,4)" fg:x="1151" fg:w="2"/><text x="92.6256%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="92.3756%" y="325" width="0.1605%" height="15" fill="rgb(214,166,19)" fg:x="1151" fg:w="2"/><text x="92.6256%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="92.3756%" y="309" width="0.1605%" height="15" fill="rgb(240,56,20)" fg:x="1151" fg:w="2"/><text x="92.6256%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="92.3756%" y="293" width="0.1605%" height="15" fill="rgb(224,25,3)" fg:x="1151" fg:w="2"/><text x="92.6256%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="92.3756%" y="277" width="0.1605%" height="15" fill="rgb(216,206,54)" fg:x="1151" fg:w="2"/><text x="92.6256%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="92.3756%" y="261" width="0.1605%" height="15" fill="rgb(225,142,10)" fg:x="1151" fg:w="2"/><text x="92.6256%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="92.4559%" y="245" width="0.0803%" height="15" fill="rgb(246,9,18)" fg:x="1152" fg:w="1"/><text x="92.7059%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="92.4559%" y="229" width="0.0803%" height="15" fill="rgb(247,140,18)" fg:x="1152" fg:w="1"/><text x="92.7059%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="92.4559%" y="213" width="0.0803%" height="15" fill="rgb(239,184,22)" fg:x="1152" fg:w="1"/><text x="92.7059%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="92.4559%" y="197" width="0.0803%" height="15" fill="rgb(227,94,44)" fg:x="1152" fg:w="1"/><text x="92.7059%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="92.4559%" y="181" width="0.0803%" height="15" fill="rgb(219,43,3)" fg:x="1152" fg:w="1"/><text x="92.7059%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="92.4559%" y="165" width="0.0803%" height="15" fill="rgb(210,76,31)" fg:x="1152" fg:w="1"/><text x="92.7059%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.4559%" y="149" width="0.0803%" height="15" fill="rgb(225,85,12)" fg:x="1152" fg:w="1"/><text x="92.7059%" y="159.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="92.3756%" y="405" width="0.2408%" height="15" fill="rgb(214,191,28)" fg:x="1151" fg:w="3"/><text x="92.6256%" y="415.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="92.5361%" y="389" width="0.0803%" height="15" fill="rgb(214,43,14)" fg:x="1153" fg:w="1"/><text x="92.7861%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="92.6164%" y="357" width="0.0803%" height="15" fill="rgb(253,117,5)" fg:x="1154" fg:w="1"/><text x="92.8664%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="92.6164%" y="341" width="0.0803%" height="15" fill="rgb(208,124,26)" fg:x="1154" fg:w="1"/><text x="92.8664%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="92.6164%" y="325" width="0.0803%" height="15" fill="rgb(228,208,39)" fg:x="1154" fg:w="1"/><text x="92.8664%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="92.6164%" y="309" width="0.0803%" height="15" fill="rgb(206,180,39)" fg:x="1154" fg:w="1"/><text x="92.8664%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="92.6164%" y="293" width="0.0803%" height="15" fill="rgb(205,111,37)" fg:x="1154" fg:w="1"/><text x="92.8664%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="92.6164%" y="277" width="0.0803%" height="15" fill="rgb(208,121,24)" fg:x="1154" fg:w="1"/><text x="92.8664%" y="287.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="92.6164%" y="261" width="0.0803%" height="15" fill="rgb(218,215,32)" fg:x="1154" fg:w="1"/><text x="92.8664%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="92.6164%" y="245" width="0.0803%" height="15" fill="rgb(244,168,53)" fg:x="1154" fg:w="1"/><text x="92.8664%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="92.6164%" y="229" width="0.0803%" height="15" fill="rgb(214,9,36)" fg:x="1154" fg:w="1"/><text x="92.8664%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="92.6164%" y="213" width="0.0803%" height="15" fill="rgb(231,4,34)" fg:x="1154" fg:w="1"/><text x="92.8664%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="92.6164%" y="197" width="0.0803%" height="15" fill="rgb(210,83,51)" fg:x="1154" fg:w="1"/><text x="92.8664%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="92.6164%" y="181" width="0.0803%" height="15" fill="rgb(224,112,1)" fg:x="1154" fg:w="1"/><text x="92.8664%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="92.6966%" y="261" width="0.2408%" height="15" fill="rgb(216,33,41)" fg:x="1155" fg:w="3"/><text x="92.9466%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="92.7769%" y="245" width="0.1605%" height="15" fill="rgb(215,179,42)" fg:x="1156" fg:w="2"/><text x="93.0269%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.8571%" y="229" width="0.0803%" height="15" fill="rgb(205,81,48)" fg:x="1157" fg:w="1"/><text x="93.1071%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="92.9374%" y="181" width="0.0803%" height="15" fill="rgb(246,17,30)" fg:x="1158" fg:w="1"/><text x="93.1874%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.9374%" y="165" width="0.0803%" height="15" fill="rgb(226,19,16)" fg:x="1158" fg:w="1"/><text x="93.1874%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.9374%" y="149" width="0.0803%" height="15" fill="rgb(207,3,14)" fg:x="1158" fg:w="1"/><text x="93.1874%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.9374%" y="133" width="0.0803%" height="15" fill="rgb(226,77,12)" fg:x="1158" fg:w="1"/><text x="93.1874%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="92.9374%" y="245" width="0.6421%" height="15" fill="rgb(226,76,25)" fg:x="1158" fg:w="8"/><text x="93.1874%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (8 samples, 0.64%)</title><rect x="92.9374%" y="229" width="0.6421%" height="15" fill="rgb(217,216,25)" fg:x="1158" fg:w="8"/><text x="93.1874%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (8 samples, 0.64%)</title><rect x="92.9374%" y="213" width="0.6421%" height="15" fill="rgb(247,127,42)" fg:x="1158" fg:w="8"/><text x="93.1874%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (8 samples, 0.64%)</title><rect x="92.9374%" y="197" width="0.6421%" height="15" fill="rgb(226,10,34)" fg:x="1158" fg:w="8"/><text x="93.1874%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (7 samples, 0.56%)</title><rect x="93.0177%" y="181" width="0.5618%" height="15" fill="rgb(249,78,0)" fg:x="1159" fg:w="7"/><text x="93.2677%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (7 samples, 0.56%)</title><rect x="93.0177%" y="165" width="0.5618%" height="15" fill="rgb(226,218,38)" fg:x="1159" fg:w="7"/><text x="93.2677%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (13 samples, 1.04%)</title><rect x="92.6966%" y="277" width="1.0433%" height="15" fill="rgb(240,92,1)" fg:x="1155" fg:w="13"/><text x="92.9466%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (10 samples, 0.80%)</title><rect x="92.9374%" y="261" width="0.8026%" height="15" fill="rgb(237,224,33)" fg:x="1158" fg:w="10"/><text x="93.1874%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="93.5795%" y="245" width="0.1605%" height="15" fill="rgb(211,46,1)" fg:x="1166" fg:w="2"/><text x="93.8295%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="93.6597%" y="229" width="0.0803%" height="15" fill="rgb(239,190,4)" fg:x="1167" fg:w="1"/><text x="93.9097%" y="239.50"></text></g><g><title>regex::regex::string::Regex::new (14 samples, 1.12%)</title><rect x="92.6966%" y="325" width="1.1236%" height="15" fill="rgb(221,50,22)" fg:x="1155" fg:w="14"/><text x="92.9466%" y="335.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (14 samples, 1.12%)</title><rect x="92.6966%" y="309" width="1.1236%" height="15" fill="rgb(207,176,8)" fg:x="1155" fg:w="14"/><text x="92.9466%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (14 samples, 1.12%)</title><rect x="92.6966%" y="293" width="1.1236%" height="15" fill="rgb(244,114,50)" fg:x="1155" fg:w="14"/><text x="92.9466%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="93.7400%" y="277" width="0.0803%" height="15" fill="rgb(226,206,19)" fg:x="1168" fg:w="1"/><text x="93.9900%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="93.7400%" y="261" width="0.0803%" height="15" fill="rgb(208,199,16)" fg:x="1168" fg:w="1"/><text x="93.9900%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.7400%" y="245" width="0.0803%" height="15" fill="rgb(208,38,14)" fg:x="1168" fg:w="1"/><text x="93.9900%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (15 samples, 1.20%)</title><rect x="92.6966%" y="341" width="1.2039%" height="15" fill="rgb(221,211,49)" fg:x="1155" fg:w="15"/><text x="92.9466%" y="351.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="93.8202%" y="325" width="0.0803%" height="15" fill="rgb(227,214,34)" fg:x="1169" fg:w="1"/><text x="94.0702%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="93.8202%" y="309" width="0.0803%" height="15" fill="rgb(234,5,54)" fg:x="1169" fg:w="1"/><text x="94.0702%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="93.8202%" y="293" width="0.0803%" height="15" fill="rgb(236,215,22)" fg:x="1169" fg:w="1"/><text x="94.0702%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="93.8202%" y="277" width="0.0803%" height="15" fill="rgb(244,0,11)" fg:x="1169" fg:w="1"/><text x="94.0702%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="93.8202%" y="261" width="0.0803%" height="15" fill="rgb(212,140,16)" fg:x="1169" fg:w="1"/><text x="94.0702%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="93.8202%" y="245" width="0.0803%" height="15" fill="rgb(238,101,37)" fg:x="1169" fg:w="1"/><text x="94.0702%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="93.8202%" y="229" width="0.0803%" height="15" fill="rgb(247,46,3)" fg:x="1169" fg:w="1"/><text x="94.0702%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.8202%" y="213" width="0.0803%" height="15" fill="rgb(208,106,19)" fg:x="1169" fg:w="1"/><text x="94.0702%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="93.9005%" y="325" width="0.0803%" height="15" fill="rgb(240,227,15)" fg:x="1170" fg:w="1"/><text x="94.1505%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="93.9005%" y="309" width="0.0803%" height="15" fill="rgb(226,173,6)" fg:x="1170" fg:w="1"/><text x="94.1505%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.9005%" y="293" width="0.0803%" height="15" fill="rgb(213,191,1)" fg:x="1170" fg:w="1"/><text x="94.1505%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.9005%" y="277" width="0.0803%" height="15" fill="rgb(246,51,36)" fg:x="1170" fg:w="1"/><text x="94.1505%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (1 samples, 0.08%)</title><rect x="93.9807%" y="277" width="0.0803%" height="15" fill="rgb(238,40,32)" fg:x="1171" fg:w="1"/><text x="94.2307%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="93.9807%" y="261" width="0.0803%" height="15" fill="rgb(208,126,27)" fg:x="1171" fg:w="1"/><text x="94.2307%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="93.9807%" y="245" width="0.0803%" height="15" fill="rgb(227,117,38)" fg:x="1171" fg:w="1"/><text x="94.2307%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="94.0610%" y="277" width="0.0803%" height="15" fill="rgb(232,16,1)" fg:x="1172" fg:w="1"/><text x="94.3110%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="94.0610%" y="261" width="0.0803%" height="15" fill="rgb(212,111,31)" fg:x="1172" fg:w="1"/><text x="94.3110%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="94.0610%" y="245" width="0.0803%" height="15" fill="rgb(253,227,2)" fg:x="1172" fg:w="1"/><text x="94.3110%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="94.0610%" y="229" width="0.0803%" height="15" fill="rgb(216,122,17)" fg:x="1172" fg:w="1"/><text x="94.3110%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="94.0610%" y="213" width="0.0803%" height="15" fill="rgb(227,37,2)" fg:x="1172" fg:w="1"/><text x="94.3110%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="94.0610%" y="197" width="0.0803%" height="15" fill="rgb(244,113,40)" fg:x="1172" fg:w="1"/><text x="94.3110%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="94.1413%" y="229" width="0.0803%" height="15" fill="rgb(217,193,34)" fg:x="1173" fg:w="1"/><text x="94.3913%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="94.1413%" y="213" width="0.0803%" height="15" fill="rgb(212,223,15)" fg:x="1173" fg:w="1"/><text x="94.3913%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (4 samples, 0.32%)</title><rect x="93.9807%" y="325" width="0.3210%" height="15" fill="rgb(238,143,18)" fg:x="1171" fg:w="4"/><text x="94.2307%" y="335.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (4 samples, 0.32%)</title><rect x="93.9807%" y="309" width="0.3210%" height="15" fill="rgb(231,18,49)" fg:x="1171" fg:w="4"/><text x="94.2307%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (4 samples, 0.32%)</title><rect x="93.9807%" y="293" width="0.3210%" height="15" fill="rgb(249,122,4)" fg:x="1171" fg:w="4"/><text x="94.2307%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="94.1413%" y="277" width="0.1605%" height="15" fill="rgb(245,138,54)" fg:x="1173" fg:w="2"/><text x="94.3913%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="94.1413%" y="261" width="0.1605%" height="15" fill="rgb(218,130,18)" fg:x="1173" fg:w="2"/><text x="94.3913%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="94.1413%" y="245" width="0.1605%" height="15" fill="rgb(235,94,13)" fg:x="1173" fg:w="2"/><text x="94.3913%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="94.2215%" y="229" width="0.0803%" height="15" fill="rgb(247,143,5)" fg:x="1174" fg:w="1"/><text x="94.4715%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="94.2215%" y="213" width="0.0803%" height="15" fill="rgb(212,59,54)" fg:x="1174" fg:w="1"/><text x="94.4715%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (6 samples, 0.48%)</title><rect x="93.9005%" y="341" width="0.4815%" height="15" fill="rgb(206,121,24)" fg:x="1170" fg:w="6"/><text x="94.1505%" y="351.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="94.3018%" y="325" width="0.0803%" height="15" fill="rgb(235,38,8)" fg:x="1175" fg:w="1"/><text x="94.5518%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="94.3018%" y="309" width="0.0803%" height="15" fill="rgb(227,102,26)" fg:x="1175" fg:w="1"/><text x="94.5518%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="94.3018%" y="293" width="0.0803%" height="15" fill="rgb(240,183,46)" fg:x="1175" fg:w="1"/><text x="94.5518%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="94.3820%" y="325" width="0.0803%" height="15" fill="rgb(208,177,23)" fg:x="1176" fg:w="1"/><text x="94.6320%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="94.3820%" y="309" width="0.0803%" height="15" fill="rgb(216,152,5)" fg:x="1176" fg:w="1"/><text x="94.6320%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.3820%" y="293" width="0.0803%" height="15" fill="rgb(238,199,2)" fg:x="1176" fg:w="1"/><text x="94.6320%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.3820%" y="277" width="0.0803%" height="15" fill="rgb(235,142,28)" fg:x="1176" fg:w="1"/><text x="94.6320%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="94.3820%" y="261" width="0.0803%" height="15" fill="rgb(225,97,25)" fg:x="1176" fg:w="1"/><text x="94.6320%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.4623%" y="229" width="0.0803%" height="15" fill="rgb(208,75,46)" fg:x="1177" fg:w="1"/><text x="94.7123%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (2 samples, 0.16%)</title><rect x="94.4623%" y="325" width="0.1605%" height="15" fill="rgb(240,136,15)" fg:x="1177" fg:w="2"/><text x="94.7123%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="94.4623%" y="309" width="0.1605%" height="15" fill="rgb(235,36,27)" fg:x="1177" fg:w="2"/><text x="94.7123%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="94.4623%" y="293" width="0.1605%" height="15" fill="rgb(231,132,23)" fg:x="1177" fg:w="2"/><text x="94.7123%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="94.4623%" y="277" width="0.1605%" height="15" fill="rgb(205,208,20)" fg:x="1177" fg:w="2"/><text x="94.7123%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="94.4623%" y="261" width="0.1605%" height="15" fill="rgb(215,26,40)" fg:x="1177" fg:w="2"/><text x="94.7123%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="94.4623%" y="245" width="0.1605%" height="15" fill="rgb(238,183,34)" fg:x="1177" fg:w="2"/><text x="94.7123%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="94.5425%" y="229" width="0.0803%" height="15" fill="rgb(207,96,10)" fg:x="1178" fg:w="1"/><text x="94.7925%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="94.7030%" y="261" width="0.1605%" height="15" fill="rgb(218,88,6)" fg:x="1180" fg:w="2"/><text x="94.9530%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="94.7030%" y="245" width="0.1605%" height="15" fill="rgb(217,22,49)" fg:x="1180" fg:w="2"/><text x="94.9530%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="94.8636%" y="261" width="0.1605%" height="15" fill="rgb(240,195,14)" fg:x="1182" fg:w="2"/><text x="95.1136%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="94.8636%" y="245" width="0.1605%" height="15" fill="rgb(229,48,27)" fg:x="1182" fg:w="2"/><text x="95.1136%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.1043%" y="229" width="0.0803%" height="15" fill="rgb(220,194,45)" fg:x="1185" fg:w="1"/><text x="95.3543%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (5 samples, 0.40%)</title><rect x="95.0241%" y="261" width="0.4013%" height="15" fill="rgb(252,60,20)" fg:x="1184" fg:w="5"/><text x="95.2741%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="95.0241%" y="245" width="0.4013%" height="15" fill="rgb(244,169,33)" fg:x="1184" fg:w="5"/><text x="95.2741%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="95.1846%" y="229" width="0.2408%" height="15" fill="rgb(234,141,34)" fg:x="1186" fg:w="3"/><text x="95.4346%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="95.1846%" y="213" width="0.2408%" height="15" fill="rgb(241,141,9)" fg:x="1186" fg:w="3"/><text x="95.4346%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="95.1846%" y="197" width="0.2408%" height="15" fill="rgb(246,27,36)" fg:x="1186" fg:w="3"/><text x="95.4346%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="95.5056%" y="213" width="0.0803%" height="15" fill="rgb(216,188,42)" fg:x="1190" fg:w="1"/><text x="95.7556%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="95.7464%" y="149" width="0.2408%" height="15" fill="rgb(234,205,22)" fg:x="1193" fg:w="3"/><text x="95.9964%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="95.9872%" y="149" width="0.0803%" height="15" fill="rgb(210,202,32)" fg:x="1196" fg:w="1"/><text x="96.2372%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.9872%" y="133" width="0.0803%" height="15" fill="rgb(217,0,48)" fg:x="1196" fg:w="1"/><text x="96.2372%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.9872%" y="117" width="0.0803%" height="15" fill="rgb(207,115,37)" fg:x="1196" fg:w="1"/><text x="96.2372%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.9872%" y="101" width="0.0803%" height="15" fill="rgb(237,221,44)" fg:x="1196" fg:w="1"/><text x="96.2372%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.2279%" y="117" width="0.0803%" height="15" fill="rgb(249,78,2)" fg:x="1199" fg:w="1"/><text x="96.4779%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.2279%" y="101" width="0.0803%" height="15" fill="rgb(211,169,23)" fg:x="1199" fg:w="1"/><text x="96.4779%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.2279%" y="85" width="0.0803%" height="15" fill="rgb(207,116,29)" fg:x="1199" fg:w="1"/><text x="96.4779%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.3884%" y="101" width="0.0803%" height="15" fill="rgb(240,84,33)" fg:x="1201" fg:w="1"/><text x="96.6384%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="96.0674%" y="149" width="0.4815%" height="15" fill="rgb(229,224,31)" fg:x="1197" fg:w="6"/><text x="96.3174%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="96.1477%" y="133" width="0.4013%" height="15" fill="rgb(227,90,31)" fg:x="1198" fg:w="5"/><text x="96.3977%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="96.3082%" y="117" width="0.2408%" height="15" fill="rgb(249,22,41)" fg:x="1200" fg:w="3"/><text x="96.5582%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="96.4687%" y="101" width="0.0803%" height="15" fill="rgb(239,65,11)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.4687%" y="85" width="0.0803%" height="15" fill="rgb(205,5,23)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.4687%" y="69" width="0.0803%" height="15" fill="rgb(254,78,52)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.4687%" y="53" width="0.0803%" height="15" fill="rgb(214,156,33)" fg:x="1202" fg:w="1"/><text x="96.7187%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (8 samples, 0.64%)</title><rect x="96.5490%" y="149" width="0.6421%" height="15" fill="rgb(208,20,30)" fg:x="1203" fg:w="8"/><text x="96.7990%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (8 samples, 0.64%)</title><rect x="96.5490%" y="133" width="0.6421%" height="15" fill="rgb(223,133,18)" fg:x="1203" fg:w="8"/><text x="96.7990%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (8 samples, 0.64%)</title><rect x="96.5490%" y="117" width="0.6421%" height="15" fill="rgb(222,91,41)" fg:x="1203" fg:w="8"/><text x="96.7990%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 1.93%)</title><rect x="95.4254%" y="245" width="1.9262%" height="15" fill="rgb(247,137,48)" fg:x="1189" fg:w="24"/><text x="95.6754%" y="255.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (23 samples, 1.85%)</title><rect x="95.5056%" y="229" width="1.8459%" height="15" fill="rgb(239,156,11)" fg:x="1190" fg:w="23"/><text x="95.7556%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (22 samples, 1.77%)</title><rect x="95.5859%" y="213" width="1.7657%" height="15" fill="rgb(244,56,26)" fg:x="1191" fg:w="22"/><text x="95.8359%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (22 samples, 1.77%)</title><rect x="95.5859%" y="197" width="1.7657%" height="15" fill="rgb(205,131,49)" fg:x="1191" fg:w="22"/><text x="95.8359%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (22 samples, 1.77%)</title><rect x="95.5859%" y="181" width="1.7657%" height="15" fill="rgb(224,0,2)" fg:x="1191" fg:w="22"/><text x="95.8359%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (22 samples, 1.77%)</title><rect x="95.5859%" y="165" width="1.7657%" height="15" fill="rgb(247,59,36)" fg:x="1191" fg:w="22"/><text x="95.8359%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="97.1910%" y="149" width="0.1605%" height="15" fill="rgb(215,4,47)" fg:x="1211" fg:w="2"/><text x="97.4410%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2713%" y="133" width="0.0803%" height="15" fill="rgb(242,72,42)" fg:x="1212" fg:w="1"/><text x="97.5213%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (37 samples, 2.97%)</title><rect x="94.6228%" y="277" width="2.9695%" height="15" fill="rgb(232,145,44)" fg:x="1179" fg:w="37"/><text x="94.8728%" y="287.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (27 samples, 2.17%)</title><rect x="95.4254%" y="261" width="2.1669%" height="15" fill="rgb(205,108,43)" fg:x="1189" fg:w="27"/><text x="95.6754%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="97.3515%" y="245" width="0.2408%" height="15" fill="rgb(215,190,17)" fg:x="1213" fg:w="3"/><text x="97.6015%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="97.3515%" y="229" width="0.2408%" height="15" fill="rgb(223,90,34)" fg:x="1213" fg:w="3"/><text x="97.6015%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="97.5923%" y="277" width="0.0803%" height="15" fill="rgb(216,25,0)" fg:x="1216" fg:w="1"/><text x="97.8423%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="97.5923%" y="261" width="0.0803%" height="15" fill="rgb(223,51,28)" fg:x="1216" fg:w="1"/><text x="97.8423%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="97.5923%" y="245" width="0.0803%" height="15" fill="rgb(227,131,7)" fg:x="1216" fg:w="1"/><text x="97.8423%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="97.5923%" y="229" width="0.0803%" height="15" fill="rgb(216,72,36)" fg:x="1216" fg:w="1"/><text x="97.8423%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="97.6726%" y="245" width="0.0803%" height="15" fill="rgb(243,158,40)" fg:x="1217" fg:w="1"/><text x="97.9226%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.6726%" y="229" width="0.0803%" height="15" fill="rgb(218,60,54)" fg:x="1217" fg:w="1"/><text x="97.9226%" y="239.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="97.6726%" y="213" width="0.0803%" height="15" fill="rgb(230,15,46)" fg:x="1217" fg:w="1"/><text x="97.9226%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (73 samples, 5.86%)</title><rect x="91.9743%" y="421" width="5.8587%" height="15" fill="rgb(250,22,26)" fg:x="1146" fg:w="73"/><text x="92.2243%" y="431.50">&lt;&amp;kerne..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (65 samples, 5.22%)</title><rect x="92.6164%" y="405" width="5.2167%" height="15" fill="rgb(239,194,40)" fg:x="1154" fg:w="65"/><text x="92.8664%" y="415.50">plugin..</text></g><g><title>indefinite::indefinite (65 samples, 5.22%)</title><rect x="92.6164%" y="389" width="5.2167%" height="15" fill="rgb(219,62,9)" fg:x="1154" fg:w="65"/><text x="92.8664%" y="399.50">indefi..</text></g><g><title>indefinite::methods::indefinite (65 samples, 5.22%)</title><rect x="92.6164%" y="373" width="5.2167%" height="15" fill="rgb(228,45,21)" fg:x="1154" fg:w="65"/><text x="92.8664%" y="383.50">indefi..</text></g><g><title>indefinite::methods::apply_rules (64 samples, 5.14%)</title><rect x="92.6966%" y="357" width="5.1364%" height="15" fill="rgb(242,56,44)" fg:x="1155" fg:w="64"/><text x="92.9466%" y="367.50">indefi..</text></g><g><title>indefinite::rules::number::Number::check (43 samples, 3.45%)</title><rect x="94.3820%" y="341" width="3.4510%" height="15" fill="rgb(239,170,14)" fg:x="1176" fg:w="43"/><text x="94.6320%" y="351.50">ind..</text></g><g><title>regex::regex::string::Regex::new (40 samples, 3.21%)</title><rect x="94.6228%" y="325" width="3.2103%" height="15" fill="rgb(236,150,13)" fg:x="1179" fg:w="40"/><text x="94.8728%" y="335.50">reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (40 samples, 3.21%)</title><rect x="94.6228%" y="309" width="3.2103%" height="15" fill="rgb(228,15,30)" fg:x="1179" fg:w="40"/><text x="94.8728%" y="319.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (40 samples, 3.21%)</title><rect x="94.6228%" y="293" width="3.2103%" height="15" fill="rgb(217,43,28)" fg:x="1179" fg:w="40"/><text x="94.8728%" y="303.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="97.6726%" y="277" width="0.1605%" height="15" fill="rgb(246,223,1)" fg:x="1217" fg:w="2"/><text x="97.9226%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.6726%" y="261" width="0.1605%" height="15" fill="rgb(247,103,7)" fg:x="1217" fg:w="2"/><text x="97.9226%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.7528%" y="245" width="0.0803%" height="15" fill="rgb(205,105,39)" fg:x="1218" fg:w="1"/><text x="98.0028%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.8331%" y="309" width="0.0803%" height="15" fill="rgb(216,134,18)" fg:x="1219" fg:w="1"/><text x="98.0831%" y="319.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (2 samples, 0.16%)</title><rect x="97.8331%" y="389" width="0.1605%" height="15" fill="rgb(226,139,50)" fg:x="1219" fg:w="2"/><text x="98.0831%" y="399.50"></text></g><g><title>plugins_core::tools::contained_by (2 samples, 0.16%)</title><rect x="97.8331%" y="373" width="0.1605%" height="15" fill="rgb(251,152,38)" fg:x="1219" fg:w="2"/><text x="98.0831%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.8331%" y="357" width="0.1605%" height="15" fill="rgb(222,63,15)" fg:x="1219" fg:w="2"/><text x="98.0831%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.8331%" y="341" width="0.1605%" height="15" fill="rgb(212,198,28)" fg:x="1219" fg:w="2"/><text x="98.0831%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.8331%" y="325" width="0.1605%" height="15" fill="rgb(216,93,38)" fg:x="1219" fg:w="2"/><text x="98.0831%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.9133%" y="309" width="0.0803%" height="15" fill="rgb(247,202,44)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.9133%" y="293" width="0.0803%" height="15" fill="rgb(237,204,46)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (3 samples, 0.24%)</title><rect x="97.8331%" y="421" width="0.2408%" height="15" fill="rgb(224,98,48)" fg:x="1219" fg:w="3"/><text x="98.0831%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (3 samples, 0.24%)</title><rect x="97.8331%" y="405" width="0.2408%" height="15" fill="rgb(247,105,21)" fg:x="1219" fg:w="3"/><text x="98.0831%" y="415.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="97.9936%" y="389" width="0.0803%" height="15" fill="rgb(212,137,52)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="399.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="97.9936%" y="373" width="0.0803%" height="15" fill="rgb(223,76,33)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="97.9936%" y="357" width="0.0803%" height="15" fill="rgb(209,156,27)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.9936%" y="341" width="0.0803%" height="15" fill="rgb(249,81,54)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9936%" y="325" width="0.0803%" height="15" fill="rgb(241,46,29)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9936%" y="309" width="0.0803%" height="15" fill="rgb(213,193,39)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="319.50"></text></g><g><title>plugins_core::library::actions::reply_ok (1 samples, 0.08%)</title><rect x="98.0738%" y="421" width="0.0803%" height="15" fill="rgb(214,85,16)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (1 samples, 0.08%)</title><rect x="98.0738%" y="405" width="0.0803%" height="15" fill="rgb(216,184,17)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="98.0738%" y="389" width="0.0803%" height="15" fill="rgb(254,219,29)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="399.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="98.1541%" y="405" width="0.0803%" height="15" fill="rgb(209,148,34)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1541%" y="389" width="0.0803%" height="15" fill="rgb(253,215,11)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1541%" y="373" width="0.0803%" height="15" fill="rgb(232,126,20)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1541%" y="357" width="0.0803%" height="15" fill="rgb(248,118,51)" fg:x="1223" fg:w="1"/><text x="98.4041%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="98.2343%" y="389" width="0.0803%" height="15" fill="rgb(226,121,21)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="98.2343%" y="373" width="0.0803%" height="15" fill="rgb(216,128,16)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.2343%" y="357" width="0.0803%" height="15" fill="rgb(205,17,9)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.2343%" y="341" width="0.0803%" height="15" fill="rgb(206,197,21)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="98.2343%" y="325" width="0.0803%" height="15" fill="rgb(212,202,9)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.2343%" y="309" width="0.0803%" height="15" fill="rgb(241,131,50)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.2343%" y="293" width="0.0803%" height="15" fill="rgb(228,115,51)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="303.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="98.2343%" y="405" width="0.1605%" height="15" fill="rgb(237,209,8)" fg:x="1224" fg:w="2"/><text x="98.4843%" y="415.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="98.3146%" y="389" width="0.0803%" height="15" fill="rgb(241,121,28)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.3146%" y="373" width="0.0803%" height="15" fill="rgb(238,194,51)" fg:x="1225" fg:w="1"/><text x="98.5646%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.3949%" y="389" width="0.0803%" height="15" fill="rgb(208,41,39)" fg:x="1226" fg:w="1"/><text x="98.6449%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3949%" y="373" width="0.0803%" height="15" fill="rgb(223,95,44)" fg:x="1226" fg:w="1"/><text x="98.6449%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3949%" y="357" width="0.0803%" height="15" fill="rgb(253,98,40)" fg:x="1226" fg:w="1"/><text x="98.6449%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3949%" y="341" width="0.0803%" height="15" fill="rgb(210,5,12)" fg:x="1226" fg:w="1"/><text x="98.6449%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3949%" y="325" width="0.0803%" height="15" fill="rgb(233,201,23)" fg:x="1226" fg:w="1"/><text x="98.6449%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3949%" y="309" width="0.0803%" height="15" fill="rgb(251,68,15)" fg:x="1226" fg:w="1"/><text x="98.6449%" y="319.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="98.3949%" y="405" width="0.1605%" height="15" fill="rgb(243,10,46)" fg:x="1226" fg:w="2"/><text x="98.6449%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="98.4751%" y="389" width="0.0803%" height="15" fill="rgb(253,130,44)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="98.4751%" y="373" width="0.0803%" height="15" fill="rgb(244,5,26)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="98.4751%" y="357" width="0.0803%" height="15" fill="rgb(220,126,20)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.4751%" y="341" width="0.0803%" height="15" fill="rgb(212,188,29)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.4751%" y="325" width="0.0803%" height="15" fill="rgb(227,194,48)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="335.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="98.5554%" y="405" width="0.0803%" height="15" fill="rgb(245,64,28)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.5554%" y="389" width="0.0803%" height="15" fill="rgb(205,44,7)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="399.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (177 samples, 14.21%)</title><rect x="84.5104%" y="565" width="14.2055%" height="15" fill="rgb(213,193,11)" fg:x="1053" fg:w="177"/><text x="84.7604%" y="575.50">kernel::plugins::mw::M..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (177 samples, 14.21%)</title><rect x="84.5104%" y="549" width="14.2055%" height="15" fill="rgb(238,157,6)" fg:x="1053" fg:w="177"/><text x="84.7604%" y="559.50">&lt;plugins_dynlib::Dynam..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (177 samples, 14.21%)</title><rect x="84.5104%" y="533" width="14.2055%" height="15" fill="rgb(222,73,7)" fg:x="1053" fg:w="177"/><text x="84.7604%" y="543.50">kernel::plugins::mw::M..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (177 samples, 14.21%)</title><rect x="84.5104%" y="517" width="14.2055%" height="15" fill="rgb(224,78,15)" fg:x="1053" fg:w="177"/><text x="84.7604%" y="527.50">core::ops::function::F..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (177 samples, 14.21%)</title><rect x="84.5104%" y="501" width="14.2055%" height="15" fill="rgb(218,149,46)" fg:x="1053" fg:w="177"/><text x="84.7604%" y="511.50">kernel::plugins::mw::M..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (177 samples, 14.21%)</title><rect x="84.5104%" y="485" width="14.2055%" height="15" fill="rgb(218,175,44)" fg:x="1053" fg:w="177"/><text x="84.7604%" y="495.50">core::ops::function::F..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (177 samples, 14.21%)</title><rect x="84.5104%" y="469" width="14.2055%" height="15" fill="rgb(215,183,45)" fg:x="1053" fg:w="177"/><text x="84.7604%" y="479.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (177 samples, 14.21%)</title><rect x="84.5104%" y="453" width="14.2055%" height="15" fill="rgb(226,116,37)" fg:x="1053" fg:w="177"/><text x="84.7604%" y="463.50">&lt;engine::session::stat..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (84 samples, 6.74%)</title><rect x="91.9743%" y="437" width="6.7416%" height="15" fill="rgb(252,224,12)" fg:x="1146" fg:w="84"/><text x="92.2243%" y="447.50">&lt;plugins_..</text></g><g><title>plugins_core::location::model::change_location (7 samples, 0.56%)</title><rect x="98.1541%" y="421" width="0.5618%" height="15" fill="rgb(232,212,21)" fg:x="1223" fg:w="7"/><text x="98.4041%" y="431.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="98.6356%" y="405" width="0.0803%" height="15" fill="rgb(226,191,16)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="98.6356%" y="389" width="0.0803%" height="15" fill="rgb(231,156,11)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="399.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="98.6356%" y="373" width="0.0803%" height="15" fill="rgb(225,134,49)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.6356%" y="357" width="0.0803%" height="15" fill="rgb(254,55,32)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="367.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="98.6356%" y="341" width="0.0803%" height="15" fill="rgb(242,195,29)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.6356%" y="325" width="0.0803%" height="15" fill="rgb(210,155,20)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.7961%" y="549" width="0.0803%" height="15" fill="rgb(243,170,23)" fg:x="1231" fg:w="1"/><text x="99.0461%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8764%" y="501" width="0.0803%" height="15" fill="rgb(242,197,51)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8764%" y="485" width="0.0803%" height="15" fill="rgb(248,48,13)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8764%" y="469" width="0.0803%" height="15" fill="rgb(221,185,15)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8764%" y="453" width="0.0803%" height="15" fill="rgb(244,49,7)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8764%" y="437" width="0.0803%" height="15" fill="rgb(213,182,52)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.8764%" y="421" width="0.0803%" height="15" fill="rgb(209,15,45)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.8764%" y="405" width="0.0803%" height="15" fill="rgb(233,23,44)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.8764%" y="389" width="0.0803%" height="15" fill="rgb(220,182,30)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.8764%" y="373" width="0.0803%" height="15" fill="rgb(219,116,33)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.8764%" y="357" width="0.0803%" height="15" fill="rgb(231,15,21)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="98.8764%" y="517" width="0.2408%" height="15" fill="rgb(238,119,25)" fg:x="1232" fg:w="3"/><text x="99.1264%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.9567%" y="501" width="0.1605%" height="15" fill="rgb(232,30,39)" fg:x="1233" fg:w="2"/><text x="99.2067%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.9567%" y="485" width="0.1605%" height="15" fill="rgb(241,26,30)" fg:x="1233" fg:w="2"/><text x="99.2067%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.0369%" y="469" width="0.0803%" height="15" fill="rgb(234,154,4)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.0369%" y="453" width="0.0803%" height="15" fill="rgb(229,199,39)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="463.50"></text></g><g><title>engine::session::logs::capture (186 samples, 14.93%)</title><rect x="84.2697%" y="693" width="14.9278%" height="15" fill="rgb(236,213,10)" fg:x="1050" fg:w="186"/><text x="84.5197%" y="703.50">engine::session::logs::..</text></g><g><title>tracing_core::dispatcher::with_default (185 samples, 14.85%)</title><rect x="84.3499%" y="677" width="14.8475%" height="15" fill="rgb(247,28,19)" fg:x="1051" fg:w="185"/><text x="84.5999%" y="687.50">tracing_core::dispatche..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (185 samples, 14.85%)</title><rect x="84.3499%" y="661" width="14.8475%" height="15" fill="rgb(239,199,24)" fg:x="1051" fg:w="185"/><text x="84.5999%" y="671.50">&lt;engine::session::Sessi..</text></g><g><title>kernel::plugins::mw::apply_middleware (185 samples, 14.85%)</title><rect x="84.3499%" y="645" width="14.8475%" height="15" fill="rgb(246,122,13)" fg:x="1051" fg:w="185"/><text x="84.5999%" y="655.50">kernel::plugins::mw::ap..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (185 samples, 14.85%)</title><rect x="84.3499%" y="629" width="14.8475%" height="15" fill="rgb(210,203,29)" fg:x="1051" fg:w="185"/><text x="84.5999%" y="639.50">kernel::plugins::mw::Mi..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (185 samples, 14.85%)</title><rect x="84.3499%" y="613" width="14.8475%" height="15" fill="rgb(218,4,50)" fg:x="1051" fg:w="185"/><text x="84.5999%" y="623.50">&lt;engine::session::Expan..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (183 samples, 14.69%)</title><rect x="84.5104%" y="597" width="14.6870%" height="15" fill="rgb(236,142,48)" fg:x="1053" fg:w="183"/><text x="84.7604%" y="607.50">kernel::plugins::mw::M..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (183 samples, 14.69%)</title><rect x="84.5104%" y="581" width="14.6870%" height="15" fill="rgb(245,173,2)" fg:x="1053" fg:w="183"/><text x="84.7604%" y="591.50">&lt;plugins_rune::RuneMid..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (6 samples, 0.48%)</title><rect x="98.7159%" y="565" width="0.4815%" height="15" fill="rgb(244,196,18)" fg:x="1230" fg:w="6"/><text x="98.9659%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (4 samples, 0.32%)</title><rect x="98.8764%" y="549" width="0.3210%" height="15" fill="rgb(221,27,33)" fg:x="1232" fg:w="4"/><text x="99.1264%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="98.8764%" y="533" width="0.3210%" height="15" fill="rgb(210,206,16)" fg:x="1232" fg:w="4"/><text x="99.1264%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="99.1172%" y="517" width="0.0803%" height="15" fill="rgb(238,161,34)" fg:x="1235" fg:w="1"/><text x="99.3672%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Route&gt; (1 samples, 0.08%)</title><rect x="99.1172%" y="501" width="0.0803%" height="15" fill="rgb(243,118,39)" fg:x="1235" fg:w="1"/><text x="99.3672%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1172%" y="485" width="0.0803%" height="15" fill="rgb(234,126,9)" fg:x="1235" fg:w="1"/><text x="99.3672%" y="495.50"></text></g><g><title>engine::session::Session::captured (190 samples, 15.25%)</title><rect x="84.0289%" y="709" width="15.2488%" height="15" fill="rgb(234,167,42)" fg:x="1047" fg:w="190"/><text x="84.2789%" y="719.50">engine::session::Sessio..</text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="99.1974%" y="693" width="0.0803%" height="15" fill="rgb(238,54,48)" fg:x="1236" fg:w="1"/><text x="99.4474%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="99.2777%" y="693" width="0.0803%" height="15" fill="rgb(226,105,2)" fg:x="1237" fg:w="1"/><text x="99.5277%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2777%" y="677" width="0.0803%" height="15" fill="rgb(223,95,23)" fg:x="1237" fg:w="1"/><text x="99.5277%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2777%" y="661" width="0.0803%" height="15" fill="rgb(249,212,19)" fg:x="1237" fg:w="1"/><text x="99.5277%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.2777%" y="645" width="0.0803%" height="15" fill="rgb(234,158,54)" fg:x="1237" fg:w="1"/><text x="99.5277%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.2777%" y="629" width="0.0803%" height="15" fill="rgb(247,114,32)" fg:x="1237" fg:w="1"/><text x="99.5277%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.2777%" y="613" width="0.0803%" height="15" fill="rgb(250,68,44)" fg:x="1237" fg:w="1"/><text x="99.5277%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="99.2777%" y="597" width="0.0803%" height="15" fill="rgb(242,3,15)" fg:x="1237" fg:w="1"/><text x="99.5277%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.2777%" y="581" width="0.0803%" height="15" fill="rgb(223,110,32)" fg:x="1237" fg:w="1"/><text x="99.5277%" y="591.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="99.2777%" y="709" width="0.1605%" height="15" fill="rgb(216,26,54)" fg:x="1237" fg:w="2"/><text x="99.5277%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.3579%" y="693" width="0.0803%" height="15" fill="rgb(209,145,42)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="703.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.3579%" y="677" width="0.0803%" height="15" fill="rgb(240,111,53)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3579%" y="661" width="0.0803%" height="15" fill="rgb(209,101,4)" fg:x="1238" fg:w="1"/><text x="99.6079%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5185%" y="661" width="0.0803%" height="15" fill="rgb(231,74,29)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5185%" y="645" width="0.0803%" height="15" fill="rgb(223,12,12)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5185%" y="629" width="0.0803%" height="15" fill="rgb(207,162,2)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5185%" y="613" width="0.0803%" height="15" fill="rgb(230,152,0)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5185%" y="597" width="0.0803%" height="15" fill="rgb(254,156,19)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5185%" y="581" width="0.0803%" height="15" fill="rgb(250,28,0)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5185%" y="565" width="0.0803%" height="15" fill="rgb(253,27,5)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.5185%" y="549" width="0.0803%" height="15" fill="rgb(244,154,7)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.5185%" y="533" width="0.0803%" height="15" fill="rgb(242,108,21)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.5185%" y="517" width="0.0803%" height="15" fill="rgb(254,200,38)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="99.5185%" y="501" width="0.0803%" height="15" fill="rgb(250,145,41)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.5185%" y="485" width="0.0803%" height="15" fill="rgb(235,136,31)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.5987%" y="661" width="0.0803%" height="15" fill="rgb(215,13,18)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5987%" y="645" width="0.0803%" height="15" fill="rgb(238,199,12)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5987%" y="629" width="0.0803%" height="15" fill="rgb(242,179,49)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5987%" y="613" width="0.0803%" height="15" fill="rgb(214,10,44)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.6790%" y="661" width="0.0803%" height="15" fill="rgb(229,181,11)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6790%" y="645" width="0.0803%" height="15" fill="rgb(244,155,10)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6790%" y="629" width="0.0803%" height="15" fill="rgb(254,13,48)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6790%" y="613" width="0.0803%" height="15" fill="rgb(210,164,6)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6790%" y="597" width="0.0803%" height="15" fill="rgb(216,187,40)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6790%" y="581" width="0.0803%" height="15" fill="rgb(208,143,21)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="591.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (288 samples, 23.11%)</title><rect x="76.8058%" y="789" width="23.1140%" height="15" fill="rgb(211,73,41)" fg:x="957" fg:w="288"/><text x="77.0558%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; ..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (288 samples, 23.11%)</title><rect x="76.8058%" y="773" width="23.1140%" height="15" fill="rgb(244,69,21)" fg:x="957" fg:w="288"/><text x="77.0558%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (288 samples, 23.11%)</title><rect x="76.8058%" y="757" width="23.1140%" height="15" fill="rgb(230,152,32)" fg:x="957" fg:w="288"/><text x="77.0558%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (201 samples, 16.13%)</title><rect x="83.7881%" y="741" width="16.1316%" height="15" fill="rgb(208,110,18)" fg:x="1044" fg:w="201"/><text x="84.0381%" y="751.50">engine::session::Session:..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (201 samples, 16.13%)</title><rect x="83.7881%" y="725" width="16.1316%" height="15" fill="rgb(214,201,49)" fg:x="1044" fg:w="201"/><text x="84.0381%" y="735.50">engine::session::Session:..</text></g><g><title>kernel::model::EntityPtrResolver::world (6 samples, 0.48%)</title><rect x="99.4382%" y="709" width="0.4815%" height="15" fill="rgb(253,153,27)" fg:x="1239" fg:w="6"/><text x="99.6882%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="99.4382%" y="693" width="0.4815%" height="15" fill="rgb(238,61,11)" fg:x="1239" fg:w="6"/><text x="99.6882%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="99.4382%" y="677" width="0.4815%" height="15" fill="rgb(227,84,2)" fg:x="1239" fg:w="6"/><text x="99.6882%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.7592%" y="661" width="0.1605%" height="15" fill="rgb(233,52,8)" fg:x="1243" fg:w="2"/><text x="100.0092%" y="671.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.7592%" y="645" width="0.1605%" height="15" fill="rgb(209,136,13)" fg:x="1243" fg:w="2"/><text x="100.0092%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.7592%" y="629" width="0.1605%" height="15" fill="rgb(229,86,25)" fg:x="1243" fg:w="2"/><text x="100.0092%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.7592%" y="613" width="0.1605%" height="15" fill="rgb(235,47,16)" fg:x="1243" fg:w="2"/><text x="100.0092%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.7592%" y="597" width="0.1605%" height="15" fill="rgb(231,186,4)" fg:x="1243" fg:w="2"/><text x="100.0092%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8395%" y="581" width="0.0803%" height="15" fill="rgb(209,213,23)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="591.50"></text></g><g><title>all (1,246 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(212,142,47)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-40661428 (1,246 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(251,86,24)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1087.50">simple-40661428</text></g><g><title>_start (1,246 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(206,217,17)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,246 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(248,92,38)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,246 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(214,25,29)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,246 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(245,117,13)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,246 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(205,169,9)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,246 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(223,134,38)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,246 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(249,129,49)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,246 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(229,157,45)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,246 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(232,159,11)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,246 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(230,134,26)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,246 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(234,149,40)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,246 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(221,122,15)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,246 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(228,127,0)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,246 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(248,37,7)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,246 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(215,140,49)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,246 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(236,65,39)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,246 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(253,102,38)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;pprof::criterion::PProfProfiler as criterion::profiler::Profiler&gt;::stop_profiling (1 samples, 0.08%)</title><rect x="99.9197%" y="789" width="0.0803%" height="15" fill="rgb(244,100,34)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="799.50"></text></g><g><title>std::fs::DirBuilder::create_dir_all (1 samples, 0.08%)</title><rect x="99.9197%" y="773" width="0.0803%" height="15" fill="rgb(210,179,47)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="783.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir (1 samples, 0.08%)</title><rect x="99.9197%" y="757" width="0.0803%" height="15" fill="rgb(231,41,37)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="767.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="99.9197%" y="741" width="0.0803%" height="15" fill="rgb(226,209,17)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="751.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="99.9197%" y="725" width="0.0803%" height="15" fill="rgb(231,154,20)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="735.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir::{{closure}} (1 samples, 0.08%)</title><rect x="99.9197%" y="709" width="0.0803%" height="15" fill="rgb(216,134,24)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="719.50"></text></g><g><title>mkdir (1 samples, 0.08%)</title><rect x="99.9197%" y="693" width="0.0803%" height="15" fill="rgb(224,71,42)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="703.50"></text></g></svg></svg>