<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1158" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1141.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1141.00"> </text><svg id="frames" x="10" width="1180" total_samples="1239"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="0.0807%" y="741" width="0.2421%" height="15" fill="rgb(207,35,15)" fg:x="1" fg:w="3"/><text x="0.3307%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0807%" y="725" width="0.2421%" height="15" fill="rgb(238,68,36)" fg:x="1" fg:w="3"/><text x="0.3307%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.1614%" y="709" width="0.1614%" height="15" fill="rgb(205,158,20)" fg:x="2" fg:w="2"/><text x="0.4114%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="0.2421%" y="693" width="0.0807%" height="15" fill="rgb(232,32,22)" fg:x="3" fg:w="1"/><text x="0.4921%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2421%" y="677" width="0.0807%" height="15" fill="rgb(210,169,6)" fg:x="3" fg:w="1"/><text x="0.4921%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4843%" y="629" width="0.0807%" height="15" fill="rgb(229,28,12)" fg:x="6" fg:w="1"/><text x="0.7343%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.5650%" y="629" width="0.0807%" height="15" fill="rgb(229,78,10)" fg:x="7" fg:w="1"/><text x="0.8150%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.7264%" y="613" width="0.1614%" height="15" fill="rgb(223,139,54)" fg:x="9" fg:w="2"/><text x="0.9764%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.4843%" y="677" width="0.5650%" height="15" fill="rgb(207,110,4)" fg:x="6" fg:w="7"/><text x="0.7343%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (7 samples, 0.56%)</title><rect x="0.4843%" y="661" width="0.5650%" height="15" fill="rgb(248,30,41)" fg:x="6" fg:w="7"/><text x="0.7343%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="0.4843%" y="645" width="0.5650%" height="15" fill="rgb(235,54,25)" fg:x="6" fg:w="7"/><text x="0.7343%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.6457%" y="629" width="0.4036%" height="15" fill="rgb(213,107,41)" fg:x="8" fg:w="5"/><text x="0.8957%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.8878%" y="613" width="0.1614%" height="15" fill="rgb(237,102,9)" fg:x="11" fg:w="2"/><text x="1.1378%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9685%" y="597" width="0.0807%" height="15" fill="rgb(252,137,49)" fg:x="12" fg:w="1"/><text x="1.2185%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0492%" y="677" width="0.0807%" height="15" fill="rgb(233,202,33)" fg:x="13" fg:w="1"/><text x="1.2992%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1299%" y="661" width="0.0807%" height="15" fill="rgb(223,14,51)" fg:x="14" fg:w="1"/><text x="1.3799%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2107%" y="661" width="0.0807%" height="15" fill="rgb(248,70,23)" fg:x="15" fg:w="1"/><text x="1.4607%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2107%" y="645" width="0.0807%" height="15" fill="rgb(209,207,47)" fg:x="15" fg:w="1"/><text x="1.4607%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2914%" y="645" width="0.0807%" height="15" fill="rgb(245,124,2)" fg:x="16" fg:w="1"/><text x="1.5414%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2914%" y="629" width="0.0807%" height="15" fill="rgb(249,208,11)" fg:x="16" fg:w="1"/><text x="1.5414%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.3721%" y="613" width="0.0807%" height="15" fill="rgb(247,112,7)" fg:x="17" fg:w="1"/><text x="1.6221%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4528%" y="597" width="0.0807%" height="15" fill="rgb(209,192,31)" fg:x="18" fg:w="1"/><text x="1.7028%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.21%)</title><rect x="0.4036%" y="693" width="1.2107%" height="15" fill="rgb(236,55,19)" fg:x="5" fg:w="15"/><text x="0.6536%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="1.1299%" y="677" width="0.4843%" height="15" fill="rgb(252,89,41)" fg:x="14" fg:w="6"/><text x="1.3799%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.2914%" y="661" width="0.3228%" height="15" fill="rgb(220,172,14)" fg:x="16" fg:w="4"/><text x="1.5414%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.3721%" y="645" width="0.2421%" height="15" fill="rgb(252,65,2)" fg:x="17" fg:w="3"/><text x="1.6221%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.3721%" y="629" width="0.2421%" height="15" fill="rgb(250,20,8)" fg:x="17" fg:w="3"/><text x="1.6221%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.4528%" y="613" width="0.1614%" height="15" fill="rgb(234,149,13)" fg:x="18" fg:w="2"/><text x="1.7028%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.5335%" y="597" width="0.0807%" height="15" fill="rgb(223,219,12)" fg:x="19" fg:w="1"/><text x="1.7835%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5335%" y="581" width="0.0807%" height="15" fill="rgb(234,13,49)" fg:x="19" fg:w="1"/><text x="1.7835%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (17 samples, 1.37%)</title><rect x="0.3228%" y="741" width="1.3721%" height="15" fill="rgb(214,41,25)" fg:x="4" fg:w="17"/><text x="0.5728%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.29%)</title><rect x="0.4036%" y="725" width="1.2914%" height="15" fill="rgb(232,198,52)" fg:x="5" fg:w="16"/><text x="0.6536%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (16 samples, 1.29%)</title><rect x="0.4036%" y="709" width="1.2914%" height="15" fill="rgb(236,111,46)" fg:x="5" fg:w="16"/><text x="0.6536%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6142%" y="693" width="0.0807%" height="15" fill="rgb(253,30,20)" fg:x="20" fg:w="1"/><text x="1.8642%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.69%)</title><rect x="0.0807%" y="757" width="1.6949%" height="15" fill="rgb(247,141,17)" fg:x="1" fg:w="21"/><text x="0.3307%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="1.6949%" y="741" width="0.0807%" height="15" fill="rgb(214,195,21)" fg:x="21" fg:w="1"/><text x="1.9449%" y="751.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="1.8563%" y="709" width="0.0807%" height="15" fill="rgb(214,98,12)" fg:x="23" fg:w="1"/><text x="2.1063%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.8563%" y="693" width="0.0807%" height="15" fill="rgb(239,4,26)" fg:x="23" fg:w="1"/><text x="2.1063%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.9370%" y="693" width="0.0807%" height="15" fill="rgb(234,210,35)" fg:x="24" fg:w="1"/><text x="2.1870%" y="703.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="2.0178%" y="677" width="0.0807%" height="15" fill="rgb(252,178,27)" fg:x="25" fg:w="1"/><text x="2.2678%" y="687.50"></text></g><g><title>std::ffi::os_str::&lt;impl core::convert::TryFrom&lt;&amp;std::ffi::os_str::OsStr&gt; for &amp;str&gt;::try_from (1 samples, 0.08%)</title><rect x="2.0178%" y="661" width="0.0807%" height="15" fill="rgb(217,50,1)" fg:x="25" fg:w="1"/><text x="2.2678%" y="671.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_str (1 samples, 0.08%)</title><rect x="2.0178%" y="645" width="0.0807%" height="15" fill="rgb(233,137,5)" fg:x="25" fg:w="1"/><text x="2.2678%" y="655.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.08%)</title><rect x="2.0178%" y="629" width="0.0807%" height="15" fill="rgb(217,227,25)" fg:x="25" fg:w="1"/><text x="2.2678%" y="639.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.08%)</title><rect x="2.0178%" y="613" width="0.0807%" height="15" fill="rgb(242,89,38)" fg:x="25" fg:w="1"/><text x="2.2678%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.0985%" y="629" width="0.0807%" height="15" fill="rgb(212,190,30)" fg:x="26" fg:w="1"/><text x="2.3485%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.0985%" y="613" width="0.0807%" height="15" fill="rgb(222,120,8)" fg:x="26" fg:w="1"/><text x="2.3485%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.0985%" y="597" width="0.0807%" height="15" fill="rgb(227,181,9)" fg:x="26" fg:w="1"/><text x="2.3485%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.0985%" y="581" width="0.0807%" height="15" fill="rgb(222,125,29)" fg:x="26" fg:w="1"/><text x="2.3485%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.0985%" y="565" width="0.0807%" height="15" fill="rgb(215,153,31)" fg:x="26" fg:w="1"/><text x="2.3485%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.0985%" y="549" width="0.0807%" height="15" fill="rgb(228,77,30)" fg:x="26" fg:w="1"/><text x="2.3485%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.0985%" y="533" width="0.0807%" height="15" fill="rgb(226,110,9)" fg:x="26" fg:w="1"/><text x="2.3485%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.0985%" y="517" width="0.0807%" height="15" fill="rgb(219,111,7)" fg:x="26" fg:w="1"/><text x="2.3485%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.0985%" y="501" width="0.0807%" height="15" fill="rgb(229,167,25)" fg:x="26" fg:w="1"/><text x="2.3485%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.0985%" y="485" width="0.0807%" height="15" fill="rgb(209,77,43)" fg:x="26" fg:w="1"/><text x="2.3485%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.0985%" y="469" width="0.0807%" height="15" fill="rgb(233,70,39)" fg:x="26" fg:w="1"/><text x="2.3485%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.0985%" y="453" width="0.0807%" height="15" fill="rgb(207,171,44)" fg:x="26" fg:w="1"/><text x="2.3485%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="2.1792%" y="613" width="0.1614%" height="15" fill="rgb(244,91,6)" fg:x="27" fg:w="2"/><text x="2.4292%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="2.1792%" y="597" width="0.1614%" height="15" fill="rgb(234,136,12)" fg:x="27" fg:w="2"/><text x="2.4292%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="2.1792%" y="581" width="0.1614%" height="15" fill="rgb(216,210,38)" fg:x="27" fg:w="2"/><text x="2.4292%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="2.1792%" y="565" width="0.1614%" height="15" fill="rgb(241,227,7)" fg:x="27" fg:w="2"/><text x="2.4292%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="2.1792%" y="549" width="0.1614%" height="15" fill="rgb(241,222,11)" fg:x="27" fg:w="2"/><text x="2.4292%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="2.1792%" y="533" width="0.1614%" height="15" fill="rgb(246,86,18)" fg:x="27" fg:w="2"/><text x="2.4292%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="2.1792%" y="517" width="0.1614%" height="15" fill="rgb(224,151,49)" fg:x="27" fg:w="2"/><text x="2.4292%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="2.1792%" y="501" width="0.1614%" height="15" fill="rgb(235,4,41)" fg:x="27" fg:w="2"/><text x="2.4292%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="2.1792%" y="485" width="0.1614%" height="15" fill="rgb(218,30,52)" fg:x="27" fg:w="2"/><text x="2.4292%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="2.1792%" y="469" width="0.1614%" height="15" fill="rgb(205,124,51)" fg:x="27" fg:w="2"/><text x="2.4292%" y="479.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="2.1792%" y="453" width="0.1614%" height="15" fill="rgb(237,126,51)" fg:x="27" fg:w="2"/><text x="2.4292%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="2.1792%" y="437" width="0.1614%" height="15" fill="rgb(225,32,46)" fg:x="27" fg:w="2"/><text x="2.4292%" y="447.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (4 samples, 0.32%)</title><rect x="2.0985%" y="661" width="0.3228%" height="15" fill="rgb(251,60,49)" fg:x="26" fg:w="4"/><text x="2.3485%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="2.0985%" y="645" width="0.3228%" height="15" fill="rgb(234,18,23)" fg:x="26" fg:w="4"/><text x="2.3485%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="2.1792%" y="629" width="0.2421%" height="15" fill="rgb(234,25,23)" fg:x="27" fg:w="3"/><text x="2.4292%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.3406%" y="613" width="0.0807%" height="15" fill="rgb(210,43,52)" fg:x="29" fg:w="1"/><text x="2.5906%" y="623.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="2.4213%" y="645" width="0.4843%" height="15" fill="rgb(237,198,21)" fg:x="30" fg:w="6"/><text x="2.6713%" y="655.50"></text></g><g><title>glob::fill_todo (6 samples, 0.48%)</title><rect x="2.4213%" y="629" width="0.4843%" height="15" fill="rgb(211,20,34)" fg:x="30" fg:w="6"/><text x="2.6713%" y="639.50"></text></g><g><title>glob::is_dir (6 samples, 0.48%)</title><rect x="2.4213%" y="613" width="0.4843%" height="15" fill="rgb(221,155,50)" fg:x="30" fg:w="6"/><text x="2.6713%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (6 samples, 0.48%)</title><rect x="2.4213%" y="597" width="0.4843%" height="15" fill="rgb(213,214,53)" fg:x="30" fg:w="6"/><text x="2.6713%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (6 samples, 0.48%)</title><rect x="2.4213%" y="581" width="0.4843%" height="15" fill="rgb(215,229,48)" fg:x="30" fg:w="6"/><text x="2.6713%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (6 samples, 0.48%)</title><rect x="2.4213%" y="565" width="0.4843%" height="15" fill="rgb(243,88,5)" fg:x="30" fg:w="6"/><text x="2.6713%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (6 samples, 0.48%)</title><rect x="2.4213%" y="549" width="0.4843%" height="15" fill="rgb(216,199,8)" fg:x="30" fg:w="6"/><text x="2.6713%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (6 samples, 0.48%)</title><rect x="2.4213%" y="533" width="0.4843%" height="15" fill="rgb(241,22,4)" fg:x="30" fg:w="6"/><text x="2.6713%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (6 samples, 0.48%)</title><rect x="2.4213%" y="517" width="0.4843%" height="15" fill="rgb(209,190,22)" fg:x="30" fg:w="6"/><text x="2.6713%" y="527.50"></text></g><g><title>statx (6 samples, 0.48%)</title><rect x="2.4213%" y="501" width="0.4843%" height="15" fill="rgb(251,138,45)" fg:x="30" fg:w="6"/><text x="2.6713%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;glob::Paths&gt; (1 samples, 0.08%)</title><rect x="2.9056%" y="645" width="0.0807%" height="15" fill="rgb(219,111,22)" fg:x="36" fg:w="1"/><text x="3.1556%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.0670%" y="613" width="0.0807%" height="15" fill="rgb(253,29,49)" fg:x="38" fg:w="1"/><text x="3.3170%" y="623.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (14 samples, 1.13%)</title><rect x="2.0985%" y="677" width="1.1299%" height="15" fill="rgb(238,129,49)" fg:x="26" fg:w="14"/><text x="2.3485%" y="687.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (10 samples, 0.81%)</title><rect x="2.4213%" y="661" width="0.8071%" height="15" fill="rgb(240,26,41)" fg:x="30" fg:w="10"/><text x="2.6713%" y="671.50"></text></g><g><title>glob::glob (3 samples, 0.24%)</title><rect x="2.9863%" y="645" width="0.2421%" height="15" fill="rgb(221,47,33)" fg:x="37" fg:w="3"/><text x="3.2363%" y="655.50"></text></g><g><title>glob::glob_with (3 samples, 0.24%)</title><rect x="2.9863%" y="629" width="0.2421%" height="15" fill="rgb(216,200,17)" fg:x="37" fg:w="3"/><text x="3.2363%" y="639.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="3.1477%" y="613" width="0.0807%" height="15" fill="rgb(230,151,26)" fg:x="39" fg:w="1"/><text x="3.3977%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.1477%" y="597" width="0.0807%" height="15" fill="rgb(242,182,16)" fg:x="39" fg:w="1"/><text x="3.3977%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::new (2 samples, 0.16%)</title><rect x="3.3091%" y="613" width="0.1614%" height="15" fill="rgb(236,35,53)" fg:x="41" fg:w="2"/><text x="3.5591%" y="623.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="3.3091%" y="597" width="0.1614%" height="15" fill="rgb(214,180,28)" fg:x="41" fg:w="2"/><text x="3.5591%" y="607.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="3.3091%" y="645" width="0.3228%" height="15" fill="rgb(208,173,36)" fg:x="41" fg:w="4"/><text x="3.5591%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="3.3091%" y="629" width="0.3228%" height="15" fill="rgb(218,39,15)" fg:x="41" fg:w="4"/><text x="3.5591%" y="639.50"></text></g><g><title>replies::identifier_to_key (2 samples, 0.16%)</title><rect x="3.4705%" y="613" width="0.1614%" height="15" fill="rgb(213,145,15)" fg:x="43" fg:w="2"/><text x="3.7205%" y="623.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.7127%" y="613" width="0.0807%" height="15" fill="rgb(242,110,37)" fg:x="46" fg:w="1"/><text x="3.9627%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.7127%" y="597" width="0.0807%" height="15" fill="rgb(247,146,22)" fg:x="46" fg:w="1"/><text x="3.9627%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7127%" y="581" width="0.0807%" height="15" fill="rgb(215,191,7)" fg:x="46" fg:w="1"/><text x="3.9627%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="3.7934%" y="613" width="0.0807%" height="15" fill="rgb(240,158,1)" fg:x="47" fg:w="1"/><text x="4.0434%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7934%" y="597" width="0.0807%" height="15" fill="rgb(241,78,32)" fg:x="47" fg:w="1"/><text x="4.0434%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="3.6320%" y="645" width="0.3228%" height="15" fill="rgb(248,83,10)" fg:x="45" fg:w="4"/><text x="3.8820%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="3.6320%" y="629" width="0.3228%" height="15" fill="rgb(241,52,0)" fg:x="45" fg:w="4"/><text x="3.8820%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.8741%" y="613" width="0.0807%" height="15" fill="rgb(238,37,13)" fg:x="48" fg:w="1"/><text x="4.1241%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.8741%" y="597" width="0.0807%" height="15" fill="rgb(242,194,17)" fg:x="48" fg:w="1"/><text x="4.1241%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.8741%" y="581" width="0.0807%" height="15" fill="rgb(236,96,3)" fg:x="48" fg:w="1"/><text x="4.1241%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.8741%" y="565" width="0.0807%" height="15" fill="rgb(235,148,34)" fg:x="48" fg:w="1"/><text x="4.1241%" y="575.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.9548%" y="645" width="0.0807%" height="15" fill="rgb(254,12,11)" fg:x="49" fg:w="1"/><text x="4.2048%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.9548%" y="629" width="0.0807%" height="15" fill="rgb(207,31,54)" fg:x="49" fg:w="1"/><text x="4.2048%" y="639.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.9548%" y="613" width="0.0807%" height="15" fill="rgb(252,14,28)" fg:x="49" fg:w="1"/><text x="4.2048%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.9548%" y="597" width="0.0807%" height="15" fill="rgb(252,108,36)" fg:x="49" fg:w="1"/><text x="4.2048%" y="607.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.0355%" y="645" width="0.0807%" height="15" fill="rgb(214,149,7)" fg:x="50" fg:w="1"/><text x="4.2855%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.0355%" y="629" width="0.0807%" height="15" fill="rgb(243,94,12)" fg:x="50" fg:w="1"/><text x="4.2855%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.1162%" y="613" width="0.0807%" height="15" fill="rgb(208,36,10)" fg:x="51" fg:w="1"/><text x="4.3662%" y="623.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="4.1162%" y="645" width="0.1614%" height="15" fill="rgb(233,185,52)" fg:x="51" fg:w="2"/><text x="4.3662%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="4.1162%" y="629" width="0.1614%" height="15" fill="rgb(234,50,45)" fg:x="51" fg:w="2"/><text x="4.3662%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="4.1969%" y="613" width="0.0807%" height="15" fill="rgb(228,92,54)" fg:x="52" fg:w="1"/><text x="4.4469%" y="623.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.2776%" y="645" width="0.0807%" height="15" fill="rgb(224,85,25)" fg:x="53" fg:w="1"/><text x="4.5276%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.2776%" y="629" width="0.0807%" height="15" fill="rgb(246,1,45)" fg:x="53" fg:w="1"/><text x="4.5276%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.2776%" y="613" width="0.0807%" height="15" fill="rgb(240,66,23)" fg:x="53" fg:w="1"/><text x="4.5276%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (15 samples, 1.21%)</title><rect x="3.2284%" y="677" width="1.2107%" height="15" fill="rgb(222,96,27)" fg:x="40" fg:w="15"/><text x="3.4784%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 1.21%)</title><rect x="3.2284%" y="661" width="1.2107%" height="15" fill="rgb(212,136,10)" fg:x="40" fg:w="15"/><text x="3.4784%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.3584%" y="645" width="0.0807%" height="15" fill="rgb(226,192,50)" fg:x="54" fg:w="1"/><text x="4.6084%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.3584%" y="629" width="0.0807%" height="15" fill="rgb(241,182,31)" fg:x="54" fg:w="1"/><text x="4.6084%" y="639.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.3584%" y="613" width="0.0807%" height="15" fill="rgb(219,205,47)" fg:x="54" fg:w="1"/><text x="4.6084%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.3584%" y="597" width="0.0807%" height="15" fill="rgb(207,96,14)" fg:x="54" fg:w="1"/><text x="4.6084%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (32 samples, 2.58%)</title><rect x="2.0178%" y="693" width="2.5827%" height="15" fill="rgb(216,119,9)" fg:x="25" fg:w="32"/><text x="2.2678%" y="703.50">ke..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (2 samples, 0.16%)</title><rect x="4.4391%" y="677" width="0.1614%" height="15" fill="rgb(235,62,36)" fg:x="55" fg:w="2"/><text x="4.6891%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="4.5198%" y="661" width="0.0807%" height="15" fill="rgb(214,41,27)" fg:x="56" fg:w="1"/><text x="4.7698%" y="671.50"></text></g><g><title>engine::session::Session::initialize (36 samples, 2.91%)</title><rect x="1.9370%" y="709" width="2.9056%" height="15" fill="rgb(214,174,37)" fg:x="24" fg:w="36"/><text x="2.1870%" y="719.50">en..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (3 samples, 0.24%)</title><rect x="4.6005%" y="693" width="0.2421%" height="15" fill="rgb(212,11,25)" fg:x="57" fg:w="3"/><text x="4.8505%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="4.6005%" y="677" width="0.2421%" height="15" fill="rgb(217,71,35)" fg:x="57" fg:w="3"/><text x="4.8505%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.7619%" y="661" width="0.0807%" height="15" fill="rgb(234,152,9)" fg:x="59" fg:w="1"/><text x="5.0119%" y="671.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (39 samples, 3.15%)</title><rect x="1.7756%" y="757" width="3.1477%" height="15" fill="rgb(228,32,51)" fg:x="22" fg:w="39"/><text x="2.0256%" y="767.50">&lt;en..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (39 samples, 3.15%)</title><rect x="1.7756%" y="741" width="3.1477%" height="15" fill="rgb(209,14,47)" fg:x="22" fg:w="39"/><text x="2.0256%" y="751.50">eng..</text></g><g><title>engine::session::Session::new (38 samples, 3.07%)</title><rect x="1.8563%" y="725" width="3.0670%" height="15" fill="rgb(218,201,17)" fg:x="23" fg:w="38"/><text x="2.1063%" y="735.50">eng..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="4.8426%" y="709" width="0.0807%" height="15" fill="rgb(218,98,15)" fg:x="60" fg:w="1"/><text x="5.0926%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.8426%" y="693" width="0.0807%" height="15" fill="rgb(233,202,29)" fg:x="60" fg:w="1"/><text x="5.0926%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.8426%" y="677" width="0.0807%" height="15" fill="rgb(207,196,44)" fg:x="60" fg:w="1"/><text x="5.0926%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.8426%" y="661" width="0.0807%" height="15" fill="rgb(218,63,34)" fg:x="60" fg:w="1"/><text x="5.0926%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.9233%" y="741" width="0.0807%" height="15" fill="rgb(209,10,5)" fg:x="61" fg:w="1"/><text x="5.1733%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::model::EntityPtr&gt;&gt; (1 samples, 0.08%)</title><rect x="5.0040%" y="741" width="0.0807%" height="15" fill="rgb(224,36,28)" fg:x="62" fg:w="1"/><text x="5.2540%" y="751.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="5.0847%" y="725" width="0.0807%" height="15" fill="rgb(249,178,7)" fg:x="63" fg:w="1"/><text x="5.3347%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.0847%" y="709" width="0.0807%" height="15" fill="rgb(253,163,10)" fg:x="63" fg:w="1"/><text x="5.3347%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.0847%" y="693" width="0.0807%" height="15" fill="rgb(245,67,46)" fg:x="63" fg:w="1"/><text x="5.3347%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.0847%" y="677" width="0.0807%" height="15" fill="rgb(225,14,18)" fg:x="63" fg:w="1"/><text x="5.3347%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.0847%" y="661" width="0.0807%" height="15" fill="rgb(217,41,54)" fg:x="63" fg:w="1"/><text x="5.3347%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.0847%" y="645" width="0.0807%" height="15" fill="rgb(222,111,11)" fg:x="63" fg:w="1"/><text x="5.3347%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.0847%" y="629" width="0.0807%" height="15" fill="rgb(211,85,31)" fg:x="63" fg:w="1"/><text x="5.3347%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.0847%" y="613" width="0.0807%" height="15" fill="rgb(223,29,26)" fg:x="63" fg:w="1"/><text x="5.3347%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.0847%" y="597" width="0.0807%" height="15" fill="rgb(236,124,50)" fg:x="63" fg:w="1"/><text x="5.3347%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.1655%" y="693" width="0.0807%" height="15" fill="rgb(219,148,15)" fg:x="64" fg:w="1"/><text x="5.4155%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="5.1655%" y="677" width="0.0807%" height="15" fill="rgb(248,159,33)" fg:x="64" fg:w="1"/><text x="5.4155%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.1655%" y="661" width="0.0807%" height="15" fill="rgb(252,65,8)" fg:x="64" fg:w="1"/><text x="5.4155%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.2462%" y="597" width="0.0807%" height="15" fill="rgb(236,45,7)" fg:x="65" fg:w="1"/><text x="5.4962%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.2462%" y="581" width="0.0807%" height="15" fill="rgb(244,3,48)" fg:x="65" fg:w="1"/><text x="5.4962%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="5.2462%" y="613" width="0.1614%" height="15" fill="rgb(224,123,53)" fg:x="65" fg:w="2"/><text x="5.4962%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.3269%" y="597" width="0.0807%" height="15" fill="rgb(223,173,15)" fg:x="66" fg:w="1"/><text x="5.5769%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="5.2462%" y="629" width="0.2421%" height="15" fill="rgb(254,181,5)" fg:x="65" fg:w="3"/><text x="5.4962%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.4076%" y="613" width="0.0807%" height="15" fill="rgb(243,124,33)" fg:x="67" fg:w="1"/><text x="5.6576%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="5.2462%" y="645" width="0.3228%" height="15" fill="rgb(253,220,11)" fg:x="65" fg:w="4"/><text x="5.4962%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.4883%" y="629" width="0.0807%" height="15" fill="rgb(217,14,4)" fg:x="68" fg:w="1"/><text x="5.7383%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="5.5690%" y="645" width="0.0807%" height="15" fill="rgb(209,196,12)" fg:x="69" fg:w="1"/><text x="5.8190%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="5.5690%" y="629" width="0.0807%" height="15" fill="rgb(237,108,29)" fg:x="69" fg:w="1"/><text x="5.8190%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.5690%" y="613" width="0.0807%" height="15" fill="rgb(216,173,20)" fg:x="69" fg:w="1"/><text x="5.8190%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.5690%" y="597" width="0.0807%" height="15" fill="rgb(245,27,6)" fg:x="69" fg:w="1"/><text x="5.8190%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.5690%" y="581" width="0.0807%" height="15" fill="rgb(210,181,20)" fg:x="69" fg:w="1"/><text x="5.8190%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.5690%" y="565" width="0.0807%" height="15" fill="rgb(235,213,1)" fg:x="69" fg:w="1"/><text x="5.8190%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.5690%" y="549" width="0.0807%" height="15" fill="rgb(239,68,43)" fg:x="69" fg:w="1"/><text x="5.8190%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5690%" y="533" width="0.0807%" height="15" fill="rgb(254,137,43)" fg:x="69" fg:w="1"/><text x="5.8190%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.6497%" y="629" width="0.0807%" height="15" fill="rgb(252,170,38)" fg:x="70" fg:w="1"/><text x="5.8997%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.7304%" y="565" width="0.0807%" height="15" fill="rgb(234,21,42)" fg:x="71" fg:w="1"/><text x="5.9804%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="5.7304%" y="597" width="0.1614%" height="15" fill="rgb(216,145,40)" fg:x="71" fg:w="2"/><text x="5.9804%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.7304%" y="581" width="0.1614%" height="15" fill="rgb(251,73,9)" fg:x="71" fg:w="2"/><text x="5.9804%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.8111%" y="565" width="0.0807%" height="15" fill="rgb(242,54,6)" fg:x="72" fg:w="1"/><text x="6.0611%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.8111%" y="549" width="0.0807%" height="15" fill="rgb(239,70,7)" fg:x="72" fg:w="1"/><text x="6.0611%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.8111%" y="533" width="0.0807%" height="15" fill="rgb(216,159,35)" fg:x="72" fg:w="1"/><text x="6.0611%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="5.8918%" y="597" width="0.2421%" height="15" fill="rgb(224,50,39)" fg:x="73" fg:w="3"/><text x="6.1418%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.9726%" y="581" width="0.1614%" height="15" fill="rgb(235,9,35)" fg:x="74" fg:w="2"/><text x="6.2226%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.9726%" y="565" width="0.1614%" height="15" fill="rgb(239,34,21)" fg:x="74" fg:w="2"/><text x="6.2226%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.0533%" y="549" width="0.0807%" height="15" fill="rgb(218,162,43)" fg:x="75" fg:w="1"/><text x="6.3033%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="6.1340%" y="565" width="0.2421%" height="15" fill="rgb(219,89,33)" fg:x="76" fg:w="3"/><text x="6.3840%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.2147%" y="549" width="0.1614%" height="15" fill="rgb(226,125,37)" fg:x="77" fg:w="2"/><text x="6.4647%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.2147%" y="533" width="0.1614%" height="15" fill="rgb(233,149,30)" fg:x="77" fg:w="2"/><text x="6.4647%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.2147%" y="517" width="0.1614%" height="15" fill="rgb(236,8,18)" fg:x="77" fg:w="2"/><text x="6.4647%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="6.1340%" y="581" width="0.3228%" height="15" fill="rgb(205,176,9)" fg:x="76" fg:w="4"/><text x="6.3840%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3761%" y="565" width="0.0807%" height="15" fill="rgb(252,103,44)" fg:x="79" fg:w="1"/><text x="6.6261%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.3761%" y="549" width="0.0807%" height="15" fill="rgb(207,68,53)" fg:x="79" fg:w="1"/><text x="6.6261%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.3761%" y="533" width="0.0807%" height="15" fill="rgb(218,193,48)" fg:x="79" fg:w="1"/><text x="6.6261%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="6.1340%" y="597" width="0.4036%" height="15" fill="rgb(234,121,52)" fg:x="76" fg:w="5"/><text x="6.3840%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.4568%" y="581" width="0.0807%" height="15" fill="rgb(227,218,49)" fg:x="80" fg:w="1"/><text x="6.7068%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.4568%" y="565" width="0.0807%" height="15" fill="rgb(221,8,7)" fg:x="80" fg:w="1"/><text x="6.7068%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="6.4568%" y="549" width="0.0807%" height="15" fill="rgb(217,151,36)" fg:x="80" fg:w="1"/><text x="6.7068%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.89%)</title><rect x="5.7304%" y="613" width="0.8878%" height="15" fill="rgb(213,71,5)" fg:x="71" fg:w="11"/><text x="5.9804%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.5375%" y="597" width="0.0807%" height="15" fill="rgb(225,145,43)" fg:x="81" fg:w="1"/><text x="6.7875%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.5375%" y="581" width="0.0807%" height="15" fill="rgb(235,118,19)" fg:x="81" fg:w="1"/><text x="6.7875%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (15 samples, 1.21%)</title><rect x="5.6497%" y="645" width="1.2107%" height="15" fill="rgb(214,102,36)" fg:x="70" fg:w="15"/><text x="5.8997%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.13%)</title><rect x="5.7304%" y="629" width="1.1299%" height="15" fill="rgb(220,56,43)" fg:x="71" fg:w="14"/><text x="5.9804%" y="639.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="6.6182%" y="613" width="0.2421%" height="15" fill="rgb(246,136,46)" fg:x="82" fg:w="3"/><text x="6.8682%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.6990%" y="597" width="0.1614%" height="15" fill="rgb(249,99,12)" fg:x="83" fg:w="2"/><text x="6.9490%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.7797%" y="581" width="0.0807%" height="15" fill="rgb(224,31,42)" fg:x="84" fg:w="1"/><text x="7.0297%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.7797%" y="565" width="0.0807%" height="15" fill="rgb(208,96,21)" fg:x="84" fg:w="1"/><text x="7.0297%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.7797%" y="549" width="0.0807%" height="15" fill="rgb(237,229,7)" fg:x="84" fg:w="1"/><text x="7.0297%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.7797%" y="533" width="0.0807%" height="15" fill="rgb(210,12,6)" fg:x="84" fg:w="1"/><text x="7.0297%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.8604%" y="645" width="0.0807%" height="15" fill="rgb(240,9,34)" fg:x="85" fg:w="1"/><text x="7.1104%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.1025%" y="549" width="0.0807%" height="15" fill="rgb(211,68,37)" fg:x="88" fg:w="1"/><text x="7.3525%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="7.1832%" y="533" width="0.0807%" height="15" fill="rgb(249,138,50)" fg:x="89" fg:w="1"/><text x="7.4332%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="7.1832%" y="549" width="0.1614%" height="15" fill="rgb(243,185,40)" fg:x="89" fg:w="2"/><text x="7.4332%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.2639%" y="533" width="0.0807%" height="15" fill="rgb(242,92,35)" fg:x="90" fg:w="1"/><text x="7.5139%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.2639%" y="517" width="0.0807%" height="15" fill="rgb(244,98,5)" fg:x="90" fg:w="1"/><text x="7.5139%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.2639%" y="501" width="0.0807%" height="15" fill="rgb(228,186,29)" fg:x="90" fg:w="1"/><text x="7.5139%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2639%" y="485" width="0.0807%" height="15" fill="rgb(253,7,44)" fg:x="90" fg:w="1"/><text x="7.5139%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="7.1025%" y="581" width="0.4036%" height="15" fill="rgb(216,11,45)" fg:x="88" fg:w="5"/><text x="7.3525%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="7.1025%" y="565" width="0.4036%" height="15" fill="rgb(205,67,3)" fg:x="88" fg:w="5"/><text x="7.3525%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.3446%" y="549" width="0.1614%" height="15" fill="rgb(250,18,3)" fg:x="91" fg:w="2"/><text x="7.5946%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="7.3446%" y="533" width="0.1614%" height="15" fill="rgb(241,222,43)" fg:x="91" fg:w="2"/><text x="7.5946%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.4253%" y="517" width="0.0807%" height="15" fill="rgb(233,115,3)" fg:x="92" fg:w="1"/><text x="7.6753%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.4253%" y="501" width="0.0807%" height="15" fill="rgb(215,165,25)" fg:x="92" fg:w="1"/><text x="7.6753%" y="511.50"></text></g><g><title>engine::session::Session::flush (32 samples, 2.58%)</title><rect x="5.0847%" y="741" width="2.5827%" height="15" fill="rgb(234,179,6)" fg:x="63" fg:w="32"/><text x="5.3347%" y="751.50">en..</text></g><g><title>engine::session::state::State::close (31 samples, 2.50%)</title><rect x="5.1655%" y="725" width="2.5020%" height="15" fill="rgb(215,82,23)" fg:x="64" fg:w="31"/><text x="5.4155%" y="735.50">en..</text></g><g><title>engine::session::state::State::flush_entities (31 samples, 2.50%)</title><rect x="5.1655%" y="709" width="2.5020%" height="15" fill="rgb(211,47,18)" fg:x="64" fg:w="31"/><text x="5.4155%" y="719.50">en..</text></g><g><title>core::iter::adapters::try_process (30 samples, 2.42%)</title><rect x="5.2462%" y="693" width="2.4213%" height="15" fill="rgb(248,17,9)" fg:x="65" fg:w="30"/><text x="5.4962%" y="703.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30 samples, 2.42%)</title><rect x="5.2462%" y="677" width="2.4213%" height="15" fill="rgb(210,212,12)" fg:x="65" fg:w="30"/><text x="5.4962%" y="687.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (30 samples, 2.42%)</title><rect x="5.2462%" y="661" width="2.4213%" height="15" fill="rgb(230,135,45)" fg:x="65" fg:w="30"/><text x="5.4962%" y="671.50">en..</text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.73%)</title><rect x="6.9411%" y="645" width="0.7264%" height="15" fill="rgb(214,121,41)" fg:x="86" fg:w="9"/><text x="7.1911%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.73%)</title><rect x="6.9411%" y="629" width="0.7264%" height="15" fill="rgb(239,165,45)" fg:x="86" fg:w="9"/><text x="7.1911%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="7.0218%" y="613" width="0.6457%" height="15" fill="rgb(214,85,51)" fg:x="87" fg:w="8"/><text x="7.2718%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="7.1025%" y="597" width="0.5650%" height="15" fill="rgb(223,90,27)" fg:x="88" fg:w="7"/><text x="7.3525%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.5061%" y="581" width="0.1614%" height="15" fill="rgb(244,84,11)" fg:x="93" fg:w="2"/><text x="7.7561%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="7.5061%" y="565" width="0.1614%" height="15" fill="rgb(253,41,47)" fg:x="93" fg:w="2"/><text x="7.7561%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="7.6675%" y="709" width="0.0807%" height="15" fill="rgb(232,39,5)" fg:x="95" fg:w="1"/><text x="7.9175%" y="719.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="7.6675%" y="741" width="0.1614%" height="15" fill="rgb(211,93,4)" fg:x="95" fg:w="2"/><text x="7.9175%" y="751.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="7.6675%" y="725" width="0.1614%" height="15" fill="rgb(219,50,49)" fg:x="95" fg:w="2"/><text x="7.9175%" y="735.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="7.7482%" y="709" width="0.0807%" height="15" fill="rgb(232,80,19)" fg:x="96" fg:w="1"/><text x="7.9982%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.7482%" y="693" width="0.0807%" height="15" fill="rgb(215,227,39)" fg:x="96" fg:w="1"/><text x="7.9982%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.8289%" y="693" width="0.0807%" height="15" fill="rgb(211,99,12)" fg:x="97" fg:w="1"/><text x="8.0789%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="7.8289%" y="709" width="0.1614%" height="15" fill="rgb(214,158,5)" fg:x="97" fg:w="2"/><text x="8.0789%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.9096%" y="693" width="0.0807%" height="15" fill="rgb(242,19,53)" fg:x="98" fg:w="1"/><text x="8.1596%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="7.8289%" y="725" width="0.2421%" height="15" fill="rgb(208,18,20)" fg:x="97" fg:w="3"/><text x="8.0789%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="7.9903%" y="709" width="0.0807%" height="15" fill="rgb(250,44,11)" fg:x="99" fg:w="1"/><text x="8.2403%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.9903%" y="693" width="0.0807%" height="15" fill="rgb(238,159,13)" fg:x="99" fg:w="1"/><text x="8.2403%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.9903%" y="677" width="0.0807%" height="15" fill="rgb(231,74,18)" fg:x="99" fg:w="1"/><text x="8.2403%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.9903%" y="661" width="0.0807%" height="15" fill="rgb(229,219,45)" fg:x="99" fg:w="1"/><text x="8.2403%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="7.9903%" y="645" width="0.0807%" height="15" fill="rgb(210,221,1)" fg:x="99" fg:w="1"/><text x="8.2403%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.9903%" y="629" width="0.0807%" height="15" fill="rgb(209,60,51)" fg:x="99" fg:w="1"/><text x="8.2403%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.9903%" y="613" width="0.0807%" height="15" fill="rgb(252,97,34)" fg:x="99" fg:w="1"/><text x="8.2403%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.9903%" y="597" width="0.0807%" height="15" fill="rgb(243,211,37)" fg:x="99" fg:w="1"/><text x="8.2403%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.9903%" y="581" width="0.0807%" height="15" fill="rgb(210,229,37)" fg:x="99" fg:w="1"/><text x="8.2403%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.9903%" y="565" width="0.0807%" height="15" fill="rgb(220,208,43)" fg:x="99" fg:w="1"/><text x="8.2403%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.9903%" y="549" width="0.0807%" height="15" fill="rgb(218,118,50)" fg:x="99" fg:w="1"/><text x="8.2403%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.9903%" y="533" width="0.0807%" height="15" fill="rgb(254,169,52)" fg:x="99" fg:w="1"/><text x="8.2403%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="7.9903%" y="517" width="0.0807%" height="15" fill="rgb(221,214,37)" fg:x="99" fg:w="1"/><text x="8.2403%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.0710%" y="693" width="0.0807%" height="15" fill="rgb(254,186,32)" fg:x="100" fg:w="1"/><text x="8.3210%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.0710%" y="677" width="0.0807%" height="15" fill="rgb(215,144,43)" fg:x="100" fg:w="1"/><text x="8.3210%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.0710%" y="661" width="0.0807%" height="15" fill="rgb(252,21,46)" fg:x="100" fg:w="1"/><text x="8.3210%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.0710%" y="645" width="0.0807%" height="15" fill="rgb(207,166,46)" fg:x="100" fg:w="1"/><text x="8.3210%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.0710%" y="629" width="0.0807%" height="15" fill="rgb(253,37,49)" fg:x="100" fg:w="1"/><text x="8.3210%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.0710%" y="613" width="0.0807%" height="15" fill="rgb(222,97,20)" fg:x="100" fg:w="1"/><text x="8.3210%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.0710%" y="597" width="0.0807%" height="15" fill="rgb(244,181,26)" fg:x="100" fg:w="1"/><text x="8.3210%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.0710%" y="581" width="0.0807%" height="15" fill="rgb(241,22,29)" fg:x="100" fg:w="1"/><text x="8.3210%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.0710%" y="565" width="0.0807%" height="15" fill="rgb(206,200,43)" fg:x="100" fg:w="1"/><text x="8.3210%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.0710%" y="549" width="0.0807%" height="15" fill="rgb(226,224,43)" fg:x="100" fg:w="1"/><text x="8.3210%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.0710%" y="533" width="0.0807%" height="15" fill="rgb(253,129,28)" fg:x="100" fg:w="1"/><text x="8.3210%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.0710%" y="517" width="0.0807%" height="15" fill="rgb(252,99,33)" fg:x="100" fg:w="1"/><text x="8.3210%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.0710%" y="501" width="0.0807%" height="15" fill="rgb(208,123,45)" fg:x="100" fg:w="1"/><text x="8.3210%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="8.0710%" y="725" width="0.1614%" height="15" fill="rgb(251,106,12)" fg:x="100" fg:w="2"/><text x="8.3210%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.0710%" y="709" width="0.1614%" height="15" fill="rgb(240,209,35)" fg:x="100" fg:w="2"/><text x="8.3210%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1517%" y="693" width="0.0807%" height="15" fill="rgb(214,52,50)" fg:x="101" fg:w="1"/><text x="8.4017%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="7.8289%" y="741" width="0.4843%" height="15" fill="rgb(234,119,4)" fg:x="97" fg:w="6"/><text x="8.0789%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="8.2324%" y="725" width="0.0807%" height="15" fill="rgb(228,181,36)" fg:x="102" fg:w="1"/><text x="8.4824%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.2324%" y="709" width="0.0807%" height="15" fill="rgb(213,171,42)" fg:x="102" fg:w="1"/><text x="8.4824%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="8.3132%" y="741" width="0.1614%" height="15" fill="rgb(239,14,41)" fg:x="103" fg:w="2"/><text x="8.5632%" y="751.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="8.3132%" y="725" width="0.1614%" height="15" fill="rgb(239,111,46)" fg:x="103" fg:w="2"/><text x="8.5632%" y="735.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="8.3132%" y="709" width="0.1614%" height="15" fill="rgb(214,72,7)" fg:x="103" fg:w="2"/><text x="8.5632%" y="719.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (2 samples, 0.16%)</title><rect x="8.3132%" y="693" width="0.1614%" height="15" fill="rgb(221,114,1)" fg:x="103" fg:w="2"/><text x="8.5632%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="8.3132%" y="677" width="0.1614%" height="15" fill="rgb(213,143,14)" fg:x="103" fg:w="2"/><text x="8.5632%" y="687.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3939%" y="661" width="0.0807%" height="15" fill="rgb(220,221,53)" fg:x="104" fg:w="1"/><text x="8.6439%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.3939%" y="645" width="0.0807%" height="15" fill="rgb(236,189,27)" fg:x="104" fg:w="1"/><text x="8.6439%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3939%" y="629" width="0.0807%" height="15" fill="rgb(252,139,49)" fg:x="104" fg:w="1"/><text x="8.6439%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="8.4746%" y="709" width="0.0807%" height="15" fill="rgb(231,158,33)" fg:x="105" fg:w="1"/><text x="8.7246%" y="719.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="8.4746%" y="693" width="0.0807%" height="15" fill="rgb(207,201,15)" fg:x="105" fg:w="1"/><text x="8.7246%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.4746%" y="677" width="0.0807%" height="15" fill="rgb(218,43,48)" fg:x="105" fg:w="1"/><text x="8.7246%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="8.4746%" y="661" width="0.0807%" height="15" fill="rgb(244,63,52)" fg:x="105" fg:w="1"/><text x="8.7246%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.4746%" y="645" width="0.0807%" height="15" fill="rgb(236,60,17)" fg:x="105" fg:w="1"/><text x="8.7246%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.5553%" y="709" width="0.0807%" height="15" fill="rgb(205,206,29)" fg:x="106" fg:w="1"/><text x="8.8053%" y="719.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="8.5553%" y="693" width="0.0807%" height="15" fill="rgb(205,209,35)" fg:x="106" fg:w="1"/><text x="8.8053%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.5553%" y="677" width="0.0807%" height="15" fill="rgb(227,112,14)" fg:x="106" fg:w="1"/><text x="8.8053%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.5553%" y="661" width="0.0807%" height="15" fill="rgb(248,151,9)" fg:x="106" fg:w="1"/><text x="8.8053%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.7167%" y="597" width="0.0807%" height="15" fill="rgb(247,45,40)" fg:x="108" fg:w="1"/><text x="8.9667%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="8.6360%" y="709" width="0.2421%" height="15" fill="rgb(232,185,16)" fg:x="107" fg:w="3"/><text x="8.8860%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="8.6360%" y="693" width="0.2421%" height="15" fill="rgb(215,45,44)" fg:x="107" fg:w="3"/><text x="8.8860%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="8.6360%" y="677" width="0.2421%" height="15" fill="rgb(206,69,32)" fg:x="107" fg:w="3"/><text x="8.8860%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="8.6360%" y="661" width="0.2421%" height="15" fill="rgb(233,98,50)" fg:x="107" fg:w="3"/><text x="8.8860%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="8.7167%" y="645" width="0.1614%" height="15" fill="rgb(232,217,52)" fg:x="108" fg:w="2"/><text x="8.9667%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="8.7167%" y="629" width="0.1614%" height="15" fill="rgb(250,42,51)" fg:x="108" fg:w="2"/><text x="8.9667%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.7167%" y="613" width="0.1614%" height="15" fill="rgb(241,200,26)" fg:x="108" fg:w="2"/><text x="8.9667%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.7974%" y="597" width="0.0807%" height="15" fill="rgb(207,10,32)" fg:x="109" fg:w="1"/><text x="9.0474%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.7974%" y="581" width="0.0807%" height="15" fill="rgb(214,63,15)" fg:x="109" fg:w="1"/><text x="9.0474%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.7974%" y="565" width="0.0807%" height="15" fill="rgb(234,176,14)" fg:x="109" fg:w="1"/><text x="9.0474%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.7974%" y="549" width="0.0807%" height="15" fill="rgb(226,104,52)" fg:x="109" fg:w="1"/><text x="9.0474%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.7974%" y="533" width="0.0807%" height="15" fill="rgb(211,222,1)" fg:x="109" fg:w="1"/><text x="9.0474%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (6 samples, 0.48%)</title><rect x="8.4746%" y="741" width="0.4843%" height="15" fill="rgb(237,7,3)" fg:x="105" fg:w="6"/><text x="8.7246%" y="751.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="8.4746%" y="725" width="0.4843%" height="15" fill="rgb(218,143,7)" fg:x="105" fg:w="6"/><text x="8.7246%" y="735.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="8.8781%" y="709" width="0.0807%" height="15" fill="rgb(208,25,22)" fg:x="110" fg:w="1"/><text x="9.1281%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.8781%" y="693" width="0.0807%" height="15" fill="rgb(228,127,16)" fg:x="110" fg:w="1"/><text x="9.1281%" y="703.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8781%" y="677" width="0.0807%" height="15" fill="rgb(237,86,27)" fg:x="110" fg:w="1"/><text x="9.1281%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.8781%" y="661" width="0.0807%" height="15" fill="rgb(207,125,19)" fg:x="110" fg:w="1"/><text x="9.1281%" y="671.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8781%" y="645" width="0.0807%" height="15" fill="rgb(243,195,0)" fg:x="110" fg:w="1"/><text x="9.1281%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.8781%" y="629" width="0.0807%" height="15" fill="rgb(230,95,18)" fg:x="110" fg:w="1"/><text x="9.1281%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.8781%" y="613" width="0.0807%" height="15" fill="rgb(232,157,21)" fg:x="110" fg:w="1"/><text x="9.1281%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0395%" y="725" width="0.0807%" height="15" fill="rgb(212,120,50)" fg:x="112" fg:w="1"/><text x="9.2895%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="9.2010%" y="645" width="0.0807%" height="15" fill="rgb(222,204,44)" fg:x="114" fg:w="1"/><text x="9.4510%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.2010%" y="629" width="0.0807%" height="15" fill="rgb(236,6,33)" fg:x="114" fg:w="1"/><text x="9.4510%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.2010%" y="613" width="0.0807%" height="15" fill="rgb(247,11,38)" fg:x="114" fg:w="1"/><text x="9.4510%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="9.1203%" y="725" width="0.2421%" height="15" fill="rgb(215,111,0)" fg:x="113" fg:w="3"/><text x="9.3703%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="9.1203%" y="709" width="0.2421%" height="15" fill="rgb(211,65,46)" fg:x="113" fg:w="3"/><text x="9.3703%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="9.2010%" y="693" width="0.1614%" height="15" fill="rgb(216,5,12)" fg:x="114" fg:w="2"/><text x="9.4510%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="9.2010%" y="677" width="0.1614%" height="15" fill="rgb(226,7,2)" fg:x="114" fg:w="2"/><text x="9.4510%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="9.2010%" y="661" width="0.1614%" height="15" fill="rgb(242,116,12)" fg:x="114" fg:w="2"/><text x="9.4510%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="9.2817%" y="645" width="0.0807%" height="15" fill="rgb(249,209,7)" fg:x="115" fg:w="1"/><text x="9.5317%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.2817%" y="629" width="0.0807%" height="15" fill="rgb(232,73,17)" fg:x="115" fg:w="1"/><text x="9.5317%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.2817%" y="613" width="0.0807%" height="15" fill="rgb(214,13,32)" fg:x="115" fg:w="1"/><text x="9.5317%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.2817%" y="597" width="0.0807%" height="15" fill="rgb(221,125,10)" fg:x="115" fg:w="1"/><text x="9.5317%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.2817%" y="581" width="0.0807%" height="15" fill="rgb(246,7,44)" fg:x="115" fg:w="1"/><text x="9.5317%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="9.3624%" y="661" width="0.0807%" height="15" fill="rgb(239,18,35)" fg:x="116" fg:w="1"/><text x="9.6124%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="9.3624%" y="645" width="0.0807%" height="15" fill="rgb(250,222,16)" fg:x="116" fg:w="1"/><text x="9.6124%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="9.3624%" y="629" width="0.0807%" height="15" fill="rgb(219,100,8)" fg:x="116" fg:w="1"/><text x="9.6124%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="9.3624%" y="613" width="0.0807%" height="15" fill="rgb(240,62,13)" fg:x="116" fg:w="1"/><text x="9.6124%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.3624%" y="597" width="0.0807%" height="15" fill="rgb(253,194,2)" fg:x="116" fg:w="1"/><text x="9.6124%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.3624%" y="581" width="0.0807%" height="15" fill="rgb(235,58,31)" fg:x="116" fg:w="1"/><text x="9.6124%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.4431%" y="549" width="0.0807%" height="15" fill="rgb(231,37,11)" fg:x="117" fg:w="1"/><text x="9.6931%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.4431%" y="533" width="0.0807%" height="15" fill="rgb(235,133,0)" fg:x="117" fg:w="1"/><text x="9.6931%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.4431%" y="517" width="0.0807%" height="15" fill="rgb(212,185,40)" fg:x="117" fg:w="1"/><text x="9.6931%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="9.4431%" y="565" width="0.1614%" height="15" fill="rgb(216,68,42)" fg:x="117" fg:w="2"/><text x="9.6931%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.5238%" y="549" width="0.0807%" height="15" fill="rgb(239,81,4)" fg:x="118" fg:w="1"/><text x="9.7738%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.5238%" y="533" width="0.0807%" height="15" fill="rgb(206,86,6)" fg:x="118" fg:w="1"/><text x="9.7738%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="9.4431%" y="581" width="0.2421%" height="15" fill="rgb(249,95,27)" fg:x="117" fg:w="3"/><text x="9.6931%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.6045%" y="565" width="0.0807%" height="15" fill="rgb(205,155,45)" fg:x="119" fg:w="1"/><text x="9.8545%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="9.4431%" y="613" width="0.4843%" height="15" fill="rgb(213,55,42)" fg:x="117" fg:w="6"/><text x="9.6931%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="9.4431%" y="597" width="0.4843%" height="15" fill="rgb(249,197,4)" fg:x="117" fg:w="6"/><text x="9.6931%" y="607.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="9.6852%" y="581" width="0.2421%" height="15" fill="rgb(212,128,32)" fg:x="120" fg:w="3"/><text x="9.9352%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="9.9274%" y="613" width="0.1614%" height="15" fill="rgb(252,47,30)" fg:x="123" fg:w="2"/><text x="10.1774%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="9.9274%" y="597" width="0.1614%" height="15" fill="rgb(209,79,18)" fg:x="123" fg:w="2"/><text x="10.1774%" y="607.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="9.9274%" y="581" width="0.1614%" height="15" fill="rgb(225,81,38)" fg:x="123" fg:w="2"/><text x="10.1774%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="9.9274%" y="565" width="0.1614%" height="15" fill="rgb(205,95,16)" fg:x="123" fg:w="2"/><text x="10.1774%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="9.9274%" y="549" width="0.1614%" height="15" fill="rgb(214,30,4)" fg:x="123" fg:w="2"/><text x="10.1774%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="9.9274%" y="533" width="0.1614%" height="15" fill="rgb(232,137,22)" fg:x="123" fg:w="2"/><text x="10.1774%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.0081%" y="517" width="0.0807%" height="15" fill="rgb(232,156,19)" fg:x="124" fg:w="1"/><text x="10.2581%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0081%" y="501" width="0.0807%" height="15" fill="rgb(248,157,26)" fg:x="124" fg:w="1"/><text x="10.2581%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="10.0888%" y="597" width="0.1614%" height="15" fill="rgb(242,24,3)" fg:x="125" fg:w="2"/><text x="10.3388%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.0888%" y="581" width="0.1614%" height="15" fill="rgb(218,195,48)" fg:x="125" fg:w="2"/><text x="10.3388%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.0888%" y="565" width="0.1614%" height="15" fill="rgb(214,193,36)" fg:x="125" fg:w="2"/><text x="10.3388%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.1695%" y="549" width="0.0807%" height="15" fill="rgb(242,110,40)" fg:x="126" fg:w="1"/><text x="10.4195%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.1695%" y="533" width="0.0807%" height="15" fill="rgb(233,150,26)" fg:x="126" fg:w="1"/><text x="10.4195%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.2502%" y="581" width="0.1614%" height="15" fill="rgb(239,200,30)" fg:x="127" fg:w="2"/><text x="10.5002%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.3309%" y="565" width="0.0807%" height="15" fill="rgb(226,28,11)" fg:x="128" fg:w="1"/><text x="10.5809%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.4116%" y="565" width="0.0807%" height="15" fill="rgb(220,26,48)" fg:x="129" fg:w="1"/><text x="10.6616%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.4116%" y="549" width="0.0807%" height="15" fill="rgb(232,10,11)" fg:x="129" fg:w="1"/><text x="10.6616%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.4116%" y="533" width="0.0807%" height="15" fill="rgb(252,143,50)" fg:x="129" fg:w="1"/><text x="10.6616%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.4923%" y="565" width="0.1614%" height="15" fill="rgb(206,58,22)" fg:x="130" fg:w="2"/><text x="10.7423%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.5730%" y="549" width="0.0807%" height="15" fill="rgb(250,9,45)" fg:x="131" fg:w="1"/><text x="10.8230%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.5730%" y="533" width="0.0807%" height="15" fill="rgb(225,148,14)" fg:x="131" fg:w="1"/><text x="10.8230%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.5730%" y="517" width="0.0807%" height="15" fill="rgb(205,178,40)" fg:x="131" fg:w="1"/><text x="10.8230%" y="527.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="10.7345%" y="549" width="0.0807%" height="15" fill="rgb(215,201,4)" fg:x="133" fg:w="1"/><text x="10.9845%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.9766%" y="533" width="0.1614%" height="15" fill="rgb(219,223,24)" fg:x="136" fg:w="2"/><text x="11.2266%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.9766%" y="517" width="0.1614%" height="15" fill="rgb(217,19,31)" fg:x="136" fg:w="2"/><text x="11.2266%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.0573%" y="501" width="0.0807%" height="15" fill="rgb(235,33,3)" fg:x="137" fg:w="1"/><text x="11.3073%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.0573%" y="485" width="0.0807%" height="15" fill="rgb(221,39,18)" fg:x="137" fg:w="1"/><text x="11.3073%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.0573%" y="469" width="0.0807%" height="15" fill="rgb(242,162,33)" fg:x="137" fg:w="1"/><text x="11.3073%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.0573%" y="453" width="0.0807%" height="15" fill="rgb(233,215,28)" fg:x="137" fg:w="1"/><text x="11.3073%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="11.0573%" y="437" width="0.0807%" height="15" fill="rgb(212,117,9)" fg:x="137" fg:w="1"/><text x="11.3073%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="10.8152%" y="549" width="0.4036%" height="15" fill="rgb(237,70,47)" fg:x="134" fg:w="5"/><text x="11.0652%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.1380%" y="533" width="0.0807%" height="15" fill="rgb(206,177,13)" fg:x="138" fg:w="1"/><text x="11.3880%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.1380%" y="517" width="0.0807%" height="15" fill="rgb(209,174,33)" fg:x="138" fg:w="1"/><text x="11.3880%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.1380%" y="501" width="0.0807%" height="15" fill="rgb(226,6,11)" fg:x="138" fg:w="1"/><text x="11.3880%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.13%)</title><rect x="10.2502%" y="597" width="1.1299%" height="15" fill="rgb(240,214,6)" fg:x="127" fg:w="14"/><text x="10.5002%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.97%)</title><rect x="10.4116%" y="581" width="0.9685%" height="15" fill="rgb(254,214,40)" fg:x="129" fg:w="12"/><text x="10.6616%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="10.6538%" y="565" width="0.7264%" height="15" fill="rgb(230,187,15)" fg:x="132" fg:w="9"/><text x="10.9038%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.2187%" y="549" width="0.1614%" height="15" fill="rgb(250,11,27)" fg:x="139" fg:w="2"/><text x="11.4687%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (17 samples, 1.37%)</title><rect x="10.0888%" y="613" width="1.3721%" height="15" fill="rgb(243,107,19)" fg:x="125" fg:w="17"/><text x="10.3388%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.3801%" y="597" width="0.0807%" height="15" fill="rgb(253,66,26)" fg:x="141" fg:w="1"/><text x="11.6301%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.3801%" y="581" width="0.0807%" height="15" fill="rgb(228,43,8)" fg:x="141" fg:w="1"/><text x="11.6301%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.3801%" y="565" width="0.0807%" height="15" fill="rgb(232,197,36)" fg:x="141" fg:w="1"/><text x="11.6301%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.4609%" y="581" width="0.0807%" height="15" fill="rgb(221,182,31)" fg:x="142" fg:w="1"/><text x="11.7109%" y="591.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPath as core::convert::From&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::from (1 samples, 0.08%)</title><rect x="11.4609%" y="565" width="0.0807%" height="15" fill="rgb(244,25,36)" fg:x="142" fg:w="1"/><text x="11.7109%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.4609%" y="549" width="0.0807%" height="15" fill="rgb(247,101,19)" fg:x="142" fg:w="1"/><text x="11.7109%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="11.4609%" y="597" width="0.1614%" height="15" fill="rgb(223,117,19)" fg:x="142" fg:w="2"/><text x="11.7109%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;treediff::tools::record::Recorder&lt;treediff::value::shared::Key,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="11.5416%" y="581" width="0.0807%" height="15" fill="rgb(249,63,38)" fg:x="143" fg:w="1"/><text x="11.7916%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.7030%" y="565" width="0.1614%" height="15" fill="rgb(220,143,23)" fg:x="145" fg:w="2"/><text x="11.9530%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="11.7837%" y="549" width="0.0807%" height="15" fill="rgb(252,183,22)" fg:x="146" fg:w="1"/><text x="12.0337%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.8644%" y="517" width="0.0807%" height="15" fill="rgb(243,176,15)" fg:x="147" fg:w="1"/><text x="12.1144%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.8644%" y="501" width="0.0807%" height="15" fill="rgb(244,204,46)" fg:x="147" fg:w="1"/><text x="12.1144%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.8644%" y="485" width="0.0807%" height="15" fill="rgb(227,28,54)" fg:x="147" fg:w="1"/><text x="12.1144%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.8644%" y="469" width="0.0807%" height="15" fill="rgb(231,10,15)" fg:x="147" fg:w="1"/><text x="12.1144%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.8644%" y="453" width="0.0807%" height="15" fill="rgb(210,200,17)" fg:x="147" fg:w="1"/><text x="12.1144%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.8644%" y="437" width="0.0807%" height="15" fill="rgb(251,106,46)" fg:x="147" fg:w="1"/><text x="12.1144%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.8644%" y="421" width="0.0807%" height="15" fill="rgb(218,211,15)" fg:x="147" fg:w="1"/><text x="12.1144%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.8644%" y="405" width="0.0807%" height="15" fill="rgb(239,62,10)" fg:x="147" fg:w="1"/><text x="12.1144%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="11.8644%" y="533" width="0.4036%" height="15" fill="rgb(225,53,53)" fg:x="147" fg:w="5"/><text x="12.1144%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="11.9451%" y="517" width="0.3228%" height="15" fill="rgb(207,16,24)" fg:x="148" fg:w="4"/><text x="12.1951%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="12.1065%" y="501" width="0.1614%" height="15" fill="rgb(217,52,28)" fg:x="150" fg:w="2"/><text x="12.3565%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1872%" y="485" width="0.0807%" height="15" fill="rgb(246,1,5)" fg:x="151" fg:w="1"/><text x="12.4372%" y="495.50"></text></g><g><title>engine::session::Session::flush (37 samples, 2.99%)</title><rect x="9.3624%" y="725" width="2.9863%" height="15" fill="rgb(221,29,26)" fg:x="116" fg:w="37"/><text x="9.6124%" y="735.50">eng..</text></g><g><title>engine::session::Session::save_changes (37 samples, 2.99%)</title><rect x="9.3624%" y="709" width="2.9863%" height="15" fill="rgb(250,133,32)" fg:x="116" fg:w="37"/><text x="9.6124%" y="719.50">eng..</text></g><g><title>engine::session::state::State::close (37 samples, 2.99%)</title><rect x="9.3624%" y="693" width="2.9863%" height="15" fill="rgb(236,63,16)" fg:x="116" fg:w="37"/><text x="9.6124%" y="703.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (37 samples, 2.99%)</title><rect x="9.3624%" y="677" width="2.9863%" height="15" fill="rgb(231,159,14)" fg:x="116" fg:w="37"/><text x="9.6124%" y="687.50">eng..</text></g><g><title>core::iter::adapters::try_process (36 samples, 2.91%)</title><rect x="9.4431%" y="661" width="2.9056%" height="15" fill="rgb(207,102,36)" fg:x="117" fg:w="36"/><text x="9.6931%" y="671.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (36 samples, 2.91%)</title><rect x="9.4431%" y="645" width="2.9056%" height="15" fill="rgb(230,224,31)" fg:x="117" fg:w="36"/><text x="9.6931%" y="655.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (36 samples, 2.91%)</title><rect x="9.4431%" y="629" width="2.9056%" height="15" fill="rgb(215,182,16)" fg:x="117" fg:w="36"/><text x="9.6931%" y="639.50">en..</text></g><g><title>kernel::model::any_entity_changes (11 samples, 0.89%)</title><rect x="11.4609%" y="613" width="0.8878%" height="15" fill="rgb(226,113,2)" fg:x="142" fg:w="11"/><text x="11.7109%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.73%)</title><rect x="11.6223%" y="597" width="0.7264%" height="15" fill="rgb(241,18,35)" fg:x="144" fg:w="9"/><text x="11.8723%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.73%)</title><rect x="11.6223%" y="581" width="0.7264%" height="15" fill="rgb(240,165,44)" fg:x="144" fg:w="9"/><text x="11.8723%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="11.8644%" y="565" width="0.4843%" height="15" fill="rgb(229,130,47)" fg:x="147" fg:w="6"/><text x="12.1144%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="11.8644%" y="549" width="0.4843%" height="15" fill="rgb(223,93,7)" fg:x="147" fg:w="6"/><text x="12.1144%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.2680%" y="533" width="0.0807%" height="15" fill="rgb(205,180,36)" fg:x="152" fg:w="1"/><text x="12.5180%" y="543.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="12.3487%" y="725" width="0.0807%" height="15" fill="rgb(221,103,28)" fg:x="153" fg:w="1"/><text x="12.5987%" y="735.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="12.3487%" y="709" width="0.0807%" height="15" fill="rgb(212,4,3)" fg:x="153" fg:w="1"/><text x="12.5987%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.4294%" y="693" width="0.0807%" height="15" fill="rgb(209,221,53)" fg:x="154" fg:w="1"/><text x="12.6794%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.4294%" y="677" width="0.0807%" height="15" fill="rgb(233,229,52)" fg:x="154" fg:w="1"/><text x="12.6794%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.4294%" y="661" width="0.0807%" height="15" fill="rgb(254,127,37)" fg:x="154" fg:w="1"/><text x="12.6794%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.4294%" y="645" width="0.0807%" height="15" fill="rgb(207,161,26)" fg:x="154" fg:w="1"/><text x="12.6794%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.5101%" y="677" width="0.0807%" height="15" fill="rgb(223,75,5)" fg:x="155" fg:w="1"/><text x="12.7601%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.5101%" y="661" width="0.0807%" height="15" fill="rgb(235,115,52)" fg:x="155" fg:w="1"/><text x="12.7601%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.5101%" y="645" width="0.0807%" height="15" fill="rgb(240,91,46)" fg:x="155" fg:w="1"/><text x="12.7601%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="12.5101%" y="693" width="0.1614%" height="15" fill="rgb(251,144,21)" fg:x="155" fg:w="2"/><text x="12.7601%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="12.5908%" y="677" width="0.0807%" height="15" fill="rgb(247,220,47)" fg:x="156" fg:w="1"/><text x="12.8408%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="12.5908%" y="661" width="0.0807%" height="15" fill="rgb(253,122,1)" fg:x="156" fg:w="1"/><text x="12.8408%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="12.5908%" y="645" width="0.0807%" height="15" fill="rgb(221,0,24)" fg:x="156" fg:w="1"/><text x="12.8408%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="12.5908%" y="629" width="0.0807%" height="15" fill="rgb(220,204,54)" fg:x="156" fg:w="1"/><text x="12.8408%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.5908%" y="613" width="0.0807%" height="15" fill="rgb(205,96,25)" fg:x="156" fg:w="1"/><text x="12.8408%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.5908%" y="597" width="0.0807%" height="15" fill="rgb(247,77,20)" fg:x="156" fg:w="1"/><text x="12.8408%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="12.6715%" y="677" width="0.1614%" height="15" fill="rgb(245,151,8)" fg:x="157" fg:w="2"/><text x="12.9215%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="12.6715%" y="661" width="0.1614%" height="15" fill="rgb(242,158,39)" fg:x="157" fg:w="2"/><text x="12.9215%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="12.6715%" y="645" width="0.1614%" height="15" fill="rgb(222,214,50)" fg:x="157" fg:w="2"/><text x="12.9215%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.6715%" y="629" width="0.1614%" height="15" fill="rgb(229,60,39)" fg:x="157" fg:w="2"/><text x="12.9215%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.6715%" y="613" width="0.1614%" height="15" fill="rgb(240,148,18)" fg:x="157" fg:w="2"/><text x="12.9215%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.6715%" y="597" width="0.1614%" height="15" fill="rgb(215,96,11)" fg:x="157" fg:w="2"/><text x="12.9215%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="12.6715%" y="581" width="0.1614%" height="15" fill="rgb(238,162,53)" fg:x="157" fg:w="2"/><text x="12.9215%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="12.6715%" y="565" width="0.1614%" height="15" fill="rgb(214,83,18)" fg:x="157" fg:w="2"/><text x="12.9215%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="12.6715%" y="549" width="0.1614%" height="15" fill="rgb(248,117,24)" fg:x="157" fg:w="2"/><text x="12.9215%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="12.6715%" y="533" width="0.1614%" height="15" fill="rgb(238,190,6)" fg:x="157" fg:w="2"/><text x="12.9215%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="12.6715%" y="517" width="0.1614%" height="15" fill="rgb(213,51,6)" fg:x="157" fg:w="2"/><text x="12.9215%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="12.6715%" y="501" width="0.1614%" height="15" fill="rgb(212,136,1)" fg:x="157" fg:w="2"/><text x="12.9215%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="12.6715%" y="485" width="0.1614%" height="15" fill="rgb(221,192,14)" fg:x="157" fg:w="2"/><text x="12.9215%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="12.6715%" y="469" width="0.1614%" height="15" fill="rgb(244,38,54)" fg:x="157" fg:w="2"/><text x="12.9215%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="12.6715%" y="453" width="0.1614%" height="15" fill="rgb(240,45,28)" fg:x="157" fg:w="2"/><text x="12.9215%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="12.6715%" y="437" width="0.1614%" height="15" fill="rgb(240,123,12)" fg:x="157" fg:w="2"/><text x="12.9215%" y="447.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="12.6715%" y="421" width="0.1614%" height="15" fill="rgb(216,14,30)" fg:x="157" fg:w="2"/><text x="12.9215%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="12.6715%" y="405" width="0.1614%" height="15" fill="rgb(212,50,24)" fg:x="157" fg:w="2"/><text x="12.9215%" y="415.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="12.8329%" y="677" width="0.0807%" height="15" fill="rgb(253,229,47)" fg:x="159" fg:w="1"/><text x="13.0829%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="12.4294%" y="709" width="0.5650%" height="15" fill="rgb(214,26,17)" fg:x="154" fg:w="7"/><text x="12.6794%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="12.6715%" y="693" width="0.3228%" height="15" fill="rgb(252,60,11)" fg:x="157" fg:w="4"/><text x="12.9215%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="12.9136%" y="677" width="0.0807%" height="15" fill="rgb(209,59,37)" fg:x="160" fg:w="1"/><text x="13.1636%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.9136%" y="661" width="0.0807%" height="15" fill="rgb(228,126,53)" fg:x="160" fg:w="1"/><text x="13.1636%" y="671.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="12.9136%" y="645" width="0.0807%" height="15" fill="rgb(233,99,2)" fg:x="160" fg:w="1"/><text x="13.1636%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.9944%" y="709" width="0.0807%" height="15" fill="rgb(217,106,34)" fg:x="161" fg:w="1"/><text x="13.2444%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.9944%" y="693" width="0.0807%" height="15" fill="rgb(222,46,19)" fg:x="161" fg:w="1"/><text x="13.2444%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.9944%" y="677" width="0.0807%" height="15" fill="rgb(251,87,31)" fg:x="161" fg:w="1"/><text x="13.2444%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.9944%" y="661" width="0.0807%" height="15" fill="rgb(213,70,51)" fg:x="161" fg:w="1"/><text x="13.2444%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.9944%" y="645" width="0.0807%" height="15" fill="rgb(229,144,18)" fg:x="161" fg:w="1"/><text x="13.2444%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.9944%" y="629" width="0.0807%" height="15" fill="rgb(254,60,26)" fg:x="161" fg:w="1"/><text x="13.2444%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.9944%" y="613" width="0.0807%" height="15" fill="rgb(243,127,51)" fg:x="161" fg:w="1"/><text x="13.2444%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.9944%" y="597" width="0.0807%" height="15" fill="rgb(221,51,25)" fg:x="161" fg:w="1"/><text x="13.2444%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.9944%" y="581" width="0.0807%" height="15" fill="rgb(205,42,7)" fg:x="161" fg:w="1"/><text x="13.2444%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.9944%" y="565" width="0.0807%" height="15" fill="rgb(236,177,48)" fg:x="161" fg:w="1"/><text x="13.2444%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.9944%" y="549" width="0.0807%" height="15" fill="rgb(226,79,31)" fg:x="161" fg:w="1"/><text x="13.2444%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.9944%" y="533" width="0.0807%" height="15" fill="rgb(216,170,12)" fg:x="161" fg:w="1"/><text x="13.2444%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.9944%" y="517" width="0.0807%" height="15" fill="rgb(208,62,51)" fg:x="161" fg:w="1"/><text x="13.2444%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.9944%" y="501" width="0.0807%" height="15" fill="rgb(254,129,9)" fg:x="161" fg:w="1"/><text x="13.2444%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.9944%" y="485" width="0.0807%" height="15" fill="rgb(243,209,31)" fg:x="161" fg:w="1"/><text x="13.2444%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9944%" y="469" width="0.0807%" height="15" fill="rgb(213,159,23)" fg:x="161" fg:w="1"/><text x="13.2444%" y="479.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.73%)</title><rect x="12.4294%" y="725" width="0.7264%" height="15" fill="rgb(249,77,39)" fg:x="154" fg:w="9"/><text x="12.6794%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.0751%" y="709" width="0.0807%" height="15" fill="rgb(230,13,33)" fg:x="162" fg:w="1"/><text x="13.3251%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.0751%" y="693" width="0.0807%" height="15" fill="rgb(215,215,7)" fg:x="162" fg:w="1"/><text x="13.3251%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.0751%" y="677" width="0.0807%" height="15" fill="rgb(222,92,25)" fg:x="162" fg:w="1"/><text x="13.3251%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="13.1558%" y="693" width="0.0807%" height="15" fill="rgb(215,173,22)" fg:x="163" fg:w="1"/><text x="13.4058%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="13.1558%" y="677" width="0.0807%" height="15" fill="rgb(247,205,52)" fg:x="163" fg:w="1"/><text x="13.4058%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="13.1558%" y="661" width="0.0807%" height="15" fill="rgb(240,210,37)" fg:x="163" fg:w="1"/><text x="13.4058%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.1558%" y="645" width="0.0807%" height="15" fill="rgb(224,13,10)" fg:x="163" fg:w="1"/><text x="13.4058%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.1558%" y="629" width="0.0807%" height="15" fill="rgb(209,48,33)" fg:x="163" fg:w="1"/><text x="13.4058%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1558%" y="613" width="0.0807%" height="15" fill="rgb(228,219,23)" fg:x="163" fg:w="1"/><text x="13.4058%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.1558%" y="597" width="0.0807%" height="15" fill="rgb(239,46,49)" fg:x="163" fg:w="1"/><text x="13.4058%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1558%" y="581" width="0.0807%" height="15" fill="rgb(206,172,51)" fg:x="163" fg:w="1"/><text x="13.4058%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.1558%" y="565" width="0.0807%" height="15" fill="rgb(213,212,35)" fg:x="163" fg:w="1"/><text x="13.4058%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1558%" y="549" width="0.0807%" height="15" fill="rgb(252,40,27)" fg:x="163" fg:w="1"/><text x="13.4058%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.2365%" y="661" width="0.0807%" height="15" fill="rgb(212,33,41)" fg:x="164" fg:w="1"/><text x="13.4865%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="13.2365%" y="645" width="0.0807%" height="15" fill="rgb(232,160,27)" fg:x="164" fg:w="1"/><text x="13.4865%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="13.2365%" y="629" width="0.0807%" height="15" fill="rgb(244,160,20)" fg:x="164" fg:w="1"/><text x="13.4865%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.2365%" y="613" width="0.0807%" height="15" fill="rgb(205,66,20)" fg:x="164" fg:w="1"/><text x="13.4865%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.2365%" y="597" width="0.0807%" height="15" fill="rgb(236,158,6)" fg:x="164" fg:w="1"/><text x="13.4865%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.24%)</title><rect x="13.1558%" y="725" width="0.2421%" height="15" fill="rgb(232,25,36)" fg:x="163" fg:w="3"/><text x="13.4058%" y="735.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="13.1558%" y="709" width="0.2421%" height="15" fill="rgb(220,153,35)" fg:x="163" fg:w="3"/><text x="13.4058%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="13.2365%" y="693" width="0.1614%" height="15" fill="rgb(216,5,8)" fg:x="164" fg:w="2"/><text x="13.4865%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="13.2365%" y="677" width="0.1614%" height="15" fill="rgb(240,97,3)" fg:x="164" fg:w="2"/><text x="13.4865%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.3172%" y="661" width="0.0807%" height="15" fill="rgb(220,99,26)" fg:x="165" fg:w="1"/><text x="13.5672%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.3172%" y="645" width="0.0807%" height="15" fill="rgb(237,96,2)" fg:x="165" fg:w="1"/><text x="13.5672%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3172%" y="629" width="0.0807%" height="15" fill="rgb(217,197,47)" fg:x="165" fg:w="1"/><text x="13.5672%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="13.3979%" y="725" width="0.0807%" height="15" fill="rgb(252,133,54)" fg:x="166" fg:w="1"/><text x="13.6479%" y="735.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="13.3979%" y="709" width="0.0807%" height="15" fill="rgb(233,37,30)" fg:x="166" fg:w="1"/><text x="13.6479%" y="719.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="13.3979%" y="693" width="0.0807%" height="15" fill="rgb(239,182,12)" fg:x="166" fg:w="1"/><text x="13.6479%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="13.3979%" y="677" width="0.0807%" height="15" fill="rgb(245,83,39)" fg:x="166" fg:w="1"/><text x="13.6479%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="13.3979%" y="661" width="0.0807%" height="15" fill="rgb(222,109,36)" fg:x="166" fg:w="1"/><text x="13.6479%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3979%" y="645" width="0.0807%" height="15" fill="rgb(237,95,44)" fg:x="166" fg:w="1"/><text x="13.6479%" y="655.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="13.4786%" y="709" width="0.0807%" height="15" fill="rgb(216,36,54)" fg:x="167" fg:w="1"/><text x="13.7286%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="13.4786%" y="693" width="0.0807%" height="15" fill="rgb(236,164,3)" fg:x="167" fg:w="1"/><text x="13.7286%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="13.4786%" y="677" width="0.0807%" height="15" fill="rgb(223,15,21)" fg:x="167" fg:w="1"/><text x="13.7286%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="13.4786%" y="661" width="0.0807%" height="15" fill="rgb(239,191,12)" fg:x="167" fg:w="1"/><text x="13.7286%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.4786%" y="645" width="0.0807%" height="15" fill="rgb(231,191,37)" fg:x="167" fg:w="1"/><text x="13.7286%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.4786%" y="629" width="0.0807%" height="15" fill="rgb(209,155,36)" fg:x="167" fg:w="1"/><text x="13.7286%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.4786%" y="613" width="0.0807%" height="15" fill="rgb(216,222,49)" fg:x="167" fg:w="1"/><text x="13.7286%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.4786%" y="597" width="0.0807%" height="15" fill="rgb(218,181,2)" fg:x="167" fg:w="1"/><text x="13.7286%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.4786%" y="581" width="0.0807%" height="15" fill="rgb(239,125,9)" fg:x="167" fg:w="1"/><text x="13.7286%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.4786%" y="565" width="0.0807%" height="15" fill="rgb(233,103,7)" fg:x="167" fg:w="1"/><text x="13.7286%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.4786%" y="549" width="0.0807%" height="15" fill="rgb(209,223,5)" fg:x="167" fg:w="1"/><text x="13.7286%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.4786%" y="533" width="0.0807%" height="15" fill="rgb(234,71,27)" fg:x="167" fg:w="1"/><text x="13.7286%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.4786%" y="517" width="0.0807%" height="15" fill="rgb(251,202,16)" fg:x="167" fg:w="1"/><text x="13.7286%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.4786%" y="501" width="0.0807%" height="15" fill="rgb(231,180,0)" fg:x="167" fg:w="1"/><text x="13.7286%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.4786%" y="485" width="0.0807%" height="15" fill="rgb(223,58,28)" fg:x="167" fg:w="1"/><text x="13.7286%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.4786%" y="469" width="0.0807%" height="15" fill="rgb(250,34,24)" fg:x="167" fg:w="1"/><text x="13.7286%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.4786%" y="453" width="0.0807%" height="15" fill="rgb(235,24,16)" fg:x="167" fg:w="1"/><text x="13.7286%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.4786%" y="437" width="0.0807%" height="15" fill="rgb(219,28,33)" fg:x="167" fg:w="1"/><text x="13.7286%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.4786%" y="421" width="0.0807%" height="15" fill="rgb(228,150,43)" fg:x="167" fg:w="1"/><text x="13.7286%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.4786%" y="405" width="0.0807%" height="15" fill="rgb(221,228,36)" fg:x="167" fg:w="1"/><text x="13.7286%" y="415.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (58 samples, 4.68%)</title><rect x="8.9588%" y="741" width="4.6812%" height="15" fill="rgb(232,116,17)" fg:x="111" fg:w="58"/><text x="9.2088%" y="751.50">plugi..</text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="13.4786%" y="725" width="0.1614%" height="15" fill="rgb(220,110,51)" fg:x="167" fg:w="2"/><text x="13.7286%" y="735.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="13.5593%" y="709" width="0.0807%" height="15" fill="rgb(207,26,25)" fg:x="168" fg:w="1"/><text x="13.8093%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="13.5593%" y="693" width="0.0807%" height="15" fill="rgb(223,58,19)" fg:x="168" fg:w="1"/><text x="13.8093%" y="703.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="13.5593%" y="677" width="0.0807%" height="15" fill="rgb(234,125,39)" fg:x="168" fg:w="1"/><text x="13.8093%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.5593%" y="661" width="0.0807%" height="15" fill="rgb(241,48,36)" fg:x="168" fg:w="1"/><text x="13.8093%" y="671.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="13.5593%" y="645" width="0.0807%" height="15" fill="rgb(217,148,51)" fg:x="168" fg:w="1"/><text x="13.8093%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.5593%" y="629" width="0.0807%" height="15" fill="rgb(247,17,25)" fg:x="168" fg:w="1"/><text x="13.8093%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.5593%" y="613" width="0.0807%" height="15" fill="rgb(219,89,38)" fg:x="168" fg:w="1"/><text x="13.8093%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="13.6400%" y="741" width="0.0807%" height="15" fill="rgb(220,145,2)" fg:x="169" fg:w="1"/><text x="13.8900%" y="751.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="13.6400%" y="725" width="0.0807%" height="15" fill="rgb(244,66,47)" fg:x="169" fg:w="1"/><text x="13.8900%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.7207%" y="709" width="0.0807%" height="15" fill="rgb(226,182,5)" fg:x="170" fg:w="1"/><text x="13.9707%" y="719.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="13.8015%" y="709" width="0.0807%" height="15" fill="rgb(211,98,20)" fg:x="171" fg:w="1"/><text x="14.0515%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="13.8015%" y="693" width="0.0807%" height="15" fill="rgb(217,103,52)" fg:x="171" fg:w="1"/><text x="14.0515%" y="703.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="13.8015%" y="677" width="0.0807%" height="15" fill="rgb(208,125,52)" fg:x="171" fg:w="1"/><text x="14.0515%" y="687.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="13.8822%" y="677" width="0.0807%" height="15" fill="rgb(244,70,13)" fg:x="172" fg:w="1"/><text x="14.1322%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="13.8822%" y="661" width="0.0807%" height="15" fill="rgb(253,124,3)" fg:x="172" fg:w="1"/><text x="14.1322%" y="671.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="13.8822%" y="645" width="0.0807%" height="15" fill="rgb(222,145,32)" fg:x="172" fg:w="1"/><text x="14.1322%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.8822%" y="629" width="0.0807%" height="15" fill="rgb(232,183,47)" fg:x="172" fg:w="1"/><text x="14.1322%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8822%" y="613" width="0.0807%" height="15" fill="rgb(246,226,4)" fg:x="172" fg:w="1"/><text x="14.1322%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.9629%" y="565" width="0.0807%" height="15" fill="rgb(228,185,46)" fg:x="173" fg:w="1"/><text x="14.2129%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.9629%" y="549" width="0.0807%" height="15" fill="rgb(213,196,4)" fg:x="173" fg:w="1"/><text x="14.2129%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="13.9629%" y="661" width="0.1614%" height="15" fill="rgb(212,2,45)" fg:x="173" fg:w="2"/><text x="14.2129%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="13.9629%" y="645" width="0.1614%" height="15" fill="rgb(217,145,50)" fg:x="173" fg:w="2"/><text x="14.2129%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="13.9629%" y="629" width="0.1614%" height="15" fill="rgb(242,10,46)" fg:x="173" fg:w="2"/><text x="14.2129%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="13.9629%" y="613" width="0.1614%" height="15" fill="rgb(252,91,48)" fg:x="173" fg:w="2"/><text x="14.2129%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="13.9629%" y="597" width="0.1614%" height="15" fill="rgb(216,72,13)" fg:x="173" fg:w="2"/><text x="14.2129%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="13.9629%" y="581" width="0.1614%" height="15" fill="rgb(219,6,37)" fg:x="173" fg:w="2"/><text x="14.2129%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.0436%" y="565" width="0.0807%" height="15" fill="rgb(236,185,40)" fg:x="174" fg:w="1"/><text x="14.2936%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.0436%" y="549" width="0.0807%" height="15" fill="rgb(208,81,48)" fg:x="174" fg:w="1"/><text x="14.2936%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="13.8822%" y="693" width="0.3228%" height="15" fill="rgb(211,42,33)" fg:x="172" fg:w="4"/><text x="14.1322%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="13.9629%" y="677" width="0.2421%" height="15" fill="rgb(211,90,39)" fg:x="173" fg:w="3"/><text x="14.2129%" y="687.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="14.1243%" y="661" width="0.0807%" height="15" fill="rgb(218,136,12)" fg:x="175" fg:w="1"/><text x="14.3743%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1243%" y="645" width="0.0807%" height="15" fill="rgb(234,12,32)" fg:x="175" fg:w="1"/><text x="14.3743%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.2050%" y="693" width="0.0807%" height="15" fill="rgb(221,164,18)" fg:x="176" fg:w="1"/><text x="14.4550%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.2050%" y="677" width="0.0807%" height="15" fill="rgb(239,135,14)" fg:x="176" fg:w="1"/><text x="14.4550%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.2050%" y="661" width="0.0807%" height="15" fill="rgb(226,198,47)" fg:x="176" fg:w="1"/><text x="14.4550%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.2050%" y="645" width="0.0807%" height="15" fill="rgb(244,121,47)" fg:x="176" fg:w="1"/><text x="14.4550%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (8 samples, 0.65%)</title><rect x="13.7207%" y="741" width="0.6457%" height="15" fill="rgb(226,21,48)" fg:x="170" fg:w="8"/><text x="13.9707%" y="751.50"></text></g><g><title>plugins_core::build::QuickThing::make (8 samples, 0.65%)</title><rect x="13.7207%" y="725" width="0.6457%" height="15" fill="rgb(215,178,47)" fg:x="170" fg:w="8"/><text x="13.9707%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="13.8822%" y="709" width="0.4843%" height="15" fill="rgb(206,212,19)" fg:x="172" fg:w="6"/><text x="14.1322%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.2857%" y="693" width="0.0807%" height="15" fill="rgb(230,104,34)" fg:x="177" fg:w="1"/><text x="14.5357%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="14.3664%" y="725" width="0.0807%" height="15" fill="rgb(210,96,51)" fg:x="178" fg:w="1"/><text x="14.6164%" y="735.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="14.3664%" y="709" width="0.0807%" height="15" fill="rgb(229,111,47)" fg:x="178" fg:w="1"/><text x="14.6164%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.3664%" y="693" width="0.0807%" height="15" fill="rgb(218,174,45)" fg:x="178" fg:w="1"/><text x="14.6164%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="14.3664%" y="677" width="0.0807%" height="15" fill="rgb(215,21,32)" fg:x="178" fg:w="1"/><text x="14.6164%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.3664%" y="661" width="0.0807%" height="15" fill="rgb(235,72,21)" fg:x="178" fg:w="1"/><text x="14.6164%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.3664%" y="645" width="0.0807%" height="15" fill="rgb(250,113,30)" fg:x="178" fg:w="1"/><text x="14.6164%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.3664%" y="629" width="0.0807%" height="15" fill="rgb(244,136,34)" fg:x="178" fg:w="1"/><text x="14.6164%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (2 samples, 0.16%)</title><rect x="14.4471%" y="725" width="0.1614%" height="15" fill="rgb(213,226,47)" fg:x="179" fg:w="2"/><text x="14.6971%" y="735.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.4471%" y="709" width="0.1614%" height="15" fill="rgb(224,136,40)" fg:x="179" fg:w="2"/><text x="14.6971%" y="719.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="14.6086%" y="725" width="0.1614%" height="15" fill="rgb(253,124,12)" fg:x="181" fg:w="2"/><text x="14.8586%" y="735.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="14.6893%" y="709" width="0.0807%" height="15" fill="rgb(210,67,8)" fg:x="182" fg:w="1"/><text x="14.9393%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="14.6893%" y="693" width="0.0807%" height="15" fill="rgb(210,204,0)" fg:x="182" fg:w="1"/><text x="14.9393%" y="703.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="14.6893%" y="677" width="0.0807%" height="15" fill="rgb(217,179,22)" fg:x="182" fg:w="1"/><text x="14.9393%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="14.6893%" y="661" width="0.0807%" height="15" fill="rgb(237,192,33)" fg:x="182" fg:w="1"/><text x="14.9393%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="14.6893%" y="645" width="0.0807%" height="15" fill="rgb(211,104,28)" fg:x="182" fg:w="1"/><text x="14.9393%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.6893%" y="629" width="0.0807%" height="15" fill="rgb(214,75,30)" fg:x="182" fg:w="1"/><text x="14.9393%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.6893%" y="613" width="0.0807%" height="15" fill="rgb(220,227,12)" fg:x="182" fg:w="1"/><text x="14.9393%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.6893%" y="597" width="0.0807%" height="15" fill="rgb(233,134,28)" fg:x="182" fg:w="1"/><text x="14.9393%" y="607.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="14.6893%" y="581" width="0.0807%" height="15" fill="rgb(215,146,24)" fg:x="182" fg:w="1"/><text x="14.9393%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="14.6893%" y="565" width="0.0807%" height="15" fill="rgb(248,227,20)" fg:x="182" fg:w="1"/><text x="14.9393%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="14.6893%" y="549" width="0.0807%" height="15" fill="rgb(250,44,42)" fg:x="182" fg:w="1"/><text x="14.9393%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="14.6893%" y="533" width="0.0807%" height="15" fill="rgb(219,5,35)" fg:x="182" fg:w="1"/><text x="14.9393%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="14.6893%" y="517" width="0.0807%" height="15" fill="rgb(241,132,32)" fg:x="182" fg:w="1"/><text x="14.9393%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="14.7700%" y="645" width="0.0807%" height="15" fill="rgb(234,212,51)" fg:x="183" fg:w="1"/><text x="15.0200%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.7700%" y="629" width="0.0807%" height="15" fill="rgb(242,173,29)" fg:x="183" fg:w="1"/><text x="15.0200%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.7700%" y="613" width="0.0807%" height="15" fill="rgb(212,159,2)" fg:x="183" fg:w="1"/><text x="15.0200%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="14.7700%" y="709" width="0.1614%" height="15" fill="rgb(238,165,31)" fg:x="183" fg:w="2"/><text x="15.0200%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="14.7700%" y="693" width="0.1614%" height="15" fill="rgb(241,57,36)" fg:x="183" fg:w="2"/><text x="15.0200%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="14.7700%" y="677" width="0.1614%" height="15" fill="rgb(249,7,4)" fg:x="183" fg:w="2"/><text x="15.0200%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="14.7700%" y="661" width="0.1614%" height="15" fill="rgb(250,137,44)" fg:x="183" fg:w="2"/><text x="15.0200%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="14.8507%" y="645" width="0.0807%" height="15" fill="rgb(244,185,1)" fg:x="184" fg:w="1"/><text x="15.1007%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="14.8507%" y="629" width="0.0807%" height="15" fill="rgb(216,5,53)" fg:x="184" fg:w="1"/><text x="15.1007%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (125 samples, 10.09%)</title><rect x="4.9233%" y="757" width="10.0888%" height="15" fill="rgb(234,89,21)" fg:x="61" fg:w="125"/><text x="5.1733%" y="767.50">&lt;tests::Holding..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (8 samples, 0.65%)</title><rect x="14.3664%" y="741" width="0.6457%" height="15" fill="rgb(250,81,43)" fg:x="178" fg:w="8"/><text x="14.6164%" y="751.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="14.7700%" y="725" width="0.2421%" height="15" fill="rgb(243,132,11)" fg:x="183" fg:w="3"/><text x="15.0200%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.9314%" y="709" width="0.0807%" height="15" fill="rgb(253,159,28)" fg:x="185" fg:w="1"/><text x="15.1814%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.9314%" y="693" width="0.0807%" height="15" fill="rgb(237,167,34)" fg:x="185" fg:w="1"/><text x="15.1814%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.9314%" y="677" width="0.0807%" height="15" fill="rgb(237,16,50)" fg:x="185" fg:w="1"/><text x="15.1814%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.9314%" y="661" width="0.0807%" height="15" fill="rgb(247,125,2)" fg:x="185" fg:w="1"/><text x="15.1814%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.9314%" y="645" width="0.0807%" height="15" fill="rgb(254,35,3)" fg:x="185" fg:w="1"/><text x="15.1814%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.9314%" y="629" width="0.0807%" height="15" fill="rgb(237,209,21)" fg:x="185" fg:w="1"/><text x="15.1814%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.9314%" y="613" width="0.0807%" height="15" fill="rgb(224,122,20)" fg:x="185" fg:w="1"/><text x="15.1814%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.9314%" y="597" width="0.0807%" height="15" fill="rgb(224,11,46)" fg:x="185" fg:w="1"/><text x="15.1814%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="15.0121%" y="741" width="0.1614%" height="15" fill="rgb(248,21,33)" fg:x="186" fg:w="2"/><text x="15.2621%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.0928%" y="725" width="0.0807%" height="15" fill="rgb(222,144,7)" fg:x="187" fg:w="1"/><text x="15.3428%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.0928%" y="709" width="0.0807%" height="15" fill="rgb(205,141,37)" fg:x="187" fg:w="1"/><text x="15.3428%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.0928%" y="693" width="0.0807%" height="15" fill="rgb(237,130,8)" fg:x="187" fg:w="1"/><text x="15.3428%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.0928%" y="677" width="0.0807%" height="15" fill="rgb(209,179,39)" fg:x="187" fg:w="1"/><text x="15.3428%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.0928%" y="661" width="0.0807%" height="15" fill="rgb(207,52,17)" fg:x="187" fg:w="1"/><text x="15.3428%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.0928%" y="645" width="0.0807%" height="15" fill="rgb(253,158,17)" fg:x="187" fg:w="1"/><text x="15.3428%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.0928%" y="629" width="0.0807%" height="15" fill="rgb(208,19,53)" fg:x="187" fg:w="1"/><text x="15.3428%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.0928%" y="613" width="0.0807%" height="15" fill="rgb(233,152,13)" fg:x="187" fg:w="1"/><text x="15.3428%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.0928%" y="597" width="0.0807%" height="15" fill="rgb(231,84,1)" fg:x="187" fg:w="1"/><text x="15.3428%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.0928%" y="581" width="0.0807%" height="15" fill="rgb(229,142,48)" fg:x="187" fg:w="1"/><text x="15.3428%" y="591.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.0928%" y="565" width="0.0807%" height="15" fill="rgb(248,70,29)" fg:x="187" fg:w="1"/><text x="15.3428%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.0928%" y="549" width="0.0807%" height="15" fill="rgb(250,85,7)" fg:x="187" fg:w="1"/><text x="15.3428%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="15.1735%" y="629" width="0.0807%" height="15" fill="rgb(235,140,43)" fg:x="188" fg:w="1"/><text x="15.4235%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.1735%" y="613" width="0.0807%" height="15" fill="rgb(216,0,5)" fg:x="188" fg:w="1"/><text x="15.4235%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.1735%" y="597" width="0.0807%" height="15" fill="rgb(223,167,29)" fg:x="188" fg:w="1"/><text x="15.4235%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.1735%" y="581" width="0.0807%" height="15" fill="rgb(229,150,33)" fg:x="188" fg:w="1"/><text x="15.4235%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.1735%" y="565" width="0.0807%" height="15" fill="rgb(227,26,52)" fg:x="188" fg:w="1"/><text x="15.4235%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="15.1735%" y="549" width="0.0807%" height="15" fill="rgb(250,60,52)" fg:x="188" fg:w="1"/><text x="15.4235%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="15.1735%" y="533" width="0.0807%" height="15" fill="rgb(228,81,46)" fg:x="188" fg:w="1"/><text x="15.4235%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="15.1735%" y="517" width="0.0807%" height="15" fill="rgb(225,218,31)" fg:x="188" fg:w="1"/><text x="15.4235%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="15.1735%" y="501" width="0.0807%" height="15" fill="rgb(230,35,16)" fg:x="188" fg:w="1"/><text x="15.4235%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="15.1735%" y="485" width="0.0807%" height="15" fill="rgb(247,100,0)" fg:x="188" fg:w="1"/><text x="15.4235%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="15.1735%" y="469" width="0.0807%" height="15" fill="rgb(223,135,11)" fg:x="188" fg:w="1"/><text x="15.4235%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.1735%" y="453" width="0.0807%" height="15" fill="rgb(207,136,0)" fg:x="188" fg:w="1"/><text x="15.4235%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="15.1735%" y="437" width="0.0807%" height="15" fill="rgb(246,131,25)" fg:x="188" fg:w="1"/><text x="15.4235%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.1735%" y="421" width="0.0807%" height="15" fill="rgb(209,47,12)" fg:x="188" fg:w="1"/><text x="15.4235%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="15.1735%" y="405" width="0.0807%" height="15" fill="rgb(221,25,16)" fg:x="188" fg:w="1"/><text x="15.4235%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="15.1735%" y="389" width="0.0807%" height="15" fill="rgb(223,164,33)" fg:x="188" fg:w="1"/><text x="15.4235%" y="399.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="15.1735%" y="373" width="0.0807%" height="15" fill="rgb(220,26,23)" fg:x="188" fg:w="1"/><text x="15.4235%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.1735%" y="357" width="0.0807%" height="15" fill="rgb(231,224,1)" fg:x="188" fg:w="1"/><text x="15.4235%" y="367.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="15.1735%" y="741" width="0.1614%" height="15" fill="rgb(229,221,24)" fg:x="188" fg:w="2"/><text x="15.4235%" y="751.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="15.1735%" y="725" width="0.1614%" height="15" fill="rgb(213,34,10)" fg:x="188" fg:w="2"/><text x="15.4235%" y="735.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="15.1735%" y="709" width="0.1614%" height="15" fill="rgb(215,33,11)" fg:x="188" fg:w="2"/><text x="15.4235%" y="719.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="15.1735%" y="693" width="0.1614%" height="15" fill="rgb(216,20,41)" fg:x="188" fg:w="2"/><text x="15.4235%" y="703.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="15.1735%" y="677" width="0.1614%" height="15" fill="rgb(228,43,31)" fg:x="188" fg:w="2"/><text x="15.4235%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="15.1735%" y="661" width="0.1614%" height="15" fill="rgb(227,83,26)" fg:x="188" fg:w="2"/><text x="15.4235%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="15.1735%" y="645" width="0.1614%" height="15" fill="rgb(217,168,19)" fg:x="188" fg:w="2"/><text x="15.4235%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.2542%" y="629" width="0.0807%" height="15" fill="rgb(231,34,33)" fg:x="189" fg:w="1"/><text x="15.5042%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.2542%" y="613" width="0.0807%" height="15" fill="rgb(230,120,51)" fg:x="189" fg:w="1"/><text x="15.5042%" y="623.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="15.2542%" y="597" width="0.0807%" height="15" fill="rgb(215,138,27)" fg:x="189" fg:w="1"/><text x="15.5042%" y="607.50"></text></g><g><title>engine::session::should_force_rollback (2 samples, 0.16%)</title><rect x="15.3349%" y="741" width="0.1614%" height="15" fill="rgb(246,80,47)" fg:x="190" fg:w="2"/><text x="15.5849%" y="751.50"></text></g><g><title>std::env::_var (2 samples, 0.16%)</title><rect x="15.3349%" y="725" width="0.1614%" height="15" fill="rgb(215,57,53)" fg:x="190" fg:w="2"/><text x="15.5849%" y="735.50"></text></g><g><title>std::env::var_os (2 samples, 0.16%)</title><rect x="15.3349%" y="709" width="0.1614%" height="15" fill="rgb(229,137,5)" fg:x="190" fg:w="2"/><text x="15.5849%" y="719.50"></text></g><g><title>std::env::_var_os (2 samples, 0.16%)</title><rect x="15.3349%" y="693" width="0.1614%" height="15" fill="rgb(210,86,2)" fg:x="190" fg:w="2"/><text x="15.5849%" y="703.50"></text></g><g><title>std::sys::unix::os::getenv (2 samples, 0.16%)</title><rect x="15.3349%" y="677" width="0.1614%" height="15" fill="rgb(231,226,51)" fg:x="190" fg:w="2"/><text x="15.5849%" y="687.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="15.3349%" y="661" width="0.1614%" height="15" fill="rgb(216,62,29)" fg:x="190" fg:w="2"/><text x="15.5849%" y="671.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (2 samples, 0.16%)</title><rect x="15.3349%" y="645" width="0.1614%" height="15" fill="rgb(248,202,3)" fg:x="190" fg:w="2"/><text x="15.5849%" y="655.50"></text></g><g><title>getenv (2 samples, 0.16%)</title><rect x="15.3349%" y="629" width="0.1614%" height="15" fill="rgb(225,181,7)" fg:x="190" fg:w="2"/><text x="15.5849%" y="639.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="15.6578%" y="709" width="0.0807%" height="15" fill="rgb(247,170,54)" fg:x="194" fg:w="1"/><text x="15.9078%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="15.6578%" y="693" width="0.0807%" height="15" fill="rgb(236,204,33)" fg:x="194" fg:w="1"/><text x="15.9078%" y="703.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="15.6578%" y="677" width="0.0807%" height="15" fill="rgb(216,45,30)" fg:x="194" fg:w="1"/><text x="15.9078%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.6578%" y="661" width="0.0807%" height="15" fill="rgb(213,203,16)" fg:x="194" fg:w="1"/><text x="15.9078%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="15.6578%" y="645" width="0.0807%" height="15" fill="rgb(215,46,16)" fg:x="194" fg:w="1"/><text x="15.9078%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.7385%" y="613" width="0.0807%" height="15" fill="rgb(217,162,46)" fg:x="195" fg:w="1"/><text x="15.9885%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.7385%" y="597" width="0.0807%" height="15" fill="rgb(224,189,20)" fg:x="195" fg:w="1"/><text x="15.9885%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.7385%" y="581" width="0.0807%" height="15" fill="rgb(232,35,51)" fg:x="195" fg:w="1"/><text x="15.9885%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.7385%" y="565" width="0.0807%" height="15" fill="rgb(243,221,46)" fg:x="195" fg:w="1"/><text x="15.9885%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.7385%" y="549" width="0.0807%" height="15" fill="rgb(248,16,16)" fg:x="195" fg:w="1"/><text x="15.9885%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.7385%" y="533" width="0.0807%" height="15" fill="rgb(220,168,13)" fg:x="195" fg:w="1"/><text x="15.9885%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.7385%" y="517" width="0.0807%" height="15" fill="rgb(243,102,39)" fg:x="195" fg:w="1"/><text x="15.9885%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.7385%" y="501" width="0.0807%" height="15" fill="rgb(245,82,32)" fg:x="195" fg:w="1"/><text x="15.9885%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.7385%" y="485" width="0.0807%" height="15" fill="rgb(230,164,19)" fg:x="195" fg:w="1"/><text x="15.9885%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.7385%" y="469" width="0.0807%" height="15" fill="rgb(221,9,41)" fg:x="195" fg:w="1"/><text x="15.9885%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.7385%" y="453" width="0.0807%" height="15" fill="rgb(216,93,0)" fg:x="195" fg:w="1"/><text x="15.9885%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.7385%" y="437" width="0.0807%" height="15" fill="rgb(235,113,9)" fg:x="195" fg:w="1"/><text x="15.9885%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.7385%" y="421" width="0.0807%" height="15" fill="rgb(209,224,10)" fg:x="195" fg:w="1"/><text x="15.9885%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.7385%" y="677" width="0.1614%" height="15" fill="rgb(226,54,34)" fg:x="195" fg:w="2"/><text x="15.9885%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="15.7385%" y="661" width="0.1614%" height="15" fill="rgb(222,60,8)" fg:x="195" fg:w="2"/><text x="15.9885%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.7385%" y="645" width="0.1614%" height="15" fill="rgb(248,228,41)" fg:x="195" fg:w="2"/><text x="15.9885%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.7385%" y="629" width="0.1614%" height="15" fill="rgb(226,31,32)" fg:x="195" fg:w="2"/><text x="15.9885%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.8192%" y="613" width="0.0807%" height="15" fill="rgb(242,132,49)" fg:x="196" fg:w="1"/><text x="16.0692%" y="623.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (6 samples, 0.48%)</title><rect x="15.6578%" y="725" width="0.4843%" height="15" fill="rgb(224,194,19)" fg:x="194" fg:w="6"/><text x="15.9078%" y="735.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (5 samples, 0.40%)</title><rect x="15.7385%" y="709" width="0.4036%" height="15" fill="rgb(232,200,51)" fg:x="195" fg:w="5"/><text x="15.9885%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="15.7385%" y="693" width="0.4036%" height="15" fill="rgb(235,60,46)" fg:x="195" fg:w="5"/><text x="15.9885%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="15.8999%" y="677" width="0.2421%" height="15" fill="rgb(240,109,52)" fg:x="197" fg:w="3"/><text x="16.1499%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="15.8999%" y="661" width="0.2421%" height="15" fill="rgb(215,78,37)" fg:x="197" fg:w="3"/><text x="16.1499%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="16.0613%" y="645" width="0.0807%" height="15" fill="rgb(225,141,7)" fg:x="199" fg:w="1"/><text x="16.3113%" y="655.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="16.0613%" y="629" width="0.0807%" height="15" fill="rgb(216,102,54)" fg:x="199" fg:w="1"/><text x="16.3113%" y="639.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="16.0613%" y="613" width="0.0807%" height="15" fill="rgb(238,143,13)" fg:x="199" fg:w="1"/><text x="16.3113%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.0613%" y="597" width="0.0807%" height="15" fill="rgb(219,45,51)" fg:x="199" fg:w="1"/><text x="16.3113%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.0613%" y="581" width="0.0807%" height="15" fill="rgb(242,105,46)" fg:x="199" fg:w="1"/><text x="16.3113%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.0613%" y="565" width="0.0807%" height="15" fill="rgb(206,154,49)" fg:x="199" fg:w="1"/><text x="16.3113%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.0613%" y="549" width="0.0807%" height="15" fill="rgb(239,215,4)" fg:x="199" fg:w="1"/><text x="16.3113%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.0613%" y="533" width="0.0807%" height="15" fill="rgb(238,82,17)" fg:x="199" fg:w="1"/><text x="16.3113%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::Raised&gt; (1 samples, 0.08%)</title><rect x="16.1421%" y="725" width="0.0807%" height="15" fill="rgb(242,49,30)" fg:x="200" fg:w="1"/><text x="16.3921%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.2228%" y="725" width="0.0807%" height="15" fill="rgb(248,5,16)" fg:x="201" fg:w="1"/><text x="16.4728%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.2228%" y="709" width="0.0807%" height="15" fill="rgb(237,138,32)" fg:x="201" fg:w="1"/><text x="16.4728%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.2228%" y="693" width="0.0807%" height="15" fill="rgb(235,79,45)" fg:x="201" fg:w="1"/><text x="16.4728%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.2228%" y="677" width="0.0807%" height="15" fill="rgb(213,105,25)" fg:x="201" fg:w="1"/><text x="16.4728%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="16.6263%" y="613" width="0.2421%" height="15" fill="rgb(251,131,7)" fg:x="206" fg:w="3"/><text x="16.8763%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.7877%" y="597" width="0.0807%" height="15" fill="rgb(211,155,7)" fg:x="208" fg:w="1"/><text x="17.0377%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.7877%" y="581" width="0.0807%" height="15" fill="rgb(243,70,15)" fg:x="208" fg:w="1"/><text x="17.0377%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.7877%" y="565" width="0.0807%" height="15" fill="rgb(215,171,2)" fg:x="208" fg:w="1"/><text x="17.0377%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.8684%" y="613" width="0.0807%" height="15" fill="rgb(244,121,35)" fg:x="209" fg:w="1"/><text x="17.1184%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.8684%" y="597" width="0.0807%" height="15" fill="rgb(249,147,17)" fg:x="209" fg:w="1"/><text x="17.1184%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="16.6263%" y="645" width="0.4036%" height="15" fill="rgb(241,193,52)" fg:x="206" fg:w="5"/><text x="16.8763%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="16.6263%" y="629" width="0.4036%" height="15" fill="rgb(217,159,39)" fg:x="206" fg:w="5"/><text x="16.8763%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="16.9492%" y="613" width="0.0807%" height="15" fill="rgb(248,110,0)" fg:x="210" fg:w="1"/><text x="17.1992%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.9492%" y="597" width="0.0807%" height="15" fill="rgb(233,227,0)" fg:x="210" fg:w="1"/><text x="17.1992%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="16.6263%" y="661" width="0.4843%" height="15" fill="rgb(252,55,2)" fg:x="206" fg:w="6"/><text x="16.8763%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0299%" y="645" width="0.0807%" height="15" fill="rgb(224,194,24)" fg:x="211" fg:w="1"/><text x="17.2799%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.1913%" y="645" width="0.0807%" height="15" fill="rgb(247,5,33)" fg:x="213" fg:w="1"/><text x="17.4413%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="17.2720%" y="645" width="0.1614%" height="15" fill="rgb(242,66,47)" fg:x="214" fg:w="2"/><text x="17.5220%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="17.2720%" y="629" width="0.1614%" height="15" fill="rgb(213,107,12)" fg:x="214" fg:w="2"/><text x="17.5220%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="17.2720%" y="613" width="0.1614%" height="15" fill="rgb(206,131,1)" fg:x="214" fg:w="2"/><text x="17.5220%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="17.2720%" y="597" width="0.1614%" height="15" fill="rgb(214,9,36)" fg:x="214" fg:w="2"/><text x="17.5220%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="17.2720%" y="581" width="0.1614%" height="15" fill="rgb(251,215,18)" fg:x="214" fg:w="2"/><text x="17.5220%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.3527%" y="565" width="0.0807%" height="15" fill="rgb(251,64,9)" fg:x="215" fg:w="1"/><text x="17.6027%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.3527%" y="549" width="0.0807%" height="15" fill="rgb(235,68,21)" fg:x="215" fg:w="1"/><text x="17.6027%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.3527%" y="533" width="0.0807%" height="15" fill="rgb(240,69,38)" fg:x="215" fg:w="1"/><text x="17.6027%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="17.4334%" y="629" width="0.3228%" height="15" fill="rgb(231,18,27)" fg:x="216" fg:w="4"/><text x="17.6834%" y="639.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="17.5141%" y="613" width="0.2421%" height="15" fill="rgb(215,154,25)" fg:x="217" fg:w="3"/><text x="17.7641%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.6755%" y="597" width="0.0807%" height="15" fill="rgb(224,33,46)" fg:x="219" fg:w="1"/><text x="17.9255%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="17.7563%" y="613" width="0.1614%" height="15" fill="rgb(248,191,53)" fg:x="220" fg:w="2"/><text x="18.0063%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="17.7563%" y="597" width="0.1614%" height="15" fill="rgb(231,3,37)" fg:x="220" fg:w="2"/><text x="18.0063%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="17.7563%" y="581" width="0.1614%" height="15" fill="rgb(209,152,2)" fg:x="220" fg:w="2"/><text x="18.0063%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="17.7563%" y="565" width="0.1614%" height="15" fill="rgb(212,208,43)" fg:x="220" fg:w="2"/><text x="18.0063%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.8370%" y="549" width="0.0807%" height="15" fill="rgb(208,60,49)" fg:x="221" fg:w="1"/><text x="18.0870%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.8370%" y="533" width="0.0807%" height="15" fill="rgb(245,135,6)" fg:x="221" fg:w="1"/><text x="18.0870%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.8370%" y="517" width="0.0807%" height="15" fill="rgb(243,86,23)" fg:x="221" fg:w="1"/><text x="18.0870%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="17.9177%" y="613" width="0.1614%" height="15" fill="rgb(223,7,20)" fg:x="222" fg:w="2"/><text x="18.1677%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="18.0791%" y="597" width="0.1614%" height="15" fill="rgb(212,182,17)" fg:x="224" fg:w="2"/><text x="18.3291%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="18.2405%" y="597" width="0.0807%" height="15" fill="rgb(237,94,50)" fg:x="226" fg:w="1"/><text x="18.4905%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.2405%" y="581" width="0.0807%" height="15" fill="rgb(232,185,44)" fg:x="226" fg:w="1"/><text x="18.4905%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.2405%" y="565" width="0.0807%" height="15" fill="rgb(205,50,36)" fg:x="226" fg:w="1"/><text x="18.4905%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.2405%" y="549" width="0.0807%" height="15" fill="rgb(252,32,32)" fg:x="226" fg:w="1"/><text x="18.4905%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="18.4019%" y="581" width="0.0807%" height="15" fill="rgb(241,123,33)" fg:x="228" fg:w="1"/><text x="18.6519%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.89%)</title><rect x="17.7563%" y="629" width="0.8878%" height="15" fill="rgb(212,140,16)" fg:x="220" fg:w="11"/><text x="18.0063%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="18.0791%" y="613" width="0.5650%" height="15" fill="rgb(247,132,5)" fg:x="224" fg:w="7"/><text x="18.3291%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="18.3212%" y="597" width="0.3228%" height="15" fill="rgb(209,137,38)" fg:x="227" fg:w="4"/><text x="18.5712%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="18.4826%" y="581" width="0.1614%" height="15" fill="rgb(248,32,42)" fg:x="229" fg:w="2"/><text x="18.7326%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.4826%" y="565" width="0.1614%" height="15" fill="rgb(216,188,40)" fg:x="229" fg:w="2"/><text x="18.7326%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="18.4826%" y="549" width="0.1614%" height="15" fill="rgb(209,127,53)" fg:x="229" fg:w="2"/><text x="18.7326%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (20 samples, 1.61%)</title><rect x="17.1106%" y="661" width="1.6142%" height="15" fill="rgb(254,162,9)" fg:x="212" fg:w="20"/><text x="17.3606%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.29%)</title><rect x="17.4334%" y="645" width="1.2914%" height="15" fill="rgb(219,183,10)" fg:x="216" fg:w="16"/><text x="17.6834%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.6441%" y="629" width="0.0807%" height="15" fill="rgb(217,192,21)" fg:x="231" fg:w="1"/><text x="18.8941%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.6441%" y="613" width="0.0807%" height="15" fill="rgb(251,89,27)" fg:x="231" fg:w="1"/><text x="18.8941%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.6441%" y="597" width="0.0807%" height="15" fill="rgb(253,55,28)" fg:x="231" fg:w="1"/><text x="18.8941%" y="607.50"></text></g><g><title>burrow_bon::perms::find_acls (1 samples, 0.08%)</title><rect x="18.7248%" y="661" width="0.0807%" height="15" fill="rgb(216,159,8)" fg:x="232" fg:w="1"/><text x="18.9748%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.8055%" y="581" width="0.0807%" height="15" fill="rgb(231,228,44)" fg:x="233" fg:w="1"/><text x="19.0555%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.8055%" y="565" width="0.0807%" height="15" fill="rgb(247,34,48)" fg:x="233" fg:w="1"/><text x="19.0555%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.9669%" y="565" width="0.0807%" height="15" fill="rgb(247,222,18)" fg:x="235" fg:w="1"/><text x="19.2169%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="19.2090%" y="549" width="0.1614%" height="15" fill="rgb(227,49,4)" fg:x="238" fg:w="2"/><text x="19.4590%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="19.2897%" y="533" width="0.0807%" height="15" fill="rgb(219,189,53)" fg:x="239" fg:w="1"/><text x="19.5397%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.81%)</title><rect x="18.8055%" y="629" width="0.8071%" height="15" fill="rgb(241,160,53)" fg:x="233" fg:w="10"/><text x="19.0555%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (10 samples, 0.81%)</title><rect x="18.8055%" y="613" width="0.8071%" height="15" fill="rgb(227,115,4)" fg:x="233" fg:w="10"/><text x="19.0555%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.81%)</title><rect x="18.8055%" y="597" width="0.8071%" height="15" fill="rgb(215,28,28)" fg:x="233" fg:w="10"/><text x="19.0555%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.73%)</title><rect x="18.8862%" y="581" width="0.7264%" height="15" fill="rgb(237,143,40)" fg:x="234" fg:w="9"/><text x="19.1362%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="19.0476%" y="565" width="0.5650%" height="15" fill="rgb(205,107,24)" fg:x="236" fg:w="7"/><text x="19.2976%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="19.3705%" y="549" width="0.2421%" height="15" fill="rgb(209,112,35)" fg:x="240" fg:w="3"/><text x="19.6205%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.5319%" y="533" width="0.0807%" height="15" fill="rgb(206,135,5)" fg:x="242" fg:w="1"/><text x="19.7819%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.5319%" y="517" width="0.0807%" height="15" fill="rgb(227,217,38)" fg:x="242" fg:w="1"/><text x="19.7819%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;treediff::tools::record::Recorder&lt;treediff::value::shared::Key,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="19.6126%" y="629" width="0.0807%" height="15" fill="rgb(205,0,41)" fg:x="243" fg:w="1"/><text x="19.8626%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="19.8547%" y="565" width="0.0807%" height="15" fill="rgb(220,20,40)" fg:x="246" fg:w="1"/><text x="20.1047%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (15 samples, 1.21%)</title><rect x="18.8055%" y="645" width="1.2107%" height="15" fill="rgb(216,145,3)" fg:x="233" fg:w="15"/><text x="19.0555%" y="655.50"></text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="19.6933%" y="629" width="0.3228%" height="15" fill="rgb(207,130,51)" fg:x="244" fg:w="4"/><text x="19.9433%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="19.7740%" y="613" width="0.2421%" height="15" fill="rgb(252,93,13)" fg:x="245" fg:w="3"/><text x="20.0240%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="19.7740%" y="597" width="0.2421%" height="15" fill="rgb(210,105,15)" fg:x="245" fg:w="3"/><text x="20.0240%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="19.7740%" y="581" width="0.2421%" height="15" fill="rgb(212,126,31)" fg:x="245" fg:w="3"/><text x="20.0240%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="19.9354%" y="565" width="0.0807%" height="15" fill="rgb(241,167,46)" fg:x="247" fg:w="1"/><text x="20.1854%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="19.9354%" y="549" width="0.0807%" height="15" fill="rgb(217,143,19)" fg:x="247" fg:w="1"/><text x="20.1854%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.1776%" y="597" width="0.0807%" height="15" fill="rgb(235,117,33)" fg:x="250" fg:w="1"/><text x="20.4276%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="20.0969%" y="613" width="0.2421%" height="15" fill="rgb(247,95,6)" fg:x="249" fg:w="3"/><text x="20.3469%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="20.2583%" y="597" width="0.0807%" height="15" fill="rgb(243,206,43)" fg:x="251" fg:w="1"/><text x="20.5083%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.3390%" y="581" width="0.0807%" height="15" fill="rgb(229,65,54)" fg:x="252" fg:w="1"/><text x="20.5890%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (3 samples, 0.24%)</title><rect x="20.3390%" y="613" width="0.2421%" height="15" fill="rgb(247,137,34)" fg:x="252" fg:w="3"/><text x="20.5890%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="20.3390%" y="597" width="0.2421%" height="15" fill="rgb(245,174,44)" fg:x="252" fg:w="3"/><text x="20.5890%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="20.4197%" y="581" width="0.1614%" height="15" fill="rgb(223,64,15)" fg:x="253" fg:w="2"/><text x="20.6697%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="20.5004%" y="565" width="0.0807%" height="15" fill="rgb(243,153,36)" fg:x="254" fg:w="1"/><text x="20.7504%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="20.5811%" y="613" width="0.0807%" height="15" fill="rgb(252,23,4)" fg:x="255" fg:w="1"/><text x="20.8311%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.5811%" y="597" width="0.0807%" height="15" fill="rgb(209,132,13)" fg:x="255" fg:w="1"/><text x="20.8311%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.5811%" y="581" width="0.0807%" height="15" fill="rgb(209,196,21)" fg:x="255" fg:w="1"/><text x="20.8311%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="20.6618%" y="597" width="0.0807%" height="15" fill="rgb(252,197,1)" fg:x="256" fg:w="1"/><text x="20.9118%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="20.6618%" y="613" width="0.1614%" height="15" fill="rgb(229,42,46)" fg:x="256" fg:w="2"/><text x="20.9118%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.7425%" y="597" width="0.0807%" height="15" fill="rgb(219,85,8)" fg:x="257" fg:w="1"/><text x="20.9925%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="20.9847%" y="565" width="0.3228%" height="15" fill="rgb(223,185,14)" fg:x="260" fg:w="4"/><text x="21.2347%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="21.1461%" y="549" width="0.1614%" height="15" fill="rgb(217,196,18)" fg:x="262" fg:w="2"/><text x="21.3961%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="21.3882%" y="533" width="0.0807%" height="15" fill="rgb(220,122,37)" fg:x="265" fg:w="1"/><text x="21.6382%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="21.5496%" y="469" width="0.1614%" height="15" fill="rgb(236,135,33)" fg:x="267" fg:w="2"/><text x="21.7996%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="21.6303%" y="453" width="0.0807%" height="15" fill="rgb(222,86,54)" fg:x="268" fg:w="1"/><text x="21.8803%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.6303%" y="437" width="0.0807%" height="15" fill="rgb(227,42,22)" fg:x="268" fg:w="1"/><text x="21.8803%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.48%)</title><rect x="21.3075%" y="565" width="0.4843%" height="15" fill="rgb(243,101,27)" fg:x="264" fg:w="6"/><text x="21.5575%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="21.3075%" y="549" width="0.4843%" height="15" fill="rgb(229,100,8)" fg:x="264" fg:w="6"/><text x="21.5575%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="21.4689%" y="533" width="0.3228%" height="15" fill="rgb(252,68,10)" fg:x="266" fg:w="4"/><text x="21.7189%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="21.5496%" y="517" width="0.2421%" height="15" fill="rgb(219,19,31)" fg:x="267" fg:w="3"/><text x="21.7996%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="21.5496%" y="501" width="0.2421%" height="15" fill="rgb(246,150,44)" fg:x="267" fg:w="3"/><text x="21.7996%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="21.5496%" y="485" width="0.2421%" height="15" fill="rgb(211,14,39)" fg:x="267" fg:w="3"/><text x="21.7996%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.7111%" y="469" width="0.0807%" height="15" fill="rgb(221,98,29)" fg:x="269" fg:w="1"/><text x="21.9611%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="21.8725%" y="549" width="0.0807%" height="15" fill="rgb(221,70,26)" fg:x="271" fg:w="1"/><text x="22.1225%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.9532%" y="533" width="0.0807%" height="15" fill="rgb(236,146,30)" fg:x="272" fg:w="1"/><text x="22.2032%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.9532%" y="517" width="0.0807%" height="15" fill="rgb(226,94,34)" fg:x="272" fg:w="1"/><text x="22.2032%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="22.0339%" y="517" width="0.2421%" height="15" fill="rgb(248,132,21)" fg:x="273" fg:w="3"/><text x="22.2839%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.2760%" y="501" width="0.0807%" height="15" fill="rgb(245,43,50)" fg:x="276" fg:w="1"/><text x="22.5260%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="22.2760%" y="517" width="0.1614%" height="15" fill="rgb(245,132,31)" fg:x="276" fg:w="2"/><text x="22.5260%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="22.3567%" y="501" width="0.0807%" height="15" fill="rgb(230,171,4)" fg:x="277" fg:w="1"/><text x="22.6067%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.65%)</title><rect x="21.9532%" y="549" width="0.6457%" height="15" fill="rgb(235,6,45)" fg:x="272" fg:w="8"/><text x="22.2032%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="22.0339%" y="533" width="0.5650%" height="15" fill="rgb(220,80,28)" fg:x="273" fg:w="7"/><text x="22.2839%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="22.4374%" y="517" width="0.1614%" height="15" fill="rgb(242,171,9)" fg:x="278" fg:w="2"/><text x="22.6874%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (22 samples, 1.78%)</title><rect x="20.9040%" y="597" width="1.7756%" height="15" fill="rgb(214,135,29)" fg:x="259" fg:w="22"/><text x="21.1540%" y="607.50">&lt;..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (22 samples, 1.78%)</title><rect x="20.9040%" y="581" width="1.7756%" height="15" fill="rgb(221,229,16)" fg:x="259" fg:w="22"/><text x="21.1540%" y="591.50">&lt;..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (11 samples, 0.89%)</title><rect x="21.7918%" y="565" width="0.8878%" height="15" fill="rgb(253,59,46)" fg:x="270" fg:w="11"/><text x="22.0418%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.5989%" y="549" width="0.0807%" height="15" fill="rgb(250,147,20)" fg:x="280" fg:w="1"/><text x="22.8489%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (34 samples, 2.74%)</title><rect x="20.0161%" y="645" width="2.7441%" height="15" fill="rgb(236,64,48)" fg:x="248" fg:w="34"/><text x="20.2661%" y="655.50">ke..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (34 samples, 2.74%)</title><rect x="20.0161%" y="629" width="2.7441%" height="15" fill="rgb(240,37,42)" fg:x="248" fg:w="34"/><text x="20.2661%" y="639.50">&lt;s..</text></g><g><title>serde::ser::Serializer::collect_map (24 samples, 1.94%)</title><rect x="20.8232%" y="613" width="1.9370%" height="15" fill="rgb(220,41,50)" fg:x="258" fg:w="24"/><text x="21.0732%" y="623.50">s..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.6796%" y="597" width="0.0807%" height="15" fill="rgb(216,51,14)" fg:x="281" fg:w="1"/><text x="22.9296%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.6796%" y="581" width="0.0807%" height="15" fill="rgb(215,83,10)" fg:x="281" fg:w="1"/><text x="22.9296%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="23.0024%" y="501" width="0.0807%" height="15" fill="rgb(206,144,17)" fg:x="285" fg:w="1"/><text x="23.2524%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="23.0024%" y="485" width="0.0807%" height="15" fill="rgb(219,196,37)" fg:x="285" fg:w="1"/><text x="23.2524%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.0024%" y="469" width="0.0807%" height="15" fill="rgb(226,135,26)" fg:x="285" fg:w="1"/><text x="23.2524%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.0024%" y="453" width="0.0807%" height="15" fill="rgb(237,195,40)" fg:x="285" fg:w="1"/><text x="23.2524%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.0024%" y="437" width="0.0807%" height="15" fill="rgb(228,182,42)" fg:x="285" fg:w="1"/><text x="23.2524%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="23.1638%" y="485" width="0.0807%" height="15" fill="rgb(224,135,50)" fg:x="287" fg:w="1"/><text x="23.4138%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="23.1638%" y="469" width="0.0807%" height="15" fill="rgb(236,215,34)" fg:x="287" fg:w="1"/><text x="23.4138%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.1638%" y="453" width="0.0807%" height="15" fill="rgb(244,213,27)" fg:x="287" fg:w="1"/><text x="23.4138%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.1638%" y="437" width="0.0807%" height="15" fill="rgb(233,37,53)" fg:x="287" fg:w="1"/><text x="23.4138%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.1638%" y="421" width="0.0807%" height="15" fill="rgb(222,132,14)" fg:x="287" fg:w="1"/><text x="23.4138%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="22.9217%" y="517" width="0.4843%" height="15" fill="rgb(219,202,29)" fg:x="284" fg:w="6"/><text x="23.1717%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="23.0831%" y="501" width="0.3228%" height="15" fill="rgb(226,157,39)" fg:x="286" fg:w="4"/><text x="23.3331%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="23.2446%" y="485" width="0.1614%" height="15" fill="rgb(235,213,2)" fg:x="288" fg:w="2"/><text x="23.4946%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="23.2446%" y="469" width="0.1614%" height="15" fill="rgb(250,121,2)" fg:x="288" fg:w="2"/><text x="23.4946%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.73%)</title><rect x="22.7603%" y="581" width="0.7264%" height="15" fill="rgb(206,192,33)" fg:x="282" fg:w="9"/><text x="23.0103%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.73%)</title><rect x="22.7603%" y="565" width="0.7264%" height="15" fill="rgb(240,161,6)" fg:x="282" fg:w="9"/><text x="23.0103%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.73%)</title><rect x="22.7603%" y="549" width="0.7264%" height="15" fill="rgb(246,53,30)" fg:x="282" fg:w="9"/><text x="23.0103%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.65%)</title><rect x="22.8410%" y="533" width="0.6457%" height="15" fill="rgb(219,123,43)" fg:x="283" fg:w="8"/><text x="23.0910%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.4060%" y="517" width="0.0807%" height="15" fill="rgb(236,53,49)" fg:x="290" fg:w="1"/><text x="23.6560%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.4060%" y="501" width="0.0807%" height="15" fill="rgb(241,156,1)" fg:x="290" fg:w="1"/><text x="23.6560%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.4867%" y="581" width="0.0807%" height="15" fill="rgb(209,73,26)" fg:x="291" fg:w="1"/><text x="23.7367%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="23.4867%" y="565" width="0.0807%" height="15" fill="rgb(206,114,3)" fg:x="291" fg:w="1"/><text x="23.7367%" y="575.50"></text></g><g><title>engine::session::Session::close (108 samples, 8.72%)</title><rect x="15.0121%" y="757" width="8.7167%" height="15" fill="rgb(230,214,9)" fg:x="186" fg:w="108"/><text x="15.2621%" y="767.50">engine::sess..</text></g><g><title>engine::session::state::State::close (102 samples, 8.23%)</title><rect x="15.4964%" y="741" width="8.2324%" height="15" fill="rgb(240,184,46)" fg:x="192" fg:w="102"/><text x="15.7464%" y="751.50">engine::ses..</text></g><g><title>engine::session::state::State::flush_entities (92 samples, 7.43%)</title><rect x="16.3035%" y="725" width="7.4253%" height="15" fill="rgb(242,169,54)" fg:x="202" fg:w="92"/><text x="16.5535%" y="735.50">engine::se..</text></g><g><title>core::iter::adapters::try_process (90 samples, 7.26%)</title><rect x="16.4649%" y="709" width="7.2639%" height="15" fill="rgb(207,168,50)" fg:x="204" fg:w="90"/><text x="16.7149%" y="719.50">core::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (90 samples, 7.26%)</title><rect x="16.4649%" y="693" width="7.2639%" height="15" fill="rgb(240,114,2)" fg:x="204" fg:w="90"/><text x="16.7149%" y="703.50">&lt;alloc::ve..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (89 samples, 7.18%)</title><rect x="16.5456%" y="677" width="7.1832%" height="15" fill="rgb(211,17,40)" fg:x="205" fg:w="89"/><text x="16.7956%" y="687.50">engine::se..</text></g><g><title>kernel::model::any_entity_changes (61 samples, 4.92%)</title><rect x="18.8055%" y="661" width="4.9233%" height="15" fill="rgb(235,97,36)" fg:x="233" fg:w="61"/><text x="19.0555%" y="671.50">kernel..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (12 samples, 0.97%)</title><rect x="22.7603%" y="645" width="0.9685%" height="15" fill="rgb(208,164,11)" fg:x="282" fg:w="12"/><text x="23.0103%" y="655.50"></text></g><g><title>serde_json::de::from_trait (12 samples, 0.97%)</title><rect x="22.7603%" y="629" width="0.9685%" height="15" fill="rgb(242,11,17)" fg:x="282" fg:w="12"/><text x="23.0103%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.97%)</title><rect x="22.7603%" y="613" width="0.9685%" height="15" fill="rgb(215,86,33)" fg:x="282" fg:w="12"/><text x="23.0103%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.97%)</title><rect x="22.7603%" y="597" width="0.9685%" height="15" fill="rgb(245,185,28)" fg:x="282" fg:w="12"/><text x="23.0103%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.5674%" y="581" width="0.1614%" height="15" fill="rgb(231,89,42)" fg:x="292" fg:w="2"/><text x="23.8174%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.5674%" y="565" width="0.1614%" height="15" fill="rgb(210,18,47)" fg:x="292" fg:w="2"/><text x="23.8174%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="23.6481%" y="549" width="0.0807%" height="15" fill="rgb(214,84,8)" fg:x="293" fg:w="1"/><text x="23.8981%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.9709%" y="693" width="0.0807%" height="15" fill="rgb(214,222,23)" fg:x="297" fg:w="1"/><text x="24.2209%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="23.8902%" y="709" width="0.2421%" height="15" fill="rgb(213,104,21)" fg:x="296" fg:w="3"/><text x="24.1402%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.0517%" y="693" width="0.0807%" height="15" fill="rgb(238,138,6)" fg:x="298" fg:w="1"/><text x="24.3017%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.0517%" y="677" width="0.0807%" height="15" fill="rgb(205,167,50)" fg:x="298" fg:w="1"/><text x="24.3017%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="24.0517%" y="661" width="0.0807%" height="15" fill="rgb(230,105,27)" fg:x="298" fg:w="1"/><text x="24.3017%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.0517%" y="645" width="0.0807%" height="15" fill="rgb(222,97,48)" fg:x="298" fg:w="1"/><text x="24.3017%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="24.0517%" y="629" width="0.0807%" height="15" fill="rgb(222,197,14)" fg:x="298" fg:w="1"/><text x="24.3017%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (4 samples, 0.32%)</title><rect x="23.8902%" y="725" width="0.3228%" height="15" fill="rgb(210,105,47)" fg:x="296" fg:w="4"/><text x="24.1402%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.1324%" y="709" width="0.0807%" height="15" fill="rgb(238,158,19)" fg:x="299" fg:w="1"/><text x="24.3824%" y="719.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="24.3745%" y="693" width="0.0807%" height="15" fill="rgb(226,176,23)" fg:x="302" fg:w="1"/><text x="24.6245%" y="703.50"></text></g><g><title>&lt;plugins_core::carrying::parser::DropActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="24.3745%" y="677" width="0.0807%" height="15" fill="rgb(208,79,31)" fg:x="302" fg:w="1"/><text x="24.6245%" y="687.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="24.3745%" y="661" width="0.0807%" height="15" fill="rgb(221,154,21)" fg:x="302" fg:w="1"/><text x="24.6245%" y="671.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="24.4552%" y="693" width="0.0807%" height="15" fill="rgb(213,61,41)" fg:x="303" fg:w="1"/><text x="24.7052%" y="703.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="24.4552%" y="677" width="0.0807%" height="15" fill="rgb(215,28,33)" fg:x="303" fg:w="1"/><text x="24.7052%" y="687.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="24.5359%" y="693" width="0.0807%" height="15" fill="rgb(231,139,26)" fg:x="304" fg:w="1"/><text x="24.7859%" y="703.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (6 samples, 0.48%)</title><rect x="24.2131%" y="725" width="0.4843%" height="15" fill="rgb(232,159,16)" fg:x="300" fg:w="6"/><text x="24.4631%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.40%)</title><rect x="24.2938%" y="709" width="0.4036%" height="15" fill="rgb(233,80,10)" fg:x="301" fg:w="5"/><text x="24.5438%" y="719.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="24.6166%" y="693" width="0.0807%" height="15" fill="rgb(208,147,29)" fg:x="305" fg:w="1"/><text x="24.8666%" y="703.50"></text></g><g><title>&lt;plugins_rune::parser::EditActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="24.6166%" y="677" width="0.0807%" height="15" fill="rgb(213,10,12)" fg:x="305" fg:w="1"/><text x="24.8666%" y="687.50"></text></g><g><title>&lt;kernel::session::SetSession&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="24.6973%" y="725" width="0.0807%" height="15" fill="rgb(231,218,13)" fg:x="306" fg:w="1"/><text x="24.9473%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.7780%" y="725" width="0.0807%" height="15" fill="rgb(244,199,44)" fg:x="307" fg:w="1"/><text x="25.0280%" y="735.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="24.9395%" y="485" width="0.1614%" height="15" fill="rgb(240,144,53)" fg:x="309" fg:w="2"/><text x="25.1895%" y="495.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (2 samples, 0.16%)</title><rect x="24.9395%" y="469" width="0.1614%" height="15" fill="rgb(223,57,28)" fg:x="309" fg:w="2"/><text x="25.1895%" y="479.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="24.9395%" y="453" width="0.1614%" height="15" fill="rgb(213,134,38)" fg:x="309" fg:w="2"/><text x="25.1895%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="24.9395%" y="437" width="0.1614%" height="15" fill="rgb(251,182,42)" fg:x="309" fg:w="2"/><text x="25.1895%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="24.9395%" y="421" width="0.1614%" height="15" fill="rgb(229,93,13)" fg:x="309" fg:w="2"/><text x="25.1895%" y="431.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="25.0202%" y="405" width="0.0807%" height="15" fill="rgb(234,171,3)" fg:x="310" fg:w="1"/><text x="25.2702%" y="415.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="25.0202%" y="389" width="0.0807%" height="15" fill="rgb(241,105,32)" fg:x="310" fg:w="1"/><text x="25.2702%" y="399.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="25.0202%" y="373" width="0.0807%" height="15" fill="rgb(221,66,3)" fg:x="310" fg:w="1"/><text x="25.2702%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="25.0202%" y="357" width="0.0807%" height="15" fill="rgb(248,155,29)" fg:x="310" fg:w="1"/><text x="25.2702%" y="367.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="25.0202%" y="341" width="0.0807%" height="15" fill="rgb(231,31,5)" fg:x="310" fg:w="1"/><text x="25.2702%" y="351.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="25.0202%" y="325" width="0.0807%" height="15" fill="rgb(213,188,31)" fg:x="310" fg:w="1"/><text x="25.2702%" y="335.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="25.0202%" y="309" width="0.0807%" height="15" fill="rgb(212,104,33)" fg:x="310" fg:w="1"/><text x="25.2702%" y="319.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="25.0202%" y="293" width="0.0807%" height="15" fill="rgb(254,77,51)" fg:x="310" fg:w="1"/><text x="25.2702%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="25.0202%" y="277" width="0.0807%" height="15" fill="rgb(234,39,26)" fg:x="310" fg:w="1"/><text x="25.2702%" y="287.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="25.0202%" y="261" width="0.0807%" height="15" fill="rgb(208,88,36)" fg:x="310" fg:w="1"/><text x="25.2702%" y="271.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="25.0202%" y="245" width="0.0807%" height="15" fill="rgb(243,222,10)" fg:x="310" fg:w="1"/><text x="25.2702%" y="255.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="25.0202%" y="229" width="0.0807%" height="15" fill="rgb(218,133,52)" fg:x="310" fg:w="1"/><text x="25.2702%" y="239.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="25.0202%" y="213" width="0.0807%" height="15" fill="rgb(222,25,26)" fg:x="310" fg:w="1"/><text x="25.2702%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="25.0202%" y="197" width="0.0807%" height="15" fill="rgb(243,174,24)" fg:x="310" fg:w="1"/><text x="25.2702%" y="207.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="25.0202%" y="181" width="0.0807%" height="15" fill="rgb(233,188,52)" fg:x="310" fg:w="1"/><text x="25.2702%" y="191.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="25.0202%" y="165" width="0.0807%" height="15" fill="rgb(208,89,14)" fg:x="310" fg:w="1"/><text x="25.2702%" y="175.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="25.0202%" y="149" width="0.0807%" height="15" fill="rgb(205,204,21)" fg:x="310" fg:w="1"/><text x="25.2702%" y="159.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.0202%" y="133" width="0.0807%" height="15" fill="rgb(246,39,28)" fg:x="310" fg:w="1"/><text x="25.2702%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.0202%" y="117" width="0.0807%" height="15" fill="rgb(235,71,19)" fg:x="310" fg:w="1"/><text x="25.2702%" y="127.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="25.0202%" y="101" width="0.0807%" height="15" fill="rgb(211,62,39)" fg:x="310" fg:w="1"/><text x="25.2702%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="25.0202%" y="85" width="0.0807%" height="15" fill="rgb(246,118,20)" fg:x="310" fg:w="1"/><text x="25.2702%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="25.0202%" y="69" width="0.0807%" height="15" fill="rgb(230,82,12)" fg:x="310" fg:w="1"/><text x="25.2702%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="25.0202%" y="53" width="0.0807%" height="15" fill="rgb(205,212,34)" fg:x="310" fg:w="1"/><text x="25.2702%" y="63.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="25.0202%" y="37" width="0.0807%" height="15" fill="rgb(239,90,1)" fg:x="310" fg:w="1"/><text x="25.2702%" y="47.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (3 samples, 0.24%)</title><rect x="24.9395%" y="533" width="0.2421%" height="15" fill="rgb(225,198,50)" fg:x="309" fg:w="3"/><text x="25.1895%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.24%)</title><rect x="24.9395%" y="517" width="0.2421%" height="15" fill="rgb(227,208,48)" fg:x="309" fg:w="3"/><text x="25.1895%" y="527.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (3 samples, 0.24%)</title><rect x="24.9395%" y="501" width="0.2421%" height="15" fill="rgb(238,134,41)" fg:x="309" fg:w="3"/><text x="25.1895%" y="511.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="25.1009%" y="485" width="0.0807%" height="15" fill="rgb(241,58,39)" fg:x="311" fg:w="1"/><text x="25.3509%" y="495.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (1 samples, 0.08%)</title><rect x="25.1009%" y="469" width="0.0807%" height="15" fill="rgb(214,126,4)" fg:x="311" fg:w="1"/><text x="25.3509%" y="479.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="25.1009%" y="453" width="0.0807%" height="15" fill="rgb(235,149,4)" fg:x="311" fg:w="1"/><text x="25.3509%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="25.1009%" y="437" width="0.0807%" height="15" fill="rgb(236,59,29)" fg:x="311" fg:w="1"/><text x="25.3509%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="25.1009%" y="421" width="0.0807%" height="15" fill="rgb(246,11,33)" fg:x="311" fg:w="1"/><text x="25.3509%" y="431.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="25.1009%" y="405" width="0.0807%" height="15" fill="rgb(232,180,35)" fg:x="311" fg:w="1"/><text x="25.3509%" y="415.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="25.1009%" y="389" width="0.0807%" height="15" fill="rgb(220,35,37)" fg:x="311" fg:w="1"/><text x="25.3509%" y="399.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="25.1009%" y="373" width="0.0807%" height="15" fill="rgb(238,107,48)" fg:x="311" fg:w="1"/><text x="25.3509%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="25.1009%" y="357" width="0.0807%" height="15" fill="rgb(205,65,21)" fg:x="311" fg:w="1"/><text x="25.3509%" y="367.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="25.1009%" y="341" width="0.0807%" height="15" fill="rgb(246,138,48)" fg:x="311" fg:w="1"/><text x="25.3509%" y="351.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="25.1009%" y="325" width="0.0807%" height="15" fill="rgb(209,220,47)" fg:x="311" fg:w="1"/><text x="25.3509%" y="335.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (1 samples, 0.08%)</title><rect x="25.1009%" y="309" width="0.0807%" height="15" fill="rgb(222,162,49)" fg:x="311" fg:w="1"/><text x="25.3509%" y="319.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (1 samples, 0.08%)</title><rect x="25.1009%" y="293" width="0.0807%" height="15" fill="rgb(243,123,11)" fg:x="311" fg:w="1"/><text x="25.3509%" y="303.50"></text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (1 samples, 0.08%)</title><rect x="25.1009%" y="277" width="0.0807%" height="15" fill="rgb(221,229,41)" fg:x="311" fg:w="1"/><text x="25.3509%" y="287.50"></text></g><g><title>core::unicode::unicode_data::skip_search (1 samples, 0.08%)</title><rect x="25.1009%" y="261" width="0.0807%" height="15" fill="rgb(216,68,4)" fg:x="311" fg:w="1"/><text x="25.3509%" y="271.50"></text></g><g><title>core::fmt::builders::DebugTuple::finish (1 samples, 0.08%)</title><rect x="25.1816%" y="533" width="0.0807%" height="15" fill="rgb(207,88,35)" fg:x="312" fg:w="1"/><text x="25.4316%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="25.1816%" y="517" width="0.0807%" height="15" fill="rgb(252,2,5)" fg:x="312" fg:w="1"/><text x="25.4316%" y="527.50"></text></g><g><title>core::fmt::builders::DebugTuple::finish::{{closure}} (1 samples, 0.08%)</title><rect x="25.1816%" y="501" width="0.0807%" height="15" fill="rgb(209,173,7)" fg:x="312" fg:w="1"/><text x="25.4316%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="25.1816%" y="485" width="0.0807%" height="15" fill="rgb(210,198,52)" fg:x="312" fg:w="1"/><text x="25.4316%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.1816%" y="469" width="0.0807%" height="15" fill="rgb(228,152,32)" fg:x="312" fg:w="1"/><text x="25.4316%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.1816%" y="453" width="0.0807%" height="15" fill="rgb(249,98,29)" fg:x="312" fg:w="1"/><text x="25.4316%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="25.1816%" y="437" width="0.0807%" height="15" fill="rgb(205,148,48)" fg:x="312" fg:w="1"/><text x="25.4316%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="25.1816%" y="421" width="0.0807%" height="15" fill="rgb(236,69,34)" fg:x="312" fg:w="1"/><text x="25.4316%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="25.1816%" y="405" width="0.0807%" height="15" fill="rgb(220,151,41)" fg:x="312" fg:w="1"/><text x="25.4316%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="25.1816%" y="389" width="0.0807%" height="15" fill="rgb(254,106,24)" fg:x="312" fg:w="1"/><text x="25.4316%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="25.1816%" y="373" width="0.0807%" height="15" fill="rgb(210,37,48)" fg:x="312" fg:w="1"/><text x="25.4316%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="25.1816%" y="357" width="0.0807%" height="15" fill="rgb(254,131,5)" fg:x="312" fg:w="1"/><text x="25.4316%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.08%)</title><rect x="25.1816%" y="341" width="0.0807%" height="15" fill="rgb(216,55,41)" fg:x="312" fg:w="1"/><text x="25.4316%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.08%)</title><rect x="25.1816%" y="325" width="0.0807%" height="15" fill="rgb(250,35,31)" fg:x="312" fg:w="1"/><text x="25.4316%" y="335.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (5 samples, 0.40%)</title><rect x="24.9395%" y="565" width="0.4036%" height="15" fill="rgb(207,124,33)" fg:x="309" fg:w="5"/><text x="25.1895%" y="575.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (5 samples, 0.40%)</title><rect x="24.9395%" y="549" width="0.4036%" height="15" fill="rgb(249,175,17)" fg:x="309" fg:w="5"/><text x="25.1895%" y="559.50"></text></g><g><title>core::fmt::builders::debug_tuple_new (1 samples, 0.08%)</title><rect x="25.2623%" y="533" width="0.0807%" height="15" fill="rgb(224,175,39)" fg:x="313" fg:w="1"/><text x="25.5123%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="25.2623%" y="517" width="0.0807%" height="15" fill="rgb(208,67,49)" fg:x="313" fg:w="1"/><text x="25.5123%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.2623%" y="501" width="0.0807%" height="15" fill="rgb(222,188,41)" fg:x="313" fg:w="1"/><text x="25.5123%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.2623%" y="485" width="0.0807%" height="15" fill="rgb(243,213,30)" fg:x="313" fg:w="1"/><text x="25.5123%" y="495.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="25.2623%" y="469" width="0.0807%" height="15" fill="rgb(253,100,45)" fg:x="313" fg:w="1"/><text x="25.5123%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="25.2623%" y="453" width="0.0807%" height="15" fill="rgb(226,24,44)" fg:x="313" fg:w="1"/><text x="25.5123%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="25.2623%" y="437" width="0.0807%" height="15" fill="rgb(215,41,24)" fg:x="313" fg:w="1"/><text x="25.5123%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="25.2623%" y="421" width="0.0807%" height="15" fill="rgb(254,53,33)" fg:x="313" fg:w="1"/><text x="25.5123%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="25.2623%" y="405" width="0.0807%" height="15" fill="rgb(242,103,10)" fg:x="313" fg:w="1"/><text x="25.5123%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="25.3430%" y="549" width="0.0807%" height="15" fill="rgb(246,29,21)" fg:x="314" fg:w="1"/><text x="25.5930%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="25.3430%" y="533" width="0.0807%" height="15" fill="rgb(251,154,1)" fg:x="314" fg:w="1"/><text x="25.5930%" y="543.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="25.3430%" y="517" width="0.0807%" height="15" fill="rgb(254,212,26)" fg:x="314" fg:w="1"/><text x="25.5930%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="25.3430%" y="501" width="0.0807%" height="15" fill="rgb(251,187,46)" fg:x="314" fg:w="1"/><text x="25.5930%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="25.3430%" y="485" width="0.0807%" height="15" fill="rgb(224,208,14)" fg:x="314" fg:w="1"/><text x="25.5930%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="25.3430%" y="469" width="0.0807%" height="15" fill="rgb(222,176,26)" fg:x="314" fg:w="1"/><text x="25.5930%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="25.3430%" y="453" width="0.0807%" height="15" fill="rgb(241,219,52)" fg:x="314" fg:w="1"/><text x="25.5930%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.3430%" y="437" width="0.0807%" height="15" fill="rgb(252,198,21)" fg:x="314" fg:w="1"/><text x="25.5930%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.3430%" y="421" width="0.0807%" height="15" fill="rgb(244,196,23)" fg:x="314" fg:w="1"/><text x="25.5930%" y="431.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="25.3430%" y="405" width="0.0807%" height="15" fill="rgb(239,121,44)" fg:x="314" fg:w="1"/><text x="25.5930%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="25.3430%" y="389" width="0.0807%" height="15" fill="rgb(249,203,23)" fg:x="314" fg:w="1"/><text x="25.5930%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="25.3430%" y="373" width="0.0807%" height="15" fill="rgb(238,219,10)" fg:x="314" fg:w="1"/><text x="25.5930%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="25.3430%" y="357" width="0.0807%" height="15" fill="rgb(241,35,46)" fg:x="314" fg:w="1"/><text x="25.5930%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="25.3430%" y="341" width="0.0807%" height="15" fill="rgb(218,28,6)" fg:x="314" fg:w="1"/><text x="25.5930%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="25.3430%" y="325" width="0.0807%" height="15" fill="rgb(233,151,50)" fg:x="314" fg:w="1"/><text x="25.5930%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="25.3430%" y="565" width="0.1614%" height="15" fill="rgb(208,57,8)" fg:x="314" fg:w="2"/><text x="25.5930%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.08%)</title><rect x="25.4237%" y="549" width="0.0807%" height="15" fill="rgb(253,99,10)" fg:x="315" fg:w="1"/><text x="25.6737%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="25.4237%" y="533" width="0.0807%" height="15" fill="rgb(237,196,49)" fg:x="315" fg:w="1"/><text x="25.6737%" y="543.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish::{{closure}} (1 samples, 0.08%)</title><rect x="25.4237%" y="517" width="0.0807%" height="15" fill="rgb(209,51,3)" fg:x="315" fg:w="1"/><text x="25.6737%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.4237%" y="501" width="0.0807%" height="15" fill="rgb(238,129,10)" fg:x="315" fg:w="1"/><text x="25.6737%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.4237%" y="485" width="0.0807%" height="15" fill="rgb(246,201,16)" fg:x="315" fg:w="1"/><text x="25.6737%" y="495.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="25.4237%" y="469" width="0.0807%" height="15" fill="rgb(250,160,20)" fg:x="315" fg:w="1"/><text x="25.6737%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="25.4237%" y="453" width="0.0807%" height="15" fill="rgb(251,107,25)" fg:x="315" fg:w="1"/><text x="25.6737%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="25.4237%" y="437" width="0.0807%" height="15" fill="rgb(212,103,39)" fg:x="315" fg:w="1"/><text x="25.6737%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="25.4237%" y="421" width="0.0807%" height="15" fill="rgb(207,9,29)" fg:x="315" fg:w="1"/><text x="25.6737%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="25.4237%" y="405" width="0.0807%" height="15" fill="rgb(227,84,3)" fg:x="315" fg:w="1"/><text x="25.6737%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (8 samples, 0.65%)</title><rect x="24.9395%" y="613" width="0.6457%" height="15" fill="rgb(242,194,7)" fg:x="309" fg:w="8"/><text x="25.1895%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (8 samples, 0.65%)</title><rect x="24.9395%" y="597" width="0.6457%" height="15" fill="rgb(230,40,4)" fg:x="309" fg:w="8"/><text x="25.1895%" y="607.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (8 samples, 0.65%)</title><rect x="24.9395%" y="581" width="0.6457%" height="15" fill="rgb(243,229,33)" fg:x="309" fg:w="8"/><text x="25.1895%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="25.5044%" y="565" width="0.0807%" height="15" fill="rgb(240,65,24)" fg:x="316" fg:w="1"/><text x="25.7544%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.5044%" y="549" width="0.0807%" height="15" fill="rgb(212,28,20)" fg:x="316" fg:w="1"/><text x="25.7544%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.5044%" y="533" width="0.0807%" height="15" fill="rgb(209,72,3)" fg:x="316" fg:w="1"/><text x="25.7544%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="25.5044%" y="517" width="0.0807%" height="15" fill="rgb(238,170,36)" fg:x="316" fg:w="1"/><text x="25.7544%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="25.5044%" y="501" width="0.0807%" height="15" fill="rgb(236,19,38)" fg:x="316" fg:w="1"/><text x="25.7544%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="25.5044%" y="485" width="0.0807%" height="15" fill="rgb(230,67,43)" fg:x="316" fg:w="1"/><text x="25.7544%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="25.5044%" y="469" width="0.0807%" height="15" fill="rgb(227,14,36)" fg:x="316" fg:w="1"/><text x="25.7544%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="25.5044%" y="453" width="0.0807%" height="15" fill="rgb(247,171,49)" fg:x="316" fg:w="1"/><text x="25.7544%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (10 samples, 0.81%)</title><rect x="24.8588%" y="709" width="0.8071%" height="15" fill="rgb(235,164,51)" fg:x="308" fg:w="10"/><text x="25.1088%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (10 samples, 0.81%)</title><rect x="24.8588%" y="693" width="0.8071%" height="15" fill="rgb(246,107,20)" fg:x="308" fg:w="10"/><text x="25.1088%" y="703.50"></text></g><g><title>core::fmt::write (10 samples, 0.81%)</title><rect x="24.8588%" y="677" width="0.8071%" height="15" fill="rgb(226,88,18)" fg:x="308" fg:w="10"/><text x="25.1088%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (10 samples, 0.81%)</title><rect x="24.8588%" y="661" width="0.8071%" height="15" fill="rgb(235,136,9)" fg:x="308" fg:w="10"/><text x="25.1088%" y="671.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (9 samples, 0.73%)</title><rect x="24.9395%" y="645" width="0.7264%" height="15" fill="rgb(209,3,34)" fg:x="309" fg:w="9"/><text x="25.1895%" y="655.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (9 samples, 0.73%)</title><rect x="24.9395%" y="629" width="0.7264%" height="15" fill="rgb(213,38,19)" fg:x="309" fg:w="9"/><text x="25.1895%" y="639.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="25.5851%" y="613" width="0.0807%" height="15" fill="rgb(254,24,24)" fg:x="317" fg:w="1"/><text x="25.8351%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="25.5851%" y="597" width="0.0807%" height="15" fill="rgb(219,122,42)" fg:x="317" fg:w="1"/><text x="25.8351%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.5851%" y="581" width="0.0807%" height="15" fill="rgb(205,128,31)" fg:x="317" fg:w="1"/><text x="25.8351%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.5851%" y="565" width="0.0807%" height="15" fill="rgb(212,142,0)" fg:x="317" fg:w="1"/><text x="25.8351%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="25.5851%" y="549" width="0.0807%" height="15" fill="rgb(211,25,35)" fg:x="317" fg:w="1"/><text x="25.8351%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="25.5851%" y="533" width="0.0807%" height="15" fill="rgb(220,150,53)" fg:x="317" fg:w="1"/><text x="25.8351%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="25.5851%" y="517" width="0.0807%" height="15" fill="rgb(220,30,24)" fg:x="317" fg:w="1"/><text x="25.8351%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="25.5851%" y="501" width="0.0807%" height="15" fill="rgb(218,86,23)" fg:x="317" fg:w="1"/><text x="25.8351%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="25.5851%" y="485" width="0.0807%" height="15" fill="rgb(206,62,27)" fg:x="317" fg:w="1"/><text x="25.8351%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="25.5851%" y="469" width="0.0807%" height="15" fill="rgb(249,174,0)" fg:x="317" fg:w="1"/><text x="25.8351%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.5851%" y="453" width="0.0807%" height="15" fill="rgb(246,67,27)" fg:x="317" fg:w="1"/><text x="25.8351%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="25.5851%" y="437" width="0.0807%" height="15" fill="rgb(250,195,30)" fg:x="317" fg:w="1"/><text x="25.8351%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.5851%" y="421" width="0.0807%" height="15" fill="rgb(251,171,50)" fg:x="317" fg:w="1"/><text x="25.8351%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.08%)</title><rect x="25.5851%" y="405" width="0.0807%" height="15" fill="rgb(236,196,10)" fg:x="317" fg:w="1"/><text x="25.8351%" y="415.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="25.6659%" y="693" width="0.0807%" height="15" fill="rgb(249,228,52)" fg:x="318" fg:w="1"/><text x="25.9159%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="25.6659%" y="677" width="0.0807%" height="15" fill="rgb(219,60,51)" fg:x="318" fg:w="1"/><text x="25.9159%" y="687.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="25.6659%" y="661" width="0.0807%" height="15" fill="rgb(240,198,24)" fg:x="318" fg:w="1"/><text x="25.9159%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (1 samples, 0.08%)</title><rect x="25.7466%" y="693" width="0.0807%" height="15" fill="rgb(240,192,40)" fg:x="319" fg:w="1"/><text x="25.9966%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="25.7466%" y="677" width="0.0807%" height="15" fill="rgb(219,118,5)" fg:x="319" fg:w="1"/><text x="25.9966%" y="687.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (5 samples, 0.40%)</title><rect x="25.8273%" y="661" width="0.4036%" height="15" fill="rgb(205,202,34)" fg:x="320" fg:w="5"/><text x="26.0773%" y="671.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (3 samples, 0.24%)</title><rect x="25.9887%" y="645" width="0.2421%" height="15" fill="rgb(234,153,26)" fg:x="322" fg:w="3"/><text x="26.2387%" y="655.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (6 samples, 0.48%)</title><rect x="25.8273%" y="693" width="0.4843%" height="15" fill="rgb(229,26,29)" fg:x="320" fg:w="6"/><text x="26.0773%" y="703.50"></text></g><g><title>tracing_core::callsite::register_dispatch (6 samples, 0.48%)</title><rect x="25.8273%" y="677" width="0.4843%" height="15" fill="rgb(237,115,21)" fg:x="320" fg:w="6"/><text x="26.0773%" y="687.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (1 samples, 0.08%)</title><rect x="26.2308%" y="661" width="0.0807%" height="15" fill="rgb(252,144,15)" fg:x="325" fg:w="1"/><text x="26.4808%" y="671.50"></text></g><g><title>tracing_core::dispatcher::get_default (1 samples, 0.08%)</title><rect x="26.3115%" y="693" width="0.0807%" height="15" fill="rgb(232,26,13)" fg:x="326" fg:w="1"/><text x="26.5615%" y="703.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::downgrade (1 samples, 0.08%)</title><rect x="26.3115%" y="677" width="0.0807%" height="15" fill="rgb(206,44,19)" fg:x="326" fg:w="1"/><text x="26.5615%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="26.6344%" y="565" width="0.1614%" height="15" fill="rgb(249,159,2)" fg:x="330" fg:w="2"/><text x="26.8844%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="26.6344%" y="549" width="0.1614%" height="15" fill="rgb(231,5,32)" fg:x="330" fg:w="2"/><text x="26.8844%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.7151%" y="533" width="0.0807%" height="15" fill="rgb(249,210,18)" fg:x="331" fg:w="1"/><text x="26.9651%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.7151%" y="517" width="0.0807%" height="15" fill="rgb(215,223,36)" fg:x="331" fg:w="1"/><text x="26.9651%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="26.7151%" y="501" width="0.0807%" height="15" fill="rgb(245,185,20)" fg:x="331" fg:w="1"/><text x="26.9651%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="26.7151%" y="485" width="0.0807%" height="15" fill="rgb(206,224,11)" fg:x="331" fg:w="1"/><text x="26.9651%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="26.7151%" y="469" width="0.0807%" height="15" fill="rgb(248,73,42)" fg:x="331" fg:w="1"/><text x="26.9651%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="26.7151%" y="453" width="0.0807%" height="15" fill="rgb(219,149,31)" fg:x="331" fg:w="1"/><text x="26.9651%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="26.7151%" y="437" width="0.0807%" height="15" fill="rgb(243,104,17)" fg:x="331" fg:w="1"/><text x="26.9651%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="26.7151%" y="421" width="0.0807%" height="15" fill="rgb(244,117,33)" fg:x="331" fg:w="1"/><text x="26.9651%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="26.7151%" y="405" width="0.0807%" height="15" fill="rgb(251,25,47)" fg:x="331" fg:w="1"/><text x="26.9651%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="26.7151%" y="389" width="0.0807%" height="15" fill="rgb(249,70,13)" fg:x="331" fg:w="1"/><text x="26.9651%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="26.7151%" y="373" width="0.0807%" height="15" fill="rgb(217,133,18)" fg:x="331" fg:w="1"/><text x="26.9651%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.7151%" y="357" width="0.0807%" height="15" fill="rgb(248,97,28)" fg:x="331" fg:w="1"/><text x="26.9651%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="26.6344%" y="581" width="0.2421%" height="15" fill="rgb(237,193,4)" fg:x="330" fg:w="3"/><text x="26.8844%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.7958%" y="565" width="0.0807%" height="15" fill="rgb(247,198,45)" fg:x="332" fg:w="1"/><text x="27.0458%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.7958%" y="549" width="0.0807%" height="15" fill="rgb(245,2,20)" fg:x="332" fg:w="1"/><text x="27.0458%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.8765%" y="517" width="0.0807%" height="15" fill="rgb(210,71,36)" fg:x="333" fg:w="1"/><text x="27.1265%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.8765%" y="501" width="0.0807%" height="15" fill="rgb(238,114,30)" fg:x="333" fg:w="1"/><text x="27.1265%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.8765%" y="485" width="0.0807%" height="15" fill="rgb(241,200,2)" fg:x="333" fg:w="1"/><text x="27.1265%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.8765%" y="469" width="0.0807%" height="15" fill="rgb(232,106,18)" fg:x="333" fg:w="1"/><text x="27.1265%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="26.8765%" y="453" width="0.0807%" height="15" fill="rgb(211,141,18)" fg:x="333" fg:w="1"/><text x="27.1265%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="26.8765%" y="437" width="0.0807%" height="15" fill="rgb(224,9,9)" fg:x="333" fg:w="1"/><text x="27.1265%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="26.8765%" y="421" width="0.0807%" height="15" fill="rgb(249,137,46)" fg:x="333" fg:w="1"/><text x="27.1265%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="26.8765%" y="405" width="0.0807%" height="15" fill="rgb(236,44,45)" fg:x="333" fg:w="1"/><text x="27.1265%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="26.8765%" y="389" width="0.0807%" height="15" fill="rgb(205,68,40)" fg:x="333" fg:w="1"/><text x="27.1265%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="26.8765%" y="373" width="0.0807%" height="15" fill="rgb(214,198,49)" fg:x="333" fg:w="1"/><text x="27.1265%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="26.8765%" y="357" width="0.0807%" height="15" fill="rgb(226,140,45)" fg:x="333" fg:w="1"/><text x="27.1265%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="26.8765%" y="341" width="0.0807%" height="15" fill="rgb(209,109,20)" fg:x="333" fg:w="1"/><text x="27.1265%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="26.8765%" y="325" width="0.0807%" height="15" fill="rgb(217,33,46)" fg:x="333" fg:w="1"/><text x="27.1265%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.8765%" y="309" width="0.0807%" height="15" fill="rgb(232,150,33)" fg:x="333" fg:w="1"/><text x="27.1265%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="26.9572%" y="517" width="0.0807%" height="15" fill="rgb(233,76,25)" fg:x="334" fg:w="1"/><text x="27.2072%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.9572%" y="501" width="0.0807%" height="15" fill="rgb(254,219,23)" fg:x="334" fg:w="1"/><text x="27.2072%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.9572%" y="485" width="0.0807%" height="15" fill="rgb(233,108,4)" fg:x="334" fg:w="1"/><text x="27.2072%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="26.9572%" y="469" width="0.0807%" height="15" fill="rgb(229,98,6)" fg:x="334" fg:w="1"/><text x="27.2072%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.9572%" y="453" width="0.0807%" height="15" fill="rgb(217,40,27)" fg:x="334" fg:w="1"/><text x="27.2072%" y="463.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="26.9572%" y="437" width="0.0807%" height="15" fill="rgb(221,35,43)" fg:x="334" fg:w="1"/><text x="27.2072%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.9572%" y="421" width="0.0807%" height="15" fill="rgb(212,107,11)" fg:x="334" fg:w="1"/><text x="27.2072%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.9572%" y="405" width="0.0807%" height="15" fill="rgb(245,42,44)" fg:x="334" fg:w="1"/><text x="27.2072%" y="415.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="26.9572%" y="389" width="0.0807%" height="15" fill="rgb(209,31,12)" fg:x="334" fg:w="1"/><text x="27.2072%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.9572%" y="373" width="0.0807%" height="15" fill="rgb(210,228,54)" fg:x="334" fg:w="1"/><text x="27.2072%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.9572%" y="357" width="0.0807%" height="15" fill="rgb(241,19,33)" fg:x="334" fg:w="1"/><text x="27.2072%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.9572%" y="341" width="0.0807%" height="15" fill="rgb(229,51,27)" fg:x="334" fg:w="1"/><text x="27.2072%" y="351.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="26.9572%" y="325" width="0.0807%" height="15" fill="rgb(214,167,49)" fg:x="334" fg:w="1"/><text x="27.2072%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="26.9572%" y="309" width="0.0807%" height="15" fill="rgb(248,140,47)" fg:x="334" fg:w="1"/><text x="27.2072%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.9572%" y="293" width="0.0807%" height="15" fill="rgb(228,6,51)" fg:x="334" fg:w="1"/><text x="27.2072%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="27.0379%" y="373" width="0.0807%" height="15" fill="rgb(242,44,53)" fg:x="335" fg:w="1"/><text x="27.2879%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.0379%" y="357" width="0.0807%" height="15" fill="rgb(249,90,50)" fg:x="335" fg:w="1"/><text x="27.2879%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.0379%" y="341" width="0.0807%" height="15" fill="rgb(222,84,19)" fg:x="335" fg:w="1"/><text x="27.2879%" y="351.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="27.0379%" y="325" width="0.0807%" height="15" fill="rgb(214,140,12)" fg:x="335" fg:w="1"/><text x="27.2879%" y="335.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="27.1186%" y="309" width="0.0807%" height="15" fill="rgb(210,20,43)" fg:x="336" fg:w="1"/><text x="27.3686%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="27.0379%" y="389" width="0.2421%" height="15" fill="rgb(243,1,40)" fg:x="335" fg:w="3"/><text x="27.2879%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="27.1186%" y="373" width="0.1614%" height="15" fill="rgb(224,102,26)" fg:x="336" fg:w="2"/><text x="27.3686%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="27.1186%" y="357" width="0.1614%" height="15" fill="rgb(221,179,1)" fg:x="336" fg:w="2"/><text x="27.3686%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="27.1186%" y="341" width="0.1614%" height="15" fill="rgb(216,209,47)" fg:x="336" fg:w="2"/><text x="27.3686%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="27.1186%" y="325" width="0.1614%" height="15" fill="rgb(251,135,9)" fg:x="336" fg:w="2"/><text x="27.3686%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.1994%" y="309" width="0.0807%" height="15" fill="rgb(242,9,36)" fg:x="337" fg:w="1"/><text x="27.4494%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="27.0379%" y="453" width="0.3228%" height="15" fill="rgb(249,60,37)" fg:x="335" fg:w="4"/><text x="27.2879%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="27.0379%" y="437" width="0.3228%" height="15" fill="rgb(230,66,45)" fg:x="335" fg:w="4"/><text x="27.2879%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="27.0379%" y="421" width="0.3228%" height="15" fill="rgb(216,1,47)" fg:x="335" fg:w="4"/><text x="27.2879%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="27.0379%" y="405" width="0.3228%" height="15" fill="rgb(235,8,23)" fg:x="335" fg:w="4"/><text x="27.2879%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.2801%" y="389" width="0.0807%" height="15" fill="rgb(225,136,11)" fg:x="338" fg:w="1"/><text x="27.5301%" y="399.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="26.8765%" y="533" width="0.5650%" height="15" fill="rgb(228,63,44)" fg:x="333" fg:w="7"/><text x="27.1265%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="27.0379%" y="517" width="0.4036%" height="15" fill="rgb(240,43,52)" fg:x="335" fg:w="5"/><text x="27.2879%" y="527.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="27.0379%" y="501" width="0.4036%" height="15" fill="rgb(217,167,36)" fg:x="335" fg:w="5"/><text x="27.2879%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="27.0379%" y="485" width="0.4036%" height="15" fill="rgb(250,19,6)" fg:x="335" fg:w="5"/><text x="27.2879%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="27.0379%" y="469" width="0.4036%" height="15" fill="rgb(236,60,51)" fg:x="335" fg:w="5"/><text x="27.2879%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.3608%" y="453" width="0.0807%" height="15" fill="rgb(222,217,20)" fg:x="339" fg:w="1"/><text x="27.6108%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.3608%" y="437" width="0.0807%" height="15" fill="rgb(242,65,52)" fg:x="339" fg:w="1"/><text x="27.6108%" y="447.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.65%)</title><rect x="26.8765%" y="581" width="0.6457%" height="15" fill="rgb(217,5,41)" fg:x="333" fg:w="8"/><text x="27.1265%" y="591.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.65%)</title><rect x="26.8765%" y="565" width="0.6457%" height="15" fill="rgb(223,208,53)" fg:x="333" fg:w="8"/><text x="27.1265%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.65%)</title><rect x="26.8765%" y="549" width="0.6457%" height="15" fill="rgb(221,104,30)" fg:x="333" fg:w="8"/><text x="27.1265%" y="559.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="27.4415%" y="533" width="0.0807%" height="15" fill="rgb(230,210,42)" fg:x="340" fg:w="1"/><text x="27.6915%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (12 samples, 0.97%)</title><rect x="26.6344%" y="597" width="0.9685%" height="15" fill="rgb(206,205,27)" fg:x="330" fg:w="12"/><text x="26.8844%" y="607.50"></text></g><g><title>plugins_core::finding::DefaultFinder::find_top_container (1 samples, 0.08%)</title><rect x="27.5222%" y="581" width="0.0807%" height="15" fill="rgb(233,114,38)" fg:x="341" fg:w="1"/><text x="27.7722%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="27.5222%" y="565" width="0.0807%" height="15" fill="rgb(216,174,36)" fg:x="341" fg:w="1"/><text x="27.7722%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="27.5222%" y="549" width="0.0807%" height="15" fill="rgb(211,30,9)" fg:x="341" fg:w="1"/><text x="27.7722%" y="559.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (14 samples, 1.13%)</title><rect x="26.5537%" y="613" width="1.1299%" height="15" fill="rgb(216,8,21)" fg:x="329" fg:w="14"/><text x="26.8037%" y="623.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="27.6029%" y="597" width="0.0807%" height="15" fill="rgb(237,209,39)" fg:x="342" fg:w="1"/><text x="27.8529%" y="607.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="27.6029%" y="581" width="0.0807%" height="15" fill="rgb(235,111,47)" fg:x="342" fg:w="1"/><text x="27.8529%" y="591.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="27.6029%" y="565" width="0.0807%" height="15" fill="rgb(216,139,9)" fg:x="342" fg:w="1"/><text x="27.8529%" y="575.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="27.6029%" y="549" width="0.0807%" height="15" fill="rgb(248,185,4)" fg:x="342" fg:w="1"/><text x="27.8529%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="27.6029%" y="533" width="0.0807%" height="15" fill="rgb(239,185,25)" fg:x="342" fg:w="1"/><text x="27.8529%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="27.6029%" y="517" width="0.0807%" height="15" fill="rgb(233,207,8)" fg:x="342" fg:w="1"/><text x="27.8529%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.8450%" y="517" width="0.0807%" height="15" fill="rgb(249,220,24)" fg:x="345" fg:w="1"/><text x="28.0950%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="28.1679%" y="405" width="0.0807%" height="15" fill="rgb(221,50,14)" fg:x="349" fg:w="1"/><text x="28.4179%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="28.1679%" y="389" width="0.0807%" height="15" fill="rgb(227,79,42)" fg:x="349" fg:w="1"/><text x="28.4179%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="28.1679%" y="373" width="0.0807%" height="15" fill="rgb(228,218,49)" fg:x="349" fg:w="1"/><text x="28.4179%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="28.2486%" y="373" width="0.0807%" height="15" fill="rgb(249,18,15)" fg:x="350" fg:w="1"/><text x="28.4986%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="28.1679%" y="421" width="0.2421%" height="15" fill="rgb(212,84,27)" fg:x="349" fg:w="3"/><text x="28.4179%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="28.2486%" y="405" width="0.1614%" height="15" fill="rgb(207,83,24)" fg:x="350" fg:w="2"/><text x="28.4986%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.2486%" y="389" width="0.1614%" height="15" fill="rgb(219,61,7)" fg:x="350" fg:w="2"/><text x="28.4986%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.3293%" y="373" width="0.0807%" height="15" fill="rgb(211,43,29)" fg:x="351" fg:w="1"/><text x="28.5793%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.3293%" y="357" width="0.0807%" height="15" fill="rgb(243,15,23)" fg:x="351" fg:w="1"/><text x="28.5793%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.3293%" y="341" width="0.0807%" height="15" fill="rgb(217,52,28)" fg:x="351" fg:w="1"/><text x="28.5793%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="28.4100%" y="421" width="0.0807%" height="15" fill="rgb(210,35,6)" fg:x="352" fg:w="1"/><text x="28.6600%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.4100%" y="405" width="0.0807%" height="15" fill="rgb(237,187,28)" fg:x="352" fg:w="1"/><text x="28.6600%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.4907%" y="389" width="0.0807%" height="15" fill="rgb(231,136,24)" fg:x="353" fg:w="1"/><text x="28.7407%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.4907%" y="373" width="0.0807%" height="15" fill="rgb(205,176,52)" fg:x="353" fg:w="1"/><text x="28.7407%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.4907%" y="357" width="0.0807%" height="15" fill="rgb(218,65,12)" fg:x="353" fg:w="1"/><text x="28.7407%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.4907%" y="341" width="0.0807%" height="15" fill="rgb(234,101,21)" fg:x="353" fg:w="1"/><text x="28.7407%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.4907%" y="325" width="0.0807%" height="15" fill="rgb(206,13,20)" fg:x="353" fg:w="1"/><text x="28.7407%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="28.4907%" y="309" width="0.0807%" height="15" fill="rgb(236,89,44)" fg:x="353" fg:w="1"/><text x="28.7407%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="28.4907%" y="293" width="0.0807%" height="15" fill="rgb(225,52,17)" fg:x="353" fg:w="1"/><text x="28.7407%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="28.4907%" y="277" width="0.0807%" height="15" fill="rgb(214,27,25)" fg:x="353" fg:w="1"/><text x="28.7407%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.4907%" y="261" width="0.0807%" height="15" fill="rgb(240,141,35)" fg:x="353" fg:w="1"/><text x="28.7407%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.4907%" y="245" width="0.0807%" height="15" fill="rgb(216,126,3)" fg:x="353" fg:w="1"/><text x="28.7407%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="28.4907%" y="229" width="0.0807%" height="15" fill="rgb(249,196,23)" fg:x="353" fg:w="1"/><text x="28.7407%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="28.4907%" y="213" width="0.0807%" height="15" fill="rgb(215,185,43)" fg:x="353" fg:w="1"/><text x="28.7407%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="28.4907%" y="197" width="0.0807%" height="15" fill="rgb(208,194,36)" fg:x="353" fg:w="1"/><text x="28.7407%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="28.4907%" y="181" width="0.0807%" height="15" fill="rgb(245,182,12)" fg:x="353" fg:w="1"/><text x="28.7407%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.4907%" y="165" width="0.0807%" height="15" fill="rgb(244,222,52)" fg:x="353" fg:w="1"/><text x="28.7407%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.5714%" y="389" width="0.0807%" height="15" fill="rgb(236,222,51)" fg:x="354" fg:w="1"/><text x="28.8214%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="28.6521%" y="389" width="0.0807%" height="15" fill="rgb(254,71,22)" fg:x="355" fg:w="1"/><text x="28.9021%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="28.7328%" y="325" width="0.1614%" height="15" fill="rgb(250,104,15)" fg:x="356" fg:w="2"/><text x="28.9828%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="28.8136%" y="309" width="0.0807%" height="15" fill="rgb(229,223,46)" fg:x="357" fg:w="1"/><text x="29.0636%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="28.7328%" y="357" width="0.2421%" height="15" fill="rgb(209,129,18)" fg:x="356" fg:w="3"/><text x="28.9828%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="28.7328%" y="341" width="0.2421%" height="15" fill="rgb(224,160,1)" fg:x="356" fg:w="3"/><text x="28.9828%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.8943%" y="325" width="0.0807%" height="15" fill="rgb(237,112,21)" fg:x="358" fg:w="1"/><text x="29.1443%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.8943%" y="309" width="0.0807%" height="15" fill="rgb(215,198,53)" fg:x="358" fg:w="1"/><text x="29.1443%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.56%)</title><rect x="28.4907%" y="405" width="0.5650%" height="15" fill="rgb(218,227,35)" fg:x="353" fg:w="7"/><text x="28.7407%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="28.7328%" y="389" width="0.3228%" height="15" fill="rgb(232,121,22)" fg:x="356" fg:w="4"/><text x="28.9828%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="28.7328%" y="373" width="0.3228%" height="15" fill="rgb(235,52,54)" fg:x="356" fg:w="4"/><text x="28.9828%" y="383.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="28.9750%" y="357" width="0.0807%" height="15" fill="rgb(219,21,44)" fg:x="359" fg:w="1"/><text x="29.2250%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (8 samples, 0.65%)</title><rect x="28.4907%" y="421" width="0.6457%" height="15" fill="rgb(221,51,43)" fg:x="353" fg:w="8"/><text x="28.7407%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="29.0557%" y="405" width="0.0807%" height="15" fill="rgb(225,77,42)" fg:x="360" fg:w="1"/><text x="29.3057%" y="415.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="29.1364%" y="421" width="0.0807%" height="15" fill="rgb(214,117,53)" fg:x="361" fg:w="1"/><text x="29.3864%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="29.1364%" y="405" width="0.0807%" height="15" fill="rgb(218,227,27)" fg:x="361" fg:w="1"/><text x="29.3864%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="29.1364%" y="389" width="0.0807%" height="15" fill="rgb(223,214,36)" fg:x="361" fg:w="1"/><text x="29.3864%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="29.1364%" y="373" width="0.0807%" height="15" fill="rgb(235,21,7)" fg:x="361" fg:w="1"/><text x="29.3864%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="29.1364%" y="357" width="0.0807%" height="15" fill="rgb(244,216,4)" fg:x="361" fg:w="1"/><text x="29.3864%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.1364%" y="341" width="0.0807%" height="15" fill="rgb(249,197,24)" fg:x="361" fg:w="1"/><text x="29.3864%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.1364%" y="325" width="0.0807%" height="15" fill="rgb(222,169,49)" fg:x="361" fg:w="1"/><text x="29.3864%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.1364%" y="309" width="0.0807%" height="15" fill="rgb(207,137,33)" fg:x="361" fg:w="1"/><text x="29.3864%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.2171%" y="389" width="0.0807%" height="15" fill="rgb(219,180,40)" fg:x="362" fg:w="1"/><text x="29.4671%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.2171%" y="373" width="0.0807%" height="15" fill="rgb(250,163,42)" fg:x="362" fg:w="1"/><text x="29.4671%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.2171%" y="357" width="0.0807%" height="15" fill="rgb(239,163,0)" fg:x="362" fg:w="1"/><text x="29.4671%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.2978%" y="389" width="0.0807%" height="15" fill="rgb(252,38,28)" fg:x="363" fg:w="1"/><text x="29.5478%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.32%)</title><rect x="29.2171%" y="421" width="0.3228%" height="15" fill="rgb(254,203,26)" fg:x="362" fg:w="4"/><text x="29.4671%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="29.2171%" y="405" width="0.3228%" height="15" fill="rgb(209,129,32)" fg:x="362" fg:w="4"/><text x="29.4671%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="29.3785%" y="389" width="0.1614%" height="15" fill="rgb(207,177,52)" fg:x="364" fg:w="2"/><text x="29.6285%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="29.3785%" y="373" width="0.1614%" height="15" fill="rgb(230,209,36)" fg:x="364" fg:w="2"/><text x="29.6285%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.4592%" y="357" width="0.0807%" height="15" fill="rgb(238,131,0)" fg:x="365" fg:w="1"/><text x="29.7092%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="29.5400%" y="421" width="0.0807%" height="15" fill="rgb(218,61,31)" fg:x="366" fg:w="1"/><text x="29.7900%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.5400%" y="405" width="0.0807%" height="15" fill="rgb(232,6,53)" fg:x="366" fg:w="1"/><text x="29.7900%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="29.6207%" y="373" width="0.0807%" height="15" fill="rgb(254,100,32)" fg:x="367" fg:w="1"/><text x="29.8707%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="29.6207%" y="357" width="0.0807%" height="15" fill="rgb(229,194,49)" fg:x="367" fg:w="1"/><text x="29.8707%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="29.6207%" y="341" width="0.0807%" height="15" fill="rgb(206,208,39)" fg:x="367" fg:w="1"/><text x="29.8707%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="29.6207%" y="325" width="0.0807%" height="15" fill="rgb(246,226,14)" fg:x="367" fg:w="1"/><text x="29.8707%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="29.6207%" y="309" width="0.0807%" height="15" fill="rgb(226,48,32)" fg:x="367" fg:w="1"/><text x="29.8707%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="29.6207%" y="293" width="0.0807%" height="15" fill="rgb(252,43,54)" fg:x="367" fg:w="1"/><text x="29.8707%" y="303.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="29.6207%" y="277" width="0.0807%" height="15" fill="rgb(207,124,0)" fg:x="367" fg:w="1"/><text x="29.8707%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="29.6207%" y="261" width="0.0807%" height="15" fill="rgb(248,188,30)" fg:x="367" fg:w="1"/><text x="29.8707%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="29.6207%" y="245" width="0.0807%" height="15" fill="rgb(232,14,43)" fg:x="367" fg:w="1"/><text x="29.8707%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="29.6207%" y="229" width="0.0807%" height="15" fill="rgb(218,52,29)" fg:x="367" fg:w="1"/><text x="29.8707%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="29.6207%" y="213" width="0.0807%" height="15" fill="rgb(218,176,50)" fg:x="367" fg:w="1"/><text x="29.8707%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="29.7014%" y="341" width="0.0807%" height="15" fill="rgb(213,112,0)" fg:x="368" fg:w="1"/><text x="29.9514%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="29.7014%" y="325" width="0.0807%" height="15" fill="rgb(244,216,8)" fg:x="368" fg:w="1"/><text x="29.9514%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="29.7014%" y="309" width="0.0807%" height="15" fill="rgb(224,148,53)" fg:x="368" fg:w="1"/><text x="29.9514%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="29.7014%" y="293" width="0.0807%" height="15" fill="rgb(241,133,40)" fg:x="368" fg:w="1"/><text x="29.9514%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="29.7014%" y="277" width="0.0807%" height="15" fill="rgb(232,17,44)" fg:x="368" fg:w="1"/><text x="29.9514%" y="287.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="29.7014%" y="261" width="0.0807%" height="15" fill="rgb(213,32,25)" fg:x="368" fg:w="1"/><text x="29.9514%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="29.7821%" y="309" width="0.1614%" height="15" fill="rgb(249,115,27)" fg:x="369" fg:w="2"/><text x="30.0321%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="29.9435%" y="309" width="0.2421%" height="15" fill="rgb(241,50,1)" fg:x="371" fg:w="3"/><text x="30.1935%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (3 samples, 0.24%)</title><rect x="29.9435%" y="293" width="0.2421%" height="15" fill="rgb(244,175,40)" fg:x="371" fg:w="3"/><text x="30.1935%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="29.9435%" y="277" width="0.2421%" height="15" fill="rgb(230,94,34)" fg:x="371" fg:w="3"/><text x="30.1935%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.1049%" y="261" width="0.0807%" height="15" fill="rgb(223,185,29)" fg:x="373" fg:w="1"/><text x="30.3549%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="30.1856%" y="293" width="0.1614%" height="15" fill="rgb(225,193,15)" fg:x="374" fg:w="2"/><text x="30.4356%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.65%)</title><rect x="29.7821%" y="341" width="0.6457%" height="15" fill="rgb(252,121,38)" fg:x="369" fg:w="8"/><text x="30.0321%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (8 samples, 0.65%)</title><rect x="29.7821%" y="325" width="0.6457%" height="15" fill="rgb(232,44,12)" fg:x="369" fg:w="8"/><text x="30.0321%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="30.1856%" y="309" width="0.2421%" height="15" fill="rgb(226,45,54)" fg:x="374" fg:w="3"/><text x="30.4356%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="30.3471%" y="293" width="0.0807%" height="15" fill="rgb(209,67,17)" fg:x="376" fg:w="1"/><text x="30.5971%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.6699%" y="293" width="0.0807%" height="15" fill="rgb(219,108,52)" fg:x="380" fg:w="1"/><text x="30.9199%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.6699%" y="277" width="0.0807%" height="15" fill="rgb(216,118,19)" fg:x="380" fg:w="1"/><text x="30.9199%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="30.7506%" y="293" width="0.1614%" height="15" fill="rgb(228,120,40)" fg:x="381" fg:w="2"/><text x="31.0006%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.8313%" y="277" width="0.0807%" height="15" fill="rgb(221,218,34)" fg:x="382" fg:w="1"/><text x="31.0813%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::Properties&gt; (1 samples, 0.08%)</title><rect x="30.9120%" y="293" width="0.0807%" height="15" fill="rgb(235,89,14)" fg:x="383" fg:w="1"/><text x="31.1620%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="30.9927%" y="277" width="0.4036%" height="15" fill="rgb(248,89,7)" fg:x="384" fg:w="5"/><text x="31.2427%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="31.0734%" y="261" width="0.3228%" height="15" fill="rgb(212,114,34)" fg:x="385" fg:w="4"/><text x="31.3234%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.3156%" y="245" width="0.0807%" height="15" fill="rgb(246,88,32)" fg:x="388" fg:w="1"/><text x="31.5656%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="31.3963%" y="277" width="0.2421%" height="15" fill="rgb(237,135,0)" fg:x="389" fg:w="3"/><text x="31.6463%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="31.3963%" y="261" width="0.2421%" height="15" fill="rgb(220,201,54)" fg:x="389" fg:w="3"/><text x="31.6463%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="31.6384%" y="229" width="0.0807%" height="15" fill="rgb(210,142,36)" fg:x="392" fg:w="1"/><text x="31.8884%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="31.9613%" y="213" width="0.1614%" height="15" fill="rgb(247,189,26)" fg:x="396" fg:w="2"/><text x="32.2113%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.0420%" y="197" width="0.0807%" height="15" fill="rgb(223,89,24)" fg:x="397" fg:w="1"/><text x="32.2920%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.0420%" y="181" width="0.0807%" height="15" fill="rgb(205,90,19)" fg:x="397" fg:w="1"/><text x="32.2920%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.0420%" y="165" width="0.0807%" height="15" fill="rgb(234,57,40)" fg:x="397" fg:w="1"/><text x="32.2920%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="32.1227%" y="213" width="0.2421%" height="15" fill="rgb(213,109,10)" fg:x="398" fg:w="3"/><text x="32.3727%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="32.1227%" y="197" width="0.2421%" height="15" fill="rgb(214,189,23)" fg:x="398" fg:w="3"/><text x="32.3727%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="32.2841%" y="181" width="0.0807%" height="15" fill="rgb(234,200,10)" fg:x="400" fg:w="1"/><text x="32.5341%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.2841%" y="165" width="0.0807%" height="15" fill="rgb(221,148,16)" fg:x="400" fg:w="1"/><text x="32.5341%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (42 samples, 3.39%)</title><rect x="32.3648%" y="213" width="3.3898%" height="15" fill="rgb(230,115,10)" fg:x="401" fg:w="42"/><text x="32.6148%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (42 samples, 3.39%)</title><rect x="32.3648%" y="197" width="3.3898%" height="15" fill="rgb(220,106,42)" fg:x="401" fg:w="42"/><text x="32.6148%" y="207.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (42 samples, 3.39%)</title><rect x="32.3648%" y="181" width="3.3898%" height="15" fill="rgb(225,105,39)" fg:x="401" fg:w="42"/><text x="32.6148%" y="191.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (7 samples, 0.56%)</title><rect x="35.7546%" y="213" width="0.5650%" height="15" fill="rgb(211,161,38)" fg:x="443" fg:w="7"/><text x="36.0046%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 4.84%)</title><rect x="31.6384%" y="261" width="4.8426%" height="15" fill="rgb(213,23,19)" fg:x="392" fg:w="60"/><text x="31.8884%" y="271.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (60 samples, 4.84%)</title><rect x="31.6384%" y="245" width="4.8426%" height="15" fill="rgb(240,2,33)" fg:x="392" fg:w="60"/><text x="31.8884%" y="255.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (59 samples, 4.76%)</title><rect x="31.7191%" y="229" width="4.7619%" height="15" fill="rgb(221,29,45)" fg:x="393" fg:w="59"/><text x="31.9691%" y="239.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="36.3196%" y="213" width="0.1614%" height="15" fill="rgb(242,10,19)" fg:x="450" fg:w="2"/><text x="36.5696%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.4003%" y="197" width="0.0807%" height="15" fill="rgb(250,84,37)" fg:x="451" fg:w="1"/><text x="36.6503%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.4003%" y="181" width="0.0807%" height="15" fill="rgb(214,136,7)" fg:x="451" fg:w="1"/><text x="36.6503%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.4810%" y="261" width="0.0807%" height="15" fill="rgb(231,189,12)" fg:x="452" fg:w="1"/><text x="36.7310%" y="271.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="36.7232%" y="245" width="0.0807%" height="15" fill="rgb(244,40,16)" fg:x="455" fg:w="1"/><text x="36.9732%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.8039%" y="245" width="0.0807%" height="15" fill="rgb(217,29,15)" fg:x="456" fg:w="1"/><text x="37.0539%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.8846%" y="245" width="0.0807%" height="15" fill="rgb(235,172,33)" fg:x="457" fg:w="1"/><text x="37.1346%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="36.9653%" y="245" width="0.0807%" height="15" fill="rgb(206,148,28)" fg:x="458" fg:w="1"/><text x="37.2153%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="36.5617%" y="261" width="0.5650%" height="15" fill="rgb(251,167,37)" fg:x="453" fg:w="7"/><text x="36.8117%" y="271.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="37.0460%" y="245" width="0.0807%" height="15" fill="rgb(229,94,52)" fg:x="459" fg:w="1"/><text x="37.2960%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="37.0460%" y="229" width="0.0807%" height="15" fill="rgb(216,132,9)" fg:x="459" fg:w="1"/><text x="37.2960%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="37.2074%" y="245" width="0.0807%" height="15" fill="rgb(208,110,29)" fg:x="461" fg:w="1"/><text x="37.4574%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3 samples, 0.24%)</title><rect x="37.1267%" y="261" width="0.2421%" height="15" fill="rgb(241,23,8)" fg:x="460" fg:w="3"/><text x="37.3767%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="37.2881%" y="245" width="0.0807%" height="15" fill="rgb(208,26,35)" fg:x="462" fg:w="1"/><text x="37.5381%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="37.2881%" y="229" width="0.0807%" height="15" fill="rgb(242,165,34)" fg:x="462" fg:w="1"/><text x="37.5381%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (80 samples, 6.46%)</title><rect x="30.9927%" y="293" width="6.4568%" height="15" fill="rgb(222,222,33)" fg:x="384" fg:w="80"/><text x="31.2427%" y="303.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (72 samples, 5.81%)</title><rect x="31.6384%" y="277" width="5.8111%" height="15" fill="rgb(227,16,52)" fg:x="392" fg:w="72"/><text x="31.8884%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="37.3688%" y="261" width="0.0807%" height="15" fill="rgb(213,93,12)" fg:x="463" fg:w="1"/><text x="37.6188%" y="271.50"></text></g><g><title>regex_syntax::hir::Class::is_empty (1 samples, 0.08%)</title><rect x="37.3688%" y="245" width="0.0807%" height="15" fill="rgb(238,41,5)" fg:x="463" fg:w="1"/><text x="37.6188%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="37.4496%" y="293" width="0.3228%" height="15" fill="rgb(211,60,15)" fg:x="464" fg:w="4"/><text x="37.6996%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="37.4496%" y="277" width="0.3228%" height="15" fill="rgb(209,11,34)" fg:x="464" fg:w="4"/><text x="37.6996%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="37.6110%" y="261" width="0.1614%" height="15" fill="rgb(254,155,53)" fg:x="466" fg:w="2"/><text x="37.8610%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="37.6110%" y="245" width="0.1614%" height="15" fill="rgb(236,174,8)" fg:x="466" fg:w="2"/><text x="37.8610%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="37.6110%" y="229" width="0.1614%" height="15" fill="rgb(229,31,27)" fg:x="466" fg:w="2"/><text x="37.8610%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="37.6110%" y="213" width="0.1614%" height="15" fill="rgb(242,226,26)" fg:x="466" fg:w="2"/><text x="37.8610%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="37.6110%" y="197" width="0.1614%" height="15" fill="rgb(234,32,40)" fg:x="466" fg:w="2"/><text x="37.8610%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="37.7724%" y="261" width="0.0807%" height="15" fill="rgb(249,226,47)" fg:x="468" fg:w="1"/><text x="38.0224%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="37.7724%" y="245" width="0.0807%" height="15" fill="rgb(212,6,26)" fg:x="468" fg:w="1"/><text x="38.0224%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (93 samples, 7.51%)</title><rect x="30.4278%" y="341" width="7.5061%" height="15" fill="rgb(249,202,29)" fg:x="377" fg:w="93"/><text x="30.6778%" y="351.50">regex::reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (93 samples, 7.51%)</title><rect x="30.4278%" y="325" width="7.5061%" height="15" fill="rgb(226,106,4)" fg:x="377" fg:w="93"/><text x="30.6778%" y="335.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (92 samples, 7.43%)</title><rect x="30.5085%" y="309" width="7.4253%" height="15" fill="rgb(251,2,27)" fg:x="378" fg:w="92"/><text x="30.7585%" y="319.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="37.7724%" y="293" width="0.1614%" height="15" fill="rgb(236,208,0)" fg:x="468" fg:w="2"/><text x="38.0224%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="37.7724%" y="277" width="0.1614%" height="15" fill="rgb(211,66,17)" fg:x="468" fg:w="2"/><text x="38.0224%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="37.8531%" y="261" width="0.0807%" height="15" fill="rgb(216,129,9)" fg:x="469" fg:w="1"/><text x="38.1031%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="37.8531%" y="245" width="0.0807%" height="15" fill="rgb(215,130,23)" fg:x="469" fg:w="1"/><text x="38.1031%" y="255.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="37.8531%" y="229" width="0.0807%" height="15" fill="rgb(253,157,11)" fg:x="469" fg:w="1"/><text x="38.1031%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (105 samples, 8.47%)</title><rect x="29.7014%" y="357" width="8.4746%" height="15" fill="rgb(224,25,14)" fg:x="368" fg:w="105"/><text x="29.9514%" y="367.50">indefinite::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="37.9338%" y="341" width="0.2421%" height="15" fill="rgb(238,16,7)" fg:x="470" fg:w="3"/><text x="38.1838%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="37.9338%" y="325" width="0.2421%" height="15" fill="rgb(228,74,11)" fg:x="470" fg:w="3"/><text x="38.1838%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="37.9338%" y="309" width="0.2421%" height="15" fill="rgb(239,221,27)" fg:x="470" fg:w="3"/><text x="38.1838%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="37.9338%" y="293" width="0.2421%" height="15" fill="rgb(229,166,18)" fg:x="470" fg:w="3"/><text x="38.1838%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="37.9338%" y="277" width="0.2421%" height="15" fill="rgb(254,94,46)" fg:x="470" fg:w="3"/><text x="38.1838%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.0952%" y="261" width="0.0807%" height="15" fill="rgb(241,79,19)" fg:x="472" fg:w="1"/><text x="38.3452%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.0952%" y="245" width="0.0807%" height="15" fill="rgb(228,99,51)" fg:x="472" fg:w="1"/><text x="38.3452%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.0952%" y="229" width="0.0807%" height="15" fill="rgb(211,15,6)" fg:x="472" fg:w="1"/><text x="38.3452%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="38.1759%" y="341" width="0.0807%" height="15" fill="rgb(245,107,54)" fg:x="473" fg:w="1"/><text x="38.4259%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="38.1759%" y="325" width="0.0807%" height="15" fill="rgb(243,3,2)" fg:x="473" fg:w="1"/><text x="38.4259%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="38.1759%" y="309" width="0.0807%" height="15" fill="rgb(206,122,10)" fg:x="473" fg:w="1"/><text x="38.4259%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="38.1759%" y="293" width="0.0807%" height="15" fill="rgb(224,88,4)" fg:x="473" fg:w="1"/><text x="38.4259%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.1759%" y="277" width="0.0807%" height="15" fill="rgb(230,1,41)" fg:x="473" fg:w="1"/><text x="38.4259%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="38.2567%" y="277" width="0.0807%" height="15" fill="rgb(230,1,31)" fg:x="474" fg:w="1"/><text x="38.5067%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.6602%" y="245" width="0.0807%" height="15" fill="rgb(232,67,19)" fg:x="479" fg:w="1"/><text x="38.9102%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.6602%" y="229" width="0.0807%" height="15" fill="rgb(222,206,20)" fg:x="479" fg:w="1"/><text x="38.9102%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.6602%" y="213" width="0.0807%" height="15" fill="rgb(217,225,19)" fg:x="479" fg:w="1"/><text x="38.9102%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="38.3374%" y="261" width="0.4843%" height="15" fill="rgb(234,13,33)" fg:x="475" fg:w="6"/><text x="38.5874%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="38.7409%" y="245" width="0.0807%" height="15" fill="rgb(254,5,1)" fg:x="480" fg:w="1"/><text x="38.9909%" y="255.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (8 samples, 0.65%)</title><rect x="38.2567%" y="341" width="0.6457%" height="15" fill="rgb(211,121,41)" fg:x="474" fg:w="8"/><text x="38.5067%" y="351.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.65%)</title><rect x="38.2567%" y="325" width="0.6457%" height="15" fill="rgb(213,199,35)" fg:x="474" fg:w="8"/><text x="38.5067%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.65%)</title><rect x="38.2567%" y="309" width="0.6457%" height="15" fill="rgb(240,118,22)" fg:x="474" fg:w="8"/><text x="38.5067%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.65%)</title><rect x="38.2567%" y="293" width="0.6457%" height="15" fill="rgb(238,184,25)" fg:x="474" fg:w="8"/><text x="38.5067%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="38.3374%" y="277" width="0.5650%" height="15" fill="rgb(210,165,6)" fg:x="475" fg:w="7"/><text x="38.5874%" y="287.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="38.8216%" y="261" width="0.0807%" height="15" fill="rgb(235,149,5)" fg:x="481" fg:w="1"/><text x="39.0716%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.8216%" y="245" width="0.0807%" height="15" fill="rgb(221,63,5)" fg:x="481" fg:w="1"/><text x="39.0716%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.8216%" y="229" width="0.0807%" height="15" fill="rgb(250,44,41)" fg:x="481" fg:w="1"/><text x="39.0716%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.8216%" y="213" width="0.0807%" height="15" fill="rgb(235,112,47)" fg:x="481" fg:w="1"/><text x="39.0716%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.9023%" y="293" width="0.0807%" height="15" fill="rgb(252,176,34)" fg:x="482" fg:w="1"/><text x="39.1523%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.9023%" y="277" width="0.0807%" height="15" fill="rgb(234,50,19)" fg:x="482" fg:w="1"/><text x="39.1523%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="38.9023%" y="261" width="0.0807%" height="15" fill="rgb(241,195,31)" fg:x="482" fg:w="1"/><text x="39.1523%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.9831%" y="261" width="0.0807%" height="15" fill="rgb(212,93,11)" fg:x="483" fg:w="1"/><text x="39.2331%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="38.9831%" y="293" width="0.1614%" height="15" fill="rgb(254,98,51)" fg:x="483" fg:w="2"/><text x="39.2331%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="38.9831%" y="277" width="0.1614%" height="15" fill="rgb(246,18,45)" fg:x="483" fg:w="2"/><text x="39.2331%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="39.0638%" y="261" width="0.0807%" height="15" fill="rgb(215,148,23)" fg:x="484" fg:w="1"/><text x="39.3138%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.2252%" y="261" width="0.0807%" height="15" fill="rgb(227,22,7)" fg:x="486" fg:w="1"/><text x="39.4752%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.81%)</title><rect x="39.1445%" y="277" width="0.8071%" height="15" fill="rgb(207,210,37)" fg:x="485" fg:w="10"/><text x="39.3945%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.65%)</title><rect x="39.3059%" y="261" width="0.6457%" height="15" fill="rgb(247,147,42)" fg:x="487" fg:w="8"/><text x="39.5559%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="39.7902%" y="245" width="0.1614%" height="15" fill="rgb(226,213,14)" fg:x="493" fg:w="2"/><text x="40.0402%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="39.9516%" y="277" width="0.0807%" height="15" fill="rgb(223,18,10)" fg:x="495" fg:w="1"/><text x="40.2016%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="39.9516%" y="261" width="0.0807%" height="15" fill="rgb(253,34,22)" fg:x="495" fg:w="1"/><text x="40.2016%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="40.0323%" y="277" width="0.0807%" height="15" fill="rgb(222,90,31)" fg:x="496" fg:w="1"/><text x="40.2823%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="40.0323%" y="261" width="0.0807%" height="15" fill="rgb(220,182,30)" fg:x="496" fg:w="1"/><text x="40.2823%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="40.1937%" y="261" width="0.0807%" height="15" fill="rgb(229,170,12)" fg:x="498" fg:w="1"/><text x="40.4437%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="40.1937%" y="245" width="0.0807%" height="15" fill="rgb(210,101,21)" fg:x="498" fg:w="1"/><text x="40.4437%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.1937%" y="229" width="0.0807%" height="15" fill="rgb(237,177,31)" fg:x="498" fg:w="1"/><text x="40.4437%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="40.5973%" y="245" width="0.0807%" height="15" fill="rgb(215,91,34)" fg:x="503" fg:w="1"/><text x="40.8473%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.5973%" y="229" width="0.0807%" height="15" fill="rgb(229,206,16)" fg:x="503" fg:w="1"/><text x="40.8473%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.5973%" y="213" width="0.0807%" height="15" fill="rgb(235,207,10)" fg:x="503" fg:w="1"/><text x="40.8473%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.5973%" y="197" width="0.0807%" height="15" fill="rgb(247,18,10)" fg:x="503" fg:w="1"/><text x="40.8473%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.40%)</title><rect x="40.6780%" y="245" width="0.4036%" height="15" fill="rgb(232,4,6)" fg:x="504" fg:w="5"/><text x="40.9280%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="40.7587%" y="229" width="0.3228%" height="15" fill="rgb(247,93,45)" fg:x="505" fg:w="4"/><text x="41.0087%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="40.9201%" y="213" width="0.1614%" height="15" fill="rgb(240,181,18)" fg:x="507" fg:w="2"/><text x="41.1701%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.9201%" y="197" width="0.1614%" height="15" fill="rgb(208,224,0)" fg:x="507" fg:w="2"/><text x="41.1701%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="40.9201%" y="181" width="0.1614%" height="15" fill="rgb(224,207,54)" fg:x="507" fg:w="2"/><text x="41.1701%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="41.0815%" y="245" width="0.1614%" height="15" fill="rgb(217,152,29)" fg:x="509" fg:w="2"/><text x="41.3315%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="41.0815%" y="229" width="0.1614%" height="15" fill="rgb(243,78,27)" fg:x="509" fg:w="2"/><text x="41.3315%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="41.0815%" y="213" width="0.1614%" height="15" fill="rgb(228,111,9)" fg:x="509" fg:w="2"/><text x="41.3315%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (15 samples, 1.21%)</title><rect x="40.1130%" y="277" width="1.2107%" height="15" fill="rgb(230,213,21)" fg:x="497" fg:w="15"/><text x="40.3630%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (13 samples, 1.05%)</title><rect x="40.2744%" y="261" width="1.0492%" height="15" fill="rgb(248,50,36)" fg:x="499" fg:w="13"/><text x="40.5244%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="41.2429%" y="245" width="0.0807%" height="15" fill="rgb(226,19,31)" fg:x="511" fg:w="1"/><text x="41.4929%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="41.3236%" y="229" width="0.0807%" height="15" fill="rgb(205,132,21)" fg:x="512" fg:w="1"/><text x="41.5736%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.3236%" y="213" width="0.0807%" height="15" fill="rgb(207,42,19)" fg:x="512" fg:w="1"/><text x="41.5736%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.3236%" y="197" width="0.0807%" height="15" fill="rgb(229,69,35)" fg:x="512" fg:w="1"/><text x="41.5736%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.3236%" y="181" width="0.0807%" height="15" fill="rgb(226,96,11)" fg:x="512" fg:w="1"/><text x="41.5736%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="41.4044%" y="181" width="0.0807%" height="15" fill="rgb(236,133,54)" fg:x="513" fg:w="1"/><text x="41.6544%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="42.0500%" y="165" width="0.3228%" height="15" fill="rgb(247,166,21)" fg:x="521" fg:w="4"/><text x="42.3000%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.3729%" y="165" width="0.0807%" height="15" fill="rgb(220,132,12)" fg:x="525" fg:w="1"/><text x="42.6229%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (7 samples, 0.56%)</title><rect x="42.4536%" y="165" width="0.5650%" height="15" fill="rgb(233,27,30)" fg:x="526" fg:w="7"/><text x="42.7036%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="42.8571%" y="149" width="0.1614%" height="15" fill="rgb(246,161,27)" fg:x="531" fg:w="2"/><text x="43.1071%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="42.8571%" y="133" width="0.1614%" height="15" fill="rgb(240,56,3)" fg:x="531" fg:w="2"/><text x="43.1071%" y="143.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="42.8571%" y="117" width="0.1614%" height="15" fill="rgb(242,190,9)" fg:x="531" fg:w="2"/><text x="43.1071%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="43.0186%" y="165" width="0.2421%" height="15" fill="rgb(234,3,52)" fg:x="533" fg:w="3"/><text x="43.2686%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="43.0993%" y="149" width="0.1614%" height="15" fill="rgb(220,221,19)" fg:x="534" fg:w="2"/><text x="43.3493%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.0993%" y="133" width="0.1614%" height="15" fill="rgb(247,178,30)" fg:x="534" fg:w="2"/><text x="43.3493%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.1800%" y="117" width="0.0807%" height="15" fill="rgb(234,212,27)" fg:x="535" fg:w="1"/><text x="43.4300%" y="127.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="43.3414%" y="133" width="0.1614%" height="15" fill="rgb(226,199,38)" fg:x="537" fg:w="2"/><text x="43.5914%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.5028%" y="133" width="0.0807%" height="15" fill="rgb(248,114,22)" fg:x="539" fg:w="1"/><text x="43.7528%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.5028%" y="117" width="0.0807%" height="15" fill="rgb(221,180,4)" fg:x="539" fg:w="1"/><text x="43.7528%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.5028%" y="101" width="0.0807%" height="15" fill="rgb(220,229,24)" fg:x="539" fg:w="1"/><text x="43.7528%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.7450%" y="117" width="0.0807%" height="15" fill="rgb(226,184,27)" fg:x="542" fg:w="1"/><text x="43.9950%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9 samples, 0.73%)</title><rect x="43.2607%" y="165" width="0.7264%" height="15" fill="rgb(232,99,15)" fg:x="536" fg:w="9"/><text x="43.5107%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (9 samples, 0.73%)</title><rect x="43.2607%" y="149" width="0.7264%" height="15" fill="rgb(250,167,16)" fg:x="536" fg:w="9"/><text x="43.5107%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="43.5835%" y="133" width="0.4036%" height="15" fill="rgb(243,113,6)" fg:x="540" fg:w="5"/><text x="43.8335%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="43.8257%" y="117" width="0.1614%" height="15" fill="rgb(244,147,52)" fg:x="543" fg:w="2"/><text x="44.0757%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.9064%" y="101" width="0.0807%" height="15" fill="rgb(235,59,50)" fg:x="544" fg:w="1"/><text x="44.1564%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.9064%" y="85" width="0.0807%" height="15" fill="rgb(250,188,6)" fg:x="544" fg:w="1"/><text x="44.1564%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.9064%" y="69" width="0.0807%" height="15" fill="rgb(236,173,11)" fg:x="544" fg:w="1"/><text x="44.1564%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (29 samples, 2.34%)</title><rect x="43.9871%" y="165" width="2.3406%" height="15" fill="rgb(233,64,3)" fg:x="545" fg:w="29"/><text x="44.2371%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (28 samples, 2.26%)</title><rect x="44.0678%" y="149" width="2.2599%" height="15" fill="rgb(207,92,7)" fg:x="546" fg:w="28"/><text x="44.3178%" y="159.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (28 samples, 2.26%)</title><rect x="44.0678%" y="133" width="2.2599%" height="15" fill="rgb(221,30,19)" fg:x="546" fg:w="28"/><text x="44.3178%" y="143.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="46.3277%" y="165" width="0.1614%" height="15" fill="rgb(245,22,49)" fg:x="574" fg:w="2"/><text x="46.5777%" y="175.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="46.4891%" y="165" width="0.0807%" height="15" fill="rgb(218,39,20)" fg:x="576" fg:w="1"/><text x="46.7391%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 5.49%)</title><rect x="41.3236%" y="261" width="5.4883%" height="15" fill="rgb(222,144,21)" fg:x="512" fg:w="68"/><text x="41.5736%" y="271.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (68 samples, 5.49%)</title><rect x="41.3236%" y="245" width="5.4883%" height="15" fill="rgb(222,78,51)" fg:x="512" fg:w="68"/><text x="41.5736%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (67 samples, 5.41%)</title><rect x="41.4044%" y="229" width="5.4076%" height="15" fill="rgb(248,213,53)" fg:x="513" fg:w="67"/><text x="41.6544%" y="239.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (67 samples, 5.41%)</title><rect x="41.4044%" y="213" width="5.4076%" height="15" fill="rgb(245,28,34)" fg:x="513" fg:w="67"/><text x="41.6544%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (67 samples, 5.41%)</title><rect x="41.4044%" y="197" width="5.4076%" height="15" fill="rgb(229,186,26)" fg:x="513" fg:w="67"/><text x="41.6544%" y="207.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (66 samples, 5.33%)</title><rect x="41.4851%" y="181" width="5.3269%" height="15" fill="rgb(224,0,41)" fg:x="514" fg:w="66"/><text x="41.7351%" y="191.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="46.5698%" y="165" width="0.2421%" height="15" fill="rgb(223,136,51)" fg:x="577" fg:w="3"/><text x="46.8198%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="46.6505%" y="149" width="0.1614%" height="15" fill="rgb(234,50,9)" fg:x="578" fg:w="2"/><text x="46.9005%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="46.6505%" y="133" width="0.1614%" height="15" fill="rgb(242,164,20)" fg:x="578" fg:w="2"/><text x="46.9005%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.7312%" y="117" width="0.0807%" height="15" fill="rgb(230,169,22)" fg:x="579" fg:w="1"/><text x="46.9812%" y="127.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="46.8927%" y="245" width="0.1614%" height="15" fill="rgb(228,82,26)" fg:x="581" fg:w="2"/><text x="47.1427%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="47.0541%" y="245" width="0.3228%" height="15" fill="rgb(244,220,31)" fg:x="583" fg:w="4"/><text x="47.3041%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.2962%" y="229" width="0.0807%" height="15" fill="rgb(214,35,25)" fg:x="586" fg:w="1"/><text x="47.5462%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.2962%" y="213" width="0.0807%" height="15" fill="rgb(245,162,54)" fg:x="586" fg:w="1"/><text x="47.5462%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.2962%" y="197" width="0.0807%" height="15" fill="rgb(210,43,24)" fg:x="586" fg:w="1"/><text x="47.5462%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.6190%" y="229" width="0.0807%" height="15" fill="rgb(226,145,51)" fg:x="590" fg:w="1"/><text x="47.8690%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="47.3769%" y="245" width="0.4036%" height="15" fill="rgb(237,52,53)" fg:x="587" fg:w="5"/><text x="47.6269%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.6998%" y="229" width="0.0807%" height="15" fill="rgb(216,226,7)" fg:x="591" fg:w="1"/><text x="47.9498%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (108 samples, 8.72%)</title><rect x="39.1445%" y="293" width="8.7167%" height="15" fill="rgb(206,223,18)" fg:x="485" fg:w="108"/><text x="39.3945%" y="303.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (81 samples, 6.54%)</title><rect x="41.3236%" y="277" width="6.5375%" height="15" fill="rgb(221,1,10)" fg:x="512" fg:w="81"/><text x="41.5736%" y="287.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.05%)</title><rect x="46.8119%" y="261" width="1.0492%" height="15" fill="rgb(221,151,42)" fg:x="580" fg:w="13"/><text x="47.0619%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="47.7805%" y="245" width="0.0807%" height="15" fill="rgb(205,183,46)" fg:x="592" fg:w="1"/><text x="48.0305%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="47.8612%" y="261" width="0.0807%" height="15" fill="rgb(239,229,1)" fg:x="593" fg:w="1"/><text x="48.1112%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="47.8612%" y="293" width="0.2421%" height="15" fill="rgb(236,192,23)" fg:x="593" fg:w="3"/><text x="48.1112%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="47.8612%" y="277" width="0.2421%" height="15" fill="rgb(215,146,3)" fg:x="593" fg:w="3"/><text x="48.1112%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (2 samples, 0.16%)</title><rect x="47.9419%" y="261" width="0.1614%" height="15" fill="rgb(235,52,27)" fg:x="594" fg:w="2"/><text x="48.1919%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="48.0226%" y="245" width="0.0807%" height="15" fill="rgb(236,45,20)" fg:x="595" fg:w="1"/><text x="48.2726%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.4262%" y="229" width="0.0807%" height="15" fill="rgb(235,86,41)" fg:x="600" fg:w="1"/><text x="48.6762%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.4262%" y="213" width="0.0807%" height="15" fill="rgb(235,27,27)" fg:x="600" fg:w="1"/><text x="48.6762%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.4262%" y="197" width="0.0807%" height="15" fill="rgb(232,4,34)" fg:x="600" fg:w="1"/><text x="48.6762%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.56%)</title><rect x="48.1840%" y="261" width="0.5650%" height="15" fill="rgb(215,22,10)" fg:x="597" fg:w="7"/><text x="48.4340%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.48%)</title><rect x="48.2647%" y="245" width="0.4843%" height="15" fill="rgb(230,228,27)" fg:x="598" fg:w="6"/><text x="48.5147%" y="255.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.24%)</title><rect x="48.5069%" y="229" width="0.2421%" height="15" fill="rgb(216,26,51)" fg:x="601" fg:w="3"/><text x="48.7569%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="48.7490%" y="261" width="0.0807%" height="15" fill="rgb(225,180,50)" fg:x="604" fg:w="1"/><text x="48.9990%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (125 samples, 10.09%)</title><rect x="38.9023%" y="309" width="10.0888%" height="15" fill="rgb(236,211,2)" fg:x="482" fg:w="125"/><text x="39.1523%" y="319.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (11 samples, 0.89%)</title><rect x="48.1033%" y="293" width="0.8878%" height="15" fill="rgb(250,51,20)" fg:x="596" fg:w="11"/><text x="48.3533%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.89%)</title><rect x="48.1033%" y="277" width="0.8878%" height="15" fill="rgb(232,70,37)" fg:x="596" fg:w="11"/><text x="48.3533%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="48.8297%" y="261" width="0.1614%" height="15" fill="rgb(226,183,39)" fg:x="605" fg:w="2"/><text x="49.0797%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="48.9104%" y="245" width="0.0807%" height="15" fill="rgb(232,228,21)" fg:x="606" fg:w="1"/><text x="49.1604%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.9104%" y="229" width="0.0807%" height="15" fill="rgb(251,118,32)" fg:x="606" fg:w="1"/><text x="49.1604%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.9104%" y="213" width="0.0807%" height="15" fill="rgb(235,172,38)" fg:x="606" fg:w="1"/><text x="49.1604%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.9104%" y="197" width="0.0807%" height="15" fill="rgb(235,63,18)" fg:x="606" fg:w="1"/><text x="49.1604%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (135 samples, 10.90%)</title><rect x="38.1759%" y="357" width="10.8959%" height="15" fill="rgb(225,4,7)" fg:x="473" fg:w="135"/><text x="38.4259%" y="367.50">indefinite::rule..</text></g><g><title>regex::regex::string::Regex::new (126 samples, 10.17%)</title><rect x="38.9023%" y="341" width="10.1695%" height="15" fill="rgb(231,61,1)" fg:x="482" fg:w="126"/><text x="39.1523%" y="351.50">regex::regex::s..</text></g><g><title>regex::builders::string::RegexBuilder::build (126 samples, 10.17%)</title><rect x="38.9023%" y="325" width="10.1695%" height="15" fill="rgb(241,155,22)" fg:x="482" fg:w="126"/><text x="39.1523%" y="335.50">regex::builders..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="48.9911%" y="309" width="0.0807%" height="15" fill="rgb(209,100,26)" fg:x="607" fg:w="1"/><text x="49.2411%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="49.0718%" y="325" width="0.0807%" height="15" fill="rgb(248,181,15)" fg:x="608" fg:w="1"/><text x="49.3218%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="49.0718%" y="309" width="0.0807%" height="15" fill="rgb(214,94,31)" fg:x="608" fg:w="1"/><text x="49.3218%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="49.0718%" y="293" width="0.0807%" height="15" fill="rgb(207,16,42)" fg:x="608" fg:w="1"/><text x="49.3218%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="49.0718%" y="277" width="0.0807%" height="15" fill="rgb(208,127,13)" fg:x="608" fg:w="1"/><text x="49.3218%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.0718%" y="261" width="0.0807%" height="15" fill="rgb(220,211,18)" fg:x="608" fg:w="1"/><text x="49.3218%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.0718%" y="245" width="0.0807%" height="15" fill="rgb(221,55,38)" fg:x="608" fg:w="1"/><text x="49.3218%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.1525%" y="277" width="0.0807%" height="15" fill="rgb(252,219,45)" fg:x="609" fg:w="1"/><text x="49.4025%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.1525%" y="261" width="0.0807%" height="15" fill="rgb(248,53,35)" fg:x="609" fg:w="1"/><text x="49.4025%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.1525%" y="245" width="0.0807%" height="15" fill="rgb(210,87,2)" fg:x="609" fg:w="1"/><text x="49.4025%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="49.2333%" y="277" width="0.1614%" height="15" fill="rgb(239,133,9)" fg:x="610" fg:w="2"/><text x="49.4833%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="49.2333%" y="261" width="0.1614%" height="15" fill="rgb(214,114,5)" fg:x="610" fg:w="2"/><text x="49.4833%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="49.3140%" y="245" width="0.0807%" height="15" fill="rgb(206,124,24)" fg:x="611" fg:w="1"/><text x="49.5640%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="49.4754%" y="261" width="0.0807%" height="15" fill="rgb(212,57,33)" fg:x="613" fg:w="1"/><text x="49.7254%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="49.5561%" y="261" width="0.0807%" height="15" fill="rgb(246,21,20)" fg:x="614" fg:w="1"/><text x="49.8061%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="49.6368%" y="245" width="0.0807%" height="15" fill="rgb(253,210,39)" fg:x="615" fg:w="1"/><text x="49.8868%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="49.6368%" y="229" width="0.0807%" height="15" fill="rgb(209,187,24)" fg:x="615" fg:w="1"/><text x="49.8868%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="49.6368%" y="213" width="0.0807%" height="15" fill="rgb(246,136,17)" fg:x="615" fg:w="1"/><text x="49.8868%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="49.6368%" y="197" width="0.0807%" height="15" fill="rgb(211,0,30)" fg:x="615" fg:w="1"/><text x="49.8868%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="49.7175%" y="229" width="0.0807%" height="15" fill="rgb(216,199,7)" fg:x="616" fg:w="1"/><text x="49.9675%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (6 samples, 0.48%)</title><rect x="49.3947%" y="277" width="0.4843%" height="15" fill="rgb(207,210,19)" fg:x="612" fg:w="6"/><text x="49.6447%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="49.6368%" y="261" width="0.2421%" height="15" fill="rgb(237,187,39)" fg:x="615" fg:w="3"/><text x="49.8868%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="49.7175%" y="245" width="0.1614%" height="15" fill="rgb(243,194,42)" fg:x="616" fg:w="2"/><text x="49.9675%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="49.7982%" y="229" width="0.0807%" height="15" fill="rgb(225,194,19)" fg:x="617" fg:w="1"/><text x="50.0482%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.7982%" y="213" width="0.0807%" height="15" fill="rgb(224,192,14)" fg:x="617" fg:w="1"/><text x="50.0482%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="49.8789%" y="245" width="0.2421%" height="15" fill="rgb(252,21,18)" fg:x="618" fg:w="3"/><text x="50.1289%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="49.8789%" y="229" width="0.2421%" height="15" fill="rgb(229,69,19)" fg:x="618" fg:w="3"/><text x="50.1289%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="49.8789%" y="213" width="0.2421%" height="15" fill="rgb(251,31,53)" fg:x="618" fg:w="3"/><text x="50.1289%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="49.8789%" y="197" width="0.2421%" height="15" fill="rgb(218,39,50)" fg:x="618" fg:w="3"/><text x="50.1289%" y="207.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="49.8789%" y="181" width="0.2421%" height="15" fill="rgb(231,50,17)" fg:x="618" fg:w="3"/><text x="50.1289%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="49.8789%" y="277" width="0.4036%" height="15" fill="rgb(223,217,31)" fg:x="618" fg:w="5"/><text x="50.1289%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="49.8789%" y="261" width="0.4036%" height="15" fill="rgb(225,91,12)" fg:x="618" fg:w="5"/><text x="50.1289%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="50.1211%" y="245" width="0.1614%" height="15" fill="rgb(242,58,43)" fg:x="621" fg:w="2"/><text x="50.3711%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="50.2018%" y="229" width="0.0807%" height="15" fill="rgb(242,32,21)" fg:x="622" fg:w="1"/><text x="50.4518%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="50.2825%" y="245" width="0.0807%" height="15" fill="rgb(211,127,1)" fg:x="623" fg:w="1"/><text x="50.5325%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="50.2825%" y="229" width="0.0807%" height="15" fill="rgb(231,93,13)" fg:x="623" fg:w="1"/><text x="50.5325%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.2825%" y="213" width="0.0807%" height="15" fill="rgb(218,83,4)" fg:x="623" fg:w="1"/><text x="50.5325%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.2825%" y="197" width="0.0807%" height="15" fill="rgb(230,218,10)" fg:x="623" fg:w="1"/><text x="50.5325%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.2825%" y="181" width="0.0807%" height="15" fill="rgb(235,127,18)" fg:x="623" fg:w="1"/><text x="50.5325%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (17 samples, 1.37%)</title><rect x="49.1525%" y="325" width="1.3721%" height="15" fill="rgb(213,137,46)" fg:x="609" fg:w="17"/><text x="49.4025%" y="335.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (17 samples, 1.37%)</title><rect x="49.1525%" y="309" width="1.3721%" height="15" fill="rgb(235,179,24)" fg:x="609" fg:w="17"/><text x="49.4025%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (17 samples, 1.37%)</title><rect x="49.1525%" y="293" width="1.3721%" height="15" fill="rgb(247,58,49)" fg:x="609" fg:w="17"/><text x="49.4025%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="50.2825%" y="277" width="0.2421%" height="15" fill="rgb(242,222,5)" fg:x="623" fg:w="3"/><text x="50.5325%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="50.2825%" y="261" width="0.2421%" height="15" fill="rgb(230,16,48)" fg:x="623" fg:w="3"/><text x="50.5325%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="50.3632%" y="245" width="0.1614%" height="15" fill="rgb(241,192,16)" fg:x="624" fg:w="2"/><text x="50.6132%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="50.3632%" y="229" width="0.1614%" height="15" fill="rgb(209,25,37)" fg:x="624" fg:w="2"/><text x="50.6132%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.4439%" y="213" width="0.0807%" height="15" fill="rgb(229,215,13)" fg:x="625" fg:w="1"/><text x="50.6939%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (19 samples, 1.53%)</title><rect x="49.0718%" y="341" width="1.5335%" height="15" fill="rgb(213,199,8)" fg:x="608" fg:w="19"/><text x="49.3218%" y="351.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="50.5246%" y="325" width="0.0807%" height="15" fill="rgb(226,151,19)" fg:x="626" fg:w="1"/><text x="50.7746%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="50.5246%" y="309" width="0.0807%" height="15" fill="rgb(254,183,12)" fg:x="626" fg:w="1"/><text x="50.7746%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="50.5246%" y="293" width="0.0807%" height="15" fill="rgb(245,8,3)" fg:x="626" fg:w="1"/><text x="50.7746%" y="303.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (279 samples, 22.52%)</title><rect x="28.1679%" y="437" width="22.5182%" height="15" fill="rgb(229,159,35)" fg:x="349" fg:w="279"/><text x="28.4179%" y="447.50">&lt;&amp;kernel::model::EntityPtr as plugin..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (261 samples, 21.07%)</title><rect x="29.6207%" y="421" width="21.0654%" height="15" fill="rgb(209,145,1)" fg:x="367" fg:w="261"/><text x="29.8707%" y="431.50">plugins_core::looking::model::Unq..</text></g><g><title>indefinite::indefinite (261 samples, 21.07%)</title><rect x="29.6207%" y="405" width="21.0654%" height="15" fill="rgb(228,183,16)" fg:x="367" fg:w="261"/><text x="29.8707%" y="415.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (261 samples, 21.07%)</title><rect x="29.6207%" y="389" width="21.0654%" height="15" fill="rgb(222,68,0)" fg:x="367" fg:w="261"/><text x="29.8707%" y="399.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (260 samples, 20.98%)</title><rect x="29.7014%" y="373" width="20.9847%" height="15" fill="rgb(209,130,50)" fg:x="368" fg:w="260"/><text x="29.9514%" y="383.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (20 samples, 1.61%)</title><rect x="49.0718%" y="357" width="1.6142%" height="15" fill="rgb(228,176,44)" fg:x="608" fg:w="20"/><text x="49.3218%" y="367.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="50.6053%" y="341" width="0.0807%" height="15" fill="rgb(221,164,2)" fg:x="627" fg:w="1"/><text x="50.8553%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="50.6860%" y="373" width="0.1614%" height="15" fill="rgb(249,199,49)" fg:x="628" fg:w="2"/><text x="50.9360%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="50.6860%" y="357" width="0.1614%" height="15" fill="rgb(228,205,53)" fg:x="628" fg:w="2"/><text x="50.9360%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="50.6860%" y="341" width="0.1614%" height="15" fill="rgb(235,77,20)" fg:x="628" fg:w="2"/><text x="50.9360%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="50.7667%" y="325" width="0.0807%" height="15" fill="rgb(227,147,34)" fg:x="629" fg:w="1"/><text x="51.0167%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="50.7667%" y="309" width="0.0807%" height="15" fill="rgb(226,203,52)" fg:x="629" fg:w="1"/><text x="51.0167%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="50.7667%" y="293" width="0.0807%" height="15" fill="rgb(226,186,23)" fg:x="629" fg:w="1"/><text x="51.0167%" y="303.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="50.7667%" y="277" width="0.0807%" height="15" fill="rgb(236,13,30)" fg:x="629" fg:w="1"/><text x="51.0167%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="50.7667%" y="261" width="0.0807%" height="15" fill="rgb(228,121,22)" fg:x="629" fg:w="1"/><text x="51.0167%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="50.7667%" y="245" width="0.0807%" height="15" fill="rgb(248,222,26)" fg:x="629" fg:w="1"/><text x="51.0167%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="50.7667%" y="229" width="0.0807%" height="15" fill="rgb(251,72,25)" fg:x="629" fg:w="1"/><text x="51.0167%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="50.7667%" y="213" width="0.0807%" height="15" fill="rgb(223,114,24)" fg:x="629" fg:w="1"/><text x="51.0167%" y="223.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (3 samples, 0.24%)</title><rect x="50.6860%" y="405" width="0.2421%" height="15" fill="rgb(232,190,43)" fg:x="628" fg:w="3"/><text x="50.9360%" y="415.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.24%)</title><rect x="50.6860%" y="389" width="0.2421%" height="15" fill="rgb(208,90,0)" fg:x="628" fg:w="3"/><text x="50.9360%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="50.8475%" y="373" width="0.0807%" height="15" fill="rgb(234,149,31)" fg:x="630" fg:w="1"/><text x="51.0975%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (5 samples, 0.40%)</title><rect x="50.6860%" y="437" width="0.4036%" height="15" fill="rgb(235,188,36)" fg:x="628" fg:w="5"/><text x="50.9360%" y="447.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (5 samples, 0.40%)</title><rect x="50.6860%" y="421" width="0.4036%" height="15" fill="rgb(219,59,51)" fg:x="628" fg:w="5"/><text x="50.9360%" y="431.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="50.9282%" y="405" width="0.1614%" height="15" fill="rgb(236,101,40)" fg:x="631" fg:w="2"/><text x="51.1782%" y="415.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="50.9282%" y="389" width="0.1614%" height="15" fill="rgb(235,33,7)" fg:x="631" fg:w="2"/><text x="51.1782%" y="399.50"></text></g><g><title>plugins_core::finding::matches_description (2 samples, 0.16%)</title><rect x="50.9282%" y="373" width="0.1614%" height="15" fill="rgb(213,169,26)" fg:x="631" fg:w="2"/><text x="51.1782%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::name (2 samples, 0.16%)</title><rect x="50.9282%" y="357" width="0.1614%" height="15" fill="rgb(218,99,34)" fg:x="631" fg:w="2"/><text x="51.1782%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="50.9282%" y="341" width="0.1614%" height="15" fill="rgb(210,57,24)" fg:x="631" fg:w="2"/><text x="51.1782%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="50.9282%" y="325" width="0.1614%" height="15" fill="rgb(231,181,54)" fg:x="631" fg:w="2"/><text x="51.1782%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="50.9282%" y="309" width="0.1614%" height="15" fill="rgb(251,188,48)" fg:x="631" fg:w="2"/><text x="51.1782%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="50.9282%" y="293" width="0.1614%" height="15" fill="rgb(243,12,45)" fg:x="631" fg:w="2"/><text x="51.1782%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="50.9282%" y="277" width="0.1614%" height="15" fill="rgb(250,197,9)" fg:x="631" fg:w="2"/><text x="51.1782%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="50.9282%" y="261" width="0.1614%" height="15" fill="rgb(235,149,35)" fg:x="631" fg:w="2"/><text x="51.1782%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="50.9282%" y="245" width="0.1614%" height="15" fill="rgb(219,27,19)" fg:x="631" fg:w="2"/><text x="51.1782%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="50.9282%" y="229" width="0.1614%" height="15" fill="rgb(244,78,31)" fg:x="631" fg:w="2"/><text x="51.1782%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="51.0089%" y="213" width="0.0807%" height="15" fill="rgb(241,13,4)" fg:x="632" fg:w="1"/><text x="51.2589%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (1 samples, 0.08%)</title><rect x="51.0896%" y="421" width="0.0807%" height="15" fill="rgb(212,194,26)" fg:x="633" fg:w="1"/><text x="51.3396%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="51.0896%" y="405" width="0.0807%" height="15" fill="rgb(236,80,11)" fg:x="633" fg:w="1"/><text x="51.3396%" y="415.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (1 samples, 0.08%)</title><rect x="51.0896%" y="389" width="0.0807%" height="15" fill="rgb(206,1,24)" fg:x="633" fg:w="1"/><text x="51.3396%" y="399.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="51.0896%" y="373" width="0.0807%" height="15" fill="rgb(238,215,50)" fg:x="633" fg:w="1"/><text x="51.3396%" y="383.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="51.0896%" y="357" width="0.0807%" height="15" fill="rgb(254,126,32)" fg:x="633" fg:w="1"/><text x="51.3396%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="51.0896%" y="341" width="0.0807%" height="15" fill="rgb(206,111,53)" fg:x="633" fg:w="1"/><text x="51.3396%" y="351.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="51.0896%" y="325" width="0.0807%" height="15" fill="rgb(218,72,44)" fg:x="633" fg:w="1"/><text x="51.3396%" y="335.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="51.0896%" y="309" width="0.0807%" height="15" fill="rgb(238,25,3)" fg:x="633" fg:w="1"/><text x="51.3396%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="51.0896%" y="293" width="0.0807%" height="15" fill="rgb(250,191,7)" fg:x="633" fg:w="1"/><text x="51.3396%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="51.0896%" y="277" width="0.0807%" height="15" fill="rgb(238,56,30)" fg:x="633" fg:w="1"/><text x="51.3396%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="51.0896%" y="261" width="0.0807%" height="15" fill="rgb(210,27,45)" fg:x="633" fg:w="1"/><text x="51.3396%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="51.0896%" y="245" width="0.0807%" height="15" fill="rgb(207,10,50)" fg:x="633" fg:w="1"/><text x="51.3396%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="51.0896%" y="229" width="0.0807%" height="15" fill="rgb(249,30,23)" fg:x="633" fg:w="1"/><text x="51.3396%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="51.0896%" y="213" width="0.0807%" height="15" fill="rgb(250,80,12)" fg:x="633" fg:w="1"/><text x="51.3396%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="51.0896%" y="197" width="0.0807%" height="15" fill="rgb(210,221,37)" fg:x="633" fg:w="1"/><text x="51.3396%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="51.0896%" y="181" width="0.0807%" height="15" fill="rgb(205,96,24)" fg:x="633" fg:w="1"/><text x="51.3396%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="51.0896%" y="165" width="0.0807%" height="15" fill="rgb(247,104,22)" fg:x="633" fg:w="1"/><text x="51.3396%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="51.0896%" y="149" width="0.0807%" height="15" fill="rgb(222,61,53)" fg:x="633" fg:w="1"/><text x="51.3396%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="51.0896%" y="133" width="0.0807%" height="15" fill="rgb(241,11,53)" fg:x="633" fg:w="1"/><text x="51.3396%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="51.0896%" y="117" width="0.0807%" height="15" fill="rgb(230,111,47)" fg:x="633" fg:w="1"/><text x="51.3396%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="51.0896%" y="101" width="0.0807%" height="15" fill="rgb(218,187,29)" fg:x="633" fg:w="1"/><text x="51.3396%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="51.0896%" y="85" width="0.0807%" height="15" fill="rgb(210,121,46)" fg:x="633" fg:w="1"/><text x="51.3396%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.0896%" y="69" width="0.0807%" height="15" fill="rgb(250,43,19)" fg:x="633" fg:w="1"/><text x="51.3396%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.2510%" y="373" width="0.0807%" height="15" fill="rgb(238,61,12)" fg:x="635" fg:w="1"/><text x="51.5010%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="51.4124%" y="341" width="0.1614%" height="15" fill="rgb(251,198,9)" fg:x="637" fg:w="2"/><text x="51.6624%" y="351.50"></text></g><g><title>plugins_core::library::actions::reply_ok (8 samples, 0.65%)</title><rect x="51.0896%" y="437" width="0.6457%" height="15" fill="rgb(214,192,38)" fg:x="633" fg:w="8"/><text x="51.3396%" y="447.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (7 samples, 0.56%)</title><rect x="51.1703%" y="421" width="0.5650%" height="15" fill="rgb(214,73,19)" fg:x="634" fg:w="7"/><text x="51.4203%" y="431.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (7 samples, 0.56%)</title><rect x="51.1703%" y="405" width="0.5650%" height="15" fill="rgb(249,222,49)" fg:x="634" fg:w="7"/><text x="51.4203%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (7 samples, 0.56%)</title><rect x="51.1703%" y="389" width="0.5650%" height="15" fill="rgb(231,181,54)" fg:x="634" fg:w="7"/><text x="51.4203%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (5 samples, 0.40%)</title><rect x="51.3317%" y="373" width="0.4036%" height="15" fill="rgb(240,1,13)" fg:x="636" fg:w="5"/><text x="51.5817%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="51.3317%" y="357" width="0.4036%" height="15" fill="rgb(225,21,16)" fg:x="636" fg:w="5"/><text x="51.5817%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="51.5738%" y="341" width="0.1614%" height="15" fill="rgb(246,176,50)" fg:x="639" fg:w="2"/><text x="51.8238%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="51.5738%" y="325" width="0.1614%" height="15" fill="rgb(208,96,50)" fg:x="639" fg:w="2"/><text x="51.8238%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="51.5738%" y="309" width="0.1614%" height="15" fill="rgb(240,219,19)" fg:x="639" fg:w="2"/><text x="51.8238%" y="319.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="51.7353%" y="389" width="0.0807%" height="15" fill="rgb(234,73,5)" fg:x="641" fg:w="1"/><text x="51.9853%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="51.7353%" y="373" width="0.0807%" height="15" fill="rgb(225,52,53)" fg:x="641" fg:w="1"/><text x="51.9853%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="51.7353%" y="357" width="0.0807%" height="15" fill="rgb(250,12,14)" fg:x="641" fg:w="1"/><text x="51.9853%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="51.7353%" y="341" width="0.0807%" height="15" fill="rgb(242,185,54)" fg:x="641" fg:w="1"/><text x="51.9853%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="51.7353%" y="325" width="0.0807%" height="15" fill="rgb(211,206,31)" fg:x="641" fg:w="1"/><text x="51.9853%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="51.7353%" y="309" width="0.0807%" height="15" fill="rgb(252,10,33)" fg:x="641" fg:w="1"/><text x="51.9853%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="51.7353%" y="293" width="0.0807%" height="15" fill="rgb(216,26,7)" fg:x="641" fg:w="1"/><text x="51.9853%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="51.7353%" y="421" width="0.1614%" height="15" fill="rgb(228,112,40)" fg:x="641" fg:w="2"/><text x="51.9853%" y="431.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="51.7353%" y="405" width="0.1614%" height="15" fill="rgb(212,21,16)" fg:x="641" fg:w="2"/><text x="51.9853%" y="415.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="51.8160%" y="389" width="0.0807%" height="15" fill="rgb(249,3,29)" fg:x="642" fg:w="1"/><text x="52.0660%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="51.8160%" y="373" width="0.0807%" height="15" fill="rgb(221,42,51)" fg:x="642" fg:w="1"/><text x="52.0660%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="51.8160%" y="357" width="0.0807%" height="15" fill="rgb(225,90,21)" fg:x="642" fg:w="1"/><text x="52.0660%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="51.8160%" y="341" width="0.0807%" height="15" fill="rgb(242,131,5)" fg:x="642" fg:w="1"/><text x="52.0660%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="51.8160%" y="325" width="0.0807%" height="15" fill="rgb(220,187,28)" fg:x="642" fg:w="1"/><text x="52.0660%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="51.8160%" y="309" width="0.0807%" height="15" fill="rgb(210,75,48)" fg:x="642" fg:w="1"/><text x="52.0660%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="51.8160%" y="293" width="0.0807%" height="15" fill="rgb(211,91,40)" fg:x="642" fg:w="1"/><text x="52.0660%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="51.8160%" y="277" width="0.0807%" height="15" fill="rgb(205,43,18)" fg:x="642" fg:w="1"/><text x="52.0660%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="51.8160%" y="261" width="0.0807%" height="15" fill="rgb(207,123,11)" fg:x="642" fg:w="1"/><text x="52.0660%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="51.8160%" y="245" width="0.0807%" height="15" fill="rgb(235,89,39)" fg:x="642" fg:w="1"/><text x="52.0660%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="51.8160%" y="229" width="0.0807%" height="15" fill="rgb(245,217,27)" fg:x="642" fg:w="1"/><text x="52.0660%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="51.8160%" y="213" width="0.0807%" height="15" fill="rgb(216,55,17)" fg:x="642" fg:w="1"/><text x="52.0660%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="51.8160%" y="197" width="0.0807%" height="15" fill="rgb(252,116,44)" fg:x="642" fg:w="1"/><text x="52.0660%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="51.8160%" y="181" width="0.0807%" height="15" fill="rgb(229,153,4)" fg:x="642" fg:w="1"/><text x="52.0660%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.8160%" y="165" width="0.0807%" height="15" fill="rgb(222,24,35)" fg:x="642" fg:w="1"/><text x="52.0660%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="51.8967%" y="405" width="0.0807%" height="15" fill="rgb(214,26,20)" fg:x="643" fg:w="1"/><text x="52.1467%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="51.8967%" y="421" width="0.1614%" height="15" fill="rgb(215,14,45)" fg:x="643" fg:w="2"/><text x="52.1467%" y="431.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="51.9774%" y="405" width="0.0807%" height="15" fill="rgb(217,212,50)" fg:x="644" fg:w="1"/><text x="52.2274%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="51.9774%" y="389" width="0.0807%" height="15" fill="rgb(230,172,52)" fg:x="644" fg:w="1"/><text x="52.2274%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="51.9774%" y="373" width="0.0807%" height="15" fill="rgb(210,48,36)" fg:x="644" fg:w="1"/><text x="52.2274%" y="383.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="51.9774%" y="357" width="0.0807%" height="15" fill="rgb(216,213,32)" fg:x="644" fg:w="1"/><text x="52.2274%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="51.9774%" y="341" width="0.0807%" height="15" fill="rgb(237,202,41)" fg:x="644" fg:w="1"/><text x="52.2274%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="52.0581%" y="405" width="0.0807%" height="15" fill="rgb(209,14,29)" fg:x="645" fg:w="1"/><text x="52.3081%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="52.0581%" y="389" width="0.0807%" height="15" fill="rgb(219,29,3)" fg:x="645" fg:w="1"/><text x="52.3081%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="52.0581%" y="373" width="0.0807%" height="15" fill="rgb(229,13,49)" fg:x="645" fg:w="1"/><text x="52.3081%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="52.0581%" y="357" width="0.0807%" height="15" fill="rgb(210,206,2)" fg:x="645" fg:w="1"/><text x="52.3081%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="52.0581%" y="341" width="0.0807%" height="15" fill="rgb(216,154,46)" fg:x="645" fg:w="1"/><text x="52.3081%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="52.0581%" y="325" width="0.0807%" height="15" fill="rgb(211,170,52)" fg:x="645" fg:w="1"/><text x="52.3081%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="52.1388%" y="373" width="0.0807%" height="15" fill="rgb(233,109,47)" fg:x="646" fg:w="1"/><text x="52.3888%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="52.1388%" y="357" width="0.0807%" height="15" fill="rgb(208,212,30)" fg:x="646" fg:w="1"/><text x="52.3888%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="52.1388%" y="341" width="0.0807%" height="15" fill="rgb(215,190,19)" fg:x="646" fg:w="1"/><text x="52.3888%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="52.1388%" y="325" width="0.0807%" height="15" fill="rgb(207,164,53)" fg:x="646" fg:w="1"/><text x="52.3888%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="52.1388%" y="309" width="0.0807%" height="15" fill="rgb(213,87,49)" fg:x="646" fg:w="1"/><text x="52.3888%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="52.1388%" y="293" width="0.0807%" height="15" fill="rgb(241,216,24)" fg:x="646" fg:w="1"/><text x="52.3888%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="52.1388%" y="277" width="0.0807%" height="15" fill="rgb(241,123,45)" fg:x="646" fg:w="1"/><text x="52.3888%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="52.1388%" y="261" width="0.0807%" height="15" fill="rgb(220,36,15)" fg:x="646" fg:w="1"/><text x="52.3888%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.1388%" y="245" width="0.0807%" height="15" fill="rgb(215,202,9)" fg:x="646" fg:w="1"/><text x="52.3888%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="52.3002%" y="341" width="0.1614%" height="15" fill="rgb(252,71,26)" fg:x="648" fg:w="2"/><text x="52.5502%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="52.3002%" y="325" width="0.1614%" height="15" fill="rgb(243,195,19)" fg:x="648" fg:w="2"/><text x="52.5502%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="52.3002%" y="309" width="0.1614%" height="15" fill="rgb(207,167,27)" fg:x="648" fg:w="2"/><text x="52.5502%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="52.3810%" y="293" width="0.0807%" height="15" fill="rgb(250,146,54)" fg:x="649" fg:w="1"/><text x="52.6310%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="52.3810%" y="277" width="0.0807%" height="15" fill="rgb(245,79,9)" fg:x="649" fg:w="1"/><text x="52.6310%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="52.3810%" y="261" width="0.0807%" height="15" fill="rgb(234,197,22)" fg:x="649" fg:w="1"/><text x="52.6310%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="52.3810%" y="245" width="0.0807%" height="15" fill="rgb(221,52,48)" fg:x="649" fg:w="1"/><text x="52.6310%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="52.3810%" y="229" width="0.0807%" height="15" fill="rgb(235,80,0)" fg:x="649" fg:w="1"/><text x="52.6310%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="52.3810%" y="213" width="0.0807%" height="15" fill="rgb(221,117,53)" fg:x="649" fg:w="1"/><text x="52.6310%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="52.3810%" y="197" width="0.0807%" height="15" fill="rgb(239,48,47)" fg:x="649" fg:w="1"/><text x="52.6310%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="52.3810%" y="181" width="0.0807%" height="15" fill="rgb(227,191,52)" fg:x="649" fg:w="1"/><text x="52.6310%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="52.3810%" y="165" width="0.0807%" height="15" fill="rgb(241,118,1)" fg:x="649" fg:w="1"/><text x="52.6310%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="52.3810%" y="149" width="0.0807%" height="15" fill="rgb(240,85,3)" fg:x="649" fg:w="1"/><text x="52.6310%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="52.3810%" y="133" width="0.0807%" height="15" fill="rgb(237,68,37)" fg:x="649" fg:w="1"/><text x="52.6310%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.3810%" y="117" width="0.0807%" height="15" fill="rgb(212,9,20)" fg:x="649" fg:w="1"/><text x="52.6310%" y="127.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (6 samples, 0.48%)</title><rect x="52.0581%" y="421" width="0.4843%" height="15" fill="rgb(218,84,17)" fg:x="645" fg:w="6"/><text x="52.3081%" y="431.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.40%)</title><rect x="52.1388%" y="405" width="0.4036%" height="15" fill="rgb(235,147,20)" fg:x="646" fg:w="5"/><text x="52.3888%" y="415.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.40%)</title><rect x="52.1388%" y="389" width="0.4036%" height="15" fill="rgb(208,224,1)" fg:x="646" fg:w="5"/><text x="52.3888%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="52.2195%" y="373" width="0.3228%" height="15" fill="rgb(232,97,50)" fg:x="647" fg:w="4"/><text x="52.4695%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="52.2195%" y="357" width="0.3228%" height="15" fill="rgb(238,15,45)" fg:x="647" fg:w="4"/><text x="52.4695%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="52.4617%" y="341" width="0.0807%" height="15" fill="rgb(231,46,18)" fg:x="650" fg:w="1"/><text x="52.7117%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="52.4617%" y="325" width="0.0807%" height="15" fill="rgb(254,169,10)" fg:x="650" fg:w="1"/><text x="52.7117%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="52.4617%" y="309" width="0.0807%" height="15" fill="rgb(243,169,30)" fg:x="650" fg:w="1"/><text x="52.7117%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="52.4617%" y="293" width="0.0807%" height="15" fill="rgb(236,90,49)" fg:x="650" fg:w="1"/><text x="52.7117%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="52.4617%" y="277" width="0.0807%" height="15" fill="rgb(218,80,15)" fg:x="650" fg:w="1"/><text x="52.7117%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="52.4617%" y="261" width="0.0807%" height="15" fill="rgb(222,115,37)" fg:x="650" fg:w="1"/><text x="52.7117%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="52.4617%" y="245" width="0.0807%" height="15" fill="rgb(227,0,6)" fg:x="650" fg:w="1"/><text x="52.7117%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="52.4617%" y="229" width="0.0807%" height="15" fill="rgb(217,189,13)" fg:x="650" fg:w="1"/><text x="52.7117%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="52.4617%" y="213" width="0.0807%" height="15" fill="rgb(220,74,19)" fg:x="650" fg:w="1"/><text x="52.7117%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="52.4617%" y="197" width="0.0807%" height="15" fill="rgb(224,81,18)" fg:x="650" fg:w="1"/><text x="52.7117%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="52.4617%" y="181" width="0.0807%" height="15" fill="rgb(245,178,48)" fg:x="650" fg:w="1"/><text x="52.7117%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="52.4617%" y="165" width="0.0807%" height="15" fill="rgb(207,78,24)" fg:x="650" fg:w="1"/><text x="52.7117%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.4617%" y="149" width="0.0807%" height="15" fill="rgb(223,222,30)" fg:x="650" fg:w="1"/><text x="52.7117%" y="159.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="52.6231%" y="405" width="0.0807%" height="15" fill="rgb(234,101,12)" fg:x="652" fg:w="1"/><text x="52.8731%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="52.6231%" y="389" width="0.0807%" height="15" fill="rgb(209,80,46)" fg:x="652" fg:w="1"/><text x="52.8731%" y="399.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (306 samples, 24.70%)</title><rect x="28.0872%" y="453" width="24.6973%" height="15" fill="rgb(228,79,14)" fg:x="348" fg:w="306"/><text x="28.3372%" y="463.50">&lt;plugins_core::carrying::actions::DropA..</text></g><g><title>plugins_core::location::model::change_location (13 samples, 1.05%)</title><rect x="51.7353%" y="437" width="1.0492%" height="15" fill="rgb(220,219,34)" fg:x="641" fg:w="13"/><text x="51.9853%" y="447.50"></text></g><g><title>plugins_core::location::model::Location::set (3 samples, 0.24%)</title><rect x="52.5424%" y="421" width="0.2421%" height="15" fill="rgb(207,80,21)" fg:x="651" fg:w="3"/><text x="52.7924%" y="431.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="52.7038%" y="405" width="0.0807%" height="15" fill="rgb(210,154,44)" fg:x="653" fg:w="1"/><text x="52.9538%" y="415.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="52.7038%" y="389" width="0.0807%" height="15" fill="rgb(246,44,39)" fg:x="653" fg:w="1"/><text x="52.9538%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="52.7038%" y="373" width="0.0807%" height="15" fill="rgb(252,175,13)" fg:x="653" fg:w="1"/><text x="52.9538%" y="383.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="52.7038%" y="357" width="0.0807%" height="15" fill="rgb(211,50,39)" fg:x="653" fg:w="1"/><text x="52.9538%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="52.7038%" y="341" width="0.0807%" height="15" fill="rgb(231,204,27)" fg:x="653" fg:w="1"/><text x="52.9538%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="52.7038%" y="325" width="0.0807%" height="15" fill="rgb(253,26,34)" fg:x="653" fg:w="1"/><text x="52.9538%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="52.7038%" y="309" width="0.0807%" height="15" fill="rgb(207,139,38)" fg:x="653" fg:w="1"/><text x="52.9538%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="52.7038%" y="293" width="0.0807%" height="15" fill="rgb(248,54,27)" fg:x="653" fg:w="1"/><text x="52.9538%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="52.7845%" y="405" width="0.0807%" height="15" fill="rgb(234,25,33)" fg:x="654" fg:w="1"/><text x="53.0345%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="52.7845%" y="421" width="0.1614%" height="15" fill="rgb(249,107,47)" fg:x="654" fg:w="2"/><text x="53.0345%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="52.8652%" y="405" width="0.0807%" height="15" fill="rgb(230,190,31)" fg:x="655" fg:w="1"/><text x="53.1152%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="52.8652%" y="389" width="0.0807%" height="15" fill="rgb(238,173,45)" fg:x="655" fg:w="1"/><text x="53.1152%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="52.8652%" y="373" width="0.0807%" height="15" fill="rgb(222,16,50)" fg:x="655" fg:w="1"/><text x="53.1152%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="52.8652%" y="357" width="0.0807%" height="15" fill="rgb(251,204,47)" fg:x="655" fg:w="1"/><text x="53.1152%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="52.8652%" y="341" width="0.0807%" height="15" fill="rgb(225,12,3)" fg:x="655" fg:w="1"/><text x="53.1152%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="52.8652%" y="325" width="0.0807%" height="15" fill="rgb(214,208,22)" fg:x="655" fg:w="1"/><text x="53.1152%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="52.9459%" y="421" width="0.0807%" height="15" fill="rgb(240,57,32)" fg:x="656" fg:w="1"/><text x="53.1959%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="52.9459%" y="405" width="0.0807%" height="15" fill="rgb(243,113,48)" fg:x="656" fg:w="1"/><text x="53.1959%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="52.9459%" y="389" width="0.0807%" height="15" fill="rgb(225,135,30)" fg:x="656" fg:w="1"/><text x="53.1959%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="52.9459%" y="373" width="0.0807%" height="15" fill="rgb(222,3,53)" fg:x="656" fg:w="1"/><text x="53.1959%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="52.9459%" y="357" width="0.0807%" height="15" fill="rgb(243,142,2)" fg:x="656" fg:w="1"/><text x="53.1959%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="52.9459%" y="341" width="0.0807%" height="15" fill="rgb(233,67,14)" fg:x="656" fg:w="1"/><text x="53.1959%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="52.9459%" y="325" width="0.0807%" height="15" fill="rgb(245,125,36)" fg:x="656" fg:w="1"/><text x="53.1959%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="53.0266%" y="389" width="0.0807%" height="15" fill="rgb(225,199,6)" fg:x="657" fg:w="1"/><text x="53.2766%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="53.0266%" y="373" width="0.0807%" height="15" fill="rgb(244,71,6)" fg:x="657" fg:w="1"/><text x="53.2766%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="53.0266%" y="357" width="0.0807%" height="15" fill="rgb(225,62,9)" fg:x="657" fg:w="1"/><text x="53.2766%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="53.0266%" y="341" width="0.0807%" height="15" fill="rgb(246,139,53)" fg:x="657" fg:w="1"/><text x="53.2766%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="53.0266%" y="325" width="0.0807%" height="15" fill="rgb(243,161,46)" fg:x="657" fg:w="1"/><text x="53.2766%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="53.0266%" y="309" width="0.0807%" height="15" fill="rgb(236,153,7)" fg:x="657" fg:w="1"/><text x="53.2766%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="53.0266%" y="293" width="0.0807%" height="15" fill="rgb(248,42,35)" fg:x="657" fg:w="1"/><text x="53.2766%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="53.0266%" y="277" width="0.0807%" height="15" fill="rgb(250,17,31)" fg:x="657" fg:w="1"/><text x="53.2766%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="53.0266%" y="261" width="0.0807%" height="15" fill="rgb(248,138,14)" fg:x="657" fg:w="1"/><text x="53.2766%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="53.0266%" y="245" width="0.0807%" height="15" fill="rgb(228,161,3)" fg:x="657" fg:w="1"/><text x="53.2766%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="53.0266%" y="405" width="0.1614%" height="15" fill="rgb(248,116,17)" fg:x="657" fg:w="2"/><text x="53.2766%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="53.1073%" y="389" width="0.0807%" height="15" fill="rgb(207,78,24)" fg:x="658" fg:w="1"/><text x="53.3573%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="53.1073%" y="373" width="0.0807%" height="15" fill="rgb(234,99,48)" fg:x="658" fg:w="1"/><text x="53.3573%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="53.1881%" y="405" width="0.0807%" height="15" fill="rgb(242,22,26)" fg:x="659" fg:w="1"/><text x="53.4381%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.1881%" y="389" width="0.0807%" height="15" fill="rgb(227,78,32)" fg:x="659" fg:w="1"/><text x="53.4381%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="53.0266%" y="421" width="0.3228%" height="15" fill="rgb(226,189,43)" fg:x="657" fg:w="4"/><text x="53.2766%" y="431.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="53.2688%" y="405" width="0.0807%" height="15" fill="rgb(227,218,35)" fg:x="660" fg:w="1"/><text x="53.5188%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="53.3495%" y="389" width="0.0807%" height="15" fill="rgb(206,111,40)" fg:x="661" fg:w="1"/><text x="53.5995%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="53.3495%" y="373" width="0.0807%" height="15" fill="rgb(208,217,22)" fg:x="661" fg:w="1"/><text x="53.5995%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="53.3495%" y="421" width="0.2421%" height="15" fill="rgb(248,20,20)" fg:x="661" fg:w="3"/><text x="53.5995%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="53.3495%" y="405" width="0.2421%" height="15" fill="rgb(239,155,16)" fg:x="661" fg:w="3"/><text x="53.5995%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="53.4302%" y="389" width="0.1614%" height="15" fill="rgb(238,171,46)" fg:x="662" fg:w="2"/><text x="53.6802%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="53.4302%" y="373" width="0.1614%" height="15" fill="rgb(248,11,36)" fg:x="662" fg:w="2"/><text x="53.6802%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="53.5109%" y="357" width="0.0807%" height="15" fill="rgb(220,148,37)" fg:x="663" fg:w="1"/><text x="53.7609%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="53.5109%" y="341" width="0.0807%" height="15" fill="rgb(218,144,42)" fg:x="663" fg:w="1"/><text x="53.7609%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="53.5109%" y="325" width="0.0807%" height="15" fill="rgb(245,20,20)" fg:x="663" fg:w="1"/><text x="53.7609%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="53.5109%" y="309" width="0.0807%" height="15" fill="rgb(240,111,48)" fg:x="663" fg:w="1"/><text x="53.7609%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.5109%" y="293" width="0.0807%" height="15" fill="rgb(237,225,32)" fg:x="663" fg:w="1"/><text x="53.7609%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="53.6723%" y="341" width="0.0807%" height="15" fill="rgb(228,161,46)" fg:x="665" fg:w="1"/><text x="53.9223%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="53.6723%" y="325" width="0.0807%" height="15" fill="rgb(235,196,21)" fg:x="665" fg:w="1"/><text x="53.9223%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="53.6723%" y="309" width="0.0807%" height="15" fill="rgb(250,133,21)" fg:x="665" fg:w="1"/><text x="53.9223%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="53.6723%" y="293" width="0.0807%" height="15" fill="rgb(236,94,32)" fg:x="665" fg:w="1"/><text x="53.9223%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="53.7530%" y="341" width="0.0807%" height="15" fill="rgb(219,176,25)" fg:x="666" fg:w="1"/><text x="54.0030%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="53.7530%" y="325" width="0.0807%" height="15" fill="rgb(211,17,43)" fg:x="666" fg:w="1"/><text x="54.0030%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="53.7530%" y="309" width="0.0807%" height="15" fill="rgb(220,75,23)" fg:x="666" fg:w="1"/><text x="54.0030%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="53.7530%" y="293" width="0.0807%" height="15" fill="rgb(215,122,32)" fg:x="666" fg:w="1"/><text x="54.0030%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="53.7530%" y="277" width="0.0807%" height="15" fill="rgb(218,57,38)" fg:x="666" fg:w="1"/><text x="54.0030%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.7530%" y="261" width="0.0807%" height="15" fill="rgb(233,208,46)" fg:x="666" fg:w="1"/><text x="54.0030%" y="271.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::new (1 samples, 0.08%)</title><rect x="53.8337%" y="325" width="0.0807%" height="15" fill="rgb(221,35,50)" fg:x="667" fg:w="1"/><text x="54.0837%" y="335.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="53.8337%" y="309" width="0.0807%" height="15" fill="rgb(229,213,29)" fg:x="667" fg:w="1"/><text x="54.0837%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="53.9144%" y="293" width="0.0807%" height="15" fill="rgb(229,110,40)" fg:x="668" fg:w="1"/><text x="54.1644%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="53.9144%" y="277" width="0.0807%" height="15" fill="rgb(247,206,19)" fg:x="668" fg:w="1"/><text x="54.1644%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="53.9144%" y="261" width="0.0807%" height="15" fill="rgb(216,229,45)" fg:x="668" fg:w="1"/><text x="54.1644%" y="271.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="53.9952%" y="293" width="0.0807%" height="15" fill="rgb(205,184,31)" fg:x="669" fg:w="1"/><text x="54.2452%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.9952%" y="277" width="0.0807%" height="15" fill="rgb(213,91,10)" fg:x="669" fg:w="1"/><text x="54.2452%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.65%)</title><rect x="54.0759%" y="277" width="0.6457%" height="15" fill="rgb(250,49,8)" fg:x="670" fg:w="8"/><text x="54.3259%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="54.1566%" y="261" width="0.5650%" height="15" fill="rgb(207,26,8)" fg:x="671" fg:w="7"/><text x="54.4066%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="54.7215%" y="277" width="0.0807%" height="15" fill="rgb(224,2,13)" fg:x="678" fg:w="1"/><text x="54.9715%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="54.8023%" y="277" width="0.0807%" height="15" fill="rgb(219,108,27)" fg:x="679" fg:w="1"/><text x="55.0523%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="54.8023%" y="261" width="0.0807%" height="15" fill="rgb(240,89,32)" fg:x="679" fg:w="1"/><text x="55.0523%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="54.8830%" y="277" width="0.0807%" height="15" fill="rgb(248,205,3)" fg:x="680" fg:w="1"/><text x="55.1330%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="54.8830%" y="261" width="0.0807%" height="15" fill="rgb(236,197,47)" fg:x="680" fg:w="1"/><text x="55.1330%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="54.8830%" y="245" width="0.0807%" height="15" fill="rgb(244,185,52)" fg:x="680" fg:w="1"/><text x="55.1330%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.8830%" y="229" width="0.0807%" height="15" fill="rgb(210,206,23)" fg:x="680" fg:w="1"/><text x="55.1330%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="54.9637%" y="229" width="0.0807%" height="15" fill="rgb(251,177,30)" fg:x="681" fg:w="1"/><text x="55.2137%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="55.2865%" y="213" width="0.0807%" height="15" fill="rgb(243,27,45)" fg:x="685" fg:w="1"/><text x="55.5365%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="55.3672%" y="181" width="0.1614%" height="15" fill="rgb(248,141,51)" fg:x="686" fg:w="2"/><text x="55.6172%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.3672%" y="165" width="0.1614%" height="15" fill="rgb(235,102,15)" fg:x="686" fg:w="2"/><text x="55.6172%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.3672%" y="149" width="0.1614%" height="15" fill="rgb(214,164,53)" fg:x="686" fg:w="2"/><text x="55.6172%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="55.3672%" y="213" width="0.2421%" height="15" fill="rgb(228,18,51)" fg:x="686" fg:w="3"/><text x="55.6172%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="55.3672%" y="197" width="0.2421%" height="15" fill="rgb(205,211,11)" fg:x="686" fg:w="3"/><text x="55.6172%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="55.5287%" y="181" width="0.0807%" height="15" fill="rgb(208,63,6)" fg:x="688" fg:w="1"/><text x="55.7787%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="55.6094%" y="213" width="0.0807%" height="15" fill="rgb(245,76,14)" fg:x="689" fg:w="1"/><text x="55.8594%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="55.6094%" y="197" width="0.0807%" height="15" fill="rgb(234,176,34)" fg:x="689" fg:w="1"/><text x="55.8594%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.6901%" y="197" width="0.0807%" height="15" fill="rgb(243,156,42)" fg:x="690" fg:w="1"/><text x="55.9401%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.6901%" y="181" width="0.0807%" height="15" fill="rgb(237,182,10)" fg:x="690" fg:w="1"/><text x="55.9401%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.6901%" y="165" width="0.0807%" height="15" fill="rgb(244,117,0)" fg:x="690" fg:w="1"/><text x="55.9401%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.7708%" y="181" width="0.0807%" height="15" fill="rgb(239,91,50)" fg:x="691" fg:w="1"/><text x="56.0208%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (38 samples, 3.07%)</title><rect x="55.6901%" y="213" width="3.0670%" height="15" fill="rgb(206,38,9)" fg:x="690" fg:w="38"/><text x="55.9401%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (37 samples, 2.99%)</title><rect x="55.7708%" y="197" width="2.9863%" height="15" fill="rgb(205,25,10)" fg:x="691" fg:w="37"/><text x="56.0208%" y="207.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (36 samples, 2.91%)</title><rect x="55.8515%" y="181" width="2.9056%" height="15" fill="rgb(206,224,7)" fg:x="692" fg:w="36"/><text x="56.1015%" y="191.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 4.04%)</title><rect x="54.9637%" y="261" width="4.0355%" height="15" fill="rgb(227,157,10)" fg:x="681" fg:w="50"/><text x="55.2137%" y="271.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (50 samples, 4.04%)</title><rect x="54.9637%" y="245" width="4.0355%" height="15" fill="rgb(214,157,37)" fg:x="681" fg:w="50"/><text x="55.2137%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (49 samples, 3.95%)</title><rect x="55.0444%" y="229" width="3.9548%" height="15" fill="rgb(209,180,35)" fg:x="682" fg:w="49"/><text x="55.2944%" y="239.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="58.7571%" y="213" width="0.2421%" height="15" fill="rgb(216,174,49)" fg:x="728" fg:w="3"/><text x="59.0071%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="58.9992%" y="245" width="0.0807%" height="15" fill="rgb(205,96,20)" fg:x="731" fg:w="1"/><text x="59.2492%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.9992%" y="229" width="0.0807%" height="15" fill="rgb(214,220,39)" fg:x="731" fg:w="1"/><text x="59.2492%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.9992%" y="213" width="0.0807%" height="15" fill="rgb(245,126,30)" fg:x="731" fg:w="1"/><text x="59.2492%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.9992%" y="197" width="0.0807%" height="15" fill="rgb(215,88,33)" fg:x="731" fg:w="1"/><text x="59.2492%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="59.0799%" y="245" width="0.0807%" height="15" fill="rgb(210,1,49)" fg:x="732" fg:w="1"/><text x="59.3299%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (64 samples, 5.17%)</title><rect x="54.0759%" y="293" width="5.1655%" height="15" fill="rgb(207,133,3)" fg:x="670" fg:w="64"/><text x="54.3259%" y="303.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (53 samples, 4.28%)</title><rect x="54.9637%" y="277" width="4.2776%" height="15" fill="rgb(231,47,43)" fg:x="681" fg:w="53"/><text x="55.2137%" y="287.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="58.9992%" y="261" width="0.2421%" height="15" fill="rgb(245,64,1)" fg:x="731" fg:w="3"/><text x="59.2492%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="59.1606%" y="245" width="0.0807%" height="15" fill="rgb(253,145,20)" fg:x="733" fg:w="1"/><text x="59.4106%" y="255.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="59.3220%" y="245" width="0.0807%" height="15" fill="rgb(211,39,18)" fg:x="735" fg:w="1"/><text x="59.5720%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="59.3220%" y="261" width="0.3228%" height="15" fill="rgb(223,225,18)" fg:x="735" fg:w="4"/><text x="59.5720%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="59.4027%" y="245" width="0.2421%" height="15" fill="rgb(210,202,44)" fg:x="736" fg:w="3"/><text x="59.6527%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="59.4027%" y="229" width="0.2421%" height="15" fill="rgb(231,138,36)" fg:x="736" fg:w="3"/><text x="59.6527%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="59.4027%" y="213" width="0.2421%" height="15" fill="rgb(237,115,25)" fg:x="736" fg:w="3"/><text x="59.6527%" y="223.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="59.4027%" y="197" width="0.2421%" height="15" fill="rgb(215,53,48)" fg:x="736" fg:w="3"/><text x="59.6527%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="59.2413%" y="293" width="0.4843%" height="15" fill="rgb(243,193,24)" fg:x="734" fg:w="6"/><text x="59.4913%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="59.3220%" y="277" width="0.4036%" height="15" fill="rgb(210,106,28)" fg:x="735" fg:w="5"/><text x="59.5720%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="59.6449%" y="261" width="0.0807%" height="15" fill="rgb(249,192,0)" fg:x="739" fg:w="1"/><text x="59.8949%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (74 samples, 5.97%)</title><rect x="53.8337%" y="341" width="5.9726%" height="15" fill="rgb(224,96,21)" fg:x="667" fg:w="74"/><text x="54.0837%" y="351.50">regex::r..</text></g><g><title>regex::builders::string::RegexBuilder::build (73 samples, 5.89%)</title><rect x="53.9144%" y="325" width="5.8918%" height="15" fill="rgb(243,160,19)" fg:x="668" fg:w="73"/><text x="54.1644%" y="335.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (73 samples, 5.89%)</title><rect x="53.9144%" y="309" width="5.8918%" height="15" fill="rgb(219,205,50)" fg:x="668" fg:w="73"/><text x="54.1644%" y="319.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="59.7256%" y="293" width="0.0807%" height="15" fill="rgb(218,175,44)" fg:x="740" fg:w="1"/><text x="59.9756%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="59.7256%" y="277" width="0.0807%" height="15" fill="rgb(251,84,47)" fg:x="740" fg:w="1"/><text x="59.9756%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="59.7256%" y="261" width="0.0807%" height="15" fill="rgb(241,14,16)" fg:x="740" fg:w="1"/><text x="59.9756%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="59.7256%" y="245" width="0.0807%" height="15" fill="rgb(207,142,28)" fg:x="740" fg:w="1"/><text x="59.9756%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.8063%" y="277" width="0.0807%" height="15" fill="rgb(208,116,22)" fg:x="741" fg:w="1"/><text x="60.0563%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="59.8063%" y="293" width="0.1614%" height="15" fill="rgb(210,0,43)" fg:x="741" fg:w="2"/><text x="60.0563%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="59.8870%" y="277" width="0.0807%" height="15" fill="rgb(246,33,21)" fg:x="742" fg:w="1"/><text x="60.1370%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (80 samples, 6.46%)</title><rect x="53.5916%" y="357" width="6.4568%" height="15" fill="rgb(208,158,54)" fg:x="664" fg:w="80"/><text x="53.8416%" y="367.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="59.8063%" y="341" width="0.2421%" height="15" fill="rgb(218,99,29)" fg:x="741" fg:w="3"/><text x="60.0563%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="59.8063%" y="325" width="0.2421%" height="15" fill="rgb(226,29,7)" fg:x="741" fg:w="3"/><text x="60.0563%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="59.8063%" y="309" width="0.2421%" height="15" fill="rgb(206,178,46)" fg:x="741" fg:w="3"/><text x="60.0563%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="59.9677%" y="293" width="0.0807%" height="15" fill="rgb(205,169,32)" fg:x="743" fg:w="1"/><text x="60.2177%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="59.9677%" y="277" width="0.0807%" height="15" fill="rgb(217,4,13)" fg:x="743" fg:w="1"/><text x="60.2177%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.9677%" y="261" width="0.0807%" height="15" fill="rgb(210,140,37)" fg:x="743" fg:w="1"/><text x="60.2177%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.9677%" y="245" width="0.0807%" height="15" fill="rgb(229,80,10)" fg:x="743" fg:w="1"/><text x="60.2177%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.9677%" y="229" width="0.0807%" height="15" fill="rgb(212,175,34)" fg:x="743" fg:w="1"/><text x="60.2177%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.0484%" y="309" width="0.0807%" height="15" fill="rgb(216,207,24)" fg:x="744" fg:w="1"/><text x="60.2984%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="60.1291%" y="293" width="0.0807%" height="15" fill="rgb(234,163,3)" fg:x="745" fg:w="1"/><text x="60.3791%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.1291%" y="277" width="0.0807%" height="15" fill="rgb(248,101,16)" fg:x="745" fg:w="1"/><text x="60.3791%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.1291%" y="261" width="0.0807%" height="15" fill="rgb(209,152,54)" fg:x="745" fg:w="1"/><text x="60.3791%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="60.1291%" y="309" width="0.1614%" height="15" fill="rgb(229,124,51)" fg:x="745" fg:w="2"/><text x="60.3791%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="60.2098%" y="293" width="0.0807%" height="15" fill="rgb(219,83,18)" fg:x="746" fg:w="1"/><text x="60.4598%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.2098%" y="277" width="0.0807%" height="15" fill="rgb(206,29,38)" fg:x="746" fg:w="1"/><text x="60.4598%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.2098%" y="261" width="0.0807%" height="15" fill="rgb(245,123,23)" fg:x="746" fg:w="1"/><text x="60.4598%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.2098%" y="245" width="0.0807%" height="15" fill="rgb(238,50,33)" fg:x="746" fg:w="1"/><text x="60.4598%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="60.2906%" y="293" width="0.0807%" height="15" fill="rgb(234,165,23)" fg:x="747" fg:w="1"/><text x="60.5406%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.2906%" y="277" width="0.0807%" height="15" fill="rgb(211,82,31)" fg:x="747" fg:w="1"/><text x="60.5406%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="60.0484%" y="341" width="0.4036%" height="15" fill="rgb(224,166,46)" fg:x="744" fg:w="5"/><text x="60.2984%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="60.0484%" y="325" width="0.4036%" height="15" fill="rgb(211,13,8)" fg:x="744" fg:w="5"/><text x="60.2984%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="60.2906%" y="309" width="0.1614%" height="15" fill="rgb(212,7,42)" fg:x="747" fg:w="2"/><text x="60.5406%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="60.3713%" y="293" width="0.0807%" height="15" fill="rgb(249,102,19)" fg:x="748" fg:w="1"/><text x="60.6213%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.3713%" y="277" width="0.0807%" height="15" fill="rgb(225,41,13)" fg:x="748" fg:w="1"/><text x="60.6213%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.6134%" y="245" width="0.0807%" height="15" fill="rgb(220,65,27)" fg:x="751" fg:w="1"/><text x="60.8634%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.6134%" y="229" width="0.0807%" height="15" fill="rgb(206,4,41)" fg:x="751" fg:w="1"/><text x="60.8634%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.6134%" y="213" width="0.0807%" height="15" fill="rgb(219,60,39)" fg:x="751" fg:w="1"/><text x="60.8634%" y="223.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.40%)</title><rect x="60.4520%" y="341" width="0.4036%" height="15" fill="rgb(226,4,38)" fg:x="749" fg:w="5"/><text x="60.7020%" y="351.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="60.4520%" y="325" width="0.4036%" height="15" fill="rgb(250,52,3)" fg:x="749" fg:w="5"/><text x="60.7020%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="60.4520%" y="309" width="0.4036%" height="15" fill="rgb(234,93,0)" fg:x="749" fg:w="5"/><text x="60.7020%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="60.4520%" y="293" width="0.4036%" height="15" fill="rgb(251,47,47)" fg:x="749" fg:w="5"/><text x="60.7020%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="60.4520%" y="277" width="0.4036%" height="15" fill="rgb(205,166,47)" fg:x="749" fg:w="5"/><text x="60.7020%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="60.4520%" y="261" width="0.4036%" height="15" fill="rgb(231,148,8)" fg:x="749" fg:w="5"/><text x="60.7020%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="60.6941%" y="245" width="0.1614%" height="15" fill="rgb(244,185,19)" fg:x="752" fg:w="2"/><text x="60.9441%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="60.8555%" y="261" width="0.0807%" height="15" fill="rgb(224,201,45)" fg:x="754" fg:w="1"/><text x="61.1055%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.9362%" y="261" width="0.0807%" height="15" fill="rgb(240,77,39)" fg:x="755" fg:w="1"/><text x="61.1862%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.0169%" y="261" width="0.0807%" height="15" fill="rgb(248,211,29)" fg:x="756" fg:w="1"/><text x="61.2669%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="60.8555%" y="293" width="0.3228%" height="15" fill="rgb(232,214,46)" fg:x="754" fg:w="4"/><text x="61.1055%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="60.8555%" y="277" width="0.3228%" height="15" fill="rgb(213,99,54)" fg:x="754" fg:w="4"/><text x="61.1055%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="61.0977%" y="261" width="0.0807%" height="15" fill="rgb(240,19,46)" fg:x="757" fg:w="1"/><text x="61.3477%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="61.0977%" y="245" width="0.0807%" height="15" fill="rgb(243,89,10)" fg:x="757" fg:w="1"/><text x="61.3477%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.1784%" y="293" width="0.0807%" height="15" fill="rgb(249,28,32)" fg:x="758" fg:w="1"/><text x="61.4284%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.2591%" y="261" width="0.0807%" height="15" fill="rgb(253,30,9)" fg:x="759" fg:w="1"/><text x="61.5091%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="61.2591%" y="293" width="0.1614%" height="15" fill="rgb(217,2,26)" fg:x="759" fg:w="2"/><text x="61.5091%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="61.2591%" y="277" width="0.1614%" height="15" fill="rgb(220,28,10)" fg:x="759" fg:w="2"/><text x="61.5091%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="61.3398%" y="261" width="0.0807%" height="15" fill="rgb(228,167,49)" fg:x="760" fg:w="1"/><text x="61.5898%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.3398%" y="245" width="0.0807%" height="15" fill="rgb(238,212,3)" fg:x="760" fg:w="1"/><text x="61.5898%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.4205%" y="261" width="0.0807%" height="15" fill="rgb(229,134,44)" fg:x="761" fg:w="1"/><text x="61.6705%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="61.4205%" y="277" width="0.4843%" height="15" fill="rgb(208,71,4)" fg:x="761" fg:w="6"/><text x="61.6705%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="61.5012%" y="261" width="0.4036%" height="15" fill="rgb(221,205,45)" fg:x="762" fg:w="5"/><text x="61.7512%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="61.9048%" y="261" width="0.1614%" height="15" fill="rgb(215,132,38)" fg:x="767" fg:w="2"/><text x="62.1548%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="61.9048%" y="277" width="0.2421%" height="15" fill="rgb(227,158,6)" fg:x="767" fg:w="3"/><text x="62.1548%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="62.0662%" y="261" width="0.0807%" height="15" fill="rgb(250,10,38)" fg:x="769" fg:w="1"/><text x="62.3162%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="62.4697%" y="213" width="0.1614%" height="15" fill="rgb(225,171,40)" fg:x="774" fg:w="2"/><text x="62.7197%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="62.4697%" y="197" width="0.1614%" height="15" fill="rgb(238,17,43)" fg:x="774" fg:w="2"/><text x="62.7197%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="62.4697%" y="181" width="0.1614%" height="15" fill="rgb(208,145,4)" fg:x="774" fg:w="2"/><text x="62.7197%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.48%)</title><rect x="62.2276%" y="245" width="0.4843%" height="15" fill="rgb(232,82,7)" fg:x="771" fg:w="6"/><text x="62.4776%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="62.4697%" y="229" width="0.2421%" height="15" fill="rgb(205,166,38)" fg:x="774" fg:w="3"/><text x="62.7197%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.6312%" y="213" width="0.0807%" height="15" fill="rgb(240,228,4)" fg:x="776" fg:w="1"/><text x="62.8812%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.65%)</title><rect x="62.1469%" y="277" width="0.6457%" height="15" fill="rgb(233,121,40)" fg:x="770" fg:w="8"/><text x="62.3969%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.65%)</title><rect x="62.1469%" y="261" width="0.6457%" height="15" fill="rgb(243,84,30)" fg:x="770" fg:w="8"/><text x="62.3969%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="62.7119%" y="245" width="0.0807%" height="15" fill="rgb(235,81,48)" fg:x="777" fg:w="1"/><text x="62.9619%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="62.7119%" y="229" width="0.0807%" height="15" fill="rgb(218,137,0)" fg:x="777" fg:w="1"/><text x="62.9619%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="62.7119%" y="213" width="0.0807%" height="15" fill="rgb(223,151,48)" fg:x="777" fg:w="1"/><text x="62.9619%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="62.7926%" y="245" width="0.0807%" height="15" fill="rgb(247,30,19)" fg:x="778" fg:w="1"/><text x="63.0426%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="62.8733%" y="213" width="0.0807%" height="15" fill="rgb(205,129,29)" fg:x="779" fg:w="1"/><text x="63.1233%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="63.3575%" y="165" width="0.2421%" height="15" fill="rgb(222,29,2)" fg:x="785" fg:w="3"/><text x="63.6075%" y="175.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="63.5997%" y="165" width="0.3228%" height="15" fill="rgb(232,145,33)" fg:x="788" fg:w="4"/><text x="63.8497%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="63.9225%" y="165" width="0.1614%" height="15" fill="rgb(217,30,31)" fg:x="792" fg:w="2"/><text x="64.1725%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="64.0839%" y="165" width="0.4036%" height="15" fill="rgb(243,22,52)" fg:x="794" fg:w="5"/><text x="64.3339%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="64.2454%" y="149" width="0.2421%" height="15" fill="rgb(254,228,14)" fg:x="796" fg:w="3"/><text x="64.4954%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="64.3261%" y="133" width="0.1614%" height="15" fill="rgb(231,45,50)" fg:x="797" fg:w="2"/><text x="64.5761%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="64.4068%" y="117" width="0.0807%" height="15" fill="rgb(248,125,3)" fg:x="798" fg:w="1"/><text x="64.6568%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.4068%" y="101" width="0.0807%" height="15" fill="rgb(213,76,9)" fg:x="798" fg:w="1"/><text x="64.6568%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.4068%" y="85" width="0.0807%" height="15" fill="rgb(238,108,21)" fg:x="798" fg:w="1"/><text x="64.6568%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.4068%" y="69" width="0.0807%" height="15" fill="rgb(229,214,19)" fg:x="798" fg:w="1"/><text x="64.6568%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (33 samples, 2.66%)</title><rect x="64.4875%" y="165" width="2.6634%" height="15" fill="rgb(252,201,5)" fg:x="799" fg:w="33"/><text x="64.7375%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (32 samples, 2.58%)</title><rect x="64.5682%" y="149" width="2.5827%" height="15" fill="rgb(233,165,49)" fg:x="800" fg:w="32"/><text x="64.8182%" y="159.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (31 samples, 2.50%)</title><rect x="64.6489%" y="133" width="2.5020%" height="15" fill="rgb(208,165,19)" fg:x="801" fg:w="31"/><text x="64.8989%" y="143.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="67.1509%" y="165" width="0.1614%" height="15" fill="rgb(216,220,31)" fg:x="832" fg:w="2"/><text x="67.4009%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 4.68%)</title><rect x="62.7926%" y="261" width="4.6812%" height="15" fill="rgb(214,8,31)" fg:x="778" fg:w="58"/><text x="63.0426%" y="271.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (57 samples, 4.60%)</title><rect x="62.8733%" y="245" width="4.6005%" height="15" fill="rgb(220,32,32)" fg:x="779" fg:w="57"/><text x="63.1233%" y="255.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (57 samples, 4.60%)</title><rect x="62.8733%" y="229" width="4.6005%" height="15" fill="rgb(237,172,34)" fg:x="779" fg:w="57"/><text x="63.1233%" y="239.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (56 samples, 4.52%)</title><rect x="62.9540%" y="213" width="4.5198%" height="15" fill="rgb(240,209,5)" fg:x="780" fg:w="56"/><text x="63.2040%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (56 samples, 4.52%)</title><rect x="62.9540%" y="197" width="4.5198%" height="15" fill="rgb(221,219,1)" fg:x="780" fg:w="56"/><text x="63.2040%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (56 samples, 4.52%)</title><rect x="62.9540%" y="181" width="4.5198%" height="15" fill="rgb(237,90,36)" fg:x="780" fg:w="56"/><text x="63.2040%" y="191.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="67.3123%" y="165" width="0.1614%" height="15" fill="rgb(245,14,51)" fg:x="834" fg:w="2"/><text x="67.5623%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.3931%" y="149" width="0.0807%" height="15" fill="rgb(211,71,49)" fg:x="835" fg:w="1"/><text x="67.6431%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.3931%" y="133" width="0.0807%" height="15" fill="rgb(230,223,9)" fg:x="835" fg:w="1"/><text x="67.6431%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.3931%" y="117" width="0.0807%" height="15" fill="rgb(212,33,31)" fg:x="835" fg:w="1"/><text x="67.6431%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="67.6352%" y="245" width="0.1614%" height="15" fill="rgb(218,141,5)" fg:x="838" fg:w="2"/><text x="67.8852%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.7159%" y="229" width="0.0807%" height="15" fill="rgb(239,194,8)" fg:x="839" fg:w="1"/><text x="67.9659%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.7159%" y="213" width="0.0807%" height="15" fill="rgb(225,119,29)" fg:x="839" fg:w="1"/><text x="67.9659%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.7159%" y="197" width="0.0807%" height="15" fill="rgb(233,32,3)" fg:x="839" fg:w="1"/><text x="67.9659%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="67.7966%" y="245" width="0.1614%" height="15" fill="rgb(248,126,40)" fg:x="840" fg:w="2"/><text x="68.0466%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="67.4738%" y="261" width="0.5650%" height="15" fill="rgb(213,102,53)" fg:x="836" fg:w="7"/><text x="67.7238%" y="271.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="67.9580%" y="245" width="0.0807%" height="15" fill="rgb(212,69,15)" fg:x="842" fg:w="1"/><text x="68.2080%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.9580%" y="229" width="0.0807%" height="15" fill="rgb(253,39,34)" fg:x="842" fg:w="1"/><text x="68.2080%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.9580%" y="213" width="0.0807%" height="15" fill="rgb(205,189,54)" fg:x="842" fg:w="1"/><text x="68.2080%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.9580%" y="197" width="0.0807%" height="15" fill="rgb(234,229,45)" fg:x="842" fg:w="1"/><text x="68.2080%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (83 samples, 6.70%)</title><rect x="61.4205%" y="293" width="6.6990%" height="15" fill="rgb(243,79,48)" fg:x="761" fg:w="83"/><text x="61.6705%" y="303.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (66 samples, 5.33%)</title><rect x="62.7926%" y="277" width="5.3269%" height="15" fill="rgb(206,71,50)" fg:x="778" fg:w="66"/><text x="63.0426%" y="287.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="68.0387%" y="261" width="0.0807%" height="15" fill="rgb(209,32,17)" fg:x="843" fg:w="1"/><text x="68.2887%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="68.1195%" y="293" width="0.0807%" height="15" fill="rgb(219,229,6)" fg:x="844" fg:w="1"/><text x="68.3695%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="68.1195%" y="277" width="0.0807%" height="15" fill="rgb(226,25,27)" fg:x="844" fg:w="1"/><text x="68.3695%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="68.1195%" y="261" width="0.0807%" height="15" fill="rgb(218,185,23)" fg:x="844" fg:w="1"/><text x="68.3695%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="68.1195%" y="245" width="0.0807%" height="15" fill="rgb(242,123,5)" fg:x="844" fg:w="1"/><text x="68.3695%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.1195%" y="229" width="0.0807%" height="15" fill="rgb(215,53,19)" fg:x="844" fg:w="1"/><text x="68.3695%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.1195%" y="213" width="0.0807%" height="15" fill="rgb(233,20,30)" fg:x="844" fg:w="1"/><text x="68.3695%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1195%" y="197" width="0.0807%" height="15" fill="rgb(209,67,20)" fg:x="844" fg:w="1"/><text x="68.3695%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="68.2002%" y="245" width="0.3228%" height="15" fill="rgb(227,181,50)" fg:x="845" fg:w="4"/><text x="68.4502%" y="255.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.24%)</title><rect x="68.2809%" y="229" width="0.2421%" height="15" fill="rgb(252,75,38)" fg:x="846" fg:w="3"/><text x="68.5309%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="68.2002%" y="261" width="0.4036%" height="15" fill="rgb(235,9,33)" fg:x="845" fg:w="5"/><text x="68.4502%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="68.5230%" y="245" width="0.0807%" height="15" fill="rgb(208,87,30)" fg:x="849" fg:w="1"/><text x="68.7730%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="68.5230%" y="229" width="0.0807%" height="15" fill="rgb(215,199,39)" fg:x="849" fg:w="1"/><text x="68.7730%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (107 samples, 8.64%)</title><rect x="60.0484%" y="357" width="8.6360%" height="15" fill="rgb(246,208,12)" fg:x="744" fg:w="107"/><text x="60.2984%" y="367.50">indefinite::..</text></g><g><title>regex::regex::string::Regex::new (97 samples, 7.83%)</title><rect x="60.8555%" y="341" width="7.8289%" height="15" fill="rgb(206,195,10)" fg:x="754" fg:w="97"/><text x="61.1055%" y="351.50">regex::rege..</text></g><g><title>regex::builders::string::RegexBuilder::build (97 samples, 7.83%)</title><rect x="60.8555%" y="325" width="7.8289%" height="15" fill="rgb(244,1,30)" fg:x="754" fg:w="97"/><text x="61.1055%" y="335.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (97 samples, 7.83%)</title><rect x="60.8555%" y="309" width="7.8289%" height="15" fill="rgb(230,83,5)" fg:x="754" fg:w="97"/><text x="61.1055%" y="319.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="68.2002%" y="293" width="0.4843%" height="15" fill="rgb(239,62,17)" fg:x="845" fg:w="6"/><text x="68.4502%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="68.2002%" y="277" width="0.4843%" height="15" fill="rgb(252,193,41)" fg:x="845" fg:w="6"/><text x="68.4502%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="68.6037%" y="261" width="0.0807%" height="15" fill="rgb(216,142,19)" fg:x="850" fg:w="1"/><text x="68.8537%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="68.6037%" y="245" width="0.0807%" height="15" fill="rgb(240,81,38)" fg:x="850" fg:w="1"/><text x="68.8537%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.6037%" y="229" width="0.0807%" height="15" fill="rgb(240,109,40)" fg:x="850" fg:w="1"/><text x="68.8537%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.6037%" y="213" width="0.0807%" height="15" fill="rgb(230,123,10)" fg:x="850" fg:w="1"/><text x="68.8537%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.6037%" y="197" width="0.0807%" height="15" fill="rgb(253,42,32)" fg:x="850" fg:w="1"/><text x="68.8537%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="68.6844%" y="293" width="0.0807%" height="15" fill="rgb(218,154,8)" fg:x="851" fg:w="1"/><text x="68.9344%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="68.6844%" y="277" width="0.0807%" height="15" fill="rgb(216,197,10)" fg:x="851" fg:w="1"/><text x="68.9344%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="68.6844%" y="261" width="0.0807%" height="15" fill="rgb(223,107,12)" fg:x="851" fg:w="1"/><text x="68.9344%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6844%" y="245" width="0.0807%" height="15" fill="rgb(241,174,42)" fg:x="851" fg:w="1"/><text x="68.9344%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="68.6844%" y="325" width="0.1614%" height="15" fill="rgb(231,78,20)" fg:x="851" fg:w="2"/><text x="68.9344%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="68.6844%" y="309" width="0.1614%" height="15" fill="rgb(230,208,49)" fg:x="851" fg:w="2"/><text x="68.9344%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="68.7651%" y="293" width="0.0807%" height="15" fill="rgb(238,11,34)" fg:x="852" fg:w="1"/><text x="69.0151%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="68.7651%" y="277" width="0.0807%" height="15" fill="rgb(210,130,26)" fg:x="852" fg:w="1"/><text x="69.0151%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.7651%" y="261" width="0.0807%" height="15" fill="rgb(242,131,11)" fg:x="852" fg:w="1"/><text x="69.0151%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8458%" y="277" width="0.0807%" height="15" fill="rgb(237,38,28)" fg:x="853" fg:w="1"/><text x="69.0958%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="68.9266%" y="245" width="0.1614%" height="15" fill="rgb(244,180,43)" fg:x="854" fg:w="2"/><text x="69.1766%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.0073%" y="229" width="0.0807%" height="15" fill="rgb(214,171,19)" fg:x="855" fg:w="1"/><text x="69.2573%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.0073%" y="213" width="0.0807%" height="15" fill="rgb(252,101,45)" fg:x="855" fg:w="1"/><text x="69.2573%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="68.9266%" y="277" width="0.2421%" height="15" fill="rgb(211,96,33)" fg:x="854" fg:w="3"/><text x="69.1766%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="68.9266%" y="261" width="0.2421%" height="15" fill="rgb(207,80,25)" fg:x="854" fg:w="3"/><text x="69.1766%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="69.0880%" y="245" width="0.0807%" height="15" fill="rgb(225,15,35)" fg:x="856" fg:w="1"/><text x="69.3380%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.0880%" y="229" width="0.0807%" height="15" fill="rgb(214,93,43)" fg:x="856" fg:w="1"/><text x="69.3380%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="69.1687%" y="261" width="0.1614%" height="15" fill="rgb(248,42,37)" fg:x="857" fg:w="2"/><text x="69.4187%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="69.1687%" y="245" width="0.1614%" height="15" fill="rgb(217,135,32)" fg:x="857" fg:w="2"/><text x="69.4187%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="69.3301%" y="245" width="0.1614%" height="15" fill="rgb(216,74,28)" fg:x="859" fg:w="2"/><text x="69.5801%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="69.3301%" y="229" width="0.1614%" height="15" fill="rgb(247,108,16)" fg:x="859" fg:w="2"/><text x="69.5801%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="69.3301%" y="213" width="0.1614%" height="15" fill="rgb(205,219,30)" fg:x="859" fg:w="2"/><text x="69.5801%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="69.3301%" y="197" width="0.1614%" height="15" fill="rgb(241,122,9)" fg:x="859" fg:w="2"/><text x="69.5801%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.4915%" y="229" width="0.0807%" height="15" fill="rgb(216,148,50)" fg:x="861" fg:w="1"/><text x="69.7415%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.4915%" y="213" width="0.0807%" height="15" fill="rgb(226,154,2)" fg:x="861" fg:w="1"/><text x="69.7415%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="69.5722%" y="229" width="0.0807%" height="15" fill="rgb(220,128,1)" fg:x="862" fg:w="1"/><text x="69.8222%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (8 samples, 0.65%)</title><rect x="69.1687%" y="277" width="0.6457%" height="15" fill="rgb(245,185,29)" fg:x="857" fg:w="8"/><text x="69.4187%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.48%)</title><rect x="69.3301%" y="261" width="0.4843%" height="15" fill="rgb(243,161,2)" fg:x="859" fg:w="6"/><text x="69.5801%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="69.4915%" y="245" width="0.3228%" height="15" fill="rgb(249,215,17)" fg:x="861" fg:w="4"/><text x="69.7415%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="69.6529%" y="229" width="0.1614%" height="15" fill="rgb(237,67,11)" fg:x="863" fg:w="2"/><text x="69.9029%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="69.9758%" y="229" width="0.0807%" height="15" fill="rgb(239,17,24)" fg:x="867" fg:w="1"/><text x="70.2258%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="69.9758%" y="213" width="0.0807%" height="15" fill="rgb(215,97,29)" fg:x="867" fg:w="1"/><text x="70.2258%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="69.8144%" y="245" width="0.4036%" height="15" fill="rgb(253,228,42)" fg:x="865" fg:w="5"/><text x="70.0644%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="70.0565%" y="229" width="0.1614%" height="15" fill="rgb(240,85,2)" fg:x="868" fg:w="2"/><text x="70.3065%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="70.0565%" y="213" width="0.1614%" height="15" fill="rgb(214,155,4)" fg:x="868" fg:w="2"/><text x="70.3065%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="70.0565%" y="197" width="0.1614%" height="15" fill="rgb(247,120,22)" fg:x="868" fg:w="2"/><text x="70.3065%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="70.0565%" y="181" width="0.1614%" height="15" fill="rgb(211,208,6)" fg:x="868" fg:w="2"/><text x="70.3065%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="69.8144%" y="277" width="0.4843%" height="15" fill="rgb(235,99,41)" fg:x="865" fg:w="6"/><text x="70.0644%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="69.8144%" y="261" width="0.4843%" height="15" fill="rgb(223,28,8)" fg:x="865" fg:w="6"/><text x="70.0644%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="70.2179%" y="245" width="0.0807%" height="15" fill="rgb(212,71,20)" fg:x="870" fg:w="1"/><text x="70.4679%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="70.3793%" y="245" width="0.0807%" height="15" fill="rgb(206,85,3)" fg:x="872" fg:w="1"/><text x="70.6293%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="70.3793%" y="229" width="0.0807%" height="15" fill="rgb(244,180,11)" fg:x="872" fg:w="1"/><text x="70.6293%" y="239.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="70.3793%" y="213" width="0.0807%" height="15" fill="rgb(223,16,21)" fg:x="872" fg:w="1"/><text x="70.6293%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (21 samples, 1.69%)</title><rect x="68.8458%" y="325" width="1.6949%" height="15" fill="rgb(238,85,42)" fg:x="853" fg:w="21"/><text x="69.0958%" y="335.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (21 samples, 1.69%)</title><rect x="68.8458%" y="309" width="1.6949%" height="15" fill="rgb(205,85,8)" fg:x="853" fg:w="21"/><text x="69.0958%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (21 samples, 1.69%)</title><rect x="68.8458%" y="293" width="1.6949%" height="15" fill="rgb(217,190,15)" fg:x="853" fg:w="21"/><text x="69.0958%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="70.2986%" y="277" width="0.2421%" height="15" fill="rgb(243,192,23)" fg:x="871" fg:w="3"/><text x="70.5486%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="70.2986%" y="261" width="0.2421%" height="15" fill="rgb(223,220,37)" fg:x="871" fg:w="3"/><text x="70.5486%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="70.4600%" y="245" width="0.0807%" height="15" fill="rgb(208,41,17)" fg:x="873" fg:w="1"/><text x="70.7100%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="70.4600%" y="229" width="0.0807%" height="15" fill="rgb(224,188,7)" fg:x="873" fg:w="1"/><text x="70.7100%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="70.4600%" y="213" width="0.0807%" height="15" fill="rgb(236,16,50)" fg:x="873" fg:w="1"/><text x="70.7100%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (25 samples, 2.02%)</title><rect x="68.6844%" y="341" width="2.0178%" height="15" fill="rgb(238,6,24)" fg:x="851" fg:w="25"/><text x="68.9344%" y="351.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="70.5408%" y="325" width="0.1614%" height="15" fill="rgb(253,67,45)" fg:x="874" fg:w="2"/><text x="70.7908%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="70.5408%" y="309" width="0.1614%" height="15" fill="rgb(210,89,32)" fg:x="874" fg:w="2"/><text x="70.7908%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="70.5408%" y="293" width="0.1614%" height="15" fill="rgb(208,89,9)" fg:x="874" fg:w="2"/><text x="70.7908%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="70.5408%" y="277" width="0.1614%" height="15" fill="rgb(222,180,44)" fg:x="874" fg:w="2"/><text x="70.7908%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="70.5408%" y="261" width="0.1614%" height="15" fill="rgb(250,181,46)" fg:x="874" fg:w="2"/><text x="70.7908%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.6215%" y="245" width="0.0807%" height="15" fill="rgb(210,190,26)" fg:x="875" fg:w="1"/><text x="70.8715%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.6215%" y="229" width="0.0807%" height="15" fill="rgb(253,49,13)" fg:x="875" fg:w="1"/><text x="70.8715%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="70.6215%" y="213" width="0.0807%" height="15" fill="rgb(240,184,42)" fg:x="875" fg:w="1"/><text x="70.8715%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (223 samples, 18.00%)</title><rect x="52.7845%" y="437" width="17.9984%" height="15" fill="rgb(246,59,37)" fg:x="654" fg:w="223"/><text x="53.0345%" y="447.50">&lt;&amp;kernel::model::EntityPtr a..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (213 samples, 17.19%)</title><rect x="53.5916%" y="421" width="17.1913%" height="15" fill="rgb(207,134,54)" fg:x="664" fg:w="213"/><text x="53.8416%" y="431.50">plugins_core::looking::mode..</text></g><g><title>indefinite::indefinite (213 samples, 17.19%)</title><rect x="53.5916%" y="405" width="17.1913%" height="15" fill="rgb(250,122,24)" fg:x="664" fg:w="213"/><text x="53.8416%" y="415.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (213 samples, 17.19%)</title><rect x="53.5916%" y="389" width="17.1913%" height="15" fill="rgb(239,206,3)" fg:x="664" fg:w="213"/><text x="53.8416%" y="399.50">indefinite::methods::indefi..</text></g><g><title>indefinite::methods::apply_rules (213 samples, 17.19%)</title><rect x="53.5916%" y="373" width="17.1913%" height="15" fill="rgb(253,220,32)" fg:x="664" fg:w="213"/><text x="53.8416%" y="383.50">indefinite::methods::apply_..</text></g><g><title>indefinite::rules::other::Other::run (26 samples, 2.10%)</title><rect x="68.6844%" y="357" width="2.0985%" height="15" fill="rgb(209,217,48)" fg:x="851" fg:w="26"/><text x="68.9344%" y="367.50">i..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="70.7022%" y="341" width="0.0807%" height="15" fill="rgb(242,91,39)" fg:x="876" fg:w="1"/><text x="70.9522%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.7829%" y="405" width="0.0807%" height="15" fill="rgb(228,4,13)" fg:x="877" fg:w="1"/><text x="71.0329%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8636%" y="405" width="0.0807%" height="15" fill="rgb(223,133,4)" fg:x="878" fg:w="1"/><text x="71.1136%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="70.9443%" y="357" width="0.0807%" height="15" fill="rgb(215,105,30)" fg:x="879" fg:w="1"/><text x="71.1943%" y="367.50"></text></g><g><title>plugins_core::tools::contained_by (2 samples, 0.16%)</title><rect x="70.9443%" y="389" width="0.1614%" height="15" fill="rgb(230,9,4)" fg:x="879" fg:w="2"/><text x="71.1943%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="70.9443%" y="373" width="0.1614%" height="15" fill="rgb(248,15,2)" fg:x="879" fg:w="2"/><text x="71.1943%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.0250%" y="357" width="0.0807%" height="15" fill="rgb(208,210,22)" fg:x="880" fg:w="1"/><text x="71.2750%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.0250%" y="341" width="0.0807%" height="15" fill="rgb(208,112,41)" fg:x="880" fg:w="1"/><text x="71.2750%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.0250%" y="325" width="0.0807%" height="15" fill="rgb(232,83,14)" fg:x="880" fg:w="1"/><text x="71.2750%" y="335.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="71.1057%" y="389" width="0.1614%" height="15" fill="rgb(229,65,11)" fg:x="881" fg:w="2"/><text x="71.3557%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="71.1057%" y="373" width="0.1614%" height="15" fill="rgb(228,126,24)" fg:x="881" fg:w="2"/><text x="71.3557%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.1057%" y="357" width="0.1614%" height="15" fill="rgb(218,66,33)" fg:x="881" fg:w="2"/><text x="71.3557%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.1057%" y="341" width="0.1614%" height="15" fill="rgb(251,49,52)" fg:x="881" fg:w="2"/><text x="71.3557%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.1057%" y="325" width="0.1614%" height="15" fill="rgb(219,46,37)" fg:x="881" fg:w="2"/><text x="71.3557%" y="335.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (5 samples, 0.40%)</title><rect x="70.9443%" y="405" width="0.4036%" height="15" fill="rgb(213,53,49)" fg:x="879" fg:w="5"/><text x="71.1943%" y="415.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="71.2672%" y="389" width="0.0807%" height="15" fill="rgb(214,134,1)" fg:x="883" fg:w="1"/><text x="71.5172%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.3479%" y="325" width="0.1614%" height="15" fill="rgb(208,139,43)" fg:x="884" fg:w="2"/><text x="71.5979%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.3479%" y="309" width="0.1614%" height="15" fill="rgb(231,105,35)" fg:x="884" fg:w="2"/><text x="71.5979%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.3479%" y="293" width="0.1614%" height="15" fill="rgb(247,189,9)" fg:x="884" fg:w="2"/><text x="71.5979%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4286%" y="277" width="0.0807%" height="15" fill="rgb(252,48,51)" fg:x="885" fg:w="1"/><text x="71.6786%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4286%" y="261" width="0.0807%" height="15" fill="rgb(209,121,1)" fg:x="885" fg:w="1"/><text x="71.6786%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.4286%" y="245" width="0.0807%" height="15" fill="rgb(231,40,26)" fg:x="885" fg:w="1"/><text x="71.6786%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.4286%" y="229" width="0.0807%" height="15" fill="rgb(251,8,13)" fg:x="885" fg:w="1"/><text x="71.6786%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.4286%" y="213" width="0.0807%" height="15" fill="rgb(231,110,2)" fg:x="885" fg:w="1"/><text x="71.6786%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.4286%" y="197" width="0.0807%" height="15" fill="rgb(216,153,22)" fg:x="885" fg:w="1"/><text x="71.6786%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.4286%" y="181" width="0.0807%" height="15" fill="rgb(249,116,49)" fg:x="885" fg:w="1"/><text x="71.6786%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.4286%" y="165" width="0.0807%" height="15" fill="rgb(230,89,2)" fg:x="885" fg:w="1"/><text x="71.6786%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.4286%" y="149" width="0.0807%" height="15" fill="rgb(231,125,23)" fg:x="885" fg:w="1"/><text x="71.6786%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.4286%" y="133" width="0.0807%" height="15" fill="rgb(212,217,18)" fg:x="885" fg:w="1"/><text x="71.6786%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.4286%" y="117" width="0.0807%" height="15" fill="rgb(210,21,33)" fg:x="885" fg:w="1"/><text x="71.6786%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.4286%" y="101" width="0.0807%" height="15" fill="rgb(241,97,9)" fg:x="885" fg:w="1"/><text x="71.6786%" y="111.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (11 samples, 0.89%)</title><rect x="70.7829%" y="437" width="0.8878%" height="15" fill="rgb(221,35,31)" fg:x="877" fg:w="11"/><text x="71.0329%" y="447.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (11 samples, 0.89%)</title><rect x="70.7829%" y="421" width="0.8878%" height="15" fill="rgb(251,23,23)" fg:x="877" fg:w="11"/><text x="71.0329%" y="431.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (4 samples, 0.32%)</title><rect x="71.3479%" y="405" width="0.3228%" height="15" fill="rgb(227,165,2)" fg:x="884" fg:w="4"/><text x="71.5979%" y="415.50"></text></g><g><title>plugins_core::finding::matches_description (4 samples, 0.32%)</title><rect x="71.3479%" y="389" width="0.3228%" height="15" fill="rgb(242,24,2)" fg:x="884" fg:w="4"/><text x="71.5979%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::name (4 samples, 0.32%)</title><rect x="71.3479%" y="373" width="0.3228%" height="15" fill="rgb(242,138,51)" fg:x="884" fg:w="4"/><text x="71.5979%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="71.3479%" y="357" width="0.3228%" height="15" fill="rgb(220,219,5)" fg:x="884" fg:w="4"/><text x="71.5979%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="71.3479%" y="341" width="0.3228%" height="15" fill="rgb(247,53,29)" fg:x="884" fg:w="4"/><text x="71.5979%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.5093%" y="325" width="0.1614%" height="15" fill="rgb(233,43,39)" fg:x="886" fg:w="2"/><text x="71.7593%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.5093%" y="309" width="0.1614%" height="15" fill="rgb(230,128,54)" fg:x="886" fg:w="2"/><text x="71.7593%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.5900%" y="293" width="0.0807%" height="15" fill="rgb(218,20,12)" fg:x="887" fg:w="1"/><text x="71.8400%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.5900%" y="277" width="0.0807%" height="15" fill="rgb(206,51,14)" fg:x="887" fg:w="1"/><text x="71.8400%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.5900%" y="261" width="0.0807%" height="15" fill="rgb(223,16,35)" fg:x="887" fg:w="1"/><text x="71.8400%" y="271.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="71.9128%" y="309" width="0.0807%" height="15" fill="rgb(226,165,37)" fg:x="891" fg:w="1"/><text x="72.1628%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9128%" y="293" width="0.0807%" height="15" fill="rgb(240,26,21)" fg:x="891" fg:w="1"/><text x="72.1628%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9128%" y="277" width="0.0807%" height="15" fill="rgb(240,72,46)" fg:x="891" fg:w="1"/><text x="72.1628%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9128%" y="261" width="0.0807%" height="15" fill="rgb(211,33,41)" fg:x="891" fg:w="1"/><text x="72.1628%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9128%" y="245" width="0.0807%" height="15" fill="rgb(224,157,46)" fg:x="891" fg:w="1"/><text x="72.1628%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9128%" y="229" width="0.0807%" height="15" fill="rgb(223,59,19)" fg:x="891" fg:w="1"/><text x="72.1628%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.9128%" y="213" width="0.0807%" height="15" fill="rgb(239,187,1)" fg:x="891" fg:w="1"/><text x="72.1628%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.9128%" y="197" width="0.0807%" height="15" fill="rgb(226,95,9)" fg:x="891" fg:w="1"/><text x="72.1628%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.9128%" y="181" width="0.0807%" height="15" fill="rgb(234,61,54)" fg:x="891" fg:w="1"/><text x="72.1628%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9128%" y="165" width="0.0807%" height="15" fill="rgb(205,209,47)" fg:x="891" fg:w="1"/><text x="72.1628%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9128%" y="149" width="0.0807%" height="15" fill="rgb(228,7,43)" fg:x="891" fg:w="1"/><text x="72.1628%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.9128%" y="133" width="0.0807%" height="15" fill="rgb(240,217,52)" fg:x="891" fg:w="1"/><text x="72.1628%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.9128%" y="117" width="0.0807%" height="15" fill="rgb(211,178,21)" fg:x="891" fg:w="1"/><text x="72.1628%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.9128%" y="101" width="0.0807%" height="15" fill="rgb(205,25,34)" fg:x="891" fg:w="1"/><text x="72.1628%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.9128%" y="85" width="0.0807%" height="15" fill="rgb(209,57,11)" fg:x="891" fg:w="1"/><text x="72.1628%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.9128%" y="69" width="0.0807%" height="15" fill="rgb(221,99,2)" fg:x="891" fg:w="1"/><text x="72.1628%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::Raised&gt; (1 samples, 0.08%)</title><rect x="71.9935%" y="293" width="0.0807%" height="15" fill="rgb(232,79,22)" fg:x="892" fg:w="1"/><text x="72.2435%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.9935%" y="277" width="0.0807%" height="15" fill="rgb(221,145,32)" fg:x="892" fg:w="1"/><text x="72.2435%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (5 samples, 0.40%)</title><rect x="71.7514%" y="421" width="0.4036%" height="15" fill="rgb(236,133,36)" fg:x="889" fg:w="5"/><text x="72.0014%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (5 samples, 0.40%)</title><rect x="71.7514%" y="405" width="0.4036%" height="15" fill="rgb(208,224,44)" fg:x="889" fg:w="5"/><text x="72.0014%" y="415.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (5 samples, 0.40%)</title><rect x="71.7514%" y="389" width="0.4036%" height="15" fill="rgb(235,143,15)" fg:x="889" fg:w="5"/><text x="72.0014%" y="399.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (5 samples, 0.40%)</title><rect x="71.7514%" y="373" width="0.4036%" height="15" fill="rgb(249,83,27)" fg:x="889" fg:w="5"/><text x="72.0014%" y="383.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (4 samples, 0.32%)</title><rect x="71.8321%" y="357" width="0.3228%" height="15" fill="rgb(238,226,19)" fg:x="890" fg:w="4"/><text x="72.0821%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (4 samples, 0.32%)</title><rect x="71.8321%" y="341" width="0.3228%" height="15" fill="rgb(226,206,27)" fg:x="890" fg:w="4"/><text x="72.0821%" y="351.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (4 samples, 0.32%)</title><rect x="71.8321%" y="325" width="0.3228%" height="15" fill="rgb(251,182,9)" fg:x="890" fg:w="4"/><text x="72.0821%" y="335.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (2 samples, 0.16%)</title><rect x="71.9935%" y="309" width="0.1614%" height="15" fill="rgb(212,140,41)" fg:x="892" fg:w="2"/><text x="72.2435%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0743%" y="293" width="0.0807%" height="15" fill="rgb(220,106,18)" fg:x="893" fg:w="1"/><text x="72.3243%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.0743%" y="277" width="0.0807%" height="15" fill="rgb(252,46,41)" fg:x="893" fg:w="1"/><text x="72.3243%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0743%" y="261" width="0.0807%" height="15" fill="rgb(209,222,15)" fg:x="893" fg:w="1"/><text x="72.3243%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.0743%" y="245" width="0.0807%" height="15" fill="rgb(233,83,50)" fg:x="893" fg:w="1"/><text x="72.3243%" y="255.50"></text></g><g><title>plugins_core::library::actions::reply_ok (7 samples, 0.56%)</title><rect x="71.6707%" y="437" width="0.5650%" height="15" fill="rgb(205,212,0)" fg:x="888" fg:w="7"/><text x="71.9207%" y="447.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="72.1550%" y="421" width="0.0807%" height="15" fill="rgb(235,117,51)" fg:x="894" fg:w="1"/><text x="72.4050%" y="431.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (1 samples, 0.08%)</title><rect x="72.1550%" y="405" width="0.0807%" height="15" fill="rgb(233,133,48)" fg:x="894" fg:w="1"/><text x="72.4050%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.1550%" y="389" width="0.0807%" height="15" fill="rgb(219,3,2)" fg:x="894" fg:w="1"/><text x="72.4050%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="72.1550%" y="373" width="0.0807%" height="15" fill="rgb(225,80,52)" fg:x="894" fg:w="1"/><text x="72.4050%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.1550%" y="357" width="0.0807%" height="15" fill="rgb(235,195,42)" fg:x="894" fg:w="1"/><text x="72.4050%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.1550%" y="341" width="0.0807%" height="15" fill="rgb(240,207,46)" fg:x="894" fg:w="1"/><text x="72.4050%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.3971%" y="405" width="0.1614%" height="15" fill="rgb(236,112,50)" fg:x="897" fg:w="2"/><text x="72.6471%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="72.3971%" y="389" width="0.1614%" height="15" fill="rgb(249,151,27)" fg:x="897" fg:w="2"/><text x="72.6471%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.3971%" y="373" width="0.1614%" height="15" fill="rgb(253,223,52)" fg:x="897" fg:w="2"/><text x="72.6471%" y="383.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="72.3164%" y="421" width="0.3228%" height="15" fill="rgb(215,55,33)" fg:x="896" fg:w="4"/><text x="72.5664%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.5585%" y="405" width="0.0807%" height="15" fill="rgb(207,24,17)" fg:x="899" fg:w="1"/><text x="72.8085%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.5585%" y="389" width="0.0807%" height="15" fill="rgb(218,169,32)" fg:x="899" fg:w="1"/><text x="72.8085%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="72.5585%" y="373" width="0.0807%" height="15" fill="rgb(209,210,6)" fg:x="899" fg:w="1"/><text x="72.8085%" y="383.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.5585%" y="357" width="0.0807%" height="15" fill="rgb(225,208,8)" fg:x="899" fg:w="1"/><text x="72.8085%" y="367.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.5585%" y="341" width="0.0807%" height="15" fill="rgb(238,14,32)" fg:x="899" fg:w="1"/><text x="72.8085%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5585%" y="325" width="0.0807%" height="15" fill="rgb(211,137,3)" fg:x="899" fg:w="1"/><text x="72.8085%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="72.6392%" y="421" width="0.0807%" height="15" fill="rgb(207,171,19)" fg:x="900" fg:w="1"/><text x="72.8892%" y="431.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="72.6392%" y="405" width="0.0807%" height="15" fill="rgb(250,80,8)" fg:x="900" fg:w="1"/><text x="72.8892%" y="415.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="72.6392%" y="389" width="0.0807%" height="15" fill="rgb(209,103,53)" fg:x="900" fg:w="1"/><text x="72.8892%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="72.6392%" y="373" width="0.0807%" height="15" fill="rgb(233,198,10)" fg:x="900" fg:w="1"/><text x="72.8892%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6392%" y="357" width="0.0807%" height="15" fill="rgb(236,125,25)" fg:x="900" fg:w="1"/><text x="72.8892%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6392%" y="341" width="0.0807%" height="15" fill="rgb(254,182,48)" fg:x="900" fg:w="1"/><text x="72.8892%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.6392%" y="325" width="0.0807%" height="15" fill="rgb(216,108,44)" fg:x="900" fg:w="1"/><text x="72.8892%" y="335.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="72.7199%" y="421" width="0.1614%" height="15" fill="rgb(222,72,39)" fg:x="901" fg:w="2"/><text x="72.9699%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="72.7199%" y="405" width="0.1614%" height="15" fill="rgb(252,70,39)" fg:x="901" fg:w="2"/><text x="72.9699%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="72.8006%" y="389" width="0.0807%" height="15" fill="rgb(243,99,34)" fg:x="902" fg:w="1"/><text x="73.0506%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.8006%" y="373" width="0.0807%" height="15" fill="rgb(252,109,12)" fg:x="902" fg:w="1"/><text x="73.0506%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.8006%" y="357" width="0.0807%" height="15" fill="rgb(211,186,10)" fg:x="902" fg:w="1"/><text x="73.0506%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.8814%" y="405" width="0.0807%" height="15" fill="rgb(246,90,8)" fg:x="903" fg:w="1"/><text x="73.1314%" y="415.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="72.9621%" y="373" width="0.1614%" height="15" fill="rgb(226,91,24)" fg:x="904" fg:w="2"/><text x="73.2121%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.0428%" y="357" width="0.0807%" height="15" fill="rgb(216,28,44)" fg:x="905" fg:w="1"/><text x="73.2928%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.0428%" y="341" width="0.0807%" height="15" fill="rgb(229,36,0)" fg:x="905" fg:w="1"/><text x="73.2928%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.0428%" y="325" width="0.0807%" height="15" fill="rgb(245,97,18)" fg:x="905" fg:w="1"/><text x="73.2928%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.0428%" y="309" width="0.0807%" height="15" fill="rgb(241,97,54)" fg:x="905" fg:w="1"/><text x="73.2928%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.0428%" y="293" width="0.0807%" height="15" fill="rgb(234,125,17)" fg:x="905" fg:w="1"/><text x="73.2928%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0428%" y="277" width="0.0807%" height="15" fill="rgb(228,172,39)" fg:x="905" fg:w="1"/><text x="73.2928%" y="287.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="72.8814%" y="421" width="0.3228%" height="15" fill="rgb(227,169,1)" fg:x="903" fg:w="4"/><text x="73.1314%" y="431.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="72.9621%" y="405" width="0.2421%" height="15" fill="rgb(206,13,35)" fg:x="904" fg:w="3"/><text x="73.2121%" y="415.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="72.9621%" y="389" width="0.2421%" height="15" fill="rgb(211,117,30)" fg:x="904" fg:w="3"/><text x="73.2121%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.1235%" y="373" width="0.0807%" height="15" fill="rgb(230,198,4)" fg:x="906" fg:w="1"/><text x="73.3735%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.1235%" y="357" width="0.0807%" height="15" fill="rgb(213,87,54)" fg:x="906" fg:w="1"/><text x="73.3735%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1235%" y="341" width="0.0807%" height="15" fill="rgb(248,43,22)" fg:x="906" fg:w="1"/><text x="73.3735%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1235%" y="325" width="0.0807%" height="15" fill="rgb(213,175,48)" fg:x="906" fg:w="1"/><text x="73.3735%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1235%" y="309" width="0.0807%" height="15" fill="rgb(252,55,9)" fg:x="906" fg:w="1"/><text x="73.3735%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1235%" y="293" width="0.0807%" height="15" fill="rgb(231,72,33)" fg:x="906" fg:w="1"/><text x="73.3735%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1235%" y="277" width="0.0807%" height="15" fill="rgb(213,2,54)" fg:x="906" fg:w="1"/><text x="73.3735%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.1235%" y="261" width="0.0807%" height="15" fill="rgb(208,88,25)" fg:x="906" fg:w="1"/><text x="73.3735%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.1235%" y="245" width="0.0807%" height="15" fill="rgb(215,117,13)" fg:x="906" fg:w="1"/><text x="73.3735%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.1235%" y="229" width="0.0807%" height="15" fill="rgb(243,147,21)" fg:x="906" fg:w="1"/><text x="73.3735%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1235%" y="213" width="0.0807%" height="15" fill="rgb(208,215,36)" fg:x="906" fg:w="1"/><text x="73.3735%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1235%" y="197" width="0.0807%" height="15" fill="rgb(238,187,24)" fg:x="906" fg:w="1"/><text x="73.3735%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.1235%" y="181" width="0.0807%" height="15" fill="rgb(214,173,11)" fg:x="906" fg:w="1"/><text x="73.3735%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.1235%" y="165" width="0.0807%" height="15" fill="rgb(222,71,20)" fg:x="906" fg:w="1"/><text x="73.3735%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.1235%" y="149" width="0.0807%" height="15" fill="rgb(242,125,4)" fg:x="906" fg:w="1"/><text x="73.3735%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.1235%" y="133" width="0.0807%" height="15" fill="rgb(217,101,52)" fg:x="906" fg:w="1"/><text x="73.3735%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1235%" y="117" width="0.0807%" height="15" fill="rgb(223,2,50)" fg:x="906" fg:w="1"/><text x="73.3735%" y="127.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="73.2042%" y="421" width="0.0807%" height="15" fill="rgb(225,197,9)" fg:x="907" fg:w="1"/><text x="73.4542%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="73.2042%" y="405" width="0.0807%" height="15" fill="rgb(234,76,27)" fg:x="907" fg:w="1"/><text x="73.4542%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.2042%" y="389" width="0.0807%" height="15" fill="rgb(213,161,26)" fg:x="907" fg:w="1"/><text x="73.4542%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2042%" y="373" width="0.0807%" height="15" fill="rgb(210,228,2)" fg:x="907" fg:w="1"/><text x="73.4542%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.2042%" y="357" width="0.0807%" height="15" fill="rgb(235,4,16)" fg:x="907" fg:w="1"/><text x="73.4542%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (565 samples, 45.60%)</title><rect x="27.7643%" y="581" width="45.6013%" height="15" fill="rgb(235,83,42)" fg:x="344" fg:w="565"/><text x="28.0143%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (565 samples, 45.60%)</title><rect x="27.7643%" y="565" width="45.6013%" height="15" fill="rgb(207,116,39)" fg:x="344" fg:w="565"/><text x="28.0143%" y="575.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::han..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (564 samples, 45.52%)</title><rect x="27.8450%" y="549" width="45.5206%" height="15" fill="rgb(253,206,9)" fg:x="345" fg:w="564"/><text x="28.0950%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (564 samples, 45.52%)</title><rect x="27.8450%" y="533" width="45.5206%" height="15" fill="rgb(234,32,47)" fg:x="345" fg:w="564"/><text x="28.0950%" y="543.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (563 samples, 45.44%)</title><rect x="27.9257%" y="517" width="45.4399%" height="15" fill="rgb(247,40,39)" fg:x="346" fg:w="563"/><text x="28.1757%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (562 samples, 45.36%)</title><rect x="28.0065%" y="501" width="45.3592%" height="15" fill="rgb(236,199,13)" fg:x="347" fg:w="562"/><text x="28.2565%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (562 samples, 45.36%)</title><rect x="28.0065%" y="485" width="45.3592%" height="15" fill="rgb(240,127,44)" fg:x="347" fg:w="562"/><text x="28.2565%" y="495.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (562 samples, 45.36%)</title><rect x="28.0065%" y="469" width="45.3592%" height="15" fill="rgb(248,220,47)" fg:x="347" fg:w="562"/><text x="28.2565%" y="479.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (255 samples, 20.58%)</title><rect x="52.7845%" y="453" width="20.5811%" height="15" fill="rgb(240,78,9)" fg:x="654" fg:w="255"/><text x="53.0345%" y="463.50">&lt;plugins_core::carrying::actions..</text></g><g><title>plugins_core::location::model::change_location (14 samples, 1.13%)</title><rect x="72.2357%" y="437" width="1.1299%" height="15" fill="rgb(245,119,5)" fg:x="895" fg:w="14"/><text x="72.4857%" y="447.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="73.2849%" y="421" width="0.0807%" height="15" fill="rgb(238,175,31)" fg:x="908" fg:w="1"/><text x="73.5349%" y="431.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="73.2849%" y="405" width="0.0807%" height="15" fill="rgb(232,140,42)" fg:x="908" fg:w="1"/><text x="73.5349%" y="415.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="73.2849%" y="389" width="0.0807%" height="15" fill="rgb(218,179,7)" fg:x="908" fg:w="1"/><text x="73.5349%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.2849%" y="373" width="0.0807%" height="15" fill="rgb(232,79,27)" fg:x="908" fg:w="1"/><text x="73.5349%" y="383.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="73.2849%" y="357" width="0.0807%" height="15" fill="rgb(247,11,19)" fg:x="908" fg:w="1"/><text x="73.5349%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.2849%" y="341" width="0.0807%" height="15" fill="rgb(216,171,54)" fg:x="908" fg:w="1"/><text x="73.5349%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2849%" y="325" width="0.0807%" height="15" fill="rgb(233,158,36)" fg:x="908" fg:w="1"/><text x="73.5349%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="73.4463%" y="565" width="0.0807%" height="15" fill="rgb(215,48,47)" fg:x="910" fg:w="1"/><text x="73.6963%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.4463%" y="549" width="0.0807%" height="15" fill="rgb(230,223,15)" fg:x="910" fg:w="1"/><text x="73.6963%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.4463%" y="533" width="0.0807%" height="15" fill="rgb(234,49,19)" fg:x="910" fg:w="1"/><text x="73.6963%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.4463%" y="517" width="0.0807%" height="15" fill="rgb(232,89,25)" fg:x="910" fg:w="1"/><text x="73.6963%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.4463%" y="501" width="0.0807%" height="15" fill="rgb(237,206,28)" fg:x="910" fg:w="1"/><text x="73.6963%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.4463%" y="485" width="0.0807%" height="15" fill="rgb(249,68,37)" fg:x="910" fg:w="1"/><text x="73.6963%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="73.4463%" y="469" width="0.0807%" height="15" fill="rgb(226,99,43)" fg:x="910" fg:w="1"/><text x="73.6963%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="73.4463%" y="453" width="0.0807%" height="15" fill="rgb(216,46,28)" fg:x="910" fg:w="1"/><text x="73.6963%" y="463.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.5270%" y="549" width="0.0807%" height="15" fill="rgb(216,33,9)" fg:x="911" fg:w="1"/><text x="73.7770%" y="559.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.5270%" y="533" width="0.0807%" height="15" fill="rgb(216,129,4)" fg:x="911" fg:w="1"/><text x="73.7770%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.6077%" y="517" width="0.0807%" height="15" fill="rgb(216,106,3)" fg:x="912" fg:w="1"/><text x="73.8577%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (2 samples, 0.16%)</title><rect x="73.6885%" y="517" width="0.1614%" height="15" fill="rgb(217,79,45)" fg:x="913" fg:w="2"/><text x="73.9385%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.0113%" y="485" width="0.0807%" height="15" fill="rgb(239,98,13)" fg:x="917" fg:w="1"/><text x="74.2613%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.0113%" y="469" width="0.0807%" height="15" fill="rgb(221,115,4)" fg:x="917" fg:w="1"/><text x="74.2613%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.0920%" y="453" width="0.0807%" height="15" fill="rgb(215,85,0)" fg:x="918" fg:w="1"/><text x="74.3420%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.65%)</title><rect x="73.6077%" y="533" width="0.6457%" height="15" fill="rgb(230,62,15)" fg:x="912" fg:w="8"/><text x="73.8577%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="73.8499%" y="517" width="0.4036%" height="15" fill="rgb(247,162,2)" fg:x="915" fg:w="5"/><text x="74.0999%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="73.8499%" y="501" width="0.4036%" height="15" fill="rgb(212,112,32)" fg:x="915" fg:w="5"/><text x="74.0999%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="74.0920%" y="485" width="0.1614%" height="15" fill="rgb(216,137,9)" fg:x="918" fg:w="2"/><text x="74.3420%" y="495.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="74.0920%" y="469" width="0.1614%" height="15" fill="rgb(250,149,33)" fg:x="918" fg:w="2"/><text x="74.3420%" y="479.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="74.1727%" y="453" width="0.0807%" height="15" fill="rgb(246,124,31)" fg:x="919" fg:w="1"/><text x="74.4227%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.1727%" y="437" width="0.0807%" height="15" fill="rgb(216,210,22)" fg:x="919" fg:w="1"/><text x="74.4227%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="74.2534%" y="437" width="0.2421%" height="15" fill="rgb(228,128,36)" fg:x="920" fg:w="3"/><text x="74.5034%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.3341%" y="421" width="0.1614%" height="15" fill="rgb(231,41,0)" fg:x="921" fg:w="2"/><text x="74.5841%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="74.3341%" y="405" width="0.1614%" height="15" fill="rgb(232,61,26)" fg:x="921" fg:w="2"/><text x="74.5841%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="74.3341%" y="389" width="0.1614%" height="15" fill="rgb(217,60,9)" fg:x="921" fg:w="2"/><text x="74.5841%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="74.3341%" y="373" width="0.1614%" height="15" fill="rgb(233,41,35)" fg:x="921" fg:w="2"/><text x="74.5841%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="74.3341%" y="357" width="0.1614%" height="15" fill="rgb(253,139,43)" fg:x="921" fg:w="2"/><text x="74.5841%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="74.3341%" y="341" width="0.1614%" height="15" fill="rgb(245,100,51)" fg:x="921" fg:w="2"/><text x="74.5841%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="74.3341%" y="325" width="0.1614%" height="15" fill="rgb(250,208,18)" fg:x="921" fg:w="2"/><text x="74.5841%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="74.3341%" y="309" width="0.1614%" height="15" fill="rgb(245,33,2)" fg:x="921" fg:w="2"/><text x="74.5841%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="74.3341%" y="293" width="0.1614%" height="15" fill="rgb(244,171,31)" fg:x="921" fg:w="2"/><text x="74.5841%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="74.3341%" y="277" width="0.1614%" height="15" fill="rgb(229,1,43)" fg:x="921" fg:w="2"/><text x="74.5841%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="74.3341%" y="261" width="0.1614%" height="15" fill="rgb(223,153,28)" fg:x="921" fg:w="2"/><text x="74.5841%" y="271.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="74.3341%" y="245" width="0.1614%" height="15" fill="rgb(241,4,46)" fg:x="921" fg:w="2"/><text x="74.5841%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="74.3341%" y="229" width="0.1614%" height="15" fill="rgb(230,81,11)" fg:x="921" fg:w="2"/><text x="74.5841%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="74.2534%" y="469" width="0.3228%" height="15" fill="rgb(253,204,39)" fg:x="920" fg:w="4"/><text x="74.5034%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="74.2534%" y="453" width="0.3228%" height="15" fill="rgb(250,96,8)" fg:x="920" fg:w="4"/><text x="74.5034%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.4956%" y="437" width="0.0807%" height="15" fill="rgb(219,89,54)" fg:x="923" fg:w="1"/><text x="74.7456%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.4956%" y="421" width="0.0807%" height="15" fill="rgb(235,136,39)" fg:x="923" fg:w="1"/><text x="74.7456%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.4956%" y="405" width="0.0807%" height="15" fill="rgb(230,155,37)" fg:x="923" fg:w="1"/><text x="74.7456%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.4956%" y="389" width="0.0807%" height="15" fill="rgb(235,199,50)" fg:x="923" fg:w="1"/><text x="74.7456%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.4956%" y="373" width="0.0807%" height="15" fill="rgb(227,81,32)" fg:x="923" fg:w="1"/><text x="74.7456%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.4956%" y="357" width="0.0807%" height="15" fill="rgb(225,6,28)" fg:x="923" fg:w="1"/><text x="74.7456%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.4956%" y="341" width="0.0807%" height="15" fill="rgb(207,211,17)" fg:x="923" fg:w="1"/><text x="74.7456%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.4956%" y="325" width="0.0807%" height="15" fill="rgb(228,31,49)" fg:x="923" fg:w="1"/><text x="74.7456%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.4956%" y="309" width="0.0807%" height="15" fill="rgb(230,185,3)" fg:x="923" fg:w="1"/><text x="74.7456%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.4956%" y="293" width="0.0807%" height="15" fill="rgb(206,167,15)" fg:x="923" fg:w="1"/><text x="74.7456%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.4956%" y="277" width="0.0807%" height="15" fill="rgb(234,2,36)" fg:x="923" fg:w="1"/><text x="74.7456%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4956%" y="261" width="0.0807%" height="15" fill="rgb(239,160,29)" fg:x="923" fg:w="1"/><text x="74.7456%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.5763%" y="469" width="0.0807%" height="15" fill="rgb(236,117,2)" fg:x="924" fg:w="1"/><text x="74.8263%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.5763%" y="453" width="0.0807%" height="15" fill="rgb(215,117,37)" fg:x="924" fg:w="1"/><text x="74.8263%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.5763%" y="437" width="0.0807%" height="15" fill="rgb(244,48,36)" fg:x="924" fg:w="1"/><text x="74.8263%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.5763%" y="421" width="0.0807%" height="15" fill="rgb(223,101,37)" fg:x="924" fg:w="1"/><text x="74.8263%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.5763%" y="405" width="0.0807%" height="15" fill="rgb(205,200,1)" fg:x="924" fg:w="1"/><text x="74.8263%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.5763%" y="389" width="0.0807%" height="15" fill="rgb(209,193,20)" fg:x="924" fg:w="1"/><text x="74.8263%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.6570%" y="373" width="0.0807%" height="15" fill="rgb(214,63,13)" fg:x="925" fg:w="1"/><text x="74.9070%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.6570%" y="357" width="0.0807%" height="15" fill="rgb(253,113,46)" fg:x="925" fg:w="1"/><text x="74.9070%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.6570%" y="341" width="0.0807%" height="15" fill="rgb(237,103,34)" fg:x="925" fg:w="1"/><text x="74.9070%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.6570%" y="325" width="0.0807%" height="15" fill="rgb(223,38,25)" fg:x="925" fg:w="1"/><text x="74.9070%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.6570%" y="309" width="0.0807%" height="15" fill="rgb(251,32,32)" fg:x="925" fg:w="1"/><text x="74.9070%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.6570%" y="293" width="0.0807%" height="15" fill="rgb(228,65,22)" fg:x="925" fg:w="1"/><text x="74.9070%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.6570%" y="277" width="0.0807%" height="15" fill="rgb(205,11,46)" fg:x="925" fg:w="1"/><text x="74.9070%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.7377%" y="341" width="0.0807%" height="15" fill="rgb(220,35,2)" fg:x="926" fg:w="1"/><text x="74.9877%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.8184%" y="325" width="0.0807%" height="15" fill="rgb(217,151,17)" fg:x="927" fg:w="1"/><text x="75.0684%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="74.7377%" y="373" width="0.2421%" height="15" fill="rgb(243,227,35)" fg:x="926" fg:w="3"/><text x="74.9877%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="74.7377%" y="357" width="0.2421%" height="15" fill="rgb(214,0,34)" fg:x="926" fg:w="3"/><text x="74.9877%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="74.8184%" y="341" width="0.1614%" height="15" fill="rgb(209,42,37)" fg:x="927" fg:w="2"/><text x="75.0684%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="74.8991%" y="325" width="0.0807%" height="15" fill="rgb(251,176,30)" fg:x="928" fg:w="1"/><text x="75.1491%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.8991%" y="309" width="0.0807%" height="15" fill="rgb(223,64,40)" fg:x="928" fg:w="1"/><text x="75.1491%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.9798%" y="341" width="0.0807%" height="15" fill="rgb(227,180,23)" fg:x="929" fg:w="1"/><text x="75.2298%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="74.6570%" y="469" width="0.4843%" height="15" fill="rgb(220,137,31)" fg:x="925" fg:w="6"/><text x="74.9070%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="74.6570%" y="453" width="0.4843%" height="15" fill="rgb(245,124,25)" fg:x="925" fg:w="6"/><text x="74.9070%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="74.6570%" y="437" width="0.4843%" height="15" fill="rgb(217,157,5)" fg:x="925" fg:w="6"/><text x="74.9070%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.48%)</title><rect x="74.6570%" y="421" width="0.4843%" height="15" fill="rgb(225,59,2)" fg:x="925" fg:w="6"/><text x="74.9070%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="74.6570%" y="405" width="0.4843%" height="15" fill="rgb(220,182,9)" fg:x="925" fg:w="6"/><text x="74.9070%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.48%)</title><rect x="74.6570%" y="389" width="0.4843%" height="15" fill="rgb(249,54,24)" fg:x="925" fg:w="6"/><text x="74.9070%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.9798%" y="373" width="0.1614%" height="15" fill="rgb(216,89,17)" fg:x="929" fg:w="2"/><text x="75.2298%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.9798%" y="357" width="0.1614%" height="15" fill="rgb(245,20,45)" fg:x="929" fg:w="2"/><text x="75.2298%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="75.0605%" y="341" width="0.0807%" height="15" fill="rgb(230,83,14)" fg:x="930" fg:w="1"/><text x="75.3105%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.0605%" y="325" width="0.0807%" height="15" fill="rgb(246,109,11)" fg:x="930" fg:w="1"/><text x="75.3105%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.0605%" y="309" width="0.0807%" height="15" fill="rgb(235,85,23)" fg:x="930" fg:w="1"/><text x="75.3105%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="75.0605%" y="293" width="0.0807%" height="15" fill="rgb(215,101,36)" fg:x="930" fg:w="1"/><text x="75.3105%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.0605%" y="277" width="0.0807%" height="15" fill="rgb(228,140,31)" fg:x="930" fg:w="1"/><text x="75.3105%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.0605%" y="261" width="0.0807%" height="15" fill="rgb(234,162,37)" fg:x="930" fg:w="1"/><text x="75.3105%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.0605%" y="245" width="0.0807%" height="15" fill="rgb(221,0,24)" fg:x="930" fg:w="1"/><text x="75.3105%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.1412%" y="373" width="0.1614%" height="15" fill="rgb(230,161,41)" fg:x="931" fg:w="2"/><text x="75.3912%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.1412%" y="357" width="0.1614%" height="15" fill="rgb(224,46,24)" fg:x="931" fg:w="2"/><text x="75.3912%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.2220%" y="341" width="0.0807%" height="15" fill="rgb(205,59,32)" fg:x="932" fg:w="1"/><text x="75.4720%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.2220%" y="325" width="0.0807%" height="15" fill="rgb(239,31,20)" fg:x="932" fg:w="1"/><text x="75.4720%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.2220%" y="309" width="0.0807%" height="15" fill="rgb(233,149,44)" fg:x="932" fg:w="1"/><text x="75.4720%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2220%" y="293" width="0.0807%" height="15" fill="rgb(243,47,26)" fg:x="932" fg:w="1"/><text x="75.4720%" y="303.50"></text></g><g><title>plugins_core::tools::contained_by (22 samples, 1.78%)</title><rect x="73.6077%" y="549" width="1.7756%" height="15" fill="rgb(233,107,5)" fg:x="912" fg:w="22"/><text x="73.8577%" y="559.50">p..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (14 samples, 1.13%)</title><rect x="74.2534%" y="533" width="1.1299%" height="15" fill="rgb(248,140,33)" fg:x="920" fg:w="14"/><text x="74.5034%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (14 samples, 1.13%)</title><rect x="74.2534%" y="517" width="1.1299%" height="15" fill="rgb(228,178,19)" fg:x="920" fg:w="14"/><text x="74.5034%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.13%)</title><rect x="74.2534%" y="501" width="1.1299%" height="15" fill="rgb(224,39,49)" fg:x="920" fg:w="14"/><text x="74.5034%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (14 samples, 1.13%)</title><rect x="74.2534%" y="485" width="1.1299%" height="15" fill="rgb(246,56,47)" fg:x="920" fg:w="14"/><text x="74.5034%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="75.1412%" y="469" width="0.2421%" height="15" fill="rgb(220,73,27)" fg:x="931" fg:w="3"/><text x="75.3912%" y="479.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="75.1412%" y="453" width="0.2421%" height="15" fill="rgb(239,112,21)" fg:x="931" fg:w="3"/><text x="75.3912%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.1412%" y="437" width="0.2421%" height="15" fill="rgb(253,14,51)" fg:x="931" fg:w="3"/><text x="75.3912%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.1412%" y="421" width="0.2421%" height="15" fill="rgb(215,58,12)" fg:x="931" fg:w="3"/><text x="75.3912%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.1412%" y="405" width="0.2421%" height="15" fill="rgb(207,181,19)" fg:x="931" fg:w="3"/><text x="75.3912%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.1412%" y="389" width="0.2421%" height="15" fill="rgb(211,214,34)" fg:x="931" fg:w="3"/><text x="75.3912%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3027%" y="373" width="0.0807%" height="15" fill="rgb(243,124,39)" fg:x="933" fg:w="1"/><text x="75.5527%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="75.4641%" y="517" width="0.3228%" height="15" fill="rgb(248,135,21)" fg:x="935" fg:w="4"/><text x="75.7141%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="75.5448%" y="501" width="0.2421%" height="15" fill="rgb(245,218,3)" fg:x="936" fg:w="3"/><text x="75.7948%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.7062%" y="485" width="0.0807%" height="15" fill="rgb(225,144,22)" fg:x="938" fg:w="1"/><text x="75.9562%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.7062%" y="469" width="0.0807%" height="15" fill="rgb(250,90,15)" fg:x="938" fg:w="1"/><text x="75.9562%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="75.3834%" y="533" width="0.4843%" height="15" fill="rgb(224,64,29)" fg:x="934" fg:w="6"/><text x="75.6334%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.7869%" y="517" width="0.0807%" height="15" fill="rgb(217,50,47)" fg:x="939" fg:w="1"/><text x="76.0369%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7869%" y="501" width="0.0807%" height="15" fill="rgb(231,159,47)" fg:x="939" fg:w="1"/><text x="76.0369%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="75.7869%" y="485" width="0.0807%" height="15" fill="rgb(213,89,29)" fg:x="939" fg:w="1"/><text x="76.0369%" y="495.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="75.7869%" y="469" width="0.0807%" height="15" fill="rgb(243,90,23)" fg:x="939" fg:w="1"/><text x="76.0369%" y="479.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="75.7869%" y="453" width="0.0807%" height="15" fill="rgb(213,21,6)" fg:x="939" fg:w="1"/><text x="76.0369%" y="463.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.7869%" y="437" width="0.0807%" height="15" fill="rgb(237,139,17)" fg:x="939" fg:w="1"/><text x="76.0369%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.7869%" y="421" width="0.0807%" height="15" fill="rgb(250,147,17)" fg:x="939" fg:w="1"/><text x="76.0369%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7869%" y="405" width="0.0807%" height="15" fill="rgb(212,208,42)" fg:x="939" fg:w="1"/><text x="76.0369%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.7869%" y="389" width="0.0807%" height="15" fill="rgb(215,229,40)" fg:x="939" fg:w="1"/><text x="76.0369%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7869%" y="373" width="0.0807%" height="15" fill="rgb(206,204,1)" fg:x="939" fg:w="1"/><text x="76.0369%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (7 samples, 0.56%)</title><rect x="75.3834%" y="549" width="0.5650%" height="15" fill="rgb(230,62,32)" fg:x="934" fg:w="7"/><text x="75.6334%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="75.8676%" y="533" width="0.0807%" height="15" fill="rgb(223,22,42)" fg:x="940" fg:w="1"/><text x="76.1176%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="75.8676%" y="517" width="0.0807%" height="15" fill="rgb(244,6,23)" fg:x="940" fg:w="1"/><text x="76.1176%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.8676%" y="501" width="0.0807%" height="15" fill="rgb(240,221,42)" fg:x="940" fg:w="1"/><text x="76.1176%" y="511.50"></text></g><g><title>engine::session::logs::capture (624 samples, 50.36%)</title><rect x="25.6659%" y="709" width="50.3632%" height="15" fill="rgb(222,74,7)" fg:x="318" fg:w="624"/><text x="25.9159%" y="719.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (615 samples, 49.64%)</title><rect x="26.3923%" y="693" width="49.6368%" height="15" fill="rgb(227,191,38)" fg:x="327" fg:w="615"/><text x="26.6423%" y="703.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (614 samples, 49.56%)</title><rect x="26.4730%" y="677" width="49.5561%" height="15" fill="rgb(227,89,34)" fg:x="328" fg:w="614"/><text x="26.7230%" y="687.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (614 samples, 49.56%)</title><rect x="26.4730%" y="661" width="49.5561%" height="15" fill="rgb(215,153,25)" fg:x="328" fg:w="614"/><text x="26.7230%" y="671.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (614 samples, 49.56%)</title><rect x="26.4730%" y="645" width="49.5561%" height="15" fill="rgb(215,153,46)" fg:x="328" fg:w="614"/><text x="26.7230%" y="655.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (613 samples, 49.48%)</title><rect x="26.5537%" y="629" width="49.4754%" height="15" fill="rgb(242,38,52)" fg:x="329" fg:w="613"/><text x="26.8037%" y="639.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (599 samples, 48.35%)</title><rect x="27.6836%" y="613" width="48.3454%" height="15" fill="rgb(218,112,4)" fg:x="343" fg:w="599"/><text x="27.9336%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (599 samples, 48.35%)</title><rect x="27.6836%" y="597" width="48.3454%" height="15" fill="rgb(231,210,31)" fg:x="343" fg:w="599"/><text x="27.9336%" y="607.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (33 samples, 2.66%)</title><rect x="73.3656%" y="581" width="2.6634%" height="15" fill="rgb(245,223,36)" fg:x="909" fg:w="33"/><text x="73.6156%" y="591.50">pl..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (31 samples, 2.50%)</title><rect x="73.5270%" y="565" width="2.5020%" height="15" fill="rgb(246,41,2)" fg:x="911" fg:w="31"/><text x="73.7770%" y="575.50">pl..</text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="75.9483%" y="549" width="0.0807%" height="15" fill="rgb(227,51,31)" fg:x="941" fg:w="1"/><text x="76.1983%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.9483%" y="533" width="0.0807%" height="15" fill="rgb(222,95,26)" fg:x="941" fg:w="1"/><text x="76.1983%" y="543.50"></text></g><g><title>engine::session::Session::captured (635 samples, 51.25%)</title><rect x="24.8588%" y="725" width="51.2510%" height="15" fill="rgb(224,190,1)" fg:x="308" fg:w="635"/><text x="25.1088%" y="735.50">engine::session::Session::captured</text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="76.0291%" y="709" width="0.0807%" height="15" fill="rgb(209,90,42)" fg:x="942" fg:w="1"/><text x="76.2791%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.1905%" y="661" width="0.0807%" height="15" fill="rgb(232,225,50)" fg:x="944" fg:w="1"/><text x="76.4405%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.1905%" y="645" width="0.0807%" height="15" fill="rgb(239,89,47)" fg:x="944" fg:w="1"/><text x="76.4405%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.1905%" y="629" width="0.0807%" height="15" fill="rgb(230,212,50)" fg:x="944" fg:w="1"/><text x="76.4405%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.1905%" y="613" width="0.0807%" height="15" fill="rgb(252,1,27)" fg:x="944" fg:w="1"/><text x="76.4405%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.1905%" y="597" width="0.0807%" height="15" fill="rgb(237,179,41)" fg:x="944" fg:w="1"/><text x="76.4405%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.1905%" y="581" width="0.0807%" height="15" fill="rgb(214,151,37)" fg:x="944" fg:w="1"/><text x="76.4405%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.1905%" y="565" width="0.0807%" height="15" fill="rgb(211,74,11)" fg:x="944" fg:w="1"/><text x="76.4405%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.1905%" y="549" width="0.0807%" height="15" fill="rgb(242,21,21)" fg:x="944" fg:w="1"/><text x="76.4405%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.1905%" y="533" width="0.0807%" height="15" fill="rgb(226,106,43)" fg:x="944" fg:w="1"/><text x="76.4405%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.1905%" y="517" width="0.0807%" height="15" fill="rgb(229,162,39)" fg:x="944" fg:w="1"/><text x="76.4405%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.1905%" y="501" width="0.0807%" height="15" fill="rgb(228,159,25)" fg:x="944" fg:w="1"/><text x="76.4405%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.1905%" y="485" width="0.0807%" height="15" fill="rgb(237,32,23)" fg:x="944" fg:w="1"/><text x="76.4405%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.1905%" y="469" width="0.0807%" height="15" fill="rgb(212,35,32)" fg:x="944" fg:w="1"/><text x="76.4405%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.1905%" y="453" width="0.0807%" height="15" fill="rgb(215,199,1)" fg:x="944" fg:w="1"/><text x="76.4405%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1905%" y="437" width="0.0807%" height="15" fill="rgb(215,67,13)" fg:x="944" fg:w="1"/><text x="76.4405%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="76.1905%" y="677" width="0.2421%" height="15" fill="rgb(216,20,47)" fg:x="944" fg:w="3"/><text x="76.4405%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.2712%" y="661" width="0.1614%" height="15" fill="rgb(249,183,48)" fg:x="945" fg:w="2"/><text x="76.5212%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.3519%" y="645" width="0.0807%" height="15" fill="rgb(208,86,37)" fg:x="946" fg:w="1"/><text x="76.6019%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.3519%" y="629" width="0.0807%" height="15" fill="rgb(251,192,7)" fg:x="946" fg:w="1"/><text x="76.6019%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.3519%" y="613" width="0.0807%" height="15" fill="rgb(234,196,3)" fg:x="946" fg:w="1"/><text x="76.6019%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.3519%" y="597" width="0.0807%" height="15" fill="rgb(229,150,39)" fg:x="946" fg:w="1"/><text x="76.6019%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.3519%" y="581" width="0.0807%" height="15" fill="rgb(226,19,29)" fg:x="946" fg:w="1"/><text x="76.6019%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.3519%" y="565" width="0.0807%" height="15" fill="rgb(226,222,2)" fg:x="946" fg:w="1"/><text x="76.6019%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.3519%" y="549" width="0.0807%" height="15" fill="rgb(235,85,29)" fg:x="946" fg:w="1"/><text x="76.6019%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.3519%" y="533" width="0.0807%" height="15" fill="rgb(237,194,43)" fg:x="946" fg:w="1"/><text x="76.6019%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.3519%" y="517" width="0.0807%" height="15" fill="rgb(211,4,42)" fg:x="946" fg:w="1"/><text x="76.6019%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.3519%" y="501" width="0.0807%" height="15" fill="rgb(221,80,37)" fg:x="946" fg:w="1"/><text x="76.6019%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3519%" y="485" width="0.0807%" height="15" fill="rgb(222,47,31)" fg:x="946" fg:w="1"/><text x="76.6019%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.5133%" y="629" width="0.0807%" height="15" fill="rgb(249,82,52)" fg:x="948" fg:w="1"/><text x="76.7633%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.5133%" y="613" width="0.0807%" height="15" fill="rgb(218,203,2)" fg:x="948" fg:w="1"/><text x="76.7633%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.5133%" y="597" width="0.0807%" height="15" fill="rgb(210,175,14)" fg:x="948" fg:w="1"/><text x="76.7633%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.5133%" y="581" width="0.0807%" height="15" fill="rgb(216,210,12)" fg:x="948" fg:w="1"/><text x="76.7633%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.5133%" y="565" width="0.0807%" height="15" fill="rgb(229,120,18)" fg:x="948" fg:w="1"/><text x="76.7633%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.5940%" y="629" width="0.0807%" height="15" fill="rgb(231,174,12)" fg:x="949" fg:w="1"/><text x="76.8440%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.5940%" y="613" width="0.0807%" height="15" fill="rgb(214,101,53)" fg:x="949" fg:w="1"/><text x="76.8440%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="76.5940%" y="597" width="0.0807%" height="15" fill="rgb(246,89,43)" fg:x="949" fg:w="1"/><text x="76.8440%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.5940%" y="581" width="0.0807%" height="15" fill="rgb(222,9,51)" fg:x="949" fg:w="1"/><text x="76.8440%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.5940%" y="565" width="0.0807%" height="15" fill="rgb(252,221,9)" fg:x="949" fg:w="1"/><text x="76.8440%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.5940%" y="549" width="0.0807%" height="15" fill="rgb(248,28,15)" fg:x="949" fg:w="1"/><text x="76.8440%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.5940%" y="533" width="0.0807%" height="15" fill="rgb(213,54,52)" fg:x="949" fg:w="1"/><text x="76.8440%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.5940%" y="517" width="0.0807%" height="15" fill="rgb(240,3,45)" fg:x="949" fg:w="1"/><text x="76.8440%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.5940%" y="501" width="0.0807%" height="15" fill="rgb(239,138,24)" fg:x="949" fg:w="1"/><text x="76.8440%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.5940%" y="485" width="0.0807%" height="15" fill="rgb(233,45,54)" fg:x="949" fg:w="1"/><text x="76.8440%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="76.5940%" y="469" width="0.0807%" height="15" fill="rgb(220,131,2)" fg:x="949" fg:w="1"/><text x="76.8440%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="76.5940%" y="453" width="0.0807%" height="15" fill="rgb(240,154,36)" fg:x="949" fg:w="1"/><text x="76.8440%" y="463.50"></text></g><g><title>engine::session::internal::Added::find_refs (8 samples, 0.65%)</title><rect x="76.1905%" y="709" width="0.6457%" height="15" fill="rgb(251,221,1)" fg:x="944" fg:w="8"/><text x="76.4405%" y="719.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.65%)</title><rect x="76.1905%" y="693" width="0.6457%" height="15" fill="rgb(225,217,1)" fg:x="944" fg:w="8"/><text x="76.4405%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="76.4326%" y="677" width="0.4036%" height="15" fill="rgb(241,105,49)" fg:x="947" fg:w="5"/><text x="76.6826%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="76.4326%" y="661" width="0.4036%" height="15" fill="rgb(215,44,32)" fg:x="947" fg:w="5"/><text x="76.6826%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="76.5133%" y="645" width="0.3228%" height="15" fill="rgb(213,222,14)" fg:x="948" fg:w="4"/><text x="76.7633%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="76.6747%" y="629" width="0.1614%" height="15" fill="rgb(207,99,52)" fg:x="950" fg:w="2"/><text x="76.9247%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.7554%" y="613" width="0.0807%" height="15" fill="rgb(214,208,52)" fg:x="951" fg:w="1"/><text x="77.0054%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.7554%" y="597" width="0.0807%" height="15" fill="rgb(244,169,0)" fg:x="951" fg:w="1"/><text x="77.0054%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.8362%" y="693" width="0.0807%" height="15" fill="rgb(216,193,37)" fg:x="952" fg:w="1"/><text x="77.0862%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.8362%" y="677" width="0.0807%" height="15" fill="rgb(212,158,10)" fg:x="952" fg:w="1"/><text x="77.0862%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.8362%" y="661" width="0.0807%" height="15" fill="rgb(213,110,20)" fg:x="952" fg:w="1"/><text x="77.0862%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="76.9169%" y="693" width="0.0807%" height="15" fill="rgb(226,5,42)" fg:x="953" fg:w="1"/><text x="77.1669%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.9169%" y="677" width="0.0807%" height="15" fill="rgb(211,93,8)" fg:x="953" fg:w="1"/><text x="77.1669%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.9169%" y="661" width="0.0807%" height="15" fill="rgb(240,208,12)" fg:x="953" fg:w="1"/><text x="77.1669%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.9976%" y="549" width="0.0807%" height="15" fill="rgb(233,127,50)" fg:x="954" fg:w="1"/><text x="77.2476%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.9976%" y="533" width="0.0807%" height="15" fill="rgb(227,199,53)" fg:x="954" fg:w="1"/><text x="77.2476%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.0783%" y="533" width="0.0807%" height="15" fill="rgb(235,199,10)" fg:x="955" fg:w="1"/><text x="77.3283%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.0783%" y="517" width="0.0807%" height="15" fill="rgb(228,148,35)" fg:x="955" fg:w="1"/><text x="77.3283%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.0783%" y="501" width="0.0807%" height="15" fill="rgb(217,87,19)" fg:x="955" fg:w="1"/><text x="77.3283%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.0783%" y="485" width="0.0807%" height="15" fill="rgb(239,9,32)" fg:x="955" fg:w="1"/><text x="77.3283%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.1590%" y="533" width="0.0807%" height="15" fill="rgb(229,101,29)" fg:x="956" fg:w="1"/><text x="77.4090%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1590%" y="517" width="0.0807%" height="15" fill="rgb(208,143,26)" fg:x="956" fg:w="1"/><text x="77.4090%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="76.9976%" y="565" width="0.3228%" height="15" fill="rgb(214,10,2)" fg:x="954" fg:w="4"/><text x="77.2476%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="77.0783%" y="549" width="0.2421%" height="15" fill="rgb(254,203,30)" fg:x="955" fg:w="3"/><text x="77.3283%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.2397%" y="533" width="0.0807%" height="15" fill="rgb(242,45,3)" fg:x="957" fg:w="1"/><text x="77.4897%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.2397%" y="517" width="0.0807%" height="15" fill="rgb(209,146,51)" fg:x="957" fg:w="1"/><text x="77.4897%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="77.2397%" y="501" width="0.0807%" height="15" fill="rgb(222,80,5)" fg:x="957" fg:w="1"/><text x="77.4897%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="76.9976%" y="613" width="0.4036%" height="15" fill="rgb(252,80,35)" fg:x="954" fg:w="5"/><text x="77.2476%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="76.9976%" y="597" width="0.4036%" height="15" fill="rgb(246,125,28)" fg:x="954" fg:w="5"/><text x="77.2476%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="76.9976%" y="581" width="0.4036%" height="15" fill="rgb(224,143,51)" fg:x="954" fg:w="5"/><text x="77.2476%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3204%" y="565" width="0.0807%" height="15" fill="rgb(205,24,17)" fg:x="958" fg:w="1"/><text x="77.5704%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.65%)</title><rect x="76.8362%" y="709" width="0.6457%" height="15" fill="rgb(253,128,30)" fg:x="952" fg:w="8"/><text x="77.0862%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="76.9976%" y="693" width="0.4843%" height="15" fill="rgb(214,153,25)" fg:x="954" fg:w="6"/><text x="77.2476%" y="703.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="76.9976%" y="677" width="0.4843%" height="15" fill="rgb(214,4,28)" fg:x="954" fg:w="6"/><text x="77.2476%" y="687.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="76.9976%" y="661" width="0.4843%" height="15" fill="rgb(235,179,52)" fg:x="954" fg:w="6"/><text x="77.2476%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="76.9976%" y="645" width="0.4843%" height="15" fill="rgb(233,27,42)" fg:x="954" fg:w="6"/><text x="77.2476%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="76.9976%" y="629" width="0.4843%" height="15" fill="rgb(238,35,25)" fg:x="954" fg:w="6"/><text x="77.2476%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4011%" y="613" width="0.0807%" height="15" fill="rgb(227,44,31)" fg:x="959" fg:w="1"/><text x="77.6511%" y="623.50"></text></g><g><title>engine::session::Session::load_entity (18 samples, 1.45%)</title><rect x="76.1098%" y="725" width="1.4528%" height="15" fill="rgb(232,201,13)" fg:x="943" fg:w="18"/><text x="76.3598%" y="735.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="77.4818%" y="709" width="0.0807%" height="15" fill="rgb(224,172,52)" fg:x="960" fg:w="1"/><text x="77.7318%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.4818%" y="693" width="0.0807%" height="15" fill="rgb(214,27,26)" fg:x="960" fg:w="1"/><text x="77.7318%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="77.5626%" y="693" width="0.0807%" height="15" fill="rgb(210,185,52)" fg:x="961" fg:w="1"/><text x="77.8126%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="77.6433%" y="677" width="0.2421%" height="15" fill="rgb(249,59,32)" fg:x="962" fg:w="3"/><text x="77.8933%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="77.6433%" y="661" width="0.2421%" height="15" fill="rgb(242,209,18)" fg:x="962" fg:w="3"/><text x="77.8933%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.7240%" y="645" width="0.1614%" height="15" fill="rgb(229,0,18)" fg:x="963" fg:w="2"/><text x="77.9740%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.7240%" y="629" width="0.1614%" height="15" fill="rgb(217,138,29)" fg:x="963" fg:w="2"/><text x="77.9740%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.8047%" y="613" width="0.0807%" height="15" fill="rgb(215,72,42)" fg:x="964" fg:w="1"/><text x="78.0547%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.8047%" y="597" width="0.0807%" height="15" fill="rgb(254,115,11)" fg:x="964" fg:w="1"/><text x="78.0547%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.8047%" y="581" width="0.0807%" height="15" fill="rgb(205,133,39)" fg:x="964" fg:w="1"/><text x="78.0547%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.8047%" y="565" width="0.0807%" height="15" fill="rgb(211,36,27)" fg:x="964" fg:w="1"/><text x="78.0547%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.8047%" y="549" width="0.0807%" height="15" fill="rgb(221,48,10)" fg:x="964" fg:w="1"/><text x="78.0547%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.8047%" y="533" width="0.0807%" height="15" fill="rgb(230,172,50)" fg:x="964" fg:w="1"/><text x="78.0547%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.8047%" y="517" width="0.0807%" height="15" fill="rgb(249,72,18)" fg:x="964" fg:w="1"/><text x="78.0547%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.8047%" y="501" width="0.0807%" height="15" fill="rgb(237,58,48)" fg:x="964" fg:w="1"/><text x="78.0547%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.8047%" y="485" width="0.0807%" height="15" fill="rgb(242,123,3)" fg:x="964" fg:w="1"/><text x="78.0547%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.8047%" y="469" width="0.0807%" height="15" fill="rgb(232,111,32)" fg:x="964" fg:w="1"/><text x="78.0547%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.8047%" y="453" width="0.0807%" height="15" fill="rgb(229,108,3)" fg:x="964" fg:w="1"/><text x="78.0547%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.8047%" y="437" width="0.0807%" height="15" fill="rgb(222,158,10)" fg:x="964" fg:w="1"/><text x="78.0547%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.8854%" y="677" width="0.0807%" height="15" fill="rgb(205,34,49)" fg:x="965" fg:w="1"/><text x="78.1354%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="77.9661%" y="677" width="0.0807%" height="15" fill="rgb(232,21,14)" fg:x="966" fg:w="1"/><text x="78.2161%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.9661%" y="661" width="0.0807%" height="15" fill="rgb(229,127,44)" fg:x="966" fg:w="1"/><text x="78.2161%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.9661%" y="645" width="0.0807%" height="15" fill="rgb(232,171,4)" fg:x="966" fg:w="1"/><text x="78.2161%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.9661%" y="629" width="0.0807%" height="15" fill="rgb(250,92,16)" fg:x="966" fg:w="1"/><text x="78.2161%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.9661%" y="613" width="0.0807%" height="15" fill="rgb(230,103,38)" fg:x="966" fg:w="1"/><text x="78.2161%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.9661%" y="597" width="0.0807%" height="15" fill="rgb(253,167,9)" fg:x="966" fg:w="1"/><text x="78.2161%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.9661%" y="581" width="0.0807%" height="15" fill="rgb(222,118,11)" fg:x="966" fg:w="1"/><text x="78.2161%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.9661%" y="565" width="0.0807%" height="15" fill="rgb(240,202,0)" fg:x="966" fg:w="1"/><text x="78.2161%" y="575.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="77.9661%" y="549" width="0.0807%" height="15" fill="rgb(236,124,4)" fg:x="966" fg:w="1"/><text x="78.2161%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="77.9661%" y="533" width="0.0807%" height="15" fill="rgb(244,128,18)" fg:x="966" fg:w="1"/><text x="78.2161%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9661%" y="517" width="0.0807%" height="15" fill="rgb(231,206,5)" fg:x="966" fg:w="1"/><text x="78.2161%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.65%)</title><rect x="77.5626%" y="709" width="0.6457%" height="15" fill="rgb(237,111,8)" fg:x="961" fg:w="8"/><text x="77.8126%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="77.6433%" y="693" width="0.5650%" height="15" fill="rgb(225,127,3)" fg:x="962" fg:w="7"/><text x="77.8933%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="78.0468%" y="677" width="0.1614%" height="15" fill="rgb(222,85,48)" fg:x="967" fg:w="2"/><text x="78.2968%" y="687.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="78.0468%" y="661" width="0.1614%" height="15" fill="rgb(221,108,37)" fg:x="967" fg:w="2"/><text x="78.2968%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.0468%" y="645" width="0.1614%" height="15" fill="rgb(226,169,36)" fg:x="967" fg:w="2"/><text x="78.2968%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.0468%" y="629" width="0.1614%" height="15" fill="rgb(237,76,12)" fg:x="967" fg:w="2"/><text x="78.2968%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.0468%" y="613" width="0.1614%" height="15" fill="rgb(210,227,32)" fg:x="967" fg:w="2"/><text x="78.2968%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.0468%" y="597" width="0.1614%" height="15" fill="rgb(214,117,20)" fg:x="967" fg:w="2"/><text x="78.2968%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.1275%" y="581" width="0.0807%" height="15" fill="rgb(234,119,41)" fg:x="968" fg:w="1"/><text x="78.3775%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.1275%" y="565" width="0.0807%" height="15" fill="rgb(230,130,47)" fg:x="968" fg:w="1"/><text x="78.3775%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.1275%" y="549" width="0.0807%" height="15" fill="rgb(215,21,41)" fg:x="968" fg:w="1"/><text x="78.3775%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.1275%" y="533" width="0.0807%" height="15" fill="rgb(226,26,53)" fg:x="968" fg:w="1"/><text x="78.3775%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.1275%" y="517" width="0.0807%" height="15" fill="rgb(221,92,23)" fg:x="968" fg:w="1"/><text x="78.3775%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.1275%" y="501" width="0.0807%" height="15" fill="rgb(213,156,21)" fg:x="968" fg:w="1"/><text x="78.3775%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.1275%" y="485" width="0.0807%" height="15" fill="rgb(254,166,29)" fg:x="968" fg:w="1"/><text x="78.3775%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="78.1275%" y="469" width="0.0807%" height="15" fill="rgb(213,71,1)" fg:x="968" fg:w="1"/><text x="78.3775%" y="479.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (676 samples, 54.56%)</title><rect x="23.7288%" y="757" width="54.5601%" height="15" fill="rgb(245,8,13)" fg:x="294" fg:w="676"/><text x="23.9788%" y="767.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (676 samples, 54.56%)</title><rect x="23.7288%" y="741" width="54.5601%" height="15" fill="rgb(213,32,32)" fg:x="294" fg:w="676"/><text x="23.9788%" y="751.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (9 samples, 0.73%)</title><rect x="77.5626%" y="725" width="0.7264%" height="15" fill="rgb(251,86,50)" fg:x="961" fg:w="9"/><text x="77.8126%" y="735.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="78.2082%" y="709" width="0.0807%" height="15" fill="rgb(252,92,41)" fg:x="969" fg:w="1"/><text x="78.4582%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.2082%" y="693" width="0.0807%" height="15" fill="rgb(234,70,35)" fg:x="969" fg:w="1"/><text x="78.4582%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (971 samples, 78.37%)</title><rect x="0.0000%" y="805" width="78.3697%" height="15" fill="rgb(210,157,19)" fg:x="0" fg:w="971"/><text x="0.2500%" y="815.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (971 samples, 78.37%)</title><rect x="0.0000%" y="789" width="78.3697%" height="15" fill="rgb(206,20,45)" fg:x="0" fg:w="971"/><text x="0.2500%" y="799.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (971 samples, 78.37%)</title><rect x="0.0000%" y="773" width="78.3697%" height="15" fill="rgb(207,34,7)" fg:x="0" fg:w="971"/><text x="0.2500%" y="783.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="78.2889%" y="757" width="0.0807%" height="15" fill="rgb(253,151,14)" fg:x="970" fg:w="1"/><text x="78.5389%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.2889%" y="741" width="0.0807%" height="15" fill="rgb(252,1,18)" fg:x="970" fg:w="1"/><text x="78.5389%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.2889%" y="725" width="0.0807%" height="15" fill="rgb(214,77,52)" fg:x="970" fg:w="1"/><text x="78.5389%" y="735.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.2889%" y="709" width="0.0807%" height="15" fill="rgb(254,106,35)" fg:x="970" fg:w="1"/><text x="78.5389%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.3697%" y="693" width="0.0807%" height="15" fill="rgb(212,67,40)" fg:x="971" fg:w="1"/><text x="78.6197%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="78.3697%" y="741" width="0.1614%" height="15" fill="rgb(228,76,23)" fg:x="971" fg:w="2"/><text x="78.6197%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="78.3697%" y="725" width="0.1614%" height="15" fill="rgb(250,198,5)" fg:x="971" fg:w="2"/><text x="78.6197%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="78.3697%" y="709" width="0.1614%" height="15" fill="rgb(209,20,25)" fg:x="971" fg:w="2"/><text x="78.6197%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="78.4504%" y="693" width="0.0807%" height="15" fill="rgb(236,32,4)" fg:x="972" fg:w="1"/><text x="78.7004%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.6118%" y="613" width="0.0807%" height="15" fill="rgb(215,31,6)" fg:x="974" fg:w="1"/><text x="78.8618%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.6925%" y="597" width="0.0807%" height="15" fill="rgb(207,186,49)" fg:x="975" fg:w="1"/><text x="78.9425%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="78.3697%" y="757" width="0.5650%" height="15" fill="rgb(211,212,49)" fg:x="971" fg:w="7"/><text x="78.6197%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (5 samples, 0.40%)</title><rect x="78.5311%" y="741" width="0.4036%" height="15" fill="rgb(229,51,41)" fg:x="973" fg:w="5"/><text x="78.7811%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="78.5311%" y="725" width="0.4036%" height="15" fill="rgb(205,225,36)" fg:x="973" fg:w="5"/><text x="78.7811%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (5 samples, 0.40%)</title><rect x="78.5311%" y="709" width="0.4036%" height="15" fill="rgb(209,213,45)" fg:x="973" fg:w="5"/><text x="78.7811%" y="719.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="78.5311%" y="693" width="0.4036%" height="15" fill="rgb(219,35,49)" fg:x="973" fg:w="5"/><text x="78.7811%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="78.5311%" y="677" width="0.4036%" height="15" fill="rgb(215,205,22)" fg:x="973" fg:w="5"/><text x="78.7811%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (5 samples, 0.40%)</title><rect x="78.5311%" y="661" width="0.4036%" height="15" fill="rgb(248,204,34)" fg:x="973" fg:w="5"/><text x="78.7811%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="78.5311%" y="645" width="0.4036%" height="15" fill="rgb(219,223,31)" fg:x="973" fg:w="5"/><text x="78.7811%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="78.5311%" y="629" width="0.4036%" height="15" fill="rgb(236,14,8)" fg:x="973" fg:w="5"/><text x="78.7811%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="78.6925%" y="613" width="0.2421%" height="15" fill="rgb(243,129,23)" fg:x="975" fg:w="3"/><text x="78.9425%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="78.7732%" y="597" width="0.1614%" height="15" fill="rgb(205,204,5)" fg:x="976" fg:w="2"/><text x="79.0232%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.8539%" y="581" width="0.0807%" height="15" fill="rgb(244,115,32)" fg:x="977" fg:w="1"/><text x="79.1039%" y="591.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="79.0960%" y="661" width="0.1614%" height="15" fill="rgb(229,123,14)" fg:x="980" fg:w="2"/><text x="79.3460%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="79.0960%" y="645" width="0.1614%" height="15" fill="rgb(250,85,1)" fg:x="980" fg:w="2"/><text x="79.3460%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.1768%" y="629" width="0.0807%" height="15" fill="rgb(209,141,54)" fg:x="981" fg:w="1"/><text x="79.4268%" y="639.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.2575%" y="645" width="0.0807%" height="15" fill="rgb(244,107,39)" fg:x="982" fg:w="1"/><text x="79.5075%" y="655.50"></text></g><g><title>glob::fill_todo (1 samples, 0.08%)</title><rect x="79.2575%" y="629" width="0.0807%" height="15" fill="rgb(230,68,26)" fg:x="982" fg:w="1"/><text x="79.5075%" y="639.50"></text></g><g><title>glob::is_dir (1 samples, 0.08%)</title><rect x="79.2575%" y="613" width="0.0807%" height="15" fill="rgb(220,178,33)" fg:x="982" fg:w="1"/><text x="79.5075%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="79.2575%" y="597" width="0.0807%" height="15" fill="rgb(220,77,53)" fg:x="982" fg:w="1"/><text x="79.5075%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="79.2575%" y="581" width="0.0807%" height="15" fill="rgb(224,108,19)" fg:x="982" fg:w="1"/><text x="79.5075%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="79.2575%" y="565" width="0.0807%" height="15" fill="rgb(223,203,27)" fg:x="982" fg:w="1"/><text x="79.5075%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="79.2575%" y="549" width="0.0807%" height="15" fill="rgb(211,32,46)" fg:x="982" fg:w="1"/><text x="79.5075%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="79.2575%" y="533" width="0.0807%" height="15" fill="rgb(240,101,27)" fg:x="982" fg:w="1"/><text x="79.5075%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="79.2575%" y="517" width="0.0807%" height="15" fill="rgb(217,210,11)" fg:x="982" fg:w="1"/><text x="79.5075%" y="527.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="79.2575%" y="501" width="0.0807%" height="15" fill="rgb(236,130,21)" fg:x="982" fg:w="1"/><text x="79.5075%" y="511.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="79.0960%" y="677" width="0.3228%" height="15" fill="rgb(250,136,8)" fg:x="980" fg:w="4"/><text x="79.3460%" y="687.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (2 samples, 0.16%)</title><rect x="79.2575%" y="661" width="0.1614%" height="15" fill="rgb(243,223,36)" fg:x="982" fg:w="2"/><text x="79.5075%" y="671.50"></text></g><g><title>glob::glob (1 samples, 0.08%)</title><rect x="79.3382%" y="645" width="0.0807%" height="15" fill="rgb(246,184,8)" fg:x="983" fg:w="1"/><text x="79.5882%" y="655.50"></text></g><g><title>glob::glob_with (1 samples, 0.08%)</title><rect x="79.3382%" y="629" width="0.0807%" height="15" fill="rgb(222,158,36)" fg:x="983" fg:w="1"/><text x="79.5882%" y="639.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="79.3382%" y="613" width="0.0807%" height="15" fill="rgb(210,220,19)" fg:x="983" fg:w="1"/><text x="79.5882%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.3382%" y="597" width="0.0807%" height="15" fill="rgb(246,44,38)" fg:x="983" fg:w="1"/><text x="79.5882%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.3382%" y="581" width="0.0807%" height="15" fill="rgb(246,186,14)" fg:x="983" fg:w="1"/><text x="79.5882%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="79.4189%" y="645" width="0.0807%" height="15" fill="rgb(233,193,20)" fg:x="984" fg:w="1"/><text x="79.6689%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="79.4189%" y="629" width="0.0807%" height="15" fill="rgb(215,60,5)" fg:x="984" fg:w="1"/><text x="79.6689%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="79.4189%" y="613" width="0.0807%" height="15" fill="rgb(207,128,10)" fg:x="984" fg:w="1"/><text x="79.6689%" y="623.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="79.4996%" y="645" width="0.0807%" height="15" fill="rgb(238,84,54)" fg:x="985" fg:w="1"/><text x="79.7496%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="79.4996%" y="629" width="0.0807%" height="15" fill="rgb(213,130,11)" fg:x="985" fg:w="1"/><text x="79.7496%" y="639.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="79.4996%" y="613" width="0.0807%" height="15" fill="rgb(235,62,9)" fg:x="985" fg:w="1"/><text x="79.7496%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.4996%" y="597" width="0.0807%" height="15" fill="rgb(222,64,24)" fg:x="985" fg:w="1"/><text x="79.7496%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="79.5803%" y="645" width="0.0807%" height="15" fill="rgb(238,193,42)" fg:x="986" fg:w="1"/><text x="79.8303%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="79.5803%" y="629" width="0.0807%" height="15" fill="rgb(243,204,46)" fg:x="986" fg:w="1"/><text x="79.8303%" y="639.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="79.5803%" y="613" width="0.0807%" height="15" fill="rgb(243,196,11)" fg:x="986" fg:w="1"/><text x="79.8303%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="79.5803%" y="597" width="0.0807%" height="15" fill="rgb(232,77,22)" fg:x="986" fg:w="1"/><text x="79.8303%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.5803%" y="581" width="0.0807%" height="15" fill="rgb(215,80,25)" fg:x="986" fg:w="1"/><text x="79.8303%" y="591.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (10 samples, 0.81%)</title><rect x="78.9346%" y="757" width="0.8071%" height="15" fill="rgb(210,173,7)" fg:x="978" fg:w="10"/><text x="79.1846%" y="767.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (10 samples, 0.81%)</title><rect x="78.9346%" y="741" width="0.8071%" height="15" fill="rgb(207,101,10)" fg:x="978" fg:w="10"/><text x="79.1846%" y="751.50"></text></g><g><title>engine::session::Session::new (10 samples, 0.81%)</title><rect x="78.9346%" y="725" width="0.8071%" height="15" fill="rgb(246,57,48)" fg:x="978" fg:w="10"/><text x="79.1846%" y="735.50"></text></g><g><title>engine::session::Session::initialize (10 samples, 0.81%)</title><rect x="78.9346%" y="709" width="0.8071%" height="15" fill="rgb(236,184,40)" fg:x="978" fg:w="10"/><text x="79.1846%" y="719.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (10 samples, 0.81%)</title><rect x="78.9346%" y="693" width="0.8071%" height="15" fill="rgb(210,205,13)" fg:x="978" fg:w="10"/><text x="79.1846%" y="703.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="79.4189%" y="677" width="0.3228%" height="15" fill="rgb(231,129,42)" fg:x="984" fg:w="4"/><text x="79.6689%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="79.4189%" y="661" width="0.3228%" height="15" fill="rgb(220,229,54)" fg:x="984" fg:w="4"/><text x="79.6689%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="79.6610%" y="645" width="0.0807%" height="15" fill="rgb(230,192,26)" fg:x="987" fg:w="1"/><text x="79.9110%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="79.6610%" y="629" width="0.0807%" height="15" fill="rgb(253,18,30)" fg:x="987" fg:w="1"/><text x="79.9110%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="79.6610%" y="613" width="0.0807%" height="15" fill="rgb(216,62,53)" fg:x="987" fg:w="1"/><text x="79.9110%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.9839%" y="629" width="0.0807%" height="15" fill="rgb(230,79,29)" fg:x="991" fg:w="1"/><text x="80.2339%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.9839%" y="613" width="0.0807%" height="15" fill="rgb(242,26,26)" fg:x="991" fg:w="1"/><text x="80.2339%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.9839%" y="597" width="0.0807%" height="15" fill="rgb(227,125,21)" fg:x="991" fg:w="1"/><text x="80.2339%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.9839%" y="581" width="0.0807%" height="15" fill="rgb(229,93,26)" fg:x="991" fg:w="1"/><text x="80.2339%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.9839%" y="565" width="0.0807%" height="15" fill="rgb(227,228,8)" fg:x="991" fg:w="1"/><text x="80.2339%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.0646%" y="597" width="0.0807%" height="15" fill="rgb(233,56,0)" fg:x="992" fg:w="1"/><text x="80.3146%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="79.9031%" y="645" width="0.3228%" height="15" fill="rgb(225,185,17)" fg:x="990" fg:w="4"/><text x="80.1531%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="80.0646%" y="629" width="0.1614%" height="15" fill="rgb(238,202,30)" fg:x="992" fg:w="2"/><text x="80.3146%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="80.0646%" y="613" width="0.1614%" height="15" fill="rgb(236,60,13)" fg:x="992" fg:w="2"/><text x="80.3146%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1453%" y="597" width="0.0807%" height="15" fill="rgb(244,92,0)" fg:x="993" fg:w="1"/><text x="80.3953%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1453%" y="581" width="0.0807%" height="15" fill="rgb(225,57,15)" fg:x="993" fg:w="1"/><text x="80.3953%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1453%" y="565" width="0.0807%" height="15" fill="rgb(228,5,28)" fg:x="993" fg:w="1"/><text x="80.3953%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.1453%" y="549" width="0.0807%" height="15" fill="rgb(252,34,51)" fg:x="993" fg:w="1"/><text x="80.3953%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="80.3067%" y="549" width="0.0807%" height="15" fill="rgb(235,58,7)" fg:x="995" fg:w="1"/><text x="80.5567%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3067%" y="533" width="0.0807%" height="15" fill="rgb(250,132,20)" fg:x="995" fg:w="1"/><text x="80.5567%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.3067%" y="517" width="0.0807%" height="15" fill="rgb(217,164,0)" fg:x="995" fg:w="1"/><text x="80.5567%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3067%" y="501" width="0.0807%" height="15" fill="rgb(208,220,35)" fg:x="995" fg:w="1"/><text x="80.5567%" y="511.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.65%)</title><rect x="79.8224%" y="741" width="0.6457%" height="15" fill="rgb(227,42,51)" fg:x="989" fg:w="8"/><text x="80.0724%" y="751.50"></text></g><g><title>engine::session::state::State::close (8 samples, 0.65%)</title><rect x="79.8224%" y="725" width="0.6457%" height="15" fill="rgb(225,146,38)" fg:x="989" fg:w="8"/><text x="80.0724%" y="735.50"></text></g><g><title>engine::session::state::State::flush_entities (8 samples, 0.65%)</title><rect x="79.8224%" y="709" width="0.6457%" height="15" fill="rgb(252,108,37)" fg:x="989" fg:w="8"/><text x="80.0724%" y="719.50"></text></g><g><title>core::iter::adapters::try_process (8 samples, 0.65%)</title><rect x="79.8224%" y="693" width="0.6457%" height="15" fill="rgb(244,101,24)" fg:x="989" fg:w="8"/><text x="80.0724%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.65%)</title><rect x="79.8224%" y="677" width="0.6457%" height="15" fill="rgb(213,161,50)" fg:x="989" fg:w="8"/><text x="80.0724%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (7 samples, 0.56%)</title><rect x="79.9031%" y="661" width="0.5650%" height="15" fill="rgb(248,159,19)" fg:x="990" fg:w="7"/><text x="80.1531%" y="671.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="80.2260%" y="645" width="0.2421%" height="15" fill="rgb(233,179,15)" fg:x="994" fg:w="3"/><text x="80.4760%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="80.2260%" y="629" width="0.2421%" height="15" fill="rgb(248,178,3)" fg:x="994" fg:w="3"/><text x="80.4760%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="80.2260%" y="613" width="0.2421%" height="15" fill="rgb(245,190,41)" fg:x="994" fg:w="3"/><text x="80.4760%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="80.2260%" y="597" width="0.2421%" height="15" fill="rgb(218,151,19)" fg:x="994" fg:w="3"/><text x="80.4760%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="80.2260%" y="581" width="0.2421%" height="15" fill="rgb(245,25,44)" fg:x="994" fg:w="3"/><text x="80.4760%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="80.3067%" y="565" width="0.1614%" height="15" fill="rgb(235,172,47)" fg:x="995" fg:w="2"/><text x="80.5567%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3874%" y="549" width="0.0807%" height="15" fill="rgb(246,33,12)" fg:x="996" fg:w="1"/><text x="80.6374%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.3874%" y="533" width="0.0807%" height="15" fill="rgb(214,124,7)" fg:x="996" fg:w="1"/><text x="80.6374%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3874%" y="517" width="0.0807%" height="15" fill="rgb(246,186,18)" fg:x="996" fg:w="1"/><text x="80.6374%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.3874%" y="501" width="0.0807%" height="15" fill="rgb(231,94,1)" fg:x="996" fg:w="1"/><text x="80.6374%" y="511.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="80.4681%" y="709" width="0.0807%" height="15" fill="rgb(208,33,48)" fg:x="997" fg:w="1"/><text x="80.7181%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="80.4681%" y="693" width="0.0807%" height="15" fill="rgb(208,195,44)" fg:x="997" fg:w="1"/><text x="80.7181%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.4681%" y="677" width="0.0807%" height="15" fill="rgb(226,13,52)" fg:x="997" fg:w="1"/><text x="80.7181%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.4681%" y="661" width="0.0807%" height="15" fill="rgb(217,219,45)" fg:x="997" fg:w="1"/><text x="80.7181%" y="671.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="80.4681%" y="741" width="0.1614%" height="15" fill="rgb(223,45,25)" fg:x="997" fg:w="2"/><text x="80.7181%" y="751.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="80.4681%" y="725" width="0.1614%" height="15" fill="rgb(241,163,0)" fg:x="997" fg:w="2"/><text x="80.7181%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="80.5488%" y="709" width="0.0807%" height="15" fill="rgb(216,68,47)" fg:x="998" fg:w="1"/><text x="80.7988%" y="719.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="80.5488%" y="693" width="0.0807%" height="15" fill="rgb(236,119,45)" fg:x="998" fg:w="1"/><text x="80.7988%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="80.5488%" y="677" width="0.0807%" height="15" fill="rgb(209,188,24)" fg:x="998" fg:w="1"/><text x="80.7988%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="80.5488%" y="661" width="0.0807%" height="15" fill="rgb(221,118,7)" fg:x="998" fg:w="1"/><text x="80.7988%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.5488%" y="645" width="0.0807%" height="15" fill="rgb(213,148,43)" fg:x="998" fg:w="1"/><text x="80.7988%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="80.5488%" y="629" width="0.0807%" height="15" fill="rgb(231,21,43)" fg:x="998" fg:w="1"/><text x="80.7988%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.5488%" y="613" width="0.0807%" height="15" fill="rgb(232,213,43)" fg:x="998" fg:w="1"/><text x="80.7988%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.5488%" y="597" width="0.0807%" height="15" fill="rgb(239,145,50)" fg:x="998" fg:w="1"/><text x="80.7988%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="80.6295%" y="709" width="0.0807%" height="15" fill="rgb(222,131,18)" fg:x="999" fg:w="1"/><text x="80.8795%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="80.6295%" y="693" width="0.0807%" height="15" fill="rgb(243,181,13)" fg:x="999" fg:w="1"/><text x="80.8795%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="80.6295%" y="677" width="0.0807%" height="15" fill="rgb(212,74,41)" fg:x="999" fg:w="1"/><text x="80.8795%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="80.6295%" y="661" width="0.0807%" height="15" fill="rgb(237,143,34)" fg:x="999" fg:w="1"/><text x="80.8795%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.6295%" y="645" width="0.0807%" height="15" fill="rgb(228,139,0)" fg:x="999" fg:w="1"/><text x="80.8795%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.6295%" y="629" width="0.0807%" height="15" fill="rgb(227,214,11)" fg:x="999" fg:w="1"/><text x="80.8795%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="80.6295%" y="613" width="0.0807%" height="15" fill="rgb(228,118,39)" fg:x="999" fg:w="1"/><text x="80.8795%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="80.7103%" y="693" width="0.0807%" height="15" fill="rgb(207,117,22)" fg:x="1000" fg:w="1"/><text x="80.9603%" y="703.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (3 samples, 0.24%)</title><rect x="80.6295%" y="741" width="0.2421%" height="15" fill="rgb(225,91,8)" fg:x="999" fg:w="3"/><text x="80.8795%" y="751.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="80.6295%" y="725" width="0.2421%" height="15" fill="rgb(230,219,48)" fg:x="999" fg:w="3"/><text x="80.8795%" y="735.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="80.7103%" y="709" width="0.1614%" height="15" fill="rgb(244,0,23)" fg:x="1000" fg:w="2"/><text x="80.9603%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.7910%" y="693" width="0.0807%" height="15" fill="rgb(206,212,23)" fg:x="1001" fg:w="1"/><text x="81.0410%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="80.7910%" y="677" width="0.0807%" height="15" fill="rgb(254,62,10)" fg:x="1001" fg:w="1"/><text x="81.0410%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="80.7910%" y="661" width="0.0807%" height="15" fill="rgb(236,58,8)" fg:x="1001" fg:w="1"/><text x="81.0410%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.8717%" y="661" width="0.0807%" height="15" fill="rgb(232,212,17)" fg:x="1002" fg:w="1"/><text x="81.1217%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="80.8717%" y="645" width="0.0807%" height="15" fill="rgb(206,132,9)" fg:x="1002" fg:w="1"/><text x="81.1217%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="80.8717%" y="629" width="0.0807%" height="15" fill="rgb(234,97,28)" fg:x="1002" fg:w="1"/><text x="81.1217%" y="639.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="80.8717%" y="613" width="0.0807%" height="15" fill="rgb(254,144,9)" fg:x="1002" fg:w="1"/><text x="81.1217%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.0331%" y="597" width="0.0807%" height="15" fill="rgb(244,204,43)" fg:x="1004" fg:w="1"/><text x="81.2831%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.0331%" y="581" width="0.0807%" height="15" fill="rgb(248,177,16)" fg:x="1004" fg:w="1"/><text x="81.2831%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.0331%" y="565" width="0.0807%" height="15" fill="rgb(219,110,15)" fg:x="1004" fg:w="1"/><text x="81.2831%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.0331%" y="549" width="0.0807%" height="15" fill="rgb(212,203,25)" fg:x="1004" fg:w="1"/><text x="81.2831%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.0331%" y="533" width="0.0807%" height="15" fill="rgb(205,50,1)" fg:x="1004" fg:w="1"/><text x="81.2831%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="81.0331%" y="613" width="0.1614%" height="15" fill="rgb(222,152,41)" fg:x="1004" fg:w="2"/><text x="81.2831%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.1138%" y="597" width="0.0807%" height="15" fill="rgb(236,83,3)" fg:x="1005" fg:w="1"/><text x="81.3638%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.1945%" y="549" width="0.0807%" height="15" fill="rgb(214,30,54)" fg:x="1006" fg:w="1"/><text x="81.4445%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.1945%" y="533" width="0.0807%" height="15" fill="rgb(250,117,31)" fg:x="1006" fg:w="1"/><text x="81.4445%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.1945%" y="517" width="0.0807%" height="15" fill="rgb(228,77,14)" fg:x="1006" fg:w="1"/><text x="81.4445%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.1945%" y="501" width="0.0807%" height="15" fill="rgb(241,3,28)" fg:x="1006" fg:w="1"/><text x="81.4445%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.1945%" y="485" width="0.0807%" height="15" fill="rgb(221,175,52)" fg:x="1006" fg:w="1"/><text x="81.4445%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.1945%" y="469" width="0.0807%" height="15" fill="rgb(237,91,6)" fg:x="1006" fg:w="1"/><text x="81.4445%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.1945%" y="453" width="0.0807%" height="15" fill="rgb(246,46,42)" fg:x="1006" fg:w="1"/><text x="81.4445%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="81.2752%" y="533" width="0.1614%" height="15" fill="rgb(235,199,0)" fg:x="1007" fg:w="2"/><text x="81.5252%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="81.2752%" y="517" width="0.1614%" height="15" fill="rgb(224,44,40)" fg:x="1007" fg:w="2"/><text x="81.5252%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.3559%" y="501" width="0.0807%" height="15" fill="rgb(209,24,35)" fg:x="1008" fg:w="1"/><text x="81.6059%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="81.1945%" y="613" width="0.3228%" height="15" fill="rgb(244,46,22)" fg:x="1006" fg:w="4"/><text x="81.4445%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="81.1945%" y="597" width="0.3228%" height="15" fill="rgb(235,99,8)" fg:x="1006" fg:w="4"/><text x="81.4445%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="81.1945%" y="581" width="0.3228%" height="15" fill="rgb(218,127,36)" fg:x="1006" fg:w="4"/><text x="81.4445%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="81.1945%" y="565" width="0.3228%" height="15" fill="rgb(238,47,46)" fg:x="1006" fg:w="4"/><text x="81.4445%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="81.2752%" y="549" width="0.2421%" height="15" fill="rgb(233,65,17)" fg:x="1007" fg:w="3"/><text x="81.5252%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.4366%" y="533" width="0.0807%" height="15" fill="rgb(239,22,33)" fg:x="1009" fg:w="1"/><text x="81.6866%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.4366%" y="517" width="0.0807%" height="15" fill="rgb(243,66,43)" fg:x="1009" fg:w="1"/><text x="81.6866%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.5981%" y="581" width="0.0807%" height="15" fill="rgb(235,210,28)" fg:x="1011" fg:w="1"/><text x="81.8481%" y="591.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPath as core::convert::From&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::from (1 samples, 0.08%)</title><rect x="81.5981%" y="565" width="0.0807%" height="15" fill="rgb(205,191,50)" fg:x="1011" fg:w="1"/><text x="81.8481%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="81.5174%" y="597" width="0.2421%" height="15" fill="rgb(251,217,19)" fg:x="1010" fg:w="3"/><text x="81.7674%" y="607.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="81.6788%" y="581" width="0.0807%" height="15" fill="rgb(205,174,37)" fg:x="1012" fg:w="1"/><text x="81.9288%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.6788%" y="565" width="0.0807%" height="15" fill="rgb(212,158,42)" fg:x="1012" fg:w="1"/><text x="81.9288%" y="575.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.6788%" y="549" width="0.0807%" height="15" fill="rgb(212,208,51)" fg:x="1012" fg:w="1"/><text x="81.9288%" y="559.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="81.6788%" y="533" width="0.0807%" height="15" fill="rgb(225,198,20)" fg:x="1012" fg:w="1"/><text x="81.9288%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.7595%" y="581" width="0.0807%" height="15" fill="rgb(247,41,44)" fg:x="1013" fg:w="1"/><text x="82.0095%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.8402%" y="453" width="0.0807%" height="15" fill="rgb(228,33,41)" fg:x="1014" fg:w="1"/><text x="82.0902%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.8402%" y="437" width="0.0807%" height="15" fill="rgb(215,47,52)" fg:x="1014" fg:w="1"/><text x="82.0902%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="81.8402%" y="469" width="0.1614%" height="15" fill="rgb(248,106,37)" fg:x="1014" fg:w="2"/><text x="82.0902%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.9209%" y="453" width="0.0807%" height="15" fill="rgb(238,91,29)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.9209%" y="437" width="0.0807%" height="15" fill="rgb(226,111,40)" fg:x="1015" fg:w="1"/><text x="82.1709%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="81.8402%" y="549" width="0.2421%" height="15" fill="rgb(229,159,36)" fg:x="1014" fg:w="3"/><text x="82.0902%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="81.8402%" y="533" width="0.2421%" height="15" fill="rgb(221,109,4)" fg:x="1014" fg:w="3"/><text x="82.0902%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="81.8402%" y="517" width="0.2421%" height="15" fill="rgb(236,56,25)" fg:x="1014" fg:w="3"/><text x="82.0902%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="81.8402%" y="501" width="0.2421%" height="15" fill="rgb(244,113,23)" fg:x="1014" fg:w="3"/><text x="82.0902%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="81.8402%" y="485" width="0.2421%" height="15" fill="rgb(249,132,2)" fg:x="1014" fg:w="3"/><text x="82.0902%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.0016%" y="469" width="0.0807%" height="15" fill="rgb(205,185,21)" fg:x="1016" fg:w="1"/><text x="82.2516%" y="479.50"></text></g><g><title>engine::session::Session::flush (16 samples, 1.29%)</title><rect x="80.8717%" y="725" width="1.2914%" height="15" fill="rgb(245,130,2)" fg:x="1002" fg:w="16"/><text x="81.1217%" y="735.50"></text></g><g><title>engine::session::Session::save_changes (16 samples, 1.29%)</title><rect x="80.8717%" y="709" width="1.2914%" height="15" fill="rgb(246,71,26)" fg:x="1002" fg:w="16"/><text x="81.1217%" y="719.50"></text></g><g><title>engine::session::state::State::close (16 samples, 1.29%)</title><rect x="80.8717%" y="693" width="1.2914%" height="15" fill="rgb(234,194,6)" fg:x="1002" fg:w="16"/><text x="81.1217%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (16 samples, 1.29%)</title><rect x="80.8717%" y="677" width="1.2914%" height="15" fill="rgb(206,24,32)" fg:x="1002" fg:w="16"/><text x="81.1217%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.21%)</title><rect x="80.9524%" y="661" width="1.2107%" height="15" fill="rgb(233,7,54)" fg:x="1003" fg:w="15"/><text x="81.2024%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 1.13%)</title><rect x="81.0331%" y="645" width="1.1299%" height="15" fill="rgb(252,46,1)" fg:x="1004" fg:w="14"/><text x="81.2831%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (14 samples, 1.13%)</title><rect x="81.0331%" y="629" width="1.1299%" height="15" fill="rgb(216,113,53)" fg:x="1004" fg:w="14"/><text x="81.2831%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.65%)</title><rect x="81.5174%" y="613" width="0.6457%" height="15" fill="rgb(215,40,24)" fg:x="1010" fg:w="8"/><text x="81.7674%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="81.7595%" y="597" width="0.4036%" height="15" fill="rgb(233,222,8)" fg:x="1013" fg:w="5"/><text x="82.0095%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="81.8402%" y="581" width="0.3228%" height="15" fill="rgb(248,73,28)" fg:x="1014" fg:w="4"/><text x="82.0902%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="81.8402%" y="565" width="0.3228%" height="15" fill="rgb(247,126,28)" fg:x="1014" fg:w="4"/><text x="82.0902%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.0823%" y="549" width="0.0807%" height="15" fill="rgb(242,173,54)" fg:x="1017" fg:w="1"/><text x="82.3323%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="82.1630%" y="725" width="0.0807%" height="15" fill="rgb(244,186,22)" fg:x="1018" fg:w="1"/><text x="82.4130%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="82.1630%" y="709" width="0.0807%" height="15" fill="rgb(231,187,4)" fg:x="1018" fg:w="1"/><text x="82.4130%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="82.1630%" y="693" width="0.0807%" height="15" fill="rgb(252,66,47)" fg:x="1018" fg:w="1"/><text x="82.4130%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::new_from_entity (1 samples, 0.08%)</title><rect x="82.1630%" y="677" width="0.0807%" height="15" fill="rgb(240,228,28)" fg:x="1018" fg:w="1"/><text x="82.4130%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (1 samples, 0.08%)</title><rect x="82.2437%" y="725" width="0.0807%" height="15" fill="rgb(237,63,43)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="735.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="82.2437%" y="709" width="0.0807%" height="15" fill="rgb(214,1,44)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="82.2437%" y="693" width="0.0807%" height="15" fill="rgb(212,2,46)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="82.2437%" y="677" width="0.0807%" height="15" fill="rgb(213,142,5)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.2437%" y="661" width="0.0807%" height="15" fill="rgb(229,135,1)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="82.2437%" y="645" width="0.0807%" height="15" fill="rgb(252,98,38)" fg:x="1019" fg:w="1"/><text x="82.4937%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="82.3245%" y="709" width="0.0807%" height="15" fill="rgb(206,89,40)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.3245%" y="693" width="0.0807%" height="15" fill="rgb(219,73,36)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.3245%" y="677" width="0.0807%" height="15" fill="rgb(207,168,32)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.3245%" y="661" width="0.0807%" height="15" fill="rgb(215,113,21)" fg:x="1020" fg:w="1"/><text x="82.5745%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="82.4052%" y="693" width="0.0807%" height="15" fill="rgb(217,144,43)" fg:x="1021" fg:w="1"/><text x="82.6552%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.4052%" y="677" width="0.0807%" height="15" fill="rgb(249,48,50)" fg:x="1021" fg:w="1"/><text x="82.6552%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.24%)</title><rect x="82.3245%" y="725" width="0.2421%" height="15" fill="rgb(242,1,26)" fg:x="1020" fg:w="3"/><text x="82.5745%" y="735.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="82.4052%" y="709" width="0.1614%" height="15" fill="rgb(231,167,42)" fg:x="1021" fg:w="2"/><text x="82.6552%" y="719.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="82.4859%" y="693" width="0.0807%" height="15" fill="rgb(242,177,45)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="82.4859%" y="677" width="0.0807%" height="15" fill="rgb(232,121,42)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="82.4859%" y="661" width="0.0807%" height="15" fill="rgb(205,8,42)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="82.4859%" y="645" width="0.0807%" height="15" fill="rgb(238,199,24)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.4859%" y="629" width="0.0807%" height="15" fill="rgb(228,112,2)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="82.4859%" y="613" width="0.0807%" height="15" fill="rgb(215,115,33)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.4859%" y="597" width="0.0807%" height="15" fill="rgb(230,209,34)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.4859%" y="581" width="0.0807%" height="15" fill="rgb(246,76,12)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.4859%" y="565" width="0.0807%" height="15" fill="rgb(240,110,9)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.4859%" y="549" width="0.0807%" height="15" fill="rgb(224,94,46)" fg:x="1022" fg:w="1"/><text x="82.7359%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (22 samples, 1.78%)</title><rect x="80.8717%" y="741" width="1.7756%" height="15" fill="rgb(247,150,22)" fg:x="1002" fg:w="22"/><text x="81.1217%" y="751.50">p..</text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="82.5666%" y="725" width="0.0807%" height="15" fill="rgb(249,85,13)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="735.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="82.5666%" y="709" width="0.0807%" height="15" fill="rgb(208,77,41)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="82.5666%" y="693" width="0.0807%" height="15" fill="rgb(240,42,44)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="82.5666%" y="677" width="0.0807%" height="15" fill="rgb(222,10,51)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="82.5666%" y="661" width="0.0807%" height="15" fill="rgb(208,146,53)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="82.5666%" y="645" width="0.0807%" height="15" fill="rgb(236,162,23)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.5666%" y="629" width="0.0807%" height="15" fill="rgb(218,66,21)" fg:x="1023" fg:w="1"/><text x="82.8166%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="82.6473%" y="741" width="0.1614%" height="15" fill="rgb(233,6,47)" fg:x="1024" fg:w="2"/><text x="82.8973%" y="751.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="82.6473%" y="725" width="0.1614%" height="15" fill="rgb(236,59,51)" fg:x="1024" fg:w="2"/><text x="82.8973%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="82.6473%" y="709" width="0.1614%" height="15" fill="rgb(242,12,46)" fg:x="1024" fg:w="2"/><text x="82.8973%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="82.6473%" y="693" width="0.1614%" height="15" fill="rgb(243,142,19)" fg:x="1024" fg:w="2"/><text x="82.8973%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="82.6473%" y="677" width="0.1614%" height="15" fill="rgb(217,28,17)" fg:x="1024" fg:w="2"/><text x="82.8973%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="82.6473%" y="661" width="0.1614%" height="15" fill="rgb(228,2,27)" fg:x="1024" fg:w="2"/><text x="82.8973%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="82.6473%" y="645" width="0.1614%" height="15" fill="rgb(214,221,4)" fg:x="1024" fg:w="2"/><text x="82.8973%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="82.8087%" y="645" width="0.0807%" height="15" fill="rgb(224,69,26)" fg:x="1026" fg:w="1"/><text x="83.0587%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="82.8087%" y="629" width="0.0807%" height="15" fill="rgb(219,70,4)" fg:x="1026" fg:w="1"/><text x="83.0587%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="82.8087%" y="613" width="0.0807%" height="15" fill="rgb(218,157,39)" fg:x="1026" fg:w="1"/><text x="83.0587%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.8087%" y="597" width="0.0807%" height="15" fill="rgb(238,36,28)" fg:x="1026" fg:w="1"/><text x="83.0587%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (40 samples, 3.23%)</title><rect x="79.7417%" y="757" width="3.2284%" height="15" fill="rgb(232,29,0)" fg:x="988" fg:w="40"/><text x="79.9917%" y="767.50">&lt;te..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (2 samples, 0.16%)</title><rect x="82.8087%" y="741" width="0.1614%" height="15" fill="rgb(243,138,46)" fg:x="1026" fg:w="2"/><text x="83.0587%" y="751.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="82.8087%" y="725" width="0.1614%" height="15" fill="rgb(232,186,41)" fg:x="1026" fg:w="2"/><text x="83.0587%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="82.8087%" y="709" width="0.1614%" height="15" fill="rgb(252,166,17)" fg:x="1026" fg:w="2"/><text x="83.0587%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="82.8087%" y="693" width="0.1614%" height="15" fill="rgb(228,179,12)" fg:x="1026" fg:w="2"/><text x="83.0587%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="82.8087%" y="677" width="0.1614%" height="15" fill="rgb(254,205,53)" fg:x="1026" fg:w="2"/><text x="83.0587%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="82.8087%" y="661" width="0.1614%" height="15" fill="rgb(224,163,47)" fg:x="1026" fg:w="2"/><text x="83.0587%" y="671.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="82.8894%" y="645" width="0.0807%" height="15" fill="rgb(208,43,47)" fg:x="1027" fg:w="1"/><text x="83.1394%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.8894%" y="629" width="0.0807%" height="15" fill="rgb(224,198,38)" fg:x="1027" fg:w="1"/><text x="83.1394%" y="639.50"></text></g><g><title>&lt;kernel::session::SetSession&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="83.0508%" y="741" width="0.0807%" height="15" fill="rgb(234,12,40)" fg:x="1029" fg:w="1"/><text x="83.3008%" y="751.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (1 samples, 0.08%)</title><rect x="83.2123%" y="725" width="0.0807%" height="15" fill="rgb(237,212,39)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="735.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="83.2123%" y="709" width="0.0807%" height="15" fill="rgb(253,2,33)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.2123%" y="693" width="0.0807%" height="15" fill="rgb(251,29,16)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.2123%" y="677" width="0.0807%" height="15" fill="rgb(214,38,29)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.2123%" y="661" width="0.0807%" height="15" fill="rgb(226,226,29)" fg:x="1031" fg:w="1"/><text x="83.4623%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.2930%" y="725" width="0.0807%" height="15" fill="rgb(236,79,42)" fg:x="1032" fg:w="1"/><text x="83.5430%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.2930%" y="709" width="0.0807%" height="15" fill="rgb(222,12,36)" fg:x="1032" fg:w="1"/><text x="83.5430%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.2930%" y="693" width="0.0807%" height="15" fill="rgb(232,123,44)" fg:x="1032" fg:w="1"/><text x="83.5430%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.2930%" y="677" width="0.0807%" height="15" fill="rgb(234,93,50)" fg:x="1032" fg:w="1"/><text x="83.5430%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="83.3737%" y="661" width="0.2421%" height="15" fill="rgb(210,86,49)" fg:x="1033" fg:w="3"/><text x="83.6237%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="83.3737%" y="645" width="0.2421%" height="15" fill="rgb(224,91,54)" fg:x="1033" fg:w="3"/><text x="83.6237%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="83.3737%" y="629" width="0.2421%" height="15" fill="rgb(239,169,9)" fg:x="1033" fg:w="3"/><text x="83.6237%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="83.4544%" y="613" width="0.1614%" height="15" fill="rgb(238,29,17)" fg:x="1034" fg:w="2"/><text x="83.7044%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="83.5351%" y="597" width="0.0807%" height="15" fill="rgb(227,160,22)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.5351%" y="581" width="0.0807%" height="15" fill="rgb(231,129,52)" fg:x="1035" fg:w="1"/><text x="83.7851%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="83.6158%" y="661" width="0.0807%" height="15" fill="rgb(241,184,9)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="83.6158%" y="645" width="0.0807%" height="15" fill="rgb(217,43,48)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="83.6158%" y="629" width="0.0807%" height="15" fill="rgb(213,49,1)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="83.6158%" y="613" width="0.0807%" height="15" fill="rgb(223,79,39)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="83.6158%" y="597" width="0.0807%" height="15" fill="rgb(228,227,46)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.6158%" y="581" width="0.0807%" height="15" fill="rgb(245,89,41)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="83.6158%" y="565" width="0.0807%" height="15" fill="rgb(253,83,21)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.6158%" y="549" width="0.0807%" height="15" fill="rgb(229,116,51)" fg:x="1036" fg:w="1"/><text x="83.8658%" y="559.50"></text></g><g><title>burrow_bon::perms::find_acls (1 samples, 0.08%)</title><rect x="83.6965%" y="661" width="0.0807%" height="15" fill="rgb(246,67,26)" fg:x="1037" fg:w="1"/><text x="83.9465%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.7772%" y="565" width="0.0807%" height="15" fill="rgb(250,117,20)" fg:x="1038" fg:w="1"/><text x="84.0272%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="83.7772%" y="629" width="0.1614%" height="15" fill="rgb(207,88,17)" fg:x="1038" fg:w="2"/><text x="84.0272%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="83.7772%" y="613" width="0.1614%" height="15" fill="rgb(212,98,36)" fg:x="1038" fg:w="2"/><text x="84.0272%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="83.7772%" y="597" width="0.1614%" height="15" fill="rgb(221,72,6)" fg:x="1038" fg:w="2"/><text x="84.0272%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="83.7772%" y="581" width="0.1614%" height="15" fill="rgb(235,129,19)" fg:x="1038" fg:w="2"/><text x="84.0272%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.8579%" y="565" width="0.0807%" height="15" fill="rgb(237,200,6)" fg:x="1039" fg:w="1"/><text x="84.1079%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.8579%" y="549" width="0.0807%" height="15" fill="rgb(239,69,54)" fg:x="1039" fg:w="1"/><text x="84.1079%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.8579%" y="533" width="0.0807%" height="15" fill="rgb(214,68,45)" fg:x="1039" fg:w="1"/><text x="84.1079%" y="543.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="83.9387%" y="629" width="0.0807%" height="15" fill="rgb(254,160,8)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="83.9387%" y="613" width="0.0807%" height="15" fill="rgb(215,226,31)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="623.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="83.9387%" y="597" width="0.0807%" height="15" fill="rgb(253,6,35)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="607.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="83.9387%" y="581" width="0.0807%" height="15" fill="rgb(219,96,42)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="83.9387%" y="565" width="0.0807%" height="15" fill="rgb(207,170,13)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.9387%" y="549" width="0.0807%" height="15" fill="rgb(239,101,5)" fg:x="1040" fg:w="1"/><text x="84.1887%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="84.0194%" y="613" width="0.0807%" height="15" fill="rgb(228,183,34)" fg:x="1041" fg:w="1"/><text x="84.2694%" y="623.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.40%)</title><rect x="83.7772%" y="645" width="0.4036%" height="15" fill="rgb(205,28,31)" fg:x="1038" fg:w="5"/><text x="84.0272%" y="655.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="84.0194%" y="629" width="0.1614%" height="15" fill="rgb(214,118,50)" fg:x="1041" fg:w="2"/><text x="84.2694%" y="639.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="84.1001%" y="613" width="0.0807%" height="15" fill="rgb(213,108,51)" fg:x="1042" fg:w="1"/><text x="84.3501%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.1001%" y="597" width="0.0807%" height="15" fill="rgb(238,56,37)" fg:x="1042" fg:w="1"/><text x="84.3501%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.3422%" y="613" width="0.0807%" height="15" fill="rgb(214,136,28)" fg:x="1045" fg:w="1"/><text x="84.5922%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="84.4229%" y="597" width="0.0807%" height="15" fill="rgb(221,201,54)" fg:x="1046" fg:w="1"/><text x="84.6729%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="84.4229%" y="613" width="0.1614%" height="15" fill="rgb(228,216,39)" fg:x="1046" fg:w="2"/><text x="84.6729%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.5036%" y="597" width="0.0807%" height="15" fill="rgb(207,229,49)" fg:x="1047" fg:w="1"/><text x="84.7536%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="84.5036%" y="581" width="0.0807%" height="15" fill="rgb(224,23,43)" fg:x="1047" fg:w="1"/><text x="84.7536%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="84.5843%" y="581" width="0.0807%" height="15" fill="rgb(247,97,18)" fg:x="1048" fg:w="1"/><text x="84.8343%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.6651%" y="565" width="0.0807%" height="15" fill="rgb(232,53,32)" fg:x="1049" fg:w="1"/><text x="84.9151%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.6651%" y="549" width="0.0807%" height="15" fill="rgb(247,38,23)" fg:x="1049" fg:w="1"/><text x="84.9151%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="84.7458%" y="565" width="0.0807%" height="15" fill="rgb(228,101,52)" fg:x="1050" fg:w="1"/><text x="84.9958%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="84.7458%" y="549" width="0.0807%" height="15" fill="rgb(231,45,36)" fg:x="1050" fg:w="1"/><text x="84.9958%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="84.7458%" y="533" width="0.0807%" height="15" fill="rgb(221,183,50)" fg:x="1050" fg:w="1"/><text x="84.9958%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.7458%" y="517" width="0.0807%" height="15" fill="rgb(251,132,12)" fg:x="1050" fg:w="1"/><text x="84.9958%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.7458%" y="501" width="0.0807%" height="15" fill="rgb(252,50,16)" fg:x="1050" fg:w="1"/><text x="84.9958%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.81%)</title><rect x="84.1808%" y="645" width="0.8071%" height="15" fill="rgb(224,60,15)" fg:x="1043" fg:w="10"/><text x="84.4308%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.81%)</title><rect x="84.1808%" y="629" width="0.8071%" height="15" fill="rgb(254,2,34)" fg:x="1043" fg:w="10"/><text x="84.4308%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="84.5843%" y="613" width="0.4036%" height="15" fill="rgb(232,154,8)" fg:x="1048" fg:w="5"/><text x="84.8343%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="84.5843%" y="597" width="0.4036%" height="15" fill="rgb(235,190,52)" fg:x="1048" fg:w="5"/><text x="84.8343%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="84.6651%" y="581" width="0.3228%" height="15" fill="rgb(213,218,38)" fg:x="1049" fg:w="4"/><text x="84.9151%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="84.8265%" y="565" width="0.1614%" height="15" fill="rgb(237,50,37)" fg:x="1051" fg:w="2"/><text x="85.0765%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="84.9072%" y="549" width="0.0807%" height="15" fill="rgb(235,51,35)" fg:x="1052" fg:w="1"/><text x="85.1572%" y="559.50"></text></g><g><title>engine::session::Session::close (26 samples, 2.10%)</title><rect x="82.9701%" y="757" width="2.0985%" height="15" fill="rgb(244,40,52)" fg:x="1028" fg:w="26"/><text x="83.2201%" y="767.50">e..</text></g><g><title>engine::session::state::State::close (24 samples, 1.94%)</title><rect x="83.1316%" y="741" width="1.9370%" height="15" fill="rgb(217,225,45)" fg:x="1030" fg:w="24"/><text x="83.3816%" y="751.50">e..</text></g><g><title>engine::session::state::State::flush_entities (21 samples, 1.69%)</title><rect x="83.3737%" y="725" width="1.6949%" height="15" fill="rgb(247,191,36)" fg:x="1033" fg:w="21"/><text x="83.6237%" y="735.50"></text></g><g><title>core::iter::adapters::try_process (21 samples, 1.69%)</title><rect x="83.3737%" y="709" width="1.6949%" height="15" fill="rgb(251,144,31)" fg:x="1033" fg:w="21"/><text x="83.6237%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 1.69%)</title><rect x="83.3737%" y="693" width="1.6949%" height="15" fill="rgb(227,155,41)" fg:x="1033" fg:w="21"/><text x="83.6237%" y="703.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (21 samples, 1.69%)</title><rect x="83.3737%" y="677" width="1.6949%" height="15" fill="rgb(236,121,36)" fg:x="1033" fg:w="21"/><text x="83.6237%" y="687.50"></text></g><g><title>kernel::model::any_entity_changes (16 samples, 1.29%)</title><rect x="83.7772%" y="661" width="1.2914%" height="15" fill="rgb(221,128,28)" fg:x="1038" fg:w="16"/><text x="84.0272%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="84.9879%" y="645" width="0.0807%" height="15" fill="rgb(249,67,50)" fg:x="1053" fg:w="1"/><text x="85.2379%" y="655.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="84.9879%" y="629" width="0.0807%" height="15" fill="rgb(241,126,38)" fg:x="1053" fg:w="1"/><text x="85.2379%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.9879%" y="613" width="0.0807%" height="15" fill="rgb(239,33,14)" fg:x="1053" fg:w="1"/><text x="85.2379%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.9879%" y="597" width="0.0807%" height="15" fill="rgb(207,221,54)" fg:x="1053" fg:w="1"/><text x="85.2379%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.9879%" y="581" width="0.0807%" height="15" fill="rgb(242,138,43)" fg:x="1053" fg:w="1"/><text x="85.2379%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.9879%" y="565" width="0.0807%" height="15" fill="rgb(231,118,19)" fg:x="1053" fg:w="1"/><text x="85.2379%" y="575.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="85.2300%" y="517" width="0.0807%" height="15" fill="rgb(214,128,54)" fg:x="1056" fg:w="1"/><text x="85.4800%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.2300%" y="501" width="0.0807%" height="15" fill="rgb(236,136,6)" fg:x="1056" fg:w="1"/><text x="85.4800%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.3107%" y="421" width="0.0807%" height="15" fill="rgb(247,30,38)" fg:x="1057" fg:w="1"/><text x="85.5607%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.3107%" y="405" width="0.0807%" height="15" fill="rgb(249,189,40)" fg:x="1057" fg:w="1"/><text x="85.5607%" y="415.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="85.3107%" y="389" width="0.0807%" height="15" fill="rgb(247,179,7)" fg:x="1057" fg:w="1"/><text x="85.5607%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.3107%" y="373" width="0.0807%" height="15" fill="rgb(239,46,52)" fg:x="1057" fg:w="1"/><text x="85.5607%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.3107%" y="357" width="0.0807%" height="15" fill="rgb(225,28,52)" fg:x="1057" fg:w="1"/><text x="85.5607%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.3107%" y="341" width="0.0807%" height="15" fill="rgb(217,208,44)" fg:x="1057" fg:w="1"/><text x="85.5607%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.3107%" y="325" width="0.0807%" height="15" fill="rgb(224,11,34)" fg:x="1057" fg:w="1"/><text x="85.5607%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.3107%" y="309" width="0.0807%" height="15" fill="rgb(205,134,17)" fg:x="1057" fg:w="1"/><text x="85.5607%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="85.3107%" y="517" width="0.2421%" height="15" fill="rgb(237,125,9)" fg:x="1057" fg:w="3"/><text x="85.5607%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="85.3107%" y="501" width="0.2421%" height="15" fill="rgb(208,139,47)" fg:x="1057" fg:w="3"/><text x="85.5607%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="85.3107%" y="485" width="0.2421%" height="15" fill="rgb(242,5,5)" fg:x="1057" fg:w="3"/><text x="85.5607%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="85.3107%" y="469" width="0.2421%" height="15" fill="rgb(218,78,2)" fg:x="1057" fg:w="3"/><text x="85.5607%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="85.3107%" y="453" width="0.2421%" height="15" fill="rgb(217,75,16)" fg:x="1057" fg:w="3"/><text x="85.5607%" y="463.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="85.3107%" y="437" width="0.2421%" height="15" fill="rgb(212,56,17)" fg:x="1057" fg:w="3"/><text x="85.5607%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.3914%" y="421" width="0.1614%" height="15" fill="rgb(228,61,29)" fg:x="1058" fg:w="2"/><text x="85.6414%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="85.3914%" y="405" width="0.1614%" height="15" fill="rgb(247,202,38)" fg:x="1058" fg:w="2"/><text x="85.6414%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="85.3914%" y="389" width="0.1614%" height="15" fill="rgb(211,216,43)" fg:x="1058" fg:w="2"/><text x="85.6414%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.3914%" y="373" width="0.1614%" height="15" fill="rgb(220,7,49)" fg:x="1058" fg:w="2"/><text x="85.6414%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="85.3914%" y="357" width="0.1614%" height="15" fill="rgb(219,158,7)" fg:x="1058" fg:w="2"/><text x="85.6414%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="85.4722%" y="341" width="0.0807%" height="15" fill="rgb(206,127,9)" fg:x="1059" fg:w="1"/><text x="85.7222%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.4722%" y="325" width="0.0807%" height="15" fill="rgb(206,103,43)" fg:x="1059" fg:w="1"/><text x="85.7222%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.4722%" y="309" width="0.0807%" height="15" fill="rgb(240,108,41)" fg:x="1059" fg:w="1"/><text x="85.7222%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.4722%" y="293" width="0.0807%" height="15" fill="rgb(252,212,6)" fg:x="1059" fg:w="1"/><text x="85.7222%" y="303.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="85.2300%" y="533" width="0.4036%" height="15" fill="rgb(248,105,31)" fg:x="1056" fg:w="5"/><text x="85.4800%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="85.5529%" y="517" width="0.0807%" height="15" fill="rgb(241,123,4)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="527.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="85.5529%" y="501" width="0.0807%" height="15" fill="rgb(223,74,37)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.5529%" y="485" width="0.0807%" height="15" fill="rgb(251,219,28)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.5529%" y="469" width="0.0807%" height="15" fill="rgb(218,36,31)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.5529%" y="453" width="0.0807%" height="15" fill="rgb(229,40,15)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.5529%" y="437" width="0.0807%" height="15" fill="rgb(208,138,37)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.5529%" y="421" width="0.0807%" height="15" fill="rgb(208,40,52)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.5529%" y="405" width="0.0807%" height="15" fill="rgb(246,181,48)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.5529%" y="389" width="0.0807%" height="15" fill="rgb(253,178,36)" fg:x="1060" fg:w="1"/><text x="85.8029%" y="399.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (7 samples, 0.56%)</title><rect x="85.1493%" y="613" width="0.5650%" height="15" fill="rgb(210,170,6)" fg:x="1055" fg:w="7"/><text x="85.3993%" y="623.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (7 samples, 0.56%)</title><rect x="85.1493%" y="597" width="0.5650%" height="15" fill="rgb(243,62,22)" fg:x="1055" fg:w="7"/><text x="85.3993%" y="607.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="85.2300%" y="581" width="0.4843%" height="15" fill="rgb(213,145,26)" fg:x="1056" fg:w="6"/><text x="85.4800%" y="591.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="85.2300%" y="565" width="0.4843%" height="15" fill="rgb(237,177,23)" fg:x="1056" fg:w="6"/><text x="85.4800%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="85.2300%" y="549" width="0.4843%" height="15" fill="rgb(252,5,24)" fg:x="1056" fg:w="6"/><text x="85.4800%" y="559.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="85.6336%" y="533" width="0.0807%" height="15" fill="rgb(230,108,54)" fg:x="1061" fg:w="1"/><text x="85.8836%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.6336%" y="517" width="0.0807%" height="15" fill="rgb(252,192,41)" fg:x="1061" fg:w="1"/><text x="85.8836%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="85.6336%" y="501" width="0.0807%" height="15" fill="rgb(218,125,20)" fg:x="1061" fg:w="1"/><text x="85.8836%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.8757%" y="341" width="0.0807%" height="15" fill="rgb(230,223,15)" fg:x="1064" fg:w="1"/><text x="86.1257%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="85.8757%" y="421" width="0.1614%" height="15" fill="rgb(239,99,47)" fg:x="1064" fg:w="2"/><text x="86.1257%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="85.8757%" y="405" width="0.1614%" height="15" fill="rgb(222,214,23)" fg:x="1064" fg:w="2"/><text x="86.1257%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.8757%" y="389" width="0.1614%" height="15" fill="rgb(250,98,43)" fg:x="1064" fg:w="2"/><text x="86.1257%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="85.8757%" y="373" width="0.1614%" height="15" fill="rgb(226,140,11)" fg:x="1064" fg:w="2"/><text x="86.1257%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.8757%" y="357" width="0.1614%" height="15" fill="rgb(239,2,22)" fg:x="1064" fg:w="2"/><text x="86.1257%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.9564%" y="341" width="0.0807%" height="15" fill="rgb(209,106,26)" fg:x="1065" fg:w="1"/><text x="86.2064%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="86.0371%" y="421" width="0.0807%" height="15" fill="rgb(209,135,11)" fg:x="1066" fg:w="1"/><text x="86.2871%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="86.0371%" y="405" width="0.0807%" height="15" fill="rgb(241,58,6)" fg:x="1066" fg:w="1"/><text x="86.2871%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.0371%" y="389" width="0.0807%" height="15" fill="rgb(214,78,1)" fg:x="1066" fg:w="1"/><text x="86.2871%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.0371%" y="373" width="0.0807%" height="15" fill="rgb(229,135,33)" fg:x="1066" fg:w="1"/><text x="86.2871%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="86.1178%" y="421" width="0.0807%" height="15" fill="rgb(245,87,50)" fg:x="1067" fg:w="1"/><text x="86.3678%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="86.1178%" y="405" width="0.0807%" height="15" fill="rgb(222,222,8)" fg:x="1067" fg:w="1"/><text x="86.3678%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.1178%" y="389" width="0.0807%" height="15" fill="rgb(214,97,50)" fg:x="1067" fg:w="1"/><text x="86.3678%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.1178%" y="373" width="0.0807%" height="15" fill="rgb(244,161,51)" fg:x="1067" fg:w="1"/><text x="86.3678%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="86.1178%" y="357" width="0.0807%" height="15" fill="rgb(225,17,4)" fg:x="1067" fg:w="1"/><text x="86.3678%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.1178%" y="341" width="0.0807%" height="15" fill="rgb(238,10,13)" fg:x="1067" fg:w="1"/><text x="86.3678%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.1178%" y="325" width="0.0807%" height="15" fill="rgb(239,169,14)" fg:x="1067" fg:w="1"/><text x="86.3678%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.1178%" y="309" width="0.0807%" height="15" fill="rgb(213,105,25)" fg:x="1067" fg:w="1"/><text x="86.3678%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="86.1985%" y="341" width="0.0807%" height="15" fill="rgb(233,4,17)" fg:x="1068" fg:w="1"/><text x="86.4485%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="86.1985%" y="325" width="0.0807%" height="15" fill="rgb(212,5,35)" fg:x="1068" fg:w="1"/><text x="86.4485%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="86.1985%" y="309" width="0.0807%" height="15" fill="rgb(216,3,14)" fg:x="1068" fg:w="1"/><text x="86.4485%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="86.1985%" y="293" width="0.0807%" height="15" fill="rgb(240,105,33)" fg:x="1068" fg:w="1"/><text x="86.4485%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="86.1985%" y="277" width="0.0807%" height="15" fill="rgb(216,73,0)" fg:x="1068" fg:w="1"/><text x="86.4485%" y="287.50"></text></g><g><title>regex_automata::util::determinize::set_lookbehind_from_start (1 samples, 0.08%)</title><rect x="86.1985%" y="261" width="0.0807%" height="15" fill="rgb(217,153,48)" fg:x="1068" fg:w="1"/><text x="86.4485%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.2793%" y="341" width="0.0807%" height="15" fill="rgb(218,180,8)" fg:x="1069" fg:w="1"/><text x="86.5293%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="86.4407%" y="277" width="0.0807%" height="15" fill="rgb(252,168,2)" fg:x="1071" fg:w="1"/><text x="86.6907%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.4407%" y="261" width="0.0807%" height="15" fill="rgb(224,116,33)" fg:x="1071" fg:w="1"/><text x="86.6907%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="86.5214%" y="277" width="0.0807%" height="15" fill="rgb(229,205,17)" fg:x="1072" fg:w="1"/><text x="86.7714%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="86.6828%" y="213" width="0.0807%" height="15" fill="rgb(234,1,41)" fg:x="1074" fg:w="1"/><text x="86.9328%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="86.6828%" y="197" width="0.0807%" height="15" fill="rgb(244,185,8)" fg:x="1074" fg:w="1"/><text x="86.9328%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="86.6828%" y="181" width="0.0807%" height="15" fill="rgb(248,51,21)" fg:x="1074" fg:w="1"/><text x="86.9328%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="86.6828%" y="165" width="0.0807%" height="15" fill="rgb(248,157,31)" fg:x="1074" fg:w="1"/><text x="86.9328%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.6828%" y="149" width="0.0807%" height="15" fill="rgb(210,34,47)" fg:x="1074" fg:w="1"/><text x="86.9328%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (7 samples, 0.56%)</title><rect x="86.7635%" y="213" width="0.5650%" height="15" fill="rgb(227,139,53)" fg:x="1075" fg:w="7"/><text x="87.0135%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (7 samples, 0.56%)</title><rect x="86.7635%" y="197" width="0.5650%" height="15" fill="rgb(232,211,37)" fg:x="1075" fg:w="7"/><text x="87.0135%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (7 samples, 0.56%)</title><rect x="86.7635%" y="181" width="0.5650%" height="15" fill="rgb(236,133,10)" fg:x="1075" fg:w="7"/><text x="87.0135%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="87.3285%" y="213" width="0.0807%" height="15" fill="rgb(243,202,25)" fg:x="1082" fg:w="1"/><text x="87.5785%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.89%)</title><rect x="86.6021%" y="261" width="0.8878%" height="15" fill="rgb(224,59,9)" fg:x="1073" fg:w="11"/><text x="86.8521%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (11 samples, 0.89%)</title><rect x="86.6021%" y="245" width="0.8878%" height="15" fill="rgb(206,146,16)" fg:x="1073" fg:w="11"/><text x="86.8521%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (11 samples, 0.89%)</title><rect x="86.6021%" y="229" width="0.8878%" height="15" fill="rgb(220,47,2)" fg:x="1073" fg:w="11"/><text x="86.8521%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="87.4092%" y="213" width="0.0807%" height="15" fill="rgb(225,124,51)" fg:x="1083" fg:w="1"/><text x="87.6592%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.4092%" y="197" width="0.0807%" height="15" fill="rgb(241,220,50)" fg:x="1083" fg:w="1"/><text x="87.6592%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.4092%" y="181" width="0.0807%" height="15" fill="rgb(232,168,5)" fg:x="1083" fg:w="1"/><text x="87.6592%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.4092%" y="165" width="0.0807%" height="15" fill="rgb(243,90,22)" fg:x="1083" fg:w="1"/><text x="87.6592%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="87.4899%" y="245" width="0.0807%" height="15" fill="rgb(223,153,32)" fg:x="1084" fg:w="1"/><text x="87.7399%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (16 samples, 1.29%)</title><rect x="86.3600%" y="293" width="1.2914%" height="15" fill="rgb(243,124,20)" fg:x="1070" fg:w="16"/><text x="86.6100%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (13 samples, 1.05%)</title><rect x="86.6021%" y="277" width="1.0492%" height="15" fill="rgb(246,168,39)" fg:x="1073" fg:w="13"/><text x="86.8521%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="87.4899%" y="261" width="0.1614%" height="15" fill="rgb(222,165,54)" fg:x="1084" fg:w="2"/><text x="87.7399%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="87.5706%" y="245" width="0.0807%" height="15" fill="rgb(251,142,27)" fg:x="1085" fg:w="1"/><text x="87.8206%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (19 samples, 1.53%)</title><rect x="86.1985%" y="357" width="1.5335%" height="15" fill="rgb(207,168,50)" fg:x="1068" fg:w="19"/><text x="86.4485%" y="367.50"></text></g><g><title>regex::regex::string::Regex::new (17 samples, 1.37%)</title><rect x="86.3600%" y="341" width="1.3721%" height="15" fill="rgb(250,139,25)" fg:x="1070" fg:w="17"/><text x="86.6100%" y="351.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (17 samples, 1.37%)</title><rect x="86.3600%" y="325" width="1.3721%" height="15" fill="rgb(214,194,48)" fg:x="1070" fg:w="17"/><text x="86.6100%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (17 samples, 1.37%)</title><rect x="86.3600%" y="309" width="1.3721%" height="15" fill="rgb(227,138,47)" fg:x="1070" fg:w="17"/><text x="86.6100%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="87.6513%" y="293" width="0.0807%" height="15" fill="rgb(250,162,5)" fg:x="1086" fg:w="1"/><text x="87.9013%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="87.6513%" y="277" width="0.0807%" height="15" fill="rgb(229,74,25)" fg:x="1086" fg:w="1"/><text x="87.9013%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="87.6513%" y="261" width="0.0807%" height="15" fill="rgb(221,124,34)" fg:x="1086" fg:w="1"/><text x="87.9013%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="87.6513%" y="245" width="0.0807%" height="15" fill="rgb(225,94,25)" fg:x="1086" fg:w="1"/><text x="87.9013%" y="255.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="87.6513%" y="229" width="0.0807%" height="15" fill="rgb(210,100,12)" fg:x="1086" fg:w="1"/><text x="87.9013%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.6513%" y="213" width="0.0807%" height="15" fill="rgb(206,62,48)" fg:x="1086" fg:w="1"/><text x="87.9013%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="87.7320%" y="309" width="0.0807%" height="15" fill="rgb(222,181,9)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="87.7320%" y="293" width="0.0807%" height="15" fill="rgb(248,42,38)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.7320%" y="277" width="0.0807%" height="15" fill="rgb(213,40,6)" fg:x="1087" fg:w="1"/><text x="87.9820%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="87.7320%" y="341" width="0.1614%" height="15" fill="rgb(211,108,15)" fg:x="1087" fg:w="2"/><text x="87.9820%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="87.7320%" y="325" width="0.1614%" height="15" fill="rgb(249,62,9)" fg:x="1087" fg:w="2"/><text x="87.9820%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="87.8128%" y="309" width="0.0807%" height="15" fill="rgb(233,26,54)" fg:x="1088" fg:w="1"/><text x="88.0628%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="87.8128%" y="293" width="0.0807%" height="15" fill="rgb(210,175,26)" fg:x="1088" fg:w="1"/><text x="88.0628%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.8128%" y="277" width="0.0807%" height="15" fill="rgb(210,43,33)" fg:x="1088" fg:w="1"/><text x="88.0628%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="87.8935%" y="261" width="0.2421%" height="15" fill="rgb(224,46,17)" fg:x="1089" fg:w="3"/><text x="88.1435%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="88.0549%" y="245" width="0.0807%" height="15" fill="rgb(254,24,38)" fg:x="1091" fg:w="1"/><text x="88.3049%" y="255.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.32%)</title><rect x="87.8935%" y="341" width="0.3228%" height="15" fill="rgb(248,32,0)" fg:x="1089" fg:w="4"/><text x="88.1435%" y="351.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="87.8935%" y="325" width="0.3228%" height="15" fill="rgb(224,37,41)" fg:x="1089" fg:w="4"/><text x="88.1435%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="87.8935%" y="309" width="0.3228%" height="15" fill="rgb(252,70,22)" fg:x="1089" fg:w="4"/><text x="88.1435%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="87.8935%" y="293" width="0.3228%" height="15" fill="rgb(241,123,50)" fg:x="1089" fg:w="4"/><text x="88.1435%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="87.8935%" y="277" width="0.3228%" height="15" fill="rgb(246,138,33)" fg:x="1089" fg:w="4"/><text x="88.1435%" y="287.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="88.1356%" y="261" width="0.0807%" height="15" fill="rgb(218,39,32)" fg:x="1092" fg:w="1"/><text x="88.3856%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.1356%" y="245" width="0.0807%" height="15" fill="rgb(241,229,10)" fg:x="1092" fg:w="1"/><text x="88.3856%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.1356%" y="229" width="0.0807%" height="15" fill="rgb(212,160,10)" fg:x="1092" fg:w="1"/><text x="88.3856%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.1356%" y="213" width="0.0807%" height="15" fill="rgb(227,48,51)" fg:x="1092" fg:w="1"/><text x="88.3856%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.2163%" y="261" width="0.0807%" height="15" fill="rgb(238,159,21)" fg:x="1093" fg:w="1"/><text x="88.4663%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="88.2163%" y="277" width="0.4036%" height="15" fill="rgb(216,1,10)" fg:x="1093" fg:w="5"/><text x="88.4663%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="88.2970%" y="261" width="0.3228%" height="15" fill="rgb(209,228,25)" fg:x="1094" fg:w="4"/><text x="88.5470%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.6199%" y="245" width="0.0807%" height="15" fill="rgb(234,160,10)" fg:x="1098" fg:w="1"/><text x="88.8699%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.6199%" y="229" width="0.0807%" height="15" fill="rgb(212,66,25)" fg:x="1098" fg:w="1"/><text x="88.8699%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.6199%" y="213" width="0.0807%" height="15" fill="rgb(254,121,18)" fg:x="1098" fg:w="1"/><text x="88.8699%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (3 samples, 0.24%)</title><rect x="88.6199%" y="277" width="0.2421%" height="15" fill="rgb(219,127,1)" fg:x="1098" fg:w="3"/><text x="88.8699%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="88.6199%" y="261" width="0.2421%" height="15" fill="rgb(219,224,42)" fg:x="1098" fg:w="3"/><text x="88.8699%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="88.7006%" y="245" width="0.1614%" height="15" fill="rgb(253,130,22)" fg:x="1099" fg:w="2"/><text x="88.9506%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="88.8620%" y="197" width="0.0807%" height="15" fill="rgb(253,39,28)" fg:x="1101" fg:w="1"/><text x="89.1120%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="88.9427%" y="165" width="0.1614%" height="15" fill="rgb(231,126,37)" fg:x="1102" fg:w="2"/><text x="89.1927%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="89.1041%" y="165" width="0.0807%" height="15" fill="rgb(251,145,14)" fg:x="1104" fg:w="1"/><text x="89.3541%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.1041%" y="149" width="0.0807%" height="15" fill="rgb(229,164,30)" fg:x="1104" fg:w="1"/><text x="89.3541%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.1041%" y="133" width="0.0807%" height="15" fill="rgb(233,227,54)" fg:x="1104" fg:w="1"/><text x="89.3541%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.1041%" y="117" width="0.0807%" height="15" fill="rgb(240,94,22)" fg:x="1104" fg:w="1"/><text x="89.3541%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="89.1848%" y="165" width="0.1614%" height="15" fill="rgb(217,56,16)" fg:x="1105" fg:w="2"/><text x="89.4348%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="89.2655%" y="149" width="0.0807%" height="15" fill="rgb(229,133,38)" fg:x="1106" fg:w="1"/><text x="89.5155%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.2655%" y="133" width="0.0807%" height="15" fill="rgb(225,139,35)" fg:x="1106" fg:w="1"/><text x="89.5155%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.2655%" y="117" width="0.0807%" height="15" fill="rgb(223,100,16)" fg:x="1106" fg:w="1"/><text x="89.5155%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.2655%" y="101" width="0.0807%" height="15" fill="rgb(207,43,50)" fg:x="1106" fg:w="1"/><text x="89.5155%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="89.3462%" y="149" width="0.0807%" height="15" fill="rgb(237,221,9)" fg:x="1107" fg:w="1"/><text x="89.5962%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="89.3462%" y="165" width="0.1614%" height="15" fill="rgb(236,134,24)" fg:x="1107" fg:w="2"/><text x="89.5962%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="89.4270%" y="149" width="0.0807%" height="15" fill="rgb(222,173,4)" fg:x="1108" fg:w="1"/><text x="89.6770%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="89.4270%" y="133" width="0.0807%" height="15" fill="rgb(234,144,52)" fg:x="1108" fg:w="1"/><text x="89.6770%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="89.4270%" y="117" width="0.0807%" height="15" fill="rgb(223,41,7)" fg:x="1108" fg:w="1"/><text x="89.6770%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (13 samples, 1.05%)</title><rect x="89.5077%" y="165" width="1.0492%" height="15" fill="rgb(226,143,9)" fg:x="1109" fg:w="13"/><text x="89.7577%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (13 samples, 1.05%)</title><rect x="89.5077%" y="149" width="1.0492%" height="15" fill="rgb(234,43,37)" fg:x="1109" fg:w="13"/><text x="89.7577%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (13 samples, 1.05%)</title><rect x="89.5077%" y="133" width="1.0492%" height="15" fill="rgb(224,188,11)" fg:x="1109" fg:w="13"/><text x="89.7577%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 1.86%)</title><rect x="88.8620%" y="261" width="1.8563%" height="15" fill="rgb(233,113,28)" fg:x="1101" fg:w="23"/><text x="89.1120%" y="271.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (23 samples, 1.86%)</title><rect x="88.8620%" y="245" width="1.8563%" height="15" fill="rgb(215,16,1)" fg:x="1101" fg:w="23"/><text x="89.1120%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (23 samples, 1.86%)</title><rect x="88.8620%" y="229" width="1.8563%" height="15" fill="rgb(238,74,38)" fg:x="1101" fg:w="23"/><text x="89.1120%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (23 samples, 1.86%)</title><rect x="88.8620%" y="213" width="1.8563%" height="15" fill="rgb(221,66,35)" fg:x="1101" fg:w="23"/><text x="89.1120%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (22 samples, 1.78%)</title><rect x="88.9427%" y="197" width="1.7756%" height="15" fill="rgb(251,225,2)" fg:x="1102" fg:w="22"/><text x="89.1927%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (22 samples, 1.78%)</title><rect x="88.9427%" y="181" width="1.7756%" height="15" fill="rgb(240,169,18)" fg:x="1102" fg:w="22"/><text x="89.1927%" y="191.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="90.5569%" y="165" width="0.1614%" height="15" fill="rgb(243,130,50)" fg:x="1122" fg:w="2"/><text x="90.8069%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.7183%" y="245" width="0.0807%" height="15" fill="rgb(228,75,13)" fg:x="1124" fg:w="1"/><text x="90.9683%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (33 samples, 2.66%)</title><rect x="88.2163%" y="293" width="2.6634%" height="15" fill="rgb(252,95,35)" fg:x="1093" fg:w="33"/><text x="88.4663%" y="303.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (25 samples, 2.02%)</title><rect x="88.8620%" y="277" width="2.0178%" height="15" fill="rgb(222,180,54)" fg:x="1101" fg:w="25"/><text x="89.1120%" y="287.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="90.7183%" y="261" width="0.1614%" height="15" fill="rgb(250,110,34)" fg:x="1124" fg:w="2"/><text x="90.9683%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="90.7990%" y="245" width="0.0807%" height="15" fill="rgb(208,100,21)" fg:x="1125" fg:w="1"/><text x="91.0490%" y="255.50"></text></g><g><title>indefinite::rules::number::Number::check (40 samples, 3.23%)</title><rect x="87.7320%" y="357" width="3.2284%" height="15" fill="rgb(209,123,47)" fg:x="1087" fg:w="40"/><text x="87.9820%" y="367.50">ind..</text></g><g><title>regex::regex::string::Regex::new (34 samples, 2.74%)</title><rect x="88.2163%" y="341" width="2.7441%" height="15" fill="rgb(237,147,9)" fg:x="1093" fg:w="34"/><text x="88.4663%" y="351.50">re..</text></g><g><title>regex::builders::string::RegexBuilder::build (34 samples, 2.74%)</title><rect x="88.2163%" y="325" width="2.7441%" height="15" fill="rgb(228,206,23)" fg:x="1093" fg:w="34"/><text x="88.4663%" y="335.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (34 samples, 2.74%)</title><rect x="88.2163%" y="309" width="2.7441%" height="15" fill="rgb(217,174,46)" fg:x="1093" fg:w="34"/><text x="88.4663%" y="319.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="90.8797%" y="293" width="0.0807%" height="15" fill="rgb(231,126,21)" fg:x="1126" fg:w="1"/><text x="91.1297%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="90.8797%" y="277" width="0.0807%" height="15" fill="rgb(245,26,1)" fg:x="1126" fg:w="1"/><text x="91.1297%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="90.8797%" y="261" width="0.0807%" height="15" fill="rgb(224,138,39)" fg:x="1126" fg:w="1"/><text x="91.1297%" y="271.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="90.8797%" y="245" width="0.0807%" height="15" fill="rgb(208,97,3)" fg:x="1126" fg:w="1"/><text x="91.1297%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="90.9605%" y="245" width="0.0807%" height="15" fill="rgb(222,77,29)" fg:x="1127" fg:w="1"/><text x="91.2105%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="90.9605%" y="261" width="0.1614%" height="15" fill="rgb(243,188,36)" fg:x="1127" fg:w="2"/><text x="91.2105%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="91.0412%" y="245" width="0.0807%" height="15" fill="rgb(218,214,3)" fg:x="1128" fg:w="1"/><text x="91.2912%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="91.0412%" y="229" width="0.0807%" height="15" fill="rgb(211,183,45)" fg:x="1128" fg:w="1"/><text x="91.2912%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="91.0412%" y="213" width="0.0807%" height="15" fill="rgb(230,218,25)" fg:x="1128" fg:w="1"/><text x="91.2912%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.0412%" y="197" width="0.0807%" height="15" fill="rgb(233,86,6)" fg:x="1128" fg:w="1"/><text x="91.2912%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="91.1219%" y="261" width="0.1614%" height="15" fill="rgb(220,59,24)" fg:x="1129" fg:w="2"/><text x="91.3719%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="91.1219%" y="245" width="0.1614%" height="15" fill="rgb(227,60,1)" fg:x="1129" fg:w="2"/><text x="91.3719%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="91.2026%" y="229" width="0.0807%" height="15" fill="rgb(216,212,54)" fg:x="1130" fg:w="1"/><text x="91.4526%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (5 samples, 0.40%)</title><rect x="90.9605%" y="277" width="0.4036%" height="15" fill="rgb(227,81,54)" fg:x="1127" fg:w="5"/><text x="91.2105%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="91.2833%" y="261" width="0.0807%" height="15" fill="rgb(206,204,43)" fg:x="1131" fg:w="1"/><text x="91.5333%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (6 samples, 0.48%)</title><rect x="90.9605%" y="325" width="0.4843%" height="15" fill="rgb(219,29,26)" fg:x="1127" fg:w="6"/><text x="91.2105%" y="335.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (6 samples, 0.48%)</title><rect x="90.9605%" y="309" width="0.4843%" height="15" fill="rgb(252,40,36)" fg:x="1127" fg:w="6"/><text x="91.2105%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (6 samples, 0.48%)</title><rect x="90.9605%" y="293" width="0.4843%" height="15" fill="rgb(224,205,39)" fg:x="1127" fg:w="6"/><text x="91.2105%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="91.3640%" y="277" width="0.0807%" height="15" fill="rgb(222,13,21)" fg:x="1132" fg:w="1"/><text x="91.6140%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="91.3640%" y="261" width="0.0807%" height="15" fill="rgb(243,139,6)" fg:x="1132" fg:w="1"/><text x="91.6140%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="91.3640%" y="245" width="0.0807%" height="15" fill="rgb(237,101,11)" fg:x="1132" fg:w="1"/><text x="91.6140%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.3640%" y="229" width="0.0807%" height="15" fill="rgb(254,49,28)" fg:x="1132" fg:w="1"/><text x="91.6140%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.3640%" y="213" width="0.0807%" height="15" fill="rgb(223,41,21)" fg:x="1132" fg:w="1"/><text x="91.6140%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (7 samples, 0.56%)</title><rect x="90.9605%" y="341" width="0.5650%" height="15" fill="rgb(225,103,29)" fg:x="1127" fg:w="7"/><text x="91.2105%" y="351.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="91.4447%" y="325" width="0.0807%" height="15" fill="rgb(244,82,43)" fg:x="1133" fg:w="1"/><text x="91.6947%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="91.4447%" y="309" width="0.0807%" height="15" fill="rgb(217,39,3)" fg:x="1133" fg:w="1"/><text x="91.6947%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="91.4447%" y="293" width="0.0807%" height="15" fill="rgb(239,128,25)" fg:x="1133" fg:w="1"/><text x="91.6947%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="91.4447%" y="277" width="0.0807%" height="15" fill="rgb(210,192,37)" fg:x="1133" fg:w="1"/><text x="91.6947%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="91.4447%" y="261" width="0.0807%" height="15" fill="rgb(219,98,18)" fg:x="1133" fg:w="1"/><text x="91.6947%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (72 samples, 5.81%)</title><rect x="85.7950%" y="437" width="5.8111%" height="15" fill="rgb(224,228,38)" fg:x="1063" fg:w="72"/><text x="86.0450%" y="447.50">&lt;&amp;kerne..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (67 samples, 5.41%)</title><rect x="86.1985%" y="421" width="5.4076%" height="15" fill="rgb(241,129,43)" fg:x="1068" fg:w="67"/><text x="86.4485%" y="431.50">plugins..</text></g><g><title>indefinite::indefinite (67 samples, 5.41%)</title><rect x="86.1985%" y="405" width="5.4076%" height="15" fill="rgb(223,8,51)" fg:x="1068" fg:w="67"/><text x="86.4485%" y="415.50">indefin..</text></g><g><title>indefinite::methods::indefinite (67 samples, 5.41%)</title><rect x="86.1985%" y="389" width="5.4076%" height="15" fill="rgb(233,76,24)" fg:x="1068" fg:w="67"/><text x="86.4485%" y="399.50">indefin..</text></g><g><title>indefinite::methods::apply_rules (67 samples, 5.41%)</title><rect x="86.1985%" y="373" width="5.4076%" height="15" fill="rgb(219,115,10)" fg:x="1068" fg:w="67"/><text x="86.4485%" y="383.50">indefin..</text></g><g><title>indefinite::rules::other::Other::run (8 samples, 0.65%)</title><rect x="90.9605%" y="357" width="0.6457%" height="15" fill="rgb(222,137,12)" fg:x="1127" fg:w="8"/><text x="91.2105%" y="367.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="91.5254%" y="341" width="0.0807%" height="15" fill="rgb(216,192,16)" fg:x="1134" fg:w="1"/><text x="91.7754%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (1 samples, 0.08%)</title><rect x="91.6061%" y="437" width="0.0807%" height="15" fill="rgb(247,6,27)" fg:x="1135" fg:w="1"/><text x="91.8561%" y="447.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (1 samples, 0.08%)</title><rect x="91.6061%" y="421" width="0.0807%" height="15" fill="rgb(254,39,44)" fg:x="1135" fg:w="1"/><text x="91.8561%" y="431.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (1 samples, 0.08%)</title><rect x="91.6061%" y="405" width="0.0807%" height="15" fill="rgb(251,116,35)" fg:x="1135" fg:w="1"/><text x="91.8561%" y="415.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="91.6061%" y="389" width="0.0807%" height="15" fill="rgb(208,61,44)" fg:x="1135" fg:w="1"/><text x="91.8561%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="91.6061%" y="373" width="0.0807%" height="15" fill="rgb(250,34,5)" fg:x="1135" fg:w="1"/><text x="91.8561%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="91.6061%" y="357" width="0.0807%" height="15" fill="rgb(241,40,15)" fg:x="1135" fg:w="1"/><text x="91.8561%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="91.6061%" y="341" width="0.0807%" height="15" fill="rgb(229,182,2)" fg:x="1135" fg:w="1"/><text x="91.8561%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.6868%" y="309" width="0.0807%" height="15" fill="rgb(244,148,52)" fg:x="1136" fg:w="1"/><text x="91.9368%" y="319.50"></text></g><g><title>plugins_rune::runner::SharedRunners::after (1 samples, 0.08%)</title><rect x="91.7676%" y="309" width="0.0807%" height="15" fill="rgb(225,211,4)" fg:x="1137" fg:w="1"/><text x="92.0176%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="91.8483%" y="293" width="0.0807%" height="15" fill="rgb(208,222,47)" fg:x="1138" fg:w="1"/><text x="92.0983%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="91.8483%" y="277" width="0.0807%" height="15" fill="rgb(233,162,0)" fg:x="1138" fg:w="1"/><text x="92.0983%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="91.8483%" y="261" width="0.0807%" height="15" fill="rgb(241,54,13)" fg:x="1138" fg:w="1"/><text x="92.0983%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="91.8483%" y="245" width="0.0807%" height="15" fill="rgb(213,89,18)" fg:x="1138" fg:w="1"/><text x="92.0983%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.8483%" y="229" width="0.0807%" height="15" fill="rgb(215,170,37)" fg:x="1138" fg:w="1"/><text x="92.0983%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (4 samples, 0.32%)</title><rect x="91.6868%" y="405" width="0.3228%" height="15" fill="rgb(216,133,15)" fg:x="1136" fg:w="4"/><text x="91.9368%" y="415.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (4 samples, 0.32%)</title><rect x="91.6868%" y="389" width="0.3228%" height="15" fill="rgb(230,42,19)" fg:x="1136" fg:w="4"/><text x="91.9368%" y="399.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (4 samples, 0.32%)</title><rect x="91.6868%" y="373" width="0.3228%" height="15" fill="rgb(221,103,41)" fg:x="1136" fg:w="4"/><text x="91.9368%" y="383.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (4 samples, 0.32%)</title><rect x="91.6868%" y="357" width="0.3228%" height="15" fill="rgb(220,142,31)" fg:x="1136" fg:w="4"/><text x="91.9368%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (4 samples, 0.32%)</title><rect x="91.6868%" y="341" width="0.3228%" height="15" fill="rgb(239,218,4)" fg:x="1136" fg:w="4"/><text x="91.9368%" y="351.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (4 samples, 0.32%)</title><rect x="91.6868%" y="325" width="0.3228%" height="15" fill="rgb(232,16,4)" fg:x="1136" fg:w="4"/><text x="91.9368%" y="335.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (2 samples, 0.16%)</title><rect x="91.8483%" y="309" width="0.1614%" height="15" fill="rgb(226,213,25)" fg:x="1138" fg:w="2"/><text x="92.0983%" y="319.50"></text></g><g><title>rune::runtime::vec::&lt;impl rune::runtime::to_value::ToValue for alloc::vec::Vec&lt;T&gt;&gt;::to_value (1 samples, 0.08%)</title><rect x="91.9290%" y="293" width="0.0807%" height="15" fill="rgb(235,135,19)" fg:x="1139" fg:w="1"/><text x="92.1790%" y="303.50"></text></g><g><title>rune::runtime::shared::Shared&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="91.9290%" y="277" width="0.0807%" height="15" fill="rgb(240,107,29)" fg:x="1139" fg:w="1"/><text x="92.1790%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (5 samples, 0.40%)</title><rect x="91.6868%" y="421" width="0.4036%" height="15" fill="rgb(206,164,44)" fg:x="1136" fg:w="5"/><text x="91.9368%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.0097%" y="405" width="0.0807%" height="15" fill="rgb(210,23,48)" fg:x="1140" fg:w="1"/><text x="92.2597%" y="415.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="92.0904%" y="421" width="0.1614%" height="15" fill="rgb(212,138,25)" fg:x="1141" fg:w="2"/><text x="92.3404%" y="431.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (2 samples, 0.16%)</title><rect x="92.0904%" y="405" width="0.1614%" height="15" fill="rgb(224,152,3)" fg:x="1141" fg:w="2"/><text x="92.3404%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="92.0904%" y="389" width="0.1614%" height="15" fill="rgb(214,38,23)" fg:x="1141" fg:w="2"/><text x="92.3404%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="92.0904%" y="373" width="0.1614%" height="15" fill="rgb(215,161,10)" fg:x="1141" fg:w="2"/><text x="92.3404%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="92.0904%" y="357" width="0.1614%" height="15" fill="rgb(240,185,7)" fg:x="1141" fg:w="2"/><text x="92.3404%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="92.1711%" y="341" width="0.0807%" height="15" fill="rgb(244,104,25)" fg:x="1142" fg:w="1"/><text x="92.4211%" y="351.50"></text></g><g><title>plugins_core::library::actions::reply_ok (8 samples, 0.65%)</title><rect x="91.6868%" y="437" width="0.6457%" height="15" fill="rgb(242,140,44)" fg:x="1136" fg:w="8"/><text x="91.9368%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Carrying&gt; (1 samples, 0.08%)</title><rect x="92.2518%" y="421" width="0.0807%" height="15" fill="rgb(245,30,19)" fg:x="1143" fg:w="1"/><text x="92.5018%" y="431.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="92.3325%" y="421" width="0.0807%" height="15" fill="rgb(219,208,35)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="92.3325%" y="405" width="0.0807%" height="15" fill="rgb(235,200,7)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="92.3325%" y="389" width="0.0807%" height="15" fill="rgb(220,193,10)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="92.3325%" y="373" width="0.0807%" height="15" fill="rgb(212,216,39)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="92.3325%" y="357" width="0.0807%" height="15" fill="rgb(212,134,19)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="92.3325%" y="341" width="0.0807%" height="15" fill="rgb(230,57,24)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="92.3325%" y="325" width="0.0807%" height="15" fill="rgb(238,209,37)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="92.3325%" y="309" width="0.0807%" height="15" fill="rgb(247,11,45)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="92.3325%" y="293" width="0.0807%" height="15" fill="rgb(222,126,6)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="92.3325%" y="277" width="0.0807%" height="15" fill="rgb(245,77,24)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="92.3325%" y="261" width="0.0807%" height="15" fill="rgb(227,14,24)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="92.3325%" y="245" width="0.0807%" height="15" fill="rgb(211,112,42)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="92.3325%" y="229" width="0.0807%" height="15" fill="rgb(230,103,42)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="92.3325%" y="213" width="0.0807%" height="15" fill="rgb(228,125,42)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="92.3325%" y="197" width="0.0807%" height="15" fill="rgb(243,33,6)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="92.3325%" y="181" width="0.0807%" height="15" fill="rgb(231,2,40)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.3325%" y="165" width="0.0807%" height="15" fill="rgb(224,200,53)" fg:x="1144" fg:w="1"/><text x="92.5825%" y="175.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (85 samples, 6.86%)</title><rect x="85.7950%" y="453" width="6.8604%" height="15" fill="rgb(215,116,36)" fg:x="1063" fg:w="85"/><text x="86.0450%" y="463.50">&lt;plugins_..</text></g><g><title>plugins_core::location::model::change_location (4 samples, 0.32%)</title><rect x="92.3325%" y="437" width="0.3228%" height="15" fill="rgb(240,23,51)" fg:x="1144" fg:w="4"/><text x="92.5825%" y="447.50"></text></g><g><title>plugins_core::location::model::Location::set (3 samples, 0.24%)</title><rect x="92.4132%" y="421" width="0.2421%" height="15" fill="rgb(221,72,5)" fg:x="1145" fg:w="3"/><text x="92.6632%" y="431.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="92.4939%" y="405" width="0.1614%" height="15" fill="rgb(245,142,9)" fg:x="1146" fg:w="2"/><text x="92.7439%" y="415.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="92.4939%" y="389" width="0.1614%" height="15" fill="rgb(207,34,16)" fg:x="1146" fg:w="2"/><text x="92.7439%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="92.4939%" y="373" width="0.1614%" height="15" fill="rgb(252,101,12)" fg:x="1146" fg:w="2"/><text x="92.7439%" y="383.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="92.4939%" y="357" width="0.1614%" height="15" fill="rgb(239,89,37)" fg:x="1146" fg:w="2"/><text x="92.7439%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="92.4939%" y="341" width="0.1614%" height="15" fill="rgb(252,227,37)" fg:x="1146" fg:w="2"/><text x="92.7439%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.5747%" y="325" width="0.0807%" height="15" fill="rgb(212,164,17)" fg:x="1147" fg:w="1"/><text x="92.8247%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="92.6554%" y="389" width="0.0807%" height="15" fill="rgb(240,86,13)" fg:x="1148" fg:w="1"/><text x="92.9054%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.32%)</title><rect x="92.6554%" y="421" width="0.3228%" height="15" fill="rgb(233,183,32)" fg:x="1148" fg:w="4"/><text x="92.9054%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="92.6554%" y="405" width="0.3228%" height="15" fill="rgb(205,201,38)" fg:x="1148" fg:w="4"/><text x="92.9054%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="92.7361%" y="389" width="0.2421%" height="15" fill="rgb(210,122,38)" fg:x="1149" fg:w="3"/><text x="92.9861%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="92.7361%" y="373" width="0.2421%" height="15" fill="rgb(241,174,26)" fg:x="1149" fg:w="3"/><text x="92.9861%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="92.8168%" y="357" width="0.1614%" height="15" fill="rgb(219,89,7)" fg:x="1150" fg:w="2"/><text x="93.0668%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="92.8168%" y="341" width="0.1614%" height="15" fill="rgb(246,9,24)" fg:x="1150" fg:w="2"/><text x="93.0668%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="92.8168%" y="325" width="0.1614%" height="15" fill="rgb(205,132,21)" fg:x="1150" fg:w="2"/><text x="93.0668%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="92.8168%" y="309" width="0.1614%" height="15" fill="rgb(210,11,17)" fg:x="1150" fg:w="2"/><text x="93.0668%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="92.8168%" y="293" width="0.1614%" height="15" fill="rgb(226,138,14)" fg:x="1150" fg:w="2"/><text x="93.0668%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="93.0589%" y="341" width="0.0807%" height="15" fill="rgb(224,108,44)" fg:x="1153" fg:w="1"/><text x="93.3089%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="93.0589%" y="325" width="0.0807%" height="15" fill="rgb(247,114,36)" fg:x="1153" fg:w="1"/><text x="93.3089%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="93.0589%" y="309" width="0.0807%" height="15" fill="rgb(231,183,14)" fg:x="1153" fg:w="1"/><text x="93.3089%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="93.0589%" y="293" width="0.0807%" height="15" fill="rgb(218,168,4)" fg:x="1153" fg:w="1"/><text x="93.3089%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.1396%" y="309" width="0.0807%" height="15" fill="rgb(210,8,3)" fg:x="1154" fg:w="1"/><text x="93.3896%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="93.1396%" y="293" width="0.0807%" height="15" fill="rgb(216,165,0)" fg:x="1154" fg:w="1"/><text x="93.3896%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.1396%" y="277" width="0.0807%" height="15" fill="rgb(245,120,5)" fg:x="1154" fg:w="1"/><text x="93.3896%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.2203%" y="293" width="0.0807%" height="15" fill="rgb(249,121,32)" fg:x="1155" fg:w="1"/><text x="93.4703%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.2203%" y="277" width="0.0807%" height="15" fill="rgb(211,55,33)" fg:x="1155" fg:w="1"/><text x="93.4703%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="93.1396%" y="341" width="0.2421%" height="15" fill="rgb(254,46,35)" fg:x="1154" fg:w="3"/><text x="93.3896%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="93.1396%" y="325" width="0.2421%" height="15" fill="rgb(213,213,19)" fg:x="1154" fg:w="3"/><text x="93.3896%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="93.2203%" y="309" width="0.1614%" height="15" fill="rgb(207,152,44)" fg:x="1155" fg:w="2"/><text x="93.4703%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="93.3010%" y="293" width="0.0807%" height="15" fill="rgb(227,195,36)" fg:x="1156" fg:w="1"/><text x="93.5510%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.3818%" y="277" width="0.0807%" height="15" fill="rgb(210,137,36)" fg:x="1157" fg:w="1"/><text x="93.6318%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="93.4625%" y="277" width="0.1614%" height="15" fill="rgb(253,47,47)" fg:x="1158" fg:w="2"/><text x="93.7125%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="93.4625%" y="261" width="0.1614%" height="15" fill="rgb(230,147,18)" fg:x="1158" fg:w="2"/><text x="93.7125%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="93.6239%" y="277" width="0.0807%" height="15" fill="rgb(247,33,49)" fg:x="1160" fg:w="1"/><text x="93.8739%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="93.7046%" y="213" width="0.0807%" height="15" fill="rgb(239,26,29)" fg:x="1161" fg:w="1"/><text x="93.9546%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="93.7046%" y="261" width="0.4843%" height="15" fill="rgb(245,145,52)" fg:x="1161" fg:w="6"/><text x="93.9546%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (6 samples, 0.48%)</title><rect x="93.7046%" y="245" width="0.4843%" height="15" fill="rgb(224,139,32)" fg:x="1161" fg:w="6"/><text x="93.9546%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (6 samples, 0.48%)</title><rect x="93.7046%" y="229" width="0.4843%" height="15" fill="rgb(238,202,19)" fg:x="1161" fg:w="6"/><text x="93.9546%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (5 samples, 0.40%)</title><rect x="93.7853%" y="213" width="0.4036%" height="15" fill="rgb(249,211,53)" fg:x="1162" fg:w="5"/><text x="94.0353%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (5 samples, 0.40%)</title><rect x="93.7853%" y="197" width="0.4036%" height="15" fill="rgb(237,229,33)" fg:x="1162" fg:w="5"/><text x="94.0353%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (5 samples, 0.40%)</title><rect x="93.7853%" y="181" width="0.4036%" height="15" fill="rgb(208,97,40)" fg:x="1162" fg:w="5"/><text x="94.0353%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="94.1889%" y="261" width="0.0807%" height="15" fill="rgb(254,36,16)" fg:x="1167" fg:w="1"/><text x="94.4389%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="94.1889%" y="245" width="0.0807%" height="15" fill="rgb(221,7,12)" fg:x="1167" fg:w="1"/><text x="94.4389%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.1889%" y="229" width="0.0807%" height="15" fill="rgb(205,11,12)" fg:x="1167" fg:w="1"/><text x="94.4389%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.1889%" y="213" width="0.0807%" height="15" fill="rgb(227,72,28)" fg:x="1167" fg:w="1"/><text x="94.4389%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.1889%" y="197" width="0.0807%" height="15" fill="rgb(228,7,34)" fg:x="1167" fg:w="1"/><text x="94.4389%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (12 samples, 0.97%)</title><rect x="93.3818%" y="293" width="0.9685%" height="15" fill="rgb(230,52,42)" fg:x="1157" fg:w="12"/><text x="93.6318%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (8 samples, 0.65%)</title><rect x="93.7046%" y="277" width="0.6457%" height="15" fill="rgb(219,177,53)" fg:x="1161" fg:w="8"/><text x="93.9546%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="94.2696%" y="261" width="0.0807%" height="15" fill="rgb(243,196,34)" fg:x="1168" fg:w="1"/><text x="94.5196%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (13 samples, 1.05%)</title><rect x="93.3818%" y="341" width="1.0492%" height="15" fill="rgb(213,66,49)" fg:x="1157" fg:w="13"/><text x="93.6318%" y="351.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (13 samples, 1.05%)</title><rect x="93.3818%" y="325" width="1.0492%" height="15" fill="rgb(233,11,50)" fg:x="1157" fg:w="13"/><text x="93.6318%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (13 samples, 1.05%)</title><rect x="93.3818%" y="309" width="1.0492%" height="15" fill="rgb(235,190,6)" fg:x="1157" fg:w="13"/><text x="93.6318%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="94.3503%" y="293" width="0.0807%" height="15" fill="rgb(212,64,44)" fg:x="1169" fg:w="1"/><text x="94.6003%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="94.3503%" y="277" width="0.0807%" height="15" fill="rgb(206,95,44)" fg:x="1169" fg:w="1"/><text x="94.6003%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (19 samples, 1.53%)</title><rect x="93.0589%" y="357" width="1.5335%" height="15" fill="rgb(227,136,25)" fg:x="1153" fg:w="19"/><text x="93.3089%" y="367.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="94.4310%" y="341" width="0.1614%" height="15" fill="rgb(206,178,17)" fg:x="1170" fg:w="2"/><text x="94.6810%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="94.4310%" y="325" width="0.1614%" height="15" fill="rgb(208,168,35)" fg:x="1170" fg:w="2"/><text x="94.6810%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="94.4310%" y="309" width="0.1614%" height="15" fill="rgb(213,210,40)" fg:x="1170" fg:w="2"/><text x="94.6810%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="94.4310%" y="293" width="0.1614%" height="15" fill="rgb(236,60,6)" fg:x="1170" fg:w="2"/><text x="94.6810%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="94.4310%" y="277" width="0.1614%" height="15" fill="rgb(220,186,36)" fg:x="1170" fg:w="2"/><text x="94.6810%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="94.5117%" y="261" width="0.0807%" height="15" fill="rgb(225,120,49)" fg:x="1171" fg:w="1"/><text x="94.7617%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="94.5924%" y="341" width="0.0807%" height="15" fill="rgb(250,115,20)" fg:x="1172" fg:w="1"/><text x="94.8424%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="94.5924%" y="325" width="0.0807%" height="15" fill="rgb(207,214,23)" fg:x="1172" fg:w="1"/><text x="94.8424%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.5924%" y="309" width="0.0807%" height="15" fill="rgb(240,9,18)" fg:x="1172" fg:w="1"/><text x="94.8424%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="94.5924%" y="293" width="0.0807%" height="15" fill="rgb(232,170,48)" fg:x="1172" fg:w="1"/><text x="94.8424%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.5924%" y="277" width="0.0807%" height="15" fill="rgb(236,149,23)" fg:x="1172" fg:w="1"/><text x="94.8424%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.5924%" y="261" width="0.0807%" height="15" fill="rgb(210,125,42)" fg:x="1172" fg:w="1"/><text x="94.8424%" y="271.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (1 samples, 0.08%)</title><rect x="94.6731%" y="341" width="0.0807%" height="15" fill="rgb(207,201,52)" fg:x="1173" fg:w="1"/><text x="94.9231%" y="351.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="94.6731%" y="325" width="0.0807%" height="15" fill="rgb(250,187,37)" fg:x="1173" fg:w="1"/><text x="94.9231%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="94.6731%" y="309" width="0.0807%" height="15" fill="rgb(214,186,2)" fg:x="1173" fg:w="1"/><text x="94.9231%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="94.6731%" y="293" width="0.0807%" height="15" fill="rgb(207,189,15)" fg:x="1173" fg:w="1"/><text x="94.9231%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="94.6731%" y="277" width="0.0807%" height="15" fill="rgb(221,99,21)" fg:x="1173" fg:w="1"/><text x="94.9231%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="94.6731%" y="261" width="0.0807%" height="15" fill="rgb(212,67,18)" fg:x="1173" fg:w="1"/><text x="94.9231%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.6731%" y="245" width="0.0807%" height="15" fill="rgb(226,24,24)" fg:x="1173" fg:w="1"/><text x="94.9231%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.6731%" y="229" width="0.0807%" height="15" fill="rgb(252,123,31)" fg:x="1173" fg:w="1"/><text x="94.9231%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.6731%" y="213" width="0.0807%" height="15" fill="rgb(251,227,47)" fg:x="1173" fg:w="1"/><text x="94.9231%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="94.7538%" y="277" width="0.0807%" height="15" fill="rgb(233,84,53)" fg:x="1174" fg:w="1"/><text x="95.0038%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="94.7538%" y="261" width="0.0807%" height="15" fill="rgb(228,57,19)" fg:x="1174" fg:w="1"/><text x="95.0038%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="94.8345%" y="245" width="0.1614%" height="15" fill="rgb(251,81,5)" fg:x="1175" fg:w="2"/><text x="95.0845%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="94.9153%" y="229" width="0.0807%" height="15" fill="rgb(236,211,27)" fg:x="1176" fg:w="1"/><text x="95.1653%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.9153%" y="213" width="0.0807%" height="15" fill="rgb(218,21,6)" fg:x="1176" fg:w="1"/><text x="95.1653%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.9153%" y="197" width="0.0807%" height="15" fill="rgb(239,104,19)" fg:x="1176" fg:w="1"/><text x="95.1653%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.9153%" y="181" width="0.0807%" height="15" fill="rgb(234,179,27)" fg:x="1176" fg:w="1"/><text x="95.1653%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (3 samples, 0.24%)</title><rect x="94.8345%" y="277" width="0.2421%" height="15" fill="rgb(221,154,39)" fg:x="1175" fg:w="3"/><text x="95.0845%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="94.8345%" y="261" width="0.2421%" height="15" fill="rgb(228,190,1)" fg:x="1175" fg:w="3"/><text x="95.0845%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="94.9960%" y="245" width="0.0807%" height="15" fill="rgb(244,122,33)" fg:x="1177" fg:w="1"/><text x="95.2460%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="94.9960%" y="229" width="0.0807%" height="15" fill="rgb(227,56,37)" fg:x="1177" fg:w="1"/><text x="95.2460%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="94.9960%" y="213" width="0.0807%" height="15" fill="rgb(207,158,16)" fg:x="1177" fg:w="1"/><text x="95.2460%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="95.0767%" y="197" width="0.0807%" height="15" fill="rgb(251,222,30)" fg:x="1178" fg:w="1"/><text x="95.3267%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::Interval::difference (1 samples, 0.08%)</title><rect x="95.0767%" y="181" width="0.0807%" height="15" fill="rgb(240,22,49)" fg:x="1178" fg:w="1"/><text x="95.3267%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="95.3995%" y="165" width="0.1614%" height="15" fill="rgb(224,207,37)" fg:x="1182" fg:w="2"/><text x="95.6495%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.5609%" y="165" width="0.0807%" height="15" fill="rgb(249,188,40)" fg:x="1184" fg:w="1"/><text x="95.8109%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="95.6416%" y="165" width="0.0807%" height="15" fill="rgb(254,141,11)" fg:x="1185" fg:w="1"/><text x="95.8916%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="95.8031%" y="101" width="0.0807%" height="15" fill="rgb(231,177,6)" fg:x="1187" fg:w="1"/><text x="96.0531%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="95.8031%" y="85" width="0.0807%" height="15" fill="rgb(241,6,16)" fg:x="1187" fg:w="1"/><text x="96.0531%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.8031%" y="133" width="0.1614%" height="15" fill="rgb(230,50,14)" fg:x="1187" fg:w="2"/><text x="96.0531%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.8031%" y="117" width="0.1614%" height="15" fill="rgb(254,36,3)" fg:x="1187" fg:w="2"/><text x="96.0531%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.8838%" y="101" width="0.0807%" height="15" fill="rgb(226,149,37)" fg:x="1188" fg:w="1"/><text x="96.1338%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="95.7224%" y="165" width="0.4036%" height="15" fill="rgb(253,49,27)" fg:x="1186" fg:w="5"/><text x="95.9724%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="95.7224%" y="149" width="0.4036%" height="15" fill="rgb(249,182,52)" fg:x="1186" fg:w="5"/><text x="95.9724%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="95.9645%" y="133" width="0.1614%" height="15" fill="rgb(223,42,15)" fg:x="1189" fg:w="2"/><text x="96.2145%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="96.0452%" y="117" width="0.0807%" height="15" fill="rgb(232,31,42)" fg:x="1190" fg:w="1"/><text x="96.2952%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.0452%" y="101" width="0.0807%" height="15" fill="rgb(233,56,46)" fg:x="1190" fg:w="1"/><text x="96.2952%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.0452%" y="85" width="0.0807%" height="15" fill="rgb(241,143,21)" fg:x="1190" fg:w="1"/><text x="96.2952%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.0452%" y="69" width="0.0807%" height="15" fill="rgb(251,222,15)" fg:x="1190" fg:w="1"/><text x="96.2952%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (10 samples, 0.81%)</title><rect x="96.1259%" y="165" width="0.8071%" height="15" fill="rgb(242,101,40)" fg:x="1191" fg:w="10"/><text x="96.3759%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (10 samples, 0.81%)</title><rect x="96.1259%" y="149" width="0.8071%" height="15" fill="rgb(247,60,44)" fg:x="1191" fg:w="10"/><text x="96.3759%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (10 samples, 0.81%)</title><rect x="96.1259%" y="133" width="0.8071%" height="15" fill="rgb(254,48,47)" fg:x="1191" fg:w="10"/><text x="96.3759%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 1.94%)</title><rect x="95.0767%" y="261" width="1.9370%" height="15" fill="rgb(253,30,33)" fg:x="1178" fg:w="24"/><text x="95.3267%" y="271.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (24 samples, 1.94%)</title><rect x="95.0767%" y="245" width="1.9370%" height="15" fill="rgb(253,214,47)" fg:x="1178" fg:w="24"/><text x="95.3267%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (24 samples, 1.94%)</title><rect x="95.0767%" y="229" width="1.9370%" height="15" fill="rgb(241,108,29)" fg:x="1178" fg:w="24"/><text x="95.3267%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (24 samples, 1.94%)</title><rect x="95.0767%" y="213" width="1.9370%" height="15" fill="rgb(240,36,2)" fg:x="1178" fg:w="24"/><text x="95.3267%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (23 samples, 1.86%)</title><rect x="95.1574%" y="197" width="1.8563%" height="15" fill="rgb(243,198,24)" fg:x="1179" fg:w="23"/><text x="95.4074%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (23 samples, 1.86%)</title><rect x="95.1574%" y="181" width="1.8563%" height="15" fill="rgb(225,98,27)" fg:x="1179" fg:w="23"/><text x="95.4074%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="96.9330%" y="165" width="0.0807%" height="15" fill="rgb(208,86,30)" fg:x="1201" fg:w="1"/><text x="97.1830%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.9330%" y="149" width="0.0807%" height="15" fill="rgb(242,157,11)" fg:x="1201" fg:w="1"/><text x="97.1830%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (29 samples, 2.34%)</title><rect x="94.7538%" y="293" width="2.3406%" height="15" fill="rgb(244,84,16)" fg:x="1174" fg:w="29"/><text x="95.0038%" y="303.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (25 samples, 2.02%)</title><rect x="95.0767%" y="277" width="2.0178%" height="15" fill="rgb(247,20,46)" fg:x="1178" fg:w="25"/><text x="95.3267%" y="287.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="97.0137%" y="261" width="0.0807%" height="15" fill="rgb(240,157,20)" fg:x="1202" fg:w="1"/><text x="97.2637%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="97.0137%" y="245" width="0.0807%" height="15" fill="rgb(212,151,38)" fg:x="1202" fg:w="1"/><text x="97.2637%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.0137%" y="229" width="0.0807%" height="15" fill="rgb(233,197,14)" fg:x="1202" fg:w="1"/><text x="97.2637%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.0137%" y="213" width="0.0807%" height="15" fill="rgb(226,148,28)" fg:x="1202" fg:w="1"/><text x="97.2637%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.0137%" y="197" width="0.0807%" height="15" fill="rgb(244,141,30)" fg:x="1202" fg:w="1"/><text x="97.2637%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="97.0944%" y="293" width="0.0807%" height="15" fill="rgb(215,73,38)" fg:x="1203" fg:w="1"/><text x="97.3444%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="97.0944%" y="277" width="0.0807%" height="15" fill="rgb(230,148,29)" fg:x="1203" fg:w="1"/><text x="97.3444%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="97.0944%" y="261" width="0.0807%" height="15" fill="rgb(250,41,52)" fg:x="1203" fg:w="1"/><text x="97.3444%" y="271.50"></text></g><g><title>indefinite::rules::number::Number::check (33 samples, 2.66%)</title><rect x="94.5924%" y="357" width="2.6634%" height="15" fill="rgb(215,48,1)" fg:x="1172" fg:w="33"/><text x="94.8424%" y="367.50">in..</text></g><g><title>regex::regex::string::Regex::new (31 samples, 2.50%)</title><rect x="94.7538%" y="341" width="2.5020%" height="15" fill="rgb(205,223,38)" fg:x="1174" fg:w="31"/><text x="95.0038%" y="351.50">re..</text></g><g><title>regex::builders::string::RegexBuilder::build (31 samples, 2.50%)</title><rect x="94.7538%" y="325" width="2.5020%" height="15" fill="rgb(213,51,8)" fg:x="1174" fg:w="31"/><text x="95.0038%" y="335.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (31 samples, 2.50%)</title><rect x="94.7538%" y="309" width="2.5020%" height="15" fill="rgb(248,53,11)" fg:x="1174" fg:w="31"/><text x="95.0038%" y="319.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.1751%" y="293" width="0.0807%" height="15" fill="rgb(218,140,4)" fg:x="1204" fg:w="1"/><text x="97.4251%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.1751%" y="277" width="0.0807%" height="15" fill="rgb(248,161,31)" fg:x="1204" fg:w="1"/><text x="97.4251%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.1751%" y="261" width="0.0807%" height="15" fill="rgb(239,88,32)" fg:x="1204" fg:w="1"/><text x="97.4251%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.3366%" y="277" width="0.0807%" height="15" fill="rgb(234,14,28)" fg:x="1206" fg:w="1"/><text x="97.5866%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.3366%" y="261" width="0.0807%" height="15" fill="rgb(235,173,11)" fg:x="1206" fg:w="1"/><text x="97.5866%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.3366%" y="245" width="0.0807%" height="15" fill="rgb(222,70,2)" fg:x="1206" fg:w="1"/><text x="97.5866%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="97.4173%" y="277" width="0.0807%" height="15" fill="rgb(228,196,41)" fg:x="1207" fg:w="1"/><text x="97.6673%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.4173%" y="261" width="0.0807%" height="15" fill="rgb(249,19,9)" fg:x="1207" fg:w="1"/><text x="97.6673%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (4 samples, 0.32%)</title><rect x="97.2559%" y="325" width="0.3228%" height="15" fill="rgb(221,16,43)" fg:x="1205" fg:w="4"/><text x="97.5059%" y="335.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (4 samples, 0.32%)</title><rect x="97.2559%" y="309" width="0.3228%" height="15" fill="rgb(225,207,6)" fg:x="1205" fg:w="4"/><text x="97.5059%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (3 samples, 0.24%)</title><rect x="97.3366%" y="293" width="0.2421%" height="15" fill="rgb(249,32,32)" fg:x="1206" fg:w="3"/><text x="97.5866%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.4980%" y="277" width="0.0807%" height="15" fill="rgb(232,163,43)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.4980%" y="261" width="0.0807%" height="15" fill="rgb(236,158,54)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="97.4980%" y="245" width="0.0807%" height="15" fill="rgb(205,126,44)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.4980%" y="229" width="0.0807%" height="15" fill="rgb(210,162,12)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="239.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="97.4980%" y="213" width="0.0807%" height="15" fill="rgb(218,156,48)" fg:x="1208" fg:w="1"/><text x="97.7480%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="97.5787%" y="261" width="0.1614%" height="15" fill="rgb(248,210,3)" fg:x="1209" fg:w="2"/><text x="97.8287%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.6594%" y="245" width="0.0807%" height="15" fill="rgb(212,43,27)" fg:x="1210" fg:w="1"/><text x="97.9094%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.6594%" y="229" width="0.0807%" height="15" fill="rgb(241,52,6)" fg:x="1210" fg:w="1"/><text x="97.9094%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.6594%" y="213" width="0.0807%" height="15" fill="rgb(222,178,35)" fg:x="1210" fg:w="1"/><text x="97.9094%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (7 samples, 0.56%)</title><rect x="97.2559%" y="341" width="0.5650%" height="15" fill="rgb(205,121,46)" fg:x="1205" fg:w="7"/><text x="97.5059%" y="351.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="97.5787%" y="325" width="0.2421%" height="15" fill="rgb(249,67,1)" fg:x="1209" fg:w="3"/><text x="97.8287%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="97.5787%" y="309" width="0.2421%" height="15" fill="rgb(238,168,42)" fg:x="1209" fg:w="3"/><text x="97.8287%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="97.5787%" y="293" width="0.2421%" height="15" fill="rgb(205,36,48)" fg:x="1209" fg:w="3"/><text x="97.8287%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="97.5787%" y="277" width="0.2421%" height="15" fill="rgb(240,85,12)" fg:x="1209" fg:w="3"/><text x="97.8287%" y="287.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="97.7401%" y="261" width="0.0807%" height="15" fill="rgb(245,27,39)" fg:x="1211" fg:w="1"/><text x="97.9901%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.7401%" y="245" width="0.0807%" height="15" fill="rgb(218,129,34)" fg:x="1211" fg:w="1"/><text x="97.9901%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.7401%" y="229" width="0.0807%" height="15" fill="rgb(221,157,12)" fg:x="1211" fg:w="1"/><text x="97.9901%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.7401%" y="213" width="0.0807%" height="15" fill="rgb(213,206,20)" fg:x="1211" fg:w="1"/><text x="97.9901%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (65 samples, 5.25%)</title><rect x="92.6554%" y="437" width="5.2462%" height="15" fill="rgb(227,115,30)" fg:x="1148" fg:w="65"/><text x="92.9054%" y="447.50">&lt;&amp;kern..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (61 samples, 4.92%)</title><rect x="92.9782%" y="421" width="4.9233%" height="15" fill="rgb(221,40,47)" fg:x="1152" fg:w="61"/><text x="93.2282%" y="431.50">plugin..</text></g><g><title>indefinite::indefinite (61 samples, 4.92%)</title><rect x="92.9782%" y="405" width="4.9233%" height="15" fill="rgb(239,96,49)" fg:x="1152" fg:w="61"/><text x="93.2282%" y="415.50">indefi..</text></g><g><title>indefinite::methods::indefinite (61 samples, 4.92%)</title><rect x="92.9782%" y="389" width="4.9233%" height="15" fill="rgb(223,24,38)" fg:x="1152" fg:w="61"/><text x="93.2282%" y="399.50">indefi..</text></g><g><title>indefinite::methods::apply_rules (60 samples, 4.84%)</title><rect x="93.0589%" y="373" width="4.8426%" height="15" fill="rgb(242,35,45)" fg:x="1153" fg:w="60"/><text x="93.3089%" y="383.50">indefi..</text></g><g><title>indefinite::rules::other::Other::run (8 samples, 0.65%)</title><rect x="97.2559%" y="357" width="0.6457%" height="15" fill="rgb(236,20,9)" fg:x="1205" fg:w="8"/><text x="97.5059%" y="367.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="97.8208%" y="341" width="0.0807%" height="15" fill="rgb(239,124,8)" fg:x="1212" fg:w="1"/><text x="98.0708%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (2 samples, 0.16%)</title><rect x="97.9015%" y="437" width="0.1614%" height="15" fill="rgb(228,92,29)" fg:x="1213" fg:w="2"/><text x="98.1515%" y="447.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (2 samples, 0.16%)</title><rect x="97.9015%" y="421" width="0.1614%" height="15" fill="rgb(251,53,39)" fg:x="1213" fg:w="2"/><text x="98.1515%" y="431.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="97.9015%" y="405" width="0.1614%" height="15" fill="rgb(224,44,10)" fg:x="1213" fg:w="2"/><text x="98.1515%" y="415.50"></text></g><g><title>plugins_core::finding::matches_description (2 samples, 0.16%)</title><rect x="97.9015%" y="389" width="0.1614%" height="15" fill="rgb(254,10,15)" fg:x="1213" fg:w="2"/><text x="98.1515%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="97.9822%" y="373" width="0.0807%" height="15" fill="rgb(245,173,6)" fg:x="1214" fg:w="1"/><text x="98.2322%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="97.9822%" y="357" width="0.0807%" height="15" fill="rgb(228,74,0)" fg:x="1214" fg:w="1"/><text x="98.2322%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.9822%" y="341" width="0.0807%" height="15" fill="rgb(206,138,29)" fg:x="1214" fg:w="1"/><text x="98.2322%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9822%" y="325" width="0.0807%" height="15" fill="rgb(253,27,43)" fg:x="1214" fg:w="1"/><text x="98.2322%" y="335.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="98.0630%" y="309" width="0.0807%" height="15" fill="rgb(231,73,0)" fg:x="1215" fg:w="1"/><text x="98.3130%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0630%" y="293" width="0.0807%" height="15" fill="rgb(218,9,23)" fg:x="1215" fg:w="1"/><text x="98.3130%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0630%" y="277" width="0.0807%" height="15" fill="rgb(251,55,29)" fg:x="1215" fg:w="1"/><text x="98.3130%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0630%" y="261" width="0.0807%" height="15" fill="rgb(223,180,22)" fg:x="1215" fg:w="1"/><text x="98.3130%" y="271.50"></text></g><g><title>plugins_core::library::actions::reply_ok (2 samples, 0.16%)</title><rect x="98.0630%" y="437" width="0.1614%" height="15" fill="rgb(223,29,21)" fg:x="1215" fg:w="2"/><text x="98.3130%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (2 samples, 0.16%)</title><rect x="98.0630%" y="421" width="0.1614%" height="15" fill="rgb(251,103,37)" fg:x="1215" fg:w="2"/><text x="98.3130%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (2 samples, 0.16%)</title><rect x="98.0630%" y="405" width="0.1614%" height="15" fill="rgb(214,11,21)" fg:x="1215" fg:w="2"/><text x="98.3130%" y="415.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (2 samples, 0.16%)</title><rect x="98.0630%" y="389" width="0.1614%" height="15" fill="rgb(205,137,13)" fg:x="1215" fg:w="2"/><text x="98.3130%" y="399.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (2 samples, 0.16%)</title><rect x="98.0630%" y="373" width="0.1614%" height="15" fill="rgb(225,58,47)" fg:x="1215" fg:w="2"/><text x="98.3130%" y="383.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (2 samples, 0.16%)</title><rect x="98.0630%" y="357" width="0.1614%" height="15" fill="rgb(222,197,14)" fg:x="1215" fg:w="2"/><text x="98.3130%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (2 samples, 0.16%)</title><rect x="98.0630%" y="341" width="0.1614%" height="15" fill="rgb(215,210,33)" fg:x="1215" fg:w="2"/><text x="98.3130%" y="351.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (2 samples, 0.16%)</title><rect x="98.0630%" y="325" width="0.1614%" height="15" fill="rgb(242,13,9)" fg:x="1215" fg:w="2"/><text x="98.3130%" y="335.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (1 samples, 0.08%)</title><rect x="98.1437%" y="309" width="0.0807%" height="15" fill="rgb(218,31,39)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.1437%" y="293" width="0.0807%" height="15" fill="rgb(211,214,23)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;plugins_rune::runner::PostEvaluation&lt;rune::runtime::value::Value&gt;&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="98.1437%" y="277" width="0.0807%" height="15" fill="rgb(237,92,14)" fg:x="1216" fg:w="1"/><text x="98.3937%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="98.2244%" y="421" width="0.0807%" height="15" fill="rgb(220,78,5)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="431.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="98.2244%" y="405" width="0.0807%" height="15" fill="rgb(237,23,21)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="415.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="98.2244%" y="389" width="0.0807%" height="15" fill="rgb(251,207,51)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.2244%" y="373" width="0.0807%" height="15" fill="rgb(249,206,18)" fg:x="1217" fg:w="1"/><text x="98.4744%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3051%" y="309" width="0.0807%" height="15" fill="rgb(236,20,19)" fg:x="1218" fg:w="1"/><text x="98.5551%" y="319.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="98.3051%" y="421" width="0.1614%" height="15" fill="rgb(214,227,29)" fg:x="1218" fg:w="2"/><text x="98.5551%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="98.3051%" y="405" width="0.1614%" height="15" fill="rgb(209,183,4)" fg:x="1218" fg:w="2"/><text x="98.5551%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (2 samples, 0.16%)</title><rect x="98.3051%" y="389" width="0.1614%" height="15" fill="rgb(233,111,23)" fg:x="1218" fg:w="2"/><text x="98.5551%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="98.3051%" y="373" width="0.1614%" height="15" fill="rgb(238,121,27)" fg:x="1218" fg:w="2"/><text x="98.5551%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="98.3051%" y="357" width="0.1614%" height="15" fill="rgb(236,120,41)" fg:x="1218" fg:w="2"/><text x="98.5551%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="98.3051%" y="341" width="0.1614%" height="15" fill="rgb(241,143,10)" fg:x="1218" fg:w="2"/><text x="98.5551%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="98.3051%" y="325" width="0.1614%" height="15" fill="rgb(224,86,31)" fg:x="1218" fg:w="2"/><text x="98.5551%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.3858%" y="309" width="0.0807%" height="15" fill="rgb(236,212,27)" fg:x="1219" fg:w="1"/><text x="98.6358%" y="319.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="98.4665%" y="421" width="0.0807%" height="15" fill="rgb(219,43,51)" fg:x="1220" fg:w="1"/><text x="98.7165%" y="431.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="98.4665%" y="405" width="0.0807%" height="15" fill="rgb(232,216,8)" fg:x="1220" fg:w="1"/><text x="98.7165%" y="415.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="98.4665%" y="389" width="0.0807%" height="15" fill="rgb(206,222,39)" fg:x="1220" fg:w="1"/><text x="98.7165%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="98.4665%" y="373" width="0.0807%" height="15" fill="rgb(209,149,48)" fg:x="1220" fg:w="1"/><text x="98.7165%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.4665%" y="357" width="0.0807%" height="15" fill="rgb(229,155,21)" fg:x="1220" fg:w="1"/><text x="98.7165%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.4665%" y="341" width="0.0807%" height="15" fill="rgb(246,152,26)" fg:x="1220" fg:w="1"/><text x="98.7165%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4665%" y="325" width="0.0807%" height="15" fill="rgb(206,70,42)" fg:x="1220" fg:w="1"/><text x="98.7165%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.4665%" y="309" width="0.0807%" height="15" fill="rgb(236,9,11)" fg:x="1220" fg:w="1"/><text x="98.7165%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4665%" y="293" width="0.0807%" height="15" fill="rgb(238,145,47)" fg:x="1220" fg:w="1"/><text x="98.7165%" y="303.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (160 samples, 12.91%)</title><rect x="85.7143%" y="581" width="12.9136%" height="15" fill="rgb(252,189,7)" fg:x="1062" fg:w="160"/><text x="85.9643%" y="591.50">kernel::plugins::mw..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (160 samples, 12.91%)</title><rect x="85.7143%" y="565" width="12.9136%" height="15" fill="rgb(254,168,51)" fg:x="1062" fg:w="160"/><text x="85.9643%" y="575.50">&lt;plugins_dynlib::Dy..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (160 samples, 12.91%)</title><rect x="85.7143%" y="549" width="12.9136%" height="15" fill="rgb(227,105,46)" fg:x="1062" fg:w="160"/><text x="85.9643%" y="559.50">kernel::plugins::mw..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (160 samples, 12.91%)</title><rect x="85.7143%" y="533" width="12.9136%" height="15" fill="rgb(227,74,30)" fg:x="1062" fg:w="160"/><text x="85.9643%" y="543.50">core::ops::function..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (160 samples, 12.91%)</title><rect x="85.7143%" y="517" width="12.9136%" height="15" fill="rgb(206,212,44)" fg:x="1062" fg:w="160"/><text x="85.9643%" y="527.50">kernel::plugins::mw..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (160 samples, 12.91%)</title><rect x="85.7143%" y="501" width="12.9136%" height="15" fill="rgb(252,69,11)" fg:x="1062" fg:w="160"/><text x="85.9643%" y="511.50">core::ops::function..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (160 samples, 12.91%)</title><rect x="85.7143%" y="485" width="12.9136%" height="15" fill="rgb(239,116,0)" fg:x="1062" fg:w="160"/><text x="85.9643%" y="495.50">&lt;alloc::boxed::Box&lt;..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (160 samples, 12.91%)</title><rect x="85.7143%" y="469" width="12.9136%" height="15" fill="rgb(246,189,23)" fg:x="1062" fg:w="160"/><text x="85.9643%" y="479.50">&lt;engine::session::s..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (74 samples, 5.97%)</title><rect x="92.6554%" y="453" width="5.9726%" height="15" fill="rgb(229,50,41)" fg:x="1148" fg:w="74"/><text x="92.9054%" y="463.50">&lt;plugins..</text></g><g><title>plugins_core::location::model::change_location (5 samples, 0.40%)</title><rect x="98.2244%" y="437" width="0.4036%" height="15" fill="rgb(214,66,37)" fg:x="1217" fg:w="5"/><text x="98.4744%" y="447.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="98.5472%" y="421" width="0.0807%" height="15" fill="rgb(226,28,6)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="431.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="98.5472%" y="405" width="0.0807%" height="15" fill="rgb(239,154,0)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="415.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="98.5472%" y="389" width="0.0807%" height="15" fill="rgb(233,97,11)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.5472%" y="373" width="0.0807%" height="15" fill="rgb(236,215,16)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="383.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="98.5472%" y="357" width="0.0807%" height="15" fill="rgb(246,188,29)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.5472%" y="341" width="0.0807%" height="15" fill="rgb(207,7,29)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.5472%" y="325" width="0.0807%" height="15" fill="rgb(238,112,43)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.5472%" y="309" width="0.0807%" height="15" fill="rgb(230,110,32)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="98.5472%" y="293" width="0.0807%" height="15" fill="rgb(218,197,32)" fg:x="1221" fg:w="1"/><text x="98.7972%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.6279%" y="533" width="0.0807%" height="15" fill="rgb(252,61,9)" fg:x="1222" fg:w="1"/><text x="98.8779%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6279%" y="517" width="0.0807%" height="15" fill="rgb(244,140,14)" fg:x="1222" fg:w="1"/><text x="98.8779%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.7086%" y="469" width="0.0807%" height="15" fill="rgb(216,14,47)" fg:x="1223" fg:w="1"/><text x="98.9586%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7086%" y="453" width="0.0807%" height="15" fill="rgb(224,130,52)" fg:x="1223" fg:w="1"/><text x="98.9586%" y="463.50"></text></g><g><title>plugins_core::tools::contained_by (3 samples, 0.24%)</title><rect x="98.6279%" y="549" width="0.2421%" height="15" fill="rgb(210,229,51)" fg:x="1222" fg:w="3"/><text x="98.8779%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="98.7086%" y="533" width="0.1614%" height="15" fill="rgb(242,13,9)" fg:x="1223" fg:w="2"/><text x="98.9586%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="98.7086%" y="517" width="0.1614%" height="15" fill="rgb(252,71,50)" fg:x="1223" fg:w="2"/><text x="98.9586%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="98.7086%" y="501" width="0.1614%" height="15" fill="rgb(218,225,6)" fg:x="1223" fg:w="2"/><text x="98.9586%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="98.7086%" y="485" width="0.1614%" height="15" fill="rgb(219,27,35)" fg:x="1223" fg:w="2"/><text x="98.9586%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="98.7893%" y="469" width="0.0807%" height="15" fill="rgb(226,30,1)" fg:x="1224" fg:w="1"/><text x="99.0393%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7893%" y="453" width="0.0807%" height="15" fill="rgb(227,164,34)" fg:x="1224" fg:w="1"/><text x="99.0393%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7893%" y="437" width="0.0807%" height="15" fill="rgb(206,103,4)" fg:x="1224" fg:w="1"/><text x="99.0393%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.7893%" y="421" width="0.0807%" height="15" fill="rgb(214,166,19)" fg:x="1224" fg:w="1"/><text x="99.0393%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7893%" y="405" width="0.0807%" height="15" fill="rgb(240,56,20)" fg:x="1224" fg:w="1"/><text x="99.0393%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.7893%" y="389" width="0.0807%" height="15" fill="rgb(224,25,3)" fg:x="1224" fg:w="1"/><text x="99.0393%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.7893%" y="373" width="0.0807%" height="15" fill="rgb(216,206,54)" fg:x="1224" fg:w="1"/><text x="99.0393%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.7893%" y="357" width="0.0807%" height="15" fill="rgb(225,142,10)" fg:x="1224" fg:w="1"/><text x="99.0393%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.7893%" y="341" width="0.0807%" height="15" fill="rgb(246,9,18)" fg:x="1224" fg:w="1"/><text x="99.0393%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8701%" y="501" width="0.0807%" height="15" fill="rgb(247,140,18)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8701%" y="485" width="0.0807%" height="15" fill="rgb(239,184,22)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.8701%" y="469" width="0.0807%" height="15" fill="rgb(227,94,44)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.8701%" y="453" width="0.0807%" height="15" fill="rgb(219,43,3)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.8701%" y="437" width="0.0807%" height="15" fill="rgb(210,76,31)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.8701%" y="421" width="0.0807%" height="15" fill="rgb(225,85,12)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.8701%" y="405" width="0.0807%" height="15" fill="rgb(214,191,28)" fg:x="1225" fg:w="1"/><text x="99.1201%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.8701%" y="517" width="0.1614%" height="15" fill="rgb(214,43,14)" fg:x="1225" fg:w="2"/><text x="99.1201%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9508%" y="501" width="0.0807%" height="15" fill="rgb(253,117,5)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9508%" y="485" width="0.0807%" height="15" fill="rgb(208,124,26)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9508%" y="469" width="0.0807%" height="15" fill="rgb(228,208,39)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9508%" y="453" width="0.0807%" height="15" fill="rgb(206,180,39)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9508%" y="437" width="0.0807%" height="15" fill="rgb(205,111,37)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.9508%" y="421" width="0.0807%" height="15" fill="rgb(208,121,24)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.9508%" y="405" width="0.0807%" height="15" fill="rgb(218,215,32)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.9508%" y="389" width="0.0807%" height="15" fill="rgb(244,168,53)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.9508%" y="373" width="0.0807%" height="15" fill="rgb(214,9,36)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.9508%" y="357" width="0.0807%" height="15" fill="rgb(231,4,34)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.9508%" y="341" width="0.0807%" height="15" fill="rgb(210,83,51)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.9508%" y="325" width="0.0807%" height="15" fill="rgb(224,112,1)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.9508%" y="309" width="0.0807%" height="15" fill="rgb(216,33,41)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.9508%" y="293" width="0.0807%" height="15" fill="rgb(215,179,42)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9508%" y="277" width="0.0807%" height="15" fill="rgb(205,81,48)" fg:x="1226" fg:w="1"/><text x="99.2008%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="98.8701%" y="533" width="0.3228%" height="15" fill="rgb(246,17,30)" fg:x="1225" fg:w="4"/><text x="99.1201%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.0315%" y="517" width="0.1614%" height="15" fill="rgb(226,19,16)" fg:x="1227" fg:w="2"/><text x="99.2815%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.0315%" y="501" width="0.1614%" height="15" fill="rgb(207,3,14)" fg:x="1227" fg:w="2"/><text x="99.2815%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.1122%" y="485" width="0.0807%" height="15" fill="rgb(226,77,12)" fg:x="1228" fg:w="1"/><text x="99.3622%" y="495.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.1122%" y="469" width="0.0807%" height="15" fill="rgb(226,76,25)" fg:x="1228" fg:w="1"/><text x="99.3622%" y="479.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="99.1122%" y="453" width="0.0807%" height="15" fill="rgb(217,216,25)" fg:x="1228" fg:w="1"/><text x="99.3622%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1122%" y="437" width="0.0807%" height="15" fill="rgb(247,127,42)" fg:x="1228" fg:w="1"/><text x="99.3622%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1122%" y="421" width="0.0807%" height="15" fill="rgb(226,10,34)" fg:x="1228" fg:w="1"/><text x="99.3622%" y="431.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.40%)</title><rect x="98.8701%" y="549" width="0.4036%" height="15" fill="rgb(249,78,0)" fg:x="1225" fg:w="5"/><text x="99.1201%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="99.1929%" y="533" width="0.0807%" height="15" fill="rgb(226,218,38)" fg:x="1229" fg:w="1"/><text x="99.4429%" y="543.50"></text></g><g><title>engine::session::Session::captured (176 samples, 14.21%)</title><rect x="85.1493%" y="725" width="14.2050%" height="15" fill="rgb(240,92,1)" fg:x="1055" fg:w="176"/><text x="85.3993%" y="735.50">engine::session::Sessi..</text></g><g><title>engine::session::logs::capture (176 samples, 14.21%)</title><rect x="85.1493%" y="709" width="14.2050%" height="15" fill="rgb(237,224,33)" fg:x="1055" fg:w="176"/><text x="85.3993%" y="719.50">engine::session::logs:..</text></g><g><title>tracing_core::dispatcher::with_default (176 samples, 14.21%)</title><rect x="85.1493%" y="693" width="14.2050%" height="15" fill="rgb(211,46,1)" fg:x="1055" fg:w="176"/><text x="85.3993%" y="703.50">tracing_core::dispatch..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (176 samples, 14.21%)</title><rect x="85.1493%" y="677" width="14.2050%" height="15" fill="rgb(239,190,4)" fg:x="1055" fg:w="176"/><text x="85.3993%" y="687.50">&lt;engine::session::Sess..</text></g><g><title>kernel::plugins::mw::apply_middleware (176 samples, 14.21%)</title><rect x="85.1493%" y="661" width="14.2050%" height="15" fill="rgb(221,50,22)" fg:x="1055" fg:w="176"/><text x="85.3993%" y="671.50">kernel::plugins::mw::a..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (176 samples, 14.21%)</title><rect x="85.1493%" y="645" width="14.2050%" height="15" fill="rgb(207,176,8)" fg:x="1055" fg:w="176"/><text x="85.3993%" y="655.50">kernel::plugins::mw::M..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (176 samples, 14.21%)</title><rect x="85.1493%" y="629" width="14.2050%" height="15" fill="rgb(244,114,50)" fg:x="1055" fg:w="176"/><text x="85.3993%" y="639.50">&lt;engine::session::Expa..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (169 samples, 13.64%)</title><rect x="85.7143%" y="613" width="13.6400%" height="15" fill="rgb(226,206,19)" fg:x="1062" fg:w="169"/><text x="85.9643%" y="623.50">kernel::plugins::mw::..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (169 samples, 13.64%)</title><rect x="85.7143%" y="597" width="13.6400%" height="15" fill="rgb(208,199,16)" fg:x="1062" fg:w="169"/><text x="85.9643%" y="607.50">&lt;plugins_rune::RuneMi..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (9 samples, 0.73%)</title><rect x="98.6279%" y="581" width="0.7264%" height="15" fill="rgb(208,38,14)" fg:x="1222" fg:w="9"/><text x="98.8779%" y="591.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (9 samples, 0.73%)</title><rect x="98.6279%" y="565" width="0.7264%" height="15" fill="rgb(221,211,49)" fg:x="1222" fg:w="9"/><text x="98.8779%" y="575.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="99.2736%" y="549" width="0.0807%" height="15" fill="rgb(227,214,34)" fg:x="1230" fg:w="1"/><text x="99.5236%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.2736%" y="533" width="0.0807%" height="15" fill="rgb(234,5,54)" fg:x="1230" fg:w="1"/><text x="99.5236%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2736%" y="517" width="0.0807%" height="15" fill="rgb(236,215,22)" fg:x="1230" fg:w="1"/><text x="99.5236%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2736%" y="501" width="0.0807%" height="15" fill="rgb(244,0,11)" fg:x="1230" fg:w="1"/><text x="99.5236%" y="511.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="99.2736%" y="485" width="0.0807%" height="15" fill="rgb(212,140,16)" fg:x="1230" fg:w="1"/><text x="99.5236%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4350%" y="677" width="0.0807%" height="15" fill="rgb(238,101,37)" fg:x="1232" fg:w="1"/><text x="99.6850%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4350%" y="661" width="0.0807%" height="15" fill="rgb(247,46,3)" fg:x="1232" fg:w="1"/><text x="99.6850%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4350%" y="645" width="0.0807%" height="15" fill="rgb(208,106,19)" fg:x="1232" fg:w="1"/><text x="99.6850%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4350%" y="629" width="0.0807%" height="15" fill="rgb(240,227,15)" fg:x="1232" fg:w="1"/><text x="99.6850%" y="639.50"></text></g><g><title>engine::session::internal::Added::find_refs (3 samples, 0.24%)</title><rect x="99.3543%" y="709" width="0.2421%" height="15" fill="rgb(226,173,6)" fg:x="1231" fg:w="3"/><text x="99.6043%" y="719.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.4350%" y="693" width="0.1614%" height="15" fill="rgb(213,191,1)" fg:x="1232" fg:w="2"/><text x="99.6850%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.5157%" y="677" width="0.0807%" height="15" fill="rgb(246,51,36)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.5157%" y="661" width="0.0807%" height="15" fill="rgb(238,40,32)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.5157%" y="645" width="0.0807%" height="15" fill="rgb(208,126,27)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.5157%" y="629" width="0.0807%" height="15" fill="rgb(227,117,38)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.5157%" y="613" width="0.0807%" height="15" fill="rgb(232,16,1)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.5157%" y="597" width="0.0807%" height="15" fill="rgb(212,111,31)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5157%" y="581" width="0.0807%" height="15" fill="rgb(253,227,2)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5157%" y="565" width="0.0807%" height="15" fill="rgb(216,122,17)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.5157%" y="549" width="0.0807%" height="15" fill="rgb(227,37,2)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5157%" y="533" width="0.0807%" height="15" fill="rgb(244,113,40)" fg:x="1233" fg:w="1"/><text x="99.7657%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="99.3543%" y="725" width="0.3228%" height="15" fill="rgb(217,193,34)" fg:x="1231" fg:w="4"/><text x="99.6043%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.5964%" y="709" width="0.0807%" height="15" fill="rgb(212,223,15)" fg:x="1234" fg:w="1"/><text x="99.8464%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.5964%" y="693" width="0.0807%" height="15" fill="rgb(238,143,18)" fg:x="1234" fg:w="1"/><text x="99.8464%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5964%" y="677" width="0.0807%" height="15" fill="rgb(231,18,49)" fg:x="1234" fg:w="1"/><text x="99.8464%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5964%" y="661" width="0.0807%" height="15" fill="rgb(249,122,4)" fg:x="1234" fg:w="1"/><text x="99.8464%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5964%" y="645" width="0.0807%" height="15" fill="rgb(245,138,54)" fg:x="1234" fg:w="1"/><text x="99.8464%" y="655.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.6772%" y="677" width="0.0807%" height="15" fill="rgb(218,130,18)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6772%" y="661" width="0.0807%" height="15" fill="rgb(235,94,13)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6772%" y="645" width="0.0807%" height="15" fill="rgb(247,143,5)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6772%" y="629" width="0.0807%" height="15" fill="rgb(212,59,54)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6772%" y="613" width="0.0807%" height="15" fill="rgb(206,121,24)" fg:x="1235" fg:w="1"/><text x="99.9272%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7579%" y="581" width="0.0807%" height="15" fill="rgb(235,38,8)" fg:x="1236" fg:w="1"/><text x="100.0079%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7579%" y="565" width="0.0807%" height="15" fill="rgb(227,102,26)" fg:x="1236" fg:w="1"/><text x="100.0079%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7579%" y="549" width="0.0807%" height="15" fill="rgb(240,183,46)" fg:x="1236" fg:w="1"/><text x="100.0079%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7579%" y="533" width="0.0807%" height="15" fill="rgb(208,177,23)" fg:x="1236" fg:w="1"/><text x="100.0079%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7579%" y="517" width="0.0807%" height="15" fill="rgb(216,152,5)" fg:x="1236" fg:w="1"/><text x="100.0079%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7579%" y="501" width="0.0807%" height="15" fill="rgb(238,199,2)" fg:x="1236" fg:w="1"/><text x="100.0079%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7579%" y="485" width="0.0807%" height="15" fill="rgb(235,142,28)" fg:x="1236" fg:w="1"/><text x="100.0079%" y="495.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="99.7579%" y="469" width="0.0807%" height="15" fill="rgb(225,97,25)" fg:x="1236" fg:w="1"/><text x="100.0079%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="99.7579%" y="453" width="0.0807%" height="15" fill="rgb(208,75,46)" fg:x="1236" fg:w="1"/><text x="100.0079%" y="463.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (267 samples, 21.55%)</title><rect x="78.3697%" y="805" width="21.5496%" height="15" fill="rgb(240,136,15)" fg:x="971" fg:w="267"/><text x="78.6197%" y="815.50">&lt;criterion::routine::Function&lt;M,F,..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (267 samples, 21.55%)</title><rect x="78.3697%" y="789" width="21.5496%" height="15" fill="rgb(235,36,27)" fg:x="971" fg:w="267"/><text x="78.6197%" y="799.50">criterion::bencher::Bencher&lt;M&gt;::it..</text></g><g><title>tests::evaluate_text_in_new_domain (267 samples, 21.55%)</title><rect x="78.3697%" y="773" width="21.5496%" height="15" fill="rgb(231,132,23)" fg:x="971" fg:w="267"/><text x="78.6197%" y="783.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (184 samples, 14.85%)</title><rect x="85.0686%" y="757" width="14.8507%" height="15" fill="rgb(205,208,20)" fg:x="1054" fg:w="184"/><text x="85.3186%" y="767.50">engine::session::Sessio..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (184 samples, 14.85%)</title><rect x="85.0686%" y="741" width="14.8507%" height="15" fill="rgb(215,26,40)" fg:x="1054" fg:w="184"/><text x="85.3186%" y="751.50">engine::session::Sessio..</text></g><g><title>kernel::model::EntityPtrResolver::world (3 samples, 0.24%)</title><rect x="99.6772%" y="725" width="0.2421%" height="15" fill="rgb(238,183,34)" fg:x="1235" fg:w="3"/><text x="99.9272%" y="735.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="99.6772%" y="709" width="0.2421%" height="15" fill="rgb(207,96,10)" fg:x="1235" fg:w="3"/><text x="99.9272%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.6772%" y="693" width="0.2421%" height="15" fill="rgb(218,88,6)" fg:x="1235" fg:w="3"/><text x="99.9272%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.7579%" y="677" width="0.1614%" height="15" fill="rgb(217,22,49)" fg:x="1236" fg:w="2"/><text x="100.0079%" y="687.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.7579%" y="661" width="0.1614%" height="15" fill="rgb(240,195,14)" fg:x="1236" fg:w="2"/><text x="100.0079%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.7579%" y="645" width="0.1614%" height="15" fill="rgb(229,48,27)" fg:x="1236" fg:w="2"/><text x="100.0079%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.7579%" y="629" width="0.1614%" height="15" fill="rgb(220,194,45)" fg:x="1236" fg:w="2"/><text x="100.0079%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.7579%" y="613" width="0.1614%" height="15" fill="rgb(252,60,20)" fg:x="1236" fg:w="2"/><text x="100.0079%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.7579%" y="597" width="0.1614%" height="15" fill="rgb(244,169,33)" fg:x="1236" fg:w="2"/><text x="100.0079%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8386%" y="581" width="0.0807%" height="15" fill="rgb(234,141,34)" fg:x="1237" fg:w="1"/><text x="100.0886%" y="591.50"></text></g><g><title>all (1,239 samples, 100%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(241,141,9)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="1119.50"></text></g><g><title>simple-96d5fd4f (1,239 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(246,27,36)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="1103.50">simple-96d5fd4f</text></g><g><title>_start (1,239 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(216,188,42)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="1087.50">_start</text></g><g><title>__libc_start_main (1,239 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(234,205,22)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="1071.50">__libc_start_main</text></g><g><title>main (1,239 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(210,202,32)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="1055.50">main</text></g><g><title>std::rt::lang_start_internal (1,239 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(217,0,48)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="1039.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,239 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(207,115,37)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="1023.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,239 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(237,221,44)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="1007.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,239 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(249,78,2)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="991.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,239 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(211,169,23)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="975.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,239 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(207,116,29)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,239 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(240,84,33)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,239 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(229,224,31)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="927.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,239 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(227,90,31)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="911.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,239 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(249,22,41)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="895.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,239 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(239,65,11)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="879.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,239 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(205,5,23)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="863.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,239 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(254,78,52)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="847.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,239 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(214,156,33)" fg:x="0" fg:w="1239"/><text x="0.2500%" y="831.50">criterion::routine::Routine::profile</text></g><g><title>&lt;pprof::criterion::PProfProfiler as criterion::profiler::Profiler&gt;::stop_profiling (1 samples, 0.08%)</title><rect x="99.9193%" y="805" width="0.0807%" height="15" fill="rgb(208,20,30)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="815.50"></text></g><g><title>std::fs::DirBuilder::create_dir_all (1 samples, 0.08%)</title><rect x="99.9193%" y="789" width="0.0807%" height="15" fill="rgb(223,133,18)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="799.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir (1 samples, 0.08%)</title><rect x="99.9193%" y="773" width="0.0807%" height="15" fill="rgb(222,91,41)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="783.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="99.9193%" y="757" width="0.0807%" height="15" fill="rgb(247,137,48)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="767.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="99.9193%" y="741" width="0.0807%" height="15" fill="rgb(239,156,11)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="751.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir::{{closure}} (1 samples, 0.08%)</title><rect x="99.9193%" y="725" width="0.0807%" height="15" fill="rgb(244,56,26)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="735.50"></text></g><g><title>mkdir (1 samples, 0.08%)</title><rect x="99.9193%" y="709" width="0.0807%" height="15" fill="rgb(205,131,49)" fg:x="1238" fg:w="1"/><text x="100.1693%" y="719.50"></text></g></svg></svg>