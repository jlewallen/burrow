<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1126" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1109.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1109.00"> </text><svg id="frames" x="10" width="1180" total_samples="1231"><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.0812%" y="645" width="0.1625%" height="15" fill="rgb(245,45,36)" fg:x="1" fg:w="2"/><text x="0.3312%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2437%" y="629" width="0.0812%" height="15" fill="rgb(221,172,44)" fg:x="3" fg:w="1"/><text x="0.4937%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.49%)</title><rect x="0.0000%" y="709" width="0.4874%" height="15" fill="rgb(222,45,12)" fg:x="0" fg:w="6"/><text x="0.2500%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="0.0000%" y="693" width="0.4874%" height="15" fill="rgb(250,10,22)" fg:x="0" fg:w="6"/><text x="0.2500%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.41%)</title><rect x="0.0812%" y="677" width="0.4062%" height="15" fill="rgb(239,27,0)" fg:x="1" fg:w="5"/><text x="0.3312%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (5 samples, 0.41%)</title><rect x="0.0812%" y="661" width="0.4062%" height="15" fill="rgb(223,118,22)" fg:x="1" fg:w="5"/><text x="0.3312%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (3 samples, 0.24%)</title><rect x="0.2437%" y="645" width="0.2437%" height="15" fill="rgb(251,81,25)" fg:x="3" fg:w="3"/><text x="0.4937%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::ArgumentType&gt; (2 samples, 0.16%)</title><rect x="0.3249%" y="629" width="0.1625%" height="15" fill="rgb(237,225,53)" fg:x="4" fg:w="2"/><text x="0.5749%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::ArgumentType&gt; (1 samples, 0.08%)</title><rect x="0.4062%" y="613" width="0.0812%" height="15" fill="rgb(237,186,51)" fg:x="5" fg:w="1"/><text x="0.6562%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4874%" y="629" width="0.0812%" height="15" fill="rgb(247,209,11)" fg:x="6" fg:w="1"/><text x="0.7374%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7311%" y="597" width="0.0812%" height="15" fill="rgb(223,109,27)" fg:x="9" fg:w="1"/><text x="0.9811%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.8123%" y="581" width="0.1625%" height="15" fill="rgb(246,181,13)" fg:x="10" fg:w="2"/><text x="1.0623%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8936%" y="565" width="0.0812%" height="15" fill="rgb(234,57,44)" fg:x="11" fg:w="1"/><text x="1.1436%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9748%" y="565" width="0.0812%" height="15" fill="rgb(211,227,50)" fg:x="12" fg:w="1"/><text x="1.2248%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.0561%" y="565" width="0.0812%" height="15" fill="rgb(254,57,34)" fg:x="13" fg:w="1"/><text x="1.3061%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1373%" y="549" width="0.0812%" height="15" fill="rgb(227,212,26)" fg:x="14" fg:w="1"/><text x="1.3873%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2185%" y="549" width="0.0812%" height="15" fill="rgb(244,169,44)" fg:x="15" fg:w="1"/><text x="1.4685%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2185%" y="533" width="0.0812%" height="15" fill="rgb(236,135,50)" fg:x="15" fg:w="1"/><text x="1.4685%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.89%)</title><rect x="0.4874%" y="645" width="0.8936%" height="15" fill="rgb(241,89,30)" fg:x="6" fg:w="11"/><text x="0.7374%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (10 samples, 0.81%)</title><rect x="0.5686%" y="629" width="0.8123%" height="15" fill="rgb(206,113,34)" fg:x="7" fg:w="10"/><text x="0.8186%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.73%)</title><rect x="0.6499%" y="613" width="0.7311%" height="15" fill="rgb(218,104,52)" fg:x="8" fg:w="9"/><text x="0.8999%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="0.8123%" y="597" width="0.5686%" height="15" fill="rgb(223,82,32)" fg:x="10" fg:w="7"/><text x="1.0623%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="0.9748%" y="581" width="0.4062%" height="15" fill="rgb(249,219,30)" fg:x="12" fg:w="5"/><text x="1.2248%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="1.1373%" y="565" width="0.2437%" height="15" fill="rgb(233,141,21)" fg:x="14" fg:w="3"/><text x="1.3873%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.2998%" y="549" width="0.0812%" height="15" fill="rgb(252,87,44)" fg:x="16" fg:w="1"/><text x="1.5498%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2998%" y="533" width="0.0812%" height="15" fill="rgb(229,48,33)" fg:x="16" fg:w="1"/><text x="1.5498%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2998%" y="517" width="0.0812%" height="15" fill="rgb(229,23,22)" fg:x="16" fg:w="1"/><text x="1.5498%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.3810%" y="629" width="0.1625%" height="15" fill="rgb(244,116,16)" fg:x="17" fg:w="2"/><text x="1.6310%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.5435%" y="613" width="0.0812%" height="15" fill="rgb(247,45,10)" fg:x="19" fg:w="1"/><text x="1.7935%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5435%" y="597" width="0.0812%" height="15" fill="rgb(228,60,29)" fg:x="19" fg:w="1"/><text x="1.7935%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7059%" y="581" width="0.0812%" height="15" fill="rgb(205,129,15)" fg:x="21" fg:w="1"/><text x="1.9559%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (17 samples, 1.38%)</title><rect x="0.4874%" y="709" width="1.3810%" height="15" fill="rgb(206,229,4)" fg:x="6" fg:w="17"/><text x="0.7374%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 1.38%)</title><rect x="0.4874%" y="693" width="1.3810%" height="15" fill="rgb(249,191,30)" fg:x="6" fg:w="17"/><text x="0.7374%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (17 samples, 1.38%)</title><rect x="0.4874%" y="677" width="1.3810%" height="15" fill="rgb(250,84,54)" fg:x="6" fg:w="17"/><text x="0.7374%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 1.38%)</title><rect x="0.4874%" y="661" width="1.3810%" height="15" fill="rgb(207,25,53)" fg:x="6" fg:w="17"/><text x="0.7374%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.49%)</title><rect x="1.3810%" y="645" width="0.4874%" height="15" fill="rgb(235,40,8)" fg:x="17" fg:w="6"/><text x="1.6310%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.5435%" y="629" width="0.3249%" height="15" fill="rgb(226,169,33)" fg:x="19" fg:w="4"/><text x="1.7935%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.6247%" y="613" width="0.2437%" height="15" fill="rgb(238,110,8)" fg:x="20" fg:w="3"/><text x="1.8747%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.6247%" y="597" width="0.2437%" height="15" fill="rgb(251,206,12)" fg:x="20" fg:w="3"/><text x="1.8747%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.7872%" y="581" width="0.0812%" height="15" fill="rgb(248,171,18)" fg:x="22" fg:w="1"/><text x="2.0372%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.7872%" y="565" width="0.0812%" height="15" fill="rgb(213,65,46)" fg:x="22" fg:w="1"/><text x="2.0372%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::Captured&gt; (1 samples, 0.08%)</title><rect x="1.8684%" y="709" width="0.0812%" height="15" fill="rgb(211,154,15)" fg:x="23" fg:w="1"/><text x="2.1184%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8684%" y="693" width="0.0812%" height="15" fill="rgb(217,75,43)" fg:x="23" fg:w="1"/><text x="2.1184%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 2.03%)</title><rect x="0.0000%" y="725" width="2.0309%" height="15" fill="rgb(230,32,33)" fg:x="0" fg:w="25"/><text x="0.2500%" y="735.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="1.9496%" y="709" width="0.0812%" height="15" fill="rgb(221,100,16)" fg:x="24" fg:w="1"/><text x="2.1996%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.0309%" y="677" width="0.0812%" height="15" fill="rgb(212,129,47)" fg:x="25" fg:w="1"/><text x="2.2809%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="2.1121%" y="661" width="0.0812%" height="15" fill="rgb(239,217,47)" fg:x="26" fg:w="1"/><text x="2.3621%" y="671.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.2746%" y="629" width="0.0812%" height="15" fill="rgb(230,84,24)" fg:x="28" fg:w="1"/><text x="2.5246%" y="639.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.3558%" y="629" width="0.1625%" height="15" fill="rgb(214,153,51)" fg:x="29" fg:w="2"/><text x="2.6058%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.3558%" y="613" width="0.1625%" height="15" fill="rgb(231,6,35)" fg:x="29" fg:w="2"/><text x="2.6058%" y="623.50"></text></g><g><title>&lt;plugins_core::carrying::actions::PutInsideAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="2.3558%" y="597" width="0.1625%" height="15" fill="rgb(229,122,30)" fg:x="29" fg:w="2"/><text x="2.6058%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="2.3558%" y="581" width="0.1625%" height="15" fill="rgb(234,71,10)" fg:x="29" fg:w="2"/><text x="2.6058%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4370%" y="565" width="0.0812%" height="15" fill="rgb(215,173,26)" fg:x="30" fg:w="1"/><text x="2.6870%" y="575.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.5183%" y="629" width="0.0812%" height="15" fill="rgb(248,118,52)" fg:x="31" fg:w="1"/><text x="2.7683%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.5183%" y="613" width="0.0812%" height="15" fill="rgb(237,55,46)" fg:x="31" fg:w="1"/><text x="2.7683%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="2.5183%" y="597" width="0.0812%" height="15" fill="rgb(243,214,43)" fg:x="31" fg:w="1"/><text x="2.7683%" y="607.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.5995%" y="629" width="0.0812%" height="15" fill="rgb(252,123,30)" fg:x="32" fg:w="1"/><text x="2.8495%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.5995%" y="613" width="0.0812%" height="15" fill="rgb(215,73,39)" fg:x="32" fg:w="1"/><text x="2.8495%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="2.5995%" y="597" width="0.0812%" height="15" fill="rgb(251,194,29)" fg:x="32" fg:w="1"/><text x="2.8495%" y="607.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.6807%" y="629" width="0.0812%" height="15" fill="rgb(224,58,52)" fg:x="33" fg:w="1"/><text x="2.9307%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.6807%" y="613" width="0.0812%" height="15" fill="rgb(248,106,46)" fg:x="33" fg:w="1"/><text x="2.9307%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.6807%" y="597" width="0.0812%" height="15" fill="rgb(223,80,29)" fg:x="33" fg:w="1"/><text x="2.9307%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::actions::RemoveRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.7620%" y="597" width="0.0812%" height="15" fill="rgb(243,137,9)" fg:x="34" fg:w="1"/><text x="3.0120%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.7620%" y="581" width="0.0812%" height="15" fill="rgb(235,121,28)" fg:x="34" fg:w="1"/><text x="3.0120%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.7620%" y="629" width="0.1625%" height="15" fill="rgb(219,121,41)" fg:x="34" fg:w="2"/><text x="3.0120%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.7620%" y="613" width="0.1625%" height="15" fill="rgb(251,60,6)" fg:x="34" fg:w="2"/><text x="3.0120%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="2.8432%" y="597" width="0.0812%" height="15" fill="rgb(208,12,30)" fg:x="35" fg:w="1"/><text x="3.0932%" y="607.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.9245%" y="597" width="0.0812%" height="15" fill="rgb(207,176,36)" fg:x="36" fg:w="1"/><text x="3.1745%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.9245%" y="581" width="0.0812%" height="15" fill="rgb(211,188,29)" fg:x="36" fg:w="1"/><text x="3.1745%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.9245%" y="565" width="0.0812%" height="15" fill="rgb(220,184,37)" fg:x="36" fg:w="1"/><text x="3.1745%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.9245%" y="549" width="0.0812%" height="15" fill="rgb(239,87,37)" fg:x="36" fg:w="1"/><text x="3.1745%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.9245%" y="533" width="0.0812%" height="15" fill="rgb(232,113,44)" fg:x="36" fg:w="1"/><text x="3.1745%" y="543.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.9245%" y="629" width="0.1625%" height="15" fill="rgb(246,25,39)" fg:x="36" fg:w="2"/><text x="3.1745%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.9245%" y="613" width="0.1625%" height="15" fill="rgb(247,30,13)" fg:x="36" fg:w="2"/><text x="3.1745%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.0057%" y="597" width="0.0812%" height="15" fill="rgb(230,176,35)" fg:x="37" fg:w="1"/><text x="3.2557%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.0057%" y="581" width="0.0812%" height="15" fill="rgb(222,23,18)" fg:x="37" fg:w="1"/><text x="3.2557%" y="591.50"></text></g><g><title>&lt;core::char::ToLowercase as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.0057%" y="565" width="0.0812%" height="15" fill="rgb(234,86,8)" fg:x="37" fg:w="1"/><text x="3.2557%" y="575.50"></text></g><g><title>&lt;core::char::CaseMappingIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.0057%" y="549" width="0.0812%" height="15" fill="rgb(206,218,47)" fg:x="37" fg:w="1"/><text x="3.2557%" y="559.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (13 samples, 1.06%)</title><rect x="2.1933%" y="645" width="1.0561%" height="15" fill="rgb(229,35,31)" fg:x="27" fg:w="13"/><text x="2.4433%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="3.0869%" y="629" width="0.1625%" height="15" fill="rgb(242,81,7)" fg:x="38" fg:w="2"/><text x="3.3369%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.2494%" y="581" width="0.0812%" height="15" fill="rgb(231,11,35)" fg:x="40" fg:w="1"/><text x="3.4994%" y="591.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (2 samples, 0.16%)</title><rect x="3.2494%" y="645" width="0.1625%" height="15" fill="rgb(219,218,17)" fg:x="40" fg:w="2"/><text x="3.4994%" y="655.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="3.2494%" y="629" width="0.1625%" height="15" fill="rgb(221,83,32)" fg:x="40" fg:w="2"/><text x="3.4994%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="3.2494%" y="613" width="0.1625%" height="15" fill="rgb(233,49,54)" fg:x="40" fg:w="2"/><text x="3.4994%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="3.2494%" y="597" width="0.1625%" height="15" fill="rgb(206,18,51)" fg:x="40" fg:w="2"/><text x="3.4994%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="3.3306%" y="581" width="0.0812%" height="15" fill="rgb(249,193,15)" fg:x="41" fg:w="1"/><text x="3.5806%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="3.3306%" y="565" width="0.0812%" height="15" fill="rgb(245,186,19)" fg:x="41" fg:w="1"/><text x="3.5806%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="3.3306%" y="549" width="0.0812%" height="15" fill="rgb(230,4,24)" fg:x="41" fg:w="1"/><text x="3.5806%" y="559.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="3.3306%" y="533" width="0.0812%" height="15" fill="rgb(234,75,27)" fg:x="41" fg:w="1"/><text x="3.5806%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.8993%" y="581" width="0.1625%" height="15" fill="rgb(244,187,35)" fg:x="48" fg:w="2"/><text x="4.1493%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.8993%" y="565" width="0.1625%" height="15" fill="rgb(241,97,43)" fg:x="48" fg:w="2"/><text x="4.1493%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="3.8993%" y="549" width="0.1625%" height="15" fill="rgb(236,94,2)" fg:x="48" fg:w="2"/><text x="4.1493%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="3.8993%" y="533" width="0.1625%" height="15" fill="rgb(231,175,7)" fg:x="48" fg:w="2"/><text x="4.1493%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="3.8993%" y="517" width="0.1625%" height="15" fill="rgb(236,89,47)" fg:x="48" fg:w="2"/><text x="4.1493%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="3.8993%" y="501" width="0.1625%" height="15" fill="rgb(213,191,37)" fg:x="48" fg:w="2"/><text x="4.1493%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="3.8993%" y="485" width="0.1625%" height="15" fill="rgb(252,0,34)" fg:x="48" fg:w="2"/><text x="4.1493%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="3.8993%" y="469" width="0.1625%" height="15" fill="rgb(208,145,44)" fg:x="48" fg:w="2"/><text x="4.1493%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="3.8993%" y="453" width="0.1625%" height="15" fill="rgb(227,95,50)" fg:x="48" fg:w="2"/><text x="4.1493%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="3.8993%" y="437" width="0.1625%" height="15" fill="rgb(222,136,24)" fg:x="48" fg:w="2"/><text x="4.1493%" y="447.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="3.8993%" y="421" width="0.1625%" height="15" fill="rgb(218,105,10)" fg:x="48" fg:w="2"/><text x="4.1493%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="3.8993%" y="405" width="0.1625%" height="15" fill="rgb(216,65,28)" fg:x="48" fg:w="2"/><text x="4.1493%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0617%" y="581" width="0.0812%" height="15" fill="rgb(229,6,28)" fg:x="50" fg:w="1"/><text x="4.3117%" y="591.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (10 samples, 0.81%)</title><rect x="3.4119%" y="629" width="0.8123%" height="15" fill="rgb(222,160,42)" fg:x="42" fg:w="10"/><text x="3.6619%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.81%)</title><rect x="3.4119%" y="613" width="0.8123%" height="15" fill="rgb(235,83,49)" fg:x="42" fg:w="10"/><text x="3.6619%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.57%)</title><rect x="3.6556%" y="597" width="0.5686%" height="15" fill="rgb(236,86,36)" fg:x="45" fg:w="7"/><text x="3.9056%" y="607.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="4.1430%" y="581" width="0.0812%" height="15" fill="rgb(236,19,41)" fg:x="51" fg:w="1"/><text x="4.3930%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="4.1430%" y="565" width="0.0812%" height="15" fill="rgb(217,71,31)" fg:x="51" fg:w="1"/><text x="4.3930%" y="575.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="4.2242%" y="581" width="0.3249%" height="15" fill="rgb(236,209,25)" fg:x="52" fg:w="4"/><text x="4.4742%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="4.2242%" y="565" width="0.3249%" height="15" fill="rgb(247,104,21)" fg:x="52" fg:w="4"/><text x="4.4742%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="4.2242%" y="549" width="0.3249%" height="15" fill="rgb(243,80,38)" fg:x="52" fg:w="4"/><text x="4.4742%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="4.2242%" y="533" width="0.3249%" height="15" fill="rgb(232,109,38)" fg:x="52" fg:w="4"/><text x="4.4742%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="4.2242%" y="517" width="0.3249%" height="15" fill="rgb(212,177,53)" fg:x="52" fg:w="4"/><text x="4.4742%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="4.2242%" y="501" width="0.3249%" height="15" fill="rgb(227,30,34)" fg:x="52" fg:w="4"/><text x="4.4742%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="4.2242%" y="485" width="0.3249%" height="15" fill="rgb(205,175,25)" fg:x="52" fg:w="4"/><text x="4.4742%" y="495.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="4.2242%" y="469" width="0.3249%" height="15" fill="rgb(249,39,54)" fg:x="52" fg:w="4"/><text x="4.4742%" y="479.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (16 samples, 1.30%)</title><rect x="3.4119%" y="645" width="1.2998%" height="15" fill="rgb(215,54,37)" fg:x="42" fg:w="16"/><text x="3.6619%" y="655.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (6 samples, 0.49%)</title><rect x="4.2242%" y="629" width="0.4874%" height="15" fill="rgb(205,60,46)" fg:x="52" fg:w="6"/><text x="4.4742%" y="639.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="4.2242%" y="613" width="0.4874%" height="15" fill="rgb(238,89,29)" fg:x="52" fg:w="6"/><text x="4.4742%" y="623.50"></text></g><g><title>glob::fill_todo (6 samples, 0.49%)</title><rect x="4.2242%" y="597" width="0.4874%" height="15" fill="rgb(212,48,10)" fg:x="52" fg:w="6"/><text x="4.4742%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="4.5491%" y="581" width="0.1625%" height="15" fill="rgb(237,186,28)" fg:x="56" fg:w="2"/><text x="4.7991%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="4.5491%" y="565" width="0.1625%" height="15" fill="rgb(237,204,4)" fg:x="56" fg:w="2"/><text x="4.7991%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="4.5491%" y="549" width="0.1625%" height="15" fill="rgb(237,15,47)" fg:x="56" fg:w="2"/><text x="4.7991%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="4.5491%" y="533" width="0.1625%" height="15" fill="rgb(244,110,25)" fg:x="56" fg:w="2"/><text x="4.7991%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="4.5491%" y="517" width="0.1625%" height="15" fill="rgb(241,12,16)" fg:x="56" fg:w="2"/><text x="4.7991%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="4.5491%" y="501" width="0.1625%" height="15" fill="rgb(235,25,9)" fg:x="56" fg:w="2"/><text x="4.7991%" y="511.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="4.5491%" y="485" width="0.1625%" height="15" fill="rgb(245,159,19)" fg:x="56" fg:w="2"/><text x="4.7991%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (2 samples, 0.16%)</title><rect x="4.7116%" y="645" width="0.1625%" height="15" fill="rgb(236,63,32)" fg:x="58" fg:w="2"/><text x="4.9616%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="4.7929%" y="629" width="0.0812%" height="15" fill="rgb(235,32,52)" fg:x="59" fg:w="1"/><text x="5.0429%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::ArgumentType&gt; (1 samples, 0.08%)</title><rect x="4.7929%" y="613" width="0.0812%" height="15" fill="rgb(209,176,21)" fg:x="59" fg:w="1"/><text x="5.0429%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (34 samples, 2.76%)</title><rect x="2.1933%" y="661" width="2.7620%" height="15" fill="rgb(205,90,42)" fg:x="27" fg:w="34"/><text x="2.4433%" y="671.50">ke..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="4.8741%" y="645" width="0.0812%" height="15" fill="rgb(213,132,16)" fg:x="60" fg:w="1"/><text x="5.1241%" y="655.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="4.8741%" y="629" width="0.0812%" height="15" fill="rgb(232,11,22)" fg:x="60" fg:w="1"/><text x="5.1241%" y="639.50"></text></g><g><title>engine::session::Session::initialize (37 samples, 3.01%)</title><rect x="2.1121%" y="677" width="3.0057%" height="15" fill="rgb(248,167,41)" fg:x="26" fg:w="37"/><text x="2.3621%" y="687.50">eng..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="4.9553%" y="661" width="0.1625%" height="15" fill="rgb(209,127,6)" fg:x="61" fg:w="2"/><text x="5.2053%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.9553%" y="645" width="0.1625%" height="15" fill="rgb(246,210,34)" fg:x="61" fg:w="2"/><text x="5.2053%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="4.9553%" y="629" width="0.1625%" height="15" fill="rgb(238,165,13)" fg:x="61" fg:w="2"/><text x="5.2053%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.0366%" y="613" width="0.0812%" height="15" fill="rgb(233,98,15)" fg:x="62" fg:w="1"/><text x="5.2866%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.0366%" y="597" width="0.0812%" height="15" fill="rgb(215,215,51)" fg:x="62" fg:w="1"/><text x="5.2866%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (40 samples, 3.25%)</title><rect x="2.0309%" y="725" width="3.2494%" height="15" fill="rgb(217,161,25)" fg:x="25" fg:w="40"/><text x="2.2809%" y="735.50">&lt;en..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (40 samples, 3.25%)</title><rect x="2.0309%" y="709" width="3.2494%" height="15" fill="rgb(217,167,48)" fg:x="25" fg:w="40"/><text x="2.2809%" y="719.50">eng..</text></g><g><title>engine::session::Session::new (40 samples, 3.25%)</title><rect x="2.0309%" y="693" width="3.2494%" height="15" fill="rgb(205,163,34)" fg:x="25" fg:w="40"/><text x="2.2809%" y="703.50">eng..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="5.1178%" y="677" width="0.1625%" height="15" fill="rgb(241,197,31)" fg:x="63" fg:w="2"/><text x="5.3678%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="5.1178%" y="661" width="0.1625%" height="15" fill="rgb(225,123,11)" fg:x="63" fg:w="2"/><text x="5.3678%" y="671.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="5.1990%" y="645" width="0.0812%" height="15" fill="rgb(217,4,20)" fg:x="64" fg:w="1"/><text x="5.4490%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.3615%" y="709" width="0.0812%" height="15" fill="rgb(215,55,9)" fg:x="66" fg:w="1"/><text x="5.6115%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.3615%" y="693" width="0.0812%" height="15" fill="rgb(218,165,5)" fg:x="66" fg:w="1"/><text x="5.6115%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.3615%" y="677" width="0.0812%" height="15" fill="rgb(222,175,15)" fg:x="66" fg:w="1"/><text x="5.6115%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.3615%" y="661" width="0.0812%" height="15" fill="rgb(223,85,34)" fg:x="66" fg:w="1"/><text x="5.6115%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.3615%" y="645" width="0.0812%" height="15" fill="rgb(234,228,29)" fg:x="66" fg:w="1"/><text x="5.6115%" y="655.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="5.4427%" y="693" width="0.0812%" height="15" fill="rgb(239,7,28)" fg:x="67" fg:w="1"/><text x="5.6927%" y="703.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="5.4427%" y="677" width="0.0812%" height="15" fill="rgb(252,222,53)" fg:x="67" fg:w="1"/><text x="5.6927%" y="687.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="5.4427%" y="661" width="0.0812%" height="15" fill="rgb(232,146,44)" fg:x="67" fg:w="1"/><text x="5.6927%" y="671.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="5.4427%" y="645" width="0.0812%" height="15" fill="rgb(243,223,53)" fg:x="67" fg:w="1"/><text x="5.6927%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="5.4427%" y="629" width="0.0812%" height="15" fill="rgb(219,128,25)" fg:x="67" fg:w="1"/><text x="5.6927%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="5.4427%" y="613" width="0.0812%" height="15" fill="rgb(223,56,32)" fg:x="67" fg:w="1"/><text x="5.6927%" y="623.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="5.4427%" y="597" width="0.0812%" height="15" fill="rgb(237,41,3)" fg:x="67" fg:w="1"/><text x="5.6927%" y="607.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="5.4427%" y="581" width="0.0812%" height="15" fill="rgb(235,138,9)" fg:x="67" fg:w="1"/><text x="5.6927%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.5240%" y="597" width="0.0812%" height="15" fill="rgb(214,131,10)" fg:x="68" fg:w="1"/><text x="5.7740%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.5240%" y="581" width="0.0812%" height="15" fill="rgb(229,89,7)" fg:x="68" fg:w="1"/><text x="5.7740%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.5240%" y="565" width="0.0812%" height="15" fill="rgb(240,24,42)" fg:x="68" fg:w="1"/><text x="5.7740%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.6052%" y="581" width="0.0812%" height="15" fill="rgb(243,188,54)" fg:x="69" fg:w="1"/><text x="5.8552%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.6052%" y="565" width="0.0812%" height="15" fill="rgb(246,92,22)" fg:x="69" fg:w="1"/><text x="5.8552%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.6052%" y="549" width="0.0812%" height="15" fill="rgb(211,176,51)" fg:x="69" fg:w="1"/><text x="5.8552%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.6052%" y="533" width="0.0812%" height="15" fill="rgb(246,207,34)" fg:x="69" fg:w="1"/><text x="5.8552%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.6052%" y="517" width="0.0812%" height="15" fill="rgb(239,95,2)" fg:x="69" fg:w="1"/><text x="5.8552%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.6052%" y="501" width="0.0812%" height="15" fill="rgb(211,124,25)" fg:x="69" fg:w="1"/><text x="5.8552%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.6052%" y="485" width="0.0812%" height="15" fill="rgb(231,221,19)" fg:x="69" fg:w="1"/><text x="5.8552%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.7677%" y="533" width="0.0812%" height="15" fill="rgb(239,183,19)" fg:x="71" fg:w="1"/><text x="6.0177%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7677%" y="517" width="0.0812%" height="15" fill="rgb(221,130,29)" fg:x="71" fg:w="1"/><text x="6.0177%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.7677%" y="501" width="0.0812%" height="15" fill="rgb(206,130,36)" fg:x="71" fg:w="1"/><text x="6.0177%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.7677%" y="485" width="0.0812%" height="15" fill="rgb(215,70,19)" fg:x="71" fg:w="1"/><text x="6.0177%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="5.7677%" y="565" width="0.1625%" height="15" fill="rgb(244,16,43)" fg:x="71" fg:w="2"/><text x="6.0177%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.7677%" y="549" width="0.1625%" height="15" fill="rgb(222,115,32)" fg:x="71" fg:w="2"/><text x="6.0177%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.8489%" y="533" width="0.0812%" height="15" fill="rgb(247,48,25)" fg:x="72" fg:w="1"/><text x="6.0989%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.9301%" y="565" width="0.0812%" height="15" fill="rgb(226,180,51)" fg:x="73" fg:w="1"/><text x="6.1801%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.0926%" y="549" width="0.0812%" height="15" fill="rgb(217,142,42)" fg:x="75" fg:w="1"/><text x="6.3426%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="6.1738%" y="549" width="0.1625%" height="15" fill="rgb(220,178,3)" fg:x="76" fg:w="2"/><text x="6.4238%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.1738%" y="533" width="0.1625%" height="15" fill="rgb(217,221,4)" fg:x="76" fg:w="2"/><text x="6.4238%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.1738%" y="517" width="0.1625%" height="15" fill="rgb(237,63,43)" fg:x="76" fg:w="2"/><text x="6.4238%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.1738%" y="501" width="0.1625%" height="15" fill="rgb(220,57,8)" fg:x="76" fg:w="2"/><text x="6.4238%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.1738%" y="485" width="0.1625%" height="15" fill="rgb(254,186,27)" fg:x="76" fg:w="2"/><text x="6.4238%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="6.1738%" y="469" width="0.1625%" height="15" fill="rgb(251,57,28)" fg:x="76" fg:w="2"/><text x="6.4238%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="6.1738%" y="453" width="0.1625%" height="15" fill="rgb(215,228,0)" fg:x="76" fg:w="2"/><text x="6.4238%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="6.1738%" y="437" width="0.1625%" height="15" fill="rgb(237,218,39)" fg:x="76" fg:w="2"/><text x="6.4238%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="6.0114%" y="565" width="0.4062%" height="15" fill="rgb(207,2,54)" fg:x="74" fg:w="5"/><text x="6.2614%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.3363%" y="549" width="0.0812%" height="15" fill="rgb(232,76,50)" fg:x="78" fg:w="1"/><text x="6.5863%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.3363%" y="533" width="0.0812%" height="15" fill="rgb(211,85,31)" fg:x="78" fg:w="1"/><text x="6.5863%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.06%)</title><rect x="5.5240%" y="613" width="1.0561%" height="15" fill="rgb(223,210,27)" fg:x="68" fg:w="13"/><text x="5.7740%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.97%)</title><rect x="5.6052%" y="597" width="0.9748%" height="15" fill="rgb(254,36,8)" fg:x="69" fg:w="12"/><text x="5.8552%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.89%)</title><rect x="5.6864%" y="581" width="0.8936%" height="15" fill="rgb(213,4,25)" fg:x="70" fg:w="11"/><text x="5.9364%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.4175%" y="565" width="0.1625%" height="15" fill="rgb(224,2,39)" fg:x="79" fg:w="2"/><text x="6.6675%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.4988%" y="549" width="0.0812%" height="15" fill="rgb(208,8,39)" fg:x="80" fg:w="1"/><text x="6.7488%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="6.4988%" y="533" width="0.0812%" height="15" fill="rgb(216,226,3)" fg:x="80" fg:w="1"/><text x="6.7488%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="6.5800%" y="613" width="0.2437%" height="15" fill="rgb(249,139,31)" fg:x="81" fg:w="3"/><text x="6.8300%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="6.5800%" y="597" width="0.2437%" height="15" fill="rgb(242,170,35)" fg:x="81" fg:w="3"/><text x="6.8300%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="6.5800%" y="581" width="0.2437%" height="15" fill="rgb(238,14,9)" fg:x="81" fg:w="3"/><text x="6.8300%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.6613%" y="565" width="0.1625%" height="15" fill="rgb(251,81,46)" fg:x="82" fg:w="2"/><text x="6.9113%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.6613%" y="549" width="0.1625%" height="15" fill="rgb(230,23,4)" fg:x="82" fg:w="2"/><text x="6.9113%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.7425%" y="533" width="0.0812%" height="15" fill="rgb(211,85,25)" fg:x="83" fg:w="1"/><text x="6.9925%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.7425%" y="517" width="0.0812%" height="15" fill="rgb(252,23,31)" fg:x="83" fg:w="1"/><text x="6.9925%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="6.8237%" y="581" width="0.0812%" height="15" fill="rgb(234,163,38)" fg:x="84" fg:w="1"/><text x="7.0737%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="6.9050%" y="565" width="0.1625%" height="15" fill="rgb(210,190,50)" fg:x="85" fg:w="2"/><text x="7.1550%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.1487%" y="517" width="0.0812%" height="15" fill="rgb(228,158,3)" fg:x="88" fg:w="1"/><text x="7.3987%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.2299%" y="517" width="0.0812%" height="15" fill="rgb(216,130,0)" fg:x="89" fg:w="1"/><text x="7.4799%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.2299%" y="501" width="0.0812%" height="15" fill="rgb(224,184,10)" fg:x="89" fg:w="1"/><text x="7.4799%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.2299%" y="485" width="0.0812%" height="15" fill="rgb(214,202,18)" fg:x="89" fg:w="1"/><text x="7.4799%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.2299%" y="469" width="0.0812%" height="15" fill="rgb(213,229,54)" fg:x="89" fg:w="1"/><text x="7.4799%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.2299%" y="453" width="0.0812%" height="15" fill="rgb(246,120,0)" fg:x="89" fg:w="1"/><text x="7.4799%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.2299%" y="437" width="0.0812%" height="15" fill="rgb(237,6,15)" fg:x="89" fg:w="1"/><text x="7.4799%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.3111%" y="485" width="0.0812%" height="15" fill="rgb(252,156,15)" fg:x="90" fg:w="1"/><text x="7.5611%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.3111%" y="469" width="0.0812%" height="15" fill="rgb(249,78,18)" fg:x="90" fg:w="1"/><text x="7.5611%" y="479.50"></text></g><g><title>engine::session::Session::flush (26 samples, 2.11%)</title><rect x="5.4427%" y="709" width="2.1121%" height="15" fill="rgb(230,223,44)" fg:x="67" fg:w="26"/><text x="5.6927%" y="719.50">e..</text></g><g><title>engine::session::state::State::close (25 samples, 2.03%)</title><rect x="5.5240%" y="693" width="2.0309%" height="15" fill="rgb(230,222,32)" fg:x="68" fg:w="25"/><text x="5.7740%" y="703.50">e..</text></g><g><title>engine::session::state::State::flush_entities (25 samples, 2.03%)</title><rect x="5.5240%" y="677" width="2.0309%" height="15" fill="rgb(247,54,6)" fg:x="68" fg:w="25"/><text x="5.7740%" y="687.50">e..</text></g><g><title>core::iter::adapters::try_process (25 samples, 2.03%)</title><rect x="5.5240%" y="661" width="2.0309%" height="15" fill="rgb(247,115,45)" fg:x="68" fg:w="25"/><text x="5.7740%" y="671.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 2.03%)</title><rect x="5.5240%" y="645" width="2.0309%" height="15" fill="rgb(213,203,37)" fg:x="68" fg:w="25"/><text x="5.7740%" y="655.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (25 samples, 2.03%)</title><rect x="5.5240%" y="629" width="2.0309%" height="15" fill="rgb(248,188,18)" fg:x="68" fg:w="25"/><text x="5.7740%" y="639.50">e..</text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.73%)</title><rect x="6.8237%" y="613" width="0.7311%" height="15" fill="rgb(206,80,8)" fg:x="84" fg:w="9"/><text x="7.0737%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.73%)</title><rect x="6.8237%" y="597" width="0.7311%" height="15" fill="rgb(245,217,31)" fg:x="84" fg:w="9"/><text x="7.0737%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="6.9050%" y="581" width="0.6499%" height="15" fill="rgb(220,193,15)" fg:x="85" fg:w="8"/><text x="7.1550%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="7.0674%" y="565" width="0.4874%" height="15" fill="rgb(226,7,19)" fg:x="87" fg:w="6"/><text x="7.3174%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.41%)</title><rect x="7.1487%" y="549" width="0.4062%" height="15" fill="rgb(222,145,31)" fg:x="88" fg:w="5"/><text x="7.3987%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="7.1487%" y="533" width="0.4062%" height="15" fill="rgb(241,193,36)" fg:x="88" fg:w="5"/><text x="7.3987%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="7.3111%" y="517" width="0.2437%" height="15" fill="rgb(225,123,33)" fg:x="90" fg:w="3"/><text x="7.5611%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="7.3111%" y="501" width="0.2437%" height="15" fill="rgb(246,136,38)" fg:x="90" fg:w="3"/><text x="7.5611%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.3924%" y="485" width="0.1625%" height="15" fill="rgb(243,56,24)" fg:x="91" fg:w="2"/><text x="7.6424%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="7.3924%" y="469" width="0.1625%" height="15" fill="rgb(215,147,2)" fg:x="91" fg:w="2"/><text x="7.6424%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.4736%" y="453" width="0.0812%" height="15" fill="rgb(209,155,27)" fg:x="92" fg:w="1"/><text x="7.7236%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.4736%" y="437" width="0.0812%" height="15" fill="rgb(222,177,11)" fg:x="92" fg:w="1"/><text x="7.7236%" y="447.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="7.5548%" y="693" width="0.1625%" height="15" fill="rgb(212,227,15)" fg:x="93" fg:w="2"/><text x="7.8048%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="7.6361%" y="677" width="0.0812%" height="15" fill="rgb(214,138,20)" fg:x="94" fg:w="1"/><text x="7.8861%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6361%" y="661" width="0.0812%" height="15" fill="rgb(221,170,31)" fg:x="94" fg:w="1"/><text x="7.8861%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6361%" y="645" width="0.0812%" height="15" fill="rgb(253,207,5)" fg:x="94" fg:w="1"/><text x="7.8861%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6361%" y="629" width="0.0812%" height="15" fill="rgb(212,64,37)" fg:x="94" fg:w="1"/><text x="7.8861%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.6361%" y="613" width="0.0812%" height="15" fill="rgb(208,113,51)" fg:x="94" fg:w="1"/><text x="7.8861%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.6361%" y="597" width="0.0812%" height="15" fill="rgb(237,15,5)" fg:x="94" fg:w="1"/><text x="7.8861%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.6361%" y="581" width="0.0812%" height="15" fill="rgb(238,33,18)" fg:x="94" fg:w="1"/><text x="7.8861%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.6361%" y="565" width="0.0812%" height="15" fill="rgb(253,206,50)" fg:x="94" fg:w="1"/><text x="7.8861%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.6361%" y="549" width="0.0812%" height="15" fill="rgb(242,158,43)" fg:x="94" fg:w="1"/><text x="7.8861%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="7.6361%" y="533" width="0.0812%" height="15" fill="rgb(213,125,27)" fg:x="94" fg:w="1"/><text x="7.8861%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="7.6361%" y="517" width="0.0812%" height="15" fill="rgb(233,161,31)" fg:x="94" fg:w="1"/><text x="7.8861%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="7.7985%" y="677" width="0.0812%" height="15" fill="rgb(218,135,6)" fg:x="96" fg:w="1"/><text x="8.0485%" y="687.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="7.8798%" y="677" width="0.0812%" height="15" fill="rgb(222,73,53)" fg:x="97" fg:w="1"/><text x="8.1298%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="7.8798%" y="661" width="0.0812%" height="15" fill="rgb(229,66,53)" fg:x="97" fg:w="1"/><text x="8.1298%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="7.8798%" y="645" width="0.0812%" height="15" fill="rgb(208,128,19)" fg:x="97" fg:w="1"/><text x="8.1298%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.8798%" y="629" width="0.0812%" height="15" fill="rgb(235,70,27)" fg:x="97" fg:w="1"/><text x="8.1298%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="7.8798%" y="613" width="0.0812%" height="15" fill="rgb(241,130,30)" fg:x="97" fg:w="1"/><text x="8.1298%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="7.9610%" y="629" width="0.0812%" height="15" fill="rgb(222,57,48)" fg:x="98" fg:w="1"/><text x="8.2110%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.9610%" y="613" width="0.0812%" height="15" fill="rgb(225,204,29)" fg:x="98" fg:w="1"/><text x="8.2110%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.9610%" y="597" width="0.0812%" height="15" fill="rgb(240,196,35)" fg:x="98" fg:w="1"/><text x="8.2110%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.9610%" y="581" width="0.0812%" height="15" fill="rgb(215,150,16)" fg:x="98" fg:w="1"/><text x="8.2110%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.9610%" y="565" width="0.0812%" height="15" fill="rgb(209,170,13)" fg:x="98" fg:w="1"/><text x="8.2110%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="7.9610%" y="549" width="0.0812%" height="15" fill="rgb(235,75,31)" fg:x="98" fg:w="1"/><text x="8.2110%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="8.0422%" y="629" width="0.0812%" height="15" fill="rgb(252,1,47)" fg:x="99" fg:w="1"/><text x="8.2922%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="7.9610%" y="661" width="0.2437%" height="15" fill="rgb(241,2,36)" fg:x="98" fg:w="3"/><text x="8.2110%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="7.9610%" y="645" width="0.2437%" height="15" fill="rgb(236,191,4)" fg:x="98" fg:w="3"/><text x="8.2110%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1235%" y="629" width="0.0812%" height="15" fill="rgb(212,65,35)" fg:x="100" fg:w="1"/><text x="8.3735%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1235%" y="613" width="0.0812%" height="15" fill="rgb(209,49,33)" fg:x="100" fg:w="1"/><text x="8.3735%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1235%" y="597" width="0.0812%" height="15" fill="rgb(208,36,46)" fg:x="100" fg:w="1"/><text x="8.3735%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1235%" y="581" width="0.0812%" height="15" fill="rgb(210,125,2)" fg:x="100" fg:w="1"/><text x="8.3735%" y="591.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="8.2047%" y="661" width="0.0812%" height="15" fill="rgb(225,62,6)" fg:x="101" fg:w="1"/><text x="8.4547%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.2047%" y="645" width="0.0812%" height="15" fill="rgb(210,54,27)" fg:x="101" fg:w="1"/><text x="8.4547%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="8.2047%" y="629" width="0.0812%" height="15" fill="rgb(249,189,52)" fg:x="101" fg:w="1"/><text x="8.4547%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.2047%" y="613" width="0.0812%" height="15" fill="rgb(225,134,40)" fg:x="101" fg:w="1"/><text x="8.4547%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="8.2047%" y="597" width="0.0812%" height="15" fill="rgb(206,13,37)" fg:x="101" fg:w="1"/><text x="8.4547%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2859%" y="629" width="0.0812%" height="15" fill="rgb(232,114,28)" fg:x="102" fg:w="1"/><text x="8.5359%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.2859%" y="613" width="0.0812%" height="15" fill="rgb(253,215,8)" fg:x="102" fg:w="1"/><text x="8.5359%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.2859%" y="597" width="0.0812%" height="15" fill="rgb(254,64,19)" fg:x="102" fg:w="1"/><text x="8.5359%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.3672%" y="549" width="0.0812%" height="15" fill="rgb(242,18,46)" fg:x="103" fg:w="1"/><text x="8.6172%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="8.3672%" y="613" width="0.1625%" height="15" fill="rgb(239,192,30)" fg:x="103" fg:w="2"/><text x="8.6172%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="8.3672%" y="597" width="0.1625%" height="15" fill="rgb(232,73,14)" fg:x="103" fg:w="2"/><text x="8.6172%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="8.3672%" y="581" width="0.1625%" height="15" fill="rgb(225,51,9)" fg:x="103" fg:w="2"/><text x="8.6172%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="8.3672%" y="565" width="0.1625%" height="15" fill="rgb(242,217,54)" fg:x="103" fg:w="2"/><text x="8.6172%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4484%" y="549" width="0.0812%" height="15" fill="rgb(216,93,3)" fg:x="104" fg:w="1"/><text x="8.6984%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.4484%" y="533" width="0.0812%" height="15" fill="rgb(230,119,33)" fg:x="104" fg:w="1"/><text x="8.6984%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.4484%" y="517" width="0.0812%" height="15" fill="rgb(238,170,27)" fg:x="104" fg:w="1"/><text x="8.6984%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (11 samples, 0.89%)</title><rect x="7.7173%" y="693" width="0.8936%" height="15" fill="rgb(229,8,2)" fg:x="95" fg:w="11"/><text x="7.9673%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (8 samples, 0.65%)</title><rect x="7.9610%" y="677" width="0.6499%" height="15" fill="rgb(205,214,42)" fg:x="98" fg:w="8"/><text x="8.2110%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="8.2859%" y="661" width="0.3249%" height="15" fill="rgb(245,113,1)" fg:x="102" fg:w="4"/><text x="8.5359%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="8.2859%" y="645" width="0.3249%" height="15" fill="rgb(252,50,2)" fg:x="102" fg:w="4"/><text x="8.5359%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="8.3672%" y="629" width="0.2437%" height="15" fill="rgb(225,122,24)" fg:x="103" fg:w="3"/><text x="8.6172%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.5297%" y="613" width="0.0812%" height="15" fill="rgb(234,129,31)" fg:x="105" fg:w="1"/><text x="8.7797%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.6109%" y="661" width="0.0812%" height="15" fill="rgb(219,177,4)" fg:x="106" fg:w="1"/><text x="8.8609%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.6109%" y="645" width="0.0812%" height="15" fill="rgb(225,142,27)" fg:x="106" fg:w="1"/><text x="8.8609%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (15 samples, 1.22%)</title><rect x="7.5548%" y="709" width="1.2185%" height="15" fill="rgb(205,107,51)" fg:x="93" fg:w="15"/><text x="7.8048%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="8.6109%" y="693" width="0.1625%" height="15" fill="rgb(236,223,15)" fg:x="106" fg:w="2"/><text x="8.8609%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.6109%" y="677" width="0.1625%" height="15" fill="rgb(235,133,11)" fg:x="106" fg:w="2"/><text x="8.8609%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.6921%" y="661" width="0.0812%" height="15" fill="rgb(247,172,13)" fg:x="107" fg:w="1"/><text x="8.9421%" y="671.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="8.7734%" y="677" width="0.1625%" height="15" fill="rgb(233,191,41)" fg:x="108" fg:w="2"/><text x="9.0234%" y="687.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="8.8546%" y="661" width="0.0812%" height="15" fill="rgb(250,65,16)" fg:x="109" fg:w="1"/><text x="9.1046%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="8.8546%" y="645" width="0.0812%" height="15" fill="rgb(206,10,27)" fg:x="109" fg:w="1"/><text x="9.1046%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="8.8546%" y="629" width="0.0812%" height="15" fill="rgb(212,96,22)" fg:x="109" fg:w="1"/><text x="9.1046%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="8.8546%" y="613" width="0.0812%" height="15" fill="rgb(206,50,0)" fg:x="109" fg:w="1"/><text x="9.1046%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="8.8546%" y="597" width="0.0812%" height="15" fill="rgb(249,105,52)" fg:x="109" fg:w="1"/><text x="9.1046%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.8546%" y="581" width="0.0812%" height="15" fill="rgb(216,93,51)" fg:x="109" fg:w="1"/><text x="9.1046%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.8546%" y="565" width="0.0812%" height="15" fill="rgb(217,172,13)" fg:x="109" fg:w="1"/><text x="9.1046%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="8.9358%" y="645" width="0.0812%" height="15" fill="rgb(235,199,38)" fg:x="110" fg:w="1"/><text x="9.1858%" y="655.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (5 samples, 0.41%)</title><rect x="8.7734%" y="709" width="0.4062%" height="15" fill="rgb(221,97,33)" fg:x="108" fg:w="5"/><text x="9.0234%" y="719.50"></text></g><g><title>plugins_core::tools::set_quantity (5 samples, 0.41%)</title><rect x="8.7734%" y="693" width="0.4062%" height="15" fill="rgb(205,156,50)" fg:x="108" fg:w="5"/><text x="9.0234%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="8.9358%" y="677" width="0.2437%" height="15" fill="rgb(215,142,19)" fg:x="110" fg:w="3"/><text x="9.1858%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (3 samples, 0.24%)</title><rect x="8.9358%" y="661" width="0.2437%" height="15" fill="rgb(232,170,7)" fg:x="110" fg:w="3"/><text x="9.1858%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="9.0171%" y="645" width="0.1625%" height="15" fill="rgb(223,50,17)" fg:x="111" fg:w="2"/><text x="9.2671%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (2 samples, 0.16%)</title><rect x="9.0171%" y="629" width="0.1625%" height="15" fill="rgb(230,103,46)" fg:x="111" fg:w="2"/><text x="9.2671%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="9.0171%" y="613" width="0.1625%" height="15" fill="rgb(254,30,34)" fg:x="111" fg:w="2"/><text x="9.2671%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="9.0171%" y="597" width="0.1625%" height="15" fill="rgb(235,198,1)" fg:x="111" fg:w="2"/><text x="9.2671%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="9.0171%" y="581" width="0.1625%" height="15" fill="rgb(217,105,47)" fg:x="111" fg:w="2"/><text x="9.2671%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.0983%" y="565" width="0.0812%" height="15" fill="rgb(231,18,12)" fg:x="112" fg:w="1"/><text x="9.3483%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.0983%" y="549" width="0.0812%" height="15" fill="rgb(218,196,1)" fg:x="112" fg:w="1"/><text x="9.3483%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.1795%" y="597" width="0.0812%" height="15" fill="rgb(210,32,3)" fg:x="113" fg:w="1"/><text x="9.4295%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.1795%" y="581" width="0.0812%" height="15" fill="rgb(227,178,30)" fg:x="113" fg:w="1"/><text x="9.4295%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="9.1795%" y="645" width="0.1625%" height="15" fill="rgb(231,140,27)" fg:x="113" fg:w="2"/><text x="9.4295%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="9.1795%" y="629" width="0.1625%" height="15" fill="rgb(206,66,35)" fg:x="113" fg:w="2"/><text x="9.4295%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="9.1795%" y="613" width="0.1625%" height="15" fill="rgb(212,34,2)" fg:x="113" fg:w="2"/><text x="9.4295%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.2608%" y="597" width="0.0812%" height="15" fill="rgb(207,201,33)" fg:x="114" fg:w="1"/><text x="9.5108%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.2608%" y="581" width="0.0812%" height="15" fill="rgb(221,135,32)" fg:x="114" fg:w="1"/><text x="9.5108%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.2608%" y="565" width="0.0812%" height="15" fill="rgb(206,77,31)" fg:x="114" fg:w="1"/><text x="9.5108%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.2608%" y="549" width="0.0812%" height="15" fill="rgb(252,198,50)" fg:x="114" fg:w="1"/><text x="9.5108%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.2608%" y="533" width="0.0812%" height="15" fill="rgb(206,79,27)" fg:x="114" fg:w="1"/><text x="9.5108%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="9.2608%" y="517" width="0.0812%" height="15" fill="rgb(228,108,9)" fg:x="114" fg:w="1"/><text x="9.5108%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="9.2608%" y="501" width="0.0812%" height="15" fill="rgb(213,9,39)" fg:x="114" fg:w="1"/><text x="9.5108%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (3 samples, 0.24%)</title><rect x="9.1795%" y="709" width="0.2437%" height="15" fill="rgb(252,51,13)" fg:x="113" fg:w="3"/><text x="9.4295%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="9.1795%" y="693" width="0.2437%" height="15" fill="rgb(218,202,39)" fg:x="113" fg:w="3"/><text x="9.4295%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="9.1795%" y="677" width="0.2437%" height="15" fill="rgb(214,122,21)" fg:x="113" fg:w="3"/><text x="9.4295%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="9.1795%" y="661" width="0.2437%" height="15" fill="rgb(217,205,48)" fg:x="113" fg:w="3"/><text x="9.4295%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="9.3420%" y="645" width="0.0812%" height="15" fill="rgb(230,216,13)" fg:x="115" fg:w="1"/><text x="9.5920%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.3420%" y="629" width="0.0812%" height="15" fill="rgb(249,118,4)" fg:x="115" fg:w="1"/><text x="9.5920%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.3420%" y="613" width="0.0812%" height="15" fill="rgb(212,207,40)" fg:x="115" fg:w="1"/><text x="9.5920%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.3420%" y="597" width="0.0812%" height="15" fill="rgb(217,156,26)" fg:x="115" fg:w="1"/><text x="9.5920%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.3420%" y="581" width="0.0812%" height="15" fill="rgb(226,86,34)" fg:x="115" fg:w="1"/><text x="9.5920%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.3420%" y="565" width="0.0812%" height="15" fill="rgb(217,111,30)" fg:x="115" fg:w="1"/><text x="9.5920%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.3420%" y="549" width="0.0812%" height="15" fill="rgb(228,64,18)" fg:x="115" fg:w="1"/><text x="9.5920%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.3420%" y="533" width="0.0812%" height="15" fill="rgb(254,217,48)" fg:x="115" fg:w="1"/><text x="9.5920%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.3420%" y="517" width="0.0812%" height="15" fill="rgb(226,156,48)" fg:x="115" fg:w="1"/><text x="9.5920%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.3420%" y="501" width="0.0812%" height="15" fill="rgb(236,168,20)" fg:x="115" fg:w="1"/><text x="9.5920%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.3420%" y="485" width="0.0812%" height="15" fill="rgb(239,210,33)" fg:x="115" fg:w="1"/><text x="9.5920%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.3420%" y="469" width="0.0812%" height="15" fill="rgb(242,85,17)" fg:x="115" fg:w="1"/><text x="9.5920%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.3420%" y="453" width="0.0812%" height="15" fill="rgb(221,196,15)" fg:x="115" fg:w="1"/><text x="9.5920%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.3420%" y="437" width="0.0812%" height="15" fill="rgb(249,76,21)" fg:x="115" fg:w="1"/><text x="9.5920%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.3420%" y="421" width="0.0812%" height="15" fill="rgb(243,67,29)" fg:x="115" fg:w="1"/><text x="9.5920%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.3420%" y="405" width="0.0812%" height="15" fill="rgb(240,159,2)" fg:x="115" fg:w="1"/><text x="9.5920%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.3420%" y="389" width="0.0812%" height="15" fill="rgb(244,64,3)" fg:x="115" fg:w="1"/><text x="9.5920%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="9.5045%" y="693" width="0.0812%" height="15" fill="rgb(220,86,40)" fg:x="117" fg:w="1"/><text x="9.7545%" y="703.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="9.5045%" y="677" width="0.0812%" height="15" fill="rgb(222,194,51)" fg:x="117" fg:w="1"/><text x="9.7545%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.5045%" y="661" width="0.0812%" height="15" fill="rgb(207,154,19)" fg:x="117" fg:w="1"/><text x="9.7545%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="9.5857%" y="693" width="0.0812%" height="15" fill="rgb(206,178,36)" fg:x="118" fg:w="1"/><text x="9.8357%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="9.5857%" y="677" width="0.0812%" height="15" fill="rgb(218,8,24)" fg:x="118" fg:w="1"/><text x="9.8357%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="9.5857%" y="661" width="0.0812%" height="15" fill="rgb(226,83,41)" fg:x="118" fg:w="1"/><text x="9.8357%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="9.5857%" y="645" width="0.0812%" height="15" fill="rgb(224,23,22)" fg:x="118" fg:w="1"/><text x="9.8357%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="9.5857%" y="629" width="0.0812%" height="15" fill="rgb(218,198,45)" fg:x="118" fg:w="1"/><text x="9.8357%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="9.5857%" y="613" width="0.0812%" height="15" fill="rgb(249,147,41)" fg:x="118" fg:w="1"/><text x="9.8357%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.5857%" y="597" width="0.0812%" height="15" fill="rgb(244,224,13)" fg:x="118" fg:w="1"/><text x="9.8357%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.5857%" y="581" width="0.0812%" height="15" fill="rgb(225,97,27)" fg:x="118" fg:w="1"/><text x="9.8357%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.5857%" y="565" width="0.0812%" height="15" fill="rgb(254,64,0)" fg:x="118" fg:w="1"/><text x="9.8357%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.5857%" y="549" width="0.0812%" height="15" fill="rgb(208,130,43)" fg:x="118" fg:w="1"/><text x="9.8357%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="9.6669%" y="677" width="0.0812%" height="15" fill="rgb(247,91,25)" fg:x="119" fg:w="1"/><text x="9.9169%" y="687.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.8294%" y="565" width="0.0812%" height="15" fill="rgb(215,218,42)" fg:x="121" fg:w="1"/><text x="10.0794%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.8294%" y="549" width="0.0812%" height="15" fill="rgb(233,9,24)" fg:x="121" fg:w="1"/><text x="10.0794%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.8294%" y="533" width="0.0812%" height="15" fill="rgb(252,105,38)" fg:x="121" fg:w="1"/><text x="10.0794%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.9106%" y="549" width="0.0812%" height="15" fill="rgb(225,40,49)" fg:x="122" fg:w="1"/><text x="10.1606%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.9106%" y="533" width="0.0812%" height="15" fill="rgb(232,196,19)" fg:x="122" fg:w="1"/><text x="10.1606%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.9106%" y="517" width="0.0812%" height="15" fill="rgb(207,35,15)" fg:x="122" fg:w="1"/><text x="10.1606%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.9919%" y="501" width="0.0812%" height="15" fill="rgb(238,68,36)" fg:x="123" fg:w="1"/><text x="10.2419%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.0731%" y="469" width="0.0812%" height="15" fill="rgb(205,158,20)" fg:x="124" fg:w="1"/><text x="10.3231%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.0731%" y="453" width="0.0812%" height="15" fill="rgb(232,32,22)" fg:x="124" fg:w="1"/><text x="10.3231%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.0731%" y="437" width="0.0812%" height="15" fill="rgb(210,169,6)" fg:x="124" fg:w="1"/><text x="10.3231%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.0731%" y="421" width="0.0812%" height="15" fill="rgb(229,28,12)" fg:x="124" fg:w="1"/><text x="10.3231%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="9.9919%" y="533" width="0.2437%" height="15" fill="rgb(229,78,10)" fg:x="123" fg:w="3"/><text x="10.2419%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="9.9919%" y="517" width="0.2437%" height="15" fill="rgb(223,139,54)" fg:x="123" fg:w="3"/><text x="10.2419%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="10.0731%" y="501" width="0.1625%" height="15" fill="rgb(207,110,4)" fg:x="124" fg:w="2"/><text x="10.3231%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="10.0731%" y="485" width="0.1625%" height="15" fill="rgb(248,30,41)" fg:x="124" fg:w="2"/><text x="10.3231%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1543%" y="469" width="0.0812%" height="15" fill="rgb(235,54,25)" fg:x="125" fg:w="1"/><text x="10.4043%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.1543%" y="453" width="0.0812%" height="15" fill="rgb(213,107,41)" fg:x="125" fg:w="1"/><text x="10.4043%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.1543%" y="437" width="0.0812%" height="15" fill="rgb(237,102,9)" fg:x="125" fg:w="1"/><text x="10.4043%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.1543%" y="421" width="0.0812%" height="15" fill="rgb(252,137,49)" fg:x="125" fg:w="1"/><text x="10.4043%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.1543%" y="405" width="0.0812%" height="15" fill="rgb(233,202,33)" fg:x="125" fg:w="1"/><text x="10.4043%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.3981%" y="517" width="0.0812%" height="15" fill="rgb(223,14,51)" fg:x="128" fg:w="1"/><text x="10.6481%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.3981%" y="501" width="0.0812%" height="15" fill="rgb(248,70,23)" fg:x="128" fg:w="1"/><text x="10.6481%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.3981%" y="485" width="0.0812%" height="15" fill="rgb(209,207,47)" fg:x="128" fg:w="1"/><text x="10.6481%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.3981%" y="469" width="0.0812%" height="15" fill="rgb(245,124,2)" fg:x="128" fg:w="1"/><text x="10.6481%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.3981%" y="453" width="0.0812%" height="15" fill="rgb(249,208,11)" fg:x="128" fg:w="1"/><text x="10.6481%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.3981%" y="437" width="0.0812%" height="15" fill="rgb(247,112,7)" fg:x="128" fg:w="1"/><text x="10.6481%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.3981%" y="421" width="0.0812%" height="15" fill="rgb(209,192,31)" fg:x="128" fg:w="1"/><text x="10.6481%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.4793%" y="517" width="0.0812%" height="15" fill="rgb(236,55,19)" fg:x="129" fg:w="1"/><text x="10.7293%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.4793%" y="501" width="0.0812%" height="15" fill="rgb(252,89,41)" fg:x="129" fg:w="1"/><text x="10.7293%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.4793%" y="485" width="0.0812%" height="15" fill="rgb(220,172,14)" fg:x="129" fg:w="1"/><text x="10.7293%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.4793%" y="469" width="0.0812%" height="15" fill="rgb(252,65,2)" fg:x="129" fg:w="1"/><text x="10.7293%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.4793%" y="453" width="0.0812%" height="15" fill="rgb(250,20,8)" fg:x="129" fg:w="1"/><text x="10.7293%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.4793%" y="437" width="0.0812%" height="15" fill="rgb(234,149,13)" fg:x="129" fg:w="1"/><text x="10.7293%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.4793%" y="421" width="0.0812%" height="15" fill="rgb(223,219,12)" fg:x="129" fg:w="1"/><text x="10.7293%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.4793%" y="405" width="0.0812%" height="15" fill="rgb(234,13,49)" fg:x="129" fg:w="1"/><text x="10.7293%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="10.2356%" y="533" width="0.4062%" height="15" fill="rgb(214,41,25)" fg:x="126" fg:w="5"/><text x="10.4856%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.5605%" y="517" width="0.0812%" height="15" fill="rgb(232,198,52)" fg:x="130" fg:w="1"/><text x="10.8105%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.5605%" y="501" width="0.0812%" height="15" fill="rgb(236,111,46)" fg:x="130" fg:w="1"/><text x="10.8105%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="9.9919%" y="549" width="0.7311%" height="15" fill="rgb(253,30,20)" fg:x="123" fg:w="9"/><text x="10.2419%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.6418%" y="533" width="0.0812%" height="15" fill="rgb(247,141,17)" fg:x="131" fg:w="1"/><text x="10.8918%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.06%)</title><rect x="9.8294%" y="581" width="1.0561%" height="15" fill="rgb(214,195,21)" fg:x="121" fg:w="13"/><text x="10.0794%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.97%)</title><rect x="9.9106%" y="565" width="0.9748%" height="15" fill="rgb(214,98,12)" fg:x="122" fg:w="12"/><text x="10.1606%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.7230%" y="549" width="0.1625%" height="15" fill="rgb(239,4,26)" fg:x="132" fg:w="2"/><text x="10.9730%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.7230%" y="533" width="0.1625%" height="15" fill="rgb(234,210,35)" fg:x="132" fg:w="2"/><text x="10.9730%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.7230%" y="517" width="0.1625%" height="15" fill="rgb(252,178,27)" fg:x="132" fg:w="2"/><text x="10.9730%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.8042%" y="501" width="0.0812%" height="15" fill="rgb(217,50,1)" fg:x="133" fg:w="1"/><text x="11.0542%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.8042%" y="485" width="0.0812%" height="15" fill="rgb(233,137,5)" fg:x="133" fg:w="1"/><text x="11.0542%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.8042%" y="469" width="0.0812%" height="15" fill="rgb(217,227,25)" fg:x="133" fg:w="1"/><text x="11.0542%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.8855%" y="501" width="0.0812%" height="15" fill="rgb(242,89,38)" fg:x="134" fg:w="1"/><text x="11.1355%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.8855%" y="581" width="0.1625%" height="15" fill="rgb(212,190,30)" fg:x="134" fg:w="2"/><text x="11.1355%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="10.8855%" y="565" width="0.1625%" height="15" fill="rgb(222,120,8)" fg:x="134" fg:w="2"/><text x="11.1355%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.8855%" y="549" width="0.1625%" height="15" fill="rgb(227,181,9)" fg:x="134" fg:w="2"/><text x="11.1355%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.8855%" y="533" width="0.1625%" height="15" fill="rgb(222,125,29)" fg:x="134" fg:w="2"/><text x="11.1355%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.8855%" y="517" width="0.1625%" height="15" fill="rgb(215,153,31)" fg:x="134" fg:w="2"/><text x="11.1355%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.9667%" y="501" width="0.0812%" height="15" fill="rgb(228,77,30)" fg:x="135" fg:w="1"/><text x="11.2167%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="11.0479%" y="565" width="0.0812%" height="15" fill="rgb(226,110,9)" fg:x="136" fg:w="1"/><text x="11.2979%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.0479%" y="549" width="0.0812%" height="15" fill="rgb(219,111,7)" fg:x="136" fg:w="1"/><text x="11.2979%" y="559.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPath as core::convert::From&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::from (1 samples, 0.08%)</title><rect x="11.0479%" y="533" width="0.0812%" height="15" fill="rgb(229,167,25)" fg:x="136" fg:w="1"/><text x="11.2979%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.0479%" y="517" width="0.0812%" height="15" fill="rgb(209,77,43)" fg:x="136" fg:w="1"/><text x="11.2979%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1292%" y="533" width="0.0812%" height="15" fill="rgb(233,70,39)" fg:x="137" fg:w="1"/><text x="11.3792%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2104%" y="533" width="0.0812%" height="15" fill="rgb(207,171,44)" fg:x="138" fg:w="1"/><text x="11.4604%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.2104%" y="517" width="0.0812%" height="15" fill="rgb(244,91,6)" fg:x="138" fg:w="1"/><text x="11.4604%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.2916%" y="485" width="0.0812%" height="15" fill="rgb(234,136,12)" fg:x="139" fg:w="1"/><text x="11.5416%" y="495.50"></text></g><g><title>engine::session::Session::flush (23 samples, 1.87%)</title><rect x="9.6669%" y="693" width="1.8684%" height="15" fill="rgb(216,210,38)" fg:x="119" fg:w="23"/><text x="9.9169%" y="703.50">e..</text></g><g><title>engine::session::Session::save_changes (22 samples, 1.79%)</title><rect x="9.7482%" y="677" width="1.7872%" height="15" fill="rgb(241,227,7)" fg:x="120" fg:w="22"/><text x="9.9982%" y="687.50">e..</text></g><g><title>engine::session::state::State::close (22 samples, 1.79%)</title><rect x="9.7482%" y="661" width="1.7872%" height="15" fill="rgb(241,222,11)" fg:x="120" fg:w="22"/><text x="9.9982%" y="671.50">e..</text></g><g><title>engine::session::state::State::flush_entities (21 samples, 1.71%)</title><rect x="9.8294%" y="645" width="1.7059%" height="15" fill="rgb(246,86,18)" fg:x="121" fg:w="21"/><text x="10.0794%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (21 samples, 1.71%)</title><rect x="9.8294%" y="629" width="1.7059%" height="15" fill="rgb(224,151,49)" fg:x="121" fg:w="21"/><text x="10.0794%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 1.71%)</title><rect x="9.8294%" y="613" width="1.7059%" height="15" fill="rgb(235,4,41)" fg:x="121" fg:w="21"/><text x="10.0794%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (21 samples, 1.71%)</title><rect x="9.8294%" y="597" width="1.7059%" height="15" fill="rgb(218,30,52)" fg:x="121" fg:w="21"/><text x="10.0794%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.49%)</title><rect x="11.0479%" y="581" width="0.4874%" height="15" fill="rgb(205,124,51)" fg:x="136" fg:w="6"/><text x="11.2979%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.41%)</title><rect x="11.1292%" y="565" width="0.4062%" height="15" fill="rgb(237,126,51)" fg:x="137" fg:w="5"/><text x="11.3792%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="11.1292%" y="549" width="0.4062%" height="15" fill="rgb(225,32,46)" fg:x="137" fg:w="5"/><text x="11.3792%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="11.2916%" y="533" width="0.2437%" height="15" fill="rgb(251,60,49)" fg:x="139" fg:w="3"/><text x="11.5416%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="11.2916%" y="517" width="0.2437%" height="15" fill="rgb(234,18,23)" fg:x="139" fg:w="3"/><text x="11.5416%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="11.2916%" y="501" width="0.2437%" height="15" fill="rgb(234,25,23)" fg:x="139" fg:w="3"/><text x="11.5416%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="11.3729%" y="485" width="0.1625%" height="15" fill="rgb(210,43,52)" fg:x="140" fg:w="2"/><text x="11.6229%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="11.3729%" y="469" width="0.1625%" height="15" fill="rgb(237,198,21)" fg:x="140" fg:w="2"/><text x="11.6229%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="11.3729%" y="453" width="0.1625%" height="15" fill="rgb(211,20,34)" fg:x="140" fg:w="2"/><text x="11.6229%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="11.4541%" y="437" width="0.0812%" height="15" fill="rgb(221,155,50)" fg:x="141" fg:w="1"/><text x="11.7041%" y="447.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.5353%" y="677" width="0.0812%" height="15" fill="rgb(213,214,53)" fg:x="142" fg:w="1"/><text x="11.7853%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.5353%" y="661" width="0.0812%" height="15" fill="rgb(215,229,48)" fg:x="142" fg:w="1"/><text x="11.7853%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.5353%" y="645" width="0.0812%" height="15" fill="rgb(243,88,5)" fg:x="142" fg:w="1"/><text x="11.7853%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.5353%" y="629" width="0.0812%" height="15" fill="rgb(216,199,8)" fg:x="142" fg:w="1"/><text x="11.7853%" y="639.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="11.5353%" y="613" width="0.0812%" height="15" fill="rgb(241,22,4)" fg:x="142" fg:w="1"/><text x="11.7853%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.6166%" y="613" width="0.0812%" height="15" fill="rgb(209,190,22)" fg:x="143" fg:w="1"/><text x="11.8666%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6166%" y="597" width="0.0812%" height="15" fill="rgb(251,138,45)" fg:x="143" fg:w="1"/><text x="11.8666%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="11.6166%" y="661" width="0.1625%" height="15" fill="rgb(219,111,22)" fg:x="143" fg:w="2"/><text x="11.8666%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.6166%" y="645" width="0.1625%" height="15" fill="rgb(253,29,49)" fg:x="143" fg:w="2"/><text x="11.8666%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.6166%" y="629" width="0.1625%" height="15" fill="rgb(238,129,49)" fg:x="143" fg:w="2"/><text x="11.8666%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6978%" y="613" width="0.0812%" height="15" fill="rgb(240,26,41)" fg:x="144" fg:w="1"/><text x="11.9478%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="11.7790%" y="645" width="0.0812%" height="15" fill="rgb(221,47,33)" fg:x="145" fg:w="1"/><text x="12.0290%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.7790%" y="629" width="0.0812%" height="15" fill="rgb(216,200,17)" fg:x="145" fg:w="1"/><text x="12.0290%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.7790%" y="613" width="0.0812%" height="15" fill="rgb(230,151,26)" fg:x="145" fg:w="1"/><text x="12.0290%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7790%" y="597" width="0.0812%" height="15" fill="rgb(242,182,16)" fg:x="145" fg:w="1"/><text x="12.0290%" y="607.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="11.7790%" y="661" width="0.1625%" height="15" fill="rgb(236,35,53)" fg:x="145" fg:w="2"/><text x="12.0290%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.8603%" y="645" width="0.0812%" height="15" fill="rgb(214,180,28)" fg:x="146" fg:w="1"/><text x="12.1103%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="11.8603%" y="629" width="0.0812%" height="15" fill="rgb(208,173,36)" fg:x="146" fg:w="1"/><text x="12.1103%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.8603%" y="613" width="0.0812%" height="15" fill="rgb(218,39,15)" fg:x="146" fg:w="1"/><text x="12.1103%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="11.8603%" y="597" width="0.0812%" height="15" fill="rgb(213,145,15)" fg:x="146" fg:w="1"/><text x="12.1103%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.8603%" y="581" width="0.0812%" height="15" fill="rgb(242,110,37)" fg:x="146" fg:w="1"/><text x="12.1103%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.8603%" y="565" width="0.0812%" height="15" fill="rgb(247,146,22)" fg:x="146" fg:w="1"/><text x="12.1103%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="11.9415%" y="613" width="0.0812%" height="15" fill="rgb(215,191,7)" fg:x="147" fg:w="1"/><text x="12.1915%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.9415%" y="597" width="0.0812%" height="15" fill="rgb(240,158,1)" fg:x="147" fg:w="1"/><text x="12.1915%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.9415%" y="581" width="0.0812%" height="15" fill="rgb(241,78,32)" fg:x="147" fg:w="1"/><text x="12.1915%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.9415%" y="565" width="0.0812%" height="15" fill="rgb(248,83,10)" fg:x="147" fg:w="1"/><text x="12.1915%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.9415%" y="549" width="0.0812%" height="15" fill="rgb(241,52,0)" fg:x="147" fg:w="1"/><text x="12.1915%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.9415%" y="533" width="0.0812%" height="15" fill="rgb(238,37,13)" fg:x="147" fg:w="1"/><text x="12.1915%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.9415%" y="517" width="0.0812%" height="15" fill="rgb(242,194,17)" fg:x="147" fg:w="1"/><text x="12.1915%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.9415%" y="501" width="0.0812%" height="15" fill="rgb(236,96,3)" fg:x="147" fg:w="1"/><text x="12.1915%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.9415%" y="485" width="0.0812%" height="15" fill="rgb(235,148,34)" fg:x="147" fg:w="1"/><text x="12.1915%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.9415%" y="469" width="0.0812%" height="15" fill="rgb(254,12,11)" fg:x="147" fg:w="1"/><text x="12.1915%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.9415%" y="453" width="0.0812%" height="15" fill="rgb(207,31,54)" fg:x="147" fg:w="1"/><text x="12.1915%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.9415%" y="437" width="0.0812%" height="15" fill="rgb(252,14,28)" fg:x="147" fg:w="1"/><text x="12.1915%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.9415%" y="421" width="0.0812%" height="15" fill="rgb(252,108,36)" fg:x="147" fg:w="1"/><text x="12.1915%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.9415%" y="405" width="0.0812%" height="15" fill="rgb(214,149,7)" fg:x="147" fg:w="1"/><text x="12.1915%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.9415%" y="389" width="0.0812%" height="15" fill="rgb(243,94,12)" fg:x="147" fg:w="1"/><text x="12.1915%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="12.0227%" y="613" width="0.0812%" height="15" fill="rgb(208,36,10)" fg:x="148" fg:w="1"/><text x="12.2727%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.0227%" y="597" width="0.0812%" height="15" fill="rgb(233,185,52)" fg:x="148" fg:w="1"/><text x="12.2727%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.1040%" y="565" width="0.0812%" height="15" fill="rgb(234,50,45)" fg:x="149" fg:w="1"/><text x="12.3540%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1040%" y="549" width="0.0812%" height="15" fill="rgb(228,92,54)" fg:x="149" fg:w="1"/><text x="12.3540%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.65%)</title><rect x="11.6166%" y="677" width="0.6499%" height="15" fill="rgb(224,85,25)" fg:x="143" fg:w="8"/><text x="11.8666%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="11.9415%" y="661" width="0.3249%" height="15" fill="rgb(246,1,45)" fg:x="147" fg:w="4"/><text x="12.1915%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="11.9415%" y="645" width="0.3249%" height="15" fill="rgb(240,66,23)" fg:x="147" fg:w="4"/><text x="12.1915%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.32%)</title><rect x="11.9415%" y="629" width="0.3249%" height="15" fill="rgb(222,96,27)" fg:x="147" fg:w="4"/><text x="12.1915%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="12.1040%" y="613" width="0.1625%" height="15" fill="rgb(212,136,10)" fg:x="149" fg:w="2"/><text x="12.3540%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="12.1040%" y="597" width="0.1625%" height="15" fill="rgb(226,192,50)" fg:x="149" fg:w="2"/><text x="12.3540%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="12.1040%" y="581" width="0.1625%" height="15" fill="rgb(241,182,31)" fg:x="149" fg:w="2"/><text x="12.3540%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1852%" y="565" width="0.0812%" height="15" fill="rgb(219,205,47)" fg:x="150" fg:w="1"/><text x="12.4352%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.81%)</title><rect x="11.5353%" y="693" width="0.8123%" height="15" fill="rgb(207,96,14)" fg:x="142" fg:w="10"/><text x="11.7853%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.2665%" y="677" width="0.0812%" height="15" fill="rgb(216,119,9)" fg:x="151" fg:w="1"/><text x="12.5165%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.4289%" y="629" width="0.0812%" height="15" fill="rgb(235,62,36)" fg:x="153" fg:w="1"/><text x="12.6789%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.4289%" y="613" width="0.0812%" height="15" fill="rgb(214,41,27)" fg:x="153" fg:w="1"/><text x="12.6789%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.4289%" y="597" width="0.0812%" height="15" fill="rgb(214,174,37)" fg:x="153" fg:w="1"/><text x="12.6789%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.4289%" y="581" width="0.0812%" height="15" fill="rgb(212,11,25)" fg:x="153" fg:w="1"/><text x="12.6789%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.4289%" y="565" width="0.0812%" height="15" fill="rgb(217,71,35)" fg:x="153" fg:w="1"/><text x="12.6789%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.4289%" y="549" width="0.0812%" height="15" fill="rgb(234,152,9)" fg:x="153" fg:w="1"/><text x="12.6789%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.4289%" y="533" width="0.0812%" height="15" fill="rgb(228,32,51)" fg:x="153" fg:w="1"/><text x="12.6789%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.4289%" y="517" width="0.0812%" height="15" fill="rgb(209,14,47)" fg:x="153" fg:w="1"/><text x="12.6789%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.4289%" y="501" width="0.0812%" height="15" fill="rgb(218,201,17)" fg:x="153" fg:w="1"/><text x="12.6789%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.4289%" y="485" width="0.0812%" height="15" fill="rgb(218,98,15)" fg:x="153" fg:w="1"/><text x="12.6789%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.4289%" y="469" width="0.0812%" height="15" fill="rgb(233,202,29)" fg:x="153" fg:w="1"/><text x="12.6789%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.4289%" y="453" width="0.0812%" height="15" fill="rgb(207,196,44)" fg:x="153" fg:w="1"/><text x="12.6789%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.4289%" y="437" width="0.0812%" height="15" fill="rgb(218,63,34)" fg:x="153" fg:w="1"/><text x="12.6789%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.4289%" y="421" width="0.0812%" height="15" fill="rgb(209,10,5)" fg:x="153" fg:w="1"/><text x="12.6789%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.4289%" y="405" width="0.0812%" height="15" fill="rgb(224,36,28)" fg:x="153" fg:w="1"/><text x="12.6789%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.4289%" y="389" width="0.0812%" height="15" fill="rgb(249,178,7)" fg:x="153" fg:w="1"/><text x="12.6789%" y="399.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="12.4289%" y="373" width="0.0812%" height="15" fill="rgb(253,163,10)" fg:x="153" fg:w="1"/><text x="12.6789%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5914%" y="597" width="0.0812%" height="15" fill="rgb(245,67,46)" fg:x="155" fg:w="1"/><text x="12.8414%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5914%" y="581" width="0.0812%" height="15" fill="rgb(225,14,18)" fg:x="155" fg:w="1"/><text x="12.8414%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5914%" y="565" width="0.0812%" height="15" fill="rgb(217,41,54)" fg:x="155" fg:w="1"/><text x="12.8414%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.5914%" y="549" width="0.0812%" height="15" fill="rgb(222,111,11)" fg:x="155" fg:w="1"/><text x="12.8414%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.5914%" y="533" width="0.0812%" height="15" fill="rgb(211,85,31)" fg:x="155" fg:w="1"/><text x="12.8414%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.5914%" y="517" width="0.0812%" height="15" fill="rgb(223,29,26)" fg:x="155" fg:w="1"/><text x="12.8414%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.5914%" y="501" width="0.0812%" height="15" fill="rgb(236,124,50)" fg:x="155" fg:w="1"/><text x="12.8414%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.5914%" y="485" width="0.0812%" height="15" fill="rgb(219,148,15)" fg:x="155" fg:w="1"/><text x="12.8414%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.5914%" y="469" width="0.0812%" height="15" fill="rgb(248,159,33)" fg:x="155" fg:w="1"/><text x="12.8414%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.5914%" y="453" width="0.0812%" height="15" fill="rgb(252,65,8)" fg:x="155" fg:w="1"/><text x="12.8414%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.5914%" y="437" width="0.0812%" height="15" fill="rgb(236,45,7)" fg:x="155" fg:w="1"/><text x="12.8414%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.5914%" y="421" width="0.0812%" height="15" fill="rgb(244,3,48)" fg:x="155" fg:w="1"/><text x="12.8414%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.5914%" y="405" width="0.0812%" height="15" fill="rgb(224,123,53)" fg:x="155" fg:w="1"/><text x="12.8414%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="12.4289%" y="661" width="0.3249%" height="15" fill="rgb(223,173,15)" fg:x="153" fg:w="4"/><text x="12.6789%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="12.4289%" y="645" width="0.3249%" height="15" fill="rgb(254,181,5)" fg:x="153" fg:w="4"/><text x="12.6789%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="12.5102%" y="629" width="0.2437%" height="15" fill="rgb(243,124,33)" fg:x="154" fg:w="3"/><text x="12.7602%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="12.5102%" y="613" width="0.2437%" height="15" fill="rgb(253,220,11)" fg:x="154" fg:w="3"/><text x="12.7602%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.6726%" y="597" width="0.0812%" height="15" fill="rgb(217,14,4)" fg:x="156" fg:w="1"/><text x="12.9226%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.6726%" y="581" width="0.0812%" height="15" fill="rgb(209,196,12)" fg:x="156" fg:w="1"/><text x="12.9226%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.6726%" y="565" width="0.0812%" height="15" fill="rgb(237,108,29)" fg:x="156" fg:w="1"/><text x="12.9226%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.6726%" y="549" width="0.0812%" height="15" fill="rgb(216,173,20)" fg:x="156" fg:w="1"/><text x="12.9226%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.6726%" y="533" width="0.0812%" height="15" fill="rgb(245,27,6)" fg:x="156" fg:w="1"/><text x="12.9226%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.6726%" y="517" width="0.0812%" height="15" fill="rgb(210,181,20)" fg:x="156" fg:w="1"/><text x="12.9226%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.6726%" y="501" width="0.0812%" height="15" fill="rgb(235,213,1)" fg:x="156" fg:w="1"/><text x="12.9226%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (6 samples, 0.49%)</title><rect x="12.3477%" y="693" width="0.4874%" height="15" fill="rgb(239,68,43)" fg:x="152" fg:w="6"/><text x="12.5977%" y="703.50"></text></g><g><title>plugins_core::tools::set_occupying (6 samples, 0.49%)</title><rect x="12.3477%" y="677" width="0.4874%" height="15" fill="rgb(254,137,43)" fg:x="152" fg:w="6"/><text x="12.5977%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="12.7539%" y="661" width="0.0812%" height="15" fill="rgb(252,170,38)" fg:x="157" fg:w="1"/><text x="13.0039%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7539%" y="645" width="0.0812%" height="15" fill="rgb(234,21,42)" fg:x="157" fg:w="1"/><text x="13.0039%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.7539%" y="629" width="0.0812%" height="15" fill="rgb(216,145,40)" fg:x="157" fg:w="1"/><text x="13.0039%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="12.7539%" y="613" width="0.0812%" height="15" fill="rgb(251,73,9)" fg:x="157" fg:w="1"/><text x="13.0039%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7539%" y="597" width="0.0812%" height="15" fill="rgb(242,54,6)" fg:x="157" fg:w="1"/><text x="13.0039%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.7539%" y="581" width="0.0812%" height="15" fill="rgb(239,70,7)" fg:x="157" fg:w="1"/><text x="13.0039%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.7539%" y="565" width="0.0812%" height="15" fill="rgb(216,159,35)" fg:x="157" fg:w="1"/><text x="13.0039%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.7539%" y="549" width="0.0812%" height="15" fill="rgb(224,50,39)" fg:x="157" fg:w="1"/><text x="13.0039%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="12.7539%" y="533" width="0.0812%" height="15" fill="rgb(235,9,35)" fg:x="157" fg:w="1"/><text x="13.0039%" y="543.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.8351%" y="677" width="0.0812%" height="15" fill="rgb(239,34,21)" fg:x="158" fg:w="1"/><text x="13.0851%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8351%" y="661" width="0.0812%" height="15" fill="rgb(218,162,43)" fg:x="158" fg:w="1"/><text x="13.0851%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8351%" y="645" width="0.0812%" height="15" fill="rgb(219,89,33)" fg:x="158" fg:w="1"/><text x="13.0851%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8351%" y="629" width="0.0812%" height="15" fill="rgb(226,125,37)" fg:x="158" fg:w="1"/><text x="13.0851%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.8351%" y="613" width="0.0812%" height="15" fill="rgb(233,149,30)" fg:x="158" fg:w="1"/><text x="13.0851%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.8351%" y="597" width="0.0812%" height="15" fill="rgb(236,8,18)" fg:x="158" fg:w="1"/><text x="13.0851%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.8351%" y="581" width="0.0812%" height="15" fill="rgb(205,176,9)" fg:x="158" fg:w="1"/><text x="13.0851%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="12.8351%" y="565" width="0.0812%" height="15" fill="rgb(252,103,44)" fg:x="158" fg:w="1"/><text x="13.0851%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="12.8351%" y="549" width="0.0812%" height="15" fill="rgb(207,68,53)" fg:x="158" fg:w="1"/><text x="13.0851%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="12.8351%" y="693" width="0.1625%" height="15" fill="rgb(218,193,48)" fg:x="158" fg:w="2"/><text x="13.0851%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="12.9163%" y="677" width="0.0812%" height="15" fill="rgb(234,121,52)" fg:x="159" fg:w="1"/><text x="13.1663%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="12.9163%" y="661" width="0.0812%" height="15" fill="rgb(227,218,49)" fg:x="159" fg:w="1"/><text x="13.1663%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.9163%" y="645" width="0.0812%" height="15" fill="rgb(221,8,7)" fg:x="159" fg:w="1"/><text x="13.1663%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.9163%" y="629" width="0.0812%" height="15" fill="rgb(217,151,36)" fg:x="159" fg:w="1"/><text x="13.1663%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="12.9163%" y="613" width="0.0812%" height="15" fill="rgb(213,71,5)" fg:x="159" fg:w="1"/><text x="13.1663%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScopeRefMut&lt;plugins_core::carrying::model::Containing,kernel::model::entity::Entity&gt;&gt; (1 samples, 0.08%)</title><rect x="12.9976%" y="677" width="0.0812%" height="15" fill="rgb(225,145,43)" fg:x="160" fg:w="1"/><text x="13.2476%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="12.9976%" y="661" width="0.0812%" height="15" fill="rgb(235,118,19)" fg:x="160" fg:w="1"/><text x="13.2476%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.9976%" y="645" width="0.0812%" height="15" fill="rgb(214,102,36)" fg:x="160" fg:w="1"/><text x="13.2476%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.0788%" y="613" width="0.1625%" height="15" fill="rgb(220,56,43)" fg:x="161" fg:w="2"/><text x="13.3288%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.0788%" y="597" width="0.1625%" height="15" fill="rgb(246,136,46)" fg:x="161" fg:w="2"/><text x="13.3288%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.0788%" y="581" width="0.1625%" height="15" fill="rgb(249,99,12)" fg:x="161" fg:w="2"/><text x="13.3288%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="13.0788%" y="677" width="0.2437%" height="15" fill="rgb(224,31,42)" fg:x="161" fg:w="3"/><text x="13.3288%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="13.0788%" y="661" width="0.2437%" height="15" fill="rgb(208,96,21)" fg:x="161" fg:w="3"/><text x="13.3288%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="13.0788%" y="645" width="0.2437%" height="15" fill="rgb(237,229,7)" fg:x="161" fg:w="3"/><text x="13.3288%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="13.0788%" y="629" width="0.2437%" height="15" fill="rgb(210,12,6)" fg:x="161" fg:w="3"/><text x="13.3288%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.2413%" y="613" width="0.0812%" height="15" fill="rgb(240,9,34)" fg:x="163" fg:w="1"/><text x="13.4913%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.2413%" y="597" width="0.0812%" height="15" fill="rgb(211,68,37)" fg:x="163" fg:w="1"/><text x="13.4913%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.2413%" y="581" width="0.0812%" height="15" fill="rgb(249,138,50)" fg:x="163" fg:w="1"/><text x="13.4913%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.2413%" y="565" width="0.0812%" height="15" fill="rgb(243,185,40)" fg:x="163" fg:w="1"/><text x="13.4913%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.2413%" y="549" width="0.0812%" height="15" fill="rgb(242,92,35)" fg:x="163" fg:w="1"/><text x="13.4913%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.2413%" y="533" width="0.0812%" height="15" fill="rgb(244,98,5)" fg:x="163" fg:w="1"/><text x="13.4913%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.2413%" y="517" width="0.0812%" height="15" fill="rgb(228,186,29)" fg:x="163" fg:w="1"/><text x="13.4913%" y="527.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="13.3225%" y="677" width="0.0812%" height="15" fill="rgb(253,7,44)" fg:x="164" fg:w="1"/><text x="13.5725%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="13.3225%" y="661" width="0.0812%" height="15" fill="rgb(216,11,45)" fg:x="164" fg:w="1"/><text x="13.5725%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="13.3225%" y="645" width="0.0812%" height="15" fill="rgb(205,67,3)" fg:x="164" fg:w="1"/><text x="13.5725%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="13.3225%" y="629" width="0.0812%" height="15" fill="rgb(250,18,3)" fg:x="164" fg:w="1"/><text x="13.5725%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.3225%" y="613" width="0.0812%" height="15" fill="rgb(241,222,43)" fg:x="164" fg:w="1"/><text x="13.5725%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.3225%" y="597" width="0.0812%" height="15" fill="rgb(233,115,3)" fg:x="164" fg:w="1"/><text x="13.5725%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.3225%" y="581" width="0.0812%" height="15" fill="rgb(215,165,25)" fg:x="164" fg:w="1"/><text x="13.5725%" y="591.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.57%)</title><rect x="12.9976%" y="693" width="0.5686%" height="15" fill="rgb(234,179,6)" fg:x="160" fg:w="7"/><text x="13.2476%" y="703.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="13.4037%" y="677" width="0.1625%" height="15" fill="rgb(215,82,23)" fg:x="165" fg:w="2"/><text x="13.6537%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="13.4037%" y="661" width="0.1625%" height="15" fill="rgb(211,47,18)" fg:x="165" fg:w="2"/><text x="13.6537%" y="671.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="13.4037%" y="645" width="0.1625%" height="15" fill="rgb(248,17,9)" fg:x="165" fg:w="2"/><text x="13.6537%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="13.4037%" y="629" width="0.1625%" height="15" fill="rgb(210,212,12)" fg:x="165" fg:w="2"/><text x="13.6537%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="13.4037%" y="613" width="0.1625%" height="15" fill="rgb(230,135,45)" fg:x="165" fg:w="2"/><text x="13.6537%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.4850%" y="597" width="0.0812%" height="15" fill="rgb(214,121,41)" fg:x="166" fg:w="1"/><text x="13.7350%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.4850%" y="581" width="0.0812%" height="15" fill="rgb(239,165,45)" fg:x="166" fg:w="1"/><text x="13.7350%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (52 samples, 4.22%)</title><rect x="9.4232%" y="709" width="4.2242%" height="15" fill="rgb(214,85,51)" fg:x="116" fg:w="52"/><text x="9.6732%" y="719.50">plugi..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="13.5662%" y="693" width="0.0812%" height="15" fill="rgb(223,90,27)" fg:x="167" fg:w="1"/><text x="13.8162%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="13.5662%" y="677" width="0.0812%" height="15" fill="rgb(244,84,11)" fg:x="167" fg:w="1"/><text x="13.8162%" y="687.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (2 samples, 0.16%)</title><rect x="13.6474%" y="709" width="0.1625%" height="15" fill="rgb(253,41,47)" fg:x="168" fg:w="2"/><text x="13.8974%" y="719.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="13.6474%" y="693" width="0.1625%" height="15" fill="rgb(232,39,5)" fg:x="168" fg:w="2"/><text x="13.8974%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="13.6474%" y="677" width="0.1625%" height="15" fill="rgb(211,93,4)" fg:x="168" fg:w="2"/><text x="13.8974%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.7287%" y="661" width="0.0812%" height="15" fill="rgb(219,50,49)" fg:x="169" fg:w="1"/><text x="13.9787%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.7287%" y="645" width="0.0812%" height="15" fill="rgb(232,80,19)" fg:x="169" fg:w="1"/><text x="13.9787%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.7287%" y="629" width="0.0812%" height="15" fill="rgb(215,227,39)" fg:x="169" fg:w="1"/><text x="13.9787%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.8911%" y="661" width="0.0812%" height="15" fill="rgb(211,99,12)" fg:x="171" fg:w="1"/><text x="14.1411%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="13.8911%" y="645" width="0.0812%" height="15" fill="rgb(214,158,5)" fg:x="171" fg:w="1"/><text x="14.1411%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (3 samples, 0.24%)</title><rect x="13.8099%" y="677" width="0.2437%" height="15" fill="rgb(242,19,53)" fg:x="170" fg:w="3"/><text x="14.0599%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="13.9724%" y="661" width="0.0812%" height="15" fill="rgb(208,18,20)" fg:x="172" fg:w="1"/><text x="14.2224%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.9724%" y="645" width="0.0812%" height="15" fill="rgb(250,44,11)" fg:x="172" fg:w="1"/><text x="14.2224%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="13.9724%" y="629" width="0.0812%" height="15" fill="rgb(238,159,13)" fg:x="172" fg:w="1"/><text x="14.2224%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="13.9724%" y="613" width="0.0812%" height="15" fill="rgb(231,74,18)" fg:x="172" fg:w="1"/><text x="14.2224%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.9724%" y="597" width="0.0812%" height="15" fill="rgb(229,219,45)" fg:x="172" fg:w="1"/><text x="14.2224%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.9724%" y="581" width="0.0812%" height="15" fill="rgb(210,221,1)" fg:x="172" fg:w="1"/><text x="14.2224%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.0536%" y="645" width="0.0812%" height="15" fill="rgb(209,60,51)" fg:x="173" fg:w="1"/><text x="14.3036%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.0536%" y="629" width="0.0812%" height="15" fill="rgb(252,97,34)" fg:x="173" fg:w="1"/><text x="14.3036%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.0536%" y="613" width="0.0812%" height="15" fill="rgb(243,211,37)" fg:x="173" fg:w="1"/><text x="14.3036%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.0536%" y="597" width="0.0812%" height="15" fill="rgb(210,229,37)" fg:x="173" fg:w="1"/><text x="14.3036%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.0536%" y="581" width="0.0812%" height="15" fill="rgb(220,208,43)" fg:x="173" fg:w="1"/><text x="14.3036%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.0536%" y="565" width="0.0812%" height="15" fill="rgb(218,118,50)" fg:x="173" fg:w="1"/><text x="14.3036%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.0536%" y="549" width="0.0812%" height="15" fill="rgb(254,169,52)" fg:x="173" fg:w="1"/><text x="14.3036%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.0536%" y="533" width="0.0812%" height="15" fill="rgb(221,214,37)" fg:x="173" fg:w="1"/><text x="14.3036%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.0536%" y="517" width="0.0812%" height="15" fill="rgb(254,186,32)" fg:x="173" fg:w="1"/><text x="14.3036%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="14.1348%" y="629" width="0.0812%" height="15" fill="rgb(215,144,43)" fg:x="174" fg:w="1"/><text x="14.3848%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="14.1348%" y="613" width="0.0812%" height="15" fill="rgb(252,21,46)" fg:x="174" fg:w="1"/><text x="14.3848%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="14.1348%" y="597" width="0.0812%" height="15" fill="rgb(207,166,46)" fg:x="174" fg:w="1"/><text x="14.3848%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="14.1348%" y="581" width="0.0812%" height="15" fill="rgb(253,37,49)" fg:x="174" fg:w="1"/><text x="14.3848%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="14.2973%" y="597" width="0.1625%" height="15" fill="rgb(222,97,20)" fg:x="176" fg:w="2"/><text x="14.5473%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="14.2973%" y="581" width="0.1625%" height="15" fill="rgb(244,181,26)" fg:x="176" fg:w="2"/><text x="14.5473%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.3786%" y="565" width="0.0812%" height="15" fill="rgb(241,22,29)" fg:x="177" fg:w="1"/><text x="14.6286%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.3786%" y="549" width="0.0812%" height="15" fill="rgb(206,200,43)" fg:x="177" fg:w="1"/><text x="14.6286%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.3786%" y="533" width="0.0812%" height="15" fill="rgb(226,224,43)" fg:x="177" fg:w="1"/><text x="14.6286%" y="543.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.49%)</title><rect x="14.0536%" y="677" width="0.4874%" height="15" fill="rgb(253,129,28)" fg:x="173" fg:w="6"/><text x="14.3036%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.49%)</title><rect x="14.0536%" y="661" width="0.4874%" height="15" fill="rgb(252,99,33)" fg:x="173" fg:w="6"/><text x="14.3036%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.41%)</title><rect x="14.1348%" y="645" width="0.4062%" height="15" fill="rgb(208,123,45)" fg:x="174" fg:w="5"/><text x="14.3848%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="14.2161%" y="629" width="0.3249%" height="15" fill="rgb(251,106,12)" fg:x="175" fg:w="4"/><text x="14.4661%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="14.2973%" y="613" width="0.2437%" height="15" fill="rgb(240,209,35)" fg:x="176" fg:w="3"/><text x="14.5473%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="14.4598%" y="597" width="0.0812%" height="15" fill="rgb(214,52,50)" fg:x="178" fg:w="1"/><text x="14.7098%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="14.4598%" y="581" width="0.0812%" height="15" fill="rgb(234,119,4)" fg:x="178" fg:w="1"/><text x="14.7098%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="14.4598%" y="565" width="0.0812%" height="15" fill="rgb(228,181,36)" fg:x="178" fg:w="1"/><text x="14.7098%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="14.4598%" y="549" width="0.0812%" height="15" fill="rgb(213,171,42)" fg:x="178" fg:w="1"/><text x="14.7098%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="14.4598%" y="533" width="0.0812%" height="15" fill="rgb(239,14,41)" fg:x="178" fg:w="1"/><text x="14.7098%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="14.4598%" y="517" width="0.0812%" height="15" fill="rgb(239,111,46)" fg:x="178" fg:w="1"/><text x="14.7098%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (10 samples, 0.81%)</title><rect x="13.8099%" y="709" width="0.8123%" height="15" fill="rgb(214,72,7)" fg:x="170" fg:w="10"/><text x="14.0599%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (10 samples, 0.81%)</title><rect x="13.8099%" y="693" width="0.8123%" height="15" fill="rgb(221,114,1)" fg:x="170" fg:w="10"/><text x="14.0599%" y="703.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="14.5410%" y="677" width="0.0812%" height="15" fill="rgb(213,143,14)" fg:x="179" fg:w="1"/><text x="14.7910%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="14.5410%" y="661" width="0.0812%" height="15" fill="rgb(220,221,53)" fg:x="179" fg:w="1"/><text x="14.7910%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="14.5410%" y="645" width="0.0812%" height="15" fill="rgb(236,189,27)" fg:x="179" fg:w="1"/><text x="14.7910%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="14.6223%" y="693" width="0.0812%" height="15" fill="rgb(252,139,49)" fg:x="180" fg:w="1"/><text x="14.8723%" y="703.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="14.6223%" y="677" width="0.0812%" height="15" fill="rgb(231,158,33)" fg:x="180" fg:w="1"/><text x="14.8723%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.6223%" y="661" width="0.0812%" height="15" fill="rgb(207,201,15)" fg:x="180" fg:w="1"/><text x="14.8723%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="14.6223%" y="645" width="0.0812%" height="15" fill="rgb(218,43,48)" fg:x="180" fg:w="1"/><text x="14.8723%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.7035%" y="677" width="0.0812%" height="15" fill="rgb(244,63,52)" fg:x="181" fg:w="1"/><text x="14.9535%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.7035%" y="661" width="0.0812%" height="15" fill="rgb(236,60,17)" fg:x="181" fg:w="1"/><text x="14.9535%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.7035%" y="645" width="0.0812%" height="15" fill="rgb(205,206,29)" fg:x="181" fg:w="1"/><text x="14.9535%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.7035%" y="629" width="0.0812%" height="15" fill="rgb(205,209,35)" fg:x="181" fg:w="1"/><text x="14.9535%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.7035%" y="613" width="0.0812%" height="15" fill="rgb(227,112,14)" fg:x="181" fg:w="1"/><text x="14.9535%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.7035%" y="597" width="0.0812%" height="15" fill="rgb(248,151,9)" fg:x="181" fg:w="1"/><text x="14.9535%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.7035%" y="581" width="0.0812%" height="15" fill="rgb(247,45,40)" fg:x="181" fg:w="1"/><text x="14.9535%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.7035%" y="565" width="0.0812%" height="15" fill="rgb(232,185,16)" fg:x="181" fg:w="1"/><text x="14.9535%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.7847%" y="613" width="0.0812%" height="15" fill="rgb(215,45,44)" fg:x="182" fg:w="1"/><text x="15.0347%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.7847%" y="597" width="0.0812%" height="15" fill="rgb(206,69,32)" fg:x="182" fg:w="1"/><text x="15.0347%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="14.7847%" y="581" width="0.0812%" height="15" fill="rgb(233,98,50)" fg:x="182" fg:w="1"/><text x="15.0347%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (119 samples, 9.67%)</title><rect x="5.2803%" y="725" width="9.6669%" height="15" fill="rgb(232,217,52)" fg:x="65" fg:w="119"/><text x="5.5303%" y="735.50">&lt;tests::Holdin..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (4 samples, 0.32%)</title><rect x="14.6223%" y="709" width="0.3249%" height="15" fill="rgb(250,42,51)" fg:x="180" fg:w="4"/><text x="14.8723%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="14.7035%" y="693" width="0.2437%" height="15" fill="rgb(241,200,26)" fg:x="181" fg:w="3"/><text x="14.9535%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="14.7847%" y="677" width="0.1625%" height="15" fill="rgb(207,10,32)" fg:x="182" fg:w="2"/><text x="15.0347%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="14.7847%" y="661" width="0.1625%" height="15" fill="rgb(214,63,15)" fg:x="182" fg:w="2"/><text x="15.0347%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="14.7847%" y="645" width="0.1625%" height="15" fill="rgb(234,176,14)" fg:x="182" fg:w="2"/><text x="15.0347%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="14.7847%" y="629" width="0.1625%" height="15" fill="rgb(226,104,52)" fg:x="182" fg:w="2"/><text x="15.0347%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="14.8660%" y="613" width="0.0812%" height="15" fill="rgb(211,222,1)" fg:x="183" fg:w="1"/><text x="15.1160%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.8660%" y="597" width="0.0812%" height="15" fill="rgb(237,7,3)" fg:x="183" fg:w="1"/><text x="15.1160%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.8660%" y="581" width="0.0812%" height="15" fill="rgb(218,143,7)" fg:x="183" fg:w="1"/><text x="15.1160%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="14.9472%" y="709" width="0.0812%" height="15" fill="rgb(208,25,22)" fg:x="184" fg:w="1"/><text x="15.1972%" y="719.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="14.9472%" y="693" width="0.0812%" height="15" fill="rgb(228,127,16)" fg:x="184" fg:w="1"/><text x="15.1972%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9472%" y="677" width="0.0812%" height="15" fill="rgb(237,86,27)" fg:x="184" fg:w="1"/><text x="15.1972%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="15.0284%" y="709" width="0.1625%" height="15" fill="rgb(207,125,19)" fg:x="185" fg:w="2"/><text x="15.2784%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="15.0284%" y="693" width="0.1625%" height="15" fill="rgb(243,195,0)" fg:x="185" fg:w="2"/><text x="15.2784%" y="703.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="15.0284%" y="677" width="0.1625%" height="15" fill="rgb(230,95,18)" fg:x="185" fg:w="2"/><text x="15.2784%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="15.0284%" y="661" width="0.1625%" height="15" fill="rgb(232,157,21)" fg:x="185" fg:w="2"/><text x="15.2784%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="15.0284%" y="645" width="0.1625%" height="15" fill="rgb(212,120,50)" fg:x="185" fg:w="2"/><text x="15.2784%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="15.1097%" y="629" width="0.0812%" height="15" fill="rgb(222,204,44)" fg:x="186" fg:w="1"/><text x="15.3597%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="15.1097%" y="613" width="0.0812%" height="15" fill="rgb(236,6,33)" fg:x="186" fg:w="1"/><text x="15.3597%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.1097%" y="597" width="0.0812%" height="15" fill="rgb(247,11,38)" fg:x="186" fg:w="1"/><text x="15.3597%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.1097%" y="581" width="0.0812%" height="15" fill="rgb(215,111,0)" fg:x="186" fg:w="1"/><text x="15.3597%" y="591.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="15.1097%" y="565" width="0.0812%" height="15" fill="rgb(211,65,46)" fg:x="186" fg:w="1"/><text x="15.3597%" y="575.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="15.1097%" y="549" width="0.0812%" height="15" fill="rgb(216,5,12)" fg:x="186" fg:w="1"/><text x="15.3597%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.1097%" y="533" width="0.0812%" height="15" fill="rgb(226,7,2)" fg:x="186" fg:w="1"/><text x="15.3597%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.1097%" y="517" width="0.0812%" height="15" fill="rgb(242,116,12)" fg:x="186" fg:w="1"/><text x="15.3597%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="15.1097%" y="501" width="0.0812%" height="15" fill="rgb(249,209,7)" fg:x="186" fg:w="1"/><text x="15.3597%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="15.1097%" y="485" width="0.0812%" height="15" fill="rgb(232,73,17)" fg:x="186" fg:w="1"/><text x="15.3597%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="15.1097%" y="469" width="0.0812%" height="15" fill="rgb(214,13,32)" fg:x="186" fg:w="1"/><text x="15.3597%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="15.1097%" y="453" width="0.0812%" height="15" fill="rgb(221,125,10)" fg:x="186" fg:w="1"/><text x="15.3597%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="15.1097%" y="437" width="0.0812%" height="15" fill="rgb(246,7,44)" fg:x="186" fg:w="1"/><text x="15.3597%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="15.1097%" y="421" width="0.0812%" height="15" fill="rgb(239,18,35)" fg:x="186" fg:w="1"/><text x="15.3597%" y="431.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="15.1909%" y="709" width="0.0812%" height="15" fill="rgb(250,222,16)" fg:x="187" fg:w="1"/><text x="15.4409%" y="719.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="15.1909%" y="693" width="0.0812%" height="15" fill="rgb(219,100,8)" fg:x="187" fg:w="1"/><text x="15.4409%" y="703.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="15.1909%" y="677" width="0.0812%" height="15" fill="rgb(240,62,13)" fg:x="187" fg:w="1"/><text x="15.4409%" y="687.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="15.1909%" y="661" width="0.0812%" height="15" fill="rgb(253,194,2)" fg:x="187" fg:w="1"/><text x="15.4409%" y="671.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="15.1909%" y="645" width="0.0812%" height="15" fill="rgb(235,58,31)" fg:x="187" fg:w="1"/><text x="15.4409%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="15.1909%" y="629" width="0.0812%" height="15" fill="rgb(231,37,11)" fg:x="187" fg:w="1"/><text x="15.4409%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="15.1909%" y="613" width="0.0812%" height="15" fill="rgb(235,133,0)" fg:x="187" fg:w="1"/><text x="15.4409%" y="623.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="15.1909%" y="597" width="0.0812%" height="15" fill="rgb(212,185,40)" fg:x="187" fg:w="1"/><text x="15.4409%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="15.3534%" y="645" width="0.2437%" height="15" fill="rgb(216,68,42)" fg:x="189" fg:w="3"/><text x="15.6034%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.5158%" y="629" width="0.0812%" height="15" fill="rgb(239,81,4)" fg:x="191" fg:w="1"/><text x="15.7658%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.5158%" y="613" width="0.0812%" height="15" fill="rgb(206,86,6)" fg:x="191" fg:w="1"/><text x="15.7658%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.5158%" y="597" width="0.0812%" height="15" fill="rgb(249,95,27)" fg:x="191" fg:w="1"/><text x="15.7658%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.5158%" y="581" width="0.0812%" height="15" fill="rgb(205,155,45)" fg:x="191" fg:w="1"/><text x="15.7658%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.5158%" y="565" width="0.0812%" height="15" fill="rgb(213,55,42)" fg:x="191" fg:w="1"/><text x="15.7658%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="15.5158%" y="549" width="0.0812%" height="15" fill="rgb(249,197,4)" fg:x="191" fg:w="1"/><text x="15.7658%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="15.5158%" y="533" width="0.0812%" height="15" fill="rgb(212,128,32)" fg:x="191" fg:w="1"/><text x="15.7658%" y="543.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="15.5971%" y="645" width="0.0812%" height="15" fill="rgb(252,47,30)" fg:x="192" fg:w="1"/><text x="15.8471%" y="655.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (4 samples, 0.32%)</title><rect x="15.6783%" y="581" width="0.3249%" height="15" fill="rgb(209,79,18)" fg:x="193" fg:w="4"/><text x="15.9283%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="15.8408%" y="565" width="0.1625%" height="15" fill="rgb(225,81,38)" fg:x="195" fg:w="2"/><text x="16.0908%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.8408%" y="549" width="0.1625%" height="15" fill="rgb(205,95,16)" fg:x="195" fg:w="2"/><text x="16.0908%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.8408%" y="533" width="0.1625%" height="15" fill="rgb(214,30,4)" fg:x="195" fg:w="2"/><text x="16.0908%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (9 samples, 0.73%)</title><rect x="15.3534%" y="661" width="0.7311%" height="15" fill="rgb(232,137,22)" fg:x="189" fg:w="9"/><text x="15.6034%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="15.6783%" y="645" width="0.4062%" height="15" fill="rgb(232,156,19)" fg:x="193" fg:w="5"/><text x="15.9283%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="15.6783%" y="629" width="0.4062%" height="15" fill="rgb(248,157,26)" fg:x="193" fg:w="5"/><text x="15.9283%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (5 samples, 0.41%)</title><rect x="15.6783%" y="613" width="0.4062%" height="15" fill="rgb(242,24,3)" fg:x="193" fg:w="5"/><text x="15.9283%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (5 samples, 0.41%)</title><rect x="15.6783%" y="597" width="0.4062%" height="15" fill="rgb(218,195,48)" fg:x="193" fg:w="5"/><text x="15.9283%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.0032%" y="581" width="0.0812%" height="15" fill="rgb(214,193,36)" fg:x="197" fg:w="1"/><text x="16.2532%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (10 samples, 0.81%)</title><rect x="15.3534%" y="693" width="0.8123%" height="15" fill="rgb(242,110,40)" fg:x="189" fg:w="10"/><text x="15.6034%" y="703.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (10 samples, 0.81%)</title><rect x="15.3534%" y="677" width="0.8123%" height="15" fill="rgb(233,150,26)" fg:x="189" fg:w="10"/><text x="15.6034%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="16.0845%" y="661" width="0.0812%" height="15" fill="rgb(239,200,30)" fg:x="198" fg:w="1"/><text x="16.3345%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="16.0845%" y="645" width="0.0812%" height="15" fill="rgb(226,28,11)" fg:x="198" fg:w="1"/><text x="16.3345%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.1657%" y="693" width="0.0812%" height="15" fill="rgb(220,26,48)" fg:x="199" fg:w="1"/><text x="16.4157%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.1657%" y="677" width="0.0812%" height="15" fill="rgb(232,10,11)" fg:x="199" fg:w="1"/><text x="16.4157%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.1657%" y="661" width="0.0812%" height="15" fill="rgb(252,143,50)" fg:x="199" fg:w="1"/><text x="16.4157%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="16.3282%" y="597" width="0.0812%" height="15" fill="rgb(206,58,22)" fg:x="201" fg:w="1"/><text x="16.5782%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.3282%" y="581" width="0.0812%" height="15" fill="rgb(250,9,45)" fg:x="201" fg:w="1"/><text x="16.5782%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.3282%" y="565" width="0.0812%" height="15" fill="rgb(225,148,14)" fg:x="201" fg:w="1"/><text x="16.5782%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.3282%" y="549" width="0.0812%" height="15" fill="rgb(205,178,40)" fg:x="201" fg:w="1"/><text x="16.5782%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="16.3282%" y="533" width="0.0812%" height="15" fill="rgb(215,201,4)" fg:x="201" fg:w="1"/><text x="16.5782%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.3282%" y="517" width="0.0812%" height="15" fill="rgb(219,223,24)" fg:x="201" fg:w="1"/><text x="16.5782%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.3282%" y="501" width="0.0812%" height="15" fill="rgb(217,19,31)" fg:x="201" fg:w="1"/><text x="16.5782%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="16.3282%" y="613" width="0.1625%" height="15" fill="rgb(235,33,3)" fg:x="201" fg:w="2"/><text x="16.5782%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.4094%" y="597" width="0.0812%" height="15" fill="rgb(221,39,18)" fg:x="202" fg:w="1"/><text x="16.6594%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="16.4907%" y="597" width="0.0812%" height="15" fill="rgb(242,162,33)" fg:x="203" fg:w="1"/><text x="16.7407%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="16.5719%" y="597" width="0.1625%" height="15" fill="rgb(233,215,28)" fg:x="204" fg:w="2"/><text x="16.8219%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.6531%" y="581" width="0.0812%" height="15" fill="rgb(212,117,9)" fg:x="205" fg:w="1"/><text x="16.9031%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.6531%" y="565" width="0.0812%" height="15" fill="rgb(237,70,47)" fg:x="205" fg:w="1"/><text x="16.9031%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.6531%" y="549" width="0.0812%" height="15" fill="rgb(206,177,13)" fg:x="205" fg:w="1"/><text x="16.9031%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="16.6531%" y="533" width="0.0812%" height="15" fill="rgb(209,174,33)" fg:x="205" fg:w="1"/><text x="16.9031%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.6531%" y="517" width="0.0812%" height="15" fill="rgb(226,6,11)" fg:x="205" fg:w="1"/><text x="16.9031%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.6531%" y="501" width="0.0812%" height="15" fill="rgb(240,214,6)" fg:x="205" fg:w="1"/><text x="16.9031%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="16.7344%" y="565" width="0.1625%" height="15" fill="rgb(254,214,40)" fg:x="206" fg:w="2"/><text x="16.9844%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="16.7344%" y="549" width="0.1625%" height="15" fill="rgb(230,187,15)" fg:x="206" fg:w="2"/><text x="16.9844%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="16.7344%" y="533" width="0.1625%" height="15" fill="rgb(250,11,27)" fg:x="206" fg:w="2"/><text x="16.9844%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="16.7344%" y="517" width="0.1625%" height="15" fill="rgb(243,107,19)" fg:x="206" fg:w="2"/><text x="16.9844%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="16.7344%" y="501" width="0.1625%" height="15" fill="rgb(253,66,26)" fg:x="206" fg:w="2"/><text x="16.9844%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="16.7344%" y="485" width="0.1625%" height="15" fill="rgb(228,43,8)" fg:x="206" fg:w="2"/><text x="16.9844%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="16.7344%" y="469" width="0.1625%" height="15" fill="rgb(232,197,36)" fg:x="206" fg:w="2"/><text x="16.9844%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="16.7344%" y="581" width="0.2437%" height="15" fill="rgb(221,182,31)" fg:x="206" fg:w="3"/><text x="16.9844%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.8968%" y="565" width="0.0812%" height="15" fill="rgb(244,25,36)" fg:x="208" fg:w="1"/><text x="17.1468%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="16.9781%" y="581" width="0.0812%" height="15" fill="rgb(247,101,19)" fg:x="209" fg:w="1"/><text x="17.2281%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="17.0593%" y="565" width="0.0812%" height="15" fill="rgb(223,117,19)" fg:x="210" fg:w="1"/><text x="17.3093%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.0593%" y="549" width="0.0812%" height="15" fill="rgb(249,63,38)" fg:x="210" fg:w="1"/><text x="17.3093%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.0593%" y="533" width="0.0812%" height="15" fill="rgb(220,143,23)" fg:x="210" fg:w="1"/><text x="17.3093%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.0593%" y="517" width="0.0812%" height="15" fill="rgb(252,183,22)" fg:x="210" fg:w="1"/><text x="17.3093%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.0593%" y="501" width="0.0812%" height="15" fill="rgb(243,176,15)" fg:x="210" fg:w="1"/><text x="17.3093%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.0593%" y="485" width="0.0812%" height="15" fill="rgb(244,204,46)" fg:x="210" fg:w="1"/><text x="17.3093%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.0593%" y="469" width="0.0812%" height="15" fill="rgb(227,28,54)" fg:x="210" fg:w="1"/><text x="17.3093%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="17.1405%" y="565" width="0.1625%" height="15" fill="rgb(231,10,15)" fg:x="211" fg:w="2"/><text x="17.3905%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="17.2218%" y="549" width="0.0812%" height="15" fill="rgb(210,200,17)" fg:x="212" fg:w="1"/><text x="17.4718%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.2218%" y="533" width="0.0812%" height="15" fill="rgb(251,106,46)" fg:x="212" fg:w="1"/><text x="17.4718%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.2218%" y="517" width="0.0812%" height="15" fill="rgb(218,211,15)" fg:x="212" fg:w="1"/><text x="17.4718%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.2218%" y="501" width="0.0812%" height="15" fill="rgb(239,62,10)" fg:x="212" fg:w="1"/><text x="17.4718%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.2218%" y="485" width="0.0812%" height="15" fill="rgb(225,53,53)" fg:x="212" fg:w="1"/><text x="17.4718%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.2218%" y="469" width="0.0812%" height="15" fill="rgb(207,16,24)" fg:x="212" fg:w="1"/><text x="17.4718%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.2218%" y="453" width="0.0812%" height="15" fill="rgb(217,52,28)" fg:x="212" fg:w="1"/><text x="17.4718%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="17.0593%" y="581" width="0.3249%" height="15" fill="rgb(246,1,5)" fg:x="210" fg:w="4"/><text x="17.3093%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.3030%" y="565" width="0.0812%" height="15" fill="rgb(221,29,26)" fg:x="213" fg:w="1"/><text x="17.5530%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="16.7344%" y="597" width="0.7311%" height="15" fill="rgb(250,133,32)" fg:x="206" fg:w="9"/><text x="16.9844%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.3842%" y="581" width="0.0812%" height="15" fill="rgb(236,63,16)" fg:x="214" fg:w="1"/><text x="17.6342%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (16 samples, 1.30%)</title><rect x="16.3282%" y="629" width="1.2998%" height="15" fill="rgb(231,159,14)" fg:x="201" fg:w="16"/><text x="16.5782%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.14%)</title><rect x="16.4907%" y="613" width="1.1373%" height="15" fill="rgb(207,102,36)" fg:x="203" fg:w="14"/><text x="16.7407%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="17.4655%" y="597" width="0.1625%" height="15" fill="rgb(230,224,31)" fg:x="215" fg:w="2"/><text x="17.7155%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.5467%" y="581" width="0.0812%" height="15" fill="rgb(215,182,16)" fg:x="216" fg:w="1"/><text x="17.7967%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="17.6279%" y="597" width="0.1625%" height="15" fill="rgb(226,113,2)" fg:x="217" fg:w="2"/><text x="17.8779%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.7092%" y="581" width="0.0812%" height="15" fill="rgb(241,18,35)" fg:x="218" fg:w="1"/><text x="17.9592%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.7904%" y="565" width="0.0812%" height="15" fill="rgb(240,165,44)" fg:x="219" fg:w="1"/><text x="18.0404%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.7904%" y="549" width="0.0812%" height="15" fill="rgb(229,130,47)" fg:x="219" fg:w="1"/><text x="18.0404%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.8716%" y="549" width="0.0812%" height="15" fill="rgb(223,93,7)" fg:x="220" fg:w="1"/><text x="18.1216%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="17.9529%" y="549" width="0.0812%" height="15" fill="rgb(205,180,36)" fg:x="221" fg:w="1"/><text x="18.2029%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="17.9529%" y="533" width="0.0812%" height="15" fill="rgb(221,103,28)" fg:x="221" fg:w="1"/><text x="18.2029%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.9529%" y="517" width="0.0812%" height="15" fill="rgb(212,4,3)" fg:x="221" fg:w="1"/><text x="18.2029%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="17.6279%" y="629" width="0.4874%" height="15" fill="rgb(209,221,53)" fg:x="217" fg:w="6"/><text x="17.8779%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.49%)</title><rect x="17.6279%" y="613" width="0.4874%" height="15" fill="rgb(233,229,52)" fg:x="217" fg:w="6"/><text x="17.8779%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="17.7904%" y="597" width="0.3249%" height="15" fill="rgb(254,127,37)" fg:x="219" fg:w="4"/><text x="18.0404%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="17.7904%" y="581" width="0.3249%" height="15" fill="rgb(207,161,26)" fg:x="219" fg:w="4"/><text x="18.0404%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="17.8716%" y="565" width="0.2437%" height="15" fill="rgb(223,75,5)" fg:x="220" fg:w="3"/><text x="18.1216%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.0341%" y="549" width="0.0812%" height="15" fill="rgb(235,115,52)" fg:x="222" fg:w="1"/><text x="18.2841%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.2778%" y="549" width="0.0812%" height="15" fill="rgb(240,91,46)" fg:x="225" fg:w="1"/><text x="18.5278%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.2778%" y="533" width="0.0812%" height="15" fill="rgb(251,144,21)" fg:x="225" fg:w="1"/><text x="18.5278%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="18.1966%" y="597" width="0.2437%" height="15" fill="rgb(247,220,47)" fg:x="224" fg:w="3"/><text x="18.4466%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="18.1966%" y="581" width="0.2437%" height="15" fill="rgb(253,122,1)" fg:x="224" fg:w="3"/><text x="18.4466%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="18.1966%" y="565" width="0.2437%" height="15" fill="rgb(221,0,24)" fg:x="224" fg:w="3"/><text x="18.4466%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.3591%" y="549" width="0.0812%" height="15" fill="rgb(220,204,54)" fg:x="226" fg:w="1"/><text x="18.6091%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.3591%" y="533" width="0.0812%" height="15" fill="rgb(205,96,25)" fg:x="226" fg:w="1"/><text x="18.6091%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.4403%" y="597" width="0.0812%" height="15" fill="rgb(247,77,20)" fg:x="227" fg:w="1"/><text x="18.6903%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="18.5215%" y="597" width="0.1625%" height="15" fill="rgb(245,151,8)" fg:x="228" fg:w="2"/><text x="18.7715%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6028%" y="581" width="0.0812%" height="15" fill="rgb(242,158,39)" fg:x="229" fg:w="1"/><text x="18.8528%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.6840%" y="597" width="0.0812%" height="15" fill="rgb(222,214,50)" fg:x="230" fg:w="1"/><text x="18.9340%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="18.7652%" y="549" width="0.0812%" height="15" fill="rgb(229,60,39)" fg:x="231" fg:w="1"/><text x="19.0152%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="18.7652%" y="581" width="0.1625%" height="15" fill="rgb(240,148,18)" fg:x="231" fg:w="2"/><text x="19.0152%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="18.7652%" y="565" width="0.1625%" height="15" fill="rgb(215,96,11)" fg:x="231" fg:w="2"/><text x="19.0152%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="18.8465%" y="549" width="0.0812%" height="15" fill="rgb(238,162,53)" fg:x="232" fg:w="1"/><text x="19.0965%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (12 samples, 0.97%)</title><rect x="18.1154%" y="613" width="0.9748%" height="15" fill="rgb(214,83,18)" fg:x="223" fg:w="12"/><text x="18.3654%" y="623.50"></text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="18.7652%" y="597" width="0.3249%" height="15" fill="rgb(248,117,24)" fg:x="231" fg:w="4"/><text x="19.0152%" y="607.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (2 samples, 0.16%)</title><rect x="18.9277%" y="581" width="0.1625%" height="15" fill="rgb(238,190,6)" fg:x="233" fg:w="2"/><text x="19.1777%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.0089%" y="565" width="0.0812%" height="15" fill="rgb(213,51,6)" fg:x="234" fg:w="1"/><text x="19.2589%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="19.0902%" y="597" width="0.0812%" height="15" fill="rgb(212,136,1)" fg:x="235" fg:w="1"/><text x="19.3402%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="19.3339%" y="581" width="0.1625%" height="15" fill="rgb(221,192,14)" fg:x="238" fg:w="2"/><text x="19.5839%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.4963%" y="549" width="0.0812%" height="15" fill="rgb(244,38,54)" fg:x="240" fg:w="1"/><text x="19.7463%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="19.4963%" y="581" width="0.1625%" height="15" fill="rgb(240,45,28)" fg:x="240" fg:w="2"/><text x="19.7463%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="19.4963%" y="565" width="0.1625%" height="15" fill="rgb(240,123,12)" fg:x="240" fg:w="2"/><text x="19.7463%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="19.5776%" y="549" width="0.0812%" height="15" fill="rgb(216,14,30)" fg:x="241" fg:w="1"/><text x="19.8276%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="19.5776%" y="533" width="0.0812%" height="15" fill="rgb(212,50,24)" fg:x="241" fg:w="1"/><text x="19.8276%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.8213%" y="549" width="0.0812%" height="15" fill="rgb(253,229,47)" fg:x="244" fg:w="1"/><text x="20.0713%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (4 samples, 0.32%)</title><rect x="19.6588%" y="581" width="0.3249%" height="15" fill="rgb(214,26,17)" fg:x="242" fg:w="4"/><text x="19.9088%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="19.6588%" y="565" width="0.3249%" height="15" fill="rgb(252,60,11)" fg:x="242" fg:w="4"/><text x="19.9088%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.9025%" y="549" width="0.0812%" height="15" fill="rgb(209,59,37)" fg:x="245" fg:w="1"/><text x="20.1525%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="20.0650%" y="533" width="0.0812%" height="15" fill="rgb(228,126,53)" fg:x="247" fg:w="1"/><text x="20.3150%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="20.0650%" y="517" width="0.0812%" height="15" fill="rgb(233,99,2)" fg:x="247" fg:w="1"/><text x="20.3150%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="20.0650%" y="501" width="0.0812%" height="15" fill="rgb(217,106,34)" fg:x="247" fg:w="1"/><text x="20.3150%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="20.1462%" y="517" width="0.0812%" height="15" fill="rgb(222,46,19)" fg:x="248" fg:w="1"/><text x="20.3962%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="20.2275%" y="501" width="0.1625%" height="15" fill="rgb(251,87,31)" fg:x="249" fg:w="2"/><text x="20.4775%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.57%)</title><rect x="19.9838%" y="565" width="0.5686%" height="15" fill="rgb(213,70,51)" fg:x="246" fg:w="7"/><text x="20.2338%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="20.0650%" y="549" width="0.4874%" height="15" fill="rgb(229,144,18)" fg:x="247" fg:w="6"/><text x="20.3150%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="20.1462%" y="533" width="0.4062%" height="15" fill="rgb(254,60,26)" fg:x="248" fg:w="5"/><text x="20.3962%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="20.2275%" y="517" width="0.3249%" height="15" fill="rgb(243,127,51)" fg:x="249" fg:w="4"/><text x="20.4775%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="20.3899%" y="501" width="0.1625%" height="15" fill="rgb(221,51,25)" fg:x="251" fg:w="2"/><text x="20.6399%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="20.4712%" y="485" width="0.0812%" height="15" fill="rgb(205,42,7)" fg:x="252" fg:w="1"/><text x="20.7212%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.4712%" y="469" width="0.0812%" height="15" fill="rgb(236,177,48)" fg:x="252" fg:w="1"/><text x="20.7212%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.4712%" y="453" width="0.0812%" height="15" fill="rgb(226,79,31)" fg:x="252" fg:w="1"/><text x="20.7212%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (21 samples, 1.71%)</title><rect x="19.0902%" y="613" width="1.7059%" height="15" fill="rgb(216,170,12)" fg:x="235" fg:w="21"/><text x="19.3402%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (20 samples, 1.62%)</title><rect x="19.1714%" y="597" width="1.6247%" height="15" fill="rgb(208,62,51)" fg:x="236" fg:w="20"/><text x="19.4214%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.81%)</title><rect x="19.9838%" y="581" width="0.8123%" height="15" fill="rgb(254,129,9)" fg:x="246" fg:w="10"/><text x="20.2338%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="20.5524%" y="565" width="0.2437%" height="15" fill="rgb(243,209,31)" fg:x="253" fg:w="3"/><text x="20.8024%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="20.6336%" y="549" width="0.1625%" height="15" fill="rgb(213,159,23)" fg:x="254" fg:w="2"/><text x="20.8836%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="21.0398%" y="421" width="0.0812%" height="15" fill="rgb(249,77,39)" fg:x="259" fg:w="1"/><text x="21.2898%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="21.0398%" y="437" width="0.1625%" height="15" fill="rgb(230,13,33)" fg:x="259" fg:w="2"/><text x="21.2898%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.1210%" y="421" width="0.0812%" height="15" fill="rgb(215,215,7)" fg:x="260" fg:w="1"/><text x="21.3710%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.1210%" y="405" width="0.0812%" height="15" fill="rgb(222,92,25)" fg:x="260" fg:w="1"/><text x="21.3710%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.1210%" y="389" width="0.0812%" height="15" fill="rgb(215,173,22)" fg:x="260" fg:w="1"/><text x="21.3710%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.1210%" y="373" width="0.0812%" height="15" fill="rgb(247,205,52)" fg:x="260" fg:w="1"/><text x="21.3710%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="21.2023%" y="437" width="0.1625%" height="15" fill="rgb(240,210,37)" fg:x="261" fg:w="2"/><text x="21.4523%" y="447.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="21.2835%" y="421" width="0.0812%" height="15" fill="rgb(224,13,10)" fg:x="262" fg:w="1"/><text x="21.5335%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="21.2835%" y="405" width="0.0812%" height="15" fill="rgb(209,48,33)" fg:x="262" fg:w="1"/><text x="21.5335%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="20.9586%" y="469" width="0.4874%" height="15" fill="rgb(228,219,23)" fg:x="258" fg:w="6"/><text x="21.2086%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="20.9586%" y="453" width="0.4874%" height="15" fill="rgb(239,46,49)" fg:x="258" fg:w="6"/><text x="21.2086%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.3647%" y="437" width="0.0812%" height="15" fill="rgb(206,172,51)" fg:x="263" fg:w="1"/><text x="21.6147%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.4460%" y="453" width="0.0812%" height="15" fill="rgb(213,212,35)" fg:x="264" fg:w="1"/><text x="21.6960%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.4460%" y="437" width="0.0812%" height="15" fill="rgb(252,40,27)" fg:x="264" fg:w="1"/><text x="21.6960%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.4460%" y="421" width="0.0812%" height="15" fill="rgb(212,33,41)" fg:x="264" fg:w="1"/><text x="21.6960%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.73%)</title><rect x="20.8773%" y="485" width="0.7311%" height="15" fill="rgb(232,160,27)" fg:x="257" fg:w="9"/><text x="21.1273%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="21.4460%" y="469" width="0.1625%" height="15" fill="rgb(244,160,20)" fg:x="264" fg:w="2"/><text x="21.6960%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="21.5272%" y="453" width="0.0812%" height="15" fill="rgb(205,66,20)" fg:x="265" fg:w="1"/><text x="21.7772%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.5272%" y="437" width="0.0812%" height="15" fill="rgb(236,158,6)" fg:x="265" fg:w="1"/><text x="21.7772%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="21.6084%" y="485" width="0.0812%" height="15" fill="rgb(232,25,36)" fg:x="266" fg:w="1"/><text x="21.8584%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.6084%" y="469" width="0.0812%" height="15" fill="rgb(220,153,35)" fg:x="266" fg:w="1"/><text x="21.8584%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.89%)</title><rect x="20.8773%" y="517" width="0.8936%" height="15" fill="rgb(216,5,8)" fg:x="257" fg:w="11"/><text x="21.1273%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.89%)</title><rect x="20.8773%" y="501" width="0.8936%" height="15" fill="rgb(240,97,3)" fg:x="257" fg:w="11"/><text x="21.1273%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.6897%" y="485" width="0.0812%" height="15" fill="rgb(220,99,26)" fg:x="267" fg:w="1"/><text x="21.9397%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.6897%" y="469" width="0.0812%" height="15" fill="rgb(237,96,2)" fg:x="267" fg:w="1"/><text x="21.9397%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.6897%" y="453" width="0.0812%" height="15" fill="rgb(217,197,47)" fg:x="267" fg:w="1"/><text x="21.9397%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="21.8522%" y="501" width="0.0812%" height="15" fill="rgb(252,133,54)" fg:x="269" fg:w="1"/><text x="22.1022%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 1.22%)</title><rect x="20.7961%" y="549" width="1.2185%" height="15" fill="rgb(233,37,30)" fg:x="256" fg:w="15"/><text x="21.0461%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (15 samples, 1.22%)</title><rect x="20.7961%" y="533" width="1.2185%" height="15" fill="rgb(239,182,12)" fg:x="256" fg:w="15"/><text x="21.0461%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="21.7709%" y="517" width="0.2437%" height="15" fill="rgb(245,83,39)" fg:x="268" fg:w="3"/><text x="22.0209%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.9334%" y="501" width="0.0812%" height="15" fill="rgb(222,109,36)" fg:x="270" fg:w="1"/><text x="22.1834%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="22.0146%" y="549" width="0.0812%" height="15" fill="rgb(237,95,44)" fg:x="271" fg:w="1"/><text x="22.2646%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="22.0146%" y="533" width="0.0812%" height="15" fill="rgb(216,36,54)" fg:x="271" fg:w="1"/><text x="22.2646%" y="543.50"></text></g><g><title>engine::session::state::State::close (85 samples, 6.90%)</title><rect x="15.2721%" y="709" width="6.9050%" height="15" fill="rgb(236,164,3)" fg:x="188" fg:w="85"/><text x="15.5221%" y="719.50">engine::s..</text></g><g><title>engine::session::state::State::flush_entities (73 samples, 5.93%)</title><rect x="16.2470%" y="693" width="5.9301%" height="15" fill="rgb(223,15,21)" fg:x="200" fg:w="73"/><text x="16.4970%" y="703.50">engine::..</text></g><g><title>core::iter::adapters::try_process (72 samples, 5.85%)</title><rect x="16.3282%" y="677" width="5.8489%" height="15" fill="rgb(239,191,12)" fg:x="201" fg:w="72"/><text x="16.5782%" y="687.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (72 samples, 5.85%)</title><rect x="16.3282%" y="661" width="5.8489%" height="15" fill="rgb(231,191,37)" fg:x="201" fg:w="72"/><text x="16.5782%" y="671.50">&lt;alloc:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (72 samples, 5.85%)</title><rect x="16.3282%" y="645" width="5.8489%" height="15" fill="rgb(209,155,36)" fg:x="201" fg:w="72"/><text x="16.5782%" y="655.50">engine:..</text></g><g><title>kernel::model::any_entity_changes (50 samples, 4.06%)</title><rect x="18.1154%" y="629" width="4.0617%" height="15" fill="rgb(216,222,49)" fg:x="223" fg:w="50"/><text x="18.3654%" y="639.50">kern..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (17 samples, 1.38%)</title><rect x="20.7961%" y="613" width="1.3810%" height="15" fill="rgb(218,181,2)" fg:x="256" fg:w="17"/><text x="21.0461%" y="623.50"></text></g><g><title>serde_json::de::from_trait (17 samples, 1.38%)</title><rect x="20.7961%" y="597" width="1.3810%" height="15" fill="rgb(239,125,9)" fg:x="256" fg:w="17"/><text x="21.0461%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (17 samples, 1.38%)</title><rect x="20.7961%" y="581" width="1.3810%" height="15" fill="rgb(233,103,7)" fg:x="256" fg:w="17"/><text x="21.0461%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (17 samples, 1.38%)</title><rect x="20.7961%" y="565" width="1.3810%" height="15" fill="rgb(209,223,5)" fg:x="256" fg:w="17"/><text x="21.0461%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.0959%" y="549" width="0.0812%" height="15" fill="rgb(234,71,27)" fg:x="272" fg:w="1"/><text x="22.3459%" y="559.50"></text></g><g><title>engine::session::Session::close (90 samples, 7.31%)</title><rect x="14.9472%" y="725" width="7.3111%" height="15" fill="rgb(251,202,16)" fg:x="184" fg:w="90"/><text x="15.1972%" y="735.50">engine::se..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="22.1771%" y="709" width="0.0812%" height="15" fill="rgb(231,180,0)" fg:x="273" fg:w="1"/><text x="22.4271%" y="719.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="22.1771%" y="693" width="0.0812%" height="15" fill="rgb(223,58,28)" fg:x="273" fg:w="1"/><text x="22.4271%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="22.1771%" y="677" width="0.0812%" height="15" fill="rgb(250,34,24)" fg:x="273" fg:w="1"/><text x="22.4271%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="22.1771%" y="661" width="0.0812%" height="15" fill="rgb(235,24,16)" fg:x="273" fg:w="1"/><text x="22.4271%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="22.1771%" y="645" width="0.0812%" height="15" fill="rgb(219,28,33)" fg:x="273" fg:w="1"/><text x="22.4271%" y="655.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="22.3396%" y="629" width="0.0812%" height="15" fill="rgb(228,150,43)" fg:x="275" fg:w="1"/><text x="22.5896%" y="639.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="22.3396%" y="613" width="0.0812%" height="15" fill="rgb(221,228,36)" fg:x="275" fg:w="1"/><text x="22.5896%" y="623.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (1 samples, 0.08%)</title><rect x="22.3396%" y="597" width="0.0812%" height="15" fill="rgb(232,116,17)" fg:x="275" fg:w="1"/><text x="22.5896%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.08%)</title><rect x="22.3396%" y="581" width="0.0812%" height="15" fill="rgb(220,110,51)" fg:x="275" fg:w="1"/><text x="22.5896%" y="591.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="22.3396%" y="565" width="0.0812%" height="15" fill="rgb(207,26,25)" fg:x="275" fg:w="1"/><text x="22.5896%" y="575.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.08%)</title><rect x="22.3396%" y="549" width="0.0812%" height="15" fill="rgb(223,58,19)" fg:x="275" fg:w="1"/><text x="22.5896%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="22.3396%" y="661" width="0.1625%" height="15" fill="rgb(234,125,39)" fg:x="275" fg:w="2"/><text x="22.5896%" y="671.50"></text></g><g><title>&lt;plugins_core::carrying::parser::DropActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="22.3396%" y="645" width="0.1625%" height="15" fill="rgb(241,48,36)" fg:x="275" fg:w="2"/><text x="22.5896%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.4208%" y="629" width="0.0812%" height="15" fill="rgb(217,148,51)" fg:x="276" fg:w="1"/><text x="22.6708%" y="639.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (3 samples, 0.24%)</title><rect x="22.3396%" y="693" width="0.2437%" height="15" fill="rgb(247,17,25)" fg:x="275" fg:w="3"/><text x="22.5896%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="22.3396%" y="677" width="0.2437%" height="15" fill="rgb(219,89,38)" fg:x="275" fg:w="3"/><text x="22.5896%" y="687.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="22.5020%" y="661" width="0.0812%" height="15" fill="rgb(220,145,2)" fg:x="277" fg:w="1"/><text x="22.7520%" y="671.50"></text></g><g><title>&lt;plugins_core::looking::parser::LookActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="22.5020%" y="645" width="0.0812%" height="15" fill="rgb(244,66,47)" fg:x="277" fg:w="1"/><text x="22.7520%" y="655.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="22.5020%" y="629" width="0.0812%" height="15" fill="rgb(226,182,5)" fg:x="277" fg:w="1"/><text x="22.7520%" y="639.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="22.5020%" y="613" width="0.0812%" height="15" fill="rgb(211,98,20)" fg:x="277" fg:w="1"/><text x="22.7520%" y="623.50"></text></g><g><title>core::fmt::Formatter::debug_tuple (1 samples, 0.08%)</title><rect x="22.5833%" y="517" width="0.0812%" height="15" fill="rgb(217,103,52)" fg:x="278" fg:w="1"/><text x="22.8333%" y="527.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="22.6645%" y="453" width="0.0812%" height="15" fill="rgb(208,125,52)" fg:x="279" fg:w="1"/><text x="22.9145%" y="463.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (1 samples, 0.08%)</title><rect x="22.6645%" y="437" width="0.0812%" height="15" fill="rgb(244,70,13)" fg:x="279" fg:w="1"/><text x="22.9145%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="22.6645%" y="421" width="0.0812%" height="15" fill="rgb(253,124,3)" fg:x="279" fg:w="1"/><text x="22.9145%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="22.6645%" y="405" width="0.0812%" height="15" fill="rgb(222,145,32)" fg:x="279" fg:w="1"/><text x="22.9145%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="22.6645%" y="389" width="0.0812%" height="15" fill="rgb(232,183,47)" fg:x="279" fg:w="1"/><text x="22.9145%" y="399.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="22.6645%" y="373" width="0.0812%" height="15" fill="rgb(246,226,4)" fg:x="279" fg:w="1"/><text x="22.9145%" y="383.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="22.6645%" y="357" width="0.0812%" height="15" fill="rgb(228,185,46)" fg:x="279" fg:w="1"/><text x="22.9145%" y="367.50"></text></g><g><title>core::fmt::builders::debug_tuple_new (1 samples, 0.08%)</title><rect x="22.6645%" y="341" width="0.0812%" height="15" fill="rgb(213,196,4)" fg:x="279" fg:w="1"/><text x="22.9145%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="22.6645%" y="325" width="0.0812%" height="15" fill="rgb(212,2,45)" fg:x="279" fg:w="1"/><text x="22.9145%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.6645%" y="309" width="0.0812%" height="15" fill="rgb(217,145,50)" fg:x="279" fg:w="1"/><text x="22.9145%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.6645%" y="293" width="0.0812%" height="15" fill="rgb(242,10,46)" fg:x="279" fg:w="1"/><text x="22.9145%" y="303.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="22.6645%" y="277" width="0.0812%" height="15" fill="rgb(252,91,48)" fg:x="279" fg:w="1"/><text x="22.9145%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="22.6645%" y="261" width="0.0812%" height="15" fill="rgb(216,72,13)" fg:x="279" fg:w="1"/><text x="22.9145%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="22.6645%" y="245" width="0.0812%" height="15" fill="rgb(219,6,37)" fg:x="279" fg:w="1"/><text x="22.9145%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="22.6645%" y="229" width="0.0812%" height="15" fill="rgb(236,185,40)" fg:x="279" fg:w="1"/><text x="22.9145%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="22.6645%" y="213" width="0.0812%" height="15" fill="rgb(208,81,48)" fg:x="279" fg:w="1"/><text x="22.9145%" y="223.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (2 samples, 0.16%)</title><rect x="22.6645%" y="501" width="0.1625%" height="15" fill="rgb(211,42,33)" fg:x="279" fg:w="2"/><text x="22.9145%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="22.6645%" y="485" width="0.1625%" height="15" fill="rgb(211,90,39)" fg:x="279" fg:w="2"/><text x="22.9145%" y="495.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (2 samples, 0.16%)</title><rect x="22.6645%" y="469" width="0.1625%" height="15" fill="rgb(218,136,12)" fg:x="279" fg:w="2"/><text x="22.9145%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="22.7457%" y="453" width="0.0812%" height="15" fill="rgb(234,12,32)" fg:x="280" fg:w="1"/><text x="22.9957%" y="463.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (1 samples, 0.08%)</title><rect x="22.7457%" y="437" width="0.0812%" height="15" fill="rgb(221,164,18)" fg:x="280" fg:w="1"/><text x="22.9957%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="22.7457%" y="421" width="0.0812%" height="15" fill="rgb(239,135,14)" fg:x="280" fg:w="1"/><text x="22.9957%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="22.7457%" y="405" width="0.0812%" height="15" fill="rgb(226,198,47)" fg:x="280" fg:w="1"/><text x="22.9957%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="22.7457%" y="389" width="0.0812%" height="15" fill="rgb(244,121,47)" fg:x="280" fg:w="1"/><text x="22.9957%" y="399.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="22.7457%" y="373" width="0.0812%" height="15" fill="rgb(226,21,48)" fg:x="280" fg:w="1"/><text x="22.9957%" y="383.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="22.7457%" y="357" width="0.0812%" height="15" fill="rgb(215,178,47)" fg:x="280" fg:w="1"/><text x="22.9957%" y="367.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="22.7457%" y="341" width="0.0812%" height="15" fill="rgb(206,212,19)" fg:x="280" fg:w="1"/><text x="22.9957%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="22.7457%" y="325" width="0.0812%" height="15" fill="rgb(230,104,34)" fg:x="280" fg:w="1"/><text x="22.9957%" y="335.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="22.7457%" y="309" width="0.0812%" height="15" fill="rgb(210,96,51)" fg:x="280" fg:w="1"/><text x="22.9957%" y="319.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="22.7457%" y="293" width="0.0812%" height="15" fill="rgb(229,111,47)" fg:x="280" fg:w="1"/><text x="22.9957%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (1 samples, 0.08%)</title><rect x="22.7457%" y="277" width="0.0812%" height="15" fill="rgb(218,174,45)" fg:x="280" fg:w="1"/><text x="22.9957%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (1 samples, 0.08%)</title><rect x="22.7457%" y="261" width="0.0812%" height="15" fill="rgb(215,21,32)" fg:x="280" fg:w="1"/><text x="22.9957%" y="271.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (4 samples, 0.32%)</title><rect x="22.5833%" y="533" width="0.3249%" height="15" fill="rgb(235,72,21)" fg:x="278" fg:w="4"/><text x="22.8333%" y="543.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (3 samples, 0.24%)</title><rect x="22.6645%" y="517" width="0.2437%" height="15" fill="rgb(250,113,30)" fg:x="279" fg:w="3"/><text x="22.9145%" y="527.50"></text></g><g><title>core::fmt::builders::debug_tuple_new (1 samples, 0.08%)</title><rect x="22.8270%" y="501" width="0.0812%" height="15" fill="rgb(244,136,34)" fg:x="281" fg:w="1"/><text x="23.0770%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="22.8270%" y="485" width="0.0812%" height="15" fill="rgb(213,226,47)" fg:x="281" fg:w="1"/><text x="23.0770%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.8270%" y="469" width="0.0812%" height="15" fill="rgb(224,136,40)" fg:x="281" fg:w="1"/><text x="23.0770%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.8270%" y="453" width="0.0812%" height="15" fill="rgb(253,124,12)" fg:x="281" fg:w="1"/><text x="23.0770%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="22.8270%" y="437" width="0.0812%" height="15" fill="rgb(210,67,8)" fg:x="281" fg:w="1"/><text x="23.0770%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="22.8270%" y="421" width="0.0812%" height="15" fill="rgb(210,204,0)" fg:x="281" fg:w="1"/><text x="23.0770%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="22.8270%" y="405" width="0.0812%" height="15" fill="rgb(217,179,22)" fg:x="281" fg:w="1"/><text x="23.0770%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="22.8270%" y="389" width="0.0812%" height="15" fill="rgb(237,192,33)" fg:x="281" fg:w="1"/><text x="23.0770%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="22.8270%" y="373" width="0.0812%" height="15" fill="rgb(211,104,28)" fg:x="281" fg:w="1"/><text x="23.0770%" y="383.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (5 samples, 0.41%)</title><rect x="22.5833%" y="581" width="0.4062%" height="15" fill="rgb(214,75,30)" fg:x="278" fg:w="5"/><text x="22.8333%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (5 samples, 0.41%)</title><rect x="22.5833%" y="565" width="0.4062%" height="15" fill="rgb(220,227,12)" fg:x="278" fg:w="5"/><text x="22.8333%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (5 samples, 0.41%)</title><rect x="22.5833%" y="549" width="0.4062%" height="15" fill="rgb(233,134,28)" fg:x="278" fg:w="5"/><text x="22.8333%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="22.9082%" y="533" width="0.0812%" height="15" fill="rgb(215,146,24)" fg:x="282" fg:w="1"/><text x="23.1582%" y="543.50"></text></g><g><title>core::fmt::Formatter::debug_struct (1 samples, 0.08%)</title><rect x="22.9082%" y="517" width="0.0812%" height="15" fill="rgb(248,227,20)" fg:x="282" fg:w="1"/><text x="23.1582%" y="527.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="22.9082%" y="501" width="0.0812%" height="15" fill="rgb(250,44,42)" fg:x="282" fg:w="1"/><text x="23.1582%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="22.9082%" y="485" width="0.0812%" height="15" fill="rgb(219,5,35)" fg:x="282" fg:w="1"/><text x="23.1582%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.9082%" y="469" width="0.0812%" height="15" fill="rgb(241,132,32)" fg:x="282" fg:w="1"/><text x="23.1582%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.9082%" y="453" width="0.0812%" height="15" fill="rgb(234,212,51)" fg:x="282" fg:w="1"/><text x="23.1582%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="22.9082%" y="437" width="0.0812%" height="15" fill="rgb(242,173,29)" fg:x="282" fg:w="1"/><text x="23.1582%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="22.9082%" y="421" width="0.0812%" height="15" fill="rgb(212,159,2)" fg:x="282" fg:w="1"/><text x="23.1582%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="22.9082%" y="405" width="0.0812%" height="15" fill="rgb(238,165,31)" fg:x="282" fg:w="1"/><text x="23.1582%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="22.9082%" y="389" width="0.0812%" height="15" fill="rgb(241,57,36)" fg:x="282" fg:w="1"/><text x="23.1582%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="22.9082%" y="373" width="0.0812%" height="15" fill="rgb(249,7,4)" fg:x="282" fg:w="1"/><text x="23.1582%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="22.9082%" y="357" width="0.0812%" height="15" fill="rgb(250,137,44)" fg:x="282" fg:w="1"/><text x="23.1582%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.9082%" y="341" width="0.0812%" height="15" fill="rgb(244,185,1)" fg:x="282" fg:w="1"/><text x="23.1582%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="22.9082%" y="325" width="0.0812%" height="15" fill="rgb(216,5,53)" fg:x="282" fg:w="1"/><text x="23.1582%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.9082%" y="309" width="0.0812%" height="15" fill="rgb(234,89,21)" fg:x="282" fg:w="1"/><text x="23.1582%" y="319.50"></text></g><g><title>alloc::fmt::format::format_inner (6 samples, 0.49%)</title><rect x="22.5833%" y="677" width="0.4874%" height="15" fill="rgb(250,81,43)" fg:x="278" fg:w="6"/><text x="22.8333%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (6 samples, 0.49%)</title><rect x="22.5833%" y="661" width="0.4874%" height="15" fill="rgb(243,132,11)" fg:x="278" fg:w="6"/><text x="22.8333%" y="671.50"></text></g><g><title>core::fmt::write (6 samples, 0.49%)</title><rect x="22.5833%" y="645" width="0.4874%" height="15" fill="rgb(253,159,28)" fg:x="278" fg:w="6"/><text x="22.8333%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (6 samples, 0.49%)</title><rect x="22.5833%" y="629" width="0.4874%" height="15" fill="rgb(237,167,34)" fg:x="278" fg:w="6"/><text x="22.8333%" y="639.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (6 samples, 0.49%)</title><rect x="22.5833%" y="613" width="0.4874%" height="15" fill="rgb(237,16,50)" fg:x="278" fg:w="6"/><text x="22.8333%" y="623.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (6 samples, 0.49%)</title><rect x="22.5833%" y="597" width="0.4874%" height="15" fill="rgb(247,125,2)" fg:x="278" fg:w="6"/><text x="22.8333%" y="607.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="22.9894%" y="581" width="0.0812%" height="15" fill="rgb(254,35,3)" fg:x="283" fg:w="1"/><text x="23.2394%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="22.9894%" y="565" width="0.0812%" height="15" fill="rgb(237,209,21)" fg:x="283" fg:w="1"/><text x="23.2394%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::PerformAction&gt; (1 samples, 0.08%)</title><rect x="23.0707%" y="677" width="0.0812%" height="15" fill="rgb(224,122,20)" fg:x="284" fg:w="1"/><text x="23.3207%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::carrying::actions::DropAction&gt; (1 samples, 0.08%)</title><rect x="23.0707%" y="661" width="0.0812%" height="15" fill="rgb(224,11,46)" fg:x="284" fg:w="1"/><text x="23.3207%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="23.2331%" y="661" width="0.1625%" height="15" fill="rgb(248,21,33)" fg:x="286" fg:w="2"/><text x="23.4831%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (2 samples, 0.16%)</title><rect x="23.2331%" y="645" width="0.1625%" height="15" fill="rgb(222,144,7)" fg:x="286" fg:w="2"/><text x="23.4831%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (1 samples, 0.08%)</title><rect x="23.3956%" y="661" width="0.0812%" height="15" fill="rgb(205,141,37)" fg:x="288" fg:w="1"/><text x="23.6456%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="23.3956%" y="645" width="0.0812%" height="15" fill="rgb(237,130,8)" fg:x="288" fg:w="1"/><text x="23.6456%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="23.4768%" y="549" width="0.0812%" height="15" fill="rgb(209,179,39)" fg:x="289" fg:w="1"/><text x="23.7268%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.4768%" y="533" width="0.0812%" height="15" fill="rgb(207,52,17)" fg:x="289" fg:w="1"/><text x="23.7268%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.4768%" y="517" width="0.0812%" height="15" fill="rgb(253,158,17)" fg:x="289" fg:w="1"/><text x="23.7268%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.5581%" y="437" width="0.0812%" height="15" fill="rgb(208,19,53)" fg:x="290" fg:w="1"/><text x="23.8081%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.5581%" y="421" width="0.0812%" height="15" fill="rgb(233,152,13)" fg:x="290" fg:w="1"/><text x="23.8081%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.5581%" y="405" width="0.0812%" height="15" fill="rgb(231,84,1)" fg:x="290" fg:w="1"/><text x="23.8081%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.5581%" y="389" width="0.0812%" height="15" fill="rgb(229,142,48)" fg:x="290" fg:w="1"/><text x="23.8081%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="23.5581%" y="373" width="0.0812%" height="15" fill="rgb(248,70,29)" fg:x="290" fg:w="1"/><text x="23.8081%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="23.5581%" y="357" width="0.0812%" height="15" fill="rgb(250,85,7)" fg:x="290" fg:w="1"/><text x="23.8081%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="23.5581%" y="341" width="0.0812%" height="15" fill="rgb(235,140,43)" fg:x="290" fg:w="1"/><text x="23.8081%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="23.5581%" y="485" width="0.1625%" height="15" fill="rgb(216,0,5)" fg:x="290" fg:w="2"/><text x="23.8081%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="23.5581%" y="469" width="0.1625%" height="15" fill="rgb(223,167,29)" fg:x="290" fg:w="2"/><text x="23.8081%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="23.5581%" y="453" width="0.1625%" height="15" fill="rgb(229,150,33)" fg:x="290" fg:w="2"/><text x="23.8081%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.6393%" y="437" width="0.0812%" height="15" fill="rgb(227,26,52)" fg:x="291" fg:w="1"/><text x="23.8893%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.6393%" y="421" width="0.0812%" height="15" fill="rgb(250,60,52)" fg:x="291" fg:w="1"/><text x="23.8893%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.6393%" y="405" width="0.0812%" height="15" fill="rgb(228,81,46)" fg:x="291" fg:w="1"/><text x="23.8893%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.6393%" y="389" width="0.0812%" height="15" fill="rgb(225,218,31)" fg:x="291" fg:w="1"/><text x="23.8893%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="23.8018%" y="437" width="0.0812%" height="15" fill="rgb(230,35,16)" fg:x="293" fg:w="1"/><text x="24.0518%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="23.8830%" y="389" width="0.1625%" height="15" fill="rgb(247,100,0)" fg:x="294" fg:w="2"/><text x="24.1330%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="23.8830%" y="373" width="0.1625%" height="15" fill="rgb(223,135,11)" fg:x="294" fg:w="2"/><text x="24.1330%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="23.8830%" y="357" width="0.1625%" height="15" fill="rgb(207,136,0)" fg:x="294" fg:w="2"/><text x="24.1330%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="23.9643%" y="341" width="0.0812%" height="15" fill="rgb(246,131,25)" fg:x="295" fg:w="1"/><text x="24.2143%" y="351.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="23.9643%" y="325" width="0.0812%" height="15" fill="rgb(209,47,12)" fg:x="295" fg:w="1"/><text x="24.2143%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="23.9643%" y="309" width="0.0812%" height="15" fill="rgb(221,25,16)" fg:x="295" fg:w="1"/><text x="24.2143%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.9643%" y="293" width="0.0812%" height="15" fill="rgb(223,164,33)" fg:x="295" fg:w="1"/><text x="24.2143%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.0455%" y="357" width="0.0812%" height="15" fill="rgb(220,26,23)" fg:x="296" fg:w="1"/><text x="24.2955%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="24.0455%" y="389" width="0.1625%" height="15" fill="rgb(231,224,1)" fg:x="296" fg:w="2"/><text x="24.2955%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="24.0455%" y="373" width="0.1625%" height="15" fill="rgb(229,221,24)" fg:x="296" fg:w="2"/><text x="24.2955%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="24.1267%" y="357" width="0.0812%" height="15" fill="rgb(213,34,10)" fg:x="297" fg:w="1"/><text x="24.3767%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="24.1267%" y="341" width="0.0812%" height="15" fill="rgb(215,33,11)" fg:x="297" fg:w="1"/><text x="24.3767%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="24.1267%" y="325" width="0.0812%" height="15" fill="rgb(216,20,41)" fg:x="297" fg:w="1"/><text x="24.3767%" y="335.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.57%)</title><rect x="23.7206%" y="485" width="0.5686%" height="15" fill="rgb(228,43,31)" fg:x="292" fg:w="7"/><text x="23.9706%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.57%)</title><rect x="23.7206%" y="469" width="0.5686%" height="15" fill="rgb(227,83,26)" fg:x="292" fg:w="7"/><text x="23.9706%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.57%)</title><rect x="23.7206%" y="453" width="0.5686%" height="15" fill="rgb(217,168,19)" fg:x="292" fg:w="7"/><text x="23.9706%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.41%)</title><rect x="23.8830%" y="437" width="0.4062%" height="15" fill="rgb(231,34,33)" fg:x="294" fg:w="5"/><text x="24.1330%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="23.8830%" y="421" width="0.4062%" height="15" fill="rgb(230,120,51)" fg:x="294" fg:w="5"/><text x="24.1330%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.41%)</title><rect x="23.8830%" y="405" width="0.4062%" height="15" fill="rgb(215,138,27)" fg:x="294" fg:w="5"/><text x="24.1330%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.2080%" y="389" width="0.0812%" height="15" fill="rgb(246,80,47)" fg:x="298" fg:w="1"/><text x="24.4580%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="24.2080%" y="373" width="0.0812%" height="15" fill="rgb(215,57,53)" fg:x="298" fg:w="1"/><text x="24.4580%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="24.2080%" y="357" width="0.0812%" height="15" fill="rgb(229,137,5)" fg:x="298" fg:w="1"/><text x="24.4580%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.2080%" y="341" width="0.0812%" height="15" fill="rgb(210,86,2)" fg:x="298" fg:w="1"/><text x="24.4580%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="24.2080%" y="325" width="0.0812%" height="15" fill="rgb(231,226,51)" fg:x="298" fg:w="1"/><text x="24.4580%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="24.2080%" y="309" width="0.0812%" height="15" fill="rgb(216,62,29)" fg:x="298" fg:w="1"/><text x="24.4580%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.2080%" y="293" width="0.0812%" height="15" fill="rgb(248,202,3)" fg:x="298" fg:w="1"/><text x="24.4580%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="24.2080%" y="277" width="0.0812%" height="15" fill="rgb(225,181,7)" fg:x="298" fg:w="1"/><text x="24.4580%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="24.2080%" y="261" width="0.0812%" height="15" fill="rgb(247,170,54)" fg:x="298" fg:w="1"/><text x="24.4580%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.2080%" y="245" width="0.0812%" height="15" fill="rgb(236,204,33)" fg:x="298" fg:w="1"/><text x="24.4580%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.2080%" y="229" width="0.0812%" height="15" fill="rgb(216,45,30)" fg:x="298" fg:w="1"/><text x="24.4580%" y="239.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (12 samples, 0.97%)</title><rect x="23.4768%" y="565" width="0.9748%" height="15" fill="rgb(213,203,16)" fg:x="289" fg:w="12"/><text x="23.7268%" y="575.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.89%)</title><rect x="23.5581%" y="549" width="0.8936%" height="15" fill="rgb(215,46,16)" fg:x="290" fg:w="11"/><text x="23.8081%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.89%)</title><rect x="23.5581%" y="533" width="0.8936%" height="15" fill="rgb(217,162,46)" fg:x="290" fg:w="11"/><text x="23.8081%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.89%)</title><rect x="23.5581%" y="517" width="0.8936%" height="15" fill="rgb(224,189,20)" fg:x="290" fg:w="11"/><text x="23.8081%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.89%)</title><rect x="23.5581%" y="501" width="0.8936%" height="15" fill="rgb(232,35,51)" fg:x="290" fg:w="11"/><text x="23.8081%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="24.2892%" y="485" width="0.1625%" height="15" fill="rgb(243,221,46)" fg:x="299" fg:w="2"/><text x="24.5392%" y="495.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="24.2892%" y="469" width="0.1625%" height="15" fill="rgb(248,16,16)" fg:x="299" fg:w="2"/><text x="24.5392%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="24.2892%" y="453" width="0.1625%" height="15" fill="rgb(220,168,13)" fg:x="299" fg:w="2"/><text x="24.5392%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="24.2892%" y="437" width="0.1625%" height="15" fill="rgb(243,102,39)" fg:x="299" fg:w="2"/><text x="24.5392%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="24.2892%" y="421" width="0.1625%" height="15" fill="rgb(245,82,32)" fg:x="299" fg:w="2"/><text x="24.5392%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="24.2892%" y="405" width="0.1625%" height="15" fill="rgb(230,164,19)" fg:x="299" fg:w="2"/><text x="24.5392%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="24.2892%" y="389" width="0.1625%" height="15" fill="rgb(221,9,41)" fg:x="299" fg:w="2"/><text x="24.5392%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="24.2892%" y="373" width="0.1625%" height="15" fill="rgb(216,93,0)" fg:x="299" fg:w="2"/><text x="24.5392%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="24.3704%" y="357" width="0.0812%" height="15" fill="rgb(235,113,9)" fg:x="300" fg:w="1"/><text x="24.6204%" y="367.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (13 samples, 1.06%)</title><rect x="23.4768%" y="581" width="1.0561%" height="15" fill="rgb(209,224,10)" fg:x="289" fg:w="13"/><text x="23.7268%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="24.4517%" y="565" width="0.0812%" height="15" fill="rgb(226,54,34)" fg:x="301" fg:w="1"/><text x="24.7017%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.6954%" y="373" width="0.0812%" height="15" fill="rgb(222,60,8)" fg:x="304" fg:w="1"/><text x="24.9454%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.6954%" y="357" width="0.0812%" height="15" fill="rgb(248,228,41)" fg:x="304" fg:w="1"/><text x="24.9454%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.6954%" y="341" width="0.0812%" height="15" fill="rgb(226,31,32)" fg:x="304" fg:w="1"/><text x="24.9454%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="24.6954%" y="325" width="0.0812%" height="15" fill="rgb(242,132,49)" fg:x="304" fg:w="1"/><text x="24.9454%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="24.6954%" y="309" width="0.0812%" height="15" fill="rgb(224,194,19)" fg:x="304" fg:w="1"/><text x="24.9454%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="24.6954%" y="293" width="0.0812%" height="15" fill="rgb(232,200,51)" fg:x="304" fg:w="1"/><text x="24.9454%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.6954%" y="277" width="0.0812%" height="15" fill="rgb(235,60,46)" fg:x="304" fg:w="1"/><text x="24.9454%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.6954%" y="261" width="0.0812%" height="15" fill="rgb(240,109,52)" fg:x="304" fg:w="1"/><text x="24.9454%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="24.6954%" y="245" width="0.0812%" height="15" fill="rgb(215,78,37)" fg:x="304" fg:w="1"/><text x="24.9454%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="24.6954%" y="229" width="0.0812%" height="15" fill="rgb(225,141,7)" fg:x="304" fg:w="1"/><text x="24.9454%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="24.6954%" y="213" width="0.0812%" height="15" fill="rgb(216,102,54)" fg:x="304" fg:w="1"/><text x="24.9454%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="24.6954%" y="197" width="0.0812%" height="15" fill="rgb(238,143,13)" fg:x="304" fg:w="1"/><text x="24.9454%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.6954%" y="181" width="0.0812%" height="15" fill="rgb(219,45,51)" fg:x="304" fg:w="1"/><text x="24.9454%" y="191.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="24.6954%" y="389" width="0.1625%" height="15" fill="rgb(242,105,46)" fg:x="304" fg:w="2"/><text x="24.9454%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.7766%" y="373" width="0.0812%" height="15" fill="rgb(206,154,49)" fg:x="305" fg:w="1"/><text x="25.0266%" y="383.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="24.8578%" y="357" width="0.0812%" height="15" fill="rgb(239,215,4)" fg:x="306" fg:w="1"/><text x="25.1078%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.9391%" y="325" width="0.0812%" height="15" fill="rgb(238,82,17)" fg:x="307" fg:w="1"/><text x="25.1891%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="24.8578%" y="389" width="0.2437%" height="15" fill="rgb(242,49,30)" fg:x="306" fg:w="3"/><text x="25.1078%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="24.8578%" y="373" width="0.2437%" height="15" fill="rgb(248,5,16)" fg:x="306" fg:w="3"/><text x="25.1078%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="24.9391%" y="357" width="0.1625%" height="15" fill="rgb(237,138,32)" fg:x="307" fg:w="2"/><text x="25.1891%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="24.9391%" y="341" width="0.1625%" height="15" fill="rgb(235,79,45)" fg:x="307" fg:w="2"/><text x="25.1891%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="25.0203%" y="325" width="0.0812%" height="15" fill="rgb(213,105,25)" fg:x="308" fg:w="1"/><text x="25.2703%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.0203%" y="309" width="0.0812%" height="15" fill="rgb(251,131,7)" fg:x="308" fg:w="1"/><text x="25.2703%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.0203%" y="293" width="0.0812%" height="15" fill="rgb(211,155,7)" fg:x="308" fg:w="1"/><text x="25.2703%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.0203%" y="277" width="0.0812%" height="15" fill="rgb(243,70,15)" fg:x="308" fg:w="1"/><text x="25.2703%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="25.1015%" y="373" width="0.1625%" height="15" fill="rgb(215,171,2)" fg:x="309" fg:w="2"/><text x="25.3515%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="25.1015%" y="357" width="0.1625%" height="15" fill="rgb(244,121,35)" fg:x="309" fg:w="2"/><text x="25.3515%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="25.1015%" y="341" width="0.1625%" height="15" fill="rgb(249,147,17)" fg:x="309" fg:w="2"/><text x="25.3515%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.1828%" y="325" width="0.0812%" height="15" fill="rgb(241,193,52)" fg:x="310" fg:w="1"/><text x="25.4328%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.1828%" y="309" width="0.0812%" height="15" fill="rgb(217,159,39)" fg:x="310" fg:w="1"/><text x="25.4328%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.1828%" y="293" width="0.0812%" height="15" fill="rgb(248,110,0)" fg:x="310" fg:w="1"/><text x="25.4328%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.1828%" y="277" width="0.0812%" height="15" fill="rgb(233,227,0)" fg:x="310" fg:w="1"/><text x="25.4328%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.1828%" y="261" width="0.0812%" height="15" fill="rgb(252,55,2)" fg:x="310" fg:w="1"/><text x="25.4328%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.1828%" y="245" width="0.0812%" height="15" fill="rgb(224,194,24)" fg:x="310" fg:w="1"/><text x="25.4328%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.1828%" y="229" width="0.0812%" height="15" fill="rgb(247,5,33)" fg:x="310" fg:w="1"/><text x="25.4328%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.1828%" y="213" width="0.0812%" height="15" fill="rgb(242,66,47)" fg:x="310" fg:w="1"/><text x="25.4328%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.1828%" y="197" width="0.0812%" height="15" fill="rgb(213,107,12)" fg:x="310" fg:w="1"/><text x="25.4328%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.1828%" y="181" width="0.0812%" height="15" fill="rgb(206,131,1)" fg:x="310" fg:w="1"/><text x="25.4328%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.1828%" y="165" width="0.0812%" height="15" fill="rgb(214,9,36)" fg:x="310" fg:w="1"/><text x="25.4328%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.1828%" y="149" width="0.0812%" height="15" fill="rgb(251,215,18)" fg:x="310" fg:w="1"/><text x="25.4328%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.2640%" y="373" width="0.0812%" height="15" fill="rgb(251,64,9)" fg:x="311" fg:w="1"/><text x="25.5140%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.2640%" y="357" width="0.0812%" height="15" fill="rgb(235,68,21)" fg:x="311" fg:w="1"/><text x="25.5140%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.2640%" y="341" width="0.0812%" height="15" fill="rgb(240,69,38)" fg:x="311" fg:w="1"/><text x="25.5140%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.2640%" y="325" width="0.0812%" height="15" fill="rgb(231,18,27)" fg:x="311" fg:w="1"/><text x="25.5140%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.2640%" y="309" width="0.0812%" height="15" fill="rgb(215,154,25)" fg:x="311" fg:w="1"/><text x="25.5140%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.2640%" y="293" width="0.0812%" height="15" fill="rgb(224,33,46)" fg:x="311" fg:w="1"/><text x="25.5140%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="25.2640%" y="277" width="0.0812%" height="15" fill="rgb(248,191,53)" fg:x="311" fg:w="1"/><text x="25.5140%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="25.2640%" y="261" width="0.0812%" height="15" fill="rgb(231,3,37)" fg:x="311" fg:w="1"/><text x="25.5140%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.3452%" y="309" width="0.0812%" height="15" fill="rgb(209,152,2)" fg:x="312" fg:w="1"/><text x="25.5952%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.49%)</title><rect x="25.1015%" y="389" width="0.4874%" height="15" fill="rgb(212,208,43)" fg:x="309" fg:w="6"/><text x="25.3515%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="25.3452%" y="373" width="0.2437%" height="15" fill="rgb(208,60,49)" fg:x="312" fg:w="3"/><text x="25.5952%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="25.3452%" y="357" width="0.2437%" height="15" fill="rgb(245,135,6)" fg:x="312" fg:w="3"/><text x="25.5952%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="25.3452%" y="341" width="0.2437%" height="15" fill="rgb(243,86,23)" fg:x="312" fg:w="3"/><text x="25.5952%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="25.3452%" y="325" width="0.2437%" height="15" fill="rgb(223,7,20)" fg:x="312" fg:w="3"/><text x="25.5952%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="25.4265%" y="309" width="0.1625%" height="15" fill="rgb(212,182,17)" fg:x="313" fg:w="2"/><text x="25.6765%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="25.4265%" y="293" width="0.1625%" height="15" fill="rgb(237,94,50)" fg:x="313" fg:w="2"/><text x="25.6765%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="25.4265%" y="277" width="0.1625%" height="15" fill="rgb(232,185,44)" fg:x="313" fg:w="2"/><text x="25.6765%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.5890%" y="357" width="0.0812%" height="15" fill="rgb(205,50,36)" fg:x="315" fg:w="1"/><text x="25.8390%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="25.5890%" y="389" width="0.2437%" height="15" fill="rgb(252,32,32)" fg:x="315" fg:w="3"/><text x="25.8390%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="25.5890%" y="373" width="0.2437%" height="15" fill="rgb(241,123,33)" fg:x="315" fg:w="3"/><text x="25.8390%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="25.6702%" y="357" width="0.1625%" height="15" fill="rgb(212,140,16)" fg:x="316" fg:w="2"/><text x="25.9202%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="25.6702%" y="341" width="0.1625%" height="15" fill="rgb(247,132,5)" fg:x="316" fg:w="2"/><text x="25.9202%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="25.6702%" y="325" width="0.1625%" height="15" fill="rgb(209,137,38)" fg:x="316" fg:w="2"/><text x="25.9202%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="25.6702%" y="309" width="0.1625%" height="15" fill="rgb(248,32,42)" fg:x="316" fg:w="2"/><text x="25.9202%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.7514%" y="293" width="0.0812%" height="15" fill="rgb(216,188,40)" fg:x="317" fg:w="1"/><text x="26.0014%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="25.7514%" y="277" width="0.0812%" height="15" fill="rgb(209,127,53)" fg:x="317" fg:w="1"/><text x="26.0014%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="25.7514%" y="261" width="0.0812%" height="15" fill="rgb(254,162,9)" fg:x="317" fg:w="1"/><text x="26.0014%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="25.9951%" y="245" width="0.1625%" height="15" fill="rgb(219,183,10)" fg:x="320" fg:w="2"/><text x="26.2451%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="25.9951%" y="229" width="0.1625%" height="15" fill="rgb(217,192,21)" fg:x="320" fg:w="2"/><text x="26.2451%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="25.8327%" y="309" width="0.4062%" height="15" fill="rgb(251,89,27)" fg:x="318" fg:w="5"/><text x="26.0827%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="25.8327%" y="293" width="0.4062%" height="15" fill="rgb(253,55,28)" fg:x="318" fg:w="5"/><text x="26.0827%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="25.9139%" y="277" width="0.3249%" height="15" fill="rgb(216,159,8)" fg:x="319" fg:w="4"/><text x="26.1639%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="25.9139%" y="261" width="0.3249%" height="15" fill="rgb(231,228,44)" fg:x="319" fg:w="4"/><text x="26.1639%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="26.1576%" y="245" width="0.0812%" height="15" fill="rgb(247,34,48)" fg:x="322" fg:w="1"/><text x="26.4076%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.1576%" y="229" width="0.0812%" height="15" fill="rgb(247,222,18)" fg:x="322" fg:w="1"/><text x="26.4076%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="26.1576%" y="213" width="0.0812%" height="15" fill="rgb(227,49,4)" fg:x="322" fg:w="1"/><text x="26.4076%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.2388%" y="277" width="0.0812%" height="15" fill="rgb(219,189,53)" fg:x="323" fg:w="1"/><text x="26.4888%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="26.2388%" y="309" width="0.1625%" height="15" fill="rgb(241,160,53)" fg:x="323" fg:w="2"/><text x="26.4888%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="26.2388%" y="293" width="0.1625%" height="15" fill="rgb(227,115,4)" fg:x="323" fg:w="2"/><text x="26.4888%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="26.3201%" y="277" width="0.0812%" height="15" fill="rgb(215,28,28)" fg:x="324" fg:w="1"/><text x="26.5701%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="26.3201%" y="261" width="0.0812%" height="15" fill="rgb(237,143,40)" fg:x="324" fg:w="1"/><text x="26.5701%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="26.4825%" y="261" width="0.0812%" height="15" fill="rgb(205,107,24)" fg:x="326" fg:w="1"/><text x="26.7325%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="26.4825%" y="245" width="0.0812%" height="15" fill="rgb(209,112,35)" fg:x="326" fg:w="1"/><text x="26.7325%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="26.5638%" y="261" width="0.1625%" height="15" fill="rgb(206,135,5)" fg:x="327" fg:w="2"/><text x="26.8138%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="26.5638%" y="245" width="0.1625%" height="15" fill="rgb(227,217,38)" fg:x="327" fg:w="2"/><text x="26.8138%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="26.6450%" y="229" width="0.0812%" height="15" fill="rgb(205,0,41)" fg:x="328" fg:w="1"/><text x="26.8950%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (16 samples, 1.30%)</title><rect x="26.8075%" y="245" width="1.2998%" height="15" fill="rgb(220,20,40)" fg:x="330" fg:w="16"/><text x="27.0575%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (16 samples, 1.30%)</title><rect x="26.8075%" y="229" width="1.2998%" height="15" fill="rgb(216,145,3)" fg:x="330" fg:w="16"/><text x="27.0575%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.0260%" y="213" width="0.0812%" height="15" fill="rgb(207,130,51)" fg:x="345" fg:w="1"/><text x="28.2760%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="28.1072%" y="245" width="0.1625%" height="15" fill="rgb(252,93,13)" fg:x="346" fg:w="2"/><text x="28.3572%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="28.1885%" y="229" width="0.0812%" height="15" fill="rgb(210,105,15)" fg:x="347" fg:w="1"/><text x="28.4385%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="28.1885%" y="213" width="0.0812%" height="15" fill="rgb(212,126,31)" fg:x="347" fg:w="1"/><text x="28.4385%" y="223.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 0.08%)</title><rect x="28.1885%" y="197" width="0.0812%" height="15" fill="rgb(241,167,46)" fg:x="347" fg:w="1"/><text x="28.4385%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.08%)</title><rect x="28.1885%" y="181" width="0.0812%" height="15" fill="rgb(217,143,19)" fg:x="347" fg:w="1"/><text x="28.4385%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.2697%" y="213" width="0.0812%" height="15" fill="rgb(235,117,33)" fg:x="348" fg:w="1"/><text x="28.5197%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.2697%" y="197" width="0.0812%" height="15" fill="rgb(247,95,6)" fg:x="348" fg:w="1"/><text x="28.5197%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.5134%" y="149" width="0.0812%" height="15" fill="rgb(243,206,43)" fg:x="351" fg:w="1"/><text x="28.7634%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.5134%" y="133" width="0.0812%" height="15" fill="rgb(229,65,54)" fg:x="351" fg:w="1"/><text x="28.7634%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.5134%" y="117" width="0.0812%" height="15" fill="rgb(247,137,34)" fg:x="351" fg:w="1"/><text x="28.7634%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="28.4322%" y="181" width="0.2437%" height="15" fill="rgb(245,174,44)" fg:x="350" fg:w="3"/><text x="28.6822%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="28.4322%" y="165" width="0.2437%" height="15" fill="rgb(223,64,15)" fg:x="350" fg:w="3"/><text x="28.6822%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="28.5946%" y="149" width="0.0812%" height="15" fill="rgb(243,153,36)" fg:x="352" fg:w="1"/><text x="28.8446%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.5946%" y="133" width="0.0812%" height="15" fill="rgb(252,23,4)" fg:x="352" fg:w="1"/><text x="28.8446%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="28.6759%" y="181" width="0.0812%" height="15" fill="rgb(209,132,13)" fg:x="353" fg:w="1"/><text x="28.9259%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="28.6759%" y="165" width="0.0812%" height="15" fill="rgb(209,196,21)" fg:x="353" fg:w="1"/><text x="28.9259%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (43 samples, 3.49%)</title><rect x="28.7571%" y="181" width="3.4931%" height="15" fill="rgb(252,197,1)" fg:x="354" fg:w="43"/><text x="29.0071%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (43 samples, 3.49%)</title><rect x="28.7571%" y="165" width="3.4931%" height="15" fill="rgb(229,42,46)" fg:x="354" fg:w="43"/><text x="29.0071%" y="175.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (43 samples, 3.49%)</title><rect x="28.7571%" y="149" width="3.4931%" height="15" fill="rgb(219,85,8)" fg:x="354" fg:w="43"/><text x="29.0071%" y="159.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="32.2502%" y="181" width="0.2437%" height="15" fill="rgb(223,185,14)" fg:x="397" fg:w="3"/><text x="32.5002%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.4127%" y="165" width="0.0812%" height="15" fill="rgb(217,196,18)" fg:x="399" fg:w="1"/><text x="32.6627%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 4.31%)</title><rect x="28.2697%" y="229" width="4.3054%" height="15" fill="rgb(220,122,37)" fg:x="348" fg:w="53"/><text x="28.5197%" y="239.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (52 samples, 4.22%)</title><rect x="28.3509%" y="213" width="4.2242%" height="15" fill="rgb(236,135,33)" fg:x="349" fg:w="52"/><text x="28.6009%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (51 samples, 4.14%)</title><rect x="28.4322%" y="197" width="4.1430%" height="15" fill="rgb(222,86,54)" fg:x="350" fg:w="51"/><text x="28.6822%" y="207.50">regex..</text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="32.4939%" y="181" width="0.0812%" height="15" fill="rgb(227,42,22)" fg:x="400" fg:w="1"/><text x="32.7439%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.5751%" y="229" width="0.0812%" height="15" fill="rgb(243,101,27)" fg:x="401" fg:w="1"/><text x="32.8251%" y="239.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="32.6564%" y="213" width="0.0812%" height="15" fill="rgb(229,100,8)" fg:x="402" fg:w="1"/><text x="32.9064%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="32.7376%" y="213" width="0.1625%" height="15" fill="rgb(252,68,10)" fg:x="403" fg:w="2"/><text x="32.9876%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.8188%" y="197" width="0.0812%" height="15" fill="rgb(219,19,31)" fg:x="404" fg:w="1"/><text x="33.0688%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.8188%" y="181" width="0.0812%" height="15" fill="rgb(246,150,44)" fg:x="404" fg:w="1"/><text x="33.0688%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.8188%" y="165" width="0.0812%" height="15" fill="rgb(211,14,39)" fg:x="404" fg:w="1"/><text x="33.0688%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.49%)</title><rect x="32.6564%" y="229" width="0.4874%" height="15" fill="rgb(221,98,29)" fg:x="402" fg:w="6"/><text x="32.9064%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="32.9001%" y="213" width="0.2437%" height="15" fill="rgb(221,70,26)" fg:x="405" fg:w="3"/><text x="33.1501%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (61 samples, 4.96%)</title><rect x="28.2697%" y="245" width="4.9553%" height="15" fill="rgb(236,146,30)" fg:x="348" fg:w="61"/><text x="28.5197%" y="255.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="33.1438%" y="229" width="0.0812%" height="15" fill="rgb(226,94,34)" fg:x="408" fg:w="1"/><text x="33.3938%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="33.1438%" y="213" width="0.0812%" height="15" fill="rgb(248,132,21)" fg:x="408" fg:w="1"/><text x="33.3938%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="33.2250%" y="245" width="0.0812%" height="15" fill="rgb(245,43,50)" fg:x="409" fg:w="1"/><text x="33.4750%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="33.2250%" y="229" width="0.0812%" height="15" fill="rgb(245,132,31)" fg:x="409" fg:w="1"/><text x="33.4750%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="33.2250%" y="213" width="0.0812%" height="15" fill="rgb(230,171,4)" fg:x="409" fg:w="1"/><text x="33.4750%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.2250%" y="197" width="0.0812%" height="15" fill="rgb(235,6,45)" fg:x="409" fg:w="1"/><text x="33.4750%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.2250%" y="181" width="0.0812%" height="15" fill="rgb(220,80,28)" fg:x="409" fg:w="1"/><text x="33.4750%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="33.2250%" y="165" width="0.0812%" height="15" fill="rgb(242,171,9)" fg:x="409" fg:w="1"/><text x="33.4750%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="33.2250%" y="149" width="0.0812%" height="15" fill="rgb(214,135,29)" fg:x="409" fg:w="1"/><text x="33.4750%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (82 samples, 6.66%)</title><rect x="26.7262%" y="261" width="6.6613%" height="15" fill="rgb(221,229,16)" fg:x="329" fg:w="82"/><text x="26.9762%" y="271.50">regex_aut..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="33.3063%" y="245" width="0.0812%" height="15" fill="rgb(253,59,46)" fg:x="410" fg:w="1"/><text x="33.5563%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="33.3875%" y="261" width="0.3249%" height="15" fill="rgb(250,147,20)" fg:x="411" fg:w="4"/><text x="33.6375%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="33.3875%" y="245" width="0.3249%" height="15" fill="rgb(236,64,48)" fg:x="411" fg:w="4"/><text x="33.6375%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="33.3875%" y="229" width="0.3249%" height="15" fill="rgb(240,37,42)" fg:x="411" fg:w="4"/><text x="33.6375%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="33.4687%" y="213" width="0.2437%" height="15" fill="rgb(220,41,50)" fg:x="412" fg:w="3"/><text x="33.7187%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="33.4687%" y="197" width="0.2437%" height="15" fill="rgb(216,51,14)" fg:x="412" fg:w="3"/><text x="33.7187%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="33.4687%" y="181" width="0.2437%" height="15" fill="rgb(215,83,10)" fg:x="412" fg:w="3"/><text x="33.7187%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="33.4687%" y="165" width="0.2437%" height="15" fill="rgb(206,144,17)" fg:x="412" fg:w="3"/><text x="33.7187%" y="175.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (92 samples, 7.47%)</title><rect x="26.4013%" y="293" width="7.4736%" height="15" fill="rgb(219,196,37)" fg:x="325" fg:w="92"/><text x="26.6513%" y="303.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (91 samples, 7.39%)</title><rect x="26.4825%" y="277" width="7.3924%" height="15" fill="rgb(226,135,26)" fg:x="326" fg:w="91"/><text x="26.7325%" y="287.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="33.7124%" y="261" width="0.1625%" height="15" fill="rgb(237,195,40)" fg:x="415" fg:w="2"/><text x="33.9624%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="33.7124%" y="245" width="0.1625%" height="15" fill="rgb(228,182,42)" fg:x="415" fg:w="2"/><text x="33.9624%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="33.7937%" y="229" width="0.0812%" height="15" fill="rgb(224,135,50)" fg:x="416" fg:w="1"/><text x="34.0437%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="33.7937%" y="213" width="0.0812%" height="15" fill="rgb(236,215,34)" fg:x="416" fg:w="1"/><text x="34.0437%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.7937%" y="197" width="0.0812%" height="15" fill="rgb(244,213,27)" fg:x="416" fg:w="1"/><text x="34.0437%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.7937%" y="181" width="0.0812%" height="15" fill="rgb(233,37,53)" fg:x="416" fg:w="1"/><text x="34.0437%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.7937%" y="165" width="0.0812%" height="15" fill="rgb(222,132,14)" fg:x="416" fg:w="1"/><text x="34.0437%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (93 samples, 7.55%)</title><rect x="26.4013%" y="309" width="7.5548%" height="15" fill="rgb(219,202,29)" fg:x="325" fg:w="93"/><text x="26.6513%" y="319.50">regex::reg..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="33.8749%" y="293" width="0.0812%" height="15" fill="rgb(226,157,39)" fg:x="417" fg:w="1"/><text x="34.1249%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.65%)</title><rect x="33.9561%" y="261" width="0.6499%" height="15" fill="rgb(235,213,2)" fg:x="418" fg:w="8"/><text x="34.2061%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.65%)</title><rect x="33.9561%" y="245" width="0.6499%" height="15" fill="rgb(250,121,2)" fg:x="418" fg:w="8"/><text x="34.2061%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="34.4435%" y="229" width="0.1625%" height="15" fill="rgb(206,192,33)" fg:x="424" fg:w="2"/><text x="34.6935%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (109 samples, 8.85%)</title><rect x="25.8327%" y="325" width="8.8546%" height="15" fill="rgb(240,161,6)" fg:x="318" fg:w="109"/><text x="26.0827%" y="335.50">indefinite::h..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.73%)</title><rect x="33.9561%" y="309" width="0.7311%" height="15" fill="rgb(246,53,30)" fg:x="418" fg:w="9"/><text x="34.2061%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.73%)</title><rect x="33.9561%" y="293" width="0.7311%" height="15" fill="rgb(219,123,43)" fg:x="418" fg:w="9"/><text x="34.2061%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.73%)</title><rect x="33.9561%" y="277" width="0.7311%" height="15" fill="rgb(236,53,49)" fg:x="418" fg:w="9"/><text x="34.2061%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="34.6060%" y="261" width="0.0812%" height="15" fill="rgb(241,156,1)" fg:x="426" fg:w="1"/><text x="34.8560%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="34.6060%" y="245" width="0.0812%" height="15" fill="rgb(209,73,26)" fg:x="426" fg:w="1"/><text x="34.8560%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="34.7685%" y="277" width="0.0812%" height="15" fill="rgb(206,114,3)" fg:x="428" fg:w="1"/><text x="35.0185%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="34.7685%" y="261" width="0.0812%" height="15" fill="rgb(230,214,9)" fg:x="428" fg:w="1"/><text x="35.0185%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="34.7685%" y="309" width="0.1625%" height="15" fill="rgb(240,184,46)" fg:x="428" fg:w="2"/><text x="35.0185%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="34.7685%" y="293" width="0.1625%" height="15" fill="rgb(242,169,54)" fg:x="428" fg:w="2"/><text x="35.0185%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="34.8497%" y="277" width="0.0812%" height="15" fill="rgb(207,168,50)" fg:x="429" fg:w="1"/><text x="35.0997%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="34.8497%" y="261" width="0.0812%" height="15" fill="rgb(240,114,2)" fg:x="429" fg:w="1"/><text x="35.0997%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.8497%" y="245" width="0.0812%" height="15" fill="rgb(211,17,40)" fg:x="429" fg:w="1"/><text x="35.0997%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.0934%" y="213" width="0.0812%" height="15" fill="rgb(235,97,36)" fg:x="432" fg:w="1"/><text x="35.3434%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="35.0934%" y="197" width="0.0812%" height="15" fill="rgb(208,164,11)" fg:x="432" fg:w="1"/><text x="35.3434%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.0934%" y="181" width="0.0812%" height="15" fill="rgb(242,11,17)" fg:x="432" fg:w="1"/><text x="35.3434%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.49%)</title><rect x="34.9310%" y="309" width="0.4874%" height="15" fill="rgb(215,86,33)" fg:x="430" fg:w="6"/><text x="35.1810%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.49%)</title><rect x="34.9310%" y="293" width="0.4874%" height="15" fill="rgb(245,185,28)" fg:x="430" fg:w="6"/><text x="35.1810%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.49%)</title><rect x="34.9310%" y="277" width="0.4874%" height="15" fill="rgb(231,89,42)" fg:x="430" fg:w="6"/><text x="35.1810%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.49%)</title><rect x="34.9310%" y="261" width="0.4874%" height="15" fill="rgb(210,18,47)" fg:x="430" fg:w="6"/><text x="35.1810%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.49%)</title><rect x="34.9310%" y="245" width="0.4874%" height="15" fill="rgb(214,84,8)" fg:x="430" fg:w="6"/><text x="35.1810%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.49%)</title><rect x="34.9310%" y="229" width="0.4874%" height="15" fill="rgb(214,222,23)" fg:x="430" fg:w="6"/><text x="35.1810%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="35.1747%" y="213" width="0.2437%" height="15" fill="rgb(213,104,21)" fg:x="433" fg:w="3"/><text x="35.4247%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.4996%" y="261" width="0.0812%" height="15" fill="rgb(238,138,6)" fg:x="437" fg:w="1"/><text x="35.7496%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.4996%" y="245" width="0.0812%" height="15" fill="rgb(205,167,50)" fg:x="437" fg:w="1"/><text x="35.7496%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.4996%" y="229" width="0.0812%" height="15" fill="rgb(230,105,27)" fg:x="437" fg:w="1"/><text x="35.7496%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="35.5808%" y="261" width="0.0812%" height="15" fill="rgb(222,97,48)" fg:x="438" fg:w="1"/><text x="35.8308%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.5808%" y="245" width="0.0812%" height="15" fill="rgb(222,197,14)" fg:x="438" fg:w="1"/><text x="35.8308%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.06%)</title><rect x="35.8245%" y="245" width="1.0561%" height="15" fill="rgb(210,105,47)" fg:x="441" fg:w="13"/><text x="36.0745%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.06%)</title><rect x="35.8245%" y="229" width="1.0561%" height="15" fill="rgb(238,158,19)" fg:x="441" fg:w="13"/><text x="36.0745%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.7994%" y="213" width="0.0812%" height="15" fill="rgb(226,176,23)" fg:x="453" fg:w="1"/><text x="37.0494%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="36.8806%" y="245" width="0.1625%" height="15" fill="rgb(208,79,31)" fg:x="454" fg:w="2"/><text x="37.1306%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="36.9618%" y="229" width="0.0812%" height="15" fill="rgb(221,154,21)" fg:x="455" fg:w="1"/><text x="37.2118%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="36.9618%" y="213" width="0.0812%" height="15" fill="rgb(213,61,41)" fg:x="455" fg:w="1"/><text x="37.2118%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.32%)</title><rect x="37.1243%" y="213" width="0.3249%" height="15" fill="rgb(215,28,33)" fg:x="457" fg:w="4"/><text x="37.3743%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="37.2055%" y="197" width="0.2437%" height="15" fill="rgb(231,139,26)" fg:x="458" fg:w="3"/><text x="37.4555%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="37.2868%" y="181" width="0.1625%" height="15" fill="rgb(232,159,16)" fg:x="459" fg:w="2"/><text x="37.5368%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="37.2868%" y="165" width="0.1625%" height="15" fill="rgb(233,80,10)" fg:x="459" fg:w="2"/><text x="37.5368%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="37.2868%" y="149" width="0.1625%" height="15" fill="rgb(208,147,29)" fg:x="459" fg:w="2"/><text x="37.5368%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="37.4492%" y="213" width="0.1625%" height="15" fill="rgb(213,10,12)" fg:x="461" fg:w="2"/><text x="37.6992%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="37.4492%" y="197" width="0.1625%" height="15" fill="rgb(231,218,13)" fg:x="461" fg:w="2"/><text x="37.6992%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="37.4492%" y="181" width="0.1625%" height="15" fill="rgb(244,199,44)" fg:x="461" fg:w="2"/><text x="37.6992%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.65%)</title><rect x="37.0431%" y="245" width="0.6499%" height="15" fill="rgb(240,144,53)" fg:x="456" fg:w="8"/><text x="37.2931%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.65%)</title><rect x="37.0431%" y="229" width="0.6499%" height="15" fill="rgb(223,57,28)" fg:x="456" fg:w="8"/><text x="37.2931%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="37.6117%" y="213" width="0.0812%" height="15" fill="rgb(213,134,38)" fg:x="463" fg:w="1"/><text x="37.8617%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="38.0991%" y="133" width="0.1625%" height="15" fill="rgb(251,182,42)" fg:x="469" fg:w="2"/><text x="38.3491%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (7 samples, 0.57%)</title><rect x="38.2616%" y="133" width="0.5686%" height="15" fill="rgb(229,93,13)" fg:x="471" fg:w="7"/><text x="38.5116%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.49%)</title><rect x="38.3428%" y="117" width="0.4874%" height="15" fill="rgb(234,171,3)" fg:x="472" fg:w="6"/><text x="38.5928%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="38.4240%" y="101" width="0.4062%" height="15" fill="rgb(241,105,32)" fg:x="473" fg:w="5"/><text x="38.6740%" y="111.50"></text></g><g><title>realloc (5 samples, 0.41%)</title><rect x="38.4240%" y="85" width="0.4062%" height="15" fill="rgb(221,66,3)" fg:x="473" fg:w="5"/><text x="38.6740%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.9927%" y="101" width="0.0812%" height="15" fill="rgb(248,155,29)" fg:x="480" fg:w="1"/><text x="39.2427%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.9927%" y="85" width="0.0812%" height="15" fill="rgb(231,31,5)" fg:x="480" fg:w="1"/><text x="39.2427%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.49%)</title><rect x="38.8302%" y="133" width="0.4874%" height="15" fill="rgb(213,188,31)" fg:x="478" fg:w="6"/><text x="39.0802%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.49%)</title><rect x="38.8302%" y="117" width="0.4874%" height="15" fill="rgb(212,104,33)" fg:x="478" fg:w="6"/><text x="39.0802%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="39.0739%" y="101" width="0.2437%" height="15" fill="rgb(254,77,51)" fg:x="481" fg:w="3"/><text x="39.3239%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="39.2364%" y="85" width="0.0812%" height="15" fill="rgb(234,39,26)" fg:x="483" fg:w="1"/><text x="39.4864%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.2364%" y="69" width="0.0812%" height="15" fill="rgb(208,88,36)" fg:x="483" fg:w="1"/><text x="39.4864%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.2364%" y="53" width="0.0812%" height="15" fill="rgb(243,222,10)" fg:x="483" fg:w="1"/><text x="39.4864%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.2364%" y="37" width="0.0812%" height="15" fill="rgb(218,133,52)" fg:x="483" fg:w="1"/><text x="39.4864%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="39.3176%" y="133" width="0.0812%" height="15" fill="rgb(222,25,26)" fg:x="484" fg:w="1"/><text x="39.5676%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="39.3176%" y="117" width="0.0812%" height="15" fill="rgb(243,174,24)" fg:x="484" fg:w="1"/><text x="39.5676%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="39.3176%" y="101" width="0.0812%" height="15" fill="rgb(233,188,52)" fg:x="484" fg:w="1"/><text x="39.5676%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.3989%" y="117" width="0.0812%" height="15" fill="rgb(208,89,14)" fg:x="485" fg:w="1"/><text x="39.6489%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.3989%" y="101" width="0.0812%" height="15" fill="rgb(205,204,21)" fg:x="485" fg:w="1"/><text x="39.6489%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.3989%" y="85" width="0.0812%" height="15" fill="rgb(246,39,28)" fg:x="485" fg:w="1"/><text x="39.6489%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (42 samples, 3.41%)</title><rect x="39.3989%" y="133" width="3.4119%" height="15" fill="rgb(235,71,19)" fg:x="485" fg:w="42"/><text x="39.6489%" y="143.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (41 samples, 3.33%)</title><rect x="39.4801%" y="117" width="3.3306%" height="15" fill="rgb(211,62,39)" fg:x="486" fg:w="41"/><text x="39.7301%" y="127.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (41 samples, 3.33%)</title><rect x="39.4801%" y="101" width="3.3306%" height="15" fill="rgb(246,118,20)" fg:x="486" fg:w="41"/><text x="39.7301%" y="111.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="42.8107%" y="133" width="0.0812%" height="15" fill="rgb(230,82,12)" fg:x="527" fg:w="1"/><text x="43.0607%" y="143.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (2 samples, 0.16%)</title><rect x="42.8920%" y="133" width="0.1625%" height="15" fill="rgb(205,212,34)" fg:x="528" fg:w="2"/><text x="43.1420%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="43.0544%" y="133" width="0.0812%" height="15" fill="rgb(239,90,1)" fg:x="530" fg:w="1"/><text x="43.3044%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 5.52%)</title><rect x="37.6929%" y="229" width="5.5240%" height="15" fill="rgb(225,198,50)" fg:x="464" fg:w="68"/><text x="37.9429%" y="239.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (68 samples, 5.52%)</title><rect x="37.6929%" y="213" width="5.5240%" height="15" fill="rgb(227,208,48)" fg:x="464" fg:w="68"/><text x="37.9429%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (68 samples, 5.52%)</title><rect x="37.6929%" y="197" width="5.5240%" height="15" fill="rgb(238,134,41)" fg:x="464" fg:w="68"/><text x="37.9429%" y="207.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (68 samples, 5.52%)</title><rect x="37.6929%" y="181" width="5.5240%" height="15" fill="rgb(241,58,39)" fg:x="464" fg:w="68"/><text x="37.9429%" y="191.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (68 samples, 5.52%)</title><rect x="37.6929%" y="165" width="5.5240%" height="15" fill="rgb(214,126,4)" fg:x="464" fg:w="68"/><text x="37.9429%" y="175.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (68 samples, 5.52%)</title><rect x="37.6929%" y="149" width="5.5240%" height="15" fill="rgb(235,149,4)" fg:x="464" fg:w="68"/><text x="37.9429%" y="159.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="43.1357%" y="133" width="0.0812%" height="15" fill="rgb(236,59,29)" fg:x="531" fg:w="1"/><text x="43.3857%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.2981%" y="213" width="0.0812%" height="15" fill="rgb(246,11,33)" fg:x="533" fg:w="1"/><text x="43.5481%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="43.3794%" y="213" width="0.1625%" height="15" fill="rgb(232,180,35)" fg:x="534" fg:w="2"/><text x="43.6294%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.4606%" y="197" width="0.0812%" height="15" fill="rgb(220,35,37)" fg:x="535" fg:w="1"/><text x="43.7106%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.4606%" y="181" width="0.0812%" height="15" fill="rgb(238,107,48)" fg:x="535" fg:w="1"/><text x="43.7106%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.4606%" y="165" width="0.0812%" height="15" fill="rgb(205,65,21)" fg:x="535" fg:w="1"/><text x="43.7106%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (98 samples, 7.96%)</title><rect x="35.6621%" y="261" width="7.9610%" height="15" fill="rgb(246,138,48)" fg:x="439" fg:w="98"/><text x="35.9121%" y="271.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (73 samples, 5.93%)</title><rect x="37.6929%" y="245" width="5.9301%" height="15" fill="rgb(209,220,47)" fg:x="464" fg:w="73"/><text x="37.9429%" y="255.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="43.2169%" y="229" width="0.4062%" height="15" fill="rgb(222,162,49)" fg:x="532" fg:w="5"/><text x="43.4669%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="43.5418%" y="213" width="0.0812%" height="15" fill="rgb(243,123,11)" fg:x="536" fg:w="1"/><text x="43.7918%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="43.5418%" y="197" width="0.0812%" height="15" fill="rgb(221,229,41)" fg:x="536" fg:w="1"/><text x="43.7918%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.5418%" y="181" width="0.0812%" height="15" fill="rgb(216,68,4)" fg:x="536" fg:w="1"/><text x="43.7918%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="43.7043%" y="229" width="0.0812%" height="15" fill="rgb(207,88,35)" fg:x="538" fg:w="1"/><text x="43.9543%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="43.7043%" y="213" width="0.0812%" height="15" fill="rgb(252,2,5)" fg:x="538" fg:w="1"/><text x="43.9543%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="43.7855%" y="213" width="0.0812%" height="15" fill="rgb(209,173,7)" fg:x="539" fg:w="1"/><text x="44.0355%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.8668%" y="213" width="0.0812%" height="15" fill="rgb(210,198,52)" fg:x="540" fg:w="1"/><text x="44.1168%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.41%)</title><rect x="43.6231%" y="261" width="0.4062%" height="15" fill="rgb(228,152,32)" fg:x="537" fg:w="5"/><text x="43.8731%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.41%)</title><rect x="43.6231%" y="245" width="0.4062%" height="15" fill="rgb(249,98,29)" fg:x="537" fg:w="5"/><text x="43.8731%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="43.7855%" y="229" width="0.2437%" height="15" fill="rgb(205,148,48)" fg:x="539" fg:w="3"/><text x="44.0355%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.9480%" y="213" width="0.0812%" height="15" fill="rgb(236,69,34)" fg:x="541" fg:w="1"/><text x="44.1980%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.9480%" y="197" width="0.0812%" height="15" fill="rgb(220,151,41)" fg:x="541" fg:w="1"/><text x="44.1980%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.9480%" y="181" width="0.0812%" height="15" fill="rgb(254,106,24)" fg:x="541" fg:w="1"/><text x="44.1980%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="44.0292%" y="229" width="0.0812%" height="15" fill="rgb(210,37,48)" fg:x="542" fg:w="1"/><text x="44.2792%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="44.0292%" y="213" width="0.0812%" height="15" fill="rgb(254,131,5)" fg:x="542" fg:w="1"/><text x="44.2792%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="44.0292%" y="197" width="0.0812%" height="15" fill="rgb(216,55,41)" fg:x="542" fg:w="1"/><text x="44.2792%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="44.0292%" y="181" width="0.0812%" height="15" fill="rgb(250,35,31)" fg:x="542" fg:w="1"/><text x="44.2792%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (117 samples, 9.50%)</title><rect x="34.6872%" y="325" width="9.5045%" height="15" fill="rgb(207,124,33)" fg:x="427" fg:w="117"/><text x="34.9372%" y="335.50">indefinite::ru..</text></g><g><title>regex::regex::string::Regex::new (108 samples, 8.77%)</title><rect x="35.4184%" y="309" width="8.7734%" height="15" fill="rgb(249,175,17)" fg:x="436" fg:w="108"/><text x="35.6684%" y="319.50">regex::regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (108 samples, 8.77%)</title><rect x="35.4184%" y="293" width="8.7734%" height="15" fill="rgb(224,175,39)" fg:x="436" fg:w="108"/><text x="35.6684%" y="303.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (107 samples, 8.69%)</title><rect x="35.4996%" y="277" width="8.6921%" height="15" fill="rgb(208,67,49)" fg:x="437" fg:w="107"/><text x="35.7496%" y="287.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="44.0292%" y="261" width="0.1625%" height="15" fill="rgb(222,188,41)" fg:x="542" fg:w="2"/><text x="44.2792%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="44.0292%" y="245" width="0.1625%" height="15" fill="rgb(243,213,30)" fg:x="542" fg:w="2"/><text x="44.2792%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="44.1105%" y="229" width="0.0812%" height="15" fill="rgb(253,100,45)" fg:x="543" fg:w="1"/><text x="44.3605%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="44.2729%" y="261" width="0.0812%" height="15" fill="rgb(226,24,44)" fg:x="545" fg:w="1"/><text x="44.5229%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="44.2729%" y="245" width="0.0812%" height="15" fill="rgb(215,41,24)" fg:x="545" fg:w="1"/><text x="44.5229%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="44.1917%" y="293" width="0.2437%" height="15" fill="rgb(254,53,33)" fg:x="544" fg:w="3"/><text x="44.4417%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="44.1917%" y="277" width="0.2437%" height="15" fill="rgb(242,103,10)" fg:x="544" fg:w="3"/><text x="44.4417%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="44.3542%" y="261" width="0.0812%" height="15" fill="rgb(246,29,21)" fg:x="546" fg:w="1"/><text x="44.6042%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="44.3542%" y="245" width="0.0812%" height="15" fill="rgb(251,154,1)" fg:x="546" fg:w="1"/><text x="44.6042%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="44.4354%" y="293" width="0.0812%" height="15" fill="rgb(254,212,26)" fg:x="547" fg:w="1"/><text x="44.6854%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="44.4354%" y="277" width="0.0812%" height="15" fill="rgb(251,187,46)" fg:x="547" fg:w="1"/><text x="44.6854%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="44.4354%" y="261" width="0.0812%" height="15" fill="rgb(224,208,14)" fg:x="547" fg:w="1"/><text x="44.6854%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="44.4354%" y="245" width="0.0812%" height="15" fill="rgb(222,176,26)" fg:x="547" fg:w="1"/><text x="44.6854%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="44.4354%" y="229" width="0.0812%" height="15" fill="rgb(241,219,52)" fg:x="547" fg:w="1"/><text x="44.6854%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="44.4354%" y="213" width="0.0812%" height="15" fill="rgb(252,198,21)" fg:x="547" fg:w="1"/><text x="44.6854%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="44.5979%" y="245" width="0.0812%" height="15" fill="rgb(244,196,23)" fg:x="549" fg:w="1"/><text x="44.8479%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="44.5979%" y="229" width="0.0812%" height="15" fill="rgb(239,121,44)" fg:x="549" fg:w="1"/><text x="44.8479%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="44.5979%" y="213" width="0.0812%" height="15" fill="rgb(249,203,23)" fg:x="549" fg:w="1"/><text x="44.8479%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="44.5979%" y="197" width="0.0812%" height="15" fill="rgb(238,219,10)" fg:x="549" fg:w="1"/><text x="44.8479%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.6791%" y="229" width="0.0812%" height="15" fill="rgb(241,35,46)" fg:x="550" fg:w="1"/><text x="44.9291%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="44.7604%" y="213" width="0.0812%" height="15" fill="rgb(218,28,6)" fg:x="551" fg:w="1"/><text x="45.0104%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="44.7604%" y="229" width="0.1625%" height="15" fill="rgb(233,151,50)" fg:x="551" fg:w="2"/><text x="45.0104%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="44.8416%" y="213" width="0.0812%" height="15" fill="rgb(208,57,8)" fg:x="552" fg:w="1"/><text x="45.0916%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="44.9228%" y="213" width="0.0812%" height="15" fill="rgb(253,99,10)" fg:x="553" fg:w="1"/><text x="45.1728%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="44.9228%" y="197" width="0.0812%" height="15" fill="rgb(237,196,49)" fg:x="553" fg:w="1"/><text x="45.1728%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="44.9228%" y="229" width="0.3249%" height="15" fill="rgb(209,51,3)" fg:x="553" fg:w="4"/><text x="45.1728%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="45.0041%" y="213" width="0.2437%" height="15" fill="rgb(238,129,10)" fg:x="554" fg:w="3"/><text x="45.2541%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="45.2478%" y="213" width="0.2437%" height="15" fill="rgb(246,201,16)" fg:x="557" fg:w="3"/><text x="45.4978%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="45.2478%" y="197" width="0.2437%" height="15" fill="rgb(250,160,20)" fg:x="557" fg:w="3"/><text x="45.4978%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="45.2478%" y="181" width="0.2437%" height="15" fill="rgb(251,107,25)" fg:x="557" fg:w="3"/><text x="45.4978%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="45.3290%" y="165" width="0.1625%" height="15" fill="rgb(212,103,39)" fg:x="558" fg:w="2"/><text x="45.5790%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="45.5727%" y="197" width="0.3249%" height="15" fill="rgb(207,9,29)" fg:x="561" fg:w="4"/><text x="45.8227%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="45.7352%" y="181" width="0.1625%" height="15" fill="rgb(227,84,3)" fg:x="563" fg:w="2"/><text x="45.9852%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (16 samples, 1.30%)</title><rect x="44.6791%" y="245" width="1.2998%" height="15" fill="rgb(242,194,7)" fg:x="550" fg:w="16"/><text x="44.9291%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.73%)</title><rect x="45.2478%" y="229" width="0.7311%" height="15" fill="rgb(230,40,4)" fg:x="557" fg:w="9"/><text x="45.4978%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.49%)</title><rect x="45.4915%" y="213" width="0.4874%" height="15" fill="rgb(243,229,33)" fg:x="560" fg:w="6"/><text x="45.7415%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="45.8976%" y="197" width="0.0812%" height="15" fill="rgb(240,65,24)" fg:x="565" fg:w="1"/><text x="46.1476%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="45.9789%" y="197" width="0.0812%" height="15" fill="rgb(212,28,20)" fg:x="566" fg:w="1"/><text x="46.2289%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="45.9789%" y="181" width="0.0812%" height="15" fill="rgb(209,72,3)" fg:x="566" fg:w="1"/><text x="46.2289%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="45.9789%" y="165" width="0.0812%" height="15" fill="rgb(238,170,36)" fg:x="566" fg:w="1"/><text x="46.2289%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="45.9789%" y="245" width="0.2437%" height="15" fill="rgb(236,19,38)" fg:x="566" fg:w="3"/><text x="46.2289%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="45.9789%" y="229" width="0.2437%" height="15" fill="rgb(230,67,43)" fg:x="566" fg:w="3"/><text x="46.2289%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="45.9789%" y="213" width="0.2437%" height="15" fill="rgb(227,14,36)" fg:x="566" fg:w="3"/><text x="46.2289%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="46.0601%" y="197" width="0.1625%" height="15" fill="rgb(247,171,49)" fg:x="567" fg:w="2"/><text x="46.3101%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="46.0601%" y="181" width="0.1625%" height="15" fill="rgb(235,164,51)" fg:x="567" fg:w="2"/><text x="46.3101%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="46.0601%" y="165" width="0.1625%" height="15" fill="rgb(246,107,20)" fg:x="567" fg:w="2"/><text x="46.3101%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="46.0601%" y="149" width="0.1625%" height="15" fill="rgb(226,88,18)" fg:x="567" fg:w="2"/><text x="46.3101%" y="159.50"></text></g><g><title>regex::regex::string::Regex::new (22 samples, 1.79%)</title><rect x="44.5167%" y="293" width="1.7872%" height="15" fill="rgb(235,136,9)" fg:x="548" fg:w="22"/><text x="44.7667%" y="303.50">r..</text></g><g><title>regex::builders::string::RegexBuilder::build (22 samples, 1.79%)</title><rect x="44.5167%" y="277" width="1.7872%" height="15" fill="rgb(209,3,34)" fg:x="548" fg:w="22"/><text x="44.7667%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (22 samples, 1.79%)</title><rect x="44.5167%" y="261" width="1.7872%" height="15" fill="rgb(213,38,19)" fg:x="548" fg:w="22"/><text x="44.7667%" y="271.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="46.2226%" y="245" width="0.0812%" height="15" fill="rgb(254,24,24)" fg:x="569" fg:w="1"/><text x="46.4726%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="46.2226%" y="229" width="0.0812%" height="15" fill="rgb(219,122,42)" fg:x="569" fg:w="1"/><text x="46.4726%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="46.2226%" y="213" width="0.0812%" height="15" fill="rgb(205,128,31)" fg:x="569" fg:w="1"/><text x="46.4726%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="46.3038%" y="229" width="0.1625%" height="15" fill="rgb(212,142,0)" fg:x="570" fg:w="2"/><text x="46.5538%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (269 samples, 21.85%)</title><rect x="24.6954%" y="405" width="21.8522%" height="15" fill="rgb(211,25,35)" fg:x="304" fg:w="269"/><text x="24.9454%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugi..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (255 samples, 20.71%)</title><rect x="25.8327%" y="389" width="20.7149%" height="15" fill="rgb(220,150,53)" fg:x="318" fg:w="255"/><text x="26.0827%" y="399.50">plugins_core::looking::model::Unq..</text></g><g><title>indefinite::indefinite (255 samples, 20.71%)</title><rect x="25.8327%" y="373" width="20.7149%" height="15" fill="rgb(220,30,24)" fg:x="318" fg:w="255"/><text x="26.0827%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (255 samples, 20.71%)</title><rect x="25.8327%" y="357" width="20.7149%" height="15" fill="rgb(218,86,23)" fg:x="318" fg:w="255"/><text x="26.0827%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (255 samples, 20.71%)</title><rect x="25.8327%" y="341" width="20.7149%" height="15" fill="rgb(206,62,27)" fg:x="318" fg:w="255"/><text x="26.0827%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (29 samples, 2.36%)</title><rect x="44.1917%" y="325" width="2.3558%" height="15" fill="rgb(249,174,0)" fg:x="544" fg:w="29"/><text x="44.4417%" y="335.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (29 samples, 2.36%)</title><rect x="44.1917%" y="309" width="2.3558%" height="15" fill="rgb(246,67,27)" fg:x="544" fg:w="29"/><text x="44.4417%" y="319.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="46.3038%" y="293" width="0.2437%" height="15" fill="rgb(250,195,30)" fg:x="570" fg:w="3"/><text x="46.5538%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="46.3038%" y="277" width="0.2437%" height="15" fill="rgb(251,171,50)" fg:x="570" fg:w="3"/><text x="46.5538%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="46.3038%" y="261" width="0.2437%" height="15" fill="rgb(236,196,10)" fg:x="570" fg:w="3"/><text x="46.5538%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="46.3038%" y="245" width="0.2437%" height="15" fill="rgb(249,228,52)" fg:x="570" fg:w="3"/><text x="46.5538%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="46.4663%" y="229" width="0.0812%" height="15" fill="rgb(219,60,51)" fg:x="572" fg:w="1"/><text x="46.7163%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="46.6288%" y="325" width="0.0812%" height="15" fill="rgb(240,198,24)" fg:x="574" fg:w="1"/><text x="46.8788%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="46.6288%" y="309" width="0.0812%" height="15" fill="rgb(240,192,40)" fg:x="574" fg:w="1"/><text x="46.8788%" y="319.50"></text></g><g><title>plugins_core::tools::contained_by (2 samples, 0.16%)</title><rect x="46.6288%" y="357" width="0.1625%" height="15" fill="rgb(219,118,5)" fg:x="574" fg:w="2"/><text x="46.8788%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="46.6288%" y="341" width="0.1625%" height="15" fill="rgb(205,202,34)" fg:x="574" fg:w="2"/><text x="46.8788%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="46.7100%" y="325" width="0.0812%" height="15" fill="rgb(234,153,26)" fg:x="575" fg:w="1"/><text x="46.9600%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.7100%" y="309" width="0.0812%" height="15" fill="rgb(229,26,29)" fg:x="575" fg:w="1"/><text x="46.9600%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="46.7100%" y="293" width="0.0812%" height="15" fill="rgb(237,115,21)" fg:x="575" fg:w="1"/><text x="46.9600%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="46.7100%" y="277" width="0.0812%" height="15" fill="rgb(252,144,15)" fg:x="575" fg:w="1"/><text x="46.9600%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="46.7100%" y="261" width="0.0812%" height="15" fill="rgb(232,26,13)" fg:x="575" fg:w="1"/><text x="46.9600%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="46.7100%" y="245" width="0.0812%" height="15" fill="rgb(206,44,19)" fg:x="575" fg:w="1"/><text x="46.9600%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.7100%" y="229" width="0.0812%" height="15" fill="rgb(249,159,2)" fg:x="575" fg:w="1"/><text x="46.9600%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="46.7100%" y="213" width="0.0812%" height="15" fill="rgb(231,5,32)" fg:x="575" fg:w="1"/><text x="46.9600%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.7912%" y="325" width="0.0812%" height="15" fill="rgb(249,210,18)" fg:x="576" fg:w="1"/><text x="47.0412%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.7912%" y="309" width="0.0812%" height="15" fill="rgb(215,223,36)" fg:x="576" fg:w="1"/><text x="47.0412%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.7912%" y="293" width="0.0812%" height="15" fill="rgb(245,185,20)" fg:x="576" fg:w="1"/><text x="47.0412%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.7912%" y="277" width="0.0812%" height="15" fill="rgb(206,224,11)" fg:x="576" fg:w="1"/><text x="47.0412%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.7912%" y="261" width="0.0812%" height="15" fill="rgb(248,73,42)" fg:x="576" fg:w="1"/><text x="47.0412%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.7912%" y="245" width="0.0812%" height="15" fill="rgb(219,149,31)" fg:x="576" fg:w="1"/><text x="47.0412%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="46.7912%" y="229" width="0.0812%" height="15" fill="rgb(243,104,17)" fg:x="576" fg:w="1"/><text x="47.0412%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="46.7912%" y="213" width="0.0812%" height="15" fill="rgb(244,117,33)" fg:x="576" fg:w="1"/><text x="47.0412%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="46.7912%" y="197" width="0.0812%" height="15" fill="rgb(251,25,47)" fg:x="576" fg:w="1"/><text x="47.0412%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="46.7912%" y="181" width="0.0812%" height="15" fill="rgb(249,70,13)" fg:x="576" fg:w="1"/><text x="47.0412%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="46.7912%" y="165" width="0.0812%" height="15" fill="rgb(217,133,18)" fg:x="576" fg:w="1"/><text x="47.0412%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="46.7912%" y="149" width="0.0812%" height="15" fill="rgb(248,97,28)" fg:x="576" fg:w="1"/><text x="47.0412%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="46.7912%" y="133" width="0.0812%" height="15" fill="rgb(237,193,4)" fg:x="576" fg:w="1"/><text x="47.0412%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="46.7912%" y="117" width="0.0812%" height="15" fill="rgb(247,198,45)" fg:x="576" fg:w="1"/><text x="47.0412%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="46.7912%" y="101" width="0.0812%" height="15" fill="rgb(245,2,20)" fg:x="576" fg:w="1"/><text x="47.0412%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.7912%" y="85" width="0.0812%" height="15" fill="rgb(210,71,36)" fg:x="576" fg:w="1"/><text x="47.0412%" y="95.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="46.7912%" y="357" width="0.1625%" height="15" fill="rgb(238,114,30)" fg:x="576" fg:w="2"/><text x="47.0412%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="46.7912%" y="341" width="0.1625%" height="15" fill="rgb(241,200,2)" fg:x="576" fg:w="2"/><text x="47.0412%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="46.8725%" y="325" width="0.0812%" height="15" fill="rgb(232,106,18)" fg:x="577" fg:w="1"/><text x="47.1225%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.8725%" y="309" width="0.0812%" height="15" fill="rgb(211,141,18)" fg:x="577" fg:w="1"/><text x="47.1225%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="46.8725%" y="293" width="0.0812%" height="15" fill="rgb(224,9,9)" fg:x="577" fg:w="1"/><text x="47.1225%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.8725%" y="277" width="0.0812%" height="15" fill="rgb(249,137,46)" fg:x="577" fg:w="1"/><text x="47.1225%" y="287.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (6 samples, 0.49%)</title><rect x="46.5475%" y="373" width="0.4874%" height="15" fill="rgb(236,44,45)" fg:x="573" fg:w="6"/><text x="46.7975%" y="383.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="46.9537%" y="357" width="0.0812%" height="15" fill="rgb(205,68,40)" fg:x="578" fg:w="1"/><text x="47.2037%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="46.9537%" y="341" width="0.0812%" height="15" fill="rgb(214,198,49)" fg:x="578" fg:w="1"/><text x="47.2037%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (8 samples, 0.65%)</title><rect x="46.5475%" y="405" width="0.6499%" height="15" fill="rgb(226,140,45)" fg:x="573" fg:w="8"/><text x="46.7975%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (8 samples, 0.65%)</title><rect x="46.5475%" y="389" width="0.6499%" height="15" fill="rgb(209,109,20)" fg:x="573" fg:w="8"/><text x="46.7975%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="47.0349%" y="373" width="0.1625%" height="15" fill="rgb(217,33,46)" fg:x="579" fg:w="2"/><text x="47.2849%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="47.0349%" y="357" width="0.1625%" height="15" fill="rgb(232,150,33)" fg:x="579" fg:w="2"/><text x="47.2849%" y="367.50"></text></g><g><title>plugins_core::finding::matches_description (2 samples, 0.16%)</title><rect x="47.0349%" y="341" width="0.1625%" height="15" fill="rgb(233,76,25)" fg:x="579" fg:w="2"/><text x="47.2849%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::name (2 samples, 0.16%)</title><rect x="47.0349%" y="325" width="0.1625%" height="15" fill="rgb(254,219,23)" fg:x="579" fg:w="2"/><text x="47.2849%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="47.0349%" y="309" width="0.1625%" height="15" fill="rgb(233,108,4)" fg:x="579" fg:w="2"/><text x="47.2849%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="47.0349%" y="293" width="0.1625%" height="15" fill="rgb(229,98,6)" fg:x="579" fg:w="2"/><text x="47.2849%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="47.1162%" y="277" width="0.0812%" height="15" fill="rgb(217,40,27)" fg:x="580" fg:w="1"/><text x="47.3662%" y="287.50"></text></g><g><title>&lt;plugins_rune::runner::RuneReturn as plugins_rune::PerformTagged&gt;::handle (1 samples, 0.08%)</title><rect x="47.2786%" y="277" width="0.0812%" height="15" fill="rgb(221,35,43)" fg:x="582" fg:w="1"/><text x="47.5286%" y="287.50"></text></g><g><title>&lt;rune::runtime::value::Value as plugins_rune::runner::Simplifies&gt;::simplify (1 samples, 0.08%)</title><rect x="47.2786%" y="261" width="0.0812%" height="15" fill="rgb(212,107,11)" fg:x="582" fg:w="1"/><text x="47.5286%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (3 samples, 0.24%)</title><rect x="47.1974%" y="389" width="0.2437%" height="15" fill="rgb(245,42,44)" fg:x="581" fg:w="3"/><text x="47.4474%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (3 samples, 0.24%)</title><rect x="47.1974%" y="373" width="0.2437%" height="15" fill="rgb(209,31,12)" fg:x="581" fg:w="3"/><text x="47.4474%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (3 samples, 0.24%)</title><rect x="47.1974%" y="357" width="0.2437%" height="15" fill="rgb(210,228,54)" fg:x="581" fg:w="3"/><text x="47.4474%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (3 samples, 0.24%)</title><rect x="47.1974%" y="341" width="0.2437%" height="15" fill="rgb(241,19,33)" fg:x="581" fg:w="3"/><text x="47.4474%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (3 samples, 0.24%)</title><rect x="47.1974%" y="325" width="0.2437%" height="15" fill="rgb(229,51,27)" fg:x="581" fg:w="3"/><text x="47.4474%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (3 samples, 0.24%)</title><rect x="47.1974%" y="309" width="0.2437%" height="15" fill="rgb(214,167,49)" fg:x="581" fg:w="3"/><text x="47.4474%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (3 samples, 0.24%)</title><rect x="47.1974%" y="293" width="0.2437%" height="15" fill="rgb(248,140,47)" fg:x="581" fg:w="3"/><text x="47.4474%" y="303.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="47.3599%" y="277" width="0.0812%" height="15" fill="rgb(228,6,51)" fg:x="583" fg:w="1"/><text x="47.6099%" y="287.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="47.3599%" y="261" width="0.0812%" height="15" fill="rgb(242,44,53)" fg:x="583" fg:w="1"/><text x="47.6099%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (1 samples, 0.08%)</title><rect x="47.4411%" y="357" width="0.0812%" height="15" fill="rgb(249,90,50)" fg:x="584" fg:w="1"/><text x="47.6911%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="47.4411%" y="341" width="0.0812%" height="15" fill="rgb(222,84,19)" fg:x="584" fg:w="1"/><text x="47.6911%" y="351.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.32%)</title><rect x="47.4411%" y="389" width="0.3249%" height="15" fill="rgb(214,140,12)" fg:x="584" fg:w="4"/><text x="47.6911%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (4 samples, 0.32%)</title><rect x="47.4411%" y="373" width="0.3249%" height="15" fill="rgb(210,20,43)" fg:x="584" fg:w="4"/><text x="47.6911%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (3 samples, 0.24%)</title><rect x="47.5223%" y="357" width="0.2437%" height="15" fill="rgb(243,1,40)" fg:x="585" fg:w="3"/><text x="47.7723%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="47.5223%" y="341" width="0.2437%" height="15" fill="rgb(224,102,26)" fg:x="585" fg:w="3"/><text x="47.7723%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="47.5223%" y="325" width="0.2437%" height="15" fill="rgb(221,179,1)" fg:x="585" fg:w="3"/><text x="47.7723%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="47.6848%" y="309" width="0.0812%" height="15" fill="rgb(216,209,47)" fg:x="587" fg:w="1"/><text x="47.9348%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="47.6848%" y="293" width="0.0812%" height="15" fill="rgb(251,135,9)" fg:x="587" fg:w="1"/><text x="47.9348%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="47.6848%" y="277" width="0.0812%" height="15" fill="rgb(242,9,36)" fg:x="587" fg:w="1"/><text x="47.9348%" y="287.50"></text></g><g><title>plugins_core::library::actions::reply_ok (9 samples, 0.73%)</title><rect x="47.1974%" y="405" width="0.7311%" height="15" fill="rgb(249,60,37)" fg:x="581" fg:w="9"/><text x="47.4474%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Carrying&gt; (2 samples, 0.16%)</title><rect x="47.7660%" y="389" width="0.1625%" height="15" fill="rgb(230,66,45)" fg:x="588" fg:w="2"/><text x="48.0160%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="47.7660%" y="373" width="0.1625%" height="15" fill="rgb(216,1,47)" fg:x="588" fg:w="2"/><text x="48.0160%" y="383.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="47.9285%" y="389" width="0.1625%" height="15" fill="rgb(235,8,23)" fg:x="590" fg:w="2"/><text x="48.1785%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="48.0097%" y="373" width="0.0812%" height="15" fill="rgb(225,136,11)" fg:x="591" fg:w="1"/><text x="48.2597%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="48.0910%" y="389" width="0.0812%" height="15" fill="rgb(228,63,44)" fg:x="592" fg:w="1"/><text x="48.3410%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="48.0910%" y="373" width="0.0812%" height="15" fill="rgb(240,43,52)" fg:x="592" fg:w="1"/><text x="48.3410%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="48.0910%" y="357" width="0.0812%" height="15" fill="rgb(217,167,36)" fg:x="592" fg:w="1"/><text x="48.3410%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="48.0910%" y="341" width="0.0812%" height="15" fill="rgb(250,19,6)" fg:x="592" fg:w="1"/><text x="48.3410%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="48.0910%" y="325" width="0.0812%" height="15" fill="rgb(236,60,51)" fg:x="592" fg:w="1"/><text x="48.3410%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="48.0910%" y="309" width="0.0812%" height="15" fill="rgb(222,217,20)" fg:x="592" fg:w="1"/><text x="48.3410%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="48.0910%" y="293" width="0.0812%" height="15" fill="rgb(242,65,52)" fg:x="592" fg:w="1"/><text x="48.3410%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="48.0910%" y="277" width="0.0812%" height="15" fill="rgb(217,5,41)" fg:x="592" fg:w="1"/><text x="48.3410%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="48.0910%" y="261" width="0.0812%" height="15" fill="rgb(223,208,53)" fg:x="592" fg:w="1"/><text x="48.3410%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="48.0910%" y="245" width="0.0812%" height="15" fill="rgb(221,104,30)" fg:x="592" fg:w="1"/><text x="48.3410%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.0910%" y="229" width="0.0812%" height="15" fill="rgb(230,210,42)" fg:x="592" fg:w="1"/><text x="48.3410%" y="239.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="48.1722%" y="389" width="0.0812%" height="15" fill="rgb(206,205,27)" fg:x="593" fg:w="1"/><text x="48.4222%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="48.1722%" y="373" width="0.0812%" height="15" fill="rgb(233,114,38)" fg:x="593" fg:w="1"/><text x="48.4222%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="48.1722%" y="357" width="0.0812%" height="15" fill="rgb(216,174,36)" fg:x="593" fg:w="1"/><text x="48.4222%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="48.1722%" y="341" width="0.0812%" height="15" fill="rgb(211,30,9)" fg:x="593" fg:w="1"/><text x="48.4222%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="48.1722%" y="325" width="0.0812%" height="15" fill="rgb(216,8,21)" fg:x="593" fg:w="1"/><text x="48.4222%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="48.2535%" y="373" width="0.0812%" height="15" fill="rgb(237,209,39)" fg:x="594" fg:w="1"/><text x="48.5035%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.2535%" y="357" width="0.0812%" height="15" fill="rgb(235,111,47)" fg:x="594" fg:w="1"/><text x="48.5035%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.3347%" y="373" width="0.0812%" height="15" fill="rgb(216,139,9)" fg:x="595" fg:w="1"/><text x="48.5847%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="48.4159%" y="373" width="0.0812%" height="15" fill="rgb(248,185,4)" fg:x="596" fg:w="1"/><text x="48.6659%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="48.4972%" y="309" width="0.0812%" height="15" fill="rgb(239,185,25)" fg:x="597" fg:w="1"/><text x="48.7472%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="48.5784%" y="245" width="0.0812%" height="15" fill="rgb(233,207,8)" fg:x="598" fg:w="1"/><text x="48.8284%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="48.5784%" y="229" width="0.0812%" height="15" fill="rgb(249,220,24)" fg:x="598" fg:w="1"/><text x="48.8284%" y="239.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (6 samples, 0.49%)</title><rect x="48.2535%" y="389" width="0.4874%" height="15" fill="rgb(221,50,14)" fg:x="594" fg:w="6"/><text x="48.5035%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="48.4972%" y="373" width="0.2437%" height="15" fill="rgb(227,79,42)" fg:x="597" fg:w="3"/><text x="48.7472%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="48.4972%" y="357" width="0.2437%" height="15" fill="rgb(228,218,49)" fg:x="597" fg:w="3"/><text x="48.7472%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="48.4972%" y="341" width="0.2437%" height="15" fill="rgb(249,18,15)" fg:x="597" fg:w="3"/><text x="48.7472%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="48.4972%" y="325" width="0.2437%" height="15" fill="rgb(212,84,27)" fg:x="597" fg:w="3"/><text x="48.7472%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="48.5784%" y="309" width="0.1625%" height="15" fill="rgb(207,83,24)" fg:x="598" fg:w="2"/><text x="48.8284%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="48.5784%" y="293" width="0.1625%" height="15" fill="rgb(219,61,7)" fg:x="598" fg:w="2"/><text x="48.8284%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="48.5784%" y="277" width="0.1625%" height="15" fill="rgb(211,43,29)" fg:x="598" fg:w="2"/><text x="48.8284%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="48.5784%" y="261" width="0.1625%" height="15" fill="rgb(243,15,23)" fg:x="598" fg:w="2"/><text x="48.8284%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="48.6596%" y="245" width="0.0812%" height="15" fill="rgb(217,52,28)" fg:x="599" fg:w="1"/><text x="48.9096%" y="255.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="48.7409%" y="373" width="0.0812%" height="15" fill="rgb(210,35,6)" fg:x="600" fg:w="1"/><text x="48.9909%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="48.7409%" y="357" width="0.0812%" height="15" fill="rgb(237,187,28)" fg:x="600" fg:w="1"/><text x="48.9909%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="48.7409%" y="341" width="0.0812%" height="15" fill="rgb(231,136,24)" fg:x="600" fg:w="1"/><text x="48.9909%" y="351.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (3 samples, 0.24%)</title><rect x="48.7409%" y="389" width="0.2437%" height="15" fill="rgb(205,176,52)" fg:x="600" fg:w="3"/><text x="48.9909%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (2 samples, 0.16%)</title><rect x="48.8221%" y="373" width="0.1625%" height="15" fill="rgb(218,65,12)" fg:x="601" fg:w="2"/><text x="49.0721%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="48.9033%" y="357" width="0.0812%" height="15" fill="rgb(234,101,21)" fg:x="602" fg:w="1"/><text x="49.1533%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.9033%" y="341" width="0.0812%" height="15" fill="rgb(206,13,20)" fg:x="602" fg:w="1"/><text x="49.1533%" y="351.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="48.9846%" y="373" width="0.0812%" height="15" fill="rgb(236,89,44)" fg:x="603" fg:w="1"/><text x="49.2346%" y="383.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (302 samples, 24.53%)</title><rect x="24.6141%" y="421" width="24.5329%" height="15" fill="rgb(225,52,17)" fg:x="303" fg:w="302"/><text x="24.8641%" y="431.50">&lt;plugins_core::carrying::actions::DropA..</text></g><g><title>plugins_core::location::model::change_location (15 samples, 1.22%)</title><rect x="47.9285%" y="405" width="1.2185%" height="15" fill="rgb(214,27,25)" fg:x="590" fg:w="15"/><text x="48.1785%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="48.9846%" y="389" width="0.1625%" height="15" fill="rgb(240,141,35)" fg:x="603" fg:w="2"/><text x="49.2346%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="49.0658%" y="373" width="0.0812%" height="15" fill="rgb(216,126,3)" fg:x="604" fg:w="1"/><text x="49.3158%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="49.0658%" y="357" width="0.0812%" height="15" fill="rgb(249,196,23)" fg:x="604" fg:w="1"/><text x="49.3158%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.0658%" y="341" width="0.0812%" height="15" fill="rgb(215,185,43)" fg:x="604" fg:w="1"/><text x="49.3158%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.1470%" y="325" width="0.0812%" height="15" fill="rgb(208,194,36)" fg:x="605" fg:w="1"/><text x="49.3970%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="49.1470%" y="373" width="0.1625%" height="15" fill="rgb(245,182,12)" fg:x="605" fg:w="2"/><text x="49.3970%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="49.1470%" y="357" width="0.1625%" height="15" fill="rgb(244,222,52)" fg:x="605" fg:w="2"/><text x="49.3970%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="49.1470%" y="341" width="0.1625%" height="15" fill="rgb(236,222,51)" fg:x="605" fg:w="2"/><text x="49.3970%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="49.2283%" y="325" width="0.0812%" height="15" fill="rgb(254,71,22)" fg:x="606" fg:w="1"/><text x="49.4783%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="49.2283%" y="309" width="0.0812%" height="15" fill="rgb(250,104,15)" fg:x="606" fg:w="1"/><text x="49.4783%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="49.2283%" y="293" width="0.0812%" height="15" fill="rgb(229,223,46)" fg:x="606" fg:w="1"/><text x="49.4783%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="49.2283%" y="277" width="0.0812%" height="15" fill="rgb(209,129,18)" fg:x="606" fg:w="1"/><text x="49.4783%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="49.2283%" y="261" width="0.0812%" height="15" fill="rgb(224,160,1)" fg:x="606" fg:w="1"/><text x="49.4783%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="49.1470%" y="389" width="0.2437%" height="15" fill="rgb(237,112,21)" fg:x="605" fg:w="3"/><text x="49.3970%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="49.3095%" y="373" width="0.0812%" height="15" fill="rgb(215,198,53)" fg:x="607" fg:w="1"/><text x="49.5595%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="49.3095%" y="357" width="0.0812%" height="15" fill="rgb(218,227,35)" fg:x="607" fg:w="1"/><text x="49.5595%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="49.3095%" y="341" width="0.0812%" height="15" fill="rgb(232,121,22)" fg:x="607" fg:w="1"/><text x="49.5595%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="49.3907%" y="373" width="0.0812%" height="15" fill="rgb(235,52,54)" fg:x="608" fg:w="1"/><text x="49.6407%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="49.3907%" y="357" width="0.0812%" height="15" fill="rgb(219,21,44)" fg:x="608" fg:w="1"/><text x="49.6407%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="49.3907%" y="341" width="0.0812%" height="15" fill="rgb(221,51,43)" fg:x="608" fg:w="1"/><text x="49.6407%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="49.3907%" y="389" width="0.1625%" height="15" fill="rgb(225,77,42)" fg:x="608" fg:w="2"/><text x="49.6407%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="49.4720%" y="373" width="0.0812%" height="15" fill="rgb(214,117,53)" fg:x="609" fg:w="1"/><text x="49.7220%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="49.5532%" y="357" width="0.0812%" height="15" fill="rgb(218,227,27)" fg:x="610" fg:w="1"/><text x="49.8032%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="49.6344%" y="293" width="0.0812%" height="15" fill="rgb(223,214,36)" fg:x="611" fg:w="1"/><text x="49.8844%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.6344%" y="277" width="0.0812%" height="15" fill="rgb(235,21,7)" fg:x="611" fg:w="1"/><text x="49.8844%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (5 samples, 0.41%)</title><rect x="49.5532%" y="389" width="0.4062%" height="15" fill="rgb(244,216,4)" fg:x="610" fg:w="5"/><text x="49.8032%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.41%)</title><rect x="49.5532%" y="373" width="0.4062%" height="15" fill="rgb(249,197,24)" fg:x="610" fg:w="5"/><text x="49.8032%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="49.6344%" y="357" width="0.3249%" height="15" fill="rgb(222,169,49)" fg:x="611" fg:w="4"/><text x="49.8844%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="49.6344%" y="341" width="0.3249%" height="15" fill="rgb(207,137,33)" fg:x="611" fg:w="4"/><text x="49.8844%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="49.6344%" y="325" width="0.3249%" height="15" fill="rgb(219,180,40)" fg:x="611" fg:w="4"/><text x="49.8844%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="49.6344%" y="309" width="0.3249%" height="15" fill="rgb(250,163,42)" fg:x="611" fg:w="4"/><text x="49.8844%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="49.7157%" y="293" width="0.2437%" height="15" fill="rgb(239,163,0)" fg:x="612" fg:w="3"/><text x="49.9657%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="49.7157%" y="277" width="0.2437%" height="15" fill="rgb(252,38,28)" fg:x="612" fg:w="3"/><text x="49.9657%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.8781%" y="261" width="0.0812%" height="15" fill="rgb(254,203,26)" fg:x="614" fg:w="1"/><text x="50.1281%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="49.9594%" y="309" width="0.1625%" height="15" fill="rgb(209,129,32)" fg:x="615" fg:w="2"/><text x="50.2094%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="49.9594%" y="293" width="0.1625%" height="15" fill="rgb(207,177,52)" fg:x="615" fg:w="2"/><text x="50.2094%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="49.9594%" y="277" width="0.1625%" height="15" fill="rgb(230,209,36)" fg:x="615" fg:w="2"/><text x="50.2094%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="49.9594%" y="261" width="0.1625%" height="15" fill="rgb(238,131,0)" fg:x="615" fg:w="2"/><text x="50.2094%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="49.9594%" y="245" width="0.1625%" height="15" fill="rgb(218,61,31)" fg:x="615" fg:w="2"/><text x="50.2094%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="49.9594%" y="229" width="0.1625%" height="15" fill="rgb(232,6,53)" fg:x="615" fg:w="2"/><text x="50.2094%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="50.1219%" y="277" width="0.1625%" height="15" fill="rgb(254,100,32)" fg:x="617" fg:w="2"/><text x="50.3719%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="50.2031%" y="261" width="0.0812%" height="15" fill="rgb(229,194,49)" fg:x="618" fg:w="1"/><text x="50.4531%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.2031%" y="245" width="0.0812%" height="15" fill="rgb(206,208,39)" fg:x="618" fg:w="1"/><text x="50.4531%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="50.1219%" y="309" width="0.2437%" height="15" fill="rgb(246,226,14)" fg:x="617" fg:w="3"/><text x="50.3719%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="50.1219%" y="293" width="0.2437%" height="15" fill="rgb(226,48,32)" fg:x="617" fg:w="3"/><text x="50.3719%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="50.2843%" y="277" width="0.0812%" height="15" fill="rgb(252,43,54)" fg:x="619" fg:w="1"/><text x="50.5343%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="50.2843%" y="261" width="0.0812%" height="15" fill="rgb(207,124,0)" fg:x="619" fg:w="1"/><text x="50.5343%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.3656%" y="261" width="0.0812%" height="15" fill="rgb(248,188,30)" fg:x="620" fg:w="1"/><text x="50.6156%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="50.3656%" y="245" width="0.0812%" height="15" fill="rgb(232,14,43)" fg:x="620" fg:w="1"/><text x="50.6156%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.4468%" y="261" width="0.0812%" height="15" fill="rgb(218,52,29)" fg:x="621" fg:w="1"/><text x="50.6968%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="50.5280%" y="261" width="0.1625%" height="15" fill="rgb(218,176,50)" fg:x="622" fg:w="2"/><text x="50.7780%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="50.5280%" y="245" width="0.1625%" height="15" fill="rgb(213,112,0)" fg:x="622" fg:w="2"/><text x="50.7780%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="50.5280%" y="229" width="0.1625%" height="15" fill="rgb(244,216,8)" fg:x="622" fg:w="2"/><text x="50.7780%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.6093%" y="213" width="0.0812%" height="15" fill="rgb(224,148,53)" fg:x="623" fg:w="1"/><text x="50.8593%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.6093%" y="197" width="0.0812%" height="15" fill="rgb(241,133,40)" fg:x="623" fg:w="1"/><text x="50.8593%" y="207.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="50.6905%" y="261" width="0.0812%" height="15" fill="rgb(232,17,44)" fg:x="624" fg:w="1"/><text x="50.9405%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.7717%" y="245" width="0.0812%" height="15" fill="rgb(213,32,25)" fg:x="625" fg:w="1"/><text x="51.0217%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.57%)</title><rect x="50.8530%" y="245" width="0.5686%" height="15" fill="rgb(249,115,27)" fg:x="626" fg:w="7"/><text x="51.1030%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.57%)</title><rect x="50.8530%" y="229" width="0.5686%" height="15" fill="rgb(241,50,1)" fg:x="626" fg:w="7"/><text x="51.1030%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.3404%" y="213" width="0.0812%" height="15" fill="rgb(244,175,40)" fg:x="632" fg:w="1"/><text x="51.5904%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::error::BuildError&gt; (1 samples, 0.08%)</title><rect x="51.4216%" y="245" width="0.0812%" height="15" fill="rgb(230,94,34)" fg:x="633" fg:w="1"/><text x="51.6716%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="51.5028%" y="229" width="0.0812%" height="15" fill="rgb(223,185,29)" fg:x="634" fg:w="1"/><text x="51.7528%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="51.5028%" y="245" width="0.1625%" height="15" fill="rgb(225,193,15)" fg:x="634" fg:w="2"/><text x="51.7528%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="51.5841%" y="229" width="0.0812%" height="15" fill="rgb(252,121,38)" fg:x="635" fg:w="1"/><text x="51.8341%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="51.5841%" y="213" width="0.0812%" height="15" fill="rgb(232,44,12)" fg:x="635" fg:w="1"/><text x="51.8341%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::insert (1 samples, 0.08%)</title><rect x="51.5841%" y="197" width="0.0812%" height="15" fill="rgb(226,45,54)" fg:x="635" fg:w="1"/><text x="51.8341%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="51.6653%" y="245" width="0.1625%" height="15" fill="rgb(209,67,17)" fg:x="636" fg:w="2"/><text x="51.9153%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::Builder::configure (1 samples, 0.08%)</title><rect x="51.7465%" y="229" width="0.0812%" height="15" fill="rgb(219,108,52)" fg:x="637" fg:w="1"/><text x="51.9965%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (32 samples, 2.60%)</title><rect x="51.8278%" y="181" width="2.5995%" height="15" fill="rgb(216,118,19)" fg:x="638" fg:w="32"/><text x="52.0778%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (32 samples, 2.60%)</title><rect x="51.8278%" y="165" width="2.5995%" height="15" fill="rgb(228,120,40)" fg:x="638" fg:w="32"/><text x="52.0778%" y="175.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (32 samples, 2.60%)</title><rect x="51.8278%" y="149" width="2.5995%" height="15" fill="rgb(221,218,34)" fg:x="638" fg:w="32"/><text x="52.0778%" y="159.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 2.76%)</title><rect x="51.8278%" y="229" width="2.7620%" height="15" fill="rgb(235,89,14)" fg:x="638" fg:w="34"/><text x="52.0778%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (34 samples, 2.76%)</title><rect x="51.8278%" y="213" width="2.7620%" height="15" fill="rgb(248,89,7)" fg:x="638" fg:w="34"/><text x="52.0778%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (34 samples, 2.76%)</title><rect x="51.8278%" y="197" width="2.7620%" height="15" fill="rgb(212,114,34)" fg:x="638" fg:w="34"/><text x="52.0778%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="54.4273%" y="181" width="0.1625%" height="15" fill="rgb(246,88,32)" fg:x="670" fg:w="2"/><text x="54.6773%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="54.5898%" y="213" width="0.2437%" height="15" fill="rgb(237,135,0)" fg:x="672" fg:w="3"/><text x="54.8398%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="54.6710%" y="197" width="0.1625%" height="15" fill="rgb(220,201,54)" fg:x="673" fg:w="2"/><text x="54.9210%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="54.6710%" y="181" width="0.1625%" height="15" fill="rgb(210,142,36)" fg:x="673" fg:w="2"/><text x="54.9210%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="54.6710%" y="165" width="0.1625%" height="15" fill="rgb(247,189,26)" fg:x="673" fg:w="2"/><text x="54.9210%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.8335%" y="197" width="0.0812%" height="15" fill="rgb(223,89,24)" fg:x="675" fg:w="1"/><text x="55.0835%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="54.8335%" y="213" width="0.1625%" height="15" fill="rgb(205,90,19)" fg:x="675" fg:w="2"/><text x="55.0835%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.9147%" y="197" width="0.0812%" height="15" fill="rgb(234,57,40)" fg:x="676" fg:w="1"/><text x="55.1647%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.9147%" y="181" width="0.0812%" height="15" fill="rgb(213,109,10)" fg:x="676" fg:w="1"/><text x="55.1647%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="54.9959%" y="213" width="0.1625%" height="15" fill="rgb(214,189,23)" fg:x="677" fg:w="2"/><text x="55.2459%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.65%)</title><rect x="54.5898%" y="229" width="0.6499%" height="15" fill="rgb(234,200,10)" fg:x="672" fg:w="8"/><text x="54.8398%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="55.1584%" y="213" width="0.0812%" height="15" fill="rgb(221,148,16)" fg:x="679" fg:w="1"/><text x="55.4084%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.1584%" y="197" width="0.0812%" height="15" fill="rgb(230,115,10)" fg:x="679" fg:w="1"/><text x="55.4084%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (61 samples, 4.96%)</title><rect x="50.3656%" y="309" width="4.9553%" height="15" fill="rgb(220,106,42)" fg:x="620" fg:w="61"/><text x="50.6156%" y="319.50">regex:..</text></g><g><title>regex::builders::string::RegexBuilder::build (61 samples, 4.96%)</title><rect x="50.3656%" y="293" width="4.9553%" height="15" fill="rgb(225,105,39)" fg:x="620" fg:w="61"/><text x="50.6156%" y="303.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (61 samples, 4.96%)</title><rect x="50.3656%" y="277" width="4.9553%" height="15" fill="rgb(211,161,38)" fg:x="620" fg:w="61"/><text x="50.6156%" y="287.50">regex_..</text></g><g><title>regex_automata::meta::strategy::new (56 samples, 4.55%)</title><rect x="50.7717%" y="261" width="4.5491%" height="15" fill="rgb(213,23,19)" fg:x="625" fg:w="56"/><text x="51.0217%" y="271.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (43 samples, 3.49%)</title><rect x="51.8278%" y="245" width="3.4931%" height="15" fill="rgb(240,2,33)" fg:x="638" fg:w="43"/><text x="52.0778%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="55.2396%" y="229" width="0.0812%" height="15" fill="rgb(221,29,45)" fg:x="680" fg:w="1"/><text x="55.4896%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="55.2396%" y="213" width="0.0812%" height="15" fill="rgb(242,10,19)" fg:x="680" fg:w="1"/><text x="55.4896%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="55.3209%" y="261" width="0.0812%" height="15" fill="rgb(250,84,37)" fg:x="681" fg:w="1"/><text x="55.5709%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="55.3209%" y="245" width="0.0812%" height="15" fill="rgb(214,136,7)" fg:x="681" fg:w="1"/><text x="55.5709%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (68 samples, 5.52%)</title><rect x="49.9594%" y="325" width="5.5240%" height="15" fill="rgb(231,189,12)" fg:x="615" fg:w="68"/><text x="50.2094%" y="335.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="55.3209%" y="309" width="0.1625%" height="15" fill="rgb(244,40,16)" fg:x="681" fg:w="2"/><text x="55.5709%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="55.3209%" y="293" width="0.1625%" height="15" fill="rgb(217,29,15)" fg:x="681" fg:w="2"/><text x="55.5709%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="55.3209%" y="277" width="0.1625%" height="15" fill="rgb(235,172,33)" fg:x="681" fg:w="2"/><text x="55.5709%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="55.4021%" y="261" width="0.0812%" height="15" fill="rgb(206,148,28)" fg:x="682" fg:w="1"/><text x="55.6521%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="55.4021%" y="245" width="0.0812%" height="15" fill="rgb(251,167,37)" fg:x="682" fg:w="1"/><text x="55.6521%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.4021%" y="229" width="0.0812%" height="15" fill="rgb(229,94,52)" fg:x="682" fg:w="1"/><text x="55.6521%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.4021%" y="213" width="0.0812%" height="15" fill="rgb(216,132,9)" fg:x="682" fg:w="1"/><text x="55.6521%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.4021%" y="197" width="0.0812%" height="15" fill="rgb(208,110,29)" fg:x="682" fg:w="1"/><text x="55.6521%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="55.5646%" y="293" width="0.0812%" height="15" fill="rgb(241,23,8)" fg:x="684" fg:w="1"/><text x="55.8146%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="55.5646%" y="277" width="0.0812%" height="15" fill="rgb(208,26,35)" fg:x="684" fg:w="1"/><text x="55.8146%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="55.5646%" y="261" width="0.0812%" height="15" fill="rgb(242,165,34)" fg:x="684" fg:w="1"/><text x="55.8146%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.8895%" y="181" width="0.0812%" height="15" fill="rgb(222,222,33)" fg:x="688" fg:w="1"/><text x="56.1395%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="55.8895%" y="213" width="0.1625%" height="15" fill="rgb(227,16,52)" fg:x="688" fg:w="2"/><text x="56.1395%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.8895%" y="197" width="0.1625%" height="15" fill="rgb(213,93,12)" fg:x="688" fg:w="2"/><text x="56.1395%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.9708%" y="181" width="0.0812%" height="15" fill="rgb(238,41,5)" fg:x="689" fg:w="1"/><text x="56.2208%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (7 samples, 0.57%)</title><rect x="55.5646%" y="309" width="0.5686%" height="15" fill="rgb(211,60,15)" fg:x="684" fg:w="7"/><text x="55.8146%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.49%)</title><rect x="55.6458%" y="293" width="0.4874%" height="15" fill="rgb(209,11,34)" fg:x="685" fg:w="6"/><text x="55.8958%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.49%)</title><rect x="55.6458%" y="277" width="0.4874%" height="15" fill="rgb(254,155,53)" fg:x="685" fg:w="6"/><text x="55.8958%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.49%)</title><rect x="55.6458%" y="261" width="0.4874%" height="15" fill="rgb(236,174,8)" fg:x="685" fg:w="6"/><text x="55.8958%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.49%)</title><rect x="55.6458%" y="245" width="0.4874%" height="15" fill="rgb(229,31,27)" fg:x="685" fg:w="6"/><text x="55.8958%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.41%)</title><rect x="55.7271%" y="229" width="0.4062%" height="15" fill="rgb(242,226,26)" fg:x="686" fg:w="5"/><text x="55.9771%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="56.0520%" y="213" width="0.0812%" height="15" fill="rgb(234,32,40)" fg:x="690" fg:w="1"/><text x="56.3020%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.0520%" y="197" width="0.0812%" height="15" fill="rgb(249,226,47)" fg:x="690" fg:w="1"/><text x="56.3020%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="56.4582%" y="261" width="0.1625%" height="15" fill="rgb(212,6,26)" fg:x="695" fg:w="2"/><text x="56.7082%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="56.4582%" y="245" width="0.1625%" height="15" fill="rgb(249,202,29)" fg:x="695" fg:w="2"/><text x="56.7082%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="56.5394%" y="229" width="0.0812%" height="15" fill="rgb(226,106,4)" fg:x="696" fg:w="1"/><text x="56.7894%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.5394%" y="213" width="0.0812%" height="15" fill="rgb(251,2,27)" fg:x="696" fg:w="1"/><text x="56.7894%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="56.5394%" y="197" width="0.0812%" height="15" fill="rgb(236,208,0)" fg:x="696" fg:w="1"/><text x="56.7894%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.5394%" y="181" width="0.0812%" height="15" fill="rgb(211,66,17)" fg:x="696" fg:w="1"/><text x="56.7894%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="56.6206%" y="229" width="0.1625%" height="15" fill="rgb(216,129,9)" fg:x="697" fg:w="2"/><text x="56.8706%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.14%)</title><rect x="56.6206%" y="245" width="1.1373%" height="15" fill="rgb(215,130,23)" fg:x="697" fg:w="14"/><text x="56.8706%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.97%)</title><rect x="56.7831%" y="229" width="0.9748%" height="15" fill="rgb(253,157,11)" fg:x="699" fg:w="12"/><text x="57.0331%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.6767%" y="213" width="0.0812%" height="15" fill="rgb(224,25,14)" fg:x="710" fg:w="1"/><text x="57.9267%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="57.7579%" y="229" width="0.0812%" height="15" fill="rgb(238,16,7)" fg:x="711" fg:w="1"/><text x="58.0079%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="57.7579%" y="245" width="0.2437%" height="15" fill="rgb(228,74,11)" fg:x="711" fg:w="3"/><text x="58.0079%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="57.8392%" y="229" width="0.1625%" height="15" fill="rgb(239,221,27)" fg:x="712" fg:w="2"/><text x="58.0892%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="58.0016%" y="213" width="0.1625%" height="15" fill="rgb(229,166,18)" fg:x="714" fg:w="2"/><text x="58.2516%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="58.0016%" y="197" width="0.1625%" height="15" fill="rgb(254,94,46)" fg:x="714" fg:w="2"/><text x="58.2516%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="58.0016%" y="181" width="0.1625%" height="15" fill="rgb(241,79,19)" fg:x="714" fg:w="2"/><text x="58.2516%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="58.0016%" y="165" width="0.1625%" height="15" fill="rgb(228,99,51)" fg:x="714" fg:w="2"/><text x="58.2516%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="58.0016%" y="149" width="0.1625%" height="15" fill="rgb(211,15,6)" fg:x="714" fg:w="2"/><text x="58.2516%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="58.1641%" y="213" width="0.0812%" height="15" fill="rgb(245,107,54)" fg:x="716" fg:w="1"/><text x="58.4141%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="58.1641%" y="197" width="0.0812%" height="15" fill="rgb(243,3,2)" fg:x="716" fg:w="1"/><text x="58.4141%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="58.1641%" y="181" width="0.0812%" height="15" fill="rgb(206,122,10)" fg:x="716" fg:w="1"/><text x="58.4141%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.32%)</title><rect x="58.0016%" y="245" width="0.3249%" height="15" fill="rgb(224,88,4)" fg:x="714" fg:w="4"/><text x="58.2516%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="58.0016%" y="229" width="0.3249%" height="15" fill="rgb(230,1,41)" fg:x="714" fg:w="4"/><text x="58.2516%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="58.2453%" y="213" width="0.0812%" height="15" fill="rgb(230,1,31)" fg:x="717" fg:w="1"/><text x="58.4953%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="58.3266%" y="245" width="0.1625%" height="15" fill="rgb(232,67,19)" fg:x="718" fg:w="2"/><text x="58.5766%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="58.5703%" y="181" width="0.0812%" height="15" fill="rgb(222,206,20)" fg:x="721" fg:w="1"/><text x="58.8203%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="58.6515%" y="149" width="0.1625%" height="15" fill="rgb(217,225,19)" fg:x="722" fg:w="2"/><text x="58.9015%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="59.3826%" y="133" width="0.1625%" height="15" fill="rgb(234,13,33)" fg:x="731" fg:w="2"/><text x="59.6326%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="59.5451%" y="133" width="0.1625%" height="15" fill="rgb(254,5,1)" fg:x="733" fg:w="2"/><text x="59.7951%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="59.7076%" y="133" width="0.1625%" height="15" fill="rgb(211,121,41)" fg:x="735" fg:w="2"/><text x="59.9576%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.7888%" y="117" width="0.0812%" height="15" fill="rgb(213,199,35)" fg:x="736" fg:w="1"/><text x="60.0388%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.7888%" y="101" width="0.0812%" height="15" fill="rgb(240,118,22)" fg:x="736" fg:w="1"/><text x="60.0388%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.7888%" y="85" width="0.0812%" height="15" fill="rgb(238,184,25)" fg:x="736" fg:w="1"/><text x="60.0388%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="60.0325%" y="101" width="0.2437%" height="15" fill="rgb(210,165,6)" fg:x="739" fg:w="3"/><text x="60.2825%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="60.0325%" y="85" width="0.2437%" height="15" fill="rgb(235,149,5)" fg:x="739" fg:w="3"/><text x="60.2825%" y="95.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="60.1137%" y="69" width="0.1625%" height="15" fill="rgb(221,63,5)" fg:x="740" fg:w="2"/><text x="60.3637%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.49%)</title><rect x="59.8700%" y="133" width="0.4874%" height="15" fill="rgb(250,44,41)" fg:x="737" fg:w="6"/><text x="60.1200%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.49%)</title><rect x="59.8700%" y="117" width="0.4874%" height="15" fill="rgb(235,112,47)" fg:x="737" fg:w="6"/><text x="60.1200%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="60.2762%" y="101" width="0.0812%" height="15" fill="rgb(252,176,34)" fg:x="742" fg:w="1"/><text x="60.5262%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.3574%" y="117" width="0.0812%" height="15" fill="rgb(234,50,19)" fg:x="743" fg:w="1"/><text x="60.6074%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.3574%" y="101" width="0.0812%" height="15" fill="rgb(241,195,31)" fg:x="743" fg:w="1"/><text x="60.6074%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3574%" y="85" width="0.0812%" height="15" fill="rgb(212,93,11)" fg:x="743" fg:w="1"/><text x="60.6074%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (27 samples, 2.19%)</title><rect x="60.3574%" y="133" width="2.1933%" height="15" fill="rgb(254,98,51)" fg:x="743" fg:w="27"/><text x="60.6074%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (26 samples, 2.11%)</title><rect x="60.4387%" y="117" width="2.1121%" height="15" fill="rgb(246,18,45)" fg:x="744" fg:w="26"/><text x="60.6887%" y="127.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (26 samples, 2.11%)</title><rect x="60.4387%" y="101" width="2.1121%" height="15" fill="rgb(215,148,23)" fg:x="744" fg:w="26"/><text x="60.6887%" y="111.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="62.5508%" y="133" width="0.0812%" height="15" fill="rgb(227,22,7)" fg:x="770" fg:w="1"/><text x="62.8008%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.5508%" y="117" width="0.0812%" height="15" fill="rgb(207,210,37)" fg:x="770" fg:w="1"/><text x="62.8008%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 4.39%)</title><rect x="58.4890%" y="229" width="4.3867%" height="15" fill="rgb(247,147,42)" fg:x="720" fg:w="54"/><text x="58.7390%" y="239.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (54 samples, 4.39%)</title><rect x="58.4890%" y="213" width="4.3867%" height="15" fill="rgb(226,213,14)" fg:x="720" fg:w="54"/><text x="58.7390%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (54 samples, 4.39%)</title><rect x="58.4890%" y="197" width="4.3867%" height="15" fill="rgb(223,18,10)" fg:x="720" fg:w="54"/><text x="58.7390%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (52 samples, 4.22%)</title><rect x="58.6515%" y="181" width="4.2242%" height="15" fill="rgb(253,34,22)" fg:x="722" fg:w="52"/><text x="58.9015%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (52 samples, 4.22%)</title><rect x="58.6515%" y="165" width="4.2242%" height="15" fill="rgb(222,90,31)" fg:x="722" fg:w="52"/><text x="58.9015%" y="175.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (50 samples, 4.06%)</title><rect x="58.8140%" y="149" width="4.0617%" height="15" fill="rgb(220,182,30)" fg:x="724" fg:w="50"/><text x="59.0640%" y="159.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="62.6320%" y="133" width="0.2437%" height="15" fill="rgb(229,170,12)" fg:x="771" fg:w="3"/><text x="62.8820%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="62.7132%" y="117" width="0.1625%" height="15" fill="rgb(210,101,21)" fg:x="772" fg:w="2"/><text x="62.9632%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.7945%" y="101" width="0.0812%" height="15" fill="rgb(237,177,31)" fg:x="773" fg:w="1"/><text x="63.0445%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.7945%" y="85" width="0.0812%" height="15" fill="rgb(215,91,34)" fg:x="773" fg:w="1"/><text x="63.0445%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.9569%" y="213" width="0.0812%" height="15" fill="rgb(229,206,16)" fg:x="775" fg:w="1"/><text x="63.2069%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="63.0382%" y="213" width="0.3249%" height="15" fill="rgb(235,207,10)" fg:x="776" fg:w="4"/><text x="63.2882%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="63.1194%" y="197" width="0.2437%" height="15" fill="rgb(247,18,10)" fg:x="777" fg:w="3"/><text x="63.3694%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="63.1194%" y="181" width="0.2437%" height="15" fill="rgb(232,4,6)" fg:x="777" fg:w="3"/><text x="63.3694%" y="191.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="63.1194%" y="165" width="0.2437%" height="15" fill="rgb(247,93,45)" fg:x="777" fg:w="3"/><text x="63.3694%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="63.3631%" y="213" width="0.1625%" height="15" fill="rgb(240,181,18)" fg:x="780" fg:w="2"/><text x="63.6131%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.4444%" y="197" width="0.0812%" height="15" fill="rgb(208,224,0)" fg:x="781" fg:w="1"/><text x="63.6944%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (86 samples, 6.99%)</title><rect x="56.6206%" y="261" width="6.9862%" height="15" fill="rgb(224,207,54)" fg:x="697" fg:w="86"/><text x="56.8706%" y="271.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (63 samples, 5.12%)</title><rect x="58.4890%" y="245" width="5.1178%" height="15" fill="rgb(217,152,29)" fg:x="720" fg:w="63"/><text x="58.7390%" y="255.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.73%)</title><rect x="62.8757%" y="229" width="0.7311%" height="15" fill="rgb(243,78,27)" fg:x="774" fg:w="9"/><text x="63.1257%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="63.5256%" y="213" width="0.0812%" height="15" fill="rgb(228,111,9)" fg:x="782" fg:w="1"/><text x="63.7756%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="63.6068%" y="213" width="0.0812%" height="15" fill="rgb(230,213,21)" fg:x="783" fg:w="1"/><text x="63.8568%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="63.6068%" y="197" width="0.0812%" height="15" fill="rgb(248,50,36)" fg:x="783" fg:w="1"/><text x="63.8568%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="63.6068%" y="261" width="0.1625%" height="15" fill="rgb(226,19,31)" fg:x="783" fg:w="2"/><text x="63.8568%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="63.6068%" y="245" width="0.1625%" height="15" fill="rgb(205,132,21)" fg:x="783" fg:w="2"/><text x="63.8568%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="63.6068%" y="229" width="0.1625%" height="15" fill="rgb(207,42,19)" fg:x="783" fg:w="2"/><text x="63.8568%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="63.6881%" y="213" width="0.0812%" height="15" fill="rgb(229,69,35)" fg:x="784" fg:w="1"/><text x="63.9381%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.6881%" y="197" width="0.0812%" height="15" fill="rgb(226,96,11)" fg:x="784" fg:w="1"/><text x="63.9381%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.6881%" y="181" width="0.0812%" height="15" fill="rgb(236,133,54)" fg:x="784" fg:w="1"/><text x="63.9381%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.6881%" y="165" width="0.0812%" height="15" fill="rgb(247,166,21)" fg:x="784" fg:w="1"/><text x="63.9381%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="63.7693%" y="229" width="0.0812%" height="15" fill="rgb(220,132,12)" fg:x="785" fg:w="1"/><text x="64.0193%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="63.7693%" y="213" width="0.0812%" height="15" fill="rgb(233,27,30)" fg:x="785" fg:w="1"/><text x="64.0193%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="63.7693%" y="197" width="0.0812%" height="15" fill="rgb(246,161,27)" fg:x="785" fg:w="1"/><text x="64.0193%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (104 samples, 8.45%)</title><rect x="55.4833%" y="325" width="8.4484%" height="15" fill="rgb(240,56,3)" fg:x="683" fg:w="104"/><text x="55.7333%" y="335.50">indefinite::..</text></g><g><title>regex::regex::string::Regex::new (96 samples, 7.80%)</title><rect x="56.1332%" y="309" width="7.7985%" height="15" fill="rgb(242,190,9)" fg:x="691" fg:w="96"/><text x="56.3832%" y="319.50">regex::rege..</text></g><g><title>regex::builders::string::RegexBuilder::build (92 samples, 7.47%)</title><rect x="56.4582%" y="293" width="7.4736%" height="15" fill="rgb(234,3,52)" fg:x="695" fg:w="92"/><text x="56.7082%" y="303.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (92 samples, 7.47%)</title><rect x="56.4582%" y="277" width="7.4736%" height="15" fill="rgb(220,221,19)" fg:x="695" fg:w="92"/><text x="56.7082%" y="287.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="63.7693%" y="261" width="0.1625%" height="15" fill="rgb(247,178,30)" fg:x="785" fg:w="2"/><text x="64.0193%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="63.7693%" y="245" width="0.1625%" height="15" fill="rgb(234,212,27)" fg:x="785" fg:w="2"/><text x="64.0193%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="63.8505%" y="229" width="0.0812%" height="15" fill="rgb(226,199,38)" fg:x="786" fg:w="1"/><text x="64.1005%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="63.8505%" y="213" width="0.0812%" height="15" fill="rgb(248,114,22)" fg:x="786" fg:w="1"/><text x="64.1005%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="63.8505%" y="197" width="0.0812%" height="15" fill="rgb(221,180,4)" fg:x="786" fg:w="1"/><text x="64.1005%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.8505%" y="181" width="0.0812%" height="15" fill="rgb(220,229,24)" fg:x="786" fg:w="1"/><text x="64.1005%" y="191.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.9318%" y="309" width="0.0812%" height="15" fill="rgb(226,184,27)" fg:x="787" fg:w="1"/><text x="64.1818%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="64.0130%" y="245" width="0.0812%" height="15" fill="rgb(232,99,15)" fg:x="788" fg:w="1"/><text x="64.2630%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="64.0130%" y="229" width="0.0812%" height="15" fill="rgb(250,167,16)" fg:x="788" fg:w="1"/><text x="64.2630%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.0130%" y="213" width="0.0812%" height="15" fill="rgb(243,113,6)" fg:x="788" fg:w="1"/><text x="64.2630%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="64.0130%" y="261" width="0.1625%" height="15" fill="rgb(244,147,52)" fg:x="788" fg:w="2"/><text x="64.2630%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="64.0942%" y="245" width="0.0812%" height="15" fill="rgb(235,59,50)" fg:x="789" fg:w="1"/><text x="64.3442%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="64.0130%" y="293" width="0.2437%" height="15" fill="rgb(250,188,6)" fg:x="788" fg:w="3"/><text x="64.2630%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="64.0130%" y="277" width="0.2437%" height="15" fill="rgb(236,173,11)" fg:x="788" fg:w="3"/><text x="64.2630%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="64.1755%" y="261" width="0.0812%" height="15" fill="rgb(233,64,3)" fg:x="790" fg:w="1"/><text x="64.4255%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="64.1755%" y="245" width="0.0812%" height="15" fill="rgb(207,92,7)" fg:x="790" fg:w="1"/><text x="64.4255%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.1755%" y="229" width="0.0812%" height="15" fill="rgb(221,30,19)" fg:x="790" fg:w="1"/><text x="64.4255%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="64.2567%" y="229" width="0.0812%" height="15" fill="rgb(245,22,49)" fg:x="791" fg:w="1"/><text x="64.5067%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="64.2567%" y="213" width="0.0812%" height="15" fill="rgb(218,39,20)" fg:x="791" fg:w="1"/><text x="64.5067%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="64.3379%" y="229" width="0.0812%" height="15" fill="rgb(222,144,21)" fg:x="792" fg:w="1"/><text x="64.5879%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="64.3379%" y="213" width="0.0812%" height="15" fill="rgb(222,78,51)" fg:x="792" fg:w="1"/><text x="64.5879%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="64.4192%" y="213" width="0.2437%" height="15" fill="rgb(248,213,53)" fg:x="793" fg:w="3"/><text x="64.6692%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="64.4192%" y="229" width="0.3249%" height="15" fill="rgb(245,28,34)" fg:x="793" fg:w="4"/><text x="64.6692%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="64.6629%" y="213" width="0.0812%" height="15" fill="rgb(229,186,26)" fg:x="796" fg:w="1"/><text x="64.9129%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="64.6629%" y="197" width="0.0812%" height="15" fill="rgb(224,0,41)" fg:x="796" fg:w="1"/><text x="64.9129%" y="207.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="64.7441%" y="197" width="0.0812%" height="15" fill="rgb(223,136,51)" fg:x="797" fg:w="1"/><text x="64.9941%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="64.8253%" y="197" width="0.2437%" height="15" fill="rgb(234,50,9)" fg:x="798" fg:w="3"/><text x="65.0753%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.9878%" y="181" width="0.0812%" height="15" fill="rgb(242,164,20)" fg:x="800" fg:w="1"/><text x="65.2378%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.89%)</title><rect x="64.2567%" y="245" width="0.8936%" height="15" fill="rgb(230,169,22)" fg:x="791" fg:w="11"/><text x="64.5067%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.41%)</title><rect x="64.7441%" y="229" width="0.4062%" height="15" fill="rgb(228,82,26)" fg:x="797" fg:w="5"/><text x="64.9941%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="64.7441%" y="213" width="0.4062%" height="15" fill="rgb(244,220,31)" fg:x="797" fg:w="5"/><text x="64.9941%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="65.0690%" y="197" width="0.0812%" height="15" fill="rgb(214,35,25)" fg:x="801" fg:w="1"/><text x="65.3190%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="65.0690%" y="181" width="0.0812%" height="15" fill="rgb(245,162,54)" fg:x="801" fg:w="1"/><text x="65.3190%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="65.1503%" y="213" width="0.0812%" height="15" fill="rgb(210,43,24)" fg:x="802" fg:w="1"/><text x="65.4003%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.1503%" y="197" width="0.0812%" height="15" fill="rgb(226,145,51)" fg:x="802" fg:w="1"/><text x="65.4003%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="65.2315%" y="213" width="0.0812%" height="15" fill="rgb(237,52,53)" fg:x="803" fg:w="1"/><text x="65.4815%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="65.2315%" y="197" width="0.0812%" height="15" fill="rgb(216,226,7)" fg:x="803" fg:w="1"/><text x="65.4815%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="65.1503%" y="245" width="0.2437%" height="15" fill="rgb(206,223,18)" fg:x="802" fg:w="3"/><text x="65.4003%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="65.1503%" y="229" width="0.2437%" height="15" fill="rgb(221,1,10)" fg:x="802" fg:w="3"/><text x="65.4003%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="65.3128%" y="213" width="0.0812%" height="15" fill="rgb(221,151,42)" fg:x="804" fg:w="1"/><text x="65.5628%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (15 samples, 1.22%)</title><rect x="64.2567%" y="293" width="1.2185%" height="15" fill="rgb(205,183,46)" fg:x="791" fg:w="15"/><text x="64.5067%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (15 samples, 1.22%)</title><rect x="64.2567%" y="277" width="1.2185%" height="15" fill="rgb(239,229,1)" fg:x="791" fg:w="15"/><text x="64.5067%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (15 samples, 1.22%)</title><rect x="64.2567%" y="261" width="1.2185%" height="15" fill="rgb(236,192,23)" fg:x="791" fg:w="15"/><text x="64.5067%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="65.3940%" y="245" width="0.0812%" height="15" fill="rgb(215,146,3)" fg:x="805" fg:w="1"/><text x="65.6440%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="65.3940%" y="229" width="0.0812%" height="15" fill="rgb(235,52,27)" fg:x="805" fg:w="1"/><text x="65.6440%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="65.3940%" y="213" width="0.0812%" height="15" fill="rgb(236,45,20)" fg:x="805" fg:w="1"/><text x="65.6440%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="65.4752%" y="213" width="0.1625%" height="15" fill="rgb(235,86,41)" fg:x="806" fg:w="2"/><text x="65.7252%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="65.4752%" y="197" width="0.1625%" height="15" fill="rgb(235,27,27)" fg:x="806" fg:w="2"/><text x="65.7252%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.16%)</title><rect x="65.4752%" y="181" width="0.1625%" height="15" fill="rgb(232,4,34)" fg:x="806" fg:w="2"/><text x="65.7252%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (205 samples, 16.65%)</title><rect x="49.1470%" y="405" width="16.6531%" height="15" fill="rgb(215,22,10)" fg:x="605" fg:w="205"/><text x="49.3970%" y="415.50">&lt;&amp;kernel::model::EntityPtr..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (195 samples, 15.84%)</title><rect x="49.9594%" y="389" width="15.8408%" height="15" fill="rgb(230,228,27)" fg:x="615" fg:w="195"/><text x="50.2094%" y="399.50">plugins_core::looking::m..</text></g><g><title>indefinite::indefinite (195 samples, 15.84%)</title><rect x="49.9594%" y="373" width="15.8408%" height="15" fill="rgb(216,26,51)" fg:x="615" fg:w="195"/><text x="50.2094%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (195 samples, 15.84%)</title><rect x="49.9594%" y="357" width="15.8408%" height="15" fill="rgb(225,180,50)" fg:x="615" fg:w="195"/><text x="50.2094%" y="367.50">indefinite::methods::ind..</text></g><g><title>indefinite::methods::apply_rules (195 samples, 15.84%)</title><rect x="49.9594%" y="341" width="15.8408%" height="15" fill="rgb(236,211,2)" fg:x="615" fg:w="195"/><text x="50.2094%" y="351.50">indefinite::methods::app..</text></g><g><title>indefinite::rules::other::Other::run (23 samples, 1.87%)</title><rect x="63.9318%" y="325" width="1.8684%" height="15" fill="rgb(250,51,20)" fg:x="787" fg:w="23"/><text x="64.1818%" y="335.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (22 samples, 1.79%)</title><rect x="64.0130%" y="309" width="1.7872%" height="15" fill="rgb(232,70,37)" fg:x="788" fg:w="22"/><text x="64.2630%" y="319.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="65.4752%" y="293" width="0.3249%" height="15" fill="rgb(226,183,39)" fg:x="806" fg:w="4"/><text x="65.7252%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="65.4752%" y="277" width="0.3249%" height="15" fill="rgb(232,228,21)" fg:x="806" fg:w="4"/><text x="65.7252%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="65.4752%" y="261" width="0.3249%" height="15" fill="rgb(251,118,32)" fg:x="806" fg:w="4"/><text x="65.7252%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="65.4752%" y="245" width="0.3249%" height="15" fill="rgb(235,172,38)" fg:x="806" fg:w="4"/><text x="65.7252%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="65.4752%" y="229" width="0.3249%" height="15" fill="rgb(235,63,18)" fg:x="806" fg:w="4"/><text x="65.7252%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="65.6377%" y="213" width="0.1625%" height="15" fill="rgb(225,4,7)" fg:x="808" fg:w="2"/><text x="65.8877%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.8002%" y="357" width="0.0812%" height="15" fill="rgb(231,61,1)" fg:x="810" fg:w="1"/><text x="66.0502%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.8002%" y="341" width="0.0812%" height="15" fill="rgb(241,155,22)" fg:x="810" fg:w="1"/><text x="66.0502%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.8002%" y="325" width="0.0812%" height="15" fill="rgb(209,100,26)" fg:x="810" fg:w="1"/><text x="66.0502%" y="335.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (2 samples, 0.16%)</title><rect x="65.8002%" y="373" width="0.1625%" height="15" fill="rgb(248,181,15)" fg:x="810" fg:w="2"/><text x="66.0502%" y="383.50"></text></g><g><title>plugins_core::tools::contained_by (1 samples, 0.08%)</title><rect x="65.8814%" y="357" width="0.0812%" height="15" fill="rgb(214,94,31)" fg:x="811" fg:w="1"/><text x="66.1314%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="65.8814%" y="341" width="0.0812%" height="15" fill="rgb(207,16,42)" fg:x="811" fg:w="1"/><text x="66.1314%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.8814%" y="325" width="0.0812%" height="15" fill="rgb(208,127,13)" fg:x="811" fg:w="1"/><text x="66.1314%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.8814%" y="309" width="0.0812%" height="15" fill="rgb(220,211,18)" fg:x="811" fg:w="1"/><text x="66.1314%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (4 samples, 0.32%)</title><rect x="65.8002%" y="405" width="0.3249%" height="15" fill="rgb(221,55,38)" fg:x="810" fg:w="4"/><text x="66.0502%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (4 samples, 0.32%)</title><rect x="65.8002%" y="389" width="0.3249%" height="15" fill="rgb(252,219,45)" fg:x="810" fg:w="4"/><text x="66.0502%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="65.9626%" y="373" width="0.1625%" height="15" fill="rgb(248,53,35)" fg:x="812" fg:w="2"/><text x="66.2126%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (2 samples, 0.16%)</title><rect x="65.9626%" y="357" width="0.1625%" height="15" fill="rgb(210,87,2)" fg:x="812" fg:w="2"/><text x="66.2126%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (2 samples, 0.16%)</title><rect x="65.9626%" y="341" width="0.1625%" height="15" fill="rgb(239,133,9)" fg:x="812" fg:w="2"/><text x="66.2126%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="65.9626%" y="325" width="0.1625%" height="15" fill="rgb(214,114,5)" fg:x="812" fg:w="2"/><text x="66.2126%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="65.9626%" y="309" width="0.1625%" height="15" fill="rgb(206,124,24)" fg:x="812" fg:w="2"/><text x="66.2126%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="65.9626%" y="293" width="0.1625%" height="15" fill="rgb(212,57,33)" fg:x="812" fg:w="2"/><text x="66.2126%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="65.9626%" y="277" width="0.1625%" height="15" fill="rgb(246,21,20)" fg:x="812" fg:w="2"/><text x="66.2126%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="66.0439%" y="261" width="0.0812%" height="15" fill="rgb(253,210,39)" fg:x="813" fg:w="1"/><text x="66.2939%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.0439%" y="245" width="0.0812%" height="15" fill="rgb(209,187,24)" fg:x="813" fg:w="1"/><text x="66.2939%" y="255.50"></text></g><g><title>&lt;plugins_rune::runner::RuneReturn as plugins_rune::PerformTagged&gt;::handle (1 samples, 0.08%)</title><rect x="66.2876%" y="277" width="0.0812%" height="15" fill="rgb(246,136,17)" fg:x="816" fg:w="1"/><text x="66.5376%" y="287.50"></text></g><g><title>&lt;rune::runtime::value::Value as plugins_rune::runner::Simplifies&gt;::simplify (1 samples, 0.08%)</title><rect x="66.2876%" y="261" width="0.0812%" height="15" fill="rgb(211,0,30)" fg:x="816" fg:w="1"/><text x="66.5376%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="66.3688%" y="277" width="0.0812%" height="15" fill="rgb(216,199,7)" fg:x="817" fg:w="1"/><text x="66.6188%" y="287.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="66.3688%" y="261" width="0.0812%" height="15" fill="rgb(207,210,19)" fg:x="817" fg:w="1"/><text x="66.6188%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="66.3688%" y="245" width="0.0812%" height="15" fill="rgb(237,187,39)" fg:x="817" fg:w="1"/><text x="66.6188%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="66.3688%" y="229" width="0.0812%" height="15" fill="rgb(243,194,42)" fg:x="817" fg:w="1"/><text x="66.6188%" y="239.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="66.3688%" y="213" width="0.0812%" height="15" fill="rgb(225,194,19)" fg:x="817" fg:w="1"/><text x="66.6188%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="66.3688%" y="197" width="0.0812%" height="15" fill="rgb(224,192,14)" fg:x="817" fg:w="1"/><text x="66.6188%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.08%)</title><rect x="66.3688%" y="181" width="0.0812%" height="15" fill="rgb(252,21,18)" fg:x="817" fg:w="1"/><text x="66.6188%" y="191.50"></text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="66.3688%" y="165" width="0.0812%" height="15" fill="rgb(229,69,19)" fg:x="817" fg:w="1"/><text x="66.6188%" y="175.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (5 samples, 0.41%)</title><rect x="66.1251%" y="389" width="0.4062%" height="15" fill="rgb(251,31,53)" fg:x="814" fg:w="5"/><text x="66.3751%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (5 samples, 0.41%)</title><rect x="66.1251%" y="373" width="0.4062%" height="15" fill="rgb(218,39,50)" fg:x="814" fg:w="5"/><text x="66.3751%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (4 samples, 0.32%)</title><rect x="66.2063%" y="357" width="0.3249%" height="15" fill="rgb(231,50,17)" fg:x="815" fg:w="4"/><text x="66.4563%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (4 samples, 0.32%)</title><rect x="66.2063%" y="341" width="0.3249%" height="15" fill="rgb(223,217,31)" fg:x="815" fg:w="4"/><text x="66.4563%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (4 samples, 0.32%)</title><rect x="66.2063%" y="325" width="0.3249%" height="15" fill="rgb(225,91,12)" fg:x="815" fg:w="4"/><text x="66.4563%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (4 samples, 0.32%)</title><rect x="66.2063%" y="309" width="0.3249%" height="15" fill="rgb(242,58,43)" fg:x="815" fg:w="4"/><text x="66.4563%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (4 samples, 0.32%)</title><rect x="66.2063%" y="293" width="0.3249%" height="15" fill="rgb(242,32,21)" fg:x="815" fg:w="4"/><text x="66.4563%" y="303.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (1 samples, 0.08%)</title><rect x="66.4500%" y="277" width="0.0812%" height="15" fill="rgb(211,127,1)" fg:x="818" fg:w="1"/><text x="66.7000%" y="287.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="66.4500%" y="261" width="0.0812%" height="15" fill="rgb(231,93,13)" fg:x="818" fg:w="1"/><text x="66.7000%" y="271.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.4500%" y="245" width="0.0812%" height="15" fill="rgb(218,83,4)" fg:x="818" fg:w="1"/><text x="66.7000%" y="255.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (5 samples, 0.41%)</title><rect x="66.5313%" y="373" width="0.4062%" height="15" fill="rgb(230,218,10)" fg:x="819" fg:w="5"/><text x="66.7813%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (5 samples, 0.41%)</title><rect x="66.5313%" y="357" width="0.4062%" height="15" fill="rgb(235,127,18)" fg:x="819" fg:w="5"/><text x="66.7813%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.32%)</title><rect x="66.6125%" y="341" width="0.3249%" height="15" fill="rgb(213,137,46)" fg:x="820" fg:w="4"/><text x="66.8625%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="66.6125%" y="325" width="0.3249%" height="15" fill="rgb(235,179,24)" fg:x="820" fg:w="4"/><text x="66.8625%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="66.6937%" y="309" width="0.2437%" height="15" fill="rgb(247,58,49)" fg:x="821" fg:w="3"/><text x="66.9437%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="66.7750%" y="293" width="0.1625%" height="15" fill="rgb(242,222,5)" fg:x="822" fg:w="2"/><text x="67.0250%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="66.8562%" y="277" width="0.0812%" height="15" fill="rgb(230,16,48)" fg:x="823" fg:w="1"/><text x="67.1062%" y="287.50"></text></g><g><title>plugins_core::library::actions::reply_ok (11 samples, 0.89%)</title><rect x="66.1251%" y="405" width="0.8936%" height="15" fill="rgb(241,192,16)" fg:x="814" fg:w="11"/><text x="66.3751%" y="415.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (6 samples, 0.49%)</title><rect x="66.5313%" y="389" width="0.4874%" height="15" fill="rgb(209,25,37)" fg:x="819" fg:w="6"/><text x="66.7813%" y="399.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="66.9374%" y="373" width="0.0812%" height="15" fill="rgb(229,215,13)" fg:x="824" fg:w="1"/><text x="67.1874%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="67.0187%" y="341" width="0.0812%" height="15" fill="rgb(213,199,8)" fg:x="825" fg:w="1"/><text x="67.2687%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.0187%" y="325" width="0.0812%" height="15" fill="rgb(226,151,19)" fg:x="825" fg:w="1"/><text x="67.2687%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.0187%" y="309" width="0.0812%" height="15" fill="rgb(254,183,12)" fg:x="825" fg:w="1"/><text x="67.2687%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.0187%" y="293" width="0.0812%" height="15" fill="rgb(245,8,3)" fg:x="825" fg:w="1"/><text x="67.2687%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.0187%" y="277" width="0.0812%" height="15" fill="rgb(229,159,35)" fg:x="825" fg:w="1"/><text x="67.2687%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.0187%" y="261" width="0.0812%" height="15" fill="rgb(209,145,1)" fg:x="825" fg:w="1"/><text x="67.2687%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.0187%" y="245" width="0.0812%" height="15" fill="rgb(228,183,16)" fg:x="825" fg:w="1"/><text x="67.2687%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="67.0187%" y="389" width="0.1625%" height="15" fill="rgb(222,68,0)" fg:x="825" fg:w="2"/><text x="67.2687%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="67.0187%" y="373" width="0.1625%" height="15" fill="rgb(209,130,50)" fg:x="825" fg:w="2"/><text x="67.2687%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="67.0187%" y="357" width="0.1625%" height="15" fill="rgb(228,176,44)" fg:x="825" fg:w="2"/><text x="67.2687%" y="367.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="67.0999%" y="341" width="0.0812%" height="15" fill="rgb(221,164,2)" fg:x="826" fg:w="1"/><text x="67.3499%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="67.1812%" y="373" width="0.0812%" height="15" fill="rgb(249,199,49)" fg:x="827" fg:w="1"/><text x="67.4312%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.1812%" y="357" width="0.0812%" height="15" fill="rgb(228,205,53)" fg:x="827" fg:w="1"/><text x="67.4312%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.1812%" y="341" width="0.0812%" height="15" fill="rgb(235,77,20)" fg:x="827" fg:w="1"/><text x="67.4312%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="67.1812%" y="325" width="0.0812%" height="15" fill="rgb(227,147,34)" fg:x="827" fg:w="1"/><text x="67.4312%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="67.1812%" y="309" width="0.0812%" height="15" fill="rgb(226,203,52)" fg:x="827" fg:w="1"/><text x="67.4312%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.1812%" y="293" width="0.0812%" height="15" fill="rgb(226,186,23)" fg:x="827" fg:w="1"/><text x="67.4312%" y="303.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="67.1812%" y="389" width="0.1625%" height="15" fill="rgb(236,13,30)" fg:x="827" fg:w="2"/><text x="67.4312%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="67.2624%" y="373" width="0.0812%" height="15" fill="rgb(228,121,22)" fg:x="828" fg:w="1"/><text x="67.5124%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.2624%" y="357" width="0.0812%" height="15" fill="rgb(248,222,26)" fg:x="828" fg:w="1"/><text x="67.5124%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="67.2624%" y="341" width="0.0812%" height="15" fill="rgb(251,72,25)" fg:x="828" fg:w="1"/><text x="67.5124%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.3436%" y="309" width="0.0812%" height="15" fill="rgb(223,114,24)" fg:x="829" fg:w="1"/><text x="67.5936%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="67.3436%" y="357" width="0.1625%" height="15" fill="rgb(232,190,43)" fg:x="829" fg:w="2"/><text x="67.5936%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="67.3436%" y="341" width="0.1625%" height="15" fill="rgb(208,90,0)" fg:x="829" fg:w="2"/><text x="67.5936%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.3436%" y="325" width="0.1625%" height="15" fill="rgb(234,149,31)" fg:x="829" fg:w="2"/><text x="67.5936%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.4249%" y="309" width="0.0812%" height="15" fill="rgb(235,188,36)" fg:x="830" fg:w="1"/><text x="67.6749%" y="319.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (228 samples, 18.52%)</title><rect x="49.1470%" y="421" width="18.5215%" height="15" fill="rgb(219,59,51)" fg:x="605" fg:w="228"/><text x="49.3970%" y="431.50">&lt;plugins_core::carrying::acti..</text></g><g><title>plugins_core::location::model::change_location (8 samples, 0.65%)</title><rect x="67.0187%" y="405" width="0.6499%" height="15" fill="rgb(236,101,40)" fg:x="825" fg:w="8"/><text x="67.2687%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (4 samples, 0.32%)</title><rect x="67.3436%" y="389" width="0.3249%" height="15" fill="rgb(235,33,7)" fg:x="829" fg:w="4"/><text x="67.5936%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="67.3436%" y="373" width="0.3249%" height="15" fill="rgb(213,169,26)" fg:x="829" fg:w="4"/><text x="67.5936%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="67.5061%" y="357" width="0.1625%" height="15" fill="rgb(218,99,34)" fg:x="831" fg:w="2"/><text x="67.7561%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="67.5061%" y="341" width="0.1625%" height="15" fill="rgb(210,57,24)" fg:x="831" fg:w="2"/><text x="67.7561%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="67.5061%" y="325" width="0.1625%" height="15" fill="rgb(231,181,54)" fg:x="831" fg:w="2"/><text x="67.7561%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.5873%" y="309" width="0.0812%" height="15" fill="rgb(251,188,48)" fg:x="832" fg:w="1"/><text x="67.8373%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.5873%" y="293" width="0.0812%" height="15" fill="rgb(243,12,45)" fg:x="832" fg:w="1"/><text x="67.8373%" y="303.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (531 samples, 43.14%)</title><rect x="24.6141%" y="549" width="43.1357%" height="15" fill="rgb(250,197,9)" fg:x="303" fg:w="531"/><text x="24.8641%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (531 samples, 43.14%)</title><rect x="24.6141%" y="533" width="43.1357%" height="15" fill="rgb(235,149,35)" fg:x="303" fg:w="531"/><text x="24.8641%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (531 samples, 43.14%)</title><rect x="24.6141%" y="517" width="43.1357%" height="15" fill="rgb(219,27,19)" fg:x="303" fg:w="531"/><text x="24.8641%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (531 samples, 43.14%)</title><rect x="24.6141%" y="501" width="43.1357%" height="15" fill="rgb(244,78,31)" fg:x="303" fg:w="531"/><text x="24.8641%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (531 samples, 43.14%)</title><rect x="24.6141%" y="485" width="43.1357%" height="15" fill="rgb(241,13,4)" fg:x="303" fg:w="531"/><text x="24.8641%" y="495.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (531 samples, 43.14%)</title><rect x="24.6141%" y="469" width="43.1357%" height="15" fill="rgb(212,194,26)" fg:x="303" fg:w="531"/><text x="24.8641%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (531 samples, 43.14%)</title><rect x="24.6141%" y="453" width="43.1357%" height="15" fill="rgb(236,80,11)" fg:x="303" fg:w="531"/><text x="24.8641%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (531 samples, 43.14%)</title><rect x="24.6141%" y="437" width="43.1357%" height="15" fill="rgb(206,1,24)" fg:x="303" fg:w="531"/><text x="24.8641%" y="447.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="67.6686%" y="421" width="0.0812%" height="15" fill="rgb(238,215,50)" fg:x="833" fg:w="1"/><text x="67.9186%" y="431.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.9123%" y="517" width="0.0812%" height="15" fill="rgb(254,126,32)" fg:x="836" fg:w="1"/><text x="68.1623%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.9123%" y="501" width="0.0812%" height="15" fill="rgb(206,111,53)" fg:x="836" fg:w="1"/><text x="68.1623%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="67.9935%" y="501" width="0.0812%" height="15" fill="rgb(218,72,44)" fg:x="837" fg:w="1"/><text x="68.2435%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.9935%" y="485" width="0.0812%" height="15" fill="rgb(238,25,3)" fg:x="837" fg:w="1"/><text x="68.2435%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.9935%" y="469" width="0.0812%" height="15" fill="rgb(250,191,7)" fg:x="837" fg:w="1"/><text x="68.2435%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.9935%" y="453" width="0.0812%" height="15" fill="rgb(238,56,30)" fg:x="837" fg:w="1"/><text x="68.2435%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.0747%" y="389" width="0.0812%" height="15" fill="rgb(210,27,45)" fg:x="838" fg:w="1"/><text x="68.3247%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.0747%" y="373" width="0.0812%" height="15" fill="rgb(207,10,50)" fg:x="838" fg:w="1"/><text x="68.3247%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.0747%" y="357" width="0.0812%" height="15" fill="rgb(249,30,23)" fg:x="838" fg:w="1"/><text x="68.3247%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.0747%" y="341" width="0.0812%" height="15" fill="rgb(250,80,12)" fg:x="838" fg:w="1"/><text x="68.3247%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.0747%" y="325" width="0.0812%" height="15" fill="rgb(210,221,37)" fg:x="838" fg:w="1"/><text x="68.3247%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.0747%" y="309" width="0.0812%" height="15" fill="rgb(205,96,24)" fg:x="838" fg:w="1"/><text x="68.3247%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.0747%" y="293" width="0.0812%" height="15" fill="rgb(247,104,22)" fg:x="838" fg:w="1"/><text x="68.3247%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.0747%" y="277" width="0.0812%" height="15" fill="rgb(222,61,53)" fg:x="838" fg:w="1"/><text x="68.3247%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.0747%" y="261" width="0.0812%" height="15" fill="rgb(241,11,53)" fg:x="838" fg:w="1"/><text x="68.3247%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.0747%" y="245" width="0.0812%" height="15" fill="rgb(230,111,47)" fg:x="838" fg:w="1"/><text x="68.3247%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.0747%" y="229" width="0.0812%" height="15" fill="rgb(218,187,29)" fg:x="838" fg:w="1"/><text x="68.3247%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.0747%" y="213" width="0.0812%" height="15" fill="rgb(210,121,46)" fg:x="838" fg:w="1"/><text x="68.3247%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.0747%" y="197" width="0.0812%" height="15" fill="rgb(250,43,19)" fg:x="838" fg:w="1"/><text x="68.3247%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.0747%" y="437" width="0.1625%" height="15" fill="rgb(238,61,12)" fg:x="838" fg:w="2"/><text x="68.3247%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.0747%" y="421" width="0.1625%" height="15" fill="rgb(251,198,9)" fg:x="838" fg:w="2"/><text x="68.3247%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.0747%" y="405" width="0.1625%" height="15" fill="rgb(214,192,38)" fg:x="838" fg:w="2"/><text x="68.3247%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1560%" y="389" width="0.0812%" height="15" fill="rgb(214,73,19)" fg:x="839" fg:w="1"/><text x="68.4060%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.2372%" y="421" width="0.0812%" height="15" fill="rgb(249,222,49)" fg:x="840" fg:w="1"/><text x="68.4872%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.3184%" y="389" width="0.0812%" height="15" fill="rgb(231,181,54)" fg:x="841" fg:w="1"/><text x="68.5684%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3184%" y="373" width="0.0812%" height="15" fill="rgb(240,1,13)" fg:x="841" fg:w="1"/><text x="68.5684%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.3184%" y="357" width="0.0812%" height="15" fill="rgb(225,21,16)" fg:x="841" fg:w="1"/><text x="68.5684%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3184%" y="341" width="0.0812%" height="15" fill="rgb(246,176,50)" fg:x="841" fg:w="1"/><text x="68.5684%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="68.2372%" y="437" width="0.2437%" height="15" fill="rgb(208,96,50)" fg:x="840" fg:w="3"/><text x="68.4872%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.3184%" y="421" width="0.1625%" height="15" fill="rgb(240,219,19)" fg:x="841" fg:w="2"/><text x="68.5684%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.3184%" y="405" width="0.1625%" height="15" fill="rgb(234,73,5)" fg:x="841" fg:w="2"/><text x="68.5684%" y="415.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="68.3997%" y="389" width="0.0812%" height="15" fill="rgb(225,52,53)" fg:x="842" fg:w="1"/><text x="68.6497%" y="399.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="68.4809%" y="437" width="0.0812%" height="15" fill="rgb(250,12,14)" fg:x="843" fg:w="1"/><text x="68.7309%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4809%" y="421" width="0.0812%" height="15" fill="rgb(242,185,54)" fg:x="843" fg:w="1"/><text x="68.7309%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5621%" y="341" width="0.0812%" height="15" fill="rgb(211,206,31)" fg:x="844" fg:w="1"/><text x="68.8121%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.5621%" y="325" width="0.0812%" height="15" fill="rgb(252,10,33)" fg:x="844" fg:w="1"/><text x="68.8121%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5621%" y="309" width="0.0812%" height="15" fill="rgb(216,26,7)" fg:x="844" fg:w="1"/><text x="68.8121%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.5621%" y="293" width="0.0812%" height="15" fill="rgb(228,112,40)" fg:x="844" fg:w="1"/><text x="68.8121%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="68.5621%" y="277" width="0.0812%" height="15" fill="rgb(212,21,16)" fg:x="844" fg:w="1"/><text x="68.8121%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5621%" y="261" width="0.0812%" height="15" fill="rgb(249,3,29)" fg:x="844" fg:w="1"/><text x="68.8121%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.6434%" y="341" width="0.0812%" height="15" fill="rgb(221,42,51)" fg:x="845" fg:w="1"/><text x="68.8934%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.6434%" y="325" width="0.0812%" height="15" fill="rgb(225,90,21)" fg:x="845" fg:w="1"/><text x="68.8934%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.6434%" y="309" width="0.0812%" height="15" fill="rgb(242,131,5)" fg:x="845" fg:w="1"/><text x="68.8934%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.6434%" y="293" width="0.0812%" height="15" fill="rgb(220,187,28)" fg:x="845" fg:w="1"/><text x="68.8934%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6434%" y="277" width="0.0812%" height="15" fill="rgb(210,75,48)" fg:x="845" fg:w="1"/><text x="68.8934%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="68.5621%" y="437" width="0.2437%" height="15" fill="rgb(211,91,40)" fg:x="844" fg:w="3"/><text x="68.8121%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="68.5621%" y="421" width="0.2437%" height="15" fill="rgb(205,43,18)" fg:x="844" fg:w="3"/><text x="68.8121%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.5621%" y="405" width="0.2437%" height="15" fill="rgb(207,123,11)" fg:x="844" fg:w="3"/><text x="68.8121%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="68.5621%" y="389" width="0.2437%" height="15" fill="rgb(235,89,39)" fg:x="844" fg:w="3"/><text x="68.8121%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.5621%" y="373" width="0.2437%" height="15" fill="rgb(245,217,27)" fg:x="844" fg:w="3"/><text x="68.8121%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="68.5621%" y="357" width="0.2437%" height="15" fill="rgb(216,55,17)" fg:x="844" fg:w="3"/><text x="68.8121%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7246%" y="341" width="0.0812%" height="15" fill="rgb(252,116,44)" fg:x="846" fg:w="1"/><text x="68.9746%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.7246%" y="325" width="0.0812%" height="15" fill="rgb(229,153,4)" fg:x="846" fg:w="1"/><text x="68.9746%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="68.7246%" y="309" width="0.0812%" height="15" fill="rgb(222,24,35)" fg:x="846" fg:w="1"/><text x="68.9746%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7246%" y="293" width="0.0812%" height="15" fill="rgb(214,26,20)" fg:x="846" fg:w="1"/><text x="68.9746%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.7246%" y="277" width="0.0812%" height="15" fill="rgb(215,14,45)" fg:x="846" fg:w="1"/><text x="68.9746%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.8058%" y="309" width="0.0812%" height="15" fill="rgb(217,212,50)" fg:x="847" fg:w="1"/><text x="69.0558%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8058%" y="293" width="0.0812%" height="15" fill="rgb(230,172,52)" fg:x="847" fg:w="1"/><text x="69.0558%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.8058%" y="277" width="0.0812%" height="15" fill="rgb(210,48,36)" fg:x="847" fg:w="1"/><text x="69.0558%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8058%" y="261" width="0.0812%" height="15" fill="rgb(216,213,32)" fg:x="847" fg:w="1"/><text x="69.0558%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.8058%" y="245" width="0.0812%" height="15" fill="rgb(237,202,41)" fg:x="847" fg:w="1"/><text x="69.0558%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8058%" y="229" width="0.0812%" height="15" fill="rgb(209,14,29)" fg:x="847" fg:w="1"/><text x="69.0558%" y="239.50"></text></g><g><title>plugins_core::tools::contained_by (12 samples, 0.97%)</title><rect x="67.9935%" y="517" width="0.9748%" height="15" fill="rgb(219,29,3)" fg:x="837" fg:w="12"/><text x="68.2435%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.89%)</title><rect x="68.0747%" y="501" width="0.8936%" height="15" fill="rgb(229,13,49)" fg:x="838" fg:w="11"/><text x="68.3247%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.89%)</title><rect x="68.0747%" y="485" width="0.8936%" height="15" fill="rgb(210,206,2)" fg:x="838" fg:w="11"/><text x="68.3247%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.89%)</title><rect x="68.0747%" y="469" width="0.8936%" height="15" fill="rgb(216,154,46)" fg:x="838" fg:w="11"/><text x="68.3247%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.89%)</title><rect x="68.0747%" y="453" width="0.8936%" height="15" fill="rgb(211,170,52)" fg:x="838" fg:w="11"/><text x="68.3247%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="68.8058%" y="437" width="0.1625%" height="15" fill="rgb(233,109,47)" fg:x="847" fg:w="2"/><text x="69.0558%" y="447.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="68.8058%" y="421" width="0.1625%" height="15" fill="rgb(208,212,30)" fg:x="847" fg:w="2"/><text x="69.0558%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.8058%" y="405" width="0.1625%" height="15" fill="rgb(215,190,19)" fg:x="847" fg:w="2"/><text x="69.0558%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.8058%" y="389" width="0.1625%" height="15" fill="rgb(207,164,53)" fg:x="847" fg:w="2"/><text x="69.0558%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.8058%" y="373" width="0.1625%" height="15" fill="rgb(213,87,49)" fg:x="847" fg:w="2"/><text x="69.0558%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.8058%" y="357" width="0.1625%" height="15" fill="rgb(241,216,24)" fg:x="847" fg:w="2"/><text x="69.0558%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.8058%" y="341" width="0.1625%" height="15" fill="rgb(241,123,45)" fg:x="847" fg:w="2"/><text x="69.0558%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.8058%" y="325" width="0.1625%" height="15" fill="rgb(220,36,15)" fg:x="847" fg:w="2"/><text x="69.0558%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.8871%" y="309" width="0.0812%" height="15" fill="rgb(215,202,9)" fg:x="848" fg:w="1"/><text x="69.1371%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="68.8871%" y="293" width="0.0812%" height="15" fill="rgb(252,71,26)" fg:x="848" fg:w="1"/><text x="69.1371%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.9683%" y="485" width="0.1625%" height="15" fill="rgb(243,195,19)" fg:x="849" fg:w="2"/><text x="69.2183%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.0496%" y="469" width="0.0812%" height="15" fill="rgb(207,167,27)" fg:x="850" fg:w="1"/><text x="69.2996%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2933%" y="325" width="0.0812%" height="15" fill="rgb(250,146,54)" fg:x="853" fg:w="1"/><text x="69.5433%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.49%)</title><rect x="68.9683%" y="501" width="0.4874%" height="15" fill="rgb(245,79,9)" fg:x="849" fg:w="6"/><text x="69.2183%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="69.1308%" y="485" width="0.3249%" height="15" fill="rgb(234,197,22)" fg:x="851" fg:w="4"/><text x="69.3808%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.1308%" y="469" width="0.3249%" height="15" fill="rgb(221,52,48)" fg:x="851" fg:w="4"/><text x="69.3808%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (4 samples, 0.32%)</title><rect x="69.1308%" y="453" width="0.3249%" height="15" fill="rgb(235,80,0)" fg:x="851" fg:w="4"/><text x="69.3808%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (4 samples, 0.32%)</title><rect x="69.1308%" y="437" width="0.3249%" height="15" fill="rgb(221,117,53)" fg:x="851" fg:w="4"/><text x="69.3808%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (4 samples, 0.32%)</title><rect x="69.1308%" y="421" width="0.3249%" height="15" fill="rgb(239,48,47)" fg:x="851" fg:w="4"/><text x="69.3808%" y="431.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (4 samples, 0.32%)</title><rect x="69.1308%" y="405" width="0.3249%" height="15" fill="rgb(227,191,52)" fg:x="851" fg:w="4"/><text x="69.3808%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="69.2120%" y="389" width="0.2437%" height="15" fill="rgb(241,118,1)" fg:x="852" fg:w="3"/><text x="69.4620%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.2120%" y="373" width="0.2437%" height="15" fill="rgb(240,85,3)" fg:x="852" fg:w="3"/><text x="69.4620%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.2933%" y="357" width="0.1625%" height="15" fill="rgb(237,68,37)" fg:x="853" fg:w="2"/><text x="69.5433%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.2933%" y="341" width="0.1625%" height="15" fill="rgb(212,9,20)" fg:x="853" fg:w="2"/><text x="69.5433%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.3745%" y="325" width="0.0812%" height="15" fill="rgb(218,84,17)" fg:x="854" fg:w="1"/><text x="69.6245%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.3745%" y="309" width="0.0812%" height="15" fill="rgb(235,147,20)" fg:x="854" fg:w="1"/><text x="69.6245%" y="319.50"></text></g><g><title>plugins_core::tools::occupied_by (7 samples, 0.57%)</title><rect x="68.9683%" y="517" width="0.5686%" height="15" fill="rgb(208,224,1)" fg:x="849" fg:w="7"/><text x="69.2183%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="69.4557%" y="501" width="0.0812%" height="15" fill="rgb(232,97,50)" fg:x="855" fg:w="1"/><text x="69.7057%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="69.4557%" y="485" width="0.0812%" height="15" fill="rgb(238,15,45)" fg:x="855" fg:w="1"/><text x="69.7057%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.4557%" y="469" width="0.0812%" height="15" fill="rgb(231,46,18)" fg:x="855" fg:w="1"/><text x="69.7057%" y="479.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (22 samples, 1.79%)</title><rect x="67.8310%" y="533" width="1.7872%" height="15" fill="rgb(254,169,10)" fg:x="835" fg:w="22"/><text x="68.0810%" y="543.50">p..</text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="69.5370%" y="517" width="0.0812%" height="15" fill="rgb(243,169,30)" fg:x="856" fg:w="1"/><text x="69.7870%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="69.5370%" y="501" width="0.0812%" height="15" fill="rgb(236,90,49)" fg:x="856" fg:w="1"/><text x="69.7870%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.5370%" y="485" width="0.0812%" height="15" fill="rgb(218,80,15)" fg:x="856" fg:w="1"/><text x="69.7870%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.5370%" y="469" width="0.0812%" height="15" fill="rgb(222,115,37)" fg:x="856" fg:w="1"/><text x="69.7870%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.5370%" y="453" width="0.0812%" height="15" fill="rgb(227,0,6)" fg:x="856" fg:w="1"/><text x="69.7870%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (569 samples, 46.22%)</title><rect x="23.4768%" y="645" width="46.2226%" height="15" fill="rgb(217,189,13)" fg:x="289" fg:w="569"/><text x="23.7268%" y="655.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (569 samples, 46.22%)</title><rect x="23.4768%" y="629" width="46.2226%" height="15" fill="rgb(220,74,19)" fg:x="289" fg:w="569"/><text x="23.7268%" y="639.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (569 samples, 46.22%)</title><rect x="23.4768%" y="613" width="46.2226%" height="15" fill="rgb(224,81,18)" fg:x="289" fg:w="569"/><text x="23.7268%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (569 samples, 46.22%)</title><rect x="23.4768%" y="597" width="46.2226%" height="15" fill="rgb(245,178,48)" fg:x="289" fg:w="569"/><text x="23.7268%" y="607.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (556 samples, 45.17%)</title><rect x="24.5329%" y="581" width="45.1665%" height="15" fill="rgb(207,78,24)" fg:x="302" fg:w="556"/><text x="24.7829%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (556 samples, 45.17%)</title><rect x="24.5329%" y="565" width="45.1665%" height="15" fill="rgb(223,222,30)" fg:x="302" fg:w="556"/><text x="24.7829%" y="575.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (24 samples, 1.95%)</title><rect x="67.7498%" y="549" width="1.9496%" height="15" fill="rgb(234,101,12)" fg:x="834" fg:w="24"/><text x="67.9998%" y="559.50">p..</text></g><g><title>plugins_rune::sources::load_sources_from_entity (1 samples, 0.08%)</title><rect x="69.6182%" y="533" width="0.0812%" height="15" fill="rgb(209,80,46)" fg:x="857" fg:w="1"/><text x="69.8682%" y="543.50"></text></g><g><title>engine::session::Session::captured (581 samples, 47.20%)</title><rect x="22.5833%" y="693" width="47.1974%" height="15" fill="rgb(228,79,14)" fg:x="278" fg:w="581"/><text x="22.8333%" y="703.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (574 samples, 46.63%)</title><rect x="23.1519%" y="677" width="46.6288%" height="15" fill="rgb(220,219,34)" fg:x="285" fg:w="574"/><text x="23.4019%" y="687.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (570 samples, 46.30%)</title><rect x="23.4768%" y="661" width="46.3038%" height="15" fill="rgb(207,80,21)" fg:x="289" fg:w="570"/><text x="23.7268%" y="671.50">tracing_core::dispatcher::with_default</text></g><g><title>core::ptr::drop_in_place&lt;tracing_core::dispatcher::DefaultGuard&gt; (1 samples, 0.08%)</title><rect x="69.6994%" y="645" width="0.0812%" height="15" fill="rgb(210,154,44)" fg:x="858" fg:w="1"/><text x="69.9494%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="69.7807%" y="677" width="0.0812%" height="15" fill="rgb(246,44,39)" fg:x="859" fg:w="1"/><text x="70.0307%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.7807%" y="661" width="0.0812%" height="15" fill="rgb(252,175,13)" fg:x="859" fg:w="1"/><text x="70.0307%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.7807%" y="645" width="0.0812%" height="15" fill="rgb(211,50,39)" fg:x="859" fg:w="1"/><text x="70.0307%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.7807%" y="629" width="0.0812%" height="15" fill="rgb(231,204,27)" fg:x="859" fg:w="1"/><text x="70.0307%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.7807%" y="613" width="0.0812%" height="15" fill="rgb(253,26,34)" fg:x="859" fg:w="1"/><text x="70.0307%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.7807%" y="597" width="0.0812%" height="15" fill="rgb(207,139,38)" fg:x="859" fg:w="1"/><text x="70.0307%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.7807%" y="581" width="0.0812%" height="15" fill="rgb(248,54,27)" fg:x="859" fg:w="1"/><text x="70.0307%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.7807%" y="565" width="0.0812%" height="15" fill="rgb(234,25,33)" fg:x="859" fg:w="1"/><text x="70.0307%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.7807%" y="549" width="0.0812%" height="15" fill="rgb(249,107,47)" fg:x="859" fg:w="1"/><text x="70.0307%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.7807%" y="533" width="0.0812%" height="15" fill="rgb(230,190,31)" fg:x="859" fg:w="1"/><text x="70.0307%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.7807%" y="517" width="0.0812%" height="15" fill="rgb(238,173,45)" fg:x="859" fg:w="1"/><text x="70.0307%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.7807%" y="501" width="0.0812%" height="15" fill="rgb(222,16,50)" fg:x="859" fg:w="1"/><text x="70.0307%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7807%" y="485" width="0.0812%" height="15" fill="rgb(251,204,47)" fg:x="859" fg:w="1"/><text x="70.0307%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.8619%" y="645" width="0.0812%" height="15" fill="rgb(225,12,3)" fg:x="860" fg:w="1"/><text x="70.1119%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8619%" y="629" width="0.0812%" height="15" fill="rgb(214,208,22)" fg:x="860" fg:w="1"/><text x="70.1119%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8619%" y="613" width="0.0812%" height="15" fill="rgb(240,57,32)" fg:x="860" fg:w="1"/><text x="70.1119%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.8619%" y="597" width="0.0812%" height="15" fill="rgb(243,113,48)" fg:x="860" fg:w="1"/><text x="70.1119%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.8619%" y="581" width="0.0812%" height="15" fill="rgb(225,135,30)" fg:x="860" fg:w="1"/><text x="70.1119%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.8619%" y="565" width="0.0812%" height="15" fill="rgb(222,3,53)" fg:x="860" fg:w="1"/><text x="70.1119%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.8619%" y="549" width="0.0812%" height="15" fill="rgb(243,142,2)" fg:x="860" fg:w="1"/><text x="70.1119%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.8619%" y="533" width="0.0812%" height="15" fill="rgb(233,67,14)" fg:x="860" fg:w="1"/><text x="70.1119%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.8619%" y="517" width="0.0812%" height="15" fill="rgb(245,125,36)" fg:x="860" fg:w="1"/><text x="70.1119%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.8619%" y="501" width="0.0812%" height="15" fill="rgb(225,199,6)" fg:x="860" fg:w="1"/><text x="70.1119%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.8619%" y="485" width="0.0812%" height="15" fill="rgb(244,71,6)" fg:x="860" fg:w="1"/><text x="70.1119%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.8619%" y="469" width="0.0812%" height="15" fill="rgb(225,62,9)" fg:x="860" fg:w="1"/><text x="70.1119%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8619%" y="453" width="0.0812%" height="15" fill="rgb(246,139,53)" fg:x="860" fg:w="1"/><text x="70.1119%" y="463.50"></text></g><g><title>engine::session::internal::Added::find_refs (2 samples, 0.16%)</title><rect x="69.8619%" y="677" width="0.1625%" height="15" fill="rgb(243,161,46)" fg:x="860" fg:w="2"/><text x="70.1119%" y="687.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="69.8619%" y="661" width="0.1625%" height="15" fill="rgb(236,153,7)" fg:x="860" fg:w="2"/><text x="70.1119%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.9431%" y="645" width="0.0812%" height="15" fill="rgb(248,42,35)" fg:x="861" fg:w="1"/><text x="70.1931%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.9431%" y="629" width="0.0812%" height="15" fill="rgb(250,17,31)" fg:x="861" fg:w="1"/><text x="70.1931%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.9431%" y="613" width="0.0812%" height="15" fill="rgb(248,138,14)" fg:x="861" fg:w="1"/><text x="70.1931%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.9431%" y="597" width="0.0812%" height="15" fill="rgb(228,161,3)" fg:x="861" fg:w="1"/><text x="70.1931%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.9431%" y="581" width="0.0812%" height="15" fill="rgb(248,116,17)" fg:x="861" fg:w="1"/><text x="70.1931%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.9431%" y="565" width="0.0812%" height="15" fill="rgb(207,78,24)" fg:x="861" fg:w="1"/><text x="70.1931%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.0244%" y="661" width="0.0812%" height="15" fill="rgb(234,99,48)" fg:x="862" fg:w="1"/><text x="70.2744%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.0244%" y="645" width="0.0812%" height="15" fill="rgb(242,22,26)" fg:x="862" fg:w="1"/><text x="70.2744%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.1056%" y="661" width="0.0812%" height="15" fill="rgb(227,78,32)" fg:x="863" fg:w="1"/><text x="70.3556%" y="671.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.1868%" y="501" width="0.0812%" height="15" fill="rgb(226,189,43)" fg:x="864" fg:w="1"/><text x="70.4368%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="70.1868%" y="661" width="0.1625%" height="15" fill="rgb(227,218,35)" fg:x="864" fg:w="2"/><text x="70.4368%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.1868%" y="645" width="0.1625%" height="15" fill="rgb(206,111,40)" fg:x="864" fg:w="2"/><text x="70.4368%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.1868%" y="629" width="0.1625%" height="15" fill="rgb(208,217,22)" fg:x="864" fg:w="2"/><text x="70.4368%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="70.1868%" y="613" width="0.1625%" height="15" fill="rgb(248,20,20)" fg:x="864" fg:w="2"/><text x="70.4368%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.1868%" y="597" width="0.1625%" height="15" fill="rgb(239,155,16)" fg:x="864" fg:w="2"/><text x="70.4368%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.1868%" y="581" width="0.1625%" height="15" fill="rgb(238,171,46)" fg:x="864" fg:w="2"/><text x="70.4368%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.1868%" y="565" width="0.1625%" height="15" fill="rgb(248,11,36)" fg:x="864" fg:w="2"/><text x="70.4368%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.1868%" y="549" width="0.1625%" height="15" fill="rgb(220,148,37)" fg:x="864" fg:w="2"/><text x="70.4368%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.1868%" y="533" width="0.1625%" height="15" fill="rgb(218,144,42)" fg:x="864" fg:w="2"/><text x="70.4368%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.1868%" y="517" width="0.1625%" height="15" fill="rgb(245,20,20)" fg:x="864" fg:w="2"/><text x="70.4368%" y="527.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="70.2681%" y="501" width="0.0812%" height="15" fill="rgb(240,111,48)" fg:x="865" fg:w="1"/><text x="70.5181%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.2681%" y="485" width="0.0812%" height="15" fill="rgb(237,225,32)" fg:x="865" fg:w="1"/><text x="70.5181%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.65%)</title><rect x="69.7807%" y="693" width="0.6499%" height="15" fill="rgb(228,161,46)" fg:x="859" fg:w="8"/><text x="70.0307%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.41%)</title><rect x="70.0244%" y="677" width="0.4062%" height="15" fill="rgb(235,196,21)" fg:x="862" fg:w="5"/><text x="70.2744%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="70.3493%" y="661" width="0.0812%" height="15" fill="rgb(250,133,21)" fg:x="866" fg:w="1"/><text x="70.5993%" y="671.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="70.3493%" y="645" width="0.0812%" height="15" fill="rgb(236,94,32)" fg:x="866" fg:w="1"/><text x="70.5993%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.3493%" y="629" width="0.0812%" height="15" fill="rgb(219,176,25)" fg:x="866" fg:w="1"/><text x="70.5993%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3493%" y="613" width="0.0812%" height="15" fill="rgb(211,17,43)" fg:x="866" fg:w="1"/><text x="70.5993%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.3493%" y="597" width="0.0812%" height="15" fill="rgb(220,75,23)" fg:x="866" fg:w="1"/><text x="70.5993%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3493%" y="581" width="0.0812%" height="15" fill="rgb(215,122,32)" fg:x="866" fg:w="1"/><text x="70.5993%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.3493%" y="565" width="0.0812%" height="15" fill="rgb(218,57,38)" fg:x="866" fg:w="1"/><text x="70.5993%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3493%" y="549" width="0.0812%" height="15" fill="rgb(233,208,46)" fg:x="866" fg:w="1"/><text x="70.5993%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.3493%" y="533" width="0.0812%" height="15" fill="rgb(221,35,50)" fg:x="866" fg:w="1"/><text x="70.5993%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.3493%" y="517" width="0.0812%" height="15" fill="rgb(229,213,29)" fg:x="866" fg:w="1"/><text x="70.5993%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3493%" y="501" width="0.0812%" height="15" fill="rgb(229,110,40)" fg:x="866" fg:w="1"/><text x="70.5993%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.3493%" y="485" width="0.0812%" height="15" fill="rgb(247,206,19)" fg:x="866" fg:w="1"/><text x="70.5993%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="70.4305%" y="661" width="0.0812%" height="15" fill="rgb(216,229,45)" fg:x="867" fg:w="1"/><text x="70.6805%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.5118%" y="629" width="0.0812%" height="15" fill="rgb(205,184,31)" fg:x="868" fg:w="1"/><text x="70.7618%" y="639.50"></text></g><g><title>engine::users::model::username_to_key (3 samples, 0.24%)</title><rect x="70.4305%" y="693" width="0.2437%" height="15" fill="rgb(213,91,10)" fg:x="867" fg:w="3"/><text x="70.6805%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="70.4305%" y="677" width="0.2437%" height="15" fill="rgb(250,49,8)" fg:x="867" fg:w="3"/><text x="70.6805%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.5118%" y="661" width="0.1625%" height="15" fill="rgb(207,26,8)" fg:x="868" fg:w="2"/><text x="70.7618%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.5118%" y="645" width="0.1625%" height="15" fill="rgb(224,2,13)" fg:x="868" fg:w="2"/><text x="70.7618%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.5930%" y="629" width="0.0812%" height="15" fill="rgb(219,108,27)" fg:x="869" fg:w="1"/><text x="70.8430%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.5930%" y="613" width="0.0812%" height="15" fill="rgb(240,89,32)" fg:x="869" fg:w="1"/><text x="70.8430%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.5930%" y="597" width="0.0812%" height="15" fill="rgb(248,205,3)" fg:x="869" fg:w="1"/><text x="70.8430%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.5930%" y="581" width="0.0812%" height="15" fill="rgb(236,197,47)" fg:x="869" fg:w="1"/><text x="70.8430%" y="591.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="70.6742%" y="645" width="0.0812%" height="15" fill="rgb(244,185,52)" fg:x="870" fg:w="1"/><text x="70.9242%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.6742%" y="629" width="0.0812%" height="15" fill="rgb(210,206,23)" fg:x="870" fg:w="1"/><text x="70.9242%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.6742%" y="613" width="0.0812%" height="15" fill="rgb(251,177,30)" fg:x="870" fg:w="1"/><text x="70.9242%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.7555%" y="565" width="0.0812%" height="15" fill="rgb(243,27,45)" fg:x="871" fg:w="1"/><text x="71.0055%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.7555%" y="549" width="0.0812%" height="15" fill="rgb(248,141,51)" fg:x="871" fg:w="1"/><text x="71.0055%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.8367%" y="549" width="0.0812%" height="15" fill="rgb(235,102,15)" fg:x="872" fg:w="1"/><text x="71.0867%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.8367%" y="533" width="0.0812%" height="15" fill="rgb(214,164,53)" fg:x="872" fg:w="1"/><text x="71.0867%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.8367%" y="517" width="0.0812%" height="15" fill="rgb(228,18,51)" fg:x="872" fg:w="1"/><text x="71.0867%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.8367%" y="501" width="0.0812%" height="15" fill="rgb(205,211,11)" fg:x="872" fg:w="1"/><text x="71.0867%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.8367%" y="485" width="0.0812%" height="15" fill="rgb(208,63,6)" fg:x="872" fg:w="1"/><text x="71.0867%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="70.7555%" y="645" width="0.2437%" height="15" fill="rgb(245,76,14)" fg:x="871" fg:w="3"/><text x="71.0055%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="70.7555%" y="629" width="0.2437%" height="15" fill="rgb(234,176,34)" fg:x="871" fg:w="3"/><text x="71.0055%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="70.7555%" y="613" width="0.2437%" height="15" fill="rgb(243,156,42)" fg:x="871" fg:w="3"/><text x="71.0055%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="70.7555%" y="597" width="0.2437%" height="15" fill="rgb(237,182,10)" fg:x="871" fg:w="3"/><text x="71.0055%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="70.7555%" y="581" width="0.2437%" height="15" fill="rgb(244,117,0)" fg:x="871" fg:w="3"/><text x="71.0055%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.8367%" y="565" width="0.1625%" height="15" fill="rgb(239,91,50)" fg:x="872" fg:w="2"/><text x="71.0867%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9180%" y="549" width="0.0812%" height="15" fill="rgb(206,38,9)" fg:x="873" fg:w="1"/><text x="71.1680%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.9180%" y="533" width="0.0812%" height="15" fill="rgb(205,25,10)" fg:x="873" fg:w="1"/><text x="71.1680%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.9180%" y="517" width="0.0812%" height="15" fill="rgb(206,224,7)" fg:x="873" fg:w="1"/><text x="71.1680%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.9180%" y="501" width="0.0812%" height="15" fill="rgb(227,157,10)" fg:x="873" fg:w="1"/><text x="71.1680%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9180%" y="485" width="0.0812%" height="15" fill="rgb(214,157,37)" fg:x="873" fg:w="1"/><text x="71.1680%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.9992%" y="581" width="0.0812%" height="15" fill="rgb(209,180,35)" fg:x="874" fg:w="1"/><text x="71.2492%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.9992%" y="565" width="0.0812%" height="15" fill="rgb(216,174,49)" fg:x="874" fg:w="1"/><text x="71.2492%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.9992%" y="549" width="0.0812%" height="15" fill="rgb(205,96,20)" fg:x="874" fg:w="1"/><text x="71.2492%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9992%" y="533" width="0.0812%" height="15" fill="rgb(214,220,39)" fg:x="874" fg:w="1"/><text x="71.2492%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (876 samples, 71.16%)</title><rect x="0.0000%" y="773" width="71.1617%" height="15" fill="rgb(245,126,30)" fg:x="0" fg:w="876"/><text x="0.2500%" y="783.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (876 samples, 71.16%)</title><rect x="0.0000%" y="757" width="71.1617%" height="15" fill="rgb(215,88,33)" fg:x="0" fg:w="876"/><text x="0.2500%" y="767.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (876 samples, 71.16%)</title><rect x="0.0000%" y="741" width="71.1617%" height="15" fill="rgb(210,1,49)" fg:x="0" fg:w="876"/><text x="0.2500%" y="751.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (602 samples, 48.90%)</title><rect x="22.2583%" y="725" width="48.9033%" height="15" fill="rgb(207,133,3)" fg:x="274" fg:w="602"/><text x="22.5083%" y="735.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (602 samples, 48.90%)</title><rect x="22.2583%" y="709" width="48.9033%" height="15" fill="rgb(231,47,43)" fg:x="274" fg:w="602"/><text x="22.5083%" y="719.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (6 samples, 0.49%)</title><rect x="70.6742%" y="693" width="0.4874%" height="15" fill="rgb(245,64,1)" fg:x="870" fg:w="6"/><text x="70.9242%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.49%)</title><rect x="70.6742%" y="677" width="0.4874%" height="15" fill="rgb(253,145,20)" fg:x="870" fg:w="6"/><text x="70.9242%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="70.6742%" y="661" width="0.4874%" height="15" fill="rgb(211,39,18)" fg:x="870" fg:w="6"/><text x="70.9242%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="70.9992%" y="645" width="0.1625%" height="15" fill="rgb(223,225,18)" fg:x="874" fg:w="2"/><text x="71.2492%" y="655.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="70.9992%" y="629" width="0.1625%" height="15" fill="rgb(210,202,44)" fg:x="874" fg:w="2"/><text x="71.2492%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.9992%" y="613" width="0.1625%" height="15" fill="rgb(231,138,36)" fg:x="874" fg:w="2"/><text x="71.2492%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.9992%" y="597" width="0.1625%" height="15" fill="rgb(237,115,25)" fg:x="874" fg:w="2"/><text x="71.2492%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.0804%" y="581" width="0.0812%" height="15" fill="rgb(215,53,48)" fg:x="875" fg:w="1"/><text x="71.3304%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.0804%" y="565" width="0.0812%" height="15" fill="rgb(243,193,24)" fg:x="875" fg:w="1"/><text x="71.3304%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0804%" y="549" width="0.0812%" height="15" fill="rgb(210,106,28)" fg:x="875" fg:w="1"/><text x="71.3304%" y="559.50"></text></g><g><title>&lt;engine::session::Session as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.1617%" y="709" width="0.0812%" height="15" fill="rgb(249,192,0)" fg:x="876" fg:w="1"/><text x="71.4117%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.2429%" y="645" width="0.0812%" height="15" fill="rgb(224,96,21)" fg:x="877" fg:w="1"/><text x="71.4929%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="71.2429%" y="709" width="0.2437%" height="15" fill="rgb(243,160,19)" fg:x="877" fg:w="3"/><text x="71.4929%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="71.2429%" y="693" width="0.2437%" height="15" fill="rgb(219,205,50)" fg:x="877" fg:w="3"/><text x="71.4929%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="71.2429%" y="677" width="0.2437%" height="15" fill="rgb(218,175,44)" fg:x="877" fg:w="3"/><text x="71.4929%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.24%)</title><rect x="71.2429%" y="661" width="0.2437%" height="15" fill="rgb(251,84,47)" fg:x="877" fg:w="3"/><text x="71.4929%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="71.3241%" y="645" width="0.1625%" height="15" fill="rgb(241,14,16)" fg:x="878" fg:w="2"/><text x="71.5741%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.4054%" y="629" width="0.0812%" height="15" fill="rgb(207,142,28)" fg:x="879" fg:w="1"/><text x="71.6554%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.5678%" y="597" width="0.0812%" height="15" fill="rgb(208,116,22)" fg:x="881" fg:w="1"/><text x="71.8178%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="71.4866%" y="645" width="0.2437%" height="15" fill="rgb(210,0,43)" fg:x="880" fg:w="3"/><text x="71.7366%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (2 samples, 0.16%)</title><rect x="71.5678%" y="629" width="0.1625%" height="15" fill="rgb(246,33,21)" fg:x="881" fg:w="2"/><text x="71.8178%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="71.5678%" y="613" width="0.1625%" height="15" fill="rgb(208,158,54)" fg:x="881" fg:w="2"/><text x="71.8178%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.6491%" y="597" width="0.0812%" height="15" fill="rgb(218,99,29)" fg:x="882" fg:w="1"/><text x="71.8991%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.6491%" y="581" width="0.0812%" height="15" fill="rgb(226,29,7)" fg:x="882" fg:w="1"/><text x="71.8991%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.6491%" y="565" width="0.0812%" height="15" fill="rgb(206,178,46)" fg:x="882" fg:w="1"/><text x="71.8991%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.6491%" y="549" width="0.0812%" height="15" fill="rgb(205,169,32)" fg:x="882" fg:w="1"/><text x="71.8991%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.7303%" y="629" width="0.0812%" height="15" fill="rgb(217,4,13)" fg:x="883" fg:w="1"/><text x="71.9803%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.8928%" y="581" width="0.0812%" height="15" fill="rgb(210,140,37)" fg:x="885" fg:w="1"/><text x="72.1428%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.9740%" y="565" width="0.0812%" height="15" fill="rgb(229,80,10)" fg:x="886" fg:w="1"/><text x="72.2240%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.9740%" y="549" width="0.0812%" height="15" fill="rgb(212,175,34)" fg:x="886" fg:w="1"/><text x="72.2240%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.41%)</title><rect x="71.7303%" y="645" width="0.4062%" height="15" fill="rgb(216,207,24)" fg:x="883" fg:w="5"/><text x="71.9803%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="71.8115%" y="629" width="0.3249%" height="15" fill="rgb(234,163,3)" fg:x="884" fg:w="4"/><text x="72.0615%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="71.8928%" y="613" width="0.2437%" height="15" fill="rgb(248,101,16)" fg:x="885" fg:w="3"/><text x="72.1428%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="71.8928%" y="597" width="0.2437%" height="15" fill="rgb(209,152,54)" fg:x="885" fg:w="3"/><text x="72.1428%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.9740%" y="581" width="0.1625%" height="15" fill="rgb(229,124,51)" fg:x="886" fg:w="2"/><text x="72.2240%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.0552%" y="565" width="0.0812%" height="15" fill="rgb(219,83,18)" fg:x="887" fg:w="1"/><text x="72.3052%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="71.4866%" y="661" width="0.7311%" height="15" fill="rgb(206,29,38)" fg:x="880" fg:w="9"/><text x="71.7366%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;kernel::model::entity_ref::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="72.1365%" y="645" width="0.0812%" height="15" fill="rgb(245,123,23)" fg:x="888" fg:w="1"/><text x="72.3865%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.81%)</title><rect x="71.4866%" y="693" width="0.8123%" height="15" fill="rgb(238,50,33)" fg:x="880" fg:w="10"/><text x="71.7366%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (10 samples, 0.81%)</title><rect x="71.4866%" y="677" width="0.8123%" height="15" fill="rgb(234,165,23)" fg:x="880" fg:w="10"/><text x="71.7366%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2177%" y="661" width="0.0812%" height="15" fill="rgb(211,82,31)" fg:x="889" fg:w="1"/><text x="72.4677%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.22%)</title><rect x="71.1617%" y="725" width="1.2185%" height="15" fill="rgb(224,166,46)" fg:x="876" fg:w="15"/><text x="71.4117%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (11 samples, 0.89%)</title><rect x="71.4866%" y="709" width="0.8936%" height="15" fill="rgb(211,13,8)" fg:x="880" fg:w="11"/><text x="71.7366%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2989%" y="693" width="0.0812%" height="15" fill="rgb(212,7,42)" fg:x="890" fg:w="1"/><text x="72.5489%" y="703.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="72.3802%" y="597" width="0.0812%" height="15" fill="rgb(249,102,19)" fg:x="891" fg:w="1"/><text x="72.6302%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="72.3802%" y="581" width="0.0812%" height="15" fill="rgb(225,41,13)" fg:x="891" fg:w="1"/><text x="72.6302%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.3802%" y="565" width="0.0812%" height="15" fill="rgb(220,65,27)" fg:x="891" fg:w="1"/><text x="72.6302%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.3802%" y="549" width="0.0812%" height="15" fill="rgb(206,4,41)" fg:x="891" fg:w="1"/><text x="72.6302%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3802%" y="533" width="0.0812%" height="15" fill="rgb(219,60,39)" fg:x="891" fg:w="1"/><text x="72.6302%" y="543.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="72.3802%" y="629" width="0.1625%" height="15" fill="rgb(226,4,38)" fg:x="891" fg:w="2"/><text x="72.6302%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="72.3802%" y="613" width="0.1625%" height="15" fill="rgb(250,52,3)" fg:x="891" fg:w="2"/><text x="72.6302%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="72.4614%" y="597" width="0.0812%" height="15" fill="rgb(234,93,0)" fg:x="892" fg:w="1"/><text x="72.7114%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4614%" y="581" width="0.0812%" height="15" fill="rgb(251,47,47)" fg:x="892" fg:w="1"/><text x="72.7114%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::actions::DeactivateRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="72.5426%" y="597" width="0.0812%" height="15" fill="rgb(205,166,47)" fg:x="893" fg:w="1"/><text x="72.7926%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="72.5426%" y="581" width="0.0812%" height="15" fill="rgb(231,148,8)" fg:x="893" fg:w="1"/><text x="72.7926%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="72.6239%" y="597" width="0.0812%" height="15" fill="rgb(244,185,19)" fg:x="894" fg:w="1"/><text x="72.8739%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="72.5426%" y="629" width="0.2437%" height="15" fill="rgb(224,201,45)" fg:x="893" fg:w="3"/><text x="72.7926%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="72.5426%" y="613" width="0.2437%" height="15" fill="rgb(240,77,39)" fg:x="893" fg:w="3"/><text x="72.7926%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="72.7051%" y="597" width="0.0812%" height="15" fill="rgb(248,211,29)" fg:x="895" fg:w="1"/><text x="72.9551%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.7051%" y="581" width="0.0812%" height="15" fill="rgb(232,214,46)" fg:x="895" fg:w="1"/><text x="72.9551%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="72.7051%" y="565" width="0.0812%" height="15" fill="rgb(213,99,54)" fg:x="895" fg:w="1"/><text x="72.9551%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.7051%" y="549" width="0.0812%" height="15" fill="rgb(240,19,46)" fg:x="895" fg:w="1"/><text x="72.9551%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7051%" y="533" width="0.0812%" height="15" fill="rgb(243,89,10)" fg:x="895" fg:w="1"/><text x="72.9551%" y="543.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (6 samples, 0.49%)</title><rect x="72.3802%" y="645" width="0.4874%" height="15" fill="rgb(249,28,32)" fg:x="891" fg:w="6"/><text x="72.6302%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7864%" y="629" width="0.0812%" height="15" fill="rgb(253,30,9)" fg:x="896" fg:w="1"/><text x="73.0364%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (2 samples, 0.16%)</title><rect x="72.8676%" y="645" width="0.1625%" height="15" fill="rgb(217,2,26)" fg:x="897" fg:w="2"/><text x="73.1176%" y="655.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="72.9488%" y="629" width="0.0812%" height="15" fill="rgb(220,28,10)" fg:x="898" fg:w="1"/><text x="73.1988%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="72.9488%" y="613" width="0.0812%" height="15" fill="rgb(228,167,49)" fg:x="898" fg:w="1"/><text x="73.1988%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="72.9488%" y="597" width="0.0812%" height="15" fill="rgb(238,212,3)" fg:x="898" fg:w="1"/><text x="73.1988%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="72.9488%" y="581" width="0.0812%" height="15" fill="rgb(229,134,44)" fg:x="898" fg:w="1"/><text x="73.1988%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="72.9488%" y="565" width="0.0812%" height="15" fill="rgb(208,71,4)" fg:x="898" fg:w="1"/><text x="73.1988%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="72.9488%" y="549" width="0.0812%" height="15" fill="rgb(221,205,45)" fg:x="898" fg:w="1"/><text x="73.1988%" y="559.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="72.9488%" y="533" width="0.0812%" height="15" fill="rgb(215,132,38)" fg:x="898" fg:w="1"/><text x="73.1988%" y="543.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (1 samples, 0.08%)</title><rect x="73.0301%" y="629" width="0.0812%" height="15" fill="rgb(227,158,6)" fg:x="899" fg:w="1"/><text x="73.2801%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0301%" y="613" width="0.0812%" height="15" fill="rgb(250,10,38)" fg:x="899" fg:w="1"/><text x="73.2801%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0301%" y="597" width="0.0812%" height="15" fill="rgb(225,171,40)" fg:x="899" fg:w="1"/><text x="73.2801%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0301%" y="581" width="0.0812%" height="15" fill="rgb(238,17,43)" fg:x="899" fg:w="1"/><text x="73.2801%" y="591.50"></text></g><g><title>glob::is_dir (3 samples, 0.24%)</title><rect x="73.1113%" y="581" width="0.2437%" height="15" fill="rgb(208,145,4)" fg:x="900" fg:w="3"/><text x="73.3613%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="73.1113%" y="565" width="0.2437%" height="15" fill="rgb(232,82,7)" fg:x="900" fg:w="3"/><text x="73.3613%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="73.1113%" y="549" width="0.2437%" height="15" fill="rgb(205,166,38)" fg:x="900" fg:w="3"/><text x="73.3613%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="73.1113%" y="533" width="0.2437%" height="15" fill="rgb(240,228,4)" fg:x="900" fg:w="3"/><text x="73.3613%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="73.1113%" y="517" width="0.2437%" height="15" fill="rgb(233,121,40)" fg:x="900" fg:w="3"/><text x="73.3613%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="73.1113%" y="501" width="0.2437%" height="15" fill="rgb(243,84,30)" fg:x="900" fg:w="3"/><text x="73.3613%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="73.1113%" y="485" width="0.2437%" height="15" fill="rgb(235,81,48)" fg:x="900" fg:w="3"/><text x="73.3613%" y="495.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="73.1113%" y="469" width="0.2437%" height="15" fill="rgb(218,137,0)" fg:x="900" fg:w="3"/><text x="73.3613%" y="479.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="73.1113%" y="613" width="0.3249%" height="15" fill="rgb(223,151,48)" fg:x="900" fg:w="4"/><text x="73.3613%" y="623.50"></text></g><g><title>glob::fill_todo (4 samples, 0.32%)</title><rect x="73.1113%" y="597" width="0.3249%" height="15" fill="rgb(247,30,19)" fg:x="900" fg:w="4"/><text x="73.3613%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="73.3550%" y="581" width="0.0812%" height="15" fill="rgb(205,129,29)" fg:x="903" fg:w="1"/><text x="73.6050%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="73.3550%" y="565" width="0.0812%" height="15" fill="rgb(222,29,2)" fg:x="903" fg:w="1"/><text x="73.6050%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="73.3550%" y="549" width="0.0812%" height="15" fill="rgb(232,145,33)" fg:x="903" fg:w="1"/><text x="73.6050%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="73.3550%" y="533" width="0.0812%" height="15" fill="rgb(217,30,31)" fg:x="903" fg:w="1"/><text x="73.6050%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="73.3550%" y="517" width="0.0812%" height="15" fill="rgb(243,22,52)" fg:x="903" fg:w="1"/><text x="73.6050%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="73.3550%" y="501" width="0.0812%" height="15" fill="rgb(254,228,14)" fg:x="903" fg:w="1"/><text x="73.6050%" y="511.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="73.3550%" y="485" width="0.0812%" height="15" fill="rgb(231,45,50)" fg:x="903" fg:w="1"/><text x="73.6050%" y="495.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (14 samples, 1.14%)</title><rect x="72.3802%" y="661" width="1.1373%" height="15" fill="rgb(248,125,3)" fg:x="891" fg:w="14"/><text x="72.6302%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.49%)</title><rect x="73.0301%" y="645" width="0.4874%" height="15" fill="rgb(213,76,9)" fg:x="899" fg:w="6"/><text x="73.2801%" y="655.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (5 samples, 0.41%)</title><rect x="73.1113%" y="629" width="0.4062%" height="15" fill="rgb(238,108,21)" fg:x="900" fg:w="5"/><text x="73.3613%" y="639.50"></text></g><g><title>glob::glob (1 samples, 0.08%)</title><rect x="73.4362%" y="613" width="0.0812%" height="15" fill="rgb(229,214,19)" fg:x="904" fg:w="1"/><text x="73.6862%" y="623.50"></text></g><g><title>glob::glob_with (1 samples, 0.08%)</title><rect x="73.4362%" y="597" width="0.0812%" height="15" fill="rgb(252,201,5)" fg:x="904" fg:w="1"/><text x="73.6862%" y="607.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="73.4362%" y="581" width="0.0812%" height="15" fill="rgb(233,165,49)" fg:x="904" fg:w="1"/><text x="73.6862%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.4362%" y="565" width="0.0812%" height="15" fill="rgb(208,165,19)" fg:x="904" fg:w="1"/><text x="73.6862%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.4362%" y="549" width="0.0812%" height="15" fill="rgb(216,220,31)" fg:x="904" fg:w="1"/><text x="73.6862%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.5175%" y="629" width="0.0812%" height="15" fill="rgb(214,8,31)" fg:x="905" fg:w="1"/><text x="73.7675%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (16 samples, 1.30%)</title><rect x="72.3802%" y="725" width="1.2998%" height="15" fill="rgb(220,32,32)" fg:x="891" fg:w="16"/><text x="72.6302%" y="735.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (16 samples, 1.30%)</title><rect x="72.3802%" y="709" width="1.2998%" height="15" fill="rgb(237,172,34)" fg:x="891" fg:w="16"/><text x="72.6302%" y="719.50"></text></g><g><title>engine::session::Session::new (16 samples, 1.30%)</title><rect x="72.3802%" y="693" width="1.2998%" height="15" fill="rgb(240,209,5)" fg:x="891" fg:w="16"/><text x="72.6302%" y="703.50"></text></g><g><title>engine::session::Session::initialize (16 samples, 1.30%)</title><rect x="72.3802%" y="677" width="1.2998%" height="15" fill="rgb(221,219,1)" fg:x="891" fg:w="16"/><text x="72.6302%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="73.5175%" y="661" width="0.1625%" height="15" fill="rgb(237,90,36)" fg:x="905" fg:w="2"/><text x="73.7675%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="73.5175%" y="645" width="0.1625%" height="15" fill="rgb(245,14,51)" fg:x="905" fg:w="2"/><text x="73.7675%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.5987%" y="629" width="0.0812%" height="15" fill="rgb(211,71,49)" fg:x="906" fg:w="1"/><text x="73.8487%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.5987%" y="613" width="0.0812%" height="15" fill="rgb(230,223,9)" fg:x="906" fg:w="1"/><text x="73.8487%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.5987%" y="597" width="0.0812%" height="15" fill="rgb(212,33,31)" fg:x="906" fg:w="1"/><text x="73.8487%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="73.7612%" y="613" width="0.1625%" height="15" fill="rgb(218,141,5)" fg:x="908" fg:w="2"/><text x="74.0112%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.7612%" y="597" width="0.1625%" height="15" fill="rgb(239,194,8)" fg:x="908" fg:w="2"/><text x="74.0112%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.7612%" y="581" width="0.1625%" height="15" fill="rgb(225,119,29)" fg:x="908" fg:w="2"/><text x="74.0112%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.7612%" y="565" width="0.1625%" height="15" fill="rgb(233,32,3)" fg:x="908" fg:w="2"/><text x="74.0112%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.7612%" y="549" width="0.1625%" height="15" fill="rgb(248,126,40)" fg:x="908" fg:w="2"/><text x="74.0112%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="73.7612%" y="533" width="0.1625%" height="15" fill="rgb(213,102,53)" fg:x="908" fg:w="2"/><text x="74.0112%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="73.9236%" y="581" width="0.1625%" height="15" fill="rgb(212,69,15)" fg:x="910" fg:w="2"/><text x="74.1736%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="73.9236%" y="613" width="0.2437%" height="15" fill="rgb(253,39,34)" fg:x="910" fg:w="3"/><text x="74.1736%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="73.9236%" y="597" width="0.2437%" height="15" fill="rgb(205,189,54)" fg:x="910" fg:w="3"/><text x="74.1736%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0861%" y="581" width="0.0812%" height="15" fill="rgb(234,229,45)" fg:x="912" fg:w="1"/><text x="74.3361%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0861%" y="565" width="0.0812%" height="15" fill="rgb(243,79,48)" fg:x="912" fg:w="1"/><text x="74.3361%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0861%" y="549" width="0.0812%" height="15" fill="rgb(206,71,50)" fg:x="912" fg:w="1"/><text x="74.3361%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.0861%" y="533" width="0.0812%" height="15" fill="rgb(209,32,17)" fg:x="912" fg:w="1"/><text x="74.3361%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="74.1673%" y="565" width="0.1625%" height="15" fill="rgb(219,229,6)" fg:x="913" fg:w="2"/><text x="74.4173%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="74.2486%" y="549" width="0.0812%" height="15" fill="rgb(226,25,27)" fg:x="914" fg:w="1"/><text x="74.4986%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="74.3298%" y="565" width="0.0812%" height="15" fill="rgb(218,185,23)" fg:x="915" fg:w="1"/><text x="74.5798%" y="575.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.81%)</title><rect x="73.6799%" y="709" width="0.8123%" height="15" fill="rgb(242,123,5)" fg:x="907" fg:w="10"/><text x="73.9299%" y="719.50"></text></g><g><title>engine::session::state::State::close (10 samples, 0.81%)</title><rect x="73.6799%" y="693" width="0.8123%" height="15" fill="rgb(215,53,19)" fg:x="907" fg:w="10"/><text x="73.9299%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (10 samples, 0.81%)</title><rect x="73.6799%" y="677" width="0.8123%" height="15" fill="rgb(233,20,30)" fg:x="907" fg:w="10"/><text x="73.9299%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (10 samples, 0.81%)</title><rect x="73.6799%" y="661" width="0.8123%" height="15" fill="rgb(209,67,20)" fg:x="907" fg:w="10"/><text x="73.9299%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.81%)</title><rect x="73.6799%" y="645" width="0.8123%" height="15" fill="rgb(227,181,50)" fg:x="907" fg:w="10"/><text x="73.9299%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (10 samples, 0.81%)</title><rect x="73.6799%" y="629" width="0.8123%" height="15" fill="rgb(252,75,38)" fg:x="907" fg:w="10"/><text x="73.9299%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="74.1673%" y="613" width="0.3249%" height="15" fill="rgb(235,9,33)" fg:x="913" fg:w="4"/><text x="74.4173%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="74.1673%" y="597" width="0.3249%" height="15" fill="rgb(208,87,30)" fg:x="913" fg:w="4"/><text x="74.4173%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="74.1673%" y="581" width="0.3249%" height="15" fill="rgb(215,199,39)" fg:x="913" fg:w="4"/><text x="74.4173%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="74.4110%" y="565" width="0.0812%" height="15" fill="rgb(246,208,12)" fg:x="916" fg:w="1"/><text x="74.6610%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="74.4110%" y="549" width="0.0812%" height="15" fill="rgb(206,195,10)" fg:x="916" fg:w="1"/><text x="74.6610%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.4110%" y="533" width="0.0812%" height="15" fill="rgb(244,1,30)" fg:x="916" fg:w="1"/><text x="74.6610%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4110%" y="517" width="0.0812%" height="15" fill="rgb(230,83,5)" fg:x="916" fg:w="1"/><text x="74.6610%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4110%" y="501" width="0.0812%" height="15" fill="rgb(239,62,17)" fg:x="916" fg:w="1"/><text x="74.6610%" y="511.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.4923%" y="693" width="0.0812%" height="15" fill="rgb(252,193,41)" fg:x="917" fg:w="1"/><text x="74.7423%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.4923%" y="677" width="0.0812%" height="15" fill="rgb(216,142,19)" fg:x="917" fg:w="1"/><text x="74.7423%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.4923%" y="661" width="0.0812%" height="15" fill="rgb(240,81,38)" fg:x="917" fg:w="1"/><text x="74.7423%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.4923%" y="645" width="0.0812%" height="15" fill="rgb(240,109,40)" fg:x="917" fg:w="1"/><text x="74.7423%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.4923%" y="629" width="0.0812%" height="15" fill="rgb(230,123,10)" fg:x="917" fg:w="1"/><text x="74.7423%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.4923%" y="613" width="0.0812%" height="15" fill="rgb(253,42,32)" fg:x="917" fg:w="1"/><text x="74.7423%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.4923%" y="597" width="0.0812%" height="15" fill="rgb(218,154,8)" fg:x="917" fg:w="1"/><text x="74.7423%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.4923%" y="581" width="0.0812%" height="15" fill="rgb(216,197,10)" fg:x="917" fg:w="1"/><text x="74.7423%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="74.4923%" y="565" width="0.0812%" height="15" fill="rgb(223,107,12)" fg:x="917" fg:w="1"/><text x="74.7423%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="74.4923%" y="549" width="0.0812%" height="15" fill="rgb(241,174,42)" fg:x="917" fg:w="1"/><text x="74.7423%" y="559.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="74.5735%" y="677" width="0.0812%" height="15" fill="rgb(231,78,20)" fg:x="918" fg:w="1"/><text x="74.8235%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="74.5735%" y="661" width="0.0812%" height="15" fill="rgb(230,208,49)" fg:x="918" fg:w="1"/><text x="74.8235%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.5735%" y="645" width="0.0812%" height="15" fill="rgb(238,11,34)" fg:x="918" fg:w="1"/><text x="74.8235%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.6548%" y="549" width="0.0812%" height="15" fill="rgb(210,130,26)" fg:x="919" fg:w="1"/><text x="74.9048%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="74.5735%" y="693" width="0.3249%" height="15" fill="rgb(242,131,11)" fg:x="918" fg:w="4"/><text x="74.8235%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="74.6548%" y="677" width="0.2437%" height="15" fill="rgb(237,38,28)" fg:x="919" fg:w="3"/><text x="74.9048%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="74.6548%" y="661" width="0.2437%" height="15" fill="rgb(244,180,43)" fg:x="919" fg:w="3"/><text x="74.9048%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="74.6548%" y="645" width="0.2437%" height="15" fill="rgb(214,171,19)" fg:x="919" fg:w="3"/><text x="74.9048%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="74.6548%" y="629" width="0.2437%" height="15" fill="rgb(252,101,45)" fg:x="919" fg:w="3"/><text x="74.9048%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="74.6548%" y="613" width="0.2437%" height="15" fill="rgb(211,96,33)" fg:x="919" fg:w="3"/><text x="74.9048%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="74.6548%" y="597" width="0.2437%" height="15" fill="rgb(207,80,25)" fg:x="919" fg:w="3"/><text x="74.9048%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="74.6548%" y="581" width="0.2437%" height="15" fill="rgb(225,15,35)" fg:x="919" fg:w="3"/><text x="74.9048%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="74.6548%" y="565" width="0.2437%" height="15" fill="rgb(214,93,43)" fg:x="919" fg:w="3"/><text x="74.9048%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="74.7360%" y="549" width="0.1625%" height="15" fill="rgb(248,42,37)" fg:x="920" fg:w="2"/><text x="74.9860%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="74.7360%" y="533" width="0.1625%" height="15" fill="rgb(217,135,32)" fg:x="920" fg:w="2"/><text x="74.9860%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.8172%" y="517" width="0.0812%" height="15" fill="rgb(216,74,28)" fg:x="921" fg:w="1"/><text x="75.0672%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.8172%" y="501" width="0.0812%" height="15" fill="rgb(247,108,16)" fg:x="921" fg:w="1"/><text x="75.0672%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.49%)</title><rect x="74.4923%" y="709" width="0.4874%" height="15" fill="rgb(205,219,30)" fg:x="917" fg:w="6"/><text x="74.7423%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8985%" y="693" width="0.0812%" height="15" fill="rgb(241,122,9)" fg:x="922" fg:w="1"/><text x="75.1485%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8985%" y="677" width="0.0812%" height="15" fill="rgb(216,148,50)" fg:x="922" fg:w="1"/><text x="75.1485%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8985%" y="661" width="0.0812%" height="15" fill="rgb(226,154,2)" fg:x="922" fg:w="1"/><text x="75.1485%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8985%" y="645" width="0.0812%" height="15" fill="rgb(220,128,1)" fg:x="922" fg:w="1"/><text x="75.1485%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.8985%" y="629" width="0.0812%" height="15" fill="rgb(245,185,29)" fg:x="922" fg:w="1"/><text x="75.1485%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.8985%" y="613" width="0.0812%" height="15" fill="rgb(243,161,2)" fg:x="922" fg:w="1"/><text x="75.1485%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.8985%" y="597" width="0.0812%" height="15" fill="rgb(249,215,17)" fg:x="922" fg:w="1"/><text x="75.1485%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.8985%" y="581" width="0.0812%" height="15" fill="rgb(237,67,11)" fg:x="922" fg:w="1"/><text x="75.1485%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.8985%" y="565" width="0.0812%" height="15" fill="rgb(239,17,24)" fg:x="922" fg:w="1"/><text x="75.1485%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.8985%" y="549" width="0.0812%" height="15" fill="rgb(215,97,29)" fg:x="922" fg:w="1"/><text x="75.1485%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.8985%" y="533" width="0.0812%" height="15" fill="rgb(253,228,42)" fg:x="922" fg:w="1"/><text x="75.1485%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.8985%" y="517" width="0.0812%" height="15" fill="rgb(240,85,2)" fg:x="922" fg:w="1"/><text x="75.1485%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.8985%" y="501" width="0.0812%" height="15" fill="rgb(214,155,4)" fg:x="922" fg:w="1"/><text x="75.1485%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="74.9797%" y="709" width="0.0812%" height="15" fill="rgb(247,120,22)" fg:x="923" fg:w="1"/><text x="75.2297%" y="719.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="74.9797%" y="693" width="0.0812%" height="15" fill="rgb(211,208,6)" fg:x="923" fg:w="1"/><text x="75.2297%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="74.9797%" y="677" width="0.0812%" height="15" fill="rgb(235,99,41)" fg:x="923" fg:w="1"/><text x="75.2297%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9797%" y="661" width="0.0812%" height="15" fill="rgb(223,28,8)" fg:x="923" fg:w="1"/><text x="75.2297%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.9797%" y="645" width="0.0812%" height="15" fill="rgb(212,71,20)" fg:x="923" fg:w="1"/><text x="75.2297%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9797%" y="629" width="0.0812%" height="15" fill="rgb(206,85,3)" fg:x="923" fg:w="1"/><text x="75.2297%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.9797%" y="613" width="0.0812%" height="15" fill="rgb(244,180,11)" fg:x="923" fg:w="1"/><text x="75.2297%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="75.0609%" y="709" width="0.0812%" height="15" fill="rgb(223,16,21)" fg:x="924" fg:w="1"/><text x="75.3109%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="75.0609%" y="693" width="0.0812%" height="15" fill="rgb(238,85,42)" fg:x="924" fg:w="1"/><text x="75.3109%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="75.0609%" y="677" width="0.0812%" height="15" fill="rgb(205,85,8)" fg:x="924" fg:w="1"/><text x="75.3109%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.0609%" y="661" width="0.0812%" height="15" fill="rgb(217,190,15)" fg:x="924" fg:w="1"/><text x="75.3109%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.0609%" y="645" width="0.0812%" height="15" fill="rgb(243,192,23)" fg:x="924" fg:w="1"/><text x="75.3109%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.0609%" y="629" width="0.0812%" height="15" fill="rgb(223,220,37)" fg:x="924" fg:w="1"/><text x="75.3109%" y="639.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="75.0609%" y="613" width="0.0812%" height="15" fill="rgb(208,41,17)" fg:x="924" fg:w="1"/><text x="75.3109%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="75.0609%" y="597" width="0.0812%" height="15" fill="rgb(224,188,7)" fg:x="924" fg:w="1"/><text x="75.3109%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="75.1422%" y="693" width="0.0812%" height="15" fill="rgb(236,16,50)" fg:x="925" fg:w="1"/><text x="75.3922%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="75.1422%" y="677" width="0.0812%" height="15" fill="rgb(238,6,24)" fg:x="925" fg:w="1"/><text x="75.3922%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.1422%" y="661" width="0.0812%" height="15" fill="rgb(253,67,45)" fg:x="925" fg:w="1"/><text x="75.3922%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.1422%" y="645" width="0.0812%" height="15" fill="rgb(210,89,32)" fg:x="925" fg:w="1"/><text x="75.3922%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="75.2234%" y="677" width="0.0812%" height="15" fill="rgb(208,89,9)" fg:x="926" fg:w="1"/><text x="75.4734%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.2234%" y="661" width="0.0812%" height="15" fill="rgb(222,180,44)" fg:x="926" fg:w="1"/><text x="75.4734%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.2234%" y="645" width="0.0812%" height="15" fill="rgb(250,181,46)" fg:x="926" fg:w="1"/><text x="75.4734%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.2234%" y="629" width="0.0812%" height="15" fill="rgb(210,190,26)" fg:x="926" fg:w="1"/><text x="75.4734%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.2234%" y="613" width="0.0812%" height="15" fill="rgb(253,49,13)" fg:x="926" fg:w="1"/><text x="75.4734%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.2234%" y="597" width="0.0812%" height="15" fill="rgb(240,184,42)" fg:x="926" fg:w="1"/><text x="75.4734%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.2234%" y="581" width="0.0812%" height="15" fill="rgb(246,59,37)" fg:x="926" fg:w="1"/><text x="75.4734%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.2234%" y="565" width="0.0812%" height="15" fill="rgb(207,134,54)" fg:x="926" fg:w="1"/><text x="75.4734%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.2234%" y="549" width="0.0812%" height="15" fill="rgb(250,122,24)" fg:x="926" fg:w="1"/><text x="75.4734%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.2234%" y="533" width="0.0812%" height="15" fill="rgb(239,206,3)" fg:x="926" fg:w="1"/><text x="75.4734%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.2234%" y="517" width="0.0812%" height="15" fill="rgb(253,220,32)" fg:x="926" fg:w="1"/><text x="75.4734%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.2234%" y="501" width="0.0812%" height="15" fill="rgb(209,217,48)" fg:x="926" fg:w="1"/><text x="75.4734%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2234%" y="485" width="0.0812%" height="15" fill="rgb(242,91,39)" fg:x="926" fg:w="1"/><text x="75.4734%" y="495.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="75.3046%" y="661" width="0.0812%" height="15" fill="rgb(228,4,13)" fg:x="927" fg:w="1"/><text x="75.5546%" y="671.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="75.3046%" y="645" width="0.0812%" height="15" fill="rgb(223,133,4)" fg:x="927" fg:w="1"/><text x="75.5546%" y="655.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="75.3046%" y="629" width="0.0812%" height="15" fill="rgb(215,105,30)" fg:x="927" fg:w="1"/><text x="75.5546%" y="639.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="75.3046%" y="613" width="0.0812%" height="15" fill="rgb(230,9,4)" fg:x="927" fg:w="1"/><text x="75.5546%" y="623.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="75.3046%" y="597" width="0.0812%" height="15" fill="rgb(248,15,2)" fg:x="927" fg:w="1"/><text x="75.5546%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="75.3046%" y="581" width="0.0812%" height="15" fill="rgb(208,210,22)" fg:x="927" fg:w="1"/><text x="75.5546%" y="591.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="75.3046%" y="565" width="0.0812%" height="15" fill="rgb(208,112,41)" fg:x="927" fg:w="1"/><text x="75.5546%" y="575.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="75.3046%" y="549" width="0.0812%" height="15" fill="rgb(232,83,14)" fg:x="927" fg:w="1"/><text x="75.5546%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="75.3859%" y="581" width="0.0812%" height="15" fill="rgb(229,65,11)" fg:x="928" fg:w="1"/><text x="75.6359%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="75.4671%" y="565" width="0.0812%" height="15" fill="rgb(228,126,24)" fg:x="929" fg:w="1"/><text x="75.7171%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.4671%" y="549" width="0.0812%" height="15" fill="rgb(218,66,33)" fg:x="929" fg:w="1"/><text x="75.7171%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.4671%" y="533" width="0.0812%" height="15" fill="rgb(251,49,52)" fg:x="929" fg:w="1"/><text x="75.7171%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.5483%" y="549" width="0.0812%" height="15" fill="rgb(219,46,37)" fg:x="930" fg:w="1"/><text x="75.7983%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.5483%" y="533" width="0.0812%" height="15" fill="rgb(213,53,49)" fg:x="930" fg:w="1"/><text x="75.7983%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.5483%" y="517" width="0.0812%" height="15" fill="rgb(214,134,1)" fg:x="930" fg:w="1"/><text x="75.7983%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.6296%" y="533" width="0.0812%" height="15" fill="rgb(208,139,43)" fg:x="931" fg:w="1"/><text x="75.8796%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.6296%" y="517" width="0.0812%" height="15" fill="rgb(231,105,35)" fg:x="931" fg:w="1"/><text x="75.8796%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.6296%" y="501" width="0.0812%" height="15" fill="rgb(247,189,9)" fg:x="931" fg:w="1"/><text x="75.8796%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.6296%" y="485" width="0.0812%" height="15" fill="rgb(252,48,51)" fg:x="931" fg:w="1"/><text x="75.8796%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.7108%" y="533" width="0.0812%" height="15" fill="rgb(209,121,1)" fg:x="932" fg:w="1"/><text x="75.9608%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.7108%" y="517" width="0.0812%" height="15" fill="rgb(231,40,26)" fg:x="932" fg:w="1"/><text x="75.9608%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.7108%" y="501" width="0.0812%" height="15" fill="rgb(251,8,13)" fg:x="932" fg:w="1"/><text x="75.9608%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="75.7920%" y="533" width="0.1625%" height="15" fill="rgb(231,110,2)" fg:x="933" fg:w="2"/><text x="76.0420%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="75.7920%" y="517" width="0.1625%" height="15" fill="rgb(216,153,22)" fg:x="933" fg:w="2"/><text x="76.0420%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="75.7920%" y="501" width="0.1625%" height="15" fill="rgb(249,116,49)" fg:x="933" fg:w="2"/><text x="76.0420%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="75.7920%" y="485" width="0.1625%" height="15" fill="rgb(230,89,2)" fg:x="933" fg:w="2"/><text x="76.0420%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.8733%" y="469" width="0.0812%" height="15" fill="rgb(231,125,23)" fg:x="934" fg:w="1"/><text x="76.1233%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.8733%" y="453" width="0.0812%" height="15" fill="rgb(212,217,18)" fg:x="934" fg:w="1"/><text x="76.1233%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.8733%" y="437" width="0.0812%" height="15" fill="rgb(210,21,33)" fg:x="934" fg:w="1"/><text x="76.1233%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.8733%" y="421" width="0.0812%" height="15" fill="rgb(241,97,9)" fg:x="934" fg:w="1"/><text x="76.1233%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.8733%" y="405" width="0.0812%" height="15" fill="rgb(221,35,31)" fg:x="934" fg:w="1"/><text x="76.1233%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="75.5483%" y="565" width="0.4874%" height="15" fill="rgb(251,23,23)" fg:x="930" fg:w="6"/><text x="75.7983%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="75.6296%" y="549" width="0.4062%" height="15" fill="rgb(227,165,2)" fg:x="931" fg:w="5"/><text x="75.8796%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.9545%" y="533" width="0.0812%" height="15" fill="rgb(242,24,2)" fg:x="935" fg:w="1"/><text x="76.2045%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.9545%" y="517" width="0.0812%" height="15" fill="rgb(242,138,51)" fg:x="935" fg:w="1"/><text x="76.2045%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.9545%" y="501" width="0.0812%" height="15" fill="rgb(220,219,5)" fg:x="935" fg:w="1"/><text x="76.2045%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.65%)</title><rect x="75.4671%" y="581" width="0.6499%" height="15" fill="rgb(247,53,29)" fg:x="929" fg:w="8"/><text x="75.7171%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.0357%" y="565" width="0.0812%" height="15" fill="rgb(233,43,39)" fg:x="936" fg:w="1"/><text x="76.2857%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.0357%" y="549" width="0.0812%" height="15" fill="rgb(230,128,54)" fg:x="936" fg:w="1"/><text x="76.2857%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.0357%" y="533" width="0.0812%" height="15" fill="rgb(218,20,12)" fg:x="936" fg:w="1"/><text x="76.2857%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.0357%" y="517" width="0.0812%" height="15" fill="rgb(206,51,14)" fg:x="936" fg:w="1"/><text x="76.2857%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.1170%" y="581" width="0.1625%" height="15" fill="rgb(223,16,35)" fg:x="937" fg:w="2"/><text x="76.3670%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="76.1170%" y="565" width="0.1625%" height="15" fill="rgb(226,165,37)" fg:x="937" fg:w="2"/><text x="76.3670%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.1170%" y="549" width="0.1625%" height="15" fill="rgb(240,26,21)" fg:x="937" fg:w="2"/><text x="76.3670%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.1170%" y="533" width="0.1625%" height="15" fill="rgb(240,72,46)" fg:x="937" fg:w="2"/><text x="76.3670%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.1982%" y="517" width="0.0812%" height="15" fill="rgb(211,33,41)" fg:x="938" fg:w="1"/><text x="76.4482%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.1982%" y="501" width="0.0812%" height="15" fill="rgb(224,157,46)" fg:x="938" fg:w="1"/><text x="76.4482%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.1982%" y="485" width="0.0812%" height="15" fill="rgb(223,59,19)" fg:x="938" fg:w="1"/><text x="76.4482%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2794%" y="533" width="0.0812%" height="15" fill="rgb(239,187,1)" fg:x="939" fg:w="1"/><text x="76.5294%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="76.4419%" y="469" width="0.0812%" height="15" fill="rgb(226,95,9)" fg:x="941" fg:w="1"/><text x="76.6919%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="76.4419%" y="485" width="0.1625%" height="15" fill="rgb(234,61,54)" fg:x="941" fg:w="2"/><text x="76.6919%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5232%" y="469" width="0.0812%" height="15" fill="rgb(205,209,47)" fg:x="942" fg:w="1"/><text x="76.7732%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.5232%" y="453" width="0.0812%" height="15" fill="rgb(228,7,43)" fg:x="942" fg:w="1"/><text x="76.7732%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.5232%" y="437" width="0.0812%" height="15" fill="rgb(240,217,52)" fg:x="942" fg:w="1"/><text x="76.7732%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.5232%" y="421" width="0.0812%" height="15" fill="rgb(211,178,21)" fg:x="942" fg:w="1"/><text x="76.7732%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="76.3607%" y="517" width="0.3249%" height="15" fill="rgb(205,25,34)" fg:x="940" fg:w="4"/><text x="76.6107%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="76.4419%" y="501" width="0.2437%" height="15" fill="rgb(209,57,11)" fg:x="941" fg:w="3"/><text x="76.6919%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6044%" y="485" width="0.0812%" height="15" fill="rgb(221,99,2)" fg:x="943" fg:w="1"/><text x="76.8544%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.6044%" y="469" width="0.0812%" height="15" fill="rgb(232,79,22)" fg:x="943" fg:w="1"/><text x="76.8544%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6044%" y="453" width="0.0812%" height="15" fill="rgb(221,145,32)" fg:x="943" fg:w="1"/><text x="76.8544%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6044%" y="437" width="0.0812%" height="15" fill="rgb(236,133,36)" fg:x="943" fg:w="1"/><text x="76.8544%" y="447.50"></text></g><g><title>engine::session::Session::flush (20 samples, 1.62%)</title><rect x="75.2234%" y="693" width="1.6247%" height="15" fill="rgb(208,224,44)" fg:x="926" fg:w="20"/><text x="75.4734%" y="703.50"></text></g><g><title>engine::session::Session::save_changes (19 samples, 1.54%)</title><rect x="75.3046%" y="677" width="1.5435%" height="15" fill="rgb(235,143,15)" fg:x="927" fg:w="19"/><text x="75.5546%" y="687.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.46%)</title><rect x="75.3859%" y="661" width="1.4622%" height="15" fill="rgb(249,83,27)" fg:x="928" fg:w="18"/><text x="75.6359%" y="671.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.46%)</title><rect x="75.3859%" y="645" width="1.4622%" height="15" fill="rgb(238,226,19)" fg:x="928" fg:w="18"/><text x="75.6359%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.46%)</title><rect x="75.3859%" y="629" width="1.4622%" height="15" fill="rgb(226,206,27)" fg:x="928" fg:w="18"/><text x="75.6359%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 1.46%)</title><rect x="75.3859%" y="613" width="1.4622%" height="15" fill="rgb(251,182,9)" fg:x="928" fg:w="18"/><text x="75.6359%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.46%)</title><rect x="75.3859%" y="597" width="1.4622%" height="15" fill="rgb(212,140,41)" fg:x="928" fg:w="18"/><text x="75.6359%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.57%)</title><rect x="76.2794%" y="581" width="0.5686%" height="15" fill="rgb(220,106,18)" fg:x="939" fg:w="7"/><text x="76.5294%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="76.2794%" y="565" width="0.5686%" height="15" fill="rgb(252,46,41)" fg:x="939" fg:w="7"/><text x="76.5294%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="76.2794%" y="549" width="0.5686%" height="15" fill="rgb(209,222,15)" fg:x="939" fg:w="7"/><text x="76.5294%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="76.3607%" y="533" width="0.4874%" height="15" fill="rgb(233,83,50)" fg:x="940" fg:w="6"/><text x="76.6107%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="76.6856%" y="517" width="0.1625%" height="15" fill="rgb(205,212,0)" fg:x="944" fg:w="2"/><text x="76.9356%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="76.7669%" y="501" width="0.0812%" height="15" fill="rgb(235,117,51)" fg:x="945" fg:w="1"/><text x="77.0169%" y="511.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="76.8481%" y="693" width="0.0812%" height="15" fill="rgb(233,133,48)" fg:x="946" fg:w="1"/><text x="77.0981%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="76.8481%" y="677" width="0.0812%" height="15" fill="rgb(219,3,2)" fg:x="946" fg:w="1"/><text x="77.0981%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="76.8481%" y="661" width="0.0812%" height="15" fill="rgb(225,80,52)" fg:x="946" fg:w="1"/><text x="77.0981%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.8481%" y="645" width="0.0812%" height="15" fill="rgb(235,195,42)" fg:x="946" fg:w="1"/><text x="77.0981%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.8481%" y="629" width="0.0812%" height="15" fill="rgb(240,207,46)" fg:x="946" fg:w="1"/><text x="77.0981%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="76.8481%" y="613" width="0.0812%" height="15" fill="rgb(236,112,50)" fg:x="946" fg:w="1"/><text x="77.0981%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.8481%" y="597" width="0.0812%" height="15" fill="rgb(249,151,27)" fg:x="946" fg:w="1"/><text x="77.0981%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8481%" y="581" width="0.0812%" height="15" fill="rgb(253,223,52)" fg:x="946" fg:w="1"/><text x="77.0981%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="76.9293%" y="693" width="0.0812%" height="15" fill="rgb(215,55,33)" fg:x="947" fg:w="1"/><text x="77.1793%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.9293%" y="677" width="0.0812%" height="15" fill="rgb(207,24,17)" fg:x="947" fg:w="1"/><text x="77.1793%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.9293%" y="661" width="0.0812%" height="15" fill="rgb(218,169,32)" fg:x="947" fg:w="1"/><text x="77.1793%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9293%" y="645" width="0.0812%" height="15" fill="rgb(209,210,6)" fg:x="947" fg:w="1"/><text x="77.1793%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.9293%" y="629" width="0.0812%" height="15" fill="rgb(225,208,8)" fg:x="947" fg:w="1"/><text x="77.1793%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9293%" y="613" width="0.0812%" height="15" fill="rgb(238,14,32)" fg:x="947" fg:w="1"/><text x="77.1793%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.9293%" y="597" width="0.0812%" height="15" fill="rgb(211,137,3)" fg:x="947" fg:w="1"/><text x="77.1793%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.9293%" y="581" width="0.0812%" height="15" fill="rgb(207,171,19)" fg:x="947" fg:w="1"/><text x="77.1793%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="77.0106%" y="693" width="0.1625%" height="15" fill="rgb(250,80,8)" fg:x="948" fg:w="2"/><text x="77.2606%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="77.0106%" y="677" width="0.1625%" height="15" fill="rgb(209,103,53)" fg:x="948" fg:w="2"/><text x="77.2606%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="77.0106%" y="661" width="0.1625%" height="15" fill="rgb(233,198,10)" fg:x="948" fg:w="2"/><text x="77.2606%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="77.0106%" y="645" width="0.1625%" height="15" fill="rgb(236,125,25)" fg:x="948" fg:w="2"/><text x="77.2606%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="77.0106%" y="629" width="0.1625%" height="15" fill="rgb(254,182,48)" fg:x="948" fg:w="2"/><text x="77.2606%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="77.0106%" y="613" width="0.1625%" height="15" fill="rgb(216,108,44)" fg:x="948" fg:w="2"/><text x="77.2606%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="77.0106%" y="597" width="0.1625%" height="15" fill="rgb(222,72,39)" fg:x="948" fg:w="2"/><text x="77.2606%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="77.0106%" y="581" width="0.1625%" height="15" fill="rgb(252,70,39)" fg:x="948" fg:w="2"/><text x="77.2606%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.0918%" y="565" width="0.0812%" height="15" fill="rgb(243,99,34)" fg:x="949" fg:w="1"/><text x="77.3418%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.1730%" y="645" width="0.0812%" height="15" fill="rgb(252,109,12)" fg:x="950" fg:w="1"/><text x="77.4230%" y="655.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="77.1730%" y="677" width="0.1625%" height="15" fill="rgb(211,186,10)" fg:x="950" fg:w="2"/><text x="77.4230%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="77.1730%" y="661" width="0.1625%" height="15" fill="rgb(246,90,8)" fg:x="950" fg:w="2"/><text x="77.4230%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.2543%" y="645" width="0.0812%" height="15" fill="rgb(226,91,24)" fg:x="951" fg:w="1"/><text x="77.5043%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.2543%" y="629" width="0.0812%" height="15" fill="rgb(216,28,44)" fg:x="951" fg:w="1"/><text x="77.5043%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2543%" y="613" width="0.0812%" height="15" fill="rgb(229,36,0)" fg:x="951" fg:w="1"/><text x="77.5043%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="77.3355%" y="645" width="0.0812%" height="15" fill="rgb(245,97,18)" fg:x="952" fg:w="1"/><text x="77.5855%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3355%" y="629" width="0.0812%" height="15" fill="rgb(241,97,54)" fg:x="952" fg:w="1"/><text x="77.5855%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="77.3355%" y="613" width="0.0812%" height="15" fill="rgb(234,125,17)" fg:x="952" fg:w="1"/><text x="77.5855%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.3355%" y="597" width="0.0812%" height="15" fill="rgb(228,172,39)" fg:x="952" fg:w="1"/><text x="77.5855%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="77.3355%" y="581" width="0.0812%" height="15" fill="rgb(227,169,1)" fg:x="952" fg:w="1"/><text x="77.5855%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (29 samples, 2.36%)</title><rect x="75.1422%" y="709" width="2.3558%" height="15" fill="rgb(206,13,35)" fg:x="925" fg:w="29"/><text x="75.3922%" y="719.50">p..</text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="77.1730%" y="693" width="0.3249%" height="15" fill="rgb(211,117,30)" fg:x="950" fg:w="4"/><text x="77.4230%" y="703.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="77.3355%" y="677" width="0.1625%" height="15" fill="rgb(230,198,4)" fg:x="952" fg:w="2"/><text x="77.5855%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="77.3355%" y="661" width="0.1625%" height="15" fill="rgb(213,87,54)" fg:x="952" fg:w="2"/><text x="77.5855%" y="671.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4167%" y="645" width="0.0812%" height="15" fill="rgb(248,43,22)" fg:x="953" fg:w="1"/><text x="77.6667%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.4167%" y="629" width="0.0812%" height="15" fill="rgb(213,175,48)" fg:x="953" fg:w="1"/><text x="77.6667%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4167%" y="613" width="0.0812%" height="15" fill="rgb(252,55,9)" fg:x="953" fg:w="1"/><text x="77.6667%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.4167%" y="597" width="0.0812%" height="15" fill="rgb(231,72,33)" fg:x="953" fg:w="1"/><text x="77.6667%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4167%" y="581" width="0.0812%" height="15" fill="rgb(213,2,54)" fg:x="953" fg:w="1"/><text x="77.6667%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.4980%" y="661" width="0.0812%" height="15" fill="rgb(208,88,25)" fg:x="954" fg:w="1"/><text x="77.7480%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="77.4980%" y="645" width="0.0812%" height="15" fill="rgb(215,117,13)" fg:x="954" fg:w="1"/><text x="77.7480%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.4980%" y="629" width="0.0812%" height="15" fill="rgb(243,147,21)" fg:x="954" fg:w="1"/><text x="77.7480%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.4980%" y="613" width="0.0812%" height="15" fill="rgb(208,215,36)" fg:x="954" fg:w="1"/><text x="77.7480%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.4980%" y="597" width="0.0812%" height="15" fill="rgb(238,187,24)" fg:x="954" fg:w="1"/><text x="77.7480%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.4980%" y="581" width="0.0812%" height="15" fill="rgb(214,173,11)" fg:x="954" fg:w="1"/><text x="77.7480%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.4980%" y="565" width="0.0812%" height="15" fill="rgb(222,71,20)" fg:x="954" fg:w="1"/><text x="77.7480%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.4980%" y="549" width="0.0812%" height="15" fill="rgb(242,125,4)" fg:x="954" fg:w="1"/><text x="77.7480%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.5792%" y="661" width="0.0812%" height="15" fill="rgb(217,101,52)" fg:x="955" fg:w="1"/><text x="77.8292%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.5792%" y="645" width="0.0812%" height="15" fill="rgb(223,2,50)" fg:x="955" fg:w="1"/><text x="77.8292%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.5792%" y="629" width="0.0812%" height="15" fill="rgb(225,197,9)" fg:x="955" fg:w="1"/><text x="77.8292%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.5792%" y="613" width="0.0812%" height="15" fill="rgb(234,76,27)" fg:x="955" fg:w="1"/><text x="77.8292%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.5792%" y="597" width="0.0812%" height="15" fill="rgb(213,161,26)" fg:x="955" fg:w="1"/><text x="77.8292%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.5792%" y="581" width="0.0812%" height="15" fill="rgb(210,228,2)" fg:x="955" fg:w="1"/><text x="77.8292%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.5792%" y="565" width="0.0812%" height="15" fill="rgb(235,4,16)" fg:x="955" fg:w="1"/><text x="77.8292%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.5792%" y="549" width="0.0812%" height="15" fill="rgb(235,83,42)" fg:x="955" fg:w="1"/><text x="77.8292%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.5792%" y="533" width="0.0812%" height="15" fill="rgb(207,116,39)" fg:x="955" fg:w="1"/><text x="77.8292%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.5792%" y="517" width="0.0812%" height="15" fill="rgb(253,206,9)" fg:x="955" fg:w="1"/><text x="77.8292%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.5792%" y="501" width="0.0812%" height="15" fill="rgb(234,32,47)" fg:x="955" fg:w="1"/><text x="77.8292%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5792%" y="485" width="0.0812%" height="15" fill="rgb(247,40,39)" fg:x="955" fg:w="1"/><text x="77.8292%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="77.6604%" y="645" width="0.0812%" height="15" fill="rgb(236,199,13)" fg:x="956" fg:w="1"/><text x="77.9104%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6604%" y="629" width="0.0812%" height="15" fill="rgb(240,127,44)" fg:x="956" fg:w="1"/><text x="77.9104%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.6604%" y="613" width="0.0812%" height="15" fill="rgb(248,220,47)" fg:x="956" fg:w="1"/><text x="77.9104%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6604%" y="597" width="0.0812%" height="15" fill="rgb(240,78,9)" fg:x="956" fg:w="1"/><text x="77.9104%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.6604%" y="581" width="0.0812%" height="15" fill="rgb(245,119,5)" fg:x="956" fg:w="1"/><text x="77.9104%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6604%" y="565" width="0.0812%" height="15" fill="rgb(238,175,31)" fg:x="956" fg:w="1"/><text x="77.9104%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="77.4980%" y="709" width="0.3249%" height="15" fill="rgb(232,140,42)" fg:x="954" fg:w="4"/><text x="77.7480%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="77.4980%" y="693" width="0.3249%" height="15" fill="rgb(218,179,7)" fg:x="954" fg:w="4"/><text x="77.7480%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="77.4980%" y="677" width="0.3249%" height="15" fill="rgb(232,79,27)" fg:x="954" fg:w="4"/><text x="77.7480%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="77.6604%" y="661" width="0.1625%" height="15" fill="rgb(247,11,19)" fg:x="956" fg:w="2"/><text x="77.9104%" y="671.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="77.7417%" y="645" width="0.0812%" height="15" fill="rgb(216,171,54)" fg:x="957" fg:w="1"/><text x="77.9917%" y="655.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="77.7417%" y="629" width="0.0812%" height="15" fill="rgb(233,158,36)" fg:x="957" fg:w="1"/><text x="77.9917%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="77.8229%" y="693" width="0.0812%" height="15" fill="rgb(215,48,47)" fg:x="958" fg:w="1"/><text x="78.0729%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="77.8229%" y="677" width="0.0812%" height="15" fill="rgb(230,223,15)" fg:x="958" fg:w="1"/><text x="78.0729%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.8229%" y="661" width="0.0812%" height="15" fill="rgb(234,49,19)" fg:x="958" fg:w="1"/><text x="78.0729%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="77.8229%" y="645" width="0.0812%" height="15" fill="rgb(232,89,25)" fg:x="958" fg:w="1"/><text x="78.0729%" y="655.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (53 samples, 4.31%)</title><rect x="73.6799%" y="725" width="4.3054%" height="15" fill="rgb(237,206,28)" fg:x="907" fg:w="53"/><text x="73.9299%" y="735.50">&lt;test..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (2 samples, 0.16%)</title><rect x="77.8229%" y="709" width="0.1625%" height="15" fill="rgb(249,68,37)" fg:x="958" fg:w="2"/><text x="78.0729%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="77.9041%" y="693" width="0.0812%" height="15" fill="rgb(226,99,43)" fg:x="959" fg:w="1"/><text x="78.1541%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="77.9041%" y="677" width="0.0812%" height="15" fill="rgb(216,46,28)" fg:x="959" fg:w="1"/><text x="78.1541%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="77.9041%" y="661" width="0.0812%" height="15" fill="rgb(216,33,9)" fg:x="959" fg:w="1"/><text x="78.1541%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9041%" y="645" width="0.0812%" height="15" fill="rgb(216,129,4)" fg:x="959" fg:w="1"/><text x="78.1541%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.9041%" y="629" width="0.0812%" height="15" fill="rgb(216,106,3)" fg:x="959" fg:w="1"/><text x="78.1541%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="77.9041%" y="613" width="0.0812%" height="15" fill="rgb(217,79,45)" fg:x="959" fg:w="1"/><text x="78.1541%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="77.9041%" y="597" width="0.0812%" height="15" fill="rgb(239,98,13)" fg:x="959" fg:w="1"/><text x="78.1541%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.9041%" y="581" width="0.0812%" height="15" fill="rgb(221,115,4)" fg:x="959" fg:w="1"/><text x="78.1541%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9041%" y="565" width="0.0812%" height="15" fill="rgb(215,85,0)" fg:x="959" fg:w="1"/><text x="78.1541%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.9041%" y="549" width="0.0812%" height="15" fill="rgb(230,62,15)" fg:x="959" fg:w="1"/><text x="78.1541%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9041%" y="533" width="0.0812%" height="15" fill="rgb(247,162,2)" fg:x="959" fg:w="1"/><text x="78.1541%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.9041%" y="517" width="0.0812%" height="15" fill="rgb(212,112,32)" fg:x="959" fg:w="1"/><text x="78.1541%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.9041%" y="501" width="0.0812%" height="15" fill="rgb(216,137,9)" fg:x="959" fg:w="1"/><text x="78.1541%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.9041%" y="485" width="0.0812%" height="15" fill="rgb(250,149,33)" fg:x="959" fg:w="1"/><text x="78.1541%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9041%" y="469" width="0.0812%" height="15" fill="rgb(246,124,31)" fg:x="959" fg:w="1"/><text x="78.1541%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="77.9854%" y="725" width="0.0812%" height="15" fill="rgb(216,210,22)" fg:x="960" fg:w="1"/><text x="78.2354%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.9854%" y="709" width="0.0812%" height="15" fill="rgb(228,128,36)" fg:x="960" fg:w="1"/><text x="78.2354%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="78.0666%" y="709" width="0.0812%" height="15" fill="rgb(231,41,0)" fg:x="961" fg:w="1"/><text x="78.3166%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="78.0666%" y="693" width="0.0812%" height="15" fill="rgb(232,61,26)" fg:x="961" fg:w="1"/><text x="78.3166%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.0666%" y="677" width="0.0812%" height="15" fill="rgb(217,60,9)" fg:x="961" fg:w="1"/><text x="78.3166%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="78.0666%" y="661" width="0.0812%" height="15" fill="rgb(233,41,35)" fg:x="961" fg:w="1"/><text x="78.3166%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="78.0666%" y="645" width="0.0812%" height="15" fill="rgb(253,139,43)" fg:x="961" fg:w="1"/><text x="78.3166%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="78.0666%" y="629" width="0.0812%" height="15" fill="rgb(245,100,51)" fg:x="961" fg:w="1"/><text x="78.3166%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="78.0666%" y="613" width="0.0812%" height="15" fill="rgb(250,208,18)" fg:x="961" fg:w="1"/><text x="78.3166%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.0666%" y="597" width="0.0812%" height="15" fill="rgb(245,33,2)" fg:x="961" fg:w="1"/><text x="78.3166%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="78.0666%" y="581" width="0.0812%" height="15" fill="rgb(244,171,31)" fg:x="961" fg:w="1"/><text x="78.3166%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.0666%" y="565" width="0.0812%" height="15" fill="rgb(229,1,43)" fg:x="961" fg:w="1"/><text x="78.3166%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1478%" y="645" width="0.0812%" height="15" fill="rgb(223,153,28)" fg:x="962" fg:w="1"/><text x="78.3978%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.1478%" y="629" width="0.0812%" height="15" fill="rgb(241,4,46)" fg:x="962" fg:w="1"/><text x="78.3978%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1478%" y="613" width="0.0812%" height="15" fill="rgb(230,81,11)" fg:x="962" fg:w="1"/><text x="78.3978%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.2291%" y="613" width="0.0812%" height="15" fill="rgb(253,204,39)" fg:x="963" fg:w="1"/><text x="78.4791%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.3103%" y="517" width="0.0812%" height="15" fill="rgb(250,96,8)" fg:x="964" fg:w="1"/><text x="78.5603%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.3103%" y="501" width="0.0812%" height="15" fill="rgb(219,89,54)" fg:x="964" fg:w="1"/><text x="78.5603%" y="511.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (4 samples, 0.32%)</title><rect x="78.1478%" y="693" width="0.3249%" height="15" fill="rgb(235,136,39)" fg:x="962" fg:w="4"/><text x="78.3978%" y="703.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (4 samples, 0.32%)</title><rect x="78.1478%" y="677" width="0.3249%" height="15" fill="rgb(230,155,37)" fg:x="962" fg:w="4"/><text x="78.3978%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="78.1478%" y="661" width="0.3249%" height="15" fill="rgb(235,199,50)" fg:x="962" fg:w="4"/><text x="78.3978%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="78.2291%" y="645" width="0.2437%" height="15" fill="rgb(227,81,32)" fg:x="963" fg:w="3"/><text x="78.4791%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="78.2291%" y="629" width="0.2437%" height="15" fill="rgb(225,6,28)" fg:x="963" fg:w="3"/><text x="78.4791%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="78.3103%" y="613" width="0.1625%" height="15" fill="rgb(207,211,17)" fg:x="964" fg:w="2"/><text x="78.5603%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="78.3103%" y="597" width="0.1625%" height="15" fill="rgb(228,31,49)" fg:x="964" fg:w="2"/><text x="78.5603%" y="607.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="78.3103%" y="581" width="0.1625%" height="15" fill="rgb(230,185,3)" fg:x="964" fg:w="2"/><text x="78.5603%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="78.3103%" y="565" width="0.1625%" height="15" fill="rgb(206,167,15)" fg:x="964" fg:w="2"/><text x="78.5603%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.3103%" y="549" width="0.1625%" height="15" fill="rgb(234,2,36)" fg:x="964" fg:w="2"/><text x="78.5603%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.3103%" y="533" width="0.1625%" height="15" fill="rgb(239,160,29)" fg:x="964" fg:w="2"/><text x="78.5603%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.3916%" y="517" width="0.0812%" height="15" fill="rgb(236,117,2)" fg:x="965" fg:w="1"/><text x="78.6416%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3916%" y="501" width="0.0812%" height="15" fill="rgb(215,117,37)" fg:x="965" fg:w="1"/><text x="78.6416%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.4728%" y="693" width="0.0812%" height="15" fill="rgb(244,48,36)" fg:x="966" fg:w="1"/><text x="78.7228%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.5540%" y="693" width="0.0812%" height="15" fill="rgb(223,101,37)" fg:x="967" fg:w="1"/><text x="78.8040%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.5540%" y="677" width="0.0812%" height="15" fill="rgb(205,200,1)" fg:x="967" fg:w="1"/><text x="78.8040%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.5540%" y="661" width="0.0812%" height="15" fill="rgb(209,193,20)" fg:x="967" fg:w="1"/><text x="78.8040%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.5540%" y="645" width="0.0812%" height="15" fill="rgb(214,63,13)" fg:x="967" fg:w="1"/><text x="78.8040%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.5540%" y="629" width="0.0812%" height="15" fill="rgb(253,113,46)" fg:x="967" fg:w="1"/><text x="78.8040%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.7165%" y="613" width="0.0812%" height="15" fill="rgb(237,103,34)" fg:x="969" fg:w="1"/><text x="78.9665%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.7165%" y="597" width="0.0812%" height="15" fill="rgb(223,38,25)" fg:x="969" fg:w="1"/><text x="78.9665%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.7165%" y="581" width="0.0812%" height="15" fill="rgb(251,32,32)" fg:x="969" fg:w="1"/><text x="78.9665%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.7165%" y="565" width="0.0812%" height="15" fill="rgb(228,65,22)" fg:x="969" fg:w="1"/><text x="78.9665%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.7165%" y="549" width="0.0812%" height="15" fill="rgb(205,11,46)" fg:x="969" fg:w="1"/><text x="78.9665%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.7165%" y="533" width="0.0812%" height="15" fill="rgb(220,35,2)" fg:x="969" fg:w="1"/><text x="78.9665%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.7165%" y="517" width="0.0812%" height="15" fill="rgb(217,151,17)" fg:x="969" fg:w="1"/><text x="78.9665%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.7165%" y="501" width="0.0812%" height="15" fill="rgb(243,227,35)" fg:x="969" fg:w="1"/><text x="78.9665%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="78.7165%" y="629" width="0.2437%" height="15" fill="rgb(214,0,34)" fg:x="969" fg:w="3"/><text x="78.9665%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="78.7977%" y="613" width="0.1625%" height="15" fill="rgb(209,42,37)" fg:x="970" fg:w="2"/><text x="79.0477%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="78.7977%" y="597" width="0.1625%" height="15" fill="rgb(251,176,30)" fg:x="970" fg:w="2"/><text x="79.0477%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="78.7977%" y="581" width="0.1625%" height="15" fill="rgb(223,64,40)" fg:x="970" fg:w="2"/><text x="79.0477%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="78.7977%" y="565" width="0.1625%" height="15" fill="rgb(227,180,23)" fg:x="970" fg:w="2"/><text x="79.0477%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="78.7977%" y="549" width="0.1625%" height="15" fill="rgb(220,137,31)" fg:x="970" fg:w="2"/><text x="79.0477%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="78.7977%" y="533" width="0.1625%" height="15" fill="rgb(245,124,25)" fg:x="970" fg:w="2"/><text x="79.0477%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.9602%" y="597" width="0.0812%" height="15" fill="rgb(217,157,5)" fg:x="972" fg:w="1"/><text x="79.2102%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.0414%" y="597" width="0.0812%" height="15" fill="rgb(225,59,2)" fg:x="973" fg:w="1"/><text x="79.2914%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.0414%" y="581" width="0.0812%" height="15" fill="rgb(220,182,9)" fg:x="973" fg:w="1"/><text x="79.2914%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="78.9602%" y="629" width="0.2437%" height="15" fill="rgb(249,54,24)" fg:x="972" fg:w="3"/><text x="79.2102%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="78.9602%" y="613" width="0.2437%" height="15" fill="rgb(216,89,17)" fg:x="972" fg:w="3"/><text x="79.2102%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.1227%" y="597" width="0.0812%" height="15" fill="rgb(245,20,45)" fg:x="974" fg:w="1"/><text x="79.3727%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.1227%" y="581" width="0.0812%" height="15" fill="rgb(230,83,14)" fg:x="974" fg:w="1"/><text x="79.3727%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.1227%" y="565" width="0.0812%" height="15" fill="rgb(246,109,11)" fg:x="974" fg:w="1"/><text x="79.3727%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.1227%" y="549" width="0.0812%" height="15" fill="rgb(235,85,23)" fg:x="974" fg:w="1"/><text x="79.3727%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.1227%" y="533" width="0.0812%" height="15" fill="rgb(215,101,36)" fg:x="974" fg:w="1"/><text x="79.3727%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="79.2039%" y="597" width="0.1625%" height="15" fill="rgb(228,140,31)" fg:x="975" fg:w="2"/><text x="79.4539%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.2039%" y="581" width="0.1625%" height="15" fill="rgb(234,162,37)" fg:x="975" fg:w="2"/><text x="79.4539%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.2039%" y="565" width="0.1625%" height="15" fill="rgb(221,0,24)" fg:x="975" fg:w="2"/><text x="79.4539%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.2851%" y="549" width="0.0812%" height="15" fill="rgb(230,161,41)" fg:x="976" fg:w="1"/><text x="79.5351%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="79.2851%" y="533" width="0.0812%" height="15" fill="rgb(224,46,24)" fg:x="976" fg:w="1"/><text x="79.5351%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="79.2851%" y="517" width="0.0812%" height="15" fill="rgb(205,59,32)" fg:x="976" fg:w="1"/><text x="79.5351%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.2851%" y="501" width="0.0812%" height="15" fill="rgb(239,31,20)" fg:x="976" fg:w="1"/><text x="79.5351%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3664%" y="597" width="0.0812%" height="15" fill="rgb(233,149,44)" fg:x="977" fg:w="1"/><text x="79.6164%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.3664%" y="581" width="0.0812%" height="15" fill="rgb(243,47,26)" fg:x="977" fg:w="1"/><text x="79.6164%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="79.4476%" y="549" width="0.0812%" height="15" fill="rgb(233,107,5)" fg:x="978" fg:w="1"/><text x="79.6976%" y="559.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="79.4476%" y="533" width="0.0812%" height="15" fill="rgb(248,140,33)" fg:x="978" fg:w="1"/><text x="79.6976%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="79.4476%" y="517" width="0.0812%" height="15" fill="rgb(228,178,19)" fg:x="978" fg:w="1"/><text x="79.6976%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.4476%" y="501" width="0.0812%" height="15" fill="rgb(224,39,49)" fg:x="978" fg:w="1"/><text x="79.6976%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.49%)</title><rect x="79.2039%" y="613" width="0.4874%" height="15" fill="rgb(246,56,47)" fg:x="975" fg:w="6"/><text x="79.4539%" y="623.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="79.4476%" y="597" width="0.2437%" height="15" fill="rgb(220,73,27)" fg:x="978" fg:w="3"/><text x="79.6976%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="79.4476%" y="581" width="0.2437%" height="15" fill="rgb(239,112,21)" fg:x="978" fg:w="3"/><text x="79.6976%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="79.4476%" y="565" width="0.2437%" height="15" fill="rgb(253,14,51)" fg:x="978" fg:w="3"/><text x="79.6976%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="79.5288%" y="549" width="0.1625%" height="15" fill="rgb(215,58,12)" fg:x="979" fg:w="2"/><text x="79.7788%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.7725%" y="581" width="0.0812%" height="15" fill="rgb(207,181,19)" fg:x="982" fg:w="1"/><text x="80.0225%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="79.7725%" y="565" width="0.0812%" height="15" fill="rgb(211,214,34)" fg:x="982" fg:w="1"/><text x="80.0225%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.8538%" y="533" width="0.0812%" height="15" fill="rgb(243,124,39)" fg:x="983" fg:w="1"/><text x="80.1038%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.8538%" y="517" width="0.0812%" height="15" fill="rgb(248,135,21)" fg:x="983" fg:w="1"/><text x="80.1038%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.9350%" y="533" width="0.0812%" height="15" fill="rgb(245,218,3)" fg:x="984" fg:w="1"/><text x="80.1850%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.9350%" y="517" width="0.0812%" height="15" fill="rgb(225,144,22)" fg:x="984" fg:w="1"/><text x="80.1850%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.9350%" y="501" width="0.0812%" height="15" fill="rgb(250,90,15)" fg:x="984" fg:w="1"/><text x="80.1850%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="79.8538%" y="549" width="0.2437%" height="15" fill="rgb(224,64,29)" fg:x="983" fg:w="3"/><text x="80.1038%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0162%" y="533" width="0.0812%" height="15" fill="rgb(217,50,47)" fg:x="985" fg:w="1"/><text x="80.2662%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.0162%" y="517" width="0.0812%" height="15" fill="rgb(231,159,47)" fg:x="985" fg:w="1"/><text x="80.2662%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0162%" y="501" width="0.0812%" height="15" fill="rgb(213,89,29)" fg:x="985" fg:w="1"/><text x="80.2662%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="80.0162%" y="485" width="0.0812%" height="15" fill="rgb(243,90,23)" fg:x="985" fg:w="1"/><text x="80.2662%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.49%)</title><rect x="79.6913%" y="613" width="0.4874%" height="15" fill="rgb(213,21,6)" fg:x="981" fg:w="6"/><text x="79.9413%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="79.7725%" y="597" width="0.4062%" height="15" fill="rgb(237,139,17)" fg:x="982" fg:w="5"/><text x="80.0225%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="79.8538%" y="581" width="0.3249%" height="15" fill="rgb(250,147,17)" fg:x="983" fg:w="4"/><text x="80.1038%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="79.8538%" y="565" width="0.3249%" height="15" fill="rgb(212,208,42)" fg:x="983" fg:w="4"/><text x="80.1038%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="80.0975%" y="549" width="0.0812%" height="15" fill="rgb(215,229,40)" fg:x="986" fg:w="1"/><text x="80.3475%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.0975%" y="533" width="0.0812%" height="15" fill="rgb(206,204,1)" fg:x="986" fg:w="1"/><text x="80.3475%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.1787%" y="469" width="0.0812%" height="15" fill="rgb(230,62,32)" fg:x="987" fg:w="1"/><text x="80.4287%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.1787%" y="453" width="0.0812%" height="15" fill="rgb(223,22,42)" fg:x="987" fg:w="1"/><text x="80.4287%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.1787%" y="437" width="0.0812%" height="15" fill="rgb(244,6,23)" fg:x="987" fg:w="1"/><text x="80.4287%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.1787%" y="421" width="0.0812%" height="15" fill="rgb(240,221,42)" fg:x="987" fg:w="1"/><text x="80.4287%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.1787%" y="405" width="0.0812%" height="15" fill="rgb(222,74,7)" fg:x="987" fg:w="1"/><text x="80.4287%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.1787%" y="389" width="0.0812%" height="15" fill="rgb(227,191,38)" fg:x="987" fg:w="1"/><text x="80.4287%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.1787%" y="373" width="0.0812%" height="15" fill="rgb(227,89,34)" fg:x="987" fg:w="1"/><text x="80.4287%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.1787%" y="357" width="0.0812%" height="15" fill="rgb(215,153,25)" fg:x="987" fg:w="1"/><text x="80.4287%" y="367.50"></text></g><g><title>engine::session::Session::close (28 samples, 2.27%)</title><rect x="78.0666%" y="725" width="2.2746%" height="15" fill="rgb(215,153,46)" fg:x="961" fg:w="28"/><text x="78.3166%" y="735.50">e..</text></g><g><title>engine::session::state::State::close (27 samples, 2.19%)</title><rect x="78.1478%" y="709" width="2.1933%" height="15" fill="rgb(242,38,52)" fg:x="962" fg:w="27"/><text x="78.3978%" y="719.50">e..</text></g><g><title>engine::session::state::State::flush_entities (21 samples, 1.71%)</title><rect x="78.6353%" y="693" width="1.7059%" height="15" fill="rgb(218,112,4)" fg:x="968" fg:w="21"/><text x="78.8853%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (20 samples, 1.62%)</title><rect x="78.7165%" y="677" width="1.6247%" height="15" fill="rgb(231,210,31)" fg:x="969" fg:w="20"/><text x="78.9665%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (20 samples, 1.62%)</title><rect x="78.7165%" y="661" width="1.6247%" height="15" fill="rgb(245,223,36)" fg:x="969" fg:w="20"/><text x="78.9665%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (20 samples, 1.62%)</title><rect x="78.7165%" y="645" width="1.6247%" height="15" fill="rgb(246,41,2)" fg:x="969" fg:w="20"/><text x="78.9665%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (14 samples, 1.14%)</title><rect x="79.2039%" y="629" width="1.1373%" height="15" fill="rgb(227,51,31)" fg:x="975" fg:w="14"/><text x="79.4539%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="80.1787%" y="613" width="0.1625%" height="15" fill="rgb(222,95,26)" fg:x="987" fg:w="2"/><text x="80.4287%" y="623.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="80.1787%" y="597" width="0.1625%" height="15" fill="rgb(224,190,1)" fg:x="987" fg:w="2"/><text x="80.4287%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="80.1787%" y="581" width="0.1625%" height="15" fill="rgb(209,90,42)" fg:x="987" fg:w="2"/><text x="80.4287%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="80.1787%" y="565" width="0.1625%" height="15" fill="rgb(232,225,50)" fg:x="987" fg:w="2"/><text x="80.4287%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="80.1787%" y="549" width="0.1625%" height="15" fill="rgb(239,89,47)" fg:x="987" fg:w="2"/><text x="80.4287%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="80.1787%" y="533" width="0.1625%" height="15" fill="rgb(230,212,50)" fg:x="987" fg:w="2"/><text x="80.4287%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="80.1787%" y="517" width="0.1625%" height="15" fill="rgb(252,1,27)" fg:x="987" fg:w="2"/><text x="80.4287%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="80.1787%" y="501" width="0.1625%" height="15" fill="rgb(237,179,41)" fg:x="987" fg:w="2"/><text x="80.4287%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="80.1787%" y="485" width="0.1625%" height="15" fill="rgb(214,151,37)" fg:x="987" fg:w="2"/><text x="80.4287%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.2600%" y="469" width="0.0812%" height="15" fill="rgb(211,74,11)" fg:x="988" fg:w="1"/><text x="80.5100%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.2600%" y="453" width="0.0812%" height="15" fill="rgb(242,21,21)" fg:x="988" fg:w="1"/><text x="80.5100%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="80.2600%" y="437" width="0.0812%" height="15" fill="rgb(226,106,43)" fg:x="988" fg:w="1"/><text x="80.5100%" y="447.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::sources (2 samples, 0.16%)</title><rect x="80.3412%" y="661" width="0.1625%" height="15" fill="rgb(229,162,39)" fg:x="989" fg:w="2"/><text x="80.5912%" y="671.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (3 samples, 0.24%)</title><rect x="80.3412%" y="693" width="0.2437%" height="15" fill="rgb(228,159,25)" fg:x="989" fg:w="3"/><text x="80.5912%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="80.3412%" y="677" width="0.2437%" height="15" fill="rgb(237,32,23)" fg:x="989" fg:w="3"/><text x="80.5912%" y="687.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="80.5037%" y="661" width="0.0812%" height="15" fill="rgb(212,35,32)" fg:x="991" fg:w="1"/><text x="80.7537%" y="671.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="80.5037%" y="645" width="0.0812%" height="15" fill="rgb(215,199,1)" fg:x="991" fg:w="1"/><text x="80.7537%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="80.5849%" y="677" width="0.0812%" height="15" fill="rgb(215,67,13)" fg:x="992" fg:w="1"/><text x="80.8349%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="80.5849%" y="661" width="0.0812%" height="15" fill="rgb(216,20,47)" fg:x="992" fg:w="1"/><text x="80.8349%" y="671.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="80.5849%" y="645" width="0.0812%" height="15" fill="rgb(249,183,48)" fg:x="992" fg:w="1"/><text x="80.8349%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="80.5849%" y="629" width="0.0812%" height="15" fill="rgb(208,86,37)" fg:x="992" fg:w="1"/><text x="80.8349%" y="639.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="80.5849%" y="613" width="0.0812%" height="15" fill="rgb(251,192,7)" fg:x="992" fg:w="1"/><text x="80.8349%" y="623.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="80.5849%" y="597" width="0.0812%" height="15" fill="rgb(234,196,3)" fg:x="992" fg:w="1"/><text x="80.8349%" y="607.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="80.5849%" y="581" width="0.0812%" height="15" fill="rgb(229,150,39)" fg:x="992" fg:w="1"/><text x="80.8349%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="80.5849%" y="565" width="0.0812%" height="15" fill="rgb(226,19,29)" fg:x="992" fg:w="1"/><text x="80.8349%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="80.5849%" y="549" width="0.0812%" height="15" fill="rgb(226,222,2)" fg:x="992" fg:w="1"/><text x="80.8349%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="80.5849%" y="533" width="0.0812%" height="15" fill="rgb(235,85,29)" fg:x="992" fg:w="1"/><text x="80.8349%" y="543.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="80.5849%" y="517" width="0.0812%" height="15" fill="rgb(237,194,43)" fg:x="992" fg:w="1"/><text x="80.8349%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="80.5849%" y="501" width="0.0812%" height="15" fill="rgb(211,4,42)" fg:x="992" fg:w="1"/><text x="80.8349%" y="511.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="80.5849%" y="485" width="0.0812%" height="15" fill="rgb(221,80,37)" fg:x="992" fg:w="1"/><text x="80.8349%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="80.5849%" y="469" width="0.0812%" height="15" fill="rgb(222,47,31)" fg:x="992" fg:w="1"/><text x="80.8349%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="80.5849%" y="453" width="0.0812%" height="15" fill="rgb(249,82,52)" fg:x="992" fg:w="1"/><text x="80.8349%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="80.5849%" y="437" width="0.0812%" height="15" fill="rgb(218,203,2)" fg:x="992" fg:w="1"/><text x="80.8349%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="80.5849%" y="421" width="0.0812%" height="15" fill="rgb(210,175,14)" fg:x="992" fg:w="1"/><text x="80.8349%" y="431.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.5849%" y="405" width="0.0812%" height="15" fill="rgb(216,210,12)" fg:x="992" fg:w="1"/><text x="80.8349%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.5849%" y="389" width="0.0812%" height="15" fill="rgb(229,120,18)" fg:x="992" fg:w="1"/><text x="80.8349%" y="399.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="80.5849%" y="373" width="0.0812%" height="15" fill="rgb(231,174,12)" fg:x="992" fg:w="1"/><text x="80.8349%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="80.5849%" y="357" width="0.0812%" height="15" fill="rgb(214,101,53)" fg:x="992" fg:w="1"/><text x="80.8349%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="80.5849%" y="341" width="0.0812%" height="15" fill="rgb(246,89,43)" fg:x="992" fg:w="1"/><text x="80.8349%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="80.5849%" y="325" width="0.0812%" height="15" fill="rgb(222,9,51)" fg:x="992" fg:w="1"/><text x="80.8349%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="80.5849%" y="309" width="0.0812%" height="15" fill="rgb(252,221,9)" fg:x="992" fg:w="1"/><text x="80.8349%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="80.5849%" y="293" width="0.0812%" height="15" fill="rgb(248,28,15)" fg:x="992" fg:w="1"/><text x="80.8349%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.5849%" y="277" width="0.0812%" height="15" fill="rgb(213,54,52)" fg:x="992" fg:w="1"/><text x="80.8349%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="80.5849%" y="261" width="0.0812%" height="15" fill="rgb(240,3,45)" fg:x="992" fg:w="1"/><text x="80.8349%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.5849%" y="245" width="0.0812%" height="15" fill="rgb(239,138,24)" fg:x="992" fg:w="1"/><text x="80.8349%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="80.5849%" y="229" width="0.0812%" height="15" fill="rgb(233,45,54)" fg:x="992" fg:w="1"/><text x="80.8349%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="80.5849%" y="213" width="0.0812%" height="15" fill="rgb(220,131,2)" fg:x="992" fg:w="1"/><text x="80.8349%" y="223.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="80.5849%" y="197" width="0.0812%" height="15" fill="rgb(240,154,36)" fg:x="992" fg:w="1"/><text x="80.8349%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.5849%" y="181" width="0.0812%" height="15" fill="rgb(251,221,1)" fg:x="992" fg:w="1"/><text x="80.8349%" y="191.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (2 samples, 0.16%)</title><rect x="80.6661%" y="661" width="0.1625%" height="15" fill="rgb(225,217,1)" fg:x="993" fg:w="2"/><text x="80.9161%" y="671.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="80.6661%" y="645" width="0.1625%" height="15" fill="rgb(241,105,49)" fg:x="993" fg:w="2"/><text x="80.9161%" y="655.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="80.6661%" y="629" width="0.1625%" height="15" fill="rgb(215,44,32)" fg:x="993" fg:w="2"/><text x="80.9161%" y="639.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="80.7474%" y="613" width="0.0812%" height="15" fill="rgb(213,222,14)" fg:x="994" fg:w="1"/><text x="80.9974%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="80.9911%" y="533" width="0.0812%" height="15" fill="rgb(207,99,52)" fg:x="997" fg:w="1"/><text x="81.2411%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="80.9911%" y="549" width="0.1625%" height="15" fill="rgb(214,208,52)" fg:x="997" fg:w="2"/><text x="81.2411%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.0723%" y="533" width="0.0812%" height="15" fill="rgb(244,169,0)" fg:x="998" fg:w="1"/><text x="81.3223%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.0723%" y="517" width="0.0812%" height="15" fill="rgb(216,193,37)" fg:x="998" fg:w="1"/><text x="81.3223%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.0723%" y="501" width="0.0812%" height="15" fill="rgb(212,158,10)" fg:x="998" fg:w="1"/><text x="81.3223%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.0723%" y="485" width="0.0812%" height="15" fill="rgb(213,110,20)" fg:x="998" fg:w="1"/><text x="81.3223%" y="495.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="81.0723%" y="469" width="0.0812%" height="15" fill="rgb(226,5,42)" fg:x="998" fg:w="1"/><text x="81.3223%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="81.1535%" y="501" width="0.0812%" height="15" fill="rgb(211,93,8)" fg:x="999" fg:w="1"/><text x="81.4035%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="81.2348%" y="485" width="0.1625%" height="15" fill="rgb(240,208,12)" fg:x="1000" fg:w="2"/><text x="81.4848%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="81.2348%" y="469" width="0.1625%" height="15" fill="rgb(233,127,50)" fg:x="1000" fg:w="2"/><text x="81.4848%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.2348%" y="453" width="0.1625%" height="15" fill="rgb(227,199,53)" fg:x="1000" fg:w="2"/><text x="81.4848%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="81.2348%" y="437" width="0.1625%" height="15" fill="rgb(235,199,10)" fg:x="1000" fg:w="2"/><text x="81.4848%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.2348%" y="421" width="0.1625%" height="15" fill="rgb(228,148,35)" fg:x="1000" fg:w="2"/><text x="81.4848%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="81.2348%" y="405" width="0.1625%" height="15" fill="rgb(217,87,19)" fg:x="1000" fg:w="2"/><text x="81.4848%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="81.2348%" y="389" width="0.1625%" height="15" fill="rgb(239,9,32)" fg:x="1000" fg:w="2"/><text x="81.4848%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="81.2348%" y="373" width="0.1625%" height="15" fill="rgb(229,101,29)" fg:x="1000" fg:w="2"/><text x="81.4848%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="81.3160%" y="357" width="0.0812%" height="15" fill="rgb(208,143,26)" fg:x="1001" fg:w="1"/><text x="81.5660%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.3160%" y="341" width="0.0812%" height="15" fill="rgb(214,10,2)" fg:x="1001" fg:w="1"/><text x="81.5660%" y="351.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (7 samples, 0.57%)</title><rect x="80.9098%" y="581" width="0.5686%" height="15" fill="rgb(254,203,30)" fg:x="996" fg:w="7"/><text x="81.1598%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (6 samples, 0.49%)</title><rect x="80.9911%" y="565" width="0.4874%" height="15" fill="rgb(242,45,3)" fg:x="997" fg:w="6"/><text x="81.2411%" y="575.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="81.1535%" y="549" width="0.3249%" height="15" fill="rgb(209,146,51)" fg:x="999" fg:w="4"/><text x="81.4035%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="81.1535%" y="533" width="0.3249%" height="15" fill="rgb(222,80,5)" fg:x="999" fg:w="4"/><text x="81.4035%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="81.1535%" y="517" width="0.3249%" height="15" fill="rgb(252,80,35)" fg:x="999" fg:w="4"/><text x="81.4035%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="81.2348%" y="501" width="0.2437%" height="15" fill="rgb(246,125,28)" fg:x="1000" fg:w="3"/><text x="81.4848%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="81.3972%" y="485" width="0.0812%" height="15" fill="rgb(224,143,51)" fg:x="1002" fg:w="1"/><text x="81.6472%" y="495.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="81.3972%" y="469" width="0.0812%" height="15" fill="rgb(205,24,17)" fg:x="1002" fg:w="1"/><text x="81.6472%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.3972%" y="453" width="0.0812%" height="15" fill="rgb(253,128,30)" fg:x="1002" fg:w="1"/><text x="81.6472%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="81.3972%" y="437" width="0.0812%" height="15" fill="rgb(214,153,25)" fg:x="1002" fg:w="1"/><text x="81.6472%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.3972%" y="421" width="0.0812%" height="15" fill="rgb(214,4,28)" fg:x="1002" fg:w="1"/><text x="81.6472%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="81.3972%" y="405" width="0.0812%" height="15" fill="rgb(235,179,52)" fg:x="1002" fg:w="1"/><text x="81.6472%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.3972%" y="389" width="0.0812%" height="15" fill="rgb(233,27,42)" fg:x="1002" fg:w="1"/><text x="81.6472%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="81.3972%" y="373" width="0.0812%" height="15" fill="rgb(238,35,25)" fg:x="1002" fg:w="1"/><text x="81.6472%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.3972%" y="357" width="0.0812%" height="15" fill="rgb(227,44,31)" fg:x="1002" fg:w="1"/><text x="81.6472%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.3972%" y="341" width="0.0812%" height="15" fill="rgb(232,201,13)" fg:x="1002" fg:w="1"/><text x="81.6472%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="81.3972%" y="325" width="0.0812%" height="15" fill="rgb(224,172,52)" fg:x="1002" fg:w="1"/><text x="81.6472%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.3972%" y="309" width="0.0812%" height="15" fill="rgb(214,27,26)" fg:x="1002" fg:w="1"/><text x="81.6472%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="81.3972%" y="293" width="0.0812%" height="15" fill="rgb(210,185,52)" fg:x="1002" fg:w="1"/><text x="81.6472%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.3972%" y="277" width="0.0812%" height="15" fill="rgb(249,59,32)" fg:x="1002" fg:w="1"/><text x="81.6472%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="81.3972%" y="261" width="0.0812%" height="15" fill="rgb(242,209,18)" fg:x="1002" fg:w="1"/><text x="81.6472%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="81.4785%" y="389" width="0.0812%" height="15" fill="rgb(229,0,18)" fg:x="1003" fg:w="1"/><text x="81.7285%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.4785%" y="373" width="0.0812%" height="15" fill="rgb(217,138,29)" fg:x="1003" fg:w="1"/><text x="81.7285%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.4785%" y="357" width="0.0812%" height="15" fill="rgb(215,72,42)" fg:x="1003" fg:w="1"/><text x="81.7285%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.4785%" y="341" width="0.0812%" height="15" fill="rgb(254,115,11)" fg:x="1003" fg:w="1"/><text x="81.7285%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.4785%" y="325" width="0.0812%" height="15" fill="rgb(205,133,39)" fg:x="1003" fg:w="1"/><text x="81.7285%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.5597%" y="389" width="0.0812%" height="15" fill="rgb(211,36,27)" fg:x="1004" fg:w="1"/><text x="81.8097%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="81.6409%" y="389" width="0.0812%" height="15" fill="rgb(221,48,10)" fg:x="1005" fg:w="1"/><text x="81.8909%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.6409%" y="373" width="0.0812%" height="15" fill="rgb(230,172,50)" fg:x="1005" fg:w="1"/><text x="81.8909%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.6409%" y="357" width="0.0812%" height="15" fill="rgb(249,72,18)" fg:x="1005" fg:w="1"/><text x="81.8909%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.6409%" y="341" width="0.0812%" height="15" fill="rgb(237,58,48)" fg:x="1005" fg:w="1"/><text x="81.8909%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.7222%" y="293" width="0.0812%" height="15" fill="rgb(242,123,3)" fg:x="1006" fg:w="1"/><text x="81.9722%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="81.7222%" y="277" width="0.0812%" height="15" fill="rgb(232,111,32)" fg:x="1006" fg:w="1"/><text x="81.9722%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="81.7222%" y="261" width="0.0812%" height="15" fill="rgb(229,108,3)" fg:x="1006" fg:w="1"/><text x="81.9722%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="81.7222%" y="245" width="0.0812%" height="15" fill="rgb(222,158,10)" fg:x="1006" fg:w="1"/><text x="81.9722%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="81.7222%" y="229" width="0.0812%" height="15" fill="rgb(205,34,49)" fg:x="1006" fg:w="1"/><text x="81.9722%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="81.7222%" y="213" width="0.0812%" height="15" fill="rgb(232,21,14)" fg:x="1006" fg:w="1"/><text x="81.9722%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="81.7222%" y="309" width="0.1625%" height="15" fill="rgb(229,127,44)" fg:x="1006" fg:w="2"/><text x="81.9722%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.8034%" y="293" width="0.0812%" height="15" fill="rgb(232,171,4)" fg:x="1007" fg:w="1"/><text x="82.0534%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.8846%" y="277" width="0.0812%" height="15" fill="rgb(250,92,16)" fg:x="1008" fg:w="1"/><text x="82.1346%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="81.8846%" y="261" width="0.0812%" height="15" fill="rgb(230,103,38)" fg:x="1008" fg:w="1"/><text x="82.1346%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.8846%" y="245" width="0.0812%" height="15" fill="rgb(253,167,9)" fg:x="1008" fg:w="1"/><text x="82.1346%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.8846%" y="229" width="0.0812%" height="15" fill="rgb(222,118,11)" fg:x="1008" fg:w="1"/><text x="82.1346%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.8846%" y="213" width="0.0812%" height="15" fill="rgb(240,202,0)" fg:x="1008" fg:w="1"/><text x="82.1346%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="81.8846%" y="309" width="0.1625%" height="15" fill="rgb(236,124,4)" fg:x="1008" fg:w="2"/><text x="82.1346%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="81.8846%" y="293" width="0.1625%" height="15" fill="rgb(244,128,18)" fg:x="1008" fg:w="2"/><text x="82.1346%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="81.9659%" y="277" width="0.0812%" height="15" fill="rgb(231,206,5)" fg:x="1009" fg:w="1"/><text x="82.2159%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="81.9659%" y="261" width="0.0812%" height="15" fill="rgb(237,111,8)" fg:x="1009" fg:w="1"/><text x="82.2159%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.0471%" y="261" width="0.0812%" height="15" fill="rgb(225,127,3)" fg:x="1010" fg:w="1"/><text x="82.2971%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.0471%" y="245" width="0.0812%" height="15" fill="rgb(222,85,48)" fg:x="1010" fg:w="1"/><text x="82.2971%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="82.1284%" y="245" width="0.1625%" height="15" fill="rgb(221,108,37)" fg:x="1011" fg:w="2"/><text x="82.3784%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="82.1284%" y="229" width="0.1625%" height="15" fill="rgb(226,169,36)" fg:x="1011" fg:w="2"/><text x="82.3784%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.2096%" y="213" width="0.0812%" height="15" fill="rgb(237,76,12)" fg:x="1012" fg:w="1"/><text x="82.4596%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="82.2908%" y="229" width="0.0812%" height="15" fill="rgb(210,227,32)" fg:x="1013" fg:w="1"/><text x="82.5408%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="82.2908%" y="245" width="0.1625%" height="15" fill="rgb(214,117,20)" fg:x="1013" fg:w="2"/><text x="82.5408%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="82.3721%" y="229" width="0.0812%" height="15" fill="rgb(234,119,41)" fg:x="1014" fg:w="1"/><text x="82.6221%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="82.3721%" y="213" width="0.0812%" height="15" fill="rgb(230,130,47)" fg:x="1014" fg:w="1"/><text x="82.6221%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="82.3721%" y="197" width="0.0812%" height="15" fill="rgb(215,21,41)" fg:x="1014" fg:w="1"/><text x="82.6221%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.4533%" y="181" width="0.0812%" height="15" fill="rgb(226,26,53)" fg:x="1015" fg:w="1"/><text x="82.7033%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="82.5345%" y="181" width="0.1625%" height="15" fill="rgb(221,92,23)" fg:x="1016" fg:w="2"/><text x="82.7845%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="82.6158%" y="165" width="0.0812%" height="15" fill="rgb(213,156,21)" fg:x="1017" fg:w="1"/><text x="82.8658%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (10 samples, 0.81%)</title><rect x="82.6970%" y="181" width="0.8123%" height="15" fill="rgb(254,166,29)" fg:x="1018" fg:w="10"/><text x="82.9470%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (10 samples, 0.81%)</title><rect x="82.6970%" y="165" width="0.8123%" height="15" fill="rgb(213,71,1)" fg:x="1018" fg:w="10"/><text x="82.9470%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (10 samples, 0.81%)</title><rect x="82.6970%" y="149" width="0.8123%" height="15" fill="rgb(245,8,13)" fg:x="1018" fg:w="10"/><text x="82.9470%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="83.5093%" y="181" width="0.2437%" height="15" fill="rgb(213,32,32)" fg:x="1028" fg:w="3"/><text x="83.7593%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 1.38%)</title><rect x="82.4533%" y="229" width="1.3810%" height="15" fill="rgb(251,86,50)" fg:x="1015" fg:w="17"/><text x="82.7033%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (17 samples, 1.38%)</title><rect x="82.4533%" y="213" width="1.3810%" height="15" fill="rgb(252,92,41)" fg:x="1015" fg:w="17"/><text x="82.7033%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (17 samples, 1.38%)</title><rect x="82.4533%" y="197" width="1.3810%" height="15" fill="rgb(234,70,35)" fg:x="1015" fg:w="17"/><text x="82.7033%" y="207.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="83.7530%" y="181" width="0.0812%" height="15" fill="rgb(210,157,19)" fg:x="1031" fg:w="1"/><text x="84.0030%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.7530%" y="165" width="0.0812%" height="15" fill="rgb(206,20,45)" fg:x="1031" fg:w="1"/><text x="84.0030%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="83.8343%" y="229" width="0.0812%" height="15" fill="rgb(207,34,7)" fg:x="1032" fg:w="1"/><text x="84.0843%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (23 samples, 1.87%)</title><rect x="82.1284%" y="261" width="1.8684%" height="15" fill="rgb(253,151,14)" fg:x="1011" fg:w="23"/><text x="82.3784%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (19 samples, 1.54%)</title><rect x="82.4533%" y="245" width="1.5435%" height="15" fill="rgb(252,1,18)" fg:x="1015" fg:w="19"/><text x="82.7033%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="83.9155%" y="229" width="0.0812%" height="15" fill="rgb(214,77,52)" fg:x="1033" fg:w="1"/><text x="84.1655%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="83.9155%" y="213" width="0.0812%" height="15" fill="rgb(254,106,35)" fg:x="1033" fg:w="1"/><text x="84.1655%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="83.9968%" y="261" width="0.1625%" height="15" fill="rgb(212,67,40)" fg:x="1034" fg:w="2"/><text x="84.2468%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="83.9968%" y="245" width="0.1625%" height="15" fill="rgb(228,76,23)" fg:x="1034" fg:w="2"/><text x="84.2468%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="84.0780%" y="229" width="0.0812%" height="15" fill="rgb(250,198,5)" fg:x="1035" fg:w="1"/><text x="84.3280%" y="239.50"></text></g><g><title>regex::regex::string::Regex::new (27 samples, 2.19%)</title><rect x="82.0471%" y="309" width="2.1933%" height="15" fill="rgb(209,20,25)" fg:x="1010" fg:w="27"/><text x="82.2971%" y="319.50">r..</text></g><g><title>regex::builders::string::RegexBuilder::build (27 samples, 2.19%)</title><rect x="82.0471%" y="293" width="2.1933%" height="15" fill="rgb(236,32,4)" fg:x="1010" fg:w="27"/><text x="82.2971%" y="303.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (27 samples, 2.19%)</title><rect x="82.0471%" y="277" width="2.1933%" height="15" fill="rgb(215,31,6)" fg:x="1010" fg:w="27"/><text x="82.2971%" y="287.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="84.1592%" y="261" width="0.0812%" height="15" fill="rgb(207,186,49)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="271.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (32 samples, 2.60%)</title><rect x="81.7222%" y="325" width="2.5995%" height="15" fill="rgb(211,212,49)" fg:x="1006" fg:w="32"/><text x="81.9722%" y="335.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="84.2405%" y="309" width="0.0812%" height="15" fill="rgb(229,51,41)" fg:x="1037" fg:w="1"/><text x="84.4905%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="84.2405%" y="293" width="0.0812%" height="15" fill="rgb(205,225,36)" fg:x="1037" fg:w="1"/><text x="84.4905%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="84.2405%" y="277" width="0.0812%" height="15" fill="rgb(209,213,45)" fg:x="1037" fg:w="1"/><text x="84.4905%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="84.2405%" y="261" width="0.0812%" height="15" fill="rgb(219,35,49)" fg:x="1037" fg:w="1"/><text x="84.4905%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="84.2405%" y="245" width="0.0812%" height="15" fill="rgb(215,205,22)" fg:x="1037" fg:w="1"/><text x="84.4905%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="84.4029%" y="293" width="0.0812%" height="15" fill="rgb(248,204,34)" fg:x="1039" fg:w="1"/><text x="84.6529%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="84.4029%" y="277" width="0.0812%" height="15" fill="rgb(219,223,31)" fg:x="1039" fg:w="1"/><text x="84.6529%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.4842%" y="213" width="0.0812%" height="15" fill="rgb(236,14,8)" fg:x="1040" fg:w="1"/><text x="84.7342%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.4842%" y="197" width="0.0812%" height="15" fill="rgb(243,129,23)" fg:x="1040" fg:w="1"/><text x="84.7342%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.4842%" y="181" width="0.0812%" height="15" fill="rgb(205,204,5)" fg:x="1040" fg:w="1"/><text x="84.7342%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.32%)</title><rect x="84.3217%" y="309" width="0.3249%" height="15" fill="rgb(244,115,32)" fg:x="1038" fg:w="4"/><text x="84.5717%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="84.4842%" y="293" width="0.1625%" height="15" fill="rgb(229,123,14)" fg:x="1040" fg:w="2"/><text x="84.7342%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="84.4842%" y="277" width="0.1625%" height="15" fill="rgb(250,85,1)" fg:x="1040" fg:w="2"/><text x="84.7342%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="84.4842%" y="261" width="0.1625%" height="15" fill="rgb(209,141,54)" fg:x="1040" fg:w="2"/><text x="84.7342%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="84.4842%" y="245" width="0.1625%" height="15" fill="rgb(244,107,39)" fg:x="1040" fg:w="2"/><text x="84.7342%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="84.4842%" y="229" width="0.1625%" height="15" fill="rgb(230,68,26)" fg:x="1040" fg:w="2"/><text x="84.7342%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="84.5654%" y="213" width="0.0812%" height="15" fill="rgb(220,178,33)" fg:x="1041" fg:w="1"/><text x="84.8154%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="84.6466%" y="261" width="0.0812%" height="15" fill="rgb(220,77,53)" fg:x="1042" fg:w="1"/><text x="84.8966%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.6466%" y="245" width="0.0812%" height="15" fill="rgb(224,108,19)" fg:x="1042" fg:w="1"/><text x="84.8966%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="84.6466%" y="229" width="0.0812%" height="15" fill="rgb(223,203,27)" fg:x="1042" fg:w="1"/><text x="84.8966%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.6466%" y="213" width="0.0812%" height="15" fill="rgb(211,32,46)" fg:x="1042" fg:w="1"/><text x="84.8966%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="84.7279%" y="245" width="0.1625%" height="15" fill="rgb(240,101,27)" fg:x="1043" fg:w="2"/><text x="84.9779%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="84.7279%" y="229" width="0.1625%" height="15" fill="rgb(217,210,11)" fg:x="1043" fg:w="2"/><text x="84.9779%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="84.8903%" y="245" width="0.0812%" height="15" fill="rgb(236,130,21)" fg:x="1045" fg:w="1"/><text x="85.1403%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="84.8903%" y="229" width="0.0812%" height="15" fill="rgb(250,136,8)" fg:x="1045" fg:w="1"/><text x="85.1403%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="85.0528%" y="133" width="0.1625%" height="15" fill="rgb(243,223,36)" fg:x="1047" fg:w="2"/><text x="85.3028%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.2153%" y="133" width="0.0812%" height="15" fill="rgb(246,184,8)" fg:x="1049" fg:w="1"/><text x="85.4653%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="85.2965%" y="133" width="0.1625%" height="15" fill="rgb(222,158,36)" fg:x="1050" fg:w="2"/><text x="85.5465%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="85.2965%" y="117" width="0.1625%" height="15" fill="rgb(210,220,19)" fg:x="1050" fg:w="2"/><text x="85.5465%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="85.2965%" y="101" width="0.1625%" height="15" fill="rgb(246,44,38)" fg:x="1050" fg:w="2"/><text x="85.5465%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="85.2965%" y="85" width="0.1625%" height="15" fill="rgb(246,186,14)" fg:x="1050" fg:w="2"/><text x="85.5465%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="85.4590%" y="133" width="0.1625%" height="15" fill="rgb(233,193,20)" fg:x="1052" fg:w="2"/><text x="85.7090%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.7027%" y="85" width="0.0812%" height="15" fill="rgb(215,60,5)" fg:x="1055" fg:w="1"/><text x="85.9527%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="85.6214%" y="133" width="0.2437%" height="15" fill="rgb(207,128,10)" fg:x="1054" fg:w="3"/><text x="85.8714%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="85.6214%" y="117" width="0.2437%" height="15" fill="rgb(238,84,54)" fg:x="1054" fg:w="3"/><text x="85.8714%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="85.6214%" y="101" width="0.2437%" height="15" fill="rgb(213,130,11)" fg:x="1054" fg:w="3"/><text x="85.8714%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="85.7839%" y="85" width="0.0812%" height="15" fill="rgb(235,62,9)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="85.8652%" y="133" width="0.0812%" height="15" fill="rgb(222,64,24)" fg:x="1057" fg:w="1"/><text x="86.1152%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="85.8652%" y="117" width="0.0812%" height="15" fill="rgb(238,193,42)" fg:x="1057" fg:w="1"/><text x="86.1152%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="85.8652%" y="101" width="0.0812%" height="15" fill="rgb(243,204,46)" fg:x="1057" fg:w="1"/><text x="86.1152%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (20 samples, 1.62%)</title><rect x="85.9464%" y="133" width="1.6247%" height="15" fill="rgb(243,196,11)" fg:x="1058" fg:w="20"/><text x="86.1964%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (20 samples, 1.62%)</title><rect x="85.9464%" y="117" width="1.6247%" height="15" fill="rgb(232,77,22)" fg:x="1058" fg:w="20"/><text x="86.1964%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (20 samples, 1.62%)</title><rect x="85.9464%" y="101" width="1.6247%" height="15" fill="rgb(215,80,25)" fg:x="1058" fg:w="20"/><text x="86.1964%" y="111.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="87.5711%" y="133" width="0.0812%" height="15" fill="rgb(210,173,7)" fg:x="1078" fg:w="1"/><text x="87.8211%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="87.6523%" y="133" width="0.0812%" height="15" fill="rgb(207,101,10)" fg:x="1079" fg:w="1"/><text x="87.9023%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 2.84%)</title><rect x="84.9716%" y="229" width="2.8432%" height="15" fill="rgb(246,57,48)" fg:x="1046" fg:w="35"/><text x="85.2216%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (35 samples, 2.84%)</title><rect x="84.9716%" y="213" width="2.8432%" height="15" fill="rgb(236,184,40)" fg:x="1046" fg:w="35"/><text x="85.2216%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (35 samples, 2.84%)</title><rect x="84.9716%" y="197" width="2.8432%" height="15" fill="rgb(210,205,13)" fg:x="1046" fg:w="35"/><text x="85.2216%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (35 samples, 2.84%)</title><rect x="84.9716%" y="181" width="2.8432%" height="15" fill="rgb(231,129,42)" fg:x="1046" fg:w="35"/><text x="85.2216%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (35 samples, 2.84%)</title><rect x="84.9716%" y="165" width="2.8432%" height="15" fill="rgb(220,229,54)" fg:x="1046" fg:w="35"/><text x="85.2216%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (35 samples, 2.84%)</title><rect x="84.9716%" y="149" width="2.8432%" height="15" fill="rgb(230,192,26)" fg:x="1046" fg:w="35"/><text x="85.2216%" y="159.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="87.7335%" y="133" width="0.0812%" height="15" fill="rgb(253,18,30)" fg:x="1080" fg:w="1"/><text x="87.9835%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (43 samples, 3.49%)</title><rect x="84.7279%" y="261" width="3.4931%" height="15" fill="rgb(216,62,53)" fg:x="1043" fg:w="43"/><text x="84.9779%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (40 samples, 3.25%)</title><rect x="84.9716%" y="245" width="3.2494%" height="15" fill="rgb(230,79,29)" fg:x="1046" fg:w="40"/><text x="85.2216%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="87.8148%" y="229" width="0.4062%" height="15" fill="rgb(242,26,26)" fg:x="1081" fg:w="5"/><text x="88.0648%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="87.8960%" y="213" width="0.3249%" height="15" fill="rgb(227,125,21)" fg:x="1082" fg:w="4"/><text x="88.1460%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="88.3022%" y="229" width="0.1625%" height="15" fill="rgb(229,93,26)" fg:x="1087" fg:w="2"/><text x="88.5522%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="88.3834%" y="213" width="0.0812%" height="15" fill="rgb(227,228,8)" fg:x="1088" fg:w="1"/><text x="88.6334%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="88.4647%" y="229" width="0.0812%" height="15" fill="rgb(233,56,0)" fg:x="1089" fg:w="1"/><text x="88.7147%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="88.5459%" y="229" width="0.0812%" height="15" fill="rgb(225,185,17)" fg:x="1090" fg:w="1"/><text x="88.7959%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="88.5459%" y="213" width="0.0812%" height="15" fill="rgb(238,202,30)" fg:x="1090" fg:w="1"/><text x="88.7959%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.49%)</title><rect x="88.2210%" y="261" width="0.4874%" height="15" fill="rgb(236,60,13)" fg:x="1086" fg:w="6"/><text x="88.4710%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.49%)</title><rect x="88.2210%" y="245" width="0.4874%" height="15" fill="rgb(244,92,0)" fg:x="1086" fg:w="6"/><text x="88.4710%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="88.6271%" y="229" width="0.0812%" height="15" fill="rgb(225,57,15)" fg:x="1091" fg:w="1"/><text x="88.8771%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.6271%" y="213" width="0.0812%" height="15" fill="rgb(228,5,28)" fg:x="1091" fg:w="1"/><text x="88.8771%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.6271%" y="197" width="0.0812%" height="15" fill="rgb(252,34,51)" fg:x="1091" fg:w="1"/><text x="88.8771%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.6271%" y="181" width="0.0812%" height="15" fill="rgb(235,58,7)" fg:x="1091" fg:w="1"/><text x="88.8771%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="88.7084%" y="229" width="0.1625%" height="15" fill="rgb(250,132,20)" fg:x="1092" fg:w="2"/><text x="88.9584%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="88.7084%" y="213" width="0.1625%" height="15" fill="rgb(217,164,0)" fg:x="1092" fg:w="2"/><text x="88.9584%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="88.7896%" y="197" width="0.0812%" height="15" fill="rgb(208,220,35)" fg:x="1093" fg:w="1"/><text x="89.0396%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (57 samples, 4.63%)</title><rect x="84.3217%" y="325" width="4.6304%" height="15" fill="rgb(227,42,51)" fg:x="1038" fg:w="57"/><text x="84.5717%" y="335.50">indef..</text></g><g><title>regex::regex::string::Regex::new (53 samples, 4.31%)</title><rect x="84.6466%" y="309" width="4.3054%" height="15" fill="rgb(225,146,38)" fg:x="1042" fg:w="53"/><text x="84.8966%" y="319.50">regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (53 samples, 4.31%)</title><rect x="84.6466%" y="293" width="4.3054%" height="15" fill="rgb(252,108,37)" fg:x="1042" fg:w="53"/><text x="84.8966%" y="303.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (53 samples, 4.31%)</title><rect x="84.6466%" y="277" width="4.3054%" height="15" fill="rgb(244,101,24)" fg:x="1042" fg:w="53"/><text x="84.8966%" y="287.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="88.7084%" y="261" width="0.2437%" height="15" fill="rgb(213,161,50)" fg:x="1092" fg:w="3"/><text x="88.9584%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="88.7084%" y="245" width="0.2437%" height="15" fill="rgb(248,159,19)" fg:x="1092" fg:w="3"/><text x="88.9584%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="88.8708%" y="229" width="0.0812%" height="15" fill="rgb(233,179,15)" fg:x="1094" fg:w="1"/><text x="89.1208%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="88.9521%" y="293" width="0.0812%" height="15" fill="rgb(248,178,3)" fg:x="1095" fg:w="1"/><text x="89.2021%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="88.9521%" y="277" width="0.0812%" height="15" fill="rgb(245,190,41)" fg:x="1095" fg:w="1"/><text x="89.2021%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="88.9521%" y="261" width="0.0812%" height="15" fill="rgb(218,151,19)" fg:x="1095" fg:w="1"/><text x="89.2021%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="88.9521%" y="245" width="0.0812%" height="15" fill="rgb(245,25,44)" fg:x="1095" fg:w="1"/><text x="89.2021%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="88.9521%" y="229" width="0.0812%" height="15" fill="rgb(235,172,47)" fg:x="1095" fg:w="1"/><text x="89.2021%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.9521%" y="213" width="0.0812%" height="15" fill="rgb(246,33,12)" fg:x="1095" fg:w="1"/><text x="89.2021%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.0333%" y="245" width="0.0812%" height="15" fill="rgb(214,124,7)" fg:x="1096" fg:w="1"/><text x="89.2833%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.0333%" y="229" width="0.0812%" height="15" fill="rgb(246,186,18)" fg:x="1096" fg:w="1"/><text x="89.2833%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.1145%" y="229" width="0.0812%" height="15" fill="rgb(231,94,1)" fg:x="1097" fg:w="1"/><text x="89.3645%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="89.1958%" y="229" width="0.0812%" height="15" fill="rgb(208,33,48)" fg:x="1098" fg:w="1"/><text x="89.4458%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="89.1958%" y="213" width="0.0812%" height="15" fill="rgb(208,195,44)" fg:x="1098" fg:w="1"/><text x="89.4458%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (3 samples, 0.24%)</title><rect x="89.1145%" y="245" width="0.2437%" height="15" fill="rgb(226,13,52)" fg:x="1097" fg:w="3"/><text x="89.3645%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="89.2770%" y="229" width="0.0812%" height="15" fill="rgb(217,219,45)" fg:x="1099" fg:w="1"/><text x="89.5270%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="89.2770%" y="213" width="0.0812%" height="15" fill="rgb(223,45,25)" fg:x="1099" fg:w="1"/><text x="89.5270%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="89.2770%" y="197" width="0.0812%" height="15" fill="rgb(241,163,0)" fg:x="1099" fg:w="1"/><text x="89.5270%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.2770%" y="181" width="0.0812%" height="15" fill="rgb(216,68,47)" fg:x="1099" fg:w="1"/><text x="89.5270%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.2770%" y="165" width="0.0812%" height="15" fill="rgb(236,119,45)" fg:x="1099" fg:w="1"/><text x="89.5270%" y="175.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (98 samples, 7.96%)</title><rect x="81.4785%" y="405" width="7.9610%" height="15" fill="rgb(209,188,24)" fg:x="1003" fg:w="98"/><text x="81.7285%" y="415.50">&lt;&amp;kernel::m..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (95 samples, 7.72%)</title><rect x="81.7222%" y="389" width="7.7173%" height="15" fill="rgb(221,118,7)" fg:x="1006" fg:w="95"/><text x="81.9722%" y="399.50">plugins_cor..</text></g><g><title>indefinite::indefinite (95 samples, 7.72%)</title><rect x="81.7222%" y="373" width="7.7173%" height="15" fill="rgb(213,148,43)" fg:x="1006" fg:w="95"/><text x="81.9722%" y="383.50">indefinite:..</text></g><g><title>indefinite::methods::indefinite (95 samples, 7.72%)</title><rect x="81.7222%" y="357" width="7.7173%" height="15" fill="rgb(231,21,43)" fg:x="1006" fg:w="95"/><text x="81.9722%" y="367.50">indefinite:..</text></g><g><title>indefinite::methods::apply_rules (95 samples, 7.72%)</title><rect x="81.7222%" y="341" width="7.7173%" height="15" fill="rgb(232,213,43)" fg:x="1006" fg:w="95"/><text x="81.9722%" y="351.50">indefinite:..</text></g><g><title>indefinite::rules::other::Other::run (6 samples, 0.49%)</title><rect x="88.9521%" y="325" width="0.4874%" height="15" fill="rgb(239,145,50)" fg:x="1095" fg:w="6"/><text x="89.2021%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (6 samples, 0.49%)</title><rect x="88.9521%" y="309" width="0.4874%" height="15" fill="rgb(222,131,18)" fg:x="1095" fg:w="6"/><text x="89.2021%" y="319.50"></text></g><g><title>regex::regex::string::Regex::new (5 samples, 0.41%)</title><rect x="89.0333%" y="293" width="0.4062%" height="15" fill="rgb(243,181,13)" fg:x="1096" fg:w="5"/><text x="89.2833%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (5 samples, 0.41%)</title><rect x="89.0333%" y="277" width="0.4062%" height="15" fill="rgb(212,74,41)" fg:x="1096" fg:w="5"/><text x="89.2833%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (5 samples, 0.41%)</title><rect x="89.0333%" y="261" width="0.4062%" height="15" fill="rgb(237,143,34)" fg:x="1096" fg:w="5"/><text x="89.2833%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="89.3582%" y="245" width="0.0812%" height="15" fill="rgb(228,139,0)" fg:x="1100" fg:w="1"/><text x="89.6082%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="89.3582%" y="229" width="0.0812%" height="15" fill="rgb(227,214,11)" fg:x="1100" fg:w="1"/><text x="89.6082%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="89.3582%" y="213" width="0.0812%" height="15" fill="rgb(228,118,39)" fg:x="1100" fg:w="1"/><text x="89.6082%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="89.4395%" y="293" width="0.0812%" height="15" fill="rgb(207,117,22)" fg:x="1101" fg:w="1"/><text x="89.6895%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.4395%" y="277" width="0.0812%" height="15" fill="rgb(225,91,8)" fg:x="1101" fg:w="1"/><text x="89.6895%" y="287.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="89.4395%" y="261" width="0.0812%" height="15" fill="rgb(230,219,48)" fg:x="1101" fg:w="1"/><text x="89.6895%" y="271.50"></text></g><g><title>plugins_core::tools::contained_by (2 samples, 0.16%)</title><rect x="89.4395%" y="357" width="0.1625%" height="15" fill="rgb(244,0,23)" fg:x="1101" fg:w="2"/><text x="89.6895%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="89.4395%" y="341" width="0.1625%" height="15" fill="rgb(206,212,23)" fg:x="1101" fg:w="2"/><text x="89.6895%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="89.4395%" y="325" width="0.1625%" height="15" fill="rgb(254,62,10)" fg:x="1101" fg:w="2"/><text x="89.6895%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="89.4395%" y="309" width="0.1625%" height="15" fill="rgb(236,58,8)" fg:x="1101" fg:w="2"/><text x="89.6895%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="89.5207%" y="293" width="0.0812%" height="15" fill="rgb(232,212,17)" fg:x="1102" fg:w="1"/><text x="89.7707%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="89.5207%" y="277" width="0.0812%" height="15" fill="rgb(206,132,9)" fg:x="1102" fg:w="1"/><text x="89.7707%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="89.5207%" y="261" width="0.0812%" height="15" fill="rgb(234,97,28)" fg:x="1102" fg:w="1"/><text x="89.7707%" y="271.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (3 samples, 0.24%)</title><rect x="89.4395%" y="373" width="0.2437%" height="15" fill="rgb(254,144,9)" fg:x="1101" fg:w="3"/><text x="89.6895%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="89.6019%" y="357" width="0.0812%" height="15" fill="rgb(244,204,43)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="89.6019%" y="341" width="0.0812%" height="15" fill="rgb(248,177,16)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="89.6019%" y="325" width="0.0812%" height="15" fill="rgb(219,110,15)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="89.6019%" y="309" width="0.0812%" height="15" fill="rgb(212,203,25)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="89.6019%" y="293" width="0.0812%" height="15" fill="rgb(205,50,1)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="89.6019%" y="277" width="0.0812%" height="15" fill="rgb(222,152,41)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="89.6019%" y="261" width="0.0812%" height="15" fill="rgb(236,83,3)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="89.6019%" y="245" width="0.0812%" height="15" fill="rgb(214,30,54)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="89.6019%" y="229" width="0.0812%" height="15" fill="rgb(250,117,31)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="89.6019%" y="213" width="0.0812%" height="15" fill="rgb(228,77,14)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="89.6019%" y="197" width="0.0812%" height="15" fill="rgb(241,3,28)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="89.6019%" y="181" width="0.0812%" height="15" fill="rgb(221,175,52)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="89.6019%" y="165" width="0.0812%" height="15" fill="rgb(237,91,6)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="89.6019%" y="149" width="0.0812%" height="15" fill="rgb(246,46,42)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="89.6019%" y="133" width="0.0812%" height="15" fill="rgb(235,199,0)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="89.6019%" y="117" width="0.0812%" height="15" fill="rgb(224,44,40)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.6019%" y="101" width="0.0812%" height="15" fill="rgb(209,24,35)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="111.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (4 samples, 0.32%)</title><rect x="89.4395%" y="405" width="0.3249%" height="15" fill="rgb(244,46,22)" fg:x="1101" fg:w="4"/><text x="89.6895%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (4 samples, 0.32%)</title><rect x="89.4395%" y="389" width="0.3249%" height="15" fill="rgb(235,99,8)" fg:x="1101" fg:w="4"/><text x="89.6895%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="89.6832%" y="373" width="0.0812%" height="15" fill="rgb(218,127,36)" fg:x="1104" fg:w="1"/><text x="89.9332%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="89.6832%" y="357" width="0.0812%" height="15" fill="rgb(238,47,46)" fg:x="1104" fg:w="1"/><text x="89.9332%" y="367.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="89.6832%" y="341" width="0.0812%" height="15" fill="rgb(233,65,17)" fg:x="1104" fg:w="1"/><text x="89.9332%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.6832%" y="325" width="0.0812%" height="15" fill="rgb(239,22,33)" fg:x="1104" fg:w="1"/><text x="89.9332%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="89.7644%" y="277" width="0.0812%" height="15" fill="rgb(243,66,43)" fg:x="1105" fg:w="1"/><text x="90.0144%" y="287.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="89.7644%" y="261" width="0.0812%" height="15" fill="rgb(235,210,28)" fg:x="1105" fg:w="1"/><text x="90.0144%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="89.7644%" y="245" width="0.0812%" height="15" fill="rgb(205,191,50)" fg:x="1105" fg:w="1"/><text x="90.0144%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="89.7644%" y="229" width="0.0812%" height="15" fill="rgb(251,217,19)" fg:x="1105" fg:w="1"/><text x="90.0144%" y="239.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="89.7644%" y="213" width="0.0812%" height="15" fill="rgb(205,174,37)" fg:x="1105" fg:w="1"/><text x="90.0144%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="89.7644%" y="197" width="0.0812%" height="15" fill="rgb(212,158,42)" fg:x="1105" fg:w="1"/><text x="90.0144%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.08%)</title><rect x="89.7644%" y="181" width="0.0812%" height="15" fill="rgb(212,208,51)" fg:x="1105" fg:w="1"/><text x="90.0144%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.7644%" y="165" width="0.0812%" height="15" fill="rgb(225,198,20)" fg:x="1105" fg:w="1"/><text x="90.0144%" y="175.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (2 samples, 0.16%)</title><rect x="89.7644%" y="389" width="0.1625%" height="15" fill="rgb(247,41,44)" fg:x="1105" fg:w="2"/><text x="90.0144%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (2 samples, 0.16%)</title><rect x="89.7644%" y="373" width="0.1625%" height="15" fill="rgb(228,33,41)" fg:x="1105" fg:w="2"/><text x="90.0144%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (2 samples, 0.16%)</title><rect x="89.7644%" y="357" width="0.1625%" height="15" fill="rgb(215,47,52)" fg:x="1105" fg:w="2"/><text x="90.0144%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (2 samples, 0.16%)</title><rect x="89.7644%" y="341" width="0.1625%" height="15" fill="rgb(248,106,37)" fg:x="1105" fg:w="2"/><text x="90.0144%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (2 samples, 0.16%)</title><rect x="89.7644%" y="325" width="0.1625%" height="15" fill="rgb(238,91,29)" fg:x="1105" fg:w="2"/><text x="90.0144%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (2 samples, 0.16%)</title><rect x="89.7644%" y="309" width="0.1625%" height="15" fill="rgb(226,111,40)" fg:x="1105" fg:w="2"/><text x="90.0144%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (2 samples, 0.16%)</title><rect x="89.7644%" y="293" width="0.1625%" height="15" fill="rgb(229,159,36)" fg:x="1105" fg:w="2"/><text x="90.0144%" y="303.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (1 samples, 0.08%)</title><rect x="89.8457%" y="277" width="0.0812%" height="15" fill="rgb(221,109,4)" fg:x="1106" fg:w="1"/><text x="90.0957%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="89.8457%" y="261" width="0.0812%" height="15" fill="rgb(236,56,25)" fg:x="1106" fg:w="1"/><text x="90.0957%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="89.8457%" y="245" width="0.0812%" height="15" fill="rgb(244,113,23)" fg:x="1106" fg:w="1"/><text x="90.0957%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="89.8457%" y="229" width="0.0812%" height="15" fill="rgb(249,132,2)" fg:x="1106" fg:w="1"/><text x="90.0957%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="89.8457%" y="213" width="0.0812%" height="15" fill="rgb(205,185,21)" fg:x="1106" fg:w="1"/><text x="90.0957%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.8457%" y="197" width="0.0812%" height="15" fill="rgb(245,130,2)" fg:x="1106" fg:w="1"/><text x="90.0957%" y="207.50"></text></g><g><title>plugins_core::library::actions::reply_ok (3 samples, 0.24%)</title><rect x="89.7644%" y="405" width="0.2437%" height="15" fill="rgb(246,71,26)" fg:x="1105" fg:w="3"/><text x="90.0144%" y="415.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="89.9269%" y="389" width="0.0812%" height="15" fill="rgb(234,194,6)" fg:x="1107" fg:w="1"/><text x="90.1769%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (1 samples, 0.08%)</title><rect x="89.9269%" y="373" width="0.0812%" height="15" fill="rgb(206,24,32)" fg:x="1107" fg:w="1"/><text x="90.1769%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="89.9269%" y="357" width="0.0812%" height="15" fill="rgb(233,7,54)" fg:x="1107" fg:w="1"/><text x="90.1769%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="89.9269%" y="341" width="0.0812%" height="15" fill="rgb(252,46,1)" fg:x="1107" fg:w="1"/><text x="90.1769%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="89.9269%" y="325" width="0.0812%" height="15" fill="rgb(216,113,53)" fg:x="1107" fg:w="1"/><text x="90.1769%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.9269%" y="309" width="0.0812%" height="15" fill="rgb(215,40,24)" fg:x="1107" fg:w="1"/><text x="90.1769%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.9269%" y="293" width="0.0812%" height="15" fill="rgb(233,222,8)" fg:x="1107" fg:w="1"/><text x="90.1769%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="89.9269%" y="277" width="0.0812%" height="15" fill="rgb(248,73,28)" fg:x="1107" fg:w="1"/><text x="90.1769%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="90.0081%" y="389" width="0.0812%" height="15" fill="rgb(247,126,28)" fg:x="1108" fg:w="1"/><text x="90.2581%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="90.0081%" y="373" width="0.0812%" height="15" fill="rgb(242,173,54)" fg:x="1108" fg:w="1"/><text x="90.2581%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="90.0081%" y="357" width="0.0812%" height="15" fill="rgb(244,186,22)" fg:x="1108" fg:w="1"/><text x="90.2581%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="90.0081%" y="341" width="0.0812%" height="15" fill="rgb(231,187,4)" fg:x="1108" fg:w="1"/><text x="90.2581%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.0081%" y="325" width="0.0812%" height="15" fill="rgb(252,66,47)" fg:x="1108" fg:w="1"/><text x="90.2581%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.0081%" y="309" width="0.0812%" height="15" fill="rgb(240,228,28)" fg:x="1108" fg:w="1"/><text x="90.2581%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.0081%" y="293" width="0.0812%" height="15" fill="rgb(237,63,43)" fg:x="1108" fg:w="1"/><text x="90.2581%" y="303.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="90.0894%" y="389" width="0.0812%" height="15" fill="rgb(214,1,44)" fg:x="1109" fg:w="1"/><text x="90.3394%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="90.0894%" y="373" width="0.0812%" height="15" fill="rgb(212,2,46)" fg:x="1109" fg:w="1"/><text x="90.3394%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="90.0894%" y="357" width="0.0812%" height="15" fill="rgb(213,142,5)" fg:x="1109" fg:w="1"/><text x="90.3394%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="90.0894%" y="341" width="0.0812%" height="15" fill="rgb(229,135,1)" fg:x="1109" fg:w="1"/><text x="90.3394%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="90.0894%" y="325" width="0.0812%" height="15" fill="rgb(252,98,38)" fg:x="1109" fg:w="1"/><text x="90.3394%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.0894%" y="309" width="0.0812%" height="15" fill="rgb(206,89,40)" fg:x="1109" fg:w="1"/><text x="90.3394%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.0894%" y="293" width="0.0812%" height="15" fill="rgb(219,73,36)" fg:x="1109" fg:w="1"/><text x="90.3394%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="90.0894%" y="277" width="0.0812%" height="15" fill="rgb(207,168,32)" fg:x="1109" fg:w="1"/><text x="90.3394%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.0894%" y="261" width="0.0812%" height="15" fill="rgb(215,113,21)" fg:x="1109" fg:w="1"/><text x="90.3394%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.0894%" y="245" width="0.0812%" height="15" fill="rgb(217,144,43)" fg:x="1109" fg:w="1"/><text x="90.3394%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.0894%" y="229" width="0.0812%" height="15" fill="rgb(249,48,50)" fg:x="1109" fg:w="1"/><text x="90.3394%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.0894%" y="213" width="0.0812%" height="15" fill="rgb(242,1,26)" fg:x="1109" fg:w="1"/><text x="90.3394%" y="223.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (109 samples, 8.85%)</title><rect x="81.4785%" y="421" width="8.8546%" height="15" fill="rgb(231,167,42)" fg:x="1003" fg:w="109"/><text x="81.7285%" y="431.50">&lt;plugins_core..</text></g><g><title>plugins_core::location::model::change_location (4 samples, 0.32%)</title><rect x="90.0081%" y="405" width="0.3249%" height="15" fill="rgb(242,177,45)" fg:x="1108" fg:w="4"/><text x="90.2581%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="90.1706%" y="389" width="0.1625%" height="15" fill="rgb(232,121,42)" fg:x="1110" fg:w="2"/><text x="90.4206%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="90.1706%" y="373" width="0.1625%" height="15" fill="rgb(205,8,42)" fg:x="1110" fg:w="2"/><text x="90.4206%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="90.1706%" y="357" width="0.1625%" height="15" fill="rgb(238,199,24)" fg:x="1110" fg:w="2"/><text x="90.4206%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="90.1706%" y="341" width="0.1625%" height="15" fill="rgb(228,112,2)" fg:x="1110" fg:w="2"/><text x="90.4206%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="90.1706%" y="325" width="0.1625%" height="15" fill="rgb(215,115,33)" fg:x="1110" fg:w="2"/><text x="90.4206%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="90.2518%" y="309" width="0.0812%" height="15" fill="rgb(230,209,34)" fg:x="1111" fg:w="1"/><text x="90.5018%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="90.4143%" y="373" width="0.0812%" height="15" fill="rgb(246,76,12)" fg:x="1113" fg:w="1"/><text x="90.6643%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.4955%" y="373" width="0.0812%" height="15" fill="rgb(240,110,9)" fg:x="1114" fg:w="1"/><text x="90.7455%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="90.4143%" y="389" width="0.2437%" height="15" fill="rgb(224,94,46)" fg:x="1113" fg:w="3"/><text x="90.6643%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.5768%" y="373" width="0.0812%" height="15" fill="rgb(247,150,22)" fg:x="1115" fg:w="1"/><text x="90.8268%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.5768%" y="357" width="0.0812%" height="15" fill="rgb(249,85,13)" fg:x="1115" fg:w="1"/><text x="90.8268%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.5768%" y="341" width="0.0812%" height="15" fill="rgb(208,77,41)" fg:x="1115" fg:w="1"/><text x="90.8268%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.5768%" y="325" width="0.0812%" height="15" fill="rgb(240,42,44)" fg:x="1115" fg:w="1"/><text x="90.8268%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.5768%" y="309" width="0.0812%" height="15" fill="rgb(222,10,51)" fg:x="1115" fg:w="1"/><text x="90.8268%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.5768%" y="293" width="0.0812%" height="15" fill="rgb(208,146,53)" fg:x="1115" fg:w="1"/><text x="90.8268%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="90.5768%" y="277" width="0.0812%" height="15" fill="rgb(236,162,23)" fg:x="1115" fg:w="1"/><text x="90.8268%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.5768%" y="261" width="0.0812%" height="15" fill="rgb(218,66,21)" fg:x="1115" fg:w="1"/><text x="90.8268%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="90.6580%" y="389" width="0.0812%" height="15" fill="rgb(233,6,47)" fg:x="1116" fg:w="1"/><text x="90.9080%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="90.6580%" y="373" width="0.0812%" height="15" fill="rgb(236,59,51)" fg:x="1116" fg:w="1"/><text x="90.9080%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="90.8205%" y="325" width="0.0812%" height="15" fill="rgb(242,12,46)" fg:x="1118" fg:w="1"/><text x="91.0705%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.8205%" y="309" width="0.0812%" height="15" fill="rgb(243,142,19)" fg:x="1118" fg:w="1"/><text x="91.0705%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="90.7392%" y="373" width="0.2437%" height="15" fill="rgb(217,28,17)" fg:x="1117" fg:w="3"/><text x="90.9892%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="90.7392%" y="357" width="0.2437%" height="15" fill="rgb(228,2,27)" fg:x="1117" fg:w="3"/><text x="90.9892%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="90.7392%" y="341" width="0.2437%" height="15" fill="rgb(214,221,4)" fg:x="1117" fg:w="3"/><text x="90.9892%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="90.9017%" y="325" width="0.0812%" height="15" fill="rgb(224,69,26)" fg:x="1119" fg:w="1"/><text x="91.1517%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.9017%" y="309" width="0.0812%" height="15" fill="rgb(219,70,4)" fg:x="1119" fg:w="1"/><text x="91.1517%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="90.9017%" y="293" width="0.0812%" height="15" fill="rgb(218,157,39)" fg:x="1119" fg:w="1"/><text x="91.1517%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.32%)</title><rect x="90.7392%" y="389" width="0.3249%" height="15" fill="rgb(238,36,28)" fg:x="1117" fg:w="4"/><text x="90.9892%" y="399.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="90.9829%" y="373" width="0.0812%" height="15" fill="rgb(232,29,0)" fg:x="1120" fg:w="1"/><text x="91.2329%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="90.9829%" y="357" width="0.0812%" height="15" fill="rgb(243,138,46)" fg:x="1120" fg:w="1"/><text x="91.2329%" y="367.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="91.1454%" y="245" width="0.0812%" height="15" fill="rgb(232,186,41)" fg:x="1122" fg:w="1"/><text x="91.3954%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="91.1454%" y="229" width="0.0812%" height="15" fill="rgb(252,166,17)" fg:x="1122" fg:w="1"/><text x="91.3954%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="91.1454%" y="213" width="0.0812%" height="15" fill="rgb(228,179,12)" fg:x="1122" fg:w="1"/><text x="91.3954%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 1.79%)</title><rect x="91.2266%" y="229" width="1.7872%" height="15" fill="rgb(254,205,53)" fg:x="1123" fg:w="22"/><text x="91.4766%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (22 samples, 1.79%)</title><rect x="91.2266%" y="213" width="1.7872%" height="15" fill="rgb(224,163,47)" fg:x="1123" fg:w="22"/><text x="91.4766%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (22 samples, 1.79%)</title><rect x="91.2266%" y="197" width="1.7872%" height="15" fill="rgb(208,43,47)" fg:x="1123" fg:w="22"/><text x="91.4766%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (22 samples, 1.79%)</title><rect x="91.2266%" y="181" width="1.7872%" height="15" fill="rgb(224,198,38)" fg:x="1123" fg:w="22"/><text x="91.4766%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (22 samples, 1.79%)</title><rect x="91.2266%" y="165" width="1.7872%" height="15" fill="rgb(234,12,40)" fg:x="1123" fg:w="22"/><text x="91.4766%" y="175.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (22 samples, 1.79%)</title><rect x="91.2266%" y="149" width="1.7872%" height="15" fill="rgb(237,212,39)" fg:x="1123" fg:w="22"/><text x="91.4766%" y="159.50">a..</text></g><g><title>regex_automata::meta::strategy::new (25 samples, 2.03%)</title><rect x="91.0642%" y="261" width="2.0309%" height="15" fill="rgb(253,2,33)" fg:x="1121" fg:w="25"/><text x="91.3142%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (23 samples, 1.87%)</title><rect x="91.2266%" y="245" width="1.8684%" height="15" fill="rgb(251,29,16)" fg:x="1123" fg:w="23"/><text x="91.4766%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="93.0138%" y="229" width="0.0812%" height="15" fill="rgb(214,38,29)" fg:x="1145" fg:w="1"/><text x="93.2638%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="93.0138%" y="213" width="0.0812%" height="15" fill="rgb(226,226,29)" fg:x="1145" fg:w="1"/><text x="93.2638%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::fixup_slot_ranges (1 samples, 0.08%)</title><rect x="93.0138%" y="197" width="0.0812%" height="15" fill="rgb(236,79,42)" fg:x="1145" fg:w="1"/><text x="93.2638%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="93.1763%" y="229" width="0.0812%" height="15" fill="rgb(222,12,36)" fg:x="1147" fg:w="1"/><text x="93.4263%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="93.1763%" y="213" width="0.0812%" height="15" fill="rgb(232,123,44)" fg:x="1147" fg:w="1"/><text x="93.4263%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.1763%" y="197" width="0.0812%" height="15" fill="rgb(234,93,50)" fg:x="1147" fg:w="1"/><text x="93.4263%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.1763%" y="181" width="0.0812%" height="15" fill="rgb(210,86,49)" fg:x="1147" fg:w="1"/><text x="93.4263%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.1763%" y="165" width="0.0812%" height="15" fill="rgb(224,91,54)" fg:x="1147" fg:w="1"/><text x="93.4263%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (28 samples, 2.27%)</title><rect x="91.0642%" y="309" width="2.2746%" height="15" fill="rgb(239,169,9)" fg:x="1121" fg:w="28"/><text x="91.3142%" y="319.50">r..</text></g><g><title>regex::builders::string::RegexBuilder::build (28 samples, 2.27%)</title><rect x="91.0642%" y="293" width="2.2746%" height="15" fill="rgb(238,29,17)" fg:x="1121" fg:w="28"/><text x="91.3142%" y="303.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (28 samples, 2.27%)</title><rect x="91.0642%" y="277" width="2.2746%" height="15" fill="rgb(227,160,22)" fg:x="1121" fg:w="28"/><text x="91.3142%" y="287.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="93.0950%" y="261" width="0.2437%" height="15" fill="rgb(231,129,52)" fg:x="1146" fg:w="3"/><text x="93.3450%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="93.0950%" y="245" width="0.2437%" height="15" fill="rgb(241,184,9)" fg:x="1146" fg:w="3"/><text x="93.3450%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="93.2575%" y="229" width="0.0812%" height="15" fill="rgb(217,43,48)" fg:x="1148" fg:w="1"/><text x="93.5075%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="93.2575%" y="213" width="0.0812%" height="15" fill="rgb(213,49,1)" fg:x="1148" fg:w="1"/><text x="93.5075%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (29 samples, 2.36%)</title><rect x="91.0642%" y="325" width="2.3558%" height="15" fill="rgb(223,79,39)" fg:x="1121" fg:w="29"/><text x="91.3142%" y="335.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="93.3387%" y="309" width="0.0812%" height="15" fill="rgb(228,227,46)" fg:x="1149" fg:w="1"/><text x="93.5887%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="93.3387%" y="293" width="0.0812%" height="15" fill="rgb(245,89,41)" fg:x="1149" fg:w="1"/><text x="93.5887%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="93.3387%" y="277" width="0.0812%" height="15" fill="rgb(253,83,21)" fg:x="1149" fg:w="1"/><text x="93.5887%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="93.3387%" y="261" width="0.0812%" height="15" fill="rgb(229,116,51)" fg:x="1149" fg:w="1"/><text x="93.5887%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="93.3387%" y="245" width="0.0812%" height="15" fill="rgb(246,67,26)" fg:x="1149" fg:w="1"/><text x="93.5887%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="93.3387%" y="229" width="0.0812%" height="15" fill="rgb(250,117,20)" fg:x="1149" fg:w="1"/><text x="93.5887%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="93.4200%" y="309" width="0.0812%" height="15" fill="rgb(207,88,17)" fg:x="1150" fg:w="1"/><text x="93.6700%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="93.4200%" y="293" width="0.0812%" height="15" fill="rgb(212,98,36)" fg:x="1150" fg:w="1"/><text x="93.6700%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.4200%" y="277" width="0.0812%" height="15" fill="rgb(221,72,6)" fg:x="1150" fg:w="1"/><text x="93.6700%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.4200%" y="261" width="0.0812%" height="15" fill="rgb(235,129,19)" fg:x="1150" fg:w="1"/><text x="93.6700%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.4200%" y="245" width="0.0812%" height="15" fill="rgb(237,200,6)" fg:x="1150" fg:w="1"/><text x="93.6700%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.4200%" y="229" width="0.0812%" height="15" fill="rgb(239,69,54)" fg:x="1150" fg:w="1"/><text x="93.6700%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="93.5825%" y="229" width="0.1625%" height="15" fill="rgb(214,68,45)" fg:x="1152" fg:w="2"/><text x="93.8325%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="93.5012%" y="245" width="0.4062%" height="15" fill="rgb(254,160,8)" fg:x="1151" fg:w="5"/><text x="93.7512%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="93.7449%" y="229" width="0.1625%" height="15" fill="rgb(215,226,31)" fg:x="1154" fg:w="2"/><text x="93.9949%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="93.7449%" y="213" width="0.1625%" height="15" fill="rgb(253,6,35)" fg:x="1154" fg:w="2"/><text x="93.9949%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="93.7449%" y="197" width="0.1625%" height="15" fill="rgb(219,96,42)" fg:x="1154" fg:w="2"/><text x="93.9949%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="93.7449%" y="181" width="0.1625%" height="15" fill="rgb(207,170,13)" fg:x="1154" fg:w="2"/><text x="93.9949%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.49%)</title><rect x="93.5012%" y="309" width="0.4874%" height="15" fill="rgb(239,101,5)" fg:x="1151" fg:w="6"/><text x="93.7512%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.49%)</title><rect x="93.5012%" y="293" width="0.4874%" height="15" fill="rgb(228,183,34)" fg:x="1151" fg:w="6"/><text x="93.7512%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.49%)</title><rect x="93.5012%" y="277" width="0.4874%" height="15" fill="rgb(205,28,31)" fg:x="1151" fg:w="6"/><text x="93.7512%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.49%)</title><rect x="93.5012%" y="261" width="0.4874%" height="15" fill="rgb(214,118,50)" fg:x="1151" fg:w="6"/><text x="93.7512%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="93.9074%" y="245" width="0.0812%" height="15" fill="rgb(213,108,51)" fg:x="1156" fg:w="1"/><text x="94.1574%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="93.9074%" y="229" width="0.0812%" height="15" fill="rgb(238,56,37)" fg:x="1156" fg:w="1"/><text x="94.1574%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.9074%" y="213" width="0.0812%" height="15" fill="rgb(214,136,28)" fg:x="1156" fg:w="1"/><text x="94.1574%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.9074%" y="197" width="0.0812%" height="15" fill="rgb(221,201,54)" fg:x="1156" fg:w="1"/><text x="94.1574%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.41%)</title><rect x="93.9886%" y="245" width="0.4062%" height="15" fill="rgb(228,216,39)" fg:x="1157" fg:w="5"/><text x="94.2386%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.41%)</title><rect x="93.9886%" y="229" width="0.4062%" height="15" fill="rgb(207,229,49)" fg:x="1157" fg:w="5"/><text x="94.2386%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="94.2323%" y="213" width="0.1625%" height="15" fill="rgb(224,23,43)" fg:x="1160" fg:w="2"/><text x="94.4823%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="94.3948%" y="245" width="0.0812%" height="15" fill="rgb(247,97,18)" fg:x="1162" fg:w="1"/><text x="94.6448%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="94.3948%" y="229" width="0.0812%" height="15" fill="rgb(232,53,32)" fg:x="1162" fg:w="1"/><text x="94.6448%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.3948%" y="213" width="0.0812%" height="15" fill="rgb(247,38,23)" fg:x="1162" fg:w="1"/><text x="94.6448%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="94.5573%" y="213" width="0.1625%" height="15" fill="rgb(228,101,52)" fg:x="1164" fg:w="2"/><text x="94.8073%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="94.6385%" y="197" width="0.0812%" height="15" fill="rgb(231,45,36)" fg:x="1165" fg:w="1"/><text x="94.8885%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.6385%" y="181" width="0.0812%" height="15" fill="rgb(221,183,50)" fg:x="1165" fg:w="1"/><text x="94.8885%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.6385%" y="165" width="0.0812%" height="15" fill="rgb(251,132,12)" fg:x="1165" fg:w="1"/><text x="94.8885%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.6385%" y="149" width="0.0812%" height="15" fill="rgb(252,50,16)" fg:x="1165" fg:w="1"/><text x="94.8885%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.32%)</title><rect x="94.4760%" y="245" width="0.3249%" height="15" fill="rgb(224,60,15)" fg:x="1163" fg:w="4"/><text x="94.7260%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="94.4760%" y="229" width="0.3249%" height="15" fill="rgb(254,2,34)" fg:x="1163" fg:w="4"/><text x="94.7260%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="94.7197%" y="213" width="0.0812%" height="15" fill="rgb(232,154,8)" fg:x="1166" fg:w="1"/><text x="94.9697%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="94.7197%" y="197" width="0.0812%" height="15" fill="rgb(235,190,52)" fg:x="1166" fg:w="1"/><text x="94.9697%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="94.7197%" y="181" width="0.0812%" height="15" fill="rgb(213,218,38)" fg:x="1166" fg:w="1"/><text x="94.9697%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.8010%" y="181" width="0.0812%" height="15" fill="rgb(237,50,37)" fg:x="1167" fg:w="1"/><text x="95.0510%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::Interval::difference (1 samples, 0.08%)</title><rect x="94.8010%" y="165" width="0.0812%" height="15" fill="rgb(235,51,35)" fg:x="1167" fg:w="1"/><text x="95.0510%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="95.2071%" y="133" width="0.0812%" height="15" fill="rgb(244,40,52)" fg:x="1172" fg:w="1"/><text x="95.4571%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="95.2884%" y="133" width="0.0812%" height="15" fill="rgb(217,225,45)" fg:x="1173" fg:w="1"/><text x="95.5384%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.6133%" y="101" width="0.0812%" height="15" fill="rgb(247,191,36)" fg:x="1177" fg:w="1"/><text x="95.8633%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.6946%" y="101" width="0.1625%" height="15" fill="rgb(251,144,31)" fg:x="1178" fg:w="2"/><text x="95.9446%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.6946%" y="85" width="0.1625%" height="15" fill="rgb(227,155,41)" fg:x="1178" fg:w="2"/><text x="95.9446%" y="95.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="95.6946%" y="69" width="0.1625%" height="15" fill="rgb(236,121,36)" fg:x="1178" fg:w="2"/><text x="95.9446%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (7 samples, 0.57%)</title><rect x="95.3696%" y="133" width="0.5686%" height="15" fill="rgb(221,128,28)" fg:x="1174" fg:w="7"/><text x="95.6196%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.49%)</title><rect x="95.4509%" y="117" width="0.4874%" height="15" fill="rgb(249,67,50)" fg:x="1175" fg:w="6"/><text x="95.7009%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="95.8570%" y="101" width="0.0812%" height="15" fill="rgb(241,126,38)" fg:x="1180" fg:w="1"/><text x="96.1070%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (7 samples, 0.57%)</title><rect x="95.9383%" y="133" width="0.5686%" height="15" fill="rgb(239,33,14)" fg:x="1181" fg:w="7"/><text x="96.1883%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (7 samples, 0.57%)</title><rect x="95.9383%" y="117" width="0.5686%" height="15" fill="rgb(207,221,54)" fg:x="1181" fg:w="7"/><text x="96.1883%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (7 samples, 0.57%)</title><rect x="95.9383%" y="101" width="0.5686%" height="15" fill="rgb(242,138,43)" fg:x="1181" fg:w="7"/><text x="96.1883%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 1.79%)</title><rect x="94.8010%" y="229" width="1.7872%" height="15" fill="rgb(231,118,19)" fg:x="1167" fg:w="22"/><text x="95.0510%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (22 samples, 1.79%)</title><rect x="94.8010%" y="213" width="1.7872%" height="15" fill="rgb(214,128,54)" fg:x="1167" fg:w="22"/><text x="95.0510%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (22 samples, 1.79%)</title><rect x="94.8010%" y="197" width="1.7872%" height="15" fill="rgb(236,136,6)" fg:x="1167" fg:w="22"/><text x="95.0510%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (21 samples, 1.71%)</title><rect x="94.8822%" y="181" width="1.7059%" height="15" fill="rgb(247,30,38)" fg:x="1168" fg:w="21"/><text x="95.1322%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (21 samples, 1.71%)</title><rect x="94.8822%" y="165" width="1.7059%" height="15" fill="rgb(249,189,40)" fg:x="1168" fg:w="21"/><text x="95.1322%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (21 samples, 1.71%)</title><rect x="94.8822%" y="149" width="1.7059%" height="15" fill="rgb(247,179,7)" fg:x="1168" fg:w="21"/><text x="95.1322%" y="159.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="96.5069%" y="133" width="0.0812%" height="15" fill="rgb(239,46,52)" fg:x="1188" fg:w="1"/><text x="96.7569%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (34 samples, 2.76%)</title><rect x="93.9886%" y="261" width="2.7620%" height="15" fill="rgb(225,28,52)" fg:x="1157" fg:w="34"/><text x="94.2386%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (24 samples, 1.95%)</title><rect x="94.8010%" y="245" width="1.9496%" height="15" fill="rgb(217,208,44)" fg:x="1167" fg:w="24"/><text x="95.0510%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="96.5881%" y="229" width="0.1625%" height="15" fill="rgb(224,11,34)" fg:x="1189" fg:w="2"/><text x="96.8381%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="96.5881%" y="213" width="0.1625%" height="15" fill="rgb(205,134,17)" fg:x="1189" fg:w="2"/><text x="96.8381%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.6694%" y="197" width="0.0812%" height="15" fill="rgb(237,125,9)" fg:x="1190" fg:w="1"/><text x="96.9194%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6694%" y="181" width="0.0812%" height="15" fill="rgb(208,139,47)" fg:x="1190" fg:w="1"/><text x="96.9194%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.6694%" y="165" width="0.0812%" height="15" fill="rgb(242,5,5)" fg:x="1190" fg:w="1"/><text x="96.9194%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.7506%" y="229" width="0.0812%" height="15" fill="rgb(218,78,2)" fg:x="1191" fg:w="1"/><text x="97.0006%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.7506%" y="213" width="0.0812%" height="15" fill="rgb(217,75,16)" fg:x="1191" fg:w="1"/><text x="97.0006%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.8318%" y="229" width="0.0812%" height="15" fill="rgb(212,56,17)" fg:x="1192" fg:w="1"/><text x="97.0818%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (44 samples, 3.57%)</title><rect x="93.4200%" y="325" width="3.5743%" height="15" fill="rgb(228,61,29)" fg:x="1150" fg:w="44"/><text x="93.6700%" y="335.50">inde..</text></g><g><title>regex::regex::string::Regex::new (37 samples, 3.01%)</title><rect x="93.9886%" y="309" width="3.0057%" height="15" fill="rgb(247,202,38)" fg:x="1157" fg:w="37"/><text x="94.2386%" y="319.50">reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (37 samples, 3.01%)</title><rect x="93.9886%" y="293" width="3.0057%" height="15" fill="rgb(211,216,43)" fg:x="1157" fg:w="37"/><text x="94.2386%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (37 samples, 3.01%)</title><rect x="93.9886%" y="277" width="3.0057%" height="15" fill="rgb(220,7,49)" fg:x="1157" fg:w="37"/><text x="94.2386%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="96.7506%" y="261" width="0.2437%" height="15" fill="rgb(219,158,7)" fg:x="1191" fg:w="3"/><text x="97.0006%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="96.7506%" y="245" width="0.2437%" height="15" fill="rgb(206,127,9)" fg:x="1191" fg:w="3"/><text x="97.0006%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="96.9131%" y="229" width="0.0812%" height="15" fill="rgb(206,103,43)" fg:x="1193" fg:w="1"/><text x="97.1631%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="96.9943%" y="293" width="0.0812%" height="15" fill="rgb(240,108,41)" fg:x="1194" fg:w="1"/><text x="97.2443%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="96.9943%" y="277" width="0.0812%" height="15" fill="rgb(252,212,6)" fg:x="1194" fg:w="1"/><text x="97.2443%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="96.9943%" y="261" width="0.0812%" height="15" fill="rgb(248,105,31)" fg:x="1194" fg:w="1"/><text x="97.2443%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="96.9943%" y="245" width="0.0812%" height="15" fill="rgb(241,123,4)" fg:x="1194" fg:w="1"/><text x="97.2443%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.9943%" y="229" width="0.0812%" height="15" fill="rgb(223,74,37)" fg:x="1194" fg:w="1"/><text x="97.2443%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.0755%" y="181" width="0.0812%" height="15" fill="rgb(251,219,28)" fg:x="1195" fg:w="1"/><text x="97.3255%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="97.0755%" y="245" width="0.1625%" height="15" fill="rgb(218,36,31)" fg:x="1195" fg:w="2"/><text x="97.3255%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="97.0755%" y="229" width="0.1625%" height="15" fill="rgb(229,40,15)" fg:x="1195" fg:w="2"/><text x="97.3255%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="97.0755%" y="213" width="0.1625%" height="15" fill="rgb(208,138,37)" fg:x="1195" fg:w="2"/><text x="97.3255%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="97.0755%" y="197" width="0.1625%" height="15" fill="rgb(208,40,52)" fg:x="1195" fg:w="2"/><text x="97.3255%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="97.1568%" y="181" width="0.0812%" height="15" fill="rgb(246,181,48)" fg:x="1196" fg:w="1"/><text x="97.4068%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="97.2380%" y="229" width="0.1625%" height="15" fill="rgb(253,178,36)" fg:x="1197" fg:w="2"/><text x="97.4880%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="97.2380%" y="213" width="0.1625%" height="15" fill="rgb(210,170,6)" fg:x="1197" fg:w="2"/><text x="97.4880%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (3 samples, 0.24%)</title><rect x="97.2380%" y="245" width="0.2437%" height="15" fill="rgb(243,62,22)" fg:x="1197" fg:w="3"/><text x="97.4880%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="97.4005%" y="229" width="0.0812%" height="15" fill="rgb(213,145,26)" fg:x="1199" fg:w="1"/><text x="97.6505%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="97.4005%" y="213" width="0.0812%" height="15" fill="rgb(237,177,23)" fg:x="1199" fg:w="1"/><text x="97.6505%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="97.4005%" y="197" width="0.0812%" height="15" fill="rgb(252,5,24)" fg:x="1199" fg:w="1"/><text x="97.6505%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="97.4005%" y="181" width="0.0812%" height="15" fill="rgb(230,108,54)" fg:x="1199" fg:w="1"/><text x="97.6505%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="97.4005%" y="165" width="0.0812%" height="15" fill="rgb(252,192,41)" fg:x="1199" fg:w="1"/><text x="97.6505%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (6 samples, 0.49%)</title><rect x="97.0755%" y="293" width="0.4874%" height="15" fill="rgb(218,125,20)" fg:x="1195" fg:w="6"/><text x="97.3255%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (6 samples, 0.49%)</title><rect x="97.0755%" y="277" width="0.4874%" height="15" fill="rgb(230,223,15)" fg:x="1195" fg:w="6"/><text x="97.3255%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (6 samples, 0.49%)</title><rect x="97.0755%" y="261" width="0.4874%" height="15" fill="rgb(239,99,47)" fg:x="1195" fg:w="6"/><text x="97.3255%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.4817%" y="245" width="0.0812%" height="15" fill="rgb(222,214,23)" fg:x="1200" fg:w="1"/><text x="97.7317%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.4817%" y="229" width="0.0812%" height="15" fill="rgb(250,98,43)" fg:x="1200" fg:w="1"/><text x="97.7317%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="97.4817%" y="213" width="0.0812%" height="15" fill="rgb(226,140,11)" fg:x="1200" fg:w="1"/><text x="97.7317%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (11 samples, 0.89%)</title><rect x="96.9943%" y="309" width="0.8936%" height="15" fill="rgb(239,2,22)" fg:x="1194" fg:w="11"/><text x="97.2443%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="97.5630%" y="293" width="0.3249%" height="15" fill="rgb(209,106,26)" fg:x="1201" fg:w="4"/><text x="97.8130%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="97.5630%" y="277" width="0.3249%" height="15" fill="rgb(209,135,11)" fg:x="1201" fg:w="4"/><text x="97.8130%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="97.5630%" y="261" width="0.3249%" height="15" fill="rgb(241,58,6)" fg:x="1201" fg:w="4"/><text x="97.8130%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="97.5630%" y="245" width="0.3249%" height="15" fill="rgb(214,78,1)" fg:x="1201" fg:w="4"/><text x="97.8130%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="97.6442%" y="229" width="0.2437%" height="15" fill="rgb(229,135,33)" fg:x="1202" fg:w="3"/><text x="97.8942%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.8067%" y="213" width="0.0812%" height="15" fill="rgb(245,87,50)" fg:x="1204" fg:w="1"/><text x="98.0567%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (95 samples, 7.72%)</title><rect x="90.3331%" y="405" width="7.7173%" height="15" fill="rgb(222,222,8)" fg:x="1112" fg:w="95"/><text x="90.5831%" y="415.50">&lt;&amp;kernel::m..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (86 samples, 6.99%)</title><rect x="91.0642%" y="389" width="6.9862%" height="15" fill="rgb(214,97,50)" fg:x="1121" fg:w="86"/><text x="91.3142%" y="399.50">plugins_c..</text></g><g><title>indefinite::indefinite (86 samples, 6.99%)</title><rect x="91.0642%" y="373" width="6.9862%" height="15" fill="rgb(244,161,51)" fg:x="1121" fg:w="86"/><text x="91.3142%" y="383.50">indefinit..</text></g><g><title>indefinite::methods::indefinite (86 samples, 6.99%)</title><rect x="91.0642%" y="357" width="6.9862%" height="15" fill="rgb(225,17,4)" fg:x="1121" fg:w="86"/><text x="91.3142%" y="367.50">indefinit..</text></g><g><title>indefinite::methods::apply_rules (86 samples, 6.99%)</title><rect x="91.0642%" y="341" width="6.9862%" height="15" fill="rgb(238,10,13)" fg:x="1121" fg:w="86"/><text x="91.3142%" y="351.50">indefinit..</text></g><g><title>indefinite::rules::other::Other::run (13 samples, 1.06%)</title><rect x="96.9943%" y="325" width="1.0561%" height="15" fill="rgb(239,169,14)" fg:x="1194" fg:w="13"/><text x="97.2443%" y="335.50"></text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="97.8879%" y="309" width="0.1625%" height="15" fill="rgb(213,105,25)" fg:x="1205" fg:w="2"/><text x="98.1379%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (1 samples, 0.08%)</title><rect x="98.0504%" y="405" width="0.0812%" height="15" fill="rgb(233,4,17)" fg:x="1207" fg:w="1"/><text x="98.3004%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (1 samples, 0.08%)</title><rect x="98.0504%" y="389" width="0.0812%" height="15" fill="rgb(212,5,35)" fg:x="1207" fg:w="1"/><text x="98.3004%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (1 samples, 0.08%)</title><rect x="98.0504%" y="373" width="0.0812%" height="15" fill="rgb(216,3,14)" fg:x="1207" fg:w="1"/><text x="98.3004%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="98.0504%" y="357" width="0.0812%" height="15" fill="rgb(240,105,33)" fg:x="1207" fg:w="1"/><text x="98.3004%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.0504%" y="341" width="0.0812%" height="15" fill="rgb(216,73,0)" fg:x="1207" fg:w="1"/><text x="98.3004%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0504%" y="325" width="0.0812%" height="15" fill="rgb(217,153,48)" fg:x="1207" fg:w="1"/><text x="98.3004%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0504%" y="309" width="0.0812%" height="15" fill="rgb(218,180,8)" fg:x="1207" fg:w="1"/><text x="98.3004%" y="319.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="98.1316%" y="405" width="0.0812%" height="15" fill="rgb(252,168,2)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.2128%" y="357" width="0.0812%" height="15" fill="rgb(224,116,33)" fg:x="1209" fg:w="1"/><text x="98.4628%" y="367.50"></text></g><g><title>plugins_core::library::actions::reply_ok (2 samples, 0.16%)</title><rect x="98.2128%" y="405" width="0.1625%" height="15" fill="rgb(229,205,17)" fg:x="1209" fg:w="2"/><text x="98.4628%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (2 samples, 0.16%)</title><rect x="98.2128%" y="389" width="0.1625%" height="15" fill="rgb(234,1,41)" fg:x="1209" fg:w="2"/><text x="98.4628%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (2 samples, 0.16%)</title><rect x="98.2128%" y="373" width="0.1625%" height="15" fill="rgb(244,185,8)" fg:x="1209" fg:w="2"/><text x="98.4628%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (1 samples, 0.08%)</title><rect x="98.2941%" y="357" width="0.0812%" height="15" fill="rgb(248,51,21)" fg:x="1210" fg:w="1"/><text x="98.5441%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="98.2941%" y="341" width="0.0812%" height="15" fill="rgb(248,157,31)" fg:x="1210" fg:w="1"/><text x="98.5441%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="98.2941%" y="325" width="0.0812%" height="15" fill="rgb(210,34,47)" fg:x="1210" fg:w="1"/><text x="98.5441%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="98.2941%" y="309" width="0.0812%" height="15" fill="rgb(227,139,53)" fg:x="1210" fg:w="1"/><text x="98.5441%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="98.2941%" y="293" width="0.0812%" height="15" fill="rgb(232,211,37)" fg:x="1210" fg:w="1"/><text x="98.5441%" y="303.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="98.2941%" y="277" width="0.0812%" height="15" fill="rgb(236,133,10)" fg:x="1210" fg:w="1"/><text x="98.5441%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2941%" y="261" width="0.0812%" height="15" fill="rgb(243,202,25)" fg:x="1210" fg:w="1"/><text x="98.5441%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2941%" y="245" width="0.0812%" height="15" fill="rgb(224,59,9)" fg:x="1210" fg:w="1"/><text x="98.5441%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2941%" y="229" width="0.0812%" height="15" fill="rgb(206,146,16)" fg:x="1210" fg:w="1"/><text x="98.5441%" y="239.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="98.3753%" y="389" width="0.1625%" height="15" fill="rgb(220,47,2)" fg:x="1211" fg:w="2"/><text x="98.6253%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.3753%" y="373" width="0.1625%" height="15" fill="rgb(225,124,51)" fg:x="1211" fg:w="2"/><text x="98.6253%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.3753%" y="357" width="0.1625%" height="15" fill="rgb(241,220,50)" fg:x="1211" fg:w="2"/><text x="98.6253%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.3753%" y="341" width="0.1625%" height="15" fill="rgb(232,168,5)" fg:x="1211" fg:w="2"/><text x="98.6253%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.4565%" y="325" width="0.0812%" height="15" fill="rgb(243,90,22)" fg:x="1212" fg:w="1"/><text x="98.7065%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4565%" y="309" width="0.0812%" height="15" fill="rgb(223,153,32)" fg:x="1212" fg:w="1"/><text x="98.7065%" y="319.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="98.4565%" y="293" width="0.0812%" height="15" fill="rgb(243,124,20)" fg:x="1212" fg:w="1"/><text x="98.7065%" y="303.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="98.5378%" y="373" width="0.0812%" height="15" fill="rgb(246,168,39)" fg:x="1213" fg:w="1"/><text x="98.7878%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5378%" y="357" width="0.0812%" height="15" fill="rgb(222,165,54)" fg:x="1213" fg:w="1"/><text x="98.7878%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5378%" y="341" width="0.0812%" height="15" fill="rgb(251,142,27)" fg:x="1213" fg:w="1"/><text x="98.7878%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5378%" y="325" width="0.0812%" height="15" fill="rgb(207,168,50)" fg:x="1213" fg:w="1"/><text x="98.7878%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5378%" y="309" width="0.0812%" height="15" fill="rgb(250,139,25)" fg:x="1213" fg:w="1"/><text x="98.7878%" y="319.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (212 samples, 17.22%)</title><rect x="81.4785%" y="549" width="17.2218%" height="15" fill="rgb(214,194,48)" fg:x="1003" fg:w="212"/><text x="81.7285%" y="559.50">kernel::plugins::mw::Middle..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (212 samples, 17.22%)</title><rect x="81.4785%" y="533" width="17.2218%" height="15" fill="rgb(227,138,47)" fg:x="1003" fg:w="212"/><text x="81.7285%" y="543.50">&lt;plugins_dynlib::DynamicMid..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (212 samples, 17.22%)</title><rect x="81.4785%" y="517" width="17.2218%" height="15" fill="rgb(250,162,5)" fg:x="1003" fg:w="212"/><text x="81.7285%" y="527.50">kernel::plugins::mw::Middle..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (212 samples, 17.22%)</title><rect x="81.4785%" y="501" width="17.2218%" height="15" fill="rgb(229,74,25)" fg:x="1003" fg:w="212"/><text x="81.7285%" y="511.50">core::ops::function::FnOnce..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (212 samples, 17.22%)</title><rect x="81.4785%" y="485" width="17.2218%" height="15" fill="rgb(221,124,34)" fg:x="1003" fg:w="212"/><text x="81.7285%" y="495.50">kernel::plugins::mw::Middle..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (212 samples, 17.22%)</title><rect x="81.4785%" y="469" width="17.2218%" height="15" fill="rgb(225,94,25)" fg:x="1003" fg:w="212"/><text x="81.7285%" y="479.50">core::ops::function::FnOnce..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (212 samples, 17.22%)</title><rect x="81.4785%" y="453" width="17.2218%" height="15" fill="rgb(210,100,12)" fg:x="1003" fg:w="212"/><text x="81.7285%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as ..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (212 samples, 17.22%)</title><rect x="81.4785%" y="437" width="17.2218%" height="15" fill="rgb(206,62,48)" fg:x="1003" fg:w="212"/><text x="81.7285%" y="447.50">&lt;engine::session::state::St..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (103 samples, 8.37%)</title><rect x="90.3331%" y="421" width="8.3672%" height="15" fill="rgb(222,181,9)" fg:x="1112" fg:w="103"/><text x="90.5831%" y="431.50">&lt;plugins_cor..</text></g><g><title>plugins_core::location::model::change_location (4 samples, 0.32%)</title><rect x="98.3753%" y="405" width="0.3249%" height="15" fill="rgb(248,42,38)" fg:x="1211" fg:w="4"/><text x="98.6253%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="98.5378%" y="389" width="0.1625%" height="15" fill="rgb(213,40,6)" fg:x="1213" fg:w="2"/><text x="98.7878%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="98.6190%" y="373" width="0.0812%" height="15" fill="rgb(211,108,15)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="98.6190%" y="357" width="0.0812%" height="15" fill="rgb(249,62,9)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.6190%" y="341" width="0.0812%" height="15" fill="rgb(233,26,54)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="98.6190%" y="325" width="0.0812%" height="15" fill="rgb(210,175,26)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.6190%" y="309" width="0.0812%" height="15" fill="rgb(210,43,33)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6190%" y="293" width="0.0812%" height="15" fill="rgb(224,46,17)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6190%" y="277" width="0.0812%" height="15" fill="rgb(254,24,38)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="98.6190%" y="261" width="0.0812%" height="15" fill="rgb(248,32,0)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="271.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.7002%" y="501" width="0.0812%" height="15" fill="rgb(224,37,41)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7002%" y="485" width="0.0812%" height="15" fill="rgb(252,70,22)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7002%" y="469" width="0.0812%" height="15" fill="rgb(241,123,50)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.7002%" y="453" width="0.0812%" height="15" fill="rgb(246,138,33)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.7002%" y="437" width="0.0812%" height="15" fill="rgb(218,39,32)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.7815%" y="437" width="0.0812%" height="15" fill="rgb(241,229,10)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7815%" y="421" width="0.0812%" height="15" fill="rgb(212,160,10)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="431.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="98.8627%" y="437" width="0.0812%" height="15" fill="rgb(227,48,51)" fg:x="1217" fg:w="1"/><text x="99.1127%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.8627%" y="421" width="0.0812%" height="15" fill="rgb(238,159,21)" fg:x="1217" fg:w="1"/><text x="99.1127%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8627%" y="405" width="0.0812%" height="15" fill="rgb(216,1,10)" fg:x="1217" fg:w="1"/><text x="99.1127%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.8627%" y="389" width="0.0812%" height="15" fill="rgb(209,228,25)" fg:x="1217" fg:w="1"/><text x="99.1127%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8627%" y="373" width="0.0812%" height="15" fill="rgb(234,160,10)" fg:x="1217" fg:w="1"/><text x="99.1127%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.8627%" y="357" width="0.0812%" height="15" fill="rgb(212,66,25)" fg:x="1217" fg:w="1"/><text x="99.1127%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8627%" y="341" width="0.0812%" height="15" fill="rgb(254,121,18)" fg:x="1217" fg:w="1"/><text x="99.1127%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.8627%" y="325" width="0.0812%" height="15" fill="rgb(219,127,1)" fg:x="1217" fg:w="1"/><text x="99.1127%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.8627%" y="309" width="0.0812%" height="15" fill="rgb(219,224,42)" fg:x="1217" fg:w="1"/><text x="99.1127%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8627%" y="293" width="0.0812%" height="15" fill="rgb(253,130,22)" fg:x="1217" fg:w="1"/><text x="99.1127%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.8627%" y="277" width="0.0812%" height="15" fill="rgb(253,39,28)" fg:x="1217" fg:w="1"/><text x="99.1127%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.8627%" y="261" width="0.0812%" height="15" fill="rgb(231,126,37)" fg:x="1217" fg:w="1"/><text x="99.1127%" y="271.50"></text></g><g><title>plugins_core::tools::contained_by (4 samples, 0.32%)</title><rect x="98.7002%" y="517" width="0.3249%" height="15" fill="rgb(251,145,14)" fg:x="1215" fg:w="4"/><text x="98.9502%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="98.7815%" y="501" width="0.2437%" height="15" fill="rgb(229,164,30)" fg:x="1216" fg:w="3"/><text x="99.0315%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="98.7815%" y="485" width="0.2437%" height="15" fill="rgb(233,227,54)" fg:x="1216" fg:w="3"/><text x="99.0315%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="98.7815%" y="469" width="0.2437%" height="15" fill="rgb(240,94,22)" fg:x="1216" fg:w="3"/><text x="99.0315%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="98.7815%" y="453" width="0.2437%" height="15" fill="rgb(217,56,16)" fg:x="1216" fg:w="3"/><text x="99.0315%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.9439%" y="437" width="0.0812%" height="15" fill="rgb(229,133,38)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="447.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.9439%" y="421" width="0.0812%" height="15" fill="rgb(225,139,35)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9439%" y="405" width="0.0812%" height="15" fill="rgb(223,100,16)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9439%" y="389" width="0.0812%" height="15" fill="rgb(207,43,50)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9439%" y="373" width="0.0812%" height="15" fill="rgb(237,221,9)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9439%" y="357" width="0.0812%" height="15" fill="rgb(236,134,24)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9439%" y="341" width="0.0812%" height="15" fill="rgb(222,173,4)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9439%" y="325" width="0.0812%" height="15" fill="rgb(234,144,52)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9439%" y="309" width="0.0812%" height="15" fill="rgb(223,41,7)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9439%" y="293" width="0.0812%" height="15" fill="rgb(226,143,9)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0252%" y="485" width="0.0812%" height="15" fill="rgb(234,43,37)" fg:x="1219" fg:w="1"/><text x="99.2752%" y="495.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="99.0252%" y="517" width="0.1625%" height="15" fill="rgb(224,188,11)" fg:x="1219" fg:w="2"/><text x="99.2752%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="99.0252%" y="501" width="0.1625%" height="15" fill="rgb(233,113,28)" fg:x="1219" fg:w="2"/><text x="99.2752%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1064%" y="485" width="0.0812%" height="15" fill="rgb(215,16,1)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1064%" y="469" width="0.0812%" height="15" fill="rgb(238,74,38)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.1064%" y="453" width="0.0812%" height="15" fill="rgb(221,66,35)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.1064%" y="437" width="0.0812%" height="15" fill="rgb(251,225,2)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="99.1064%" y="421" width="0.0812%" height="15" fill="rgb(240,169,18)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="431.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1064%" y="405" width="0.0812%" height="15" fill="rgb(243,130,50)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1064%" y="389" width="0.0812%" height="15" fill="rgb(228,75,13)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1064%" y="373" width="0.0812%" height="15" fill="rgb(252,95,35)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="99.1064%" y="357" width="0.0812%" height="15" fill="rgb(222,180,54)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="367.50"></text></g><g><title>engine::session::Session::captured (230 samples, 18.68%)</title><rect x="80.5849%" y="693" width="18.6840%" height="15" fill="rgb(250,110,34)" fg:x="992" fg:w="230"/><text x="80.8349%" y="703.50">engine::session::Session::cap..</text></g><g><title>engine::session::logs::capture (229 samples, 18.60%)</title><rect x="80.6661%" y="677" width="18.6028%" height="15" fill="rgb(208,100,21)" fg:x="993" fg:w="229"/><text x="80.9161%" y="687.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (227 samples, 18.44%)</title><rect x="80.8286%" y="661" width="18.4403%" height="15" fill="rgb(209,123,47)" fg:x="995" fg:w="227"/><text x="81.0786%" y="671.50">tracing_core::dispatcher::wit..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (227 samples, 18.44%)</title><rect x="80.8286%" y="645" width="18.4403%" height="15" fill="rgb(237,147,9)" fg:x="995" fg:w="227"/><text x="81.0786%" y="655.50">&lt;engine::session::Session as ..</text></g><g><title>kernel::plugins::mw::apply_middleware (226 samples, 18.36%)</title><rect x="80.9098%" y="629" width="18.3591%" height="15" fill="rgb(228,206,23)" fg:x="996" fg:w="226"/><text x="81.1598%" y="639.50">kernel::plugins::mw::apply_mi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (226 samples, 18.36%)</title><rect x="80.9098%" y="613" width="18.3591%" height="15" fill="rgb(217,174,46)" fg:x="996" fg:w="226"/><text x="81.1598%" y="623.50">kernel::plugins::mw::Middlewa..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (226 samples, 18.36%)</title><rect x="80.9098%" y="597" width="18.3591%" height="15" fill="rgb(231,126,21)" fg:x="996" fg:w="226"/><text x="81.1598%" y="607.50">&lt;engine::session::ExpandSurro..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (219 samples, 17.79%)</title><rect x="81.4785%" y="581" width="17.7904%" height="15" fill="rgb(245,26,1)" fg:x="1003" fg:w="219"/><text x="81.7285%" y="591.50">kernel::plugins::mw::Middlew..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (219 samples, 17.79%)</title><rect x="81.4785%" y="565" width="17.7904%" height="15" fill="rgb(224,138,39)" fg:x="1003" fg:w="219"/><text x="81.7285%" y="575.50">&lt;plugins_rune::RuneMiddlewar..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (7 samples, 0.57%)</title><rect x="98.7002%" y="549" width="0.5686%" height="15" fill="rgb(208,97,3)" fg:x="1215" fg:w="7"/><text x="98.9502%" y="559.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (7 samples, 0.57%)</title><rect x="98.7002%" y="533" width="0.5686%" height="15" fill="rgb(222,77,29)" fg:x="1215" fg:w="7"/><text x="98.9502%" y="543.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="99.1877%" y="517" width="0.0812%" height="15" fill="rgb(243,188,36)" fg:x="1221" fg:w="1"/><text x="99.4377%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.1877%" y="501" width="0.0812%" height="15" fill="rgb(218,214,3)" fg:x="1221" fg:w="1"/><text x="99.4377%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1877%" y="485" width="0.0812%" height="15" fill="rgb(211,183,45)" fg:x="1221" fg:w="1"/><text x="99.4377%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1877%" y="469" width="0.0812%" height="15" fill="rgb(230,218,25)" fg:x="1221" fg:w="1"/><text x="99.4377%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2689%" y="597" width="0.0812%" height="15" fill="rgb(233,86,6)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2689%" y="581" width="0.0812%" height="15" fill="rgb(220,59,24)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.3501%" y="549" width="0.0812%" height="15" fill="rgb(227,60,1)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.3501%" y="533" width="0.0812%" height="15" fill="rgb(216,212,54)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.3501%" y="517" width="0.0812%" height="15" fill="rgb(227,81,54)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3501%" y="501" width="0.0812%" height="15" fill="rgb(206,204,43)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="99.3501%" y="485" width="0.0812%" height="15" fill="rgb(219,29,26)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="99.3501%" y="469" width="0.0812%" height="15" fill="rgb(252,40,36)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="99.2689%" y="645" width="0.2437%" height="15" fill="rgb(224,205,39)" fg:x="1222" fg:w="3"/><text x="99.5189%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="99.2689%" y="629" width="0.2437%" height="15" fill="rgb(222,13,21)" fg:x="1222" fg:w="3"/><text x="99.5189%" y="639.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="99.2689%" y="613" width="0.2437%" height="15" fill="rgb(243,139,6)" fg:x="1222" fg:w="3"/><text x="99.5189%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.3501%" y="597" width="0.1625%" height="15" fill="rgb(237,101,11)" fg:x="1223" fg:w="2"/><text x="99.6001%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.3501%" y="581" width="0.1625%" height="15" fill="rgb(254,49,28)" fg:x="1223" fg:w="2"/><text x="99.6001%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.3501%" y="565" width="0.1625%" height="15" fill="rgb(223,41,21)" fg:x="1223" fg:w="2"/><text x="99.6001%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4314%" y="549" width="0.0812%" height="15" fill="rgb(225,103,29)" fg:x="1224" fg:w="1"/><text x="99.6814%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4314%" y="533" width="0.0812%" height="15" fill="rgb(244,82,43)" fg:x="1224" fg:w="1"/><text x="99.6814%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.4314%" y="517" width="0.0812%" height="15" fill="rgb(217,39,3)" fg:x="1224" fg:w="1"/><text x="99.6814%" y="527.50"></text></g><g><title>engine::session::internal::Added::find_refs (4 samples, 0.32%)</title><rect x="99.2689%" y="677" width="0.3249%" height="15" fill="rgb(239,128,25)" fg:x="1222" fg:w="4"/><text x="99.5189%" y="687.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="99.2689%" y="661" width="0.3249%" height="15" fill="rgb(210,192,37)" fg:x="1222" fg:w="4"/><text x="99.5189%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5126%" y="645" width="0.0812%" height="15" fill="rgb(219,98,18)" fg:x="1225" fg:w="1"/><text x="99.7626%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5126%" y="629" width="0.0812%" height="15" fill="rgb(224,228,38)" fg:x="1225" fg:w="1"/><text x="99.7626%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5938%" y="661" width="0.0812%" height="15" fill="rgb(241,129,43)" fg:x="1226" fg:w="1"/><text x="99.8438%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5938%" y="645" width="0.0812%" height="15" fill="rgb(223,8,51)" fg:x="1226" fg:w="1"/><text x="99.8438%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5938%" y="629" width="0.0812%" height="15" fill="rgb(233,76,24)" fg:x="1226" fg:w="1"/><text x="99.8438%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.6751%" y="661" width="0.0812%" height="15" fill="rgb(219,115,10)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6751%" y="645" width="0.0812%" height="15" fill="rgb(222,137,12)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6751%" y="629" width="0.0812%" height="15" fill="rgb(216,192,16)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6751%" y="613" width="0.0812%" height="15" fill="rgb(247,6,27)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6751%" y="597" width="0.0812%" height="15" fill="rgb(254,39,44)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6751%" y="581" width="0.0812%" height="15" fill="rgb(251,116,35)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.6751%" y="565" width="0.0812%" height="15" fill="rgb(208,61,44)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.6751%" y="549" width="0.0812%" height="15" fill="rgb(250,34,5)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.7563%" y="661" width="0.0812%" height="15" fill="rgb(241,40,15)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7563%" y="645" width="0.0812%" height="15" fill="rgb(229,182,2)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7563%" y="629" width="0.0812%" height="15" fill="rgb(244,148,52)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.7563%" y="613" width="0.0812%" height="15" fill="rgb(225,211,4)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7563%" y="597" width="0.0812%" height="15" fill="rgb(208,222,47)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7563%" y="581" width="0.0812%" height="15" fill="rgb(233,162,0)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7563%" y="565" width="0.0812%" height="15" fill="rgb(241,54,13)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7563%" y="549" width="0.0812%" height="15" fill="rgb(213,89,18)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.7563%" y="533" width="0.0812%" height="15" fill="rgb(215,170,37)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7563%" y="517" width="0.0812%" height="15" fill="rgb(216,133,15)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7563%" y="501" width="0.0812%" height="15" fill="rgb(230,42,19)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7563%" y="485" width="0.0812%" height="15" fill="rgb(221,103,41)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.65%)</title><rect x="99.2689%" y="693" width="0.6499%" height="15" fill="rgb(220,142,31)" fg:x="1222" fg:w="8"/><text x="99.5189%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="99.5938%" y="677" width="0.3249%" height="15" fill="rgb(239,218,4)" fg:x="1226" fg:w="4"/><text x="99.8438%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.8375%" y="661" width="0.0812%" height="15" fill="rgb(232,16,4)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="671.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.8375%" y="645" width="0.0812%" height="15" fill="rgb(226,213,25)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8375%" y="629" width="0.0812%" height="15" fill="rgb(235,135,19)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8375%" y="613" width="0.0812%" height="15" fill="rgb(240,107,29)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8375%" y="597" width="0.0812%" height="15" fill="rgb(206,164,44)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8375%" y="581" width="0.0812%" height="15" fill="rgb(210,23,48)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8375%" y="565" width="0.0812%" height="15" fill="rgb(212,138,25)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8375%" y="549" width="0.0812%" height="15" fill="rgb(224,152,3)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.8375%" y="533" width="0.0812%" height="15" fill="rgb(214,38,23)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.8375%" y="517" width="0.0812%" height="15" fill="rgb(215,161,10)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="527.50"></text></g><g><title>all (1,231 samples, 100%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(240,185,7)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="1087.50"></text></g><g><title>simple-7b9109e4 (1,231 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(244,104,25)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="1071.50">simple-7b9109e4</text></g><g><title>_start (1,231 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(242,140,44)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="1055.50">_start</text></g><g><title>__libc_start_main (1,231 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(245,30,19)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="1039.50">__libc_start_main</text></g><g><title>main (1,231 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(219,208,35)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="1023.50">main</text></g><g><title>std::rt::lang_start_internal (1,231 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(235,200,7)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="1007.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,231 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(220,193,10)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,231 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(212,216,39)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,231 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(212,134,19)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="959.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,231 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(230,57,24)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,231 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(238,209,37)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,231 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(247,11,45)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,231 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(222,126,6)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,231 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(245,77,24)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="879.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,231 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(227,14,24)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="863.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,231 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(211,112,42)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="847.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,231 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(230,103,42)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="831.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,231 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(228,125,42)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="815.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,231 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(243,33,6)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="799.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (355 samples, 28.84%)</title><rect x="71.1617%" y="773" width="28.8383%" height="15" fill="rgb(231,2,40)" fg:x="876" fg:w="355"/><text x="71.4117%" y="783.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criter..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (355 samples, 28.84%)</title><rect x="71.1617%" y="757" width="28.8383%" height="15" fill="rgb(224,200,53)" fg:x="876" fg:w="355"/><text x="71.4117%" y="767.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (355 samples, 28.84%)</title><rect x="71.1617%" y="741" width="28.8383%" height="15" fill="rgb(215,116,36)" fg:x="876" fg:w="355"/><text x="71.4117%" y="751.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (242 samples, 19.66%)</title><rect x="80.3412%" y="725" width="19.6588%" height="15" fill="rgb(240,23,51)" fg:x="989" fg:w="242"/><text x="80.5912%" y="735.50">engine::session::Session::evalu..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (242 samples, 19.66%)</title><rect x="80.3412%" y="709" width="19.6588%" height="15" fill="rgb(221,72,5)" fg:x="989" fg:w="242"/><text x="80.5912%" y="719.50">engine::session::Session::evalu..</text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="99.9188%" y="693" width="0.0812%" height="15" fill="rgb(245,142,9)" fg:x="1230" fg:w="1"/><text x="100.1688%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="99.9188%" y="677" width="0.0812%" height="15" fill="rgb(207,34,16)" fg:x="1230" fg:w="1"/><text x="100.1688%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.9188%" y="661" width="0.0812%" height="15" fill="rgb(252,101,12)" fg:x="1230" fg:w="1"/><text x="100.1688%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.9188%" y="645" width="0.0812%" height="15" fill="rgb(239,89,37)" fg:x="1230" fg:w="1"/><text x="100.1688%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.9188%" y="629" width="0.0812%" height="15" fill="rgb(252,227,37)" fg:x="1230" fg:w="1"/><text x="100.1688%" y="639.50"></text></g></svg></svg>