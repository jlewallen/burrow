<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1062" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1045.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1045.00"> </text><svg id="frames" x="10" width="1180" total_samples="1254"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="629" width="0.0797%" height="15" fill="rgb(252,77,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0797%" y="565" width="0.0797%" height="15" fill="rgb(243,119,2)" fg:x="1" fg:w="1"/><text x="0.3297%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4785%" y="549" width="0.1595%" height="15" fill="rgb(206,82,28)" fg:x="6" fg:w="2"/><text x="0.7285%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6380%" y="533" width="0.0797%" height="15" fill="rgb(227,120,12)" fg:x="8" fg:w="1"/><text x="0.8880%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="0.0797%" y="581" width="0.7974%" height="15" fill="rgb(229,134,41)" fg:x="1" fg:w="10"/><text x="0.3297%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="0.1595%" y="565" width="0.7177%" height="15" fill="rgb(239,96,32)" fg:x="2" fg:w="9"/><text x="0.4095%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.6380%" y="549" width="0.2392%" height="15" fill="rgb(225,46,27)" fg:x="8" fg:w="3"/><text x="0.8880%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.7177%" y="533" width="0.1595%" height="15" fill="rgb(215,168,2)" fg:x="9" fg:w="2"/><text x="0.9677%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.7974%" y="517" width="0.0797%" height="15" fill="rgb(207,170,52)" fg:x="10" fg:w="1"/><text x="1.0474%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.7974%" y="501" width="0.0797%" height="15" fill="rgb(237,198,36)" fg:x="10" fg:w="1"/><text x="1.0474%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7974%" y="485" width="0.0797%" height="15" fill="rgb(213,27,14)" fg:x="10" fg:w="1"/><text x="1.0474%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.8772%" y="565" width="0.2392%" height="15" fill="rgb(218,77,5)" fg:x="11" fg:w="3"/><text x="1.1272%" y="575.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.8772%" y="549" width="0.2392%" height="15" fill="rgb(230,219,39)" fg:x="11" fg:w="3"/><text x="1.1272%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.20%)</title><rect x="0.0000%" y="661" width="1.1962%" height="15" fill="rgb(245,177,7)" fg:x="0" fg:w="15"/><text x="0.2500%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (15 samples, 1.20%)</title><rect x="0.0000%" y="645" width="1.1962%" height="15" fill="rgb(246,44,46)" fg:x="0" fg:w="15"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.12%)</title><rect x="0.0797%" y="629" width="1.1164%" height="15" fill="rgb(207,173,15)" fg:x="1" fg:w="14"/><text x="0.3297%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (14 samples, 1.12%)</title><rect x="0.0797%" y="613" width="1.1164%" height="15" fill="rgb(245,170,50)" fg:x="1" fg:w="14"/><text x="0.3297%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.12%)</title><rect x="0.0797%" y="597" width="1.1164%" height="15" fill="rgb(233,156,21)" fg:x="1" fg:w="14"/><text x="0.3297%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.8772%" y="581" width="0.3190%" height="15" fill="rgb(253,146,27)" fg:x="11" fg:w="4"/><text x="1.1272%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1164%" y="565" width="0.0797%" height="15" fill="rgb(247,66,29)" fg:x="14" fg:w="1"/><text x="1.3664%" y="575.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="1.2759%" y="549" width="0.0797%" height="15" fill="rgb(218,207,26)" fg:x="16" fg:w="1"/><text x="1.5259%" y="559.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (10 samples, 0.80%)</title><rect x="1.1962%" y="581" width="0.7974%" height="15" fill="rgb(234,93,26)" fg:x="15" fg:w="10"/><text x="1.4462%" y="591.50"></text></g><g><title>libloading::safe::Library::new (9 samples, 0.72%)</title><rect x="1.2759%" y="565" width="0.7177%" height="15" fill="rgb(214,75,48)" fg:x="16" fg:w="9"/><text x="1.5259%" y="575.50"></text></g><g><title>dlopen (8 samples, 0.64%)</title><rect x="1.3557%" y="549" width="0.6380%" height="15" fill="rgb(229,119,22)" fg:x="17" fg:w="8"/><text x="1.6057%" y="559.50"></text></g><g><title>_dl_catch_error (8 samples, 0.64%)</title><rect x="1.3557%" y="533" width="0.6380%" height="15" fill="rgb(226,153,19)" fg:x="17" fg:w="8"/><text x="1.6057%" y="543.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.64%)</title><rect x="1.3557%" y="517" width="0.6380%" height="15" fill="rgb(220,204,36)" fg:x="17" fg:w="8"/><text x="1.6057%" y="527.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.64%)</title><rect x="1.3557%" y="501" width="0.6380%" height="15" fill="rgb(253,181,43)" fg:x="17" fg:w="8"/><text x="1.6057%" y="511.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.64%)</title><rect x="1.3557%" y="485" width="0.6380%" height="15" fill="rgb(211,41,51)" fg:x="17" fg:w="8"/><text x="1.6057%" y="495.50"></text></g><g><title>_dl_signal_error (2 samples, 0.16%)</title><rect x="1.8341%" y="469" width="0.1595%" height="15" fill="rgb(207,215,0)" fg:x="23" fg:w="2"/><text x="2.0841%" y="479.50"></text></g><g><title>_dl_exception_create (1 samples, 0.08%)</title><rect x="1.9139%" y="453" width="0.0797%" height="15" fill="rgb(212,153,10)" fg:x="24" fg:w="1"/><text x="2.1639%" y="463.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (12 samples, 0.96%)</title><rect x="1.1962%" y="597" width="0.9569%" height="15" fill="rgb(251,171,36)" fg:x="15" fg:w="12"/><text x="1.4462%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="1.9936%" y="581" width="0.1595%" height="15" fill="rgb(225,219,41)" fg:x="25" fg:w="2"/><text x="2.2436%" y="591.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="1.9936%" y="565" width="0.1595%" height="15" fill="rgb(208,200,1)" fg:x="25" fg:w="2"/><text x="2.2436%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.2329%" y="565" width="0.0797%" height="15" fill="rgb(206,75,47)" fg:x="28" fg:w="1"/><text x="2.4829%" y="575.50"></text></g><g><title>&lt;plugins_core::helping::HelpingPlugin as kernel::plugins::Plugin&gt;::middleware (1 samples, 0.08%)</title><rect x="2.3126%" y="565" width="0.0797%" height="15" fill="rgb(248,3,16)" fg:x="29" fg:w="1"/><text x="2.5626%" y="575.50"></text></g><g><title>engine::session::Session::initialize (16 samples, 1.28%)</title><rect x="1.1962%" y="613" width="1.2759%" height="15" fill="rgb(242,157,36)" fg:x="15" fg:w="16"/><text x="1.4462%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (4 samples, 0.32%)</title><rect x="2.1531%" y="597" width="0.3190%" height="15" fill="rgb(215,175,11)" fg:x="27" fg:w="4"/><text x="2.4031%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="2.1531%" y="581" width="0.3190%" height="15" fill="rgb(252,222,22)" fg:x="27" fg:w="4"/><text x="2.4031%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.3923%" y="565" width="0.0797%" height="15" fill="rgb(250,121,35)" fg:x="30" fg:w="1"/><text x="2.6423%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.3923%" y="549" width="0.0797%" height="15" fill="rgb(233,120,49)" fg:x="30" fg:w="1"/><text x="2.6423%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.3923%" y="533" width="0.0797%" height="15" fill="rgb(205,201,14)" fg:x="30" fg:w="1"/><text x="2.6423%" y="543.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (19 samples, 1.52%)</title><rect x="1.1962%" y="661" width="1.5152%" height="15" fill="rgb(219,58,45)" fg:x="15" fg:w="19"/><text x="1.4462%" y="671.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (19 samples, 1.52%)</title><rect x="1.1962%" y="645" width="1.5152%" height="15" fill="rgb(251,65,12)" fg:x="15" fg:w="19"/><text x="1.4462%" y="655.50"></text></g><g><title>engine::session::Session::new (19 samples, 1.52%)</title><rect x="1.1962%" y="629" width="1.5152%" height="15" fill="rgb(224,47,31)" fg:x="15" fg:w="19"/><text x="1.4462%" y="639.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (3 samples, 0.24%)</title><rect x="2.4721%" y="613" width="0.2392%" height="15" fill="rgb(233,74,26)" fg:x="31" fg:w="3"/><text x="2.7221%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="2.4721%" y="597" width="0.2392%" height="15" fill="rgb(231,211,31)" fg:x="31" fg:w="3"/><text x="2.7221%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.6316%" y="581" width="0.0797%" height="15" fill="rgb(239,167,5)" fg:x="33" fg:w="1"/><text x="2.8816%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="2.7113%" y="645" width="0.0797%" height="15" fill="rgb(241,85,0)" fg:x="34" fg:w="1"/><text x="2.9613%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="2.7113%" y="629" width="0.0797%" height="15" fill="rgb(229,130,21)" fg:x="34" fg:w="1"/><text x="2.9613%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8708%" y="565" width="0.0797%" height="15" fill="rgb(254,84,49)" fg:x="36" fg:w="1"/><text x="3.1208%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="2.9506%" y="533" width="0.0797%" height="15" fill="rgb(235,85,21)" fg:x="37" fg:w="1"/><text x="3.2006%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="3.0303%" y="517" width="0.1595%" height="15" fill="rgb(246,128,52)" fg:x="38" fg:w="2"/><text x="3.2803%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.1100%" y="501" width="0.0797%" height="15" fill="rgb(243,114,49)" fg:x="39" fg:w="1"/><text x="3.3600%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.1100%" y="485" width="0.0797%" height="15" fill="rgb(240,224,22)" fg:x="39" fg:w="1"/><text x="3.3600%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.1100%" y="469" width="0.0797%" height="15" fill="rgb(247,201,52)" fg:x="39" fg:w="1"/><text x="3.3600%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.2695%" y="501" width="0.0797%" height="15" fill="rgb(231,70,45)" fg:x="41" fg:w="1"/><text x="3.5195%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.2695%" y="485" width="0.0797%" height="15" fill="rgb(217,215,20)" fg:x="41" fg:w="1"/><text x="3.5195%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.2695%" y="469" width="0.0797%" height="15" fill="rgb(226,170,30)" fg:x="41" fg:w="1"/><text x="3.5195%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="3.3493%" y="501" width="0.2392%" height="15" fill="rgb(220,190,43)" fg:x="42" fg:w="3"/><text x="3.5993%" y="511.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="3.3493%" y="485" width="0.2392%" height="15" fill="rgb(218,20,18)" fg:x="42" fg:w="3"/><text x="3.5993%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="3.3493%" y="469" width="0.2392%" height="15" fill="rgb(245,37,26)" fg:x="42" fg:w="3"/><text x="3.5993%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="3.3493%" y="453" width="0.2392%" height="15" fill="rgb(241,127,29)" fg:x="42" fg:w="3"/><text x="3.5993%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="3.5885%" y="485" width="0.3190%" height="15" fill="rgb(241,33,26)" fg:x="45" fg:w="4"/><text x="3.8385%" y="495.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="3.6683%" y="469" width="0.2392%" height="15" fill="rgb(220,106,21)" fg:x="46" fg:w="3"/><text x="3.9183%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.8278%" y="453" width="0.0797%" height="15" fill="rgb(225,125,35)" fg:x="48" fg:w="1"/><text x="4.0778%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.9075%" y="469" width="0.0797%" height="15" fill="rgb(248,80,22)" fg:x="49" fg:w="1"/><text x="4.1575%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.9075%" y="453" width="0.0797%" height="15" fill="rgb(231,117,39)" fg:x="49" fg:w="1"/><text x="4.1575%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.9075%" y="437" width="0.0797%" height="15" fill="rgb(239,183,16)" fg:x="49" fg:w="1"/><text x="4.1575%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.9075%" y="421" width="0.0797%" height="15" fill="rgb(221,61,19)" fg:x="49" fg:w="1"/><text x="4.1575%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.9075%" y="405" width="0.0797%" height="15" fill="rgb(239,196,44)" fg:x="49" fg:w="1"/><text x="4.1575%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.9075%" y="389" width="0.0797%" height="15" fill="rgb(206,113,19)" fg:x="49" fg:w="1"/><text x="4.1575%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.9075%" y="373" width="0.0797%" height="15" fill="rgb(245,114,12)" fg:x="49" fg:w="1"/><text x="4.1575%" y="383.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.12%)</title><rect x="2.9506%" y="549" width="1.1164%" height="15" fill="rgb(247,89,39)" fg:x="37" fg:w="14"/><text x="3.2006%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.04%)</title><rect x="3.0303%" y="533" width="1.0367%" height="15" fill="rgb(213,85,14)" fg:x="38" fg:w="13"/><text x="3.2803%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="3.1898%" y="517" width="0.8772%" height="15" fill="rgb(249,206,33)" fg:x="40" fg:w="11"/><text x="3.4398%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="3.5885%" y="501" width="0.4785%" height="15" fill="rgb(235,167,47)" fg:x="45" fg:w="6"/><text x="3.8385%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="3.9075%" y="485" width="0.1595%" height="15" fill="rgb(217,177,16)" fg:x="49" fg:w="2"/><text x="4.1575%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.9872%" y="469" width="0.0797%" height="15" fill="rgb(250,228,29)" fg:x="50" fg:w="1"/><text x="4.2372%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.9872%" y="453" width="0.0797%" height="15" fill="rgb(216,195,42)" fg:x="50" fg:w="1"/><text x="4.2372%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.0670%" y="501" width="0.0797%" height="15" fill="rgb(232,192,32)" fg:x="51" fg:w="1"/><text x="4.3170%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.1467%" y="501" width="0.0797%" height="15" fill="rgb(211,8,47)" fg:x="52" fg:w="1"/><text x="4.3967%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="4.0670%" y="549" width="0.3987%" height="15" fill="rgb(251,201,9)" fg:x="51" fg:w="5"/><text x="4.3170%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="4.0670%" y="533" width="0.3987%" height="15" fill="rgb(206,185,47)" fg:x="51" fg:w="5"/><text x="4.3170%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="4.0670%" y="517" width="0.3987%" height="15" fill="rgb(245,54,32)" fg:x="51" fg:w="5"/><text x="4.3170%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.2265%" y="501" width="0.2392%" height="15" fill="rgb(208,1,8)" fg:x="53" fg:w="3"/><text x="4.4765%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.3062%" y="485" width="0.1595%" height="15" fill="rgb(228,57,24)" fg:x="54" fg:w="2"/><text x="4.5562%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="4.4657%" y="533" width="0.1595%" height="15" fill="rgb(251,24,8)" fg:x="56" fg:w="2"/><text x="4.7157%" y="543.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="4.4657%" y="517" width="0.1595%" height="15" fill="rgb(236,196,50)" fg:x="56" fg:w="2"/><text x="4.7157%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="4.4657%" y="501" width="0.1595%" height="15" fill="rgb(246,222,29)" fg:x="56" fg:w="2"/><text x="4.7157%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.5455%" y="485" width="0.0797%" height="15" fill="rgb(211,34,40)" fg:x="57" fg:w="1"/><text x="4.7955%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.5455%" y="469" width="0.0797%" height="15" fill="rgb(210,66,51)" fg:x="57" fg:w="1"/><text x="4.7955%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="4.6252%" y="501" width="0.0797%" height="15" fill="rgb(250,56,43)" fg:x="58" fg:w="1"/><text x="4.8752%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.7049%" y="469" width="0.0797%" height="15" fill="rgb(240,111,50)" fg:x="59" fg:w="1"/><text x="4.9549%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.7847%" y="453" width="0.0797%" height="15" fill="rgb(209,117,13)" fg:x="60" fg:w="1"/><text x="5.0347%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7847%" y="437" width="0.0797%" height="15" fill="rgb(232,164,45)" fg:x="60" fg:w="1"/><text x="5.0347%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.8644%" y="389" width="0.0797%" height="15" fill="rgb(205,69,32)" fg:x="61" fg:w="1"/><text x="5.1144%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.8644%" y="373" width="0.0797%" height="15" fill="rgb(240,147,45)" fg:x="61" fg:w="1"/><text x="5.1144%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.8644%" y="357" width="0.0797%" height="15" fill="rgb(221,94,48)" fg:x="61" fg:w="1"/><text x="5.1144%" y="367.50"></text></g><g><title>engine::session::state::State::flush_entities (28 samples, 2.23%)</title><rect x="2.7911%" y="613" width="2.2329%" height="15" fill="rgb(249,209,17)" fg:x="35" fg:w="28"/><text x="3.0411%" y="623.50">e..</text></g><g><title>core::iter::adapters::try_process (27 samples, 2.15%)</title><rect x="2.8708%" y="597" width="2.1531%" height="15" fill="rgb(228,57,28)" fg:x="36" fg:w="27"/><text x="3.1208%" y="607.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (27 samples, 2.15%)</title><rect x="2.8708%" y="581" width="2.1531%" height="15" fill="rgb(250,133,26)" fg:x="36" fg:w="27"/><text x="3.1208%" y="591.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (26 samples, 2.07%)</title><rect x="2.9506%" y="565" width="2.0734%" height="15" fill="rgb(254,15,16)" fg:x="37" fg:w="26"/><text x="3.2006%" y="575.50">e..</text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="4.4657%" y="549" width="0.5582%" height="15" fill="rgb(209,147,42)" fg:x="56" fg:w="7"/><text x="4.7157%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="4.6252%" y="533" width="0.3987%" height="15" fill="rgb(208,5,29)" fg:x="58" fg:w="5"/><text x="4.8752%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="4.6252%" y="517" width="0.3987%" height="15" fill="rgb(250,73,31)" fg:x="58" fg:w="5"/><text x="4.8752%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="4.7049%" y="501" width="0.3190%" height="15" fill="rgb(238,45,10)" fg:x="59" fg:w="4"/><text x="4.9549%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="4.7049%" y="485" width="0.3190%" height="15" fill="rgb(214,104,5)" fg:x="59" fg:w="4"/><text x="4.9549%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="4.7847%" y="469" width="0.2392%" height="15" fill="rgb(242,217,19)" fg:x="60" fg:w="3"/><text x="5.0347%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="4.8644%" y="453" width="0.1595%" height="15" fill="rgb(246,113,27)" fg:x="61" fg:w="2"/><text x="5.1144%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="4.8644%" y="437" width="0.1595%" height="15" fill="rgb(221,34,27)" fg:x="61" fg:w="2"/><text x="5.1144%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="4.8644%" y="421" width="0.1595%" height="15" fill="rgb(246,109,6)" fg:x="61" fg:w="2"/><text x="5.1144%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="4.8644%" y="405" width="0.1595%" height="15" fill="rgb(217,12,25)" fg:x="61" fg:w="2"/><text x="5.1144%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="4.9442%" y="389" width="0.0797%" height="15" fill="rgb(250,195,5)" fg:x="62" fg:w="1"/><text x="5.1942%" y="399.50"></text></g><g><title>engine::session::Session::flush (29 samples, 2.31%)</title><rect x="2.7911%" y="645" width="2.3126%" height="15" fill="rgb(244,140,45)" fg:x="35" fg:w="29"/><text x="3.0411%" y="655.50">e..</text></g><g><title>engine::session::state::State::close (29 samples, 2.31%)</title><rect x="2.7911%" y="629" width="2.3126%" height="15" fill="rgb(230,64,14)" fg:x="35" fg:w="29"/><text x="3.0411%" y="639.50">e..</text></g><g><title>engine::session::state::State::flush_futures (1 samples, 0.08%)</title><rect x="5.0239%" y="613" width="0.0797%" height="15" fill="rgb(206,27,27)" fg:x="63" fg:w="1"/><text x="5.2739%" y="623.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="5.1037%" y="645" width="0.0797%" height="15" fill="rgb(230,14,50)" fg:x="64" fg:w="1"/><text x="5.3537%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="5.1037%" y="629" width="0.0797%" height="15" fill="rgb(237,172,14)" fg:x="64" fg:w="1"/><text x="5.3537%" y="639.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="5.1037%" y="613" width="0.0797%" height="15" fill="rgb(209,25,21)" fg:x="64" fg:w="1"/><text x="5.3537%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.1037%" y="597" width="0.0797%" height="15" fill="rgb(248,148,22)" fg:x="64" fg:w="1"/><text x="5.3537%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.1037%" y="581" width="0.0797%" height="15" fill="rgb(234,100,22)" fg:x="64" fg:w="1"/><text x="5.3537%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="5.1037%" y="565" width="0.0797%" height="15" fill="rgb(210,20,30)" fg:x="64" fg:w="1"/><text x="5.3537%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1037%" y="549" width="0.0797%" height="15" fill="rgb(232,58,0)" fg:x="64" fg:w="1"/><text x="5.3537%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.1834%" y="629" width="0.0797%" height="15" fill="rgb(221,68,13)" fg:x="65" fg:w="1"/><text x="5.4334%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.1834%" y="613" width="0.0797%" height="15" fill="rgb(231,194,11)" fg:x="65" fg:w="1"/><text x="5.4334%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.1834%" y="597" width="0.0797%" height="15" fill="rgb(235,51,41)" fg:x="65" fg:w="1"/><text x="5.4334%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.1834%" y="581" width="0.0797%" height="15" fill="rgb(240,50,32)" fg:x="65" fg:w="1"/><text x="5.4334%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.1834%" y="565" width="0.0797%" height="15" fill="rgb(240,185,36)" fg:x="65" fg:w="1"/><text x="5.4334%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="5.1834%" y="549" width="0.0797%" height="15" fill="rgb(211,168,15)" fg:x="65" fg:w="1"/><text x="5.4334%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="5.1834%" y="533" width="0.0797%" height="15" fill="rgb(221,70,0)" fg:x="65" fg:w="1"/><text x="5.4334%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.2632%" y="581" width="0.0797%" height="15" fill="rgb(205,21,33)" fg:x="66" fg:w="1"/><text x="5.5132%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.2632%" y="565" width="0.0797%" height="15" fill="rgb(225,106,10)" fg:x="66" fg:w="1"/><text x="5.5132%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="5.2632%" y="597" width="0.1595%" height="15" fill="rgb(236,200,50)" fg:x="66" fg:w="2"/><text x="5.5132%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.3429%" y="581" width="0.0797%" height="15" fill="rgb(249,93,23)" fg:x="67" fg:w="1"/><text x="5.5929%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.3429%" y="565" width="0.0797%" height="15" fill="rgb(244,115,35)" fg:x="67" fg:w="1"/><text x="5.5929%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.3429%" y="549" width="0.0797%" height="15" fill="rgb(231,129,47)" fg:x="67" fg:w="1"/><text x="5.5929%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.3429%" y="533" width="0.0797%" height="15" fill="rgb(225,160,50)" fg:x="67" fg:w="1"/><text x="5.5929%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="5.3429%" y="517" width="0.0797%" height="15" fill="rgb(218,135,23)" fg:x="67" fg:w="1"/><text x="5.5929%" y="527.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="5.3429%" y="501" width="0.0797%" height="15" fill="rgb(227,119,14)" fg:x="67" fg:w="1"/><text x="5.5929%" y="511.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="5.3429%" y="485" width="0.0797%" height="15" fill="rgb(242,138,13)" fg:x="67" fg:w="1"/><text x="5.5929%" y="495.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (4 samples, 0.32%)</title><rect x="5.2632%" y="613" width="0.3190%" height="15" fill="rgb(215,11,16)" fg:x="66" fg:w="4"/><text x="5.5132%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="5.4226%" y="597" width="0.1595%" height="15" fill="rgb(234,170,50)" fg:x="68" fg:w="2"/><text x="5.6726%" y="607.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (2 samples, 0.16%)</title><rect x="5.4226%" y="581" width="0.1595%" height="15" fill="rgb(233,34,20)" fg:x="68" fg:w="2"/><text x="5.6726%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="5.4226%" y="565" width="0.1595%" height="15" fill="rgb(237,100,45)" fg:x="68" fg:w="2"/><text x="5.6726%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="5.5024%" y="549" width="0.0797%" height="15" fill="rgb(231,184,36)" fg:x="69" fg:w="1"/><text x="5.7524%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.5024%" y="533" width="0.0797%" height="15" fill="rgb(252,93,2)" fg:x="69" fg:w="1"/><text x="5.7524%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.5024%" y="517" width="0.0797%" height="15" fill="rgb(248,176,47)" fg:x="69" fg:w="1"/><text x="5.7524%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.5821%" y="533" width="0.0797%" height="15" fill="rgb(249,125,23)" fg:x="70" fg:w="1"/><text x="5.8321%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.5821%" y="517" width="0.0797%" height="15" fill="rgb(239,67,42)" fg:x="70" fg:w="1"/><text x="5.8321%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.5821%" y="501" width="0.0797%" height="15" fill="rgb(244,162,4)" fg:x="70" fg:w="1"/><text x="5.8321%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.5821%" y="485" width="0.0797%" height="15" fill="rgb(214,150,38)" fg:x="70" fg:w="1"/><text x="5.8321%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.5821%" y="469" width="0.0797%" height="15" fill="rgb(228,211,28)" fg:x="70" fg:w="1"/><text x="5.8321%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.5821%" y="453" width="0.0797%" height="15" fill="rgb(212,98,48)" fg:x="70" fg:w="1"/><text x="5.8321%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.5821%" y="437" width="0.0797%" height="15" fill="rgb(213,45,13)" fg:x="70" fg:w="1"/><text x="5.8321%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.5821%" y="421" width="0.0797%" height="15" fill="rgb(218,35,29)" fg:x="70" fg:w="1"/><text x="5.8321%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.5821%" y="405" width="0.0797%" height="15" fill="rgb(244,13,3)" fg:x="70" fg:w="1"/><text x="5.8321%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.5821%" y="389" width="0.0797%" height="15" fill="rgb(235,170,19)" fg:x="70" fg:w="1"/><text x="5.8321%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.5821%" y="373" width="0.0797%" height="15" fill="rgb(233,193,43)" fg:x="70" fg:w="1"/><text x="5.8321%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.5821%" y="357" width="0.0797%" height="15" fill="rgb(228,223,20)" fg:x="70" fg:w="1"/><text x="5.8321%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.5821%" y="341" width="0.0797%" height="15" fill="rgb(208,85,54)" fg:x="70" fg:w="1"/><text x="5.8321%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.5821%" y="325" width="0.0797%" height="15" fill="rgb(254,14,45)" fg:x="70" fg:w="1"/><text x="5.8321%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5821%" y="309" width="0.0797%" height="15" fill="rgb(247,99,29)" fg:x="70" fg:w="1"/><text x="5.8321%" y="319.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="5.5821%" y="597" width="0.1595%" height="15" fill="rgb(225,180,54)" fg:x="70" fg:w="2"/><text x="5.8321%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="5.5821%" y="581" width="0.1595%" height="15" fill="rgb(239,88,43)" fg:x="70" fg:w="2"/><text x="5.8321%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="5.5821%" y="565" width="0.1595%" height="15" fill="rgb(209,47,11)" fg:x="70" fg:w="2"/><text x="5.8321%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="5.5821%" y="549" width="0.1595%" height="15" fill="rgb(219,179,23)" fg:x="70" fg:w="2"/><text x="5.8321%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.6619%" y="533" width="0.0797%" height="15" fill="rgb(213,183,19)" fg:x="71" fg:w="1"/><text x="5.9119%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="5.7416%" y="565" width="0.0797%" height="15" fill="rgb(210,11,9)" fg:x="72" fg:w="1"/><text x="5.9916%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="5.7416%" y="549" width="0.0797%" height="15" fill="rgb(239,194,16)" fg:x="72" fg:w="1"/><text x="5.9916%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.72%)</title><rect x="5.2632%" y="629" width="0.7177%" height="15" fill="rgb(246,23,50)" fg:x="66" fg:w="9"/><text x="5.5132%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="5.5821%" y="613" width="0.3987%" height="15" fill="rgb(245,10,41)" fg:x="70" fg:w="5"/><text x="5.8321%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="5.7416%" y="597" width="0.2392%" height="15" fill="rgb(228,43,24)" fg:x="72" fg:w="3"/><text x="5.9916%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="5.7416%" y="581" width="0.2392%" height="15" fill="rgb(220,151,0)" fg:x="72" fg:w="3"/><text x="5.9916%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="5.8214%" y="565" width="0.1595%" height="15" fill="rgb(232,219,10)" fg:x="73" fg:w="2"/><text x="6.0714%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="5.8214%" y="549" width="0.1595%" height="15" fill="rgb(227,217,48)" fg:x="73" fg:w="2"/><text x="6.0714%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="5.8214%" y="533" width="0.1595%" height="15" fill="rgb(210,66,35)" fg:x="73" fg:w="2"/><text x="6.0714%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.8214%" y="517" width="0.1595%" height="15" fill="rgb(254,6,7)" fg:x="73" fg:w="2"/><text x="6.0714%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="5.8214%" y="501" width="0.1595%" height="15" fill="rgb(235,222,42)" fg:x="73" fg:w="2"/><text x="6.0714%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.8214%" y="485" width="0.1595%" height="15" fill="rgb(245,126,5)" fg:x="73" fg:w="2"/><text x="6.0714%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="5.8214%" y="469" width="0.1595%" height="15" fill="rgb(215,73,17)" fg:x="73" fg:w="2"/><text x="6.0714%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9011%" y="453" width="0.0797%" height="15" fill="rgb(219,198,52)" fg:x="74" fg:w="1"/><text x="6.1511%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9809%" y="629" width="0.0797%" height="15" fill="rgb(217,159,18)" fg:x="75" fg:w="1"/><text x="6.2309%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9809%" y="613" width="0.0797%" height="15" fill="rgb(212,177,18)" fg:x="75" fg:w="1"/><text x="6.2309%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9809%" y="597" width="0.0797%" height="15" fill="rgb(241,10,11)" fg:x="75" fg:w="1"/><text x="6.2309%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9809%" y="581" width="0.0797%" height="15" fill="rgb(232,114,35)" fg:x="75" fg:w="1"/><text x="6.2309%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9809%" y="565" width="0.0797%" height="15" fill="rgb(238,222,8)" fg:x="75" fg:w="1"/><text x="6.2309%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9809%" y="549" width="0.0797%" height="15" fill="rgb(251,153,44)" fg:x="75" fg:w="1"/><text x="6.2309%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.9809%" y="533" width="0.0797%" height="15" fill="rgb(210,140,51)" fg:x="75" fg:w="1"/><text x="6.2309%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.9809%" y="517" width="0.0797%" height="15" fill="rgb(222,63,0)" fg:x="75" fg:w="1"/><text x="6.2309%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.9809%" y="501" width="0.0797%" height="15" fill="rgb(240,18,40)" fg:x="75" fg:w="1"/><text x="6.2309%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.9809%" y="485" width="0.0797%" height="15" fill="rgb(237,88,16)" fg:x="75" fg:w="1"/><text x="6.2309%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.9809%" y="469" width="0.0797%" height="15" fill="rgb(251,117,13)" fg:x="75" fg:w="1"/><text x="6.2309%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.9809%" y="453" width="0.0797%" height="15" fill="rgb(251,228,8)" fg:x="75" fg:w="1"/><text x="6.2309%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.9809%" y="437" width="0.0797%" height="15" fill="rgb(205,107,49)" fg:x="75" fg:w="1"/><text x="6.2309%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.9809%" y="421" width="0.0797%" height="15" fill="rgb(238,72,41)" fg:x="75" fg:w="1"/><text x="6.2309%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.9809%" y="405" width="0.0797%" height="15" fill="rgb(248,183,52)" fg:x="75" fg:w="1"/><text x="6.2309%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9809%" y="389" width="0.0797%" height="15" fill="rgb(215,58,20)" fg:x="75" fg:w="1"/><text x="6.2309%" y="399.50"></text></g><g><title>plugins_core::build::Build::save (12 samples, 0.96%)</title><rect x="5.1834%" y="645" width="0.9569%" height="15" fill="rgb(209,49,13)" fg:x="65" fg:w="12"/><text x="5.4334%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.0606%" y="629" width="0.0797%" height="15" fill="rgb(208,113,17)" fg:x="76" fg:w="1"/><text x="6.3106%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.0606%" y="613" width="0.0797%" height="15" fill="rgb(208,14,22)" fg:x="76" fg:w="1"/><text x="6.3106%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="6.0606%" y="597" width="0.0797%" height="15" fill="rgb(222,95,2)" fg:x="76" fg:w="1"/><text x="6.3106%" y="607.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="6.0606%" y="581" width="0.0797%" height="15" fill="rgb(253,180,37)" fg:x="76" fg:w="1"/><text x="6.3106%" y="591.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="6.0606%" y="565" width="0.0797%" height="15" fill="rgb(250,81,33)" fg:x="76" fg:w="1"/><text x="6.3106%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="6.1404%" y="645" width="0.0797%" height="15" fill="rgb(251,151,41)" fg:x="77" fg:w="1"/><text x="6.3904%" y="655.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="6.1404%" y="629" width="0.0797%" height="15" fill="rgb(210,135,17)" fg:x="77" fg:w="1"/><text x="6.3904%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="6.1404%" y="613" width="0.0797%" height="15" fill="rgb(239,21,29)" fg:x="77" fg:w="1"/><text x="6.3904%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1404%" y="597" width="0.0797%" height="15" fill="rgb(231,215,16)" fg:x="77" fg:w="1"/><text x="6.3904%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.1404%" y="581" width="0.0797%" height="15" fill="rgb(239,151,54)" fg:x="77" fg:w="1"/><text x="6.3904%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1404%" y="565" width="0.0797%" height="15" fill="rgb(222,122,38)" fg:x="77" fg:w="1"/><text x="6.3904%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.1404%" y="549" width="0.0797%" height="15" fill="rgb(243,128,1)" fg:x="77" fg:w="1"/><text x="6.3904%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1404%" y="533" width="0.0797%" height="15" fill="rgb(225,74,21)" fg:x="77" fg:w="1"/><text x="6.3904%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.1404%" y="517" width="0.0797%" height="15" fill="rgb(216,210,10)" fg:x="77" fg:w="1"/><text x="6.3904%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="6.2201%" y="613" width="0.0797%" height="15" fill="rgb(228,76,19)" fg:x="78" fg:w="1"/><text x="6.4701%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="6.2201%" y="597" width="0.0797%" height="15" fill="rgb(236,80,34)" fg:x="78" fg:w="1"/><text x="6.4701%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.2201%" y="581" width="0.0797%" height="15" fill="rgb(225,173,23)" fg:x="78" fg:w="1"/><text x="6.4701%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.2201%" y="565" width="0.0797%" height="15" fill="rgb(253,38,1)" fg:x="78" fg:w="1"/><text x="6.4701%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="6.2201%" y="549" width="0.0797%" height="15" fill="rgb(206,155,35)" fg:x="78" fg:w="1"/><text x="6.4701%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.2201%" y="533" width="0.0797%" height="15" fill="rgb(254,27,53)" fg:x="78" fg:w="1"/><text x="6.4701%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2201%" y="517" width="0.0797%" height="15" fill="rgb(225,52,41)" fg:x="78" fg:w="1"/><text x="6.4701%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.2201%" y="501" width="0.0797%" height="15" fill="rgb(244,53,18)" fg:x="78" fg:w="1"/><text x="6.4701%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2201%" y="485" width="0.0797%" height="15" fill="rgb(254,206,48)" fg:x="78" fg:w="1"/><text x="6.4701%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.2201%" y="469" width="0.0797%" height="15" fill="rgb(236,182,23)" fg:x="78" fg:w="1"/><text x="6.4701%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2201%" y="453" width="0.0797%" height="15" fill="rgb(236,191,37)" fg:x="78" fg:w="1"/><text x="6.4701%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="6.2998%" y="597" width="0.0797%" height="15" fill="rgb(245,53,8)" fg:x="79" fg:w="1"/><text x="6.5498%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.2998%" y="581" width="0.0797%" height="15" fill="rgb(245,147,9)" fg:x="79" fg:w="1"/><text x="6.5498%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2998%" y="565" width="0.0797%" height="15" fill="rgb(218,24,48)" fg:x="79" fg:w="1"/><text x="6.5498%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.2998%" y="549" width="0.0797%" height="15" fill="rgb(254,23,9)" fg:x="79" fg:w="1"/><text x="6.5498%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2998%" y="533" width="0.0797%" height="15" fill="rgb(244,105,9)" fg:x="79" fg:w="1"/><text x="6.5498%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.2998%" y="517" width="0.0797%" height="15" fill="rgb(212,142,22)" fg:x="79" fg:w="1"/><text x="6.5498%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2998%" y="501" width="0.0797%" height="15" fill="rgb(221,114,49)" fg:x="79" fg:w="1"/><text x="6.5498%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.2998%" y="485" width="0.0797%" height="15" fill="rgb(223,210,25)" fg:x="79" fg:w="1"/><text x="6.5498%" y="495.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="6.2998%" y="613" width="0.1595%" height="15" fill="rgb(235,162,44)" fg:x="79" fg:w="2"/><text x="6.5498%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="6.3796%" y="597" width="0.0797%" height="15" fill="rgb(237,65,45)" fg:x="80" fg:w="1"/><text x="6.6296%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="6.3796%" y="581" width="0.0797%" height="15" fill="rgb(208,79,9)" fg:x="80" fg:w="1"/><text x="6.6296%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.3796%" y="565" width="0.0797%" height="15" fill="rgb(215,228,8)" fg:x="80" fg:w="1"/><text x="6.6296%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.3796%" y="549" width="0.0797%" height="15" fill="rgb(205,185,17)" fg:x="80" fg:w="1"/><text x="6.6296%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="6.3796%" y="533" width="0.0797%" height="15" fill="rgb(213,62,36)" fg:x="80" fg:w="1"/><text x="6.6296%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.3796%" y="517" width="0.0797%" height="15" fill="rgb(209,34,9)" fg:x="80" fg:w="1"/><text x="6.6296%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (5 samples, 0.40%)</title><rect x="6.2201%" y="645" width="0.3987%" height="15" fill="rgb(246,151,27)" fg:x="78" fg:w="5"/><text x="6.4701%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="6.2201%" y="629" width="0.3987%" height="15" fill="rgb(218,206,3)" fg:x="78" fg:w="5"/><text x="6.4701%" y="639.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="6.4593%" y="613" width="0.1595%" height="15" fill="rgb(242,202,1)" fg:x="81" fg:w="2"/><text x="6.7093%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="6.4593%" y="597" width="0.1595%" height="15" fill="rgb(227,185,16)" fg:x="81" fg:w="2"/><text x="6.7093%" y="607.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="6.4593%" y="581" width="0.1595%" height="15" fill="rgb(241,1,14)" fg:x="81" fg:w="2"/><text x="6.7093%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="6.4593%" y="565" width="0.1595%" height="15" fill="rgb(212,113,25)" fg:x="81" fg:w="2"/><text x="6.7093%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5391%" y="549" width="0.0797%" height="15" fill="rgb(247,37,43)" fg:x="82" fg:w="1"/><text x="6.7891%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.5391%" y="533" width="0.0797%" height="15" fill="rgb(226,54,8)" fg:x="82" fg:w="1"/><text x="6.7891%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5391%" y="517" width="0.0797%" height="15" fill="rgb(251,205,25)" fg:x="82" fg:w="1"/><text x="6.7891%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="6.6188%" y="629" width="0.0797%" height="15" fill="rgb(246,87,35)" fg:x="83" fg:w="1"/><text x="6.8688%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="6.6188%" y="613" width="0.0797%" height="15" fill="rgb(251,145,46)" fg:x="83" fg:w="1"/><text x="6.8688%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.6188%" y="597" width="0.0797%" height="15" fill="rgb(210,210,33)" fg:x="83" fg:w="1"/><text x="6.8688%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.6188%" y="581" width="0.0797%" height="15" fill="rgb(221,151,11)" fg:x="83" fg:w="1"/><text x="6.8688%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.6188%" y="565" width="0.0797%" height="15" fill="rgb(208,160,28)" fg:x="83" fg:w="1"/><text x="6.8688%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6188%" y="549" width="0.0797%" height="15" fill="rgb(243,69,29)" fg:x="83" fg:w="1"/><text x="6.8688%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6986%" y="613" width="0.0797%" height="15" fill="rgb(224,144,4)" fg:x="84" fg:w="1"/><text x="6.9486%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (2 samples, 0.16%)</title><rect x="6.6986%" y="629" width="0.1595%" height="15" fill="rgb(211,140,38)" fg:x="84" fg:w="2"/><text x="6.9486%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="6.7783%" y="613" width="0.0797%" height="15" fill="rgb(252,189,15)" fg:x="85" fg:w="1"/><text x="7.0283%" y="623.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="6.7783%" y="597" width="0.0797%" height="15" fill="rgb(251,175,23)" fg:x="85" fg:w="1"/><text x="7.0283%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.7783%" y="581" width="0.0797%" height="15" fill="rgb(212,184,11)" fg:x="85" fg:w="1"/><text x="7.0283%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.7783%" y="565" width="0.0797%" height="15" fill="rgb(217,205,6)" fg:x="85" fg:w="1"/><text x="7.0283%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="6.8581%" y="629" width="0.0797%" height="15" fill="rgb(235,45,45)" fg:x="86" fg:w="1"/><text x="7.1081%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.8581%" y="613" width="0.0797%" height="15" fill="rgb(211,157,53)" fg:x="86" fg:w="1"/><text x="7.1081%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8581%" y="597" width="0.0797%" height="15" fill="rgb(212,13,8)" fg:x="86" fg:w="1"/><text x="7.1081%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.8581%" y="581" width="0.0797%" height="15" fill="rgb(218,80,36)" fg:x="86" fg:w="1"/><text x="7.1081%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.8581%" y="565" width="0.0797%" height="15" fill="rgb(211,123,43)" fg:x="86" fg:w="1"/><text x="7.1081%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9378%" y="501" width="0.0797%" height="15" fill="rgb(206,165,2)" fg:x="87" fg:w="1"/><text x="7.1878%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.9378%" y="485" width="0.0797%" height="15" fill="rgb(248,63,35)" fg:x="87" fg:w="1"/><text x="7.1878%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.9378%" y="469" width="0.0797%" height="15" fill="rgb(219,133,41)" fg:x="87" fg:w="1"/><text x="7.1878%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.9378%" y="453" width="0.0797%" height="15" fill="rgb(206,175,46)" fg:x="87" fg:w="1"/><text x="7.1878%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.9378%" y="437" width="0.0797%" height="15" fill="rgb(224,41,35)" fg:x="87" fg:w="1"/><text x="7.1878%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.9378%" y="421" width="0.0797%" height="15" fill="rgb(226,113,24)" fg:x="87" fg:w="1"/><text x="7.1878%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="6.9378%" y="405" width="0.0797%" height="15" fill="rgb(219,51,41)" fg:x="87" fg:w="1"/><text x="7.1878%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.9378%" y="389" width="0.0797%" height="15" fill="rgb(220,145,47)" fg:x="87" fg:w="1"/><text x="7.1878%" y="399.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="6.9378%" y="629" width="0.1595%" height="15" fill="rgb(239,121,47)" fg:x="87" fg:w="2"/><text x="7.1878%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="6.9378%" y="613" width="0.1595%" height="15" fill="rgb(207,60,40)" fg:x="87" fg:w="2"/><text x="7.1878%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="6.9378%" y="597" width="0.1595%" height="15" fill="rgb(224,229,11)" fg:x="87" fg:w="2"/><text x="7.1878%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="6.9378%" y="581" width="0.1595%" height="15" fill="rgb(252,28,32)" fg:x="87" fg:w="2"/><text x="7.1878%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="6.9378%" y="565" width="0.1595%" height="15" fill="rgb(207,52,49)" fg:x="87" fg:w="2"/><text x="7.1878%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="6.9378%" y="549" width="0.1595%" height="15" fill="rgb(243,51,50)" fg:x="87" fg:w="2"/><text x="7.1878%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.9378%" y="533" width="0.1595%" height="15" fill="rgb(212,92,21)" fg:x="87" fg:w="2"/><text x="7.1878%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="6.9378%" y="517" width="0.1595%" height="15" fill="rgb(230,183,50)" fg:x="87" fg:w="2"/><text x="7.1878%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.0175%" y="501" width="0.0797%" height="15" fill="rgb(225,48,9)" fg:x="88" fg:w="1"/><text x="7.2675%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0175%" y="485" width="0.0797%" height="15" fill="rgb(254,44,4)" fg:x="88" fg:w="1"/><text x="7.2675%" y="495.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="7.0973%" y="613" width="0.0797%" height="15" fill="rgb(252,128,37)" fg:x="89" fg:w="1"/><text x="7.3473%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.0973%" y="597" width="0.0797%" height="15" fill="rgb(227,178,8)" fg:x="89" fg:w="1"/><text x="7.3473%" y="607.50"></text></g><g><title>&lt;kernel::session::SetSession&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.1770%" y="613" width="0.0797%" height="15" fill="rgb(205,206,32)" fg:x="90" fg:w="1"/><text x="7.4270%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="7.2568%" y="517" width="0.0797%" height="15" fill="rgb(220,218,22)" fg:x="91" fg:w="1"/><text x="7.5068%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.2568%" y="501" width="0.0797%" height="15" fill="rgb(236,41,28)" fg:x="91" fg:w="1"/><text x="7.5068%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.2568%" y="485" width="0.0797%" height="15" fill="rgb(219,37,7)" fg:x="91" fg:w="1"/><text x="7.5068%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.2568%" y="469" width="0.0797%" height="15" fill="rgb(206,160,15)" fg:x="91" fg:w="1"/><text x="7.5068%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.2568%" y="453" width="0.0797%" height="15" fill="rgb(208,82,21)" fg:x="91" fg:w="1"/><text x="7.5068%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.3365%" y="501" width="0.0797%" height="15" fill="rgb(226,130,25)" fg:x="92" fg:w="1"/><text x="7.5865%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.3365%" y="485" width="0.0797%" height="15" fill="rgb(212,72,24)" fg:x="92" fg:w="1"/><text x="7.5865%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.4960%" y="485" width="0.0797%" height="15" fill="rgb(206,28,16)" fg:x="94" fg:w="1"/><text x="7.7460%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.4960%" y="469" width="0.0797%" height="15" fill="rgb(249,41,5)" fg:x="94" fg:w="1"/><text x="7.7460%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.4960%" y="453" width="0.0797%" height="15" fill="rgb(233,96,48)" fg:x="94" fg:w="1"/><text x="7.7460%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="7.5758%" y="485" width="0.2392%" height="15" fill="rgb(240,198,11)" fg:x="95" fg:w="3"/><text x="7.8258%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.7352%" y="469" width="0.0797%" height="15" fill="rgb(209,175,35)" fg:x="97" fg:w="1"/><text x="7.9852%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.7352%" y="453" width="0.0797%" height="15" fill="rgb(214,40,51)" fg:x="97" fg:w="1"/><text x="7.9852%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.7352%" y="437" width="0.0797%" height="15" fill="rgb(252,56,4)" fg:x="97" fg:w="1"/><text x="7.9852%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.8150%" y="421" width="0.0797%" height="15" fill="rgb(219,131,5)" fg:x="98" fg:w="1"/><text x="8.0650%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="7.8150%" y="469" width="0.1595%" height="15" fill="rgb(223,67,53)" fg:x="98" fg:w="2"/><text x="8.0650%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.8150%" y="453" width="0.1595%" height="15" fill="rgb(227,154,8)" fg:x="98" fg:w="2"/><text x="8.0650%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.8150%" y="437" width="0.1595%" height="15" fill="rgb(216,174,51)" fg:x="98" fg:w="2"/><text x="8.0650%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8947%" y="421" width="0.0797%" height="15" fill="rgb(239,60,34)" fg:x="99" fg:w="1"/><text x="8.1447%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.0542%" y="453" width="0.0797%" height="15" fill="rgb(236,165,48)" fg:x="101" fg:w="1"/><text x="8.3042%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0542%" y="437" width="0.0797%" height="15" fill="rgb(210,37,26)" fg:x="101" fg:w="1"/><text x="8.3042%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.0542%" y="421" width="0.0797%" height="15" fill="rgb(211,3,17)" fg:x="101" fg:w="1"/><text x="8.3042%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.0542%" y="405" width="0.0797%" height="15" fill="rgb(234,88,49)" fg:x="101" fg:w="1"/><text x="8.3042%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.0542%" y="389" width="0.0797%" height="15" fill="rgb(233,40,17)" fg:x="101" fg:w="1"/><text x="8.3042%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.0542%" y="373" width="0.0797%" height="15" fill="rgb(235,127,31)" fg:x="101" fg:w="1"/><text x="8.3042%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.0542%" y="357" width="0.0797%" height="15" fill="rgb(248,167,17)" fg:x="101" fg:w="1"/><text x="8.3042%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1340%" y="437" width="0.0797%" height="15" fill="rgb(218,179,8)" fg:x="102" fg:w="1"/><text x="8.3840%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="7.8150%" y="485" width="0.4785%" height="15" fill="rgb(216,92,14)" fg:x="98" fg:w="6"/><text x="8.0650%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="7.9745%" y="469" width="0.3190%" height="15" fill="rgb(221,198,46)" fg:x="100" fg:w="4"/><text x="8.2245%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.1340%" y="453" width="0.1595%" height="15" fill="rgb(244,7,25)" fg:x="102" fg:w="2"/><text x="8.3840%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.2137%" y="437" width="0.0797%" height="15" fill="rgb(233,75,6)" fg:x="103" fg:w="1"/><text x="8.4637%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.04%)</title><rect x="7.3365%" y="517" width="1.0367%" height="15" fill="rgb(240,189,41)" fg:x="92" fg:w="13"/><text x="7.5865%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="7.4163%" y="501" width="0.9569%" height="15" fill="rgb(237,157,21)" fg:x="93" fg:w="12"/><text x="7.6663%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.2935%" y="485" width="0.0797%" height="15" fill="rgb(210,136,49)" fg:x="104" fg:w="1"/><text x="8.5435%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.3732%" y="485" width="0.0797%" height="15" fill="rgb(210,68,29)" fg:x="105" fg:w="1"/><text x="8.6232%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.4530%" y="485" width="0.0797%" height="15" fill="rgb(247,207,20)" fg:x="106" fg:w="1"/><text x="8.7030%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.4530%" y="469" width="0.0797%" height="15" fill="rgb(224,73,48)" fg:x="106" fg:w="1"/><text x="8.7030%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5327%" y="469" width="0.0797%" height="15" fill="rgb(215,136,47)" fg:x="107" fg:w="1"/><text x="8.7827%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="8.6124%" y="453" width="0.1595%" height="15" fill="rgb(232,222,16)" fg:x="108" fg:w="2"/><text x="8.8624%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.6922%" y="437" width="0.0797%" height="15" fill="rgb(249,202,47)" fg:x="109" fg:w="1"/><text x="8.9422%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.7719%" y="437" width="0.0797%" height="15" fill="rgb(236,56,8)" fg:x="110" fg:w="1"/><text x="9.0219%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="8.8517%" y="437" width="0.0797%" height="15" fill="rgb(222,6,3)" fg:x="111" fg:w="1"/><text x="9.1017%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.8517%" y="421" width="0.0797%" height="15" fill="rgb(254,222,28)" fg:x="111" fg:w="1"/><text x="9.1017%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.8517%" y="405" width="0.0797%" height="15" fill="rgb(219,57,23)" fg:x="111" fg:w="1"/><text x="9.1017%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="8.3732%" y="517" width="0.6380%" height="15" fill="rgb(251,106,48)" fg:x="105" fg:w="8"/><text x="8.6232%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.64%)</title><rect x="8.3732%" y="501" width="0.6380%" height="15" fill="rgb(242,2,23)" fg:x="105" fg:w="8"/><text x="8.6232%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="8.5327%" y="485" width="0.4785%" height="15" fill="rgb(212,109,31)" fg:x="107" fg:w="6"/><text x="8.7827%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="8.6124%" y="469" width="0.3987%" height="15" fill="rgb(241,9,22)" fg:x="108" fg:w="5"/><text x="8.8624%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.7719%" y="453" width="0.2392%" height="15" fill="rgb(209,64,27)" fg:x="110" fg:w="3"/><text x="9.0219%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.9314%" y="437" width="0.0797%" height="15" fill="rgb(248,13,44)" fg:x="112" fg:w="1"/><text x="9.1814%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.9314%" y="421" width="0.0797%" height="15" fill="rgb(213,86,6)" fg:x="112" fg:w="1"/><text x="9.1814%" y="431.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="9.0112%" y="501" width="0.0797%" height="15" fill="rgb(247,11,18)" fg:x="113" fg:w="1"/><text x="9.2612%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.0909%" y="469" width="0.0797%" height="15" fill="rgb(252,31,11)" fg:x="114" fg:w="1"/><text x="9.3409%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1707%" y="469" width="0.0797%" height="15" fill="rgb(215,63,51)" fg:x="115" fg:w="1"/><text x="9.4207%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.1707%" y="453" width="0.0797%" height="15" fill="rgb(222,180,4)" fg:x="115" fg:w="1"/><text x="9.4207%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.1707%" y="437" width="0.0797%" height="15" fill="rgb(233,4,23)" fg:x="115" fg:w="1"/><text x="9.4207%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="9.2504%" y="469" width="0.0797%" height="15" fill="rgb(230,116,22)" fg:x="116" fg:w="1"/><text x="9.5004%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.2504%" y="453" width="0.0797%" height="15" fill="rgb(222,20,14)" fg:x="116" fg:w="1"/><text x="9.5004%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.2504%" y="437" width="0.0797%" height="15" fill="rgb(210,176,43)" fg:x="116" fg:w="1"/><text x="9.5004%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="9.4099%" y="437" width="0.0797%" height="15" fill="rgb(219,67,32)" fg:x="118" fg:w="1"/><text x="9.6599%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="9.4896%" y="421" width="0.0797%" height="15" fill="rgb(228,91,39)" fg:x="119" fg:w="1"/><text x="9.7396%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4896%" y="405" width="0.0797%" height="15" fill="rgb(254,63,14)" fg:x="119" fg:w="1"/><text x="9.7396%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.4896%" y="389" width="0.0797%" height="15" fill="rgb(216,171,39)" fg:x="119" fg:w="1"/><text x="9.7396%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4896%" y="373" width="0.0797%" height="15" fill="rgb(248,68,25)" fg:x="119" fg:w="1"/><text x="9.7396%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4896%" y="357" width="0.0797%" height="15" fill="rgb(239,63,16)" fg:x="119" fg:w="1"/><text x="9.7396%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="9.5694%" y="389" width="0.2392%" height="15" fill="rgb(225,111,43)" fg:x="120" fg:w="3"/><text x="9.8194%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.6491%" y="373" width="0.1595%" height="15" fill="rgb(246,165,17)" fg:x="121" fg:w="2"/><text x="9.8991%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.7289%" y="357" width="0.0797%" height="15" fill="rgb(208,124,1)" fg:x="122" fg:w="1"/><text x="9.9789%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.8884%" y="373" width="0.0797%" height="15" fill="rgb(234,147,33)" fg:x="124" fg:w="1"/><text x="10.1384%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9681%" y="357" width="0.0797%" height="15" fill="rgb(240,86,30)" fg:x="125" fg:w="1"/><text x="10.2181%" y="367.50"></text></g><g><title>engine::session::Session::flush (38 samples, 3.03%)</title><rect x="7.0973%" y="629" width="3.0303%" height="15" fill="rgb(237,34,51)" fg:x="89" fg:w="38"/><text x="7.3473%" y="639.50">eng..</text></g><g><title>engine::session::Session::save_changes (36 samples, 2.87%)</title><rect x="7.2568%" y="613" width="2.8708%" height="15" fill="rgb(232,131,41)" fg:x="91" fg:w="36"/><text x="7.5068%" y="623.50">en..</text></g><g><title>engine::session::state::State::close (36 samples, 2.87%)</title><rect x="7.2568%" y="597" width="2.8708%" height="15" fill="rgb(227,129,53)" fg:x="91" fg:w="36"/><text x="7.5068%" y="607.50">en..</text></g><g><title>engine::session::state::State::flush_entities (36 samples, 2.87%)</title><rect x="7.2568%" y="581" width="2.8708%" height="15" fill="rgb(230,90,35)" fg:x="91" fg:w="36"/><text x="7.5068%" y="591.50">en..</text></g><g><title>core::iter::adapters::try_process (36 samples, 2.87%)</title><rect x="7.2568%" y="565" width="2.8708%" height="15" fill="rgb(248,88,27)" fg:x="91" fg:w="36"/><text x="7.5068%" y="575.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (36 samples, 2.87%)</title><rect x="7.2568%" y="549" width="2.8708%" height="15" fill="rgb(223,18,17)" fg:x="91" fg:w="36"/><text x="7.5068%" y="559.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (36 samples, 2.87%)</title><rect x="7.2568%" y="533" width="2.8708%" height="15" fill="rgb(241,11,10)" fg:x="91" fg:w="36"/><text x="7.5068%" y="543.50">en..</text></g><g><title>kernel::model::any_entity_changes (14 samples, 1.12%)</title><rect x="9.0112%" y="517" width="1.1164%" height="15" fill="rgb(232,111,52)" fg:x="113" fg:w="14"/><text x="9.2612%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (13 samples, 1.04%)</title><rect x="9.0909%" y="501" width="1.0367%" height="15" fill="rgb(228,67,8)" fg:x="114" fg:w="13"/><text x="9.3409%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.04%)</title><rect x="9.0909%" y="485" width="1.0367%" height="15" fill="rgb(251,168,31)" fg:x="114" fg:w="13"/><text x="9.3409%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.80%)</title><rect x="9.3301%" y="469" width="0.7974%" height="15" fill="rgb(249,164,11)" fg:x="117" fg:w="10"/><text x="9.5801%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.72%)</title><rect x="9.4099%" y="453" width="0.7177%" height="15" fill="rgb(239,81,9)" fg:x="118" fg:w="9"/><text x="9.6599%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="9.4896%" y="437" width="0.6380%" height="15" fill="rgb(222,145,38)" fg:x="119" fg:w="8"/><text x="9.7396%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="9.5694%" y="421" width="0.5582%" height="15" fill="rgb(238,80,54)" fg:x="120" fg:w="7"/><text x="9.8194%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="9.5694%" y="405" width="0.5582%" height="15" fill="rgb(237,116,16)" fg:x="120" fg:w="7"/><text x="9.8194%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="9.8086%" y="389" width="0.3190%" height="15" fill="rgb(218,135,19)" fg:x="123" fg:w="4"/><text x="10.0586%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="9.9681%" y="373" width="0.1595%" height="15" fill="rgb(216,207,44)" fg:x="125" fg:w="2"/><text x="10.2181%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.0478%" y="357" width="0.0797%" height="15" fill="rgb(226,152,40)" fg:x="126" fg:w="1"/><text x="10.2978%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0478%" y="341" width="0.0797%" height="15" fill="rgb(219,98,35)" fg:x="126" fg:w="1"/><text x="10.2978%" y="351.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="10.1276%" y="629" width="0.0797%" height="15" fill="rgb(222,136,46)" fg:x="127" fg:w="1"/><text x="10.3776%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="10.1276%" y="613" width="0.0797%" height="15" fill="rgb(222,71,8)" fg:x="127" fg:w="1"/><text x="10.3776%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="10.1276%" y="597" width="0.0797%" height="15" fill="rgb(209,89,53)" fg:x="127" fg:w="1"/><text x="10.3776%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1276%" y="581" width="0.0797%" height="15" fill="rgb(210,97,51)" fg:x="127" fg:w="1"/><text x="10.3776%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.1276%" y="565" width="0.0797%" height="15" fill="rgb(248,65,21)" fg:x="127" fg:w="1"/><text x="10.3776%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="10.1276%" y="549" width="0.0797%" height="15" fill="rgb(222,5,31)" fg:x="127" fg:w="1"/><text x="10.3776%" y="559.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="10.1276%" y="533" width="0.0797%" height="15" fill="rgb(241,16,30)" fg:x="127" fg:w="1"/><text x="10.3776%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1276%" y="517" width="0.0797%" height="15" fill="rgb(215,86,30)" fg:x="127" fg:w="1"/><text x="10.3776%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="10.2073%" y="581" width="0.0797%" height="15" fill="rgb(235,26,44)" fg:x="128" fg:w="1"/><text x="10.4573%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="10.2073%" y="565" width="0.0797%" height="15" fill="rgb(228,147,14)" fg:x="128" fg:w="1"/><text x="10.4573%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="10.2073%" y="549" width="0.0797%" height="15" fill="rgb(253,38,50)" fg:x="128" fg:w="1"/><text x="10.4573%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2073%" y="533" width="0.0797%" height="15" fill="rgb(251,151,16)" fg:x="128" fg:w="1"/><text x="10.4573%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.2073%" y="517" width="0.0797%" height="15" fill="rgb(224,64,19)" fg:x="128" fg:w="1"/><text x="10.4573%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="10.2073%" y="501" width="0.0797%" height="15" fill="rgb(235,214,47)" fg:x="128" fg:w="1"/><text x="10.4573%" y="511.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="10.2073%" y="485" width="0.0797%" height="15" fill="rgb(218,15,19)" fg:x="128" fg:w="1"/><text x="10.4573%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.2073%" y="469" width="0.0797%" height="15" fill="rgb(247,209,3)" fg:x="128" fg:w="1"/><text x="10.4573%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2073%" y="453" width="0.0797%" height="15" fill="rgb(217,29,2)" fg:x="128" fg:w="1"/><text x="10.4573%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2871%" y="549" width="0.0797%" height="15" fill="rgb(234,9,9)" fg:x="129" fg:w="1"/><text x="10.5371%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="10.3668%" y="549" width="0.0797%" height="15" fill="rgb(207,43,14)" fg:x="130" fg:w="1"/><text x="10.6168%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.3668%" y="533" width="0.0797%" height="15" fill="rgb(216,219,36)" fg:x="130" fg:w="1"/><text x="10.6168%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.3668%" y="517" width="0.0797%" height="15" fill="rgb(238,12,26)" fg:x="130" fg:w="1"/><text x="10.6168%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="10.2073%" y="613" width="0.3190%" height="15" fill="rgb(226,67,30)" fg:x="128" fg:w="4"/><text x="10.4573%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="10.2073%" y="597" width="0.3190%" height="15" fill="rgb(229,154,7)" fg:x="128" fg:w="4"/><text x="10.4573%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="10.2871%" y="581" width="0.2392%" height="15" fill="rgb(249,90,18)" fg:x="129" fg:w="3"/><text x="10.5371%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="10.2871%" y="565" width="0.2392%" height="15" fill="rgb(223,53,15)" fg:x="129" fg:w="3"/><text x="10.5371%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="10.4466%" y="549" width="0.0797%" height="15" fill="rgb(253,86,38)" fg:x="131" fg:w="1"/><text x="10.6966%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="10.4466%" y="533" width="0.0797%" height="15" fill="rgb(222,198,9)" fg:x="131" fg:w="1"/><text x="10.6966%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.4466%" y="517" width="0.0797%" height="15" fill="rgb(240,146,25)" fg:x="131" fg:w="1"/><text x="10.6966%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4466%" y="501" width="0.0797%" height="15" fill="rgb(225,38,10)" fg:x="131" fg:w="1"/><text x="10.6966%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4466%" y="485" width="0.0797%" height="15" fill="rgb(246,93,4)" fg:x="131" fg:w="1"/><text x="10.6966%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4466%" y="469" width="0.0797%" height="15" fill="rgb(222,55,18)" fg:x="131" fg:w="1"/><text x="10.6966%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.5263%" y="565" width="0.0797%" height="15" fill="rgb(233,137,48)" fg:x="132" fg:w="1"/><text x="10.7763%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.5263%" y="549" width="0.0797%" height="15" fill="rgb(214,8,54)" fg:x="132" fg:w="1"/><text x="10.7763%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.5263%" y="533" width="0.0797%" height="15" fill="rgb(206,75,4)" fg:x="132" fg:w="1"/><text x="10.7763%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.5263%" y="517" width="0.0797%" height="15" fill="rgb(238,171,14)" fg:x="132" fg:w="1"/><text x="10.7763%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.5263%" y="501" width="0.0797%" height="15" fill="rgb(233,70,41)" fg:x="132" fg:w="1"/><text x="10.7763%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.5263%" y="485" width="0.0797%" height="15" fill="rgb(214,68,36)" fg:x="132" fg:w="1"/><text x="10.7763%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.5263%" y="469" width="0.0797%" height="15" fill="rgb(223,29,5)" fg:x="132" fg:w="1"/><text x="10.7763%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.5263%" y="453" width="0.0797%" height="15" fill="rgb(251,22,40)" fg:x="132" fg:w="1"/><text x="10.7763%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.5263%" y="437" width="0.0797%" height="15" fill="rgb(210,67,41)" fg:x="132" fg:w="1"/><text x="10.7763%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.5263%" y="421" width="0.0797%" height="15" fill="rgb(225,177,31)" fg:x="132" fg:w="1"/><text x="10.7763%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.5263%" y="405" width="0.0797%" height="15" fill="rgb(221,229,11)" fg:x="132" fg:w="1"/><text x="10.7763%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.5263%" y="389" width="0.0797%" height="15" fill="rgb(247,172,52)" fg:x="132" fg:w="1"/><text x="10.7763%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.5263%" y="373" width="0.0797%" height="15" fill="rgb(212,73,19)" fg:x="132" fg:w="1"/><text x="10.7763%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.5263%" y="357" width="0.0797%" height="15" fill="rgb(244,7,46)" fg:x="132" fg:w="1"/><text x="10.7763%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5263%" y="341" width="0.0797%" height="15" fill="rgb(230,113,20)" fg:x="132" fg:w="1"/><text x="10.7763%" y="351.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="10.2073%" y="629" width="0.4785%" height="15" fill="rgb(209,97,30)" fg:x="128" fg:w="6"/><text x="10.4573%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="10.5263%" y="613" width="0.1595%" height="15" fill="rgb(243,89,12)" fg:x="132" fg:w="2"/><text x="10.7763%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="10.5263%" y="597" width="0.1595%" height="15" fill="rgb(228,32,19)" fg:x="132" fg:w="2"/><text x="10.7763%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="10.5263%" y="581" width="0.1595%" height="15" fill="rgb(248,25,17)" fg:x="132" fg:w="2"/><text x="10.7763%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.6061%" y="565" width="0.0797%" height="15" fill="rgb(232,161,29)" fg:x="133" fg:w="1"/><text x="10.8561%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.6061%" y="549" width="0.0797%" height="15" fill="rgb(251,192,11)" fg:x="133" fg:w="1"/><text x="10.8561%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.6061%" y="533" width="0.0797%" height="15" fill="rgb(240,47,32)" fg:x="133" fg:w="1"/><text x="10.8561%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.6061%" y="517" width="0.0797%" height="15" fill="rgb(250,16,45)" fg:x="133" fg:w="1"/><text x="10.8561%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6061%" y="501" width="0.0797%" height="15" fill="rgb(227,217,42)" fg:x="133" fg:w="1"/><text x="10.8561%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.6061%" y="485" width="0.0797%" height="15" fill="rgb(206,82,54)" fg:x="133" fg:w="1"/><text x="10.8561%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="10.6858%" y="629" width="0.0797%" height="15" fill="rgb(243,145,25)" fg:x="134" fg:w="1"/><text x="10.9358%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="10.6858%" y="613" width="0.0797%" height="15" fill="rgb(207,166,24)" fg:x="134" fg:w="1"/><text x="10.9358%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="10.6858%" y="597" width="0.0797%" height="15" fill="rgb(215,191,44)" fg:x="134" fg:w="1"/><text x="10.9358%" y="607.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="10.6858%" y="581" width="0.0797%" height="15" fill="rgb(234,218,51)" fg:x="134" fg:w="1"/><text x="10.9358%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.6858%" y="565" width="0.0797%" height="15" fill="rgb(245,133,21)" fg:x="134" fg:w="1"/><text x="10.9358%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="10.7656%" y="597" width="0.0797%" height="15" fill="rgb(230,136,45)" fg:x="135" fg:w="1"/><text x="11.0156%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="10.7656%" y="581" width="0.0797%" height="15" fill="rgb(247,63,43)" fg:x="135" fg:w="1"/><text x="11.0156%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="10.7656%" y="565" width="0.0797%" height="15" fill="rgb(254,223,31)" fg:x="135" fg:w="1"/><text x="11.0156%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.7656%" y="549" width="0.0797%" height="15" fill="rgb(236,185,0)" fg:x="135" fg:w="1"/><text x="11.0156%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.7656%" y="533" width="0.0797%" height="15" fill="rgb(231,139,46)" fg:x="135" fg:w="1"/><text x="11.0156%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.7656%" y="517" width="0.0797%" height="15" fill="rgb(236,147,31)" fg:x="135" fg:w="1"/><text x="11.0156%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.7656%" y="501" width="0.0797%" height="15" fill="rgb(225,222,22)" fg:x="135" fg:w="1"/><text x="11.0156%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="10.7656%" y="629" width="0.1595%" height="15" fill="rgb(225,193,14)" fg:x="135" fg:w="2"/><text x="11.0156%" y="639.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="10.7656%" y="613" width="0.1595%" height="15" fill="rgb(253,193,46)" fg:x="135" fg:w="2"/><text x="11.0156%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="10.8453%" y="597" width="0.0797%" height="15" fill="rgb(218,187,39)" fg:x="136" fg:w="1"/><text x="11.0953%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="10.8453%" y="581" width="0.0797%" height="15" fill="rgb(227,162,48)" fg:x="136" fg:w="1"/><text x="11.0953%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="10.9250%" y="613" width="0.0797%" height="15" fill="rgb(222,25,5)" fg:x="137" fg:w="1"/><text x="11.1750%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.9250%" y="597" width="0.0797%" height="15" fill="rgb(211,205,16)" fg:x="137" fg:w="1"/><text x="11.1750%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.9250%" y="581" width="0.0797%" height="15" fill="rgb(244,191,2)" fg:x="137" fg:w="1"/><text x="11.1750%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.9250%" y="565" width="0.0797%" height="15" fill="rgb(248,159,12)" fg:x="137" fg:w="1"/><text x="11.1750%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="11.0048%" y="565" width="0.0797%" height="15" fill="rgb(235,204,17)" fg:x="138" fg:w="1"/><text x="11.2548%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.0048%" y="549" width="0.0797%" height="15" fill="rgb(240,21,27)" fg:x="138" fg:w="1"/><text x="11.2548%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.0048%" y="533" width="0.0797%" height="15" fill="rgb(224,170,31)" fg:x="138" fg:w="1"/><text x="11.2548%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.24%)</title><rect x="10.9250%" y="629" width="0.2392%" height="15" fill="rgb(223,145,32)" fg:x="137" fg:w="3"/><text x="11.1750%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="11.0048%" y="613" width="0.1595%" height="15" fill="rgb(243,100,5)" fg:x="138" fg:w="2"/><text x="11.2548%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="11.0048%" y="597" width="0.1595%" height="15" fill="rgb(242,131,51)" fg:x="138" fg:w="2"/><text x="11.2548%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.0048%" y="581" width="0.1595%" height="15" fill="rgb(223,156,46)" fg:x="138" fg:w="2"/><text x="11.2548%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.0845%" y="565" width="0.0797%" height="15" fill="rgb(215,10,40)" fg:x="139" fg:w="1"/><text x="11.3345%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="11.0845%" y="549" width="0.0797%" height="15" fill="rgb(233,155,0)" fg:x="139" fg:w="1"/><text x="11.3345%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="11.1643%" y="613" width="0.0797%" height="15" fill="rgb(247,78,6)" fg:x="140" fg:w="1"/><text x="11.4143%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="11.1643%" y="597" width="0.0797%" height="15" fill="rgb(237,217,21)" fg:x="140" fg:w="1"/><text x="11.4143%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.1643%" y="581" width="0.0797%" height="15" fill="rgb(212,1,21)" fg:x="140" fg:w="1"/><text x="11.4143%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.1643%" y="565" width="0.0797%" height="15" fill="rgb(213,7,14)" fg:x="140" fg:w="1"/><text x="11.4143%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.1643%" y="549" width="0.0797%" height="15" fill="rgb(225,84,14)" fg:x="140" fg:w="1"/><text x="11.4143%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.1643%" y="533" width="0.0797%" height="15" fill="rgb(239,216,39)" fg:x="140" fg:w="1"/><text x="11.4143%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.1643%" y="517" width="0.0797%" height="15" fill="rgb(253,29,23)" fg:x="140" fg:w="1"/><text x="11.4143%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.1643%" y="501" width="0.0797%" height="15" fill="rgb(220,167,50)" fg:x="140" fg:w="1"/><text x="11.4143%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (59 samples, 4.70%)</title><rect x="6.6188%" y="645" width="4.7049%" height="15" fill="rgb(232,141,1)" fg:x="83" fg:w="59"/><text x="6.8688%" y="655.50">plugi..</text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="11.1643%" y="629" width="0.1595%" height="15" fill="rgb(222,210,1)" fg:x="140" fg:w="2"/><text x="11.4143%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="11.2440%" y="613" width="0.0797%" height="15" fill="rgb(219,84,10)" fg:x="141" fg:w="1"/><text x="11.4940%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="11.2440%" y="597" width="0.0797%" height="15" fill="rgb(245,188,6)" fg:x="141" fg:w="1"/><text x="11.4940%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="11.2440%" y="581" width="0.0797%" height="15" fill="rgb(252,139,39)" fg:x="141" fg:w="1"/><text x="11.4940%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.2440%" y="565" width="0.0797%" height="15" fill="rgb(218,42,26)" fg:x="141" fg:w="1"/><text x="11.4940%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.2440%" y="549" width="0.0797%" height="15" fill="rgb(237,226,51)" fg:x="141" fg:w="1"/><text x="11.4940%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.2440%" y="533" width="0.0797%" height="15" fill="rgb(246,15,17)" fg:x="141" fg:w="1"/><text x="11.4940%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2440%" y="517" width="0.0797%" height="15" fill="rgb(228,170,42)" fg:x="141" fg:w="1"/><text x="11.4940%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2440%" y="501" width="0.0797%" height="15" fill="rgb(248,118,53)" fg:x="141" fg:w="1"/><text x="11.4940%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2440%" y="485" width="0.0797%" height="15" fill="rgb(207,30,10)" fg:x="141" fg:w="1"/><text x="11.4940%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.2440%" y="469" width="0.0797%" height="15" fill="rgb(217,104,38)" fg:x="141" fg:w="1"/><text x="11.4940%" y="479.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (2 samples, 0.16%)</title><rect x="11.3238%" y="645" width="0.1595%" height="15" fill="rgb(211,165,26)" fg:x="142" fg:w="2"/><text x="11.5738%" y="655.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="11.3238%" y="629" width="0.1595%" height="15" fill="rgb(247,38,9)" fg:x="142" fg:w="2"/><text x="11.5738%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="11.3238%" y="613" width="0.1595%" height="15" fill="rgb(218,187,8)" fg:x="142" fg:w="2"/><text x="11.5738%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.16%)</title><rect x="11.3238%" y="597" width="0.1595%" height="15" fill="rgb(247,94,28)" fg:x="142" fg:w="2"/><text x="11.5738%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="11.3238%" y="581" width="0.1595%" height="15" fill="rgb(218,173,30)" fg:x="142" fg:w="2"/><text x="11.5738%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="11.3238%" y="565" width="0.1595%" height="15" fill="rgb(245,45,36)" fg:x="142" fg:w="2"/><text x="11.5738%" y="575.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="11.4833%" y="613" width="0.1595%" height="15" fill="rgb(221,172,44)" fg:x="144" fg:w="2"/><text x="11.7333%" y="623.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="11.4833%" y="597" width="0.1595%" height="15" fill="rgb(222,45,12)" fg:x="144" fg:w="2"/><text x="11.7333%" y="607.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="11.4833%" y="581" width="0.1595%" height="15" fill="rgb(250,10,22)" fg:x="144" fg:w="2"/><text x="11.7333%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="11.4833%" y="565" width="0.1595%" height="15" fill="rgb(239,27,0)" fg:x="144" fg:w="2"/><text x="11.7333%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.5630%" y="549" width="0.0797%" height="15" fill="rgb(223,118,22)" fg:x="145" fg:w="1"/><text x="11.8130%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="11.5630%" y="533" width="0.0797%" height="15" fill="rgb(251,81,25)" fg:x="145" fg:w="1"/><text x="11.8130%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="11.6427%" y="581" width="0.0797%" height="15" fill="rgb(237,225,53)" fg:x="146" fg:w="1"/><text x="11.8927%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="11.6427%" y="565" width="0.0797%" height="15" fill="rgb(237,186,51)" fg:x="146" fg:w="1"/><text x="11.8927%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="11.7225%" y="565" width="0.0797%" height="15" fill="rgb(247,209,11)" fg:x="147" fg:w="1"/><text x="11.9725%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="11.7225%" y="549" width="0.0797%" height="15" fill="rgb(223,109,27)" fg:x="147" fg:w="1"/><text x="11.9725%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="11.7225%" y="533" width="0.0797%" height="15" fill="rgb(246,181,13)" fg:x="147" fg:w="1"/><text x="11.9725%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="11.8820%" y="437" width="0.0797%" height="15" fill="rgb(234,57,44)" fg:x="149" fg:w="1"/><text x="12.1320%" y="447.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="11.7225%" y="581" width="0.3190%" height="15" fill="rgb(211,227,50)" fg:x="147" fg:w="4"/><text x="11.9725%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="11.8022%" y="565" width="0.2392%" height="15" fill="rgb(254,57,34)" fg:x="148" fg:w="3"/><text x="12.0522%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="11.8022%" y="549" width="0.2392%" height="15" fill="rgb(227,212,26)" fg:x="148" fg:w="3"/><text x="12.0522%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="11.8022%" y="533" width="0.2392%" height="15" fill="rgb(244,169,44)" fg:x="148" fg:w="3"/><text x="12.0522%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="11.8820%" y="517" width="0.1595%" height="15" fill="rgb(236,135,50)" fg:x="149" fg:w="2"/><text x="12.1320%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="11.8820%" y="501" width="0.1595%" height="15" fill="rgb(241,89,30)" fg:x="149" fg:w="2"/><text x="12.1320%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="11.8820%" y="485" width="0.1595%" height="15" fill="rgb(206,113,34)" fg:x="149" fg:w="2"/><text x="12.1320%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="11.8820%" y="469" width="0.1595%" height="15" fill="rgb(218,104,52)" fg:x="149" fg:w="2"/><text x="12.1320%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="11.8820%" y="453" width="0.1595%" height="15" fill="rgb(223,82,32)" fg:x="149" fg:w="2"/><text x="12.1320%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="11.9617%" y="437" width="0.0797%" height="15" fill="rgb(249,219,30)" fg:x="150" fg:w="1"/><text x="12.2117%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.9617%" y="421" width="0.0797%" height="15" fill="rgb(233,141,21)" fg:x="150" fg:w="1"/><text x="12.2117%" y="431.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (8 samples, 0.64%)</title><rect x="11.4833%" y="645" width="0.6380%" height="15" fill="rgb(252,87,44)" fg:x="144" fg:w="8"/><text x="11.7333%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (8 samples, 0.64%)</title><rect x="11.4833%" y="629" width="0.6380%" height="15" fill="rgb(229,48,33)" fg:x="144" fg:w="8"/><text x="11.7333%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="11.6427%" y="613" width="0.4785%" height="15" fill="rgb(229,23,22)" fg:x="146" fg:w="6"/><text x="11.8927%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="11.6427%" y="597" width="0.4785%" height="15" fill="rgb(244,116,16)" fg:x="146" fg:w="6"/><text x="11.8927%" y="607.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="12.0415%" y="581" width="0.0797%" height="15" fill="rgb(247,45,10)" fg:x="151" fg:w="1"/><text x="12.2915%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.1212%" y="629" width="0.0797%" height="15" fill="rgb(228,60,29)" fg:x="152" fg:w="1"/><text x="12.3712%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.1212%" y="613" width="0.0797%" height="15" fill="rgb(205,129,15)" fg:x="152" fg:w="1"/><text x="12.3712%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="12.1212%" y="597" width="0.0797%" height="15" fill="rgb(206,229,4)" fg:x="152" fg:w="1"/><text x="12.3712%" y="607.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="12.2010%" y="613" width="0.0797%" height="15" fill="rgb(249,191,30)" fg:x="153" fg:w="1"/><text x="12.4510%" y="623.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="12.2010%" y="597" width="0.0797%" height="15" fill="rgb(250,84,54)" fg:x="153" fg:w="1"/><text x="12.4510%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="12.2010%" y="629" width="0.1595%" height="15" fill="rgb(207,25,53)" fg:x="153" fg:w="2"/><text x="12.4510%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="12.2807%" y="613" width="0.0797%" height="15" fill="rgb(235,40,8)" fg:x="154" fg:w="1"/><text x="12.5307%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="12.2807%" y="597" width="0.0797%" height="15" fill="rgb(226,169,33)" fg:x="154" fg:w="1"/><text x="12.5307%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.2807%" y="581" width="0.0797%" height="15" fill="rgb(238,110,8)" fg:x="154" fg:w="1"/><text x="12.5307%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.2807%" y="565" width="0.0797%" height="15" fill="rgb(251,206,12)" fg:x="154" fg:w="1"/><text x="12.5307%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.2807%" y="549" width="0.0797%" height="15" fill="rgb(248,171,18)" fg:x="154" fg:w="1"/><text x="12.5307%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.2807%" y="533" width="0.0797%" height="15" fill="rgb(213,65,46)" fg:x="154" fg:w="1"/><text x="12.5307%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.2807%" y="517" width="0.0797%" height="15" fill="rgb(211,154,15)" fg:x="154" fg:w="1"/><text x="12.5307%" y="527.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="12.3604%" y="629" width="0.0797%" height="15" fill="rgb(217,75,43)" fg:x="155" fg:w="1"/><text x="12.6104%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="12.3604%" y="613" width="0.0797%" height="15" fill="rgb(230,32,33)" fg:x="155" fg:w="1"/><text x="12.6104%" y="623.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="12.3604%" y="597" width="0.0797%" height="15" fill="rgb(221,100,16)" fg:x="155" fg:w="1"/><text x="12.6104%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="12.3604%" y="581" width="0.0797%" height="15" fill="rgb(212,129,47)" fg:x="155" fg:w="1"/><text x="12.6104%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="12.3604%" y="565" width="0.0797%" height="15" fill="rgb(239,217,47)" fg:x="155" fg:w="1"/><text x="12.6104%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="12.4402%" y="581" width="0.0797%" height="15" fill="rgb(230,84,24)" fg:x="156" fg:w="1"/><text x="12.6902%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="12.4402%" y="565" width="0.0797%" height="15" fill="rgb(214,153,51)" fg:x="156" fg:w="1"/><text x="12.6902%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.4402%" y="549" width="0.0797%" height="15" fill="rgb(231,6,35)" fg:x="156" fg:w="1"/><text x="12.6902%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="12.4402%" y="533" width="0.0797%" height="15" fill="rgb(229,122,30)" fg:x="156" fg:w="1"/><text x="12.6902%" y="543.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="12.5199%" y="581" width="0.0797%" height="15" fill="rgb(234,71,10)" fg:x="157" fg:w="1"/><text x="12.7699%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5199%" y="565" width="0.0797%" height="15" fill="rgb(215,173,26)" fg:x="157" fg:w="1"/><text x="12.7699%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5199%" y="549" width="0.0797%" height="15" fill="rgb(248,118,52)" fg:x="157" fg:w="1"/><text x="12.7699%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="12.4402%" y="613" width="0.2392%" height="15" fill="rgb(237,55,46)" fg:x="156" fg:w="3"/><text x="12.6902%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="12.4402%" y="597" width="0.2392%" height="15" fill="rgb(243,214,43)" fg:x="156" fg:w="3"/><text x="12.6902%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="12.5997%" y="581" width="0.0797%" height="15" fill="rgb(252,123,30)" fg:x="158" fg:w="1"/><text x="12.8497%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.5997%" y="565" width="0.0797%" height="15" fill="rgb(215,73,39)" fg:x="158" fg:w="1"/><text x="12.8497%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.5997%" y="549" width="0.0797%" height="15" fill="rgb(251,194,29)" fg:x="158" fg:w="1"/><text x="12.8497%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="12.5997%" y="533" width="0.0797%" height="15" fill="rgb(224,58,52)" fg:x="158" fg:w="1"/><text x="12.8497%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.5997%" y="517" width="0.0797%" height="15" fill="rgb(248,106,46)" fg:x="158" fg:w="1"/><text x="12.8497%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.5997%" y="501" width="0.0797%" height="15" fill="rgb(223,80,29)" fg:x="158" fg:w="1"/><text x="12.8497%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.5997%" y="485" width="0.0797%" height="15" fill="rgb(243,137,9)" fg:x="158" fg:w="1"/><text x="12.8497%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.5997%" y="469" width="0.0797%" height="15" fill="rgb(235,121,28)" fg:x="158" fg:w="1"/><text x="12.8497%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.5997%" y="453" width="0.0797%" height="15" fill="rgb(219,121,41)" fg:x="158" fg:w="1"/><text x="12.8497%" y="463.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (126 samples, 10.05%)</title><rect x="2.7113%" y="661" width="10.0478%" height="15" fill="rgb(251,60,6)" fg:x="34" fg:w="126"/><text x="2.9613%" y="671.50">&lt;tests::Holding..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (8 samples, 0.64%)</title><rect x="12.1212%" y="645" width="0.6380%" height="15" fill="rgb(208,12,30)" fg:x="152" fg:w="8"/><text x="12.3712%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="12.4402%" y="629" width="0.3190%" height="15" fill="rgb(207,176,36)" fg:x="156" fg:w="4"/><text x="12.6902%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.6794%" y="613" width="0.0797%" height="15" fill="rgb(211,188,29)" fg:x="159" fg:w="1"/><text x="12.9294%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="12.6794%" y="597" width="0.0797%" height="15" fill="rgb(220,184,37)" fg:x="159" fg:w="1"/><text x="12.9294%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.6794%" y="581" width="0.0797%" height="15" fill="rgb(239,87,37)" fg:x="159" fg:w="1"/><text x="12.9294%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="12.7592%" y="661" width="0.0797%" height="15" fill="rgb(232,113,44)" fg:x="160" fg:w="1"/><text x="13.0092%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="12.7592%" y="645" width="0.0797%" height="15" fill="rgb(246,25,39)" fg:x="160" fg:w="1"/><text x="13.0092%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="12.7592%" y="629" width="0.0797%" height="15" fill="rgb(247,30,13)" fg:x="160" fg:w="1"/><text x="13.0092%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.7592%" y="613" width="0.0797%" height="15" fill="rgb(230,176,35)" fg:x="160" fg:w="1"/><text x="13.0092%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.7592%" y="597" width="0.0797%" height="15" fill="rgb(222,23,18)" fg:x="160" fg:w="1"/><text x="13.0092%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="12.8389%" y="645" width="0.0797%" height="15" fill="rgb(234,86,8)" fg:x="161" fg:w="1"/><text x="13.0889%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.8389%" y="629" width="0.0797%" height="15" fill="rgb(206,218,47)" fg:x="161" fg:w="1"/><text x="13.0889%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="12.9187%" y="645" width="0.0797%" height="15" fill="rgb(229,35,31)" fg:x="162" fg:w="1"/><text x="13.1687%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="12.9187%" y="629" width="0.0797%" height="15" fill="rgb(242,81,7)" fg:x="162" fg:w="1"/><text x="13.1687%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="12.9187%" y="613" width="0.0797%" height="15" fill="rgb(231,11,35)" fg:x="162" fg:w="1"/><text x="13.1687%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="12.9187%" y="597" width="0.0797%" height="15" fill="rgb(219,218,17)" fg:x="162" fg:w="1"/><text x="13.1687%" y="607.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="12.9187%" y="581" width="0.0797%" height="15" fill="rgb(221,83,32)" fg:x="162" fg:w="1"/><text x="13.1687%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="12.9187%" y="565" width="0.0797%" height="15" fill="rgb(233,49,54)" fg:x="162" fg:w="1"/><text x="13.1687%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.9984%" y="597" width="0.0797%" height="15" fill="rgb(206,18,51)" fg:x="163" fg:w="1"/><text x="13.2484%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.0781%" y="597" width="0.0797%" height="15" fill="rgb(249,193,15)" fg:x="164" fg:w="1"/><text x="13.3281%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="13.1579%" y="581" width="0.1595%" height="15" fill="rgb(245,186,19)" fg:x="165" fg:w="2"/><text x="13.4079%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="12.9984%" y="629" width="0.3987%" height="15" fill="rgb(230,4,24)" fg:x="163" fg:w="5"/><text x="13.2484%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="12.9984%" y="613" width="0.3987%" height="15" fill="rgb(234,75,27)" fg:x="163" fg:w="5"/><text x="13.2484%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="13.1579%" y="597" width="0.2392%" height="15" fill="rgb(244,187,35)" fg:x="165" fg:w="3"/><text x="13.4079%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.3174%" y="581" width="0.0797%" height="15" fill="rgb(241,97,43)" fg:x="167" fg:w="1"/><text x="13.5674%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.5566%" y="517" width="0.0797%" height="15" fill="rgb(236,94,2)" fg:x="170" fg:w="1"/><text x="13.8066%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.5566%" y="533" width="0.1595%" height="15" fill="rgb(231,175,7)" fg:x="170" fg:w="2"/><text x="13.8066%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.6364%" y="517" width="0.0797%" height="15" fill="rgb(236,89,47)" fg:x="171" fg:w="1"/><text x="13.8864%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.6364%" y="501" width="0.0797%" height="15" fill="rgb(213,191,37)" fg:x="171" fg:w="1"/><text x="13.8864%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.6364%" y="485" width="0.0797%" height="15" fill="rgb(252,0,34)" fg:x="171" fg:w="1"/><text x="13.8864%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.6364%" y="469" width="0.0797%" height="15" fill="rgb(208,145,44)" fg:x="171" fg:w="1"/><text x="13.8864%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.6364%" y="453" width="0.0797%" height="15" fill="rgb(227,95,50)" fg:x="171" fg:w="1"/><text x="13.8864%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.6364%" y="437" width="0.0797%" height="15" fill="rgb(222,136,24)" fg:x="171" fg:w="1"/><text x="13.8864%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.6364%" y="421" width="0.0797%" height="15" fill="rgb(218,105,10)" fg:x="171" fg:w="1"/><text x="13.8864%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.6364%" y="405" width="0.0797%" height="15" fill="rgb(216,65,28)" fg:x="171" fg:w="1"/><text x="13.8864%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.6364%" y="389" width="0.0797%" height="15" fill="rgb(229,6,28)" fg:x="171" fg:w="1"/><text x="13.8864%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.6364%" y="373" width="0.0797%" height="15" fill="rgb(222,160,42)" fg:x="171" fg:w="1"/><text x="13.8864%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.6364%" y="357" width="0.0797%" height="15" fill="rgb(235,83,49)" fg:x="171" fg:w="1"/><text x="13.8864%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6364%" y="341" width="0.0797%" height="15" fill="rgb(236,86,36)" fg:x="171" fg:w="1"/><text x="13.8864%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7161%" y="533" width="0.0797%" height="15" fill="rgb(236,19,41)" fg:x="172" fg:w="1"/><text x="13.9661%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7161%" y="517" width="0.0797%" height="15" fill="rgb(217,71,31)" fg:x="172" fg:w="1"/><text x="13.9661%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.7161%" y="501" width="0.0797%" height="15" fill="rgb(236,209,25)" fg:x="172" fg:w="1"/><text x="13.9661%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.7161%" y="485" width="0.0797%" height="15" fill="rgb(247,104,21)" fg:x="172" fg:w="1"/><text x="13.9661%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.7161%" y="469" width="0.0797%" height="15" fill="rgb(243,80,38)" fg:x="172" fg:w="1"/><text x="13.9661%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="13.7161%" y="453" width="0.0797%" height="15" fill="rgb(232,109,38)" fg:x="172" fg:w="1"/><text x="13.9661%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="13.7161%" y="437" width="0.0797%" height="15" fill="rgb(212,177,53)" fg:x="172" fg:w="1"/><text x="13.9661%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="13.5566%" y="581" width="0.3190%" height="15" fill="rgb(227,30,34)" fg:x="170" fg:w="4"/><text x="13.8066%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="13.5566%" y="565" width="0.3190%" height="15" fill="rgb(205,175,25)" fg:x="170" fg:w="4"/><text x="13.8066%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="13.5566%" y="549" width="0.3190%" height="15" fill="rgb(249,39,54)" fg:x="170" fg:w="4"/><text x="13.8066%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7959%" y="533" width="0.0797%" height="15" fill="rgb(215,54,37)" fg:x="173" fg:w="1"/><text x="14.0459%" y="543.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.0351%" y="501" width="0.0797%" height="15" fill="rgb(205,60,46)" fg:x="176" fg:w="1"/><text x="14.2851%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (1 samples, 0.08%)</title><rect x="14.0351%" y="485" width="0.0797%" height="15" fill="rgb(238,89,29)" fg:x="176" fg:w="1"/><text x="14.2851%" y="495.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (10 samples, 0.80%)</title><rect x="13.3971%" y="629" width="0.7974%" height="15" fill="rgb(212,48,10)" fg:x="168" fg:w="10"/><text x="13.6471%" y="639.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (10 samples, 0.80%)</title><rect x="13.3971%" y="613" width="0.7974%" height="15" fill="rgb(237,186,28)" fg:x="168" fg:w="10"/><text x="13.6471%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (10 samples, 0.80%)</title><rect x="13.3971%" y="597" width="0.7974%" height="15" fill="rgb(237,204,4)" fg:x="168" fg:w="10"/><text x="13.6471%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="13.8756%" y="581" width="0.3190%" height="15" fill="rgb(237,15,47)" fg:x="174" fg:w="4"/><text x="14.1256%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="13.8756%" y="565" width="0.3190%" height="15" fill="rgb(244,110,25)" fg:x="174" fg:w="4"/><text x="14.1256%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="13.9553%" y="549" width="0.2392%" height="15" fill="rgb(241,12,16)" fg:x="175" fg:w="3"/><text x="14.2053%" y="559.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="13.9553%" y="533" width="0.2392%" height="15" fill="rgb(235,25,9)" fg:x="175" fg:w="3"/><text x="14.2053%" y="543.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="14.0351%" y="517" width="0.1595%" height="15" fill="rgb(245,159,19)" fg:x="176" fg:w="2"/><text x="14.2851%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.1148%" y="501" width="0.0797%" height="15" fill="rgb(236,63,32)" fg:x="177" fg:w="1"/><text x="14.3648%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1148%" y="485" width="0.0797%" height="15" fill="rgb(235,32,52)" fg:x="177" fg:w="1"/><text x="14.3648%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.1148%" y="469" width="0.0797%" height="15" fill="rgb(209,176,21)" fg:x="177" fg:w="1"/><text x="14.3648%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="14.1946%" y="613" width="0.0797%" height="15" fill="rgb(205,90,42)" fg:x="178" fg:w="1"/><text x="14.4446%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="14.1946%" y="597" width="0.0797%" height="15" fill="rgb(213,132,16)" fg:x="178" fg:w="1"/><text x="14.4446%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="14.1946%" y="581" width="0.0797%" height="15" fill="rgb(232,11,22)" fg:x="178" fg:w="1"/><text x="14.4446%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="14.2743%" y="565" width="0.0797%" height="15" fill="rgb(248,167,41)" fg:x="179" fg:w="1"/><text x="14.5243%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="14.2743%" y="549" width="0.0797%" height="15" fill="rgb(209,127,6)" fg:x="179" fg:w="1"/><text x="14.5243%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.2743%" y="533" width="0.0797%" height="15" fill="rgb(246,210,34)" fg:x="179" fg:w="1"/><text x="14.5243%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="14.3541%" y="549" width="0.0797%" height="15" fill="rgb(238,165,13)" fg:x="180" fg:w="1"/><text x="14.6041%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="14.3541%" y="533" width="0.0797%" height="15" fill="rgb(233,98,15)" fg:x="180" fg:w="1"/><text x="14.6041%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.3541%" y="517" width="0.0797%" height="15" fill="rgb(215,215,51)" fg:x="180" fg:w="1"/><text x="14.6041%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="14.4338%" y="533" width="0.1595%" height="15" fill="rgb(217,161,25)" fg:x="181" fg:w="2"/><text x="14.6838%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.5136%" y="517" width="0.0797%" height="15" fill="rgb(217,167,48)" fg:x="182" fg:w="1"/><text x="14.7636%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.5136%" y="501" width="0.0797%" height="15" fill="rgb(205,163,34)" fg:x="182" fg:w="1"/><text x="14.7636%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.5136%" y="485" width="0.0797%" height="15" fill="rgb(241,197,31)" fg:x="182" fg:w="1"/><text x="14.7636%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="14.5933%" y="517" width="0.1595%" height="15" fill="rgb(225,123,11)" fg:x="183" fg:w="2"/><text x="14.8433%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="14.5933%" y="501" width="0.1595%" height="15" fill="rgb(217,4,20)" fg:x="183" fg:w="2"/><text x="14.8433%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="14.5933%" y="485" width="0.1595%" height="15" fill="rgb(215,55,9)" fg:x="183" fg:w="2"/><text x="14.8433%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="14.6730%" y="469" width="0.0797%" height="15" fill="rgb(218,165,5)" fg:x="184" fg:w="1"/><text x="14.9230%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.6730%" y="453" width="0.0797%" height="15" fill="rgb(222,175,15)" fg:x="184" fg:w="1"/><text x="14.9230%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.6730%" y="437" width="0.0797%" height="15" fill="rgb(223,85,34)" fg:x="184" fg:w="1"/><text x="14.9230%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.6730%" y="421" width="0.0797%" height="15" fill="rgb(234,228,29)" fg:x="184" fg:w="1"/><text x="14.9230%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="14.7528%" y="517" width="0.0797%" height="15" fill="rgb(239,7,28)" fg:x="185" fg:w="1"/><text x="15.0028%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="14.9123%" y="485" width="0.0797%" height="15" fill="rgb(252,222,53)" fg:x="187" fg:w="1"/><text x="15.1623%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.9123%" y="469" width="0.0797%" height="15" fill="rgb(232,146,44)" fg:x="187" fg:w="1"/><text x="15.1623%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.9123%" y="453" width="0.0797%" height="15" fill="rgb(243,223,53)" fg:x="187" fg:w="1"/><text x="15.1623%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.9123%" y="437" width="0.0797%" height="15" fill="rgb(219,128,25)" fg:x="187" fg:w="1"/><text x="15.1623%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.9123%" y="421" width="0.0797%" height="15" fill="rgb(223,56,32)" fg:x="187" fg:w="1"/><text x="15.1623%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.9123%" y="405" width="0.0797%" height="15" fill="rgb(237,41,3)" fg:x="187" fg:w="1"/><text x="15.1623%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.9123%" y="389" width="0.0797%" height="15" fill="rgb(235,138,9)" fg:x="187" fg:w="1"/><text x="15.1623%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="14.8325%" y="517" width="0.2392%" height="15" fill="rgb(214,131,10)" fg:x="186" fg:w="3"/><text x="15.0825%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="14.8325%" y="501" width="0.2392%" height="15" fill="rgb(229,89,7)" fg:x="186" fg:w="3"/><text x="15.0825%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="14.9920%" y="485" width="0.0797%" height="15" fill="rgb(240,24,42)" fg:x="188" fg:w="1"/><text x="15.2420%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="14.5933%" y="533" width="0.5582%" height="15" fill="rgb(243,188,54)" fg:x="183" fg:w="7"/><text x="14.8433%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.0718%" y="517" width="0.0797%" height="15" fill="rgb(246,92,22)" fg:x="189" fg:w="1"/><text x="15.3218%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.0718%" y="501" width="0.0797%" height="15" fill="rgb(211,176,51)" fg:x="189" fg:w="1"/><text x="15.3218%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.0718%" y="485" width="0.0797%" height="15" fill="rgb(246,207,34)" fg:x="189" fg:w="1"/><text x="15.3218%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="14.4338%" y="549" width="0.9569%" height="15" fill="rgb(239,95,2)" fg:x="181" fg:w="12"/><text x="14.6838%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="15.1515%" y="533" width="0.2392%" height="15" fill="rgb(211,124,25)" fg:x="190" fg:w="3"/><text x="15.4015%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="15.1515%" y="517" width="0.2392%" height="15" fill="rgb(231,221,19)" fg:x="190" fg:w="3"/><text x="15.4015%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="15.1515%" y="501" width="0.2392%" height="15" fill="rgb(239,183,19)" fg:x="190" fg:w="3"/><text x="15.4015%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="15.2313%" y="485" width="0.1595%" height="15" fill="rgb(221,130,29)" fg:x="191" fg:w="2"/><text x="15.4813%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.3110%" y="469" width="0.0797%" height="15" fill="rgb(206,130,36)" fg:x="192" fg:w="1"/><text x="15.5610%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.3110%" y="453" width="0.0797%" height="15" fill="rgb(215,70,19)" fg:x="192" fg:w="1"/><text x="15.5610%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.12%)</title><rect x="14.3541%" y="565" width="1.1164%" height="15" fill="rgb(244,16,43)" fg:x="180" fg:w="14"/><text x="14.6041%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.3907%" y="549" width="0.0797%" height="15" fill="rgb(222,115,32)" fg:x="193" fg:w="1"/><text x="15.6407%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.4705%" y="565" width="0.0797%" height="15" fill="rgb(247,48,25)" fg:x="194" fg:w="1"/><text x="15.7205%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="15.4705%" y="549" width="0.0797%" height="15" fill="rgb(226,180,51)" fg:x="194" fg:w="1"/><text x="15.7205%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.4705%" y="533" width="0.0797%" height="15" fill="rgb(217,142,42)" fg:x="194" fg:w="1"/><text x="15.7205%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.4705%" y="517" width="0.0797%" height="15" fill="rgb(220,178,3)" fg:x="194" fg:w="1"/><text x="15.7205%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.4705%" y="501" width="0.0797%" height="15" fill="rgb(217,221,4)" fg:x="194" fg:w="1"/><text x="15.7205%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="15.5502%" y="533" width="0.0797%" height="15" fill="rgb(237,63,43)" fg:x="195" fg:w="1"/><text x="15.8002%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.6300%" y="501" width="0.0797%" height="15" fill="rgb(220,57,8)" fg:x="196" fg:w="1"/><text x="15.8800%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.7895%" y="453" width="0.0797%" height="15" fill="rgb(254,186,27)" fg:x="198" fg:w="1"/><text x="16.0395%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.7895%" y="437" width="0.0797%" height="15" fill="rgb(251,57,28)" fg:x="198" fg:w="1"/><text x="16.0395%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="15.6300%" y="533" width="0.3190%" height="15" fill="rgb(215,228,0)" fg:x="196" fg:w="4"/><text x="15.8800%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="15.6300%" y="517" width="0.3190%" height="15" fill="rgb(237,218,39)" fg:x="196" fg:w="4"/><text x="15.8800%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="15.7097%" y="501" width="0.2392%" height="15" fill="rgb(207,2,54)" fg:x="197" fg:w="3"/><text x="15.9597%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="15.7097%" y="485" width="0.2392%" height="15" fill="rgb(232,76,50)" fg:x="197" fg:w="3"/><text x="15.9597%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="15.7097%" y="469" width="0.2392%" height="15" fill="rgb(211,85,31)" fg:x="197" fg:w="3"/><text x="15.9597%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="15.8692%" y="453" width="0.0797%" height="15" fill="rgb(223,210,27)" fg:x="199" fg:w="1"/><text x="16.1192%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="15.8692%" y="437" width="0.0797%" height="15" fill="rgb(254,36,8)" fg:x="199" fg:w="1"/><text x="16.1192%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="15.9490%" y="469" width="0.0797%" height="15" fill="rgb(213,4,25)" fg:x="200" fg:w="1"/><text x="16.1990%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="15.9490%" y="453" width="0.0797%" height="15" fill="rgb(224,2,39)" fg:x="200" fg:w="1"/><text x="16.1990%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="15.9490%" y="437" width="0.0797%" height="15" fill="rgb(208,8,39)" fg:x="200" fg:w="1"/><text x="16.1990%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="16.0287%" y="469" width="0.0797%" height="15" fill="rgb(216,226,3)" fg:x="201" fg:w="1"/><text x="16.2787%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.64%)</title><rect x="15.5502%" y="549" width="0.6380%" height="15" fill="rgb(249,139,31)" fg:x="195" fg:w="8"/><text x="15.8002%" y="559.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="15.9490%" y="533" width="0.2392%" height="15" fill="rgb(242,170,35)" fg:x="200" fg:w="3"/><text x="16.1990%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="15.9490%" y="517" width="0.2392%" height="15" fill="rgb(238,14,9)" fg:x="200" fg:w="3"/><text x="16.1990%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="15.9490%" y="501" width="0.2392%" height="15" fill="rgb(251,81,46)" fg:x="200" fg:w="3"/><text x="16.1990%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="15.9490%" y="485" width="0.2392%" height="15" fill="rgb(230,23,4)" fg:x="200" fg:w="3"/><text x="16.1990%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="16.1085%" y="469" width="0.0797%" height="15" fill="rgb(211,85,25)" fg:x="202" fg:w="1"/><text x="16.3585%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::contains_key (1 samples, 0.08%)</title><rect x="16.2679%" y="517" width="0.0797%" height="15" fill="rgb(252,23,31)" fg:x="204" fg:w="1"/><text x="16.5179%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3477%" y="517" width="0.0797%" height="15" fill="rgb(234,163,38)" fg:x="205" fg:w="1"/><text x="16.5977%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="16.4274%" y="517" width="0.0797%" height="15" fill="rgb(210,190,50)" fg:x="206" fg:w="1"/><text x="16.6774%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="16.5072%" y="501" width="0.0797%" height="15" fill="rgb(228,158,3)" fg:x="207" fg:w="1"/><text x="16.7572%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="16.5072%" y="517" width="0.2392%" height="15" fill="rgb(216,130,0)" fg:x="207" fg:w="3"/><text x="16.7572%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="16.5869%" y="501" width="0.1595%" height="15" fill="rgb(224,184,10)" fg:x="208" fg:w="2"/><text x="16.8369%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.6667%" y="485" width="0.0797%" height="15" fill="rgb(214,202,18)" fg:x="209" fg:w="1"/><text x="16.9167%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="16.9059%" y="469" width="0.2392%" height="15" fill="rgb(213,229,54)" fg:x="212" fg:w="3"/><text x="17.1559%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="16.9059%" y="453" width="0.2392%" height="15" fill="rgb(246,120,0)" fg:x="212" fg:w="3"/><text x="17.1559%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.9856%" y="437" width="0.1595%" height="15" fill="rgb(237,6,15)" fg:x="213" fg:w="2"/><text x="17.2356%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="17.1451%" y="469" width="0.3987%" height="15" fill="rgb(252,156,15)" fg:x="215" fg:w="5"/><text x="17.3951%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="17.1451%" y="453" width="0.3987%" height="15" fill="rgb(249,78,18)" fg:x="215" fg:w="5"/><text x="17.3951%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="17.1451%" y="437" width="0.3987%" height="15" fill="rgb(230,223,44)" fg:x="215" fg:w="5"/><text x="17.3951%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="17.3046%" y="421" width="0.2392%" height="15" fill="rgb(230,222,32)" fg:x="217" fg:w="3"/><text x="17.5546%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="17.3844%" y="405" width="0.1595%" height="15" fill="rgb(247,54,6)" fg:x="218" fg:w="2"/><text x="17.6344%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="17.3844%" y="389" width="0.1595%" height="15" fill="rgb(247,115,45)" fg:x="218" fg:w="2"/><text x="17.6344%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.6236%" y="437" width="0.0797%" height="15" fill="rgb(213,203,37)" fg:x="221" fg:w="1"/><text x="17.8736%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.6236%" y="421" width="0.0797%" height="15" fill="rgb(248,188,18)" fg:x="221" fg:w="1"/><text x="17.8736%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6236%" y="405" width="0.0797%" height="15" fill="rgb(206,80,8)" fg:x="221" fg:w="1"/><text x="17.8736%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (12 samples, 0.96%)</title><rect x="16.9059%" y="485" width="0.9569%" height="15" fill="rgb(245,217,31)" fg:x="212" fg:w="12"/><text x="17.1559%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="17.5439%" y="469" width="0.3190%" height="15" fill="rgb(220,193,15)" fg:x="220" fg:w="4"/><text x="17.7939%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="17.6236%" y="453" width="0.2392%" height="15" fill="rgb(226,7,19)" fg:x="221" fg:w="3"/><text x="17.8736%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="17.7033%" y="437" width="0.1595%" height="15" fill="rgb(222,145,31)" fg:x="222" fg:w="2"/><text x="17.9533%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.7831%" y="421" width="0.0797%" height="15" fill="rgb(241,193,36)" fg:x="223" fg:w="1"/><text x="18.0331%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.7831%" y="405" width="0.0797%" height="15" fill="rgb(225,123,33)" fg:x="223" fg:w="1"/><text x="18.0331%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.7831%" y="389" width="0.0797%" height="15" fill="rgb(246,136,38)" fg:x="223" fg:w="1"/><text x="18.0331%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.7831%" y="373" width="0.0797%" height="15" fill="rgb(243,56,24)" fg:x="223" fg:w="1"/><text x="18.0331%" y="383.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (26 samples, 2.07%)</title><rect x="16.1882%" y="549" width="2.0734%" height="15" fill="rgb(215,147,2)" fg:x="203" fg:w="26"/><text x="16.4382%" y="559.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (26 samples, 2.07%)</title><rect x="16.1882%" y="533" width="2.0734%" height="15" fill="rgb(209,155,27)" fg:x="203" fg:w="26"/><text x="16.4382%" y="543.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (19 samples, 1.52%)</title><rect x="16.7464%" y="517" width="1.5152%" height="15" fill="rgb(222,177,11)" fg:x="210" fg:w="19"/><text x="16.9964%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (18 samples, 1.44%)</title><rect x="16.8262%" y="501" width="1.4354%" height="15" fill="rgb(212,227,15)" fg:x="211" fg:w="18"/><text x="17.0762%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.40%)</title><rect x="17.8628%" y="485" width="0.3987%" height="15" fill="rgb(214,138,20)" fg:x="224" fg:w="5"/><text x="18.1128%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="18.1021%" y="469" width="0.1595%" height="15" fill="rgb(221,170,31)" fg:x="227" fg:w="2"/><text x="18.3521%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="18.2616%" y="405" width="0.0797%" height="15" fill="rgb(253,207,5)" fg:x="229" fg:w="1"/><text x="18.5116%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="18.2616%" y="389" width="0.0797%" height="15" fill="rgb(212,64,37)" fg:x="229" fg:w="1"/><text x="18.5116%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="18.2616%" y="373" width="0.0797%" height="15" fill="rgb(208,113,51)" fg:x="229" fg:w="1"/><text x="18.5116%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="18.2616%" y="357" width="0.0797%" height="15" fill="rgb(237,15,5)" fg:x="229" fg:w="1"/><text x="18.5116%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="18.2616%" y="341" width="0.0797%" height="15" fill="rgb(238,33,18)" fg:x="229" fg:w="1"/><text x="18.5116%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="18.2616%" y="325" width="0.0797%" height="15" fill="rgb(253,206,50)" fg:x="229" fg:w="1"/><text x="18.5116%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.2616%" y="309" width="0.0797%" height="15" fill="rgb(242,158,43)" fg:x="229" fg:w="1"/><text x="18.5116%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.2616%" y="293" width="0.0797%" height="15" fill="rgb(213,125,27)" fg:x="229" fg:w="1"/><text x="18.5116%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.2616%" y="277" width="0.0797%" height="15" fill="rgb(233,161,31)" fg:x="229" fg:w="1"/><text x="18.5116%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="18.4211%" y="389" width="0.0797%" height="15" fill="rgb(218,135,6)" fg:x="231" fg:w="1"/><text x="18.6711%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="18.4211%" y="373" width="0.0797%" height="15" fill="rgb(222,73,53)" fg:x="231" fg:w="1"/><text x="18.6711%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="18.4211%" y="357" width="0.0797%" height="15" fill="rgb(229,66,53)" fg:x="231" fg:w="1"/><text x="18.6711%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="18.3413%" y="405" width="0.2392%" height="15" fill="rgb(208,128,19)" fg:x="230" fg:w="3"/><text x="18.5913%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="18.5008%" y="389" width="0.0797%" height="15" fill="rgb(235,70,27)" fg:x="232" fg:w="1"/><text x="18.7508%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.5008%" y="373" width="0.0797%" height="15" fill="rgb(241,130,30)" fg:x="232" fg:w="1"/><text x="18.7508%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="18.2616%" y="421" width="0.3987%" height="15" fill="rgb(222,57,48)" fg:x="229" fg:w="5"/><text x="18.5116%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.5805%" y="405" width="0.0797%" height="15" fill="rgb(225,204,29)" fg:x="233" fg:w="1"/><text x="18.8305%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.5805%" y="389" width="0.0797%" height="15" fill="rgb(240,196,35)" fg:x="233" fg:w="1"/><text x="18.8305%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.5805%" y="373" width="0.0797%" height="15" fill="rgb(215,150,16)" fg:x="233" fg:w="1"/><text x="18.8305%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="18.2616%" y="453" width="0.4785%" height="15" fill="rgb(209,170,13)" fg:x="229" fg:w="6"/><text x="18.5116%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="18.2616%" y="437" width="0.4785%" height="15" fill="rgb(235,75,31)" fg:x="229" fg:w="6"/><text x="18.5116%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.6603%" y="421" width="0.0797%" height="15" fill="rgb(252,1,47)" fg:x="234" fg:w="1"/><text x="18.9103%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.6603%" y="405" width="0.0797%" height="15" fill="rgb(241,2,36)" fg:x="234" fg:w="1"/><text x="18.9103%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6603%" y="389" width="0.0797%" height="15" fill="rgb(236,191,4)" fg:x="234" fg:w="1"/><text x="18.9103%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="18.2616%" y="469" width="0.5582%" height="15" fill="rgb(212,65,35)" fg:x="229" fg:w="7"/><text x="18.5116%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="18.7400%" y="453" width="0.0797%" height="15" fill="rgb(209,49,33)" fg:x="235" fg:w="1"/><text x="18.9900%" y="463.50"></text></g><g><title>engine::session::state::State::close (74 samples, 5.90%)</title><rect x="12.9984%" y="645" width="5.9011%" height="15" fill="rgb(208,36,46)" fg:x="163" fg:w="74"/><text x="13.2484%" y="655.50">engine::..</text></g><g><title>engine::session::state::State::flush_entities (59 samples, 4.70%)</title><rect x="14.1946%" y="629" width="4.7049%" height="15" fill="rgb(210,125,2)" fg:x="178" fg:w="59"/><text x="14.4446%" y="639.50">engin..</text></g><g><title>core::iter::adapters::try_process (58 samples, 4.63%)</title><rect x="14.2743%" y="613" width="4.6252%" height="15" fill="rgb(225,62,6)" fg:x="179" fg:w="58"/><text x="14.5243%" y="623.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (58 samples, 4.63%)</title><rect x="14.2743%" y="597" width="4.6252%" height="15" fill="rgb(210,54,27)" fg:x="179" fg:w="58"/><text x="14.5243%" y="607.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (58 samples, 4.63%)</title><rect x="14.2743%" y="581" width="4.6252%" height="15" fill="rgb(249,189,52)" fg:x="179" fg:w="58"/><text x="14.5243%" y="591.50">engin..</text></g><g><title>kernel::model::any_entity_changes (42 samples, 3.35%)</title><rect x="15.5502%" y="565" width="3.3493%" height="15" fill="rgb(225,134,40)" fg:x="195" fg:w="42"/><text x="15.8002%" y="575.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.64%)</title><rect x="18.2616%" y="549" width="0.6380%" height="15" fill="rgb(206,13,37)" fg:x="229" fg:w="8"/><text x="18.5116%" y="559.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.64%)</title><rect x="18.2616%" y="533" width="0.6380%" height="15" fill="rgb(232,114,28)" fg:x="229" fg:w="8"/><text x="18.5116%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="18.2616%" y="517" width="0.6380%" height="15" fill="rgb(253,215,8)" fg:x="229" fg:w="8"/><text x="18.5116%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="18.2616%" y="501" width="0.6380%" height="15" fill="rgb(254,64,19)" fg:x="229" fg:w="8"/><text x="18.5116%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="18.2616%" y="485" width="0.6380%" height="15" fill="rgb(242,18,46)" fg:x="229" fg:w="8"/><text x="18.5116%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.8198%" y="469" width="0.0797%" height="15" fill="rgb(239,192,30)" fg:x="236" fg:w="1"/><text x="19.0698%" y="479.50"></text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="18.8995%" y="645" width="0.0797%" height="15" fill="rgb(232,73,14)" fg:x="237" fg:w="1"/><text x="19.1495%" y="655.50"></text></g><g><title>engine::session::Session::close (78 samples, 6.22%)</title><rect x="12.8389%" y="661" width="6.2201%" height="15" fill="rgb(225,51,9)" fg:x="161" fg:w="78"/><text x="13.0889%" y="671.50">engine::..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="18.9793%" y="645" width="0.0797%" height="15" fill="rgb(242,217,54)" fg:x="238" fg:w="1"/><text x="19.2293%" y="655.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="18.9793%" y="629" width="0.0797%" height="15" fill="rgb(216,93,3)" fg:x="238" fg:w="1"/><text x="19.2293%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="18.9793%" y="613" width="0.0797%" height="15" fill="rgb(230,119,33)" fg:x="238" fg:w="1"/><text x="19.2293%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="18.9793%" y="597" width="0.0797%" height="15" fill="rgb(238,170,27)" fg:x="238" fg:w="1"/><text x="19.2293%" y="607.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="18.9793%" y="581" width="0.0797%" height="15" fill="rgb(229,8,2)" fg:x="238" fg:w="1"/><text x="19.2293%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.3780%" y="533" width="0.0797%" height="15" fill="rgb(205,214,42)" fg:x="243" fg:w="1"/><text x="19.6280%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.3780%" y="517" width="0.0797%" height="15" fill="rgb(245,113,1)" fg:x="243" fg:w="1"/><text x="19.6280%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.3780%" y="501" width="0.0797%" height="15" fill="rgb(252,50,2)" fg:x="243" fg:w="1"/><text x="19.6280%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.3780%" y="485" width="0.0797%" height="15" fill="rgb(225,122,24)" fg:x="243" fg:w="1"/><text x="19.6280%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.3780%" y="469" width="0.0797%" height="15" fill="rgb(234,129,31)" fg:x="243" fg:w="1"/><text x="19.6280%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.3780%" y="453" width="0.0797%" height="15" fill="rgb(219,177,4)" fg:x="243" fg:w="1"/><text x="19.6280%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.4577%" y="469" width="0.0797%" height="15" fill="rgb(225,142,27)" fg:x="244" fg:w="1"/><text x="19.7077%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.4577%" y="453" width="0.0797%" height="15" fill="rgb(205,107,51)" fg:x="244" fg:w="1"/><text x="19.7077%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.4577%" y="437" width="0.0797%" height="15" fill="rgb(236,223,15)" fg:x="244" fg:w="1"/><text x="19.7077%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.4577%" y="421" width="0.0797%" height="15" fill="rgb(235,133,11)" fg:x="244" fg:w="1"/><text x="19.7077%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="19.5375%" y="469" width="0.0797%" height="15" fill="rgb(247,172,13)" fg:x="245" fg:w="1"/><text x="19.7875%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.5375%" y="453" width="0.0797%" height="15" fill="rgb(233,191,41)" fg:x="245" fg:w="1"/><text x="19.7875%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.5375%" y="437" width="0.0797%" height="15" fill="rgb(250,65,16)" fg:x="245" fg:w="1"/><text x="19.7875%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.5375%" y="421" width="0.0797%" height="15" fill="rgb(206,10,27)" fg:x="245" fg:w="1"/><text x="19.7875%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.5375%" y="405" width="0.0797%" height="15" fill="rgb(212,96,22)" fg:x="245" fg:w="1"/><text x="19.7875%" y="415.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.5375%" y="389" width="0.0797%" height="15" fill="rgb(206,50,0)" fg:x="245" fg:w="1"/><text x="19.7875%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.5375%" y="373" width="0.0797%" height="15" fill="rgb(249,105,52)" fg:x="245" fg:w="1"/><text x="19.7875%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.5375%" y="357" width="0.0797%" height="15" fill="rgb(216,93,51)" fg:x="245" fg:w="1"/><text x="19.7875%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.5375%" y="341" width="0.0797%" height="15" fill="rgb(217,172,13)" fg:x="245" fg:w="1"/><text x="19.7875%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.5375%" y="325" width="0.0797%" height="15" fill="rgb(235,199,38)" fg:x="245" fg:w="1"/><text x="19.7875%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.5375%" y="309" width="0.0797%" height="15" fill="rgb(221,97,33)" fg:x="245" fg:w="1"/><text x="19.7875%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="19.6172%" y="373" width="0.0797%" height="15" fill="rgb(205,156,50)" fg:x="246" fg:w="1"/><text x="19.8672%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="19.6172%" y="357" width="0.0797%" height="15" fill="rgb(215,142,19)" fg:x="246" fg:w="1"/><text x="19.8672%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="19.6172%" y="341" width="0.0797%" height="15" fill="rgb(232,170,7)" fg:x="246" fg:w="1"/><text x="19.8672%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="19.6172%" y="325" width="0.0797%" height="15" fill="rgb(223,50,17)" fg:x="246" fg:w="1"/><text x="19.8672%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="19.6172%" y="309" width="0.0797%" height="15" fill="rgb(230,103,46)" fg:x="246" fg:w="1"/><text x="19.8672%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="19.6172%" y="293" width="0.0797%" height="15" fill="rgb(254,30,34)" fg:x="246" fg:w="1"/><text x="19.8672%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="19.6172%" y="277" width="0.0797%" height="15" fill="rgb(235,198,1)" fg:x="246" fg:w="1"/><text x="19.8672%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="19.6172%" y="261" width="0.0797%" height="15" fill="rgb(217,105,47)" fg:x="246" fg:w="1"/><text x="19.8672%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.6172%" y="245" width="0.0797%" height="15" fill="rgb(231,18,12)" fg:x="246" fg:w="1"/><text x="19.8672%" y="255.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="19.6172%" y="469" width="0.1595%" height="15" fill="rgb(218,196,1)" fg:x="246" fg:w="2"/><text x="19.8672%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="19.6172%" y="453" width="0.1595%" height="15" fill="rgb(210,32,3)" fg:x="246" fg:w="2"/><text x="19.8672%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.6172%" y="437" width="0.1595%" height="15" fill="rgb(227,178,30)" fg:x="246" fg:w="2"/><text x="19.8672%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="19.6172%" y="421" width="0.1595%" height="15" fill="rgb(231,140,27)" fg:x="246" fg:w="2"/><text x="19.8672%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.6172%" y="405" width="0.1595%" height="15" fill="rgb(206,66,35)" fg:x="246" fg:w="2"/><text x="19.8672%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="19.6172%" y="389" width="0.1595%" height="15" fill="rgb(212,34,2)" fg:x="246" fg:w="2"/><text x="19.8672%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="19.6970%" y="373" width="0.0797%" height="15" fill="rgb(207,201,33)" fg:x="247" fg:w="1"/><text x="19.9470%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.6970%" y="357" width="0.0797%" height="15" fill="rgb(221,135,32)" fg:x="247" fg:w="1"/><text x="19.9470%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.6970%" y="341" width="0.0797%" height="15" fill="rgb(206,77,31)" fg:x="247" fg:w="1"/><text x="19.9470%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="19.8565%" y="293" width="0.0797%" height="15" fill="rgb(252,198,50)" fg:x="249" fg:w="1"/><text x="20.1065%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="19.8565%" y="277" width="0.0797%" height="15" fill="rgb(206,79,27)" fg:x="249" fg:w="1"/><text x="20.1065%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="19.8565%" y="261" width="0.0797%" height="15" fill="rgb(228,108,9)" fg:x="249" fg:w="1"/><text x="20.1065%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="19.8565%" y="245" width="0.0797%" height="15" fill="rgb(213,9,39)" fg:x="249" fg:w="1"/><text x="20.1065%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="19.8565%" y="229" width="0.0797%" height="15" fill="rgb(252,51,13)" fg:x="249" fg:w="1"/><text x="20.1065%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.8565%" y="213" width="0.0797%" height="15" fill="rgb(218,202,39)" fg:x="249" fg:w="1"/><text x="20.1065%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="19.7767%" y="373" width="0.2392%" height="15" fill="rgb(214,122,21)" fg:x="248" fg:w="3"/><text x="20.0267%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="19.7767%" y="357" width="0.2392%" height="15" fill="rgb(217,205,48)" fg:x="248" fg:w="3"/><text x="20.0267%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="19.8565%" y="341" width="0.1595%" height="15" fill="rgb(230,216,13)" fg:x="249" fg:w="2"/><text x="20.1065%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="19.8565%" y="325" width="0.1595%" height="15" fill="rgb(249,118,4)" fg:x="249" fg:w="2"/><text x="20.1065%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="19.8565%" y="309" width="0.1595%" height="15" fill="rgb(212,207,40)" fg:x="249" fg:w="2"/><text x="20.1065%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="19.9362%" y="293" width="0.0797%" height="15" fill="rgb(217,156,26)" fg:x="250" fg:w="1"/><text x="20.1862%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="19.9362%" y="277" width="0.0797%" height="15" fill="rgb(226,86,34)" fg:x="250" fg:w="1"/><text x="20.1862%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="19.7767%" y="405" width="0.3190%" height="15" fill="rgb(217,111,30)" fg:x="248" fg:w="4"/><text x="20.0267%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="19.7767%" y="389" width="0.3190%" height="15" fill="rgb(228,64,18)" fg:x="248" fg:w="4"/><text x="20.0267%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="20.0159%" y="373" width="0.0797%" height="15" fill="rgb(254,217,48)" fg:x="251" fg:w="1"/><text x="20.2659%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="20.0159%" y="357" width="0.0797%" height="15" fill="rgb(226,156,48)" fg:x="251" fg:w="1"/><text x="20.2659%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (9 samples, 0.72%)</title><rect x="19.4577%" y="517" width="0.7177%" height="15" fill="rgb(236,168,20)" fg:x="244" fg:w="9"/><text x="19.7077%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.72%)</title><rect x="19.4577%" y="501" width="0.7177%" height="15" fill="rgb(239,210,33)" fg:x="244" fg:w="9"/><text x="19.7077%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.72%)</title><rect x="19.4577%" y="485" width="0.7177%" height="15" fill="rgb(242,85,17)" fg:x="244" fg:w="9"/><text x="19.7077%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="19.7767%" y="469" width="0.3987%" height="15" fill="rgb(221,196,15)" fg:x="248" fg:w="5"/><text x="20.0267%" y="479.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="19.7767%" y="453" width="0.3987%" height="15" fill="rgb(249,76,21)" fg:x="248" fg:w="5"/><text x="20.0267%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="19.7767%" y="437" width="0.3987%" height="15" fill="rgb(243,67,29)" fg:x="248" fg:w="5"/><text x="20.0267%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="19.7767%" y="421" width="0.3987%" height="15" fill="rgb(240,159,2)" fg:x="248" fg:w="5"/><text x="20.0267%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="20.0957%" y="405" width="0.0797%" height="15" fill="rgb(244,64,3)" fg:x="252" fg:w="1"/><text x="20.3457%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.0957%" y="389" width="0.0797%" height="15" fill="rgb(220,86,40)" fg:x="252" fg:w="1"/><text x="20.3457%" y="399.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (12 samples, 0.96%)</title><rect x="19.2982%" y="549" width="0.9569%" height="15" fill="rgb(222,194,51)" fg:x="242" fg:w="12"/><text x="19.5482%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (10 samples, 0.80%)</title><rect x="19.4577%" y="533" width="0.7974%" height="15" fill="rgb(207,154,19)" fg:x="244" fg:w="10"/><text x="19.7077%" y="543.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="20.1754%" y="517" width="0.0797%" height="15" fill="rgb(206,178,36)" fg:x="253" fg:w="1"/><text x="20.4254%" y="527.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (14 samples, 1.12%)</title><rect x="19.2185%" y="565" width="1.1164%" height="15" fill="rgb(218,8,24)" fg:x="241" fg:w="14"/><text x="19.4685%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="20.2552%" y="549" width="0.0797%" height="15" fill="rgb(226,83,41)" fg:x="254" fg:w="1"/><text x="20.5052%" y="559.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="20.2552%" y="533" width="0.0797%" height="15" fill="rgb(224,23,22)" fg:x="254" fg:w="1"/><text x="20.5052%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.4147%" y="517" width="0.0797%" height="15" fill="rgb(218,198,45)" fg:x="256" fg:w="1"/><text x="20.6647%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.5742%" y="325" width="0.0797%" height="15" fill="rgb(249,147,41)" fg:x="258" fg:w="1"/><text x="20.8242%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.5742%" y="309" width="0.0797%" height="15" fill="rgb(244,224,13)" fg:x="258" fg:w="1"/><text x="20.8242%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="20.5742%" y="405" width="0.1595%" height="15" fill="rgb(225,97,27)" fg:x="258" fg:w="2"/><text x="20.8242%" y="415.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="20.5742%" y="389" width="0.1595%" height="15" fill="rgb(254,64,0)" fg:x="258" fg:w="2"/><text x="20.8242%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="20.5742%" y="373" width="0.1595%" height="15" fill="rgb(208,130,43)" fg:x="258" fg:w="2"/><text x="20.8242%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="20.5742%" y="357" width="0.1595%" height="15" fill="rgb(247,91,25)" fg:x="258" fg:w="2"/><text x="20.8242%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.5742%" y="341" width="0.1595%" height="15" fill="rgb(215,218,42)" fg:x="258" fg:w="2"/><text x="20.8242%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.6539%" y="325" width="0.0797%" height="15" fill="rgb(233,9,24)" fg:x="259" fg:w="1"/><text x="20.9039%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.6539%" y="309" width="0.0797%" height="15" fill="rgb(252,105,38)" fg:x="259" fg:w="1"/><text x="20.9039%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.6539%" y="293" width="0.0797%" height="15" fill="rgb(225,40,49)" fg:x="259" fg:w="1"/><text x="20.9039%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.6539%" y="277" width="0.0797%" height="15" fill="rgb(232,196,19)" fg:x="259" fg:w="1"/><text x="20.9039%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="20.7337%" y="405" width="0.0797%" height="15" fill="rgb(207,35,15)" fg:x="260" fg:w="1"/><text x="20.9837%" y="415.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="20.7337%" y="389" width="0.0797%" height="15" fill="rgb(238,68,36)" fg:x="260" fg:w="1"/><text x="20.9837%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="20.7337%" y="373" width="0.0797%" height="15" fill="rgb(205,158,20)" fg:x="260" fg:w="1"/><text x="20.9837%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.7337%" y="357" width="0.0797%" height="15" fill="rgb(232,32,22)" fg:x="260" fg:w="1"/><text x="20.9837%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.7337%" y="341" width="0.0797%" height="15" fill="rgb(210,169,6)" fg:x="260" fg:w="1"/><text x="20.9837%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.7337%" y="325" width="0.0797%" height="15" fill="rgb(229,28,12)" fg:x="260" fg:w="1"/><text x="20.9837%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.7337%" y="309" width="0.0797%" height="15" fill="rgb(229,78,10)" fg:x="260" fg:w="1"/><text x="20.9837%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.7337%" y="293" width="0.0797%" height="15" fill="rgb(223,139,54)" fg:x="260" fg:w="1"/><text x="20.9837%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.7337%" y="277" width="0.0797%" height="15" fill="rgb(207,110,4)" fg:x="260" fg:w="1"/><text x="20.9837%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.7337%" y="261" width="0.0797%" height="15" fill="rgb(248,30,41)" fg:x="260" fg:w="1"/><text x="20.9837%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.7337%" y="245" width="0.0797%" height="15" fill="rgb(235,54,25)" fg:x="260" fg:w="1"/><text x="20.9837%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.7337%" y="229" width="0.0797%" height="15" fill="rgb(213,107,41)" fg:x="260" fg:w="1"/><text x="20.9837%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.7337%" y="213" width="0.0797%" height="15" fill="rgb(237,102,9)" fg:x="260" fg:w="1"/><text x="20.9837%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.7337%" y="197" width="0.0797%" height="15" fill="rgb(252,137,49)" fg:x="260" fg:w="1"/><text x="20.9837%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.7337%" y="181" width="0.0797%" height="15" fill="rgb(233,202,33)" fg:x="260" fg:w="1"/><text x="20.9837%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.7337%" y="165" width="0.0797%" height="15" fill="rgb(223,14,51)" fg:x="260" fg:w="1"/><text x="20.9837%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="20.7337%" y="149" width="0.0797%" height="15" fill="rgb(248,70,23)" fg:x="260" fg:w="1"/><text x="20.9837%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="20.7337%" y="133" width="0.0797%" height="15" fill="rgb(209,207,47)" fg:x="260" fg:w="1"/><text x="20.9837%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8931%" y="341" width="0.0797%" height="15" fill="rgb(245,124,2)" fg:x="262" fg:w="1"/><text x="21.1431%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8931%" y="325" width="0.0797%" height="15" fill="rgb(249,208,11)" fg:x="262" fg:w="1"/><text x="21.1431%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.8931%" y="309" width="0.0797%" height="15" fill="rgb(247,112,7)" fg:x="262" fg:w="1"/><text x="21.1431%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.8931%" y="293" width="0.0797%" height="15" fill="rgb(209,192,31)" fg:x="262" fg:w="1"/><text x="21.1431%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.8931%" y="277" width="0.0797%" height="15" fill="rgb(236,55,19)" fg:x="262" fg:w="1"/><text x="21.1431%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.8931%" y="261" width="0.0797%" height="15" fill="rgb(252,89,41)" fg:x="262" fg:w="1"/><text x="21.1431%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.8931%" y="245" width="0.0797%" height="15" fill="rgb(220,172,14)" fg:x="262" fg:w="1"/><text x="21.1431%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="20.8931%" y="229" width="0.0797%" height="15" fill="rgb(252,65,2)" fg:x="262" fg:w="1"/><text x="21.1431%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="20.8931%" y="213" width="0.0797%" height="15" fill="rgb(250,20,8)" fg:x="262" fg:w="1"/><text x="21.1431%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.9729%" y="341" width="0.0797%" height="15" fill="rgb(234,149,13)" fg:x="263" fg:w="1"/><text x="21.2229%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="21.0526%" y="277" width="0.0797%" height="15" fill="rgb(223,219,12)" fg:x="264" fg:w="1"/><text x="21.3026%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (5 samples, 0.40%)</title><rect x="20.8134%" y="405" width="0.3987%" height="15" fill="rgb(234,13,49)" fg:x="261" fg:w="5"/><text x="21.0634%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (5 samples, 0.40%)</title><rect x="20.8134%" y="389" width="0.3987%" height="15" fill="rgb(214,41,25)" fg:x="261" fg:w="5"/><text x="21.0634%" y="399.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="20.8134%" y="373" width="0.3987%" height="15" fill="rgb(232,198,52)" fg:x="261" fg:w="5"/><text x="21.0634%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="20.8134%" y="357" width="0.3987%" height="15" fill="rgb(236,111,46)" fg:x="261" fg:w="5"/><text x="21.0634%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="21.0526%" y="341" width="0.1595%" height="15" fill="rgb(253,30,20)" fg:x="264" fg:w="2"/><text x="21.3026%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.0526%" y="325" width="0.1595%" height="15" fill="rgb(247,141,17)" fg:x="264" fg:w="2"/><text x="21.3026%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="21.0526%" y="309" width="0.1595%" height="15" fill="rgb(214,195,21)" fg:x="264" fg:w="2"/><text x="21.3026%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.0526%" y="293" width="0.1595%" height="15" fill="rgb(214,98,12)" fg:x="264" fg:w="2"/><text x="21.3026%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.1324%" y="277" width="0.0797%" height="15" fill="rgb(239,4,26)" fg:x="265" fg:w="1"/><text x="21.3824%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="21.1324%" y="261" width="0.0797%" height="15" fill="rgb(234,210,35)" fg:x="265" fg:w="1"/><text x="21.3824%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="21.2121%" y="325" width="0.1595%" height="15" fill="rgb(252,178,27)" fg:x="266" fg:w="2"/><text x="21.4621%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="21.2121%" y="309" width="0.1595%" height="15" fill="rgb(217,50,1)" fg:x="266" fg:w="2"/><text x="21.4621%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="21.2121%" y="293" width="0.1595%" height="15" fill="rgb(233,137,5)" fg:x="266" fg:w="2"/><text x="21.4621%" y="303.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="21.2121%" y="277" width="0.1595%" height="15" fill="rgb(217,227,25)" fg:x="266" fg:w="2"/><text x="21.4621%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="21.2121%" y="261" width="0.1595%" height="15" fill="rgb(242,89,38)" fg:x="266" fg:w="2"/><text x="21.4621%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="21.2919%" y="245" width="0.0797%" height="15" fill="rgb(212,190,30)" fg:x="267" fg:w="1"/><text x="21.5419%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="21.2919%" y="229" width="0.0797%" height="15" fill="rgb(222,120,8)" fg:x="267" fg:w="1"/><text x="21.5419%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.32%)</title><rect x="21.3716%" y="277" width="0.3190%" height="15" fill="rgb(227,181,9)" fg:x="268" fg:w="4"/><text x="21.6216%" y="287.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="21.4514%" y="261" width="0.2392%" height="15" fill="rgb(222,125,29)" fg:x="269" fg:w="3"/><text x="21.7014%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="21.3716%" y="325" width="0.3987%" height="15" fill="rgb(215,153,31)" fg:x="268" fg:w="5"/><text x="21.6216%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="21.3716%" y="309" width="0.3987%" height="15" fill="rgb(228,77,30)" fg:x="268" fg:w="5"/><text x="21.6216%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.40%)</title><rect x="21.3716%" y="293" width="0.3987%" height="15" fill="rgb(226,110,9)" fg:x="268" fg:w="5"/><text x="21.6216%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="21.6906%" y="277" width="0.0797%" height="15" fill="rgb(219,111,7)" fg:x="272" fg:w="1"/><text x="21.9406%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="22.0096%" y="277" width="0.0797%" height="15" fill="rgb(229,167,25)" fg:x="276" fg:w="1"/><text x="22.2596%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="22.0096%" y="261" width="0.0797%" height="15" fill="rgb(209,77,43)" fg:x="276" fg:w="1"/><text x="22.2596%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="22.0096%" y="245" width="0.0797%" height="15" fill="rgb(233,70,39)" fg:x="276" fg:w="1"/><text x="22.2596%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.0096%" y="229" width="0.0797%" height="15" fill="rgb(207,171,44)" fg:x="276" fg:w="1"/><text x="22.2596%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.0096%" y="213" width="0.0797%" height="15" fill="rgb(244,91,6)" fg:x="276" fg:w="1"/><text x="22.2596%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.0096%" y="197" width="0.0797%" height="15" fill="rgb(234,136,12)" fg:x="276" fg:w="1"/><text x="22.2596%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="22.0893%" y="277" width="0.0797%" height="15" fill="rgb(216,210,38)" fg:x="277" fg:w="1"/><text x="22.3393%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.0893%" y="261" width="0.0797%" height="15" fill="rgb(241,227,7)" fg:x="277" fg:w="1"/><text x="22.3393%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.2488%" y="245" width="0.0797%" height="15" fill="rgb(241,222,11)" fg:x="279" fg:w="1"/><text x="22.4988%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.12%)</title><rect x="22.2488%" y="261" width="1.1164%" height="15" fill="rgb(246,86,18)" fg:x="279" fg:w="14"/><text x="22.4988%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.04%)</title><rect x="22.3285%" y="245" width="1.0367%" height="15" fill="rgb(224,151,49)" fg:x="280" fg:w="13"/><text x="22.5785%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.2855%" y="229" width="0.0797%" height="15" fill="rgb(235,4,41)" fg:x="292" fg:w="1"/><text x="23.5355%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="23.3652%" y="261" width="0.0797%" height="15" fill="rgb(218,30,52)" fg:x="293" fg:w="1"/><text x="23.6152%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="23.3652%" y="245" width="0.0797%" height="15" fill="rgb(205,124,51)" fg:x="293" fg:w="1"/><text x="23.6152%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="23.3652%" y="229" width="0.0797%" height="15" fill="rgb(237,126,51)" fg:x="293" fg:w="1"/><text x="23.6152%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="23.3652%" y="213" width="0.0797%" height="15" fill="rgb(225,32,46)" fg:x="293" fg:w="1"/><text x="23.6152%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.3652%" y="197" width="0.0797%" height="15" fill="rgb(251,60,49)" fg:x="293" fg:w="1"/><text x="23.6152%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.3652%" y="181" width="0.0797%" height="15" fill="rgb(234,18,23)" fg:x="293" fg:w="1"/><text x="23.6152%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.6045%" y="197" width="0.0797%" height="15" fill="rgb(234,25,23)" fg:x="296" fg:w="1"/><text x="23.8545%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="23.6842%" y="197" width="0.0797%" height="15" fill="rgb(210,43,52)" fg:x="297" fg:w="1"/><text x="23.9342%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.6842%" y="181" width="0.0797%" height="15" fill="rgb(237,198,21)" fg:x="297" fg:w="1"/><text x="23.9342%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.6842%" y="165" width="0.0797%" height="15" fill="rgb(211,20,34)" fg:x="297" fg:w="1"/><text x="23.9342%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.6842%" y="149" width="0.0797%" height="15" fill="rgb(221,155,50)" fg:x="297" fg:w="1"/><text x="23.9342%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.7640%" y="133" width="0.0797%" height="15" fill="rgb(213,214,53)" fg:x="298" fg:w="1"/><text x="24.0140%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="23.7640%" y="165" width="0.1595%" height="15" fill="rgb(215,229,48)" fg:x="298" fg:w="2"/><text x="24.0140%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="23.7640%" y="149" width="0.1595%" height="15" fill="rgb(243,88,5)" fg:x="298" fg:w="2"/><text x="24.0140%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.8437%" y="133" width="0.0797%" height="15" fill="rgb(216,199,8)" fg:x="299" fg:w="1"/><text x="24.0937%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.9234%" y="149" width="0.0797%" height="15" fill="rgb(241,22,4)" fg:x="300" fg:w="1"/><text x="24.1734%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="23.7640%" y="197" width="0.3190%" height="15" fill="rgb(209,190,22)" fg:x="298" fg:w="4"/><text x="24.0140%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="23.7640%" y="181" width="0.3190%" height="15" fill="rgb(251,138,45)" fg:x="298" fg:w="4"/><text x="24.0140%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="23.9234%" y="165" width="0.1595%" height="15" fill="rgb(219,111,22)" fg:x="300" fg:w="2"/><text x="24.1734%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="24.0032%" y="149" width="0.0797%" height="15" fill="rgb(253,29,49)" fg:x="301" fg:w="1"/><text x="24.2532%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.0032%" y="133" width="0.0797%" height="15" fill="rgb(238,129,49)" fg:x="301" fg:w="1"/><text x="24.2532%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="24.0829%" y="181" width="0.0797%" height="15" fill="rgb(240,26,41)" fg:x="302" fg:w="1"/><text x="24.3329%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="24.0829%" y="197" width="0.1595%" height="15" fill="rgb(221,47,33)" fg:x="302" fg:w="2"/><text x="24.3329%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="24.1627%" y="181" width="0.0797%" height="15" fill="rgb(216,200,17)" fg:x="303" fg:w="1"/><text x="24.4127%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="24.1627%" y="165" width="0.0797%" height="15" fill="rgb(230,151,26)" fg:x="303" fg:w="1"/><text x="24.4127%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.1627%" y="149" width="0.0797%" height="15" fill="rgb(242,182,16)" fg:x="303" fg:w="1"/><text x="24.4127%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (45 samples, 3.59%)</title><rect x="24.2424%" y="197" width="3.5885%" height="15" fill="rgb(236,35,53)" fg:x="304" fg:w="45"/><text x="24.4924%" y="207.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (45 samples, 3.59%)</title><rect x="24.2424%" y="181" width="3.5885%" height="15" fill="rgb(214,180,28)" fg:x="304" fg:w="45"/><text x="24.4924%" y="191.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (45 samples, 3.59%)</title><rect x="24.2424%" y="165" width="3.5885%" height="15" fill="rgb(208,173,36)" fg:x="304" fg:w="45"/><text x="24.4924%" y="175.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="27.8309%" y="197" width="0.3190%" height="15" fill="rgb(218,39,15)" fg:x="349" fg:w="4"/><text x="28.0809%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="27.9904%" y="181" width="0.1595%" height="15" fill="rgb(213,145,15)" fg:x="351" fg:w="2"/><text x="28.2404%" y="191.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="28.1499%" y="197" width="0.0797%" height="15" fill="rgb(242,110,37)" fg:x="353" fg:w="1"/><text x="28.3999%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 4.86%)</title><rect x="23.4450%" y="245" width="4.8644%" height="15" fill="rgb(247,146,22)" fg:x="294" fg:w="61"/><text x="23.6950%" y="255.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (61 samples, 4.86%)</title><rect x="23.4450%" y="229" width="4.8644%" height="15" fill="rgb(215,191,7)" fg:x="294" fg:w="61"/><text x="23.6950%" y="239.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (61 samples, 4.86%)</title><rect x="23.4450%" y="213" width="4.8644%" height="15" fill="rgb(240,158,1)" fg:x="294" fg:w="61"/><text x="23.6950%" y="223.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="28.2297%" y="197" width="0.0797%" height="15" fill="rgb(241,78,32)" fg:x="354" fg:w="1"/><text x="28.4797%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.3094%" y="229" width="0.0797%" height="15" fill="rgb(248,83,10)" fg:x="355" fg:w="1"/><text x="28.5594%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="28.3892%" y="229" width="0.0797%" height="15" fill="rgb(241,52,0)" fg:x="356" fg:w="1"/><text x="28.6392%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="28.3094%" y="245" width="0.6380%" height="15" fill="rgb(238,37,13)" fg:x="355" fg:w="8"/><text x="28.5594%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="28.4689%" y="229" width="0.4785%" height="15" fill="rgb(242,194,17)" fg:x="357" fg:w="6"/><text x="28.7189%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="28.8676%" y="213" width="0.0797%" height="15" fill="rgb(236,96,3)" fg:x="362" fg:w="1"/><text x="29.1176%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.8676%" y="197" width="0.0797%" height="15" fill="rgb(235,148,34)" fg:x="362" fg:w="1"/><text x="29.1176%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.8676%" y="181" width="0.0797%" height="15" fill="rgb(254,12,11)" fg:x="362" fg:w="1"/><text x="29.1176%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="28.9474%" y="245" width="0.0797%" height="15" fill="rgb(207,31,54)" fg:x="363" fg:w="1"/><text x="29.1974%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="28.9474%" y="229" width="0.0797%" height="15" fill="rgb(252,14,28)" fg:x="363" fg:w="1"/><text x="29.1974%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (71 samples, 5.66%)</title><rect x="23.4450%" y="261" width="5.6619%" height="15" fill="rgb(252,108,36)" fg:x="294" fg:w="71"/><text x="23.6950%" y="271.50">regex_a..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="29.0271%" y="245" width="0.0797%" height="15" fill="rgb(214,149,7)" fg:x="364" fg:w="1"/><text x="29.2771%" y="255.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="29.0271%" y="229" width="0.0797%" height="15" fill="rgb(243,94,12)" fg:x="364" fg:w="1"/><text x="29.2771%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.0271%" y="213" width="0.0797%" height="15" fill="rgb(208,36,10)" fg:x="364" fg:w="1"/><text x="29.2771%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.0271%" y="197" width="0.0797%" height="15" fill="rgb(233,185,52)" fg:x="364" fg:w="1"/><text x="29.2771%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.0271%" y="181" width="0.0797%" height="15" fill="rgb(234,50,45)" fg:x="364" fg:w="1"/><text x="29.2771%" y="191.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::new (1 samples, 0.08%)</title><rect x="29.1069%" y="245" width="0.0797%" height="15" fill="rgb(228,92,54)" fg:x="365" fg:w="1"/><text x="29.3569%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (89 samples, 7.10%)</title><rect x="22.1691%" y="277" width="7.0973%" height="15" fill="rgb(224,85,25)" fg:x="278" fg:w="89"/><text x="22.4191%" y="287.50">regex_auto..</text></g><g><title>regex_automata::util::prefilter::prefixes (2 samples, 0.16%)</title><rect x="29.1069%" y="261" width="0.1595%" height="15" fill="rgb(246,1,45)" fg:x="365" fg:w="2"/><text x="29.3569%" y="271.50"></text></g><g><title>regex_syntax::hir::literal::Seq::union (1 samples, 0.08%)</title><rect x="29.1866%" y="245" width="0.0797%" height="15" fill="rgb(240,66,23)" fg:x="366" fg:w="1"/><text x="29.4366%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="29.2663%" y="277" width="0.6380%" height="15" fill="rgb(222,96,27)" fg:x="367" fg:w="8"/><text x="29.5163%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="29.2663%" y="261" width="0.6380%" height="15" fill="rgb(212,136,10)" fg:x="367" fg:w="8"/><text x="29.5163%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.64%)</title><rect x="29.2663%" y="245" width="0.6380%" height="15" fill="rgb(226,192,50)" fg:x="367" fg:w="8"/><text x="29.5163%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (7 samples, 0.56%)</title><rect x="29.3461%" y="229" width="0.5582%" height="15" fill="rgb(241,182,31)" fg:x="368" fg:w="7"/><text x="29.5961%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="29.3461%" y="213" width="0.5582%" height="15" fill="rgb(219,205,47)" fg:x="368" fg:w="7"/><text x="29.5961%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.56%)</title><rect x="29.3461%" y="197" width="0.5582%" height="15" fill="rgb(207,96,14)" fg:x="368" fg:w="7"/><text x="29.5961%" y="207.50"></text></g><g><title>__libc_malloc (7 samples, 0.56%)</title><rect x="29.3461%" y="181" width="0.5582%" height="15" fill="rgb(216,119,9)" fg:x="368" fg:w="7"/><text x="29.5961%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.9043%" y="229" width="0.0797%" height="15" fill="rgb(235,62,36)" fg:x="375" fg:w="1"/><text x="30.1543%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.9043%" y="213" width="0.0797%" height="15" fill="rgb(214,41,27)" fg:x="375" fg:w="1"/><text x="30.1543%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="29.9043%" y="197" width="0.0797%" height="15" fill="rgb(214,174,37)" fg:x="375" fg:w="1"/><text x="30.1543%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (104 samples, 8.29%)</title><rect x="21.7703%" y="325" width="8.2935%" height="15" fill="rgb(212,11,25)" fg:x="273" fg:w="104"/><text x="22.0203%" y="335.50">regex::regex..</text></g><g><title>regex::builders::Builder::build_one_string (104 samples, 8.29%)</title><rect x="21.7703%" y="309" width="8.2935%" height="15" fill="rgb(217,71,35)" fg:x="273" fg:w="104"/><text x="22.0203%" y="319.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (102 samples, 8.13%)</title><rect x="21.9298%" y="293" width="8.1340%" height="15" fill="rgb(234,152,9)" fg:x="275" fg:w="102"/><text x="22.1798%" y="303.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="29.9043%" y="277" width="0.1595%" height="15" fill="rgb(228,32,51)" fg:x="375" fg:w="2"/><text x="30.1543%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="29.9043%" y="261" width="0.1595%" height="15" fill="rgb(209,14,47)" fg:x="375" fg:w="2"/><text x="30.1543%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="29.9043%" y="245" width="0.1595%" height="15" fill="rgb(218,201,17)" fg:x="375" fg:w="2"/><text x="30.1543%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="29.9841%" y="229" width="0.0797%" height="15" fill="rgb(218,98,15)" fg:x="376" fg:w="1"/><text x="30.2341%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.9841%" y="213" width="0.0797%" height="15" fill="rgb(233,202,29)" fg:x="376" fg:w="1"/><text x="30.2341%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.9841%" y="197" width="0.0797%" height="15" fill="rgb(207,196,44)" fg:x="376" fg:w="1"/><text x="30.2341%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="30.1435%" y="261" width="0.4785%" height="15" fill="rgb(218,63,34)" fg:x="378" fg:w="6"/><text x="30.3935%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.5423%" y="245" width="0.0797%" height="15" fill="rgb(209,10,5)" fg:x="383" fg:w="1"/><text x="30.7923%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.5423%" y="229" width="0.0797%" height="15" fill="rgb(224,36,28)" fg:x="383" fg:w="1"/><text x="30.7923%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="30.5423%" y="213" width="0.0797%" height="15" fill="rgb(249,178,7)" fg:x="383" fg:w="1"/><text x="30.7923%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="30.1435%" y="277" width="0.5582%" height="15" fill="rgb(253,163,10)" fg:x="378" fg:w="7"/><text x="30.3935%" y="287.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="30.6220%" y="261" width="0.0797%" height="15" fill="rgb(245,67,46)" fg:x="384" fg:w="1"/><text x="30.8720%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.6220%" y="245" width="0.0797%" height="15" fill="rgb(225,14,18)" fg:x="384" fg:w="1"/><text x="30.8720%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.6220%" y="229" width="0.0797%" height="15" fill="rgb(217,41,54)" fg:x="384" fg:w="1"/><text x="30.8720%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.6220%" y="213" width="0.0797%" height="15" fill="rgb(222,111,11)" fg:x="384" fg:w="1"/><text x="30.8720%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (120 samples, 9.57%)</title><rect x="21.2121%" y="341" width="9.5694%" height="15" fill="rgb(211,85,31)" fg:x="266" fg:w="120"/><text x="21.4621%" y="351.50">indefinite::he..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.72%)</title><rect x="30.0638%" y="325" width="0.7177%" height="15" fill="rgb(223,29,26)" fg:x="377" fg:w="9"/><text x="30.3138%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.72%)</title><rect x="30.0638%" y="309" width="0.7177%" height="15" fill="rgb(236,124,50)" fg:x="377" fg:w="9"/><text x="30.3138%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.72%)</title><rect x="30.0638%" y="293" width="0.7177%" height="15" fill="rgb(219,148,15)" fg:x="377" fg:w="9"/><text x="30.3138%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="30.7018%" y="277" width="0.0797%" height="15" fill="rgb(248,159,33)" fg:x="385" fg:w="1"/><text x="30.9518%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="30.7018%" y="261" width="0.0797%" height="15" fill="rgb(252,65,8)" fg:x="385" fg:w="1"/><text x="30.9518%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.7018%" y="245" width="0.0797%" height="15" fill="rgb(236,45,7)" fg:x="385" fg:w="1"/><text x="30.9518%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="30.8612%" y="293" width="0.0797%" height="15" fill="rgb(244,3,48)" fg:x="387" fg:w="1"/><text x="31.1112%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="30.8612%" y="277" width="0.0797%" height="15" fill="rgb(224,123,53)" fg:x="387" fg:w="1"/><text x="31.1112%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="30.8612%" y="261" width="0.0797%" height="15" fill="rgb(223,173,15)" fg:x="387" fg:w="1"/><text x="31.1112%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.8612%" y="245" width="0.0797%" height="15" fill="rgb(254,181,5)" fg:x="387" fg:w="1"/><text x="31.1112%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="30.8612%" y="325" width="0.1595%" height="15" fill="rgb(243,124,33)" fg:x="387" fg:w="2"/><text x="31.1112%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="30.8612%" y="309" width="0.1595%" height="15" fill="rgb(253,220,11)" fg:x="387" fg:w="2"/><text x="31.1112%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="30.9410%" y="293" width="0.0797%" height="15" fill="rgb(217,14,4)" fg:x="388" fg:w="1"/><text x="31.1910%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="30.9410%" y="277" width="0.0797%" height="15" fill="rgb(209,196,12)" fg:x="388" fg:w="1"/><text x="31.1910%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.9410%" y="261" width="0.0797%" height="15" fill="rgb(237,108,29)" fg:x="388" fg:w="1"/><text x="31.1910%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="31.0207%" y="309" width="0.1595%" height="15" fill="rgb(216,173,20)" fg:x="389" fg:w="2"/><text x="31.2707%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="31.1005%" y="293" width="0.0797%" height="15" fill="rgb(245,27,6)" fg:x="390" fg:w="1"/><text x="31.3505%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="31.1005%" y="277" width="0.0797%" height="15" fill="rgb(210,181,20)" fg:x="390" fg:w="1"/><text x="31.3505%" y="287.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="31.1005%" y="261" width="0.0797%" height="15" fill="rgb(235,213,1)" fg:x="390" fg:w="1"/><text x="31.3505%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.2600%" y="245" width="0.0797%" height="15" fill="rgb(239,68,43)" fg:x="392" fg:w="1"/><text x="31.5100%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.4992%" y="229" width="0.0797%" height="15" fill="rgb(254,137,43)" fg:x="395" fg:w="1"/><text x="31.7492%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.4992%" y="213" width="0.0797%" height="15" fill="rgb(252,170,38)" fg:x="395" fg:w="1"/><text x="31.7492%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="31.4992%" y="197" width="0.0797%" height="15" fill="rgb(234,21,42)" fg:x="395" fg:w="1"/><text x="31.7492%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="31.5789%" y="229" width="0.1595%" height="15" fill="rgb(216,145,40)" fg:x="396" fg:w="2"/><text x="31.8289%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.6587%" y="213" width="0.0797%" height="15" fill="rgb(251,73,9)" fg:x="397" fg:w="1"/><text x="31.9087%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="31.3397%" y="245" width="0.5582%" height="15" fill="rgb(242,54,6)" fg:x="393" fg:w="7"/><text x="31.5897%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="31.7384%" y="229" width="0.1595%" height="15" fill="rgb(239,70,7)" fg:x="398" fg:w="2"/><text x="31.9884%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.72%)</title><rect x="31.2600%" y="261" width="0.7177%" height="15" fill="rgb(216,159,35)" fg:x="392" fg:w="9"/><text x="31.5100%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="31.8979%" y="245" width="0.0797%" height="15" fill="rgb(224,50,39)" fg:x="400" fg:w="1"/><text x="32.1479%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.8979%" y="229" width="0.0797%" height="15" fill="rgb(235,9,35)" fg:x="400" fg:w="1"/><text x="32.1479%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.8979%" y="213" width="0.0797%" height="15" fill="rgb(239,34,21)" fg:x="400" fg:w="1"/><text x="32.1479%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.8979%" y="197" width="0.0797%" height="15" fill="rgb(218,162,43)" fg:x="400" fg:w="1"/><text x="32.1479%" y="207.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (13 samples, 1.04%)</title><rect x="31.0207%" y="325" width="1.0367%" height="15" fill="rgb(219,89,33)" fg:x="389" fg:w="13"/><text x="31.2707%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.88%)</title><rect x="31.1802%" y="309" width="0.8772%" height="15" fill="rgb(226,125,37)" fg:x="391" fg:w="11"/><text x="31.4302%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.80%)</title><rect x="31.2600%" y="293" width="0.7974%" height="15" fill="rgb(233,149,30)" fg:x="392" fg:w="10"/><text x="31.5100%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.80%)</title><rect x="31.2600%" y="277" width="0.7974%" height="15" fill="rgb(236,8,18)" fg:x="392" fg:w="10"/><text x="31.5100%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="31.9777%" y="261" width="0.0797%" height="15" fill="rgb(205,176,9)" fg:x="401" fg:w="1"/><text x="32.2277%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="31.9777%" y="245" width="0.0797%" height="15" fill="rgb(252,103,44)" fg:x="401" fg:w="1"/><text x="32.2277%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.0574%" y="277" width="0.0797%" height="15" fill="rgb(207,68,53)" fg:x="402" fg:w="1"/><text x="32.3074%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.0574%" y="261" width="0.0797%" height="15" fill="rgb(218,193,48)" fg:x="402" fg:w="1"/><text x="32.3074%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="32.0574%" y="245" width="0.0797%" height="15" fill="rgb(234,121,52)" fg:x="402" fg:w="1"/><text x="32.3074%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.0574%" y="229" width="0.0797%" height="15" fill="rgb(227,218,49)" fg:x="402" fg:w="1"/><text x="32.3074%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.1372%" y="277" width="0.0797%" height="15" fill="rgb(221,8,7)" fg:x="403" fg:w="1"/><text x="32.3872%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.04%)</title><rect x="32.2967%" y="261" width="1.0367%" height="15" fill="rgb(217,151,36)" fg:x="405" fg:w="13"/><text x="32.5467%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.04%)</title><rect x="32.2967%" y="245" width="1.0367%" height="15" fill="rgb(213,71,5)" fg:x="405" fg:w="13"/><text x="32.5467%" y="255.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="33.0941%" y="229" width="0.2392%" height="15" fill="rgb(225,145,43)" fg:x="415" fg:w="3"/><text x="33.3441%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="33.3333%" y="229" width="0.0797%" height="15" fill="rgb(235,118,19)" fg:x="418" fg:w="1"/><text x="33.5833%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="33.4131%" y="229" width="0.2392%" height="15" fill="rgb(214,102,36)" fg:x="419" fg:w="3"/><text x="33.6631%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="33.4928%" y="213" width="0.1595%" height="15" fill="rgb(220,56,43)" fg:x="420" fg:w="2"/><text x="33.7428%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="33.4928%" y="197" width="0.1595%" height="15" fill="rgb(246,136,46)" fg:x="420" fg:w="2"/><text x="33.7428%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="33.4928%" y="181" width="0.1595%" height="15" fill="rgb(249,99,12)" fg:x="420" fg:w="2"/><text x="33.7428%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="33.4928%" y="165" width="0.1595%" height="15" fill="rgb(224,31,42)" fg:x="420" fg:w="2"/><text x="33.7428%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (5 samples, 0.40%)</title><rect x="33.3333%" y="261" width="0.3987%" height="15" fill="rgb(208,96,21)" fg:x="418" fg:w="5"/><text x="33.5833%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="33.3333%" y="245" width="0.3987%" height="15" fill="rgb(237,229,7)" fg:x="418" fg:w="5"/><text x="33.5833%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="33.6523%" y="229" width="0.0797%" height="15" fill="rgb(210,12,6)" fg:x="422" fg:w="1"/><text x="33.9023%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="33.7321%" y="213" width="0.0797%" height="15" fill="rgb(240,9,34)" fg:x="423" fg:w="1"/><text x="33.9821%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.7321%" y="197" width="0.0797%" height="15" fill="rgb(211,68,37)" fg:x="423" fg:w="1"/><text x="33.9821%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.7321%" y="181" width="0.0797%" height="15" fill="rgb(249,138,50)" fg:x="423" fg:w="1"/><text x="33.9821%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.7321%" y="165" width="0.0797%" height="15" fill="rgb(243,185,40)" fg:x="423" fg:w="1"/><text x="33.9821%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="34.4498%" y="149" width="0.1595%" height="15" fill="rgb(242,92,35)" fg:x="432" fg:w="2"/><text x="34.6998%" y="159.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="34.6093%" y="149" width="0.2392%" height="15" fill="rgb(244,98,5)" fg:x="434" fg:w="3"/><text x="34.8593%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="34.8485%" y="149" width="0.2392%" height="15" fill="rgb(228,186,29)" fg:x="437" fg:w="3"/><text x="35.0985%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="35.0877%" y="149" width="0.0797%" height="15" fill="rgb(253,7,44)" fg:x="440" fg:w="1"/><text x="35.3377%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.0877%" y="133" width="0.0797%" height="15" fill="rgb(216,11,45)" fg:x="440" fg:w="1"/><text x="35.3377%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.0877%" y="117" width="0.0797%" height="15" fill="rgb(205,67,3)" fg:x="440" fg:w="1"/><text x="35.3377%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.0877%" y="101" width="0.0797%" height="15" fill="rgb(250,18,3)" fg:x="440" fg:w="1"/><text x="35.3377%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.2472%" y="117" width="0.0797%" height="15" fill="rgb(241,222,43)" fg:x="442" fg:w="1"/><text x="35.4972%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.3270%" y="117" width="0.0797%" height="15" fill="rgb(233,115,3)" fg:x="443" fg:w="1"/><text x="35.5770%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.3270%" y="101" width="0.0797%" height="15" fill="rgb(215,165,25)" fg:x="443" fg:w="1"/><text x="35.5770%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.3270%" y="85" width="0.0797%" height="15" fill="rgb(234,179,6)" fg:x="443" fg:w="1"/><text x="35.5770%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.64%)</title><rect x="35.1675%" y="149" width="0.6380%" height="15" fill="rgb(215,82,23)" fg:x="441" fg:w="8"/><text x="35.4175%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.64%)</title><rect x="35.1675%" y="133" width="0.6380%" height="15" fill="rgb(211,47,18)" fg:x="441" fg:w="8"/><text x="35.4175%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="35.4067%" y="117" width="0.3987%" height="15" fill="rgb(248,17,9)" fg:x="444" fg:w="5"/><text x="35.6567%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="35.7257%" y="101" width="0.0797%" height="15" fill="rgb(210,212,12)" fg:x="448" fg:w="1"/><text x="35.9757%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.8054%" y="117" width="0.0797%" height="15" fill="rgb(230,135,45)" fg:x="449" fg:w="1"/><text x="36.0554%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (49 samples, 3.91%)</title><rect x="35.8054%" y="149" width="3.9075%" height="15" fill="rgb(214,121,41)" fg:x="449" fg:w="49"/><text x="36.0554%" y="159.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (49 samples, 3.91%)</title><rect x="35.8054%" y="133" width="3.9075%" height="15" fill="rgb(239,165,45)" fg:x="449" fg:w="49"/><text x="36.0554%" y="143.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (48 samples, 3.83%)</title><rect x="35.8852%" y="117" width="3.8278%" height="15" fill="rgb(214,85,51)" fg:x="450" fg:w="48"/><text x="36.1352%" y="127.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="39.7129%" y="149" width="0.2392%" height="15" fill="rgb(223,90,27)" fg:x="498" fg:w="3"/><text x="39.9629%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (82 samples, 6.54%)</title><rect x="33.7321%" y="245" width="6.5391%" height="15" fill="rgb(244,84,11)" fg:x="423" fg:w="82"/><text x="33.9821%" y="255.50">&lt;core::it..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (82 samples, 6.54%)</title><rect x="33.7321%" y="229" width="6.5391%" height="15" fill="rgb(253,41,47)" fg:x="423" fg:w="82"/><text x="33.9821%" y="239.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (81 samples, 6.46%)</title><rect x="33.8118%" y="213" width="6.4593%" height="15" fill="rgb(232,39,5)" fg:x="424" fg:w="81"/><text x="34.0618%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (81 samples, 6.46%)</title><rect x="33.8118%" y="197" width="6.4593%" height="15" fill="rgb(211,93,4)" fg:x="424" fg:w="81"/><text x="34.0618%" y="207.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (81 samples, 6.46%)</title><rect x="33.8118%" y="181" width="6.4593%" height="15" fill="rgb(219,50,49)" fg:x="424" fg:w="81"/><text x="34.0618%" y="191.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (80 samples, 6.38%)</title><rect x="33.8915%" y="165" width="6.3796%" height="15" fill="rgb(232,80,19)" fg:x="425" fg:w="80"/><text x="34.1415%" y="175.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="39.9522%" y="149" width="0.3190%" height="15" fill="rgb(215,227,39)" fg:x="501" fg:w="4"/><text x="40.2022%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.1914%" y="133" width="0.0797%" height="15" fill="rgb(211,99,12)" fg:x="504" fg:w="1"/><text x="40.4414%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.1914%" y="117" width="0.0797%" height="15" fill="rgb(214,158,5)" fg:x="504" fg:w="1"/><text x="40.4414%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.1914%" y="101" width="0.0797%" height="15" fill="rgb(242,19,53)" fg:x="504" fg:w="1"/><text x="40.4414%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.2711%" y="229" width="0.0797%" height="15" fill="rgb(208,18,20)" fg:x="505" fg:w="1"/><text x="40.5211%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="40.3509%" y="229" width="0.0797%" height="15" fill="rgb(250,44,11)" fg:x="506" fg:w="1"/><text x="40.6009%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.5901%" y="181" width="0.0797%" height="15" fill="rgb(238,159,13)" fg:x="509" fg:w="1"/><text x="40.8401%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.56%)</title><rect x="40.4306%" y="229" width="0.5582%" height="15" fill="rgb(231,74,18)" fg:x="507" fg:w="7"/><text x="40.6806%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="40.5104%" y="213" width="0.4785%" height="15" fill="rgb(229,219,45)" fg:x="508" fg:w="6"/><text x="40.7604%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="40.5901%" y="197" width="0.3987%" height="15" fill="rgb(210,221,1)" fg:x="509" fg:w="5"/><text x="40.8401%" y="207.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="40.6699%" y="181" width="0.3190%" height="15" fill="rgb(209,60,51)" fg:x="510" fg:w="4"/><text x="40.9199%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="40.9888%" y="229" width="0.2392%" height="15" fill="rgb(252,97,34)" fg:x="514" fg:w="3"/><text x="41.2388%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.1483%" y="213" width="0.0797%" height="15" fill="rgb(243,211,37)" fg:x="516" fg:w="1"/><text x="41.3983%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (115 samples, 9.17%)</title><rect x="32.2169%" y="277" width="9.1707%" height="15" fill="rgb(210,229,37)" fg:x="404" fg:w="115"/><text x="32.4669%" y="287.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (96 samples, 7.66%)</title><rect x="33.7321%" y="261" width="7.6555%" height="15" fill="rgb(220,208,43)" fg:x="423" fg:w="96"/><text x="33.9821%" y="271.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (14 samples, 1.12%)</title><rect x="40.2711%" y="245" width="1.1164%" height="15" fill="rgb(218,118,50)" fg:x="505" fg:w="14"/><text x="40.5211%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="41.2281%" y="229" width="0.1595%" height="15" fill="rgb(254,169,52)" fg:x="517" fg:w="2"/><text x="41.4781%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="41.3876%" y="245" width="0.0797%" height="15" fill="rgb(221,214,37)" fg:x="519" fg:w="1"/><text x="41.6376%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="41.3876%" y="277" width="0.1595%" height="15" fill="rgb(254,186,32)" fg:x="519" fg:w="2"/><text x="41.6376%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="41.3876%" y="261" width="0.1595%" height="15" fill="rgb(215,144,43)" fg:x="519" fg:w="2"/><text x="41.6376%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="41.4673%" y="245" width="0.0797%" height="15" fill="rgb(252,21,46)" fg:x="520" fg:w="1"/><text x="41.7173%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="41.5470%" y="245" width="0.0797%" height="15" fill="rgb(207,166,46)" fg:x="521" fg:w="1"/><text x="41.7970%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="41.6268%" y="229" width="0.2392%" height="15" fill="rgb(253,37,49)" fg:x="522" fg:w="3"/><text x="41.8768%" y="239.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="41.7863%" y="213" width="0.0797%" height="15" fill="rgb(222,97,20)" fg:x="524" fg:w="1"/><text x="42.0363%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="41.6268%" y="245" width="0.3190%" height="15" fill="rgb(244,181,26)" fg:x="522" fg:w="4"/><text x="41.8768%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="41.8660%" y="229" width="0.0797%" height="15" fill="rgb(241,22,29)" fg:x="525" fg:w="1"/><text x="42.1160%" y="239.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="41.8660%" y="213" width="0.0797%" height="15" fill="rgb(206,200,43)" fg:x="525" fg:w="1"/><text x="42.1160%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="41.8660%" y="197" width="0.0797%" height="15" fill="rgb(226,224,43)" fg:x="525" fg:w="1"/><text x="42.1160%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (141 samples, 11.24%)</title><rect x="30.7815%" y="341" width="11.2440%" height="15" fill="rgb(253,129,28)" fg:x="386" fg:w="141"/><text x="31.0315%" y="351.50">indefinite::rules..</text></g><g><title>regex::regex::string::Regex::new (125 samples, 9.97%)</title><rect x="32.0574%" y="325" width="9.9681%" height="15" fill="rgb(252,99,33)" fg:x="402" fg:w="125"/><text x="32.3074%" y="335.50">regex::regex::..</text></g><g><title>regex::builders::Builder::build_one_string (125 samples, 9.97%)</title><rect x="32.0574%" y="309" width="9.9681%" height="15" fill="rgb(208,123,45)" fg:x="402" fg:w="125"/><text x="32.3074%" y="319.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (125 samples, 9.97%)</title><rect x="32.0574%" y="293" width="9.9681%" height="15" fill="rgb(251,106,12)" fg:x="402" fg:w="125"/><text x="32.3074%" y="303.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="41.5470%" y="277" width="0.4785%" height="15" fill="rgb(240,209,35)" fg:x="521" fg:w="6"/><text x="41.7970%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="41.5470%" y="261" width="0.4785%" height="15" fill="rgb(214,52,50)" fg:x="521" fg:w="6"/><text x="41.7970%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="41.9458%" y="245" width="0.0797%" height="15" fill="rgb(234,119,4)" fg:x="526" fg:w="1"/><text x="42.1958%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="41.9458%" y="229" width="0.0797%" height="15" fill="rgb(228,181,36)" fg:x="526" fg:w="1"/><text x="42.1958%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="42.0255%" y="309" width="0.0797%" height="15" fill="rgb(213,171,42)" fg:x="527" fg:w="1"/><text x="42.2755%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="42.0255%" y="293" width="0.0797%" height="15" fill="rgb(239,14,41)" fg:x="527" fg:w="1"/><text x="42.2755%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="42.0255%" y="277" width="0.0797%" height="15" fill="rgb(239,111,46)" fg:x="527" fg:w="1"/><text x="42.2755%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="42.1053%" y="309" width="0.0797%" height="15" fill="rgb(214,72,7)" fg:x="528" fg:w="1"/><text x="42.3553%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="42.1053%" y="293" width="0.0797%" height="15" fill="rgb(221,114,1)" fg:x="528" fg:w="1"/><text x="42.3553%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="42.1053%" y="277" width="0.0797%" height="15" fill="rgb(213,143,14)" fg:x="528" fg:w="1"/><text x="42.3553%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.1053%" y="261" width="0.0797%" height="15" fill="rgb(220,221,53)" fg:x="528" fg:w="1"/><text x="42.3553%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.1850%" y="293" width="0.0797%" height="15" fill="rgb(236,189,27)" fg:x="529" fg:w="1"/><text x="42.4350%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="42.2648%" y="245" width="0.0797%" height="15" fill="rgb(252,139,49)" fg:x="530" fg:w="1"/><text x="42.5148%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="42.3445%" y="245" width="0.2392%" height="15" fill="rgb(231,158,33)" fg:x="531" fg:w="3"/><text x="42.5945%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="42.3445%" y="229" width="0.2392%" height="15" fill="rgb(207,201,15)" fg:x="531" fg:w="3"/><text x="42.5945%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="42.5837%" y="213" width="0.0797%" height="15" fill="rgb(218,43,48)" fg:x="534" fg:w="1"/><text x="42.8337%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.5837%" y="197" width="0.0797%" height="15" fill="rgb(244,63,52)" fg:x="534" fg:w="1"/><text x="42.8337%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.5837%" y="181" width="0.0797%" height="15" fill="rgb(236,60,17)" fg:x="534" fg:w="1"/><text x="42.8337%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.5837%" y="165" width="0.0797%" height="15" fill="rgb(205,206,29)" fg:x="534" fg:w="1"/><text x="42.8337%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="42.6635%" y="197" width="0.0797%" height="15" fill="rgb(205,209,35)" fg:x="535" fg:w="1"/><text x="42.9135%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="42.5837%" y="229" width="0.2392%" height="15" fill="rgb(227,112,14)" fg:x="534" fg:w="3"/><text x="42.8337%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="42.6635%" y="213" width="0.1595%" height="15" fill="rgb(248,151,9)" fg:x="535" fg:w="2"/><text x="42.9135%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="42.7432%" y="197" width="0.0797%" height="15" fill="rgb(247,45,40)" fg:x="536" fg:w="1"/><text x="42.9932%" y="207.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="42.8230%" y="213" width="0.0797%" height="15" fill="rgb(232,185,16)" fg:x="537" fg:w="1"/><text x="43.0730%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.9027%" y="213" width="0.0797%" height="15" fill="rgb(215,45,44)" fg:x="538" fg:w="1"/><text x="43.1527%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.9825%" y="165" width="0.0797%" height="15" fill="rgb(206,69,32)" fg:x="539" fg:w="1"/><text x="43.2325%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="42.9825%" y="213" width="0.1595%" height="15" fill="rgb(233,98,50)" fg:x="539" fg:w="2"/><text x="43.2325%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="42.9825%" y="197" width="0.1595%" height="15" fill="rgb(232,217,52)" fg:x="539" fg:w="2"/><text x="43.2325%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="42.9825%" y="181" width="0.1595%" height="15" fill="rgb(250,42,51)" fg:x="539" fg:w="2"/><text x="43.2325%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.0622%" y="165" width="0.0797%" height="15" fill="rgb(241,200,26)" fg:x="540" fg:w="1"/><text x="43.3122%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (13 samples, 1.04%)</title><rect x="42.2648%" y="261" width="1.0367%" height="15" fill="rgb(207,10,32)" fg:x="530" fg:w="13"/><text x="42.5148%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.72%)</title><rect x="42.5837%" y="245" width="0.7177%" height="15" fill="rgb(214,63,15)" fg:x="534" fg:w="9"/><text x="42.8337%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="42.8230%" y="229" width="0.4785%" height="15" fill="rgb(234,176,14)" fg:x="537" fg:w="6"/><text x="43.0730%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="43.1419%" y="213" width="0.1595%" height="15" fill="rgb(226,104,52)" fg:x="541" fg:w="2"/><text x="43.3919%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.2217%" y="197" width="0.0797%" height="15" fill="rgb(211,222,1)" fg:x="542" fg:w="1"/><text x="43.4717%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="43.3014%" y="213" width="0.0797%" height="15" fill="rgb(237,7,3)" fg:x="543" fg:w="1"/><text x="43.5514%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.3014%" y="197" width="0.0797%" height="15" fill="rgb(218,143,7)" fg:x="543" fg:w="1"/><text x="43.5514%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.3014%" y="181" width="0.0797%" height="15" fill="rgb(208,25,22)" fg:x="543" fg:w="1"/><text x="43.5514%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.3014%" y="165" width="0.0797%" height="15" fill="rgb(228,127,16)" fg:x="543" fg:w="1"/><text x="43.5514%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="43.3014%" y="261" width="0.1595%" height="15" fill="rgb(237,86,27)" fg:x="543" fg:w="2"/><text x="43.5514%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="43.3014%" y="245" width="0.1595%" height="15" fill="rgb(207,125,19)" fg:x="543" fg:w="2"/><text x="43.5514%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="43.3014%" y="229" width="0.1595%" height="15" fill="rgb(243,195,0)" fg:x="543" fg:w="2"/><text x="43.5514%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="43.3812%" y="213" width="0.0797%" height="15" fill="rgb(230,95,18)" fg:x="544" fg:w="1"/><text x="43.6312%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.3812%" y="197" width="0.0797%" height="15" fill="rgb(232,157,21)" fg:x="544" fg:w="1"/><text x="43.6312%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.3812%" y="181" width="0.0797%" height="15" fill="rgb(212,120,50)" fg:x="544" fg:w="1"/><text x="43.6312%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.3812%" y="165" width="0.0797%" height="15" fill="rgb(222,204,44)" fg:x="544" fg:w="1"/><text x="43.6312%" y="175.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (19 samples, 1.52%)</title><rect x="42.2648%" y="277" width="1.5152%" height="15" fill="rgb(236,6,33)" fg:x="530" fg:w="19"/><text x="42.5148%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="43.4609%" y="261" width="0.3190%" height="15" fill="rgb(247,11,38)" fg:x="545" fg:w="4"/><text x="43.7109%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="43.4609%" y="245" width="0.3190%" height="15" fill="rgb(215,111,0)" fg:x="545" fg:w="4"/><text x="43.7109%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="43.6204%" y="229" width="0.1595%" height="15" fill="rgb(211,65,46)" fg:x="547" fg:w="2"/><text x="43.8704%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="43.6204%" y="213" width="0.1595%" height="15" fill="rgb(216,5,12)" fg:x="547" fg:w="2"/><text x="43.8704%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (21 samples, 1.67%)</title><rect x="42.1850%" y="309" width="1.6746%" height="15" fill="rgb(226,7,2)" fg:x="529" fg:w="21"/><text x="42.4350%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (20 samples, 1.59%)</title><rect x="42.2648%" y="293" width="1.5949%" height="15" fill="rgb(242,116,12)" fg:x="530" fg:w="20"/><text x="42.5148%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="43.7799%" y="277" width="0.0797%" height="15" fill="rgb(249,209,7)" fg:x="549" fg:w="1"/><text x="44.0299%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="44.0191%" y="213" width="0.0797%" height="15" fill="rgb(232,73,17)" fg:x="552" fg:w="1"/><text x="44.2691%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="44.0191%" y="197" width="0.0797%" height="15" fill="rgb(214,13,32)" fg:x="552" fg:w="1"/><text x="44.2691%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="43.9394%" y="245" width="0.2392%" height="15" fill="rgb(221,125,10)" fg:x="551" fg:w="3"/><text x="44.1894%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="44.0191%" y="229" width="0.1595%" height="15" fill="rgb(246,7,44)" fg:x="552" fg:w="2"/><text x="44.2691%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="44.0989%" y="213" width="0.0797%" height="15" fill="rgb(239,18,35)" fg:x="553" fg:w="1"/><text x="44.3489%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (297 samples, 23.68%)</title><rect x="20.5742%" y="421" width="23.6842%" height="15" fill="rgb(250,222,16)" fg:x="258" fg:w="297"/><text x="20.8242%" y="431.50">&lt;&amp;kernel::model::EntityPtr as plugins_..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (289 samples, 23.05%)</title><rect x="21.2121%" y="405" width="23.0463%" height="15" fill="rgb(219,100,8)" fg:x="266" fg:w="289"/><text x="21.4621%" y="415.50">plugins_core::looking::model::Unquali..</text></g><g><title>indefinite::indefinite (289 samples, 23.05%)</title><rect x="21.2121%" y="389" width="23.0463%" height="15" fill="rgb(240,62,13)" fg:x="266" fg:w="289"/><text x="21.4621%" y="399.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (289 samples, 23.05%)</title><rect x="21.2121%" y="373" width="23.0463%" height="15" fill="rgb(253,194,2)" fg:x="266" fg:w="289"/><text x="21.4621%" y="383.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (289 samples, 23.05%)</title><rect x="21.2121%" y="357" width="23.0463%" height="15" fill="rgb(235,58,31)" fg:x="266" fg:w="289"/><text x="21.4621%" y="367.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (28 samples, 2.23%)</title><rect x="42.0255%" y="341" width="2.2329%" height="15" fill="rgb(231,37,11)" fg:x="527" fg:w="28"/><text x="42.2755%" y="351.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (28 samples, 2.23%)</title><rect x="42.0255%" y="325" width="2.2329%" height="15" fill="rgb(235,133,0)" fg:x="527" fg:w="28"/><text x="42.2755%" y="335.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="43.8596%" y="309" width="0.3987%" height="15" fill="rgb(212,185,40)" fg:x="550" fg:w="5"/><text x="44.1096%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="43.8596%" y="293" width="0.3987%" height="15" fill="rgb(216,68,42)" fg:x="550" fg:w="5"/><text x="44.1096%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="43.8596%" y="277" width="0.3987%" height="15" fill="rgb(239,81,4)" fg:x="550" fg:w="5"/><text x="44.1096%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="43.8596%" y="261" width="0.3987%" height="15" fill="rgb(206,86,6)" fg:x="550" fg:w="5"/><text x="44.1096%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="44.1786%" y="245" width="0.0797%" height="15" fill="rgb(249,95,27)" fg:x="554" fg:w="1"/><text x="44.4286%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="44.1786%" y="229" width="0.0797%" height="15" fill="rgb(205,155,45)" fg:x="554" fg:w="1"/><text x="44.4286%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.1786%" y="213" width="0.0797%" height="15" fill="rgb(213,55,42)" fg:x="554" fg:w="1"/><text x="44.4286%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.1786%" y="197" width="0.0797%" height="15" fill="rgb(249,197,4)" fg:x="554" fg:w="1"/><text x="44.4286%" y="207.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="44.2584%" y="357" width="0.0797%" height="15" fill="rgb(212,128,32)" fg:x="555" fg:w="1"/><text x="44.5084%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.2584%" y="341" width="0.0797%" height="15" fill="rgb(252,47,30)" fg:x="555" fg:w="1"/><text x="44.5084%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.2584%" y="325" width="0.0797%" height="15" fill="rgb(209,79,18)" fg:x="555" fg:w="1"/><text x="44.5084%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.2584%" y="309" width="0.0797%" height="15" fill="rgb(225,81,38)" fg:x="555" fg:w="1"/><text x="44.5084%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.2584%" y="293" width="0.0797%" height="15" fill="rgb(205,95,16)" fg:x="555" fg:w="1"/><text x="44.5084%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.2584%" y="277" width="0.0797%" height="15" fill="rgb(214,30,4)" fg:x="555" fg:w="1"/><text x="44.5084%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="44.2584%" y="261" width="0.0797%" height="15" fill="rgb(232,137,22)" fg:x="555" fg:w="1"/><text x="44.5084%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="44.2584%" y="245" width="0.0797%" height="15" fill="rgb(232,156,19)" fg:x="555" fg:w="1"/><text x="44.5084%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="44.2584%" y="229" width="0.0797%" height="15" fill="rgb(248,157,26)" fg:x="555" fg:w="1"/><text x="44.5084%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="44.2584%" y="213" width="0.0797%" height="15" fill="rgb(242,24,3)" fg:x="555" fg:w="1"/><text x="44.5084%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="44.2584%" y="197" width="0.0797%" height="15" fill="rgb(218,195,48)" fg:x="555" fg:w="1"/><text x="44.5084%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.4179%" y="293" width="0.0797%" height="15" fill="rgb(214,193,36)" fg:x="557" fg:w="1"/><text x="44.6679%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.4179%" y="277" width="0.0797%" height="15" fill="rgb(242,110,40)" fg:x="557" fg:w="1"/><text x="44.6679%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.4179%" y="261" width="0.0797%" height="15" fill="rgb(233,150,26)" fg:x="557" fg:w="1"/><text x="44.6679%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.4179%" y="245" width="0.0797%" height="15" fill="rgb(239,200,30)" fg:x="557" fg:w="1"/><text x="44.6679%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.4179%" y="229" width="0.0797%" height="15" fill="rgb(226,28,11)" fg:x="557" fg:w="1"/><text x="44.6679%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.4179%" y="213" width="0.0797%" height="15" fill="rgb(220,26,48)" fg:x="557" fg:w="1"/><text x="44.6679%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.4179%" y="197" width="0.0797%" height="15" fill="rgb(232,10,11)" fg:x="557" fg:w="1"/><text x="44.6679%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="44.4179%" y="181" width="0.0797%" height="15" fill="rgb(252,143,50)" fg:x="557" fg:w="1"/><text x="44.6679%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="44.4179%" y="165" width="0.0797%" height="15" fill="rgb(206,58,22)" fg:x="557" fg:w="1"/><text x="44.6679%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="44.4179%" y="149" width="0.0797%" height="15" fill="rgb(250,9,45)" fg:x="557" fg:w="1"/><text x="44.6679%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="44.4179%" y="133" width="0.0797%" height="15" fill="rgb(225,148,14)" fg:x="557" fg:w="1"/><text x="44.6679%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="44.4179%" y="117" width="0.0797%" height="15" fill="rgb(205,178,40)" fg:x="557" fg:w="1"/><text x="44.6679%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="44.4179%" y="101" width="0.0797%" height="15" fill="rgb(215,201,4)" fg:x="557" fg:w="1"/><text x="44.6679%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="44.4179%" y="85" width="0.0797%" height="15" fill="rgb(219,223,24)" fg:x="557" fg:w="1"/><text x="44.6679%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="44.4179%" y="69" width="0.0797%" height="15" fill="rgb(217,19,31)" fg:x="557" fg:w="1"/><text x="44.6679%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="44.4179%" y="53" width="0.0797%" height="15" fill="rgb(235,33,3)" fg:x="557" fg:w="1"/><text x="44.6679%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.4179%" y="37" width="0.0797%" height="15" fill="rgb(221,39,18)" fg:x="557" fg:w="1"/><text x="44.6679%" y="47.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="44.4976%" y="293" width="0.0797%" height="15" fill="rgb(242,162,33)" fg:x="558" fg:w="1"/><text x="44.7476%" y="303.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="44.4976%" y="277" width="0.0797%" height="15" fill="rgb(233,215,28)" fg:x="558" fg:w="1"/><text x="44.7476%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="44.4976%" y="261" width="0.0797%" height="15" fill="rgb(212,117,9)" fg:x="558" fg:w="1"/><text x="44.7476%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="44.4976%" y="245" width="0.0797%" height="15" fill="rgb(237,70,47)" fg:x="558" fg:w="1"/><text x="44.7476%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="44.4976%" y="229" width="0.0797%" height="15" fill="rgb(206,177,13)" fg:x="558" fg:w="1"/><text x="44.7476%" y="239.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="44.4976%" y="213" width="0.0797%" height="15" fill="rgb(209,174,33)" fg:x="558" fg:w="1"/><text x="44.7476%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="44.4976%" y="197" width="0.0797%" height="15" fill="rgb(226,6,11)" fg:x="558" fg:w="1"/><text x="44.7476%" y="207.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="44.4976%" y="181" width="0.0797%" height="15" fill="rgb(240,214,6)" fg:x="558" fg:w="1"/><text x="44.7476%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="44.4976%" y="165" width="0.0797%" height="15" fill="rgb(254,214,40)" fg:x="558" fg:w="1"/><text x="44.7476%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.5774%" y="197" width="0.0797%" height="15" fill="rgb(230,187,15)" fg:x="559" fg:w="1"/><text x="44.8274%" y="207.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="44.5774%" y="293" width="0.2392%" height="15" fill="rgb(250,11,27)" fg:x="559" fg:w="3"/><text x="44.8274%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="44.5774%" y="277" width="0.2392%" height="15" fill="rgb(243,107,19)" fg:x="559" fg:w="3"/><text x="44.8274%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="44.5774%" y="261" width="0.2392%" height="15" fill="rgb(253,66,26)" fg:x="559" fg:w="3"/><text x="44.8274%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="44.5774%" y="245" width="0.2392%" height="15" fill="rgb(228,43,8)" fg:x="559" fg:w="3"/><text x="44.8274%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="44.5774%" y="229" width="0.2392%" height="15" fill="rgb(232,197,36)" fg:x="559" fg:w="3"/><text x="44.8274%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="44.5774%" y="213" width="0.2392%" height="15" fill="rgb(221,182,31)" fg:x="559" fg:w="3"/><text x="44.8274%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="44.6571%" y="197" width="0.1595%" height="15" fill="rgb(244,25,36)" fg:x="560" fg:w="2"/><text x="44.9071%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="44.6571%" y="181" width="0.1595%" height="15" fill="rgb(247,101,19)" fg:x="560" fg:w="2"/><text x="44.9071%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.7368%" y="165" width="0.0797%" height="15" fill="rgb(223,117,19)" fg:x="561" fg:w="1"/><text x="44.9868%" y="175.50"></text></g><g><title>plugins_core::tools::contained_by (8 samples, 0.64%)</title><rect x="44.2584%" y="373" width="0.6380%" height="15" fill="rgb(249,63,38)" fg:x="555" fg:w="8"/><text x="44.5084%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.56%)</title><rect x="44.3381%" y="357" width="0.5582%" height="15" fill="rgb(220,143,23)" fg:x="556" fg:w="7"/><text x="44.5881%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.56%)</title><rect x="44.3381%" y="341" width="0.5582%" height="15" fill="rgb(252,183,22)" fg:x="556" fg:w="7"/><text x="44.5881%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="44.3381%" y="325" width="0.5582%" height="15" fill="rgb(243,176,15)" fg:x="556" fg:w="7"/><text x="44.5881%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="44.3381%" y="309" width="0.5582%" height="15" fill="rgb(244,204,46)" fg:x="556" fg:w="7"/><text x="44.5881%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="44.8166%" y="293" width="0.0797%" height="15" fill="rgb(227,28,54)" fg:x="562" fg:w="1"/><text x="45.0666%" y="303.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="44.8166%" y="277" width="0.0797%" height="15" fill="rgb(231,10,15)" fg:x="562" fg:w="1"/><text x="45.0666%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="44.8166%" y="261" width="0.0797%" height="15" fill="rgb(210,200,17)" fg:x="562" fg:w="1"/><text x="45.0666%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="44.8166%" y="245" width="0.0797%" height="15" fill="rgb(251,106,46)" fg:x="562" fg:w="1"/><text x="45.0666%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="44.8166%" y="229" width="0.0797%" height="15" fill="rgb(218,211,15)" fg:x="562" fg:w="1"/><text x="45.0666%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="44.8166%" y="213" width="0.0797%" height="15" fill="rgb(239,62,10)" fg:x="562" fg:w="1"/><text x="45.0666%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="44.8166%" y="197" width="0.0797%" height="15" fill="rgb(225,53,53)" fg:x="562" fg:w="1"/><text x="45.0666%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="44.8166%" y="181" width="0.0797%" height="15" fill="rgb(207,16,24)" fg:x="562" fg:w="1"/><text x="45.0666%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="44.8166%" y="165" width="0.0797%" height="15" fill="rgb(217,52,28)" fg:x="562" fg:w="1"/><text x="45.0666%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="44.8166%" y="149" width="0.0797%" height="15" fill="rgb(246,1,5)" fg:x="562" fg:w="1"/><text x="45.0666%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="44.8166%" y="133" width="0.0797%" height="15" fill="rgb(221,29,26)" fg:x="562" fg:w="1"/><text x="45.0666%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="44.8166%" y="117" width="0.0797%" height="15" fill="rgb(250,133,32)" fg:x="562" fg:w="1"/><text x="45.0666%" y="127.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="44.8166%" y="101" width="0.0797%" height="15" fill="rgb(236,63,16)" fg:x="562" fg:w="1"/><text x="45.0666%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.8963%" y="325" width="0.0797%" height="15" fill="rgb(231,159,14)" fg:x="563" fg:w="1"/><text x="45.1463%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.8963%" y="309" width="0.0797%" height="15" fill="rgb(207,102,36)" fg:x="563" fg:w="1"/><text x="45.1463%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="44.8963%" y="341" width="0.1595%" height="15" fill="rgb(230,224,31)" fg:x="563" fg:w="2"/><text x="45.1463%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.9761%" y="325" width="0.0797%" height="15" fill="rgb(215,182,16)" fg:x="564" fg:w="1"/><text x="45.2261%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.9761%" y="309" width="0.0797%" height="15" fill="rgb(226,113,2)" fg:x="564" fg:w="1"/><text x="45.2261%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.9761%" y="293" width="0.0797%" height="15" fill="rgb(241,18,35)" fg:x="564" fg:w="1"/><text x="45.2261%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.9761%" y="277" width="0.0797%" height="15" fill="rgb(240,165,44)" fg:x="564" fg:w="1"/><text x="45.2261%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.9761%" y="261" width="0.0797%" height="15" fill="rgb(229,130,47)" fg:x="564" fg:w="1"/><text x="45.2261%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.9761%" y="245" width="0.0797%" height="15" fill="rgb(223,93,7)" fg:x="564" fg:w="1"/><text x="45.2261%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="44.9761%" y="229" width="0.0797%" height="15" fill="rgb(205,180,36)" fg:x="564" fg:w="1"/><text x="45.2261%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="44.9761%" y="213" width="0.0797%" height="15" fill="rgb(221,103,28)" fg:x="564" fg:w="1"/><text x="45.2261%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="44.9761%" y="197" width="0.0797%" height="15" fill="rgb(212,4,3)" fg:x="564" fg:w="1"/><text x="45.2261%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="44.9761%" y="181" width="0.0797%" height="15" fill="rgb(209,221,53)" fg:x="564" fg:w="1"/><text x="45.2261%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="44.9761%" y="165" width="0.0797%" height="15" fill="rgb(233,229,52)" fg:x="564" fg:w="1"/><text x="45.2261%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="44.9761%" y="149" width="0.0797%" height="15" fill="rgb(254,127,37)" fg:x="564" fg:w="1"/><text x="45.2261%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="44.9761%" y="133" width="0.0797%" height="15" fill="rgb(207,161,26)" fg:x="564" fg:w="1"/><text x="45.2261%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="44.9761%" y="117" width="0.0797%" height="15" fill="rgb(223,75,5)" fg:x="564" fg:w="1"/><text x="45.2261%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="44.9761%" y="101" width="0.0797%" height="15" fill="rgb(235,115,52)" fg:x="564" fg:w="1"/><text x="45.2261%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.9761%" y="85" width="0.0797%" height="15" fill="rgb(240,91,46)" fg:x="564" fg:w="1"/><text x="45.2261%" y="95.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="44.8963%" y="357" width="0.2392%" height="15" fill="rgb(251,144,21)" fg:x="563" fg:w="3"/><text x="45.1463%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="45.0558%" y="341" width="0.0797%" height="15" fill="rgb(247,220,47)" fg:x="565" fg:w="1"/><text x="45.3058%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="45.0558%" y="325" width="0.0797%" height="15" fill="rgb(253,122,1)" fg:x="565" fg:w="1"/><text x="45.3058%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="45.0558%" y="309" width="0.0797%" height="15" fill="rgb(221,0,24)" fg:x="565" fg:w="1"/><text x="45.3058%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="45.0558%" y="293" width="0.0797%" height="15" fill="rgb(220,204,54)" fg:x="565" fg:w="1"/><text x="45.3058%" y="303.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="45.0558%" y="277" width="0.0797%" height="15" fill="rgb(205,96,25)" fg:x="565" fg:w="1"/><text x="45.3058%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="45.0558%" y="261" width="0.0797%" height="15" fill="rgb(247,77,20)" fg:x="565" fg:w="1"/><text x="45.3058%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="45.0558%" y="245" width="0.0797%" height="15" fill="rgb(245,151,8)" fg:x="565" fg:w="1"/><text x="45.3058%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="45.0558%" y="229" width="0.0797%" height="15" fill="rgb(242,158,39)" fg:x="565" fg:w="1"/><text x="45.3058%" y="239.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (12 samples, 0.96%)</title><rect x="44.2584%" y="389" width="0.9569%" height="15" fill="rgb(222,214,50)" fg:x="555" fg:w="12"/><text x="44.5084%" y="399.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="44.8963%" y="373" width="0.3190%" height="15" fill="rgb(229,60,39)" fg:x="563" fg:w="4"/><text x="45.1463%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="45.1356%" y="357" width="0.0797%" height="15" fill="rgb(240,148,18)" fg:x="566" fg:w="1"/><text x="45.3856%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="45.1356%" y="341" width="0.0797%" height="15" fill="rgb(215,96,11)" fg:x="566" fg:w="1"/><text x="45.3856%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.1356%" y="325" width="0.0797%" height="15" fill="rgb(238,162,53)" fg:x="566" fg:w="1"/><text x="45.3856%" y="335.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="45.2951%" y="309" width="0.0797%" height="15" fill="rgb(214,83,18)" fg:x="568" fg:w="1"/><text x="45.5451%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="45.2951%" y="293" width="0.0797%" height="15" fill="rgb(248,117,24)" fg:x="568" fg:w="1"/><text x="45.5451%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="45.2951%" y="277" width="0.0797%" height="15" fill="rgb(238,190,6)" fg:x="568" fg:w="1"/><text x="45.5451%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (15 samples, 1.20%)</title><rect x="44.2584%" y="421" width="1.1962%" height="15" fill="rgb(213,51,6)" fg:x="555" fg:w="15"/><text x="44.5084%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (15 samples, 1.20%)</title><rect x="44.2584%" y="405" width="1.1962%" height="15" fill="rgb(212,136,1)" fg:x="555" fg:w="15"/><text x="44.5084%" y="415.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (3 samples, 0.24%)</title><rect x="45.2153%" y="389" width="0.2392%" height="15" fill="rgb(221,192,14)" fg:x="567" fg:w="3"/><text x="45.4653%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="45.2951%" y="373" width="0.1595%" height="15" fill="rgb(244,38,54)" fg:x="568" fg:w="2"/><text x="45.5451%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (2 samples, 0.16%)</title><rect x="45.2951%" y="357" width="0.1595%" height="15" fill="rgb(240,45,28)" fg:x="568" fg:w="2"/><text x="45.5451%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (2 samples, 0.16%)</title><rect x="45.2951%" y="341" width="0.1595%" height="15" fill="rgb(240,123,12)" fg:x="568" fg:w="2"/><text x="45.5451%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="45.2951%" y="325" width="0.1595%" height="15" fill="rgb(216,14,30)" fg:x="568" fg:w="2"/><text x="45.5451%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="45.3748%" y="309" width="0.0797%" height="15" fill="rgb(212,50,24)" fg:x="569" fg:w="1"/><text x="45.6248%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="45.3748%" y="293" width="0.0797%" height="15" fill="rgb(253,229,47)" fg:x="569" fg:w="1"/><text x="45.6248%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="45.3748%" y="277" width="0.0797%" height="15" fill="rgb(214,26,17)" fg:x="569" fg:w="1"/><text x="45.6248%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="45.3748%" y="261" width="0.0797%" height="15" fill="rgb(252,60,11)" fg:x="569" fg:w="1"/><text x="45.6248%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="45.3748%" y="245" width="0.0797%" height="15" fill="rgb(209,59,37)" fg:x="569" fg:w="1"/><text x="45.6248%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="45.3748%" y="229" width="0.0797%" height="15" fill="rgb(228,126,53)" fg:x="569" fg:w="1"/><text x="45.6248%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (4 samples, 0.32%)</title><rect x="45.4545%" y="405" width="0.3190%" height="15" fill="rgb(233,99,2)" fg:x="570" fg:w="4"/><text x="45.7045%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (3 samples, 0.24%)</title><rect x="45.5343%" y="389" width="0.2392%" height="15" fill="rgb(217,106,34)" fg:x="571" fg:w="3"/><text x="45.7843%" y="399.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (3 samples, 0.24%)</title><rect x="45.5343%" y="373" width="0.2392%" height="15" fill="rgb(222,46,19)" fg:x="571" fg:w="3"/><text x="45.7843%" y="383.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (3 samples, 0.24%)</title><rect x="45.5343%" y="357" width="0.2392%" height="15" fill="rgb(251,87,31)" fg:x="571" fg:w="3"/><text x="45.7843%" y="367.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (2 samples, 0.16%)</title><rect x="45.6140%" y="341" width="0.1595%" height="15" fill="rgb(213,70,51)" fg:x="572" fg:w="2"/><text x="45.8640%" y="351.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (2 samples, 0.16%)</title><rect x="45.6140%" y="325" width="0.1595%" height="15" fill="rgb(229,144,18)" fg:x="572" fg:w="2"/><text x="45.8640%" y="335.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (2 samples, 0.16%)</title><rect x="45.6140%" y="309" width="0.1595%" height="15" fill="rgb(254,60,26)" fg:x="572" fg:w="2"/><text x="45.8640%" y="319.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="45.6938%" y="293" width="0.0797%" height="15" fill="rgb(243,127,51)" fg:x="573" fg:w="1"/><text x="45.9438%" y="303.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="45.6938%" y="277" width="0.0797%" height="15" fill="rgb(221,51,25)" fg:x="573" fg:w="1"/><text x="45.9438%" y="287.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="45.6938%" y="261" width="0.0797%" height="15" fill="rgb(205,42,7)" fg:x="573" fg:w="1"/><text x="45.9438%" y="271.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="45.6938%" y="245" width="0.0797%" height="15" fill="rgb(236,177,48)" fg:x="573" fg:w="1"/><text x="45.9438%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.08%)</title><rect x="45.6938%" y="229" width="0.0797%" height="15" fill="rgb(226,79,31)" fg:x="573" fg:w="1"/><text x="45.9438%" y="239.50"></text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="45.6938%" y="213" width="0.0797%" height="15" fill="rgb(216,170,12)" fg:x="573" fg:w="1"/><text x="45.9438%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.7735%" y="325" width="0.0797%" height="15" fill="rgb(208,62,51)" fg:x="574" fg:w="1"/><text x="46.0235%" y="335.50"></text></g><g><title>plugins_core::library::actions::reply_ok (6 samples, 0.48%)</title><rect x="45.4545%" y="421" width="0.4785%" height="15" fill="rgb(254,129,9)" fg:x="570" fg:w="6"/><text x="45.7045%" y="431.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="45.7735%" y="405" width="0.1595%" height="15" fill="rgb(243,209,31)" fg:x="574" fg:w="2"/><text x="46.0235%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (2 samples, 0.16%)</title><rect x="45.7735%" y="389" width="0.1595%" height="15" fill="rgb(213,159,23)" fg:x="574" fg:w="2"/><text x="46.0235%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="45.7735%" y="373" width="0.1595%" height="15" fill="rgb(249,77,39)" fg:x="574" fg:w="2"/><text x="46.0235%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="45.7735%" y="357" width="0.1595%" height="15" fill="rgb(230,13,33)" fg:x="574" fg:w="2"/><text x="46.0235%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="45.7735%" y="341" width="0.1595%" height="15" fill="rgb(215,215,7)" fg:x="574" fg:w="2"/><text x="46.0235%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="45.8533%" y="325" width="0.0797%" height="15" fill="rgb(222,92,25)" fg:x="575" fg:w="1"/><text x="46.1033%" y="335.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="46.0128%" y="405" width="0.0797%" height="15" fill="rgb(215,173,22)" fg:x="577" fg:w="1"/><text x="46.2628%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.0128%" y="389" width="0.0797%" height="15" fill="rgb(247,205,52)" fg:x="577" fg:w="1"/><text x="46.2628%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.0128%" y="373" width="0.0797%" height="15" fill="rgb(240,210,37)" fg:x="577" fg:w="1"/><text x="46.2628%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::carrying::model::Containing&gt; (1 samples, 0.08%)</title><rect x="46.0925%" y="405" width="0.0797%" height="15" fill="rgb(224,13,10)" fg:x="578" fg:w="1"/><text x="46.3425%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="46.0925%" y="389" width="0.0797%" height="15" fill="rgb(209,48,33)" fg:x="578" fg:w="1"/><text x="46.3425%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.0925%" y="373" width="0.0797%" height="15" fill="rgb(228,219,23)" fg:x="578" fg:w="1"/><text x="46.3425%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.1722%" y="325" width="0.0797%" height="15" fill="rgb(239,46,49)" fg:x="579" fg:w="1"/><text x="46.4222%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.1722%" y="309" width="0.0797%" height="15" fill="rgb(206,172,51)" fg:x="579" fg:w="1"/><text x="46.4222%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.1722%" y="293" width="0.0797%" height="15" fill="rgb(213,212,35)" fg:x="579" fg:w="1"/><text x="46.4222%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="46.1722%" y="405" width="0.1595%" height="15" fill="rgb(252,40,27)" fg:x="579" fg:w="2"/><text x="46.4222%" y="415.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="46.1722%" y="389" width="0.1595%" height="15" fill="rgb(212,33,41)" fg:x="579" fg:w="2"/><text x="46.4222%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="46.1722%" y="373" width="0.1595%" height="15" fill="rgb(232,160,27)" fg:x="579" fg:w="2"/><text x="46.4222%" y="383.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="46.1722%" y="357" width="0.1595%" height="15" fill="rgb(244,160,20)" fg:x="579" fg:w="2"/><text x="46.4222%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="46.1722%" y="341" width="0.1595%" height="15" fill="rgb(205,66,20)" fg:x="579" fg:w="2"/><text x="46.4222%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="46.2520%" y="325" width="0.0797%" height="15" fill="rgb(236,158,6)" fg:x="580" fg:w="1"/><text x="46.5020%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.2520%" y="309" width="0.0797%" height="15" fill="rgb(232,25,36)" fg:x="580" fg:w="1"/><text x="46.5020%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="46.2520%" y="293" width="0.0797%" height="15" fill="rgb(220,153,35)" fg:x="580" fg:w="1"/><text x="46.5020%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.2520%" y="277" width="0.0797%" height="15" fill="rgb(216,5,8)" fg:x="580" fg:w="1"/><text x="46.5020%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="46.2520%" y="261" width="0.0797%" height="15" fill="rgb(240,97,3)" fg:x="580" fg:w="1"/><text x="46.5020%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="46.3317%" y="357" width="0.0797%" height="15" fill="rgb(220,99,26)" fg:x="581" fg:w="1"/><text x="46.5817%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="46.3317%" y="341" width="0.0797%" height="15" fill="rgb(237,96,2)" fg:x="581" fg:w="1"/><text x="46.5817%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="46.3317%" y="325" width="0.0797%" height="15" fill="rgb(217,197,47)" fg:x="581" fg:w="1"/><text x="46.5817%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="46.3317%" y="309" width="0.0797%" height="15" fill="rgb(252,133,54)" fg:x="581" fg:w="1"/><text x="46.5817%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.3317%" y="293" width="0.0797%" height="15" fill="rgb(233,37,30)" fg:x="581" fg:w="1"/><text x="46.5817%" y="303.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="46.3317%" y="405" width="0.1595%" height="15" fill="rgb(239,182,12)" fg:x="581" fg:w="2"/><text x="46.5817%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="46.3317%" y="389" width="0.1595%" height="15" fill="rgb(245,83,39)" fg:x="581" fg:w="2"/><text x="46.5817%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="46.3317%" y="373" width="0.1595%" height="15" fill="rgb(222,109,36)" fg:x="581" fg:w="2"/><text x="46.5817%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="46.4115%" y="357" width="0.0797%" height="15" fill="rgb(237,95,44)" fg:x="582" fg:w="1"/><text x="46.6615%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="46.4115%" y="341" width="0.0797%" height="15" fill="rgb(216,36,54)" fg:x="582" fg:w="1"/><text x="46.6615%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="46.4115%" y="325" width="0.0797%" height="15" fill="rgb(236,164,3)" fg:x="582" fg:w="1"/><text x="46.6615%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="46.4115%" y="309" width="0.0797%" height="15" fill="rgb(223,15,21)" fg:x="582" fg:w="1"/><text x="46.6615%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.4115%" y="293" width="0.0797%" height="15" fill="rgb(239,191,12)" fg:x="582" fg:w="1"/><text x="46.6615%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="46.4115%" y="277" width="0.0797%" height="15" fill="rgb(231,191,37)" fg:x="582" fg:w="1"/><text x="46.6615%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.4115%" y="261" width="0.0797%" height="15" fill="rgb(209,155,36)" fg:x="582" fg:w="1"/><text x="46.6615%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="46.4115%" y="245" width="0.0797%" height="15" fill="rgb(216,222,49)" fg:x="582" fg:w="1"/><text x="46.6615%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.4115%" y="229" width="0.0797%" height="15" fill="rgb(218,181,2)" fg:x="582" fg:w="1"/><text x="46.6615%" y="239.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="46.4912%" y="405" width="0.0797%" height="15" fill="rgb(239,125,9)" fg:x="583" fg:w="1"/><text x="46.7412%" y="415.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (1 samples, 0.08%)</title><rect x="46.4912%" y="389" width="0.0797%" height="15" fill="rgb(233,103,7)" fg:x="583" fg:w="1"/><text x="46.7412%" y="399.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="46.6507%" y="389" width="0.1595%" height="15" fill="rgb(209,223,5)" fg:x="585" fg:w="2"/><text x="46.9007%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="46.7305%" y="373" width="0.0797%" height="15" fill="rgb(234,71,27)" fg:x="586" fg:w="1"/><text x="46.9805%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.7305%" y="357" width="0.0797%" height="15" fill="rgb(251,202,16)" fg:x="586" fg:w="1"/><text x="46.9805%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="46.7305%" y="341" width="0.0797%" height="15" fill="rgb(231,180,0)" fg:x="586" fg:w="1"/><text x="46.9805%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.7305%" y="325" width="0.0797%" height="15" fill="rgb(223,58,28)" fg:x="586" fg:w="1"/><text x="46.9805%" y="335.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (330 samples, 26.32%)</title><rect x="20.5742%" y="437" width="26.3158%" height="15" fill="rgb(250,34,24)" fg:x="258" fg:w="330"/><text x="20.8242%" y="447.50">&lt;plugins_core::carrying::actions::DropActi..</text></g><g><title>plugins_core::location::change_location (12 samples, 0.96%)</title><rect x="45.9330%" y="421" width="0.9569%" height="15" fill="rgb(235,24,16)" fg:x="576" fg:w="12"/><text x="46.1830%" y="431.50"></text></g><g><title>plugins_core::location::Location::set (4 samples, 0.32%)</title><rect x="46.5710%" y="405" width="0.3190%" height="15" fill="rgb(219,28,33)" fg:x="584" fg:w="4"/><text x="46.8210%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="46.8102%" y="389" width="0.0797%" height="15" fill="rgb(228,150,43)" fg:x="587" fg:w="1"/><text x="47.0602%" y="399.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="46.8102%" y="373" width="0.0797%" height="15" fill="rgb(221,228,36)" fg:x="587" fg:w="1"/><text x="47.0602%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="46.9697%" y="405" width="0.0797%" height="15" fill="rgb(232,116,17)" fg:x="589" fg:w="1"/><text x="47.2197%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="46.9697%" y="389" width="0.0797%" height="15" fill="rgb(220,110,51)" fg:x="589" fg:w="1"/><text x="47.2197%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="47.0494%" y="341" width="0.0797%" height="15" fill="rgb(207,26,25)" fg:x="590" fg:w="1"/><text x="47.2994%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="47.0494%" y="325" width="0.0797%" height="15" fill="rgb(223,58,19)" fg:x="590" fg:w="1"/><text x="47.2994%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="47.0494%" y="309" width="0.0797%" height="15" fill="rgb(234,125,39)" fg:x="590" fg:w="1"/><text x="47.2994%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="47.0494%" y="293" width="0.0797%" height="15" fill="rgb(241,48,36)" fg:x="590" fg:w="1"/><text x="47.2994%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="47.0494%" y="277" width="0.0797%" height="15" fill="rgb(217,148,51)" fg:x="590" fg:w="1"/><text x="47.2994%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="47.0494%" y="261" width="0.0797%" height="15" fill="rgb(247,17,25)" fg:x="590" fg:w="1"/><text x="47.2994%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="47.0494%" y="245" width="0.0797%" height="15" fill="rgb(219,89,38)" fg:x="590" fg:w="1"/><text x="47.2994%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="47.0494%" y="229" width="0.0797%" height="15" fill="rgb(220,145,2)" fg:x="590" fg:w="1"/><text x="47.2994%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="47.0494%" y="213" width="0.0797%" height="15" fill="rgb(244,66,47)" fg:x="590" fg:w="1"/><text x="47.2994%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="47.0494%" y="197" width="0.0797%" height="15" fill="rgb(226,182,5)" fg:x="590" fg:w="1"/><text x="47.2994%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="47.0494%" y="181" width="0.0797%" height="15" fill="rgb(211,98,20)" fg:x="590" fg:w="1"/><text x="47.2994%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="47.0494%" y="165" width="0.0797%" height="15" fill="rgb(217,103,52)" fg:x="590" fg:w="1"/><text x="47.2994%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="47.0494%" y="357" width="0.1595%" height="15" fill="rgb(208,125,52)" fg:x="590" fg:w="2"/><text x="47.2994%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.1292%" y="341" width="0.0797%" height="15" fill="rgb(244,70,13)" fg:x="591" fg:w="1"/><text x="47.3792%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="47.2887%" y="293" width="0.0797%" height="15" fill="rgb(253,124,3)" fg:x="593" fg:w="1"/><text x="47.5387%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.40%)</title><rect x="47.0494%" y="405" width="0.3987%" height="15" fill="rgb(222,145,32)" fg:x="590" fg:w="5"/><text x="47.2994%" y="415.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="47.0494%" y="389" width="0.3987%" height="15" fill="rgb(232,183,47)" fg:x="590" fg:w="5"/><text x="47.2994%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="47.0494%" y="373" width="0.3987%" height="15" fill="rgb(246,226,4)" fg:x="590" fg:w="5"/><text x="47.2994%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="47.2089%" y="357" width="0.2392%" height="15" fill="rgb(228,185,46)" fg:x="592" fg:w="3"/><text x="47.4589%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="47.2089%" y="341" width="0.2392%" height="15" fill="rgb(213,196,4)" fg:x="592" fg:w="3"/><text x="47.4589%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="47.2887%" y="325" width="0.1595%" height="15" fill="rgb(212,2,45)" fg:x="593" fg:w="2"/><text x="47.5387%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="47.2887%" y="309" width="0.1595%" height="15" fill="rgb(217,145,50)" fg:x="593" fg:w="2"/><text x="47.5387%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="47.3684%" y="293" width="0.0797%" height="15" fill="rgb(242,10,46)" fg:x="594" fg:w="1"/><text x="47.6184%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="47.3684%" y="277" width="0.0797%" height="15" fill="rgb(252,91,48)" fg:x="594" fg:w="1"/><text x="47.6184%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="47.4482%" y="405" width="0.0797%" height="15" fill="rgb(216,72,13)" fg:x="595" fg:w="1"/><text x="47.6982%" y="415.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="47.4482%" y="389" width="0.0797%" height="15" fill="rgb(219,6,37)" fg:x="595" fg:w="1"/><text x="47.6982%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="47.4482%" y="373" width="0.0797%" height="15" fill="rgb(236,185,40)" fg:x="595" fg:w="1"/><text x="47.6982%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="47.4482%" y="357" width="0.0797%" height="15" fill="rgb(208,81,48)" fg:x="595" fg:w="1"/><text x="47.6982%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="47.4482%" y="341" width="0.0797%" height="15" fill="rgb(211,42,33)" fg:x="595" fg:w="1"/><text x="47.6982%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="47.4482%" y="325" width="0.0797%" height="15" fill="rgb(211,90,39)" fg:x="595" fg:w="1"/><text x="47.6982%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="47.4482%" y="309" width="0.0797%" height="15" fill="rgb(218,136,12)" fg:x="595" fg:w="1"/><text x="47.6982%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="47.5279%" y="373" width="0.0797%" height="15" fill="rgb(234,12,32)" fg:x="596" fg:w="1"/><text x="47.7779%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="47.6077%" y="341" width="0.0797%" height="15" fill="rgb(221,164,18)" fg:x="597" fg:w="1"/><text x="47.8577%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="47.6077%" y="325" width="0.0797%" height="15" fill="rgb(239,135,14)" fg:x="597" fg:w="1"/><text x="47.8577%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="47.6077%" y="309" width="0.0797%" height="15" fill="rgb(226,198,47)" fg:x="597" fg:w="1"/><text x="47.8577%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.6077%" y="293" width="0.0797%" height="15" fill="rgb(244,121,47)" fg:x="597" fg:w="1"/><text x="47.8577%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::gid (5 samples, 0.40%)</title><rect x="47.5279%" y="405" width="0.3987%" height="15" fill="rgb(226,21,48)" fg:x="596" fg:w="5"/><text x="47.7779%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (5 samples, 0.40%)</title><rect x="47.5279%" y="389" width="0.3987%" height="15" fill="rgb(215,178,47)" fg:x="596" fg:w="5"/><text x="47.7779%" y="399.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="47.6077%" y="373" width="0.3190%" height="15" fill="rgb(206,212,19)" fg:x="597" fg:w="4"/><text x="47.8577%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="47.6077%" y="357" width="0.3190%" height="15" fill="rgb(230,104,34)" fg:x="597" fg:w="4"/><text x="47.8577%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="47.6874%" y="341" width="0.2392%" height="15" fill="rgb(210,96,51)" fg:x="598" fg:w="3"/><text x="47.9374%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="47.6874%" y="325" width="0.2392%" height="15" fill="rgb(229,111,47)" fg:x="598" fg:w="3"/><text x="47.9374%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.24%)</title><rect x="47.6874%" y="309" width="0.2392%" height="15" fill="rgb(218,174,45)" fg:x="598" fg:w="3"/><text x="47.9374%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="47.6874%" y="293" width="0.2392%" height="15" fill="rgb(215,21,32)" fg:x="598" fg:w="3"/><text x="47.9374%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="47.8469%" y="277" width="0.0797%" height="15" fill="rgb(235,72,21)" fg:x="600" fg:w="1"/><text x="48.0969%" y="287.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="47.9266%" y="341" width="0.0797%" height="15" fill="rgb(250,113,30)" fg:x="601" fg:w="1"/><text x="48.1766%" y="351.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="47.9266%" y="325" width="0.0797%" height="15" fill="rgb(244,136,34)" fg:x="601" fg:w="1"/><text x="48.1766%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="48.0861%" y="245" width="0.0797%" height="15" fill="rgb(213,226,47)" fg:x="603" fg:w="1"/><text x="48.3361%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="48.0064%" y="325" width="0.2392%" height="15" fill="rgb(224,136,40)" fg:x="602" fg:w="3"/><text x="48.2564%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="48.0064%" y="309" width="0.2392%" height="15" fill="rgb(253,124,12)" fg:x="602" fg:w="3"/><text x="48.2564%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="48.0861%" y="293" width="0.1595%" height="15" fill="rgb(210,67,8)" fg:x="603" fg:w="2"/><text x="48.3361%" y="303.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="48.0861%" y="277" width="0.1595%" height="15" fill="rgb(210,204,0)" fg:x="603" fg:w="2"/><text x="48.3361%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="48.0861%" y="261" width="0.1595%" height="15" fill="rgb(217,179,22)" fg:x="603" fg:w="2"/><text x="48.3361%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="48.1659%" y="245" width="0.0797%" height="15" fill="rgb(237,192,33)" fg:x="604" fg:w="1"/><text x="48.4159%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="48.1659%" y="229" width="0.0797%" height="15" fill="rgb(211,104,28)" fg:x="604" fg:w="1"/><text x="48.4159%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.2456%" y="325" width="0.0797%" height="15" fill="rgb(214,75,30)" fg:x="605" fg:w="1"/><text x="48.4956%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="48.3254%" y="309" width="0.1595%" height="15" fill="rgb(220,227,12)" fg:x="606" fg:w="2"/><text x="48.5754%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="48.4051%" y="293" width="0.0797%" height="15" fill="rgb(233,134,28)" fg:x="607" fg:w="1"/><text x="48.6551%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.4848%" y="277" width="0.0797%" height="15" fill="rgb(215,146,24)" fg:x="608" fg:w="1"/><text x="48.7348%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.4848%" y="261" width="0.0797%" height="15" fill="rgb(248,227,20)" fg:x="608" fg:w="1"/><text x="48.7348%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="48.5646%" y="277" width="0.0797%" height="15" fill="rgb(250,44,42)" fg:x="609" fg:w="1"/><text x="48.8146%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.5646%" y="261" width="0.0797%" height="15" fill="rgb(219,5,35)" fg:x="609" fg:w="1"/><text x="48.8146%" y="271.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="48.6443%" y="277" width="0.0797%" height="15" fill="rgb(241,132,32)" fg:x="610" fg:w="1"/><text x="48.8943%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.72%)</title><rect x="48.7241%" y="261" width="0.7177%" height="15" fill="rgb(234,212,51)" fg:x="611" fg:w="9"/><text x="48.9741%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.72%)</title><rect x="48.7241%" y="245" width="0.7177%" height="15" fill="rgb(242,173,29)" fg:x="611" fg:w="9"/><text x="48.9741%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="49.4418%" y="261" width="0.2392%" height="15" fill="rgb(212,159,2)" fg:x="620" fg:w="3"/><text x="49.6918%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="49.5215%" y="245" width="0.1595%" height="15" fill="rgb(238,165,31)" fg:x="621" fg:w="2"/><text x="49.7715%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="49.6810%" y="261" width="0.0797%" height="15" fill="rgb(241,57,36)" fg:x="623" fg:w="1"/><text x="49.9310%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="49.6810%" y="245" width="0.0797%" height="15" fill="rgb(249,7,4)" fg:x="623" fg:w="1"/><text x="49.9310%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="49.6810%" y="229" width="0.0797%" height="15" fill="rgb(250,137,44)" fg:x="623" fg:w="1"/><text x="49.9310%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="49.6810%" y="213" width="0.0797%" height="15" fill="rgb(244,185,1)" fg:x="623" fg:w="1"/><text x="49.9310%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.6810%" y="197" width="0.0797%" height="15" fill="rgb(216,5,53)" fg:x="623" fg:w="1"/><text x="49.9310%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.6810%" y="181" width="0.0797%" height="15" fill="rgb(234,89,21)" fg:x="623" fg:w="1"/><text x="49.9310%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="50.0000%" y="197" width="0.0797%" height="15" fill="rgb(250,81,43)" fg:x="627" fg:w="1"/><text x="50.2500%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.0000%" y="181" width="0.0797%" height="15" fill="rgb(243,132,11)" fg:x="627" fg:w="1"/><text x="50.2500%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.0000%" y="165" width="0.0797%" height="15" fill="rgb(253,159,28)" fg:x="627" fg:w="1"/><text x="50.2500%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.0000%" y="149" width="0.0797%" height="15" fill="rgb(237,167,34)" fg:x="627" fg:w="1"/><text x="50.2500%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="50.0797%" y="197" width="0.0797%" height="15" fill="rgb(237,16,50)" fg:x="628" fg:w="1"/><text x="50.3297%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.2392%" y="165" width="0.0797%" height="15" fill="rgb(247,125,2)" fg:x="630" fg:w="1"/><text x="50.4892%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.2392%" y="149" width="0.0797%" height="15" fill="rgb(254,35,3)" fg:x="630" fg:w="1"/><text x="50.4892%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.2392%" y="133" width="0.0797%" height="15" fill="rgb(237,209,21)" fg:x="630" fg:w="1"/><text x="50.4892%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="50.1595%" y="197" width="0.2392%" height="15" fill="rgb(224,122,20)" fg:x="629" fg:w="3"/><text x="50.4095%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="50.2392%" y="181" width="0.1595%" height="15" fill="rgb(224,11,46)" fg:x="630" fg:w="2"/><text x="50.4892%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="50.3190%" y="165" width="0.0797%" height="15" fill="rgb(248,21,33)" fg:x="631" fg:w="1"/><text x="50.5690%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.3190%" y="149" width="0.0797%" height="15" fill="rgb(222,144,7)" fg:x="631" fg:w="1"/><text x="50.5690%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="50.3987%" y="181" width="0.0797%" height="15" fill="rgb(205,141,37)" fg:x="632" fg:w="1"/><text x="50.6487%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.3987%" y="165" width="0.0797%" height="15" fill="rgb(237,130,8)" fg:x="632" fg:w="1"/><text x="50.6487%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.3987%" y="149" width="0.0797%" height="15" fill="rgb(209,179,39)" fg:x="632" fg:w="1"/><text x="50.6487%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.3987%" y="133" width="0.0797%" height="15" fill="rgb(207,52,17)" fg:x="632" fg:w="1"/><text x="50.6487%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.4785%" y="165" width="0.0797%" height="15" fill="rgb(253,158,17)" fg:x="633" fg:w="1"/><text x="50.7285%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (43 samples, 3.43%)</title><rect x="50.3987%" y="197" width="3.4290%" height="15" fill="rgb(208,19,53)" fg:x="632" fg:w="43"/><text x="50.6487%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (42 samples, 3.35%)</title><rect x="50.4785%" y="181" width="3.3493%" height="15" fill="rgb(233,152,13)" fg:x="633" fg:w="42"/><text x="50.7285%" y="191.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (41 samples, 3.27%)</title><rect x="50.5582%" y="165" width="3.2695%" height="15" fill="rgb(231,84,1)" fg:x="634" fg:w="41"/><text x="50.8082%" y="175.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="53.8278%" y="197" width="0.1595%" height="15" fill="rgb(229,142,48)" fg:x="675" fg:w="2"/><text x="54.0778%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.9075%" y="181" width="0.0797%" height="15" fill="rgb(248,70,29)" fg:x="676" fg:w="1"/><text x="54.1575%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 4.31%)</title><rect x="49.8405%" y="245" width="4.3062%" height="15" fill="rgb(250,85,7)" fg:x="625" fg:w="54"/><text x="50.0905%" y="255.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (54 samples, 4.31%)</title><rect x="49.8405%" y="229" width="4.3062%" height="15" fill="rgb(235,140,43)" fg:x="625" fg:w="54"/><text x="50.0905%" y="239.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (54 samples, 4.31%)</title><rect x="49.8405%" y="213" width="4.3062%" height="15" fill="rgb(216,0,5)" fg:x="625" fg:w="54"/><text x="50.0905%" y="223.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="53.9872%" y="197" width="0.1595%" height="15" fill="rgb(223,167,29)" fg:x="677" fg:w="2"/><text x="54.2372%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.2265%" y="229" width="0.0797%" height="15" fill="rgb(229,150,33)" fg:x="680" fg:w="1"/><text x="54.4765%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.3062%" y="229" width="0.0797%" height="15" fill="rgb(227,26,52)" fg:x="681" fg:w="1"/><text x="54.5562%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.3062%" y="213" width="0.0797%" height="15" fill="rgb(250,60,52)" fg:x="681" fg:w="1"/><text x="54.5562%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="54.3062%" y="197" width="0.0797%" height="15" fill="rgb(228,81,46)" fg:x="681" fg:w="1"/><text x="54.5562%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="54.3062%" y="181" width="0.0797%" height="15" fill="rgb(225,218,31)" fg:x="681" fg:w="1"/><text x="54.5562%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="54.3860%" y="229" width="0.3190%" height="15" fill="rgb(230,35,16)" fg:x="682" fg:w="4"/><text x="54.6360%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="54.4657%" y="213" width="0.2392%" height="15" fill="rgb(247,100,0)" fg:x="683" fg:w="3"/><text x="54.7157%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="54.4657%" y="197" width="0.2392%" height="15" fill="rgb(223,135,11)" fg:x="683" fg:w="3"/><text x="54.7157%" y="207.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="54.4657%" y="181" width="0.2392%" height="15" fill="rgb(207,136,0)" fg:x="683" fg:w="3"/><text x="54.7157%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (67 samples, 5.34%)</title><rect x="49.7608%" y="261" width="5.3429%" height="15" fill="rgb(246,131,25)" fg:x="624" fg:w="67"/><text x="50.0108%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.96%)</title><rect x="54.1467%" y="245" width="0.9569%" height="15" fill="rgb(209,47,12)" fg:x="679" fg:w="12"/><text x="54.3967%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="54.7049%" y="229" width="0.3987%" height="15" fill="rgb(221,25,16)" fg:x="686" fg:w="5"/><text x="54.9549%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.0239%" y="213" width="0.0797%" height="15" fill="rgb(223,164,33)" fg:x="690" fg:w="1"/><text x="55.2739%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.0239%" y="197" width="0.0797%" height="15" fill="rgb(220,26,23)" fg:x="690" fg:w="1"/><text x="55.2739%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.0239%" y="181" width="0.0797%" height="15" fill="rgb(231,224,1)" fg:x="690" fg:w="1"/><text x="55.2739%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="55.1037%" y="261" width="0.0797%" height="15" fill="rgb(229,221,24)" fg:x="691" fg:w="1"/><text x="55.3537%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="55.1037%" y="245" width="0.0797%" height="15" fill="rgb(213,34,10)" fg:x="691" fg:w="1"/><text x="55.3537%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="55.1037%" y="229" width="0.0797%" height="15" fill="rgb(215,33,11)" fg:x="691" fg:w="1"/><text x="55.3537%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.1037%" y="213" width="0.0797%" height="15" fill="rgb(216,20,41)" fg:x="691" fg:w="1"/><text x="55.3537%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.1037%" y="197" width="0.0797%" height="15" fill="rgb(228,43,31)" fg:x="691" fg:w="1"/><text x="55.3537%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (82 samples, 6.54%)</title><rect x="48.7241%" y="277" width="6.5391%" height="15" fill="rgb(227,83,26)" fg:x="611" fg:w="82"/><text x="48.9741%" y="287.50">regex_aut..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="55.1834%" y="261" width="0.0797%" height="15" fill="rgb(217,168,19)" fg:x="692" fg:w="1"/><text x="55.4334%" y="271.50"></text></g><g><title>regex_syntax::hir::literal::Seq::optimize_by_preference (1 samples, 0.08%)</title><rect x="55.1834%" y="245" width="0.0797%" height="15" fill="rgb(231,34,33)" fg:x="692" fg:w="1"/><text x="55.4334%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="55.3429%" y="245" width="0.0797%" height="15" fill="rgb(230,120,51)" fg:x="694" fg:w="1"/><text x="55.5929%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="55.3429%" y="229" width="0.0797%" height="15" fill="rgb(215,138,27)" fg:x="694" fg:w="1"/><text x="55.5929%" y="239.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="55.3429%" y="213" width="0.0797%" height="15" fill="rgb(246,80,47)" fg:x="694" fg:w="1"/><text x="55.5929%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (88 samples, 7.02%)</title><rect x="48.4848%" y="293" width="7.0175%" height="15" fill="rgb(215,57,53)" fg:x="608" fg:w="88"/><text x="48.7348%" y="303.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="55.2632%" y="277" width="0.2392%" height="15" fill="rgb(229,137,5)" fg:x="693" fg:w="3"/><text x="55.5132%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="55.2632%" y="261" width="0.2392%" height="15" fill="rgb(210,86,2)" fg:x="693" fg:w="3"/><text x="55.5132%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="55.4226%" y="245" width="0.0797%" height="15" fill="rgb(231,226,51)" fg:x="695" fg:w="1"/><text x="55.6726%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (91 samples, 7.26%)</title><rect x="48.3254%" y="325" width="7.2568%" height="15" fill="rgb(216,62,29)" fg:x="606" fg:w="91"/><text x="48.5754%" y="335.50">regex::reg..</text></g><g><title>regex::builders::Builder::build_one_string (89 samples, 7.10%)</title><rect x="48.4848%" y="309" width="7.0973%" height="15" fill="rgb(248,202,3)" fg:x="608" fg:w="89"/><text x="48.7348%" y="319.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="55.5024%" y="293" width="0.0797%" height="15" fill="rgb(225,181,7)" fg:x="696" fg:w="1"/><text x="55.7524%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="55.5821%" y="277" width="0.2392%" height="15" fill="rgb(247,170,54)" fg:x="697" fg:w="3"/><text x="55.8321%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="55.5821%" y="261" width="0.2392%" height="15" fill="rgb(236,204,33)" fg:x="697" fg:w="3"/><text x="55.8321%" y="271.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (99 samples, 7.89%)</title><rect x="48.0064%" y="341" width="7.8947%" height="15" fill="rgb(216,45,30)" fg:x="602" fg:w="99"/><text x="48.2564%" y="351.50">indefinite:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="55.5821%" y="325" width="0.3190%" height="15" fill="rgb(213,203,16)" fg:x="697" fg:w="4"/><text x="55.8321%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="55.5821%" y="309" width="0.3190%" height="15" fill="rgb(215,46,16)" fg:x="697" fg:w="4"/><text x="55.8321%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="55.5821%" y="293" width="0.3190%" height="15" fill="rgb(217,162,46)" fg:x="697" fg:w="4"/><text x="55.8321%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="55.8214%" y="277" width="0.0797%" height="15" fill="rgb(224,189,20)" fg:x="700" fg:w="1"/><text x="56.0714%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="55.8214%" y="261" width="0.0797%" height="15" fill="rgb(232,35,51)" fg:x="700" fg:w="1"/><text x="56.0714%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.8214%" y="245" width="0.0797%" height="15" fill="rgb(243,221,46)" fg:x="700" fg:w="1"/><text x="56.0714%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.8214%" y="229" width="0.0797%" height="15" fill="rgb(248,16,16)" fg:x="700" fg:w="1"/><text x="56.0714%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.8214%" y="213" width="0.0797%" height="15" fill="rgb(220,168,13)" fg:x="700" fg:w="1"/><text x="56.0714%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="55.9011%" y="325" width="0.0797%" height="15" fill="rgb(243,102,39)" fg:x="701" fg:w="1"/><text x="56.1511%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="55.9011%" y="309" width="0.0797%" height="15" fill="rgb(245,82,32)" fg:x="701" fg:w="1"/><text x="56.1511%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="55.9011%" y="293" width="0.0797%" height="15" fill="rgb(230,164,19)" fg:x="701" fg:w="1"/><text x="56.1511%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="55.9011%" y="277" width="0.0797%" height="15" fill="rgb(221,9,41)" fg:x="701" fg:w="1"/><text x="56.1511%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="55.9011%" y="261" width="0.0797%" height="15" fill="rgb(216,93,0)" fg:x="701" fg:w="1"/><text x="56.1511%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.9011%" y="245" width="0.0797%" height="15" fill="rgb(235,113,9)" fg:x="701" fg:w="1"/><text x="56.1511%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.9011%" y="229" width="0.0797%" height="15" fill="rgb(209,224,10)" fg:x="701" fg:w="1"/><text x="56.1511%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="55.9809%" y="309" width="0.2392%" height="15" fill="rgb(226,54,34)" fg:x="702" fg:w="3"/><text x="56.2309%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="55.9809%" y="293" width="0.2392%" height="15" fill="rgb(222,60,8)" fg:x="702" fg:w="3"/><text x="56.2309%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="56.0606%" y="277" width="0.1595%" height="15" fill="rgb(248,228,41)" fg:x="703" fg:w="2"/><text x="56.3106%" y="287.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.40%)</title><rect x="55.9809%" y="325" width="0.3987%" height="15" fill="rgb(226,31,32)" fg:x="702" fg:w="5"/><text x="56.2309%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="56.2201%" y="309" width="0.1595%" height="15" fill="rgb(242,132,49)" fg:x="705" fg:w="2"/><text x="56.4701%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="56.2201%" y="293" width="0.1595%" height="15" fill="rgb(224,194,19)" fg:x="705" fg:w="2"/><text x="56.4701%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="56.2201%" y="277" width="0.1595%" height="15" fill="rgb(232,200,51)" fg:x="705" fg:w="2"/><text x="56.4701%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="56.2201%" y="261" width="0.1595%" height="15" fill="rgb(235,60,46)" fg:x="705" fg:w="2"/><text x="56.4701%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="56.2201%" y="245" width="0.1595%" height="15" fill="rgb(240,109,52)" fg:x="705" fg:w="2"/><text x="56.4701%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.3796%" y="309" width="0.0797%" height="15" fill="rgb(215,78,37)" fg:x="707" fg:w="1"/><text x="56.6296%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="56.3796%" y="293" width="0.0797%" height="15" fill="rgb(225,141,7)" fg:x="707" fg:w="1"/><text x="56.6296%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.4593%" y="277" width="0.0797%" height="15" fill="rgb(216,102,54)" fg:x="708" fg:w="1"/><text x="56.7093%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.4593%" y="261" width="0.0797%" height="15" fill="rgb(238,143,13)" fg:x="708" fg:w="1"/><text x="56.7093%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.4593%" y="245" width="0.0797%" height="15" fill="rgb(219,45,51)" fg:x="708" fg:w="1"/><text x="56.7093%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.5391%" y="245" width="0.0797%" height="15" fill="rgb(242,105,46)" fg:x="709" fg:w="1"/><text x="56.7891%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="56.6188%" y="245" width="0.0797%" height="15" fill="rgb(206,154,49)" fg:x="710" fg:w="1"/><text x="56.8688%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="56.5391%" y="277" width="0.2392%" height="15" fill="rgb(239,215,4)" fg:x="709" fg:w="3"/><text x="56.7891%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="56.5391%" y="261" width="0.2392%" height="15" fill="rgb(238,82,17)" fg:x="709" fg:w="3"/><text x="56.7891%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="56.6986%" y="245" width="0.0797%" height="15" fill="rgb(242,49,30)" fg:x="711" fg:w="1"/><text x="56.9486%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.6986%" y="229" width="0.0797%" height="15" fill="rgb(248,5,16)" fg:x="711" fg:w="1"/><text x="56.9486%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.7783%" y="245" width="0.0797%" height="15" fill="rgb(237,138,32)" fg:x="712" fg:w="1"/><text x="57.0283%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.64%)</title><rect x="56.7783%" y="261" width="0.6380%" height="15" fill="rgb(235,79,45)" fg:x="712" fg:w="8"/><text x="57.0283%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="56.8581%" y="245" width="0.5582%" height="15" fill="rgb(213,105,25)" fg:x="713" fg:w="7"/><text x="57.1081%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="57.4163%" y="245" width="0.3190%" height="15" fill="rgb(251,131,7)" fg:x="720" fg:w="4"/><text x="57.6663%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="57.4163%" y="261" width="0.3987%" height="15" fill="rgb(211,155,7)" fg:x="720" fg:w="5"/><text x="57.6663%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="57.7352%" y="245" width="0.0797%" height="15" fill="rgb(243,70,15)" fg:x="724" fg:w="1"/><text x="57.9852%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="57.7352%" y="229" width="0.0797%" height="15" fill="rgb(215,171,2)" fg:x="724" fg:w="1"/><text x="57.9852%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.7352%" y="213" width="0.0797%" height="15" fill="rgb(244,121,35)" fg:x="724" fg:w="1"/><text x="57.9852%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="58.1340%" y="229" width="0.0797%" height="15" fill="rgb(249,147,17)" fg:x="729" fg:w="1"/><text x="58.3840%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="58.2137%" y="229" width="0.0797%" height="15" fill="rgb(241,193,52)" fg:x="730" fg:w="1"/><text x="58.4637%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="58.2137%" y="213" width="0.0797%" height="15" fill="rgb(217,159,39)" fg:x="730" fg:w="1"/><text x="58.4637%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (11 samples, 0.88%)</title><rect x="57.8150%" y="245" width="0.8772%" height="15" fill="rgb(248,110,0)" fg:x="725" fg:w="11"/><text x="58.0650%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.40%)</title><rect x="58.2935%" y="229" width="0.3987%" height="15" fill="rgb(233,227,0)" fg:x="731" fg:w="5"/><text x="58.5435%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.40%)</title><rect x="58.2935%" y="213" width="0.3987%" height="15" fill="rgb(252,55,2)" fg:x="731" fg:w="5"/><text x="58.5435%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="58.2935%" y="197" width="0.3987%" height="15" fill="rgb(224,194,24)" fg:x="731" fg:w="5"/><text x="58.5435%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (12 samples, 0.96%)</title><rect x="57.8150%" y="261" width="0.9569%" height="15" fill="rgb(247,5,33)" fg:x="725" fg:w="12"/><text x="58.0650%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="58.6922%" y="245" width="0.0797%" height="15" fill="rgb(242,66,47)" fg:x="736" fg:w="1"/><text x="58.9422%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="58.6922%" y="229" width="0.0797%" height="15" fill="rgb(213,107,12)" fg:x="736" fg:w="1"/><text x="58.9422%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="58.6922%" y="213" width="0.0797%" height="15" fill="rgb(206,131,1)" fg:x="736" fg:w="1"/><text x="58.9422%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.6922%" y="197" width="0.0797%" height="15" fill="rgb(214,9,36)" fg:x="736" fg:w="1"/><text x="58.9422%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.6922%" y="181" width="0.0797%" height="15" fill="rgb(251,215,18)" fg:x="736" fg:w="1"/><text x="58.9422%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.6922%" y="165" width="0.0797%" height="15" fill="rgb(251,64,9)" fg:x="736" fg:w="1"/><text x="58.9422%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="58.8517%" y="213" width="0.0797%" height="15" fill="rgb(235,68,21)" fg:x="738" fg:w="1"/><text x="59.1017%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.8517%" y="197" width="0.0797%" height="15" fill="rgb(240,69,38)" fg:x="738" fg:w="1"/><text x="59.1017%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.8517%" y="181" width="0.0797%" height="15" fill="rgb(231,18,27)" fg:x="738" fg:w="1"/><text x="59.1017%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.8517%" y="165" width="0.0797%" height="15" fill="rgb(215,154,25)" fg:x="738" fg:w="1"/><text x="59.1017%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="59.1707%" y="165" width="0.0797%" height="15" fill="rgb(224,33,46)" fg:x="742" fg:w="1"/><text x="59.4207%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="59.8086%" y="149" width="0.1595%" height="15" fill="rgb(248,191,53)" fg:x="750" fg:w="2"/><text x="60.0586%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="59.9681%" y="149" width="0.0797%" height="15" fill="rgb(231,3,37)" fg:x="752" fg:w="1"/><text x="60.2181%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.9681%" y="133" width="0.0797%" height="15" fill="rgb(209,152,2)" fg:x="752" fg:w="1"/><text x="60.2181%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.9681%" y="117" width="0.0797%" height="15" fill="rgb(212,208,43)" fg:x="752" fg:w="1"/><text x="60.2181%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.9681%" y="101" width="0.0797%" height="15" fill="rgb(208,60,49)" fg:x="752" fg:w="1"/><text x="60.2181%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="60.0478%" y="149" width="0.0797%" height="15" fill="rgb(245,135,6)" fg:x="753" fg:w="1"/><text x="60.2978%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.0478%" y="133" width="0.0797%" height="15" fill="rgb(243,86,23)" fg:x="753" fg:w="1"/><text x="60.2978%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.0478%" y="117" width="0.0797%" height="15" fill="rgb(223,7,20)" fg:x="753" fg:w="1"/><text x="60.2978%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.0478%" y="101" width="0.0797%" height="15" fill="rgb(212,182,17)" fg:x="753" fg:w="1"/><text x="60.2978%" y="111.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="60.3668%" y="85" width="0.2392%" height="15" fill="rgb(237,94,50)" fg:x="757" fg:w="3"/><text x="60.6168%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="60.2871%" y="117" width="0.3987%" height="15" fill="rgb(232,185,44)" fg:x="756" fg:w="5"/><text x="60.5371%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="60.2871%" y="101" width="0.3987%" height="15" fill="rgb(205,50,36)" fg:x="756" fg:w="5"/><text x="60.5371%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.6061%" y="85" width="0.0797%" height="15" fill="rgb(252,32,32)" fg:x="760" fg:w="1"/><text x="60.8561%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9 samples, 0.72%)</title><rect x="60.1276%" y="149" width="0.7177%" height="15" fill="rgb(241,123,33)" fg:x="754" fg:w="9"/><text x="60.3776%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.64%)</title><rect x="60.2073%" y="133" width="0.6380%" height="15" fill="rgb(212,140,16)" fg:x="755" fg:w="8"/><text x="60.4573%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="60.6858%" y="117" width="0.1595%" height="15" fill="rgb(247,132,5)" fg:x="761" fg:w="2"/><text x="60.9358%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.7656%" y="101" width="0.0797%" height="15" fill="rgb(209,137,38)" fg:x="762" fg:w="1"/><text x="61.0156%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (46 samples, 3.67%)</title><rect x="60.8453%" y="149" width="3.6683%" height="15" fill="rgb(248,32,42)" fg:x="763" fg:w="46"/><text x="61.0953%" y="159.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (46 samples, 3.67%)</title><rect x="60.8453%" y="133" width="3.6683%" height="15" fill="rgb(216,188,40)" fg:x="763" fg:w="46"/><text x="61.0953%" y="143.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (46 samples, 3.67%)</title><rect x="60.8453%" y="117" width="3.6683%" height="15" fill="rgb(209,127,53)" fg:x="763" fg:w="46"/><text x="61.0953%" y="127.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="64.5136%" y="149" width="0.1595%" height="15" fill="rgb(254,162,9)" fg:x="809" fg:w="2"/><text x="64.7636%" y="159.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="64.6730%" y="149" width="0.0797%" height="15" fill="rgb(219,183,10)" fg:x="811" fg:w="1"/><text x="64.9230%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 6.14%)</title><rect x="58.7719%" y="245" width="6.1404%" height="15" fill="rgb(217,192,21)" fg:x="737" fg:w="77"/><text x="59.0219%" y="255.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (77 samples, 6.14%)</title><rect x="58.7719%" y="229" width="6.1404%" height="15" fill="rgb(251,89,27)" fg:x="737" fg:w="77"/><text x="59.0219%" y="239.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (75 samples, 5.98%)</title><rect x="58.9314%" y="213" width="5.9809%" height="15" fill="rgb(253,55,28)" fg:x="739" fg:w="75"/><text x="59.1814%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (72 samples, 5.74%)</title><rect x="59.1707%" y="197" width="5.7416%" height="15" fill="rgb(216,159,8)" fg:x="742" fg:w="72"/><text x="59.4207%" y="207.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (72 samples, 5.74%)</title><rect x="59.1707%" y="181" width="5.7416%" height="15" fill="rgb(231,228,44)" fg:x="742" fg:w="72"/><text x="59.4207%" y="191.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.66%)</title><rect x="59.2504%" y="165" width="5.6619%" height="15" fill="rgb(247,34,48)" fg:x="743" fg:w="71"/><text x="59.5004%" y="175.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="64.7528%" y="149" width="0.1595%" height="15" fill="rgb(247,222,18)" fg:x="812" fg:w="2"/><text x="65.0028%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.8325%" y="133" width="0.0797%" height="15" fill="rgb(227,49,4)" fg:x="813" fg:w="1"/><text x="65.0825%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="65.0718%" y="229" width="0.4785%" height="15" fill="rgb(219,189,53)" fg:x="816" fg:w="6"/><text x="65.3218%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="65.3110%" y="213" width="0.2392%" height="15" fill="rgb(241,160,53)" fg:x="819" fg:w="3"/><text x="65.5610%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="65.3110%" y="197" width="0.2392%" height="15" fill="rgb(227,115,4)" fg:x="819" fg:w="3"/><text x="65.5610%" y="207.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="65.3110%" y="181" width="0.2392%" height="15" fill="rgb(215,28,28)" fg:x="819" fg:w="3"/><text x="65.5610%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="65.5502%" y="229" width="0.0797%" height="15" fill="rgb(237,143,40)" fg:x="822" fg:w="1"/><text x="65.8002%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.5502%" y="213" width="0.0797%" height="15" fill="rgb(205,107,24)" fg:x="822" fg:w="1"/><text x="65.8002%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.5502%" y="197" width="0.0797%" height="15" fill="rgb(209,112,35)" fg:x="822" fg:w="1"/><text x="65.8002%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.5502%" y="181" width="0.0797%" height="15" fill="rgb(206,135,5)" fg:x="822" fg:w="1"/><text x="65.8002%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (112 samples, 8.93%)</title><rect x="56.7783%" y="277" width="8.9314%" height="15" fill="rgb(227,217,38)" fg:x="712" fg:w="112"/><text x="57.0283%" y="287.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (87 samples, 6.94%)</title><rect x="58.7719%" y="261" width="6.9378%" height="15" fill="rgb(205,0,41)" fg:x="737" fg:w="87"/><text x="59.0219%" y="271.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.80%)</title><rect x="64.9123%" y="245" width="0.7974%" height="15" fill="rgb(220,20,40)" fg:x="814" fg:w="10"/><text x="65.1623%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="65.6300%" y="229" width="0.0797%" height="15" fill="rgb(216,145,3)" fg:x="823" fg:w="1"/><text x="65.8800%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.7097%" y="213" width="0.0797%" height="15" fill="rgb(207,130,51)" fg:x="824" fg:w="1"/><text x="65.9597%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="65.7097%" y="229" width="0.1595%" height="15" fill="rgb(252,93,13)" fg:x="824" fg:w="2"/><text x="65.9597%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="65.7895%" y="213" width="0.0797%" height="15" fill="rgb(210,105,15)" fg:x="825" fg:w="1"/><text x="66.0395%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="65.7895%" y="197" width="0.0797%" height="15" fill="rgb(212,126,31)" fg:x="825" fg:w="1"/><text x="66.0395%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="65.7097%" y="245" width="0.3190%" height="15" fill="rgb(241,167,46)" fg:x="824" fg:w="4"/><text x="65.9597%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="65.8692%" y="229" width="0.1595%" height="15" fill="rgb(217,143,19)" fg:x="826" fg:w="2"/><text x="66.1192%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="65.8692%" y="213" width="0.1595%" height="15" fill="rgb(235,117,33)" fg:x="826" fg:w="2"/><text x="66.1192%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.8692%" y="197" width="0.1595%" height="15" fill="rgb(247,95,6)" fg:x="826" fg:w="2"/><text x="66.1192%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="65.8692%" y="181" width="0.1595%" height="15" fill="rgb(243,206,43)" fg:x="826" fg:w="2"/><text x="66.1192%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="66.0287%" y="245" width="0.0797%" height="15" fill="rgb(229,65,54)" fg:x="828" fg:w="1"/><text x="66.2787%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="65.7097%" y="277" width="0.4785%" height="15" fill="rgb(247,137,34)" fg:x="824" fg:w="6"/><text x="65.9597%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="65.7097%" y="261" width="0.4785%" height="15" fill="rgb(245,174,44)" fg:x="824" fg:w="6"/><text x="65.9597%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="66.1085%" y="245" width="0.0797%" height="15" fill="rgb(223,64,15)" fg:x="829" fg:w="1"/><text x="66.3585%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="66.1085%" y="229" width="0.0797%" height="15" fill="rgb(243,153,36)" fg:x="829" fg:w="1"/><text x="66.3585%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="66.1882%" y="245" width="0.0797%" height="15" fill="rgb(252,23,4)" fg:x="830" fg:w="1"/><text x="66.4382%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="66.1882%" y="229" width="0.0797%" height="15" fill="rgb(209,132,13)" fg:x="830" fg:w="1"/><text x="66.4382%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.1882%" y="213" width="0.0797%" height="15" fill="rgb(209,196,21)" fg:x="830" fg:w="1"/><text x="66.4382%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.1882%" y="197" width="0.0797%" height="15" fill="rgb(252,197,1)" fg:x="830" fg:w="1"/><text x="66.4382%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.1882%" y="181" width="0.0797%" height="15" fill="rgb(229,42,46)" fg:x="830" fg:w="1"/><text x="66.4382%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (131 samples, 10.45%)</title><rect x="55.9011%" y="341" width="10.4466%" height="15" fill="rgb(219,85,8)" fg:x="701" fg:w="131"/><text x="56.1511%" y="351.50">indefinite::rul..</text></g><g><title>regex::regex::string::Regex::new (125 samples, 9.97%)</title><rect x="56.3796%" y="325" width="9.9681%" height="15" fill="rgb(223,185,14)" fg:x="707" fg:w="125"/><text x="56.6296%" y="335.50">regex::regex::..</text></g><g><title>regex::builders::Builder::build_one_string (124 samples, 9.89%)</title><rect x="56.4593%" y="309" width="9.8884%" height="15" fill="rgb(217,196,18)" fg:x="708" fg:w="124"/><text x="56.7093%" y="319.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (124 samples, 9.89%)</title><rect x="56.4593%" y="293" width="9.8884%" height="15" fill="rgb(220,122,37)" fg:x="708" fg:w="124"/><text x="56.7093%" y="303.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="66.1882%" y="277" width="0.1595%" height="15" fill="rgb(236,135,33)" fg:x="830" fg:w="2"/><text x="66.4382%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="66.1882%" y="261" width="0.1595%" height="15" fill="rgb(222,86,54)" fg:x="830" fg:w="2"/><text x="66.4382%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="66.2679%" y="245" width="0.0797%" height="15" fill="rgb(227,42,22)" fg:x="831" fg:w="1"/><text x="66.5179%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="66.2679%" y="229" width="0.0797%" height="15" fill="rgb(243,101,27)" fg:x="831" fg:w="1"/><text x="66.5179%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.2679%" y="213" width="0.0797%" height="15" fill="rgb(229,100,8)" fg:x="831" fg:w="1"/><text x="66.5179%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="66.4274%" y="309" width="0.0797%" height="15" fill="rgb(252,68,10)" fg:x="833" fg:w="1"/><text x="66.6774%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="66.4274%" y="293" width="0.0797%" height="15" fill="rgb(219,19,31)" fg:x="833" fg:w="1"/><text x="66.6774%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="66.4274%" y="277" width="0.0797%" height="15" fill="rgb(246,150,44)" fg:x="833" fg:w="1"/><text x="66.6774%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="66.4274%" y="261" width="0.0797%" height="15" fill="rgb(211,14,39)" fg:x="833" fg:w="1"/><text x="66.6774%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="66.5072%" y="309" width="0.1595%" height="15" fill="rgb(221,98,29)" fg:x="834" fg:w="2"/><text x="66.7572%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="66.5072%" y="293" width="0.1595%" height="15" fill="rgb(221,70,26)" fg:x="834" fg:w="2"/><text x="66.7572%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="66.5072%" y="277" width="0.1595%" height="15" fill="rgb(236,146,30)" fg:x="834" fg:w="2"/><text x="66.7572%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="66.5869%" y="261" width="0.0797%" height="15" fill="rgb(226,94,34)" fg:x="835" fg:w="1"/><text x="66.8369%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.5869%" y="245" width="0.0797%" height="15" fill="rgb(248,132,21)" fg:x="835" fg:w="1"/><text x="66.8369%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="66.6667%" y="261" width="0.0797%" height="15" fill="rgb(245,43,50)" fg:x="836" fg:w="1"/><text x="66.9167%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.6667%" y="245" width="0.0797%" height="15" fill="rgb(245,132,31)" fg:x="836" fg:w="1"/><text x="66.9167%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="66.6667%" y="229" width="0.0797%" height="15" fill="rgb(230,171,4)" fg:x="836" fg:w="1"/><text x="66.9167%" y="239.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="66.7464%" y="261" width="0.0797%" height="15" fill="rgb(235,6,45)" fg:x="837" fg:w="1"/><text x="66.9964%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.7464%" y="245" width="0.0797%" height="15" fill="rgb(220,80,28)" fg:x="837" fg:w="1"/><text x="66.9964%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="66.9059%" y="229" width="0.2392%" height="15" fill="rgb(242,171,9)" fg:x="839" fg:w="3"/><text x="67.1559%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="66.8262%" y="245" width="0.4785%" height="15" fill="rgb(214,135,29)" fg:x="838" fg:w="6"/><text x="67.0762%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="67.1451%" y="229" width="0.1595%" height="15" fill="rgb(221,229,16)" fg:x="842" fg:w="2"/><text x="67.3951%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="67.1451%" y="213" width="0.1595%" height="15" fill="rgb(253,59,46)" fg:x="842" fg:w="2"/><text x="67.3951%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (2 samples, 0.16%)</title><rect x="67.1451%" y="197" width="0.1595%" height="15" fill="rgb(250,147,20)" fg:x="842" fg:w="2"/><text x="67.3951%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="67.1451%" y="181" width="0.1595%" height="15" fill="rgb(236,64,48)" fg:x="842" fg:w="2"/><text x="67.3951%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="67.3046%" y="229" width="0.0797%" height="15" fill="rgb(240,37,42)" fg:x="844" fg:w="1"/><text x="67.5546%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="67.3046%" y="213" width="0.0797%" height="15" fill="rgb(220,41,50)" fg:x="844" fg:w="1"/><text x="67.5546%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="67.3046%" y="197" width="0.0797%" height="15" fill="rgb(216,51,14)" fg:x="844" fg:w="1"/><text x="67.5546%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="67.3046%" y="181" width="0.0797%" height="15" fill="rgb(215,83,10)" fg:x="844" fg:w="1"/><text x="67.5546%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="67.3046%" y="165" width="0.0797%" height="15" fill="rgb(206,144,17)" fg:x="844" fg:w="1"/><text x="67.5546%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="67.3046%" y="245" width="0.3190%" height="15" fill="rgb(219,196,37)" fg:x="844" fg:w="4"/><text x="67.5546%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="67.3844%" y="229" width="0.2392%" height="15" fill="rgb(226,135,26)" fg:x="845" fg:w="3"/><text x="67.6344%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="67.4641%" y="213" width="0.1595%" height="15" fill="rgb(237,195,40)" fg:x="846" fg:w="2"/><text x="67.7141%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.88%)</title><rect x="66.8262%" y="261" width="0.8772%" height="15" fill="rgb(228,182,42)" fg:x="838" fg:w="11"/><text x="67.0762%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="67.6236%" y="245" width="0.0797%" height="15" fill="rgb(224,135,50)" fg:x="848" fg:w="1"/><text x="67.8736%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="67.6236%" y="229" width="0.0797%" height="15" fill="rgb(236,215,34)" fg:x="848" fg:w="1"/><text x="67.8736%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="67.7831%" y="213" width="0.0797%" height="15" fill="rgb(244,213,27)" fg:x="850" fg:w="1"/><text x="68.0331%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.7831%" y="197" width="0.0797%" height="15" fill="rgb(233,37,53)" fg:x="850" fg:w="1"/><text x="68.0331%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.7831%" y="181" width="0.0797%" height="15" fill="rgb(222,132,14)" fg:x="850" fg:w="1"/><text x="68.0331%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.7831%" y="165" width="0.0797%" height="15" fill="rgb(219,202,29)" fg:x="850" fg:w="1"/><text x="68.0331%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="67.8628%" y="213" width="0.0797%" height="15" fill="rgb(226,157,39)" fg:x="851" fg:w="1"/><text x="68.1128%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="67.8628%" y="197" width="0.0797%" height="15" fill="rgb(235,213,2)" fg:x="851" fg:w="1"/><text x="68.1128%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="67.7033%" y="229" width="0.3987%" height="15" fill="rgb(250,121,2)" fg:x="849" fg:w="5"/><text x="67.9533%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="67.9426%" y="213" width="0.1595%" height="15" fill="rgb(206,192,33)" fg:x="852" fg:w="2"/><text x="68.1926%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="68.0223%" y="197" width="0.0797%" height="15" fill="rgb(240,161,6)" fg:x="853" fg:w="1"/><text x="68.2723%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="67.7033%" y="261" width="0.4785%" height="15" fill="rgb(246,53,30)" fg:x="849" fg:w="6"/><text x="67.9533%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="67.7033%" y="245" width="0.4785%" height="15" fill="rgb(219,123,43)" fg:x="849" fg:w="6"/><text x="67.9533%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="68.1021%" y="229" width="0.0797%" height="15" fill="rgb(236,53,49)" fg:x="854" fg:w="1"/><text x="68.3521%" y="239.50"></text></g><g><title>regex::regex::string::Regex::new (20 samples, 1.59%)</title><rect x="66.6667%" y="309" width="1.5949%" height="15" fill="rgb(241,156,1)" fg:x="836" fg:w="20"/><text x="66.9167%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (20 samples, 1.59%)</title><rect x="66.6667%" y="293" width="1.5949%" height="15" fill="rgb(209,73,26)" fg:x="836" fg:w="20"/><text x="66.9167%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (20 samples, 1.59%)</title><rect x="66.6667%" y="277" width="1.5949%" height="15" fill="rgb(206,114,3)" fg:x="836" fg:w="20"/><text x="66.9167%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="68.1818%" y="261" width="0.0797%" height="15" fill="rgb(230,214,9)" fg:x="855" fg:w="1"/><text x="68.4318%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="68.1818%" y="245" width="0.0797%" height="15" fill="rgb(240,184,46)" fg:x="855" fg:w="1"/><text x="68.4318%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="68.1818%" y="229" width="0.0797%" height="15" fill="rgb(242,169,54)" fg:x="855" fg:w="1"/><text x="68.4318%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="68.1818%" y="213" width="0.0797%" height="15" fill="rgb(207,168,50)" fg:x="855" fg:w="1"/><text x="68.4318%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="68.1818%" y="197" width="0.0797%" height="15" fill="rgb(240,114,2)" fg:x="855" fg:w="1"/><text x="68.4318%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="68.1818%" y="181" width="0.0797%" height="15" fill="rgb(211,17,40)" fg:x="855" fg:w="1"/><text x="68.4318%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.2616%" y="229" width="0.0797%" height="15" fill="rgb(235,97,36)" fg:x="856" fg:w="1"/><text x="68.5116%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (269 samples, 21.45%)</title><rect x="46.9697%" y="421" width="21.4514%" height="15" fill="rgb(208,164,11)" fg:x="589" fg:w="269"/><text x="47.2197%" y="431.50">&lt;&amp;kernel::model::EntityPtr as plug..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (257 samples, 20.49%)</title><rect x="47.9266%" y="405" width="20.4944%" height="15" fill="rgb(242,11,17)" fg:x="601" fg:w="257"/><text x="48.1766%" y="415.50">plugins_core::looking::model::Un..</text></g><g><title>indefinite::indefinite (257 samples, 20.49%)</title><rect x="47.9266%" y="389" width="20.4944%" height="15" fill="rgb(215,86,33)" fg:x="601" fg:w="257"/><text x="48.1766%" y="399.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (257 samples, 20.49%)</title><rect x="47.9266%" y="373" width="20.4944%" height="15" fill="rgb(245,185,28)" fg:x="601" fg:w="257"/><text x="48.1766%" y="383.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (257 samples, 20.49%)</title><rect x="47.9266%" y="357" width="20.4944%" height="15" fill="rgb(231,89,42)" fg:x="601" fg:w="257"/><text x="48.1766%" y="367.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (26 samples, 2.07%)</title><rect x="66.3477%" y="341" width="2.0734%" height="15" fill="rgb(210,18,47)" fg:x="832" fg:w="26"/><text x="66.5977%" y="351.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (25 samples, 1.99%)</title><rect x="66.4274%" y="325" width="1.9936%" height="15" fill="rgb(214,84,8)" fg:x="833" fg:w="25"/><text x="66.6774%" y="335.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="68.2616%" y="309" width="0.1595%" height="15" fill="rgb(214,222,23)" fg:x="856" fg:w="2"/><text x="68.5116%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="68.2616%" y="293" width="0.1595%" height="15" fill="rgb(213,104,21)" fg:x="856" fg:w="2"/><text x="68.5116%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="68.2616%" y="277" width="0.1595%" height="15" fill="rgb(238,138,6)" fg:x="856" fg:w="2"/><text x="68.5116%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="68.2616%" y="261" width="0.1595%" height="15" fill="rgb(205,167,50)" fg:x="856" fg:w="2"/><text x="68.5116%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="68.2616%" y="245" width="0.1595%" height="15" fill="rgb(230,105,27)" fg:x="856" fg:w="2"/><text x="68.5116%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="68.3413%" y="229" width="0.0797%" height="15" fill="rgb(222,97,48)" fg:x="857" fg:w="1"/><text x="68.5913%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.4211%" y="373" width="0.0797%" height="15" fill="rgb(222,197,14)" fg:x="858" fg:w="1"/><text x="68.6711%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.5008%" y="325" width="0.0797%" height="15" fill="rgb(210,105,47)" fg:x="859" fg:w="1"/><text x="68.7508%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.5008%" y="309" width="0.0797%" height="15" fill="rgb(238,158,19)" fg:x="859" fg:w="1"/><text x="68.7508%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.5008%" y="293" width="0.0797%" height="15" fill="rgb(226,176,23)" fg:x="859" fg:w="1"/><text x="68.7508%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.5008%" y="277" width="0.0797%" height="15" fill="rgb(208,79,31)" fg:x="859" fg:w="1"/><text x="68.7508%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.5008%" y="261" width="0.0797%" height="15" fill="rgb(221,154,21)" fg:x="859" fg:w="1"/><text x="68.7508%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="68.5008%" y="245" width="0.0797%" height="15" fill="rgb(213,61,41)" fg:x="859" fg:w="1"/><text x="68.7508%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="68.5008%" y="229" width="0.0797%" height="15" fill="rgb(215,28,33)" fg:x="859" fg:w="1"/><text x="68.7508%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.5008%" y="341" width="0.1595%" height="15" fill="rgb(231,139,26)" fg:x="859" fg:w="2"/><text x="68.7508%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.5805%" y="325" width="0.0797%" height="15" fill="rgb(232,159,16)" fg:x="860" fg:w="1"/><text x="68.8305%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.5805%" y="309" width="0.0797%" height="15" fill="rgb(233,80,10)" fg:x="860" fg:w="1"/><text x="68.8305%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.5805%" y="293" width="0.0797%" height="15" fill="rgb(208,147,29)" fg:x="860" fg:w="1"/><text x="68.8305%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.5805%" y="277" width="0.0797%" height="15" fill="rgb(213,10,12)" fg:x="860" fg:w="1"/><text x="68.8305%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.5805%" y="261" width="0.0797%" height="15" fill="rgb(231,218,13)" fg:x="860" fg:w="1"/><text x="68.8305%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.5805%" y="245" width="0.0797%" height="15" fill="rgb(244,199,44)" fg:x="860" fg:w="1"/><text x="68.8305%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.5805%" y="229" width="0.0797%" height="15" fill="rgb(240,144,53)" fg:x="860" fg:w="1"/><text x="68.8305%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="68.5805%" y="213" width="0.0797%" height="15" fill="rgb(223,57,28)" fg:x="860" fg:w="1"/><text x="68.8305%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="68.5805%" y="197" width="0.0797%" height="15" fill="rgb(213,134,38)" fg:x="860" fg:w="1"/><text x="68.8305%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="68.6603%" y="341" width="0.0797%" height="15" fill="rgb(251,182,42)" fg:x="861" fg:w="1"/><text x="68.9103%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="68.5008%" y="357" width="0.3987%" height="15" fill="rgb(229,93,13)" fg:x="859" fg:w="5"/><text x="68.7508%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.7400%" y="341" width="0.1595%" height="15" fill="rgb(234,171,3)" fg:x="862" fg:w="2"/><text x="68.9900%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8198%" y="325" width="0.0797%" height="15" fill="rgb(241,105,32)" fg:x="863" fg:w="1"/><text x="69.0698%" y="335.50"></text></g><g><title>plugins_core::tools::contained_by (6 samples, 0.48%)</title><rect x="68.5008%" y="373" width="0.4785%" height="15" fill="rgb(221,66,3)" fg:x="859" fg:w="6"/><text x="68.7508%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.8995%" y="357" width="0.0797%" height="15" fill="rgb(248,155,29)" fg:x="864" fg:w="1"/><text x="69.1495%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.8995%" y="341" width="0.0797%" height="15" fill="rgb(231,31,5)" fg:x="864" fg:w="1"/><text x="69.1495%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8995%" y="325" width="0.0797%" height="15" fill="rgb(213,188,31)" fg:x="864" fg:w="1"/><text x="69.1495%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.9793%" y="341" width="0.0797%" height="15" fill="rgb(212,104,33)" fg:x="865" fg:w="1"/><text x="69.2293%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9793%" y="325" width="0.0797%" height="15" fill="rgb(254,77,51)" fg:x="865" fg:w="1"/><text x="69.2293%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.9793%" y="309" width="0.0797%" height="15" fill="rgb(234,39,26)" fg:x="865" fg:w="1"/><text x="69.2293%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.9793%" y="293" width="0.0797%" height="15" fill="rgb(208,88,36)" fg:x="865" fg:w="1"/><text x="69.2293%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9793%" y="277" width="0.0797%" height="15" fill="rgb(243,222,10)" fg:x="865" fg:w="1"/><text x="69.2293%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9793%" y="261" width="0.0797%" height="15" fill="rgb(218,133,52)" fg:x="865" fg:w="1"/><text x="69.2293%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.9793%" y="245" width="0.0797%" height="15" fill="rgb(222,25,26)" fg:x="865" fg:w="1"/><text x="69.2293%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.9793%" y="229" width="0.0797%" height="15" fill="rgb(243,174,24)" fg:x="865" fg:w="1"/><text x="69.2293%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.9793%" y="213" width="0.0797%" height="15" fill="rgb(233,188,52)" fg:x="865" fg:w="1"/><text x="69.2293%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.9793%" y="197" width="0.0797%" height="15" fill="rgb(208,89,14)" fg:x="865" fg:w="1"/><text x="69.2293%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.9793%" y="181" width="0.0797%" height="15" fill="rgb(205,204,21)" fg:x="865" fg:w="1"/><text x="69.2293%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.9793%" y="165" width="0.0797%" height="15" fill="rgb(246,39,28)" fg:x="865" fg:w="1"/><text x="69.2293%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.9793%" y="149" width="0.0797%" height="15" fill="rgb(235,71,19)" fg:x="865" fg:w="1"/><text x="69.2293%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.9793%" y="133" width="0.0797%" height="15" fill="rgb(211,62,39)" fg:x="865" fg:w="1"/><text x="69.2293%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.9793%" y="117" width="0.0797%" height="15" fill="rgb(246,118,20)" fg:x="865" fg:w="1"/><text x="69.2293%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.9793%" y="101" width="0.0797%" height="15" fill="rgb(230,82,12)" fg:x="865" fg:w="1"/><text x="69.2293%" y="111.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (11 samples, 0.88%)</title><rect x="68.4211%" y="421" width="0.8772%" height="15" fill="rgb(205,212,34)" fg:x="858" fg:w="11"/><text x="68.6711%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (11 samples, 0.88%)</title><rect x="68.4211%" y="405" width="0.8772%" height="15" fill="rgb(239,90,1)" fg:x="858" fg:w="11"/><text x="68.6711%" y="415.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (11 samples, 0.88%)</title><rect x="68.4211%" y="389" width="0.8772%" height="15" fill="rgb(225,198,50)" fg:x="858" fg:w="11"/><text x="68.6711%" y="399.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="68.9793%" y="373" width="0.3190%" height="15" fill="rgb(227,208,48)" fg:x="865" fg:w="4"/><text x="69.2293%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="68.9793%" y="357" width="0.3190%" height="15" fill="rgb(238,134,41)" fg:x="865" fg:w="4"/><text x="69.2293%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="69.0590%" y="341" width="0.2392%" height="15" fill="rgb(241,58,39)" fg:x="866" fg:w="3"/><text x="69.3090%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.0590%" y="325" width="0.2392%" height="15" fill="rgb(214,126,4)" fg:x="866" fg:w="3"/><text x="69.3090%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="69.1388%" y="309" width="0.1595%" height="15" fill="rgb(235,149,4)" fg:x="867" fg:w="2"/><text x="69.3888%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="69.1388%" y="293" width="0.1595%" height="15" fill="rgb(236,59,29)" fg:x="867" fg:w="2"/><text x="69.3888%" y="303.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="69.1388%" y="277" width="0.1595%" height="15" fill="rgb(246,11,33)" fg:x="867" fg:w="2"/><text x="69.3888%" y="287.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.1388%" y="261" width="0.1595%" height="15" fill="rgb(232,180,35)" fg:x="867" fg:w="2"/><text x="69.3888%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2185%" y="245" width="0.0797%" height="15" fill="rgb(220,35,37)" fg:x="868" fg:w="1"/><text x="69.4685%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2185%" y="229" width="0.0797%" height="15" fill="rgb(238,107,48)" fg:x="868" fg:w="1"/><text x="69.4685%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.2185%" y="213" width="0.0797%" height="15" fill="rgb(205,65,21)" fg:x="868" fg:w="1"/><text x="69.4685%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2185%" y="197" width="0.0797%" height="15" fill="rgb(246,138,48)" fg:x="868" fg:w="1"/><text x="69.4685%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (2 samples, 0.16%)</title><rect x="69.2982%" y="405" width="0.1595%" height="15" fill="rgb(209,220,47)" fg:x="869" fg:w="2"/><text x="69.5482%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (2 samples, 0.16%)</title><rect x="69.2982%" y="389" width="0.1595%" height="15" fill="rgb(222,162,49)" fg:x="869" fg:w="2"/><text x="69.5482%" y="399.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (1 samples, 0.08%)</title><rect x="69.3780%" y="373" width="0.0797%" height="15" fill="rgb(243,123,11)" fg:x="870" fg:w="1"/><text x="69.6280%" y="383.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="69.3780%" y="357" width="0.0797%" height="15" fill="rgb(221,229,41)" fg:x="870" fg:w="1"/><text x="69.6280%" y="367.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="69.3780%" y="341" width="0.0797%" height="15" fill="rgb(216,68,4)" fg:x="870" fg:w="1"/><text x="69.6280%" y="351.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="69.3780%" y="325" width="0.0797%" height="15" fill="rgb(207,88,35)" fg:x="870" fg:w="1"/><text x="69.6280%" y="335.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="69.3780%" y="309" width="0.0797%" height="15" fill="rgb(252,2,5)" fg:x="870" fg:w="1"/><text x="69.6280%" y="319.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="69.3780%" y="293" width="0.0797%" height="15" fill="rgb(209,173,7)" fg:x="870" fg:w="1"/><text x="69.6280%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.4577%" y="357" width="0.0797%" height="15" fill="rgb(210,198,52)" fg:x="871" fg:w="1"/><text x="69.7077%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.4577%" y="341" width="0.0797%" height="15" fill="rgb(228,152,32)" fg:x="871" fg:w="1"/><text x="69.7077%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.4577%" y="325" width="0.0797%" height="15" fill="rgb(249,98,29)" fg:x="871" fg:w="1"/><text x="69.7077%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.5375%" y="325" width="0.1595%" height="15" fill="rgb(205,148,48)" fg:x="872" fg:w="2"/><text x="69.7875%" y="335.50"></text></g><g><title>plugins_core::library::actions::reply_ok (6 samples, 0.48%)</title><rect x="69.2982%" y="421" width="0.4785%" height="15" fill="rgb(236,69,34)" fg:x="869" fg:w="6"/><text x="69.5482%" y="431.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.32%)</title><rect x="69.4577%" y="405" width="0.3190%" height="15" fill="rgb(220,151,41)" fg:x="871" fg:w="4"/><text x="69.7077%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (4 samples, 0.32%)</title><rect x="69.4577%" y="389" width="0.3190%" height="15" fill="rgb(254,106,24)" fg:x="871" fg:w="4"/><text x="69.7077%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (4 samples, 0.32%)</title><rect x="69.4577%" y="373" width="0.3190%" height="15" fill="rgb(210,37,48)" fg:x="871" fg:w="4"/><text x="69.7077%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="69.5375%" y="357" width="0.2392%" height="15" fill="rgb(254,131,5)" fg:x="872" fg:w="3"/><text x="69.7875%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="69.5375%" y="341" width="0.2392%" height="15" fill="rgb(216,55,41)" fg:x="872" fg:w="3"/><text x="69.7875%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6970%" y="325" width="0.0797%" height="15" fill="rgb(250,35,31)" fg:x="874" fg:w="1"/><text x="69.9470%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.8565%" y="389" width="0.0797%" height="15" fill="rgb(207,124,33)" fg:x="876" fg:w="1"/><text x="70.1065%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8565%" y="373" width="0.0797%" height="15" fill="rgb(249,175,17)" fg:x="876" fg:w="1"/><text x="70.1065%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8565%" y="357" width="0.0797%" height="15" fill="rgb(224,175,39)" fg:x="876" fg:w="1"/><text x="70.1065%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.8565%" y="341" width="0.0797%" height="15" fill="rgb(208,67,49)" fg:x="876" fg:w="1"/><text x="70.1065%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.8565%" y="325" width="0.0797%" height="15" fill="rgb(222,188,41)" fg:x="876" fg:w="1"/><text x="70.1065%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.8565%" y="309" width="0.0797%" height="15" fill="rgb(243,213,30)" fg:x="876" fg:w="1"/><text x="70.1065%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.8565%" y="293" width="0.0797%" height="15" fill="rgb(253,100,45)" fg:x="876" fg:w="1"/><text x="70.1065%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.8565%" y="277" width="0.0797%" height="15" fill="rgb(226,24,44)" fg:x="876" fg:w="1"/><text x="70.1065%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.8565%" y="261" width="0.0797%" height="15" fill="rgb(215,41,24)" fg:x="876" fg:w="1"/><text x="70.1065%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.8565%" y="245" width="0.0797%" height="15" fill="rgb(254,53,33)" fg:x="876" fg:w="1"/><text x="70.1065%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.8565%" y="229" width="0.0797%" height="15" fill="rgb(242,103,10)" fg:x="876" fg:w="1"/><text x="70.1065%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.8565%" y="213" width="0.0797%" height="15" fill="rgb(246,29,21)" fg:x="876" fg:w="1"/><text x="70.1065%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8565%" y="197" width="0.0797%" height="15" fill="rgb(251,154,1)" fg:x="876" fg:w="1"/><text x="70.1065%" y="207.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="69.7767%" y="405" width="0.2392%" height="15" fill="rgb(254,212,26)" fg:x="875" fg:w="3"/><text x="70.0267%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.9362%" y="389" width="0.0797%" height="15" fill="rgb(251,187,46)" fg:x="877" fg:w="1"/><text x="70.1862%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.9362%" y="373" width="0.0797%" height="15" fill="rgb(224,208,14)" fg:x="877" fg:w="1"/><text x="70.1862%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="69.9362%" y="357" width="0.0797%" height="15" fill="rgb(222,176,26)" fg:x="877" fg:w="1"/><text x="70.1862%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.9362%" y="341" width="0.0797%" height="15" fill="rgb(241,219,52)" fg:x="877" fg:w="1"/><text x="70.1862%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="69.9362%" y="325" width="0.0797%" height="15" fill="rgb(252,198,21)" fg:x="877" fg:w="1"/><text x="70.1862%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.9362%" y="309" width="0.0797%" height="15" fill="rgb(244,196,23)" fg:x="877" fg:w="1"/><text x="70.1862%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.9362%" y="293" width="0.0797%" height="15" fill="rgb(239,121,44)" fg:x="877" fg:w="1"/><text x="70.1862%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="70.0159%" y="357" width="0.0797%" height="15" fill="rgb(249,203,23)" fg:x="878" fg:w="1"/><text x="70.2659%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="70.0159%" y="373" width="0.1595%" height="15" fill="rgb(238,219,10)" fg:x="878" fg:w="2"/><text x="70.2659%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.0957%" y="357" width="0.0797%" height="15" fill="rgb(241,35,46)" fg:x="879" fg:w="1"/><text x="70.3457%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="70.0957%" y="341" width="0.0797%" height="15" fill="rgb(218,28,6)" fg:x="879" fg:w="1"/><text x="70.3457%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.0957%" y="325" width="0.0797%" height="15" fill="rgb(233,151,50)" fg:x="879" fg:w="1"/><text x="70.3457%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0957%" y="309" width="0.0797%" height="15" fill="rgb(208,57,8)" fg:x="879" fg:w="1"/><text x="70.3457%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.0957%" y="293" width="0.0797%" height="15" fill="rgb(253,99,10)" fg:x="879" fg:w="1"/><text x="70.3457%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0957%" y="277" width="0.0797%" height="15" fill="rgb(237,196,49)" fg:x="879" fg:w="1"/><text x="70.3457%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.0957%" y="261" width="0.0797%" height="15" fill="rgb(209,51,3)" fg:x="879" fg:w="1"/><text x="70.3457%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0957%" y="245" width="0.0797%" height="15" fill="rgb(238,129,10)" fg:x="879" fg:w="1"/><text x="70.3457%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="70.0159%" y="405" width="0.2392%" height="15" fill="rgb(246,201,16)" fg:x="878" fg:w="3"/><text x="70.2659%" y="415.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="70.0159%" y="389" width="0.2392%" height="15" fill="rgb(250,160,20)" fg:x="878" fg:w="3"/><text x="70.2659%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.1754%" y="373" width="0.0797%" height="15" fill="rgb(251,107,25)" fg:x="880" fg:w="1"/><text x="70.4254%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.1754%" y="357" width="0.0797%" height="15" fill="rgb(212,103,39)" fg:x="880" fg:w="1"/><text x="70.4254%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="70.1754%" y="341" width="0.0797%" height="15" fill="rgb(207,9,29)" fg:x="880" fg:w="1"/><text x="70.4254%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.1754%" y="325" width="0.0797%" height="15" fill="rgb(227,84,3)" fg:x="880" fg:w="1"/><text x="70.4254%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1754%" y="309" width="0.0797%" height="15" fill="rgb(242,194,7)" fg:x="880" fg:w="1"/><text x="70.4254%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.3349%" y="293" width="0.0797%" height="15" fill="rgb(230,40,4)" fg:x="882" fg:w="1"/><text x="70.5849%" y="303.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="70.2552%" y="405" width="0.2392%" height="15" fill="rgb(243,229,33)" fg:x="881" fg:w="3"/><text x="70.5052%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (3 samples, 0.24%)</title><rect x="70.2552%" y="389" width="0.2392%" height="15" fill="rgb(240,65,24)" fg:x="881" fg:w="3"/><text x="70.5052%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="70.2552%" y="373" width="0.2392%" height="15" fill="rgb(212,28,20)" fg:x="881" fg:w="3"/><text x="70.5052%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="70.2552%" y="357" width="0.2392%" height="15" fill="rgb(209,72,3)" fg:x="881" fg:w="3"/><text x="70.5052%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="70.2552%" y="341" width="0.2392%" height="15" fill="rgb(238,170,36)" fg:x="881" fg:w="3"/><text x="70.5052%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.24%)</title><rect x="70.2552%" y="325" width="0.2392%" height="15" fill="rgb(236,19,38)" fg:x="881" fg:w="3"/><text x="70.5052%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="70.3349%" y="309" width="0.1595%" height="15" fill="rgb(230,67,43)" fg:x="882" fg:w="2"/><text x="70.5849%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.4147%" y="293" width="0.0797%" height="15" fill="rgb(227,14,36)" fg:x="883" fg:w="1"/><text x="70.6647%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="70.4944%" y="341" width="0.0797%" height="15" fill="rgb(247,171,49)" fg:x="884" fg:w="1"/><text x="70.7444%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.4944%" y="325" width="0.0797%" height="15" fill="rgb(235,164,51)" fg:x="884" fg:w="1"/><text x="70.7444%" y="335.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="70.4944%" y="405" width="0.1595%" height="15" fill="rgb(246,107,20)" fg:x="884" fg:w="2"/><text x="70.7444%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="70.4944%" y="389" width="0.1595%" height="15" fill="rgb(226,88,18)" fg:x="884" fg:w="2"/><text x="70.7444%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="70.4944%" y="373" width="0.1595%" height="15" fill="rgb(235,136,9)" fg:x="884" fg:w="2"/><text x="70.7444%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="70.4944%" y="357" width="0.1595%" height="15" fill="rgb(209,3,34)" fg:x="884" fg:w="2"/><text x="70.7444%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.5742%" y="341" width="0.0797%" height="15" fill="rgb(213,38,19)" fg:x="885" fg:w="1"/><text x="70.8242%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="70.5742%" y="325" width="0.0797%" height="15" fill="rgb(254,24,24)" fg:x="885" fg:w="1"/><text x="70.8242%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5742%" y="309" width="0.0797%" height="15" fill="rgb(219,122,42)" fg:x="885" fg:w="1"/><text x="70.8242%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5742%" y="293" width="0.0797%" height="15" fill="rgb(205,128,31)" fg:x="885" fg:w="1"/><text x="70.8242%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5742%" y="277" width="0.0797%" height="15" fill="rgb(212,142,0)" fg:x="885" fg:w="1"/><text x="70.8242%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.5742%" y="261" width="0.0797%" height="15" fill="rgb(211,25,35)" fg:x="885" fg:w="1"/><text x="70.8242%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.5742%" y="245" width="0.0797%" height="15" fill="rgb(220,150,53)" fg:x="885" fg:w="1"/><text x="70.8242%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.5742%" y="229" width="0.0797%" height="15" fill="rgb(220,30,24)" fg:x="885" fg:w="1"/><text x="70.8242%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.5742%" y="213" width="0.0797%" height="15" fill="rgb(218,86,23)" fg:x="885" fg:w="1"/><text x="70.8242%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.5742%" y="197" width="0.0797%" height="15" fill="rgb(206,62,27)" fg:x="885" fg:w="1"/><text x="70.8242%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.5742%" y="181" width="0.0797%" height="15" fill="rgb(249,174,0)" fg:x="885" fg:w="1"/><text x="70.8242%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.5742%" y="165" width="0.0797%" height="15" fill="rgb(246,67,27)" fg:x="885" fg:w="1"/><text x="70.8242%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.5742%" y="149" width="0.0797%" height="15" fill="rgb(250,195,30)" fg:x="885" fg:w="1"/><text x="70.8242%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.5742%" y="133" width="0.0797%" height="15" fill="rgb(251,171,50)" fg:x="885" fg:w="1"/><text x="70.8242%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.5742%" y="117" width="0.0797%" height="15" fill="rgb(236,196,10)" fg:x="885" fg:w="1"/><text x="70.8242%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.5742%" y="101" width="0.0797%" height="15" fill="rgb(249,228,52)" fg:x="885" fg:w="1"/><text x="70.8242%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.5742%" y="85" width="0.0797%" height="15" fill="rgb(219,60,51)" fg:x="885" fg:w="1"/><text x="70.8242%" y="95.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="70.6539%" y="373" width="0.0797%" height="15" fill="rgb(240,198,24)" fg:x="886" fg:w="1"/><text x="70.9039%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.6539%" y="357" width="0.0797%" height="15" fill="rgb(240,192,40)" fg:x="886" fg:w="1"/><text x="70.9039%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="70.6539%" y="341" width="0.0797%" height="15" fill="rgb(219,118,5)" fg:x="886" fg:w="1"/><text x="70.9039%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.6539%" y="325" width="0.0797%" height="15" fill="rgb(205,202,34)" fg:x="886" fg:w="1"/><text x="70.9039%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.7337%" y="341" width="0.0797%" height="15" fill="rgb(234,153,26)" fg:x="887" fg:w="1"/><text x="70.9837%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (649 samples, 51.75%)</title><rect x="19.1388%" y="629" width="51.7544%" height="15" fill="rgb(229,26,29)" fg:x="240" fg:w="649"/><text x="19.3888%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (648 samples, 51.67%)</title><rect x="19.2185%" y="613" width="51.6746%" height="15" fill="rgb(237,115,21)" fg:x="241" fg:w="648"/><text x="19.4685%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (648 samples, 51.67%)</title><rect x="19.2185%" y="597" width="51.6746%" height="15" fill="rgb(252,144,15)" fg:x="241" fg:w="648"/><text x="19.4685%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (648 samples, 51.67%)</title><rect x="19.2185%" y="581" width="51.6746%" height="15" fill="rgb(232,26,13)" fg:x="241" fg:w="648"/><text x="19.4685%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::h..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (634 samples, 50.56%)</title><rect x="20.3349%" y="565" width="50.5582%" height="15" fill="rgb(206,44,19)" fg:x="255" fg:w="634"/><text x="20.5849%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (634 samples, 50.56%)</title><rect x="20.3349%" y="549" width="50.5582%" height="15" fill="rgb(249,159,2)" fg:x="255" fg:w="634"/><text x="20.5849%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (633 samples, 50.48%)</title><rect x="20.4147%" y="533" width="50.4785%" height="15" fill="rgb(231,5,32)" fg:x="256" fg:w="633"/><text x="20.6647%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (632 samples, 50.40%)</title><rect x="20.4944%" y="517" width="50.3987%" height="15" fill="rgb(249,210,18)" fg:x="257" fg:w="632"/><text x="20.7444%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (632 samples, 50.40%)</title><rect x="20.4944%" y="501" width="50.3987%" height="15" fill="rgb(215,223,36)" fg:x="257" fg:w="632"/><text x="20.7444%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (632 samples, 50.40%)</title><rect x="20.4944%" y="485" width="50.3987%" height="15" fill="rgb(245,185,20)" fg:x="257" fg:w="632"/><text x="20.7444%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (632 samples, 50.40%)</title><rect x="20.4944%" y="469" width="50.3987%" height="15" fill="rgb(206,224,11)" fg:x="257" fg:w="632"/><text x="20.7444%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (632 samples, 50.40%)</title><rect x="20.4944%" y="453" width="50.3987%" height="15" fill="rgb(248,73,42)" fg:x="257" fg:w="632"/><text x="20.7444%" y="463.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (301 samples, 24.00%)</title><rect x="46.8900%" y="437" width="24.0032%" height="15" fill="rgb(219,149,31)" fg:x="588" fg:w="301"/><text x="47.1400%" y="447.50">&lt;plugins_core::carrying::actions::Hold..</text></g><g><title>plugins_core::location::change_location (14 samples, 1.12%)</title><rect x="69.7767%" y="421" width="1.1164%" height="15" fill="rgb(243,104,17)" fg:x="875" fg:w="14"/><text x="70.0267%" y="431.50"></text></g><g><title>plugins_core::location::Location::set (3 samples, 0.24%)</title><rect x="70.6539%" y="405" width="0.2392%" height="15" fill="rgb(244,117,33)" fg:x="886" fg:w="3"/><text x="70.9039%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="70.6539%" y="389" width="0.2392%" height="15" fill="rgb(251,25,47)" fg:x="886" fg:w="3"/><text x="70.9039%" y="399.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="70.7337%" y="373" width="0.1595%" height="15" fill="rgb(249,70,13)" fg:x="887" fg:w="2"/><text x="70.9837%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="70.7337%" y="357" width="0.1595%" height="15" fill="rgb(217,133,18)" fg:x="887" fg:w="2"/><text x="70.9837%" y="367.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="70.8134%" y="341" width="0.0797%" height="15" fill="rgb(248,97,28)" fg:x="888" fg:w="1"/><text x="71.0634%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.8134%" y="325" width="0.0797%" height="15" fill="rgb(237,193,4)" fg:x="888" fg:w="1"/><text x="71.0634%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8931%" y="597" width="0.0797%" height="15" fill="rgb(247,198,45)" fg:x="889" fg:w="1"/><text x="71.1431%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8931%" y="581" width="0.0797%" height="15" fill="rgb(245,2,20)" fg:x="889" fg:w="1"/><text x="71.1431%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8931%" y="565" width="0.0797%" height="15" fill="rgb(210,71,36)" fg:x="889" fg:w="1"/><text x="71.1431%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8931%" y="549" width="0.0797%" height="15" fill="rgb(238,114,30)" fg:x="889" fg:w="1"/><text x="71.1431%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.8931%" y="533" width="0.0797%" height="15" fill="rgb(241,200,2)" fg:x="889" fg:w="1"/><text x="71.1431%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.8931%" y="517" width="0.0797%" height="15" fill="rgb(232,106,18)" fg:x="889" fg:w="1"/><text x="71.1431%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.8931%" y="501" width="0.0797%" height="15" fill="rgb(211,141,18)" fg:x="889" fg:w="1"/><text x="71.1431%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="70.8931%" y="485" width="0.0797%" height="15" fill="rgb(224,9,9)" fg:x="889" fg:w="1"/><text x="71.1431%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="70.8931%" y="469" width="0.0797%" height="15" fill="rgb(249,137,46)" fg:x="889" fg:w="1"/><text x="71.1431%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (3 samples, 0.24%)</title><rect x="70.8931%" y="629" width="0.2392%" height="15" fill="rgb(236,44,45)" fg:x="889" fg:w="3"/><text x="71.1431%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="70.8931%" y="613" width="0.2392%" height="15" fill="rgb(205,68,40)" fg:x="889" fg:w="3"/><text x="71.1431%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.9729%" y="597" width="0.1595%" height="15" fill="rgb(214,198,49)" fg:x="890" fg:w="2"/><text x="71.2229%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.9729%" y="581" width="0.1595%" height="15" fill="rgb(226,140,45)" fg:x="890" fg:w="2"/><text x="71.2229%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="70.9729%" y="565" width="0.1595%" height="15" fill="rgb(209,109,20)" fg:x="890" fg:w="2"/><text x="71.2229%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.9729%" y="549" width="0.1595%" height="15" fill="rgb(217,33,46)" fg:x="890" fg:w="2"/><text x="71.2229%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.0526%" y="533" width="0.0797%" height="15" fill="rgb(232,150,33)" fg:x="891" fg:w="1"/><text x="71.3026%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0526%" y="517" width="0.0797%" height="15" fill="rgb(233,76,25)" fg:x="891" fg:w="1"/><text x="71.3026%" y="527.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="71.1324%" y="629" width="0.0797%" height="15" fill="rgb(254,219,23)" fg:x="892" fg:w="1"/><text x="71.3824%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="71.1324%" y="613" width="0.0797%" height="15" fill="rgb(233,108,4)" fg:x="892" fg:w="1"/><text x="71.3824%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2121%" y="581" width="0.0797%" height="15" fill="rgb(229,98,6)" fg:x="893" fg:w="1"/><text x="71.4621%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2121%" y="565" width="0.0797%" height="15" fill="rgb(217,40,27)" fg:x="893" fg:w="1"/><text x="71.4621%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2121%" y="549" width="0.0797%" height="15" fill="rgb(221,35,43)" fg:x="893" fg:w="1"/><text x="71.4621%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2121%" y="533" width="0.0797%" height="15" fill="rgb(212,107,11)" fg:x="893" fg:w="1"/><text x="71.4621%" y="543.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="71.3716%" y="325" width="0.0797%" height="15" fill="rgb(245,42,44)" fg:x="895" fg:w="1"/><text x="71.6216%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="71.3716%" y="309" width="0.0797%" height="15" fill="rgb(209,31,12)" fg:x="895" fg:w="1"/><text x="71.6216%" y="319.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="71.3716%" y="293" width="0.0797%" height="15" fill="rgb(210,228,54)" fg:x="895" fg:w="1"/><text x="71.6216%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="71.3716%" y="277" width="0.0797%" height="15" fill="rgb(241,19,33)" fg:x="895" fg:w="1"/><text x="71.6216%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="71.3716%" y="261" width="0.0797%" height="15" fill="rgb(229,51,27)" fg:x="895" fg:w="1"/><text x="71.6216%" y="271.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="71.3716%" y="245" width="0.0797%" height="15" fill="rgb(214,167,49)" fg:x="895" fg:w="1"/><text x="71.6216%" y="255.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="71.3716%" y="229" width="0.0797%" height="15" fill="rgb(248,140,47)" fg:x="895" fg:w="1"/><text x="71.6216%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="71.2919%" y="581" width="0.2392%" height="15" fill="rgb(228,6,51)" fg:x="894" fg:w="3"/><text x="71.5419%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="71.2919%" y="565" width="0.2392%" height="15" fill="rgb(242,44,53)" fg:x="894" fg:w="3"/><text x="71.5419%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="71.2919%" y="549" width="0.2392%" height="15" fill="rgb(249,90,50)" fg:x="894" fg:w="3"/><text x="71.5419%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="71.2919%" y="533" width="0.2392%" height="15" fill="rgb(222,84,19)" fg:x="894" fg:w="3"/><text x="71.5419%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="71.3716%" y="517" width="0.1595%" height="15" fill="rgb(214,140,12)" fg:x="895" fg:w="2"/><text x="71.6216%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="71.3716%" y="501" width="0.1595%" height="15" fill="rgb(210,20,43)" fg:x="895" fg:w="2"/><text x="71.6216%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="71.3716%" y="485" width="0.1595%" height="15" fill="rgb(243,1,40)" fg:x="895" fg:w="2"/><text x="71.6216%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="71.3716%" y="469" width="0.1595%" height="15" fill="rgb(224,102,26)" fg:x="895" fg:w="2"/><text x="71.6216%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="71.3716%" y="453" width="0.1595%" height="15" fill="rgb(221,179,1)" fg:x="895" fg:w="2"/><text x="71.6216%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.3716%" y="437" width="0.1595%" height="15" fill="rgb(216,209,47)" fg:x="895" fg:w="2"/><text x="71.6216%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.3716%" y="421" width="0.1595%" height="15" fill="rgb(251,135,9)" fg:x="895" fg:w="2"/><text x="71.6216%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="71.3716%" y="405" width="0.1595%" height="15" fill="rgb(242,9,36)" fg:x="895" fg:w="2"/><text x="71.6216%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (2 samples, 0.16%)</title><rect x="71.3716%" y="389" width="0.1595%" height="15" fill="rgb(249,60,37)" fg:x="895" fg:w="2"/><text x="71.6216%" y="399.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (2 samples, 0.16%)</title><rect x="71.3716%" y="373" width="0.1595%" height="15" fill="rgb(230,66,45)" fg:x="895" fg:w="2"/><text x="71.6216%" y="383.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (2 samples, 0.16%)</title><rect x="71.3716%" y="357" width="0.1595%" height="15" fill="rgb(216,1,47)" fg:x="895" fg:w="2"/><text x="71.6216%" y="367.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="71.3716%" y="341" width="0.1595%" height="15" fill="rgb(235,8,23)" fg:x="895" fg:w="2"/><text x="71.6216%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="71.4514%" y="325" width="0.0797%" height="15" fill="rgb(225,136,11)" fg:x="896" fg:w="1"/><text x="71.7014%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.4514%" y="309" width="0.0797%" height="15" fill="rgb(228,63,44)" fg:x="896" fg:w="1"/><text x="71.7014%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.4514%" y="293" width="0.0797%" height="15" fill="rgb(240,43,52)" fg:x="896" fg:w="1"/><text x="71.7014%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.4514%" y="277" width="0.0797%" height="15" fill="rgb(217,167,36)" fg:x="896" fg:w="1"/><text x="71.7014%" y="287.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="71.4514%" y="261" width="0.0797%" height="15" fill="rgb(250,19,6)" fg:x="896" fg:w="1"/><text x="71.7014%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="71.4514%" y="245" width="0.0797%" height="15" fill="rgb(236,60,51)" fg:x="896" fg:w="1"/><text x="71.7014%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="71.4514%" y="229" width="0.0797%" height="15" fill="rgb(222,217,20)" fg:x="896" fg:w="1"/><text x="71.7014%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="71.4514%" y="213" width="0.0797%" height="15" fill="rgb(242,65,52)" fg:x="896" fg:w="1"/><text x="71.7014%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.4514%" y="197" width="0.0797%" height="15" fill="rgb(217,5,41)" fg:x="896" fg:w="1"/><text x="71.7014%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.5311%" y="549" width="0.0797%" height="15" fill="rgb(223,208,53)" fg:x="897" fg:w="1"/><text x="71.7811%" y="559.50"></text></g><g><title>engine::session::internal::Added::find_refs (6 samples, 0.48%)</title><rect x="71.2121%" y="613" width="0.4785%" height="15" fill="rgb(221,104,30)" fg:x="893" fg:w="6"/><text x="71.4621%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="71.2121%" y="597" width="0.4785%" height="15" fill="rgb(230,210,42)" fg:x="893" fg:w="6"/><text x="71.4621%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.5311%" y="581" width="0.1595%" height="15" fill="rgb(206,205,27)" fg:x="897" fg:w="2"/><text x="71.7811%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.5311%" y="565" width="0.1595%" height="15" fill="rgb(233,114,38)" fg:x="897" fg:w="2"/><text x="71.7811%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.6108%" y="549" width="0.0797%" height="15" fill="rgb(216,174,36)" fg:x="898" fg:w="1"/><text x="71.8608%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.6108%" y="533" width="0.0797%" height="15" fill="rgb(211,30,9)" fg:x="898" fg:w="1"/><text x="71.8608%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.6108%" y="517" width="0.0797%" height="15" fill="rgb(216,8,21)" fg:x="898" fg:w="1"/><text x="71.8608%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.6108%" y="501" width="0.0797%" height="15" fill="rgb(237,209,39)" fg:x="898" fg:w="1"/><text x="71.8608%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.6108%" y="485" width="0.0797%" height="15" fill="rgb(235,111,47)" fg:x="898" fg:w="1"/><text x="71.8608%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.6108%" y="469" width="0.0797%" height="15" fill="rgb(216,139,9)" fg:x="898" fg:w="1"/><text x="71.8608%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6906%" y="597" width="0.0797%" height="15" fill="rgb(248,185,4)" fg:x="899" fg:w="1"/><text x="71.9406%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6906%" y="581" width="0.0797%" height="15" fill="rgb(239,185,25)" fg:x="899" fg:w="1"/><text x="71.9406%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6906%" y="565" width="0.0797%" height="15" fill="rgb(233,207,8)" fg:x="899" fg:w="1"/><text x="71.9406%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.6906%" y="549" width="0.0797%" height="15" fill="rgb(249,220,24)" fg:x="899" fg:w="1"/><text x="71.9406%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.6906%" y="533" width="0.0797%" height="15" fill="rgb(221,50,14)" fg:x="899" fg:w="1"/><text x="71.9406%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.6906%" y="517" width="0.0797%" height="15" fill="rgb(227,79,42)" fg:x="899" fg:w="1"/><text x="71.9406%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6906%" y="501" width="0.0797%" height="15" fill="rgb(228,218,49)" fg:x="899" fg:w="1"/><text x="71.9406%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6906%" y="485" width="0.0797%" height="15" fill="rgb(249,18,15)" fg:x="899" fg:w="1"/><text x="71.9406%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.6906%" y="469" width="0.0797%" height="15" fill="rgb(212,84,27)" fg:x="899" fg:w="1"/><text x="71.9406%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.6906%" y="453" width="0.0797%" height="15" fill="rgb(207,83,24)" fg:x="899" fg:w="1"/><text x="71.9406%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.6906%" y="437" width="0.0797%" height="15" fill="rgb(219,61,7)" fg:x="899" fg:w="1"/><text x="71.9406%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.6906%" y="421" width="0.0797%" height="15" fill="rgb(211,43,29)" fg:x="899" fg:w="1"/><text x="71.9406%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6906%" y="405" width="0.0797%" height="15" fill="rgb(243,15,23)" fg:x="899" fg:w="1"/><text x="71.9406%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="71.7703%" y="597" width="0.1595%" height="15" fill="rgb(217,52,28)" fg:x="900" fg:w="2"/><text x="72.0203%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="71.7703%" y="581" width="0.1595%" height="15" fill="rgb(210,35,6)" fg:x="900" fg:w="2"/><text x="72.0203%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.8501%" y="565" width="0.0797%" height="15" fill="rgb(237,187,28)" fg:x="901" fg:w="1"/><text x="72.1001%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.8501%" y="549" width="0.0797%" height="15" fill="rgb(231,136,24)" fg:x="901" fg:w="1"/><text x="72.1001%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8501%" y="533" width="0.0797%" height="15" fill="rgb(205,176,52)" fg:x="901" fg:w="1"/><text x="72.1001%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.8501%" y="517" width="0.0797%" height="15" fill="rgb(218,65,12)" fg:x="901" fg:w="1"/><text x="72.1001%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8501%" y="501" width="0.0797%" height="15" fill="rgb(234,101,21)" fg:x="901" fg:w="1"/><text x="72.1001%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8501%" y="485" width="0.0797%" height="15" fill="rgb(206,13,20)" fg:x="901" fg:w="1"/><text x="72.1001%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.9298%" y="517" width="0.0797%" height="15" fill="rgb(236,89,44)" fg:x="902" fg:w="1"/><text x="72.1798%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.9298%" y="501" width="0.0797%" height="15" fill="rgb(225,52,17)" fg:x="902" fg:w="1"/><text x="72.1798%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="71.9298%" y="485" width="0.0797%" height="15" fill="rgb(214,27,25)" fg:x="902" fg:w="1"/><text x="72.1798%" y="495.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="72.0096%" y="437" width="0.0797%" height="15" fill="rgb(240,141,35)" fg:x="903" fg:w="1"/><text x="72.2596%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.0096%" y="421" width="0.0797%" height="15" fill="rgb(216,126,3)" fg:x="903" fg:w="1"/><text x="72.2596%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0096%" y="405" width="0.0797%" height="15" fill="rgb(249,196,23)" fg:x="903" fg:w="1"/><text x="72.2596%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.0096%" y="469" width="0.1595%" height="15" fill="rgb(215,185,43)" fg:x="903" fg:w="2"/><text x="72.2596%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.0096%" y="453" width="0.1595%" height="15" fill="rgb(208,194,36)" fg:x="903" fg:w="2"/><text x="72.2596%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.0893%" y="437" width="0.0797%" height="15" fill="rgb(245,182,12)" fg:x="904" fg:w="1"/><text x="72.3393%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="72.0096%" y="501" width="0.2392%" height="15" fill="rgb(244,222,52)" fg:x="903" fg:w="3"/><text x="72.2596%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.0096%" y="485" width="0.2392%" height="15" fill="rgb(236,222,51)" fg:x="903" fg:w="3"/><text x="72.2596%" y="495.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="72.1691%" y="469" width="0.0797%" height="15" fill="rgb(254,71,22)" fg:x="905" fg:w="1"/><text x="72.4191%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.1691%" y="453" width="0.0797%" height="15" fill="rgb(250,104,15)" fg:x="905" fg:w="1"/><text x="72.4191%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.1691%" y="437" width="0.0797%" height="15" fill="rgb(229,223,46)" fg:x="905" fg:w="1"/><text x="72.4191%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.1691%" y="421" width="0.0797%" height="15" fill="rgb(209,129,18)" fg:x="905" fg:w="1"/><text x="72.4191%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2488%" y="501" width="0.0797%" height="15" fill="rgb(224,160,1)" fg:x="906" fg:w="1"/><text x="72.4988%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.3285%" y="469" width="0.0797%" height="15" fill="rgb(237,112,21)" fg:x="907" fg:w="1"/><text x="72.5785%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.3285%" y="453" width="0.0797%" height="15" fill="rgb(215,198,53)" fg:x="907" fg:w="1"/><text x="72.5785%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.3285%" y="437" width="0.0797%" height="15" fill="rgb(218,227,35)" fg:x="907" fg:w="1"/><text x="72.5785%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.4083%" y="453" width="0.0797%" height="15" fill="rgb(232,121,22)" fg:x="908" fg:w="1"/><text x="72.6583%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.4083%" y="437" width="0.0797%" height="15" fill="rgb(235,52,54)" fg:x="908" fg:w="1"/><text x="72.6583%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4083%" y="421" width="0.0797%" height="15" fill="rgb(219,21,44)" fg:x="908" fg:w="1"/><text x="72.6583%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.4083%" y="405" width="0.0797%" height="15" fill="rgb(221,51,43)" fg:x="908" fg:w="1"/><text x="72.6583%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.4083%" y="389" width="0.0797%" height="15" fill="rgb(225,77,42)" fg:x="908" fg:w="1"/><text x="72.6583%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (8 samples, 0.64%)</title><rect x="71.9298%" y="549" width="0.6380%" height="15" fill="rgb(214,117,53)" fg:x="902" fg:w="8"/><text x="72.1798%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="71.9298%" y="533" width="0.6380%" height="15" fill="rgb(218,227,27)" fg:x="902" fg:w="8"/><text x="72.1798%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (7 samples, 0.56%)</title><rect x="72.0096%" y="517" width="0.5582%" height="15" fill="rgb(223,214,36)" fg:x="903" fg:w="7"/><text x="72.2596%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="72.3285%" y="501" width="0.2392%" height="15" fill="rgb(235,21,7)" fg:x="907" fg:w="3"/><text x="72.5785%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.3285%" y="485" width="0.2392%" height="15" fill="rgb(244,216,4)" fg:x="907" fg:w="3"/><text x="72.5785%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="72.4083%" y="469" width="0.1595%" height="15" fill="rgb(249,197,24)" fg:x="908" fg:w="2"/><text x="72.6583%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4880%" y="453" width="0.0797%" height="15" fill="rgb(222,169,49)" fg:x="909" fg:w="1"/><text x="72.7380%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.4880%" y="437" width="0.0797%" height="15" fill="rgb(207,137,33)" fg:x="909" fg:w="1"/><text x="72.7380%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="72.4880%" y="421" width="0.0797%" height="15" fill="rgb(219,180,40)" fg:x="909" fg:w="1"/><text x="72.7380%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4880%" y="405" width="0.0797%" height="15" fill="rgb(250,163,42)" fg:x="909" fg:w="1"/><text x="72.7380%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (9 samples, 0.72%)</title><rect x="71.9298%" y="597" width="0.7177%" height="15" fill="rgb(239,163,0)" fg:x="902" fg:w="9"/><text x="72.1798%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (9 samples, 0.72%)</title><rect x="71.9298%" y="581" width="0.7177%" height="15" fill="rgb(252,38,28)" fg:x="902" fg:w="9"/><text x="72.1798%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (9 samples, 0.72%)</title><rect x="71.9298%" y="565" width="0.7177%" height="15" fill="rgb(254,203,26)" fg:x="902" fg:w="9"/><text x="72.1798%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.5678%" y="549" width="0.0797%" height="15" fill="rgb(209,129,32)" fg:x="910" fg:w="1"/><text x="72.8178%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.5678%" y="533" width="0.0797%" height="15" fill="rgb(207,177,52)" fg:x="910" fg:w="1"/><text x="72.8178%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.5678%" y="517" width="0.0797%" height="15" fill="rgb(230,209,36)" fg:x="910" fg:w="1"/><text x="72.8178%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.7273%" y="501" width="0.0797%" height="15" fill="rgb(238,131,0)" fg:x="912" fg:w="1"/><text x="72.9773%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7273%" y="485" width="0.0797%" height="15" fill="rgb(218,61,31)" fg:x="912" fg:w="1"/><text x="72.9773%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="72.6475%" y="533" width="0.2392%" height="15" fill="rgb(232,6,53)" fg:x="911" fg:w="3"/><text x="72.8975%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.6475%" y="517" width="0.2392%" height="15" fill="rgb(254,100,32)" fg:x="911" fg:w="3"/><text x="72.8975%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8070%" y="501" width="0.0797%" height="15" fill="rgb(229,194,49)" fg:x="913" fg:w="1"/><text x="73.0570%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8070%" y="485" width="0.0797%" height="15" fill="rgb(206,208,39)" fg:x="913" fg:w="1"/><text x="73.0570%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (22 samples, 1.75%)</title><rect x="71.2121%" y="629" width="1.7544%" height="15" fill="rgb(246,226,14)" fg:x="893" fg:w="22"/><text x="71.4621%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.28%)</title><rect x="71.6906%" y="613" width="1.2759%" height="15" fill="rgb(226,48,32)" fg:x="899" fg:w="16"/><text x="71.9406%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="72.6475%" y="597" width="0.3190%" height="15" fill="rgb(252,43,54)" fg:x="911" fg:w="4"/><text x="72.8975%" y="607.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="72.6475%" y="581" width="0.3190%" height="15" fill="rgb(207,124,0)" fg:x="911" fg:w="4"/><text x="72.8975%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="72.6475%" y="565" width="0.3190%" height="15" fill="rgb(248,188,30)" fg:x="911" fg:w="4"/><text x="72.8975%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="72.6475%" y="549" width="0.3190%" height="15" fill="rgb(232,14,43)" fg:x="911" fg:w="4"/><text x="72.8975%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.8868%" y="533" width="0.0797%" height="15" fill="rgb(218,52,29)" fg:x="914" fg:w="1"/><text x="73.1368%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.8868%" y="517" width="0.0797%" height="15" fill="rgb(218,176,50)" fg:x="914" fg:w="1"/><text x="73.1368%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.9665%" y="549" width="0.0797%" height="15" fill="rgb(213,112,0)" fg:x="915" fg:w="1"/><text x="73.2165%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.9665%" y="533" width="0.0797%" height="15" fill="rgb(244,216,8)" fg:x="915" fg:w="1"/><text x="73.2165%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.9665%" y="517" width="0.0797%" height="15" fill="rgb(224,148,53)" fg:x="915" fg:w="1"/><text x="73.2165%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.9665%" y="501" width="0.0797%" height="15" fill="rgb(241,133,40)" fg:x="915" fg:w="1"/><text x="73.2165%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.9665%" y="485" width="0.0797%" height="15" fill="rgb(232,17,44)" fg:x="915" fg:w="1"/><text x="73.2165%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.9665%" y="469" width="0.0797%" height="15" fill="rgb(213,32,25)" fg:x="915" fg:w="1"/><text x="73.2165%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.9665%" y="453" width="0.0797%" height="15" fill="rgb(249,115,27)" fg:x="915" fg:w="1"/><text x="73.2165%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.9665%" y="437" width="0.0797%" height="15" fill="rgb(241,50,1)" fg:x="915" fg:w="1"/><text x="73.2165%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.9665%" y="421" width="0.0797%" height="15" fill="rgb(244,175,40)" fg:x="915" fg:w="1"/><text x="73.2165%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.9665%" y="405" width="0.0797%" height="15" fill="rgb(230,94,34)" fg:x="915" fg:w="1"/><text x="73.2165%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.9665%" y="389" width="0.0797%" height="15" fill="rgb(223,185,29)" fg:x="915" fg:w="1"/><text x="73.2165%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.9665%" y="373" width="0.0797%" height="15" fill="rgb(225,193,15)" fg:x="915" fg:w="1"/><text x="73.2165%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.9665%" y="357" width="0.0797%" height="15" fill="rgb(252,121,38)" fg:x="915" fg:w="1"/><text x="73.2165%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.9665%" y="341" width="0.0797%" height="15" fill="rgb(232,44,12)" fg:x="915" fg:w="1"/><text x="73.2165%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.9665%" y="581" width="0.1595%" height="15" fill="rgb(226,45,54)" fg:x="915" fg:w="2"/><text x="73.2165%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.9665%" y="565" width="0.1595%" height="15" fill="rgb(209,67,17)" fg:x="915" fg:w="2"/><text x="73.2165%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0463%" y="549" width="0.0797%" height="15" fill="rgb(219,108,52)" fg:x="916" fg:w="1"/><text x="73.2963%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0463%" y="533" width="0.0797%" height="15" fill="rgb(216,118,19)" fg:x="916" fg:w="1"/><text x="73.2963%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.0463%" y="517" width="0.0797%" height="15" fill="rgb(228,120,40)" fg:x="916" fg:w="1"/><text x="73.2963%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.0463%" y="501" width="0.0797%" height="15" fill="rgb(221,218,34)" fg:x="916" fg:w="1"/><text x="73.2963%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.0463%" y="485" width="0.0797%" height="15" fill="rgb(235,89,14)" fg:x="916" fg:w="1"/><text x="73.2963%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0463%" y="469" width="0.0797%" height="15" fill="rgb(248,89,7)" fg:x="916" fg:w="1"/><text x="73.2963%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0463%" y="453" width="0.0797%" height="15" fill="rgb(212,114,34)" fg:x="916" fg:w="1"/><text x="73.2963%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.0463%" y="437" width="0.0797%" height="15" fill="rgb(246,88,32)" fg:x="916" fg:w="1"/><text x="73.2963%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.0463%" y="421" width="0.0797%" height="15" fill="rgb(237,135,0)" fg:x="916" fg:w="1"/><text x="73.2963%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.0463%" y="405" width="0.0797%" height="15" fill="rgb(220,201,54)" fg:x="916" fg:w="1"/><text x="73.2963%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.0463%" y="389" width="0.0797%" height="15" fill="rgb(210,142,36)" fg:x="916" fg:w="1"/><text x="73.2963%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0463%" y="373" width="0.0797%" height="15" fill="rgb(247,189,26)" fg:x="916" fg:w="1"/><text x="73.2963%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="73.1260%" y="565" width="0.0797%" height="15" fill="rgb(223,89,24)" fg:x="917" fg:w="1"/><text x="73.3760%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.1260%" y="549" width="0.0797%" height="15" fill="rgb(205,90,19)" fg:x="917" fg:w="1"/><text x="73.3760%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.2057%" y="533" width="0.0797%" height="15" fill="rgb(234,57,40)" fg:x="918" fg:w="1"/><text x="73.4557%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.2057%" y="517" width="0.0797%" height="15" fill="rgb(213,109,10)" fg:x="918" fg:w="1"/><text x="73.4557%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.2057%" y="501" width="0.0797%" height="15" fill="rgb(214,189,23)" fg:x="918" fg:w="1"/><text x="73.4557%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.2057%" y="485" width="0.0797%" height="15" fill="rgb(234,200,10)" fg:x="918" fg:w="1"/><text x="73.4557%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.2057%" y="469" width="0.0797%" height="15" fill="rgb(221,148,16)" fg:x="918" fg:w="1"/><text x="73.4557%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.2057%" y="453" width="0.0797%" height="15" fill="rgb(230,115,10)" fg:x="918" fg:w="1"/><text x="73.4557%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.2057%" y="437" width="0.0797%" height="15" fill="rgb(220,106,42)" fg:x="918" fg:w="1"/><text x="73.4557%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.2057%" y="421" width="0.0797%" height="15" fill="rgb(225,105,39)" fg:x="918" fg:w="1"/><text x="73.4557%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.2057%" y="405" width="0.0797%" height="15" fill="rgb(211,161,38)" fg:x="918" fg:w="1"/><text x="73.4557%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.2057%" y="389" width="0.0797%" height="15" fill="rgb(213,23,19)" fg:x="918" fg:w="1"/><text x="73.4557%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.2057%" y="373" width="0.0797%" height="15" fill="rgb(240,2,33)" fg:x="918" fg:w="1"/><text x="73.4557%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.2057%" y="357" width="0.0797%" height="15" fill="rgb(221,29,45)" fg:x="918" fg:w="1"/><text x="73.4557%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.2057%" y="341" width="0.0797%" height="15" fill="rgb(242,10,19)" fg:x="918" fg:w="1"/><text x="73.4557%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.2057%" y="325" width="0.0797%" height="15" fill="rgb(250,84,37)" fg:x="918" fg:w="1"/><text x="73.4557%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="73.1260%" y="581" width="0.2392%" height="15" fill="rgb(214,136,7)" fg:x="917" fg:w="3"/><text x="73.3760%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="73.2057%" y="565" width="0.1595%" height="15" fill="rgb(231,189,12)" fg:x="918" fg:w="2"/><text x="73.4557%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="73.2057%" y="549" width="0.1595%" height="15" fill="rgb(244,40,16)" fg:x="918" fg:w="2"/><text x="73.4557%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.2855%" y="533" width="0.0797%" height="15" fill="rgb(217,29,15)" fg:x="919" fg:w="1"/><text x="73.5355%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2855%" y="517" width="0.0797%" height="15" fill="rgb(235,172,33)" fg:x="919" fg:w="1"/><text x="73.5355%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.2855%" y="501" width="0.0797%" height="15" fill="rgb(206,148,28)" fg:x="919" fg:w="1"/><text x="73.5355%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2855%" y="485" width="0.0797%" height="15" fill="rgb(251,167,37)" fg:x="919" fg:w="1"/><text x="73.5355%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.2855%" y="469" width="0.0797%" height="15" fill="rgb(229,94,52)" fg:x="919" fg:w="1"/><text x="73.5355%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.3652%" y="565" width="0.0797%" height="15" fill="rgb(216,132,9)" fg:x="920" fg:w="1"/><text x="73.6152%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.3652%" y="549" width="0.0797%" height="15" fill="rgb(208,110,29)" fg:x="920" fg:w="1"/><text x="73.6152%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.3652%" y="533" width="0.0797%" height="15" fill="rgb(241,23,8)" fg:x="920" fg:w="1"/><text x="73.6152%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.3652%" y="517" width="0.0797%" height="15" fill="rgb(208,26,35)" fg:x="920" fg:w="1"/><text x="73.6152%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.3652%" y="501" width="0.0797%" height="15" fill="rgb(242,165,34)" fg:x="920" fg:w="1"/><text x="73.6152%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.3652%" y="485" width="0.0797%" height="15" fill="rgb(222,222,33)" fg:x="920" fg:w="1"/><text x="73.6152%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.3652%" y="469" width="0.0797%" height="15" fill="rgb(227,16,52)" fg:x="920" fg:w="1"/><text x="73.6152%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.3652%" y="453" width="0.0797%" height="15" fill="rgb(213,93,12)" fg:x="920" fg:w="1"/><text x="73.6152%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.3652%" y="437" width="0.0797%" height="15" fill="rgb(238,41,5)" fg:x="920" fg:w="1"/><text x="73.6152%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.3652%" y="421" width="0.0797%" height="15" fill="rgb(211,60,15)" fg:x="920" fg:w="1"/><text x="73.6152%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.3652%" y="405" width="0.0797%" height="15" fill="rgb(209,11,34)" fg:x="920" fg:w="1"/><text x="73.6152%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.3652%" y="389" width="0.0797%" height="15" fill="rgb(254,155,53)" fg:x="920" fg:w="1"/><text x="73.6152%" y="399.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="73.3652%" y="581" width="0.1595%" height="15" fill="rgb(236,174,8)" fg:x="920" fg:w="2"/><text x="73.6152%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.4450%" y="565" width="0.0797%" height="15" fill="rgb(229,31,27)" fg:x="921" fg:w="1"/><text x="73.6950%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.4450%" y="549" width="0.0797%" height="15" fill="rgb(242,226,26)" fg:x="921" fg:w="1"/><text x="73.6950%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.4450%" y="533" width="0.0797%" height="15" fill="rgb(234,32,40)" fg:x="921" fg:w="1"/><text x="73.6950%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.5247%" y="501" width="0.0797%" height="15" fill="rgb(249,226,47)" fg:x="922" fg:w="1"/><text x="73.7747%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.6045%" y="485" width="0.0797%" height="15" fill="rgb(212,6,26)" fg:x="923" fg:w="1"/><text x="73.8545%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.6045%" y="469" width="0.0797%" height="15" fill="rgb(249,202,29)" fg:x="923" fg:w="1"/><text x="73.8545%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="73.6045%" y="453" width="0.0797%" height="15" fill="rgb(226,106,4)" fg:x="923" fg:w="1"/><text x="73.8545%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="73.5247%" y="581" width="0.2392%" height="15" fill="rgb(251,2,27)" fg:x="922" fg:w="3"/><text x="73.7747%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="73.5247%" y="565" width="0.2392%" height="15" fill="rgb(236,208,0)" fg:x="922" fg:w="3"/><text x="73.7747%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.5247%" y="549" width="0.2392%" height="15" fill="rgb(211,66,17)" fg:x="922" fg:w="3"/><text x="73.7747%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="73.5247%" y="533" width="0.2392%" height="15" fill="rgb(216,129,9)" fg:x="922" fg:w="3"/><text x="73.7747%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.5247%" y="517" width="0.2392%" height="15" fill="rgb(215,130,23)" fg:x="922" fg:w="3"/><text x="73.7747%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="73.6045%" y="501" width="0.1595%" height="15" fill="rgb(253,157,11)" fg:x="923" fg:w="2"/><text x="73.8545%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="73.6842%" y="485" width="0.0797%" height="15" fill="rgb(224,25,14)" fg:x="924" fg:w="1"/><text x="73.9342%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.6842%" y="469" width="0.0797%" height="15" fill="rgb(238,16,7)" fg:x="924" fg:w="1"/><text x="73.9342%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="73.6842%" y="453" width="0.0797%" height="15" fill="rgb(228,74,11)" fg:x="924" fg:w="1"/><text x="73.9342%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (928 samples, 74.00%)</title><rect x="0.0000%" y="709" width="74.0032%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="928"/><text x="0.2500%" y="719.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (928 samples, 74.00%)</title><rect x="0.0000%" y="693" width="74.0032%" height="15" fill="rgb(229,166,18)" fg:x="0" fg:w="928"/><text x="0.2500%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (928 samples, 74.00%)</title><rect x="0.0000%" y="677" width="74.0032%" height="15" fill="rgb(254,94,46)" fg:x="0" fg:w="928"/><text x="0.2500%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (689 samples, 54.94%)</title><rect x="19.0590%" y="661" width="54.9442%" height="15" fill="rgb(241,79,19)" fg:x="239" fg:w="689"/><text x="19.3090%" y="671.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (689 samples, 54.94%)</title><rect x="19.0590%" y="645" width="54.9442%" height="15" fill="rgb(228,99,51)" fg:x="239" fg:w="689"/><text x="19.3090%" y="655.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (13 samples, 1.04%)</title><rect x="72.9665%" y="629" width="1.0367%" height="15" fill="rgb(211,15,6)" fg:x="915" fg:w="13"/><text x="73.2165%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.04%)</title><rect x="72.9665%" y="613" width="1.0367%" height="15" fill="rgb(245,107,54)" fg:x="915" fg:w="13"/><text x="73.2165%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.04%)</title><rect x="72.9665%" y="597" width="1.0367%" height="15" fill="rgb(243,3,2)" fg:x="915" fg:w="13"/><text x="73.2165%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="73.7640%" y="581" width="0.2392%" height="15" fill="rgb(206,122,10)" fg:x="925" fg:w="3"/><text x="74.0140%" y="591.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="73.7640%" y="565" width="0.2392%" height="15" fill="rgb(224,88,4)" fg:x="925" fg:w="3"/><text x="74.0140%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="73.7640%" y="549" width="0.2392%" height="15" fill="rgb(230,1,41)" fg:x="925" fg:w="3"/><text x="74.0140%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="73.7640%" y="533" width="0.2392%" height="15" fill="rgb(230,1,31)" fg:x="925" fg:w="3"/><text x="74.0140%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.8437%" y="517" width="0.1595%" height="15" fill="rgb(232,67,19)" fg:x="926" fg:w="2"/><text x="74.0937%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.8437%" y="501" width="0.1595%" height="15" fill="rgb(222,206,20)" fg:x="926" fg:w="2"/><text x="74.0937%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.9234%" y="485" width="0.0797%" height="15" fill="rgb(217,225,19)" fg:x="927" fg:w="1"/><text x="74.1734%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.9234%" y="469" width="0.0797%" height="15" fill="rgb(234,13,33)" fg:x="927" fg:w="1"/><text x="74.1734%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.9234%" y="453" width="0.0797%" height="15" fill="rgb(254,5,1)" fg:x="927" fg:w="1"/><text x="74.1734%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.9234%" y="437" width="0.0797%" height="15" fill="rgb(211,121,41)" fg:x="927" fg:w="1"/><text x="74.1734%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.9234%" y="421" width="0.0797%" height="15" fill="rgb(213,199,35)" fg:x="927" fg:w="1"/><text x="74.1734%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.9234%" y="405" width="0.0797%" height="15" fill="rgb(240,118,22)" fg:x="927" fg:w="1"/><text x="74.1734%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="74.0829%" y="645" width="0.0797%" height="15" fill="rgb(238,184,25)" fg:x="929" fg:w="1"/><text x="74.3329%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.0829%" y="629" width="0.0797%" height="15" fill="rgb(210,165,6)" fg:x="929" fg:w="1"/><text x="74.3329%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.0829%" y="613" width="0.0797%" height="15" fill="rgb(235,149,5)" fg:x="929" fg:w="1"/><text x="74.3329%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.1627%" y="613" width="0.0797%" height="15" fill="rgb(221,63,5)" fg:x="930" fg:w="1"/><text x="74.4127%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.2424%" y="581" width="0.1595%" height="15" fill="rgb(250,44,41)" fg:x="931" fg:w="2"/><text x="74.4924%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.2424%" y="565" width="0.1595%" height="15" fill="rgb(235,112,47)" fg:x="931" fg:w="2"/><text x="74.4924%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.2424%" y="549" width="0.1595%" height="15" fill="rgb(252,176,34)" fg:x="931" fg:w="2"/><text x="74.4924%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.2424%" y="533" width="0.1595%" height="15" fill="rgb(234,50,19)" fg:x="931" fg:w="2"/><text x="74.4924%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.2424%" y="517" width="0.1595%" height="15" fill="rgb(241,195,31)" fg:x="931" fg:w="2"/><text x="74.4924%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="74.2424%" y="501" width="0.1595%" height="15" fill="rgb(212,93,11)" fg:x="931" fg:w="2"/><text x="74.4924%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="74.2424%" y="597" width="0.2392%" height="15" fill="rgb(254,98,51)" fg:x="931" fg:w="3"/><text x="74.4924%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.4019%" y="581" width="0.0797%" height="15" fill="rgb(246,18,45)" fg:x="933" fg:w="1"/><text x="74.6519%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.4019%" y="565" width="0.0797%" height="15" fill="rgb(215,148,23)" fg:x="933" fg:w="1"/><text x="74.6519%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.4019%" y="549" width="0.0797%" height="15" fill="rgb(227,22,7)" fg:x="933" fg:w="1"/><text x="74.6519%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="74.0032%" y="661" width="0.5582%" height="15" fill="rgb(207,210,37)" fg:x="928" fg:w="7"/><text x="74.2532%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (5 samples, 0.40%)</title><rect x="74.1627%" y="645" width="0.3987%" height="15" fill="rgb(247,147,42)" fg:x="930" fg:w="5"/><text x="74.4127%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="74.1627%" y="629" width="0.3987%" height="15" fill="rgb(226,213,14)" fg:x="930" fg:w="5"/><text x="74.4127%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="74.2424%" y="613" width="0.3190%" height="15" fill="rgb(223,18,10)" fg:x="931" fg:w="4"/><text x="74.4924%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.4817%" y="597" width="0.0797%" height="15" fill="rgb(253,34,22)" fg:x="934" fg:w="1"/><text x="74.7317%" y="607.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="74.6411%" y="549" width="0.0797%" height="15" fill="rgb(222,90,31)" fg:x="936" fg:w="1"/><text x="74.8911%" y="559.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="74.6411%" y="533" width="0.0797%" height="15" fill="rgb(220,182,30)" fg:x="936" fg:w="1"/><text x="74.8911%" y="543.50"></text></g><g><title>_IO_setb (1 samples, 0.08%)</title><rect x="74.6411%" y="517" width="0.0797%" height="15" fill="rgb(229,170,12)" fg:x="936" fg:w="1"/><text x="74.8911%" y="527.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (6 samples, 0.48%)</title><rect x="74.5614%" y="661" width="0.4785%" height="15" fill="rgb(210,101,21)" fg:x="935" fg:w="6"/><text x="74.8114%" y="671.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (6 samples, 0.48%)</title><rect x="74.5614%" y="645" width="0.4785%" height="15" fill="rgb(237,177,31)" fg:x="935" fg:w="6"/><text x="74.8114%" y="655.50"></text></g><g><title>engine::session::Session::new (6 samples, 0.48%)</title><rect x="74.5614%" y="629" width="0.4785%" height="15" fill="rgb(215,91,34)" fg:x="935" fg:w="6"/><text x="74.8114%" y="639.50"></text></g><g><title>engine::session::Session::initialize (6 samples, 0.48%)</title><rect x="74.5614%" y="613" width="0.4785%" height="15" fill="rgb(229,206,16)" fg:x="935" fg:w="6"/><text x="74.8114%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (6 samples, 0.48%)</title><rect x="74.5614%" y="597" width="0.4785%" height="15" fill="rgb(235,207,10)" fg:x="935" fg:w="6"/><text x="74.8114%" y="607.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="74.5614%" y="581" width="0.4785%" height="15" fill="rgb(247,18,10)" fg:x="935" fg:w="6"/><text x="74.8114%" y="591.50"></text></g><g><title>libloading::safe::Library::new (6 samples, 0.48%)</title><rect x="74.5614%" y="565" width="0.4785%" height="15" fill="rgb(232,4,6)" fg:x="935" fg:w="6"/><text x="74.8114%" y="575.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="74.7209%" y="549" width="0.3190%" height="15" fill="rgb(247,93,45)" fg:x="937" fg:w="4"/><text x="74.9709%" y="559.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="74.7209%" y="533" width="0.3190%" height="15" fill="rgb(240,181,18)" fg:x="937" fg:w="4"/><text x="74.9709%" y="543.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="74.7209%" y="517" width="0.3190%" height="15" fill="rgb(208,224,0)" fg:x="937" fg:w="4"/><text x="74.9709%" y="527.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="74.7209%" y="501" width="0.3190%" height="15" fill="rgb(224,207,54)" fg:x="937" fg:w="4"/><text x="74.9709%" y="511.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="74.7209%" y="485" width="0.3190%" height="15" fill="rgb(217,152,29)" fg:x="937" fg:w="4"/><text x="74.9709%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.9601%" y="469" width="0.0797%" height="15" fill="rgb(243,78,27)" fg:x="940" fg:w="1"/><text x="75.2101%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="75.0399%" y="629" width="0.0797%" height="15" fill="rgb(228,111,9)" fg:x="941" fg:w="1"/><text x="75.2899%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.0399%" y="613" width="0.0797%" height="15" fill="rgb(230,213,21)" fg:x="941" fg:w="1"/><text x="75.2899%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="75.1196%" y="549" width="0.0797%" height="15" fill="rgb(248,50,36)" fg:x="942" fg:w="1"/><text x="75.3696%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="75.1196%" y="533" width="0.0797%" height="15" fill="rgb(226,19,31)" fg:x="942" fg:w="1"/><text x="75.3696%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.1196%" y="517" width="0.0797%" height="15" fill="rgb(205,132,21)" fg:x="942" fg:w="1"/><text x="75.3696%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.1196%" y="501" width="0.0797%" height="15" fill="rgb(207,42,19)" fg:x="942" fg:w="1"/><text x="75.3696%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.1196%" y="485" width="0.0797%" height="15" fill="rgb(229,69,35)" fg:x="942" fg:w="1"/><text x="75.3696%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.1196%" y="469" width="0.0797%" height="15" fill="rgb(226,96,11)" fg:x="942" fg:w="1"/><text x="75.3696%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.1994%" y="485" width="0.0797%" height="15" fill="rgb(236,133,54)" fg:x="943" fg:w="1"/><text x="75.4494%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="75.1994%" y="469" width="0.0797%" height="15" fill="rgb(247,166,21)" fg:x="943" fg:w="1"/><text x="75.4494%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="75.1994%" y="549" width="0.1595%" height="15" fill="rgb(220,132,12)" fg:x="943" fg:w="2"/><text x="75.4494%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="75.1994%" y="533" width="0.1595%" height="15" fill="rgb(233,27,30)" fg:x="943" fg:w="2"/><text x="75.4494%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="75.1994%" y="517" width="0.1595%" height="15" fill="rgb(246,161,27)" fg:x="943" fg:w="2"/><text x="75.4494%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="75.1994%" y="501" width="0.1595%" height="15" fill="rgb(240,56,3)" fg:x="943" fg:w="2"/><text x="75.4494%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.2791%" y="485" width="0.0797%" height="15" fill="rgb(242,190,9)" fg:x="944" fg:w="1"/><text x="75.5291%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.2791%" y="469" width="0.0797%" height="15" fill="rgb(234,3,52)" fg:x="944" fg:w="1"/><text x="75.5291%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="75.4386%" y="485" width="0.0797%" height="15" fill="rgb(220,221,19)" fg:x="946" fg:w="1"/><text x="75.6886%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.4386%" y="469" width="0.0797%" height="15" fill="rgb(247,178,30)" fg:x="946" fg:w="1"/><text x="75.6886%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.4386%" y="453" width="0.0797%" height="15" fill="rgb(234,212,27)" fg:x="946" fg:w="1"/><text x="75.6886%" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="75.5183%" y="485" width="0.0797%" height="15" fill="rgb(226,199,38)" fg:x="947" fg:w="1"/><text x="75.7683%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="75.5183%" y="469" width="0.0797%" height="15" fill="rgb(248,114,22)" fg:x="947" fg:w="1"/><text x="75.7683%" y="479.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.64%)</title><rect x="75.0399%" y="645" width="0.6380%" height="15" fill="rgb(221,180,4)" fg:x="941" fg:w="8"/><text x="75.2899%" y="655.50"></text></g><g><title>engine::session::state::State::close (7 samples, 0.56%)</title><rect x="75.1196%" y="629" width="0.5582%" height="15" fill="rgb(220,229,24)" fg:x="942" fg:w="7"/><text x="75.3696%" y="639.50"></text></g><g><title>engine::session::state::State::flush_entities (7 samples, 0.56%)</title><rect x="75.1196%" y="613" width="0.5582%" height="15" fill="rgb(226,184,27)" fg:x="942" fg:w="7"/><text x="75.3696%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (7 samples, 0.56%)</title><rect x="75.1196%" y="597" width="0.5582%" height="15" fill="rgb(232,99,15)" fg:x="942" fg:w="7"/><text x="75.3696%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="75.1196%" y="581" width="0.5582%" height="15" fill="rgb(250,167,16)" fg:x="942" fg:w="7"/><text x="75.3696%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (7 samples, 0.56%)</title><rect x="75.1196%" y="565" width="0.5582%" height="15" fill="rgb(243,113,6)" fg:x="942" fg:w="7"/><text x="75.3696%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="75.3589%" y="549" width="0.3190%" height="15" fill="rgb(244,147,52)" fg:x="945" fg:w="4"/><text x="75.6089%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="75.3589%" y="533" width="0.3190%" height="15" fill="rgb(235,59,50)" fg:x="945" fg:w="4"/><text x="75.6089%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="75.3589%" y="517" width="0.3190%" height="15" fill="rgb(250,188,6)" fg:x="945" fg:w="4"/><text x="75.6089%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="75.3589%" y="501" width="0.3190%" height="15" fill="rgb(236,173,11)" fg:x="945" fg:w="4"/><text x="75.6089%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.5981%" y="485" width="0.0797%" height="15" fill="rgb(233,64,3)" fg:x="948" fg:w="1"/><text x="75.8481%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.5981%" y="469" width="0.0797%" height="15" fill="rgb(207,92,7)" fg:x="948" fg:w="1"/><text x="75.8481%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.5981%" y="453" width="0.0797%" height="15" fill="rgb(221,30,19)" fg:x="948" fg:w="1"/><text x="75.8481%" y="463.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="75.6778%" y="645" width="0.0797%" height="15" fill="rgb(245,22,49)" fg:x="949" fg:w="1"/><text x="75.9278%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="75.6778%" y="629" width="0.0797%" height="15" fill="rgb(218,39,20)" fg:x="949" fg:w="1"/><text x="75.9278%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="75.6778%" y="613" width="0.0797%" height="15" fill="rgb(222,144,21)" fg:x="949" fg:w="1"/><text x="75.9278%" y="623.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="75.6778%" y="597" width="0.0797%" height="15" fill="rgb(222,78,51)" fg:x="949" fg:w="1"/><text x="75.9278%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="75.7576%" y="613" width="0.0797%" height="15" fill="rgb(248,213,53)" fg:x="950" fg:w="1"/><text x="76.0076%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="75.7576%" y="597" width="0.0797%" height="15" fill="rgb(245,28,34)" fg:x="950" fg:w="1"/><text x="76.0076%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.7576%" y="581" width="0.0797%" height="15" fill="rgb(229,186,26)" fg:x="950" fg:w="1"/><text x="76.0076%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.7576%" y="565" width="0.0797%" height="15" fill="rgb(224,0,41)" fg:x="950" fg:w="1"/><text x="76.0076%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.7576%" y="549" width="0.0797%" height="15" fill="rgb(223,136,51)" fg:x="950" fg:w="1"/><text x="76.0076%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.7576%" y="533" width="0.0797%" height="15" fill="rgb(234,50,9)" fg:x="950" fg:w="1"/><text x="76.0076%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7576%" y="517" width="0.0797%" height="15" fill="rgb(242,164,20)" fg:x="950" fg:w="1"/><text x="76.0076%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.7576%" y="501" width="0.0797%" height="15" fill="rgb(230,169,22)" fg:x="950" fg:w="1"/><text x="76.0076%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7576%" y="485" width="0.0797%" height="15" fill="rgb(228,82,26)" fg:x="950" fg:w="1"/><text x="76.0076%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.7576%" y="469" width="0.0797%" height="15" fill="rgb(244,220,31)" fg:x="950" fg:w="1"/><text x="76.0076%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7576%" y="453" width="0.0797%" height="15" fill="rgb(214,35,25)" fg:x="950" fg:w="1"/><text x="76.0076%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.7576%" y="437" width="0.0797%" height="15" fill="rgb(245,162,54)" fg:x="950" fg:w="1"/><text x="76.0076%" y="447.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (2 samples, 0.16%)</title><rect x="75.7576%" y="645" width="0.1595%" height="15" fill="rgb(210,43,24)" fg:x="950" fg:w="2"/><text x="76.0076%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="75.7576%" y="629" width="0.1595%" height="15" fill="rgb(226,145,51)" fg:x="950" fg:w="2"/><text x="76.0076%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="75.8373%" y="613" width="0.0797%" height="15" fill="rgb(237,52,53)" fg:x="951" fg:w="1"/><text x="76.0873%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.8373%" y="597" width="0.0797%" height="15" fill="rgb(216,226,7)" fg:x="951" fg:w="1"/><text x="76.0873%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8373%" y="581" width="0.0797%" height="15" fill="rgb(206,223,18)" fg:x="951" fg:w="1"/><text x="76.0873%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8373%" y="565" width="0.0797%" height="15" fill="rgb(221,1,10)" fg:x="951" fg:w="1"/><text x="76.0873%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8373%" y="549" width="0.0797%" height="15" fill="rgb(221,151,42)" fg:x="951" fg:w="1"/><text x="76.0873%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="75.9171%" y="629" width="0.0797%" height="15" fill="rgb(205,183,46)" fg:x="952" fg:w="1"/><text x="76.1671%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="75.9171%" y="613" width="0.0797%" height="15" fill="rgb(239,229,1)" fg:x="952" fg:w="1"/><text x="76.1671%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="75.9171%" y="597" width="0.0797%" height="15" fill="rgb(236,192,23)" fg:x="952" fg:w="1"/><text x="76.1671%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="75.9171%" y="581" width="0.0797%" height="15" fill="rgb(215,146,3)" fg:x="952" fg:w="1"/><text x="76.1671%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="75.9968%" y="629" width="0.0797%" height="15" fill="rgb(235,52,27)" fg:x="953" fg:w="1"/><text x="76.2468%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.9968%" y="613" width="0.0797%" height="15" fill="rgb(236,45,20)" fg:x="953" fg:w="1"/><text x="76.2468%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="75.9968%" y="597" width="0.0797%" height="15" fill="rgb(235,86,41)" fg:x="953" fg:w="1"/><text x="76.2468%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="75.9968%" y="581" width="0.0797%" height="15" fill="rgb(235,27,27)" fg:x="953" fg:w="1"/><text x="76.2468%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="75.9968%" y="565" width="0.0797%" height="15" fill="rgb(232,4,34)" fg:x="953" fg:w="1"/><text x="76.2468%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.9968%" y="549" width="0.0797%" height="15" fill="rgb(215,22,10)" fg:x="953" fg:w="1"/><text x="76.2468%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.9968%" y="533" width="0.0797%" height="15" fill="rgb(230,228,27)" fg:x="953" fg:w="1"/><text x="76.2468%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.9968%" y="517" width="0.0797%" height="15" fill="rgb(216,26,51)" fg:x="953" fg:w="1"/><text x="76.2468%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.9968%" y="501" width="0.0797%" height="15" fill="rgb(225,180,50)" fg:x="953" fg:w="1"/><text x="76.2468%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.9968%" y="485" width="0.0797%" height="15" fill="rgb(236,211,2)" fg:x="953" fg:w="1"/><text x="76.2468%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.9968%" y="469" width="0.0797%" height="15" fill="rgb(250,51,20)" fg:x="953" fg:w="1"/><text x="76.2468%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.9968%" y="453" width="0.0797%" height="15" fill="rgb(232,70,37)" fg:x="953" fg:w="1"/><text x="76.2468%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.9968%" y="437" width="0.0797%" height="15" fill="rgb(226,183,39)" fg:x="953" fg:w="1"/><text x="76.2468%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.9968%" y="421" width="0.0797%" height="15" fill="rgb(232,228,21)" fg:x="953" fg:w="1"/><text x="76.2468%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.9968%" y="405" width="0.0797%" height="15" fill="rgb(251,118,32)" fg:x="953" fg:w="1"/><text x="76.2468%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.9968%" y="389" width="0.0797%" height="15" fill="rgb(235,172,38)" fg:x="953" fg:w="1"/><text x="76.2468%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.9968%" y="373" width="0.0797%" height="15" fill="rgb(235,63,18)" fg:x="953" fg:w="1"/><text x="76.2468%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.9968%" y="357" width="0.0797%" height="15" fill="rgb(225,4,7)" fg:x="953" fg:w="1"/><text x="76.2468%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.9968%" y="341" width="0.0797%" height="15" fill="rgb(231,61,1)" fg:x="953" fg:w="1"/><text x="76.2468%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.9968%" y="325" width="0.0797%" height="15" fill="rgb(241,155,22)" fg:x="953" fg:w="1"/><text x="76.2468%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.9968%" y="309" width="0.0797%" height="15" fill="rgb(209,100,26)" fg:x="953" fg:w="1"/><text x="76.2468%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.9968%" y="293" width="0.0797%" height="15" fill="rgb(248,181,15)" fg:x="953" fg:w="1"/><text x="76.2468%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9968%" y="277" width="0.0797%" height="15" fill="rgb(214,94,31)" fg:x="953" fg:w="1"/><text x="76.2468%" y="287.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="76.0766%" y="501" width="0.0797%" height="15" fill="rgb(207,16,42)" fg:x="954" fg:w="1"/><text x="76.3266%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.0766%" y="485" width="0.0797%" height="15" fill="rgb(208,127,13)" fg:x="954" fg:w="1"/><text x="76.3266%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.0766%" y="469" width="0.0797%" height="15" fill="rgb(220,211,18)" fg:x="954" fg:w="1"/><text x="76.3266%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.0766%" y="453" width="0.0797%" height="15" fill="rgb(221,55,38)" fg:x="954" fg:w="1"/><text x="76.3266%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.0766%" y="437" width="0.0797%" height="15" fill="rgb(252,219,45)" fg:x="954" fg:w="1"/><text x="76.3266%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.1563%" y="469" width="0.0797%" height="15" fill="rgb(248,53,35)" fg:x="955" fg:w="1"/><text x="76.4063%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1563%" y="453" width="0.0797%" height="15" fill="rgb(210,87,2)" fg:x="955" fg:w="1"/><text x="76.4063%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.1563%" y="437" width="0.0797%" height="15" fill="rgb(239,133,9)" fg:x="955" fg:w="1"/><text x="76.4063%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="76.2360%" y="469" width="0.1595%" height="15" fill="rgb(214,114,5)" fg:x="956" fg:w="2"/><text x="76.4860%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.3158%" y="453" width="0.0797%" height="15" fill="rgb(206,124,24)" fg:x="957" fg:w="1"/><text x="76.5658%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.3158%" y="437" width="0.0797%" height="15" fill="rgb(212,57,33)" fg:x="957" fg:w="1"/><text x="76.5658%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.3158%" y="421" width="0.0797%" height="15" fill="rgb(246,21,20)" fg:x="957" fg:w="1"/><text x="76.5658%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.3955%" y="469" width="0.0797%" height="15" fill="rgb(253,210,39)" fg:x="958" fg:w="1"/><text x="76.6455%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.3955%" y="453" width="0.0797%" height="15" fill="rgb(209,187,24)" fg:x="958" fg:w="1"/><text x="76.6455%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.3955%" y="437" width="0.0797%" height="15" fill="rgb(246,136,17)" fg:x="958" fg:w="1"/><text x="76.6455%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.3955%" y="421" width="0.0797%" height="15" fill="rgb(211,0,30)" fg:x="958" fg:w="1"/><text x="76.6455%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.3955%" y="405" width="0.0797%" height="15" fill="rgb(216,199,7)" fg:x="958" fg:w="1"/><text x="76.6455%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.3955%" y="389" width="0.0797%" height="15" fill="rgb(207,210,19)" fg:x="958" fg:w="1"/><text x="76.6455%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.3955%" y="373" width="0.0797%" height="15" fill="rgb(237,187,39)" fg:x="958" fg:w="1"/><text x="76.6455%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.3955%" y="357" width="0.0797%" height="15" fill="rgb(243,194,42)" fg:x="958" fg:w="1"/><text x="76.6455%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.3955%" y="341" width="0.0797%" height="15" fill="rgb(225,194,19)" fg:x="958" fg:w="1"/><text x="76.6455%" y="351.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="76.0766%" y="517" width="0.4785%" height="15" fill="rgb(224,192,14)" fg:x="954" fg:w="6"/><text x="76.3266%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="76.1563%" y="501" width="0.3987%" height="15" fill="rgb(252,21,18)" fg:x="955" fg:w="5"/><text x="76.4063%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="76.1563%" y="485" width="0.3987%" height="15" fill="rgb(229,69,19)" fg:x="955" fg:w="5"/><text x="76.4063%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.4753%" y="469" width="0.0797%" height="15" fill="rgb(251,31,53)" fg:x="959" fg:w="1"/><text x="76.7253%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5550%" y="469" width="0.0797%" height="15" fill="rgb(218,39,50)" fg:x="960" fg:w="1"/><text x="76.8050%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.5550%" y="453" width="0.0797%" height="15" fill="rgb(231,50,17)" fg:x="960" fg:w="1"/><text x="76.8050%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.5550%" y="437" width="0.0797%" height="15" fill="rgb(223,217,31)" fg:x="960" fg:w="1"/><text x="76.8050%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6348%" y="421" width="0.0797%" height="15" fill="rgb(225,91,12)" fg:x="961" fg:w="1"/><text x="76.8848%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6348%" y="405" width="0.0797%" height="15" fill="rgb(242,58,43)" fg:x="961" fg:w="1"/><text x="76.8848%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6348%" y="389" width="0.0797%" height="15" fill="rgb(242,32,21)" fg:x="961" fg:w="1"/><text x="76.8848%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.7145%" y="373" width="0.0797%" height="15" fill="rgb(211,127,1)" fg:x="962" fg:w="1"/><text x="76.9645%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.7145%" y="357" width="0.0797%" height="15" fill="rgb(231,93,13)" fg:x="962" fg:w="1"/><text x="76.9645%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="76.6348%" y="453" width="0.2392%" height="15" fill="rgb(218,83,4)" fg:x="961" fg:w="3"/><text x="76.8848%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="76.6348%" y="437" width="0.2392%" height="15" fill="rgb(230,218,10)" fg:x="961" fg:w="3"/><text x="76.8848%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="76.7145%" y="421" width="0.1595%" height="15" fill="rgb(235,127,18)" fg:x="962" fg:w="2"/><text x="76.9645%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="76.7145%" y="405" width="0.1595%" height="15" fill="rgb(213,137,46)" fg:x="962" fg:w="2"/><text x="76.9645%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="76.7145%" y="389" width="0.1595%" height="15" fill="rgb(235,179,24)" fg:x="962" fg:w="2"/><text x="76.9645%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7943%" y="373" width="0.0797%" height="15" fill="rgb(247,58,49)" fg:x="963" fg:w="1"/><text x="77.0443%" y="383.50"></text></g><g><title>engine::session::Session::flush (11 samples, 0.88%)</title><rect x="76.0766%" y="629" width="0.8772%" height="15" fill="rgb(242,222,5)" fg:x="954" fg:w="11"/><text x="76.3266%" y="639.50"></text></g><g><title>engine::session::Session::save_changes (11 samples, 0.88%)</title><rect x="76.0766%" y="613" width="0.8772%" height="15" fill="rgb(230,16,48)" fg:x="954" fg:w="11"/><text x="76.3266%" y="623.50"></text></g><g><title>engine::session::state::State::close (11 samples, 0.88%)</title><rect x="76.0766%" y="597" width="0.8772%" height="15" fill="rgb(241,192,16)" fg:x="954" fg:w="11"/><text x="76.3266%" y="607.50"></text></g><g><title>engine::session::state::State::flush_entities (11 samples, 0.88%)</title><rect x="76.0766%" y="581" width="0.8772%" height="15" fill="rgb(209,25,37)" fg:x="954" fg:w="11"/><text x="76.3266%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (11 samples, 0.88%)</title><rect x="76.0766%" y="565" width="0.8772%" height="15" fill="rgb(229,215,13)" fg:x="954" fg:w="11"/><text x="76.3266%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.88%)</title><rect x="76.0766%" y="549" width="0.8772%" height="15" fill="rgb(213,199,8)" fg:x="954" fg:w="11"/><text x="76.3266%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (11 samples, 0.88%)</title><rect x="76.0766%" y="533" width="0.8772%" height="15" fill="rgb(226,151,19)" fg:x="954" fg:w="11"/><text x="76.3266%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="76.5550%" y="517" width="0.3987%" height="15" fill="rgb(254,183,12)" fg:x="960" fg:w="5"/><text x="76.8050%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="76.5550%" y="501" width="0.3987%" height="15" fill="rgb(245,8,3)" fg:x="960" fg:w="5"/><text x="76.8050%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="76.5550%" y="485" width="0.3987%" height="15" fill="rgb(229,159,35)" fg:x="960" fg:w="5"/><text x="76.8050%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="76.6348%" y="469" width="0.3190%" height="15" fill="rgb(209,145,1)" fg:x="961" fg:w="4"/><text x="76.8848%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.8740%" y="453" width="0.0797%" height="15" fill="rgb(228,183,16)" fg:x="964" fg:w="1"/><text x="77.1240%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.8740%" y="437" width="0.0797%" height="15" fill="rgb(222,68,0)" fg:x="964" fg:w="1"/><text x="77.1240%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8740%" y="421" width="0.0797%" height="15" fill="rgb(209,130,50)" fg:x="964" fg:w="1"/><text x="77.1240%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.9537%" y="597" width="0.0797%" height="15" fill="rgb(228,176,44)" fg:x="965" fg:w="1"/><text x="77.2037%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.9537%" y="581" width="0.0797%" height="15" fill="rgb(221,164,2)" fg:x="965" fg:w="1"/><text x="77.2037%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="76.9537%" y="565" width="0.0797%" height="15" fill="rgb(249,199,49)" fg:x="965" fg:w="1"/><text x="77.2037%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.9537%" y="549" width="0.0797%" height="15" fill="rgb(228,205,53)" fg:x="965" fg:w="1"/><text x="77.2037%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.9537%" y="533" width="0.0797%" height="15" fill="rgb(235,77,20)" fg:x="965" fg:w="1"/><text x="77.2037%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.9537%" y="517" width="0.0797%" height="15" fill="rgb(227,147,34)" fg:x="965" fg:w="1"/><text x="77.2037%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.9537%" y="501" width="0.0797%" height="15" fill="rgb(226,203,52)" fg:x="965" fg:w="1"/><text x="77.2037%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="76.9537%" y="629" width="0.1595%" height="15" fill="rgb(226,186,23)" fg:x="965" fg:w="2"/><text x="77.2037%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="76.9537%" y="613" width="0.1595%" height="15" fill="rgb(236,13,30)" fg:x="965" fg:w="2"/><text x="77.2037%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="77.0335%" y="597" width="0.0797%" height="15" fill="rgb(228,121,22)" fg:x="966" fg:w="1"/><text x="77.2835%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="77.0335%" y="581" width="0.0797%" height="15" fill="rgb(248,222,26)" fg:x="966" fg:w="1"/><text x="77.2835%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.0335%" y="565" width="0.0797%" height="15" fill="rgb(251,72,25)" fg:x="966" fg:w="1"/><text x="77.2835%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0335%" y="549" width="0.0797%" height="15" fill="rgb(223,114,24)" fg:x="966" fg:w="1"/><text x="77.2835%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (1 samples, 0.08%)</title><rect x="77.1132%" y="629" width="0.0797%" height="15" fill="rgb(232,190,43)" fg:x="967" fg:w="1"/><text x="77.3632%" y="639.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="77.1132%" y="613" width="0.0797%" height="15" fill="rgb(208,90,0)" fg:x="967" fg:w="1"/><text x="77.3632%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="77.1132%" y="597" width="0.0797%" height="15" fill="rgb(234,149,31)" fg:x="967" fg:w="1"/><text x="77.3632%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="77.1132%" y="581" width="0.0797%" height="15" fill="rgb(235,188,36)" fg:x="967" fg:w="1"/><text x="77.3632%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.1132%" y="565" width="0.0797%" height="15" fill="rgb(219,59,51)" fg:x="967" fg:w="1"/><text x="77.3632%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.1132%" y="549" width="0.0797%" height="15" fill="rgb(236,101,40)" fg:x="967" fg:w="1"/><text x="77.3632%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.1132%" y="533" width="0.0797%" height="15" fill="rgb(235,33,7)" fg:x="967" fg:w="1"/><text x="77.3632%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.1132%" y="517" width="0.0797%" height="15" fill="rgb(213,169,26)" fg:x="967" fg:w="1"/><text x="77.3632%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.1132%" y="501" width="0.0797%" height="15" fill="rgb(218,99,34)" fg:x="967" fg:w="1"/><text x="77.3632%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.1132%" y="485" width="0.0797%" height="15" fill="rgb(210,57,24)" fg:x="967" fg:w="1"/><text x="77.3632%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.1132%" y="469" width="0.0797%" height="15" fill="rgb(231,181,54)" fg:x="967" fg:w="1"/><text x="77.3632%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.1930%" y="597" width="0.0797%" height="15" fill="rgb(251,188,48)" fg:x="968" fg:w="1"/><text x="77.4430%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.1930%" y="581" width="0.0797%" height="15" fill="rgb(243,12,45)" fg:x="968" fg:w="1"/><text x="77.4430%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1930%" y="565" width="0.0797%" height="15" fill="rgb(250,197,9)" fg:x="968" fg:w="1"/><text x="77.4430%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (18 samples, 1.44%)</title><rect x="75.9171%" y="645" width="1.4354%" height="15" fill="rgb(235,149,35)" fg:x="952" fg:w="18"/><text x="76.1671%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="77.1930%" y="629" width="0.1595%" height="15" fill="rgb(219,27,19)" fg:x="968" fg:w="2"/><text x="77.4430%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="77.1930%" y="613" width="0.1595%" height="15" fill="rgb(244,78,31)" fg:x="968" fg:w="2"/><text x="77.4430%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="77.2727%" y="597" width="0.0797%" height="15" fill="rgb(241,13,4)" fg:x="969" fg:w="1"/><text x="77.5227%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="77.2727%" y="581" width="0.0797%" height="15" fill="rgb(212,194,26)" fg:x="969" fg:w="1"/><text x="77.5227%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.2727%" y="565" width="0.0797%" height="15" fill="rgb(236,80,11)" fg:x="969" fg:w="1"/><text x="77.5227%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.2727%" y="549" width="0.0797%" height="15" fill="rgb(206,1,24)" fg:x="969" fg:w="1"/><text x="77.5227%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.2727%" y="533" width="0.0797%" height="15" fill="rgb(238,215,50)" fg:x="969" fg:w="1"/><text x="77.5227%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.2727%" y="517" width="0.0797%" height="15" fill="rgb(254,126,32)" fg:x="969" fg:w="1"/><text x="77.5227%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="77.3525%" y="613" width="0.0797%" height="15" fill="rgb(206,111,53)" fg:x="970" fg:w="1"/><text x="77.6025%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="77.3525%" y="597" width="0.0797%" height="15" fill="rgb(218,72,44)" fg:x="970" fg:w="1"/><text x="77.6025%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="77.3525%" y="581" width="0.0797%" height="15" fill="rgb(238,25,3)" fg:x="970" fg:w="1"/><text x="77.6025%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.3525%" y="565" width="0.0797%" height="15" fill="rgb(250,191,7)" fg:x="970" fg:w="1"/><text x="77.6025%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="77.3525%" y="549" width="0.0797%" height="15" fill="rgb(238,56,30)" fg:x="970" fg:w="1"/><text x="77.6025%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3525%" y="533" width="0.0797%" height="15" fill="rgb(210,27,45)" fg:x="970" fg:w="1"/><text x="77.6025%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3525%" y="517" width="0.0797%" height="15" fill="rgb(207,10,50)" fg:x="970" fg:w="1"/><text x="77.6025%" y="527.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="77.4322%" y="613" width="0.0797%" height="15" fill="rgb(249,30,23)" fg:x="971" fg:w="1"/><text x="77.6822%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="77.4322%" y="597" width="0.0797%" height="15" fill="rgb(250,80,12)" fg:x="971" fg:w="1"/><text x="77.6822%" y="607.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="77.4322%" y="581" width="0.0797%" height="15" fill="rgb(210,221,37)" fg:x="971" fg:w="1"/><text x="77.6822%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="77.4322%" y="565" width="0.0797%" height="15" fill="rgb(205,96,24)" fg:x="971" fg:w="1"/><text x="77.6822%" y="575.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="77.4322%" y="549" width="0.0797%" height="15" fill="rgb(247,104,22)" fg:x="971" fg:w="1"/><text x="77.6822%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="77.4322%" y="533" width="0.0797%" height="15" fill="rgb(222,61,53)" fg:x="971" fg:w="1"/><text x="77.6822%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.4322%" y="517" width="0.0797%" height="15" fill="rgb(241,11,53)" fg:x="971" fg:w="1"/><text x="77.6822%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.4322%" y="501" width="0.0797%" height="15" fill="rgb(230,111,47)" fg:x="971" fg:w="1"/><text x="77.6822%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.4322%" y="485" width="0.0797%" height="15" fill="rgb(218,187,29)" fg:x="971" fg:w="1"/><text x="77.6822%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.4322%" y="469" width="0.0797%" height="15" fill="rgb(210,121,46)" fg:x="971" fg:w="1"/><text x="77.6822%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.4322%" y="453" width="0.0797%" height="15" fill="rgb(250,43,19)" fg:x="971" fg:w="1"/><text x="77.6822%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.4322%" y="437" width="0.0797%" height="15" fill="rgb(238,61,12)" fg:x="971" fg:w="1"/><text x="77.6822%" y="447.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="77.3525%" y="645" width="0.2392%" height="15" fill="rgb(251,198,9)" fg:x="970" fg:w="3"/><text x="77.6025%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="77.3525%" y="629" width="0.2392%" height="15" fill="rgb(214,192,38)" fg:x="970" fg:w="3"/><text x="77.6025%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="77.5120%" y="613" width="0.0797%" height="15" fill="rgb(214,73,19)" fg:x="972" fg:w="1"/><text x="77.7620%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="77.5120%" y="597" width="0.0797%" height="15" fill="rgb(249,222,49)" fg:x="972" fg:w="1"/><text x="77.7620%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="77.5120%" y="581" width="0.0797%" height="15" fill="rgb(231,181,54)" fg:x="972" fg:w="1"/><text x="77.7620%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5120%" y="565" width="0.0797%" height="15" fill="rgb(240,1,13)" fg:x="972" fg:w="1"/><text x="77.7620%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.5120%" y="549" width="0.0797%" height="15" fill="rgb(225,21,16)" fg:x="972" fg:w="1"/><text x="77.7620%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="77.5120%" y="533" width="0.0797%" height="15" fill="rgb(246,176,50)" fg:x="972" fg:w="1"/><text x="77.7620%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="77.5917%" y="629" width="0.0797%" height="15" fill="rgb(208,96,50)" fg:x="973" fg:w="1"/><text x="77.8417%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="77.5917%" y="613" width="0.0797%" height="15" fill="rgb(240,219,19)" fg:x="973" fg:w="1"/><text x="77.8417%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5917%" y="597" width="0.0797%" height="15" fill="rgb(234,73,5)" fg:x="973" fg:w="1"/><text x="77.8417%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.5917%" y="581" width="0.0797%" height="15" fill="rgb(225,52,53)" fg:x="973" fg:w="1"/><text x="77.8417%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5917%" y="565" width="0.0797%" height="15" fill="rgb(250,12,14)" fg:x="973" fg:w="1"/><text x="77.8417%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5917%" y="549" width="0.0797%" height="15" fill="rgb(242,185,54)" fg:x="973" fg:w="1"/><text x="77.8417%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5917%" y="533" width="0.0797%" height="15" fill="rgb(211,206,31)" fg:x="973" fg:w="1"/><text x="77.8417%" y="543.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="77.6715%" y="629" width="0.0797%" height="15" fill="rgb(252,10,33)" fg:x="974" fg:w="1"/><text x="77.9215%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="77.6715%" y="613" width="0.0797%" height="15" fill="rgb(216,26,7)" fg:x="974" fg:w="1"/><text x="77.9215%" y="623.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="77.7512%" y="597" width="0.0797%" height="15" fill="rgb(228,112,40)" fg:x="975" fg:w="1"/><text x="78.0012%" y="607.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="77.8309%" y="549" width="0.0797%" height="15" fill="rgb(212,21,16)" fg:x="976" fg:w="1"/><text x="78.0809%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="77.7512%" y="613" width="0.2392%" height="15" fill="rgb(249,3,29)" fg:x="975" fg:w="3"/><text x="78.0012%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="77.8309%" y="597" width="0.1595%" height="15" fill="rgb(221,42,51)" fg:x="976" fg:w="2"/><text x="78.0809%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="77.8309%" y="581" width="0.1595%" height="15" fill="rgb(225,90,21)" fg:x="976" fg:w="2"/><text x="78.0809%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="77.8309%" y="565" width="0.1595%" height="15" fill="rgb(242,131,5)" fg:x="976" fg:w="2"/><text x="78.0809%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9107%" y="549" width="0.0797%" height="15" fill="rgb(220,187,28)" fg:x="977" fg:w="1"/><text x="78.1607%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.9107%" y="533" width="0.0797%" height="15" fill="rgb(210,75,48)" fg:x="977" fg:w="1"/><text x="78.1607%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9107%" y="517" width="0.0797%" height="15" fill="rgb(211,91,40)" fg:x="977" fg:w="1"/><text x="78.1607%" y="527.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (38 samples, 3.03%)</title><rect x="75.0399%" y="661" width="3.0303%" height="15" fill="rgb(205,43,18)" fg:x="941" fg:w="38"/><text x="75.2899%" y="671.50">&lt;te..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (6 samples, 0.48%)</title><rect x="77.5917%" y="645" width="0.4785%" height="15" fill="rgb(207,123,11)" fg:x="973" fg:w="6"/><text x="77.8417%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="77.7512%" y="629" width="0.3190%" height="15" fill="rgb(235,89,39)" fg:x="975" fg:w="4"/><text x="78.0012%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.9904%" y="613" width="0.0797%" height="15" fill="rgb(245,217,27)" fg:x="978" fg:w="1"/><text x="78.2404%" y="623.50"></text></g><g><title>&lt;F as clap_builder::builder::value_parser::TypedValueParser&gt;::parse_ref (1 samples, 0.08%)</title><rect x="78.0702%" y="629" width="0.0797%" height="15" fill="rgb(216,55,17)" fg:x="979" fg:w="1"/><text x="78.3202%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.1499%" y="629" width="0.0797%" height="15" fill="rgb(252,116,44)" fg:x="980" fg:w="1"/><text x="78.3999%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.1499%" y="613" width="0.0797%" height="15" fill="rgb(229,153,4)" fg:x="980" fg:w="1"/><text x="78.3999%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.1499%" y="597" width="0.0797%" height="15" fill="rgb(222,24,35)" fg:x="980" fg:w="1"/><text x="78.3999%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.1499%" y="581" width="0.0797%" height="15" fill="rgb(214,26,20)" fg:x="980" fg:w="1"/><text x="78.3999%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.2297%" y="581" width="0.0797%" height="15" fill="rgb(215,14,45)" fg:x="981" fg:w="1"/><text x="78.4797%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.3094%" y="549" width="0.0797%" height="15" fill="rgb(217,212,50)" fg:x="982" fg:w="1"/><text x="78.5594%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (3 samples, 0.24%)</title><rect x="78.2297%" y="629" width="0.2392%" height="15" fill="rgb(230,172,52)" fg:x="981" fg:w="3"/><text x="78.4797%" y="639.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (3 samples, 0.24%)</title><rect x="78.2297%" y="613" width="0.2392%" height="15" fill="rgb(210,48,36)" fg:x="981" fg:w="3"/><text x="78.4797%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="78.2297%" y="597" width="0.2392%" height="15" fill="rgb(216,213,32)" fg:x="981" fg:w="3"/><text x="78.4797%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.3094%" y="581" width="0.1595%" height="15" fill="rgb(237,202,41)" fg:x="982" fg:w="2"/><text x="78.5594%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.3094%" y="565" width="0.1595%" height="15" fill="rgb(209,14,29)" fg:x="982" fg:w="2"/><text x="78.5594%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.3892%" y="549" width="0.0797%" height="15" fill="rgb(219,29,3)" fg:x="983" fg:w="1"/><text x="78.6392%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3892%" y="533" width="0.0797%" height="15" fill="rgb(229,13,49)" fg:x="983" fg:w="1"/><text x="78.6392%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.3892%" y="517" width="0.0797%" height="15" fill="rgb(210,206,2)" fg:x="983" fg:w="1"/><text x="78.6392%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.5486%" y="549" width="0.0797%" height="15" fill="rgb(216,154,46)" fg:x="985" fg:w="1"/><text x="78.7986%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.5486%" y="533" width="0.0797%" height="15" fill="rgb(211,170,52)" fg:x="985" fg:w="1"/><text x="78.7986%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.5486%" y="517" width="0.0797%" height="15" fill="rgb(233,109,47)" fg:x="985" fg:w="1"/><text x="78.7986%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.5486%" y="501" width="0.0797%" height="15" fill="rgb(208,212,30)" fg:x="985" fg:w="1"/><text x="78.7986%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.5486%" y="485" width="0.0797%" height="15" fill="rgb(215,190,19)" fg:x="985" fg:w="1"/><text x="78.7986%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.5486%" y="469" width="0.0797%" height="15" fill="rgb(207,164,53)" fg:x="985" fg:w="1"/><text x="78.7986%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.5486%" y="453" width="0.0797%" height="15" fill="rgb(213,87,49)" fg:x="985" fg:w="1"/><text x="78.7986%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.5486%" y="437" width="0.0797%" height="15" fill="rgb(241,216,24)" fg:x="985" fg:w="1"/><text x="78.7986%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="78.6284%" y="533" width="0.0797%" height="15" fill="rgb(241,123,45)" fg:x="986" fg:w="1"/><text x="78.8784%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.7879%" y="517" width="0.0797%" height="15" fill="rgb(220,36,15)" fg:x="988" fg:w="1"/><text x="79.0379%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="78.5486%" y="565" width="0.3987%" height="15" fill="rgb(215,202,9)" fg:x="985" fg:w="5"/><text x="78.7986%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="78.6284%" y="549" width="0.3190%" height="15" fill="rgb(252,71,26)" fg:x="986" fg:w="4"/><text x="78.8784%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="78.7081%" y="533" width="0.2392%" height="15" fill="rgb(243,195,19)" fg:x="987" fg:w="3"/><text x="78.9581%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.8676%" y="517" width="0.0797%" height="15" fill="rgb(207,167,27)" fg:x="989" fg:w="1"/><text x="79.1176%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.8676%" y="501" width="0.0797%" height="15" fill="rgb(250,146,54)" fg:x="989" fg:w="1"/><text x="79.1176%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.9474%" y="565" width="0.0797%" height="15" fill="rgb(245,79,9)" fg:x="990" fg:w="1"/><text x="79.1974%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.9474%" y="549" width="0.0797%" height="15" fill="rgb(234,197,22)" fg:x="990" fg:w="1"/><text x="79.1974%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.9474%" y="533" width="0.0797%" height="15" fill="rgb(221,52,48)" fg:x="990" fg:w="1"/><text x="79.1974%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.9474%" y="517" width="0.0797%" height="15" fill="rgb(235,80,0)" fg:x="990" fg:w="1"/><text x="79.1974%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.9474%" y="501" width="0.0797%" height="15" fill="rgb(221,117,53)" fg:x="990" fg:w="1"/><text x="79.1974%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="78.9474%" y="485" width="0.0797%" height="15" fill="rgb(239,48,47)" fg:x="990" fg:w="1"/><text x="79.1974%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.9474%" y="469" width="0.0797%" height="15" fill="rgb(227,191,52)" fg:x="990" fg:w="1"/><text x="79.1974%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.9474%" y="453" width="0.0797%" height="15" fill="rgb(241,118,1)" fg:x="990" fg:w="1"/><text x="79.1974%" y="463.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="79.0271%" y="549" width="0.1595%" height="15" fill="rgb(240,85,3)" fg:x="991" fg:w="2"/><text x="79.2771%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.0271%" y="533" width="0.1595%" height="15" fill="rgb(237,68,37)" fg:x="991" fg:w="2"/><text x="79.2771%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="79.0271%" y="517" width="0.1595%" height="15" fill="rgb(212,9,20)" fg:x="991" fg:w="2"/><text x="79.2771%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.0271%" y="501" width="0.1595%" height="15" fill="rgb(218,84,17)" fg:x="991" fg:w="2"/><text x="79.2771%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.0271%" y="485" width="0.1595%" height="15" fill="rgb(235,147,20)" fg:x="991" fg:w="2"/><text x="79.2771%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.1069%" y="469" width="0.0797%" height="15" fill="rgb(208,224,1)" fg:x="992" fg:w="1"/><text x="79.3569%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.1069%" y="453" width="0.0797%" height="15" fill="rgb(232,97,50)" fg:x="992" fg:w="1"/><text x="79.3569%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.40%)</title><rect x="79.1866%" y="517" width="0.3987%" height="15" fill="rgb(238,15,45)" fg:x="993" fg:w="5"/><text x="79.4366%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="79.3461%" y="501" width="0.2392%" height="15" fill="rgb(231,46,18)" fg:x="995" fg:w="3"/><text x="79.5961%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.5056%" y="485" width="0.0797%" height="15" fill="rgb(254,169,10)" fg:x="997" fg:w="1"/><text x="79.7556%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="79.5853%" y="517" width="0.0797%" height="15" fill="rgb(243,169,30)" fg:x="998" fg:w="1"/><text x="79.8353%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="79.6651%" y="453" width="0.0797%" height="15" fill="rgb(236,90,49)" fg:x="999" fg:w="1"/><text x="79.9151%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="79.6651%" y="469" width="0.1595%" height="15" fill="rgb(218,80,15)" fg:x="999" fg:w="2"/><text x="79.9151%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.7448%" y="453" width="0.0797%" height="15" fill="rgb(222,115,37)" fg:x="1000" fg:w="1"/><text x="79.9948%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.7448%" y="437" width="0.0797%" height="15" fill="rgb(227,0,6)" fg:x="1000" fg:w="1"/><text x="79.9948%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="79.9043%" y="405" width="0.1595%" height="15" fill="rgb(217,189,13)" fg:x="1002" fg:w="2"/><text x="80.1543%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.9841%" y="389" width="0.0797%" height="15" fill="rgb(220,74,19)" fg:x="1003" fg:w="1"/><text x="80.2341%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.9841%" y="373" width="0.0797%" height="15" fill="rgb(224,81,18)" fg:x="1003" fg:w="1"/><text x="80.2341%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="79.9043%" y="421" width="0.2392%" height="15" fill="rgb(245,178,48)" fg:x="1002" fg:w="3"/><text x="80.1543%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0638%" y="405" width="0.0797%" height="15" fill="rgb(207,78,24)" fg:x="1004" fg:w="1"/><text x="80.3138%" y="415.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (13 samples, 1.04%)</title><rect x="79.1866%" y="549" width="1.0367%" height="15" fill="rgb(223,222,30)" fg:x="993" fg:w="13"/><text x="79.4366%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.04%)</title><rect x="79.1866%" y="533" width="1.0367%" height="15" fill="rgb(234,101,12)" fg:x="993" fg:w="13"/><text x="79.4366%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="79.6651%" y="517" width="0.5582%" height="15" fill="rgb(209,80,46)" fg:x="999" fg:w="7"/><text x="79.9151%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="79.6651%" y="501" width="0.5582%" height="15" fill="rgb(228,79,14)" fg:x="999" fg:w="7"/><text x="79.9151%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="79.6651%" y="485" width="0.5582%" height="15" fill="rgb(220,219,34)" fg:x="999" fg:w="7"/><text x="79.9151%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="79.8246%" y="469" width="0.3987%" height="15" fill="rgb(207,80,21)" fg:x="1001" fg:w="5"/><text x="80.0746%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="79.9043%" y="453" width="0.3190%" height="15" fill="rgb(210,154,44)" fg:x="1002" fg:w="4"/><text x="80.1543%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="79.9043%" y="437" width="0.3190%" height="15" fill="rgb(246,44,39)" fg:x="1002" fg:w="4"/><text x="80.1543%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.1435%" y="421" width="0.0797%" height="15" fill="rgb(252,175,13)" fg:x="1005" fg:w="1"/><text x="80.3935%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.2233%" y="421" width="0.0797%" height="15" fill="rgb(211,50,39)" fg:x="1006" fg:w="1"/><text x="80.4733%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.2233%" y="405" width="0.0797%" height="15" fill="rgb(231,204,27)" fg:x="1006" fg:w="1"/><text x="80.4733%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.2233%" y="389" width="0.0797%" height="15" fill="rgb(253,26,34)" fg:x="1006" fg:w="1"/><text x="80.4733%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.2233%" y="373" width="0.0797%" height="15" fill="rgb(207,139,38)" fg:x="1006" fg:w="1"/><text x="80.4733%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.2233%" y="357" width="0.0797%" height="15" fill="rgb(248,54,27)" fg:x="1006" fg:w="1"/><text x="80.4733%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.2233%" y="341" width="0.0797%" height="15" fill="rgb(234,25,33)" fg:x="1006" fg:w="1"/><text x="80.4733%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="80.2233%" y="453" width="0.1595%" height="15" fill="rgb(249,107,47)" fg:x="1006" fg:w="2"/><text x="80.4733%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="80.2233%" y="437" width="0.1595%" height="15" fill="rgb(230,190,31)" fg:x="1006" fg:w="2"/><text x="80.4733%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3030%" y="421" width="0.0797%" height="15" fill="rgb(238,173,45)" fg:x="1007" fg:w="1"/><text x="80.5530%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3030%" y="405" width="0.0797%" height="15" fill="rgb(222,16,50)" fg:x="1007" fg:w="1"/><text x="80.5530%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.3030%" y="389" width="0.0797%" height="15" fill="rgb(251,204,47)" fg:x="1007" fg:w="1"/><text x="80.5530%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="80.2233%" y="485" width="0.2392%" height="15" fill="rgb(225,12,3)" fg:x="1006" fg:w="3"/><text x="80.4733%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="80.2233%" y="469" width="0.2392%" height="15" fill="rgb(214,208,22)" fg:x="1006" fg:w="3"/><text x="80.4733%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.3828%" y="453" width="0.0797%" height="15" fill="rgb(240,57,32)" fg:x="1008" fg:w="1"/><text x="80.6328%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.3828%" y="437" width="0.0797%" height="15" fill="rgb(243,113,48)" fg:x="1008" fg:w="1"/><text x="80.6328%" y="447.50"></text></g><g><title>engine::session::Session::close (31 samples, 2.47%)</title><rect x="78.0702%" y="661" width="2.4721%" height="15" fill="rgb(225,135,30)" fg:x="979" fg:w="31"/><text x="78.3202%" y="671.50">en..</text></g><g><title>engine::session::state::State::close (31 samples, 2.47%)</title><rect x="78.0702%" y="645" width="2.4721%" height="15" fill="rgb(222,3,53)" fg:x="979" fg:w="31"/><text x="78.3202%" y="655.50">en..</text></g><g><title>engine::session::state::State::flush_entities (26 samples, 2.07%)</title><rect x="78.4689%" y="629" width="2.0734%" height="15" fill="rgb(243,142,2)" fg:x="984" fg:w="26"/><text x="78.7189%" y="639.50">e..</text></g><g><title>core::iter::adapters::try_process (26 samples, 2.07%)</title><rect x="78.4689%" y="613" width="2.0734%" height="15" fill="rgb(233,67,14)" fg:x="984" fg:w="26"/><text x="78.7189%" y="623.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26 samples, 2.07%)</title><rect x="78.4689%" y="597" width="2.0734%" height="15" fill="rgb(245,125,36)" fg:x="984" fg:w="26"/><text x="78.7189%" y="607.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (25 samples, 1.99%)</title><rect x="78.5486%" y="581" width="1.9936%" height="15" fill="rgb(225,199,6)" fg:x="985" fg:w="25"/><text x="78.7986%" y="591.50">e..</text></g><g><title>kernel::model::any_entity_changes (19 samples, 1.52%)</title><rect x="79.0271%" y="565" width="1.5152%" height="15" fill="rgb(244,71,6)" fg:x="991" fg:w="19"/><text x="79.2771%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="80.2233%" y="549" width="0.3190%" height="15" fill="rgb(225,62,9)" fg:x="1006" fg:w="4"/><text x="80.4733%" y="559.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="80.2233%" y="533" width="0.3190%" height="15" fill="rgb(246,139,53)" fg:x="1006" fg:w="4"/><text x="80.4733%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="80.2233%" y="517" width="0.3190%" height="15" fill="rgb(243,161,46)" fg:x="1006" fg:w="4"/><text x="80.4733%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="80.2233%" y="501" width="0.3190%" height="15" fill="rgb(236,153,7)" fg:x="1006" fg:w="4"/><text x="80.4733%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.4625%" y="485" width="0.0797%" height="15" fill="rgb(248,42,35)" fg:x="1009" fg:w="1"/><text x="80.7125%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.4625%" y="469" width="0.0797%" height="15" fill="rgb(250,17,31)" fg:x="1009" fg:w="1"/><text x="80.7125%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="80.4625%" y="453" width="0.0797%" height="15" fill="rgb(248,138,14)" fg:x="1009" fg:w="1"/><text x="80.7125%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="80.6220%" y="533" width="0.1595%" height="15" fill="rgb(228,161,3)" fg:x="1011" fg:w="2"/><text x="80.8720%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.7018%" y="517" width="0.0797%" height="15" fill="rgb(248,116,17)" fg:x="1012" fg:w="1"/><text x="80.9518%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.7018%" y="501" width="0.0797%" height="15" fill="rgb(207,78,24)" fg:x="1012" fg:w="1"/><text x="80.9518%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.7018%" y="485" width="0.0797%" height="15" fill="rgb(234,99,48)" fg:x="1012" fg:w="1"/><text x="80.9518%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.7018%" y="469" width="0.0797%" height="15" fill="rgb(242,22,26)" fg:x="1012" fg:w="1"/><text x="80.9518%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.7018%" y="453" width="0.0797%" height="15" fill="rgb(227,78,32)" fg:x="1012" fg:w="1"/><text x="80.9518%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.7018%" y="437" width="0.0797%" height="15" fill="rgb(226,189,43)" fg:x="1012" fg:w="1"/><text x="80.9518%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.7018%" y="421" width="0.0797%" height="15" fill="rgb(227,218,35)" fg:x="1012" fg:w="1"/><text x="80.9518%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="80.7018%" y="405" width="0.0797%" height="15" fill="rgb(206,111,40)" fg:x="1012" fg:w="1"/><text x="80.9518%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="80.7018%" y="389" width="0.0797%" height="15" fill="rgb(208,217,22)" fg:x="1012" fg:w="1"/><text x="80.9518%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="80.7815%" y="485" width="0.0797%" height="15" fill="rgb(248,20,20)" fg:x="1013" fg:w="1"/><text x="81.0315%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.8612%" y="341" width="0.0797%" height="15" fill="rgb(239,155,16)" fg:x="1014" fg:w="1"/><text x="81.1112%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="80.8612%" y="469" width="0.1595%" height="15" fill="rgb(238,171,46)" fg:x="1014" fg:w="2"/><text x="81.1112%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="80.8612%" y="453" width="0.1595%" height="15" fill="rgb(248,11,36)" fg:x="1014" fg:w="2"/><text x="81.1112%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.8612%" y="437" width="0.1595%" height="15" fill="rgb(220,148,37)" fg:x="1014" fg:w="2"/><text x="81.1112%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="80.8612%" y="421" width="0.1595%" height="15" fill="rgb(218,144,42)" fg:x="1014" fg:w="2"/><text x="81.1112%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.8612%" y="405" width="0.1595%" height="15" fill="rgb(245,20,20)" fg:x="1014" fg:w="2"/><text x="81.1112%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="80.8612%" y="389" width="0.1595%" height="15" fill="rgb(240,111,48)" fg:x="1014" fg:w="2"/><text x="81.1112%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.8612%" y="373" width="0.1595%" height="15" fill="rgb(237,225,32)" fg:x="1014" fg:w="2"/><text x="81.1112%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="80.8612%" y="357" width="0.1595%" height="15" fill="rgb(228,161,46)" fg:x="1014" fg:w="2"/><text x="81.1112%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="80.9410%" y="341" width="0.0797%" height="15" fill="rgb(235,196,21)" fg:x="1015" fg:w="1"/><text x="81.1910%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.9410%" y="325" width="0.0797%" height="15" fill="rgb(250,133,21)" fg:x="1015" fg:w="1"/><text x="81.1910%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.9410%" y="309" width="0.0797%" height="15" fill="rgb(236,94,32)" fg:x="1015" fg:w="1"/><text x="81.1910%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="80.9410%" y="293" width="0.0797%" height="15" fill="rgb(219,176,25)" fg:x="1015" fg:w="1"/><text x="81.1910%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.9410%" y="277" width="0.0797%" height="15" fill="rgb(211,17,43)" fg:x="1015" fg:w="1"/><text x="81.1910%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.9410%" y="261" width="0.0797%" height="15" fill="rgb(220,75,23)" fg:x="1015" fg:w="1"/><text x="81.1910%" y="271.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (7 samples, 0.56%)</title><rect x="80.5423%" y="565" width="0.5582%" height="15" fill="rgb(215,122,32)" fg:x="1010" fg:w="7"/><text x="80.7923%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (6 samples, 0.48%)</title><rect x="80.6220%" y="549" width="0.4785%" height="15" fill="rgb(218,57,38)" fg:x="1011" fg:w="6"/><text x="80.8720%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="80.7815%" y="533" width="0.3190%" height="15" fill="rgb(233,208,46)" fg:x="1013" fg:w="4"/><text x="81.0315%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="80.7815%" y="517" width="0.3190%" height="15" fill="rgb(221,35,50)" fg:x="1013" fg:w="4"/><text x="81.0315%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="80.7815%" y="501" width="0.3190%" height="15" fill="rgb(229,213,29)" fg:x="1013" fg:w="4"/><text x="81.0315%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="80.8612%" y="485" width="0.2392%" height="15" fill="rgb(229,110,40)" fg:x="1014" fg:w="3"/><text x="81.1112%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="81.0207%" y="469" width="0.0797%" height="15" fill="rgb(247,206,19)" fg:x="1016" fg:w="1"/><text x="81.2707%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="81.0207%" y="453" width="0.0797%" height="15" fill="rgb(216,229,45)" fg:x="1016" fg:w="1"/><text x="81.2707%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.0207%" y="437" width="0.0797%" height="15" fill="rgb(205,184,31)" fg:x="1016" fg:w="1"/><text x="81.2707%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="81.0207%" y="421" width="0.0797%" height="15" fill="rgb(213,91,10)" fg:x="1016" fg:w="1"/><text x="81.2707%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.0207%" y="405" width="0.0797%" height="15" fill="rgb(250,49,8)" fg:x="1016" fg:w="1"/><text x="81.2707%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="81.0207%" y="389" width="0.0797%" height="15" fill="rgb(207,26,8)" fg:x="1016" fg:w="1"/><text x="81.2707%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="81.0207%" y="373" width="0.0797%" height="15" fill="rgb(224,2,13)" fg:x="1016" fg:w="1"/><text x="81.2707%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="81.0207%" y="357" width="0.0797%" height="15" fill="rgb(219,108,27)" fg:x="1016" fg:w="1"/><text x="81.2707%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="81.2600%" y="405" width="0.0797%" height="15" fill="rgb(240,89,32)" fg:x="1019" fg:w="1"/><text x="81.5100%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.2600%" y="389" width="0.0797%" height="15" fill="rgb(248,205,3)" fg:x="1019" fg:w="1"/><text x="81.5100%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.2600%" y="373" width="0.0797%" height="15" fill="rgb(236,197,47)" fg:x="1019" fg:w="1"/><text x="81.5100%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="81.3397%" y="405" width="0.0797%" height="15" fill="rgb(244,185,52)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="415.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="81.3397%" y="389" width="0.0797%" height="15" fill="rgb(210,206,23)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="81.3397%" y="373" width="0.0797%" height="15" fill="rgb(251,177,30)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="81.3397%" y="357" width="0.0797%" height="15" fill="rgb(243,27,45)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.3397%" y="341" width="0.0797%" height="15" fill="rgb(248,141,51)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="81.3397%" y="325" width="0.0797%" height="15" fill="rgb(235,102,15)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.3397%" y="309" width="0.0797%" height="15" fill="rgb(214,164,53)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.3397%" y="293" width="0.0797%" height="15" fill="rgb(228,18,51)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.3397%" y="277" width="0.0797%" height="15" fill="rgb(205,211,11)" fg:x="1020" fg:w="1"/><text x="81.5897%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="81.4195%" y="405" width="0.0797%" height="15" fill="rgb(208,63,6)" fg:x="1021" fg:w="1"/><text x="81.6695%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.4195%" y="389" width="0.0797%" height="15" fill="rgb(245,76,14)" fg:x="1021" fg:w="1"/><text x="81.6695%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.5789%" y="341" width="0.0797%" height="15" fill="rgb(234,176,34)" fg:x="1023" fg:w="1"/><text x="81.8289%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="81.4992%" y="405" width="0.2392%" height="15" fill="rgb(243,156,42)" fg:x="1022" fg:w="3"/><text x="81.7492%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="81.4992%" y="389" width="0.2392%" height="15" fill="rgb(237,182,10)" fg:x="1022" fg:w="3"/><text x="81.7492%" y="399.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="81.4992%" y="373" width="0.2392%" height="15" fill="rgb(244,117,0)" fg:x="1022" fg:w="3"/><text x="81.7492%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="81.4992%" y="357" width="0.2392%" height="15" fill="rgb(239,91,50)" fg:x="1022" fg:w="3"/><text x="81.7492%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="81.6587%" y="341" width="0.0797%" height="15" fill="rgb(206,38,9)" fg:x="1024" fg:w="1"/><text x="81.9087%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.6587%" y="325" width="0.0797%" height="15" fill="rgb(205,25,10)" fg:x="1024" fg:w="1"/><text x="81.9087%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="81.6587%" y="309" width="0.0797%" height="15" fill="rgb(206,224,7)" fg:x="1024" fg:w="1"/><text x="81.9087%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.6587%" y="293" width="0.0797%" height="15" fill="rgb(227,157,10)" fg:x="1024" fg:w="1"/><text x="81.9087%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.6587%" y="277" width="0.0797%" height="15" fill="rgb(214,157,37)" fg:x="1024" fg:w="1"/><text x="81.9087%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.6587%" y="261" width="0.0797%" height="15" fill="rgb(209,180,35)" fg:x="1024" fg:w="1"/><text x="81.9087%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.7384%" y="277" width="0.0797%" height="15" fill="rgb(216,174,49)" fg:x="1025" fg:w="1"/><text x="81.9884%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="81.7384%" y="325" width="0.1595%" height="15" fill="rgb(205,96,20)" fg:x="1025" fg:w="2"/><text x="81.9884%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="81.7384%" y="309" width="0.1595%" height="15" fill="rgb(214,220,39)" fg:x="1025" fg:w="2"/><text x="81.9884%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="81.7384%" y="293" width="0.1595%" height="15" fill="rgb(245,126,30)" fg:x="1025" fg:w="2"/><text x="81.9884%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="81.8182%" y="277" width="0.0797%" height="15" fill="rgb(215,88,33)" fg:x="1026" fg:w="1"/><text x="82.0682%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="81.9777%" y="261" width="0.2392%" height="15" fill="rgb(210,1,49)" fg:x="1028" fg:w="3"/><text x="82.2277%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="81.9777%" y="245" width="0.2392%" height="15" fill="rgb(207,133,3)" fg:x="1028" fg:w="3"/><text x="82.2277%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="82.2169%" y="261" width="0.1595%" height="15" fill="rgb(231,47,43)" fg:x="1031" fg:w="2"/><text x="82.4669%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="82.2967%" y="245" width="0.0797%" height="15" fill="rgb(245,64,1)" fg:x="1032" fg:w="1"/><text x="82.5467%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="82.3764%" y="197" width="0.0797%" height="15" fill="rgb(253,145,20)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="82.3764%" y="181" width="0.0797%" height="15" fill="rgb(211,39,18)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.3764%" y="165" width="0.0797%" height="15" fill="rgb(223,225,18)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.3764%" y="149" width="0.0797%" height="15" fill="rgb(210,202,44)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.3764%" y="133" width="0.0797%" height="15" fill="rgb(231,138,36)" fg:x="1033" fg:w="1"/><text x="82.6264%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (15 samples, 1.20%)</title><rect x="82.4561%" y="197" width="1.1962%" height="15" fill="rgb(237,115,25)" fg:x="1034" fg:w="15"/><text x="82.7061%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (15 samples, 1.20%)</title><rect x="82.4561%" y="181" width="1.1962%" height="15" fill="rgb(215,53,48)" fg:x="1034" fg:w="15"/><text x="82.7061%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (15 samples, 1.20%)</title><rect x="82.4561%" y="165" width="1.1962%" height="15" fill="rgb(243,193,24)" fg:x="1034" fg:w="15"/><text x="82.7061%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 1.44%)</title><rect x="82.3764%" y="245" width="1.4354%" height="15" fill="rgb(210,106,28)" fg:x="1033" fg:w="18"/><text x="82.6264%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (18 samples, 1.44%)</title><rect x="82.3764%" y="229" width="1.4354%" height="15" fill="rgb(249,192,0)" fg:x="1033" fg:w="18"/><text x="82.6264%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (18 samples, 1.44%)</title><rect x="82.3764%" y="213" width="1.4354%" height="15" fill="rgb(224,96,21)" fg:x="1033" fg:w="18"/><text x="82.6264%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="83.6523%" y="197" width="0.1595%" height="15" fill="rgb(243,160,19)" fg:x="1049" fg:w="2"/><text x="83.9023%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="83.6523%" y="181" width="0.1595%" height="15" fill="rgb(219,205,50)" fg:x="1049" fg:w="2"/><text x="83.9023%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="83.9713%" y="229" width="0.0797%" height="15" fill="rgb(218,175,44)" fg:x="1053" fg:w="1"/><text x="84.2213%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (23 samples, 1.83%)</title><rect x="82.3764%" y="261" width="1.8341%" height="15" fill="rgb(251,84,47)" fg:x="1033" fg:w="23"/><text x="82.6264%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="83.8118%" y="245" width="0.3987%" height="15" fill="rgb(241,14,16)" fg:x="1051" fg:w="5"/><text x="84.0618%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="84.0510%" y="229" width="0.1595%" height="15" fill="rgb(207,142,28)" fg:x="1054" fg:w="2"/><text x="84.3010%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.1308%" y="213" width="0.0797%" height="15" fill="rgb(208,116,22)" fg:x="1055" fg:w="1"/><text x="84.3808%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.1308%" y="197" width="0.0797%" height="15" fill="rgb(210,0,43)" fg:x="1055" fg:w="1"/><text x="84.3808%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.1308%" y="181" width="0.0797%" height="15" fill="rgb(246,33,21)" fg:x="1055" fg:w="1"/><text x="84.3808%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (29 samples, 2.31%)</title><rect x="81.9777%" y="277" width="2.3126%" height="15" fill="rgb(208,158,54)" fg:x="1028" fg:w="29"/><text x="82.2277%" y="287.50">r..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="84.2105%" y="261" width="0.0797%" height="15" fill="rgb(218,99,29)" fg:x="1056" fg:w="1"/><text x="84.4605%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.2903%" y="213" width="0.0797%" height="15" fill="rgb(226,29,7)" fg:x="1057" fg:w="1"/><text x="84.5403%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.2903%" y="197" width="0.0797%" height="15" fill="rgb(206,178,46)" fg:x="1057" fg:w="1"/><text x="84.5403%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.2903%" y="181" width="0.0797%" height="15" fill="rgb(205,169,32)" fg:x="1057" fg:w="1"/><text x="84.5403%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="84.2903%" y="277" width="0.1595%" height="15" fill="rgb(217,4,13)" fg:x="1057" fg:w="2"/><text x="84.5403%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="84.2903%" y="261" width="0.1595%" height="15" fill="rgb(210,140,37)" fg:x="1057" fg:w="2"/><text x="84.5403%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="84.2903%" y="245" width="0.1595%" height="15" fill="rgb(229,80,10)" fg:x="1057" fg:w="2"/><text x="84.5403%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="84.2903%" y="229" width="0.1595%" height="15" fill="rgb(212,175,34)" fg:x="1057" fg:w="2"/><text x="84.5403%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="84.3700%" y="213" width="0.0797%" height="15" fill="rgb(216,207,24)" fg:x="1058" fg:w="1"/><text x="84.6200%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="84.3700%" y="197" width="0.0797%" height="15" fill="rgb(234,163,3)" fg:x="1058" fg:w="1"/><text x="84.6200%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="84.4498%" y="229" width="0.0797%" height="15" fill="rgb(248,101,16)" fg:x="1059" fg:w="1"/><text x="84.6998%" y="239.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="84.4498%" y="213" width="0.0797%" height="15" fill="rgb(209,152,54)" fg:x="1059" fg:w="1"/><text x="84.6998%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (34 samples, 2.71%)</title><rect x="81.8979%" y="325" width="2.7113%" height="15" fill="rgb(229,124,51)" fg:x="1027" fg:w="34"/><text x="82.1479%" y="335.50">re..</text></g><g><title>regex::builders::Builder::build_one_string (33 samples, 2.63%)</title><rect x="81.9777%" y="309" width="2.6316%" height="15" fill="rgb(219,83,18)" fg:x="1028" fg:w="33"/><text x="82.2277%" y="319.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (33 samples, 2.63%)</title><rect x="81.9777%" y="293" width="2.6316%" height="15" fill="rgb(206,29,38)" fg:x="1028" fg:w="33"/><text x="82.2277%" y="303.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="84.4498%" y="277" width="0.1595%" height="15" fill="rgb(245,123,23)" fg:x="1059" fg:w="2"/><text x="84.6998%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="84.4498%" y="261" width="0.1595%" height="15" fill="rgb(238,50,33)" fg:x="1059" fg:w="2"/><text x="84.6998%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="84.4498%" y="245" width="0.1595%" height="15" fill="rgb(234,165,23)" fg:x="1059" fg:w="2"/><text x="84.6998%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="84.5295%" y="229" width="0.0797%" height="15" fill="rgb(211,82,31)" fg:x="1060" fg:w="1"/><text x="84.7795%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.5295%" y="213" width="0.0797%" height="15" fill="rgb(224,166,46)" fg:x="1060" fg:w="1"/><text x="84.7795%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.5295%" y="197" width="0.0797%" height="15" fill="rgb(211,13,8)" fg:x="1060" fg:w="1"/><text x="84.7795%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.5295%" y="181" width="0.0797%" height="15" fill="rgb(212,7,42)" fg:x="1060" fg:w="1"/><text x="84.7795%" y="191.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (37 samples, 2.95%)</title><rect x="81.7384%" y="341" width="2.9506%" height="15" fill="rgb(249,102,19)" fg:x="1025" fg:w="37"/><text x="81.9884%" y="351.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="84.6093%" y="325" width="0.0797%" height="15" fill="rgb(225,41,13)" fg:x="1061" fg:w="1"/><text x="84.8593%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="84.6093%" y="309" width="0.0797%" height="15" fill="rgb(220,65,27)" fg:x="1061" fg:w="1"/><text x="84.8593%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="84.6093%" y="293" width="0.0797%" height="15" fill="rgb(206,4,41)" fg:x="1061" fg:w="1"/><text x="84.8593%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="84.6093%" y="277" width="0.0797%" height="15" fill="rgb(219,60,39)" fg:x="1061" fg:w="1"/><text x="84.8593%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="84.6093%" y="261" width="0.0797%" height="15" fill="rgb(226,4,38)" fg:x="1061" fg:w="1"/><text x="84.8593%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="84.6890%" y="325" width="0.0797%" height="15" fill="rgb(250,52,3)" fg:x="1062" fg:w="1"/><text x="84.9390%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="84.6890%" y="309" width="0.0797%" height="15" fill="rgb(234,93,0)" fg:x="1062" fg:w="1"/><text x="84.9390%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="84.6890%" y="293" width="0.0797%" height="15" fill="rgb(251,47,47)" fg:x="1062" fg:w="1"/><text x="84.9390%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="84.6890%" y="277" width="0.0797%" height="15" fill="rgb(205,166,47)" fg:x="1062" fg:w="1"/><text x="84.9390%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="84.7687%" y="245" width="0.2392%" height="15" fill="rgb(231,148,8)" fg:x="1063" fg:w="3"/><text x="85.0187%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="84.9282%" y="229" width="0.0797%" height="15" fill="rgb(244,185,19)" fg:x="1065" fg:w="1"/><text x="85.1782%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.32%)</title><rect x="84.7687%" y="325" width="0.3190%" height="15" fill="rgb(224,201,45)" fg:x="1063" fg:w="4"/><text x="85.0187%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="84.7687%" y="309" width="0.3190%" height="15" fill="rgb(240,77,39)" fg:x="1063" fg:w="4"/><text x="85.0187%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="84.7687%" y="293" width="0.3190%" height="15" fill="rgb(248,211,29)" fg:x="1063" fg:w="4"/><text x="85.0187%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="84.7687%" y="277" width="0.3190%" height="15" fill="rgb(232,214,46)" fg:x="1063" fg:w="4"/><text x="85.0187%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="84.7687%" y="261" width="0.3190%" height="15" fill="rgb(213,99,54)" fg:x="1063" fg:w="4"/><text x="85.0187%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="85.0080%" y="245" width="0.0797%" height="15" fill="rgb(240,19,46)" fg:x="1066" fg:w="1"/><text x="85.2580%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.0080%" y="229" width="0.0797%" height="15" fill="rgb(243,89,10)" fg:x="1066" fg:w="1"/><text x="85.2580%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.0080%" y="213" width="0.0797%" height="15" fill="rgb(249,28,32)" fg:x="1066" fg:w="1"/><text x="85.2580%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.0080%" y="197" width="0.0797%" height="15" fill="rgb(253,30,9)" fg:x="1066" fg:w="1"/><text x="85.2580%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="85.0877%" y="277" width="0.1595%" height="15" fill="rgb(217,2,26)" fg:x="1067" fg:w="2"/><text x="85.3377%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.1675%" y="261" width="0.0797%" height="15" fill="rgb(220,28,10)" fg:x="1068" fg:w="1"/><text x="85.4175%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="85.1675%" y="245" width="0.0797%" height="15" fill="rgb(228,167,49)" fg:x="1068" fg:w="1"/><text x="85.4175%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.1675%" y="229" width="0.0797%" height="15" fill="rgb(238,212,3)" fg:x="1068" fg:w="1"/><text x="85.4175%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="85.1675%" y="213" width="0.0797%" height="15" fill="rgb(229,134,44)" fg:x="1068" fg:w="1"/><text x="85.4175%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.1675%" y="197" width="0.0797%" height="15" fill="rgb(208,71,4)" fg:x="1068" fg:w="1"/><text x="85.4175%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="85.2472%" y="261" width="0.3987%" height="15" fill="rgb(221,205,45)" fg:x="1069" fg:w="5"/><text x="85.4972%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="85.2472%" y="245" width="0.3987%" height="15" fill="rgb(215,132,38)" fg:x="1069" fg:w="5"/><text x="85.4972%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="85.6459%" y="261" width="0.1595%" height="15" fill="rgb(227,158,6)" fg:x="1074" fg:w="2"/><text x="85.8959%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="85.6459%" y="245" width="0.1595%" height="15" fill="rgb(250,10,38)" fg:x="1074" fg:w="2"/><text x="85.8959%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="85.6459%" y="229" width="0.1595%" height="15" fill="rgb(225,171,40)" fg:x="1074" fg:w="2"/><text x="85.8959%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.7257%" y="213" width="0.0797%" height="15" fill="rgb(238,17,43)" fg:x="1075" fg:w="1"/><text x="85.9757%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.7257%" y="197" width="0.0797%" height="15" fill="rgb(208,145,4)" fg:x="1075" fg:w="1"/><text x="85.9757%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.7257%" y="181" width="0.0797%" height="15" fill="rgb(232,82,7)" fg:x="1075" fg:w="1"/><text x="85.9757%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.32%)</title><rect x="85.8054%" y="261" width="0.3190%" height="15" fill="rgb(205,166,38)" fg:x="1076" fg:w="4"/><text x="86.0554%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="85.8054%" y="245" width="0.3190%" height="15" fill="rgb(240,228,4)" fg:x="1076" fg:w="4"/><text x="86.0554%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="85.8852%" y="229" width="0.2392%" height="15" fill="rgb(233,121,40)" fg:x="1077" fg:w="3"/><text x="86.1352%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="85.8852%" y="213" width="0.2392%" height="15" fill="rgb(243,84,30)" fg:x="1077" fg:w="3"/><text x="86.1352%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="85.8852%" y="197" width="0.2392%" height="15" fill="rgb(235,81,48)" fg:x="1077" fg:w="3"/><text x="86.1352%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="86.1244%" y="229" width="0.0797%" height="15" fill="rgb(218,137,0)" fg:x="1080" fg:w="1"/><text x="86.3744%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="86.2839%" y="149" width="0.0797%" height="15" fill="rgb(223,151,48)" fg:x="1082" fg:w="1"/><text x="86.5339%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="86.3636%" y="149" width="0.0797%" height="15" fill="rgb(247,30,19)" fg:x="1083" fg:w="1"/><text x="86.6136%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.3636%" y="133" width="0.0797%" height="15" fill="rgb(205,129,29)" fg:x="1083" fg:w="1"/><text x="86.6136%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.3636%" y="117" width="0.0797%" height="15" fill="rgb(222,29,2)" fg:x="1083" fg:w="1"/><text x="86.6136%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.5231%" y="117" width="0.0797%" height="15" fill="rgb(232,145,33)" fg:x="1085" fg:w="1"/><text x="86.7731%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="86.4434%" y="149" width="0.2392%" height="15" fill="rgb(217,30,31)" fg:x="1084" fg:w="3"/><text x="86.6934%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="86.4434%" y="133" width="0.2392%" height="15" fill="rgb(243,22,52)" fg:x="1084" fg:w="3"/><text x="86.6934%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="86.6029%" y="117" width="0.0797%" height="15" fill="rgb(254,228,14)" fg:x="1086" fg:w="1"/><text x="86.8529%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (19 samples, 1.52%)</title><rect x="86.6826%" y="149" width="1.5152%" height="15" fill="rgb(231,45,50)" fg:x="1087" fg:w="19"/><text x="86.9326%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (19 samples, 1.52%)</title><rect x="86.6826%" y="133" width="1.5152%" height="15" fill="rgb(248,125,3)" fg:x="1087" fg:w="19"/><text x="86.9326%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (19 samples, 1.52%)</title><rect x="86.6826%" y="117" width="1.5152%" height="15" fill="rgb(213,76,9)" fg:x="1087" fg:w="19"/><text x="86.9326%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="88.1978%" y="149" width="0.0797%" height="15" fill="rgb(238,108,21)" fg:x="1106" fg:w="1"/><text x="88.4478%" y="159.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="88.3573%" y="101" width="0.2392%" height="15" fill="rgb(229,214,19)" fg:x="1108" fg:w="3"/><text x="88.6073%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 2.55%)</title><rect x="86.1244%" y="245" width="2.5518%" height="15" fill="rgb(252,201,5)" fg:x="1080" fg:w="32"/><text x="86.3744%" y="255.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (31 samples, 2.47%)</title><rect x="86.2041%" y="229" width="2.4721%" height="15" fill="rgb(233,165,49)" fg:x="1081" fg:w="31"/><text x="86.4541%" y="239.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (31 samples, 2.47%)</title><rect x="86.2041%" y="213" width="2.4721%" height="15" fill="rgb(208,165,19)" fg:x="1081" fg:w="31"/><text x="86.4541%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (31 samples, 2.47%)</title><rect x="86.2041%" y="197" width="2.4721%" height="15" fill="rgb(216,220,31)" fg:x="1081" fg:w="31"/><text x="86.4541%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (31 samples, 2.47%)</title><rect x="86.2041%" y="181" width="2.4721%" height="15" fill="rgb(214,8,31)" fg:x="1081" fg:w="31"/><text x="86.4541%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (31 samples, 2.47%)</title><rect x="86.2041%" y="165" width="2.4721%" height="15" fill="rgb(220,32,32)" fg:x="1081" fg:w="31"/><text x="86.4541%" y="175.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (5 samples, 0.40%)</title><rect x="88.2775%" y="149" width="0.3987%" height="15" fill="rgb(237,172,34)" fg:x="1107" fg:w="5"/><text x="88.5275%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="88.2775%" y="133" width="0.3987%" height="15" fill="rgb(240,209,5)" fg:x="1107" fg:w="5"/><text x="88.5275%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="88.3573%" y="117" width="0.3190%" height="15" fill="rgb(221,219,1)" fg:x="1108" fg:w="4"/><text x="88.6073%" y="127.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="88.5965%" y="101" width="0.0797%" height="15" fill="rgb(237,90,36)" fg:x="1111" fg:w="1"/><text x="88.8465%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="88.5965%" y="85" width="0.0797%" height="15" fill="rgb(245,14,51)" fg:x="1111" fg:w="1"/><text x="88.8465%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="88.6762%" y="229" width="0.0797%" height="15" fill="rgb(211,71,49)" fg:x="1112" fg:w="1"/><text x="88.9262%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="88.7560%" y="229" width="0.2392%" height="15" fill="rgb(230,223,9)" fg:x="1113" fg:w="3"/><text x="89.0060%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="88.8357%" y="213" width="0.1595%" height="15" fill="rgb(212,33,31)" fg:x="1114" fg:w="2"/><text x="89.0857%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.9155%" y="197" width="0.0797%" height="15" fill="rgb(218,141,5)" fg:x="1115" fg:w="1"/><text x="89.1655%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.9155%" y="181" width="0.0797%" height="15" fill="rgb(239,194,8)" fg:x="1115" fg:w="1"/><text x="89.1655%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="88.9952%" y="229" width="0.1595%" height="15" fill="rgb(225,119,29)" fg:x="1116" fg:w="2"/><text x="89.2452%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.0750%" y="213" width="0.0797%" height="15" fill="rgb(233,32,3)" fg:x="1117" fg:w="1"/><text x="89.3250%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (50 samples, 3.99%)</title><rect x="85.2472%" y="277" width="3.9872%" height="15" fill="rgb(248,126,40)" fg:x="1069" fg:w="50"/><text x="85.4972%" y="287.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (39 samples, 3.11%)</title><rect x="86.1244%" y="261" width="3.1100%" height="15" fill="rgb(213,102,53)" fg:x="1080" fg:w="39"/><text x="86.3744%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="88.6762%" y="245" width="0.5582%" height="15" fill="rgb(212,69,15)" fg:x="1112" fg:w="7"/><text x="88.9262%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="89.1547%" y="229" width="0.0797%" height="15" fill="rgb(253,39,34)" fg:x="1118" fg:w="1"/><text x="89.4047%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.1547%" y="213" width="0.0797%" height="15" fill="rgb(205,189,54)" fg:x="1118" fg:w="1"/><text x="89.4047%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="89.2344%" y="277" width="0.1595%" height="15" fill="rgb(234,229,45)" fg:x="1119" fg:w="2"/><text x="89.4844%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="89.2344%" y="261" width="0.1595%" height="15" fill="rgb(243,79,48)" fg:x="1119" fg:w="2"/><text x="89.4844%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="89.3142%" y="245" width="0.0797%" height="15" fill="rgb(206,71,50)" fg:x="1120" fg:w="1"/><text x="89.5642%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="89.3142%" y="229" width="0.0797%" height="15" fill="rgb(209,32,17)" fg:x="1120" fg:w="1"/><text x="89.5642%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (60 samples, 4.78%)</title><rect x="84.6890%" y="341" width="4.7847%" height="15" fill="rgb(219,229,6)" fg:x="1062" fg:w="60"/><text x="84.9390%" y="351.50">indefi..</text></g><g><title>regex::regex::string::Regex::new (55 samples, 4.39%)</title><rect x="85.0877%" y="325" width="4.3860%" height="15" fill="rgb(226,25,27)" fg:x="1067" fg:w="55"/><text x="85.3377%" y="335.50">regex..</text></g><g><title>regex::builders::Builder::build_one_string (55 samples, 4.39%)</title><rect x="85.0877%" y="309" width="4.3860%" height="15" fill="rgb(218,185,23)" fg:x="1067" fg:w="55"/><text x="85.3377%" y="319.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (55 samples, 4.39%)</title><rect x="85.0877%" y="293" width="4.3860%" height="15" fill="rgb(242,123,5)" fg:x="1067" fg:w="55"/><text x="85.3377%" y="303.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="89.3939%" y="277" width="0.0797%" height="15" fill="rgb(215,53,19)" fg:x="1121" fg:w="1"/><text x="89.6439%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="89.3939%" y="261" width="0.0797%" height="15" fill="rgb(233,20,30)" fg:x="1121" fg:w="1"/><text x="89.6439%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="89.3939%" y="245" width="0.0797%" height="15" fill="rgb(209,67,20)" fg:x="1121" fg:w="1"/><text x="89.6439%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="89.3939%" y="229" width="0.0797%" height="15" fill="rgb(227,181,50)" fg:x="1121" fg:w="1"/><text x="89.6439%" y="239.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="89.3939%" y="213" width="0.0797%" height="15" fill="rgb(252,75,38)" fg:x="1121" fg:w="1"/><text x="89.6439%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.3939%" y="197" width="0.0797%" height="15" fill="rgb(235,9,33)" fg:x="1121" fg:w="1"/><text x="89.6439%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="89.4737%" y="245" width="0.0797%" height="15" fill="rgb(208,87,30)" fg:x="1122" fg:w="1"/><text x="89.7237%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="89.4737%" y="229" width="0.0797%" height="15" fill="rgb(215,199,39)" fg:x="1122" fg:w="1"/><text x="89.7237%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="89.5534%" y="229" width="0.0797%" height="15" fill="rgb(246,208,12)" fg:x="1123" fg:w="1"/><text x="89.8034%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="89.5534%" y="213" width="0.0797%" height="15" fill="rgb(206,195,10)" fg:x="1123" fg:w="1"/><text x="89.8034%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="89.5534%" y="197" width="0.0797%" height="15" fill="rgb(244,1,30)" fg:x="1123" fg:w="1"/><text x="89.8034%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.5534%" y="181" width="0.0797%" height="15" fill="rgb(230,83,5)" fg:x="1123" fg:w="1"/><text x="89.8034%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.5534%" y="165" width="0.0797%" height="15" fill="rgb(239,62,17)" fg:x="1123" fg:w="1"/><text x="89.8034%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.5534%" y="149" width="0.0797%" height="15" fill="rgb(252,193,41)" fg:x="1123" fg:w="1"/><text x="89.8034%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.6332%" y="213" width="0.0797%" height="15" fill="rgb(216,142,19)" fg:x="1124" fg:w="1"/><text x="89.8832%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.32%)</title><rect x="89.4737%" y="261" width="0.3190%" height="15" fill="rgb(240,81,38)" fg:x="1122" fg:w="4"/><text x="89.7237%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="89.5534%" y="245" width="0.2392%" height="15" fill="rgb(240,109,40)" fg:x="1123" fg:w="3"/><text x="89.8034%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="89.6332%" y="229" width="0.1595%" height="15" fill="rgb(230,123,10)" fg:x="1124" fg:w="2"/><text x="89.8832%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="89.7129%" y="213" width="0.0797%" height="15" fill="rgb(253,42,32)" fg:x="1125" fg:w="1"/><text x="89.9629%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.7129%" y="197" width="0.0797%" height="15" fill="rgb(218,154,8)" fg:x="1125" fg:w="1"/><text x="89.9629%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (5 samples, 0.40%)</title><rect x="89.4737%" y="309" width="0.3987%" height="15" fill="rgb(216,197,10)" fg:x="1122" fg:w="5"/><text x="89.7237%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (5 samples, 0.40%)</title><rect x="89.4737%" y="293" width="0.3987%" height="15" fill="rgb(223,107,12)" fg:x="1122" fg:w="5"/><text x="89.7237%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (5 samples, 0.40%)</title><rect x="89.4737%" y="277" width="0.3987%" height="15" fill="rgb(241,174,42)" fg:x="1122" fg:w="5"/><text x="89.7237%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="89.7927%" y="261" width="0.0797%" height="15" fill="rgb(231,78,20)" fg:x="1126" fg:w="1"/><text x="90.0427%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="89.7927%" y="245" width="0.0797%" height="15" fill="rgb(230,208,49)" fg:x="1126" fg:w="1"/><text x="90.0427%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="89.7927%" y="229" width="0.0797%" height="15" fill="rgb(238,11,34)" fg:x="1126" fg:w="1"/><text x="90.0427%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (109 samples, 8.69%)</title><rect x="81.2600%" y="421" width="8.6922%" height="15" fill="rgb(210,130,26)" fg:x="1019" fg:w="109"/><text x="81.5100%" y="431.50">&lt;&amp;kernel::mo..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (103 samples, 8.21%)</title><rect x="81.7384%" y="405" width="8.2137%" height="15" fill="rgb(242,131,11)" fg:x="1025" fg:w="103"/><text x="81.9884%" y="415.50">plugins_cor..</text></g><g><title>indefinite::indefinite (103 samples, 8.21%)</title><rect x="81.7384%" y="389" width="8.2137%" height="15" fill="rgb(237,38,28)" fg:x="1025" fg:w="103"/><text x="81.9884%" y="399.50">indefinite:..</text></g><g><title>indefinite::methods::indefinite (103 samples, 8.21%)</title><rect x="81.7384%" y="373" width="8.2137%" height="15" fill="rgb(244,180,43)" fg:x="1025" fg:w="103"/><text x="81.9884%" y="383.50">indefinite:..</text></g><g><title>indefinite::methods::apply_rules (103 samples, 8.21%)</title><rect x="81.7384%" y="357" width="8.2137%" height="15" fill="rgb(214,171,19)" fg:x="1025" fg:w="103"/><text x="81.9884%" y="367.50">indefinite:..</text></g><g><title>indefinite::rules::other::Other::run (6 samples, 0.48%)</title><rect x="89.4737%" y="341" width="0.4785%" height="15" fill="rgb(252,101,45)" fg:x="1122" fg:w="6"/><text x="89.7237%" y="351.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (6 samples, 0.48%)</title><rect x="89.4737%" y="325" width="0.4785%" height="15" fill="rgb(211,96,33)" fg:x="1122" fg:w="6"/><text x="89.7237%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="89.8724%" y="309" width="0.0797%" height="15" fill="rgb(207,80,25)" fg:x="1127" fg:w="1"/><text x="90.1224%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="89.8724%" y="293" width="0.0797%" height="15" fill="rgb(225,15,35)" fg:x="1127" fg:w="1"/><text x="90.1224%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="89.8724%" y="277" width="0.0797%" height="15" fill="rgb(214,93,43)" fg:x="1127" fg:w="1"/><text x="90.1224%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="89.8724%" y="261" width="0.0797%" height="15" fill="rgb(248,42,37)" fg:x="1127" fg:w="1"/><text x="90.1224%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="89.8724%" y="245" width="0.0797%" height="15" fill="rgb(217,135,32)" fg:x="1127" fg:w="1"/><text x="90.1224%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="89.8724%" y="229" width="0.0797%" height="15" fill="rgb(216,74,28)" fg:x="1127" fg:w="1"/><text x="90.1224%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="89.9522%" y="421" width="0.0797%" height="15" fill="rgb(247,108,16)" fg:x="1128" fg:w="1"/><text x="90.2022%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="89.9522%" y="405" width="0.0797%" height="15" fill="rgb(205,219,30)" fg:x="1128" fg:w="1"/><text x="90.2022%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="89.9522%" y="389" width="0.0797%" height="15" fill="rgb(241,122,9)" fg:x="1128" fg:w="1"/><text x="90.2022%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="89.9522%" y="373" width="0.0797%" height="15" fill="rgb(216,148,50)" fg:x="1128" fg:w="1"/><text x="90.2022%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="89.9522%" y="357" width="0.0797%" height="15" fill="rgb(226,154,2)" fg:x="1128" fg:w="1"/><text x="90.2022%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="89.9522%" y="341" width="0.0797%" height="15" fill="rgb(220,128,1)" fg:x="1128" fg:w="1"/><text x="90.2022%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="89.9522%" y="325" width="0.0797%" height="15" fill="rgb(245,185,29)" fg:x="1128" fg:w="1"/><text x="90.2022%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="89.9522%" y="309" width="0.0797%" height="15" fill="rgb(243,161,2)" fg:x="1128" fg:w="1"/><text x="90.2022%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="89.9522%" y="293" width="0.0797%" height="15" fill="rgb(249,215,17)" fg:x="1128" fg:w="1"/><text x="90.2022%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="89.9522%" y="277" width="0.0797%" height="15" fill="rgb(237,67,11)" fg:x="1128" fg:w="1"/><text x="90.2022%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="89.9522%" y="261" width="0.0797%" height="15" fill="rgb(239,17,24)" fg:x="1128" fg:w="1"/><text x="90.2022%" y="271.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="90.0319%" y="373" width="0.0797%" height="15" fill="rgb(215,97,29)" fg:x="1129" fg:w="1"/><text x="90.2819%" y="383.50"></text></g><g><title>plugins_core::tools::contained_by (1 samples, 0.08%)</title><rect x="90.1116%" y="373" width="0.0797%" height="15" fill="rgb(253,228,42)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="90.1116%" y="357" width="0.0797%" height="15" fill="rgb(240,85,2)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="90.1116%" y="341" width="0.0797%" height="15" fill="rgb(214,155,4)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="90.1116%" y="325" width="0.0797%" height="15" fill="rgb(247,120,22)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="90.1116%" y="309" width="0.0797%" height="15" fill="rgb(211,208,6)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="90.1116%" y="293" width="0.0797%" height="15" fill="rgb(235,99,41)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="303.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="90.1116%" y="277" width="0.0797%" height="15" fill="rgb(223,28,8)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="90.1116%" y="261" width="0.0797%" height="15" fill="rgb(212,71,20)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="90.1116%" y="245" width="0.0797%" height="15" fill="rgb(206,85,3)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="90.1116%" y="229" width="0.0797%" height="15" fill="rgb(244,180,11)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="90.1116%" y="213" width="0.0797%" height="15" fill="rgb(223,16,21)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="90.1116%" y="197" width="0.0797%" height="15" fill="rgb(238,85,42)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="90.1116%" y="181" width="0.0797%" height="15" fill="rgb(205,85,8)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="90.1116%" y="165" width="0.0797%" height="15" fill="rgb(217,190,15)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="90.1116%" y="149" width="0.0797%" height="15" fill="rgb(243,192,23)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="90.1116%" y="133" width="0.0797%" height="15" fill="rgb(223,220,37)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.1116%" y="117" width="0.0797%" height="15" fill="rgb(208,41,17)" fg:x="1130" fg:w="1"/><text x="90.3616%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.1914%" y="341" width="0.0797%" height="15" fill="rgb(224,188,7)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.1914%" y="325" width="0.0797%" height="15" fill="rgb(236,16,50)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.1914%" y="309" width="0.0797%" height="15" fill="rgb(238,6,24)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.1914%" y="293" width="0.0797%" height="15" fill="rgb(253,67,45)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.1914%" y="277" width="0.0797%" height="15" fill="rgb(210,89,32)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.1914%" y="261" width="0.0797%" height="15" fill="rgb(208,89,9)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.1914%" y="245" width="0.0797%" height="15" fill="rgb(222,180,44)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="90.1914%" y="229" width="0.0797%" height="15" fill="rgb(250,181,46)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="90.1914%" y="213" width="0.0797%" height="15" fill="rgb(210,190,26)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="90.1914%" y="197" width="0.0797%" height="15" fill="rgb(253,49,13)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="90.1914%" y="181" width="0.0797%" height="15" fill="rgb(240,184,42)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="90.1914%" y="165" width="0.0797%" height="15" fill="rgb(246,59,37)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="90.1914%" y="149" width="0.0797%" height="15" fill="rgb(207,134,54)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="90.1914%" y="133" width="0.0797%" height="15" fill="rgb(250,122,24)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="90.1914%" y="117" width="0.0797%" height="15" fill="rgb(239,206,3)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="90.1914%" y="101" width="0.0797%" height="15" fill="rgb(253,220,32)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.1914%" y="85" width="0.0797%" height="15" fill="rgb(209,217,48)" fg:x="1131" fg:w="1"/><text x="90.4414%" y="95.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="90.1914%" y="357" width="0.1595%" height="15" fill="rgb(242,91,39)" fg:x="1131" fg:w="2"/><text x="90.4414%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.2711%" y="341" width="0.0797%" height="15" fill="rgb(228,4,13)" fg:x="1132" fg:w="1"/><text x="90.5211%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.2711%" y="325" width="0.0797%" height="15" fill="rgb(223,133,4)" fg:x="1132" fg:w="1"/><text x="90.5211%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="90.2711%" y="309" width="0.0797%" height="15" fill="rgb(215,105,30)" fg:x="1132" fg:w="1"/><text x="90.5211%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="90.2711%" y="293" width="0.0797%" height="15" fill="rgb(230,9,4)" fg:x="1132" fg:w="1"/><text x="90.5211%" y="303.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="90.2711%" y="277" width="0.0797%" height="15" fill="rgb(248,15,2)" fg:x="1132" fg:w="1"/><text x="90.5211%" y="287.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="90.2711%" y="261" width="0.0797%" height="15" fill="rgb(208,210,22)" fg:x="1132" fg:w="1"/><text x="90.5211%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.2711%" y="245" width="0.0797%" height="15" fill="rgb(208,112,41)" fg:x="1132" fg:w="1"/><text x="90.5211%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.2711%" y="229" width="0.0797%" height="15" fill="rgb(232,83,14)" fg:x="1132" fg:w="1"/><text x="90.5211%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.2711%" y="213" width="0.0797%" height="15" fill="rgb(229,65,11)" fg:x="1132" fg:w="1"/><text x="90.5211%" y="223.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.24%)</title><rect x="90.1914%" y="373" width="0.2392%" height="15" fill="rgb(228,126,24)" fg:x="1131" fg:w="3"/><text x="90.4414%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="90.3509%" y="357" width="0.0797%" height="15" fill="rgb(218,66,33)" fg:x="1133" fg:w="1"/><text x="90.6009%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="90.3509%" y="341" width="0.0797%" height="15" fill="rgb(251,49,52)" fg:x="1133" fg:w="1"/><text x="90.6009%" y="351.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="90.3509%" y="325" width="0.0797%" height="15" fill="rgb(219,46,37)" fg:x="1133" fg:w="1"/><text x="90.6009%" y="335.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="90.3509%" y="309" width="0.0797%" height="15" fill="rgb(213,53,49)" fg:x="1133" fg:w="1"/><text x="90.6009%" y="319.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="90.3509%" y="293" width="0.0797%" height="15" fill="rgb(214,134,1)" fg:x="1133" fg:w="1"/><text x="90.6009%" y="303.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (6 samples, 0.48%)</title><rect x="90.0319%" y="389" width="0.4785%" height="15" fill="rgb(208,139,43)" fg:x="1129" fg:w="6"/><text x="90.2819%" y="399.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="90.4306%" y="373" width="0.0797%" height="15" fill="rgb(231,105,35)" fg:x="1134" fg:w="1"/><text x="90.6806%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="90.4306%" y="357" width="0.0797%" height="15" fill="rgb(247,189,9)" fg:x="1134" fg:w="1"/><text x="90.6806%" y="367.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="90.4306%" y="341" width="0.0797%" height="15" fill="rgb(252,48,51)" fg:x="1134" fg:w="1"/><text x="90.6806%" y="351.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="90.4306%" y="325" width="0.0797%" height="15" fill="rgb(209,121,1)" fg:x="1134" fg:w="1"/><text x="90.6806%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (7 samples, 0.56%)</title><rect x="90.0319%" y="421" width="0.5582%" height="15" fill="rgb(231,40,26)" fg:x="1129" fg:w="7"/><text x="90.2819%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (7 samples, 0.56%)</title><rect x="90.0319%" y="405" width="0.5582%" height="15" fill="rgb(251,8,13)" fg:x="1129" fg:w="7"/><text x="90.2819%" y="415.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="90.5104%" y="389" width="0.0797%" height="15" fill="rgb(231,110,2)" fg:x="1135" fg:w="1"/><text x="90.7604%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="90.5104%" y="373" width="0.0797%" height="15" fill="rgb(216,153,22)" fg:x="1135" fg:w="1"/><text x="90.7604%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="90.5104%" y="357" width="0.0797%" height="15" fill="rgb(249,116,49)" fg:x="1135" fg:w="1"/><text x="90.7604%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="90.5104%" y="341" width="0.0797%" height="15" fill="rgb(230,89,2)" fg:x="1135" fg:w="1"/><text x="90.7604%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="90.5104%" y="325" width="0.0797%" height="15" fill="rgb(231,125,23)" fg:x="1135" fg:w="1"/><text x="90.7604%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="90.5104%" y="309" width="0.0797%" height="15" fill="rgb(212,217,18)" fg:x="1135" fg:w="1"/><text x="90.7604%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="90.5104%" y="293" width="0.0797%" height="15" fill="rgb(210,21,33)" fg:x="1135" fg:w="1"/><text x="90.7604%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="90.5104%" y="277" width="0.0797%" height="15" fill="rgb(241,97,9)" fg:x="1135" fg:w="1"/><text x="90.7604%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="90.5901%" y="389" width="0.0797%" height="15" fill="rgb(221,35,31)" fg:x="1136" fg:w="1"/><text x="90.8401%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.5901%" y="373" width="0.0797%" height="15" fill="rgb(251,23,23)" fg:x="1136" fg:w="1"/><text x="90.8401%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.5901%" y="357" width="0.0797%" height="15" fill="rgb(227,165,2)" fg:x="1136" fg:w="1"/><text x="90.8401%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.5901%" y="341" width="0.0797%" height="15" fill="rgb(242,24,2)" fg:x="1136" fg:w="1"/><text x="90.8401%" y="351.50"></text></g><g><title>plugins_core::library::actions::reply_ok (2 samples, 0.16%)</title><rect x="90.5901%" y="421" width="0.1595%" height="15" fill="rgb(242,138,51)" fg:x="1136" fg:w="2"/><text x="90.8401%" y="431.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="90.5901%" y="405" width="0.1595%" height="15" fill="rgb(220,219,5)" fg:x="1136" fg:w="2"/><text x="90.8401%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (1 samples, 0.08%)</title><rect x="90.6699%" y="389" width="0.0797%" height="15" fill="rgb(247,53,29)" fg:x="1137" fg:w="1"/><text x="90.9199%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="90.6699%" y="373" width="0.0797%" height="15" fill="rgb(233,43,39)" fg:x="1137" fg:w="1"/><text x="90.9199%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="90.6699%" y="357" width="0.0797%" height="15" fill="rgb(230,128,54)" fg:x="1137" fg:w="1"/><text x="90.9199%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="90.6699%" y="341" width="0.0797%" height="15" fill="rgb(218,20,12)" fg:x="1137" fg:w="1"/><text x="90.9199%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.6699%" y="325" width="0.0797%" height="15" fill="rgb(206,51,14)" fg:x="1137" fg:w="1"/><text x="90.9199%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="90.7496%" y="405" width="0.0797%" height="15" fill="rgb(223,16,35)" fg:x="1138" fg:w="1"/><text x="90.9996%" y="415.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="90.7496%" y="389" width="0.0797%" height="15" fill="rgb(226,165,37)" fg:x="1138" fg:w="1"/><text x="90.9996%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="90.7496%" y="373" width="0.0797%" height="15" fill="rgb(240,26,21)" fg:x="1138" fg:w="1"/><text x="90.9996%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="90.7496%" y="357" width="0.0797%" height="15" fill="rgb(240,72,46)" fg:x="1138" fg:w="1"/><text x="90.9996%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="90.7496%" y="341" width="0.0797%" height="15" fill="rgb(211,33,41)" fg:x="1138" fg:w="1"/><text x="90.9996%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="90.7496%" y="325" width="0.0797%" height="15" fill="rgb(224,157,46)" fg:x="1138" fg:w="1"/><text x="90.9996%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.7496%" y="309" width="0.0797%" height="15" fill="rgb(223,59,19)" fg:x="1138" fg:w="1"/><text x="90.9996%" y="319.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="90.8293%" y="405" width="0.0797%" height="15" fill="rgb(239,187,1)" fg:x="1139" fg:w="1"/><text x="91.0793%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="90.8293%" y="389" width="0.0797%" height="15" fill="rgb(226,95,9)" fg:x="1139" fg:w="1"/><text x="91.0793%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="90.8293%" y="373" width="0.0797%" height="15" fill="rgb(234,61,54)" fg:x="1139" fg:w="1"/><text x="91.0793%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="90.8293%" y="357" width="0.0797%" height="15" fill="rgb(205,209,47)" fg:x="1139" fg:w="1"/><text x="91.0793%" y="367.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="90.8293%" y="341" width="0.0797%" height="15" fill="rgb(228,7,43)" fg:x="1139" fg:w="1"/><text x="91.0793%" y="351.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (123 samples, 9.81%)</title><rect x="81.1802%" y="437" width="9.8086%" height="15" fill="rgb(240,217,52)" fg:x="1018" fg:w="123"/><text x="81.4302%" y="447.50">&lt;plugins_core:..</text></g><g><title>plugins_core::location::change_location (3 samples, 0.24%)</title><rect x="90.7496%" y="421" width="0.2392%" height="15" fill="rgb(211,178,21)" fg:x="1138" fg:w="3"/><text x="90.9996%" y="431.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="90.9091%" y="405" width="0.0797%" height="15" fill="rgb(205,25,34)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="90.9091%" y="389" width="0.0797%" height="15" fill="rgb(209,57,11)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.9091%" y="373" width="0.0797%" height="15" fill="rgb(221,99,2)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.9091%" y="357" width="0.0797%" height="15" fill="rgb(232,79,22)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.9091%" y="341" width="0.0797%" height="15" fill="rgb(221,145,32)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.9091%" y="325" width="0.0797%" height="15" fill="rgb(236,133,36)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.9091%" y="309" width="0.0797%" height="15" fill="rgb(208,224,44)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="90.9091%" y="293" width="0.0797%" height="15" fill="rgb(235,143,15)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="90.9091%" y="277" width="0.0797%" height="15" fill="rgb(249,83,27)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="90.9091%" y="261" width="0.0797%" height="15" fill="rgb(238,226,19)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="90.9091%" y="245" width="0.0797%" height="15" fill="rgb(226,206,27)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="90.9091%" y="229" width="0.0797%" height="15" fill="rgb(251,182,9)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="90.9091%" y="213" width="0.0797%" height="15" fill="rgb(212,140,41)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="90.9091%" y="197" width="0.0797%" height="15" fill="rgb(220,106,18)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="90.9091%" y="181" width="0.0797%" height="15" fill="rgb(252,46,41)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="90.9091%" y="165" width="0.0797%" height="15" fill="rgb(209,222,15)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.9091%" y="149" width="0.0797%" height="15" fill="rgb(233,83,50)" fg:x="1140" fg:w="1"/><text x="91.1591%" y="159.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="90.9888%" y="405" width="0.0797%" height="15" fill="rgb(205,212,0)" fg:x="1141" fg:w="1"/><text x="91.2388%" y="415.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="90.9888%" y="389" width="0.0797%" height="15" fill="rgb(235,117,51)" fg:x="1141" fg:w="1"/><text x="91.2388%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="90.9888%" y="373" width="0.0797%" height="15" fill="rgb(233,133,48)" fg:x="1141" fg:w="1"/><text x="91.2388%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="90.9888%" y="357" width="0.0797%" height="15" fill="rgb(219,3,2)" fg:x="1141" fg:w="1"/><text x="91.2388%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.9888%" y="341" width="0.0797%" height="15" fill="rgb(225,80,52)" fg:x="1141" fg:w="1"/><text x="91.2388%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="90.9888%" y="325" width="0.0797%" height="15" fill="rgb(235,195,42)" fg:x="1141" fg:w="1"/><text x="91.2388%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.9888%" y="309" width="0.0797%" height="15" fill="rgb(240,207,46)" fg:x="1141" fg:w="1"/><text x="91.2388%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="90.9888%" y="293" width="0.0797%" height="15" fill="rgb(236,112,50)" fg:x="1141" fg:w="1"/><text x="91.2388%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.0686%" y="389" width="0.0797%" height="15" fill="rgb(249,151,27)" fg:x="1142" fg:w="1"/><text x="91.3186%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="91.0686%" y="405" width="0.1595%" height="15" fill="rgb(253,223,52)" fg:x="1142" fg:w="2"/><text x="91.3186%" y="415.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="91.1483%" y="389" width="0.0797%" height="15" fill="rgb(215,55,33)" fg:x="1143" fg:w="1"/><text x="91.3983%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="91.1483%" y="373" width="0.0797%" height="15" fill="rgb(207,24,17)" fg:x="1143" fg:w="1"/><text x="91.3983%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="91.2281%" y="277" width="0.0797%" height="15" fill="rgb(218,169,32)" fg:x="1144" fg:w="1"/><text x="91.4781%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="91.2281%" y="405" width="0.1595%" height="15" fill="rgb(209,210,6)" fg:x="1144" fg:w="2"/><text x="91.4781%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="91.2281%" y="389" width="0.1595%" height="15" fill="rgb(225,208,8)" fg:x="1144" fg:w="2"/><text x="91.4781%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="91.2281%" y="373" width="0.1595%" height="15" fill="rgb(238,14,32)" fg:x="1144" fg:w="2"/><text x="91.4781%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="91.2281%" y="357" width="0.1595%" height="15" fill="rgb(211,137,3)" fg:x="1144" fg:w="2"/><text x="91.4781%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="91.2281%" y="341" width="0.1595%" height="15" fill="rgb(207,171,19)" fg:x="1144" fg:w="2"/><text x="91.4781%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="91.2281%" y="325" width="0.1595%" height="15" fill="rgb(250,80,8)" fg:x="1144" fg:w="2"/><text x="91.4781%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="91.2281%" y="309" width="0.1595%" height="15" fill="rgb(209,103,53)" fg:x="1144" fg:w="2"/><text x="91.4781%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="91.2281%" y="293" width="0.1595%" height="15" fill="rgb(233,198,10)" fg:x="1144" fg:w="2"/><text x="91.4781%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="91.3078%" y="277" width="0.0797%" height="15" fill="rgb(236,125,25)" fg:x="1145" fg:w="1"/><text x="91.5578%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.3078%" y="261" width="0.0797%" height="15" fill="rgb(254,182,48)" fg:x="1145" fg:w="1"/><text x="91.5578%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="91.4673%" y="325" width="0.0797%" height="15" fill="rgb(216,108,44)" fg:x="1147" fg:w="1"/><text x="91.7173%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="91.4673%" y="309" width="0.0797%" height="15" fill="rgb(222,72,39)" fg:x="1147" fg:w="1"/><text x="91.7173%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="91.4673%" y="293" width="0.0797%" height="15" fill="rgb(252,70,39)" fg:x="1147" fg:w="1"/><text x="91.7173%" y="303.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="91.4673%" y="277" width="0.0797%" height="15" fill="rgb(243,99,34)" fg:x="1147" fg:w="1"/><text x="91.7173%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="91.4673%" y="261" width="0.0797%" height="15" fill="rgb(252,109,12)" fg:x="1147" fg:w="1"/><text x="91.7173%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="91.4673%" y="245" width="0.0797%" height="15" fill="rgb(211,186,10)" fg:x="1147" fg:w="1"/><text x="91.7173%" y="255.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="91.4673%" y="229" width="0.0797%" height="15" fill="rgb(246,90,8)" fg:x="1147" fg:w="1"/><text x="91.7173%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="91.6268%" y="261" width="0.1595%" height="15" fill="rgb(226,91,24)" fg:x="1149" fg:w="2"/><text x="91.8768%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="91.6268%" y="245" width="0.1595%" height="15" fill="rgb(216,28,44)" fg:x="1149" fg:w="2"/><text x="91.8768%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="91.7863%" y="261" width="0.0797%" height="15" fill="rgb(229,36,0)" fg:x="1151" fg:w="1"/><text x="92.0363%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="91.7863%" y="245" width="0.0797%" height="15" fill="rgb(245,97,18)" fg:x="1151" fg:w="1"/><text x="92.0363%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.8660%" y="197" width="0.0797%" height="15" fill="rgb(241,97,54)" fg:x="1152" fg:w="1"/><text x="92.1160%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.8660%" y="181" width="0.0797%" height="15" fill="rgb(234,125,17)" fg:x="1152" fg:w="1"/><text x="92.1160%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.8660%" y="165" width="0.0797%" height="15" fill="rgb(228,172,39)" fg:x="1152" fg:w="1"/><text x="92.1160%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.8660%" y="149" width="0.0797%" height="15" fill="rgb(227,169,1)" fg:x="1152" fg:w="1"/><text x="92.1160%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="91.9458%" y="197" width="0.0797%" height="15" fill="rgb(206,13,35)" fg:x="1153" fg:w="1"/><text x="92.1958%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="91.9458%" y="181" width="0.0797%" height="15" fill="rgb(211,117,30)" fg:x="1153" fg:w="1"/><text x="92.1958%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.0255%" y="181" width="0.0797%" height="15" fill="rgb(230,198,4)" fg:x="1154" fg:w="1"/><text x="92.2755%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.0255%" y="165" width="0.0797%" height="15" fill="rgb(213,87,54)" fg:x="1154" fg:w="1"/><text x="92.2755%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (11 samples, 0.88%)</title><rect x="92.0255%" y="197" width="0.8772%" height="15" fill="rgb(248,43,22)" fg:x="1154" fg:w="11"/><text x="92.2755%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (10 samples, 0.80%)</title><rect x="92.1053%" y="181" width="0.7974%" height="15" fill="rgb(213,175,48)" fg:x="1155" fg:w="10"/><text x="92.3553%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (10 samples, 0.80%)</title><rect x="92.1053%" y="165" width="0.7974%" height="15" fill="rgb(252,55,9)" fg:x="1155" fg:w="10"/><text x="92.3553%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 1.20%)</title><rect x="91.8660%" y="245" width="1.1962%" height="15" fill="rgb(231,72,33)" fg:x="1152" fg:w="15"/><text x="92.1160%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (15 samples, 1.20%)</title><rect x="91.8660%" y="229" width="1.1962%" height="15" fill="rgb(213,2,54)" fg:x="1152" fg:w="15"/><text x="92.1160%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (15 samples, 1.20%)</title><rect x="91.8660%" y="213" width="1.1962%" height="15" fill="rgb(208,88,25)" fg:x="1152" fg:w="15"/><text x="92.1160%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="92.9027%" y="197" width="0.1595%" height="15" fill="rgb(215,117,13)" fg:x="1165" fg:w="2"/><text x="93.1527%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.0622%" y="229" width="0.0797%" height="15" fill="rgb(243,147,21)" fg:x="1167" fg:w="1"/><text x="93.3122%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="93.0622%" y="245" width="0.1595%" height="15" fill="rgb(208,215,36)" fg:x="1167" fg:w="2"/><text x="93.3122%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="93.1419%" y="229" width="0.0797%" height="15" fill="rgb(238,187,24)" fg:x="1168" fg:w="1"/><text x="93.3919%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.1419%" y="213" width="0.0797%" height="15" fill="rgb(214,173,11)" fg:x="1168" fg:w="1"/><text x="93.3919%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.1419%" y="197" width="0.0797%" height="15" fill="rgb(222,71,20)" fg:x="1168" fg:w="1"/><text x="93.3919%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.1419%" y="181" width="0.0797%" height="15" fill="rgb(242,125,4)" fg:x="1168" fg:w="1"/><text x="93.3919%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (21 samples, 1.67%)</title><rect x="91.6268%" y="277" width="1.6746%" height="15" fill="rgb(217,101,52)" fg:x="1149" fg:w="21"/><text x="91.8768%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (18 samples, 1.44%)</title><rect x="91.8660%" y="261" width="1.4354%" height="15" fill="rgb(223,2,50)" fg:x="1152" fg:w="18"/><text x="92.1160%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="93.2217%" y="245" width="0.0797%" height="15" fill="rgb(225,197,9)" fg:x="1169" fg:w="1"/><text x="93.4717%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="93.3014%" y="245" width="0.0797%" height="15" fill="rgb(234,76,27)" fg:x="1170" fg:w="1"/><text x="93.5514%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="93.3014%" y="277" width="0.1595%" height="15" fill="rgb(213,161,26)" fg:x="1170" fg:w="2"/><text x="93.5514%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="93.3014%" y="261" width="0.1595%" height="15" fill="rgb(210,228,2)" fg:x="1170" fg:w="2"/><text x="93.5514%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="93.3812%" y="245" width="0.0797%" height="15" fill="rgb(235,4,16)" fg:x="1171" fg:w="1"/><text x="93.6312%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="93.3812%" y="229" width="0.0797%" height="15" fill="rgb(235,83,42)" fg:x="1171" fg:w="1"/><text x="93.6312%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="93.3812%" y="213" width="0.0797%" height="15" fill="rgb(207,116,39)" fg:x="1171" fg:w="1"/><text x="93.6312%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="93.3812%" y="197" width="0.0797%" height="15" fill="rgb(253,206,9)" fg:x="1171" fg:w="1"/><text x="93.6312%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="93.4609%" y="229" width="0.0797%" height="15" fill="rgb(234,32,47)" fg:x="1172" fg:w="1"/><text x="93.7109%" y="239.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="93.4609%" y="213" width="0.0797%" height="15" fill="rgb(247,40,39)" fg:x="1172" fg:w="1"/><text x="93.7109%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (26 samples, 2.07%)</title><rect x="91.5470%" y="325" width="2.0734%" height="15" fill="rgb(236,199,13)" fg:x="1148" fg:w="26"/><text x="91.7970%" y="335.50">r..</text></g><g><title>regex::builders::Builder::build_one_string (25 samples, 1.99%)</title><rect x="91.6268%" y="309" width="1.9936%" height="15" fill="rgb(240,127,44)" fg:x="1149" fg:w="25"/><text x="91.8768%" y="319.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (25 samples, 1.99%)</title><rect x="91.6268%" y="293" width="1.9936%" height="15" fill="rgb(248,220,47)" fg:x="1149" fg:w="25"/><text x="91.8768%" y="303.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="93.4609%" y="277" width="0.1595%" height="15" fill="rgb(240,78,9)" fg:x="1172" fg:w="2"/><text x="93.7109%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="93.4609%" y="261" width="0.1595%" height="15" fill="rgb(245,119,5)" fg:x="1172" fg:w="2"/><text x="93.7109%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="93.4609%" y="245" width="0.1595%" height="15" fill="rgb(238,175,31)" fg:x="1172" fg:w="2"/><text x="93.7109%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="93.5407%" y="229" width="0.0797%" height="15" fill="rgb(232,140,42)" fg:x="1173" fg:w="1"/><text x="93.7907%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (28 samples, 2.23%)</title><rect x="91.4673%" y="341" width="2.2329%" height="15" fill="rgb(218,179,7)" fg:x="1147" fg:w="28"/><text x="91.7173%" y="351.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="93.6204%" y="325" width="0.0797%" height="15" fill="rgb(232,79,27)" fg:x="1174" fg:w="1"/><text x="93.8704%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="93.6204%" y="309" width="0.0797%" height="15" fill="rgb(247,11,19)" fg:x="1174" fg:w="1"/><text x="93.8704%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="93.6204%" y="293" width="0.0797%" height="15" fill="rgb(216,171,54)" fg:x="1174" fg:w="1"/><text x="93.8704%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="93.6204%" y="277" width="0.0797%" height="15" fill="rgb(233,158,36)" fg:x="1174" fg:w="1"/><text x="93.8704%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="93.6204%" y="261" width="0.0797%" height="15" fill="rgb(215,48,47)" fg:x="1174" fg:w="1"/><text x="93.8704%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="93.7002%" y="325" width="0.0797%" height="15" fill="rgb(230,223,15)" fg:x="1175" fg:w="1"/><text x="93.9502%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.7002%" y="309" width="0.0797%" height="15" fill="rgb(234,49,19)" fg:x="1175" fg:w="1"/><text x="93.9502%" y="319.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (1 samples, 0.08%)</title><rect x="93.7799%" y="325" width="0.0797%" height="15" fill="rgb(232,89,25)" fg:x="1176" fg:w="1"/><text x="94.0299%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="93.7799%" y="309" width="0.0797%" height="15" fill="rgb(237,206,28)" fg:x="1176" fg:w="1"/><text x="94.0299%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="93.7799%" y="293" width="0.0797%" height="15" fill="rgb(249,68,37)" fg:x="1176" fg:w="1"/><text x="94.0299%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="93.7799%" y="277" width="0.0797%" height="15" fill="rgb(226,99,43)" fg:x="1176" fg:w="1"/><text x="94.0299%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="93.7799%" y="261" width="0.0797%" height="15" fill="rgb(216,46,28)" fg:x="1176" fg:w="1"/><text x="94.0299%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="93.7799%" y="245" width="0.0797%" height="15" fill="rgb(216,33,9)" fg:x="1176" fg:w="1"/><text x="94.0299%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="93.7799%" y="229" width="0.0797%" height="15" fill="rgb(216,129,4)" fg:x="1176" fg:w="1"/><text x="94.0299%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="93.9394%" y="277" width="0.0797%" height="15" fill="rgb(216,106,3)" fg:x="1178" fg:w="1"/><text x="94.1894%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.9394%" y="261" width="0.0797%" height="15" fill="rgb(217,79,45)" fg:x="1178" fg:w="1"/><text x="94.1894%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="93.9394%" y="245" width="0.0797%" height="15" fill="rgb(239,98,13)" fg:x="1178" fg:w="1"/><text x="94.1894%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.9394%" y="229" width="0.0797%" height="15" fill="rgb(221,115,4)" fg:x="1178" fg:w="1"/><text x="94.1894%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.9394%" y="213" width="0.0797%" height="15" fill="rgb(215,85,0)" fg:x="1178" fg:w="1"/><text x="94.1894%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="94.0191%" y="261" width="0.3190%" height="15" fill="rgb(230,62,15)" fg:x="1179" fg:w="4"/><text x="94.2691%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="94.0191%" y="245" width="0.3190%" height="15" fill="rgb(247,162,2)" fg:x="1179" fg:w="4"/><text x="94.2691%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.2584%" y="229" width="0.0797%" height="15" fill="rgb(212,112,32)" fg:x="1182" fg:w="1"/><text x="94.5084%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="94.3381%" y="229" width="0.2392%" height="15" fill="rgb(216,137,9)" fg:x="1183" fg:w="3"/><text x="94.5881%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="94.4179%" y="213" width="0.1595%" height="15" fill="rgb(250,149,33)" fg:x="1184" fg:w="2"/><text x="94.6679%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.4976%" y="197" width="0.0797%" height="15" fill="rgb(246,124,31)" fg:x="1185" fg:w="1"/><text x="94.7476%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.4976%" y="181" width="0.0797%" height="15" fill="rgb(216,210,22)" fg:x="1185" fg:w="1"/><text x="94.7476%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.4976%" y="165" width="0.0797%" height="15" fill="rgb(228,128,36)" fg:x="1185" fg:w="1"/><text x="94.7476%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.32%)</title><rect x="94.3381%" y="261" width="0.3190%" height="15" fill="rgb(231,41,0)" fg:x="1183" fg:w="4"/><text x="94.5881%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="94.3381%" y="245" width="0.3190%" height="15" fill="rgb(232,61,26)" fg:x="1183" fg:w="4"/><text x="94.5881%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="94.5774%" y="229" width="0.0797%" height="15" fill="rgb(217,60,9)" fg:x="1186" fg:w="1"/><text x="94.8274%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="94.5774%" y="213" width="0.0797%" height="15" fill="rgb(233,41,35)" fg:x="1186" fg:w="1"/><text x="94.8274%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="94.5774%" y="197" width="0.0797%" height="15" fill="rgb(253,139,43)" fg:x="1186" fg:w="1"/><text x="94.8274%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="94.6571%" y="149" width="0.1595%" height="15" fill="rgb(245,100,51)" fg:x="1187" fg:w="2"/><text x="94.9071%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.8166%" y="149" width="0.0797%" height="15" fill="rgb(250,208,18)" fg:x="1189" fg:w="1"/><text x="95.0666%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="94.8963%" y="149" width="0.0797%" height="15" fill="rgb(245,33,2)" fg:x="1190" fg:w="1"/><text x="95.1463%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.8963%" y="133" width="0.0797%" height="15" fill="rgb(244,171,31)" fg:x="1190" fg:w="1"/><text x="95.1463%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.8963%" y="117" width="0.0797%" height="15" fill="rgb(229,1,43)" fg:x="1190" fg:w="1"/><text x="95.1463%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.8963%" y="101" width="0.0797%" height="15" fill="rgb(223,153,28)" fg:x="1190" fg:w="1"/><text x="95.1463%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="94.9761%" y="149" width="0.0797%" height="15" fill="rgb(241,4,46)" fg:x="1191" fg:w="1"/><text x="95.2261%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="94.9761%" y="133" width="0.0797%" height="15" fill="rgb(230,81,11)" fg:x="1191" fg:w="1"/><text x="95.2261%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="95.0558%" y="133" width="0.0797%" height="15" fill="rgb(253,204,39)" fg:x="1192" fg:w="1"/><text x="95.3058%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.0558%" y="117" width="0.0797%" height="15" fill="rgb(250,96,8)" fg:x="1192" fg:w="1"/><text x="95.3058%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.0558%" y="101" width="0.0797%" height="15" fill="rgb(219,89,54)" fg:x="1192" fg:w="1"/><text x="95.3058%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.0558%" y="85" width="0.0797%" height="15" fill="rgb(235,136,39)" fg:x="1192" fg:w="1"/><text x="95.3058%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (22 samples, 1.75%)</title><rect x="95.0558%" y="149" width="1.7544%" height="15" fill="rgb(230,155,37)" fg:x="1192" fg:w="22"/><text x="95.3058%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (21 samples, 1.67%)</title><rect x="95.1356%" y="133" width="1.6746%" height="15" fill="rgb(235,199,50)" fg:x="1193" fg:w="21"/><text x="95.3856%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (21 samples, 1.67%)</title><rect x="95.1356%" y="117" width="1.6746%" height="15" fill="rgb(227,81,32)" fg:x="1193" fg:w="21"/><text x="95.3856%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 2.23%)</title><rect x="94.6571%" y="245" width="2.2329%" height="15" fill="rgb(225,6,28)" fg:x="1187" fg:w="28"/><text x="94.9071%" y="255.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (28 samples, 2.23%)</title><rect x="94.6571%" y="229" width="2.2329%" height="15" fill="rgb(207,211,17)" fg:x="1187" fg:w="28"/><text x="94.9071%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (28 samples, 2.23%)</title><rect x="94.6571%" y="213" width="2.2329%" height="15" fill="rgb(228,31,49)" fg:x="1187" fg:w="28"/><text x="94.9071%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (28 samples, 2.23%)</title><rect x="94.6571%" y="197" width="2.2329%" height="15" fill="rgb(230,185,3)" fg:x="1187" fg:w="28"/><text x="94.9071%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (28 samples, 2.23%)</title><rect x="94.6571%" y="181" width="2.2329%" height="15" fill="rgb(206,167,15)" fg:x="1187" fg:w="28"/><text x="94.9071%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (28 samples, 2.23%)</title><rect x="94.6571%" y="165" width="2.2329%" height="15" fill="rgb(234,2,36)" fg:x="1187" fg:w="28"/><text x="94.9071%" y="175.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="96.8102%" y="149" width="0.0797%" height="15" fill="rgb(239,160,29)" fg:x="1214" fg:w="1"/><text x="97.0602%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.9697%" y="229" width="0.0797%" height="15" fill="rgb(236,117,2)" fg:x="1216" fg:w="1"/><text x="97.2197%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.9697%" y="213" width="0.0797%" height="15" fill="rgb(215,117,37)" fg:x="1216" fg:w="1"/><text x="97.2197%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.9697%" y="197" width="0.0797%" height="15" fill="rgb(244,48,36)" fg:x="1216" fg:w="1"/><text x="97.2197%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.9697%" y="181" width="0.0797%" height="15" fill="rgb(223,101,37)" fg:x="1216" fg:w="1"/><text x="97.2197%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="97.0494%" y="229" width="0.0797%" height="15" fill="rgb(205,200,1)" fg:x="1217" fg:w="1"/><text x="97.2994%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (40 samples, 3.19%)</title><rect x="94.0191%" y="277" width="3.1898%" height="15" fill="rgb(209,193,20)" fg:x="1179" fg:w="40"/><text x="94.2691%" y="287.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (32 samples, 2.55%)</title><rect x="94.6571%" y="261" width="2.5518%" height="15" fill="rgb(214,63,13)" fg:x="1187" fg:w="32"/><text x="94.9071%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="96.8900%" y="245" width="0.3190%" height="15" fill="rgb(253,113,46)" fg:x="1215" fg:w="4"/><text x="97.1400%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="97.1292%" y="229" width="0.0797%" height="15" fill="rgb(237,103,34)" fg:x="1218" fg:w="1"/><text x="97.3792%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.1292%" y="213" width="0.0797%" height="15" fill="rgb(223,38,25)" fg:x="1218" fg:w="1"/><text x="97.3792%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1292%" y="197" width="0.0797%" height="15" fill="rgb(251,32,32)" fg:x="1218" fg:w="1"/><text x="97.3792%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.1292%" y="181" width="0.0797%" height="15" fill="rgb(228,65,22)" fg:x="1218" fg:w="1"/><text x="97.3792%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="97.2089%" y="277" width="0.0797%" height="15" fill="rgb(205,11,46)" fg:x="1219" fg:w="1"/><text x="97.4589%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="97.2089%" y="261" width="0.0797%" height="15" fill="rgb(220,35,2)" fg:x="1219" fg:w="1"/><text x="97.4589%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="97.2089%" y="245" width="0.0797%" height="15" fill="rgb(217,151,17)" fg:x="1219" fg:w="1"/><text x="97.4589%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="97.2089%" y="229" width="0.0797%" height="15" fill="rgb(243,227,35)" fg:x="1219" fg:w="1"/><text x="97.4589%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (46 samples, 3.67%)</title><rect x="93.7002%" y="341" width="3.6683%" height="15" fill="rgb(214,0,34)" fg:x="1175" fg:w="46"/><text x="93.9502%" y="351.50">inde..</text></g><g><title>regex::regex::string::Regex::new (44 samples, 3.51%)</title><rect x="93.8596%" y="325" width="3.5088%" height="15" fill="rgb(209,42,37)" fg:x="1177" fg:w="44"/><text x="94.1096%" y="335.50">reg..</text></g><g><title>regex::builders::Builder::build_one_string (43 samples, 3.43%)</title><rect x="93.9394%" y="309" width="3.4290%" height="15" fill="rgb(251,176,30)" fg:x="1178" fg:w="43"/><text x="94.1894%" y="319.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (43 samples, 3.43%)</title><rect x="93.9394%" y="293" width="3.4290%" height="15" fill="rgb(223,64,40)" fg:x="1178" fg:w="43"/><text x="94.1894%" y="303.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.2887%" y="277" width="0.0797%" height="15" fill="rgb(227,180,23)" fg:x="1220" fg:w="1"/><text x="97.5387%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.2887%" y="261" width="0.0797%" height="15" fill="rgb(220,137,31)" fg:x="1220" fg:w="1"/><text x="97.5387%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="97.2887%" y="245" width="0.0797%" height="15" fill="rgb(245,124,25)" fg:x="1220" fg:w="1"/><text x="97.5387%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.2887%" y="229" width="0.0797%" height="15" fill="rgb(217,157,5)" fg:x="1220" fg:w="1"/><text x="97.5387%" y="239.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="97.2887%" y="213" width="0.0797%" height="15" fill="rgb(225,59,2)" fg:x="1220" fg:w="1"/><text x="97.5387%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="97.3684%" y="245" width="0.0797%" height="15" fill="rgb(220,182,9)" fg:x="1221" fg:w="1"/><text x="97.6184%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="97.3684%" y="229" width="0.0797%" height="15" fill="rgb(249,54,24)" fg:x="1221" fg:w="1"/><text x="97.6184%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="97.3684%" y="213" width="0.0797%" height="15" fill="rgb(216,89,17)" fg:x="1221" fg:w="1"/><text x="97.6184%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (2 samples, 0.16%)</title><rect x="97.3684%" y="261" width="0.1595%" height="15" fill="rgb(245,20,45)" fg:x="1221" fg:w="2"/><text x="97.6184%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="97.4482%" y="245" width="0.0797%" height="15" fill="rgb(230,83,14)" fg:x="1222" fg:w="1"/><text x="97.6982%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="97.4482%" y="229" width="0.0797%" height="15" fill="rgb(246,109,11)" fg:x="1222" fg:w="1"/><text x="97.6982%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="97.5279%" y="261" width="0.0797%" height="15" fill="rgb(235,85,23)" fg:x="1223" fg:w="1"/><text x="97.7779%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="97.5279%" y="245" width="0.0797%" height="15" fill="rgb(215,101,36)" fg:x="1223" fg:w="1"/><text x="97.7779%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="97.5279%" y="229" width="0.0797%" height="15" fill="rgb(228,140,31)" fg:x="1223" fg:w="1"/><text x="97.7779%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="97.5279%" y="213" width="0.0797%" height="15" fill="rgb(234,162,37)" fg:x="1223" fg:w="1"/><text x="97.7779%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (5 samples, 0.40%)</title><rect x="97.3684%" y="309" width="0.3987%" height="15" fill="rgb(221,0,24)" fg:x="1221" fg:w="5"/><text x="97.6184%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (5 samples, 0.40%)</title><rect x="97.3684%" y="293" width="0.3987%" height="15" fill="rgb(230,161,41)" fg:x="1221" fg:w="5"/><text x="97.6184%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (5 samples, 0.40%)</title><rect x="97.3684%" y="277" width="0.3987%" height="15" fill="rgb(224,46,24)" fg:x="1221" fg:w="5"/><text x="97.6184%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="97.6077%" y="261" width="0.1595%" height="15" fill="rgb(205,59,32)" fg:x="1224" fg:w="2"/><text x="97.8577%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.6077%" y="245" width="0.1595%" height="15" fill="rgb(239,31,20)" fg:x="1224" fg:w="2"/><text x="97.8577%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="97.6874%" y="229" width="0.0797%" height="15" fill="rgb(233,149,44)" fg:x="1225" fg:w="1"/><text x="97.9374%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="97.7671%" y="245" width="0.1595%" height="15" fill="rgb(243,47,26)" fg:x="1226" fg:w="2"/><text x="98.0171%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (88 samples, 7.02%)</title><rect x="90.9888%" y="421" width="7.0175%" height="15" fill="rgb(233,107,5)" fg:x="1141" fg:w="88"/><text x="91.2388%" y="431.50">&lt;&amp;kernel:..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (83 samples, 6.62%)</title><rect x="91.3876%" y="405" width="6.6188%" height="15" fill="rgb(248,140,33)" fg:x="1146" fg:w="83"/><text x="91.6376%" y="415.50">plugins_c..</text></g><g><title>indefinite::indefinite (83 samples, 6.62%)</title><rect x="91.3876%" y="389" width="6.6188%" height="15" fill="rgb(228,178,19)" fg:x="1146" fg:w="83"/><text x="91.6376%" y="399.50">indefinit..</text></g><g><title>indefinite::methods::indefinite (83 samples, 6.62%)</title><rect x="91.3876%" y="373" width="6.6188%" height="15" fill="rgb(224,39,49)" fg:x="1146" fg:w="83"/><text x="91.6376%" y="383.50">indefinit..</text></g><g><title>indefinite::methods::apply_rules (83 samples, 6.62%)</title><rect x="91.3876%" y="357" width="6.6188%" height="15" fill="rgb(246,56,47)" fg:x="1146" fg:w="83"/><text x="91.6376%" y="367.50">indefinit..</text></g><g><title>indefinite::rules::other::Other::run (8 samples, 0.64%)</title><rect x="97.3684%" y="341" width="0.6380%" height="15" fill="rgb(220,73,27)" fg:x="1221" fg:w="8"/><text x="97.6184%" y="351.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (8 samples, 0.64%)</title><rect x="97.3684%" y="325" width="0.6380%" height="15" fill="rgb(239,112,21)" fg:x="1221" fg:w="8"/><text x="97.6184%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="97.7671%" y="309" width="0.2392%" height="15" fill="rgb(253,14,51)" fg:x="1226" fg:w="3"/><text x="98.0171%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="97.7671%" y="293" width="0.2392%" height="15" fill="rgb(215,58,12)" fg:x="1226" fg:w="3"/><text x="98.0171%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="97.7671%" y="277" width="0.2392%" height="15" fill="rgb(207,181,19)" fg:x="1226" fg:w="3"/><text x="98.0171%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="97.7671%" y="261" width="0.2392%" height="15" fill="rgb(211,214,34)" fg:x="1226" fg:w="3"/><text x="98.0171%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="97.9266%" y="245" width="0.0797%" height="15" fill="rgb(243,124,39)" fg:x="1228" fg:w="1"/><text x="98.1766%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.9266%" y="229" width="0.0797%" height="15" fill="rgb(248,135,21)" fg:x="1228" fg:w="1"/><text x="98.1766%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.9266%" y="213" width="0.0797%" height="15" fill="rgb(245,218,3)" fg:x="1228" fg:w="1"/><text x="98.1766%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9266%" y="197" width="0.0797%" height="15" fill="rgb(225,144,22)" fg:x="1228" fg:w="1"/><text x="98.1766%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0064%" y="341" width="0.0797%" height="15" fill="rgb(250,90,15)" fg:x="1229" fg:w="1"/><text x="98.2564%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0064%" y="325" width="0.0797%" height="15" fill="rgb(224,64,29)" fg:x="1229" fg:w="1"/><text x="98.2564%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0064%" y="309" width="0.0797%" height="15" fill="rgb(217,50,47)" fg:x="1229" fg:w="1"/><text x="98.2564%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.0064%" y="293" width="0.0797%" height="15" fill="rgb(231,159,47)" fg:x="1229" fg:w="1"/><text x="98.2564%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.0064%" y="277" width="0.0797%" height="15" fill="rgb(213,89,29)" fg:x="1229" fg:w="1"/><text x="98.2564%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.0064%" y="261" width="0.0797%" height="15" fill="rgb(243,90,23)" fg:x="1229" fg:w="1"/><text x="98.2564%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.0064%" y="245" width="0.0797%" height="15" fill="rgb(213,21,6)" fg:x="1229" fg:w="1"/><text x="98.2564%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.0064%" y="229" width="0.0797%" height="15" fill="rgb(237,139,17)" fg:x="1229" fg:w="1"/><text x="98.2564%" y="239.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (2 samples, 0.16%)</title><rect x="98.0064%" y="389" width="0.1595%" height="15" fill="rgb(250,147,17)" fg:x="1229" fg:w="2"/><text x="98.2564%" y="399.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="98.0064%" y="373" width="0.1595%" height="15" fill="rgb(212,208,42)" fg:x="1229" fg:w="2"/><text x="98.2564%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.0064%" y="357" width="0.1595%" height="15" fill="rgb(215,229,40)" fg:x="1229" fg:w="2"/><text x="98.2564%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0861%" y="341" width="0.0797%" height="15" fill="rgb(206,204,1)" fg:x="1230" fg:w="1"/><text x="98.3361%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0861%" y="325" width="0.0797%" height="15" fill="rgb(230,62,32)" fg:x="1230" fg:w="1"/><text x="98.3361%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.0861%" y="309" width="0.0797%" height="15" fill="rgb(223,22,42)" fg:x="1230" fg:w="1"/><text x="98.3361%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.0861%" y="293" width="0.0797%" height="15" fill="rgb(244,6,23)" fg:x="1230" fg:w="1"/><text x="98.3361%" y="303.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.0861%" y="277" width="0.0797%" height="15" fill="rgb(240,221,42)" fg:x="1230" fg:w="1"/><text x="98.3361%" y="287.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.0861%" y="261" width="0.0797%" height="15" fill="rgb(222,74,7)" fg:x="1230" fg:w="1"/><text x="98.3361%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (4 samples, 0.32%)</title><rect x="98.0064%" y="421" width="0.3190%" height="15" fill="rgb(227,191,38)" fg:x="1229" fg:w="4"/><text x="98.2564%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (4 samples, 0.32%)</title><rect x="98.0064%" y="405" width="0.3190%" height="15" fill="rgb(227,89,34)" fg:x="1229" fg:w="4"/><text x="98.2564%" y="415.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="98.1659%" y="389" width="0.1595%" height="15" fill="rgb(215,153,25)" fg:x="1231" fg:w="2"/><text x="98.4159%" y="399.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="98.2456%" y="373" width="0.0797%" height="15" fill="rgb(215,153,46)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="98.2456%" y="357" width="0.0797%" height="15" fill="rgb(242,38,52)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="98.2456%" y="341" width="0.0797%" height="15" fill="rgb(218,112,4)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="98.2456%" y="325" width="0.0797%" height="15" fill="rgb(231,210,31)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.2456%" y="309" width="0.0797%" height="15" fill="rgb(245,223,36)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2456%" y="293" width="0.0797%" height="15" fill="rgb(246,41,2)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2456%" y="277" width="0.0797%" height="15" fill="rgb(227,51,31)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2456%" y="261" width="0.0797%" height="15" fill="rgb(222,95,26)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2456%" y="245" width="0.0797%" height="15" fill="rgb(224,190,1)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2456%" y="229" width="0.0797%" height="15" fill="rgb(209,90,42)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.2456%" y="213" width="0.0797%" height="15" fill="rgb(232,225,50)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.2456%" y="197" width="0.0797%" height="15" fill="rgb(239,89,47)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.2456%" y="181" width="0.0797%" height="15" fill="rgb(230,212,50)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2456%" y="165" width="0.0797%" height="15" fill="rgb(252,1,27)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2456%" y="149" width="0.0797%" height="15" fill="rgb(237,179,41)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.2456%" y="133" width="0.0797%" height="15" fill="rgb(214,151,37)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.2456%" y="117" width="0.0797%" height="15" fill="rgb(211,74,11)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.2456%" y="101" width="0.0797%" height="15" fill="rgb(242,21,21)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.2456%" y="85" width="0.0797%" height="15" fill="rgb(226,106,43)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="95.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="98.2456%" y="69" width="0.0797%" height="15" fill="rgb(229,162,39)" fg:x="1232" fg:w="1"/><text x="98.4956%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3254%" y="389" width="0.0797%" height="15" fill="rgb(228,159,25)" fg:x="1233" fg:w="1"/><text x="98.5754%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3254%" y="373" width="0.0797%" height="15" fill="rgb(237,32,23)" fg:x="1233" fg:w="1"/><text x="98.5754%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.3254%" y="357" width="0.0797%" height="15" fill="rgb(212,35,32)" fg:x="1233" fg:w="1"/><text x="98.5754%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.3254%" y="341" width="0.0797%" height="15" fill="rgb(215,199,1)" fg:x="1233" fg:w="1"/><text x="98.5754%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.3254%" y="325" width="0.0797%" height="15" fill="rgb(215,67,13)" fg:x="1233" fg:w="1"/><text x="98.5754%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3254%" y="309" width="0.0797%" height="15" fill="rgb(216,20,47)" fg:x="1233" fg:w="1"/><text x="98.5754%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3254%" y="293" width="0.0797%" height="15" fill="rgb(249,183,48)" fg:x="1233" fg:w="1"/><text x="98.5754%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.3254%" y="277" width="0.0797%" height="15" fill="rgb(208,86,37)" fg:x="1233" fg:w="1"/><text x="98.5754%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.3254%" y="261" width="0.0797%" height="15" fill="rgb(251,192,7)" fg:x="1233" fg:w="1"/><text x="98.5754%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.3254%" y="245" width="0.0797%" height="15" fill="rgb(234,196,3)" fg:x="1233" fg:w="1"/><text x="98.5754%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.3254%" y="229" width="0.0797%" height="15" fill="rgb(229,150,39)" fg:x="1233" fg:w="1"/><text x="98.5754%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3254%" y="213" width="0.0797%" height="15" fill="rgb(226,19,29)" fg:x="1233" fg:w="1"/><text x="98.5754%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (2 samples, 0.16%)</title><rect x="98.3254%" y="405" width="0.1595%" height="15" fill="rgb(226,222,2)" fg:x="1233" fg:w="2"/><text x="98.5754%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="98.4051%" y="389" width="0.0797%" height="15" fill="rgb(235,85,29)" fg:x="1234" fg:w="1"/><text x="98.6551%" y="399.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (1 samples, 0.08%)</title><rect x="98.4051%" y="373" width="0.0797%" height="15" fill="rgb(237,194,43)" fg:x="1234" fg:w="1"/><text x="98.6551%" y="383.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="98.4051%" y="357" width="0.0797%" height="15" fill="rgb(211,4,42)" fg:x="1234" fg:w="1"/><text x="98.6551%" y="367.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="98.4051%" y="341" width="0.0797%" height="15" fill="rgb(221,80,37)" fg:x="1234" fg:w="1"/><text x="98.6551%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.4848%" y="357" width="0.0797%" height="15" fill="rgb(222,47,31)" fg:x="1235" fg:w="1"/><text x="98.7348%" y="367.50"></text></g><g><title>plugins_core::library::actions::reply_ok (5 samples, 0.40%)</title><rect x="98.3254%" y="421" width="0.3987%" height="15" fill="rgb(249,82,52)" fg:x="1233" fg:w="5"/><text x="98.5754%" y="431.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (3 samples, 0.24%)</title><rect x="98.4848%" y="405" width="0.2392%" height="15" fill="rgb(218,203,2)" fg:x="1235" fg:w="3"/><text x="98.7348%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (3 samples, 0.24%)</title><rect x="98.4848%" y="389" width="0.2392%" height="15" fill="rgb(210,175,14)" fg:x="1235" fg:w="3"/><text x="98.7348%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (3 samples, 0.24%)</title><rect x="98.4848%" y="373" width="0.2392%" height="15" fill="rgb(216,210,12)" fg:x="1235" fg:w="3"/><text x="98.7348%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="98.5646%" y="357" width="0.1595%" height="15" fill="rgb(229,120,18)" fg:x="1236" fg:w="2"/><text x="98.8146%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="98.5646%" y="341" width="0.1595%" height="15" fill="rgb(231,174,12)" fg:x="1236" fg:w="2"/><text x="98.8146%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="98.5646%" y="325" width="0.1595%" height="15" fill="rgb(214,101,53)" fg:x="1236" fg:w="2"/><text x="98.8146%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="98.5646%" y="309" width="0.1595%" height="15" fill="rgb(246,89,43)" fg:x="1236" fg:w="2"/><text x="98.8146%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="98.6443%" y="293" width="0.0797%" height="15" fill="rgb(222,9,51)" fg:x="1237" fg:w="1"/><text x="98.8943%" y="303.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="98.7241%" y="405" width="0.0797%" height="15" fill="rgb(252,221,9)" fg:x="1238" fg:w="1"/><text x="98.9741%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7241%" y="389" width="0.0797%" height="15" fill="rgb(248,28,15)" fg:x="1238" fg:w="1"/><text x="98.9741%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7241%" y="373" width="0.0797%" height="15" fill="rgb(213,54,52)" fg:x="1238" fg:w="1"/><text x="98.9741%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7241%" y="357" width="0.0797%" height="15" fill="rgb(240,3,45)" fg:x="1238" fg:w="1"/><text x="98.9741%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7241%" y="341" width="0.0797%" height="15" fill="rgb(239,138,24)" fg:x="1238" fg:w="1"/><text x="98.9741%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7241%" y="325" width="0.0797%" height="15" fill="rgb(233,45,54)" fg:x="1238" fg:w="1"/><text x="98.9741%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.7241%" y="309" width="0.0797%" height="15" fill="rgb(220,131,2)" fg:x="1238" fg:w="1"/><text x="98.9741%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.7241%" y="293" width="0.0797%" height="15" fill="rgb(240,154,36)" fg:x="1238" fg:w="1"/><text x="98.9741%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.7241%" y="277" width="0.0797%" height="15" fill="rgb(251,221,1)" fg:x="1238" fg:w="1"/><text x="98.9741%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.7241%" y="261" width="0.0797%" height="15" fill="rgb(225,217,1)" fg:x="1238" fg:w="1"/><text x="98.9741%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.7241%" y="245" width="0.0797%" height="15" fill="rgb(241,105,49)" fg:x="1238" fg:w="1"/><text x="98.9741%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (231 samples, 18.42%)</title><rect x="80.5423%" y="629" width="18.4211%" height="15" fill="rgb(215,44,32)" fg:x="1010" fg:w="231"/><text x="80.7923%" y="639.50">&lt;engine::session::Session as ..</text></g><g><title>kernel::plugins::mw::apply_middleware (231 samples, 18.42%)</title><rect x="80.5423%" y="613" width="18.4211%" height="15" fill="rgb(213,222,14)" fg:x="1010" fg:w="231"/><text x="80.7923%" y="623.50">kernel::plugins::mw::apply_mi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (231 samples, 18.42%)</title><rect x="80.5423%" y="597" width="18.4211%" height="15" fill="rgb(207,99,52)" fg:x="1010" fg:w="231"/><text x="80.7923%" y="607.50">kernel::plugins::mw::Middlewa..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (231 samples, 18.42%)</title><rect x="80.5423%" y="581" width="18.4211%" height="15" fill="rgb(214,208,52)" fg:x="1010" fg:w="231"/><text x="80.7923%" y="591.50">&lt;engine::session::ExpandSurro..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (224 samples, 17.86%)</title><rect x="81.1005%" y="565" width="17.8628%" height="15" fill="rgb(244,169,0)" fg:x="1017" fg:w="224"/><text x="81.3505%" y="575.50">kernel::plugins::mw::Middlew..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (224 samples, 17.86%)</title><rect x="81.1005%" y="549" width="17.8628%" height="15" fill="rgb(216,193,37)" fg:x="1017" fg:w="224"/><text x="81.3505%" y="559.50">&lt;plugins_dynlib::DynamicMidd..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (223 samples, 17.78%)</title><rect x="81.1802%" y="533" width="17.7831%" height="15" fill="rgb(212,158,10)" fg:x="1018" fg:w="223"/><text x="81.4302%" y="543.50">kernel::plugins::mw::Middlew..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (223 samples, 17.78%)</title><rect x="81.1802%" y="517" width="17.7831%" height="15" fill="rgb(213,110,20)" fg:x="1018" fg:w="223"/><text x="81.4302%" y="527.50">core::ops::function::FnOnce:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (223 samples, 17.78%)</title><rect x="81.1802%" y="501" width="17.7831%" height="15" fill="rgb(226,5,42)" fg:x="1018" fg:w="223"/><text x="81.4302%" y="511.50">kernel::plugins::mw::Middlew..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (223 samples, 17.78%)</title><rect x="81.1802%" y="485" width="17.7831%" height="15" fill="rgb(211,93,8)" fg:x="1018" fg:w="223"/><text x="81.4302%" y="495.50">core::ops::function::FnOnce:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (223 samples, 17.78%)</title><rect x="81.1802%" y="469" width="17.7831%" height="15" fill="rgb(240,208,12)" fg:x="1018" fg:w="223"/><text x="81.4302%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as c..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (223 samples, 17.78%)</title><rect x="81.1802%" y="453" width="17.7831%" height="15" fill="rgb(233,127,50)" fg:x="1018" fg:w="223"/><text x="81.4302%" y="463.50">&lt;engine::session::state::Sta..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (100 samples, 7.97%)</title><rect x="90.9888%" y="437" width="7.9745%" height="15" fill="rgb(227,199,53)" fg:x="1141" fg:w="100"/><text x="91.2388%" y="447.50">&lt;plugins_co..</text></g><g><title>plugins_core::location::change_location (3 samples, 0.24%)</title><rect x="98.7241%" y="421" width="0.2392%" height="15" fill="rgb(235,199,10)" fg:x="1238" fg:w="3"/><text x="98.9741%" y="431.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="98.8038%" y="405" width="0.1595%" height="15" fill="rgb(228,148,35)" fg:x="1239" fg:w="2"/><text x="99.0538%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.8836%" y="389" width="0.0797%" height="15" fill="rgb(217,87,19)" fg:x="1240" fg:w="1"/><text x="99.1336%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.8836%" y="373" width="0.0797%" height="15" fill="rgb(239,9,32)" fg:x="1240" fg:w="1"/><text x="99.1336%" y="383.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="98.9633%" y="629" width="0.0797%" height="15" fill="rgb(229,101,29)" fg:x="1241" fg:w="1"/><text x="99.2133%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.9633%" y="613" width="0.0797%" height="15" fill="rgb(208,143,26)" fg:x="1241" fg:w="1"/><text x="99.2133%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9633%" y="597" width="0.0797%" height="15" fill="rgb(214,10,2)" fg:x="1241" fg:w="1"/><text x="99.2133%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9633%" y="581" width="0.0797%" height="15" fill="rgb(254,203,30)" fg:x="1241" fg:w="1"/><text x="99.2133%" y="591.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="99.0431%" y="629" width="0.0797%" height="15" fill="rgb(242,45,3)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="99.0431%" y="613" width="0.0797%" height="15" fill="rgb(209,146,51)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="623.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="99.0431%" y="597" width="0.0797%" height="15" fill="rgb(222,80,5)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::parser::DropActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="99.0431%" y="581" width="0.0797%" height="15" fill="rgb(252,80,35)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="99.0431%" y="565" width="0.0797%" height="15" fill="rgb(246,125,28)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="575.50"></text></g><g><title>plugins_core::library::parser::spaces (1 samples, 0.08%)</title><rect x="99.0431%" y="549" width="0.0797%" height="15" fill="rgb(224,143,51)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="559.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.08%)</title><rect x="99.0431%" y="533" width="0.0797%" height="15" fill="rgb(205,24,17)" fg:x="1242" fg:w="1"/><text x="99.2931%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.1228%" y="581" width="0.1595%" height="15" fill="rgb(253,128,30)" fg:x="1243" fg:w="2"/><text x="99.3728%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2026%" y="565" width="0.0797%" height="15" fill="rgb(214,153,25)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2026%" y="549" width="0.0797%" height="15" fill="rgb(214,4,28)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2026%" y="533" width="0.0797%" height="15" fill="rgb(235,179,52)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2026%" y="517" width="0.0797%" height="15" fill="rgb(233,27,42)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.2026%" y="501" width="0.0797%" height="15" fill="rgb(238,35,25)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.2026%" y="485" width="0.0797%" height="15" fill="rgb(227,44,31)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.2026%" y="469" width="0.0797%" height="15" fill="rgb(232,201,13)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2026%" y="453" width="0.0797%" height="15" fill="rgb(224,172,52)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2026%" y="437" width="0.0797%" height="15" fill="rgb(214,27,26)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.2026%" y="421" width="0.0797%" height="15" fill="rgb(210,185,52)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.2026%" y="405" width="0.0797%" height="15" fill="rgb(249,59,32)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.2026%" y="389" width="0.0797%" height="15" fill="rgb(242,209,18)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.2026%" y="373" width="0.0797%" height="15" fill="rgb(229,0,18)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.2026%" y="357" width="0.0797%" height="15" fill="rgb(217,138,29)" fg:x="1244" fg:w="1"/><text x="99.4526%" y="367.50"></text></g><g><title>engine::session::internal::Added::find_refs (3 samples, 0.24%)</title><rect x="99.1228%" y="613" width="0.2392%" height="15" fill="rgb(215,72,42)" fg:x="1243" fg:w="3"/><text x="99.3728%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="99.1228%" y="597" width="0.2392%" height="15" fill="rgb(254,115,11)" fg:x="1243" fg:w="3"/><text x="99.3728%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2823%" y="581" width="0.0797%" height="15" fill="rgb(205,133,39)" fg:x="1245" fg:w="1"/><text x="99.5323%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2823%" y="565" width="0.0797%" height="15" fill="rgb(211,36,27)" fg:x="1245" fg:w="1"/><text x="99.5323%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.2823%" y="549" width="0.0797%" height="15" fill="rgb(221,48,10)" fg:x="1245" fg:w="1"/><text x="99.5323%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="99.2823%" y="533" width="0.0797%" height="15" fill="rgb(230,172,50)" fg:x="1245" fg:w="1"/><text x="99.5323%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.2823%" y="517" width="0.0797%" height="15" fill="rgb(249,72,18)" fg:x="1245" fg:w="1"/><text x="99.5323%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3620%" y="581" width="0.0797%" height="15" fill="rgb(237,58,48)" fg:x="1246" fg:w="1"/><text x="99.6120%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3620%" y="565" width="0.0797%" height="15" fill="rgb(242,123,3)" fg:x="1246" fg:w="1"/><text x="99.6120%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3620%" y="549" width="0.0797%" height="15" fill="rgb(232,111,32)" fg:x="1246" fg:w="1"/><text x="99.6120%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3620%" y="533" width="0.0797%" height="15" fill="rgb(229,108,3)" fg:x="1246" fg:w="1"/><text x="99.6120%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.3620%" y="597" width="0.1595%" height="15" fill="rgb(222,158,10)" fg:x="1246" fg:w="2"/><text x="99.6120%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4418%" y="581" width="0.0797%" height="15" fill="rgb(205,34,49)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4418%" y="565" width="0.0797%" height="15" fill="rgb(232,21,14)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.4418%" y="549" width="0.0797%" height="15" fill="rgb(229,127,44)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.4418%" y="533" width="0.0797%" height="15" fill="rgb(232,171,4)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.4418%" y="517" width="0.0797%" height="15" fill="rgb(250,92,16)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.4418%" y="501" width="0.0797%" height="15" fill="rgb(230,103,38)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.4418%" y="485" width="0.0797%" height="15" fill="rgb(253,167,9)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.4418%" y="469" width="0.0797%" height="15" fill="rgb(222,118,11)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.4418%" y="453" width="0.0797%" height="15" fill="rgb(240,202,0)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.4418%" y="437" width="0.0797%" height="15" fill="rgb(236,124,4)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.4418%" y="421" width="0.0797%" height="15" fill="rgb(244,128,18)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4418%" y="405" width="0.0797%" height="15" fill="rgb(231,206,5)" fg:x="1247" fg:w="1"/><text x="99.6918%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.5215%" y="597" width="0.0797%" height="15" fill="rgb(237,111,8)" fg:x="1248" fg:w="1"/><text x="99.7715%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5215%" y="581" width="0.0797%" height="15" fill="rgb(225,127,3)" fg:x="1248" fg:w="1"/><text x="99.7715%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5215%" y="565" width="0.0797%" height="15" fill="rgb(222,85,48)" fg:x="1248" fg:w="1"/><text x="99.7715%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.5215%" y="549" width="0.0797%" height="15" fill="rgb(221,108,37)" fg:x="1248" fg:w="1"/><text x="99.7715%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5215%" y="533" width="0.0797%" height="15" fill="rgb(226,169,36)" fg:x="1248" fg:w="1"/><text x="99.7715%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5215%" y="517" width="0.0797%" height="15" fill="rgb(237,76,12)" fg:x="1248" fg:w="1"/><text x="99.7715%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5215%" y="501" width="0.0797%" height="15" fill="rgb(210,227,32)" fg:x="1248" fg:w="1"/><text x="99.7715%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5215%" y="485" width="0.0797%" height="15" fill="rgb(214,117,20)" fg:x="1248" fg:w="1"/><text x="99.7715%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5215%" y="469" width="0.0797%" height="15" fill="rgb(234,119,41)" fg:x="1248" fg:w="1"/><text x="99.7715%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5215%" y="453" width="0.0797%" height="15" fill="rgb(230,130,47)" fg:x="1248" fg:w="1"/><text x="99.7715%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.5215%" y="437" width="0.0797%" height="15" fill="rgb(215,21,41)" fg:x="1248" fg:w="1"/><text x="99.7715%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5215%" y="421" width="0.0797%" height="15" fill="rgb(226,26,53)" fg:x="1248" fg:w="1"/><text x="99.7715%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="99.5215%" y="405" width="0.0797%" height="15" fill="rgb(221,92,23)" fg:x="1248" fg:w="1"/><text x="99.7715%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6013%" y="453" width="0.1595%" height="15" fill="rgb(213,156,21)" fg:x="1249" fg:w="2"/><text x="99.8513%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6013%" y="437" width="0.1595%" height="15" fill="rgb(254,166,29)" fg:x="1249" fg:w="2"/><text x="99.8513%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6013%" y="421" width="0.1595%" height="15" fill="rgb(213,71,1)" fg:x="1249" fg:w="2"/><text x="99.8513%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.6810%" y="405" width="0.0797%" height="15" fill="rgb(245,8,13)" fg:x="1250" fg:w="1"/><text x="99.9310%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.6013%" y="501" width="0.2392%" height="15" fill="rgb(213,32,32)" fg:x="1249" fg:w="3"/><text x="99.8513%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.6013%" y="485" width="0.2392%" height="15" fill="rgb(251,86,50)" fg:x="1249" fg:w="3"/><text x="99.8513%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.6013%" y="469" width="0.2392%" height="15" fill="rgb(252,92,41)" fg:x="1249" fg:w="3"/><text x="99.8513%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7608%" y="453" width="0.0797%" height="15" fill="rgb(234,70,35)" fg:x="1251" fg:w="1"/><text x="100.0108%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7608%" y="437" width="0.0797%" height="15" fill="rgb(210,157,19)" fg:x="1251" fg:w="1"/><text x="100.0108%" y="447.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.80%)</title><rect x="99.1228%" y="629" width="0.7974%" height="15" fill="rgb(206,20,45)" fg:x="1243" fg:w="10"/><text x="99.3728%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="99.3620%" y="613" width="0.5582%" height="15" fill="rgb(207,34,7)" fg:x="1246" fg:w="7"/><text x="99.6120%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="99.6013%" y="597" width="0.3190%" height="15" fill="rgb(253,151,14)" fg:x="1249" fg:w="4"/><text x="99.8513%" y="607.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="99.6013%" y="581" width="0.3190%" height="15" fill="rgb(252,1,18)" fg:x="1249" fg:w="4"/><text x="99.8513%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="99.6013%" y="565" width="0.3190%" height="15" fill="rgb(214,77,52)" fg:x="1249" fg:w="4"/><text x="99.8513%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="99.6013%" y="549" width="0.3190%" height="15" fill="rgb(254,106,35)" fg:x="1249" fg:w="4"/><text x="99.8513%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="99.6013%" y="533" width="0.3190%" height="15" fill="rgb(212,67,40)" fg:x="1249" fg:w="4"/><text x="99.8513%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="99.6013%" y="517" width="0.3190%" height="15" fill="rgb(228,76,23)" fg:x="1249" fg:w="4"/><text x="99.8513%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.8405%" y="501" width="0.0797%" height="15" fill="rgb(250,198,5)" fg:x="1252" fg:w="1"/><text x="100.0905%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.8405%" y="485" width="0.0797%" height="15" fill="rgb(209,20,25)" fg:x="1252" fg:w="1"/><text x="100.0905%" y="495.50"></text></g><g><title>all (1,254 samples, 100%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(236,32,4)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="1023.50"></text></g><g><title>simple-9bf755a9 (1,254 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(215,31,6)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="1007.50">simple-9bf755a9</text></g><g><title>_start (1,254 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(207,186,49)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="991.50">_start</text></g><g><title>__libc_start_main (1,254 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(211,212,49)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="975.50">__libc_start_main</text></g><g><title>main (1,254 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(229,51,41)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="959.50">main</text></g><g><title>std::rt::lang_start_internal (1,254 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(205,225,36)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,254 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(209,213,45)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,254 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(219,35,49)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,254 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(215,205,22)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,254 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(248,204,34)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="879.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,254 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(219,223,31)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,254 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(236,14,8)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,254 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(243,129,23)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,254 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(205,204,5)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="815.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,254 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(244,115,32)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="799.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,254 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(229,123,14)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="783.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,254 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(250,85,1)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="767.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,254 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(209,141,54)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="751.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,254 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(244,107,39)" fg:x="0" fg:w="1254"/><text x="0.2500%" y="735.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (326 samples, 26.00%)</title><rect x="74.0032%" y="709" width="25.9968%" height="15" fill="rgb(230,68,26)" fg:x="928" fg:w="326"/><text x="74.2532%" y="719.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as cr..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (326 samples, 26.00%)</title><rect x="74.0032%" y="693" width="25.9968%" height="15" fill="rgb(220,178,33)" fg:x="928" fg:w="326"/><text x="74.2532%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (326 samples, 26.00%)</title><rect x="74.0032%" y="677" width="25.9968%" height="15" fill="rgb(220,77,53)" fg:x="928" fg:w="326"/><text x="74.2532%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (244 samples, 19.46%)</title><rect x="80.5423%" y="661" width="19.4577%" height="15" fill="rgb(224,108,19)" fg:x="1010" fg:w="244"/><text x="80.7923%" y="671.50">engine::session::Session::eval..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (244 samples, 19.46%)</title><rect x="80.5423%" y="645" width="19.4577%" height="15" fill="rgb(223,203,27)" fg:x="1010" fg:w="244"/><text x="80.7923%" y="655.50">engine::session::Session::eval..</text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="99.9203%" y="629" width="0.0797%" height="15" fill="rgb(211,32,46)" fg:x="1253" fg:w="1"/><text x="100.1703%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="99.9203%" y="613" width="0.0797%" height="15" fill="rgb(240,101,27)" fg:x="1253" fg:w="1"/><text x="100.1703%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.9203%" y="597" width="0.0797%" height="15" fill="rgb(217,210,11)" fg:x="1253" fg:w="1"/><text x="100.1703%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.9203%" y="581" width="0.0797%" height="15" fill="rgb(236,130,21)" fg:x="1253" fg:w="1"/><text x="100.1703%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9203%" y="565" width="0.0797%" height="15" fill="rgb(250,136,8)" fg:x="1253" fg:w="1"/><text x="100.1703%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9203%" y="549" width="0.0797%" height="15" fill="rgb(243,223,36)" fg:x="1253" fg:w="1"/><text x="100.1703%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.9203%" y="533" width="0.0797%" height="15" fill="rgb(246,184,8)" fg:x="1253" fg:w="1"/><text x="100.1703%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9203%" y="517" width="0.0797%" height="15" fill="rgb(222,158,36)" fg:x="1253" fg:w="1"/><text x="100.1703%" y="527.50"></text></g></svg></svg>