<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1259"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.0000%" y="725" width="0.1589%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0000%" y="709" width="0.1589%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="719.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0794%" y="693" width="0.0794%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3294%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1589%" y="629" width="0.0794%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.4089%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.2383%" y="581" width="0.0794%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.4883%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2383%" y="565" width="0.0794%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.4883%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="0.0000%" y="741" width="0.6354%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="8"/><text x="0.2500%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (6 samples, 0.48%)</title><rect x="0.1589%" y="725" width="0.4766%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="6"/><text x="0.4089%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.1589%" y="709" width="0.4766%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="6"/><text x="0.4089%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (6 samples, 0.48%)</title><rect x="0.1589%" y="693" width="0.4766%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="6"/><text x="0.4089%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.1589%" y="677" width="0.4766%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="6"/><text x="0.4089%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.1589%" y="661" width="0.4766%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="6"/><text x="0.4089%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.1589%" y="645" width="0.4766%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="6"/><text x="0.4089%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.2383%" y="629" width="0.3971%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="5"/><text x="0.4883%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.2383%" y="613" width="0.3971%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="5"/><text x="0.4883%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.2383%" y="597" width="0.3971%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="5"/><text x="0.4883%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.3177%" y="581" width="0.3177%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="4"/><text x="0.5677%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="0.3971%" y="565" width="0.2383%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="3"/><text x="0.6471%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4766%" y="549" width="0.1589%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="2"/><text x="0.7266%" y="559.50"></text></g><g><title>engine::session::Session::set_session (1 samples, 0.08%)</title><rect x="0.7149%" y="677" width="0.0794%" height="15" fill="rgb(226,26,5)" fg:x="9" fg:w="1"/><text x="0.9649%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::DomainError&gt; (1 samples, 0.08%)</title><rect x="0.7149%" y="661" width="0.0794%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="1"/><text x="0.9649%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="0.7943%" y="645" width="0.0794%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="1"/><text x="1.0443%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="0.7943%" y="629" width="0.0794%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="1"/><text x="1.0443%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="0.7943%" y="613" width="0.0794%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="1"/><text x="1.0443%" y="623.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="0.8737%" y="629" width="0.0794%" height="15" fill="rgb(241,131,45)" fg:x="11" fg:w="1"/><text x="1.1237%" y="639.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="0.8737%" y="613" width="0.0794%" height="15" fill="rgb(249,31,29)" fg:x="11" fg:w="1"/><text x="1.1237%" y="623.50"></text></g><g><title>engine::session::Session::initialize (8 samples, 0.64%)</title><rect x="0.7149%" y="693" width="0.6354%" height="15" fill="rgb(225,111,53)" fg:x="9" fg:w="8"/><text x="0.9649%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (7 samples, 0.56%)</title><rect x="0.7943%" y="677" width="0.5560%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="7"/><text x="1.0443%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.56%)</title><rect x="0.7943%" y="661" width="0.5560%" height="15" fill="rgb(214,148,48)" fg:x="10" fg:w="7"/><text x="1.0443%" y="671.50"></text></g><g><title>libloading::safe::Library::new (6 samples, 0.48%)</title><rect x="0.8737%" y="645" width="0.4766%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="6"/><text x="1.1237%" y="655.50"></text></g><g><title>dlopen (5 samples, 0.40%)</title><rect x="0.9531%" y="629" width="0.3971%" height="15" fill="rgb(209,103,24)" fg:x="12" fg:w="5"/><text x="1.2031%" y="639.50"></text></g><g><title>_dl_catch_error (5 samples, 0.40%)</title><rect x="0.9531%" y="613" width="0.3971%" height="15" fill="rgb(229,88,8)" fg:x="12" fg:w="5"/><text x="1.2031%" y="623.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="0.9531%" y="597" width="0.3971%" height="15" fill="rgb(213,181,19)" fg:x="12" fg:w="5"/><text x="1.2031%" y="607.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="0.9531%" y="581" width="0.3971%" height="15" fill="rgb(254,191,54)" fg:x="12" fg:w="5"/><text x="1.2031%" y="591.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.0326%" y="565" width="0.3177%" height="15" fill="rgb(241,83,37)" fg:x="13" fg:w="4"/><text x="1.2826%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (11 samples, 0.87%)</title><rect x="0.6354%" y="741" width="0.8737%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="11"/><text x="0.8854%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (11 samples, 0.87%)</title><rect x="0.6354%" y="725" width="0.8737%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="11"/><text x="0.8854%" y="735.50"></text></g><g><title>engine::session::Session::new (10 samples, 0.79%)</title><rect x="0.7149%" y="709" width="0.7943%" height="15" fill="rgb(245,192,40)" fg:x="9" fg:w="10"/><text x="0.9649%" y="719.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="1.3503%" y="693" width="0.1589%" height="15" fill="rgb(238,167,29)" fg:x="17" fg:w="2"/><text x="1.6003%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="1.3503%" y="677" width="0.1589%" height="15" fill="rgb(232,182,51)" fg:x="17" fg:w="2"/><text x="1.6003%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="1.4297%" y="661" width="0.0794%" height="15" fill="rgb(231,60,39)" fg:x="18" fg:w="1"/><text x="1.6797%" y="671.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="1.4297%" y="645" width="0.0794%" height="15" fill="rgb(208,69,12)" fg:x="18" fg:w="1"/><text x="1.6797%" y="655.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="1.4297%" y="629" width="0.0794%" height="15" fill="rgb(235,93,37)" fg:x="18" fg:w="1"/><text x="1.6797%" y="639.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.5091%" y="725" width="0.0794%" height="15" fill="rgb(213,116,39)" fg:x="19" fg:w="1"/><text x="1.7591%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.5091%" y="709" width="0.0794%" height="15" fill="rgb(222,207,29)" fg:x="19" fg:w="1"/><text x="1.7591%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.5886%" y="645" width="0.0794%" height="15" fill="rgb(206,96,30)" fg:x="20" fg:w="1"/><text x="1.8386%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.5886%" y="629" width="0.0794%" height="15" fill="rgb(218,138,4)" fg:x="20" fg:w="1"/><text x="1.8386%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="1.5886%" y="613" width="0.0794%" height="15" fill="rgb(250,191,14)" fg:x="20" fg:w="1"/><text x="1.8386%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="1.5886%" y="597" width="0.0794%" height="15" fill="rgb(239,60,40)" fg:x="20" fg:w="1"/><text x="1.8386%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="1.5886%" y="581" width="0.0794%" height="15" fill="rgb(206,27,48)" fg:x="20" fg:w="1"/><text x="1.8386%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.5886%" y="565" width="0.0794%" height="15" fill="rgb(225,35,8)" fg:x="20" fg:w="1"/><text x="1.8386%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.5886%" y="549" width="0.0794%" height="15" fill="rgb(250,213,24)" fg:x="20" fg:w="1"/><text x="1.8386%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="1.5886%" y="533" width="0.0794%" height="15" fill="rgb(247,123,22)" fg:x="20" fg:w="1"/><text x="1.8386%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="1.5886%" y="517" width="0.0794%" height="15" fill="rgb(231,138,38)" fg:x="20" fg:w="1"/><text x="1.8386%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="1.5886%" y="501" width="0.0794%" height="15" fill="rgb(231,145,46)" fg:x="20" fg:w="1"/><text x="1.8386%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="1.5886%" y="485" width="0.0794%" height="15" fill="rgb(251,118,11)" fg:x="20" fg:w="1"/><text x="1.8386%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.5886%" y="469" width="0.0794%" height="15" fill="rgb(217,147,25)" fg:x="20" fg:w="1"/><text x="1.8386%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="1.6680%" y="613" width="0.0794%" height="15" fill="rgb(247,81,37)" fg:x="21" fg:w="1"/><text x="1.9180%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.7474%" y="613" width="0.0794%" height="15" fill="rgb(209,12,38)" fg:x="22" fg:w="1"/><text x="1.9974%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.7474%" y="597" width="0.0794%" height="15" fill="rgb(227,1,9)" fg:x="22" fg:w="1"/><text x="1.9974%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="1.8268%" y="597" width="0.1589%" height="15" fill="rgb(248,47,43)" fg:x="23" fg:w="2"/><text x="2.0768%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="1.8268%" y="581" width="0.1589%" height="15" fill="rgb(221,10,30)" fg:x="23" fg:w="2"/><text x="2.0768%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="1.8268%" y="565" width="0.1589%" height="15" fill="rgb(210,229,1)" fg:x="23" fg:w="2"/><text x="2.0768%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.9063%" y="549" width="0.0794%" height="15" fill="rgb(222,148,37)" fg:x="24" fg:w="1"/><text x="2.1563%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.9063%" y="533" width="0.0794%" height="15" fill="rgb(234,67,33)" fg:x="24" fg:w="1"/><text x="2.1563%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.9063%" y="517" width="0.0794%" height="15" fill="rgb(247,98,35)" fg:x="24" fg:w="1"/><text x="2.1563%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.9063%" y="501" width="0.0794%" height="15" fill="rgb(247,138,52)" fg:x="24" fg:w="1"/><text x="2.1563%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.0651%" y="565" width="0.1589%" height="15" fill="rgb(213,79,30)" fg:x="26" fg:w="2"/><text x="2.3151%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.0651%" y="549" width="0.1589%" height="15" fill="rgb(246,177,23)" fg:x="26" fg:w="2"/><text x="2.3151%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="2.0651%" y="533" width="0.1589%" height="15" fill="rgb(230,62,27)" fg:x="26" fg:w="2"/><text x="2.3151%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.1446%" y="517" width="0.0794%" height="15" fill="rgb(216,154,8)" fg:x="27" fg:w="1"/><text x="2.3946%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.1446%" y="501" width="0.0794%" height="15" fill="rgb(244,35,45)" fg:x="27" fg:w="1"/><text x="2.3946%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.1446%" y="485" width="0.0794%" height="15" fill="rgb(251,115,12)" fg:x="27" fg:w="1"/><text x="2.3946%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.1446%" y="469" width="0.0794%" height="15" fill="rgb(240,54,50)" fg:x="27" fg:w="1"/><text x="2.3946%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.1446%" y="453" width="0.0794%" height="15" fill="rgb(233,84,52)" fg:x="27" fg:w="1"/><text x="2.3946%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.1446%" y="437" width="0.0794%" height="15" fill="rgb(207,117,47)" fg:x="27" fg:w="1"/><text x="2.3946%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="1.6680%" y="645" width="0.6354%" height="15" fill="rgb(249,43,39)" fg:x="21" fg:w="8"/><text x="1.9180%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="1.6680%" y="629" width="0.6354%" height="15" fill="rgb(209,38,44)" fg:x="21" fg:w="8"/><text x="1.9180%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="1.8268%" y="613" width="0.4766%" height="15" fill="rgb(236,212,23)" fg:x="23" fg:w="6"/><text x="2.0768%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="1.9857%" y="597" width="0.3177%" height="15" fill="rgb(242,79,21)" fg:x="25" fg:w="4"/><text x="2.2357%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="2.0651%" y="581" width="0.2383%" height="15" fill="rgb(211,96,35)" fg:x="26" fg:w="3"/><text x="2.3151%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.2240%" y="565" width="0.0794%" height="15" fill="rgb(253,215,40)" fg:x="28" fg:w="1"/><text x="2.4740%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.2240%" y="549" width="0.0794%" height="15" fill="rgb(211,81,21)" fg:x="28" fg:w="1"/><text x="2.4740%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3034%" y="645" width="0.0794%" height="15" fill="rgb(208,190,38)" fg:x="29" fg:w="1"/><text x="2.5534%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.3034%" y="629" width="0.0794%" height="15" fill="rgb(235,213,38)" fg:x="29" fg:w="1"/><text x="2.5534%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3034%" y="613" width="0.0794%" height="15" fill="rgb(237,122,38)" fg:x="29" fg:w="1"/><text x="2.5534%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4623%" y="597" width="0.0794%" height="15" fill="rgb(244,218,35)" fg:x="31" fg:w="1"/><text x="2.7123%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.4623%" y="581" width="0.0794%" height="15" fill="rgb(240,68,47)" fg:x="31" fg:w="1"/><text x="2.7123%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4623%" y="565" width="0.0794%" height="15" fill="rgb(210,16,53)" fg:x="31" fg:w="1"/><text x="2.7123%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4623%" y="549" width="0.0794%" height="15" fill="rgb(235,124,12)" fg:x="31" fg:w="1"/><text x="2.7123%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.5417%" y="549" width="0.0794%" height="15" fill="rgb(224,169,11)" fg:x="32" fg:w="1"/><text x="2.7917%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.5417%" y="533" width="0.0794%" height="15" fill="rgb(250,166,2)" fg:x="32" fg:w="1"/><text x="2.7917%" y="543.50"></text></g><g><title>engine::session::Session::flush (15 samples, 1.19%)</title><rect x="1.5886%" y="725" width="1.1914%" height="15" fill="rgb(242,216,29)" fg:x="20" fg:w="15"/><text x="1.8386%" y="735.50"></text></g><g><title>engine::session::state::State::close (15 samples, 1.19%)</title><rect x="1.5886%" y="709" width="1.1914%" height="15" fill="rgb(230,116,27)" fg:x="20" fg:w="15"/><text x="1.8386%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (15 samples, 1.19%)</title><rect x="1.5886%" y="693" width="1.1914%" height="15" fill="rgb(228,99,48)" fg:x="20" fg:w="15"/><text x="1.8386%" y="703.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (15 samples, 1.19%)</title><rect x="1.5886%" y="677" width="1.1914%" height="15" fill="rgb(253,11,6)" fg:x="20" fg:w="15"/><text x="1.8386%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.19%)</title><rect x="1.5886%" y="661" width="1.1914%" height="15" fill="rgb(247,143,39)" fg:x="20" fg:w="15"/><text x="1.8386%" y="671.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="2.3828%" y="645" width="0.3971%" height="15" fill="rgb(236,97,10)" fg:x="30" fg:w="5"/><text x="2.6328%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="2.3828%" y="629" width="0.3971%" height="15" fill="rgb(233,208,19)" fg:x="30" fg:w="5"/><text x="2.6328%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="2.3828%" y="613" width="0.3971%" height="15" fill="rgb(216,164,2)" fg:x="30" fg:w="5"/><text x="2.6328%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="2.5417%" y="597" width="0.2383%" height="15" fill="rgb(220,129,5)" fg:x="32" fg:w="3"/><text x="2.7917%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="2.5417%" y="581" width="0.2383%" height="15" fill="rgb(242,17,10)" fg:x="32" fg:w="3"/><text x="2.7917%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="2.5417%" y="565" width="0.2383%" height="15" fill="rgb(242,107,0)" fg:x="32" fg:w="3"/><text x="2.7917%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.6211%" y="549" width="0.1589%" height="15" fill="rgb(251,28,31)" fg:x="33" fg:w="2"/><text x="2.8711%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.6211%" y="533" width="0.1589%" height="15" fill="rgb(233,223,10)" fg:x="33" fg:w="2"/><text x="2.8711%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.6211%" y="517" width="0.1589%" height="15" fill="rgb(215,21,27)" fg:x="33" fg:w="2"/><text x="2.8711%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.6211%" y="501" width="0.1589%" height="15" fill="rgb(232,23,21)" fg:x="33" fg:w="2"/><text x="2.8711%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="2.6211%" y="485" width="0.1589%" height="15" fill="rgb(244,5,23)" fg:x="33" fg:w="2"/><text x="2.8711%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7006%" y="469" width="0.0794%" height="15" fill="rgb(226,81,46)" fg:x="34" fg:w="1"/><text x="2.9506%" y="479.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="2.7800%" y="677" width="0.0794%" height="15" fill="rgb(247,70,30)" fg:x="35" fg:w="1"/><text x="3.0300%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="2.7800%" y="661" width="0.0794%" height="15" fill="rgb(212,68,19)" fg:x="35" fg:w="1"/><text x="3.0300%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="2.7800%" y="645" width="0.0794%" height="15" fill="rgb(240,187,13)" fg:x="35" fg:w="1"/><text x="3.0300%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="2.7800%" y="629" width="0.0794%" height="15" fill="rgb(223,113,26)" fg:x="35" fg:w="1"/><text x="3.0300%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7800%" y="613" width="0.0794%" height="15" fill="rgb(206,192,2)" fg:x="35" fg:w="1"/><text x="3.0300%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.7800%" y="597" width="0.0794%" height="15" fill="rgb(241,108,4)" fg:x="35" fg:w="1"/><text x="3.0300%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7800%" y="581" width="0.0794%" height="15" fill="rgb(247,173,49)" fg:x="35" fg:w="1"/><text x="3.0300%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="2.8594%" y="613" width="0.1589%" height="15" fill="rgb(224,114,35)" fg:x="36" fg:w="2"/><text x="3.1094%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="2.7800%" y="709" width="0.3177%" height="15" fill="rgb(245,159,27)" fg:x="35" fg:w="4"/><text x="3.0300%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="2.7800%" y="693" width="0.3177%" height="15" fill="rgb(245,172,44)" fg:x="35" fg:w="4"/><text x="3.0300%" y="703.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (3 samples, 0.24%)</title><rect x="2.8594%" y="677" width="0.2383%" height="15" fill="rgb(236,23,11)" fg:x="36" fg:w="3"/><text x="3.1094%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="2.8594%" y="661" width="0.2383%" height="15" fill="rgb(205,117,38)" fg:x="36" fg:w="3"/><text x="3.1094%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.24%)</title><rect x="2.8594%" y="645" width="0.2383%" height="15" fill="rgb(237,72,25)" fg:x="36" fg:w="3"/><text x="3.1094%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.24%)</title><rect x="2.8594%" y="629" width="0.2383%" height="15" fill="rgb(244,70,9)" fg:x="36" fg:w="3"/><text x="3.1094%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.0183%" y="613" width="0.0794%" height="15" fill="rgb(217,125,39)" fg:x="38" fg:w="1"/><text x="3.2683%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.0183%" y="597" width="0.0794%" height="15" fill="rgb(235,36,10)" fg:x="38" fg:w="1"/><text x="3.2683%" y="607.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="3.0977%" y="645" width="0.0794%" height="15" fill="rgb(251,123,47)" fg:x="39" fg:w="1"/><text x="3.3477%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.0977%" y="629" width="0.0794%" height="15" fill="rgb(221,13,13)" fg:x="39" fg:w="1"/><text x="3.3477%" y="639.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="3.0977%" y="693" width="0.1589%" height="15" fill="rgb(238,131,9)" fg:x="39" fg:w="2"/><text x="3.3477%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="3.0977%" y="677" width="0.1589%" height="15" fill="rgb(211,50,8)" fg:x="39" fg:w="2"/><text x="3.3477%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="3.0977%" y="661" width="0.1589%" height="15" fill="rgb(245,182,24)" fg:x="39" fg:w="2"/><text x="3.3477%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.1771%" y="645" width="0.0794%" height="15" fill="rgb(242,14,37)" fg:x="40" fg:w="1"/><text x="3.4271%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.1771%" y="629" width="0.0794%" height="15" fill="rgb(246,228,12)" fg:x="40" fg:w="1"/><text x="3.4271%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.1771%" y="613" width="0.0794%" height="15" fill="rgb(213,55,15)" fg:x="40" fg:w="1"/><text x="3.4271%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.1771%" y="597" width="0.0794%" height="15" fill="rgb(209,9,3)" fg:x="40" fg:w="1"/><text x="3.4271%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.1771%" y="581" width="0.0794%" height="15" fill="rgb(230,59,30)" fg:x="40" fg:w="1"/><text x="3.4271%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.1771%" y="565" width="0.0794%" height="15" fill="rgb(209,121,21)" fg:x="40" fg:w="1"/><text x="3.4271%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.2566%" y="677" width="0.0794%" height="15" fill="rgb(220,109,13)" fg:x="41" fg:w="1"/><text x="3.5066%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.2566%" y="661" width="0.0794%" height="15" fill="rgb(232,18,1)" fg:x="41" fg:w="1"/><text x="3.5066%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.2566%" y="645" width="0.0794%" height="15" fill="rgb(215,41,42)" fg:x="41" fg:w="1"/><text x="3.5066%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="3.2566%" y="693" width="0.1589%" height="15" fill="rgb(224,123,36)" fg:x="41" fg:w="2"/><text x="3.5066%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="3.3360%" y="677" width="0.0794%" height="15" fill="rgb(240,125,3)" fg:x="42" fg:w="1"/><text x="3.5860%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.3360%" y="661" width="0.0794%" height="15" fill="rgb(205,98,50)" fg:x="42" fg:w="1"/><text x="3.5860%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="3.3360%" y="645" width="0.0794%" height="15" fill="rgb(205,185,37)" fg:x="42" fg:w="1"/><text x="3.5860%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.3360%" y="629" width="0.0794%" height="15" fill="rgb(238,207,15)" fg:x="42" fg:w="1"/><text x="3.5860%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.3360%" y="613" width="0.0794%" height="15" fill="rgb(213,199,42)" fg:x="42" fg:w="1"/><text x="3.5860%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.3360%" y="597" width="0.0794%" height="15" fill="rgb(235,201,11)" fg:x="42" fg:w="1"/><text x="3.5860%" y="607.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="3.3360%" y="581" width="0.0794%" height="15" fill="rgb(207,46,11)" fg:x="42" fg:w="1"/><text x="3.5860%" y="591.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="3.3360%" y="565" width="0.0794%" height="15" fill="rgb(241,35,35)" fg:x="42" fg:w="1"/><text x="3.5860%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4154%" y="597" width="0.0794%" height="15" fill="rgb(243,32,47)" fg:x="43" fg:w="1"/><text x="3.6654%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4154%" y="581" width="0.0794%" height="15" fill="rgb(247,202,23)" fg:x="43" fg:w="1"/><text x="3.6654%" y="591.50"></text></g><g><title>plugins_core::build::Build::holding (10 samples, 0.79%)</title><rect x="2.7800%" y="725" width="0.7943%" height="15" fill="rgb(219,102,11)" fg:x="35" fg:w="10"/><text x="3.0300%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="3.0977%" y="709" width="0.4766%" height="15" fill="rgb(243,110,44)" fg:x="39" fg:w="6"/><text x="3.3477%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="3.4154%" y="693" width="0.1589%" height="15" fill="rgb(222,74,54)" fg:x="43" fg:w="2"/><text x="3.6654%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="3.4154%" y="677" width="0.1589%" height="15" fill="rgb(216,99,12)" fg:x="43" fg:w="2"/><text x="3.6654%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="3.4154%" y="661" width="0.1589%" height="15" fill="rgb(226,22,26)" fg:x="43" fg:w="2"/><text x="3.6654%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.4154%" y="645" width="0.1589%" height="15" fill="rgb(217,163,10)" fg:x="43" fg:w="2"/><text x="3.6654%" y="655.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.4154%" y="629" width="0.1589%" height="15" fill="rgb(213,25,53)" fg:x="43" fg:w="2"/><text x="3.6654%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.4154%" y="613" width="0.1589%" height="15" fill="rgb(252,105,26)" fg:x="43" fg:w="2"/><text x="3.6654%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.4948%" y="597" width="0.0794%" height="15" fill="rgb(220,39,43)" fg:x="44" fg:w="1"/><text x="3.7448%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4948%" y="581" width="0.0794%" height="15" fill="rgb(229,68,48)" fg:x="44" fg:w="1"/><text x="3.7448%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.4948%" y="565" width="0.0794%" height="15" fill="rgb(252,8,32)" fg:x="44" fg:w="1"/><text x="3.7448%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4948%" y="549" width="0.0794%" height="15" fill="rgb(223,20,43)" fg:x="44" fg:w="1"/><text x="3.7448%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.4948%" y="533" width="0.0794%" height="15" fill="rgb(229,81,49)" fg:x="44" fg:w="1"/><text x="3.7448%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4948%" y="517" width="0.0794%" height="15" fill="rgb(236,28,36)" fg:x="44" fg:w="1"/><text x="3.7448%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.4948%" y="501" width="0.0794%" height="15" fill="rgb(249,185,26)" fg:x="44" fg:w="1"/><text x="3.7448%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4948%" y="485" width="0.0794%" height="15" fill="rgb(249,174,33)" fg:x="44" fg:w="1"/><text x="3.7448%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.4948%" y="469" width="0.0794%" height="15" fill="rgb(233,201,37)" fg:x="44" fg:w="1"/><text x="3.7448%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4948%" y="453" width="0.0794%" height="15" fill="rgb(221,78,26)" fg:x="44" fg:w="1"/><text x="3.7448%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.4948%" y="437" width="0.0794%" height="15" fill="rgb(250,127,30)" fg:x="44" fg:w="1"/><text x="3.7448%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.5743%" y="677" width="0.0794%" height="15" fill="rgb(230,49,44)" fg:x="45" fg:w="1"/><text x="3.8243%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.5743%" y="693" width="0.1589%" height="15" fill="rgb(229,67,23)" fg:x="45" fg:w="2"/><text x="3.8243%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.6537%" y="677" width="0.0794%" height="15" fill="rgb(249,83,47)" fg:x="46" fg:w="1"/><text x="3.9037%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.6537%" y="661" width="0.0794%" height="15" fill="rgb(215,43,3)" fg:x="46" fg:w="1"/><text x="3.9037%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.6537%" y="645" width="0.0794%" height="15" fill="rgb(238,154,13)" fg:x="46" fg:w="1"/><text x="3.9037%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.6537%" y="629" width="0.0794%" height="15" fill="rgb(219,56,2)" fg:x="46" fg:w="1"/><text x="3.9037%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.6537%" y="613" width="0.0794%" height="15" fill="rgb(233,0,4)" fg:x="46" fg:w="1"/><text x="3.9037%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.6537%" y="597" width="0.0794%" height="15" fill="rgb(235,30,7)" fg:x="46" fg:w="1"/><text x="3.9037%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.6537%" y="581" width="0.0794%" height="15" fill="rgb(250,79,13)" fg:x="46" fg:w="1"/><text x="3.9037%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.6537%" y="565" width="0.0794%" height="15" fill="rgb(211,146,34)" fg:x="46" fg:w="1"/><text x="3.9037%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.6537%" y="549" width="0.0794%" height="15" fill="rgb(228,22,38)" fg:x="46" fg:w="1"/><text x="3.9037%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.6537%" y="533" width="0.0794%" height="15" fill="rgb(235,168,5)" fg:x="46" fg:w="1"/><text x="3.9037%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.6537%" y="517" width="0.0794%" height="15" fill="rgb(221,155,16)" fg:x="46" fg:w="1"/><text x="3.9037%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.6537%" y="501" width="0.0794%" height="15" fill="rgb(215,215,53)" fg:x="46" fg:w="1"/><text x="3.9037%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.6537%" y="485" width="0.0794%" height="15" fill="rgb(223,4,10)" fg:x="46" fg:w="1"/><text x="3.9037%" y="495.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="3.7331%" y="693" width="0.0794%" height="15" fill="rgb(234,103,6)" fg:x="47" fg:w="1"/><text x="3.9831%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.7331%" y="677" width="0.0794%" height="15" fill="rgb(227,97,0)" fg:x="47" fg:w="1"/><text x="3.9831%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.7331%" y="661" width="0.0794%" height="15" fill="rgb(234,150,53)" fg:x="47" fg:w="1"/><text x="3.9831%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.7331%" y="645" width="0.0794%" height="15" fill="rgb(228,201,54)" fg:x="47" fg:w="1"/><text x="3.9831%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7331%" y="629" width="0.0794%" height="15" fill="rgb(222,22,37)" fg:x="47" fg:w="1"/><text x="3.9831%" y="639.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="3.7331%" y="613" width="0.0794%" height="15" fill="rgb(237,53,32)" fg:x="47" fg:w="1"/><text x="3.9831%" y="623.50"></text></g><g><title>plugins_core::build::Build::into_entry (4 samples, 0.32%)</title><rect x="3.5743%" y="725" width="0.3177%" height="15" fill="rgb(233,25,53)" fg:x="45" fg:w="4"/><text x="3.8243%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="3.5743%" y="709" width="0.3177%" height="15" fill="rgb(210,40,34)" fg:x="45" fg:w="4"/><text x="3.8243%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.8125%" y="693" width="0.0794%" height="15" fill="rgb(241,220,44)" fg:x="48" fg:w="1"/><text x="4.0625%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.8125%" y="677" width="0.0794%" height="15" fill="rgb(235,28,35)" fg:x="48" fg:w="1"/><text x="4.0625%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="3.8125%" y="661" width="0.0794%" height="15" fill="rgb(210,56,17)" fg:x="48" fg:w="1"/><text x="4.0625%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.8125%" y="645" width="0.0794%" height="15" fill="rgb(224,130,29)" fg:x="48" fg:w="1"/><text x="4.0625%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.8125%" y="629" width="0.0794%" height="15" fill="rgb(235,212,8)" fg:x="48" fg:w="1"/><text x="4.0625%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8125%" y="613" width="0.0794%" height="15" fill="rgb(223,33,50)" fg:x="48" fg:w="1"/><text x="4.0625%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.8125%" y="597" width="0.0794%" height="15" fill="rgb(219,149,13)" fg:x="48" fg:w="1"/><text x="4.0625%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8125%" y="581" width="0.0794%" height="15" fill="rgb(250,156,29)" fg:x="48" fg:w="1"/><text x="4.0625%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.8125%" y="565" width="0.0794%" height="15" fill="rgb(216,193,19)" fg:x="48" fg:w="1"/><text x="4.0625%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.8125%" y="549" width="0.0794%" height="15" fill="rgb(216,135,14)" fg:x="48" fg:w="1"/><text x="4.0625%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.8125%" y="533" width="0.0794%" height="15" fill="rgb(241,47,5)" fg:x="48" fg:w="1"/><text x="4.0625%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.8920%" y="693" width="0.0794%" height="15" fill="rgb(233,42,35)" fg:x="49" fg:w="1"/><text x="4.1420%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.8920%" y="677" width="0.0794%" height="15" fill="rgb(231,13,6)" fg:x="49" fg:w="1"/><text x="4.1420%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.8920%" y="661" width="0.0794%" height="15" fill="rgb(207,181,40)" fg:x="49" fg:w="1"/><text x="4.1420%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.8920%" y="645" width="0.0794%" height="15" fill="rgb(254,173,49)" fg:x="49" fg:w="1"/><text x="4.1420%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.8920%" y="629" width="0.0794%" height="15" fill="rgb(221,1,38)" fg:x="49" fg:w="1"/><text x="4.1420%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.8920%" y="613" width="0.0794%" height="15" fill="rgb(206,124,46)" fg:x="49" fg:w="1"/><text x="4.1420%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.8920%" y="597" width="0.0794%" height="15" fill="rgb(249,21,11)" fg:x="49" fg:w="1"/><text x="4.1420%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.8920%" y="581" width="0.0794%" height="15" fill="rgb(222,201,40)" fg:x="49" fg:w="1"/><text x="4.1420%" y="591.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="3.8920%" y="725" width="0.1589%" height="15" fill="rgb(235,61,29)" fg:x="49" fg:w="2"/><text x="4.1420%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="3.8920%" y="709" width="0.1589%" height="15" fill="rgb(219,207,3)" fg:x="49" fg:w="2"/><text x="4.1420%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.9714%" y="693" width="0.0794%" height="15" fill="rgb(222,56,46)" fg:x="50" fg:w="1"/><text x="4.2214%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.9714%" y="677" width="0.0794%" height="15" fill="rgb(239,76,54)" fg:x="50" fg:w="1"/><text x="4.2214%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="3.9714%" y="661" width="0.0794%" height="15" fill="rgb(231,124,27)" fg:x="50" fg:w="1"/><text x="4.2214%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.9714%" y="645" width="0.0794%" height="15" fill="rgb(249,195,6)" fg:x="50" fg:w="1"/><text x="4.2214%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.9714%" y="629" width="0.0794%" height="15" fill="rgb(237,174,47)" fg:x="50" fg:w="1"/><text x="4.2214%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.0508%" y="709" width="0.0794%" height="15" fill="rgb(206,201,31)" fg:x="51" fg:w="1"/><text x="4.3008%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.0508%" y="693" width="0.0794%" height="15" fill="rgb(231,57,52)" fg:x="51" fg:w="1"/><text x="4.3008%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.0508%" y="677" width="0.0794%" height="15" fill="rgb(248,177,22)" fg:x="51" fg:w="1"/><text x="4.3008%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.0508%" y="661" width="0.0794%" height="15" fill="rgb(215,211,37)" fg:x="51" fg:w="1"/><text x="4.3008%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0508%" y="645" width="0.0794%" height="15" fill="rgb(241,128,51)" fg:x="51" fg:w="1"/><text x="4.3008%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0508%" y="629" width="0.0794%" height="15" fill="rgb(227,165,31)" fg:x="51" fg:w="1"/><text x="4.3008%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0508%" y="613" width="0.0794%" height="15" fill="rgb(228,167,24)" fg:x="51" fg:w="1"/><text x="4.3008%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0508%" y="597" width="0.0794%" height="15" fill="rgb(228,143,12)" fg:x="51" fg:w="1"/><text x="4.3008%" y="607.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1303%" y="709" width="0.0794%" height="15" fill="rgb(249,149,8)" fg:x="52" fg:w="1"/><text x="4.3803%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1303%" y="693" width="0.0794%" height="15" fill="rgb(243,35,44)" fg:x="52" fg:w="1"/><text x="4.3803%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1303%" y="677" width="0.0794%" height="15" fill="rgb(246,89,9)" fg:x="52" fg:w="1"/><text x="4.3803%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.1303%" y="661" width="0.0794%" height="15" fill="rgb(233,213,13)" fg:x="52" fg:w="1"/><text x="4.3803%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.1303%" y="645" width="0.0794%" height="15" fill="rgb(233,141,41)" fg:x="52" fg:w="1"/><text x="4.3803%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.1303%" y="629" width="0.0794%" height="15" fill="rgb(239,167,4)" fg:x="52" fg:w="1"/><text x="4.3803%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="4.1303%" y="613" width="0.0794%" height="15" fill="rgb(209,217,16)" fg:x="52" fg:w="1"/><text x="4.3803%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="4.1303%" y="597" width="0.0794%" height="15" fill="rgb(219,88,35)" fg:x="52" fg:w="1"/><text x="4.3803%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="4.2097%" y="661" width="0.0794%" height="15" fill="rgb(220,193,23)" fg:x="53" fg:w="1"/><text x="4.4597%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="4.2097%" y="645" width="0.0794%" height="15" fill="rgb(230,90,52)" fg:x="53" fg:w="1"/><text x="4.4597%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="4.2097%" y="629" width="0.0794%" height="15" fill="rgb(252,106,19)" fg:x="53" fg:w="1"/><text x="4.4597%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="4.2097%" y="613" width="0.0794%" height="15" fill="rgb(206,74,20)" fg:x="53" fg:w="1"/><text x="4.4597%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.2097%" y="597" width="0.0794%" height="15" fill="rgb(230,138,44)" fg:x="53" fg:w="1"/><text x="4.4597%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.2097%" y="581" width="0.0794%" height="15" fill="rgb(235,182,43)" fg:x="53" fg:w="1"/><text x="4.4597%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.2097%" y="565" width="0.0794%" height="15" fill="rgb(242,16,51)" fg:x="53" fg:w="1"/><text x="4.4597%" y="575.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="4.2097%" y="549" width="0.0794%" height="15" fill="rgb(248,9,4)" fg:x="53" fg:w="1"/><text x="4.4597%" y="559.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="4.2097%" y="533" width="0.0794%" height="15" fill="rgb(210,31,22)" fg:x="53" fg:w="1"/><text x="4.4597%" y="543.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="4.2097%" y="517" width="0.0794%" height="15" fill="rgb(239,54,39)" fg:x="53" fg:w="1"/><text x="4.4597%" y="527.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="4.2891%" y="629" width="0.0794%" height="15" fill="rgb(230,99,41)" fg:x="54" fg:w="1"/><text x="4.5391%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.2891%" y="613" width="0.0794%" height="15" fill="rgb(253,106,12)" fg:x="54" fg:w="1"/><text x="4.5391%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="4.2891%" y="597" width="0.0794%" height="15" fill="rgb(213,46,41)" fg:x="54" fg:w="1"/><text x="4.5391%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.2891%" y="581" width="0.0794%" height="15" fill="rgb(215,133,35)" fg:x="54" fg:w="1"/><text x="4.5391%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.2891%" y="565" width="0.0794%" height="15" fill="rgb(213,28,5)" fg:x="54" fg:w="1"/><text x="4.5391%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="4.2891%" y="645" width="0.2383%" height="15" fill="rgb(215,77,49)" fg:x="54" fg:w="3"/><text x="4.5391%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="4.3685%" y="629" width="0.1589%" height="15" fill="rgb(248,100,22)" fg:x="55" fg:w="2"/><text x="4.6185%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="4.3685%" y="613" width="0.1589%" height="15" fill="rgb(208,67,9)" fg:x="55" fg:w="2"/><text x="4.6185%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="4.3685%" y="597" width="0.1589%" height="15" fill="rgb(219,133,21)" fg:x="55" fg:w="2"/><text x="4.6185%" y="607.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="4.3685%" y="581" width="0.1589%" height="15" fill="rgb(246,46,29)" fg:x="55" fg:w="2"/><text x="4.6185%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="4.3685%" y="565" width="0.1589%" height="15" fill="rgb(246,185,52)" fg:x="55" fg:w="2"/><text x="4.6185%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.3685%" y="549" width="0.1589%" height="15" fill="rgb(252,136,11)" fg:x="55" fg:w="2"/><text x="4.6185%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.3685%" y="533" width="0.1589%" height="15" fill="rgb(219,138,53)" fg:x="55" fg:w="2"/><text x="4.6185%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.3685%" y="517" width="0.1589%" height="15" fill="rgb(211,51,23)" fg:x="55" fg:w="2"/><text x="4.6185%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.3685%" y="501" width="0.1589%" height="15" fill="rgb(247,221,28)" fg:x="55" fg:w="2"/><text x="4.6185%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="4.3685%" y="485" width="0.1589%" height="15" fill="rgb(251,222,45)" fg:x="55" fg:w="2"/><text x="4.6185%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="4.3685%" y="469" width="0.1589%" height="15" fill="rgb(217,162,53)" fg:x="55" fg:w="2"/><text x="4.6185%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="4.3685%" y="453" width="0.1589%" height="15" fill="rgb(229,93,14)" fg:x="55" fg:w="2"/><text x="4.6185%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="4.3685%" y="437" width="0.1589%" height="15" fill="rgb(209,67,49)" fg:x="55" fg:w="2"/><text x="4.6185%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="4.3685%" y="421" width="0.1589%" height="15" fill="rgb(213,87,29)" fg:x="55" fg:w="2"/><text x="4.6185%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="4.3685%" y="405" width="0.1589%" height="15" fill="rgb(205,151,52)" fg:x="55" fg:w="2"/><text x="4.6185%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="4.3685%" y="389" width="0.1589%" height="15" fill="rgb(253,215,39)" fg:x="55" fg:w="2"/><text x="4.6185%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="4.3685%" y="373" width="0.1589%" height="15" fill="rgb(221,220,41)" fg:x="55" fg:w="2"/><text x="4.6185%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="4.3685%" y="357" width="0.1589%" height="15" fill="rgb(218,133,21)" fg:x="55" fg:w="2"/><text x="4.6185%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="4.3685%" y="341" width="0.1589%" height="15" fill="rgb(221,193,43)" fg:x="55" fg:w="2"/><text x="4.6185%" y="351.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="4.3685%" y="325" width="0.1589%" height="15" fill="rgb(240,128,52)" fg:x="55" fg:w="2"/><text x="4.6185%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="4.3685%" y="309" width="0.1589%" height="15" fill="rgb(253,114,12)" fg:x="55" fg:w="2"/><text x="4.6185%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="4.5274%" y="597" width="0.0794%" height="15" fill="rgb(215,223,47)" fg:x="57" fg:w="1"/><text x="4.7774%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.5274%" y="581" width="0.0794%" height="15" fill="rgb(248,225,23)" fg:x="57" fg:w="1"/><text x="4.7774%" y="591.50"></text></g><g><title>plugins_core::build::Build::leads_to (5 samples, 0.40%)</title><rect x="4.2891%" y="661" width="0.3971%" height="15" fill="rgb(250,108,0)" fg:x="54" fg:w="5"/><text x="4.5391%" y="671.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="4.5274%" y="645" width="0.1589%" height="15" fill="rgb(228,208,7)" fg:x="57" fg:w="2"/><text x="4.7774%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="4.5274%" y="629" width="0.1589%" height="15" fill="rgb(244,45,10)" fg:x="57" fg:w="2"/><text x="4.7774%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="4.5274%" y="613" width="0.1589%" height="15" fill="rgb(207,125,25)" fg:x="57" fg:w="2"/><text x="4.7774%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.6068%" y="597" width="0.0794%" height="15" fill="rgb(210,195,18)" fg:x="58" fg:w="1"/><text x="4.8568%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.6863%" y="629" width="0.0794%" height="15" fill="rgb(249,80,12)" fg:x="59" fg:w="1"/><text x="4.9363%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.6863%" y="613" width="0.0794%" height="15" fill="rgb(221,65,9)" fg:x="59" fg:w="1"/><text x="4.9363%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="4.6863%" y="597" width="0.0794%" height="15" fill="rgb(235,49,36)" fg:x="59" fg:w="1"/><text x="4.9363%" y="607.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="4.6863%" y="661" width="0.1589%" height="15" fill="rgb(225,32,20)" fg:x="59" fg:w="2"/><text x="4.9363%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="4.6863%" y="645" width="0.1589%" height="15" fill="rgb(215,141,46)" fg:x="59" fg:w="2"/><text x="4.9363%" y="655.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="4.7657%" y="629" width="0.0794%" height="15" fill="rgb(250,160,47)" fg:x="60" fg:w="1"/><text x="5.0157%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.7657%" y="613" width="0.0794%" height="15" fill="rgb(216,222,40)" fg:x="60" fg:w="1"/><text x="5.0157%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.71%)</title><rect x="4.2097%" y="709" width="0.7149%" height="15" fill="rgb(234,217,39)" fg:x="53" fg:w="9"/><text x="4.4597%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.71%)</title><rect x="4.2097%" y="693" width="0.7149%" height="15" fill="rgb(207,178,40)" fg:x="53" fg:w="9"/><text x="4.4597%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (9 samples, 0.71%)</title><rect x="4.2097%" y="677" width="0.7149%" height="15" fill="rgb(221,136,13)" fg:x="53" fg:w="9"/><text x="4.4597%" y="687.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="4.8451%" y="661" width="0.0794%" height="15" fill="rgb(249,199,10)" fg:x="61" fg:w="1"/><text x="5.0951%" y="671.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.8451%" y="645" width="0.0794%" height="15" fill="rgb(249,222,13)" fg:x="61" fg:w="1"/><text x="5.0951%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.8451%" y="629" width="0.0794%" height="15" fill="rgb(244,185,38)" fg:x="61" fg:w="1"/><text x="5.0951%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.8451%" y="613" width="0.0794%" height="15" fill="rgb(236,202,9)" fg:x="61" fg:w="1"/><text x="5.0951%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.8451%" y="597" width="0.0794%" height="15" fill="rgb(250,229,37)" fg:x="61" fg:w="1"/><text x="5.0951%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.8451%" y="581" width="0.0794%" height="15" fill="rgb(206,174,23)" fg:x="61" fg:w="1"/><text x="5.0951%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.8451%" y="565" width="0.0794%" height="15" fill="rgb(211,33,43)" fg:x="61" fg:w="1"/><text x="5.0951%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.8451%" y="549" width="0.0794%" height="15" fill="rgb(245,58,50)" fg:x="61" fg:w="1"/><text x="5.0951%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.8451%" y="533" width="0.0794%" height="15" fill="rgb(244,68,36)" fg:x="61" fg:w="1"/><text x="5.0951%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.8451%" y="517" width="0.0794%" height="15" fill="rgb(232,229,15)" fg:x="61" fg:w="1"/><text x="5.0951%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.8451%" y="501" width="0.0794%" height="15" fill="rgb(254,30,23)" fg:x="61" fg:w="1"/><text x="5.0951%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.8451%" y="485" width="0.0794%" height="15" fill="rgb(235,160,14)" fg:x="61" fg:w="1"/><text x="5.0951%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.8451%" y="469" width="0.0794%" height="15" fill="rgb(212,155,44)" fg:x="61" fg:w="1"/><text x="5.0951%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.8451%" y="453" width="0.0794%" height="15" fill="rgb(226,2,50)" fg:x="61" fg:w="1"/><text x="5.0951%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::model::entry::Entry&gt;&gt; (1 samples, 0.08%)</title><rect x="4.9245%" y="709" width="0.0794%" height="15" fill="rgb(234,177,6)" fg:x="62" fg:w="1"/><text x="5.1745%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.9245%" y="693" width="0.0794%" height="15" fill="rgb(217,24,9)" fg:x="62" fg:w="1"/><text x="5.1745%" y="703.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="5.0040%" y="677" width="0.0794%" height="15" fill="rgb(220,13,46)" fg:x="63" fg:w="1"/><text x="5.2540%" y="687.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="5.0040%" y="661" width="0.0794%" height="15" fill="rgb(239,221,27)" fg:x="63" fg:w="1"/><text x="5.2540%" y="671.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="5.0040%" y="645" width="0.0794%" height="15" fill="rgb(222,198,25)" fg:x="63" fg:w="1"/><text x="5.2540%" y="655.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="5.0040%" y="629" width="0.0794%" height="15" fill="rgb(211,99,13)" fg:x="63" fg:w="1"/><text x="5.2540%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="5.0040%" y="613" width="0.0794%" height="15" fill="rgb(232,111,31)" fg:x="63" fg:w="1"/><text x="5.2540%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="5.0040%" y="597" width="0.0794%" height="15" fill="rgb(245,82,37)" fg:x="63" fg:w="1"/><text x="5.2540%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="5.0040%" y="581" width="0.0794%" height="15" fill="rgb(227,149,46)" fg:x="63" fg:w="1"/><text x="5.2540%" y="591.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="5.0040%" y="565" width="0.0794%" height="15" fill="rgb(218,36,50)" fg:x="63" fg:w="1"/><text x="5.2540%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.0834%" y="645" width="0.0794%" height="15" fill="rgb(226,80,48)" fg:x="64" fg:w="1"/><text x="5.3334%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="5.0834%" y="629" width="0.0794%" height="15" fill="rgb(238,224,15)" fg:x="64" fg:w="1"/><text x="5.3334%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="5.0834%" y="613" width="0.0794%" height="15" fill="rgb(241,136,10)" fg:x="64" fg:w="1"/><text x="5.3334%" y="623.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="5.0834%" y="597" width="0.0794%" height="15" fill="rgb(208,32,45)" fg:x="64" fg:w="1"/><text x="5.3334%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.1628%" y="581" width="0.0794%" height="15" fill="rgb(207,135,9)" fg:x="65" fg:w="1"/><text x="5.4128%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.1628%" y="565" width="0.0794%" height="15" fill="rgb(206,86,44)" fg:x="65" fg:w="1"/><text x="5.4128%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.1628%" y="549" width="0.0794%" height="15" fill="rgb(245,177,15)" fg:x="65" fg:w="1"/><text x="5.4128%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="5.1628%" y="597" width="0.1589%" height="15" fill="rgb(206,64,50)" fg:x="65" fg:w="2"/><text x="5.4128%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.2423%" y="581" width="0.0794%" height="15" fill="rgb(234,36,40)" fg:x="66" fg:w="1"/><text x="5.4923%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.2423%" y="565" width="0.0794%" height="15" fill="rgb(213,64,8)" fg:x="66" fg:w="1"/><text x="5.4923%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.2423%" y="549" width="0.0794%" height="15" fill="rgb(210,75,36)" fg:x="66" fg:w="1"/><text x="5.4923%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.3217%" y="581" width="0.0794%" height="15" fill="rgb(229,88,21)" fg:x="67" fg:w="1"/><text x="5.5717%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3217%" y="565" width="0.0794%" height="15" fill="rgb(252,204,47)" fg:x="67" fg:w="1"/><text x="5.5717%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3217%" y="549" width="0.0794%" height="15" fill="rgb(208,77,27)" fg:x="67" fg:w="1"/><text x="5.5717%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4805%" y="533" width="0.0794%" height="15" fill="rgb(221,76,26)" fg:x="69" fg:w="1"/><text x="5.7305%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.4805%" y="517" width="0.0794%" height="15" fill="rgb(225,139,18)" fg:x="69" fg:w="1"/><text x="5.7305%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.4805%" y="501" width="0.0794%" height="15" fill="rgb(230,137,11)" fg:x="69" fg:w="1"/><text x="5.7305%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.4805%" y="485" width="0.0794%" height="15" fill="rgb(212,28,1)" fg:x="69" fg:w="1"/><text x="5.7305%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.4805%" y="469" width="0.0794%" height="15" fill="rgb(248,164,17)" fg:x="69" fg:w="1"/><text x="5.7305%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="5.4805%" y="565" width="0.1589%" height="15" fill="rgb(222,171,42)" fg:x="69" fg:w="2"/><text x="5.7305%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.4805%" y="549" width="0.1589%" height="15" fill="rgb(243,84,45)" fg:x="69" fg:w="2"/><text x="5.7305%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.5600%" y="533" width="0.0794%" height="15" fill="rgb(252,49,23)" fg:x="70" fg:w="1"/><text x="5.8100%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="5.4011%" y="581" width="0.3177%" height="15" fill="rgb(215,19,7)" fg:x="68" fg:w="4"/><text x="5.6511%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6394%" y="565" width="0.0794%" height="15" fill="rgb(238,81,41)" fg:x="71" fg:w="1"/><text x="5.8894%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6394%" y="549" width="0.0794%" height="15" fill="rgb(210,199,37)" fg:x="71" fg:w="1"/><text x="5.8894%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.6394%" y="533" width="0.0794%" height="15" fill="rgb(244,192,49)" fg:x="71" fg:w="1"/><text x="5.8894%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="5.3217%" y="597" width="0.4766%" height="15" fill="rgb(226,211,11)" fg:x="67" fg:w="6"/><text x="5.5717%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7188%" y="581" width="0.0794%" height="15" fill="rgb(236,162,54)" fg:x="72" fg:w="1"/><text x="5.9688%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.7188%" y="565" width="0.0794%" height="15" fill="rgb(220,229,9)" fg:x="72" fg:w="1"/><text x="5.9688%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.7188%" y="549" width="0.0794%" height="15" fill="rgb(250,87,22)" fg:x="72" fg:w="1"/><text x="5.9688%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.7188%" y="533" width="0.0794%" height="15" fill="rgb(239,43,17)" fg:x="72" fg:w="1"/><text x="5.9688%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.7188%" y="517" width="0.0794%" height="15" fill="rgb(231,177,25)" fg:x="72" fg:w="1"/><text x="5.9688%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.7188%" y="501" width="0.0794%" height="15" fill="rgb(219,179,1)" fg:x="72" fg:w="1"/><text x="5.9688%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.71%)</title><rect x="5.1628%" y="613" width="0.7149%" height="15" fill="rgb(238,219,53)" fg:x="65" fg:w="9"/><text x="5.4128%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7983%" y="597" width="0.0794%" height="15" fill="rgb(232,167,36)" fg:x="73" fg:w="1"/><text x="6.0483%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.7983%" y="581" width="0.0794%" height="15" fill="rgb(244,19,51)" fg:x="73" fg:w="1"/><text x="6.0483%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.7983%" y="565" width="0.0794%" height="15" fill="rgb(224,6,22)" fg:x="73" fg:w="1"/><text x="6.0483%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.8777%" y="565" width="0.0794%" height="15" fill="rgb(224,145,5)" fg:x="74" fg:w="1"/><text x="6.1277%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.9571%" y="549" width="0.0794%" height="15" fill="rgb(234,130,49)" fg:x="75" fg:w="1"/><text x="6.2071%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="5.8777%" y="613" width="0.2383%" height="15" fill="rgb(254,6,2)" fg:x="74" fg:w="3"/><text x="6.1277%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="5.8777%" y="597" width="0.2383%" height="15" fill="rgb(208,96,46)" fg:x="74" fg:w="3"/><text x="6.1277%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="5.8777%" y="581" width="0.2383%" height="15" fill="rgb(239,3,39)" fg:x="74" fg:w="3"/><text x="6.1277%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.9571%" y="565" width="0.1589%" height="15" fill="rgb(233,210,1)" fg:x="75" fg:w="2"/><text x="6.2071%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.0365%" y="549" width="0.0794%" height="15" fill="rgb(244,137,37)" fg:x="76" fg:w="1"/><text x="6.2865%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.1160%" y="565" width="0.0794%" height="15" fill="rgb(240,136,2)" fg:x="77" fg:w="1"/><text x="6.3660%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.1160%" y="549" width="0.0794%" height="15" fill="rgb(239,18,37)" fg:x="77" fg:w="1"/><text x="6.3660%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="6.1160%" y="533" width="0.0794%" height="15" fill="rgb(218,185,22)" fg:x="77" fg:w="1"/><text x="6.3660%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="6.1954%" y="549" width="0.0794%" height="15" fill="rgb(225,218,4)" fg:x="78" fg:w="1"/><text x="6.4454%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="6.1954%" y="565" width="0.1589%" height="15" fill="rgb(230,182,32)" fg:x="78" fg:w="2"/><text x="6.4454%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.2748%" y="549" width="0.0794%" height="15" fill="rgb(242,56,43)" fg:x="79" fg:w="1"/><text x="6.5248%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2748%" y="533" width="0.0794%" height="15" fill="rgb(233,99,24)" fg:x="79" fg:w="1"/><text x="6.5248%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.5131%" y="517" width="0.0794%" height="15" fill="rgb(234,209,42)" fg:x="82" fg:w="1"/><text x="6.7631%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5131%" y="501" width="0.0794%" height="15" fill="rgb(227,7,12)" fg:x="82" fg:w="1"/><text x="6.7631%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5131%" y="485" width="0.0794%" height="15" fill="rgb(245,203,43)" fg:x="82" fg:w="1"/><text x="6.7631%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.5925%" y="469" width="0.0794%" height="15" fill="rgb(238,205,33)" fg:x="83" fg:w="1"/><text x="6.8425%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5925%" y="453" width="0.0794%" height="15" fill="rgb(231,56,7)" fg:x="83" fg:w="1"/><text x="6.8425%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.5925%" y="437" width="0.0794%" height="15" fill="rgb(244,186,29)" fg:x="83" fg:w="1"/><text x="6.8425%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5925%" y="421" width="0.0794%" height="15" fill="rgb(234,111,31)" fg:x="83" fg:w="1"/><text x="6.8425%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.5925%" y="405" width="0.0794%" height="15" fill="rgb(241,149,10)" fg:x="83" fg:w="1"/><text x="6.8425%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5925%" y="389" width="0.0794%" height="15" fill="rgb(249,206,44)" fg:x="83" fg:w="1"/><text x="6.8425%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5925%" y="373" width="0.0794%" height="15" fill="rgb(251,153,30)" fg:x="83" fg:w="1"/><text x="6.8425%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5925%" y="357" width="0.0794%" height="15" fill="rgb(239,152,38)" fg:x="83" fg:w="1"/><text x="6.8425%" y="367.50"></text></g><g><title>engine::session::Session::flush (22 samples, 1.75%)</title><rect x="5.0040%" y="709" width="1.7474%" height="15" fill="rgb(249,139,47)" fg:x="63" fg:w="22"/><text x="5.2540%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (22 samples, 1.75%)</title><rect x="5.0040%" y="693" width="1.7474%" height="15" fill="rgb(244,64,35)" fg:x="63" fg:w="22"/><text x="5.2540%" y="703.50"></text></g><g><title>engine::session::state::State::close (21 samples, 1.67%)</title><rect x="5.0834%" y="677" width="1.6680%" height="15" fill="rgb(216,46,15)" fg:x="64" fg:w="21"/><text x="5.3334%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (21 samples, 1.67%)</title><rect x="5.0834%" y="661" width="1.6680%" height="15" fill="rgb(250,74,19)" fg:x="64" fg:w="21"/><text x="5.3334%" y="671.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (20 samples, 1.59%)</title><rect x="5.1628%" y="645" width="1.5886%" height="15" fill="rgb(249,42,33)" fg:x="65" fg:w="20"/><text x="5.4128%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (20 samples, 1.59%)</title><rect x="5.1628%" y="629" width="1.5886%" height="15" fill="rgb(242,149,17)" fg:x="65" fg:w="20"/><text x="5.4128%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="6.1160%" y="613" width="0.6354%" height="15" fill="rgb(244,29,21)" fg:x="77" fg:w="8"/><text x="6.3660%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="6.1160%" y="597" width="0.6354%" height="15" fill="rgb(220,130,37)" fg:x="77" fg:w="8"/><text x="6.3660%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="6.1160%" y="581" width="0.6354%" height="15" fill="rgb(211,67,2)" fg:x="77" fg:w="8"/><text x="6.3660%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="6.3542%" y="565" width="0.3971%" height="15" fill="rgb(235,68,52)" fg:x="80" fg:w="5"/><text x="6.6042%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="6.3542%" y="549" width="0.3971%" height="15" fill="rgb(246,142,3)" fg:x="80" fg:w="5"/><text x="6.6042%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="6.4337%" y="533" width="0.3177%" height="15" fill="rgb(241,25,7)" fg:x="81" fg:w="4"/><text x="6.6837%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="6.5925%" y="517" width="0.1589%" height="15" fill="rgb(242,119,39)" fg:x="83" fg:w="2"/><text x="6.8425%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="6.5925%" y="501" width="0.1589%" height="15" fill="rgb(241,98,45)" fg:x="83" fg:w="2"/><text x="6.8425%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="6.5925%" y="485" width="0.1589%" height="15" fill="rgb(254,28,30)" fg:x="83" fg:w="2"/><text x="6.8425%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6720%" y="469" width="0.0794%" height="15" fill="rgb(241,142,54)" fg:x="84" fg:w="1"/><text x="6.9220%" y="479.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="6.7514%" y="709" width="0.0794%" height="15" fill="rgb(222,85,15)" fg:x="85" fg:w="1"/><text x="7.0014%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="6.7514%" y="693" width="0.0794%" height="15" fill="rgb(210,85,47)" fg:x="85" fg:w="1"/><text x="7.0014%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="6.8308%" y="677" width="0.0794%" height="15" fill="rgb(224,206,25)" fg:x="86" fg:w="1"/><text x="7.0808%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="6.8308%" y="661" width="0.0794%" height="15" fill="rgb(243,201,19)" fg:x="86" fg:w="1"/><text x="7.0808%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="6.8308%" y="645" width="0.0794%" height="15" fill="rgb(236,59,4)" fg:x="86" fg:w="1"/><text x="7.0808%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.8308%" y="629" width="0.0794%" height="15" fill="rgb(254,179,45)" fg:x="86" fg:w="1"/><text x="7.0808%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="6.8308%" y="613" width="0.0794%" height="15" fill="rgb(226,14,10)" fg:x="86" fg:w="1"/><text x="7.0808%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.9102%" y="677" width="0.0794%" height="15" fill="rgb(244,27,41)" fg:x="87" fg:w="1"/><text x="7.1602%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.9102%" y="661" width="0.0794%" height="15" fill="rgb(235,35,32)" fg:x="87" fg:w="1"/><text x="7.1602%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.9102%" y="645" width="0.0794%" height="15" fill="rgb(218,68,31)" fg:x="87" fg:w="1"/><text x="7.1602%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.9102%" y="629" width="0.0794%" height="15" fill="rgb(207,120,37)" fg:x="87" fg:w="1"/><text x="7.1602%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9102%" y="613" width="0.0794%" height="15" fill="rgb(227,98,0)" fg:x="87" fg:w="1"/><text x="7.1602%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.9102%" y="597" width="0.0794%" height="15" fill="rgb(207,7,3)" fg:x="87" fg:w="1"/><text x="7.1602%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="6.8308%" y="693" width="0.2383%" height="15" fill="rgb(206,98,19)" fg:x="86" fg:w="3"/><text x="7.0808%" y="703.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="6.9897%" y="677" width="0.0794%" height="15" fill="rgb(217,5,26)" fg:x="88" fg:w="1"/><text x="7.2397%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.9897%" y="661" width="0.0794%" height="15" fill="rgb(235,190,38)" fg:x="88" fg:w="1"/><text x="7.2397%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="6.9897%" y="645" width="0.0794%" height="15" fill="rgb(247,86,24)" fg:x="88" fg:w="1"/><text x="7.2397%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.9897%" y="629" width="0.0794%" height="15" fill="rgb(205,101,16)" fg:x="88" fg:w="1"/><text x="7.2397%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.9897%" y="613" width="0.0794%" height="15" fill="rgb(246,168,33)" fg:x="88" fg:w="1"/><text x="7.2397%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::carrying::model::Location&gt;&gt; (1 samples, 0.08%)</title><rect x="7.0691%" y="677" width="0.0794%" height="15" fill="rgb(231,114,1)" fg:x="89" fg:w="1"/><text x="7.3191%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="7.0691%" y="661" width="0.0794%" height="15" fill="rgb(207,184,53)" fg:x="89" fg:w="1"/><text x="7.3191%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.0691%" y="645" width="0.0794%" height="15" fill="rgb(224,95,51)" fg:x="89" fg:w="1"/><text x="7.3191%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.1485%" y="677" width="0.0794%" height="15" fill="rgb(212,188,45)" fg:x="90" fg:w="1"/><text x="7.3985%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="7.1485%" y="661" width="0.0794%" height="15" fill="rgb(223,154,38)" fg:x="90" fg:w="1"/><text x="7.3985%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.1485%" y="645" width="0.0794%" height="15" fill="rgb(251,22,52)" fg:x="90" fg:w="1"/><text x="7.3985%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.1485%" y="629" width="0.0794%" height="15" fill="rgb(229,209,22)" fg:x="90" fg:w="1"/><text x="7.3985%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2280%" y="581" width="0.0794%" height="15" fill="rgb(234,138,34)" fg:x="91" fg:w="1"/><text x="7.4780%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2280%" y="565" width="0.0794%" height="15" fill="rgb(212,95,11)" fg:x="91" fg:w="1"/><text x="7.4780%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2280%" y="549" width="0.0794%" height="15" fill="rgb(240,179,47)" fg:x="91" fg:w="1"/><text x="7.4780%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2280%" y="533" width="0.0794%" height="15" fill="rgb(240,163,11)" fg:x="91" fg:w="1"/><text x="7.4780%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2280%" y="517" width="0.0794%" height="15" fill="rgb(236,37,12)" fg:x="91" fg:w="1"/><text x="7.4780%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2280%" y="501" width="0.0794%" height="15" fill="rgb(232,164,16)" fg:x="91" fg:w="1"/><text x="7.4780%" y="511.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.56%)</title><rect x="6.8308%" y="709" width="0.5560%" height="15" fill="rgb(244,205,15)" fg:x="86" fg:w="7"/><text x="7.0808%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="7.0691%" y="693" width="0.3177%" height="15" fill="rgb(223,117,47)" fg:x="89" fg:w="4"/><text x="7.3191%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="7.2280%" y="677" width="0.1589%" height="15" fill="rgb(244,107,35)" fg:x="91" fg:w="2"/><text x="7.4780%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="7.2280%" y="661" width="0.1589%" height="15" fill="rgb(205,140,8)" fg:x="91" fg:w="2"/><text x="7.4780%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="7.2280%" y="645" width="0.1589%" height="15" fill="rgb(228,84,46)" fg:x="91" fg:w="2"/><text x="7.4780%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="7.2280%" y="629" width="0.1589%" height="15" fill="rgb(254,188,9)" fg:x="91" fg:w="2"/><text x="7.4780%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.2280%" y="613" width="0.1589%" height="15" fill="rgb(206,112,54)" fg:x="91" fg:w="2"/><text x="7.4780%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.2280%" y="597" width="0.1589%" height="15" fill="rgb(216,84,49)" fg:x="91" fg:w="2"/><text x="7.4780%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.3074%" y="581" width="0.0794%" height="15" fill="rgb(214,194,35)" fg:x="92" fg:w="1"/><text x="7.5574%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="7.3074%" y="565" width="0.0794%" height="15" fill="rgb(249,28,3)" fg:x="92" fg:w="1"/><text x="7.5574%" y="575.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="7.3868%" y="709" width="0.0794%" height="15" fill="rgb(222,56,52)" fg:x="93" fg:w="1"/><text x="7.6368%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="7.3868%" y="693" width="0.0794%" height="15" fill="rgb(245,217,50)" fg:x="93" fg:w="1"/><text x="7.6368%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.3868%" y="677" width="0.0794%" height="15" fill="rgb(213,201,24)" fg:x="93" fg:w="1"/><text x="7.6368%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.3868%" y="661" width="0.0794%" height="15" fill="rgb(248,116,28)" fg:x="93" fg:w="1"/><text x="7.6368%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.3868%" y="645" width="0.0794%" height="15" fill="rgb(219,72,43)" fg:x="93" fg:w="1"/><text x="7.6368%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.3868%" y="629" width="0.0794%" height="15" fill="rgb(209,138,14)" fg:x="93" fg:w="1"/><text x="7.6368%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3868%" y="613" width="0.0794%" height="15" fill="rgb(222,18,33)" fg:x="93" fg:w="1"/><text x="7.6368%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.3868%" y="597" width="0.0794%" height="15" fill="rgb(213,199,7)" fg:x="93" fg:w="1"/><text x="7.6368%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3868%" y="581" width="0.0794%" height="15" fill="rgb(250,110,10)" fg:x="93" fg:w="1"/><text x="7.6368%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.3868%" y="565" width="0.0794%" height="15" fill="rgb(248,123,6)" fg:x="93" fg:w="1"/><text x="7.6368%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3868%" y="549" width="0.0794%" height="15" fill="rgb(206,91,31)" fg:x="93" fg:w="1"/><text x="7.6368%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.3868%" y="533" width="0.0794%" height="15" fill="rgb(211,154,13)" fg:x="93" fg:w="1"/><text x="7.6368%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3868%" y="517" width="0.0794%" height="15" fill="rgb(225,148,7)" fg:x="93" fg:w="1"/><text x="7.6368%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.3868%" y="501" width="0.0794%" height="15" fill="rgb(220,160,43)" fg:x="93" fg:w="1"/><text x="7.6368%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="7.4662%" y="661" width="0.0794%" height="15" fill="rgb(213,52,39)" fg:x="94" fg:w="1"/><text x="7.7162%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="7.4662%" y="645" width="0.0794%" height="15" fill="rgb(243,137,7)" fg:x="94" fg:w="1"/><text x="7.7162%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.4662%" y="629" width="0.0794%" height="15" fill="rgb(230,79,13)" fg:x="94" fg:w="1"/><text x="7.7162%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="7.4662%" y="677" width="0.1589%" height="15" fill="rgb(247,105,23)" fg:x="94" fg:w="2"/><text x="7.7162%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="7.5457%" y="661" width="0.0794%" height="15" fill="rgb(223,179,41)" fg:x="95" fg:w="1"/><text x="7.7957%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="7.5457%" y="645" width="0.0794%" height="15" fill="rgb(218,9,34)" fg:x="95" fg:w="1"/><text x="7.7957%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="7.5457%" y="629" width="0.0794%" height="15" fill="rgb(222,106,8)" fg:x="95" fg:w="1"/><text x="7.7957%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.5457%" y="613" width="0.0794%" height="15" fill="rgb(211,220,0)" fg:x="95" fg:w="1"/><text x="7.7957%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.5457%" y="597" width="0.0794%" height="15" fill="rgb(229,52,16)" fg:x="95" fg:w="1"/><text x="7.7957%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="7.5457%" y="581" width="0.0794%" height="15" fill="rgb(212,155,18)" fg:x="95" fg:w="1"/><text x="7.7957%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.5457%" y="565" width="0.0794%" height="15" fill="rgb(242,21,14)" fg:x="95" fg:w="1"/><text x="7.7957%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.5457%" y="549" width="0.0794%" height="15" fill="rgb(222,19,48)" fg:x="95" fg:w="1"/><text x="7.7957%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.5457%" y="533" width="0.0794%" height="15" fill="rgb(232,45,27)" fg:x="95" fg:w="1"/><text x="7.7957%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="7.5457%" y="517" width="0.0794%" height="15" fill="rgb(249,103,42)" fg:x="95" fg:w="1"/><text x="7.7957%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.5457%" y="501" width="0.0794%" height="15" fill="rgb(246,81,33)" fg:x="95" fg:w="1"/><text x="7.7957%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.5457%" y="485" width="0.0794%" height="15" fill="rgb(252,33,42)" fg:x="95" fg:w="1"/><text x="7.7957%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.5457%" y="469" width="0.0794%" height="15" fill="rgb(209,212,41)" fg:x="95" fg:w="1"/><text x="7.7957%" y="479.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="7.5457%" y="453" width="0.0794%" height="15" fill="rgb(207,154,6)" fg:x="95" fg:w="1"/><text x="7.7957%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.5457%" y="437" width="0.0794%" height="15" fill="rgb(223,64,47)" fg:x="95" fg:w="1"/><text x="7.7957%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.5457%" y="421" width="0.0794%" height="15" fill="rgb(211,161,38)" fg:x="95" fg:w="1"/><text x="7.7957%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.5457%" y="405" width="0.0794%" height="15" fill="rgb(219,138,40)" fg:x="95" fg:w="1"/><text x="7.7957%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.5457%" y="389" width="0.0794%" height="15" fill="rgb(241,228,46)" fg:x="95" fg:w="1"/><text x="7.7957%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.5457%" y="373" width="0.0794%" height="15" fill="rgb(223,209,38)" fg:x="95" fg:w="1"/><text x="7.7957%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="7.5457%" y="357" width="0.0794%" height="15" fill="rgb(236,164,45)" fg:x="95" fg:w="1"/><text x="7.7957%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="7.5457%" y="341" width="0.0794%" height="15" fill="rgb(231,15,5)" fg:x="95" fg:w="1"/><text x="7.7957%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="7.5457%" y="325" width="0.0794%" height="15" fill="rgb(252,35,15)" fg:x="95" fg:w="1"/><text x="7.7957%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="7.5457%" y="309" width="0.0794%" height="15" fill="rgb(248,181,18)" fg:x="95" fg:w="1"/><text x="7.7957%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="7.5457%" y="293" width="0.0794%" height="15" fill="rgb(233,39,42)" fg:x="95" fg:w="1"/><text x="7.7957%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="7.5457%" y="277" width="0.0794%" height="15" fill="rgb(238,110,33)" fg:x="95" fg:w="1"/><text x="7.7957%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.5457%" y="261" width="0.0794%" height="15" fill="rgb(233,195,10)" fg:x="95" fg:w="1"/><text x="7.7957%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="7.5457%" y="245" width="0.0794%" height="15" fill="rgb(254,105,3)" fg:x="95" fg:w="1"/><text x="7.7957%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.5457%" y="229" width="0.0794%" height="15" fill="rgb(221,225,9)" fg:x="95" fg:w="1"/><text x="7.7957%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="7.5457%" y="213" width="0.0794%" height="15" fill="rgb(224,227,45)" fg:x="95" fg:w="1"/><text x="7.7957%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="7.5457%" y="197" width="0.0794%" height="15" fill="rgb(229,198,43)" fg:x="95" fg:w="1"/><text x="7.7957%" y="207.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="7.5457%" y="181" width="0.0794%" height="15" fill="rgb(206,209,35)" fg:x="95" fg:w="1"/><text x="7.7957%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.5457%" y="165" width="0.0794%" height="15" fill="rgb(245,195,53)" fg:x="95" fg:w="1"/><text x="7.7957%" y="175.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="7.6251%" y="677" width="0.0794%" height="15" fill="rgb(240,92,26)" fg:x="96" fg:w="1"/><text x="7.8751%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="7.6251%" y="661" width="0.0794%" height="15" fill="rgb(207,40,23)" fg:x="96" fg:w="1"/><text x="7.8751%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.6251%" y="645" width="0.0794%" height="15" fill="rgb(223,111,35)" fg:x="96" fg:w="1"/><text x="7.8751%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="7.6251%" y="629" width="0.0794%" height="15" fill="rgb(229,147,28)" fg:x="96" fg:w="1"/><text x="7.8751%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.6251%" y="613" width="0.0794%" height="15" fill="rgb(211,29,28)" fg:x="96" fg:w="1"/><text x="7.8751%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.6251%" y="597" width="0.0794%" height="15" fill="rgb(228,72,33)" fg:x="96" fg:w="1"/><text x="7.8751%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.6251%" y="581" width="0.0794%" height="15" fill="rgb(205,214,31)" fg:x="96" fg:w="1"/><text x="7.8751%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.6251%" y="565" width="0.0794%" height="15" fill="rgb(224,111,15)" fg:x="96" fg:w="1"/><text x="7.8751%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.7045%" y="661" width="0.0794%" height="15" fill="rgb(253,21,26)" fg:x="97" fg:w="1"/><text x="7.9545%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.7045%" y="645" width="0.0794%" height="15" fill="rgb(245,139,43)" fg:x="97" fg:w="1"/><text x="7.9545%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.7045%" y="629" width="0.0794%" height="15" fill="rgb(252,170,7)" fg:x="97" fg:w="1"/><text x="7.9545%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.7045%" y="613" width="0.0794%" height="15" fill="rgb(231,118,14)" fg:x="97" fg:w="1"/><text x="7.9545%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7045%" y="597" width="0.0794%" height="15" fill="rgb(238,83,0)" fg:x="97" fg:w="1"/><text x="7.9545%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.7045%" y="581" width="0.0794%" height="15" fill="rgb(221,39,39)" fg:x="97" fg:w="1"/><text x="7.9545%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7045%" y="565" width="0.0794%" height="15" fill="rgb(222,119,46)" fg:x="97" fg:w="1"/><text x="7.9545%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.7045%" y="549" width="0.0794%" height="15" fill="rgb(222,165,49)" fg:x="97" fg:w="1"/><text x="7.9545%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.7045%" y="533" width="0.0794%" height="15" fill="rgb(219,113,52)" fg:x="97" fg:w="1"/><text x="7.9545%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7045%" y="517" width="0.0794%" height="15" fill="rgb(214,7,15)" fg:x="97" fg:w="1"/><text x="7.9545%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.7045%" y="501" width="0.0794%" height="15" fill="rgb(235,32,4)" fg:x="97" fg:w="1"/><text x="7.9545%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.7045%" y="485" width="0.0794%" height="15" fill="rgb(238,90,54)" fg:x="97" fg:w="1"/><text x="7.9545%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="7.4662%" y="693" width="0.3971%" height="15" fill="rgb(213,208,19)" fg:x="94" fg:w="5"/><text x="7.7162%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="7.7045%" y="677" width="0.1589%" height="15" fill="rgb(233,156,4)" fg:x="97" fg:w="2"/><text x="7.9545%" y="687.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="7.7840%" y="661" width="0.0794%" height="15" fill="rgb(207,194,5)" fg:x="98" fg:w="1"/><text x="8.0340%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.7840%" y="645" width="0.0794%" height="15" fill="rgb(206,111,30)" fg:x="98" fg:w="1"/><text x="8.0340%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="7.8634%" y="677" width="0.0794%" height="15" fill="rgb(243,70,54)" fg:x="99" fg:w="1"/><text x="8.1134%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="7.8634%" y="661" width="0.0794%" height="15" fill="rgb(242,28,8)" fg:x="99" fg:w="1"/><text x="8.1134%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.8634%" y="645" width="0.0794%" height="15" fill="rgb(219,106,18)" fg:x="99" fg:w="1"/><text x="8.1134%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.8634%" y="629" width="0.0794%" height="15" fill="rgb(244,222,10)" fg:x="99" fg:w="1"/><text x="8.1134%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.8634%" y="613" width="0.0794%" height="15" fill="rgb(236,179,52)" fg:x="99" fg:w="1"/><text x="8.1134%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.8634%" y="597" width="0.0794%" height="15" fill="rgb(213,23,39)" fg:x="99" fg:w="1"/><text x="8.1134%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.8634%" y="581" width="0.0794%" height="15" fill="rgb(238,48,10)" fg:x="99" fg:w="1"/><text x="8.1134%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.8634%" y="565" width="0.0794%" height="15" fill="rgb(251,196,23)" fg:x="99" fg:w="1"/><text x="8.1134%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.8634%" y="549" width="0.0794%" height="15" fill="rgb(250,152,24)" fg:x="99" fg:w="1"/><text x="8.1134%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.8634%" y="533" width="0.0794%" height="15" fill="rgb(209,150,17)" fg:x="99" fg:w="1"/><text x="8.1134%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.8634%" y="517" width="0.0794%" height="15" fill="rgb(234,202,34)" fg:x="99" fg:w="1"/><text x="8.1134%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (50 samples, 3.97%)</title><rect x="4.0508%" y="725" width="3.9714%" height="15" fill="rgb(253,148,53)" fg:x="51" fg:w="50"/><text x="4.3008%" y="735.50">plug..</text></g><g><title>plugins_core::build::Build::occupying (7 samples, 0.56%)</title><rect x="7.4662%" y="709" width="0.5560%" height="15" fill="rgb(218,129,16)" fg:x="94" fg:w="7"/><text x="7.7162%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="7.8634%" y="693" width="0.1589%" height="15" fill="rgb(216,85,19)" fg:x="99" fg:w="2"/><text x="8.1134%" y="703.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="7.9428%" y="677" width="0.0794%" height="15" fill="rgb(235,228,7)" fg:x="100" fg:w="1"/><text x="8.1928%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="7.9428%" y="661" width="0.0794%" height="15" fill="rgb(245,175,0)" fg:x="100" fg:w="1"/><text x="8.1928%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="7.9428%" y="645" width="0.0794%" height="15" fill="rgb(208,168,36)" fg:x="100" fg:w="1"/><text x="8.1928%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="7.9428%" y="629" width="0.0794%" height="15" fill="rgb(246,171,24)" fg:x="100" fg:w="1"/><text x="8.1928%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.9428%" y="613" width="0.0794%" height="15" fill="rgb(215,142,24)" fg:x="100" fg:w="1"/><text x="8.1928%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="8.0222%" y="677" width="0.0794%" height="15" fill="rgb(250,187,7)" fg:x="101" fg:w="1"/><text x="8.2722%" y="687.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="8.0222%" y="725" width="0.1589%" height="15" fill="rgb(228,66,33)" fg:x="101" fg:w="2"/><text x="8.2722%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="8.0222%" y="709" width="0.1589%" height="15" fill="rgb(234,215,21)" fg:x="101" fg:w="2"/><text x="8.2722%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="8.0222%" y="693" width="0.1589%" height="15" fill="rgb(222,191,20)" fg:x="101" fg:w="2"/><text x="8.2722%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="8.1017%" y="677" width="0.0794%" height="15" fill="rgb(245,79,54)" fg:x="102" fg:w="1"/><text x="8.3517%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="8.1017%" y="661" width="0.0794%" height="15" fill="rgb(240,10,37)" fg:x="102" fg:w="1"/><text x="8.3517%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="8.1017%" y="645" width="0.0794%" height="15" fill="rgb(214,192,32)" fg:x="102" fg:w="1"/><text x="8.3517%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.1017%" y="629" width="0.0794%" height="15" fill="rgb(209,36,54)" fg:x="102" fg:w="1"/><text x="8.3517%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.1017%" y="613" width="0.0794%" height="15" fill="rgb(220,10,11)" fg:x="102" fg:w="1"/><text x="8.3517%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1017%" y="597" width="0.0794%" height="15" fill="rgb(221,106,17)" fg:x="102" fg:w="1"/><text x="8.3517%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1017%" y="581" width="0.0794%" height="15" fill="rgb(251,142,44)" fg:x="102" fg:w="1"/><text x="8.3517%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1017%" y="565" width="0.0794%" height="15" fill="rgb(238,13,15)" fg:x="102" fg:w="1"/><text x="8.3517%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1017%" y="549" width="0.0794%" height="15" fill="rgb(208,107,27)" fg:x="102" fg:w="1"/><text x="8.3517%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.1017%" y="533" width="0.0794%" height="15" fill="rgb(205,136,37)" fg:x="102" fg:w="1"/><text x="8.3517%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="8.1811%" y="693" width="0.0794%" height="15" fill="rgb(250,205,27)" fg:x="103" fg:w="1"/><text x="8.4311%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="8.1811%" y="677" width="0.0794%" height="15" fill="rgb(210,80,43)" fg:x="103" fg:w="1"/><text x="8.4311%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="8.1811%" y="661" width="0.0794%" height="15" fill="rgb(247,160,36)" fg:x="103" fg:w="1"/><text x="8.4311%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="8.1811%" y="645" width="0.0794%" height="15" fill="rgb(234,13,49)" fg:x="103" fg:w="1"/><text x="8.4311%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.1811%" y="629" width="0.0794%" height="15" fill="rgb(234,122,0)" fg:x="103" fg:w="1"/><text x="8.4311%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="8.1811%" y="613" width="0.0794%" height="15" fill="rgb(207,146,38)" fg:x="103" fg:w="1"/><text x="8.4311%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="8.1811%" y="597" width="0.0794%" height="15" fill="rgb(207,177,25)" fg:x="103" fg:w="1"/><text x="8.4311%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="8.1811%" y="581" width="0.0794%" height="15" fill="rgb(211,178,42)" fg:x="103" fg:w="1"/><text x="8.4311%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.1811%" y="565" width="0.0794%" height="15" fill="rgb(230,69,54)" fg:x="103" fg:w="1"/><text x="8.4311%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="8.1811%" y="549" width="0.0794%" height="15" fill="rgb(214,135,41)" fg:x="103" fg:w="1"/><text x="8.4311%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="8.1811%" y="533" width="0.0794%" height="15" fill="rgb(237,67,25)" fg:x="103" fg:w="1"/><text x="8.4311%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="8.1811%" y="517" width="0.0794%" height="15" fill="rgb(222,189,50)" fg:x="103" fg:w="1"/><text x="8.4311%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.1811%" y="501" width="0.0794%" height="15" fill="rgb(245,148,34)" fg:x="103" fg:w="1"/><text x="8.4311%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1811%" y="485" width="0.0794%" height="15" fill="rgb(222,29,6)" fg:x="103" fg:w="1"/><text x="8.4311%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1811%" y="469" width="0.0794%" height="15" fill="rgb(221,189,43)" fg:x="103" fg:w="1"/><text x="8.4311%" y="479.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="8.1811%" y="453" width="0.0794%" height="15" fill="rgb(207,36,27)" fg:x="103" fg:w="1"/><text x="8.4311%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="8.1811%" y="437" width="0.0794%" height="15" fill="rgb(217,90,24)" fg:x="103" fg:w="1"/><text x="8.4311%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="8.1811%" y="421" width="0.0794%" height="15" fill="rgb(224,66,35)" fg:x="103" fg:w="1"/><text x="8.4311%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="8.1811%" y="405" width="0.0794%" height="15" fill="rgb(221,13,50)" fg:x="103" fg:w="1"/><text x="8.4311%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="8.1811%" y="389" width="0.0794%" height="15" fill="rgb(236,68,49)" fg:x="103" fg:w="1"/><text x="8.4311%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.2605%" y="613" width="0.0794%" height="15" fill="rgb(229,146,28)" fg:x="104" fg:w="1"/><text x="8.5105%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.2605%" y="597" width="0.0794%" height="15" fill="rgb(225,31,38)" fg:x="104" fg:w="1"/><text x="8.5105%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.2605%" y="581" width="0.0794%" height="15" fill="rgb(250,208,3)" fg:x="104" fg:w="1"/><text x="8.5105%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.2605%" y="565" width="0.0794%" height="15" fill="rgb(246,54,23)" fg:x="104" fg:w="1"/><text x="8.5105%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.2605%" y="549" width="0.0794%" height="15" fill="rgb(243,76,11)" fg:x="104" fg:w="1"/><text x="8.5105%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.2605%" y="533" width="0.0794%" height="15" fill="rgb(245,21,50)" fg:x="104" fg:w="1"/><text x="8.5105%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.2605%" y="517" width="0.0794%" height="15" fill="rgb(228,9,43)" fg:x="104" fg:w="1"/><text x="8.5105%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.2605%" y="501" width="0.0794%" height="15" fill="rgb(208,100,47)" fg:x="104" fg:w="1"/><text x="8.5105%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.2605%" y="485" width="0.0794%" height="15" fill="rgb(232,26,8)" fg:x="104" fg:w="1"/><text x="8.5105%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.2605%" y="469" width="0.0794%" height="15" fill="rgb(216,166,38)" fg:x="104" fg:w="1"/><text x="8.5105%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.2605%" y="453" width="0.0794%" height="15" fill="rgb(251,202,51)" fg:x="104" fg:w="1"/><text x="8.5105%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.2605%" y="437" width="0.0794%" height="15" fill="rgb(254,216,34)" fg:x="104" fg:w="1"/><text x="8.5105%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.2605%" y="421" width="0.0794%" height="15" fill="rgb(251,32,27)" fg:x="104" fg:w="1"/><text x="8.5105%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="8.1811%" y="709" width="0.2383%" height="15" fill="rgb(208,127,28)" fg:x="103" fg:w="3"/><text x="8.4311%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="8.2605%" y="693" width="0.1589%" height="15" fill="rgb(224,137,22)" fg:x="104" fg:w="2"/><text x="8.5105%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="8.2605%" y="677" width="0.1589%" height="15" fill="rgb(254,70,32)" fg:x="104" fg:w="2"/><text x="8.5105%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="8.2605%" y="661" width="0.1589%" height="15" fill="rgb(229,75,37)" fg:x="104" fg:w="2"/><text x="8.5105%" y="671.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="8.2605%" y="645" width="0.1589%" height="15" fill="rgb(252,64,23)" fg:x="104" fg:w="2"/><text x="8.5105%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="8.2605%" y="629" width="0.1589%" height="15" fill="rgb(232,162,48)" fg:x="104" fg:w="2"/><text x="8.5105%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.3400%" y="613" width="0.0794%" height="15" fill="rgb(246,160,12)" fg:x="105" fg:w="1"/><text x="8.5900%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.3400%" y="597" width="0.0794%" height="15" fill="rgb(247,166,0)" fg:x="105" fg:w="1"/><text x="8.5900%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.3400%" y="581" width="0.0794%" height="15" fill="rgb(249,219,21)" fg:x="105" fg:w="1"/><text x="8.5900%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.3400%" y="565" width="0.0794%" height="15" fill="rgb(205,209,3)" fg:x="105" fg:w="1"/><text x="8.5900%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.3400%" y="549" width="0.0794%" height="15" fill="rgb(243,44,1)" fg:x="105" fg:w="1"/><text x="8.5900%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.3400%" y="533" width="0.0794%" height="15" fill="rgb(206,159,16)" fg:x="105" fg:w="1"/><text x="8.5900%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.3400%" y="517" width="0.0794%" height="15" fill="rgb(244,77,30)" fg:x="105" fg:w="1"/><text x="8.5900%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.3400%" y="501" width="0.0794%" height="15" fill="rgb(218,69,12)" fg:x="105" fg:w="1"/><text x="8.5900%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.3400%" y="485" width="0.0794%" height="15" fill="rgb(212,87,7)" fg:x="105" fg:w="1"/><text x="8.5900%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.3400%" y="469" width="0.0794%" height="15" fill="rgb(245,114,25)" fg:x="105" fg:w="1"/><text x="8.5900%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.4194%" y="661" width="0.0794%" height="15" fill="rgb(210,61,42)" fg:x="106" fg:w="1"/><text x="8.6694%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.4194%" y="645" width="0.0794%" height="15" fill="rgb(211,52,33)" fg:x="106" fg:w="1"/><text x="8.6694%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.4194%" y="629" width="0.0794%" height="15" fill="rgb(234,58,33)" fg:x="106" fg:w="1"/><text x="8.6694%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.4194%" y="613" width="0.0794%" height="15" fill="rgb(220,115,36)" fg:x="106" fg:w="1"/><text x="8.6694%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.4194%" y="597" width="0.0794%" height="15" fill="rgb(243,153,54)" fg:x="106" fg:w="1"/><text x="8.6694%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.4194%" y="581" width="0.0794%" height="15" fill="rgb(251,47,18)" fg:x="106" fg:w="1"/><text x="8.6694%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.4194%" y="565" width="0.0794%" height="15" fill="rgb(242,102,42)" fg:x="106" fg:w="1"/><text x="8.6694%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.4194%" y="549" width="0.0794%" height="15" fill="rgb(234,31,38)" fg:x="106" fg:w="1"/><text x="8.6694%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.4194%" y="533" width="0.0794%" height="15" fill="rgb(221,117,51)" fg:x="106" fg:w="1"/><text x="8.6694%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.4194%" y="517" width="0.0794%" height="15" fill="rgb(212,20,18)" fg:x="106" fg:w="1"/><text x="8.6694%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.4194%" y="501" width="0.0794%" height="15" fill="rgb(245,133,36)" fg:x="106" fg:w="1"/><text x="8.6694%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.4194%" y="485" width="0.0794%" height="15" fill="rgb(212,6,19)" fg:x="106" fg:w="1"/><text x="8.6694%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.4988%" y="661" width="0.0794%" height="15" fill="rgb(218,1,36)" fg:x="107" fg:w="1"/><text x="8.7488%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.4988%" y="645" width="0.0794%" height="15" fill="rgb(246,84,54)" fg:x="107" fg:w="1"/><text x="8.7488%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.4988%" y="629" width="0.0794%" height="15" fill="rgb(242,110,6)" fg:x="107" fg:w="1"/><text x="8.7488%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.4988%" y="613" width="0.0794%" height="15" fill="rgb(214,47,5)" fg:x="107" fg:w="1"/><text x="8.7488%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4988%" y="597" width="0.0794%" height="15" fill="rgb(218,159,25)" fg:x="107" fg:w="1"/><text x="8.7488%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.4988%" y="581" width="0.0794%" height="15" fill="rgb(215,211,28)" fg:x="107" fg:w="1"/><text x="8.7488%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4988%" y="565" width="0.0794%" height="15" fill="rgb(238,59,32)" fg:x="107" fg:w="1"/><text x="8.7488%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.4988%" y="549" width="0.0794%" height="15" fill="rgb(226,82,3)" fg:x="107" fg:w="1"/><text x="8.7488%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4988%" y="533" width="0.0794%" height="15" fill="rgb(240,164,32)" fg:x="107" fg:w="1"/><text x="8.7488%" y="543.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (90 samples, 7.15%)</title><rect x="1.5091%" y="741" width="7.1485%" height="15" fill="rgb(232,46,7)" fg:x="19" fg:w="90"/><text x="1.7591%" y="751.50">&lt;tests::Ho..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (6 samples, 0.48%)</title><rect x="8.1811%" y="725" width="0.4766%" height="15" fill="rgb(229,129,53)" fg:x="103" fg:w="6"/><text x="8.4311%" y="735.50"></text></g><g><title>plugins_core::build::Build::new_world (3 samples, 0.24%)</title><rect x="8.4194%" y="709" width="0.2383%" height="15" fill="rgb(234,188,29)" fg:x="106" fg:w="3"/><text x="8.6694%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::new (3 samples, 0.24%)</title><rect x="8.4194%" y="693" width="0.2383%" height="15" fill="rgb(246,141,4)" fg:x="106" fg:w="3"/><text x="8.6694%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="8.4194%" y="677" width="0.2383%" height="15" fill="rgb(229,23,39)" fg:x="106" fg:w="3"/><text x="8.6694%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.5782%" y="661" width="0.0794%" height="15" fill="rgb(206,12,3)" fg:x="108" fg:w="1"/><text x="8.8282%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.5782%" y="645" width="0.0794%" height="15" fill="rgb(252,226,20)" fg:x="108" fg:w="1"/><text x="8.8282%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.5782%" y="629" width="0.0794%" height="15" fill="rgb(216,123,35)" fg:x="108" fg:w="1"/><text x="8.8282%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.5782%" y="613" width="0.0794%" height="15" fill="rgb(212,68,40)" fg:x="108" fg:w="1"/><text x="8.8282%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.5782%" y="597" width="0.0794%" height="15" fill="rgb(254,125,32)" fg:x="108" fg:w="1"/><text x="8.8282%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.5782%" y="581" width="0.0794%" height="15" fill="rgb(253,97,22)" fg:x="108" fg:w="1"/><text x="8.8282%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.5782%" y="565" width="0.0794%" height="15" fill="rgb(241,101,14)" fg:x="108" fg:w="1"/><text x="8.8282%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.5782%" y="549" width="0.0794%" height="15" fill="rgb(238,103,29)" fg:x="108" fg:w="1"/><text x="8.8282%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.5782%" y="533" width="0.0794%" height="15" fill="rgb(233,195,47)" fg:x="108" fg:w="1"/><text x="8.8282%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="8.6577%" y="725" width="0.0794%" height="15" fill="rgb(246,218,30)" fg:x="109" fg:w="1"/><text x="8.9077%" y="735.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="8.7371%" y="613" width="0.0794%" height="15" fill="rgb(219,145,47)" fg:x="110" fg:w="1"/><text x="8.9871%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="8.7371%" y="725" width="0.1589%" height="15" fill="rgb(243,12,26)" fg:x="110" fg:w="2"/><text x="8.9871%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="8.7371%" y="709" width="0.1589%" height="15" fill="rgb(214,87,16)" fg:x="110" fg:w="2"/><text x="8.9871%" y="719.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="8.7371%" y="693" width="0.1589%" height="15" fill="rgb(208,99,42)" fg:x="110" fg:w="2"/><text x="8.9871%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="8.7371%" y="677" width="0.1589%" height="15" fill="rgb(253,99,2)" fg:x="110" fg:w="2"/><text x="8.9871%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="8.7371%" y="661" width="0.1589%" height="15" fill="rgb(220,168,23)" fg:x="110" fg:w="2"/><text x="8.9871%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="8.7371%" y="645" width="0.1589%" height="15" fill="rgb(242,38,24)" fg:x="110" fg:w="2"/><text x="8.9871%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="8.7371%" y="629" width="0.1589%" height="15" fill="rgb(225,182,9)" fg:x="110" fg:w="2"/><text x="8.9871%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.8165%" y="613" width="0.0794%" height="15" fill="rgb(243,178,37)" fg:x="111" fg:w="1"/><text x="9.0665%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="8.8165%" y="597" width="0.0794%" height="15" fill="rgb(232,139,19)" fg:x="111" fg:w="1"/><text x="9.0665%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="8.8959%" y="693" width="0.0794%" height="15" fill="rgb(225,201,24)" fg:x="112" fg:w="1"/><text x="9.1459%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="8.8959%" y="677" width="0.0794%" height="15" fill="rgb(221,47,46)" fg:x="112" fg:w="1"/><text x="9.1459%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="8.8959%" y="661" width="0.0794%" height="15" fill="rgb(249,23,13)" fg:x="112" fg:w="1"/><text x="9.1459%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.8959%" y="645" width="0.0794%" height="15" fill="rgb(219,9,5)" fg:x="112" fg:w="1"/><text x="9.1459%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.8959%" y="629" width="0.0794%" height="15" fill="rgb(254,171,16)" fg:x="112" fg:w="1"/><text x="9.1459%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.8959%" y="613" width="0.0794%" height="15" fill="rgb(230,171,20)" fg:x="112" fg:w="1"/><text x="9.1459%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.8959%" y="597" width="0.0794%" height="15" fill="rgb(210,71,41)" fg:x="112" fg:w="1"/><text x="9.1459%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.8959%" y="581" width="0.0794%" height="15" fill="rgb(206,173,20)" fg:x="112" fg:w="1"/><text x="9.1459%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.8959%" y="565" width="0.0794%" height="15" fill="rgb(233,88,34)" fg:x="112" fg:w="1"/><text x="9.1459%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.8959%" y="549" width="0.0794%" height="15" fill="rgb(223,209,46)" fg:x="112" fg:w="1"/><text x="9.1459%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.8959%" y="533" width="0.0794%" height="15" fill="rgb(250,43,18)" fg:x="112" fg:w="1"/><text x="9.1459%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.8959%" y="517" width="0.0794%" height="15" fill="rgb(208,13,10)" fg:x="112" fg:w="1"/><text x="9.1459%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.8959%" y="501" width="0.0794%" height="15" fill="rgb(212,200,36)" fg:x="112" fg:w="1"/><text x="9.1459%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.8959%" y="485" width="0.0794%" height="15" fill="rgb(225,90,30)" fg:x="112" fg:w="1"/><text x="9.1459%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8959%" y="469" width="0.0794%" height="15" fill="rgb(236,182,39)" fg:x="112" fg:w="1"/><text x="9.1459%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="8.9754%" y="677" width="0.0794%" height="15" fill="rgb(212,144,35)" fg:x="113" fg:w="1"/><text x="9.2254%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.9754%" y="661" width="0.0794%" height="15" fill="rgb(228,63,44)" fg:x="113" fg:w="1"/><text x="9.2254%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.9754%" y="645" width="0.0794%" height="15" fill="rgb(228,109,6)" fg:x="113" fg:w="1"/><text x="9.2254%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.0548%" y="629" width="0.0794%" height="15" fill="rgb(238,117,24)" fg:x="114" fg:w="1"/><text x="9.3048%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="9.1342%" y="613" width="0.0794%" height="15" fill="rgb(242,26,26)" fg:x="115" fg:w="1"/><text x="9.3842%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1342%" y="597" width="0.0794%" height="15" fill="rgb(221,92,48)" fg:x="115" fg:w="1"/><text x="9.3842%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1342%" y="581" width="0.0794%" height="15" fill="rgb(209,209,32)" fg:x="115" fg:w="1"/><text x="9.3842%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.1342%" y="565" width="0.0794%" height="15" fill="rgb(221,70,22)" fg:x="115" fg:w="1"/><text x="9.3842%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.1342%" y="549" width="0.0794%" height="15" fill="rgb(248,145,5)" fg:x="115" fg:w="1"/><text x="9.3842%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.1342%" y="533" width="0.0794%" height="15" fill="rgb(226,116,26)" fg:x="115" fg:w="1"/><text x="9.3842%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="9.1342%" y="517" width="0.0794%" height="15" fill="rgb(244,5,17)" fg:x="115" fg:w="1"/><text x="9.3842%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.2137%" y="613" width="0.0794%" height="15" fill="rgb(252,159,33)" fg:x="116" fg:w="1"/><text x="9.4637%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.2137%" y="597" width="0.0794%" height="15" fill="rgb(206,71,0)" fg:x="116" fg:w="1"/><text x="9.4637%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.2931%" y="597" width="0.0794%" height="15" fill="rgb(233,118,54)" fg:x="117" fg:w="1"/><text x="9.5431%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="9.2931%" y="613" width="0.1589%" height="15" fill="rgb(234,83,48)" fg:x="117" fg:w="2"/><text x="9.5431%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.3725%" y="597" width="0.0794%" height="15" fill="rgb(228,3,54)" fg:x="118" fg:w="1"/><text x="9.6225%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.3725%" y="581" width="0.0794%" height="15" fill="rgb(226,155,13)" fg:x="118" fg:w="1"/><text x="9.6225%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="9.1342%" y="629" width="0.3971%" height="15" fill="rgb(241,28,37)" fg:x="115" fg:w="5"/><text x="9.3842%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.4519%" y="613" width="0.0794%" height="15" fill="rgb(233,93,10)" fg:x="119" fg:w="1"/><text x="9.7019%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.4519%" y="597" width="0.0794%" height="15" fill="rgb(225,113,19)" fg:x="119" fg:w="1"/><text x="9.7019%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="9.4519%" y="581" width="0.0794%" height="15" fill="rgb(241,2,18)" fg:x="119" fg:w="1"/><text x="9.7019%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="9.0548%" y="645" width="0.6354%" height="15" fill="rgb(228,207,21)" fg:x="114" fg:w="8"/><text x="9.3048%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.5314%" y="629" width="0.1589%" height="15" fill="rgb(213,211,35)" fg:x="120" fg:w="2"/><text x="9.7814%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.6108%" y="613" width="0.0794%" height="15" fill="rgb(209,83,10)" fg:x="121" fg:w="1"/><text x="9.8608%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.6108%" y="597" width="0.0794%" height="15" fill="rgb(209,164,1)" fg:x="121" fg:w="1"/><text x="9.8608%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.71%)</title><rect x="9.0548%" y="661" width="0.7149%" height="15" fill="rgb(213,184,43)" fg:x="114" fg:w="9"/><text x="9.3048%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.6902%" y="645" width="0.0794%" height="15" fill="rgb(231,61,34)" fg:x="122" fg:w="1"/><text x="9.9402%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.6902%" y="629" width="0.0794%" height="15" fill="rgb(235,75,3)" fg:x="122" fg:w="1"/><text x="9.9402%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.6902%" y="613" width="0.0794%" height="15" fill="rgb(220,106,47)" fg:x="122" fg:w="1"/><text x="9.9402%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.6902%" y="597" width="0.0794%" height="15" fill="rgb(210,196,33)" fg:x="122" fg:w="1"/><text x="9.9402%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.6902%" y="581" width="0.0794%" height="15" fill="rgb(229,154,42)" fg:x="122" fg:w="1"/><text x="9.9402%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6902%" y="565" width="0.0794%" height="15" fill="rgb(228,114,26)" fg:x="122" fg:w="1"/><text x="9.9402%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.7697%" y="629" width="0.0794%" height="15" fill="rgb(208,144,1)" fg:x="123" fg:w="1"/><text x="10.0197%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="9.7697%" y="661" width="0.3177%" height="15" fill="rgb(239,112,37)" fg:x="123" fg:w="4"/><text x="10.0197%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="9.7697%" y="645" width="0.3177%" height="15" fill="rgb(210,96,50)" fg:x="123" fg:w="4"/><text x="10.0197%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.8491%" y="629" width="0.2383%" height="15" fill="rgb(222,178,2)" fg:x="124" fg:w="3"/><text x="10.0991%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.9285%" y="613" width="0.1589%" height="15" fill="rgb(226,74,18)" fg:x="125" fg:w="2"/><text x="10.1785%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.0079%" y="597" width="0.0794%" height="15" fill="rgb(225,67,54)" fg:x="126" fg:w="1"/><text x="10.2579%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.0079%" y="581" width="0.0794%" height="15" fill="rgb(251,92,32)" fg:x="126" fg:w="1"/><text x="10.2579%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.0079%" y="565" width="0.0794%" height="15" fill="rgb(228,149,22)" fg:x="126" fg:w="1"/><text x="10.2579%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.0079%" y="549" width="0.0794%" height="15" fill="rgb(243,54,13)" fg:x="126" fg:w="1"/><text x="10.2579%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.0874%" y="597" width="0.0794%" height="15" fill="rgb(243,180,28)" fg:x="127" fg:w="1"/><text x="10.3374%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.2462%" y="565" width="0.0794%" height="15" fill="rgb(208,167,24)" fg:x="129" fg:w="1"/><text x="10.4962%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="10.0874%" y="629" width="0.3971%" height="15" fill="rgb(245,73,45)" fg:x="127" fg:w="5"/><text x="10.3374%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="10.0874%" y="613" width="0.3971%" height="15" fill="rgb(237,203,48)" fg:x="127" fg:w="5"/><text x="10.3374%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="10.1668%" y="597" width="0.3177%" height="15" fill="rgb(211,197,16)" fg:x="128" fg:w="4"/><text x="10.4168%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="10.2462%" y="581" width="0.2383%" height="15" fill="rgb(243,99,51)" fg:x="129" fg:w="3"/><text x="10.4962%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.3257%" y="565" width="0.1589%" height="15" fill="rgb(215,123,29)" fg:x="130" fg:w="2"/><text x="10.5757%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.3257%" y="549" width="0.1589%" height="15" fill="rgb(239,186,37)" fg:x="130" fg:w="2"/><text x="10.5757%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.3257%" y="533" width="0.1589%" height="15" fill="rgb(252,136,39)" fg:x="130" fg:w="2"/><text x="10.5757%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="10.3257%" y="517" width="0.1589%" height="15" fill="rgb(223,213,32)" fg:x="130" fg:w="2"/><text x="10.5757%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.48%)</title><rect x="10.0874%" y="645" width="0.4766%" height="15" fill="rgb(233,115,5)" fg:x="127" fg:w="6"/><text x="10.3374%" y="655.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="10.4845%" y="629" width="0.0794%" height="15" fill="rgb(207,226,44)" fg:x="132" fg:w="1"/><text x="10.7345%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="10.5639%" y="613" width="0.2383%" height="15" fill="rgb(208,126,0)" fg:x="133" fg:w="3"/><text x="10.8139%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="10.5639%" y="597" width="0.2383%" height="15" fill="rgb(244,66,21)" fg:x="133" fg:w="3"/><text x="10.8139%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="10.6434%" y="581" width="0.1589%" height="15" fill="rgb(222,97,12)" fg:x="134" fg:w="2"/><text x="10.8934%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="10.8022%" y="613" width="0.0794%" height="15" fill="rgb(219,213,19)" fg:x="136" fg:w="1"/><text x="11.0522%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="10.8817%" y="613" width="0.1589%" height="15" fill="rgb(252,169,30)" fg:x="137" fg:w="2"/><text x="11.1317%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.9611%" y="597" width="0.0794%" height="15" fill="rgb(206,32,51)" fg:x="138" fg:w="1"/><text x="11.2111%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9611%" y="581" width="0.0794%" height="15" fill="rgb(250,172,42)" fg:x="138" fg:w="1"/><text x="11.2111%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9611%" y="565" width="0.0794%" height="15" fill="rgb(209,34,43)" fg:x="138" fg:w="1"/><text x="11.2111%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9611%" y="549" width="0.0794%" height="15" fill="rgb(223,11,35)" fg:x="138" fg:w="1"/><text x="11.2111%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.0405%" y="581" width="0.0794%" height="15" fill="rgb(251,219,26)" fg:x="139" fg:w="1"/><text x="11.2905%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1199%" y="565" width="0.0794%" height="15" fill="rgb(231,119,3)" fg:x="140" fg:w="1"/><text x="11.3699%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1199%" y="549" width="0.0794%" height="15" fill="rgb(216,97,11)" fg:x="140" fg:w="1"/><text x="11.3699%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.1199%" y="533" width="0.0794%" height="15" fill="rgb(223,59,9)" fg:x="140" fg:w="1"/><text x="11.3699%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.1994%" y="565" width="0.0794%" height="15" fill="rgb(233,93,31)" fg:x="141" fg:w="1"/><text x="11.4494%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.1994%" y="549" width="0.0794%" height="15" fill="rgb(239,81,33)" fg:x="141" fg:w="1"/><text x="11.4494%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.2788%" y="549" width="0.0794%" height="15" fill="rgb(213,120,34)" fg:x="142" fg:w="1"/><text x="11.5288%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (2 samples, 0.16%)</title><rect x="11.3582%" y="485" width="0.1589%" height="15" fill="rgb(243,49,53)" fg:x="143" fg:w="2"/><text x="11.6082%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="11.5965%" y="453" width="0.0794%" height="15" fill="rgb(247,216,33)" fg:x="146" fg:w="1"/><text x="11.8465%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.79%)</title><rect x="11.1199%" y="581" width="0.7943%" height="15" fill="rgb(226,26,14)" fg:x="140" fg:w="10"/><text x="11.3699%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.64%)</title><rect x="11.2788%" y="565" width="0.6354%" height="15" fill="rgb(215,49,53)" fg:x="142" fg:w="8"/><text x="11.5288%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="11.3582%" y="549" width="0.5560%" height="15" fill="rgb(245,162,40)" fg:x="143" fg:w="7"/><text x="11.6082%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="11.3582%" y="533" width="0.5560%" height="15" fill="rgb(229,68,17)" fg:x="143" fg:w="7"/><text x="11.6082%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="11.3582%" y="517" width="0.5560%" height="15" fill="rgb(213,182,10)" fg:x="143" fg:w="7"/><text x="11.6082%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="11.3582%" y="501" width="0.5560%" height="15" fill="rgb(245,125,30)" fg:x="143" fg:w="7"/><text x="11.6082%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="11.5171%" y="485" width="0.3971%" height="15" fill="rgb(232,202,2)" fg:x="145" fg:w="5"/><text x="11.7671%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="11.5965%" y="469" width="0.3177%" height="15" fill="rgb(237,140,51)" fg:x="146" fg:w="4"/><text x="11.8465%" y="479.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="11.6759%" y="453" width="0.2383%" height="15" fill="rgb(236,157,25)" fg:x="147" fg:w="3"/><text x="11.9259%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (18 samples, 1.43%)</title><rect x="10.5639%" y="645" width="1.4297%" height="15" fill="rgb(219,209,0)" fg:x="133" fg:w="18"/><text x="10.8139%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (18 samples, 1.43%)</title><rect x="10.5639%" y="629" width="1.4297%" height="15" fill="rgb(240,116,54)" fg:x="133" fg:w="18"/><text x="10.8139%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.95%)</title><rect x="11.0405%" y="613" width="0.9531%" height="15" fill="rgb(216,10,36)" fg:x="139" fg:w="12"/><text x="11.2905%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (12 samples, 0.95%)</title><rect x="11.0405%" y="597" width="0.9531%" height="15" fill="rgb(222,72,44)" fg:x="139" fg:w="12"/><text x="11.2905%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="11.9142%" y="581" width="0.0794%" height="15" fill="rgb(232,159,9)" fg:x="150" fg:w="1"/><text x="12.1642%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.0731%" y="469" width="0.1589%" height="15" fill="rgb(210,39,32)" fg:x="152" fg:w="2"/><text x="12.3231%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="12.0731%" y="453" width="0.1589%" height="15" fill="rgb(216,194,45)" fg:x="152" fg:w="2"/><text x="12.3231%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.0731%" y="437" width="0.1589%" height="15" fill="rgb(218,18,35)" fg:x="152" fg:w="2"/><text x="12.3231%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="12.0731%" y="421" width="0.1589%" height="15" fill="rgb(207,83,51)" fg:x="152" fg:w="2"/><text x="12.3231%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.0731%" y="405" width="0.1589%" height="15" fill="rgb(225,63,43)" fg:x="152" fg:w="2"/><text x="12.3231%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="11.9936%" y="517" width="0.3177%" height="15" fill="rgb(207,57,36)" fg:x="151" fg:w="4"/><text x="12.2436%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="11.9936%" y="501" width="0.3177%" height="15" fill="rgb(216,99,33)" fg:x="151" fg:w="4"/><text x="12.2436%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="12.0731%" y="485" width="0.2383%" height="15" fill="rgb(225,42,16)" fg:x="152" fg:w="3"/><text x="12.3231%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.2319%" y="469" width="0.0794%" height="15" fill="rgb(220,201,45)" fg:x="154" fg:w="1"/><text x="12.4819%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.3114%" y="517" width="0.0794%" height="15" fill="rgb(225,33,4)" fg:x="155" fg:w="1"/><text x="12.5614%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="11.9936%" y="549" width="0.4766%" height="15" fill="rgb(224,33,50)" fg:x="151" fg:w="6"/><text x="12.2436%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="11.9936%" y="533" width="0.4766%" height="15" fill="rgb(246,198,51)" fg:x="151" fg:w="6"/><text x="12.2436%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3908%" y="517" width="0.0794%" height="15" fill="rgb(205,22,4)" fg:x="156" fg:w="1"/><text x="12.6408%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3908%" y="501" width="0.0794%" height="15" fill="rgb(206,3,8)" fg:x="156" fg:w="1"/><text x="12.6408%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="11.9936%" y="581" width="0.5560%" height="15" fill="rgb(251,23,15)" fg:x="151" fg:w="7"/><text x="12.2436%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="11.9936%" y="565" width="0.5560%" height="15" fill="rgb(252,88,28)" fg:x="151" fg:w="7"/><text x="12.2436%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.4702%" y="549" width="0.0794%" height="15" fill="rgb(212,127,14)" fg:x="157" fg:w="1"/><text x="12.7202%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="12.4702%" y="533" width="0.0794%" height="15" fill="rgb(247,145,37)" fg:x="157" fg:w="1"/><text x="12.7202%" y="543.50"></text></g><g><title>engine::session::Session::close (50 samples, 3.97%)</title><rect x="8.6577%" y="741" width="3.9714%" height="15" fill="rgb(209,117,53)" fg:x="109" fg:w="50"/><text x="8.9077%" y="751.50">engi..</text></g><g><title>engine::session::state::State::close (47 samples, 3.73%)</title><rect x="8.8959%" y="725" width="3.7331%" height="15" fill="rgb(212,90,42)" fg:x="112" fg:w="47"/><text x="9.1459%" y="735.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (47 samples, 3.73%)</title><rect x="8.8959%" y="709" width="3.7331%" height="15" fill="rgb(218,164,37)" fg:x="112" fg:w="47"/><text x="9.1459%" y="719.50">engi..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (46 samples, 3.65%)</title><rect x="8.9754%" y="693" width="3.6537%" height="15" fill="rgb(246,65,34)" fg:x="113" fg:w="46"/><text x="9.2254%" y="703.50">engi..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (45 samples, 3.57%)</title><rect x="9.0548%" y="677" width="3.5743%" height="15" fill="rgb(231,100,33)" fg:x="114" fg:w="45"/><text x="9.3048%" y="687.50">engi..</text></g><g><title>kernel::model::any_entity_changes (32 samples, 2.54%)</title><rect x="10.0874%" y="661" width="2.5417%" height="15" fill="rgb(228,126,14)" fg:x="127" fg:w="32"/><text x="10.3374%" y="671.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.64%)</title><rect x="11.9936%" y="645" width="0.6354%" height="15" fill="rgb(215,173,21)" fg:x="151" fg:w="8"/><text x="12.2436%" y="655.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.64%)</title><rect x="11.9936%" y="629" width="0.6354%" height="15" fill="rgb(210,6,40)" fg:x="151" fg:w="8"/><text x="12.2436%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="11.9936%" y="613" width="0.6354%" height="15" fill="rgb(212,48,18)" fg:x="151" fg:w="8"/><text x="12.2436%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="11.9936%" y="597" width="0.6354%" height="15" fill="rgb(230,214,11)" fg:x="151" fg:w="8"/><text x="12.2436%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.5496%" y="581" width="0.0794%" height="15" fill="rgb(254,105,39)" fg:x="158" fg:w="1"/><text x="12.7996%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.5496%" y="565" width="0.0794%" height="15" fill="rgb(245,158,5)" fg:x="158" fg:w="1"/><text x="12.7996%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="12.8674%" y="549" width="0.0794%" height="15" fill="rgb(249,208,11)" fg:x="162" fg:w="1"/><text x="13.1174%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="12.8674%" y="533" width="0.0794%" height="15" fill="rgb(210,39,28)" fg:x="162" fg:w="1"/><text x="13.1174%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.8674%" y="517" width="0.0794%" height="15" fill="rgb(211,56,53)" fg:x="162" fg:w="1"/><text x="13.1174%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.8674%" y="501" width="0.0794%" height="15" fill="rgb(226,201,30)" fg:x="162" fg:w="1"/><text x="13.1174%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="12.8674%" y="485" width="0.0794%" height="15" fill="rgb(239,101,34)" fg:x="162" fg:w="1"/><text x="13.1174%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8674%" y="469" width="0.0794%" height="15" fill="rgb(226,209,5)" fg:x="162" fg:w="1"/><text x="13.1174%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8674%" y="453" width="0.0794%" height="15" fill="rgb(250,105,47)" fg:x="162" fg:w="1"/><text x="13.1174%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8674%" y="437" width="0.0794%" height="15" fill="rgb(230,72,3)" fg:x="162" fg:w="1"/><text x="13.1174%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8674%" y="421" width="0.0794%" height="15" fill="rgb(232,218,39)" fg:x="162" fg:w="1"/><text x="13.1174%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8674%" y="405" width="0.0794%" height="15" fill="rgb(248,166,6)" fg:x="162" fg:w="1"/><text x="13.1174%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8674%" y="389" width="0.0794%" height="15" fill="rgb(247,89,20)" fg:x="162" fg:w="1"/><text x="13.1174%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.8674%" y="373" width="0.0794%" height="15" fill="rgb(248,130,54)" fg:x="162" fg:w="1"/><text x="13.1174%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.8674%" y="357" width="0.0794%" height="15" fill="rgb(234,196,4)" fg:x="162" fg:w="1"/><text x="13.1174%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.8674%" y="341" width="0.0794%" height="15" fill="rgb(250,143,31)" fg:x="162" fg:w="1"/><text x="13.1174%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8674%" y="325" width="0.0794%" height="15" fill="rgb(211,110,34)" fg:x="162" fg:w="1"/><text x="13.1174%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8674%" y="309" width="0.0794%" height="15" fill="rgb(215,124,48)" fg:x="162" fg:w="1"/><text x="13.1174%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.8674%" y="293" width="0.0794%" height="15" fill="rgb(216,46,13)" fg:x="162" fg:w="1"/><text x="13.1174%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.8674%" y="277" width="0.0794%" height="15" fill="rgb(205,184,25)" fg:x="162" fg:w="1"/><text x="13.1174%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.8674%" y="261" width="0.0794%" height="15" fill="rgb(228,1,10)" fg:x="162" fg:w="1"/><text x="13.1174%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.8674%" y="245" width="0.0794%" height="15" fill="rgb(213,116,27)" fg:x="162" fg:w="1"/><text x="13.1174%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8674%" y="229" width="0.0794%" height="15" fill="rgb(241,95,50)" fg:x="162" fg:w="1"/><text x="13.1174%" y="239.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="12.9468%" y="533" width="0.0794%" height="15" fill="rgb(238,48,32)" fg:x="163" fg:w="1"/><text x="13.1968%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.9468%" y="517" width="0.0794%" height="15" fill="rgb(235,113,49)" fg:x="163" fg:w="1"/><text x="13.1968%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.9468%" y="501" width="0.0794%" height="15" fill="rgb(205,127,43)" fg:x="163" fg:w="1"/><text x="13.1968%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.9468%" y="485" width="0.0794%" height="15" fill="rgb(250,162,2)" fg:x="163" fg:w="1"/><text x="13.1968%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.9468%" y="469" width="0.0794%" height="15" fill="rgb(220,13,41)" fg:x="163" fg:w="1"/><text x="13.1968%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.9468%" y="453" width="0.0794%" height="15" fill="rgb(249,221,25)" fg:x="163" fg:w="1"/><text x="13.1968%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.9468%" y="437" width="0.0794%" height="15" fill="rgb(215,208,19)" fg:x="163" fg:w="1"/><text x="13.1968%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.9468%" y="421" width="0.0794%" height="15" fill="rgb(236,175,2)" fg:x="163" fg:w="1"/><text x="13.1968%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.9468%" y="405" width="0.0794%" height="15" fill="rgb(241,52,2)" fg:x="163" fg:w="1"/><text x="13.1968%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.9468%" y="389" width="0.0794%" height="15" fill="rgb(248,140,14)" fg:x="163" fg:w="1"/><text x="13.1968%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9468%" y="373" width="0.0794%" height="15" fill="rgb(253,22,42)" fg:x="163" fg:w="1"/><text x="13.1968%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="13.0262%" y="453" width="0.0794%" height="15" fill="rgb(234,61,47)" fg:x="164" fg:w="1"/><text x="13.2762%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.40%)</title><rect x="12.7879%" y="597" width="0.3971%" height="15" fill="rgb(208,226,15)" fg:x="161" fg:w="5"/><text x="13.0379%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="12.7879%" y="581" width="0.3971%" height="15" fill="rgb(217,221,4)" fg:x="161" fg:w="5"/><text x="13.0379%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="12.7879%" y="565" width="0.3971%" height="15" fill="rgb(212,174,34)" fg:x="161" fg:w="5"/><text x="13.0379%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="12.9468%" y="549" width="0.2383%" height="15" fill="rgb(253,83,4)" fg:x="163" fg:w="3"/><text x="13.1968%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.0262%" y="533" width="0.1589%" height="15" fill="rgb(250,195,49)" fg:x="164" fg:w="2"/><text x="13.2762%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.0262%" y="517" width="0.1589%" height="15" fill="rgb(241,192,25)" fg:x="164" fg:w="2"/><text x="13.2762%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="13.0262%" y="501" width="0.1589%" height="15" fill="rgb(208,124,10)" fg:x="164" fg:w="2"/><text x="13.2762%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.0262%" y="485" width="0.1589%" height="15" fill="rgb(222,33,0)" fg:x="164" fg:w="2"/><text x="13.2762%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="13.0262%" y="469" width="0.1589%" height="15" fill="rgb(234,209,28)" fg:x="164" fg:w="2"/><text x="13.2762%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1056%" y="453" width="0.0794%" height="15" fill="rgb(224,11,23)" fg:x="165" fg:w="1"/><text x="13.3556%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.1056%" y="437" width="0.0794%" height="15" fill="rgb(232,99,1)" fg:x="165" fg:w="1"/><text x="13.3556%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="13.1056%" y="421" width="0.0794%" height="15" fill="rgb(237,95,45)" fg:x="165" fg:w="1"/><text x="13.3556%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1056%" y="405" width="0.0794%" height="15" fill="rgb(208,109,11)" fg:x="165" fg:w="1"/><text x="13.3556%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (7 samples, 0.56%)</title><rect x="12.7085%" y="645" width="0.5560%" height="15" fill="rgb(216,190,48)" fg:x="160" fg:w="7"/><text x="12.9585%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (7 samples, 0.56%)</title><rect x="12.7085%" y="629" width="0.5560%" height="15" fill="rgb(251,171,36)" fg:x="160" fg:w="7"/><text x="12.9585%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (7 samples, 0.56%)</title><rect x="12.7085%" y="613" width="0.5560%" height="15" fill="rgb(230,62,22)" fg:x="160" fg:w="7"/><text x="12.9585%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.1851%" y="597" width="0.0794%" height="15" fill="rgb(225,114,35)" fg:x="166" fg:w="1"/><text x="13.4351%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.1851%" y="581" width="0.0794%" height="15" fill="rgb(215,118,42)" fg:x="166" fg:w="1"/><text x="13.4351%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="13.2645%" y="613" width="0.0794%" height="15" fill="rgb(243,119,21)" fg:x="167" fg:w="1"/><text x="13.5145%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="13.2645%" y="597" width="0.0794%" height="15" fill="rgb(252,177,53)" fg:x="167" fg:w="1"/><text x="13.5145%" y="607.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="13.2645%" y="581" width="0.0794%" height="15" fill="rgb(237,209,29)" fg:x="167" fg:w="1"/><text x="13.5145%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2645%" y="565" width="0.0794%" height="15" fill="rgb(212,65,23)" fg:x="167" fg:w="1"/><text x="13.5145%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2645%" y="549" width="0.0794%" height="15" fill="rgb(230,222,46)" fg:x="167" fg:w="1"/><text x="13.5145%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2645%" y="533" width="0.0794%" height="15" fill="rgb(215,135,32)" fg:x="167" fg:w="1"/><text x="13.5145%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.2645%" y="517" width="0.0794%" height="15" fill="rgb(246,101,22)" fg:x="167" fg:w="1"/><text x="13.5145%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.2645%" y="501" width="0.0794%" height="15" fill="rgb(206,107,13)" fg:x="167" fg:w="1"/><text x="13.5145%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.2645%" y="485" width="0.0794%" height="15" fill="rgb(250,100,44)" fg:x="167" fg:w="1"/><text x="13.5145%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.2645%" y="469" width="0.0794%" height="15" fill="rgb(231,147,38)" fg:x="167" fg:w="1"/><text x="13.5145%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.2645%" y="453" width="0.0794%" height="15" fill="rgb(229,8,40)" fg:x="167" fg:w="1"/><text x="13.5145%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.2645%" y="437" width="0.0794%" height="15" fill="rgb(221,135,30)" fg:x="167" fg:w="1"/><text x="13.5145%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.2645%" y="421" width="0.0794%" height="15" fill="rgb(249,193,18)" fg:x="167" fg:w="1"/><text x="13.5145%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.2645%" y="405" width="0.0794%" height="15" fill="rgb(209,133,39)" fg:x="167" fg:w="1"/><text x="13.5145%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.2645%" y="389" width="0.0794%" height="15" fill="rgb(232,100,14)" fg:x="167" fg:w="1"/><text x="13.5145%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.2645%" y="373" width="0.0794%" height="15" fill="rgb(224,185,1)" fg:x="167" fg:w="1"/><text x="13.5145%" y="383.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (9 samples, 0.71%)</title><rect x="12.7085%" y="661" width="0.7149%" height="15" fill="rgb(223,139,8)" fg:x="160" fg:w="9"/><text x="12.9585%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (2 samples, 0.16%)</title><rect x="13.2645%" y="645" width="0.1589%" height="15" fill="rgb(232,213,38)" fg:x="167" fg:w="2"/><text x="13.5145%" y="655.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (2 samples, 0.16%)</title><rect x="13.2645%" y="629" width="0.1589%" height="15" fill="rgb(207,94,22)" fg:x="167" fg:w="2"/><text x="13.5145%" y="639.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="13.3439%" y="613" width="0.0794%" height="15" fill="rgb(219,183,54)" fg:x="168" fg:w="1"/><text x="13.5939%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3439%" y="597" width="0.0794%" height="15" fill="rgb(216,185,54)" fg:x="168" fg:w="1"/><text x="13.5939%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.6616%" y="421" width="0.0794%" height="15" fill="rgb(254,217,39)" fg:x="172" fg:w="1"/><text x="13.9116%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.6616%" y="405" width="0.0794%" height="15" fill="rgb(240,178,23)" fg:x="172" fg:w="1"/><text x="13.9116%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.6616%" y="389" width="0.0794%" height="15" fill="rgb(218,11,47)" fg:x="172" fg:w="1"/><text x="13.9116%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.6616%" y="373" width="0.0794%" height="15" fill="rgb(218,51,51)" fg:x="172" fg:w="1"/><text x="13.9116%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.6616%" y="357" width="0.0794%" height="15" fill="rgb(238,126,27)" fg:x="172" fg:w="1"/><text x="13.9116%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.6616%" y="341" width="0.0794%" height="15" fill="rgb(249,202,22)" fg:x="172" fg:w="1"/><text x="13.9116%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.6616%" y="325" width="0.0794%" height="15" fill="rgb(254,195,49)" fg:x="172" fg:w="1"/><text x="13.9116%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.6616%" y="309" width="0.0794%" height="15" fill="rgb(208,123,14)" fg:x="172" fg:w="1"/><text x="13.9116%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.6616%" y="293" width="0.0794%" height="15" fill="rgb(224,200,8)" fg:x="172" fg:w="1"/><text x="13.9116%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.6616%" y="277" width="0.0794%" height="15" fill="rgb(217,61,36)" fg:x="172" fg:w="1"/><text x="13.9116%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.6616%" y="261" width="0.0794%" height="15" fill="rgb(206,35,45)" fg:x="172" fg:w="1"/><text x="13.9116%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.6616%" y="245" width="0.0794%" height="15" fill="rgb(217,65,33)" fg:x="172" fg:w="1"/><text x="13.9116%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.6616%" y="229" width="0.0794%" height="15" fill="rgb(222,158,48)" fg:x="172" fg:w="1"/><text x="13.9116%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.6616%" y="213" width="0.0794%" height="15" fill="rgb(254,2,54)" fg:x="172" fg:w="1"/><text x="13.9116%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.6616%" y="197" width="0.0794%" height="15" fill="rgb(250,143,38)" fg:x="172" fg:w="1"/><text x="13.9116%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6616%" y="181" width="0.0794%" height="15" fill="rgb(248,25,0)" fg:x="172" fg:w="1"/><text x="13.9116%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.6616%" y="437" width="0.1589%" height="15" fill="rgb(206,152,27)" fg:x="172" fg:w="2"/><text x="13.9116%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7411%" y="421" width="0.0794%" height="15" fill="rgb(240,77,30)" fg:x="173" fg:w="1"/><text x="13.9911%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.8999%" y="341" width="0.0794%" height="15" fill="rgb(231,5,3)" fg:x="175" fg:w="1"/><text x="14.1499%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.8999%" y="325" width="0.0794%" height="15" fill="rgb(207,226,32)" fg:x="175" fg:w="1"/><text x="14.1499%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.8999%" y="309" width="0.0794%" height="15" fill="rgb(222,207,47)" fg:x="175" fg:w="1"/><text x="14.1499%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.40%)</title><rect x="13.6616%" y="485" width="0.3971%" height="15" fill="rgb(229,115,45)" fg:x="172" fg:w="5"/><text x="13.9116%" y="495.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="13.6616%" y="469" width="0.3971%" height="15" fill="rgb(224,191,6)" fg:x="172" fg:w="5"/><text x="13.9116%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="13.6616%" y="453" width="0.3971%" height="15" fill="rgb(230,227,24)" fg:x="172" fg:w="5"/><text x="13.9116%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="13.8205%" y="437" width="0.2383%" height="15" fill="rgb(228,80,19)" fg:x="174" fg:w="3"/><text x="14.0705%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.8205%" y="421" width="0.2383%" height="15" fill="rgb(247,229,0)" fg:x="174" fg:w="3"/><text x="14.0705%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="13.8205%" y="405" width="0.2383%" height="15" fill="rgb(237,194,15)" fg:x="174" fg:w="3"/><text x="14.0705%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.8205%" y="389" width="0.2383%" height="15" fill="rgb(219,203,20)" fg:x="174" fg:w="3"/><text x="14.0705%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="13.8205%" y="373" width="0.2383%" height="15" fill="rgb(234,128,8)" fg:x="174" fg:w="3"/><text x="14.0705%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.8205%" y="357" width="0.2383%" height="15" fill="rgb(248,202,8)" fg:x="174" fg:w="3"/><text x="14.0705%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.9793%" y="341" width="0.0794%" height="15" fill="rgb(206,104,37)" fg:x="176" fg:w="1"/><text x="14.2293%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.9793%" y="325" width="0.0794%" height="15" fill="rgb(223,8,27)" fg:x="176" fg:w="1"/><text x="14.2293%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.9793%" y="309" width="0.0794%" height="15" fill="rgb(216,217,28)" fg:x="176" fg:w="1"/><text x="14.2293%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.9793%" y="293" width="0.0794%" height="15" fill="rgb(249,199,1)" fg:x="176" fg:w="1"/><text x="14.2293%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.0588%" y="437" width="0.0794%" height="15" fill="rgb(240,85,17)" fg:x="177" fg:w="1"/><text x="14.3088%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1382%" y="437" width="0.0794%" height="15" fill="rgb(206,108,45)" fg:x="178" fg:w="1"/><text x="14.3882%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="14.1382%" y="421" width="0.0794%" height="15" fill="rgb(245,210,41)" fg:x="178" fg:w="1"/><text x="14.3882%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1382%" y="405" width="0.0794%" height="15" fill="rgb(206,13,37)" fg:x="178" fg:w="1"/><text x="14.3882%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.2971%" y="341" width="0.0794%" height="15" fill="rgb(250,61,18)" fg:x="180" fg:w="1"/><text x="14.5471%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.4559%" y="277" width="0.0794%" height="15" fill="rgb(235,172,48)" fg:x="182" fg:w="1"/><text x="14.7059%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (7 samples, 0.56%)</title><rect x="14.0588%" y="485" width="0.5560%" height="15" fill="rgb(249,201,17)" fg:x="177" fg:w="7"/><text x="14.3088%" y="495.50"></text></g><g><title>kernel::model::props::load_props (7 samples, 0.56%)</title><rect x="14.0588%" y="469" width="0.5560%" height="15" fill="rgb(219,208,6)" fg:x="177" fg:w="7"/><text x="14.3088%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (7 samples, 0.56%)</title><rect x="14.0588%" y="453" width="0.5560%" height="15" fill="rgb(248,31,23)" fg:x="177" fg:w="7"/><text x="14.3088%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="14.2176%" y="437" width="0.3971%" height="15" fill="rgb(245,15,42)" fg:x="179" fg:w="5"/><text x="14.4676%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="14.2176%" y="421" width="0.3971%" height="15" fill="rgb(222,217,39)" fg:x="179" fg:w="5"/><text x="14.4676%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="14.2176%" y="405" width="0.3971%" height="15" fill="rgb(210,219,27)" fg:x="179" fg:w="5"/><text x="14.4676%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="14.2176%" y="389" width="0.3971%" height="15" fill="rgb(252,166,36)" fg:x="179" fg:w="5"/><text x="14.4676%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="14.2176%" y="373" width="0.3971%" height="15" fill="rgb(245,132,34)" fg:x="179" fg:w="5"/><text x="14.4676%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="14.2971%" y="357" width="0.3177%" height="15" fill="rgb(236,54,3)" fg:x="180" fg:w="4"/><text x="14.5471%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="14.3765%" y="341" width="0.2383%" height="15" fill="rgb(241,173,43)" fg:x="181" fg:w="3"/><text x="14.6265%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="14.3765%" y="325" width="0.2383%" height="15" fill="rgb(215,190,9)" fg:x="181" fg:w="3"/><text x="14.6265%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.4559%" y="309" width="0.1589%" height="15" fill="rgb(242,101,16)" fg:x="182" fg:w="2"/><text x="14.7059%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.4559%" y="293" width="0.1589%" height="15" fill="rgb(223,190,21)" fg:x="182" fg:w="2"/><text x="14.7059%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.5353%" y="277" width="0.0794%" height="15" fill="rgb(215,228,25)" fg:x="183" fg:w="1"/><text x="14.7853%" y="287.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="14.6148%" y="485" width="0.2383%" height="15" fill="rgb(225,36,22)" fg:x="184" fg:w="3"/><text x="14.8648%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="14.6942%" y="469" width="0.1589%" height="15" fill="rgb(251,106,46)" fg:x="185" fg:w="2"/><text x="14.9442%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="14.7736%" y="453" width="0.0794%" height="15" fill="rgb(208,90,1)" fg:x="186" fg:w="1"/><text x="15.0236%" y="463.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="14.7736%" y="437" width="0.0794%" height="15" fill="rgb(243,10,4)" fg:x="186" fg:w="1"/><text x="15.0236%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="14.7736%" y="421" width="0.0794%" height="15" fill="rgb(212,137,27)" fg:x="186" fg:w="1"/><text x="15.0236%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="14.7736%" y="405" width="0.0794%" height="15" fill="rgb(231,220,49)" fg:x="186" fg:w="1"/><text x="15.0236%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.7736%" y="389" width="0.0794%" height="15" fill="rgb(237,96,20)" fg:x="186" fg:w="1"/><text x="15.0236%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.7736%" y="373" width="0.0794%" height="15" fill="rgb(239,229,30)" fg:x="186" fg:w="1"/><text x="15.0236%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.7736%" y="357" width="0.0794%" height="15" fill="rgb(219,65,33)" fg:x="186" fg:w="1"/><text x="15.0236%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="14.7736%" y="341" width="0.0794%" height="15" fill="rgb(243,134,7)" fg:x="186" fg:w="1"/><text x="15.0236%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="14.7736%" y="325" width="0.0794%" height="15" fill="rgb(216,177,54)" fg:x="186" fg:w="1"/><text x="15.0236%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="14.7736%" y="309" width="0.0794%" height="15" fill="rgb(211,160,20)" fg:x="186" fg:w="1"/><text x="15.0236%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="14.7736%" y="293" width="0.0794%" height="15" fill="rgb(239,85,39)" fg:x="186" fg:w="1"/><text x="15.0236%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="14.7736%" y="277" width="0.0794%" height="15" fill="rgb(232,125,22)" fg:x="186" fg:w="1"/><text x="15.0236%" y="287.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="14.9325%" y="437" width="0.2383%" height="15" fill="rgb(244,57,34)" fg:x="188" fg:w="3"/><text x="15.1825%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="15.0119%" y="421" width="0.1589%" height="15" fill="rgb(214,203,32)" fg:x="189" fg:w="2"/><text x="15.2619%" y="431.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="15.0119%" y="405" width="0.1589%" height="15" fill="rgb(207,58,43)" fg:x="189" fg:w="2"/><text x="15.2619%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="15.0119%" y="389" width="0.1589%" height="15" fill="rgb(215,193,15)" fg:x="189" fg:w="2"/><text x="15.2619%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="15.0119%" y="373" width="0.1589%" height="15" fill="rgb(232,15,44)" fg:x="189" fg:w="2"/><text x="15.2619%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="15.0119%" y="357" width="0.1589%" height="15" fill="rgb(212,3,48)" fg:x="189" fg:w="2"/><text x="15.2619%" y="367.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="15.0119%" y="341" width="0.1589%" height="15" fill="rgb(218,128,7)" fg:x="189" fg:w="2"/><text x="15.2619%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="15.0119%" y="325" width="0.1589%" height="15" fill="rgb(226,216,39)" fg:x="189" fg:w="2"/><text x="15.2619%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="15.0119%" y="309" width="0.1589%" height="15" fill="rgb(243,47,51)" fg:x="189" fg:w="2"/><text x="15.2619%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="15.0119%" y="293" width="0.1589%" height="15" fill="rgb(241,183,40)" fg:x="189" fg:w="2"/><text x="15.2619%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.16%)</title><rect x="15.0119%" y="277" width="0.1589%" height="15" fill="rgb(231,217,32)" fg:x="189" fg:w="2"/><text x="15.2619%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="15.4091%" y="325" width="0.0794%" height="15" fill="rgb(229,61,38)" fg:x="194" fg:w="1"/><text x="15.6591%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="15.4885%" y="309" width="0.0794%" height="15" fill="rgb(225,210,5)" fg:x="195" fg:w="1"/><text x="15.7385%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="15.4885%" y="293" width="0.0794%" height="15" fill="rgb(231,79,45)" fg:x="195" fg:w="1"/><text x="15.7385%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.40%)</title><rect x="15.2502%" y="341" width="0.3971%" height="15" fill="rgb(224,100,7)" fg:x="192" fg:w="5"/><text x="15.5002%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="15.4885%" y="325" width="0.1589%" height="15" fill="rgb(241,198,18)" fg:x="195" fg:w="2"/><text x="15.7385%" y="335.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="15.5679%" y="309" width="0.0794%" height="15" fill="rgb(252,97,53)" fg:x="196" fg:w="1"/><text x="15.8179%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="15.6473%" y="325" width="0.0794%" height="15" fill="rgb(220,88,7)" fg:x="197" fg:w="1"/><text x="15.8973%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="15.6473%" y="309" width="0.0794%" height="15" fill="rgb(213,176,14)" fg:x="197" fg:w="1"/><text x="15.8973%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="15.2502%" y="405" width="0.5560%" height="15" fill="rgb(246,73,7)" fg:x="192" fg:w="7"/><text x="15.5002%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="15.2502%" y="389" width="0.5560%" height="15" fill="rgb(245,64,36)" fg:x="192" fg:w="7"/><text x="15.5002%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (7 samples, 0.56%)</title><rect x="15.2502%" y="373" width="0.5560%" height="15" fill="rgb(245,80,10)" fg:x="192" fg:w="7"/><text x="15.5002%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (7 samples, 0.56%)</title><rect x="15.2502%" y="357" width="0.5560%" height="15" fill="rgb(232,107,50)" fg:x="192" fg:w="7"/><text x="15.5002%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="15.6473%" y="341" width="0.1589%" height="15" fill="rgb(253,3,0)" fg:x="197" fg:w="2"/><text x="15.8973%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="15.7268%" y="325" width="0.0794%" height="15" fill="rgb(212,99,53)" fg:x="198" fg:w="1"/><text x="15.9768%" y="335.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="15.7268%" y="309" width="0.0794%" height="15" fill="rgb(249,111,54)" fg:x="198" fg:w="1"/><text x="15.9768%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="15.8062%" y="373" width="0.1589%" height="15" fill="rgb(249,55,30)" fg:x="199" fg:w="2"/><text x="16.0562%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="15.8062%" y="357" width="0.1589%" height="15" fill="rgb(237,47,42)" fg:x="199" fg:w="2"/><text x="16.0562%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="15.8062%" y="341" width="0.1589%" height="15" fill="rgb(211,20,18)" fg:x="199" fg:w="2"/><text x="16.0562%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="15.8062%" y="325" width="0.1589%" height="15" fill="rgb(231,203,46)" fg:x="199" fg:w="2"/><text x="16.0562%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="15.8062%" y="309" width="0.1589%" height="15" fill="rgb(237,142,3)" fg:x="199" fg:w="2"/><text x="16.0562%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="16.0445%" y="341" width="0.1589%" height="15" fill="rgb(241,107,1)" fg:x="202" fg:w="2"/><text x="16.2945%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="15.8062%" y="405" width="0.4766%" height="15" fill="rgb(229,83,13)" fg:x="199" fg:w="6"/><text x="16.0562%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="15.8062%" y="389" width="0.4766%" height="15" fill="rgb(241,91,40)" fg:x="199" fg:w="6"/><text x="16.0562%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="15.9651%" y="373" width="0.3177%" height="15" fill="rgb(225,3,45)" fg:x="201" fg:w="4"/><text x="16.2151%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.32%)</title><rect x="15.9651%" y="357" width="0.3177%" height="15" fill="rgb(244,223,14)" fg:x="201" fg:w="4"/><text x="16.2151%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.2033%" y="341" width="0.0794%" height="15" fill="rgb(224,124,37)" fg:x="204" fg:w="1"/><text x="16.4533%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.2828%" y="357" width="0.0794%" height="15" fill="rgb(251,171,30)" fg:x="205" fg:w="1"/><text x="16.5328%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.2828%" y="341" width="0.0794%" height="15" fill="rgb(236,46,54)" fg:x="205" fg:w="1"/><text x="16.5328%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.4416%" y="341" width="0.0794%" height="15" fill="rgb(245,213,5)" fg:x="207" fg:w="1"/><text x="16.6916%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.5210%" y="325" width="0.0794%" height="15" fill="rgb(230,144,27)" fg:x="208" fg:w="1"/><text x="16.7710%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.71%)</title><rect x="16.5210%" y="341" width="0.7149%" height="15" fill="rgb(220,86,6)" fg:x="208" fg:w="9"/><text x="16.7710%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.64%)</title><rect x="16.6005%" y="325" width="0.6354%" height="15" fill="rgb(240,20,13)" fg:x="209" fg:w="8"/><text x="16.8505%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="17.2359%" y="341" width="0.0794%" height="15" fill="rgb(217,89,34)" fg:x="217" fg:w="1"/><text x="17.4859%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="17.2359%" y="325" width="0.0794%" height="15" fill="rgb(229,13,5)" fg:x="217" fg:w="1"/><text x="17.4859%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="17.2359%" y="309" width="0.0794%" height="15" fill="rgb(244,67,35)" fg:x="217" fg:w="1"/><text x="17.4859%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.2359%" y="293" width="0.0794%" height="15" fill="rgb(221,40,2)" fg:x="217" fg:w="1"/><text x="17.4859%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="17.4742%" y="325" width="0.3177%" height="15" fill="rgb(237,157,21)" fg:x="220" fg:w="4"/><text x="17.7242%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.64%)</title><rect x="17.3153%" y="341" width="0.6354%" height="15" fill="rgb(222,94,11)" fg:x="218" fg:w="8"/><text x="17.5653%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="17.7919%" y="325" width="0.1589%" height="15" fill="rgb(249,113,6)" fg:x="224" fg:w="2"/><text x="18.0419%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="17.7919%" y="309" width="0.1589%" height="15" fill="rgb(238,137,36)" fg:x="224" fg:w="2"/><text x="18.0419%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="17.8713%" y="293" width="0.0794%" height="15" fill="rgb(210,102,26)" fg:x="225" fg:w="1"/><text x="18.1213%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="18.0302%" y="309" width="0.0794%" height="15" fill="rgb(218,30,30)" fg:x="227" fg:w="1"/><text x="18.2802%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="18.1096%" y="293" width="0.0794%" height="15" fill="rgb(214,67,26)" fg:x="228" fg:w="1"/><text x="18.3596%" y="303.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="18.4273%" y="277" width="0.2383%" height="15" fill="rgb(251,9,53)" fg:x="232" fg:w="3"/><text x="18.6773%" y="287.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="18.6656%" y="277" width="0.1589%" height="15" fill="rgb(228,204,25)" fg:x="235" fg:w="2"/><text x="18.9156%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="18.8245%" y="277" width="0.1589%" height="15" fill="rgb(207,153,8)" fg:x="237" fg:w="2"/><text x="19.0745%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="19.3010%" y="245" width="0.0794%" height="15" fill="rgb(242,9,16)" fg:x="243" fg:w="1"/><text x="19.5510%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="18.9833%" y="277" width="0.4766%" height="15" fill="rgb(217,211,10)" fg:x="239" fg:w="6"/><text x="19.2333%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="19.1422%" y="261" width="0.3177%" height="15" fill="rgb(219,228,52)" fg:x="241" fg:w="4"/><text x="19.3922%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="19.3805%" y="245" width="0.0794%" height="15" fill="rgb(231,92,29)" fg:x="244" fg:w="1"/><text x="19.6305%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="19.3805%" y="229" width="0.0794%" height="15" fill="rgb(232,8,23)" fg:x="244" fg:w="1"/><text x="19.6305%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="19.4599%" y="277" width="0.0794%" height="15" fill="rgb(216,211,34)" fg:x="245" fg:w="1"/><text x="19.7099%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="19.4599%" y="261" width="0.0794%" height="15" fill="rgb(236,151,0)" fg:x="245" fg:w="1"/><text x="19.7099%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="19.4599%" y="245" width="0.0794%" height="15" fill="rgb(209,168,3)" fg:x="245" fg:w="1"/><text x="19.7099%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (84 samples, 6.67%)</title><rect x="19.5393%" y="277" width="6.6720%" height="15" fill="rgb(208,129,28)" fg:x="246" fg:w="84"/><text x="19.7893%" y="287.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (84 samples, 6.67%)</title><rect x="19.5393%" y="261" width="6.6720%" height="15" fill="rgb(229,78,22)" fg:x="246" fg:w="84"/><text x="19.7893%" y="271.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (84 samples, 6.67%)</title><rect x="19.5393%" y="245" width="6.6720%" height="15" fill="rgb(228,187,13)" fg:x="246" fg:w="84"/><text x="19.7893%" y="255.50">alloc::ve..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (108 samples, 8.58%)</title><rect x="18.0302%" y="325" width="8.5782%" height="15" fill="rgb(240,119,24)" fg:x="227" fg:w="108"/><text x="18.2802%" y="335.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (107 samples, 8.50%)</title><rect x="18.1096%" y="309" width="8.4988%" height="15" fill="rgb(209,194,42)" fg:x="228" fg:w="107"/><text x="18.3596%" y="319.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (106 samples, 8.42%)</title><rect x="18.1890%" y="293" width="8.4194%" height="15" fill="rgb(247,200,46)" fg:x="229" fg:w="106"/><text x="18.4390%" y="303.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="26.2113%" y="277" width="0.3971%" height="15" fill="rgb(218,76,16)" fg:x="330" fg:w="5"/><text x="26.4613%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.5290%" y="261" width="0.0794%" height="15" fill="rgb(225,21,48)" fg:x="334" fg:w="1"/><text x="26.7790%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.6084%" y="325" width="0.0794%" height="15" fill="rgb(239,223,50)" fg:x="335" fg:w="1"/><text x="26.8584%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.9261%" y="309" width="0.0794%" height="15" fill="rgb(244,45,21)" fg:x="339" fg:w="1"/><text x="27.1761%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="27.0056%" y="309" width="0.4766%" height="15" fill="rgb(232,33,43)" fg:x="340" fg:w="6"/><text x="27.2556%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.4027%" y="293" width="0.0794%" height="15" fill="rgb(209,8,3)" fg:x="345" fg:w="1"/><text x="27.6527%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.4027%" y="277" width="0.0794%" height="15" fill="rgb(214,25,53)" fg:x="345" fg:w="1"/><text x="27.6527%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="27.4027%" y="261" width="0.0794%" height="15" fill="rgb(254,186,54)" fg:x="345" fg:w="1"/><text x="27.6527%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (9 samples, 0.71%)</title><rect x="27.4821%" y="309" width="0.7149%" height="15" fill="rgb(208,174,49)" fg:x="346" fg:w="9"/><text x="27.7321%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="28.1970%" y="309" width="0.0794%" height="15" fill="rgb(233,191,51)" fg:x="355" fg:w="1"/><text x="28.4470%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (21 samples, 1.67%)</title><rect x="26.6878%" y="325" width="1.6680%" height="15" fill="rgb(222,134,10)" fg:x="336" fg:w="21"/><text x="26.9378%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="28.2764%" y="309" width="0.0794%" height="15" fill="rgb(230,226,20)" fg:x="356" fg:w="1"/><text x="28.5264%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="28.2764%" y="293" width="0.0794%" height="15" fill="rgb(251,111,25)" fg:x="356" fg:w="1"/><text x="28.5264%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.2764%" y="277" width="0.0794%" height="15" fill="rgb(224,40,46)" fg:x="356" fg:w="1"/><text x="28.5264%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.2764%" y="261" width="0.0794%" height="15" fill="rgb(236,108,47)" fg:x="356" fg:w="1"/><text x="28.5264%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.2764%" y="245" width="0.0794%" height="15" fill="rgb(234,93,0)" fg:x="356" fg:w="1"/><text x="28.5264%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="28.3558%" y="325" width="0.0794%" height="15" fill="rgb(224,213,32)" fg:x="357" fg:w="1"/><text x="28.6058%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="28.3558%" y="309" width="0.0794%" height="15" fill="rgb(251,11,48)" fg:x="357" fg:w="1"/><text x="28.6058%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="28.3558%" y="293" width="0.0794%" height="15" fill="rgb(236,173,5)" fg:x="357" fg:w="1"/><text x="28.6058%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (153 samples, 12.15%)</title><rect x="16.3622%" y="357" width="12.1525%" height="15" fill="rgb(230,95,12)" fg:x="206" fg:w="153"/><text x="16.6122%" y="367.50">regex_automata::me..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (133 samples, 10.56%)</title><rect x="17.9508%" y="341" width="10.5639%" height="15" fill="rgb(232,209,1)" fg:x="226" fg:w="133"/><text x="18.2008%" y="351.50">regex_automata:..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="28.4353%" y="325" width="0.0794%" height="15" fill="rgb(232,6,1)" fg:x="358" fg:w="1"/><text x="28.6853%" y="335.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="28.4353%" y="309" width="0.0794%" height="15" fill="rgb(210,224,50)" fg:x="358" fg:w="1"/><text x="28.6853%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="28.4353%" y="293" width="0.0794%" height="15" fill="rgb(228,127,35)" fg:x="358" fg:w="1"/><text x="28.6853%" y="303.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="28.5941%" y="309" width="0.0794%" height="15" fill="rgb(245,102,45)" fg:x="360" fg:w="1"/><text x="28.8441%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek (1 samples, 0.08%)</title><rect x="28.6736%" y="309" width="0.0794%" height="15" fill="rgb(214,1,49)" fg:x="361" fg:w="1"/><text x="28.9236%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.87%)</title><rect x="28.5147%" y="357" width="0.8737%" height="15" fill="rgb(226,163,40)" fg:x="359" fg:w="11"/><text x="28.7647%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.87%)</title><rect x="28.5147%" y="341" width="0.8737%" height="15" fill="rgb(239,212,28)" fg:x="359" fg:w="11"/><text x="28.7647%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (11 samples, 0.87%)</title><rect x="28.5147%" y="325" width="0.8737%" height="15" fill="rgb(220,20,13)" fg:x="359" fg:w="11"/><text x="28.7647%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (8 samples, 0.64%)</title><rect x="28.7530%" y="309" width="0.6354%" height="15" fill="rgb(210,164,35)" fg:x="362" fg:w="8"/><text x="29.0030%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="28.8324%" y="293" width="0.5560%" height="15" fill="rgb(248,109,41)" fg:x="363" fg:w="7"/><text x="29.0824%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.56%)</title><rect x="28.8324%" y="277" width="0.5560%" height="15" fill="rgb(238,23,50)" fg:x="363" fg:w="7"/><text x="29.0824%" y="287.50"></text></g><g><title>__libc_malloc (7 samples, 0.56%)</title><rect x="28.8324%" y="261" width="0.5560%" height="15" fill="rgb(211,48,49)" fg:x="363" fg:w="7"/><text x="29.0824%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="29.5473%" y="309" width="0.0794%" height="15" fill="rgb(223,36,21)" fg:x="372" fg:w="1"/><text x="29.7973%" y="319.50"></text></g><g><title>regex::regex::string::Regex::new (169 samples, 13.42%)</title><rect x="16.2828%" y="405" width="13.4234%" height="15" fill="rgb(207,123,46)" fg:x="205" fg:w="169"/><text x="16.5328%" y="415.50">regex::regex::string..</text></g><g><title>regex::builders::Builder::build_one_string (169 samples, 13.42%)</title><rect x="16.2828%" y="389" width="13.4234%" height="15" fill="rgb(240,218,32)" fg:x="205" fg:w="169"/><text x="16.5328%" y="399.50">regex::builders::Bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (169 samples, 13.42%)</title><rect x="16.2828%" y="373" width="13.4234%" height="15" fill="rgb(252,5,43)" fg:x="205" fg:w="169"/><text x="16.5328%" y="383.50">regex_automata::meta..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="29.3884%" y="357" width="0.3177%" height="15" fill="rgb(252,84,19)" fg:x="370" fg:w="4"/><text x="29.6384%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="29.3884%" y="341" width="0.3177%" height="15" fill="rgb(243,152,39)" fg:x="370" fg:w="4"/><text x="29.6384%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="29.4678%" y="325" width="0.2383%" height="15" fill="rgb(234,160,15)" fg:x="371" fg:w="3"/><text x="29.7178%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="29.6267%" y="309" width="0.0794%" height="15" fill="rgb(237,34,20)" fg:x="373" fg:w="1"/><text x="29.8767%" y="319.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="29.6267%" y="293" width="0.0794%" height="15" fill="rgb(229,97,13)" fg:x="373" fg:w="1"/><text x="29.8767%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.6267%" y="277" width="0.0794%" height="15" fill="rgb(234,71,50)" fg:x="373" fg:w="1"/><text x="29.8767%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.7855%" y="341" width="0.0794%" height="15" fill="rgb(253,155,4)" fg:x="375" fg:w="1"/><text x="30.0355%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="29.7855%" y="325" width="0.0794%" height="15" fill="rgb(222,185,37)" fg:x="375" fg:w="1"/><text x="30.0355%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="29.7855%" y="309" width="0.0794%" height="15" fill="rgb(251,177,13)" fg:x="375" fg:w="1"/><text x="30.0355%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="30.5798%" y="325" width="0.1589%" height="15" fill="rgb(250,179,40)" fg:x="385" fg:w="2"/><text x="30.8298%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="30.5798%" y="309" width="0.1589%" height="15" fill="rgb(242,44,2)" fg:x="385" fg:w="2"/><text x="30.8298%" y="319.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="30.5798%" y="293" width="0.1589%" height="15" fill="rgb(216,177,13)" fg:x="385" fg:w="2"/><text x="30.8298%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="30.7387%" y="309" width="0.0794%" height="15" fill="rgb(216,106,43)" fg:x="387" fg:w="1"/><text x="30.9887%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.7387%" y="325" width="0.1589%" height="15" fill="rgb(216,183,2)" fg:x="387" fg:w="2"/><text x="30.9887%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.8181%" y="309" width="0.0794%" height="15" fill="rgb(249,75,3)" fg:x="388" fg:w="1"/><text x="31.0681%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (17 samples, 1.35%)</title><rect x="29.7855%" y="357" width="1.3503%" height="15" fill="rgb(219,67,39)" fg:x="375" fg:w="17"/><text x="30.0355%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (16 samples, 1.27%)</title><rect x="29.8650%" y="341" width="1.2708%" height="15" fill="rgb(253,228,2)" fg:x="376" fg:w="16"/><text x="30.1150%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="30.8975%" y="325" width="0.2383%" height="15" fill="rgb(235,138,27)" fg:x="389" fg:w="3"/><text x="31.1475%" y="335.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (203 samples, 16.12%)</title><rect x="15.2502%" y="421" width="16.1239%" height="15" fill="rgb(236,97,51)" fg:x="192" fg:w="203"/><text x="15.5002%" y="431.50">indefinite::helper::Helpe..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (21 samples, 1.67%)</title><rect x="29.7061%" y="405" width="1.6680%" height="15" fill="rgb(240,80,30)" fg:x="374" fg:w="21"/><text x="29.9561%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (21 samples, 1.67%)</title><rect x="29.7061%" y="389" width="1.6680%" height="15" fill="rgb(230,178,19)" fg:x="374" fg:w="21"/><text x="29.9561%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (21 samples, 1.67%)</title><rect x="29.7061%" y="373" width="1.6680%" height="15" fill="rgb(210,190,27)" fg:x="374" fg:w="21"/><text x="29.9561%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (3 samples, 0.24%)</title><rect x="31.1358%" y="357" width="0.2383%" height="15" fill="rgb(222,107,31)" fg:x="392" fg:w="3"/><text x="31.3858%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (3 samples, 0.24%)</title><rect x="31.1358%" y="341" width="0.2383%" height="15" fill="rgb(216,127,34)" fg:x="392" fg:w="3"/><text x="31.3858%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.2947%" y="325" width="0.0794%" height="15" fill="rgb(234,116,52)" fg:x="394" fg:w="1"/><text x="31.5447%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.2947%" y="309" width="0.0794%" height="15" fill="rgb(222,124,15)" fg:x="394" fg:w="1"/><text x="31.5447%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.3741%" y="389" width="0.0794%" height="15" fill="rgb(231,179,28)" fg:x="395" fg:w="1"/><text x="31.6241%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="31.4535%" y="357" width="0.1589%" height="15" fill="rgb(226,93,45)" fg:x="396" fg:w="2"/><text x="31.7035%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.5330%" y="341" width="0.0794%" height="15" fill="rgb(215,8,51)" fg:x="397" fg:w="1"/><text x="31.7830%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="31.3741%" y="405" width="0.3971%" height="15" fill="rgb(223,106,5)" fg:x="395" fg:w="5"/><text x="31.6241%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="31.4535%" y="389" width="0.3177%" height="15" fill="rgb(250,191,5)" fg:x="396" fg:w="4"/><text x="31.7035%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="31.4535%" y="373" width="0.3177%" height="15" fill="rgb(242,132,44)" fg:x="396" fg:w="4"/><text x="31.7035%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="31.6124%" y="357" width="0.1589%" height="15" fill="rgb(251,152,29)" fg:x="398" fg:w="2"/><text x="31.8624%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.8507%" y="341" width="0.0794%" height="15" fill="rgb(218,179,5)" fg:x="401" fg:w="1"/><text x="32.1007%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.8507%" y="325" width="0.0794%" height="15" fill="rgb(227,67,19)" fg:x="401" fg:w="1"/><text x="32.1007%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="31.7712%" y="389" width="0.2383%" height="15" fill="rgb(233,119,31)" fg:x="400" fg:w="3"/><text x="32.0212%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="31.7712%" y="373" width="0.2383%" height="15" fill="rgb(241,120,22)" fg:x="400" fg:w="3"/><text x="32.0212%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="31.8507%" y="357" width="0.1589%" height="15" fill="rgb(224,102,30)" fg:x="401" fg:w="2"/><text x="32.1007%" y="367.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="31.9301%" y="341" width="0.0794%" height="15" fill="rgb(210,164,37)" fg:x="402" fg:w="1"/><text x="32.1801%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.0095%" y="325" width="0.0794%" height="15" fill="rgb(226,191,16)" fg:x="403" fg:w="1"/><text x="32.2595%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="32.0095%" y="309" width="0.0794%" height="15" fill="rgb(214,40,45)" fg:x="403" fg:w="1"/><text x="32.2595%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="32.5655%" y="309" width="0.1589%" height="15" fill="rgb(244,29,26)" fg:x="410" fg:w="2"/><text x="32.8155%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="32.5655%" y="293" width="0.1589%" height="15" fill="rgb(216,16,5)" fg:x="410" fg:w="2"/><text x="32.8155%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="32.5655%" y="277" width="0.1589%" height="15" fill="rgb(249,76,35)" fg:x="410" fg:w="2"/><text x="32.8155%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (15 samples, 1.19%)</title><rect x="32.0890%" y="325" width="1.1914%" height="15" fill="rgb(207,11,44)" fg:x="404" fg:w="15"/><text x="32.3390%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (7 samples, 0.56%)</title><rect x="32.7244%" y="309" width="0.5560%" height="15" fill="rgb(228,190,49)" fg:x="412" fg:w="7"/><text x="32.9744%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (17 samples, 1.35%)</title><rect x="32.0095%" y="341" width="1.3503%" height="15" fill="rgb(214,173,12)" fg:x="403" fg:w="17"/><text x="32.2595%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="33.2804%" y="325" width="0.0794%" height="15" fill="rgb(218,26,35)" fg:x="419" fg:w="1"/><text x="33.5304%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.2804%" y="309" width="0.0794%" height="15" fill="rgb(220,200,19)" fg:x="419" fg:w="1"/><text x="33.5304%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.2804%" y="293" width="0.0794%" height="15" fill="rgb(239,95,49)" fg:x="419" fg:w="1"/><text x="33.5304%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.2804%" y="277" width="0.0794%" height="15" fill="rgb(235,85,53)" fg:x="419" fg:w="1"/><text x="33.5304%" y="287.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (22 samples, 1.75%)</title><rect x="31.7712%" y="405" width="1.7474%" height="15" fill="rgb(233,133,31)" fg:x="400" fg:w="22"/><text x="32.0212%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (19 samples, 1.51%)</title><rect x="32.0095%" y="389" width="1.5091%" height="15" fill="rgb(218,25,20)" fg:x="403" fg:w="19"/><text x="32.2595%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (19 samples, 1.51%)</title><rect x="32.0095%" y="373" width="1.5091%" height="15" fill="rgb(252,210,38)" fg:x="403" fg:w="19"/><text x="32.2595%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (19 samples, 1.51%)</title><rect x="32.0095%" y="357" width="1.5091%" height="15" fill="rgb(242,134,21)" fg:x="403" fg:w="19"/><text x="32.2595%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="33.3598%" y="341" width="0.1589%" height="15" fill="rgb(213,28,48)" fg:x="420" fg:w="2"/><text x="33.6098%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="33.3598%" y="325" width="0.1589%" height="15" fill="rgb(250,196,2)" fg:x="420" fg:w="2"/><text x="33.6098%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.4392%" y="309" width="0.0794%" height="15" fill="rgb(227,5,17)" fg:x="421" fg:w="1"/><text x="33.6892%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.4392%" y="293" width="0.0794%" height="15" fill="rgb(221,226,24)" fg:x="421" fg:w="1"/><text x="33.6892%" y="303.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="33.4392%" y="277" width="0.0794%" height="15" fill="rgb(211,5,48)" fg:x="421" fg:w="1"/><text x="33.6892%" y="287.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="33.4392%" y="261" width="0.0794%" height="15" fill="rgb(219,150,6)" fg:x="421" fg:w="1"/><text x="33.6892%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="33.5187%" y="325" width="0.1589%" height="15" fill="rgb(251,46,16)" fg:x="422" fg:w="2"/><text x="33.7687%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.5981%" y="309" width="0.0794%" height="15" fill="rgb(220,204,40)" fg:x="423" fg:w="1"/><text x="33.8481%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.5981%" y="293" width="0.0794%" height="15" fill="rgb(211,85,2)" fg:x="423" fg:w="1"/><text x="33.8481%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.5981%" y="277" width="0.0794%" height="15" fill="rgb(229,17,7)" fg:x="423" fg:w="1"/><text x="33.8481%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="33.5187%" y="357" width="0.2383%" height="15" fill="rgb(239,72,28)" fg:x="422" fg:w="3"/><text x="33.7687%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="33.5187%" y="341" width="0.2383%" height="15" fill="rgb(230,47,54)" fg:x="422" fg:w="3"/><text x="33.7687%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="33.6775%" y="325" width="0.0794%" height="15" fill="rgb(214,50,8)" fg:x="424" fg:w="1"/><text x="33.9275%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="33.7569%" y="357" width="0.1589%" height="15" fill="rgb(216,198,43)" fg:x="425" fg:w="2"/><text x="34.0069%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.9158%" y="325" width="0.0794%" height="15" fill="rgb(234,20,35)" fg:x="427" fg:w="1"/><text x="34.1658%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="33.9952%" y="325" width="0.0794%" height="15" fill="rgb(254,45,19)" fg:x="428" fg:w="1"/><text x="34.2452%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="33.9158%" y="357" width="0.2383%" height="15" fill="rgb(219,14,44)" fg:x="427" fg:w="3"/><text x="34.1658%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="33.9158%" y="341" width="0.2383%" height="15" fill="rgb(217,220,26)" fg:x="427" fg:w="3"/><text x="34.1658%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="34.0747%" y="325" width="0.0794%" height="15" fill="rgb(213,158,28)" fg:x="429" fg:w="1"/><text x="34.3247%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.0747%" y="309" width="0.0794%" height="15" fill="rgb(252,51,52)" fg:x="429" fg:w="1"/><text x="34.3247%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.0747%" y="293" width="0.0794%" height="15" fill="rgb(246,89,16)" fg:x="429" fg:w="1"/><text x="34.3247%" y="303.50"></text></g><g><title>__libc_free (5 samples, 0.40%)</title><rect x="34.2335%" y="325" width="0.3971%" height="15" fill="rgb(216,158,49)" fg:x="431" fg:w="5"/><text x="34.4835%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (16 samples, 1.27%)</title><rect x="34.6307%" y="325" width="1.2708%" height="15" fill="rgb(236,107,19)" fg:x="436" fg:w="16"/><text x="34.8807%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.8221%" y="309" width="0.0794%" height="15" fill="rgb(228,185,30)" fg:x="451" fg:w="1"/><text x="36.0721%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (22 samples, 1.75%)</title><rect x="34.2335%" y="341" width="1.7474%" height="15" fill="rgb(246,134,8)" fg:x="431" fg:w="22"/><text x="34.4835%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="35.9015%" y="325" width="0.0794%" height="15" fill="rgb(214,143,50)" fg:x="452" fg:w="1"/><text x="36.1515%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.9015%" y="309" width="0.0794%" height="15" fill="rgb(228,75,8)" fg:x="452" fg:w="1"/><text x="36.1515%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.64%)</title><rect x="35.9809%" y="341" width="0.6354%" height="15" fill="rgb(207,175,4)" fg:x="453" fg:w="8"/><text x="36.2309%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="36.1398%" y="325" width="0.4766%" height="15" fill="rgb(205,108,24)" fg:x="455" fg:w="6"/><text x="36.3898%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.3312%" y="309" width="0.0794%" height="15" fill="rgb(244,120,49)" fg:x="470" fg:w="1"/><text x="37.5812%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.3312%" y="293" width="0.0794%" height="15" fill="rgb(223,47,38)" fg:x="470" fg:w="1"/><text x="37.5812%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.3312%" y="277" width="0.0794%" height="15" fill="rgb(229,179,11)" fg:x="470" fg:w="1"/><text x="37.5812%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="38.2049%" y="277" width="0.2383%" height="15" fill="rgb(231,122,1)" fg:x="481" fg:w="3"/><text x="38.4549%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="38.2049%" y="261" width="0.2383%" height="15" fill="rgb(245,119,9)" fg:x="481" fg:w="3"/><text x="38.4549%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="38.2844%" y="245" width="0.1589%" height="15" fill="rgb(241,163,25)" fg:x="482" fg:w="2"/><text x="38.5344%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (14 samples, 1.11%)</title><rect x="37.4106%" y="309" width="1.1120%" height="15" fill="rgb(217,214,3)" fg:x="471" fg:w="14"/><text x="37.6606%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (8 samples, 0.64%)</title><rect x="37.8872%" y="293" width="0.6354%" height="15" fill="rgb(240,86,28)" fg:x="477" fg:w="8"/><text x="38.1372%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.4432%" y="277" width="0.0794%" height="15" fill="rgb(215,47,9)" fg:x="484" fg:w="1"/><text x="38.6932%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.4432%" y="261" width="0.0794%" height="15" fill="rgb(252,25,45)" fg:x="484" fg:w="1"/><text x="38.6932%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.4432%" y="245" width="0.0794%" height="15" fill="rgb(251,164,9)" fg:x="484" fg:w="1"/><text x="38.6932%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (37 samples, 2.94%)</title><rect x="36.6164%" y="341" width="2.9388%" height="15" fill="rgb(233,194,0)" fg:x="461" fg:w="37"/><text x="36.8664%" y="351.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (36 samples, 2.86%)</title><rect x="36.6958%" y="325" width="2.8594%" height="15" fill="rgb(249,111,24)" fg:x="462" fg:w="36"/><text x="36.9458%" y="335.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (13 samples, 1.03%)</title><rect x="38.5226%" y="309" width="1.0326%" height="15" fill="rgb(250,223,3)" fg:x="485" fg:w="13"/><text x="38.7726%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (12 samples, 0.95%)</title><rect x="38.6021%" y="293" width="0.9531%" height="15" fill="rgb(236,178,37)" fg:x="486" fg:w="12"/><text x="38.8521%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (12 samples, 0.95%)</title><rect x="38.6021%" y="277" width="0.9531%" height="15" fill="rgb(241,158,50)" fg:x="486" fg:w="12"/><text x="38.8521%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="39.5552%" y="341" width="0.1589%" height="15" fill="rgb(213,121,41)" fg:x="498" fg:w="2"/><text x="39.8052%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="39.6346%" y="325" width="0.0794%" height="15" fill="rgb(240,92,3)" fg:x="499" fg:w="1"/><text x="39.8846%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="39.8729%" y="245" width="0.0794%" height="15" fill="rgb(205,123,3)" fg:x="502" fg:w="1"/><text x="40.1229%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="41.2232%" y="229" width="0.5560%" height="15" fill="rgb(205,97,47)" fg:x="519" fg:w="7"/><text x="41.4732%" y="239.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="41.7792%" y="229" width="0.3177%" height="15" fill="rgb(247,152,14)" fg:x="526" fg:w="4"/><text x="42.0292%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.40%)</title><rect x="42.0969%" y="229" width="0.3971%" height="15" fill="rgb(248,195,53)" fg:x="530" fg:w="5"/><text x="42.3469%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="42.3352%" y="213" width="0.1589%" height="15" fill="rgb(226,201,16)" fg:x="533" fg:w="2"/><text x="42.5852%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="42.3352%" y="197" width="0.1589%" height="15" fill="rgb(205,98,0)" fg:x="533" fg:w="2"/><text x="42.5852%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="42.3352%" y="181" width="0.1589%" height="15" fill="rgb(214,191,48)" fg:x="533" fg:w="2"/><text x="42.5852%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (4 samples, 0.32%)</title><rect x="42.4940%" y="229" width="0.3177%" height="15" fill="rgb(237,112,39)" fg:x="535" fg:w="4"/><text x="42.7440%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="42.6529%" y="213" width="0.1589%" height="15" fill="rgb(247,203,27)" fg:x="537" fg:w="2"/><text x="42.9029%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="42.6529%" y="197" width="0.1589%" height="15" fill="rgb(235,124,28)" fg:x="537" fg:w="2"/><text x="42.9029%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="42.6529%" y="181" width="0.1589%" height="15" fill="rgb(208,207,46)" fg:x="537" fg:w="2"/><text x="42.9029%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="43.2883%" y="197" width="0.1589%" height="15" fill="rgb(234,176,4)" fg:x="545" fg:w="2"/><text x="43.5383%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.5266%" y="165" width="0.0794%" height="15" fill="rgb(230,133,28)" fg:x="548" fg:w="1"/><text x="43.7766%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="43.4472%" y="197" width="0.2383%" height="15" fill="rgb(211,137,40)" fg:x="547" fg:w="3"/><text x="43.6972%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.5266%" y="181" width="0.1589%" height="15" fill="rgb(254,35,13)" fg:x="548" fg:w="2"/><text x="43.7766%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.6060%" y="165" width="0.0794%" height="15" fill="rgb(225,49,51)" fg:x="549" fg:w="1"/><text x="43.8560%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.2415%" y="181" width="0.0794%" height="15" fill="rgb(251,10,15)" fg:x="557" fg:w="1"/><text x="44.4915%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (20 samples, 1.59%)</title><rect x="42.8118%" y="229" width="1.5886%" height="15" fill="rgb(228,207,15)" fg:x="539" fg:w="20"/><text x="43.0618%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (18 samples, 1.43%)</title><rect x="42.9706%" y="213" width="1.4297%" height="15" fill="rgb(241,99,19)" fg:x="541" fg:w="18"/><text x="43.2206%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (9 samples, 0.71%)</title><rect x="43.6855%" y="197" width="0.7149%" height="15" fill="rgb(207,104,49)" fg:x="550" fg:w="9"/><text x="43.9355%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="44.3209%" y="181" width="0.0794%" height="15" fill="rgb(234,99,18)" fg:x="558" fg:w="1"/><text x="44.5709%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="44.4003%" y="229" width="0.1589%" height="15" fill="rgb(213,191,49)" fg:x="559" fg:w="2"/><text x="44.6503%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="44.4003%" y="213" width="0.1589%" height="15" fill="rgb(210,226,19)" fg:x="559" fg:w="2"/><text x="44.6503%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="44.4003%" y="197" width="0.1589%" height="15" fill="rgb(229,97,18)" fg:x="559" fg:w="2"/><text x="44.6503%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.5592%" y="197" width="0.0794%" height="15" fill="rgb(211,167,15)" fg:x="561" fg:w="1"/><text x="44.8092%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (71 samples, 5.64%)</title><rect x="44.5592%" y="229" width="5.6394%" height="15" fill="rgb(210,169,34)" fg:x="561" fg:w="71"/><text x="44.8092%" y="239.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (71 samples, 5.64%)</title><rect x="44.5592%" y="213" width="5.6394%" height="15" fill="rgb(241,121,31)" fg:x="561" fg:w="71"/><text x="44.8092%" y="223.50">regex_a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (70 samples, 5.56%)</title><rect x="44.6386%" y="197" width="5.5600%" height="15" fill="rgb(232,40,11)" fg:x="562" fg:w="70"/><text x="44.8886%" y="207.50">alloc::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="50.1986%" y="229" width="0.1589%" height="15" fill="rgb(205,86,26)" fg:x="632" fg:w="2"/><text x="50.4486%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="50.3574%" y="229" width="0.0794%" height="15" fill="rgb(231,126,28)" fg:x="634" fg:w="1"/><text x="50.6074%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (142 samples, 11.28%)</title><rect x="39.7935%" y="325" width="11.2788%" height="15" fill="rgb(219,221,18)" fg:x="501" fg:w="142"/><text x="40.0435%" y="335.50">&lt;core::iter::adap..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (142 samples, 11.28%)</title><rect x="39.7935%" y="309" width="11.2788%" height="15" fill="rgb(211,40,0)" fg:x="501" fg:w="142"/><text x="40.0435%" y="319.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (142 samples, 11.28%)</title><rect x="39.7935%" y="293" width="11.2788%" height="15" fill="rgb(239,85,43)" fg:x="501" fg:w="142"/><text x="40.0435%" y="303.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (141 samples, 11.20%)</title><rect x="39.8729%" y="277" width="11.1994%" height="15" fill="rgb(231,55,21)" fg:x="502" fg:w="141"/><text x="40.1229%" y="287.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (141 samples, 11.20%)</title><rect x="39.8729%" y="261" width="11.1994%" height="15" fill="rgb(225,184,43)" fg:x="502" fg:w="141"/><text x="40.1229%" y="271.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (140 samples, 11.12%)</title><rect x="39.9523%" y="245" width="11.1199%" height="15" fill="rgb(251,158,41)" fg:x="503" fg:w="140"/><text x="40.2023%" y="255.50">regex_automata::..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (8 samples, 0.64%)</title><rect x="50.4369%" y="229" width="0.6354%" height="15" fill="rgb(234,159,37)" fg:x="635" fg:w="8"/><text x="50.6869%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="50.8340%" y="213" width="0.2383%" height="15" fill="rgb(216,204,22)" fg:x="640" fg:w="3"/><text x="51.0840%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="50.9134%" y="197" width="0.1589%" height="15" fill="rgb(214,17,3)" fg:x="641" fg:w="2"/><text x="51.1634%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.5488%" y="309" width="0.0794%" height="15" fill="rgb(212,111,17)" fg:x="649" fg:w="1"/><text x="51.7988%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.5488%" y="293" width="0.0794%" height="15" fill="rgb(221,157,24)" fg:x="649" fg:w="1"/><text x="51.7988%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.5488%" y="277" width="0.0794%" height="15" fill="rgb(252,16,13)" fg:x="649" fg:w="1"/><text x="51.7988%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (10 samples, 0.79%)</title><rect x="51.6283%" y="309" width="0.7943%" height="15" fill="rgb(221,62,2)" fg:x="650" fg:w="10"/><text x="51.8783%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="51.8666%" y="293" width="0.5560%" height="15" fill="rgb(247,87,22)" fg:x="653" fg:w="7"/><text x="52.1166%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="51.9460%" y="277" width="0.4766%" height="15" fill="rgb(215,73,9)" fg:x="654" fg:w="6"/><text x="52.1960%" y="287.50"></text></g><g><title>realloc (6 samples, 0.48%)</title><rect x="51.9460%" y="261" width="0.4766%" height="15" fill="rgb(207,175,33)" fg:x="654" fg:w="6"/><text x="52.1960%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (11 samples, 0.87%)</title><rect x="52.4226%" y="309" width="0.8737%" height="15" fill="rgb(243,129,54)" fg:x="660" fg:w="11"/><text x="52.6726%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="53.1374%" y="293" width="0.1589%" height="15" fill="rgb(227,119,45)" fg:x="669" fg:w="2"/><text x="53.3874%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.2168%" y="277" width="0.0794%" height="15" fill="rgb(205,109,36)" fg:x="670" fg:w="1"/><text x="53.4668%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.2168%" y="261" width="0.0794%" height="15" fill="rgb(205,6,39)" fg:x="670" fg:w="1"/><text x="53.4668%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (173 samples, 13.74%)</title><rect x="39.7141%" y="341" width="13.7411%" height="15" fill="rgb(221,32,16)" fg:x="500" fg:w="173"/><text x="39.9641%" y="351.50">regex_automata::nfa::..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (30 samples, 2.38%)</title><rect x="51.0723%" y="325" width="2.3828%" height="15" fill="rgb(228,144,50)" fg:x="643" fg:w="30"/><text x="51.3223%" y="335.50">re..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="53.2963%" y="309" width="0.1589%" height="15" fill="rgb(229,201,53)" fg:x="671" fg:w="2"/><text x="53.5463%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (244 samples, 19.38%)</title><rect x="34.1541%" y="357" width="19.3805%" height="15" fill="rgb(249,153,27)" fg:x="430" fg:w="244"/><text x="34.4041%" y="367.50">regex_automata::meta::strategy..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="53.4551%" y="341" width="0.0794%" height="15" fill="rgb(227,106,25)" fg:x="673" fg:w="1"/><text x="53.7051%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="53.4551%" y="325" width="0.0794%" height="15" fill="rgb(230,65,29)" fg:x="673" fg:w="1"/><text x="53.7051%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="53.5346%" y="309" width="0.1589%" height="15" fill="rgb(221,57,46)" fg:x="674" fg:w="2"/><text x="53.7846%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="53.5346%" y="325" width="0.3971%" height="15" fill="rgb(229,161,17)" fg:x="674" fg:w="5"/><text x="53.7846%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="53.6934%" y="309" width="0.2383%" height="15" fill="rgb(222,213,11)" fg:x="676" fg:w="3"/><text x="53.9434%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="53.6934%" y="293" width="0.2383%" height="15" fill="rgb(235,35,13)" fg:x="676" fg:w="3"/><text x="53.9434%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="53.6934%" y="277" width="0.2383%" height="15" fill="rgb(233,158,34)" fg:x="676" fg:w="3"/><text x="53.9434%" y="287.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="53.6934%" y="261" width="0.2383%" height="15" fill="rgb(215,151,48)" fg:x="676" fg:w="3"/><text x="53.9434%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="53.9317%" y="325" width="0.0794%" height="15" fill="rgb(229,84,14)" fg:x="679" fg:w="1"/><text x="54.1817%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="54.0111%" y="325" width="0.0794%" height="15" fill="rgb(229,68,14)" fg:x="680" fg:w="1"/><text x="54.2611%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="53.5346%" y="357" width="0.6354%" height="15" fill="rgb(243,106,26)" fg:x="674" fg:w="8"/><text x="53.7846%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="53.5346%" y="341" width="0.6354%" height="15" fill="rgb(206,45,38)" fg:x="674" fg:w="8"/><text x="53.7846%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="54.0905%" y="325" width="0.0794%" height="15" fill="rgb(226,6,15)" fg:x="681" fg:w="1"/><text x="54.3405%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="54.1700%" y="325" width="0.0794%" height="15" fill="rgb(232,22,54)" fg:x="682" fg:w="1"/><text x="54.4200%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.40%)</title><rect x="54.2494%" y="309" width="0.3971%" height="15" fill="rgb(229,222,32)" fg:x="683" fg:w="5"/><text x="54.4994%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.24%)</title><rect x="54.4083%" y="293" width="0.2383%" height="15" fill="rgb(228,62,29)" fg:x="685" fg:w="3"/><text x="54.6583%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="54.6465%" y="309" width="0.0794%" height="15" fill="rgb(251,103,34)" fg:x="688" fg:w="1"/><text x="54.8965%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.6465%" y="293" width="0.0794%" height="15" fill="rgb(233,12,30)" fg:x="688" fg:w="1"/><text x="54.8965%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.6465%" y="277" width="0.0794%" height="15" fill="rgb(238,52,0)" fg:x="688" fg:w="1"/><text x="54.8965%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.6465%" y="261" width="0.0794%" height="15" fill="rgb(223,98,5)" fg:x="688" fg:w="1"/><text x="54.8965%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.56%)</title><rect x="54.2494%" y="325" width="0.5560%" height="15" fill="rgb(228,75,37)" fg:x="683" fg:w="7"/><text x="54.4994%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="54.7260%" y="309" width="0.0794%" height="15" fill="rgb(205,115,49)" fg:x="689" fg:w="1"/><text x="54.9760%" y="319.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="54.7260%" y="293" width="0.0794%" height="15" fill="rgb(250,154,43)" fg:x="689" fg:w="1"/><text x="54.9760%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="54.7260%" y="277" width="0.0794%" height="15" fill="rgb(226,43,29)" fg:x="689" fg:w="1"/><text x="54.9760%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.9643%" y="293" width="0.0794%" height="15" fill="rgb(249,228,39)" fg:x="692" fg:w="1"/><text x="55.2143%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::concat (3 samples, 0.24%)</title><rect x="54.8848%" y="309" width="0.2383%" height="15" fill="rgb(216,79,43)" fg:x="691" fg:w="3"/><text x="55.1348%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="55.0437%" y="293" width="0.0794%" height="15" fill="rgb(228,95,12)" fg:x="693" fg:w="1"/><text x="55.2937%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.0437%" y="277" width="0.0794%" height="15" fill="rgb(249,221,15)" fg:x="693" fg:w="1"/><text x="55.2937%" y="287.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="55.1231%" y="309" width="0.0794%" height="15" fill="rgb(233,34,13)" fg:x="694" fg:w="1"/><text x="55.3731%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.1231%" y="293" width="0.0794%" height="15" fill="rgb(214,103,39)" fg:x="694" fg:w="1"/><text x="55.3731%" y="303.50"></text></g><g><title>indefinite::rules::number::Number::check (301 samples, 23.91%)</title><rect x="31.3741%" y="421" width="23.9079%" height="15" fill="rgb(251,126,39)" fg:x="395" fg:w="301"/><text x="31.6241%" y="431.50">indefinite::rules::number::Number::che..</text></g><g><title>regex::regex::string::Regex::new (274 samples, 21.76%)</title><rect x="33.5187%" y="405" width="21.7633%" height="15" fill="rgb(214,216,36)" fg:x="422" fg:w="274"/><text x="33.7687%" y="415.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (274 samples, 21.76%)</title><rect x="33.5187%" y="389" width="21.7633%" height="15" fill="rgb(220,221,8)" fg:x="422" fg:w="274"/><text x="33.7687%" y="399.50">regex::builders::Builder::build_on..</text></g><g><title>regex_automata::meta::regex::Builder::build (274 samples, 21.76%)</title><rect x="33.5187%" y="373" width="21.7633%" height="15" fill="rgb(240,216,3)" fg:x="422" fg:w="274"/><text x="33.7687%" y="383.50">regex_automata::meta::regex::Build..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (14 samples, 1.11%)</title><rect x="54.1700%" y="357" width="1.1120%" height="15" fill="rgb(232,218,17)" fg:x="682" fg:w="14"/><text x="54.4200%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (14 samples, 1.11%)</title><rect x="54.1700%" y="341" width="1.1120%" height="15" fill="rgb(229,163,45)" fg:x="682" fg:w="14"/><text x="54.4200%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (6 samples, 0.48%)</title><rect x="54.8054%" y="325" width="0.4766%" height="15" fill="rgb(231,110,42)" fg:x="690" fg:w="6"/><text x="55.0554%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_expr (1 samples, 0.08%)</title><rect x="55.2025%" y="309" width="0.0794%" height="15" fill="rgb(208,170,48)" fg:x="695" fg:w="1"/><text x="55.4525%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="55.2820%" y="357" width="0.0794%" height="15" fill="rgb(239,116,25)" fg:x="696" fg:w="1"/><text x="55.5320%" y="367.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="55.2820%" y="341" width="0.0794%" height="15" fill="rgb(219,200,50)" fg:x="696" fg:w="1"/><text x="55.5320%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="55.2820%" y="325" width="0.0794%" height="15" fill="rgb(245,200,0)" fg:x="696" fg:w="1"/><text x="55.5320%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="55.2820%" y="389" width="0.1589%" height="15" fill="rgb(245,119,33)" fg:x="696" fg:w="2"/><text x="55.5320%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="55.2820%" y="373" width="0.1589%" height="15" fill="rgb(231,125,12)" fg:x="696" fg:w="2"/><text x="55.5320%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="55.3614%" y="357" width="0.0794%" height="15" fill="rgb(216,96,41)" fg:x="697" fg:w="1"/><text x="55.6114%" y="367.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="55.3614%" y="341" width="0.0794%" height="15" fill="rgb(248,43,45)" fg:x="697" fg:w="1"/><text x="55.6114%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.3614%" y="325" width="0.0794%" height="15" fill="rgb(217,222,7)" fg:x="697" fg:w="1"/><text x="55.6114%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.3614%" y="309" width="0.0794%" height="15" fill="rgb(233,28,6)" fg:x="697" fg:w="1"/><text x="55.6114%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.3614%" y="293" width="0.0794%" height="15" fill="rgb(231,218,15)" fg:x="697" fg:w="1"/><text x="55.6114%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.4408%" y="309" width="0.0794%" height="15" fill="rgb(226,171,48)" fg:x="698" fg:w="1"/><text x="55.6908%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="55.4408%" y="357" width="0.1589%" height="15" fill="rgb(235,201,9)" fg:x="698" fg:w="2"/><text x="55.6908%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="55.4408%" y="341" width="0.1589%" height="15" fill="rgb(217,80,15)" fg:x="698" fg:w="2"/><text x="55.6908%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="55.4408%" y="325" width="0.1589%" height="15" fill="rgb(219,152,8)" fg:x="698" fg:w="2"/><text x="55.6908%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.5203%" y="309" width="0.0794%" height="15" fill="rgb(243,107,38)" fg:x="699" fg:w="1"/><text x="55.7703%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="55.5997%" y="341" width="0.0794%" height="15" fill="rgb(231,17,5)" fg:x="700" fg:w="1"/><text x="55.8497%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.5997%" y="325" width="0.0794%" height="15" fill="rgb(209,25,54)" fg:x="700" fg:w="1"/><text x="55.8497%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.6791%" y="325" width="0.0794%" height="15" fill="rgb(219,0,2)" fg:x="701" fg:w="1"/><text x="55.9291%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.6791%" y="309" width="0.0794%" height="15" fill="rgb(246,9,5)" fg:x="701" fg:w="1"/><text x="55.9291%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="55.4408%" y="389" width="0.4766%" height="15" fill="rgb(226,159,4)" fg:x="698" fg:w="6"/><text x="55.6908%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="55.4408%" y="373" width="0.4766%" height="15" fill="rgb(219,175,34)" fg:x="698" fg:w="6"/><text x="55.6908%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="55.5997%" y="357" width="0.3177%" height="15" fill="rgb(236,10,46)" fg:x="700" fg:w="4"/><text x="55.8497%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="55.6791%" y="341" width="0.2383%" height="15" fill="rgb(240,211,16)" fg:x="701" fg:w="3"/><text x="55.9291%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="55.7585%" y="325" width="0.1589%" height="15" fill="rgb(205,3,43)" fg:x="702" fg:w="2"/><text x="56.0085%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="55.9174%" y="373" width="0.0794%" height="15" fill="rgb(245,7,22)" fg:x="704" fg:w="1"/><text x="56.1674%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.9174%" y="357" width="0.0794%" height="15" fill="rgb(239,132,32)" fg:x="704" fg:w="1"/><text x="56.1674%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.9174%" y="341" width="0.0794%" height="15" fill="rgb(228,202,34)" fg:x="704" fg:w="1"/><text x="56.1674%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.9174%" y="325" width="0.0794%" height="15" fill="rgb(254,200,22)" fg:x="704" fg:w="1"/><text x="56.1674%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="56.0763%" y="341" width="0.2383%" height="15" fill="rgb(219,10,39)" fg:x="706" fg:w="3"/><text x="56.3263%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="56.0763%" y="325" width="0.2383%" height="15" fill="rgb(226,210,39)" fg:x="706" fg:w="3"/><text x="56.3263%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.2351%" y="309" width="0.0794%" height="15" fill="rgb(208,219,16)" fg:x="708" fg:w="1"/><text x="56.4851%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.2351%" y="293" width="0.0794%" height="15" fill="rgb(216,158,51)" fg:x="708" fg:w="1"/><text x="56.4851%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.2351%" y="277" width="0.0794%" height="15" fill="rgb(233,14,44)" fg:x="708" fg:w="1"/><text x="56.4851%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.2351%" y="261" width="0.0794%" height="15" fill="rgb(237,97,39)" fg:x="708" fg:w="1"/><text x="56.4851%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.3145%" y="341" width="0.0794%" height="15" fill="rgb(218,198,43)" fg:x="709" fg:w="1"/><text x="56.5645%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.3940%" y="341" width="0.0794%" height="15" fill="rgb(231,104,20)" fg:x="710" fg:w="1"/><text x="56.6440%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.5528%" y="309" width="0.0794%" height="15" fill="rgb(254,36,13)" fg:x="712" fg:w="1"/><text x="56.8028%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="56.4734%" y="341" width="0.2383%" height="15" fill="rgb(248,14,50)" fg:x="711" fg:w="3"/><text x="56.7234%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="56.4734%" y="325" width="0.2383%" height="15" fill="rgb(217,107,29)" fg:x="711" fg:w="3"/><text x="56.7234%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="56.6322%" y="309" width="0.0794%" height="15" fill="rgb(251,169,33)" fg:x="713" fg:w="1"/><text x="56.8822%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.6322%" y="293" width="0.0794%" height="15" fill="rgb(217,108,32)" fg:x="713" fg:w="1"/><text x="56.8822%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="56.6322%" y="277" width="0.0794%" height="15" fill="rgb(219,66,42)" fg:x="713" fg:w="1"/><text x="56.8822%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.6322%" y="261" width="0.0794%" height="15" fill="rgb(206,180,7)" fg:x="713" fg:w="1"/><text x="56.8822%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="57.0294%" y="309" width="0.5560%" height="15" fill="rgb(208,226,31)" fg:x="718" fg:w="7"/><text x="57.2794%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (12 samples, 0.95%)</title><rect x="56.8705%" y="325" width="0.9531%" height="15" fill="rgb(218,26,49)" fg:x="716" fg:w="12"/><text x="57.1205%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (3 samples, 0.24%)</title><rect x="57.5854%" y="309" width="0.2383%" height="15" fill="rgb(233,197,48)" fg:x="725" fg:w="3"/><text x="57.8354%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="57.6648%" y="293" width="0.1589%" height="15" fill="rgb(252,181,51)" fg:x="726" fg:w="2"/><text x="57.9148%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="57.7442%" y="277" width="0.0794%" height="15" fill="rgb(253,90,19)" fg:x="727" fg:w="1"/><text x="57.9942%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.7442%" y="261" width="0.0794%" height="15" fill="rgb(215,171,30)" fg:x="727" fg:w="1"/><text x="57.9942%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.7442%" y="245" width="0.0794%" height="15" fill="rgb(214,222,9)" fg:x="727" fg:w="1"/><text x="57.9942%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="57.8237%" y="325" width="0.0794%" height="15" fill="rgb(223,3,22)" fg:x="728" fg:w="1"/><text x="58.0737%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="57.9031%" y="293" width="0.0794%" height="15" fill="rgb(225,196,46)" fg:x="729" fg:w="1"/><text x="58.1531%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.9031%" y="277" width="0.0794%" height="15" fill="rgb(209,110,37)" fg:x="729" fg:w="1"/><text x="58.1531%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.9031%" y="261" width="0.0794%" height="15" fill="rgb(249,89,12)" fg:x="729" fg:w="1"/><text x="58.1531%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.9031%" y="245" width="0.0794%" height="15" fill="rgb(226,27,33)" fg:x="729" fg:w="1"/><text x="58.1531%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="57.9825%" y="293" width="0.0794%" height="15" fill="rgb(213,82,22)" fg:x="730" fg:w="1"/><text x="58.2325%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="57.9031%" y="309" width="0.2383%" height="15" fill="rgb(248,140,0)" fg:x="729" fg:w="3"/><text x="58.1531%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="58.0620%" y="293" width="0.0794%" height="15" fill="rgb(228,106,3)" fg:x="731" fg:w="1"/><text x="58.3120%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="58.0620%" y="277" width="0.0794%" height="15" fill="rgb(209,23,37)" fg:x="731" fg:w="1"/><text x="58.3120%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="58.1414%" y="309" width="0.0794%" height="15" fill="rgb(241,93,50)" fg:x="732" fg:w="1"/><text x="58.3914%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="58.3002%" y="293" width="0.0794%" height="15" fill="rgb(253,46,43)" fg:x="734" fg:w="1"/><text x="58.5502%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="58.3002%" y="277" width="0.0794%" height="15" fill="rgb(226,206,43)" fg:x="734" fg:w="1"/><text x="58.5502%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.3797%" y="293" width="0.0794%" height="15" fill="rgb(217,54,7)" fg:x="735" fg:w="1"/><text x="58.6297%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="58.4591%" y="293" width="0.4766%" height="15" fill="rgb(223,5,52)" fg:x="736" fg:w="6"/><text x="58.7091%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="58.8562%" y="277" width="0.0794%" height="15" fill="rgb(206,52,46)" fg:x="741" fg:w="1"/><text x="59.1062%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="58.8562%" y="261" width="0.0794%" height="15" fill="rgb(253,136,11)" fg:x="741" fg:w="1"/><text x="59.1062%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="58.9357%" y="293" width="0.0794%" height="15" fill="rgb(208,106,33)" fg:x="742" fg:w="1"/><text x="59.1857%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (30 samples, 2.38%)</title><rect x="56.7117%" y="341" width="2.3828%" height="15" fill="rgb(206,54,4)" fg:x="714" fg:w="30"/><text x="56.9617%" y="351.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (15 samples, 1.19%)</title><rect x="57.9031%" y="325" width="1.1914%" height="15" fill="rgb(213,3,15)" fg:x="729" fg:w="15"/><text x="58.1531%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.87%)</title><rect x="58.2208%" y="309" width="0.8737%" height="15" fill="rgb(252,211,39)" fg:x="733" fg:w="11"/><text x="58.4708%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="59.0151%" y="293" width="0.0794%" height="15" fill="rgb(223,6,36)" fg:x="743" fg:w="1"/><text x="59.2651%" y="303.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="59.0151%" y="277" width="0.0794%" height="15" fill="rgb(252,169,45)" fg:x="743" fg:w="1"/><text x="59.2651%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.0151%" y="261" width="0.0794%" height="15" fill="rgb(212,48,26)" fg:x="743" fg:w="1"/><text x="59.2651%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.0151%" y="245" width="0.0794%" height="15" fill="rgb(251,102,48)" fg:x="743" fg:w="1"/><text x="59.2651%" y="255.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="59.4917%" y="293" width="0.1589%" height="15" fill="rgb(243,208,16)" fg:x="749" fg:w="2"/><text x="59.7417%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.4917%" y="277" width="0.1589%" height="15" fill="rgb(219,96,24)" fg:x="749" fg:w="2"/><text x="59.7417%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.4917%" y="261" width="0.1589%" height="15" fill="rgb(219,33,29)" fg:x="749" fg:w="2"/><text x="59.7417%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="59.4917%" y="245" width="0.1589%" height="15" fill="rgb(223,176,5)" fg:x="749" fg:w="2"/><text x="59.7417%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="59.6505%" y="293" width="0.0794%" height="15" fill="rgb(228,140,14)" fg:x="751" fg:w="1"/><text x="59.9005%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="59.6505%" y="277" width="0.0794%" height="15" fill="rgb(217,179,31)" fg:x="751" fg:w="1"/><text x="59.9005%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="59.7299%" y="293" width="0.1589%" height="15" fill="rgb(230,9,30)" fg:x="752" fg:w="2"/><text x="59.9799%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="59.8094%" y="277" width="0.0794%" height="15" fill="rgb(230,136,20)" fg:x="753" fg:w="1"/><text x="60.0594%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.71%)</title><rect x="59.2534%" y="309" width="0.7149%" height="15" fill="rgb(215,210,22)" fg:x="746" fg:w="9"/><text x="59.5034%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="59.8888%" y="293" width="0.0794%" height="15" fill="rgb(218,43,5)" fg:x="754" fg:w="1"/><text x="60.1388%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.8888%" y="277" width="0.0794%" height="15" fill="rgb(216,11,5)" fg:x="754" fg:w="1"/><text x="60.1388%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.8888%" y="261" width="0.0794%" height="15" fill="rgb(209,82,29)" fg:x="754" fg:w="1"/><text x="60.1388%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.8888%" y="245" width="0.0794%" height="15" fill="rgb(244,115,12)" fg:x="754" fg:w="1"/><text x="60.1388%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="59.9682%" y="293" width="0.0794%" height="15" fill="rgb(222,82,18)" fg:x="755" fg:w="1"/><text x="60.2182%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.03%)</title><rect x="59.0945%" y="341" width="1.0326%" height="15" fill="rgb(249,227,8)" fg:x="744" fg:w="13"/><text x="59.3445%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.03%)</title><rect x="59.0945%" y="325" width="1.0326%" height="15" fill="rgb(253,141,45)" fg:x="744" fg:w="13"/><text x="59.3445%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="59.9682%" y="309" width="0.1589%" height="15" fill="rgb(234,184,4)" fg:x="755" fg:w="2"/><text x="60.2182%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.0477%" y="293" width="0.0794%" height="15" fill="rgb(218,194,23)" fg:x="756" fg:w="1"/><text x="60.2977%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.0477%" y="277" width="0.0794%" height="15" fill="rgb(235,66,41)" fg:x="756" fg:w="1"/><text x="60.2977%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="60.1271%" y="309" width="0.1589%" height="15" fill="rgb(245,217,1)" fg:x="757" fg:w="2"/><text x="60.3771%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="60.1271%" y="293" width="0.1589%" height="15" fill="rgb(229,91,1)" fg:x="757" fg:w="2"/><text x="60.3771%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="60.2859%" y="277" width="0.0794%" height="15" fill="rgb(207,101,30)" fg:x="759" fg:w="1"/><text x="60.5359%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (55 samples, 4.37%)</title><rect x="56.0763%" y="357" width="4.3685%" height="15" fill="rgb(223,82,49)" fg:x="706" fg:w="55"/><text x="56.3263%" y="367.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="60.1271%" y="341" width="0.3177%" height="15" fill="rgb(218,167,17)" fg:x="757" fg:w="4"/><text x="60.3771%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="60.1271%" y="325" width="0.3177%" height="15" fill="rgb(208,103,14)" fg:x="757" fg:w="4"/><text x="60.3771%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="60.2859%" y="309" width="0.1589%" height="15" fill="rgb(238,20,8)" fg:x="759" fg:w="2"/><text x="60.5359%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="60.2859%" y="293" width="0.1589%" height="15" fill="rgb(218,80,54)" fg:x="759" fg:w="2"/><text x="60.5359%" y="303.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="60.3654%" y="277" width="0.0794%" height="15" fill="rgb(240,144,17)" fg:x="760" fg:w="1"/><text x="60.6154%" y="287.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="60.3654%" y="261" width="0.0794%" height="15" fill="rgb(245,27,50)" fg:x="760" fg:w="1"/><text x="60.6154%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (58 samples, 4.61%)</title><rect x="55.9174%" y="389" width="4.6068%" height="15" fill="rgb(251,51,7)" fg:x="704" fg:w="58"/><text x="56.1674%" y="399.50">regex..</text></g><g><title>regex::builders::Builder::build_one_string (57 samples, 4.53%)</title><rect x="55.9968%" y="373" width="4.5274%" height="15" fill="rgb(245,217,29)" fg:x="705" fg:w="57"/><text x="56.2468%" y="383.50">regex..</text></g><g><title>regex_automata::meta::regex::Config::utf8_empty (1 samples, 0.08%)</title><rect x="60.4448%" y="357" width="0.0794%" height="15" fill="rgb(221,176,29)" fg:x="761" fg:w="1"/><text x="60.6948%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="61.0008%" y="309" width="0.1589%" height="15" fill="rgb(212,180,24)" fg:x="768" fg:w="2"/><text x="61.2508%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="61.0008%" y="293" width="0.1589%" height="15" fill="rgb(254,24,2)" fg:x="768" fg:w="2"/><text x="61.2508%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="61.0802%" y="277" width="0.0794%" height="15" fill="rgb(230,100,2)" fg:x="769" fg:w="1"/><text x="61.3302%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.0802%" y="261" width="0.0794%" height="15" fill="rgb(219,142,25)" fg:x="769" fg:w="1"/><text x="61.3302%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="61.1597%" y="309" width="0.0794%" height="15" fill="rgb(240,73,43)" fg:x="770" fg:w="1"/><text x="61.4097%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="60.6831%" y="325" width="0.6354%" height="15" fill="rgb(214,114,15)" fg:x="764" fg:w="8"/><text x="60.9331%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="61.2391%" y="309" width="0.0794%" height="15" fill="rgb(207,130,4)" fg:x="771" fg:w="1"/><text x="61.4891%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.2391%" y="293" width="0.0794%" height="15" fill="rgb(221,25,40)" fg:x="771" fg:w="1"/><text x="61.4891%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (77 samples, 6.12%)</title><rect x="55.2820%" y="405" width="6.1160%" height="15" fill="rgb(241,184,7)" fg:x="696" fg:w="77"/><text x="55.5320%" y="415.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.87%)</title><rect x="60.5242%" y="389" width="0.8737%" height="15" fill="rgb(235,159,4)" fg:x="762" fg:w="11"/><text x="60.7742%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.79%)</title><rect x="60.6037%" y="373" width="0.7943%" height="15" fill="rgb(214,87,48)" fg:x="763" fg:w="10"/><text x="60.8537%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.79%)</title><rect x="60.6037%" y="357" width="0.7943%" height="15" fill="rgb(246,198,24)" fg:x="763" fg:w="10"/><text x="60.8537%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.71%)</title><rect x="60.6831%" y="341" width="0.7149%" height="15" fill="rgb(209,66,40)" fg:x="764" fg:w="9"/><text x="60.9331%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="61.3185%" y="325" width="0.0794%" height="15" fill="rgb(233,147,39)" fg:x="772" fg:w="1"/><text x="61.5685%" y="335.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (604 samples, 47.97%)</title><rect x="13.5822%" y="501" width="47.9746%" height="15" fill="rgb(231,145,52)" fg:x="171" fg:w="604"/><text x="13.8322%" y="511.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies:..</text></g><g><title>plugins_core::looking::model::qualify_name (588 samples, 46.70%)</title><rect x="14.8531%" y="485" width="46.7037%" height="15" fill="rgb(206,20,26)" fg:x="187" fg:w="588"/><text x="15.1031%" y="495.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (588 samples, 46.70%)</title><rect x="14.8531%" y="469" width="46.7037%" height="15" fill="rgb(238,220,4)" fg:x="187" fg:w="588"/><text x="15.1031%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (588 samples, 46.70%)</title><rect x="14.8531%" y="453" width="46.7037%" height="15" fill="rgb(252,195,42)" fg:x="187" fg:w="588"/><text x="15.1031%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (584 samples, 46.39%)</title><rect x="15.1708%" y="437" width="46.3860%" height="15" fill="rgb(209,10,6)" fg:x="191" fg:w="584"/><text x="15.4208%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (79 samples, 6.27%)</title><rect x="55.2820%" y="421" width="6.2748%" height="15" fill="rgb(229,3,52)" fg:x="696" fg:w="79"/><text x="55.5320%" y="431.50">indefini..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="61.3979%" y="405" width="0.1589%" height="15" fill="rgb(253,49,37)" fg:x="773" fg:w="2"/><text x="61.6479%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (2 samples, 0.16%)</title><rect x="61.5568%" y="501" width="0.1589%" height="15" fill="rgb(240,103,49)" fg:x="775" fg:w="2"/><text x="61.8068%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="61.5568%" y="485" width="0.1589%" height="15" fill="rgb(250,182,30)" fg:x="775" fg:w="2"/><text x="61.8068%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="61.5568%" y="469" width="0.1589%" height="15" fill="rgb(248,8,30)" fg:x="775" fg:w="2"/><text x="61.8068%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="61.5568%" y="453" width="0.1589%" height="15" fill="rgb(237,120,30)" fg:x="775" fg:w="2"/><text x="61.8068%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="61.5568%" y="437" width="0.1589%" height="15" fill="rgb(221,146,34)" fg:x="775" fg:w="2"/><text x="61.8068%" y="447.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="61.5568%" y="421" width="0.1589%" height="15" fill="rgb(242,55,13)" fg:x="775" fg:w="2"/><text x="61.8068%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="61.5568%" y="405" width="0.1589%" height="15" fill="rgb(242,112,31)" fg:x="775" fg:w="2"/><text x="61.8068%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="61.5568%" y="389" width="0.1589%" height="15" fill="rgb(249,192,27)" fg:x="775" fg:w="2"/><text x="61.8068%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="61.5568%" y="373" width="0.1589%" height="15" fill="rgb(208,204,44)" fg:x="775" fg:w="2"/><text x="61.8068%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="61.5568%" y="357" width="0.1589%" height="15" fill="rgb(208,93,54)" fg:x="775" fg:w="2"/><text x="61.8068%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="61.5568%" y="341" width="0.1589%" height="15" fill="rgb(242,1,31)" fg:x="775" fg:w="2"/><text x="61.8068%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="61.5568%" y="325" width="0.1589%" height="15" fill="rgb(241,83,25)" fg:x="775" fg:w="2"/><text x="61.8068%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="61.5568%" y="309" width="0.1589%" height="15" fill="rgb(205,169,50)" fg:x="775" fg:w="2"/><text x="61.8068%" y="319.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="61.5568%" y="293" width="0.1589%" height="15" fill="rgb(239,186,37)" fg:x="775" fg:w="2"/><text x="61.8068%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="61.5568%" y="277" width="0.1589%" height="15" fill="rgb(205,221,10)" fg:x="775" fg:w="2"/><text x="61.8068%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="61.5568%" y="261" width="0.1589%" height="15" fill="rgb(218,196,15)" fg:x="775" fg:w="2"/><text x="61.8068%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="61.5568%" y="245" width="0.1589%" height="15" fill="rgb(218,196,35)" fg:x="775" fg:w="2"/><text x="61.8068%" y="255.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="61.5568%" y="229" width="0.1589%" height="15" fill="rgb(233,63,24)" fg:x="775" fg:w="2"/><text x="61.8068%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="61.5568%" y="213" width="0.1589%" height="15" fill="rgb(225,8,4)" fg:x="775" fg:w="2"/><text x="61.8068%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="61.5568%" y="197" width="0.1589%" height="15" fill="rgb(234,105,35)" fg:x="775" fg:w="2"/><text x="61.8068%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="61.5568%" y="181" width="0.1589%" height="15" fill="rgb(236,21,32)" fg:x="775" fg:w="2"/><text x="61.8068%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="61.5568%" y="165" width="0.1589%" height="15" fill="rgb(228,109,6)" fg:x="775" fg:w="2"/><text x="61.8068%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="61.5568%" y="149" width="0.1589%" height="15" fill="rgb(229,215,31)" fg:x="775" fg:w="2"/><text x="61.8068%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="61.5568%" y="133" width="0.1589%" height="15" fill="rgb(221,52,54)" fg:x="775" fg:w="2"/><text x="61.8068%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.16%)</title><rect x="61.5568%" y="117" width="0.1589%" height="15" fill="rgb(252,129,43)" fg:x="775" fg:w="2"/><text x="61.8068%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="61.5568%" y="101" width="0.1589%" height="15" fill="rgb(248,183,27)" fg:x="775" fg:w="2"/><text x="61.8068%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.16%)</title><rect x="61.5568%" y="85" width="0.1589%" height="15" fill="rgb(250,0,22)" fg:x="775" fg:w="2"/><text x="61.8068%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.16%)</title><rect x="61.5568%" y="69" width="0.1589%" height="15" fill="rgb(213,166,10)" fg:x="775" fg:w="2"/><text x="61.8068%" y="79.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.16%)</title><rect x="61.5568%" y="53" width="0.1589%" height="15" fill="rgb(207,163,36)" fg:x="775" fg:w="2"/><text x="61.8068%" y="63.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="61.5568%" y="37" width="0.1589%" height="15" fill="rgb(208,122,22)" fg:x="775" fg:w="2"/><text x="61.8068%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (2 samples, 0.16%)</title><rect x="61.7156%" y="501" width="0.1589%" height="15" fill="rgb(207,104,49)" fg:x="777" fg:w="2"/><text x="61.9656%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="61.7951%" y="485" width="0.0794%" height="15" fill="rgb(248,211,50)" fg:x="778" fg:w="1"/><text x="62.0451%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.8745%" y="437" width="0.0794%" height="15" fill="rgb(217,13,45)" fg:x="779" fg:w="1"/><text x="62.1245%" y="447.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="61.8745%" y="469" width="0.1589%" height="15" fill="rgb(211,216,49)" fg:x="779" fg:w="2"/><text x="62.1245%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.8745%" y="453" width="0.1589%" height="15" fill="rgb(221,58,53)" fg:x="779" fg:w="2"/><text x="62.1245%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.9539%" y="437" width="0.0794%" height="15" fill="rgb(220,112,41)" fg:x="780" fg:w="1"/><text x="62.2039%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.9539%" y="421" width="0.0794%" height="15" fill="rgb(236,38,28)" fg:x="780" fg:w="1"/><text x="62.2039%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.9539%" y="405" width="0.0794%" height="15" fill="rgb(227,195,22)" fg:x="780" fg:w="1"/><text x="62.2039%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.9539%" y="389" width="0.0794%" height="15" fill="rgb(214,55,33)" fg:x="780" fg:w="1"/><text x="62.2039%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.9539%" y="373" width="0.0794%" height="15" fill="rgb(248,80,13)" fg:x="780" fg:w="1"/><text x="62.2039%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.9539%" y="357" width="0.0794%" height="15" fill="rgb(238,52,6)" fg:x="780" fg:w="1"/><text x="62.2039%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.9539%" y="341" width="0.0794%" height="15" fill="rgb(224,198,47)" fg:x="780" fg:w="1"/><text x="62.2039%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.9539%" y="325" width="0.0794%" height="15" fill="rgb(233,171,20)" fg:x="780" fg:w="1"/><text x="62.2039%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.9539%" y="309" width="0.0794%" height="15" fill="rgb(241,30,25)" fg:x="780" fg:w="1"/><text x="62.2039%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.9539%" y="293" width="0.0794%" height="15" fill="rgb(207,171,38)" fg:x="780" fg:w="1"/><text x="62.2039%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.9539%" y="277" width="0.0794%" height="15" fill="rgb(234,70,1)" fg:x="780" fg:w="1"/><text x="62.2039%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.9539%" y="261" width="0.0794%" height="15" fill="rgb(232,178,18)" fg:x="780" fg:w="1"/><text x="62.2039%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.9539%" y="245" width="0.0794%" height="15" fill="rgb(241,78,40)" fg:x="780" fg:w="1"/><text x="62.2039%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.9539%" y="229" width="0.0794%" height="15" fill="rgb(222,35,25)" fg:x="780" fg:w="1"/><text x="62.2039%" y="239.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="62.0334%" y="373" width="0.1589%" height="15" fill="rgb(207,92,16)" fg:x="781" fg:w="2"/><text x="62.2834%" y="383.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="62.0334%" y="357" width="0.1589%" height="15" fill="rgb(216,59,51)" fg:x="781" fg:w="2"/><text x="62.2834%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="62.1128%" y="341" width="0.0794%" height="15" fill="rgb(213,80,28)" fg:x="782" fg:w="1"/><text x="62.3628%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.1128%" y="325" width="0.0794%" height="15" fill="rgb(220,93,7)" fg:x="782" fg:w="1"/><text x="62.3628%" y="335.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.1128%" y="309" width="0.0794%" height="15" fill="rgb(225,24,44)" fg:x="782" fg:w="1"/><text x="62.3628%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.1128%" y="293" width="0.0794%" height="15" fill="rgb(243,74,40)" fg:x="782" fg:w="1"/><text x="62.3628%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.1128%" y="277" width="0.0794%" height="15" fill="rgb(228,39,7)" fg:x="782" fg:w="1"/><text x="62.3628%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.1128%" y="261" width="0.0794%" height="15" fill="rgb(227,79,8)" fg:x="782" fg:w="1"/><text x="62.3628%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.1128%" y="245" width="0.0794%" height="15" fill="rgb(236,58,11)" fg:x="782" fg:w="1"/><text x="62.3628%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.1128%" y="229" width="0.0794%" height="15" fill="rgb(249,63,35)" fg:x="782" fg:w="1"/><text x="62.3628%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.1128%" y="213" width="0.0794%" height="15" fill="rgb(252,114,16)" fg:x="782" fg:w="1"/><text x="62.3628%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.1128%" y="197" width="0.0794%" height="15" fill="rgb(254,151,24)" fg:x="782" fg:w="1"/><text x="62.3628%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.1128%" y="181" width="0.0794%" height="15" fill="rgb(253,54,39)" fg:x="782" fg:w="1"/><text x="62.3628%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.1128%" y="165" width="0.0794%" height="15" fill="rgb(243,25,45)" fg:x="782" fg:w="1"/><text x="62.3628%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.1128%" y="149" width="0.0794%" height="15" fill="rgb(234,134,9)" fg:x="782" fg:w="1"/><text x="62.3628%" y="159.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="62.1922%" y="357" width="0.0794%" height="15" fill="rgb(227,166,31)" fg:x="783" fg:w="1"/><text x="62.4422%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.1922%" y="341" width="0.0794%" height="15" fill="rgb(245,143,41)" fg:x="783" fg:w="1"/><text x="62.4422%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.1922%" y="325" width="0.0794%" height="15" fill="rgb(238,181,32)" fg:x="783" fg:w="1"/><text x="62.4422%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.1922%" y="309" width="0.0794%" height="15" fill="rgb(224,113,18)" fg:x="783" fg:w="1"/><text x="62.4422%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.1922%" y="293" width="0.0794%" height="15" fill="rgb(240,229,28)" fg:x="783" fg:w="1"/><text x="62.4422%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.1922%" y="277" width="0.0794%" height="15" fill="rgb(250,185,3)" fg:x="783" fg:w="1"/><text x="62.4422%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.1922%" y="261" width="0.0794%" height="15" fill="rgb(212,59,25)" fg:x="783" fg:w="1"/><text x="62.4422%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.1922%" y="245" width="0.0794%" height="15" fill="rgb(221,87,20)" fg:x="783" fg:w="1"/><text x="62.4422%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.1922%" y="229" width="0.0794%" height="15" fill="rgb(213,74,28)" fg:x="783" fg:w="1"/><text x="62.4422%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.1922%" y="213" width="0.0794%" height="15" fill="rgb(224,132,34)" fg:x="783" fg:w="1"/><text x="62.4422%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.2716%" y="325" width="0.0794%" height="15" fill="rgb(222,101,24)" fg:x="784" fg:w="1"/><text x="62.5216%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2716%" y="309" width="0.0794%" height="15" fill="rgb(254,142,4)" fg:x="784" fg:w="1"/><text x="62.5216%" y="319.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.2716%" y="293" width="0.0794%" height="15" fill="rgb(230,229,49)" fg:x="784" fg:w="1"/><text x="62.5216%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="62.2716%" y="277" width="0.0794%" height="15" fill="rgb(238,70,47)" fg:x="784" fg:w="1"/><text x="62.5216%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.2716%" y="261" width="0.0794%" height="15" fill="rgb(231,160,17)" fg:x="784" fg:w="1"/><text x="62.5216%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="62.2716%" y="245" width="0.0794%" height="15" fill="rgb(218,68,53)" fg:x="784" fg:w="1"/><text x="62.5216%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="62.2716%" y="229" width="0.0794%" height="15" fill="rgb(236,111,10)" fg:x="784" fg:w="1"/><text x="62.5216%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="62.2716%" y="213" width="0.0794%" height="15" fill="rgb(224,34,41)" fg:x="784" fg:w="1"/><text x="62.5216%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.5099%" y="293" width="0.0794%" height="15" fill="rgb(241,118,19)" fg:x="787" fg:w="1"/><text x="62.7599%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.5099%" y="277" width="0.0794%" height="15" fill="rgb(238,129,25)" fg:x="787" fg:w="1"/><text x="62.7599%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (6 samples, 0.48%)</title><rect x="62.1922%" y="373" width="0.4766%" height="15" fill="rgb(238,22,31)" fg:x="783" fg:w="6"/><text x="62.4422%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="62.2716%" y="357" width="0.3971%" height="15" fill="rgb(222,174,48)" fg:x="784" fg:w="5"/><text x="62.5216%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="62.2716%" y="341" width="0.3971%" height="15" fill="rgb(206,152,40)" fg:x="784" fg:w="5"/><text x="62.5216%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="62.3511%" y="325" width="0.3177%" height="15" fill="rgb(218,99,54)" fg:x="785" fg:w="4"/><text x="62.6011%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="62.3511%" y="309" width="0.3177%" height="15" fill="rgb(220,174,26)" fg:x="785" fg:w="4"/><text x="62.6011%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="62.5894%" y="293" width="0.0794%" height="15" fill="rgb(245,116,9)" fg:x="788" fg:w="1"/><text x="62.8394%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="62.5894%" y="277" width="0.0794%" height="15" fill="rgb(209,72,35)" fg:x="788" fg:w="1"/><text x="62.8394%" y="287.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (9 samples, 0.71%)</title><rect x="62.0334%" y="469" width="0.7149%" height="15" fill="rgb(226,126,21)" fg:x="781" fg:w="9"/><text x="62.2834%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.71%)</title><rect x="62.0334%" y="453" width="0.7149%" height="15" fill="rgb(227,192,1)" fg:x="781" fg:w="9"/><text x="62.2834%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.71%)</title><rect x="62.0334%" y="437" width="0.7149%" height="15" fill="rgb(237,180,29)" fg:x="781" fg:w="9"/><text x="62.2834%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (9 samples, 0.71%)</title><rect x="62.0334%" y="421" width="0.7149%" height="15" fill="rgb(230,197,35)" fg:x="781" fg:w="9"/><text x="62.2834%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (9 samples, 0.71%)</title><rect x="62.0334%" y="405" width="0.7149%" height="15" fill="rgb(246,193,31)" fg:x="781" fg:w="9"/><text x="62.2834%" y="415.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.71%)</title><rect x="62.0334%" y="389" width="0.7149%" height="15" fill="rgb(241,36,4)" fg:x="781" fg:w="9"/><text x="62.2834%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="62.6688%" y="373" width="0.0794%" height="15" fill="rgb(241,130,17)" fg:x="789" fg:w="1"/><text x="62.9188%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.6688%" y="357" width="0.0794%" height="15" fill="rgb(206,137,32)" fg:x="789" fg:w="1"/><text x="62.9188%" y="367.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.6688%" y="341" width="0.0794%" height="15" fill="rgb(237,228,51)" fg:x="789" fg:w="1"/><text x="62.9188%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.6688%" y="325" width="0.0794%" height="15" fill="rgb(243,6,42)" fg:x="789" fg:w="1"/><text x="62.9188%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.6688%" y="309" width="0.0794%" height="15" fill="rgb(251,74,28)" fg:x="789" fg:w="1"/><text x="62.9188%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.6688%" y="293" width="0.0794%" height="15" fill="rgb(218,20,49)" fg:x="789" fg:w="1"/><text x="62.9188%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.6688%" y="277" width="0.0794%" height="15" fill="rgb(238,28,14)" fg:x="789" fg:w="1"/><text x="62.9188%" y="287.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="62.7482%" y="469" width="0.0794%" height="15" fill="rgb(229,40,46)" fg:x="790" fg:w="1"/><text x="62.9982%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="62.7482%" y="453" width="0.0794%" height="15" fill="rgb(244,195,20)" fg:x="790" fg:w="1"/><text x="62.9982%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.7482%" y="437" width="0.0794%" height="15" fill="rgb(253,56,35)" fg:x="790" fg:w="1"/><text x="62.9982%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (632 samples, 50.20%)</title><rect x="12.7085%" y="725" width="50.1986%" height="15" fill="rgb(210,149,44)" fg:x="160" fg:w="632"/><text x="12.9585%" y="735.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (632 samples, 50.20%)</title><rect x="12.7085%" y="709" width="50.1986%" height="15" fill="rgb(240,135,12)" fg:x="160" fg:w="632"/><text x="12.9585%" y="719.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (632 samples, 50.20%)</title><rect x="12.7085%" y="693" width="50.1986%" height="15" fill="rgb(251,24,50)" fg:x="160" fg:w="632"/><text x="12.9585%" y="703.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (632 samples, 50.20%)</title><rect x="12.7085%" y="677" width="50.1986%" height="15" fill="rgb(243,200,47)" fg:x="160" fg:w="632"/><text x="12.9585%" y="687.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (623 samples, 49.48%)</title><rect x="13.4234%" y="661" width="49.4837%" height="15" fill="rgb(224,166,26)" fg:x="169" fg:w="623"/><text x="13.6734%" y="671.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (623 samples, 49.48%)</title><rect x="13.4234%" y="645" width="49.4837%" height="15" fill="rgb(233,0,47)" fg:x="169" fg:w="623"/><text x="13.6734%" y="655.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (623 samples, 49.48%)</title><rect x="13.4234%" y="629" width="49.4837%" height="15" fill="rgb(253,80,5)" fg:x="169" fg:w="623"/><text x="13.6734%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (623 samples, 49.48%)</title><rect x="13.4234%" y="613" width="49.4837%" height="15" fill="rgb(214,133,25)" fg:x="169" fg:w="623"/><text x="13.6734%" y="623.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (623 samples, 49.48%)</title><rect x="13.4234%" y="597" width="49.4837%" height="15" fill="rgb(209,27,14)" fg:x="169" fg:w="623"/><text x="13.6734%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (623 samples, 49.48%)</title><rect x="13.4234%" y="581" width="49.4837%" height="15" fill="rgb(219,102,51)" fg:x="169" fg:w="623"/><text x="13.6734%" y="591.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (623 samples, 49.48%)</title><rect x="13.4234%" y="565" width="49.4837%" height="15" fill="rgb(237,18,16)" fg:x="169" fg:w="623"/><text x="13.6734%" y="575.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (623 samples, 49.48%)</title><rect x="13.4234%" y="549" width="49.4837%" height="15" fill="rgb(241,85,17)" fg:x="169" fg:w="623"/><text x="13.6734%" y="559.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (621 samples, 49.32%)</title><rect x="13.5822%" y="533" width="49.3249%" height="15" fill="rgb(236,90,42)" fg:x="171" fg:w="621"/><text x="13.8322%" y="543.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (621 samples, 49.32%)</title><rect x="13.5822%" y="517" width="49.3249%" height="15" fill="rgb(249,57,21)" fg:x="171" fg:w="621"/><text x="13.8322%" y="527.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (13 samples, 1.03%)</title><rect x="61.8745%" y="501" width="1.0326%" height="15" fill="rgb(243,12,36)" fg:x="779" fg:w="13"/><text x="62.1245%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (13 samples, 1.03%)</title><rect x="61.8745%" y="485" width="1.0326%" height="15" fill="rgb(253,128,47)" fg:x="779" fg:w="13"/><text x="62.1245%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.8276%" y="469" width="0.0794%" height="15" fill="rgb(207,33,20)" fg:x="791" fg:w="1"/><text x="63.0776%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.8276%" y="453" width="0.0794%" height="15" fill="rgb(233,215,35)" fg:x="791" fg:w="1"/><text x="63.0776%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="62.8276%" y="437" width="0.0794%" height="15" fill="rgb(249,188,52)" fg:x="791" fg:w="1"/><text x="63.0776%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="62.8276%" y="421" width="0.0794%" height="15" fill="rgb(225,12,32)" fg:x="791" fg:w="1"/><text x="63.0776%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="62.8276%" y="405" width="0.0794%" height="15" fill="rgb(247,98,14)" fg:x="791" fg:w="1"/><text x="63.0776%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.8276%" y="389" width="0.0794%" height="15" fill="rgb(247,219,48)" fg:x="791" fg:w="1"/><text x="63.0776%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.9071%" y="613" width="0.0794%" height="15" fill="rgb(253,60,48)" fg:x="792" fg:w="1"/><text x="63.1571%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="62.9071%" y="693" width="0.1589%" height="15" fill="rgb(245,15,52)" fg:x="792" fg:w="2"/><text x="63.1571%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="62.9071%" y="677" width="0.1589%" height="15" fill="rgb(220,133,28)" fg:x="792" fg:w="2"/><text x="63.1571%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="62.9071%" y="661" width="0.1589%" height="15" fill="rgb(217,180,4)" fg:x="792" fg:w="2"/><text x="63.1571%" y="671.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="62.9071%" y="645" width="0.1589%" height="15" fill="rgb(251,24,1)" fg:x="792" fg:w="2"/><text x="63.1571%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="62.9071%" y="629" width="0.1589%" height="15" fill="rgb(212,185,49)" fg:x="792" fg:w="2"/><text x="63.1571%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.9865%" y="613" width="0.0794%" height="15" fill="rgb(215,175,22)" fg:x="793" fg:w="1"/><text x="63.2365%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.9865%" y="597" width="0.0794%" height="15" fill="rgb(250,205,14)" fg:x="793" fg:w="1"/><text x="63.2365%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.9865%" y="581" width="0.0794%" height="15" fill="rgb(225,211,22)" fg:x="793" fg:w="1"/><text x="63.2365%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.9865%" y="565" width="0.0794%" height="15" fill="rgb(251,179,42)" fg:x="793" fg:w="1"/><text x="63.2365%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.9865%" y="549" width="0.0794%" height="15" fill="rgb(208,216,51)" fg:x="793" fg:w="1"/><text x="63.2365%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.9865%" y="533" width="0.0794%" height="15" fill="rgb(235,36,11)" fg:x="793" fg:w="1"/><text x="63.2365%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.9865%" y="517" width="0.0794%" height="15" fill="rgb(213,189,28)" fg:x="793" fg:w="1"/><text x="63.2365%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.9865%" y="501" width="0.0794%" height="15" fill="rgb(227,203,42)" fg:x="793" fg:w="1"/><text x="63.2365%" y="511.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="63.0659%" y="677" width="0.0794%" height="15" fill="rgb(244,72,36)" fg:x="794" fg:w="1"/><text x="63.3159%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.0659%" y="661" width="0.0794%" height="15" fill="rgb(213,53,17)" fg:x="794" fg:w="1"/><text x="63.3159%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.0659%" y="645" width="0.0794%" height="15" fill="rgb(207,167,3)" fg:x="794" fg:w="1"/><text x="63.3159%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.0659%" y="629" width="0.0794%" height="15" fill="rgb(216,98,30)" fg:x="794" fg:w="1"/><text x="63.3159%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.0659%" y="613" width="0.0794%" height="15" fill="rgb(236,123,15)" fg:x="794" fg:w="1"/><text x="63.3159%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.0659%" y="597" width="0.0794%" height="15" fill="rgb(248,81,50)" fg:x="794" fg:w="1"/><text x="63.3159%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.0659%" y="581" width="0.0794%" height="15" fill="rgb(214,120,4)" fg:x="794" fg:w="1"/><text x="63.3159%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.0659%" y="565" width="0.0794%" height="15" fill="rgb(208,179,34)" fg:x="794" fg:w="1"/><text x="63.3159%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.0659%" y="549" width="0.0794%" height="15" fill="rgb(227,140,7)" fg:x="794" fg:w="1"/><text x="63.3159%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.0659%" y="533" width="0.0794%" height="15" fill="rgb(214,22,6)" fg:x="794" fg:w="1"/><text x="63.3159%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.0659%" y="517" width="0.0794%" height="15" fill="rgb(207,137,27)" fg:x="794" fg:w="1"/><text x="63.3159%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.0659%" y="501" width="0.0794%" height="15" fill="rgb(210,8,46)" fg:x="794" fg:w="1"/><text x="63.3159%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.0659%" y="485" width="0.0794%" height="15" fill="rgb(240,16,54)" fg:x="794" fg:w="1"/><text x="63.3159%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.1454%" y="597" width="0.0794%" height="15" fill="rgb(211,209,29)" fg:x="795" fg:w="1"/><text x="63.3954%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.1454%" y="581" width="0.0794%" height="15" fill="rgb(226,228,24)" fg:x="795" fg:w="1"/><text x="63.3954%" y="591.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="63.1454%" y="565" width="0.0794%" height="15" fill="rgb(222,84,9)" fg:x="795" fg:w="1"/><text x="63.3954%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="63.1454%" y="549" width="0.0794%" height="15" fill="rgb(234,203,30)" fg:x="795" fg:w="1"/><text x="63.3954%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.2248%" y="533" width="0.0794%" height="15" fill="rgb(238,109,14)" fg:x="796" fg:w="1"/><text x="63.4748%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.2248%" y="517" width="0.0794%" height="15" fill="rgb(233,206,34)" fg:x="796" fg:w="1"/><text x="63.4748%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="62.9071%" y="725" width="0.4766%" height="15" fill="rgb(220,167,47)" fg:x="792" fg:w="6"/><text x="63.1571%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="62.9071%" y="709" width="0.4766%" height="15" fill="rgb(238,105,10)" fg:x="792" fg:w="6"/><text x="63.1571%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (4 samples, 0.32%)</title><rect x="63.0659%" y="693" width="0.3177%" height="15" fill="rgb(213,227,17)" fg:x="794" fg:w="4"/><text x="63.3159%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="63.1454%" y="677" width="0.2383%" height="15" fill="rgb(217,132,38)" fg:x="795" fg:w="3"/><text x="63.3954%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="63.1454%" y="661" width="0.2383%" height="15" fill="rgb(242,146,4)" fg:x="795" fg:w="3"/><text x="63.3954%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="63.1454%" y="645" width="0.2383%" height="15" fill="rgb(212,61,9)" fg:x="795" fg:w="3"/><text x="63.3954%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="63.1454%" y="629" width="0.2383%" height="15" fill="rgb(247,126,22)" fg:x="795" fg:w="3"/><text x="63.3954%" y="639.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="63.1454%" y="613" width="0.2383%" height="15" fill="rgb(220,196,2)" fg:x="795" fg:w="3"/><text x="63.3954%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.2248%" y="597" width="0.1589%" height="15" fill="rgb(208,46,4)" fg:x="796" fg:w="2"/><text x="63.4748%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.2248%" y="581" width="0.1589%" height="15" fill="rgb(252,104,46)" fg:x="796" fg:w="2"/><text x="63.4748%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="63.2248%" y="565" width="0.1589%" height="15" fill="rgb(237,152,48)" fg:x="796" fg:w="2"/><text x="63.4748%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.2248%" y="549" width="0.1589%" height="15" fill="rgb(221,59,37)" fg:x="796" fg:w="2"/><text x="63.4748%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.3042%" y="533" width="0.0794%" height="15" fill="rgb(209,202,51)" fg:x="797" fg:w="1"/><text x="63.5542%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.3042%" y="517" width="0.0794%" height="15" fill="rgb(228,81,30)" fg:x="797" fg:w="1"/><text x="63.5542%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.3042%" y="501" width="0.0794%" height="15" fill="rgb(227,42,39)" fg:x="797" fg:w="1"/><text x="63.5542%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.3042%" y="485" width="0.0794%" height="15" fill="rgb(221,26,2)" fg:x="797" fg:w="1"/><text x="63.5542%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.3042%" y="469" width="0.0794%" height="15" fill="rgb(254,61,31)" fg:x="797" fg:w="1"/><text x="63.5542%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.3042%" y="453" width="0.0794%" height="15" fill="rgb(222,173,38)" fg:x="797" fg:w="1"/><text x="63.5542%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.3042%" y="437" width="0.0794%" height="15" fill="rgb(218,50,12)" fg:x="797" fg:w="1"/><text x="63.5542%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.3042%" y="421" width="0.0794%" height="15" fill="rgb(223,88,40)" fg:x="797" fg:w="1"/><text x="63.5542%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.3042%" y="405" width="0.0794%" height="15" fill="rgb(237,54,19)" fg:x="797" fg:w="1"/><text x="63.5542%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.3042%" y="389" width="0.0794%" height="15" fill="rgb(251,129,25)" fg:x="797" fg:w="1"/><text x="63.5542%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.3042%" y="373" width="0.0794%" height="15" fill="rgb(238,97,19)" fg:x="797" fg:w="1"/><text x="63.5542%" y="383.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="63.3042%" y="357" width="0.0794%" height="15" fill="rgb(240,169,18)" fg:x="797" fg:w="1"/><text x="63.5542%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="63.3042%" y="341" width="0.0794%" height="15" fill="rgb(230,187,49)" fg:x="797" fg:w="1"/><text x="63.5542%" y="351.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="63.4631%" y="677" width="0.0794%" height="15" fill="rgb(209,44,26)" fg:x="799" fg:w="1"/><text x="63.7131%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="63.4631%" y="661" width="0.0794%" height="15" fill="rgb(244,0,6)" fg:x="799" fg:w="1"/><text x="63.7131%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="63.4631%" y="645" width="0.0794%" height="15" fill="rgb(248,18,21)" fg:x="799" fg:w="1"/><text x="63.7131%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="63.4631%" y="629" width="0.0794%" height="15" fill="rgb(245,180,19)" fg:x="799" fg:w="1"/><text x="63.7131%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="63.4631%" y="613" width="0.0794%" height="15" fill="rgb(252,118,36)" fg:x="799" fg:w="1"/><text x="63.7131%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.4631%" y="597" width="0.0794%" height="15" fill="rgb(210,224,19)" fg:x="799" fg:w="1"/><text x="63.7131%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.4631%" y="581" width="0.0794%" height="15" fill="rgb(218,30,24)" fg:x="799" fg:w="1"/><text x="63.7131%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.4631%" y="565" width="0.0794%" height="15" fill="rgb(219,75,50)" fg:x="799" fg:w="1"/><text x="63.7131%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.4631%" y="549" width="0.0794%" height="15" fill="rgb(234,72,50)" fg:x="799" fg:w="1"/><text x="63.7131%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="63.4631%" y="533" width="0.0794%" height="15" fill="rgb(219,100,48)" fg:x="799" fg:w="1"/><text x="63.7131%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.4631%" y="517" width="0.0794%" height="15" fill="rgb(253,5,41)" fg:x="799" fg:w="1"/><text x="63.7131%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.4631%" y="501" width="0.0794%" height="15" fill="rgb(247,181,11)" fg:x="799" fg:w="1"/><text x="63.7131%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.4631%" y="485" width="0.0794%" height="15" fill="rgb(222,223,25)" fg:x="799" fg:w="1"/><text x="63.7131%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.4631%" y="469" width="0.0794%" height="15" fill="rgb(214,198,28)" fg:x="799" fg:w="1"/><text x="63.7131%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="63.5425%" y="661" width="0.0794%" height="15" fill="rgb(230,46,43)" fg:x="800" fg:w="1"/><text x="63.7925%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.5425%" y="645" width="0.0794%" height="15" fill="rgb(233,65,53)" fg:x="800" fg:w="1"/><text x="63.7925%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.5425%" y="629" width="0.0794%" height="15" fill="rgb(221,121,27)" fg:x="800" fg:w="1"/><text x="63.7925%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.5425%" y="613" width="0.0794%" height="15" fill="rgb(247,70,47)" fg:x="800" fg:w="1"/><text x="63.7925%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (5 samples, 0.40%)</title><rect x="63.3836%" y="725" width="0.3971%" height="15" fill="rgb(228,85,35)" fg:x="798" fg:w="5"/><text x="63.6336%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="63.3836%" y="709" width="0.3971%" height="15" fill="rgb(209,50,18)" fg:x="798" fg:w="5"/><text x="63.6336%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="63.4631%" y="693" width="0.3177%" height="15" fill="rgb(250,19,35)" fg:x="799" fg:w="4"/><text x="63.7131%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="63.5425%" y="677" width="0.2383%" height="15" fill="rgb(253,107,29)" fg:x="800" fg:w="3"/><text x="63.7925%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="63.6219%" y="661" width="0.1589%" height="15" fill="rgb(252,179,29)" fg:x="801" fg:w="2"/><text x="63.8719%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.6219%" y="645" width="0.1589%" height="15" fill="rgb(238,194,6)" fg:x="801" fg:w="2"/><text x="63.8719%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="63.7014%" y="629" width="0.0794%" height="15" fill="rgb(238,164,29)" fg:x="802" fg:w="1"/><text x="63.9514%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.7014%" y="613" width="0.0794%" height="15" fill="rgb(224,25,9)" fg:x="802" fg:w="1"/><text x="63.9514%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.7014%" y="597" width="0.0794%" height="15" fill="rgb(244,153,23)" fg:x="802" fg:w="1"/><text x="63.9514%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.7014%" y="581" width="0.0794%" height="15" fill="rgb(212,203,14)" fg:x="802" fg:w="1"/><text x="63.9514%" y="591.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.7808%" y="677" width="0.0794%" height="15" fill="rgb(220,164,20)" fg:x="803" fg:w="1"/><text x="64.0308%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.7808%" y="661" width="0.0794%" height="15" fill="rgb(222,203,48)" fg:x="803" fg:w="1"/><text x="64.0308%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.7808%" y="645" width="0.0794%" height="15" fill="rgb(215,159,22)" fg:x="803" fg:w="1"/><text x="64.0308%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.7808%" y="629" width="0.0794%" height="15" fill="rgb(216,183,47)" fg:x="803" fg:w="1"/><text x="64.0308%" y="639.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (646 samples, 51.31%)</title><rect x="12.6291%" y="741" width="51.3106%" height="15" fill="rgb(229,195,25)" fg:x="159" fg:w="646"/><text x="12.8791%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="63.7808%" y="725" width="0.1589%" height="15" fill="rgb(224,132,51)" fg:x="803" fg:w="2"/><text x="64.0308%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="63.7808%" y="709" width="0.1589%" height="15" fill="rgb(240,63,7)" fg:x="803" fg:w="2"/><text x="64.0308%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="63.7808%" y="693" width="0.1589%" height="15" fill="rgb(249,182,41)" fg:x="803" fg:w="2"/><text x="64.0308%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.8602%" y="677" width="0.0794%" height="15" fill="rgb(243,47,26)" fg:x="804" fg:w="1"/><text x="64.1102%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.8602%" y="661" width="0.0794%" height="15" fill="rgb(233,48,2)" fg:x="804" fg:w="1"/><text x="64.1102%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="63.8602%" y="645" width="0.0794%" height="15" fill="rgb(244,165,34)" fg:x="804" fg:w="1"/><text x="64.1102%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.8602%" y="629" width="0.0794%" height="15" fill="rgb(207,89,7)" fg:x="804" fg:w="1"/><text x="64.1102%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (806 samples, 64.02%)</title><rect x="0.0000%" y="789" width="64.0191%" height="15" fill="rgb(244,117,36)" fg:x="0" fg:w="806"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (806 samples, 64.02%)</title><rect x="0.0000%" y="773" width="64.0191%" height="15" fill="rgb(226,144,34)" fg:x="0" fg:w="806"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (806 samples, 64.02%)</title><rect x="0.0000%" y="757" width="64.0191%" height="15" fill="rgb(213,23,19)" fg:x="0" fg:w="806"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="63.9396%" y="741" width="0.0794%" height="15" fill="rgb(217,75,12)" fg:x="805" fg:w="1"/><text x="64.1896%" y="751.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.0985%" y="629" width="0.0794%" height="15" fill="rgb(224,159,17)" fg:x="807" fg:w="1"/><text x="64.3485%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.0985%" y="613" width="0.0794%" height="15" fill="rgb(217,118,1)" fg:x="807" fg:w="1"/><text x="64.3485%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.3368%" y="613" width="0.0794%" height="15" fill="rgb(232,180,48)" fg:x="810" fg:w="1"/><text x="64.5868%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.3368%" y="597" width="0.0794%" height="15" fill="rgb(230,27,33)" fg:x="810" fg:w="1"/><text x="64.5868%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.3368%" y="581" width="0.0794%" height="15" fill="rgb(205,31,21)" fg:x="810" fg:w="1"/><text x="64.5868%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="64.0191%" y="741" width="0.4766%" height="15" fill="rgb(253,59,4)" fg:x="806" fg:w="6"/><text x="64.2691%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (6 samples, 0.48%)</title><rect x="64.0191%" y="725" width="0.4766%" height="15" fill="rgb(224,201,9)" fg:x="806" fg:w="6"/><text x="64.2691%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="64.0985%" y="709" width="0.3971%" height="15" fill="rgb(229,206,30)" fg:x="807" fg:w="5"/><text x="64.3485%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (5 samples, 0.40%)</title><rect x="64.0985%" y="693" width="0.3971%" height="15" fill="rgb(212,67,47)" fg:x="807" fg:w="5"/><text x="64.3485%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="64.0985%" y="677" width="0.3971%" height="15" fill="rgb(211,96,50)" fg:x="807" fg:w="5"/><text x="64.3485%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="64.0985%" y="661" width="0.3971%" height="15" fill="rgb(252,114,18)" fg:x="807" fg:w="5"/><text x="64.3485%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="64.0985%" y="645" width="0.3971%" height="15" fill="rgb(223,58,37)" fg:x="807" fg:w="5"/><text x="64.3485%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="64.1779%" y="629" width="0.3177%" height="15" fill="rgb(237,70,4)" fg:x="808" fg:w="4"/><text x="64.4279%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.4162%" y="613" width="0.0794%" height="15" fill="rgb(244,85,46)" fg:x="811" fg:w="1"/><text x="64.6662%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.4162%" y="597" width="0.0794%" height="15" fill="rgb(223,39,52)" fg:x="811" fg:w="1"/><text x="64.6662%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.4162%" y="581" width="0.0794%" height="15" fill="rgb(218,200,14)" fg:x="811" fg:w="1"/><text x="64.6662%" y="591.50"></text></g><g><title>libloading::safe::Library::new (3 samples, 0.24%)</title><rect x="64.4956%" y="645" width="0.2383%" height="15" fill="rgb(208,171,16)" fg:x="812" fg:w="3"/><text x="64.7456%" y="655.50"></text></g><g><title>dlopen (3 samples, 0.24%)</title><rect x="64.4956%" y="629" width="0.2383%" height="15" fill="rgb(234,200,18)" fg:x="812" fg:w="3"/><text x="64.7456%" y="639.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="64.4956%" y="613" width="0.2383%" height="15" fill="rgb(228,45,11)" fg:x="812" fg:w="3"/><text x="64.7456%" y="623.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="64.4956%" y="597" width="0.2383%" height="15" fill="rgb(237,182,11)" fg:x="812" fg:w="3"/><text x="64.7456%" y="607.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="64.4956%" y="581" width="0.2383%" height="15" fill="rgb(241,175,49)" fg:x="812" fg:w="3"/><text x="64.7456%" y="591.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="64.4956%" y="565" width="0.2383%" height="15" fill="rgb(247,38,35)" fg:x="812" fg:w="3"/><text x="64.7456%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="64.4956%" y="661" width="0.3177%" height="15" fill="rgb(228,39,49)" fg:x="812" fg:w="4"/><text x="64.7456%" y="671.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_str (1 samples, 0.08%)</title><rect x="64.7339%" y="645" width="0.0794%" height="15" fill="rgb(226,101,26)" fg:x="815" fg:w="1"/><text x="64.9839%" y="655.50"></text></g><g><title>engine::session::Session::initialize (5 samples, 0.40%)</title><rect x="64.4956%" y="693" width="0.3971%" height="15" fill="rgb(206,141,19)" fg:x="812" fg:w="5"/><text x="64.7456%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (5 samples, 0.40%)</title><rect x="64.4956%" y="677" width="0.3971%" height="15" fill="rgb(211,200,13)" fg:x="812" fg:w="5"/><text x="64.7456%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="64.8133%" y="661" width="0.0794%" height="15" fill="rgb(241,121,6)" fg:x="816" fg:w="1"/><text x="65.0633%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="64.8133%" y="645" width="0.0794%" height="15" fill="rgb(234,221,29)" fg:x="816" fg:w="1"/><text x="65.0633%" y="655.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (6 samples, 0.48%)</title><rect x="64.4956%" y="741" width="0.4766%" height="15" fill="rgb(229,136,5)" fg:x="812" fg:w="6"/><text x="64.7456%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (6 samples, 0.48%)</title><rect x="64.4956%" y="725" width="0.4766%" height="15" fill="rgb(238,36,11)" fg:x="812" fg:w="6"/><text x="64.7456%" y="735.50"></text></g><g><title>engine::session::Session::new (6 samples, 0.48%)</title><rect x="64.4956%" y="709" width="0.4766%" height="15" fill="rgb(251,55,41)" fg:x="812" fg:w="6"/><text x="64.7456%" y="719.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="64.8928%" y="693" width="0.0794%" height="15" fill="rgb(242,34,40)" fg:x="817" fg:w="1"/><text x="65.1428%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="64.8928%" y="677" width="0.0794%" height="15" fill="rgb(215,42,17)" fg:x="817" fg:w="1"/><text x="65.1428%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.8928%" y="661" width="0.0794%" height="15" fill="rgb(207,44,46)" fg:x="817" fg:w="1"/><text x="65.1428%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.8928%" y="645" width="0.0794%" height="15" fill="rgb(211,206,28)" fg:x="817" fg:w="1"/><text x="65.1428%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="65.0516%" y="709" width="0.0794%" height="15" fill="rgb(237,167,16)" fg:x="819" fg:w="1"/><text x="65.3016%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.0516%" y="693" width="0.0794%" height="15" fill="rgb(233,66,6)" fg:x="819" fg:w="1"/><text x="65.3016%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.1311%" y="565" width="0.0794%" height="15" fill="rgb(246,123,29)" fg:x="820" fg:w="1"/><text x="65.3811%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.1311%" y="549" width="0.0794%" height="15" fill="rgb(209,62,40)" fg:x="820" fg:w="1"/><text x="65.3811%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.1311%" y="533" width="0.0794%" height="15" fill="rgb(218,4,25)" fg:x="820" fg:w="1"/><text x="65.3811%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="65.1311%" y="517" width="0.0794%" height="15" fill="rgb(253,91,49)" fg:x="820" fg:w="1"/><text x="65.3811%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.1311%" y="501" width="0.0794%" height="15" fill="rgb(228,155,29)" fg:x="820" fg:w="1"/><text x="65.3811%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.1311%" y="485" width="0.0794%" height="15" fill="rgb(243,57,37)" fg:x="820" fg:w="1"/><text x="65.3811%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.1311%" y="469" width="0.0794%" height="15" fill="rgb(244,167,17)" fg:x="820" fg:w="1"/><text x="65.3811%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="65.1311%" y="597" width="0.1589%" height="15" fill="rgb(207,181,38)" fg:x="820" fg:w="2"/><text x="65.3811%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="65.1311%" y="581" width="0.1589%" height="15" fill="rgb(211,8,23)" fg:x="820" fg:w="2"/><text x="65.3811%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="65.2105%" y="565" width="0.0794%" height="15" fill="rgb(235,11,44)" fg:x="821" fg:w="1"/><text x="65.4605%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.2105%" y="549" width="0.0794%" height="15" fill="rgb(248,18,52)" fg:x="821" fg:w="1"/><text x="65.4605%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.2105%" y="533" width="0.0794%" height="15" fill="rgb(208,4,7)" fg:x="821" fg:w="1"/><text x="65.4605%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="65.1311%" y="645" width="0.2383%" height="15" fill="rgb(240,17,39)" fg:x="820" fg:w="3"/><text x="65.3811%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="65.1311%" y="629" width="0.2383%" height="15" fill="rgb(207,170,3)" fg:x="820" fg:w="3"/><text x="65.3811%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="65.1311%" y="613" width="0.2383%" height="15" fill="rgb(236,100,52)" fg:x="820" fg:w="3"/><text x="65.3811%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.2899%" y="597" width="0.0794%" height="15" fill="rgb(246,78,51)" fg:x="822" fg:w="1"/><text x="65.5399%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.2899%" y="581" width="0.0794%" height="15" fill="rgb(211,17,15)" fg:x="822" fg:w="1"/><text x="65.5399%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.2899%" y="565" width="0.0794%" height="15" fill="rgb(209,59,46)" fg:x="822" fg:w="1"/><text x="65.5399%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="65.2899%" y="549" width="0.0794%" height="15" fill="rgb(210,92,25)" fg:x="822" fg:w="1"/><text x="65.5399%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.2899%" y="533" width="0.0794%" height="15" fill="rgb(238,174,52)" fg:x="822" fg:w="1"/><text x="65.5399%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="65.3693%" y="565" width="0.0794%" height="15" fill="rgb(230,73,7)" fg:x="823" fg:w="1"/><text x="65.6193%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="65.3693%" y="549" width="0.0794%" height="15" fill="rgb(243,124,40)" fg:x="823" fg:w="1"/><text x="65.6193%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.3693%" y="533" width="0.0794%" height="15" fill="rgb(244,170,11)" fg:x="823" fg:w="1"/><text x="65.6193%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.3693%" y="517" width="0.0794%" height="15" fill="rgb(207,114,54)" fg:x="823" fg:w="1"/><text x="65.6193%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="65.3693%" y="645" width="0.1589%" height="15" fill="rgb(205,42,20)" fg:x="823" fg:w="2"/><text x="65.6193%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="65.3693%" y="629" width="0.1589%" height="15" fill="rgb(230,30,28)" fg:x="823" fg:w="2"/><text x="65.6193%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="65.3693%" y="613" width="0.1589%" height="15" fill="rgb(205,73,54)" fg:x="823" fg:w="2"/><text x="65.6193%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="65.3693%" y="597" width="0.1589%" height="15" fill="rgb(254,227,23)" fg:x="823" fg:w="2"/><text x="65.6193%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="65.3693%" y="581" width="0.1589%" height="15" fill="rgb(228,202,34)" fg:x="823" fg:w="2"/><text x="65.6193%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.4488%" y="565" width="0.0794%" height="15" fill="rgb(222,225,37)" fg:x="824" fg:w="1"/><text x="65.6988%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.4488%" y="549" width="0.0794%" height="15" fill="rgb(221,14,54)" fg:x="824" fg:w="1"/><text x="65.6988%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.4488%" y="533" width="0.0794%" height="15" fill="rgb(254,102,2)" fg:x="824" fg:w="1"/><text x="65.6988%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.4488%" y="517" width="0.0794%" height="15" fill="rgb(232,104,17)" fg:x="824" fg:w="1"/><text x="65.6988%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="65.5282%" y="597" width="0.1589%" height="15" fill="rgb(250,220,14)" fg:x="825" fg:w="2"/><text x="65.7782%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="65.5282%" y="581" width="0.1589%" height="15" fill="rgb(241,158,9)" fg:x="825" fg:w="2"/><text x="65.7782%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="65.5282%" y="565" width="0.1589%" height="15" fill="rgb(246,9,43)" fg:x="825" fg:w="2"/><text x="65.7782%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="65.6871%" y="597" width="0.0794%" height="15" fill="rgb(206,73,33)" fg:x="827" fg:w="1"/><text x="65.9371%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="65.6871%" y="581" width="0.0794%" height="15" fill="rgb(222,79,8)" fg:x="827" fg:w="1"/><text x="65.9371%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.6871%" y="565" width="0.0794%" height="15" fill="rgb(234,8,54)" fg:x="827" fg:w="1"/><text x="65.9371%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.7665%" y="453" width="0.0794%" height="15" fill="rgb(209,134,38)" fg:x="828" fg:w="1"/><text x="66.0165%" y="463.50"></text></g><g><title>engine::session::Session::flush (11 samples, 0.87%)</title><rect x="65.0516%" y="725" width="0.8737%" height="15" fill="rgb(230,127,29)" fg:x="819" fg:w="11"/><text x="65.3016%" y="735.50"></text></g><g><title>engine::session::state::State::close (10 samples, 0.79%)</title><rect x="65.1311%" y="709" width="0.7943%" height="15" fill="rgb(242,44,41)" fg:x="820" fg:w="10"/><text x="65.3811%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (10 samples, 0.79%)</title><rect x="65.1311%" y="693" width="0.7943%" height="15" fill="rgb(222,56,43)" fg:x="820" fg:w="10"/><text x="65.3811%" y="703.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (10 samples, 0.79%)</title><rect x="65.1311%" y="677" width="0.7943%" height="15" fill="rgb(238,39,47)" fg:x="820" fg:w="10"/><text x="65.3811%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (10 samples, 0.79%)</title><rect x="65.1311%" y="661" width="0.7943%" height="15" fill="rgb(226,79,43)" fg:x="820" fg:w="10"/><text x="65.3811%" y="671.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="65.5282%" y="645" width="0.3971%" height="15" fill="rgb(242,105,53)" fg:x="825" fg:w="5"/><text x="65.7782%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="65.5282%" y="629" width="0.3971%" height="15" fill="rgb(251,132,46)" fg:x="825" fg:w="5"/><text x="65.7782%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="65.5282%" y="613" width="0.3971%" height="15" fill="rgb(231,77,14)" fg:x="825" fg:w="5"/><text x="65.7782%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="65.7665%" y="597" width="0.1589%" height="15" fill="rgb(240,135,9)" fg:x="828" fg:w="2"/><text x="66.0165%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="65.7665%" y="581" width="0.1589%" height="15" fill="rgb(248,109,14)" fg:x="828" fg:w="2"/><text x="66.0165%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="65.7665%" y="565" width="0.1589%" height="15" fill="rgb(227,146,52)" fg:x="828" fg:w="2"/><text x="66.0165%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="65.7665%" y="549" width="0.1589%" height="15" fill="rgb(232,54,3)" fg:x="828" fg:w="2"/><text x="66.0165%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="65.7665%" y="533" width="0.1589%" height="15" fill="rgb(229,201,43)" fg:x="828" fg:w="2"/><text x="66.0165%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="65.7665%" y="517" width="0.1589%" height="15" fill="rgb(252,161,33)" fg:x="828" fg:w="2"/><text x="66.0165%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="65.7665%" y="501" width="0.1589%" height="15" fill="rgb(226,146,40)" fg:x="828" fg:w="2"/><text x="66.0165%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="65.7665%" y="485" width="0.1589%" height="15" fill="rgb(219,47,25)" fg:x="828" fg:w="2"/><text x="66.0165%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="65.7665%" y="469" width="0.1589%" height="15" fill="rgb(250,135,13)" fg:x="828" fg:w="2"/><text x="66.0165%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="65.8459%" y="453" width="0.0794%" height="15" fill="rgb(219,229,18)" fg:x="829" fg:w="1"/><text x="66.0959%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="65.9253%" y="693" width="0.0794%" height="15" fill="rgb(217,152,27)" fg:x="830" fg:w="1"/><text x="66.1753%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="65.9253%" y="677" width="0.0794%" height="15" fill="rgb(225,71,47)" fg:x="830" fg:w="1"/><text x="66.1753%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.9253%" y="661" width="0.0794%" height="15" fill="rgb(220,139,14)" fg:x="830" fg:w="1"/><text x="66.1753%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="65.9253%" y="709" width="0.1589%" height="15" fill="rgb(247,54,32)" fg:x="830" fg:w="2"/><text x="66.1753%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="66.0048%" y="693" width="0.0794%" height="15" fill="rgb(252,131,39)" fg:x="831" fg:w="1"/><text x="66.2548%" y="703.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="66.0048%" y="677" width="0.0794%" height="15" fill="rgb(210,108,39)" fg:x="831" fg:w="1"/><text x="66.2548%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.0048%" y="661" width="0.0794%" height="15" fill="rgb(205,23,29)" fg:x="831" fg:w="1"/><text x="66.2548%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.0048%" y="645" width="0.0794%" height="15" fill="rgb(246,139,46)" fg:x="831" fg:w="1"/><text x="66.2548%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="66.0048%" y="629" width="0.0794%" height="15" fill="rgb(250,81,26)" fg:x="831" fg:w="1"/><text x="66.2548%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.0048%" y="613" width="0.0794%" height="15" fill="rgb(214,104,7)" fg:x="831" fg:w="1"/><text x="66.2548%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="66.0842%" y="693" width="0.0794%" height="15" fill="rgb(233,189,8)" fg:x="832" fg:w="1"/><text x="66.3342%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="66.0842%" y="677" width="0.0794%" height="15" fill="rgb(228,141,17)" fg:x="832" fg:w="1"/><text x="66.3342%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.0842%" y="661" width="0.0794%" height="15" fill="rgb(247,157,1)" fg:x="832" fg:w="1"/><text x="66.3342%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="66.0842%" y="645" width="0.0794%" height="15" fill="rgb(249,225,5)" fg:x="832" fg:w="1"/><text x="66.3342%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.0842%" y="629" width="0.0794%" height="15" fill="rgb(242,55,13)" fg:x="832" fg:w="1"/><text x="66.3342%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.0842%" y="613" width="0.0794%" height="15" fill="rgb(230,49,50)" fg:x="832" fg:w="1"/><text x="66.3342%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="66.1636%" y="645" width="0.0794%" height="15" fill="rgb(241,111,38)" fg:x="833" fg:w="1"/><text x="66.4136%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.1636%" y="629" width="0.0794%" height="15" fill="rgb(252,155,4)" fg:x="833" fg:w="1"/><text x="66.4136%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.1636%" y="613" width="0.0794%" height="15" fill="rgb(212,69,32)" fg:x="833" fg:w="1"/><text x="66.4136%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.1636%" y="597" width="0.0794%" height="15" fill="rgb(243,107,47)" fg:x="833" fg:w="1"/><text x="66.4136%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.1636%" y="581" width="0.0794%" height="15" fill="rgb(247,130,12)" fg:x="833" fg:w="1"/><text x="66.4136%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.1636%" y="565" width="0.0794%" height="15" fill="rgb(233,74,16)" fg:x="833" fg:w="1"/><text x="66.4136%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.1636%" y="549" width="0.0794%" height="15" fill="rgb(208,58,18)" fg:x="833" fg:w="1"/><text x="66.4136%" y="559.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.40%)</title><rect x="65.9253%" y="725" width="0.3971%" height="15" fill="rgb(242,225,1)" fg:x="830" fg:w="5"/><text x="66.1753%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="66.0842%" y="709" width="0.2383%" height="15" fill="rgb(249,39,40)" fg:x="832" fg:w="3"/><text x="66.3342%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="66.1636%" y="693" width="0.1589%" height="15" fill="rgb(207,72,44)" fg:x="833" fg:w="2"/><text x="66.4136%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="66.1636%" y="677" width="0.1589%" height="15" fill="rgb(215,193,12)" fg:x="833" fg:w="2"/><text x="66.4136%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="66.1636%" y="661" width="0.1589%" height="15" fill="rgb(248,41,39)" fg:x="833" fg:w="2"/><text x="66.4136%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="66.2431%" y="645" width="0.0794%" height="15" fill="rgb(253,85,4)" fg:x="834" fg:w="1"/><text x="66.4931%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.2431%" y="629" width="0.0794%" height="15" fill="rgb(243,70,31)" fg:x="834" fg:w="1"/><text x="66.4931%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.2431%" y="613" width="0.0794%" height="15" fill="rgb(253,195,26)" fg:x="834" fg:w="1"/><text x="66.4931%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.3225%" y="645" width="0.0794%" height="15" fill="rgb(243,42,11)" fg:x="835" fg:w="1"/><text x="66.5725%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.3225%" y="629" width="0.0794%" height="15" fill="rgb(239,66,17)" fg:x="835" fg:w="1"/><text x="66.5725%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="66.3225%" y="709" width="0.1589%" height="15" fill="rgb(217,132,21)" fg:x="835" fg:w="2"/><text x="66.5725%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="66.3225%" y="693" width="0.1589%" height="15" fill="rgb(252,202,21)" fg:x="835" fg:w="2"/><text x="66.5725%" y="703.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="66.3225%" y="677" width="0.1589%" height="15" fill="rgb(233,98,36)" fg:x="835" fg:w="2"/><text x="66.5725%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="66.3225%" y="661" width="0.1589%" height="15" fill="rgb(216,153,54)" fg:x="835" fg:w="2"/><text x="66.5725%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.4019%" y="645" width="0.0794%" height="15" fill="rgb(250,99,7)" fg:x="836" fg:w="1"/><text x="66.6519%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.4019%" y="629" width="0.0794%" height="15" fill="rgb(207,56,50)" fg:x="836" fg:w="1"/><text x="66.6519%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.4019%" y="613" width="0.0794%" height="15" fill="rgb(244,61,34)" fg:x="836" fg:w="1"/><text x="66.6519%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.4019%" y="597" width="0.0794%" height="15" fill="rgb(241,50,38)" fg:x="836" fg:w="1"/><text x="66.6519%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="66.4019%" y="581" width="0.0794%" height="15" fill="rgb(212,166,30)" fg:x="836" fg:w="1"/><text x="66.6519%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.4019%" y="565" width="0.0794%" height="15" fill="rgb(249,127,32)" fg:x="836" fg:w="1"/><text x="66.6519%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.4019%" y="549" width="0.0794%" height="15" fill="rgb(209,103,0)" fg:x="836" fg:w="1"/><text x="66.6519%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.4813%" y="581" width="0.0794%" height="15" fill="rgb(238,209,51)" fg:x="837" fg:w="1"/><text x="66.7313%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (2 samples, 0.16%)</title><rect x="66.4813%" y="661" width="0.1589%" height="15" fill="rgb(237,56,23)" fg:x="837" fg:w="2"/><text x="66.7313%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="66.4813%" y="645" width="0.1589%" height="15" fill="rgb(215,153,46)" fg:x="837" fg:w="2"/><text x="66.7313%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="66.4813%" y="629" width="0.1589%" height="15" fill="rgb(224,49,31)" fg:x="837" fg:w="2"/><text x="66.7313%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="66.4813%" y="613" width="0.1589%" height="15" fill="rgb(250,18,42)" fg:x="837" fg:w="2"/><text x="66.7313%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="66.4813%" y="597" width="0.1589%" height="15" fill="rgb(215,176,39)" fg:x="837" fg:w="2"/><text x="66.7313%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.5608%" y="581" width="0.0794%" height="15" fill="rgb(223,77,29)" fg:x="838" fg:w="1"/><text x="66.8108%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.5608%" y="565" width="0.0794%" height="15" fill="rgb(234,94,52)" fg:x="838" fg:w="1"/><text x="66.8108%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.5608%" y="549" width="0.0794%" height="15" fill="rgb(220,154,50)" fg:x="838" fg:w="1"/><text x="66.8108%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.5608%" y="533" width="0.0794%" height="15" fill="rgb(212,11,10)" fg:x="838" fg:w="1"/><text x="66.8108%" y="543.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="66.6402%" y="661" width="0.0794%" height="15" fill="rgb(205,166,19)" fg:x="839" fg:w="1"/><text x="66.8902%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="66.6402%" y="645" width="0.0794%" height="15" fill="rgb(244,198,16)" fg:x="839" fg:w="1"/><text x="66.8902%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="66.6402%" y="629" width="0.0794%" height="15" fill="rgb(219,69,12)" fg:x="839" fg:w="1"/><text x="66.8902%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.6402%" y="613" width="0.0794%" height="15" fill="rgb(245,30,7)" fg:x="839" fg:w="1"/><text x="66.8902%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.6402%" y="597" width="0.0794%" height="15" fill="rgb(218,221,48)" fg:x="839" fg:w="1"/><text x="66.8902%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.6402%" y="581" width="0.0794%" height="15" fill="rgb(216,66,15)" fg:x="839" fg:w="1"/><text x="66.8902%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.6402%" y="565" width="0.0794%" height="15" fill="rgb(226,122,50)" fg:x="839" fg:w="1"/><text x="66.8902%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.6402%" y="549" width="0.0794%" height="15" fill="rgb(239,156,16)" fg:x="839" fg:w="1"/><text x="66.8902%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.6402%" y="533" width="0.0794%" height="15" fill="rgb(224,27,38)" fg:x="839" fg:w="1"/><text x="66.8902%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.6402%" y="517" width="0.0794%" height="15" fill="rgb(224,39,27)" fg:x="839" fg:w="1"/><text x="66.8902%" y="527.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="66.4813%" y="709" width="0.3177%" height="15" fill="rgb(215,92,29)" fg:x="837" fg:w="4"/><text x="66.7313%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="66.4813%" y="693" width="0.3177%" height="15" fill="rgb(207,159,16)" fg:x="837" fg:w="4"/><text x="66.7313%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="66.4813%" y="677" width="0.3177%" height="15" fill="rgb(238,163,47)" fg:x="837" fg:w="4"/><text x="66.7313%" y="687.50"></text></g><g><title>plugins_core::build::Build::leads_to (1 samples, 0.08%)</title><rect x="66.7196%" y="661" width="0.0794%" height="15" fill="rgb(219,91,49)" fg:x="840" fg:w="1"/><text x="66.9696%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="66.7196%" y="645" width="0.0794%" height="15" fill="rgb(227,167,31)" fg:x="840" fg:w="1"/><text x="66.9696%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="66.7196%" y="629" width="0.0794%" height="15" fill="rgb(234,80,54)" fg:x="840" fg:w="1"/><text x="66.9696%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="66.7196%" y="613" width="0.0794%" height="15" fill="rgb(212,114,2)" fg:x="840" fg:w="1"/><text x="66.9696%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.7196%" y="597" width="0.0794%" height="15" fill="rgb(234,50,24)" fg:x="840" fg:w="1"/><text x="66.9696%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="66.7196%" y="581" width="0.0794%" height="15" fill="rgb(221,68,8)" fg:x="840" fg:w="1"/><text x="66.9696%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="66.7990%" y="693" width="0.0794%" height="15" fill="rgb(254,180,31)" fg:x="841" fg:w="1"/><text x="67.0490%" y="703.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="66.8785%" y="677" width="0.0794%" height="15" fill="rgb(247,130,50)" fg:x="842" fg:w="1"/><text x="67.1285%" y="687.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="66.8785%" y="661" width="0.0794%" height="15" fill="rgb(211,109,4)" fg:x="842" fg:w="1"/><text x="67.1285%" y="671.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="66.8785%" y="645" width="0.0794%" height="15" fill="rgb(238,50,21)" fg:x="842" fg:w="1"/><text x="67.1285%" y="655.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="66.8785%" y="629" width="0.0794%" height="15" fill="rgb(225,57,45)" fg:x="842" fg:w="1"/><text x="67.1285%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="66.8785%" y="613" width="0.0794%" height="15" fill="rgb(209,196,50)" fg:x="842" fg:w="1"/><text x="67.1285%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="66.8785%" y="597" width="0.0794%" height="15" fill="rgb(242,140,13)" fg:x="842" fg:w="1"/><text x="67.1285%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="66.8785%" y="581" width="0.0794%" height="15" fill="rgb(217,111,7)" fg:x="842" fg:w="1"/><text x="67.1285%" y="591.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="66.8785%" y="565" width="0.0794%" height="15" fill="rgb(253,193,51)" fg:x="842" fg:w="1"/><text x="67.1285%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="66.9579%" y="613" width="0.0794%" height="15" fill="rgb(252,70,29)" fg:x="843" fg:w="1"/><text x="67.2079%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="66.9579%" y="597" width="0.0794%" height="15" fill="rgb(232,127,12)" fg:x="843" fg:w="1"/><text x="67.2079%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="66.9579%" y="581" width="0.0794%" height="15" fill="rgb(211,180,21)" fg:x="843" fg:w="1"/><text x="67.2079%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.9579%" y="565" width="0.0794%" height="15" fill="rgb(229,72,13)" fg:x="843" fg:w="1"/><text x="67.2079%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.9579%" y="549" width="0.0794%" height="15" fill="rgb(240,211,49)" fg:x="843" fg:w="1"/><text x="67.2079%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.0373%" y="581" width="0.0794%" height="15" fill="rgb(219,149,40)" fg:x="844" fg:w="1"/><text x="67.2873%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.0373%" y="565" width="0.0794%" height="15" fill="rgb(210,127,46)" fg:x="844" fg:w="1"/><text x="67.2873%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.0373%" y="549" width="0.0794%" height="15" fill="rgb(220,106,7)" fg:x="844" fg:w="1"/><text x="67.2873%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.0373%" y="533" width="0.0794%" height="15" fill="rgb(249,31,22)" fg:x="844" fg:w="1"/><text x="67.2873%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.0373%" y="517" width="0.0794%" height="15" fill="rgb(253,1,49)" fg:x="844" fg:w="1"/><text x="67.2873%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="67.0373%" y="613" width="0.1589%" height="15" fill="rgb(227,144,33)" fg:x="844" fg:w="2"/><text x="67.2873%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="67.0373%" y="597" width="0.1589%" height="15" fill="rgb(249,163,44)" fg:x="844" fg:w="2"/><text x="67.2873%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.1168%" y="581" width="0.0794%" height="15" fill="rgb(234,15,39)" fg:x="845" fg:w="1"/><text x="67.3668%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.1168%" y="565" width="0.0794%" height="15" fill="rgb(207,66,16)" fg:x="845" fg:w="1"/><text x="67.3668%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.1168%" y="549" width="0.0794%" height="15" fill="rgb(233,112,24)" fg:x="845" fg:w="1"/><text x="67.3668%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.1168%" y="533" width="0.0794%" height="15" fill="rgb(230,90,22)" fg:x="845" fg:w="1"/><text x="67.3668%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.1168%" y="517" width="0.0794%" height="15" fill="rgb(229,61,13)" fg:x="845" fg:w="1"/><text x="67.3668%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.1168%" y="501" width="0.0794%" height="15" fill="rgb(225,57,24)" fg:x="845" fg:w="1"/><text x="67.3668%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.1962%" y="581" width="0.0794%" height="15" fill="rgb(208,169,48)" fg:x="846" fg:w="1"/><text x="67.4462%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.1962%" y="613" width="0.1589%" height="15" fill="rgb(244,218,51)" fg:x="846" fg:w="2"/><text x="67.4462%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="67.1962%" y="597" width="0.1589%" height="15" fill="rgb(214,148,10)" fg:x="846" fg:w="2"/><text x="67.4462%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.2756%" y="581" width="0.0794%" height="15" fill="rgb(225,174,27)" fg:x="847" fg:w="1"/><text x="67.5256%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.2756%" y="565" width="0.0794%" height="15" fill="rgb(230,96,26)" fg:x="847" fg:w="1"/><text x="67.5256%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.2756%" y="549" width="0.0794%" height="15" fill="rgb(232,10,30)" fg:x="847" fg:w="1"/><text x="67.5256%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.2756%" y="533" width="0.0794%" height="15" fill="rgb(222,8,50)" fg:x="847" fg:w="1"/><text x="67.5256%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.2756%" y="517" width="0.0794%" height="15" fill="rgb(213,81,27)" fg:x="847" fg:w="1"/><text x="67.5256%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.2756%" y="501" width="0.0794%" height="15" fill="rgb(245,50,10)" fg:x="847" fg:w="1"/><text x="67.5256%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.2756%" y="485" width="0.0794%" height="15" fill="rgb(216,100,18)" fg:x="847" fg:w="1"/><text x="67.5256%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.3550%" y="453" width="0.0794%" height="15" fill="rgb(236,147,54)" fg:x="848" fg:w="1"/><text x="67.6050%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4345%" y="421" width="0.0794%" height="15" fill="rgb(205,143,26)" fg:x="849" fg:w="1"/><text x="67.6845%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.5139%" y="389" width="0.0794%" height="15" fill="rgb(236,26,9)" fg:x="850" fg:w="1"/><text x="67.7639%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="67.3550%" y="501" width="0.3177%" height="15" fill="rgb(221,165,53)" fg:x="848" fg:w="4"/><text x="67.6050%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="67.3550%" y="485" width="0.3177%" height="15" fill="rgb(214,110,17)" fg:x="848" fg:w="4"/><text x="67.6050%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="67.3550%" y="469" width="0.3177%" height="15" fill="rgb(237,197,12)" fg:x="848" fg:w="4"/><text x="67.6050%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="67.4345%" y="453" width="0.2383%" height="15" fill="rgb(205,84,17)" fg:x="849" fg:w="3"/><text x="67.6845%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="67.4345%" y="437" width="0.2383%" height="15" fill="rgb(237,18,45)" fg:x="849" fg:w="3"/><text x="67.6845%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="67.5139%" y="421" width="0.1589%" height="15" fill="rgb(221,87,14)" fg:x="850" fg:w="2"/><text x="67.7639%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="67.5139%" y="405" width="0.1589%" height="15" fill="rgb(238,186,15)" fg:x="850" fg:w="2"/><text x="67.7639%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="67.5933%" y="389" width="0.0794%" height="15" fill="rgb(208,115,11)" fg:x="851" fg:w="1"/><text x="67.8433%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="67.5933%" y="373" width="0.0794%" height="15" fill="rgb(254,175,0)" fg:x="851" fg:w="1"/><text x="67.8433%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="67.3550%" y="533" width="0.3971%" height="15" fill="rgb(227,24,42)" fg:x="848" fg:w="5"/><text x="67.6050%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="67.3550%" y="517" width="0.3971%" height="15" fill="rgb(223,211,37)" fg:x="848" fg:w="5"/><text x="67.6050%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6728%" y="501" width="0.0794%" height="15" fill="rgb(235,49,27)" fg:x="852" fg:w="1"/><text x="67.9228%" y="511.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.03%)</title><rect x="66.7990%" y="709" width="1.0326%" height="15" fill="rgb(254,97,51)" fg:x="841" fg:w="13"/><text x="67.0490%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (12 samples, 0.95%)</title><rect x="66.8785%" y="693" width="0.9531%" height="15" fill="rgb(249,51,40)" fg:x="842" fg:w="12"/><text x="67.1285%" y="703.50"></text></g><g><title>engine::session::state::State::close (11 samples, 0.87%)</title><rect x="66.9579%" y="677" width="0.8737%" height="15" fill="rgb(210,128,45)" fg:x="843" fg:w="11"/><text x="67.2079%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (11 samples, 0.87%)</title><rect x="66.9579%" y="661" width="0.8737%" height="15" fill="rgb(224,137,50)" fg:x="843" fg:w="11"/><text x="67.2079%" y="671.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (11 samples, 0.87%)</title><rect x="66.9579%" y="645" width="0.8737%" height="15" fill="rgb(242,15,9)" fg:x="843" fg:w="11"/><text x="67.2079%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (11 samples, 0.87%)</title><rect x="66.9579%" y="629" width="0.8737%" height="15" fill="rgb(233,187,41)" fg:x="843" fg:w="11"/><text x="67.2079%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="67.3550%" y="613" width="0.4766%" height="15" fill="rgb(227,2,29)" fg:x="848" fg:w="6"/><text x="67.6050%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="67.3550%" y="597" width="0.4766%" height="15" fill="rgb(222,70,3)" fg:x="848" fg:w="6"/><text x="67.6050%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="67.3550%" y="581" width="0.4766%" height="15" fill="rgb(213,11,42)" fg:x="848" fg:w="6"/><text x="67.6050%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="67.3550%" y="565" width="0.4766%" height="15" fill="rgb(225,150,9)" fg:x="848" fg:w="6"/><text x="67.6050%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="67.3550%" y="549" width="0.4766%" height="15" fill="rgb(230,162,45)" fg:x="848" fg:w="6"/><text x="67.6050%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="67.7522%" y="533" width="0.0794%" height="15" fill="rgb(222,14,52)" fg:x="853" fg:w="1"/><text x="68.0022%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.7522%" y="517" width="0.0794%" height="15" fill="rgb(254,198,14)" fg:x="853" fg:w="1"/><text x="68.0022%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="67.8316%" y="709" width="0.0794%" height="15" fill="rgb(220,217,30)" fg:x="854" fg:w="1"/><text x="68.0816%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="67.8316%" y="693" width="0.0794%" height="15" fill="rgb(215,146,41)" fg:x="854" fg:w="1"/><text x="68.0816%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="67.8316%" y="677" width="0.0794%" height="15" fill="rgb(217,27,36)" fg:x="854" fg:w="1"/><text x="68.0816%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="67.8316%" y="661" width="0.0794%" height="15" fill="rgb(219,218,39)" fg:x="854" fg:w="1"/><text x="68.0816%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="67.8316%" y="645" width="0.0794%" height="15" fill="rgb(219,4,42)" fg:x="854" fg:w="1"/><text x="68.0816%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.8316%" y="629" width="0.0794%" height="15" fill="rgb(249,119,36)" fg:x="854" fg:w="1"/><text x="68.0816%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8316%" y="613" width="0.0794%" height="15" fill="rgb(209,23,33)" fg:x="854" fg:w="1"/><text x="68.0816%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.8316%" y="597" width="0.0794%" height="15" fill="rgb(211,10,0)" fg:x="854" fg:w="1"/><text x="68.0816%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8316%" y="581" width="0.0794%" height="15" fill="rgb(208,99,37)" fg:x="854" fg:w="1"/><text x="68.0816%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.8316%" y="565" width="0.0794%" height="15" fill="rgb(213,132,31)" fg:x="854" fg:w="1"/><text x="68.0816%" y="575.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="67.9110%" y="709" width="0.0794%" height="15" fill="rgb(243,129,40)" fg:x="855" fg:w="1"/><text x="68.1610%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="67.9110%" y="693" width="0.0794%" height="15" fill="rgb(210,66,33)" fg:x="855" fg:w="1"/><text x="68.1610%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="67.9110%" y="677" width="0.0794%" height="15" fill="rgb(209,189,4)" fg:x="855" fg:w="1"/><text x="68.1610%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="67.9110%" y="661" width="0.0794%" height="15" fill="rgb(214,107,37)" fg:x="855" fg:w="1"/><text x="68.1610%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="67.9110%" y="645" width="0.0794%" height="15" fill="rgb(245,88,54)" fg:x="855" fg:w="1"/><text x="68.1610%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="67.9110%" y="629" width="0.0794%" height="15" fill="rgb(205,146,20)" fg:x="855" fg:w="1"/><text x="68.1610%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="67.9110%" y="613" width="0.0794%" height="15" fill="rgb(220,161,25)" fg:x="855" fg:w="1"/><text x="68.1610%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="67.9110%" y="597" width="0.0794%" height="15" fill="rgb(215,152,15)" fg:x="855" fg:w="1"/><text x="68.1610%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.9110%" y="581" width="0.0794%" height="15" fill="rgb(233,192,44)" fg:x="855" fg:w="1"/><text x="68.1610%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.9110%" y="565" width="0.0794%" height="15" fill="rgb(240,170,46)" fg:x="855" fg:w="1"/><text x="68.1610%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.9110%" y="549" width="0.0794%" height="15" fill="rgb(207,104,33)" fg:x="855" fg:w="1"/><text x="68.1610%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.9110%" y="533" width="0.0794%" height="15" fill="rgb(219,21,39)" fg:x="855" fg:w="1"/><text x="68.1610%" y="543.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="67.9905%" y="709" width="0.0794%" height="15" fill="rgb(214,133,29)" fg:x="856" fg:w="1"/><text x="68.2405%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="67.9905%" y="693" width="0.0794%" height="15" fill="rgb(226,93,6)" fg:x="856" fg:w="1"/><text x="68.2405%" y="703.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="67.9905%" y="677" width="0.0794%" height="15" fill="rgb(252,222,34)" fg:x="856" fg:w="1"/><text x="68.2405%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="67.9905%" y="661" width="0.0794%" height="15" fill="rgb(252,92,48)" fg:x="856" fg:w="1"/><text x="68.2405%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="67.9905%" y="645" width="0.0794%" height="15" fill="rgb(245,223,24)" fg:x="856" fg:w="1"/><text x="68.2405%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.9905%" y="629" width="0.0794%" height="15" fill="rgb(205,176,3)" fg:x="856" fg:w="1"/><text x="68.2405%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="67.9905%" y="613" width="0.0794%" height="15" fill="rgb(235,151,15)" fg:x="856" fg:w="1"/><text x="68.2405%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.9905%" y="597" width="0.0794%" height="15" fill="rgb(237,209,11)" fg:x="856" fg:w="1"/><text x="68.2405%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.9905%" y="581" width="0.0794%" height="15" fill="rgb(243,227,24)" fg:x="856" fg:w="1"/><text x="68.2405%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.9905%" y="565" width="0.0794%" height="15" fill="rgb(239,193,16)" fg:x="856" fg:w="1"/><text x="68.2405%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.9905%" y="549" width="0.0794%" height="15" fill="rgb(231,27,9)" fg:x="856" fg:w="1"/><text x="68.2405%" y="559.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="68.0699%" y="677" width="0.0794%" height="15" fill="rgb(219,169,10)" fg:x="857" fg:w="1"/><text x="68.3199%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="68.0699%" y="661" width="0.0794%" height="15" fill="rgb(244,229,43)" fg:x="857" fg:w="1"/><text x="68.3199%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.0699%" y="645" width="0.0794%" height="15" fill="rgb(254,38,20)" fg:x="857" fg:w="1"/><text x="68.3199%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.0699%" y="629" width="0.0794%" height="15" fill="rgb(250,47,30)" fg:x="857" fg:w="1"/><text x="68.3199%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.0699%" y="613" width="0.0794%" height="15" fill="rgb(224,124,36)" fg:x="857" fg:w="1"/><text x="68.3199%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.0699%" y="597" width="0.0794%" height="15" fill="rgb(246,68,51)" fg:x="857" fg:w="1"/><text x="68.3199%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.0699%" y="581" width="0.0794%" height="15" fill="rgb(253,43,49)" fg:x="857" fg:w="1"/><text x="68.3199%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.0699%" y="565" width="0.0794%" height="15" fill="rgb(219,54,36)" fg:x="857" fg:w="1"/><text x="68.3199%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.0699%" y="549" width="0.0794%" height="15" fill="rgb(227,133,34)" fg:x="857" fg:w="1"/><text x="68.3199%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.0699%" y="533" width="0.0794%" height="15" fill="rgb(247,227,15)" fg:x="857" fg:w="1"/><text x="68.3199%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.0699%" y="517" width="0.0794%" height="15" fill="rgb(229,96,14)" fg:x="857" fg:w="1"/><text x="68.3199%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.0699%" y="501" width="0.0794%" height="15" fill="rgb(220,79,17)" fg:x="857" fg:w="1"/><text x="68.3199%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.0699%" y="485" width="0.0794%" height="15" fill="rgb(205,131,53)" fg:x="857" fg:w="1"/><text x="68.3199%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.0699%" y="469" width="0.0794%" height="15" fill="rgb(209,50,29)" fg:x="857" fg:w="1"/><text x="68.3199%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.0699%" y="453" width="0.0794%" height="15" fill="rgb(245,86,46)" fg:x="857" fg:w="1"/><text x="68.3199%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.0699%" y="437" width="0.0794%" height="15" fill="rgb(235,66,46)" fg:x="857" fg:w="1"/><text x="68.3199%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.0699%" y="421" width="0.0794%" height="15" fill="rgb(232,148,31)" fg:x="857" fg:w="1"/><text x="68.3199%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.0699%" y="405" width="0.0794%" height="15" fill="rgb(217,149,8)" fg:x="857" fg:w="1"/><text x="68.3199%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.0699%" y="389" width="0.0794%" height="15" fill="rgb(209,183,11)" fg:x="857" fg:w="1"/><text x="68.3199%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.0699%" y="373" width="0.0794%" height="15" fill="rgb(208,55,20)" fg:x="857" fg:w="1"/><text x="68.3199%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.0699%" y="357" width="0.0794%" height="15" fill="rgb(218,39,14)" fg:x="857" fg:w="1"/><text x="68.3199%" y="367.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="68.1493%" y="677" width="0.0794%" height="15" fill="rgb(216,169,33)" fg:x="858" fg:w="1"/><text x="68.3993%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="68.1493%" y="661" width="0.0794%" height="15" fill="rgb(233,80,24)" fg:x="858" fg:w="1"/><text x="68.3993%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.1493%" y="645" width="0.0794%" height="15" fill="rgb(213,179,31)" fg:x="858" fg:w="1"/><text x="68.3993%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.1493%" y="629" width="0.0794%" height="15" fill="rgb(209,19,5)" fg:x="858" fg:w="1"/><text x="68.3993%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.1493%" y="613" width="0.0794%" height="15" fill="rgb(219,18,35)" fg:x="858" fg:w="1"/><text x="68.3993%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1493%" y="597" width="0.0794%" height="15" fill="rgb(209,169,16)" fg:x="858" fg:w="1"/><text x="68.3993%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="68.2288%" y="613" width="0.0794%" height="15" fill="rgb(245,90,51)" fg:x="859" fg:w="1"/><text x="68.4788%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (26 samples, 2.07%)</title><rect x="66.3225%" y="725" width="2.0651%" height="15" fill="rgb(220,99,45)" fg:x="835" fg:w="26"/><text x="66.5725%" y="735.50">p..</text></g><g><title>plugins_core::build::Build::occupying (4 samples, 0.32%)</title><rect x="68.0699%" y="709" width="0.3177%" height="15" fill="rgb(249,89,25)" fg:x="857" fg:w="4"/><text x="68.3199%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.32%)</title><rect x="68.0699%" y="693" width="0.3177%" height="15" fill="rgb(239,193,0)" fg:x="857" fg:w="4"/><text x="68.3199%" y="703.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (2 samples, 0.16%)</title><rect x="68.2288%" y="677" width="0.1589%" height="15" fill="rgb(231,126,1)" fg:x="859" fg:w="2"/><text x="68.4788%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="68.2288%" y="661" width="0.1589%" height="15" fill="rgb(243,166,3)" fg:x="859" fg:w="2"/><text x="68.4788%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="68.2288%" y="645" width="0.1589%" height="15" fill="rgb(223,22,34)" fg:x="859" fg:w="2"/><text x="68.4788%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="68.2288%" y="629" width="0.1589%" height="15" fill="rgb(251,52,51)" fg:x="859" fg:w="2"/><text x="68.4788%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.3082%" y="613" width="0.0794%" height="15" fill="rgb(221,165,28)" fg:x="860" fg:w="1"/><text x="68.5582%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.3082%" y="597" width="0.0794%" height="15" fill="rgb(218,121,47)" fg:x="860" fg:w="1"/><text x="68.5582%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.3082%" y="581" width="0.0794%" height="15" fill="rgb(209,120,9)" fg:x="860" fg:w="1"/><text x="68.5582%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3082%" y="565" width="0.0794%" height="15" fill="rgb(236,68,12)" fg:x="860" fg:w="1"/><text x="68.5582%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.3082%" y="549" width="0.0794%" height="15" fill="rgb(225,194,26)" fg:x="860" fg:w="1"/><text x="68.5582%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3082%" y="533" width="0.0794%" height="15" fill="rgb(231,84,39)" fg:x="860" fg:w="1"/><text x="68.5582%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.3082%" y="517" width="0.0794%" height="15" fill="rgb(210,11,45)" fg:x="860" fg:w="1"/><text x="68.5582%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3082%" y="501" width="0.0794%" height="15" fill="rgb(224,54,52)" fg:x="860" fg:w="1"/><text x="68.5582%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.3082%" y="485" width="0.0794%" height="15" fill="rgb(238,102,14)" fg:x="860" fg:w="1"/><text x="68.5582%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3082%" y="469" width="0.0794%" height="15" fill="rgb(243,160,52)" fg:x="860" fg:w="1"/><text x="68.5582%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.3082%" y="453" width="0.0794%" height="15" fill="rgb(216,114,19)" fg:x="860" fg:w="1"/><text x="68.5582%" y="463.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="68.3876%" y="725" width="0.0794%" height="15" fill="rgb(244,166,37)" fg:x="861" fg:w="1"/><text x="68.6376%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="68.3876%" y="709" width="0.0794%" height="15" fill="rgb(246,29,44)" fg:x="861" fg:w="1"/><text x="68.6376%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="68.3876%" y="693" width="0.0794%" height="15" fill="rgb(215,56,53)" fg:x="861" fg:w="1"/><text x="68.6376%" y="703.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="68.3876%" y="677" width="0.0794%" height="15" fill="rgb(217,60,2)" fg:x="861" fg:w="1"/><text x="68.6376%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="68.3876%" y="661" width="0.0794%" height="15" fill="rgb(207,26,24)" fg:x="861" fg:w="1"/><text x="68.6376%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="68.4670%" y="693" width="0.0794%" height="15" fill="rgb(252,210,15)" fg:x="862" fg:w="1"/><text x="68.7170%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.5465%" y="693" width="0.0794%" height="15" fill="rgb(253,209,26)" fg:x="863" fg:w="1"/><text x="68.7965%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.5465%" y="677" width="0.0794%" height="15" fill="rgb(238,170,14)" fg:x="863" fg:w="1"/><text x="68.7965%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.5465%" y="661" width="0.0794%" height="15" fill="rgb(216,178,15)" fg:x="863" fg:w="1"/><text x="68.7965%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.5465%" y="645" width="0.0794%" height="15" fill="rgb(250,197,2)" fg:x="863" fg:w="1"/><text x="68.7965%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.5465%" y="629" width="0.0794%" height="15" fill="rgb(212,70,42)" fg:x="863" fg:w="1"/><text x="68.7965%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.5465%" y="613" width="0.0794%" height="15" fill="rgb(227,213,9)" fg:x="863" fg:w="1"/><text x="68.7965%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.5465%" y="597" width="0.0794%" height="15" fill="rgb(245,99,25)" fg:x="863" fg:w="1"/><text x="68.7965%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.5465%" y="581" width="0.0794%" height="15" fill="rgb(250,82,29)" fg:x="863" fg:w="1"/><text x="68.7965%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.5465%" y="565" width="0.0794%" height="15" fill="rgb(241,226,54)" fg:x="863" fg:w="1"/><text x="68.7965%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.5465%" y="549" width="0.0794%" height="15" fill="rgb(221,99,41)" fg:x="863" fg:w="1"/><text x="68.7965%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.5465%" y="533" width="0.0794%" height="15" fill="rgb(213,90,21)" fg:x="863" fg:w="1"/><text x="68.7965%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="68.4670%" y="709" width="0.2383%" height="15" fill="rgb(205,208,24)" fg:x="862" fg:w="3"/><text x="68.7170%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="68.6259%" y="693" width="0.0794%" height="15" fill="rgb(246,31,12)" fg:x="864" fg:w="1"/><text x="68.8759%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="68.6259%" y="677" width="0.0794%" height="15" fill="rgb(213,154,6)" fg:x="864" fg:w="1"/><text x="68.8759%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="68.6259%" y="661" width="0.0794%" height="15" fill="rgb(222,163,29)" fg:x="864" fg:w="1"/><text x="68.8759%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="68.6259%" y="645" width="0.0794%" height="15" fill="rgb(227,201,8)" fg:x="864" fg:w="1"/><text x="68.8759%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="68.6259%" y="629" width="0.0794%" height="15" fill="rgb(233,9,32)" fg:x="864" fg:w="1"/><text x="68.8759%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.6259%" y="613" width="0.0794%" height="15" fill="rgb(217,54,24)" fg:x="864" fg:w="1"/><text x="68.8759%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="68.6259%" y="597" width="0.0794%" height="15" fill="rgb(235,192,0)" fg:x="864" fg:w="1"/><text x="68.8759%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.6259%" y="581" width="0.0794%" height="15" fill="rgb(235,45,9)" fg:x="864" fg:w="1"/><text x="68.8759%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.6259%" y="565" width="0.0794%" height="15" fill="rgb(246,42,40)" fg:x="864" fg:w="1"/><text x="68.8759%" y="575.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="68.7053%" y="709" width="0.0794%" height="15" fill="rgb(248,111,24)" fg:x="865" fg:w="1"/><text x="68.9553%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="68.7053%" y="693" width="0.0794%" height="15" fill="rgb(249,65,22)" fg:x="865" fg:w="1"/><text x="68.9553%" y="703.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="68.7053%" y="677" width="0.0794%" height="15" fill="rgb(238,111,51)" fg:x="865" fg:w="1"/><text x="68.9553%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="68.7053%" y="661" width="0.0794%" height="15" fill="rgb(250,118,22)" fg:x="865" fg:w="1"/><text x="68.9553%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.7053%" y="645" width="0.0794%" height="15" fill="rgb(234,84,26)" fg:x="865" fg:w="1"/><text x="68.9553%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="68.7053%" y="629" width="0.0794%" height="15" fill="rgb(243,172,12)" fg:x="865" fg:w="1"/><text x="68.9553%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (49 samples, 3.89%)</title><rect x="64.9722%" y="741" width="3.8920%" height="15" fill="rgb(236,150,49)" fg:x="818" fg:w="49"/><text x="65.2222%" y="751.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.40%)</title><rect x="68.4670%" y="725" width="0.3971%" height="15" fill="rgb(225,197,26)" fg:x="862" fg:w="5"/><text x="68.7170%" y="735.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="68.7847%" y="709" width="0.0794%" height="15" fill="rgb(214,17,42)" fg:x="866" fg:w="1"/><text x="69.0347%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="68.7847%" y="693" width="0.0794%" height="15" fill="rgb(224,165,40)" fg:x="866" fg:w="1"/><text x="69.0347%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="68.7847%" y="677" width="0.0794%" height="15" fill="rgb(246,100,4)" fg:x="866" fg:w="1"/><text x="69.0347%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="68.7847%" y="661" width="0.0794%" height="15" fill="rgb(222,103,0)" fg:x="866" fg:w="1"/><text x="69.0347%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.7847%" y="645" width="0.0794%" height="15" fill="rgb(227,189,26)" fg:x="866" fg:w="1"/><text x="69.0347%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.7847%" y="629" width="0.0794%" height="15" fill="rgb(214,202,17)" fg:x="866" fg:w="1"/><text x="69.0347%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="68.8642%" y="741" width="0.0794%" height="15" fill="rgb(229,111,3)" fg:x="867" fg:w="1"/><text x="69.1142%" y="751.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="69.0230%" y="645" width="0.0794%" height="15" fill="rgb(229,172,15)" fg:x="869" fg:w="1"/><text x="69.2730%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.0230%" y="629" width="0.0794%" height="15" fill="rgb(230,224,35)" fg:x="869" fg:w="1"/><text x="69.2730%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.0230%" y="613" width="0.0794%" height="15" fill="rgb(251,141,6)" fg:x="869" fg:w="1"/><text x="69.2730%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.1025%" y="597" width="0.0794%" height="15" fill="rgb(225,208,6)" fg:x="870" fg:w="1"/><text x="69.3525%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.1025%" y="581" width="0.0794%" height="15" fill="rgb(246,181,16)" fg:x="870" fg:w="1"/><text x="69.3525%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.1025%" y="565" width="0.0794%" height="15" fill="rgb(227,129,36)" fg:x="870" fg:w="1"/><text x="69.3525%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.1025%" y="549" width="0.0794%" height="15" fill="rgb(248,117,24)" fg:x="870" fg:w="1"/><text x="69.3525%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.1025%" y="533" width="0.0794%" height="15" fill="rgb(214,185,35)" fg:x="870" fg:w="1"/><text x="69.3525%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.1025%" y="517" width="0.0794%" height="15" fill="rgb(236,150,34)" fg:x="870" fg:w="1"/><text x="69.3525%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.1025%" y="501" width="0.0794%" height="15" fill="rgb(243,228,27)" fg:x="870" fg:w="1"/><text x="69.3525%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.1025%" y="485" width="0.0794%" height="15" fill="rgb(245,77,44)" fg:x="870" fg:w="1"/><text x="69.3525%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="69.1025%" y="613" width="0.1589%" height="15" fill="rgb(235,214,42)" fg:x="870" fg:w="2"/><text x="69.3525%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.1819%" y="597" width="0.0794%" height="15" fill="rgb(221,74,3)" fg:x="871" fg:w="1"/><text x="69.4319%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.1819%" y="581" width="0.0794%" height="15" fill="rgb(206,121,29)" fg:x="871" fg:w="1"/><text x="69.4319%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="69.1819%" y="565" width="0.0794%" height="15" fill="rgb(249,131,53)" fg:x="871" fg:w="1"/><text x="69.4319%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="69.2613%" y="613" width="0.1589%" height="15" fill="rgb(236,170,29)" fg:x="872" fg:w="2"/><text x="69.5113%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="69.2613%" y="597" width="0.1589%" height="15" fill="rgb(247,96,15)" fg:x="872" fg:w="2"/><text x="69.5113%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="69.2613%" y="581" width="0.1589%" height="15" fill="rgb(211,210,7)" fg:x="872" fg:w="2"/><text x="69.5113%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.3407%" y="565" width="0.0794%" height="15" fill="rgb(240,88,50)" fg:x="873" fg:w="1"/><text x="69.5907%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.3407%" y="549" width="0.0794%" height="15" fill="rgb(209,229,26)" fg:x="873" fg:w="1"/><text x="69.5907%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.3407%" y="533" width="0.0794%" height="15" fill="rgb(210,68,23)" fg:x="873" fg:w="1"/><text x="69.5907%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="69.1025%" y="629" width="0.3971%" height="15" fill="rgb(229,180,13)" fg:x="870" fg:w="5"/><text x="69.3525%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.4202%" y="613" width="0.0794%" height="15" fill="rgb(236,53,44)" fg:x="874" fg:w="1"/><text x="69.6702%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.4202%" y="597" width="0.0794%" height="15" fill="rgb(244,214,29)" fg:x="874" fg:w="1"/><text x="69.6702%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.4202%" y="581" width="0.0794%" height="15" fill="rgb(220,75,29)" fg:x="874" fg:w="1"/><text x="69.6702%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="69.0230%" y="661" width="0.5560%" height="15" fill="rgb(214,183,37)" fg:x="869" fg:w="7"/><text x="69.2730%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="69.1025%" y="645" width="0.4766%" height="15" fill="rgb(239,117,29)" fg:x="870" fg:w="6"/><text x="69.3525%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.4996%" y="629" width="0.0794%" height="15" fill="rgb(237,171,35)" fg:x="875" fg:w="1"/><text x="69.7496%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.4996%" y="613" width="0.0794%" height="15" fill="rgb(229,178,53)" fg:x="875" fg:w="1"/><text x="69.7496%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.4996%" y="597" width="0.0794%" height="15" fill="rgb(210,102,19)" fg:x="875" fg:w="1"/><text x="69.7496%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.5790%" y="613" width="0.0794%" height="15" fill="rgb(235,127,22)" fg:x="876" fg:w="1"/><text x="69.8290%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.5790%" y="661" width="0.1589%" height="15" fill="rgb(244,31,31)" fg:x="876" fg:w="2"/><text x="69.8290%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="69.5790%" y="645" width="0.1589%" height="15" fill="rgb(231,43,21)" fg:x="876" fg:w="2"/><text x="69.8290%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.5790%" y="629" width="0.1589%" height="15" fill="rgb(217,131,35)" fg:x="876" fg:w="2"/><text x="69.8290%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.6585%" y="613" width="0.0794%" height="15" fill="rgb(221,149,4)" fg:x="877" fg:w="1"/><text x="69.9085%" y="623.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="69.7379%" y="645" width="0.0794%" height="15" fill="rgb(232,170,28)" fg:x="878" fg:w="1"/><text x="69.9879%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.7379%" y="629" width="0.0794%" height="15" fill="rgb(238,56,10)" fg:x="878" fg:w="1"/><text x="69.9879%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="69.7379%" y="613" width="0.0794%" height="15" fill="rgb(235,196,14)" fg:x="878" fg:w="1"/><text x="69.9879%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.7379%" y="597" width="0.0794%" height="15" fill="rgb(216,45,48)" fg:x="878" fg:w="1"/><text x="69.9879%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.7379%" y="581" width="0.0794%" height="15" fill="rgb(238,213,17)" fg:x="878" fg:w="1"/><text x="69.9879%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.7379%" y="565" width="0.0794%" height="15" fill="rgb(212,13,2)" fg:x="878" fg:w="1"/><text x="69.9879%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.7379%" y="549" width="0.0794%" height="15" fill="rgb(240,114,20)" fg:x="878" fg:w="1"/><text x="69.9879%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.8173%" y="613" width="0.0794%" height="15" fill="rgb(228,41,40)" fg:x="879" fg:w="1"/><text x="70.0673%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.8173%" y="597" width="0.0794%" height="15" fill="rgb(244,132,35)" fg:x="879" fg:w="1"/><text x="70.0673%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="69.8967%" y="565" width="0.0794%" height="15" fill="rgb(253,189,4)" fg:x="880" fg:w="1"/><text x="70.1467%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.8967%" y="549" width="0.0794%" height="15" fill="rgb(224,37,19)" fg:x="880" fg:w="1"/><text x="70.1467%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8967%" y="533" width="0.0794%" height="15" fill="rgb(235,223,18)" fg:x="880" fg:w="1"/><text x="70.1467%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="69.8173%" y="645" width="0.3177%" height="15" fill="rgb(235,163,25)" fg:x="879" fg:w="4"/><text x="70.0673%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="69.8173%" y="629" width="0.3177%" height="15" fill="rgb(217,145,28)" fg:x="879" fg:w="4"/><text x="70.0673%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="69.8967%" y="613" width="0.2383%" height="15" fill="rgb(223,223,32)" fg:x="880" fg:w="3"/><text x="70.1467%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="69.8967%" y="597" width="0.2383%" height="15" fill="rgb(227,189,39)" fg:x="880" fg:w="3"/><text x="70.1467%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="69.8967%" y="581" width="0.2383%" height="15" fill="rgb(248,10,22)" fg:x="880" fg:w="3"/><text x="70.1467%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="69.9762%" y="565" width="0.1589%" height="15" fill="rgb(248,46,39)" fg:x="881" fg:w="2"/><text x="70.2262%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="69.9762%" y="549" width="0.1589%" height="15" fill="rgb(248,113,48)" fg:x="881" fg:w="2"/><text x="70.2262%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="69.9762%" y="533" width="0.1589%" height="15" fill="rgb(245,16,25)" fg:x="881" fg:w="2"/><text x="70.2262%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="69.9762%" y="517" width="0.1589%" height="15" fill="rgb(249,152,16)" fg:x="881" fg:w="2"/><text x="70.2262%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="69.9762%" y="501" width="0.1589%" height="15" fill="rgb(250,16,1)" fg:x="881" fg:w="2"/><text x="70.2262%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="69.9762%" y="485" width="0.1589%" height="15" fill="rgb(249,138,3)" fg:x="881" fg:w="2"/><text x="70.2262%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="69.9762%" y="469" width="0.1589%" height="15" fill="rgb(227,71,41)" fg:x="881" fg:w="2"/><text x="70.2262%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.0556%" y="453" width="0.0794%" height="15" fill="rgb(209,184,23)" fg:x="882" fg:w="1"/><text x="70.3056%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.0556%" y="437" width="0.0794%" height="15" fill="rgb(223,215,31)" fg:x="882" fg:w="1"/><text x="70.3056%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.0556%" y="421" width="0.0794%" height="15" fill="rgb(210,146,28)" fg:x="882" fg:w="1"/><text x="70.3056%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0556%" y="405" width="0.0794%" height="15" fill="rgb(209,183,41)" fg:x="882" fg:w="1"/><text x="70.3056%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.1350%" y="501" width="0.0794%" height="15" fill="rgb(209,224,45)" fg:x="883" fg:w="1"/><text x="70.3850%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1350%" y="485" width="0.0794%" height="15" fill="rgb(224,209,51)" fg:x="883" fg:w="1"/><text x="70.3850%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.1350%" y="469" width="0.0794%" height="15" fill="rgb(223,17,39)" fg:x="883" fg:w="1"/><text x="70.3850%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1350%" y="453" width="0.0794%" height="15" fill="rgb(234,204,37)" fg:x="883" fg:w="1"/><text x="70.3850%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.1350%" y="517" width="0.1589%" height="15" fill="rgb(236,120,5)" fg:x="883" fg:w="2"/><text x="70.3850%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.2145%" y="501" width="0.0794%" height="15" fill="rgb(248,97,27)" fg:x="884" fg:w="1"/><text x="70.4645%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.2145%" y="485" width="0.0794%" height="15" fill="rgb(240,66,17)" fg:x="884" fg:w="1"/><text x="70.4645%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="70.1350%" y="549" width="0.2383%" height="15" fill="rgb(210,79,3)" fg:x="883" fg:w="3"/><text x="70.3850%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.1350%" y="533" width="0.2383%" height="15" fill="rgb(214,176,27)" fg:x="883" fg:w="3"/><text x="70.3850%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.2939%" y="517" width="0.0794%" height="15" fill="rgb(235,185,3)" fg:x="885" fg:w="1"/><text x="70.5439%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="70.2939%" y="501" width="0.0794%" height="15" fill="rgb(227,24,12)" fg:x="885" fg:w="1"/><text x="70.5439%" y="511.50"></text></g><g><title>engine::session::Session::close (19 samples, 1.51%)</title><rect x="68.9436%" y="741" width="1.5091%" height="15" fill="rgb(252,169,48)" fg:x="868" fg:w="19"/><text x="69.1936%" y="751.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.43%)</title><rect x="69.0230%" y="725" width="1.4297%" height="15" fill="rgb(212,65,1)" fg:x="869" fg:w="18"/><text x="69.2730%" y="735.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.43%)</title><rect x="69.0230%" y="709" width="1.4297%" height="15" fill="rgb(242,39,24)" fg:x="869" fg:w="18"/><text x="69.2730%" y="719.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (18 samples, 1.43%)</title><rect x="69.0230%" y="693" width="1.4297%" height="15" fill="rgb(249,32,23)" fg:x="869" fg:w="18"/><text x="69.2730%" y="703.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.43%)</title><rect x="69.0230%" y="677" width="1.4297%" height="15" fill="rgb(251,195,23)" fg:x="869" fg:w="18"/><text x="69.2730%" y="687.50"></text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.71%)</title><rect x="69.7379%" y="661" width="0.7149%" height="15" fill="rgb(236,174,8)" fg:x="878" fg:w="9"/><text x="69.9879%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="70.1350%" y="645" width="0.3177%" height="15" fill="rgb(220,197,8)" fg:x="883" fg:w="4"/><text x="70.3850%" y="655.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="70.1350%" y="629" width="0.3177%" height="15" fill="rgb(240,108,37)" fg:x="883" fg:w="4"/><text x="70.3850%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="70.1350%" y="613" width="0.3177%" height="15" fill="rgb(232,176,24)" fg:x="883" fg:w="4"/><text x="70.3850%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="70.1350%" y="597" width="0.3177%" height="15" fill="rgb(243,35,29)" fg:x="883" fg:w="4"/><text x="70.3850%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="70.1350%" y="581" width="0.3177%" height="15" fill="rgb(210,37,18)" fg:x="883" fg:w="4"/><text x="70.3850%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="70.1350%" y="565" width="0.3177%" height="15" fill="rgb(224,184,40)" fg:x="883" fg:w="4"/><text x="70.3850%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.3733%" y="549" width="0.0794%" height="15" fill="rgb(236,39,29)" fg:x="886" fg:w="1"/><text x="70.6233%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3733%" y="533" width="0.0794%" height="15" fill="rgb(232,48,39)" fg:x="886" fg:w="1"/><text x="70.6233%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="70.5322%" y="549" width="0.0794%" height="15" fill="rgb(236,34,42)" fg:x="888" fg:w="1"/><text x="70.7822%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="70.5322%" y="533" width="0.0794%" height="15" fill="rgb(243,106,37)" fg:x="888" fg:w="1"/><text x="70.7822%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.5322%" y="517" width="0.0794%" height="15" fill="rgb(218,96,6)" fg:x="888" fg:w="1"/><text x="70.7822%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.5322%" y="501" width="0.0794%" height="15" fill="rgb(235,130,12)" fg:x="888" fg:w="1"/><text x="70.7822%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.5322%" y="485" width="0.0794%" height="15" fill="rgb(231,95,0)" fg:x="888" fg:w="1"/><text x="70.7822%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5322%" y="469" width="0.0794%" height="15" fill="rgb(228,12,23)" fg:x="888" fg:w="1"/><text x="70.7822%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5322%" y="453" width="0.0794%" height="15" fill="rgb(216,12,1)" fg:x="888" fg:w="1"/><text x="70.7822%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5322%" y="437" width="0.0794%" height="15" fill="rgb(219,59,3)" fg:x="888" fg:w="1"/><text x="70.7822%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5322%" y="421" width="0.0794%" height="15" fill="rgb(215,208,46)" fg:x="888" fg:w="1"/><text x="70.7822%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.5322%" y="405" width="0.0794%" height="15" fill="rgb(254,224,29)" fg:x="888" fg:w="1"/><text x="70.7822%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.5322%" y="389" width="0.0794%" height="15" fill="rgb(232,14,29)" fg:x="888" fg:w="1"/><text x="70.7822%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.5322%" y="373" width="0.0794%" height="15" fill="rgb(208,45,52)" fg:x="888" fg:w="1"/><text x="70.7822%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.5322%" y="357" width="0.0794%" height="15" fill="rgb(234,191,28)" fg:x="888" fg:w="1"/><text x="70.7822%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.5322%" y="341" width="0.0794%" height="15" fill="rgb(244,67,43)" fg:x="888" fg:w="1"/><text x="70.7822%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="70.5322%" y="325" width="0.0794%" height="15" fill="rgb(236,189,24)" fg:x="888" fg:w="1"/><text x="70.7822%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="70.5322%" y="309" width="0.0794%" height="15" fill="rgb(239,214,33)" fg:x="888" fg:w="1"/><text x="70.7822%" y="319.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="70.6116%" y="533" width="0.0794%" height="15" fill="rgb(226,176,41)" fg:x="889" fg:w="1"/><text x="70.8616%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.6116%" y="517" width="0.0794%" height="15" fill="rgb(248,47,8)" fg:x="889" fg:w="1"/><text x="70.8616%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.6116%" y="501" width="0.0794%" height="15" fill="rgb(218,81,44)" fg:x="889" fg:w="1"/><text x="70.8616%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.6116%" y="485" width="0.0794%" height="15" fill="rgb(213,98,6)" fg:x="889" fg:w="1"/><text x="70.8616%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6116%" y="469" width="0.0794%" height="15" fill="rgb(222,85,22)" fg:x="889" fg:w="1"/><text x="70.8616%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.6910%" y="453" width="0.0794%" height="15" fill="rgb(239,46,39)" fg:x="890" fg:w="1"/><text x="70.9410%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.6910%" y="437" width="0.0794%" height="15" fill="rgb(237,12,29)" fg:x="890" fg:w="1"/><text x="70.9410%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.6910%" y="421" width="0.0794%" height="15" fill="rgb(214,77,8)" fg:x="890" fg:w="1"/><text x="70.9410%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.6910%" y="405" width="0.0794%" height="15" fill="rgb(217,168,37)" fg:x="890" fg:w="1"/><text x="70.9410%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.6910%" y="389" width="0.0794%" height="15" fill="rgb(221,217,23)" fg:x="890" fg:w="1"/><text x="70.9410%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.6910%" y="373" width="0.0794%" height="15" fill="rgb(243,229,36)" fg:x="890" fg:w="1"/><text x="70.9410%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.6910%" y="357" width="0.0794%" height="15" fill="rgb(251,163,40)" fg:x="890" fg:w="1"/><text x="70.9410%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.6910%" y="341" width="0.0794%" height="15" fill="rgb(237,222,12)" fg:x="890" fg:w="1"/><text x="70.9410%" y="351.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="70.6910%" y="325" width="0.0794%" height="15" fill="rgb(248,132,6)" fg:x="890" fg:w="1"/><text x="70.9410%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="70.5322%" y="597" width="0.3177%" height="15" fill="rgb(227,167,50)" fg:x="888" fg:w="4"/><text x="70.7822%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="70.5322%" y="581" width="0.3177%" height="15" fill="rgb(242,84,37)" fg:x="888" fg:w="4"/><text x="70.7822%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="70.5322%" y="565" width="0.3177%" height="15" fill="rgb(212,4,50)" fg:x="888" fg:w="4"/><text x="70.7822%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="70.6116%" y="549" width="0.2383%" height="15" fill="rgb(230,228,32)" fg:x="889" fg:w="3"/><text x="70.8616%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.6910%" y="533" width="0.1589%" height="15" fill="rgb(248,217,23)" fg:x="890" fg:w="2"/><text x="70.9410%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.6910%" y="517" width="0.1589%" height="15" fill="rgb(238,197,32)" fg:x="890" fg:w="2"/><text x="70.9410%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="70.6910%" y="501" width="0.1589%" height="15" fill="rgb(236,106,1)" fg:x="890" fg:w="2"/><text x="70.9410%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.6910%" y="485" width="0.1589%" height="15" fill="rgb(219,228,13)" fg:x="890" fg:w="2"/><text x="70.9410%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.6910%" y="469" width="0.1589%" height="15" fill="rgb(238,30,35)" fg:x="890" fg:w="2"/><text x="70.9410%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.7705%" y="453" width="0.0794%" height="15" fill="rgb(236,70,23)" fg:x="891" fg:w="1"/><text x="71.0205%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.7705%" y="437" width="0.0794%" height="15" fill="rgb(249,104,48)" fg:x="891" fg:w="1"/><text x="71.0205%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.7705%" y="421" width="0.0794%" height="15" fill="rgb(254,117,50)" fg:x="891" fg:w="1"/><text x="71.0205%" y="431.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (5 samples, 0.40%)</title><rect x="70.5322%" y="661" width="0.3971%" height="15" fill="rgb(223,152,4)" fg:x="888" fg:w="5"/><text x="70.7822%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (5 samples, 0.40%)</title><rect x="70.5322%" y="645" width="0.3971%" height="15" fill="rgb(245,6,2)" fg:x="888" fg:w="5"/><text x="70.7822%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="70.5322%" y="629" width="0.3971%" height="15" fill="rgb(249,150,24)" fg:x="888" fg:w="5"/><text x="70.7822%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="70.5322%" y="613" width="0.3971%" height="15" fill="rgb(228,185,42)" fg:x="888" fg:w="5"/><text x="70.7822%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.8499%" y="597" width="0.0794%" height="15" fill="rgb(226,39,33)" fg:x="892" fg:w="1"/><text x="71.0999%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8499%" y="581" width="0.0794%" height="15" fill="rgb(221,166,19)" fg:x="892" fg:w="1"/><text x="71.0999%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.8499%" y="565" width="0.0794%" height="15" fill="rgb(209,109,2)" fg:x="892" fg:w="1"/><text x="71.0999%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8499%" y="549" width="0.0794%" height="15" fill="rgb(252,216,26)" fg:x="892" fg:w="1"/><text x="71.0999%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="70.9293%" y="517" width="0.0794%" height="15" fill="rgb(227,173,36)" fg:x="893" fg:w="1"/><text x="71.1793%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="70.9293%" y="501" width="0.0794%" height="15" fill="rgb(209,90,7)" fg:x="893" fg:w="1"/><text x="71.1793%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9293%" y="485" width="0.0794%" height="15" fill="rgb(250,194,11)" fg:x="893" fg:w="1"/><text x="71.1793%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.0882%" y="437" width="0.0794%" height="15" fill="rgb(220,72,50)" fg:x="895" fg:w="1"/><text x="71.3382%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.0882%" y="421" width="0.0794%" height="15" fill="rgb(222,106,48)" fg:x="895" fg:w="1"/><text x="71.3382%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.0882%" y="405" width="0.0794%" height="15" fill="rgb(216,220,45)" fg:x="895" fg:w="1"/><text x="71.3382%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.0882%" y="389" width="0.0794%" height="15" fill="rgb(234,112,18)" fg:x="895" fg:w="1"/><text x="71.3382%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.1676%" y="373" width="0.0794%" height="15" fill="rgb(206,179,9)" fg:x="896" fg:w="1"/><text x="71.4176%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.1676%" y="357" width="0.0794%" height="15" fill="rgb(215,115,40)" fg:x="896" fg:w="1"/><text x="71.4176%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.32%)</title><rect x="71.0087%" y="485" width="0.3177%" height="15" fill="rgb(222,69,34)" fg:x="894" fg:w="4"/><text x="71.2587%" y="495.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="71.0882%" y="469" width="0.2383%" height="15" fill="rgb(209,161,10)" fg:x="895" fg:w="3"/><text x="71.3382%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="71.0882%" y="453" width="0.2383%" height="15" fill="rgb(217,6,38)" fg:x="895" fg:w="3"/><text x="71.3382%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.1676%" y="437" width="0.1589%" height="15" fill="rgb(229,229,48)" fg:x="896" fg:w="2"/><text x="71.4176%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1676%" y="421" width="0.1589%" height="15" fill="rgb(225,21,28)" fg:x="896" fg:w="2"/><text x="71.4176%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.1676%" y="405" width="0.1589%" height="15" fill="rgb(206,33,13)" fg:x="896" fg:w="2"/><text x="71.4176%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1676%" y="389" width="0.1589%" height="15" fill="rgb(242,178,17)" fg:x="896" fg:w="2"/><text x="71.4176%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.2470%" y="373" width="0.0794%" height="15" fill="rgb(220,162,5)" fg:x="897" fg:w="1"/><text x="71.4970%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.2470%" y="357" width="0.0794%" height="15" fill="rgb(210,33,43)" fg:x="897" fg:w="1"/><text x="71.4970%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.2470%" y="341" width="0.0794%" height="15" fill="rgb(216,116,54)" fg:x="897" fg:w="1"/><text x="71.4970%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.2470%" y="325" width="0.0794%" height="15" fill="rgb(249,92,24)" fg:x="897" fg:w="1"/><text x="71.4970%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="71.2470%" y="309" width="0.0794%" height="15" fill="rgb(231,189,14)" fg:x="897" fg:w="1"/><text x="71.4970%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.3264%" y="437" width="0.0794%" height="15" fill="rgb(230,8,41)" fg:x="898" fg:w="1"/><text x="71.5764%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.3264%" y="421" width="0.0794%" height="15" fill="rgb(249,7,27)" fg:x="898" fg:w="1"/><text x="71.5764%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.3264%" y="405" width="0.0794%" height="15" fill="rgb(232,86,5)" fg:x="898" fg:w="1"/><text x="71.5764%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.3264%" y="389" width="0.0794%" height="15" fill="rgb(224,175,18)" fg:x="898" fg:w="1"/><text x="71.5764%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.3264%" y="373" width="0.0794%" height="15" fill="rgb(220,129,12)" fg:x="898" fg:w="1"/><text x="71.5764%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.3264%" y="357" width="0.0794%" height="15" fill="rgb(210,19,36)" fg:x="898" fg:w="1"/><text x="71.5764%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.4059%" y="341" width="0.0794%" height="15" fill="rgb(219,96,14)" fg:x="899" fg:w="1"/><text x="71.6559%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4059%" y="325" width="0.0794%" height="15" fill="rgb(249,106,1)" fg:x="899" fg:w="1"/><text x="71.6559%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="71.3264%" y="485" width="0.2383%" height="15" fill="rgb(249,155,20)" fg:x="898" fg:w="3"/><text x="71.5764%" y="495.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="71.3264%" y="469" width="0.2383%" height="15" fill="rgb(244,168,9)" fg:x="898" fg:w="3"/><text x="71.5764%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="71.3264%" y="453" width="0.2383%" height="15" fill="rgb(216,23,50)" fg:x="898" fg:w="3"/><text x="71.5764%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.4059%" y="437" width="0.1589%" height="15" fill="rgb(224,219,20)" fg:x="899" fg:w="2"/><text x="71.6559%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.4059%" y="421" width="0.1589%" height="15" fill="rgb(222,156,15)" fg:x="899" fg:w="2"/><text x="71.6559%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.4059%" y="405" width="0.1589%" height="15" fill="rgb(231,97,17)" fg:x="899" fg:w="2"/><text x="71.6559%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.4059%" y="389" width="0.1589%" height="15" fill="rgb(218,70,48)" fg:x="899" fg:w="2"/><text x="71.6559%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="71.4059%" y="373" width="0.1589%" height="15" fill="rgb(212,196,52)" fg:x="899" fg:w="2"/><text x="71.6559%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.4059%" y="357" width="0.1589%" height="15" fill="rgb(243,203,18)" fg:x="899" fg:w="2"/><text x="71.6559%" y="367.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="71.4853%" y="341" width="0.0794%" height="15" fill="rgb(252,125,41)" fg:x="900" fg:w="1"/><text x="71.7353%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.5647%" y="485" width="0.0794%" height="15" fill="rgb(223,180,33)" fg:x="901" fg:w="1"/><text x="71.8147%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="71.6442%" y="485" width="0.0794%" height="15" fill="rgb(254,159,46)" fg:x="902" fg:w="1"/><text x="71.8942%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.6442%" y="469" width="0.0794%" height="15" fill="rgb(254,38,10)" fg:x="902" fg:w="1"/><text x="71.8942%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.7236%" y="437" width="0.0794%" height="15" fill="rgb(208,217,32)" fg:x="903" fg:w="1"/><text x="71.9736%" y="447.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="71.8030%" y="421" width="0.0794%" height="15" fill="rgb(221,120,13)" fg:x="904" fg:w="1"/><text x="72.0530%" y="431.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="71.8030%" y="405" width="0.0794%" height="15" fill="rgb(246,54,52)" fg:x="904" fg:w="1"/><text x="72.0530%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="71.8030%" y="389" width="0.0794%" height="15" fill="rgb(242,34,25)" fg:x="904" fg:w="1"/><text x="72.0530%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.8030%" y="373" width="0.0794%" height="15" fill="rgb(247,209,9)" fg:x="904" fg:w="1"/><text x="72.0530%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.8030%" y="357" width="0.0794%" height="15" fill="rgb(228,71,26)" fg:x="904" fg:w="1"/><text x="72.0530%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.8030%" y="341" width="0.0794%" height="15" fill="rgb(222,145,49)" fg:x="904" fg:w="1"/><text x="72.0530%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.8030%" y="325" width="0.0794%" height="15" fill="rgb(218,121,17)" fg:x="904" fg:w="1"/><text x="72.0530%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.8030%" y="309" width="0.0794%" height="15" fill="rgb(244,50,7)" fg:x="904" fg:w="1"/><text x="72.0530%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.8030%" y="293" width="0.0794%" height="15" fill="rgb(246,229,37)" fg:x="904" fg:w="1"/><text x="72.0530%" y="303.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.8030%" y="277" width="0.0794%" height="15" fill="rgb(225,18,5)" fg:x="904" fg:w="1"/><text x="72.0530%" y="287.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="71.9619%" y="293" width="0.0794%" height="15" fill="rgb(213,204,8)" fg:x="906" fg:w="1"/><text x="72.2119%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.9619%" y="277" width="0.0794%" height="15" fill="rgb(238,103,6)" fg:x="906" fg:w="1"/><text x="72.2119%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="71.8824%" y="325" width="0.2383%" height="15" fill="rgb(222,25,35)" fg:x="905" fg:w="3"/><text x="72.1324%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (3 samples, 0.24%)</title><rect x="71.8824%" y="309" width="0.2383%" height="15" fill="rgb(213,203,35)" fg:x="905" fg:w="3"/><text x="72.1324%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="72.0413%" y="293" width="0.0794%" height="15" fill="rgb(221,79,53)" fg:x="907" fg:w="1"/><text x="72.2913%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="71.8824%" y="405" width="0.3177%" height="15" fill="rgb(243,200,35)" fg:x="905" fg:w="4"/><text x="72.1324%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="71.8824%" y="389" width="0.3177%" height="15" fill="rgb(248,60,25)" fg:x="905" fg:w="4"/><text x="72.1324%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="71.8824%" y="373" width="0.3177%" height="15" fill="rgb(227,53,46)" fg:x="905" fg:w="4"/><text x="72.1324%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.32%)</title><rect x="71.8824%" y="357" width="0.3177%" height="15" fill="rgb(216,120,32)" fg:x="905" fg:w="4"/><text x="72.1324%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="71.8824%" y="341" width="0.3177%" height="15" fill="rgb(220,134,1)" fg:x="905" fg:w="4"/><text x="72.1324%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="72.1207%" y="325" width="0.0794%" height="15" fill="rgb(237,168,5)" fg:x="908" fg:w="1"/><text x="72.3707%" y="335.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="72.1207%" y="309" width="0.0794%" height="15" fill="rgb(231,100,33)" fg:x="908" fg:w="1"/><text x="72.3707%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.1207%" y="293" width="0.0794%" height="15" fill="rgb(236,177,47)" fg:x="908" fg:w="1"/><text x="72.3707%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.1207%" y="277" width="0.0794%" height="15" fill="rgb(235,7,49)" fg:x="908" fg:w="1"/><text x="72.3707%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.1207%" y="261" width="0.0794%" height="15" fill="rgb(232,119,22)" fg:x="908" fg:w="1"/><text x="72.3707%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.2796%" y="341" width="0.0794%" height="15" fill="rgb(254,73,53)" fg:x="910" fg:w="1"/><text x="72.5296%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2796%" y="325" width="0.0794%" height="15" fill="rgb(251,35,20)" fg:x="910" fg:w="1"/><text x="72.5296%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="72.2002%" y="405" width="0.3177%" height="15" fill="rgb(241,119,20)" fg:x="909" fg:w="4"/><text x="72.4502%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="72.2796%" y="389" width="0.2383%" height="15" fill="rgb(207,102,14)" fg:x="910" fg:w="3"/><text x="72.5296%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="72.2796%" y="373" width="0.2383%" height="15" fill="rgb(248,201,50)" fg:x="910" fg:w="3"/><text x="72.5296%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="72.2796%" y="357" width="0.2383%" height="15" fill="rgb(222,185,44)" fg:x="910" fg:w="3"/><text x="72.5296%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="72.3590%" y="341" width="0.1589%" height="15" fill="rgb(218,107,18)" fg:x="911" fg:w="2"/><text x="72.6090%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.24%)</title><rect x="72.5179%" y="357" width="0.2383%" height="15" fill="rgb(237,177,39)" fg:x="913" fg:w="3"/><text x="72.7679%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.5179%" y="341" width="0.2383%" height="15" fill="rgb(246,69,6)" fg:x="913" fg:w="3"/><text x="72.7679%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="72.5973%" y="325" width="0.1589%" height="15" fill="rgb(234,208,37)" fg:x="914" fg:w="2"/><text x="72.8473%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="72.5973%" y="309" width="0.1589%" height="15" fill="rgb(225,4,6)" fg:x="914" fg:w="2"/><text x="72.8473%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="72.5973%" y="293" width="0.1589%" height="15" fill="rgb(233,45,0)" fg:x="914" fg:w="2"/><text x="72.8473%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="72.5973%" y="277" width="0.1589%" height="15" fill="rgb(226,136,5)" fg:x="914" fg:w="2"/><text x="72.8473%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.8356%" y="341" width="0.0794%" height="15" fill="rgb(211,91,47)" fg:x="917" fg:w="1"/><text x="73.0856%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.79%)</title><rect x="72.9150%" y="325" width="0.7943%" height="15" fill="rgb(242,88,51)" fg:x="918" fg:w="10"/><text x="73.1650%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.87%)</title><rect x="72.9150%" y="341" width="0.8737%" height="15" fill="rgb(230,91,28)" fg:x="918" fg:w="11"/><text x="73.1650%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="73.7093%" y="325" width="0.0794%" height="15" fill="rgb(254,186,29)" fg:x="928" fg:w="1"/><text x="73.9593%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="73.7887%" y="341" width="0.2383%" height="15" fill="rgb(238,6,4)" fg:x="929" fg:w="3"/><text x="74.0387%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="73.7887%" y="325" width="0.2383%" height="15" fill="rgb(221,151,16)" fg:x="929" fg:w="3"/><text x="74.0387%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="74.0270%" y="341" width="0.0794%" height="15" fill="rgb(251,143,52)" fg:x="932" fg:w="1"/><text x="74.2770%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="74.1064%" y="341" width="0.0794%" height="15" fill="rgb(206,90,15)" fg:x="933" fg:w="1"/><text x="74.3564%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="74.1859%" y="293" width="0.0794%" height="15" fill="rgb(218,35,8)" fg:x="934" fg:w="1"/><text x="74.4359%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="74.4241%" y="277" width="0.1589%" height="15" fill="rgb(239,215,6)" fg:x="937" fg:w="2"/><text x="74.6741%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="74.4241%" y="261" width="0.1589%" height="15" fill="rgb(245,116,39)" fg:x="937" fg:w="2"/><text x="74.6741%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="74.5036%" y="245" width="0.0794%" height="15" fill="rgb(242,65,28)" fg:x="938" fg:w="1"/><text x="74.7536%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.5036%" y="229" width="0.0794%" height="15" fill="rgb(252,132,53)" fg:x="938" fg:w="1"/><text x="74.7536%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5036%" y="213" width="0.0794%" height="15" fill="rgb(224,159,50)" fg:x="938" fg:w="1"/><text x="74.7536%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="74.5830%" y="277" width="0.0794%" height="15" fill="rgb(224,93,4)" fg:x="939" fg:w="1"/><text x="74.8330%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="74.5830%" y="261" width="0.0794%" height="15" fill="rgb(208,81,34)" fg:x="939" fg:w="1"/><text x="74.8330%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="74.5830%" y="245" width="0.0794%" height="15" fill="rgb(233,92,54)" fg:x="939" fg:w="1"/><text x="74.8330%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.5830%" y="229" width="0.0794%" height="15" fill="rgb(237,21,14)" fg:x="939" fg:w="1"/><text x="74.8330%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5830%" y="213" width="0.0794%" height="15" fill="rgb(249,128,51)" fg:x="939" fg:w="1"/><text x="74.8330%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (47 samples, 3.73%)</title><rect x="74.6624%" y="277" width="3.7331%" height="15" fill="rgb(223,129,24)" fg:x="940" fg:w="47"/><text x="74.9124%" y="287.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (47 samples, 3.73%)</title><rect x="74.6624%" y="261" width="3.7331%" height="15" fill="rgb(231,168,25)" fg:x="940" fg:w="47"/><text x="74.9124%" y="271.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (47 samples, 3.73%)</title><rect x="74.6624%" y="245" width="3.7331%" height="15" fill="rgb(224,39,20)" fg:x="940" fg:w="47"/><text x="74.9124%" y="255.50">allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 4.37%)</title><rect x="74.1859%" y="325" width="4.3685%" height="15" fill="rgb(225,152,53)" fg:x="934" fg:w="55"/><text x="74.4359%" y="335.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (55 samples, 4.37%)</title><rect x="74.1859%" y="309" width="4.3685%" height="15" fill="rgb(252,17,24)" fg:x="934" fg:w="55"/><text x="74.4359%" y="319.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (54 samples, 4.29%)</title><rect x="74.2653%" y="293" width="4.2891%" height="15" fill="rgb(250,114,30)" fg:x="935" fg:w="54"/><text x="74.5153%" y="303.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="78.3956%" y="277" width="0.1589%" height="15" fill="rgb(229,5,4)" fg:x="987" fg:w="2"/><text x="78.6456%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.4750%" y="261" width="0.0794%" height="15" fill="rgb(225,176,49)" fg:x="988" fg:w="1"/><text x="78.7250%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.5544%" y="309" width="0.0794%" height="15" fill="rgb(224,221,49)" fg:x="989" fg:w="1"/><text x="78.8044%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="78.6338%" y="309" width="0.0794%" height="15" fill="rgb(253,169,27)" fg:x="990" fg:w="1"/><text x="78.8838%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="78.7133%" y="309" width="0.3177%" height="15" fill="rgb(211,206,16)" fg:x="991" fg:w="4"/><text x="78.9633%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.9515%" y="293" width="0.0794%" height="15" fill="rgb(244,87,35)" fg:x="994" fg:w="1"/><text x="79.2015%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="79.0310%" y="309" width="0.0794%" height="15" fill="rgb(246,28,10)" fg:x="995" fg:w="1"/><text x="79.2810%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="78.5544%" y="325" width="0.6354%" height="15" fill="rgb(229,12,44)" fg:x="989" fg:w="8"/><text x="78.8044%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="79.1104%" y="309" width="0.0794%" height="15" fill="rgb(210,145,37)" fg:x="996" fg:w="1"/><text x="79.3604%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="79.1898%" y="325" width="0.0794%" height="15" fill="rgb(227,112,52)" fg:x="997" fg:w="1"/><text x="79.4398%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="79.2693%" y="325" width="0.1589%" height="15" fill="rgb(238,155,34)" fg:x="998" fg:w="2"/><text x="79.5193%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="79.2693%" y="309" width="0.1589%" height="15" fill="rgb(239,226,36)" fg:x="998" fg:w="2"/><text x="79.5193%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.3487%" y="293" width="0.0794%" height="15" fill="rgb(230,16,23)" fg:x="999" fg:w="1"/><text x="79.5987%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (67 samples, 5.32%)</title><rect x="74.1859%" y="341" width="5.3217%" height="15" fill="rgb(236,171,36)" fg:x="934" fg:w="67"/><text x="74.4359%" y="351.50">regex_a..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="79.4281%" y="325" width="0.0794%" height="15" fill="rgb(221,22,14)" fg:x="1000" fg:w="1"/><text x="79.6781%" y="335.50"></text></g><g><title>regex_syntax::hir::Class::is_empty (1 samples, 0.08%)</title><rect x="79.4281%" y="309" width="0.0794%" height="15" fill="rgb(242,43,11)" fg:x="1000" fg:w="1"/><text x="79.6781%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="79.5075%" y="341" width="0.0794%" height="15" fill="rgb(232,69,23)" fg:x="1001" fg:w="1"/><text x="79.7575%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="79.5075%" y="325" width="0.0794%" height="15" fill="rgb(216,180,54)" fg:x="1001" fg:w="1"/><text x="79.7575%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (87 samples, 6.91%)</title><rect x="72.7562%" y="357" width="6.9102%" height="15" fill="rgb(216,5,24)" fg:x="916" fg:w="87"/><text x="73.0062%" y="367.50">regex_aut..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="79.5870%" y="341" width="0.0794%" height="15" fill="rgb(225,89,9)" fg:x="1002" fg:w="1"/><text x="79.8370%" y="351.50"></text></g><g><title>regex_syntax::hir::literal::Seq::optimize_by_preference (1 samples, 0.08%)</title><rect x="79.5870%" y="325" width="0.0794%" height="15" fill="rgb(243,75,33)" fg:x="1002" fg:w="1"/><text x="79.8370%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="79.6664%" y="325" width="0.0794%" height="15" fill="rgb(247,141,45)" fg:x="1003" fg:w="1"/><text x="79.9164%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.6664%" y="309" width="0.0794%" height="15" fill="rgb(232,177,36)" fg:x="1003" fg:w="1"/><text x="79.9164%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.6664%" y="293" width="0.0794%" height="15" fill="rgb(219,125,36)" fg:x="1003" fg:w="1"/><text x="79.9164%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="79.6664%" y="357" width="0.3177%" height="15" fill="rgb(227,94,9)" fg:x="1003" fg:w="4"/><text x="79.9164%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="79.6664%" y="341" width="0.3177%" height="15" fill="rgb(240,34,52)" fg:x="1003" fg:w="4"/><text x="79.9164%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="79.7458%" y="325" width="0.2383%" height="15" fill="rgb(216,45,12)" fg:x="1004" fg:w="3"/><text x="79.9958%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="79.7458%" y="309" width="0.2383%" height="15" fill="rgb(246,21,19)" fg:x="1004" fg:w="3"/><text x="79.9958%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="79.8253%" y="293" width="0.1589%" height="15" fill="rgb(213,98,42)" fg:x="1005" fg:w="2"/><text x="80.0753%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="79.8253%" y="277" width="0.1589%" height="15" fill="rgb(250,136,47)" fg:x="1005" fg:w="2"/><text x="80.0753%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="79.8253%" y="261" width="0.1589%" height="15" fill="rgb(251,124,27)" fg:x="1005" fg:w="2"/><text x="80.0753%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (96 samples, 7.63%)</title><rect x="72.5179%" y="405" width="7.6251%" height="15" fill="rgb(229,180,14)" fg:x="913" fg:w="96"/><text x="72.7679%" y="415.50">regex::reg..</text></g><g><title>regex::builders::Builder::build_one_string (96 samples, 7.63%)</title><rect x="72.5179%" y="389" width="7.6251%" height="15" fill="rgb(245,216,25)" fg:x="913" fg:w="96"/><text x="72.7679%" y="399.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (96 samples, 7.63%)</title><rect x="72.5179%" y="373" width="7.6251%" height="15" fill="rgb(251,43,5)" fg:x="913" fg:w="96"/><text x="72.7679%" y="383.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="79.9841%" y="357" width="0.1589%" height="15" fill="rgb(250,128,24)" fg:x="1007" fg:w="2"/><text x="80.2341%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="79.9841%" y="341" width="0.1589%" height="15" fill="rgb(217,117,27)" fg:x="1007" fg:w="2"/><text x="80.2341%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="80.5401%" y="325" width="0.1589%" height="15" fill="rgb(245,147,4)" fg:x="1014" fg:w="2"/><text x="80.7901%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="80.5401%" y="309" width="0.1589%" height="15" fill="rgb(242,201,35)" fg:x="1014" fg:w="2"/><text x="80.7901%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="80.5401%" y="293" width="0.1589%" height="15" fill="rgb(218,181,1)" fg:x="1014" fg:w="2"/><text x="80.7901%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="80.6990%" y="325" width="0.1589%" height="15" fill="rgb(222,6,29)" fg:x="1016" fg:w="2"/><text x="80.9490%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="80.6990%" y="309" width="0.1589%" height="15" fill="rgb(208,186,3)" fg:x="1016" fg:w="2"/><text x="80.9490%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="80.7784%" y="293" width="0.0794%" height="15" fill="rgb(216,36,26)" fg:x="1017" fg:w="1"/><text x="81.0284%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="80.3018%" y="341" width="0.6354%" height="15" fill="rgb(248,201,23)" fg:x="1011" fg:w="8"/><text x="80.5518%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="80.8578%" y="325" width="0.0794%" height="15" fill="rgb(251,170,31)" fg:x="1018" fg:w="1"/><text x="81.1078%" y="335.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (115 samples, 9.13%)</title><rect x="71.8824%" y="421" width="9.1342%" height="15" fill="rgb(207,110,25)" fg:x="905" fg:w="115"/><text x="72.1324%" y="431.50">indefinite::h..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.87%)</title><rect x="80.1430%" y="405" width="0.8737%" height="15" fill="rgb(250,54,15)" fg:x="1009" fg:w="11"/><text x="80.3930%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.71%)</title><rect x="80.3018%" y="389" width="0.7149%" height="15" fill="rgb(227,68,33)" fg:x="1011" fg:w="9"/><text x="80.5518%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.71%)</title><rect x="80.3018%" y="373" width="0.7149%" height="15" fill="rgb(238,34,41)" fg:x="1011" fg:w="9"/><text x="80.5518%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.71%)</title><rect x="80.3018%" y="357" width="0.7149%" height="15" fill="rgb(220,11,15)" fg:x="1011" fg:w="9"/><text x="80.5518%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="80.9373%" y="341" width="0.0794%" height="15" fill="rgb(246,111,35)" fg:x="1019" fg:w="1"/><text x="81.1873%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.9373%" y="325" width="0.0794%" height="15" fill="rgb(209,88,53)" fg:x="1019" fg:w="1"/><text x="81.1873%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.9373%" y="309" width="0.0794%" height="15" fill="rgb(231,185,47)" fg:x="1019" fg:w="1"/><text x="81.1873%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.9373%" y="293" width="0.0794%" height="15" fill="rgb(233,154,1)" fg:x="1019" fg:w="1"/><text x="81.1873%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="81.0167%" y="373" width="0.1589%" height="15" fill="rgb(225,15,46)" fg:x="1020" fg:w="2"/><text x="81.2667%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="81.0167%" y="357" width="0.1589%" height="15" fill="rgb(211,135,41)" fg:x="1020" fg:w="2"/><text x="81.2667%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="81.0167%" y="341" width="0.1589%" height="15" fill="rgb(208,54,0)" fg:x="1020" fg:w="2"/><text x="81.2667%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="81.0167%" y="325" width="0.1589%" height="15" fill="rgb(244,136,14)" fg:x="1020" fg:w="2"/><text x="81.2667%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="81.0167%" y="405" width="0.2383%" height="15" fill="rgb(241,56,14)" fg:x="1020" fg:w="3"/><text x="81.2667%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="81.0167%" y="389" width="0.2383%" height="15" fill="rgb(205,80,24)" fg:x="1020" fg:w="3"/><text x="81.2667%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="81.1755%" y="373" width="0.0794%" height="15" fill="rgb(220,57,4)" fg:x="1022" fg:w="1"/><text x="81.4255%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="81.1755%" y="357" width="0.0794%" height="15" fill="rgb(226,193,50)" fg:x="1022" fg:w="1"/><text x="81.4255%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.1755%" y="341" width="0.0794%" height="15" fill="rgb(231,168,22)" fg:x="1022" fg:w="1"/><text x="81.4255%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="81.2550%" y="389" width="0.0794%" height="15" fill="rgb(254,215,14)" fg:x="1023" fg:w="1"/><text x="81.5050%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="81.2550%" y="373" width="0.0794%" height="15" fill="rgb(211,115,16)" fg:x="1023" fg:w="1"/><text x="81.5050%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="81.2550%" y="357" width="0.0794%" height="15" fill="rgb(236,210,16)" fg:x="1023" fg:w="1"/><text x="81.5050%" y="367.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="81.2550%" y="341" width="0.0794%" height="15" fill="rgb(221,94,12)" fg:x="1023" fg:w="1"/><text x="81.5050%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="81.8904%" y="309" width="0.2383%" height="15" fill="rgb(235,218,49)" fg:x="1031" fg:w="3"/><text x="82.1404%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="81.8904%" y="293" width="0.2383%" height="15" fill="rgb(217,114,14)" fg:x="1031" fg:w="3"/><text x="82.1404%" y="303.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="81.8904%" y="277" width="0.2383%" height="15" fill="rgb(216,145,22)" fg:x="1031" fg:w="3"/><text x="82.1404%" y="287.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (13 samples, 1.03%)</title><rect x="81.2550%" y="405" width="1.0326%" height="15" fill="rgb(217,112,39)" fg:x="1023" fg:w="13"/><text x="81.5050%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.95%)</title><rect x="81.3344%" y="389" width="0.9531%" height="15" fill="rgb(225,85,32)" fg:x="1024" fg:w="12"/><text x="81.5844%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.95%)</title><rect x="81.3344%" y="373" width="0.9531%" height="15" fill="rgb(245,209,47)" fg:x="1024" fg:w="12"/><text x="81.5844%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.95%)</title><rect x="81.3344%" y="357" width="0.9531%" height="15" fill="rgb(218,220,15)" fg:x="1024" fg:w="12"/><text x="81.5844%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (12 samples, 0.95%)</title><rect x="81.3344%" y="341" width="0.9531%" height="15" fill="rgb(222,202,31)" fg:x="1024" fg:w="12"/><text x="81.5844%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.95%)</title><rect x="81.3344%" y="325" width="0.9531%" height="15" fill="rgb(243,203,4)" fg:x="1024" fg:w="12"/><text x="81.5844%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="82.1287%" y="309" width="0.1589%" height="15" fill="rgb(237,92,17)" fg:x="1034" fg:w="2"/><text x="82.3787%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.4464%" y="357" width="0.0794%" height="15" fill="rgb(231,119,7)" fg:x="1038" fg:w="1"/><text x="82.6964%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.4464%" y="341" width="0.0794%" height="15" fill="rgb(237,82,41)" fg:x="1038" fg:w="1"/><text x="82.6964%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="82.4464%" y="325" width="0.0794%" height="15" fill="rgb(226,81,48)" fg:x="1038" fg:w="1"/><text x="82.6964%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="82.4464%" y="309" width="0.0794%" height="15" fill="rgb(234,70,51)" fg:x="1038" fg:w="1"/><text x="82.6964%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="82.5258%" y="325" width="0.0794%" height="15" fill="rgb(251,86,4)" fg:x="1039" fg:w="1"/><text x="82.7758%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.5258%" y="309" width="0.0794%" height="15" fill="rgb(244,144,28)" fg:x="1039" fg:w="1"/><text x="82.7758%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.5258%" y="293" width="0.0794%" height="15" fill="rgb(232,161,39)" fg:x="1039" fg:w="1"/><text x="82.7758%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.5258%" y="277" width="0.0794%" height="15" fill="rgb(247,34,51)" fg:x="1039" fg:w="1"/><text x="82.7758%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="82.5258%" y="357" width="0.2383%" height="15" fill="rgb(225,132,2)" fg:x="1039" fg:w="3"/><text x="82.7758%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="82.5258%" y="341" width="0.2383%" height="15" fill="rgb(209,159,44)" fg:x="1039" fg:w="3"/><text x="82.7758%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="82.6052%" y="325" width="0.1589%" height="15" fill="rgb(251,214,1)" fg:x="1040" fg:w="2"/><text x="82.8552%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="82.6052%" y="309" width="0.1589%" height="15" fill="rgb(247,84,47)" fg:x="1040" fg:w="2"/><text x="82.8552%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="82.6847%" y="293" width="0.0794%" height="15" fill="rgb(240,111,43)" fg:x="1041" fg:w="1"/><text x="82.9347%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.6847%" y="277" width="0.0794%" height="15" fill="rgb(215,214,35)" fg:x="1041" fg:w="1"/><text x="82.9347%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.6847%" y="261" width="0.0794%" height="15" fill="rgb(248,207,23)" fg:x="1041" fg:w="1"/><text x="82.9347%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9230%" y="341" width="0.0794%" height="15" fill="rgb(214,186,4)" fg:x="1044" fg:w="1"/><text x="83.1730%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="83.0024%" y="325" width="0.1589%" height="15" fill="rgb(220,133,22)" fg:x="1045" fg:w="2"/><text x="83.2524%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.79%)</title><rect x="83.0024%" y="341" width="0.7943%" height="15" fill="rgb(239,134,19)" fg:x="1045" fg:w="10"/><text x="83.2524%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.64%)</title><rect x="83.1612%" y="325" width="0.6354%" height="15" fill="rgb(250,140,9)" fg:x="1047" fg:w="8"/><text x="83.4112%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="83.6378%" y="309" width="0.1589%" height="15" fill="rgb(225,59,14)" fg:x="1053" fg:w="2"/><text x="83.8878%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="83.7967%" y="325" width="0.1589%" height="15" fill="rgb(214,152,51)" fg:x="1055" fg:w="2"/><text x="84.0467%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="83.7967%" y="341" width="0.2383%" height="15" fill="rgb(251,227,43)" fg:x="1055" fg:w="3"/><text x="84.0467%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="83.9555%" y="325" width="0.0794%" height="15" fill="rgb(241,96,17)" fg:x="1057" fg:w="1"/><text x="84.2055%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="83.9555%" y="309" width="0.0794%" height="15" fill="rgb(234,198,43)" fg:x="1057" fg:w="1"/><text x="84.2055%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="84.2732%" y="309" width="0.0794%" height="15" fill="rgb(220,108,29)" fg:x="1061" fg:w="1"/><text x="84.5232%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.2732%" y="293" width="0.0794%" height="15" fill="rgb(226,163,33)" fg:x="1061" fg:w="1"/><text x="84.5232%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.2732%" y="277" width="0.0794%" height="15" fill="rgb(205,194,45)" fg:x="1061" fg:w="1"/><text x="84.5232%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.2732%" y="261" width="0.0794%" height="15" fill="rgb(206,143,44)" fg:x="1061" fg:w="1"/><text x="84.5232%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="84.3527%" y="309" width="0.1589%" height="15" fill="rgb(236,136,36)" fg:x="1062" fg:w="2"/><text x="84.6027%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="84.3527%" y="293" width="0.1589%" height="15" fill="rgb(249,172,42)" fg:x="1062" fg:w="2"/><text x="84.6027%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.4321%" y="277" width="0.0794%" height="15" fill="rgb(216,139,23)" fg:x="1063" fg:w="1"/><text x="84.6821%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.4321%" y="261" width="0.0794%" height="15" fill="rgb(207,166,20)" fg:x="1063" fg:w="1"/><text x="84.6821%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (6 samples, 0.48%)</title><rect x="84.5115%" y="309" width="0.4766%" height="15" fill="rgb(210,209,22)" fg:x="1064" fg:w="6"/><text x="84.7615%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (6 samples, 0.48%)</title><rect x="84.5115%" y="293" width="0.4766%" height="15" fill="rgb(232,118,20)" fg:x="1064" fg:w="6"/><text x="84.7615%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (6 samples, 0.48%)</title><rect x="84.5115%" y="277" width="0.4766%" height="15" fill="rgb(238,113,42)" fg:x="1064" fg:w="6"/><text x="84.7615%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (13 samples, 1.03%)</title><rect x="84.0349%" y="341" width="1.0326%" height="15" fill="rgb(231,42,5)" fg:x="1058" fg:w="13"/><text x="84.2849%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (13 samples, 1.03%)</title><rect x="84.0349%" y="325" width="1.0326%" height="15" fill="rgb(243,166,24)" fg:x="1058" fg:w="13"/><text x="84.2849%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="84.9881%" y="309" width="0.0794%" height="15" fill="rgb(237,226,12)" fg:x="1070" fg:w="1"/><text x="85.2381%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="85.0675%" y="245" width="0.0794%" height="15" fill="rgb(229,133,24)" fg:x="1071" fg:w="1"/><text x="85.3175%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="86.1001%" y="229" width="0.3177%" height="15" fill="rgb(238,33,43)" fg:x="1084" fg:w="4"/><text x="86.3501%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="86.4178%" y="229" width="0.0794%" height="15" fill="rgb(227,59,38)" fg:x="1088" fg:w="1"/><text x="86.6678%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="86.4972%" y="229" width="0.1589%" height="15" fill="rgb(230,97,0)" fg:x="1089" fg:w="2"/><text x="86.7472%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.9738%" y="197" width="0.0794%" height="15" fill="rgb(250,173,50)" fg:x="1095" fg:w="1"/><text x="87.2238%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="87.0532%" y="197" width="0.3971%" height="15" fill="rgb(240,15,50)" fg:x="1096" fg:w="5"/><text x="87.3032%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="87.1326%" y="181" width="0.3177%" height="15" fill="rgb(221,93,22)" fg:x="1097" fg:w="4"/><text x="87.3826%" y="191.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="87.1326%" y="165" width="0.3177%" height="15" fill="rgb(245,180,53)" fg:x="1097" fg:w="4"/><text x="87.3826%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (18 samples, 1.43%)</title><rect x="86.6561%" y="229" width="1.4297%" height="15" fill="rgb(231,88,51)" fg:x="1091" fg:w="18"/><text x="86.9061%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (16 samples, 1.27%)</title><rect x="86.8149%" y="213" width="1.2708%" height="15" fill="rgb(240,58,21)" fg:x="1093" fg:w="16"/><text x="87.0649%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (8 samples, 0.64%)</title><rect x="87.4504%" y="197" width="0.6354%" height="15" fill="rgb(237,21,10)" fg:x="1101" fg:w="8"/><text x="87.7004%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.0064%" y="181" width="0.0794%" height="15" fill="rgb(218,43,11)" fg:x="1108" fg:w="1"/><text x="88.2564%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (39 samples, 3.10%)</title><rect x="88.0858%" y="229" width="3.0977%" height="15" fill="rgb(218,221,29)" fg:x="1109" fg:w="39"/><text x="88.3358%" y="239.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (38 samples, 3.02%)</title><rect x="88.1652%" y="213" width="3.0183%" height="15" fill="rgb(214,118,42)" fg:x="1110" fg:w="38"/><text x="88.4152%" y="223.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (38 samples, 3.02%)</title><rect x="88.1652%" y="197" width="3.0183%" height="15" fill="rgb(251,200,26)" fg:x="1110" fg:w="38"/><text x="88.4152%" y="207.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (7 samples, 0.56%)</title><rect x="91.1835%" y="229" width="0.5560%" height="15" fill="rgb(237,101,39)" fg:x="1148" fg:w="7"/><text x="91.4335%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.6600%" y="213" width="0.0794%" height="15" fill="rgb(251,117,11)" fg:x="1154" fg:w="1"/><text x="91.9100%" y="223.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="91.7395%" y="229" width="0.0794%" height="15" fill="rgb(216,223,23)" fg:x="1155" fg:w="1"/><text x="91.9895%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 6.91%)</title><rect x="85.0675%" y="325" width="6.9102%" height="15" fill="rgb(251,54,12)" fg:x="1071" fg:w="87"/><text x="85.3175%" y="335.50">&lt;core::it..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (87 samples, 6.91%)</title><rect x="85.0675%" y="309" width="6.9102%" height="15" fill="rgb(254,176,54)" fg:x="1071" fg:w="87"/><text x="85.3175%" y="319.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (87 samples, 6.91%)</title><rect x="85.0675%" y="293" width="6.9102%" height="15" fill="rgb(210,32,8)" fg:x="1071" fg:w="87"/><text x="85.3175%" y="303.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (87 samples, 6.91%)</title><rect x="85.0675%" y="277" width="6.9102%" height="15" fill="rgb(235,52,38)" fg:x="1071" fg:w="87"/><text x="85.3175%" y="287.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (87 samples, 6.91%)</title><rect x="85.0675%" y="261" width="6.9102%" height="15" fill="rgb(231,4,44)" fg:x="1071" fg:w="87"/><text x="85.3175%" y="271.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (86 samples, 6.83%)</title><rect x="85.1469%" y="245" width="6.8308%" height="15" fill="rgb(249,2,32)" fg:x="1072" fg:w="86"/><text x="85.3969%" y="255.50">regex_aut..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="91.8189%" y="229" width="0.1589%" height="15" fill="rgb(224,65,26)" fg:x="1156" fg:w="2"/><text x="92.0689%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="91.8189%" y="213" width="0.1589%" height="15" fill="rgb(250,73,40)" fg:x="1156" fg:w="2"/><text x="92.0689%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="91.8189%" y="197" width="0.1589%" height="15" fill="rgb(253,177,16)" fg:x="1156" fg:w="2"/><text x="92.0689%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.8983%" y="181" width="0.0794%" height="15" fill="rgb(217,32,34)" fg:x="1157" fg:w="1"/><text x="92.1483%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.0572%" y="309" width="0.0794%" height="15" fill="rgb(212,7,10)" fg:x="1159" fg:w="1"/><text x="92.3072%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="92.1366%" y="309" width="0.0794%" height="15" fill="rgb(245,89,8)" fg:x="1160" fg:w="1"/><text x="92.3866%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (10 samples, 0.79%)</title><rect x="92.2160%" y="309" width="0.7943%" height="15" fill="rgb(237,16,53)" fg:x="1161" fg:w="10"/><text x="92.4660%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="92.8515%" y="293" width="0.1589%" height="15" fill="rgb(250,204,30)" fg:x="1169" fg:w="2"/><text x="93.1015%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="92.8515%" y="277" width="0.1589%" height="15" fill="rgb(208,77,27)" fg:x="1169" fg:w="2"/><text x="93.1015%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="92.8515%" y="261" width="0.1589%" height="15" fill="rgb(250,204,28)" fg:x="1169" fg:w="2"/><text x="93.1015%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="93.0103%" y="309" width="0.4766%" height="15" fill="rgb(244,63,21)" fg:x="1171" fg:w="6"/><text x="93.2603%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="93.4869%" y="309" width="0.2383%" height="15" fill="rgb(236,85,44)" fg:x="1177" fg:w="3"/><text x="93.7369%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (110 samples, 8.74%)</title><rect x="85.0675%" y="341" width="8.7371%" height="15" fill="rgb(215,98,4)" fg:x="1071" fg:w="110"/><text x="85.3175%" y="351.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (23 samples, 1.83%)</title><rect x="91.9778%" y="325" width="1.8268%" height="15" fill="rgb(235,38,11)" fg:x="1158" fg:w="23"/><text x="92.2278%" y="335.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="93.7252%" y="309" width="0.0794%" height="15" fill="rgb(254,186,25)" fg:x="1180" fg:w="1"/><text x="93.9752%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="93.7252%" y="293" width="0.0794%" height="15" fill="rgb(225,55,31)" fg:x="1180" fg:w="1"/><text x="93.9752%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.7252%" y="277" width="0.0794%" height="15" fill="rgb(211,15,21)" fg:x="1180" fg:w="1"/><text x="93.9752%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.7252%" y="261" width="0.0794%" height="15" fill="rgb(215,187,41)" fg:x="1180" fg:w="1"/><text x="93.9752%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (140 samples, 11.12%)</title><rect x="82.7641%" y="357" width="11.1199%" height="15" fill="rgb(248,69,32)" fg:x="1042" fg:w="140"/><text x="83.0141%" y="367.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="93.8046%" y="341" width="0.0794%" height="15" fill="rgb(252,102,52)" fg:x="1181" fg:w="1"/><text x="94.0546%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.0429%" y="325" width="0.0794%" height="15" fill="rgb(253,140,32)" fg:x="1184" fg:w="1"/><text x="94.2929%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.0429%" y="309" width="0.0794%" height="15" fill="rgb(216,56,42)" fg:x="1184" fg:w="1"/><text x="94.2929%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="94.1223%" y="325" width="0.1589%" height="15" fill="rgb(216,184,14)" fg:x="1185" fg:w="2"/><text x="94.3723%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="94.1223%" y="309" width="0.1589%" height="15" fill="rgb(237,187,27)" fg:x="1185" fg:w="2"/><text x="94.3723%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="94.2017%" y="293" width="0.0794%" height="15" fill="rgb(219,65,3)" fg:x="1186" fg:w="1"/><text x="94.4517%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="93.8840%" y="357" width="0.4766%" height="15" fill="rgb(245,83,25)" fg:x="1182" fg:w="6"/><text x="94.1340%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="93.8840%" y="341" width="0.4766%" height="15" fill="rgb(214,205,45)" fg:x="1182" fg:w="6"/><text x="94.1340%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="94.2812%" y="325" width="0.0794%" height="15" fill="rgb(241,20,18)" fg:x="1187" fg:w="1"/><text x="94.5312%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="94.4400%" y="309" width="0.2383%" height="15" fill="rgb(232,163,23)" fg:x="1189" fg:w="3"/><text x="94.6900%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="94.5989%" y="293" width="0.0794%" height="15" fill="rgb(214,5,46)" fg:x="1191" fg:w="1"/><text x="94.8489%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="94.4400%" y="325" width="0.3177%" height="15" fill="rgb(229,78,17)" fg:x="1189" fg:w="4"/><text x="94.6900%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="94.6783%" y="309" width="0.0794%" height="15" fill="rgb(248,89,10)" fg:x="1192" fg:w="1"/><text x="94.9283%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="94.6783%" y="293" width="0.0794%" height="15" fill="rgb(248,54,15)" fg:x="1192" fg:w="1"/><text x="94.9283%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="94.7577%" y="309" width="0.0794%" height="15" fill="rgb(223,116,6)" fg:x="1193" fg:w="1"/><text x="95.0077%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.9166%" y="293" width="0.0794%" height="15" fill="rgb(205,125,38)" fg:x="1195" fg:w="1"/><text x="95.1666%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::concat (4 samples, 0.32%)</title><rect x="94.8372%" y="309" width="0.3177%" height="15" fill="rgb(251,78,38)" fg:x="1194" fg:w="4"/><text x="95.0872%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (2 samples, 0.16%)</title><rect x="94.9960%" y="293" width="0.1589%" height="15" fill="rgb(253,78,28)" fg:x="1196" fg:w="2"/><text x="95.2460%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.0755%" y="277" width="0.0794%" height="15" fill="rgb(209,120,3)" fg:x="1197" fg:w="1"/><text x="95.3255%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (6 samples, 0.48%)</title><rect x="94.7577%" y="325" width="0.4766%" height="15" fill="rgb(238,229,9)" fg:x="1193" fg:w="6"/><text x="95.0077%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::pop (1 samples, 0.08%)</title><rect x="95.1549%" y="309" width="0.0794%" height="15" fill="rgb(253,159,18)" fg:x="1198" fg:w="1"/><text x="95.4049%" y="319.50"></text></g><g><title>indefinite::rules::number::Number::check (180 samples, 14.30%)</title><rect x="81.0167%" y="421" width="14.2971%" height="15" fill="rgb(244,42,34)" fg:x="1020" fg:w="180"/><text x="81.2667%" y="431.50">indefinite::rules::num..</text></g><g><title>regex::regex::string::Regex::new (164 samples, 13.03%)</title><rect x="82.2875%" y="405" width="13.0262%" height="15" fill="rgb(224,8,7)" fg:x="1036" fg:w="164"/><text x="82.5375%" y="415.50">regex::regex::string..</text></g><g><title>regex::builders::Builder::build_one_string (164 samples, 13.03%)</title><rect x="82.2875%" y="389" width="13.0262%" height="15" fill="rgb(210,201,45)" fg:x="1036" fg:w="164"/><text x="82.5375%" y="399.50">regex::builders::Bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (163 samples, 12.95%)</title><rect x="82.3670%" y="373" width="12.9468%" height="15" fill="rgb(252,185,21)" fg:x="1037" fg:w="163"/><text x="82.6170%" y="383.50">regex_automata::met..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (12 samples, 0.95%)</title><rect x="94.3606%" y="357" width="0.9531%" height="15" fill="rgb(223,131,1)" fg:x="1188" fg:w="12"/><text x="94.6106%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (12 samples, 0.95%)</title><rect x="94.3606%" y="341" width="0.9531%" height="15" fill="rgb(245,141,16)" fg:x="1188" fg:w="12"/><text x="94.6106%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="95.2343%" y="325" width="0.0794%" height="15" fill="rgb(229,55,45)" fg:x="1199" fg:w="1"/><text x="95.4843%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="95.3932%" y="357" width="0.0794%" height="15" fill="rgb(208,92,15)" fg:x="1201" fg:w="1"/><text x="95.6432%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3932%" y="341" width="0.0794%" height="15" fill="rgb(234,185,47)" fg:x="1201" fg:w="1"/><text x="95.6432%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="95.3932%" y="389" width="0.1589%" height="15" fill="rgb(253,104,50)" fg:x="1201" fg:w="2"/><text x="95.6432%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="95.3932%" y="373" width="0.1589%" height="15" fill="rgb(205,70,7)" fg:x="1201" fg:w="2"/><text x="95.6432%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="95.4726%" y="357" width="0.0794%" height="15" fill="rgb(240,178,43)" fg:x="1202" fg:w="1"/><text x="95.7226%" y="367.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="95.4726%" y="341" width="0.0794%" height="15" fill="rgb(214,112,2)" fg:x="1202" fg:w="1"/><text x="95.7226%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.5520%" y="373" width="0.0794%" height="15" fill="rgb(206,46,17)" fg:x="1203" fg:w="1"/><text x="95.8020%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="95.5520%" y="389" width="0.1589%" height="15" fill="rgb(225,220,16)" fg:x="1203" fg:w="2"/><text x="95.8020%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.6315%" y="373" width="0.0794%" height="15" fill="rgb(238,65,40)" fg:x="1204" fg:w="1"/><text x="95.8815%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="95.6315%" y="357" width="0.0794%" height="15" fill="rgb(230,151,21)" fg:x="1204" fg:w="1"/><text x="95.8815%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.6315%" y="341" width="0.0794%" height="15" fill="rgb(218,58,49)" fg:x="1204" fg:w="1"/><text x="95.8815%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.7109%" y="325" width="0.0794%" height="15" fill="rgb(219,179,14)" fg:x="1205" fg:w="1"/><text x="95.9609%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="95.7109%" y="341" width="0.1589%" height="15" fill="rgb(223,72,1)" fg:x="1205" fg:w="2"/><text x="95.9609%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="95.7903%" y="325" width="0.0794%" height="15" fill="rgb(238,126,10)" fg:x="1206" fg:w="1"/><text x="96.0403%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.8697%" y="309" width="0.0794%" height="15" fill="rgb(224,206,38)" fg:x="1207" fg:w="1"/><text x="96.1197%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="95.8697%" y="341" width="0.1589%" height="15" fill="rgb(212,201,54)" fg:x="1207" fg:w="2"/><text x="96.1197%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="95.8697%" y="325" width="0.1589%" height="15" fill="rgb(218,154,48)" fg:x="1207" fg:w="2"/><text x="96.1197%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="95.9492%" y="309" width="0.0794%" height="15" fill="rgb(232,93,24)" fg:x="1208" fg:w="1"/><text x="96.1992%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.9492%" y="293" width="0.0794%" height="15" fill="rgb(245,30,21)" fg:x="1208" fg:w="1"/><text x="96.1992%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.9492%" y="277" width="0.0794%" height="15" fill="rgb(242,148,29)" fg:x="1208" fg:w="1"/><text x="96.1992%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.0286%" y="325" width="0.0794%" height="15" fill="rgb(244,153,54)" fg:x="1209" fg:w="1"/><text x="96.2786%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="96.1080%" y="325" width="0.3177%" height="15" fill="rgb(252,87,22)" fg:x="1210" fg:w="4"/><text x="96.3580%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="96.1080%" y="309" width="0.3177%" height="15" fill="rgb(210,51,29)" fg:x="1210" fg:w="4"/><text x="96.3580%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="96.3463%" y="293" width="0.0794%" height="15" fill="rgb(242,136,47)" fg:x="1213" fg:w="1"/><text x="96.5963%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="96.4257%" y="325" width="0.0794%" height="15" fill="rgb(238,68,4)" fg:x="1214" fg:w="1"/><text x="96.6757%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="96.5052%" y="277" width="0.0794%" height="15" fill="rgb(242,161,30)" fg:x="1215" fg:w="1"/><text x="96.7552%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="96.5052%" y="309" width="0.1589%" height="15" fill="rgb(218,58,44)" fg:x="1215" fg:w="2"/><text x="96.7552%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="96.5052%" y="293" width="0.1589%" height="15" fill="rgb(252,125,32)" fg:x="1215" fg:w="2"/><text x="96.7552%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.5846%" y="277" width="0.0794%" height="15" fill="rgb(219,178,0)" fg:x="1216" fg:w="1"/><text x="96.8346%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.5846%" y="261" width="0.0794%" height="15" fill="rgb(213,152,7)" fg:x="1216" fg:w="1"/><text x="96.8346%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="96.5846%" y="245" width="0.0794%" height="15" fill="rgb(249,109,34)" fg:x="1216" fg:w="1"/><text x="96.8346%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.5846%" y="229" width="0.0794%" height="15" fill="rgb(232,96,21)" fg:x="1216" fg:w="1"/><text x="96.8346%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.5846%" y="213" width="0.0794%" height="15" fill="rgb(228,27,39)" fg:x="1216" fg:w="1"/><text x="96.8346%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.7434%" y="293" width="0.0794%" height="15" fill="rgb(211,182,52)" fg:x="1218" fg:w="1"/><text x="96.9934%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.56%)</title><rect x="96.5052%" y="325" width="0.5560%" height="15" fill="rgb(234,178,38)" fg:x="1215" fg:w="7"/><text x="96.7552%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="96.6640%" y="309" width="0.3971%" height="15" fill="rgb(221,111,3)" fg:x="1217" fg:w="5"/><text x="96.9140%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="96.8229%" y="293" width="0.2383%" height="15" fill="rgb(228,175,21)" fg:x="1219" fg:w="3"/><text x="97.0729%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (14 samples, 1.11%)</title><rect x="96.0286%" y="341" width="1.1120%" height="15" fill="rgb(228,174,43)" fg:x="1209" fg:w="14"/><text x="96.2786%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="97.0612%" y="325" width="0.0794%" height="15" fill="rgb(211,191,0)" fg:x="1222" fg:w="1"/><text x="97.3112%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="97.0612%" y="309" width="0.0794%" height="15" fill="rgb(253,117,3)" fg:x="1222" fg:w="1"/><text x="97.3112%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="97.0612%" y="293" width="0.0794%" height="15" fill="rgb(241,127,19)" fg:x="1222" fg:w="1"/><text x="97.3112%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.0612%" y="277" width="0.0794%" height="15" fill="rgb(218,103,12)" fg:x="1222" fg:w="1"/><text x="97.3112%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.0612%" y="261" width="0.0794%" height="15" fill="rgb(236,214,43)" fg:x="1222" fg:w="1"/><text x="97.3112%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="97.0612%" y="245" width="0.0794%" height="15" fill="rgb(244,144,19)" fg:x="1222" fg:w="1"/><text x="97.3112%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="97.0612%" y="229" width="0.0794%" height="15" fill="rgb(246,188,10)" fg:x="1222" fg:w="1"/><text x="97.3112%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="97.1406%" y="309" width="0.0794%" height="15" fill="rgb(212,193,33)" fg:x="1223" fg:w="1"/><text x="97.3906%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="97.1406%" y="293" width="0.0794%" height="15" fill="rgb(241,51,29)" fg:x="1223" fg:w="1"/><text x="97.3906%" y="303.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (3 samples, 0.24%)</title><rect x="97.2200%" y="293" width="0.2383%" height="15" fill="rgb(211,58,19)" fg:x="1224" fg:w="3"/><text x="97.4700%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="97.2994%" y="277" width="0.1589%" height="15" fill="rgb(229,111,26)" fg:x="1225" fg:w="2"/><text x="97.5494%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.3789%" y="261" width="0.0794%" height="15" fill="rgb(213,115,40)" fg:x="1226" fg:w="1"/><text x="97.6289%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.3789%" y="245" width="0.0794%" height="15" fill="rgb(209,56,44)" fg:x="1226" fg:w="1"/><text x="97.6289%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="97.2200%" y="309" width="0.3971%" height="15" fill="rgb(230,108,32)" fg:x="1224" fg:w="5"/><text x="97.4700%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="97.4583%" y="293" width="0.1589%" height="15" fill="rgb(216,165,31)" fg:x="1227" fg:w="2"/><text x="97.7083%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (2 samples, 0.16%)</title><rect x="97.4583%" y="277" width="0.1589%" height="15" fill="rgb(218,122,21)" fg:x="1227" fg:w="2"/><text x="97.7083%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="97.1406%" y="341" width="0.5560%" height="15" fill="rgb(223,224,47)" fg:x="1223" fg:w="7"/><text x="97.3906%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="97.1406%" y="325" width="0.5560%" height="15" fill="rgb(238,102,44)" fg:x="1223" fg:w="7"/><text x="97.3906%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.6172%" y="309" width="0.0794%" height="15" fill="rgb(236,46,40)" fg:x="1229" fg:w="1"/><text x="97.8672%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="97.6966%" y="309" width="0.1589%" height="15" fill="rgb(247,202,50)" fg:x="1230" fg:w="2"/><text x="97.9466%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.7760%" y="293" width="0.0794%" height="15" fill="rgb(209,99,20)" fg:x="1231" fg:w="1"/><text x="98.0260%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.7760%" y="277" width="0.0794%" height="15" fill="rgb(252,27,34)" fg:x="1231" fg:w="1"/><text x="98.0260%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.7760%" y="261" width="0.0794%" height="15" fill="rgb(215,206,23)" fg:x="1231" fg:w="1"/><text x="98.0260%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (28 samples, 2.22%)</title><rect x="95.7109%" y="389" width="2.2240%" height="15" fill="rgb(212,135,36)" fg:x="1205" fg:w="28"/><text x="95.9609%" y="399.50">r..</text></g><g><title>regex::builders::Builder::build_one_string (28 samples, 2.22%)</title><rect x="95.7109%" y="373" width="2.2240%" height="15" fill="rgb(240,189,1)" fg:x="1205" fg:w="28"/><text x="95.9609%" y="383.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (28 samples, 2.22%)</title><rect x="95.7109%" y="357" width="2.2240%" height="15" fill="rgb(242,56,20)" fg:x="1205" fg:w="28"/><text x="95.9609%" y="367.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="97.6966%" y="341" width="0.2383%" height="15" fill="rgb(247,132,33)" fg:x="1230" fg:w="3"/><text x="97.9466%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="97.6966%" y="325" width="0.2383%" height="15" fill="rgb(208,149,11)" fg:x="1230" fg:w="3"/><text x="97.9466%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.8554%" y="309" width="0.0794%" height="15" fill="rgb(211,33,11)" fg:x="1232" fg:w="1"/><text x="98.1054%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="98.0143%" y="309" width="0.0794%" height="15" fill="rgb(221,29,38)" fg:x="1234" fg:w="1"/><text x="98.2643%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="97.9349%" y="325" width="0.2383%" height="15" fill="rgb(206,182,49)" fg:x="1233" fg:w="3"/><text x="98.1849%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="98.0937%" y="309" width="0.0794%" height="15" fill="rgb(216,140,1)" fg:x="1235" fg:w="1"/><text x="98.3437%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.0937%" y="293" width="0.0794%" height="15" fill="rgb(232,57,40)" fg:x="1235" fg:w="1"/><text x="98.3437%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.0937%" y="277" width="0.0794%" height="15" fill="rgb(224,186,18)" fg:x="1235" fg:w="1"/><text x="98.3437%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0937%" y="261" width="0.0794%" height="15" fill="rgb(215,121,11)" fg:x="1235" fg:w="1"/><text x="98.3437%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="97.9349%" y="341" width="0.3971%" height="15" fill="rgb(245,147,10)" fg:x="1233" fg:w="5"/><text x="98.1849%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="98.1732%" y="325" width="0.1589%" height="15" fill="rgb(238,153,13)" fg:x="1236" fg:w="2"/><text x="98.4232%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="98.1732%" y="309" width="0.1589%" height="15" fill="rgb(233,108,0)" fg:x="1236" fg:w="2"/><text x="98.4232%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="98.1732%" y="293" width="0.1589%" height="15" fill="rgb(212,157,17)" fg:x="1236" fg:w="2"/><text x="98.4232%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="98.1732%" y="277" width="0.1589%" height="15" fill="rgb(225,213,38)" fg:x="1236" fg:w="2"/><text x="98.4232%" y="287.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (39 samples, 3.10%)</title><rect x="95.3137%" y="405" width="3.0977%" height="15" fill="rgb(248,16,11)" fg:x="1200" fg:w="39"/><text x="95.5637%" y="415.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="97.9349%" y="389" width="0.4766%" height="15" fill="rgb(241,33,4)" fg:x="1233" fg:w="6"/><text x="98.1849%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="97.9349%" y="373" width="0.4766%" height="15" fill="rgb(222,26,43)" fg:x="1233" fg:w="6"/><text x="98.1849%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="97.9349%" y="357" width="0.4766%" height="15" fill="rgb(243,29,36)" fg:x="1233" fg:w="6"/><text x="98.1849%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="98.3320%" y="341" width="0.0794%" height="15" fill="rgb(241,9,27)" fg:x="1238" fg:w="1"/><text x="98.5820%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="98.3320%" y="325" width="0.0794%" height="15" fill="rgb(205,117,26)" fg:x="1238" fg:w="1"/><text x="98.5820%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.3320%" y="309" width="0.0794%" height="15" fill="rgb(209,80,39)" fg:x="1238" fg:w="1"/><text x="98.5820%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.3320%" y="293" width="0.0794%" height="15" fill="rgb(239,155,6)" fg:x="1238" fg:w="1"/><text x="98.5820%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3320%" y="277" width="0.0794%" height="15" fill="rgb(212,104,12)" fg:x="1238" fg:w="1"/><text x="98.5820%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (346 samples, 27.48%)</title><rect x="71.0087%" y="501" width="27.4821%" height="15" fill="rgb(234,204,3)" fg:x="894" fg:w="346"/><text x="71.2587%" y="511.50">&lt;&amp;kernel::model::entry::Entry as plugins_cor..</text></g><g><title>plugins_core::looking::model::qualify_name (337 samples, 26.77%)</title><rect x="71.7236%" y="485" width="26.7673%" height="15" fill="rgb(251,218,7)" fg:x="903" fg:w="337"/><text x="71.9736%" y="495.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (337 samples, 26.77%)</title><rect x="71.7236%" y="469" width="26.7673%" height="15" fill="rgb(221,81,32)" fg:x="903" fg:w="337"/><text x="71.9736%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (337 samples, 26.77%)</title><rect x="71.7236%" y="453" width="26.7673%" height="15" fill="rgb(214,152,26)" fg:x="903" fg:w="337"/><text x="71.9736%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (336 samples, 26.69%)</title><rect x="71.8030%" y="437" width="26.6878%" height="15" fill="rgb(223,22,3)" fg:x="904" fg:w="336"/><text x="72.0530%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (40 samples, 3.18%)</title><rect x="95.3137%" y="421" width="3.1771%" height="15" fill="rgb(207,174,7)" fg:x="1200" fg:w="40"/><text x="95.5637%" y="431.50">ind..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="98.4114%" y="405" width="0.0794%" height="15" fill="rgb(224,19,52)" fg:x="1239" fg:w="1"/><text x="98.6614%" y="415.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="98.5703%" y="357" width="0.1589%" height="15" fill="rgb(228,24,14)" fg:x="1241" fg:w="2"/><text x="98.8203%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.5703%" y="341" width="0.1589%" height="15" fill="rgb(230,153,43)" fg:x="1241" fg:w="2"/><text x="98.8203%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.5703%" y="325" width="0.1589%" height="15" fill="rgb(231,106,12)" fg:x="1241" fg:w="2"/><text x="98.8203%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.6497%" y="309" width="0.0794%" height="15" fill="rgb(215,92,2)" fg:x="1242" fg:w="1"/><text x="98.8997%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6497%" y="293" width="0.0794%" height="15" fill="rgb(249,143,25)" fg:x="1242" fg:w="1"/><text x="98.8997%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.6497%" y="277" width="0.0794%" height="15" fill="rgb(252,7,35)" fg:x="1242" fg:w="1"/><text x="98.8997%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6497%" y="261" width="0.0794%" height="15" fill="rgb(216,69,40)" fg:x="1242" fg:w="1"/><text x="98.8997%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="98.5703%" y="373" width="0.2383%" height="15" fill="rgb(240,36,33)" fg:x="1241" fg:w="3"/><text x="98.8203%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7292%" y="357" width="0.0794%" height="15" fill="rgb(231,128,14)" fg:x="1243" fg:w="1"/><text x="98.9792%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7292%" y="341" width="0.0794%" height="15" fill="rgb(245,143,14)" fg:x="1243" fg:w="1"/><text x="98.9792%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7292%" y="325" width="0.0794%" height="15" fill="rgb(222,130,28)" fg:x="1243" fg:w="1"/><text x="98.9792%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7292%" y="309" width="0.0794%" height="15" fill="rgb(212,10,48)" fg:x="1243" fg:w="1"/><text x="98.9792%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.7292%" y="293" width="0.0794%" height="15" fill="rgb(254,118,45)" fg:x="1243" fg:w="1"/><text x="98.9792%" y="303.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="98.8086%" y="357" width="0.0794%" height="15" fill="rgb(228,6,45)" fg:x="1244" fg:w="1"/><text x="99.0586%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.8086%" y="341" width="0.0794%" height="15" fill="rgb(241,18,35)" fg:x="1244" fg:w="1"/><text x="99.0586%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="98.8086%" y="373" width="0.1589%" height="15" fill="rgb(227,214,53)" fg:x="1244" fg:w="2"/><text x="99.0586%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="98.8880%" y="357" width="0.0794%" height="15" fill="rgb(224,107,51)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="367.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="98.8880%" y="341" width="0.0794%" height="15" fill="rgb(248,60,28)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8880%" y="325" width="0.0794%" height="15" fill="rgb(249,101,23)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8880%" y="309" width="0.0794%" height="15" fill="rgb(228,51,19)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8880%" y="293" width="0.0794%" height="15" fill="rgb(213,20,6)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8880%" y="277" width="0.0794%" height="15" fill="rgb(212,124,10)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8880%" y="261" width="0.0794%" height="15" fill="rgb(248,3,40)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.8880%" y="245" width="0.0794%" height="15" fill="rgb(223,178,23)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.8880%" y="229" width="0.0794%" height="15" fill="rgb(240,132,45)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.8880%" y="213" width="0.0794%" height="15" fill="rgb(245,164,36)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8880%" y="197" width="0.0794%" height="15" fill="rgb(231,188,53)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8880%" y="181" width="0.0794%" height="15" fill="rgb(237,198,39)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.8880%" y="165" width="0.0794%" height="15" fill="rgb(223,120,35)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.8880%" y="149" width="0.0794%" height="15" fill="rgb(253,107,49)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.8880%" y="133" width="0.0794%" height="15" fill="rgb(216,44,31)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.8880%" y="117" width="0.0794%" height="15" fill="rgb(253,87,21)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.8880%" y="101" width="0.0794%" height="15" fill="rgb(226,18,2)" fg:x="1245" fg:w="1"/><text x="99.1380%" y="111.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (7 samples, 0.56%)</title><rect x="98.4909%" y="469" width="0.5560%" height="15" fill="rgb(216,8,46)" fg:x="1240" fg:w="7"/><text x="98.7409%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (7 samples, 0.56%)</title><rect x="98.4909%" y="453" width="0.5560%" height="15" fill="rgb(226,140,39)" fg:x="1240" fg:w="7"/><text x="98.7409%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="98.4909%" y="437" width="0.5560%" height="15" fill="rgb(221,194,54)" fg:x="1240" fg:w="7"/><text x="98.7409%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (7 samples, 0.56%)</title><rect x="98.4909%" y="421" width="0.5560%" height="15" fill="rgb(213,92,11)" fg:x="1240" fg:w="7"/><text x="98.7409%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="98.5703%" y="405" width="0.4766%" height="15" fill="rgb(229,162,46)" fg:x="1241" fg:w="6"/><text x="98.8203%" y="415.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="98.5703%" y="389" width="0.4766%" height="15" fill="rgb(214,111,36)" fg:x="1241" fg:w="6"/><text x="98.8203%" y="399.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="98.9674%" y="373" width="0.0794%" height="15" fill="rgb(207,6,21)" fg:x="1246" fg:w="1"/><text x="99.2174%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9674%" y="357" width="0.0794%" height="15" fill="rgb(213,127,38)" fg:x="1246" fg:w="1"/><text x="99.2174%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9674%" y="341" width="0.0794%" height="15" fill="rgb(238,118,32)" fg:x="1246" fg:w="1"/><text x="99.2174%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.9674%" y="325" width="0.0794%" height="15" fill="rgb(240,139,39)" fg:x="1246" fg:w="1"/><text x="99.2174%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9674%" y="309" width="0.0794%" height="15" fill="rgb(235,10,37)" fg:x="1246" fg:w="1"/><text x="99.2174%" y="319.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="99.0469%" y="469" width="0.0794%" height="15" fill="rgb(249,171,38)" fg:x="1247" fg:w="1"/><text x="99.2969%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="99.0469%" y="453" width="0.0794%" height="15" fill="rgb(242,144,32)" fg:x="1247" fg:w="1"/><text x="99.2969%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.1263%" y="437" width="0.0794%" height="15" fill="rgb(217,117,21)" fg:x="1248" fg:w="1"/><text x="99.3763%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.1263%" y="421" width="0.0794%" height="15" fill="rgb(249,87,1)" fg:x="1248" fg:w="1"/><text x="99.3763%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="99.1263%" y="405" width="0.0794%" height="15" fill="rgb(248,196,48)" fg:x="1248" fg:w="1"/><text x="99.3763%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1263%" y="389" width="0.0794%" height="15" fill="rgb(251,206,33)" fg:x="1248" fg:w="1"/><text x="99.3763%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1263%" y="373" width="0.0794%" height="15" fill="rgb(232,141,28)" fg:x="1248" fg:w="1"/><text x="99.3763%" y="383.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="99.1263%" y="357" width="0.0794%" height="15" fill="rgb(209,167,14)" fg:x="1248" fg:w="1"/><text x="99.3763%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (363 samples, 28.83%)</title><rect x="70.4527%" y="725" width="28.8324%" height="15" fill="rgb(225,11,50)" fg:x="887" fg:w="363"/><text x="70.7027%" y="735.50">&lt;engine::session::Session as kernel::actions::..</text></g><g><title>kernel::plugins::mw::apply_middleware (363 samples, 28.83%)</title><rect x="70.4527%" y="709" width="28.8324%" height="15" fill="rgb(209,50,20)" fg:x="887" fg:w="363"/><text x="70.7027%" y="719.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (363 samples, 28.83%)</title><rect x="70.4527%" y="693" width="28.8324%" height="15" fill="rgb(212,17,46)" fg:x="887" fg:w="363"/><text x="70.7027%" y="703.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (362 samples, 28.75%)</title><rect x="70.5322%" y="677" width="28.7530%" height="15" fill="rgb(216,101,39)" fg:x="888" fg:w="362"/><text x="70.7822%" y="687.50">&lt;engine::session::ExpandSurroundingsMiddleware..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (357 samples, 28.36%)</title><rect x="70.9293%" y="661" width="28.3558%" height="15" fill="rgb(212,228,48)" fg:x="893" fg:w="357"/><text x="71.1793%" y="671.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (357 samples, 28.36%)</title><rect x="70.9293%" y="645" width="28.3558%" height="15" fill="rgb(250,6,50)" fg:x="893" fg:w="357"/><text x="71.1793%" y="655.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (357 samples, 28.36%)</title><rect x="70.9293%" y="629" width="28.3558%" height="15" fill="rgb(250,160,48)" fg:x="893" fg:w="357"/><text x="71.1793%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (357 samples, 28.36%)</title><rect x="70.9293%" y="613" width="28.3558%" height="15" fill="rgb(244,216,33)" fg:x="893" fg:w="357"/><text x="71.1793%" y="623.50">core::ops::function::FnOnce::call_once{{vtable..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (357 samples, 28.36%)</title><rect x="70.9293%" y="597" width="28.3558%" height="15" fill="rgb(207,157,5)" fg:x="893" fg:w="357"/><text x="71.1793%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (357 samples, 28.36%)</title><rect x="70.9293%" y="581" width="28.3558%" height="15" fill="rgb(228,199,8)" fg:x="893" fg:w="357"/><text x="71.1793%" y="591.50">core::ops::function::FnOnce::call_once{{vtable..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (357 samples, 28.36%)</title><rect x="70.9293%" y="565" width="28.3558%" height="15" fill="rgb(227,80,20)" fg:x="893" fg:w="357"/><text x="71.1793%" y="575.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (357 samples, 28.36%)</title><rect x="70.9293%" y="549" width="28.3558%" height="15" fill="rgb(222,9,33)" fg:x="893" fg:w="357"/><text x="71.1793%" y="559.50">&lt;engine::session::state::State as kernel::acti..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (357 samples, 28.36%)</title><rect x="70.9293%" y="533" width="28.3558%" height="15" fill="rgb(239,44,28)" fg:x="893" fg:w="357"/><text x="71.1793%" y="543.50">&lt;plugins_core::looking::actions::LookAction as..</text></g><g><title>plugins_core::looking::model::new_area_observation (356 samples, 28.28%)</title><rect x="71.0087%" y="517" width="28.2764%" height="15" fill="rgb(249,187,43)" fg:x="894" fg:w="356"/><text x="71.2587%" y="527.50">plugins_core::looking::model::new_area_observ..</text></g><g><title>kernel::model::entry::Entry::scope (10 samples, 0.79%)</title><rect x="98.4909%" y="501" width="0.7943%" height="15" fill="rgb(216,141,28)" fg:x="1240" fg:w="10"/><text x="98.7409%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (10 samples, 0.79%)</title><rect x="98.4909%" y="485" width="0.7943%" height="15" fill="rgb(230,154,53)" fg:x="1240" fg:w="10"/><text x="98.7409%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.1263%" y="469" width="0.1589%" height="15" fill="rgb(227,82,4)" fg:x="1248" fg:w="2"/><text x="99.3763%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.1263%" y="453" width="0.1589%" height="15" fill="rgb(220,107,16)" fg:x="1248" fg:w="2"/><text x="99.3763%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2057%" y="437" width="0.0794%" height="15" fill="rgb(207,187,2)" fg:x="1249" fg:w="1"/><text x="99.4557%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2057%" y="421" width="0.0794%" height="15" fill="rgb(210,162,52)" fg:x="1249" fg:w="1"/><text x="99.4557%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="99.2851%" y="693" width="0.1589%" height="15" fill="rgb(217,216,49)" fg:x="1250" fg:w="2"/><text x="99.5351%" y="703.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.2851%" y="677" width="0.1589%" height="15" fill="rgb(218,146,49)" fg:x="1250" fg:w="2"/><text x="99.5351%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.2851%" y="661" width="0.1589%" height="15" fill="rgb(216,55,40)" fg:x="1250" fg:w="2"/><text x="99.5351%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.2851%" y="645" width="0.1589%" height="15" fill="rgb(208,196,21)" fg:x="1250" fg:w="2"/><text x="99.5351%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.2851%" y="629" width="0.1589%" height="15" fill="rgb(242,117,42)" fg:x="1250" fg:w="2"/><text x="99.5351%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3646%" y="613" width="0.0794%" height="15" fill="rgb(210,11,23)" fg:x="1251" fg:w="1"/><text x="99.6146%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3646%" y="597" width="0.0794%" height="15" fill="rgb(217,110,2)" fg:x="1251" fg:w="1"/><text x="99.6146%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3646%" y="581" width="0.0794%" height="15" fill="rgb(229,77,54)" fg:x="1251" fg:w="1"/><text x="99.6146%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3646%" y="565" width="0.0794%" height="15" fill="rgb(218,53,16)" fg:x="1251" fg:w="1"/><text x="99.6146%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3646%" y="549" width="0.0794%" height="15" fill="rgb(215,38,13)" fg:x="1251" fg:w="1"/><text x="99.6146%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3646%" y="533" width="0.0794%" height="15" fill="rgb(235,42,18)" fg:x="1251" fg:w="1"/><text x="99.6146%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3646%" y="517" width="0.0794%" height="15" fill="rgb(219,66,54)" fg:x="1251" fg:w="1"/><text x="99.6146%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.3646%" y="501" width="0.0794%" height="15" fill="rgb(222,205,4)" fg:x="1251" fg:w="1"/><text x="99.6146%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.2851%" y="725" width="0.2383%" height="15" fill="rgb(227,213,46)" fg:x="1250" fg:w="3"/><text x="99.5351%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.2851%" y="709" width="0.2383%" height="15" fill="rgb(250,145,42)" fg:x="1250" fg:w="3"/><text x="99.5351%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.4440%" y="693" width="0.0794%" height="15" fill="rgb(219,15,2)" fg:x="1252" fg:w="1"/><text x="99.6940%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.4440%" y="677" width="0.0794%" height="15" fill="rgb(231,181,52)" fg:x="1252" fg:w="1"/><text x="99.6940%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.4440%" y="661" width="0.0794%" height="15" fill="rgb(235,1,42)" fg:x="1252" fg:w="1"/><text x="99.6940%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4440%" y="645" width="0.0794%" height="15" fill="rgb(249,88,27)" fg:x="1252" fg:w="1"/><text x="99.6940%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4440%" y="629" width="0.0794%" height="15" fill="rgb(235,145,16)" fg:x="1252" fg:w="1"/><text x="99.6940%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4440%" y="613" width="0.0794%" height="15" fill="rgb(237,114,19)" fg:x="1252" fg:w="1"/><text x="99.6940%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4440%" y="597" width="0.0794%" height="15" fill="rgb(238,51,50)" fg:x="1252" fg:w="1"/><text x="99.6940%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.4440%" y="581" width="0.0794%" height="15" fill="rgb(205,194,25)" fg:x="1252" fg:w="1"/><text x="99.6940%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4440%" y="565" width="0.0794%" height="15" fill="rgb(215,203,17)" fg:x="1252" fg:w="1"/><text x="99.6940%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4440%" y="549" width="0.0794%" height="15" fill="rgb(233,112,49)" fg:x="1252" fg:w="1"/><text x="99.6940%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4440%" y="533" width="0.0794%" height="15" fill="rgb(241,130,26)" fg:x="1252" fg:w="1"/><text x="99.6940%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4440%" y="517" width="0.0794%" height="15" fill="rgb(252,223,19)" fg:x="1252" fg:w="1"/><text x="99.6940%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4440%" y="501" width="0.0794%" height="15" fill="rgb(211,95,25)" fg:x="1252" fg:w="1"/><text x="99.6940%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.5234%" y="677" width="0.0794%" height="15" fill="rgb(251,182,27)" fg:x="1253" fg:w="1"/><text x="99.7734%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="99.5234%" y="661" width="0.0794%" height="15" fill="rgb(238,24,4)" fg:x="1253" fg:w="1"/><text x="99.7734%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.5234%" y="645" width="0.0794%" height="15" fill="rgb(224,220,25)" fg:x="1253" fg:w="1"/><text x="99.7734%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.5234%" y="629" width="0.0794%" height="15" fill="rgb(239,133,26)" fg:x="1253" fg:w="1"/><text x="99.7734%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.5234%" y="613" width="0.0794%" height="15" fill="rgb(211,94,48)" fg:x="1253" fg:w="1"/><text x="99.7734%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5234%" y="597" width="0.0794%" height="15" fill="rgb(239,87,6)" fg:x="1253" fg:w="1"/><text x="99.7734%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5234%" y="581" width="0.0794%" height="15" fill="rgb(227,62,0)" fg:x="1253" fg:w="1"/><text x="99.7734%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5234%" y="565" width="0.0794%" height="15" fill="rgb(211,226,4)" fg:x="1253" fg:w="1"/><text x="99.7734%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5234%" y="549" width="0.0794%" height="15" fill="rgb(253,38,52)" fg:x="1253" fg:w="1"/><text x="99.7734%" y="559.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.6029%" y="661" width="0.0794%" height="15" fill="rgb(229,126,40)" fg:x="1254" fg:w="1"/><text x="99.8529%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6029%" y="645" width="0.0794%" height="15" fill="rgb(229,165,44)" fg:x="1254" fg:w="1"/><text x="99.8529%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6029%" y="629" width="0.0794%" height="15" fill="rgb(247,95,47)" fg:x="1254" fg:w="1"/><text x="99.8529%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.6029%" y="613" width="0.0794%" height="15" fill="rgb(216,140,30)" fg:x="1254" fg:w="1"/><text x="99.8529%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6823%" y="549" width="0.0794%" height="15" fill="rgb(246,214,8)" fg:x="1255" fg:w="1"/><text x="99.9323%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6823%" y="533" width="0.0794%" height="15" fill="rgb(227,224,15)" fg:x="1255" fg:w="1"/><text x="99.9323%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (4 samples, 0.32%)</title><rect x="99.5234%" y="725" width="0.3177%" height="15" fill="rgb(233,175,4)" fg:x="1253" fg:w="4"/><text x="99.7734%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="99.5234%" y="709" width="0.3177%" height="15" fill="rgb(221,66,45)" fg:x="1253" fg:w="4"/><text x="99.7734%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="99.5234%" y="693" width="0.3177%" height="15" fill="rgb(221,178,18)" fg:x="1253" fg:w="4"/><text x="99.7734%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="99.6029%" y="677" width="0.2383%" height="15" fill="rgb(213,81,29)" fg:x="1254" fg:w="3"/><text x="99.8529%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.6823%" y="661" width="0.1589%" height="15" fill="rgb(220,89,49)" fg:x="1255" fg:w="2"/><text x="99.9323%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6823%" y="645" width="0.1589%" height="15" fill="rgb(227,60,33)" fg:x="1255" fg:w="2"/><text x="99.9323%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.6823%" y="629" width="0.1589%" height="15" fill="rgb(205,113,12)" fg:x="1255" fg:w="2"/><text x="99.9323%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6823%" y="613" width="0.1589%" height="15" fill="rgb(211,32,1)" fg:x="1255" fg:w="2"/><text x="99.9323%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6823%" y="597" width="0.1589%" height="15" fill="rgb(246,2,12)" fg:x="1255" fg:w="2"/><text x="99.9323%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6823%" y="581" width="0.1589%" height="15" fill="rgb(243,37,27)" fg:x="1255" fg:w="2"/><text x="99.9323%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6823%" y="565" width="0.1589%" height="15" fill="rgb(248,211,31)" fg:x="1255" fg:w="2"/><text x="99.9323%" y="575.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.7617%" y="549" width="0.0794%" height="15" fill="rgb(242,146,47)" fg:x="1256" fg:w="1"/><text x="100.0117%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="99.7617%" y="533" width="0.0794%" height="15" fill="rgb(206,70,20)" fg:x="1256" fg:w="1"/><text x="100.0117%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.7617%" y="517" width="0.0794%" height="15" fill="rgb(215,10,51)" fg:x="1256" fg:w="1"/><text x="100.0117%" y="527.50"></text></g><g><title>all (1,259 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(243,178,53)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-484c7248 (1,259 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(233,221,20)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="1087.50">simple-484c7248</text></g><g><title>_start (1,259 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(218,95,35)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,259 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(229,13,5)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,259 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(252,164,30)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,259 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(232,68,36)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,259 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(219,59,54)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,259 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(250,92,33)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,259 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(229,162,54)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,259 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(244,114,52)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,259 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(212,211,43)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,259 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(226,147,8)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,259 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(226,23,13)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,259 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(240,63,4)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,259 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(221,1,32)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,259 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(242,117,10)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,259 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(249,172,44)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,259 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(244,46,45)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,259 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(206,43,17)" fg:x="0" fg:w="1259"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (453 samples, 35.98%)</title><rect x="64.0191%" y="789" width="35.9809%" height="15" fill="rgb(239,218,39)" fg:x="806" fg:w="453"/><text x="64.2691%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (453 samples, 35.98%)</title><rect x="64.0191%" y="773" width="35.9809%" height="15" fill="rgb(208,169,54)" fg:x="806" fg:w="453"/><text x="64.2691%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (453 samples, 35.98%)</title><rect x="64.0191%" y="757" width="35.9809%" height="15" fill="rgb(247,25,42)" fg:x="806" fg:w="453"/><text x="64.2691%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (372 samples, 29.55%)</title><rect x="70.4527%" y="741" width="29.5473%" height="15" fill="rgb(226,23,31)" fg:x="887" fg:w="372"/><text x="70.7027%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="99.8411%" y="725" width="0.1589%" height="15" fill="rgb(247,16,28)" fg:x="1257" fg:w="2"/><text x="100.0911%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="99.8411%" y="709" width="0.1589%" height="15" fill="rgb(231,147,38)" fg:x="1257" fg:w="2"/><text x="100.0911%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="99.8411%" y="693" width="0.1589%" height="15" fill="rgb(253,81,48)" fg:x="1257" fg:w="2"/><text x="100.0911%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.8411%" y="677" width="0.1589%" height="15" fill="rgb(249,222,43)" fg:x="1257" fg:w="2"/><text x="100.0911%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.8411%" y="661" width="0.1589%" height="15" fill="rgb(221,3,27)" fg:x="1257" fg:w="2"/><text x="100.0911%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.8411%" y="645" width="0.1589%" height="15" fill="rgb(228,180,5)" fg:x="1257" fg:w="2"/><text x="100.0911%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.8411%" y="629" width="0.1589%" height="15" fill="rgb(227,131,42)" fg:x="1257" fg:w="2"/><text x="100.0911%" y="639.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="99.9206%" y="613" width="0.0794%" height="15" fill="rgb(212,3,39)" fg:x="1258" fg:w="1"/><text x="100.1706%" y="623.50"></text></g></svg></svg>