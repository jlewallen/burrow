<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1249"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="725" width="0.0801%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1601%" y="645" width="0.0801%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.4101%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0801%" y="709" width="0.2402%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="3"/><text x="0.3301%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="0.0801%" y="693" width="0.2402%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="3"/><text x="0.3301%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.24%)</title><rect x="0.0801%" y="677" width="0.2402%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="3"/><text x="0.3301%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (3 samples, 0.24%)</title><rect x="0.0801%" y="661" width="0.2402%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="3"/><text x="0.3301%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::ArgumentType&gt; (1 samples, 0.08%)</title><rect x="0.2402%" y="645" width="0.0801%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="0.4902%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::ArgumentType&gt; (1 samples, 0.08%)</title><rect x="0.2402%" y="629" width="0.0801%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="0.4902%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="0.0801%" y="725" width="0.3203%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="4"/><text x="0.3301%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3203%" y="709" width="0.0801%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="0.5703%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.4003%" y="581" width="0.0801%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="1"/><text x="0.6503%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.4804%" y="565" width="0.0801%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="1"/><text x="0.7304%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4804%" y="549" width="0.0801%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="1"/><text x="0.7304%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="0.4804%" y="581" width="0.2402%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="3"/><text x="0.7304%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.5604%" y="565" width="0.1601%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="2"/><text x="0.8104%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.4003%" y="661" width="0.4003%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="5"/><text x="0.6503%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (5 samples, 0.40%)</title><rect x="0.4003%" y="645" width="0.4003%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="5"/><text x="0.6503%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="0.4003%" y="629" width="0.4003%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="5"/><text x="0.6503%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.4003%" y="613" width="0.4003%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="5"/><text x="0.6503%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.4003%" y="597" width="0.4003%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="5"/><text x="0.6503%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.7206%" y="581" width="0.0801%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="1"/><text x="0.9706%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.8006%" y="645" width="0.1601%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="2"/><text x="1.0506%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8807%" y="629" width="0.0801%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="1"/><text x="1.1307%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9608%" y="629" width="0.0801%" height="15" fill="rgb(247,18,42)" fg:x="12" fg:w="1"/><text x="1.2108%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2810%" y="581" width="0.0801%" height="15" fill="rgb(241,131,45)" fg:x="16" fg:w="1"/><text x="1.5310%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3611%" y="565" width="0.0801%" height="15" fill="rgb(249,31,29)" fg:x="17" fg:w="1"/><text x="1.6111%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="1.3611%" y="581" width="0.1601%" height="15" fill="rgb(225,111,53)" fg:x="17" fg:w="2"/><text x="1.6111%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.4412%" y="565" width="0.0801%" height="15" fill="rgb(238,160,17)" fg:x="18" fg:w="1"/><text x="1.6912%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.4412%" y="549" width="0.0801%" height="15" fill="rgb(214,148,48)" fg:x="18" fg:w="1"/><text x="1.6912%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4412%" y="533" width="0.0801%" height="15" fill="rgb(232,36,49)" fg:x="18" fg:w="1"/><text x="1.6912%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 1.60%)</title><rect x="0.0000%" y="741" width="1.6013%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="20"/><text x="0.2500%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (15 samples, 1.20%)</title><rect x="0.4003%" y="725" width="1.2010%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="15"/><text x="0.6503%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.20%)</title><rect x="0.4003%" y="709" width="1.2010%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="15"/><text x="0.6503%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (15 samples, 1.20%)</title><rect x="0.4003%" y="693" width="1.2010%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="15"/><text x="0.6503%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.20%)</title><rect x="0.4003%" y="677" width="1.2010%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="15"/><text x="0.6503%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (10 samples, 0.80%)</title><rect x="0.8006%" y="661" width="0.8006%" height="15" fill="rgb(233,36,39)" fg:x="10" fg:w="10"/><text x="1.0506%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="0.9608%" y="645" width="0.6405%" height="15" fill="rgb(226,3,54)" fg:x="12" fg:w="8"/><text x="1.2108%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="1.0408%" y="629" width="0.5604%" height="15" fill="rgb(245,192,40)" fg:x="13" fg:w="7"/><text x="1.2908%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="1.1209%" y="613" width="0.4804%" height="15" fill="rgb(238,167,29)" fg:x="14" fg:w="6"/><text x="1.3709%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.2010%" y="597" width="0.4003%" height="15" fill="rgb(232,182,51)" fg:x="15" fg:w="5"/><text x="1.4510%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.5212%" y="581" width="0.0801%" height="15" fill="rgb(231,60,39)" fg:x="19" fg:w="1"/><text x="1.7712%" y="591.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (2 samples, 0.16%)</title><rect x="1.6013%" y="693" width="0.1601%" height="15" fill="rgb(208,69,12)" fg:x="20" fg:w="2"/><text x="1.8513%" y="703.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.0016%" y="613" width="0.0801%" height="15" fill="rgb(235,93,37)" fg:x="25" fg:w="1"/><text x="2.2516%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.0016%" y="597" width="0.0801%" height="15" fill="rgb(213,116,39)" fg:x="25" fg:w="1"/><text x="2.2516%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.0016%" y="581" width="0.0801%" height="15" fill="rgb(222,207,29)" fg:x="25" fg:w="1"/><text x="2.2516%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.0016%" y="565" width="0.0801%" height="15" fill="rgb(206,96,30)" fg:x="25" fg:w="1"/><text x="2.2516%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.0817%" y="597" width="0.0801%" height="15" fill="rgb(218,138,4)" fg:x="26" fg:w="1"/><text x="2.3317%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.0817%" y="581" width="0.0801%" height="15" fill="rgb(250,191,14)" fg:x="26" fg:w="1"/><text x="2.3317%" y="591.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="2.0016%" y="645" width="0.2402%" height="15" fill="rgb(239,60,40)" fg:x="25" fg:w="3"/><text x="2.2516%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="2.0016%" y="629" width="0.2402%" height="15" fill="rgb(206,27,48)" fg:x="25" fg:w="3"/><text x="2.2516%" y="639.50"></text></g><g><title>replies::identifier_to_key (2 samples, 0.16%)</title><rect x="2.0817%" y="613" width="0.1601%" height="15" fill="rgb(225,35,8)" fg:x="26" fg:w="2"/><text x="2.3317%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.1617%" y="597" width="0.0801%" height="15" fill="rgb(250,213,24)" fg:x="27" fg:w="1"/><text x="2.4117%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.1617%" y="581" width="0.0801%" height="15" fill="rgb(247,123,22)" fg:x="27" fg:w="1"/><text x="2.4117%" y="591.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="2.1617%" y="565" width="0.0801%" height="15" fill="rgb(231,138,38)" fg:x="27" fg:w="1"/><text x="2.4117%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="2.1617%" y="549" width="0.0801%" height="15" fill="rgb(231,145,46)" fg:x="27" fg:w="1"/><text x="2.4117%" y="559.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.2418%" y="645" width="0.0801%" height="15" fill="rgb(251,118,11)" fg:x="28" fg:w="1"/><text x="2.4918%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.2418%" y="629" width="0.0801%" height="15" fill="rgb(217,147,25)" fg:x="28" fg:w="1"/><text x="2.4918%" y="639.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.2418%" y="613" width="0.0801%" height="15" fill="rgb(247,81,37)" fg:x="28" fg:w="1"/><text x="2.4918%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.2418%" y="597" width="0.0801%" height="15" fill="rgb(209,12,38)" fg:x="28" fg:w="1"/><text x="2.4918%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.2418%" y="581" width="0.0801%" height="15" fill="rgb(227,1,9)" fg:x="28" fg:w="1"/><text x="2.4918%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.2418%" y="565" width="0.0801%" height="15" fill="rgb(248,47,43)" fg:x="28" fg:w="1"/><text x="2.4918%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.2418%" y="549" width="0.0801%" height="15" fill="rgb(221,10,30)" fg:x="28" fg:w="1"/><text x="2.4918%" y="559.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.3219%" y="645" width="0.0801%" height="15" fill="rgb(210,229,1)" fg:x="29" fg:w="1"/><text x="2.5719%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.3219%" y="629" width="0.0801%" height="15" fill="rgb(222,148,37)" fg:x="29" fg:w="1"/><text x="2.5719%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3219%" y="613" width="0.0801%" height="15" fill="rgb(234,67,33)" fg:x="29" fg:w="1"/><text x="2.5719%" y="623.50"></text></g><g><title>&lt;plugins_core::moving::actions::DeactivateRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.4820%" y="613" width="0.0801%" height="15" fill="rgb(247,98,35)" fg:x="31" fg:w="1"/><text x="2.7320%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.4820%" y="597" width="0.0801%" height="15" fill="rgb(247,138,52)" fg:x="31" fg:w="1"/><text x="2.7320%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.4820%" y="581" width="0.0801%" height="15" fill="rgb(213,79,30)" fg:x="31" fg:w="1"/><text x="2.7320%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.4820%" y="565" width="0.0801%" height="15" fill="rgb(246,177,23)" fg:x="31" fg:w="1"/><text x="2.7320%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4820%" y="549" width="0.0801%" height="15" fill="rgb(230,62,27)" fg:x="31" fg:w="1"/><text x="2.7320%" y="559.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="2.4019%" y="645" width="0.2402%" height="15" fill="rgb(216,154,8)" fg:x="30" fg:w="3"/><text x="2.6519%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="2.4019%" y="629" width="0.2402%" height="15" fill="rgb(244,35,45)" fg:x="30" fg:w="3"/><text x="2.6519%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.5620%" y="613" width="0.0801%" height="15" fill="rgb(251,115,12)" fg:x="32" fg:w="1"/><text x="2.8120%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (11 samples, 0.88%)</title><rect x="1.9215%" y="661" width="0.8807%" height="15" fill="rgb(240,54,50)" fg:x="24" fg:w="11"/><text x="2.1715%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="2.6421%" y="645" width="0.1601%" height="15" fill="rgb(233,84,52)" fg:x="33" fg:w="2"/><text x="2.8921%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="2.7222%" y="629" width="0.0801%" height="15" fill="rgb(207,117,47)" fg:x="34" fg:w="1"/><text x="2.9722%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.8022%" y="645" width="0.0801%" height="15" fill="rgb(249,43,39)" fg:x="35" fg:w="1"/><text x="3.0522%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="2.8823%" y="645" width="0.0801%" height="15" fill="rgb(209,38,44)" fg:x="36" fg:w="1"/><text x="3.1323%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="2.8823%" y="629" width="0.0801%" height="15" fill="rgb(236,212,23)" fg:x="36" fg:w="1"/><text x="3.1323%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.8823%" y="613" width="0.0801%" height="15" fill="rgb(242,79,21)" fg:x="36" fg:w="1"/><text x="3.1323%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="2.8022%" y="661" width="0.2402%" height="15" fill="rgb(211,96,35)" fg:x="35" fg:w="3"/><text x="3.0522%" y="671.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="2.9624%" y="645" width="0.0801%" height="15" fill="rgb(253,215,40)" fg:x="37" fg:w="1"/><text x="3.2124%" y="655.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (1 samples, 0.08%)</title><rect x="3.1225%" y="645" width="0.0801%" height="15" fill="rgb(211,81,21)" fg:x="39" fg:w="1"/><text x="3.3725%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.1225%" y="629" width="0.0801%" height="15" fill="rgb(208,190,38)" fg:x="39" fg:w="1"/><text x="3.3725%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.2826%" y="597" width="0.0801%" height="15" fill="rgb(235,213,38)" fg:x="41" fg:w="1"/><text x="3.5326%" y="607.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="3.3627%" y="597" width="0.3203%" height="15" fill="rgb(237,122,38)" fg:x="42" fg:w="4"/><text x="3.6127%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="3.3627%" y="581" width="0.3203%" height="15" fill="rgb(244,218,35)" fg:x="42" fg:w="4"/><text x="3.6127%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="3.3627%" y="565" width="0.3203%" height="15" fill="rgb(240,68,47)" fg:x="42" fg:w="4"/><text x="3.6127%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="3.3627%" y="549" width="0.3203%" height="15" fill="rgb(210,16,53)" fg:x="42" fg:w="4"/><text x="3.6127%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="3.3627%" y="533" width="0.3203%" height="15" fill="rgb(235,124,12)" fg:x="42" fg:w="4"/><text x="3.6127%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="3.3627%" y="517" width="0.3203%" height="15" fill="rgb(224,169,11)" fg:x="42" fg:w="4"/><text x="3.6127%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="3.3627%" y="501" width="0.3203%" height="15" fill="rgb(250,166,2)" fg:x="42" fg:w="4"/><text x="3.6127%" y="511.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="3.3627%" y="485" width="0.3203%" height="15" fill="rgb(242,216,29)" fg:x="42" fg:w="4"/><text x="3.6127%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="3.2026%" y="629" width="0.5604%" height="15" fill="rgb(230,116,27)" fg:x="40" fg:w="7"/><text x="3.4526%" y="639.50"></text></g><g><title>glob::fill_todo (7 samples, 0.56%)</title><rect x="3.2026%" y="613" width="0.5604%" height="15" fill="rgb(228,99,48)" fg:x="40" fg:w="7"/><text x="3.4526%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="3.6829%" y="597" width="0.0801%" height="15" fill="rgb(253,11,6)" fg:x="46" fg:w="1"/><text x="3.9329%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="3.6829%" y="581" width="0.0801%" height="15" fill="rgb(247,143,39)" fg:x="46" fg:w="1"/><text x="3.9329%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="3.6829%" y="565" width="0.0801%" height="15" fill="rgb(236,97,10)" fg:x="46" fg:w="1"/><text x="3.9329%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="3.6829%" y="549" width="0.0801%" height="15" fill="rgb(233,208,19)" fg:x="46" fg:w="1"/><text x="3.9329%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="3.6829%" y="533" width="0.0801%" height="15" fill="rgb(216,164,2)" fg:x="46" fg:w="1"/><text x="3.9329%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="3.6829%" y="517" width="0.0801%" height="15" fill="rgb(220,129,5)" fg:x="46" fg:w="1"/><text x="3.9329%" y="527.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="3.6829%" y="501" width="0.0801%" height="15" fill="rgb(242,17,10)" fg:x="46" fg:w="1"/><text x="3.9329%" y="511.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.7630%" y="597" width="0.0801%" height="15" fill="rgb(242,107,0)" fg:x="47" fg:w="1"/><text x="4.0130%" y="607.50"></text></g><g><title>std::sys::unix::os_str::Buf::from_string (1 samples, 0.08%)</title><rect x="3.7630%" y="581" width="0.0801%" height="15" fill="rgb(251,28,31)" fg:x="47" fg:w="1"/><text x="4.0130%" y="591.50"></text></g><g><title>glob::Pattern::new (2 samples, 0.16%)</title><rect x="3.8431%" y="597" width="0.1601%" height="15" fill="rgb(233,223,10)" fg:x="48" fg:w="2"/><text x="4.0931%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.8431%" y="581" width="0.1601%" height="15" fill="rgb(215,21,27)" fg:x="48" fg:w="2"/><text x="4.0931%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.9231%" y="565" width="0.0801%" height="15" fill="rgb(232,23,21)" fg:x="49" fg:w="1"/><text x="4.1731%" y="575.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (13 samples, 1.04%)</title><rect x="3.0424%" y="661" width="1.0408%" height="15" fill="rgb(244,5,23)" fg:x="38" fg:w="13"/><text x="3.2924%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (11 samples, 0.88%)</title><rect x="3.2026%" y="645" width="0.8807%" height="15" fill="rgb(226,81,46)" fg:x="40" fg:w="11"/><text x="3.4526%" y="655.50"></text></g><g><title>glob::glob (4 samples, 0.32%)</title><rect x="3.7630%" y="629" width="0.3203%" height="15" fill="rgb(247,70,30)" fg:x="47" fg:w="4"/><text x="4.0130%" y="639.50"></text></g><g><title>glob::glob_with (4 samples, 0.32%)</title><rect x="3.7630%" y="613" width="0.3203%" height="15" fill="rgb(212,68,19)" fg:x="47" fg:w="4"/><text x="4.0130%" y="623.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.08%)</title><rect x="4.0032%" y="597" width="0.0801%" height="15" fill="rgb(240,187,13)" fg:x="50" fg:w="1"/><text x="4.2532%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="4.0833%" y="661" width="0.0801%" height="15" fill="rgb(223,113,26)" fg:x="51" fg:w="1"/><text x="4.3333%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="4.0833%" y="645" width="0.0801%" height="15" fill="rgb(206,192,2)" fg:x="51" fg:w="1"/><text x="4.3333%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.0833%" y="629" width="0.0801%" height="15" fill="rgb(241,108,4)" fg:x="51" fg:w="1"/><text x="4.3333%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (32 samples, 2.56%)</title><rect x="1.7614%" y="677" width="2.5620%" height="15" fill="rgb(247,173,49)" fg:x="22" fg:w="32"/><text x="2.0114%" y="687.50">ke..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="4.1633%" y="661" width="0.1601%" height="15" fill="rgb(224,114,35)" fg:x="52" fg:w="2"/><text x="4.4133%" y="671.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="4.1633%" y="645" width="0.1601%" height="15" fill="rgb(245,159,27)" fg:x="52" fg:w="2"/><text x="4.4133%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::middleware (2 samples, 0.16%)</title><rect x="4.4035%" y="645" width="0.1601%" height="15" fill="rgb(245,172,44)" fg:x="55" fg:w="2"/><text x="4.6535%" y="655.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="4.4035%" y="629" width="0.1601%" height="15" fill="rgb(236,23,11)" fg:x="55" fg:w="2"/><text x="4.6535%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (39 samples, 3.12%)</title><rect x="1.6013%" y="741" width="3.1225%" height="15" fill="rgb(205,117,38)" fg:x="20" fg:w="39"/><text x="1.8513%" y="751.50">&lt;en..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (39 samples, 3.12%)</title><rect x="1.6013%" y="725" width="3.1225%" height="15" fill="rgb(237,72,25)" fg:x="20" fg:w="39"/><text x="1.8513%" y="735.50">eng..</text></g><g><title>engine::session::Session::new (39 samples, 3.12%)</title><rect x="1.6013%" y="709" width="3.1225%" height="15" fill="rgb(244,70,9)" fg:x="20" fg:w="39"/><text x="1.8513%" y="719.50">eng..</text></g><g><title>engine::session::Session::initialize (37 samples, 2.96%)</title><rect x="1.7614%" y="693" width="2.9624%" height="15" fill="rgb(217,125,39)" fg:x="22" fg:w="37"/><text x="2.0114%" y="703.50">eng..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (5 samples, 0.40%)</title><rect x="4.3235%" y="677" width="0.4003%" height="15" fill="rgb(235,36,10)" fg:x="54" fg:w="5"/><text x="4.5735%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="4.3235%" y="661" width="0.4003%" height="15" fill="rgb(251,123,47)" fg:x="54" fg:w="5"/><text x="4.5735%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="4.5637%" y="645" width="0.1601%" height="15" fill="rgb(221,13,13)" fg:x="57" fg:w="2"/><text x="4.8137%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="4.5637%" y="629" width="0.1601%" height="15" fill="rgb(238,131,9)" fg:x="57" fg:w="2"/><text x="4.8137%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.6437%" y="613" width="0.0801%" height="15" fill="rgb(211,50,8)" fg:x="58" fg:w="1"/><text x="4.8937%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="4.7238%" y="709" width="0.0801%" height="15" fill="rgb(245,182,24)" fg:x="59" fg:w="1"/><text x="4.9738%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.7238%" y="693" width="0.0801%" height="15" fill="rgb(242,14,37)" fg:x="59" fg:w="1"/><text x="4.9738%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.7238%" y="677" width="0.0801%" height="15" fill="rgb(246,228,12)" fg:x="59" fg:w="1"/><text x="4.9738%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.8839%" y="677" width="0.0801%" height="15" fill="rgb(213,55,15)" fg:x="61" fg:w="1"/><text x="5.1339%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="4.8839%" y="661" width="0.0801%" height="15" fill="rgb(209,9,3)" fg:x="61" fg:w="1"/><text x="5.1339%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="4.8839%" y="645" width="0.0801%" height="15" fill="rgb(230,59,30)" fg:x="61" fg:w="1"/><text x="5.1339%" y="655.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="4.8839%" y="629" width="0.0801%" height="15" fill="rgb(209,121,21)" fg:x="61" fg:w="1"/><text x="5.1339%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.8839%" y="613" width="0.0801%" height="15" fill="rgb(220,109,13)" fg:x="61" fg:w="1"/><text x="5.1339%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.9640%" y="613" width="0.0801%" height="15" fill="rgb(232,18,1)" fg:x="62" fg:w="1"/><text x="5.2140%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="5.0440%" y="613" width="0.1601%" height="15" fill="rgb(215,41,42)" fg:x="63" fg:w="2"/><text x="5.2940%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.0440%" y="597" width="0.1601%" height="15" fill="rgb(224,123,36)" fg:x="63" fg:w="2"/><text x="5.2940%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.0440%" y="581" width="0.1601%" height="15" fill="rgb(240,125,3)" fg:x="63" fg:w="2"/><text x="5.2940%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.1241%" y="565" width="0.0801%" height="15" fill="rgb(205,98,50)" fg:x="64" fg:w="1"/><text x="5.3741%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.1241%" y="549" width="0.0801%" height="15" fill="rgb(205,185,37)" fg:x="64" fg:w="1"/><text x="5.3741%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.1241%" y="533" width="0.0801%" height="15" fill="rgb(238,207,15)" fg:x="64" fg:w="1"/><text x="5.3741%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.1241%" y="517" width="0.0801%" height="15" fill="rgb(213,199,42)" fg:x="64" fg:w="1"/><text x="5.3741%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.1241%" y="501" width="0.0801%" height="15" fill="rgb(235,201,11)" fg:x="64" fg:w="1"/><text x="5.3741%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.2042%" y="597" width="0.1601%" height="15" fill="rgb(207,46,11)" fg:x="65" fg:w="2"/><text x="5.4542%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.2842%" y="581" width="0.0801%" height="15" fill="rgb(241,35,35)" fg:x="66" fg:w="1"/><text x="5.5342%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.2842%" y="565" width="0.0801%" height="15" fill="rgb(243,32,47)" fg:x="66" fg:w="1"/><text x="5.5342%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="5.3643%" y="581" width="0.2402%" height="15" fill="rgb(247,202,23)" fg:x="67" fg:w="3"/><text x="5.6143%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.4444%" y="565" width="0.1601%" height="15" fill="rgb(219,102,11)" fg:x="68" fg:w="2"/><text x="5.6944%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.4444%" y="549" width="0.1601%" height="15" fill="rgb(243,110,44)" fg:x="68" fg:w="2"/><text x="5.6944%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="5.5244%" y="533" width="0.0801%" height="15" fill="rgb(222,74,54)" fg:x="69" fg:w="1"/><text x="5.7744%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6845%" y="549" width="0.0801%" height="15" fill="rgb(216,99,12)" fg:x="71" fg:w="1"/><text x="5.9345%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="5.3643%" y="597" width="0.4804%" height="15" fill="rgb(226,22,26)" fg:x="67" fg:w="6"/><text x="5.6143%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.6045%" y="581" width="0.2402%" height="15" fill="rgb(217,163,10)" fg:x="70" fg:w="3"/><text x="5.8545%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.6045%" y="565" width="0.2402%" height="15" fill="rgb(213,25,53)" fg:x="70" fg:w="3"/><text x="5.8545%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7646%" y="549" width="0.0801%" height="15" fill="rgb(252,105,26)" fg:x="72" fg:w="1"/><text x="6.0146%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.04%)</title><rect x="4.9640%" y="629" width="1.0408%" height="15" fill="rgb(220,39,43)" fg:x="62" fg:w="13"/><text x="5.2140%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="5.2042%" y="613" width="0.8006%" height="15" fill="rgb(229,68,48)" fg:x="65" fg:w="10"/><text x="5.4542%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.8447%" y="597" width="0.1601%" height="15" fill="rgb(252,8,32)" fg:x="73" fg:w="2"/><text x="6.0947%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.9247%" y="581" width="0.0801%" height="15" fill="rgb(223,20,43)" fg:x="74" fg:w="1"/><text x="6.1747%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.9247%" y="565" width="0.0801%" height="15" fill="rgb(229,81,49)" fg:x="74" fg:w="1"/><text x="6.1747%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.9247%" y="549" width="0.0801%" height="15" fill="rgb(236,28,36)" fg:x="74" fg:w="1"/><text x="6.1747%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.9247%" y="533" width="0.0801%" height="15" fill="rgb(249,185,26)" fg:x="74" fg:w="1"/><text x="6.1747%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="6.0849%" y="581" width="0.1601%" height="15" fill="rgb(249,174,33)" fg:x="76" fg:w="2"/><text x="6.3349%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.2450%" y="581" width="0.0801%" height="15" fill="rgb(233,201,37)" fg:x="78" fg:w="1"/><text x="6.4950%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.3251%" y="565" width="0.0801%" height="15" fill="rgb(221,78,26)" fg:x="79" fg:w="1"/><text x="6.5751%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.4051%" y="549" width="0.0801%" height="15" fill="rgb(250,127,30)" fg:x="80" fg:w="1"/><text x="6.6551%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="6.0048%" y="629" width="0.5604%" height="15" fill="rgb(230,49,44)" fg:x="75" fg:w="7"/><text x="6.2548%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="6.0048%" y="613" width="0.5604%" height="15" fill="rgb(229,67,23)" fg:x="75" fg:w="7"/><text x="6.2548%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="6.0048%" y="597" width="0.5604%" height="15" fill="rgb(249,83,47)" fg:x="75" fg:w="7"/><text x="6.2548%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="6.3251%" y="581" width="0.2402%" height="15" fill="rgb(215,43,3)" fg:x="79" fg:w="3"/><text x="6.5751%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.4051%" y="565" width="0.1601%" height="15" fill="rgb(238,154,13)" fg:x="80" fg:w="2"/><text x="6.6551%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.4852%" y="549" width="0.0801%" height="15" fill="rgb(219,56,2)" fg:x="81" fg:w="1"/><text x="6.7352%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="6.5653%" y="613" width="0.0801%" height="15" fill="rgb(233,0,4)" fg:x="82" fg:w="1"/><text x="6.8153%" y="623.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="6.5653%" y="597" width="0.0801%" height="15" fill="rgb(235,30,7)" fg:x="82" fg:w="1"/><text x="6.8153%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.5653%" y="581" width="0.0801%" height="15" fill="rgb(250,79,13)" fg:x="82" fg:w="1"/><text x="6.8153%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.5653%" y="565" width="0.0801%" height="15" fill="rgb(211,146,34)" fg:x="82" fg:w="1"/><text x="6.8153%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.6453%" y="581" width="0.0801%" height="15" fill="rgb(228,22,38)" fg:x="83" fg:w="1"/><text x="6.8953%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="6.7254%" y="581" width="0.1601%" height="15" fill="rgb(235,168,5)" fg:x="84" fg:w="2"/><text x="6.9754%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="6.7254%" y="565" width="0.1601%" height="15" fill="rgb(221,155,16)" fg:x="84" fg:w="2"/><text x="6.9754%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.8054%" y="549" width="0.0801%" height="15" fill="rgb(215,215,53)" fg:x="85" fg:w="1"/><text x="7.0554%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8054%" y="533" width="0.0801%" height="15" fill="rgb(223,4,10)" fg:x="85" fg:w="1"/><text x="7.0554%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.2858%" y="469" width="0.0801%" height="15" fill="rgb(234,103,6)" fg:x="91" fg:w="1"/><text x="7.5358%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2858%" y="453" width="0.0801%" height="15" fill="rgb(227,97,0)" fg:x="91" fg:w="1"/><text x="7.5358%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="7.1257%" y="517" width="0.3203%" height="15" fill="rgb(234,150,53)" fg:x="89" fg:w="4"/><text x="7.3757%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="7.1257%" y="501" width="0.3203%" height="15" fill="rgb(228,201,54)" fg:x="89" fg:w="4"/><text x="7.3757%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="7.1257%" y="485" width="0.3203%" height="15" fill="rgb(222,22,37)" fg:x="89" fg:w="4"/><text x="7.3757%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3659%" y="469" width="0.0801%" height="15" fill="rgb(237,53,32)" fg:x="92" fg:w="1"/><text x="7.6159%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="6.8855%" y="565" width="0.6405%" height="15" fill="rgb(233,25,53)" fg:x="86" fg:w="8"/><text x="7.1355%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="6.9656%" y="549" width="0.5604%" height="15" fill="rgb(210,40,34)" fg:x="87" fg:w="7"/><text x="7.2156%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="7.1257%" y="533" width="0.4003%" height="15" fill="rgb(241,220,44)" fg:x="89" fg:w="5"/><text x="7.3757%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.4460%" y="517" width="0.0801%" height="15" fill="rgb(235,28,35)" fg:x="93" fg:w="1"/><text x="7.6960%" y="527.50"></text></g><g><title>engine::session::Session::flush (36 samples, 2.88%)</title><rect x="4.7238%" y="725" width="2.8823%" height="15" fill="rgb(210,56,17)" fg:x="59" fg:w="36"/><text x="4.9738%" y="735.50">en..</text></g><g><title>engine::session::state::State::close (35 samples, 2.80%)</title><rect x="4.8038%" y="709" width="2.8022%" height="15" fill="rgb(224,130,29)" fg:x="60" fg:w="35"/><text x="5.0538%" y="719.50">en..</text></g><g><title>engine::session::state::State::flush_entities (34 samples, 2.72%)</title><rect x="4.8839%" y="693" width="2.7222%" height="15" fill="rgb(235,212,8)" fg:x="61" fg:w="34"/><text x="5.1339%" y="703.50">en..</text></g><g><title>core::iter::adapters::try_process (33 samples, 2.64%)</title><rect x="4.9640%" y="677" width="2.6421%" height="15" fill="rgb(223,33,50)" fg:x="62" fg:w="33"/><text x="5.2140%" y="687.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 2.64%)</title><rect x="4.9640%" y="661" width="2.6421%" height="15" fill="rgb(219,149,13)" fg:x="62" fg:w="33"/><text x="5.2140%" y="671.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (33 samples, 2.64%)</title><rect x="4.9640%" y="645" width="2.6421%" height="15" fill="rgb(250,156,29)" fg:x="62" fg:w="33"/><text x="5.2140%" y="655.50">en..</text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.04%)</title><rect x="6.5653%" y="629" width="1.0408%" height="15" fill="rgb(216,193,19)" fg:x="82" fg:w="13"/><text x="6.8153%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.96%)</title><rect x="6.6453%" y="613" width="0.9608%" height="15" fill="rgb(216,135,14)" fg:x="83" fg:w="12"/><text x="6.8953%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.96%)</title><rect x="6.6453%" y="597" width="0.9608%" height="15" fill="rgb(241,47,5)" fg:x="83" fg:w="12"/><text x="6.8953%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="6.8855%" y="581" width="0.7206%" height="15" fill="rgb(233,42,35)" fg:x="86" fg:w="9"/><text x="7.1355%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.5260%" y="565" width="0.0801%" height="15" fill="rgb(231,13,6)" fg:x="94" fg:w="1"/><text x="7.7760%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6861%" y="677" width="0.0801%" height="15" fill="rgb(207,181,40)" fg:x="96" fg:w="1"/><text x="7.9361%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6861%" y="661" width="0.0801%" height="15" fill="rgb(254,173,49)" fg:x="96" fg:w="1"/><text x="7.9361%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6861%" y="645" width="0.0801%" height="15" fill="rgb(221,1,38)" fg:x="96" fg:w="1"/><text x="7.9361%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="7.6061%" y="709" width="0.2402%" height="15" fill="rgb(206,124,46)" fg:x="95" fg:w="3"/><text x="7.8561%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="7.6061%" y="693" width="0.2402%" height="15" fill="rgb(249,21,11)" fg:x="95" fg:w="3"/><text x="7.8561%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.7662%" y="677" width="0.0801%" height="15" fill="rgb(222,201,40)" fg:x="97" fg:w="1"/><text x="8.0162%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.7662%" y="661" width="0.0801%" height="15" fill="rgb(235,61,29)" fg:x="97" fg:w="1"/><text x="8.0162%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.7662%" y="645" width="0.0801%" height="15" fill="rgb(219,207,3)" fg:x="97" fg:w="1"/><text x="8.0162%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.7662%" y="629" width="0.0801%" height="15" fill="rgb(222,56,46)" fg:x="97" fg:w="1"/><text x="8.0162%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.7662%" y="613" width="0.0801%" height="15" fill="rgb(239,76,54)" fg:x="97" fg:w="1"/><text x="8.0162%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="7.8463%" y="693" width="0.0801%" height="15" fill="rgb(231,124,27)" fg:x="98" fg:w="1"/><text x="8.0963%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.8463%" y="677" width="0.0801%" height="15" fill="rgb(249,195,6)" fg:x="98" fg:w="1"/><text x="8.0963%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.8463%" y="661" width="0.0801%" height="15" fill="rgb(237,174,47)" fg:x="98" fg:w="1"/><text x="8.0963%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.8463%" y="645" width="0.0801%" height="15" fill="rgb(206,201,31)" fg:x="98" fg:w="1"/><text x="8.0963%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.8463%" y="629" width="0.0801%" height="15" fill="rgb(231,57,52)" fg:x="98" fg:w="1"/><text x="8.0963%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="7.9263%" y="693" width="0.0801%" height="15" fill="rgb(248,177,22)" fg:x="99" fg:w="1"/><text x="8.1763%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="7.9263%" y="677" width="0.0801%" height="15" fill="rgb(215,211,37)" fg:x="99" fg:w="1"/><text x="8.1763%" y="687.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.9263%" y="661" width="0.0801%" height="15" fill="rgb(241,128,51)" fg:x="99" fg:w="1"/><text x="8.1763%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.9263%" y="645" width="0.0801%" height="15" fill="rgb(227,165,31)" fg:x="99" fg:w="1"/><text x="8.1763%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.9263%" y="629" width="0.0801%" height="15" fill="rgb(228,167,24)" fg:x="99" fg:w="1"/><text x="8.1763%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.9263%" y="613" width="0.0801%" height="15" fill="rgb(228,143,12)" fg:x="99" fg:w="1"/><text x="8.1763%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="7.9263%" y="597" width="0.0801%" height="15" fill="rgb(249,149,8)" fg:x="99" fg:w="1"/><text x="8.1763%" y="607.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="7.9263%" y="581" width="0.0801%" height="15" fill="rgb(243,35,44)" fg:x="99" fg:w="1"/><text x="8.1763%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="8.0064%" y="677" width="0.0801%" height="15" fill="rgb(246,89,9)" fg:x="100" fg:w="1"/><text x="8.2564%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="8.0064%" y="661" width="0.0801%" height="15" fill="rgb(233,213,13)" fg:x="100" fg:w="1"/><text x="8.2564%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="8.0064%" y="645" width="0.0801%" height="15" fill="rgb(233,141,41)" fg:x="100" fg:w="1"/><text x="8.2564%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.0064%" y="629" width="0.0801%" height="15" fill="rgb(239,167,4)" fg:x="100" fg:w="1"/><text x="8.2564%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0064%" y="613" width="0.0801%" height="15" fill="rgb(209,217,16)" fg:x="100" fg:w="1"/><text x="8.2564%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.0064%" y="597" width="0.0801%" height="15" fill="rgb(219,88,35)" fg:x="100" fg:w="1"/><text x="8.2564%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0064%" y="581" width="0.0801%" height="15" fill="rgb(220,193,23)" fg:x="100" fg:w="1"/><text x="8.2564%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.0064%" y="565" width="0.0801%" height="15" fill="rgb(230,90,52)" fg:x="100" fg:w="1"/><text x="8.2564%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0064%" y="549" width="0.0801%" height="15" fill="rgb(252,106,19)" fg:x="100" fg:w="1"/><text x="8.2564%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.0064%" y="533" width="0.0801%" height="15" fill="rgb(206,74,20)" fg:x="100" fg:w="1"/><text x="8.2564%" y="543.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="8.0865%" y="677" width="0.0801%" height="15" fill="rgb(230,138,44)" fg:x="101" fg:w="1"/><text x="8.3365%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.1665%" y="645" width="0.0801%" height="15" fill="rgb(235,182,43)" fg:x="102" fg:w="1"/><text x="8.4165%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2466%" y="645" width="0.0801%" height="15" fill="rgb(242,16,51)" fg:x="103" fg:w="1"/><text x="8.4966%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.2466%" y="629" width="0.0801%" height="15" fill="rgb(248,9,4)" fg:x="103" fg:w="1"/><text x="8.4966%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.2466%" y="613" width="0.0801%" height="15" fill="rgb(210,31,22)" fg:x="103" fg:w="1"/><text x="8.4966%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.2466%" y="597" width="0.0801%" height="15" fill="rgb(239,54,39)" fg:x="103" fg:w="1"/><text x="8.4966%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.2466%" y="581" width="0.0801%" height="15" fill="rgb(230,99,41)" fg:x="103" fg:w="1"/><text x="8.4966%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.64%)</title><rect x="7.8463%" y="709" width="0.6405%" height="15" fill="rgb(253,106,12)" fg:x="98" fg:w="8"/><text x="8.0963%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="8.0064%" y="693" width="0.4804%" height="15" fill="rgb(213,46,41)" fg:x="100" fg:w="6"/><text x="8.2564%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="8.1665%" y="677" width="0.3203%" height="15" fill="rgb(215,133,35)" fg:x="102" fg:w="4"/><text x="8.4165%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="8.1665%" y="661" width="0.3203%" height="15" fill="rgb(213,28,5)" fg:x="102" fg:w="4"/><text x="8.4165%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="8.3267%" y="645" width="0.1601%" height="15" fill="rgb(215,77,49)" fg:x="104" fg:w="2"/><text x="8.5767%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="8.3267%" y="629" width="0.1601%" height="15" fill="rgb(248,100,22)" fg:x="104" fg:w="2"/><text x="8.5767%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="8.3267%" y="613" width="0.1601%" height="15" fill="rgb(208,67,9)" fg:x="104" fg:w="2"/><text x="8.5767%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="8.3267%" y="597" width="0.1601%" height="15" fill="rgb(219,133,21)" fg:x="104" fg:w="2"/><text x="8.5767%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="8.3267%" y="581" width="0.1601%" height="15" fill="rgb(246,46,29)" fg:x="104" fg:w="2"/><text x="8.5767%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="8.3267%" y="565" width="0.1601%" height="15" fill="rgb(246,185,52)" fg:x="104" fg:w="2"/><text x="8.5767%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="8.3267%" y="549" width="0.1601%" height="15" fill="rgb(252,136,11)" fg:x="104" fg:w="2"/><text x="8.5767%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4067%" y="533" width="0.0801%" height="15" fill="rgb(219,138,53)" fg:x="105" fg:w="1"/><text x="8.6567%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.4067%" y="517" width="0.0801%" height="15" fill="rgb(211,51,23)" fg:x="105" fg:w="1"/><text x="8.6567%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (12 samples, 0.96%)</title><rect x="7.6061%" y="725" width="0.9608%" height="15" fill="rgb(247,221,28)" fg:x="95" fg:w="12"/><text x="7.8561%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.4868%" y="709" width="0.0801%" height="15" fill="rgb(251,222,45)" fg:x="106" fg:w="1"/><text x="8.7368%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.4868%" y="693" width="0.0801%" height="15" fill="rgb(217,162,53)" fg:x="106" fg:w="1"/><text x="8.7368%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.4868%" y="677" width="0.0801%" height="15" fill="rgb(229,93,14)" fg:x="106" fg:w="1"/><text x="8.7368%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.4868%" y="661" width="0.0801%" height="15" fill="rgb(209,67,49)" fg:x="106" fg:w="1"/><text x="8.7368%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.4868%" y="645" width="0.0801%" height="15" fill="rgb(213,87,29)" fg:x="106" fg:w="1"/><text x="8.7368%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.4868%" y="629" width="0.0801%" height="15" fill="rgb(205,151,52)" fg:x="106" fg:w="1"/><text x="8.7368%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.4868%" y="613" width="0.0801%" height="15" fill="rgb(253,215,39)" fg:x="106" fg:w="1"/><text x="8.7368%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="8.4868%" y="597" width="0.0801%" height="15" fill="rgb(221,220,41)" fg:x="106" fg:w="1"/><text x="8.7368%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="8.4868%" y="581" width="0.0801%" height="15" fill="rgb(218,133,21)" fg:x="106" fg:w="1"/><text x="8.7368%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="8.5669%" y="693" width="0.0801%" height="15" fill="rgb(221,193,43)" fg:x="107" fg:w="1"/><text x="8.8169%" y="703.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="8.5669%" y="677" width="0.0801%" height="15" fill="rgb(240,128,52)" fg:x="107" fg:w="1"/><text x="8.8169%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="8.5669%" y="661" width="0.0801%" height="15" fill="rgb(253,114,12)" fg:x="107" fg:w="1"/><text x="8.8169%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="8.5669%" y="645" width="0.0801%" height="15" fill="rgb(215,223,47)" fg:x="107" fg:w="1"/><text x="8.8169%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="8.5669%" y="629" width="0.0801%" height="15" fill="rgb(248,225,23)" fg:x="107" fg:w="1"/><text x="8.8169%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="8.5669%" y="613" width="0.0801%" height="15" fill="rgb(250,108,0)" fg:x="107" fg:w="1"/><text x="8.8169%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.5669%" y="597" width="0.0801%" height="15" fill="rgb(228,208,7)" fg:x="107" fg:w="1"/><text x="8.8169%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="8.5669%" y="725" width="0.1601%" height="15" fill="rgb(244,45,10)" fg:x="107" fg:w="2"/><text x="8.8169%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="8.5669%" y="709" width="0.1601%" height="15" fill="rgb(207,125,25)" fg:x="107" fg:w="2"/><text x="8.8169%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.6469%" y="693" width="0.0801%" height="15" fill="rgb(210,195,18)" fg:x="108" fg:w="1"/><text x="8.8969%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="8.6469%" y="677" width="0.0801%" height="15" fill="rgb(249,80,12)" fg:x="108" fg:w="1"/><text x="8.8969%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.6469%" y="661" width="0.0801%" height="15" fill="rgb(221,65,9)" fg:x="108" fg:w="1"/><text x="8.8969%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6469%" y="645" width="0.0801%" height="15" fill="rgb(235,49,36)" fg:x="108" fg:w="1"/><text x="8.8969%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="8.7270%" y="693" width="0.0801%" height="15" fill="rgb(225,32,20)" fg:x="109" fg:w="1"/><text x="8.9770%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="8.7270%" y="677" width="0.0801%" height="15" fill="rgb(215,141,46)" fg:x="109" fg:w="1"/><text x="8.9770%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.7270%" y="661" width="0.0801%" height="15" fill="rgb(250,160,47)" fg:x="109" fg:w="1"/><text x="8.9770%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="8.7270%" y="645" width="0.0801%" height="15" fill="rgb(216,222,40)" fg:x="109" fg:w="1"/><text x="8.9770%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.7270%" y="629" width="0.0801%" height="15" fill="rgb(234,217,39)" fg:x="109" fg:w="1"/><text x="8.9770%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="8.8070%" y="645" width="0.0801%" height="15" fill="rgb(207,178,40)" fg:x="110" fg:w="1"/><text x="9.0570%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="8.8070%" y="693" width="0.1601%" height="15" fill="rgb(221,136,13)" fg:x="110" fg:w="2"/><text x="9.0570%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="8.8070%" y="677" width="0.1601%" height="15" fill="rgb(249,199,10)" fg:x="110" fg:w="2"/><text x="9.0570%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="8.8070%" y="661" width="0.1601%" height="15" fill="rgb(249,222,13)" fg:x="110" fg:w="2"/><text x="9.0570%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.8871%" y="645" width="0.0801%" height="15" fill="rgb(244,185,38)" fg:x="111" fg:w="1"/><text x="9.1371%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8871%" y="629" width="0.0801%" height="15" fill="rgb(236,202,9)" fg:x="111" fg:w="1"/><text x="9.1371%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.8871%" y="613" width="0.0801%" height="15" fill="rgb(250,229,37)" fg:x="111" fg:w="1"/><text x="9.1371%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8871%" y="597" width="0.0801%" height="15" fill="rgb(206,174,23)" fg:x="111" fg:w="1"/><text x="9.1371%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.9672%" y="677" width="0.0801%" height="15" fill="rgb(211,33,43)" fg:x="112" fg:w="1"/><text x="9.2172%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9672%" y="661" width="0.0801%" height="15" fill="rgb(245,58,50)" fg:x="112" fg:w="1"/><text x="9.2172%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9672%" y="645" width="0.0801%" height="15" fill="rgb(244,68,36)" fg:x="112" fg:w="1"/><text x="9.2172%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9672%" y="629" width="0.0801%" height="15" fill="rgb(232,229,15)" fg:x="112" fg:w="1"/><text x="9.2172%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9672%" y="613" width="0.0801%" height="15" fill="rgb(254,30,23)" fg:x="112" fg:w="1"/><text x="9.2172%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9672%" y="597" width="0.0801%" height="15" fill="rgb(235,160,14)" fg:x="112" fg:w="1"/><text x="9.2172%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9672%" y="581" width="0.0801%" height="15" fill="rgb(212,155,44)" fg:x="112" fg:w="1"/><text x="9.2172%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.9672%" y="565" width="0.0801%" height="15" fill="rgb(226,2,50)" fg:x="112" fg:w="1"/><text x="9.2172%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.1273%" y="581" width="0.0801%" height="15" fill="rgb(234,177,6)" fg:x="114" fg:w="1"/><text x="9.3773%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="9.1273%" y="629" width="0.1601%" height="15" fill="rgb(217,24,9)" fg:x="114" fg:w="2"/><text x="9.3773%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="9.1273%" y="613" width="0.1601%" height="15" fill="rgb(220,13,46)" fg:x="114" fg:w="2"/><text x="9.3773%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="9.1273%" y="597" width="0.1601%" height="15" fill="rgb(239,221,27)" fg:x="114" fg:w="2"/><text x="9.3773%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.2074%" y="581" width="0.0801%" height="15" fill="rgb(222,198,25)" fg:x="115" fg:w="1"/><text x="9.4574%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.2074%" y="565" width="0.0801%" height="15" fill="rgb(211,99,13)" fg:x="115" fg:w="1"/><text x="9.4574%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2074%" y="549" width="0.0801%" height="15" fill="rgb(232,111,31)" fg:x="115" fg:w="1"/><text x="9.4574%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.2074%" y="533" width="0.0801%" height="15" fill="rgb(245,82,37)" fg:x="115" fg:w="1"/><text x="9.4574%" y="543.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="8.9672%" y="693" width="0.4003%" height="15" fill="rgb(227,149,46)" fg:x="112" fg:w="5"/><text x="9.2172%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="9.0472%" y="677" width="0.3203%" height="15" fill="rgb(218,36,50)" fg:x="113" fg:w="4"/><text x="9.2972%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="9.0472%" y="661" width="0.3203%" height="15" fill="rgb(226,80,48)" fg:x="113" fg:w="4"/><text x="9.2972%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="9.0472%" y="645" width="0.3203%" height="15" fill="rgb(238,224,15)" fg:x="113" fg:w="4"/><text x="9.2972%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="9.2874%" y="629" width="0.0801%" height="15" fill="rgb(241,136,10)" fg:x="116" fg:w="1"/><text x="9.5374%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (9 samples, 0.72%)</title><rect x="8.7270%" y="725" width="0.7206%" height="15" fill="rgb(208,32,45)" fg:x="109" fg:w="9"/><text x="8.9770%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (9 samples, 0.72%)</title><rect x="8.7270%" y="709" width="0.7206%" height="15" fill="rgb(207,135,9)" fg:x="109" fg:w="9"/><text x="8.9770%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="9.3675%" y="693" width="0.0801%" height="15" fill="rgb(206,86,44)" fg:x="117" fg:w="1"/><text x="9.6175%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="9.3675%" y="677" width="0.0801%" height="15" fill="rgb(245,177,15)" fg:x="117" fg:w="1"/><text x="9.6175%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.4476%" y="709" width="0.0801%" height="15" fill="rgb(206,64,50)" fg:x="118" fg:w="1"/><text x="9.6976%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.4476%" y="693" width="0.0801%" height="15" fill="rgb(234,36,40)" fg:x="118" fg:w="1"/><text x="9.6976%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.4476%" y="677" width="0.0801%" height="15" fill="rgb(213,64,8)" fg:x="118" fg:w="1"/><text x="9.6976%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (2 samples, 0.16%)</title><rect x="9.5276%" y="709" width="0.1601%" height="15" fill="rgb(210,75,36)" fg:x="119" fg:w="2"/><text x="9.7776%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (2 samples, 0.16%)</title><rect x="9.5276%" y="693" width="0.1601%" height="15" fill="rgb(229,88,21)" fg:x="119" fg:w="2"/><text x="9.7776%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="9.5276%" y="677" width="0.1601%" height="15" fill="rgb(252,204,47)" fg:x="119" fg:w="2"/><text x="9.7776%" y="687.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (2 samples, 0.16%)</title><rect x="9.5276%" y="661" width="0.1601%" height="15" fill="rgb(208,77,27)" fg:x="119" fg:w="2"/><text x="9.7776%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="9.5276%" y="645" width="0.1601%" height="15" fill="rgb(221,76,26)" fg:x="119" fg:w="2"/><text x="9.7776%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="9.5276%" y="629" width="0.1601%" height="15" fill="rgb(225,139,18)" fg:x="119" fg:w="2"/><text x="9.7776%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6077%" y="613" width="0.0801%" height="15" fill="rgb(230,137,11)" fg:x="120" fg:w="1"/><text x="9.8577%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.6878%" y="597" width="0.0801%" height="15" fill="rgb(212,28,1)" fg:x="121" fg:w="1"/><text x="9.9378%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="9.6878%" y="629" width="0.1601%" height="15" fill="rgb(248,164,17)" fg:x="121" fg:w="2"/><text x="9.9378%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="9.6878%" y="613" width="0.1601%" height="15" fill="rgb(222,171,42)" fg:x="121" fg:w="2"/><text x="9.9378%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.7678%" y="597" width="0.0801%" height="15" fill="rgb(243,84,45)" fg:x="122" fg:w="1"/><text x="10.0178%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.7678%" y="581" width="0.0801%" height="15" fill="rgb(252,49,23)" fg:x="122" fg:w="1"/><text x="10.0178%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.8479%" y="597" width="0.0801%" height="15" fill="rgb(215,19,7)" fg:x="123" fg:w="1"/><text x="10.0979%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.8479%" y="581" width="0.0801%" height="15" fill="rgb(238,81,41)" fg:x="123" fg:w="1"/><text x="10.0979%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.8479%" y="565" width="0.0801%" height="15" fill="rgb(210,199,37)" fg:x="123" fg:w="1"/><text x="10.0979%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.8479%" y="549" width="0.0801%" height="15" fill="rgb(244,192,49)" fg:x="123" fg:w="1"/><text x="10.0979%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.8479%" y="533" width="0.0801%" height="15" fill="rgb(226,211,11)" fg:x="123" fg:w="1"/><text x="10.0979%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.8479%" y="517" width="0.0801%" height="15" fill="rgb(236,162,54)" fg:x="123" fg:w="1"/><text x="10.0979%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.8479%" y="501" width="0.0801%" height="15" fill="rgb(220,229,9)" fg:x="123" fg:w="1"/><text x="10.0979%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.8479%" y="485" width="0.0801%" height="15" fill="rgb(250,87,22)" fg:x="123" fg:w="1"/><text x="10.0979%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.8479%" y="469" width="0.0801%" height="15" fill="rgb(239,43,17)" fg:x="123" fg:w="1"/><text x="10.0979%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.8479%" y="453" width="0.0801%" height="15" fill="rgb(231,177,25)" fg:x="123" fg:w="1"/><text x="10.0979%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.8479%" y="437" width="0.0801%" height="15" fill="rgb(219,179,1)" fg:x="123" fg:w="1"/><text x="10.0979%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.8479%" y="421" width="0.0801%" height="15" fill="rgb(238,219,53)" fg:x="123" fg:w="1"/><text x="10.0979%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.8479%" y="405" width="0.0801%" height="15" fill="rgb(232,167,36)" fg:x="123" fg:w="1"/><text x="10.0979%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.8479%" y="389" width="0.0801%" height="15" fill="rgb(244,19,51)" fg:x="123" fg:w="1"/><text x="10.0979%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8479%" y="373" width="0.0801%" height="15" fill="rgb(224,6,22)" fg:x="123" fg:w="1"/><text x="10.0979%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="9.6878%" y="709" width="0.3203%" height="15" fill="rgb(224,145,5)" fg:x="121" fg:w="4"/><text x="9.9378%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="9.6878%" y="693" width="0.3203%" height="15" fill="rgb(234,130,49)" fg:x="121" fg:w="4"/><text x="9.9378%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.32%)</title><rect x="9.6878%" y="677" width="0.3203%" height="15" fill="rgb(254,6,2)" fg:x="121" fg:w="4"/><text x="9.9378%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="9.6878%" y="661" width="0.3203%" height="15" fill="rgb(208,96,46)" fg:x="121" fg:w="4"/><text x="9.9378%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="9.6878%" y="645" width="0.3203%" height="15" fill="rgb(239,3,39)" fg:x="121" fg:w="4"/><text x="9.9378%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="9.8479%" y="629" width="0.1601%" height="15" fill="rgb(233,210,1)" fg:x="123" fg:w="2"/><text x="10.0979%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="9.8479%" y="613" width="0.1601%" height="15" fill="rgb(244,137,37)" fg:x="123" fg:w="2"/><text x="10.0979%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.9279%" y="597" width="0.0801%" height="15" fill="rgb(240,136,2)" fg:x="124" fg:w="1"/><text x="10.1779%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="10.0080%" y="693" width="0.1601%" height="15" fill="rgb(239,18,37)" fg:x="125" fg:w="2"/><text x="10.2580%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.0881%" y="677" width="0.0801%" height="15" fill="rgb(218,185,22)" fg:x="126" fg:w="1"/><text x="10.3381%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.0881%" y="661" width="0.0801%" height="15" fill="rgb(225,218,4)" fg:x="126" fg:w="1"/><text x="10.3381%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.0881%" y="645" width="0.0801%" height="15" fill="rgb(230,182,32)" fg:x="126" fg:w="1"/><text x="10.3381%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.0881%" y="629" width="0.0801%" height="15" fill="rgb(242,56,43)" fg:x="126" fg:w="1"/><text x="10.3381%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.0881%" y="613" width="0.0801%" height="15" fill="rgb(233,99,24)" fg:x="126" fg:w="1"/><text x="10.3381%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="10.0881%" y="597" width="0.0801%" height="15" fill="rgb(234,209,42)" fg:x="126" fg:w="1"/><text x="10.3381%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="10.0881%" y="581" width="0.0801%" height="15" fill="rgb(227,7,12)" fg:x="126" fg:w="1"/><text x="10.3381%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="10.1681%" y="597" width="0.0801%" height="15" fill="rgb(245,203,43)" fg:x="127" fg:w="1"/><text x="10.4181%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="10.1681%" y="581" width="0.0801%" height="15" fill="rgb(238,205,33)" fg:x="127" fg:w="1"/><text x="10.4181%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.40%)</title><rect x="10.2482%" y="581" width="0.4003%" height="15" fill="rgb(231,56,7)" fg:x="128" fg:w="5"/><text x="10.4982%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="10.3283%" y="565" width="0.3203%" height="15" fill="rgb(244,186,29)" fg:x="129" fg:w="4"/><text x="10.5783%" y="575.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="10.3283%" y="549" width="0.3203%" height="15" fill="rgb(234,111,31)" fg:x="129" fg:w="4"/><text x="10.5783%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="10.3283%" y="533" width="0.3203%" height="15" fill="rgb(241,149,10)" fg:x="129" fg:w="4"/><text x="10.5783%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="10.3283%" y="517" width="0.3203%" height="15" fill="rgb(249,206,44)" fg:x="129" fg:w="4"/><text x="10.5783%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="10.3283%" y="501" width="0.3203%" height="15" fill="rgb(251,153,30)" fg:x="129" fg:w="4"/><text x="10.5783%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="10.3283%" y="485" width="0.3203%" height="15" fill="rgb(239,152,38)" fg:x="129" fg:w="4"/><text x="10.5783%" y="495.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="10.4083%" y="469" width="0.2402%" height="15" fill="rgb(249,139,47)" fg:x="130" fg:w="3"/><text x="10.6583%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.6485%" y="565" width="0.0801%" height="15" fill="rgb(244,64,35)" fg:x="133" fg:w="1"/><text x="10.8985%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.7286%" y="565" width="0.1601%" height="15" fill="rgb(216,46,15)" fg:x="134" fg:w="2"/><text x="10.9786%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.7286%" y="549" width="0.1601%" height="15" fill="rgb(250,74,19)" fg:x="134" fg:w="2"/><text x="10.9786%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.7286%" y="533" width="0.1601%" height="15" fill="rgb(249,42,33)" fg:x="134" fg:w="2"/><text x="10.9786%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.8086%" y="517" width="0.0801%" height="15" fill="rgb(242,149,17)" fg:x="135" fg:w="1"/><text x="11.0586%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.8887%" y="469" width="0.0801%" height="15" fill="rgb(244,29,21)" fg:x="136" fg:w="1"/><text x="11.1387%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.8887%" y="453" width="0.0801%" height="15" fill="rgb(220,130,37)" fg:x="136" fg:w="1"/><text x="11.1387%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.8887%" y="437" width="0.0801%" height="15" fill="rgb(211,67,2)" fg:x="136" fg:w="1"/><text x="11.1387%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.8887%" y="421" width="0.0801%" height="15" fill="rgb(235,68,52)" fg:x="136" fg:w="1"/><text x="11.1387%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.8887%" y="517" width="0.1601%" height="15" fill="rgb(246,142,3)" fg:x="136" fg:w="2"/><text x="11.1387%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.8887%" y="501" width="0.1601%" height="15" fill="rgb(241,25,7)" fg:x="136" fg:w="2"/><text x="11.1387%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.8887%" y="485" width="0.1601%" height="15" fill="rgb(242,119,39)" fg:x="136" fg:w="2"/><text x="11.1387%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="10.9688%" y="469" width="0.0801%" height="15" fill="rgb(241,98,45)" fg:x="137" fg:w="1"/><text x="11.2188%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="11.0488%" y="517" width="0.0801%" height="15" fill="rgb(254,28,30)" fg:x="138" fg:w="1"/><text x="11.2988%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="10.8887%" y="549" width="0.3203%" height="15" fill="rgb(241,142,54)" fg:x="136" fg:w="4"/><text x="11.1387%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="10.8887%" y="533" width="0.3203%" height="15" fill="rgb(222,85,15)" fg:x="136" fg:w="4"/><text x="11.1387%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.1289%" y="517" width="0.0801%" height="15" fill="rgb(210,85,47)" fg:x="139" fg:w="1"/><text x="11.3789%" y="527.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="11.3691%" y="533" width="0.0801%" height="15" fill="rgb(224,206,25)" fg:x="142" fg:w="1"/><text x="11.6191%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="10.8887%" y="565" width="0.8807%" height="15" fill="rgb(243,201,19)" fg:x="136" fg:w="11"/><text x="11.1387%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="11.2090%" y="549" width="0.5604%" height="15" fill="rgb(236,59,4)" fg:x="140" fg:w="7"/><text x="11.4590%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="11.4492%" y="533" width="0.3203%" height="15" fill="rgb(254,179,45)" fg:x="143" fg:w="4"/><text x="11.6992%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="11.4492%" y="517" width="0.3203%" height="15" fill="rgb(226,14,10)" fg:x="143" fg:w="4"/><text x="11.6992%" y="527.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="11.4492%" y="501" width="0.3203%" height="15" fill="rgb(244,27,41)" fg:x="143" fg:w="4"/><text x="11.6992%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="11.5292%" y="485" width="0.2402%" height="15" fill="rgb(235,35,32)" fg:x="144" fg:w="3"/><text x="11.7792%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="11.5292%" y="469" width="0.2402%" height="15" fill="rgb(218,68,31)" fg:x="144" fg:w="3"/><text x="11.7792%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="11.6093%" y="453" width="0.1601%" height="15" fill="rgb(207,120,37)" fg:x="145" fg:w="2"/><text x="11.8593%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="11.6093%" y="437" width="0.1601%" height="15" fill="rgb(227,98,0)" fg:x="145" fg:w="2"/><text x="11.8593%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="11.6093%" y="421" width="0.1601%" height="15" fill="rgb(207,7,3)" fg:x="145" fg:w="2"/><text x="11.8593%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (20 samples, 1.60%)</title><rect x="10.2482%" y="597" width="1.6013%" height="15" fill="rgb(206,98,19)" fg:x="128" fg:w="20"/><text x="10.4982%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.20%)</title><rect x="10.6485%" y="581" width="1.2010%" height="15" fill="rgb(217,5,26)" fg:x="133" fg:w="15"/><text x="10.8985%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.7694%" y="565" width="0.0801%" height="15" fill="rgb(235,190,38)" fg:x="147" fg:w="1"/><text x="12.0194%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.7694%" y="549" width="0.0801%" height="15" fill="rgb(247,86,24)" fg:x="147" fg:w="1"/><text x="12.0194%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.7694%" y="533" width="0.0801%" height="15" fill="rgb(205,101,16)" fg:x="147" fg:w="1"/><text x="12.0194%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="11.8495%" y="565" width="0.1601%" height="15" fill="rgb(246,168,33)" fg:x="148" fg:w="2"/><text x="12.0995%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="11.8495%" y="597" width="0.2402%" height="15" fill="rgb(231,114,1)" fg:x="148" fg:w="3"/><text x="12.0995%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="11.8495%" y="581" width="0.2402%" height="15" fill="rgb(207,184,53)" fg:x="148" fg:w="3"/><text x="12.0995%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.0096%" y="565" width="0.0801%" height="15" fill="rgb(224,95,51)" fg:x="150" fg:w="1"/><text x="12.2596%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.0897%" y="565" width="0.0801%" height="15" fill="rgb(212,188,45)" fg:x="151" fg:w="1"/><text x="12.3397%" y="575.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.1697%" y="533" width="0.0801%" height="15" fill="rgb(223,154,38)" fg:x="152" fg:w="1"/><text x="12.4197%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="12.1697%" y="517" width="0.0801%" height="15" fill="rgb(251,22,52)" fg:x="152" fg:w="1"/><text x="12.4197%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="12.1697%" y="501" width="0.0801%" height="15" fill="rgb(229,209,22)" fg:x="152" fg:w="1"/><text x="12.4197%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="12.0897%" y="581" width="0.2402%" height="15" fill="rgb(234,138,34)" fg:x="151" fg:w="3"/><text x="12.3397%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="12.1697%" y="565" width="0.1601%" height="15" fill="rgb(212,95,11)" fg:x="152" fg:w="2"/><text x="12.4197%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="12.1697%" y="549" width="0.1601%" height="15" fill="rgb(240,179,47)" fg:x="152" fg:w="2"/><text x="12.4197%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="12.2498%" y="533" width="0.0801%" height="15" fill="rgb(240,163,11)" fg:x="153" fg:w="1"/><text x="12.4998%" y="543.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="12.3299%" y="549" width="0.0801%" height="15" fill="rgb(236,37,12)" fg:x="154" fg:w="1"/><text x="12.5799%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="12.4099%" y="549" width="0.0801%" height="15" fill="rgb(232,164,16)" fg:x="155" fg:w="1"/><text x="12.6599%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5701%" y="501" width="0.0801%" height="15" fill="rgb(244,205,15)" fg:x="157" fg:w="1"/><text x="12.8201%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.7302%" y="469" width="0.0801%" height="15" fill="rgb(223,117,47)" fg:x="159" fg:w="1"/><text x="12.9802%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="12.6501%" y="501" width="0.3203%" height="15" fill="rgb(244,107,35)" fg:x="158" fg:w="4"/><text x="12.9001%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="12.6501%" y="485" width="0.3203%" height="15" fill="rgb(205,140,8)" fg:x="158" fg:w="4"/><text x="12.9001%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="12.8102%" y="469" width="0.1601%" height="15" fill="rgb(228,84,46)" fg:x="160" fg:w="2"/><text x="13.0602%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="12.8102%" y="453" width="0.1601%" height="15" fill="rgb(254,188,9)" fg:x="160" fg:w="2"/><text x="13.0602%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="12.8102%" y="437" width="0.1601%" height="15" fill="rgb(206,112,54)" fg:x="160" fg:w="2"/><text x="13.0602%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="13.2106%" y="453" width="0.1601%" height="15" fill="rgb(216,84,49)" fg:x="165" fg:w="2"/><text x="13.4606%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="13.2106%" y="437" width="0.1601%" height="15" fill="rgb(214,194,35)" fg:x="165" fg:w="2"/><text x="13.4606%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.88%)</title><rect x="12.5701%" y="533" width="0.8807%" height="15" fill="rgb(249,28,3)" fg:x="157" fg:w="11"/><text x="12.8201%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.88%)</title><rect x="12.5701%" y="517" width="0.8807%" height="15" fill="rgb(222,56,52)" fg:x="157" fg:w="11"/><text x="12.8201%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="12.9704%" y="501" width="0.4804%" height="15" fill="rgb(245,217,50)" fg:x="162" fg:w="6"/><text x="13.2204%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="13.2106%" y="485" width="0.2402%" height="15" fill="rgb(213,201,24)" fg:x="165" fg:w="3"/><text x="13.4606%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="13.2106%" y="469" width="0.2402%" height="15" fill="rgb(248,116,28)" fg:x="165" fg:w="3"/><text x="13.4606%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3707%" y="453" width="0.0801%" height="15" fill="rgb(219,72,43)" fg:x="167" fg:w="1"/><text x="13.6207%" y="463.50"></text></g><g><title>engine::session::Session::flush (44 samples, 3.52%)</title><rect x="10.0080%" y="709" width="3.5228%" height="15" fill="rgb(209,138,14)" fg:x="125" fg:w="44"/><text x="10.2580%" y="719.50">eng..</text></g><g><title>engine::session::Session::save_changes (42 samples, 3.36%)</title><rect x="10.1681%" y="693" width="3.3627%" height="15" fill="rgb(222,18,33)" fg:x="127" fg:w="42"/><text x="10.4181%" y="703.50">eng..</text></g><g><title>engine::session::state::State::close (42 samples, 3.36%)</title><rect x="10.1681%" y="677" width="3.3627%" height="15" fill="rgb(213,199,7)" fg:x="127" fg:w="42"/><text x="10.4181%" y="687.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (42 samples, 3.36%)</title><rect x="10.1681%" y="661" width="3.3627%" height="15" fill="rgb(250,110,10)" fg:x="127" fg:w="42"/><text x="10.4181%" y="671.50">eng..</text></g><g><title>core::iter::adapters::try_process (42 samples, 3.36%)</title><rect x="10.1681%" y="645" width="3.3627%" height="15" fill="rgb(248,123,6)" fg:x="127" fg:w="42"/><text x="10.4181%" y="655.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (42 samples, 3.36%)</title><rect x="10.1681%" y="629" width="3.3627%" height="15" fill="rgb(206,91,31)" fg:x="127" fg:w="42"/><text x="10.4181%" y="639.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (42 samples, 3.36%)</title><rect x="10.1681%" y="613" width="3.3627%" height="15" fill="rgb(211,154,13)" fg:x="127" fg:w="42"/><text x="10.4181%" y="623.50">eng..</text></g><g><title>kernel::model::any_entity_changes (18 samples, 1.44%)</title><rect x="12.0897%" y="597" width="1.4412%" height="15" fill="rgb(225,148,7)" fg:x="151" fg:w="18"/><text x="12.3397%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (15 samples, 1.20%)</title><rect x="12.3299%" y="581" width="1.2010%" height="15" fill="rgb(220,160,43)" fg:x="154" fg:w="15"/><text x="12.5799%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (15 samples, 1.20%)</title><rect x="12.3299%" y="565" width="1.2010%" height="15" fill="rgb(213,52,39)" fg:x="154" fg:w="15"/><text x="12.5799%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.04%)</title><rect x="12.4900%" y="549" width="1.0408%" height="15" fill="rgb(243,137,7)" fg:x="156" fg:w="13"/><text x="12.7400%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.4508%" y="533" width="0.0801%" height="15" fill="rgb(230,79,13)" fg:x="168" fg:w="1"/><text x="13.7008%" y="543.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="13.5308%" y="709" width="0.0801%" height="15" fill="rgb(247,105,23)" fg:x="169" fg:w="1"/><text x="13.7808%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="13.5308%" y="693" width="0.0801%" height="15" fill="rgb(223,179,41)" fg:x="169" fg:w="1"/><text x="13.7808%" y="703.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="13.5308%" y="677" width="0.0801%" height="15" fill="rgb(218,9,34)" fg:x="169" fg:w="1"/><text x="13.7808%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.5308%" y="661" width="0.0801%" height="15" fill="rgb(222,106,8)" fg:x="169" fg:w="1"/><text x="13.7808%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.6109%" y="677" width="0.0801%" height="15" fill="rgb(211,220,0)" fg:x="170" fg:w="1"/><text x="13.8609%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.6109%" y="661" width="0.0801%" height="15" fill="rgb(229,52,16)" fg:x="170" fg:w="1"/><text x="13.8609%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.6109%" y="645" width="0.0801%" height="15" fill="rgb(212,155,18)" fg:x="170" fg:w="1"/><text x="13.8609%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.6109%" y="629" width="0.0801%" height="15" fill="rgb(242,21,14)" fg:x="170" fg:w="1"/><text x="13.8609%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.6109%" y="613" width="0.0801%" height="15" fill="rgb(222,19,48)" fg:x="170" fg:w="1"/><text x="13.8609%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.6109%" y="597" width="0.0801%" height="15" fill="rgb(232,45,27)" fg:x="170" fg:w="1"/><text x="13.8609%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.6109%" y="581" width="0.0801%" height="15" fill="rgb(249,103,42)" fg:x="170" fg:w="1"/><text x="13.8609%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="13.6109%" y="693" width="0.1601%" height="15" fill="rgb(246,81,33)" fg:x="170" fg:w="2"/><text x="13.8609%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.6910%" y="677" width="0.0801%" height="15" fill="rgb(252,33,42)" fg:x="171" fg:w="1"/><text x="13.9410%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.7710%" y="661" width="0.0801%" height="15" fill="rgb(209,212,41)" fg:x="172" fg:w="1"/><text x="14.0210%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.7710%" y="645" width="0.0801%" height="15" fill="rgb(207,154,6)" fg:x="172" fg:w="1"/><text x="14.0210%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7710%" y="629" width="0.0801%" height="15" fill="rgb(223,64,47)" fg:x="172" fg:w="1"/><text x="14.0210%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7710%" y="613" width="0.0801%" height="15" fill="rgb(211,161,38)" fg:x="172" fg:w="1"/><text x="14.0210%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.7710%" y="597" width="0.0801%" height="15" fill="rgb(219,138,40)" fg:x="172" fg:w="1"/><text x="14.0210%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.7710%" y="581" width="0.0801%" height="15" fill="rgb(241,228,46)" fg:x="172" fg:w="1"/><text x="14.0210%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.7710%" y="565" width="0.0801%" height="15" fill="rgb(223,209,38)" fg:x="172" fg:w="1"/><text x="14.0210%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.7710%" y="549" width="0.0801%" height="15" fill="rgb(236,164,45)" fg:x="172" fg:w="1"/><text x="14.0210%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.7710%" y="533" width="0.0801%" height="15" fill="rgb(231,15,5)" fg:x="172" fg:w="1"/><text x="14.0210%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.7710%" y="517" width="0.0801%" height="15" fill="rgb(252,35,15)" fg:x="172" fg:w="1"/><text x="14.0210%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.7710%" y="501" width="0.0801%" height="15" fill="rgb(248,181,18)" fg:x="172" fg:w="1"/><text x="14.0210%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.7710%" y="485" width="0.0801%" height="15" fill="rgb(233,39,42)" fg:x="172" fg:w="1"/><text x="14.0210%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.7710%" y="469" width="0.0801%" height="15" fill="rgb(238,110,33)" fg:x="172" fg:w="1"/><text x="14.0210%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7710%" y="453" width="0.0801%" height="15" fill="rgb(233,195,10)" fg:x="172" fg:w="1"/><text x="14.0210%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="13.7710%" y="677" width="0.1601%" height="15" fill="rgb(254,105,3)" fg:x="172" fg:w="2"/><text x="14.0210%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.8511%" y="661" width="0.0801%" height="15" fill="rgb(221,225,9)" fg:x="173" fg:w="1"/><text x="14.1011%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8511%" y="645" width="0.0801%" height="15" fill="rgb(224,227,45)" fg:x="173" fg:w="1"/><text x="14.1011%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.8511%" y="629" width="0.0801%" height="15" fill="rgb(229,198,43)" fg:x="173" fg:w="1"/><text x="14.1011%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="13.9311%" y="677" width="0.1601%" height="15" fill="rgb(206,209,35)" fg:x="174" fg:w="2"/><text x="14.1811%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="13.9311%" y="661" width="0.1601%" height="15" fill="rgb(245,195,53)" fg:x="174" fg:w="2"/><text x="14.1811%" y="671.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (2 samples, 0.16%)</title><rect x="13.9311%" y="645" width="0.1601%" height="15" fill="rgb(240,92,26)" fg:x="174" fg:w="2"/><text x="14.1811%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.9311%" y="629" width="0.1601%" height="15" fill="rgb(207,40,23)" fg:x="174" fg:w="2"/><text x="14.1811%" y="639.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.0112%" y="613" width="0.0801%" height="15" fill="rgb(223,111,35)" fg:x="175" fg:w="1"/><text x="14.2612%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.0112%" y="597" width="0.0801%" height="15" fill="rgb(229,147,28)" fg:x="175" fg:w="1"/><text x="14.2612%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="14.1713%" y="629" width="0.0801%" height="15" fill="rgb(211,29,28)" fg:x="177" fg:w="1"/><text x="14.4213%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.1713%" y="613" width="0.0801%" height="15" fill="rgb(228,72,33)" fg:x="177" fg:w="1"/><text x="14.4213%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1713%" y="597" width="0.0801%" height="15" fill="rgb(205,214,31)" fg:x="177" fg:w="1"/><text x="14.4213%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.1713%" y="581" width="0.0801%" height="15" fill="rgb(224,111,15)" fg:x="177" fg:w="1"/><text x="14.4213%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1713%" y="565" width="0.0801%" height="15" fill="rgb(253,21,26)" fg:x="177" fg:w="1"/><text x="14.4213%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.2514%" y="613" width="0.0801%" height="15" fill="rgb(245,139,43)" fg:x="178" fg:w="1"/><text x="14.5014%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="14.1713%" y="661" width="0.2402%" height="15" fill="rgb(252,170,7)" fg:x="177" fg:w="3"/><text x="14.4213%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="14.1713%" y="645" width="0.2402%" height="15" fill="rgb(231,118,14)" fg:x="177" fg:w="3"/><text x="14.4213%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="14.2514%" y="629" width="0.1601%" height="15" fill="rgb(238,83,0)" fg:x="178" fg:w="2"/><text x="14.5014%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="14.3315%" y="613" width="0.0801%" height="15" fill="rgb(221,39,39)" fg:x="179" fg:w="1"/><text x="14.5815%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="14.3315%" y="597" width="0.0801%" height="15" fill="rgb(222,119,46)" fg:x="179" fg:w="1"/><text x="14.5815%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.3315%" y="581" width="0.0801%" height="15" fill="rgb(222,165,49)" fg:x="179" fg:w="1"/><text x="14.5815%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="14.5717%" y="597" width="0.0801%" height="15" fill="rgb(219,113,52)" fg:x="182" fg:w="1"/><text x="14.8217%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="14.5717%" y="613" width="0.1601%" height="15" fill="rgb(214,7,15)" fg:x="182" fg:w="2"/><text x="14.8217%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="14.6517%" y="597" width="0.0801%" height="15" fill="rgb(235,32,4)" fg:x="183" fg:w="1"/><text x="14.9017%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="14.6517%" y="581" width="0.0801%" height="15" fill="rgb(238,90,54)" fg:x="183" fg:w="1"/><text x="14.9017%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="14.6517%" y="565" width="0.0801%" height="15" fill="rgb(213,208,19)" fg:x="183" fg:w="1"/><text x="14.9017%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="14.6517%" y="549" width="0.0801%" height="15" fill="rgb(233,156,4)" fg:x="183" fg:w="1"/><text x="14.9017%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="14.6517%" y="533" width="0.0801%" height="15" fill="rgb(207,194,5)" fg:x="183" fg:w="1"/><text x="14.9017%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.6517%" y="517" width="0.0801%" height="15" fill="rgb(206,111,30)" fg:x="183" fg:w="1"/><text x="14.9017%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.6517%" y="501" width="0.0801%" height="15" fill="rgb(243,70,54)" fg:x="183" fg:w="1"/><text x="14.9017%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.6517%" y="485" width="0.0801%" height="15" fill="rgb(242,28,8)" fg:x="183" fg:w="1"/><text x="14.9017%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (13 samples, 1.04%)</title><rect x="13.7710%" y="693" width="1.0408%" height="15" fill="rgb(219,106,18)" fg:x="172" fg:w="13"/><text x="14.0210%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (9 samples, 0.72%)</title><rect x="14.0913%" y="677" width="0.7206%" height="15" fill="rgb(244,222,10)" fg:x="176" fg:w="9"/><text x="14.3413%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="14.4115%" y="661" width="0.4003%" height="15" fill="rgb(236,179,52)" fg:x="180" fg:w="5"/><text x="14.6615%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="14.4115%" y="645" width="0.4003%" height="15" fill="rgb(213,23,39)" fg:x="180" fg:w="5"/><text x="14.6615%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="14.5717%" y="629" width="0.2402%" height="15" fill="rgb(238,48,10)" fg:x="182" fg:w="3"/><text x="14.8217%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.7318%" y="613" width="0.0801%" height="15" fill="rgb(251,196,23)" fg:x="184" fg:w="1"/><text x="14.9818%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (18 samples, 1.44%)</title><rect x="13.6109%" y="709" width="1.4412%" height="15" fill="rgb(250,152,24)" fg:x="170" fg:w="18"/><text x="13.8609%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="14.8118%" y="693" width="0.2402%" height="15" fill="rgb(209,150,17)" fg:x="185" fg:w="3"/><text x="15.0618%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.9720%" y="677" width="0.0801%" height="15" fill="rgb(234,202,34)" fg:x="187" fg:w="1"/><text x="15.2220%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.9720%" y="661" width="0.0801%" height="15" fill="rgb(253,148,53)" fg:x="187" fg:w="1"/><text x="15.2220%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.9720%" y="645" width="0.0801%" height="15" fill="rgb(218,129,16)" fg:x="187" fg:w="1"/><text x="15.2220%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.9720%" y="629" width="0.0801%" height="15" fill="rgb(216,85,19)" fg:x="187" fg:w="1"/><text x="15.2220%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.9720%" y="613" width="0.0801%" height="15" fill="rgb(235,228,7)" fg:x="187" fg:w="1"/><text x="15.2220%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.9720%" y="597" width="0.0801%" height="15" fill="rgb(245,175,0)" fg:x="187" fg:w="1"/><text x="15.2220%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.9720%" y="581" width="0.0801%" height="15" fill="rgb(208,168,36)" fg:x="187" fg:w="1"/><text x="15.2220%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.9720%" y="565" width="0.0801%" height="15" fill="rgb(246,171,24)" fg:x="187" fg:w="1"/><text x="15.2220%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.9720%" y="549" width="0.0801%" height="15" fill="rgb(215,142,24)" fg:x="187" fg:w="1"/><text x="15.2220%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.9720%" y="533" width="0.0801%" height="15" fill="rgb(250,187,7)" fg:x="187" fg:w="1"/><text x="15.2220%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.9720%" y="517" width="0.0801%" height="15" fill="rgb(228,66,33)" fg:x="187" fg:w="1"/><text x="15.2220%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9720%" y="501" width="0.0801%" height="15" fill="rgb(234,215,21)" fg:x="187" fg:w="1"/><text x="15.2220%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (1 samples, 0.08%)</title><rect x="15.0520%" y="709" width="0.0801%" height="15" fill="rgb(222,191,20)" fg:x="188" fg:w="1"/><text x="15.3020%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="15.0520%" y="693" width="0.0801%" height="15" fill="rgb(245,79,54)" fg:x="188" fg:w="1"/><text x="15.3020%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.0520%" y="677" width="0.0801%" height="15" fill="rgb(240,10,37)" fg:x="188" fg:w="1"/><text x="15.3020%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="15.0520%" y="661" width="0.0801%" height="15" fill="rgb(214,192,32)" fg:x="188" fg:w="1"/><text x="15.3020%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.0520%" y="645" width="0.0801%" height="15" fill="rgb(209,36,54)" fg:x="188" fg:w="1"/><text x="15.3020%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="15.0520%" y="629" width="0.0801%" height="15" fill="rgb(220,10,11)" fg:x="188" fg:w="1"/><text x="15.3020%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="15.0520%" y="613" width="0.0801%" height="15" fill="rgb(221,106,17)" fg:x="188" fg:w="1"/><text x="15.3020%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.1321%" y="677" width="0.0801%" height="15" fill="rgb(251,142,44)" fg:x="189" fg:w="1"/><text x="15.3821%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.1321%" y="661" width="0.0801%" height="15" fill="rgb(238,13,15)" fg:x="189" fg:w="1"/><text x="15.3821%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.1321%" y="645" width="0.0801%" height="15" fill="rgb(208,107,27)" fg:x="189" fg:w="1"/><text x="15.3821%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.1321%" y="629" width="0.0801%" height="15" fill="rgb(205,136,37)" fg:x="189" fg:w="1"/><text x="15.3821%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.1321%" y="613" width="0.0801%" height="15" fill="rgb(250,205,27)" fg:x="189" fg:w="1"/><text x="15.3821%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.1321%" y="597" width="0.0801%" height="15" fill="rgb(210,80,43)" fg:x="189" fg:w="1"/><text x="15.3821%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.1321%" y="581" width="0.0801%" height="15" fill="rgb(247,160,36)" fg:x="189" fg:w="1"/><text x="15.3821%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.1321%" y="565" width="0.0801%" height="15" fill="rgb(234,13,49)" fg:x="189" fg:w="1"/><text x="15.3821%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.1321%" y="549" width="0.0801%" height="15" fill="rgb(234,122,0)" fg:x="189" fg:w="1"/><text x="15.3821%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.1321%" y="533" width="0.0801%" height="15" fill="rgb(207,146,38)" fg:x="189" fg:w="1"/><text x="15.3821%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.1321%" y="517" width="0.0801%" height="15" fill="rgb(207,177,25)" fg:x="189" fg:w="1"/><text x="15.3821%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.1321%" y="501" width="0.0801%" height="15" fill="rgb(211,178,42)" fg:x="189" fg:w="1"/><text x="15.3821%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.1321%" y="485" width="0.0801%" height="15" fill="rgb(230,69,54)" fg:x="189" fg:w="1"/><text x="15.3821%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.1321%" y="469" width="0.0801%" height="15" fill="rgb(214,135,41)" fg:x="189" fg:w="1"/><text x="15.3821%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.1321%" y="453" width="0.0801%" height="15" fill="rgb(237,67,25)" fg:x="189" fg:w="1"/><text x="15.3821%" y="463.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="15.1321%" y="693" width="0.1601%" height="15" fill="rgb(222,189,50)" fg:x="189" fg:w="2"/><text x="15.3821%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.2122%" y="677" width="0.0801%" height="15" fill="rgb(245,148,34)" fg:x="190" fg:w="1"/><text x="15.4622%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.2122%" y="661" width="0.0801%" height="15" fill="rgb(222,29,6)" fg:x="190" fg:w="1"/><text x="15.4622%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.2922%" y="645" width="0.0801%" height="15" fill="rgb(221,189,43)" fg:x="191" fg:w="1"/><text x="15.5422%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="15.2922%" y="661" width="0.1601%" height="15" fill="rgb(207,36,27)" fg:x="191" fg:w="2"/><text x="15.5422%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="15.3723%" y="645" width="0.0801%" height="15" fill="rgb(217,90,24)" fg:x="192" fg:w="1"/><text x="15.6223%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="15.3723%" y="629" width="0.0801%" height="15" fill="rgb(224,66,35)" fg:x="192" fg:w="1"/><text x="15.6223%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.3723%" y="613" width="0.0801%" height="15" fill="rgb(221,13,50)" fg:x="192" fg:w="1"/><text x="15.6223%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.3723%" y="597" width="0.0801%" height="15" fill="rgb(236,68,49)" fg:x="192" fg:w="1"/><text x="15.6223%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (6 samples, 0.48%)</title><rect x="15.1321%" y="709" width="0.4804%" height="15" fill="rgb(229,146,28)" fg:x="189" fg:w="6"/><text x="15.3821%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="15.2922%" y="693" width="0.3203%" height="15" fill="rgb(225,31,38)" fg:x="191" fg:w="4"/><text x="15.5422%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (4 samples, 0.32%)</title><rect x="15.2922%" y="677" width="0.3203%" height="15" fill="rgb(250,208,3)" fg:x="191" fg:w="4"/><text x="15.5422%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="15.4524%" y="661" width="0.1601%" height="15" fill="rgb(246,54,23)" fg:x="193" fg:w="2"/><text x="15.7024%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (2 samples, 0.16%)</title><rect x="15.4524%" y="645" width="0.1601%" height="15" fill="rgb(243,76,11)" fg:x="193" fg:w="2"/><text x="15.7024%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="15.4524%" y="629" width="0.1601%" height="15" fill="rgb(245,21,50)" fg:x="193" fg:w="2"/><text x="15.7024%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.5324%" y="613" width="0.0801%" height="15" fill="rgb(228,9,43)" fg:x="194" fg:w="1"/><text x="15.7824%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="15.5324%" y="597" width="0.0801%" height="15" fill="rgb(208,100,47)" fg:x="194" fg:w="1"/><text x="15.7824%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.5324%" y="581" width="0.0801%" height="15" fill="rgb(232,26,8)" fg:x="194" fg:w="1"/><text x="15.7824%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5324%" y="565" width="0.0801%" height="15" fill="rgb(216,166,38)" fg:x="194" fg:w="1"/><text x="15.7824%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="15.6125%" y="693" width="0.1601%" height="15" fill="rgb(251,202,51)" fg:x="195" fg:w="2"/><text x="15.8625%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="15.6125%" y="677" width="0.1601%" height="15" fill="rgb(254,216,34)" fg:x="195" fg:w="2"/><text x="15.8625%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="15.6125%" y="661" width="0.1601%" height="15" fill="rgb(251,32,27)" fg:x="195" fg:w="2"/><text x="15.8625%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="15.6125%" y="645" width="0.1601%" height="15" fill="rgb(208,127,28)" fg:x="195" fg:w="2"/><text x="15.8625%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.6125%" y="629" width="0.1601%" height="15" fill="rgb(224,137,22)" fg:x="195" fg:w="2"/><text x="15.8625%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.6125%" y="613" width="0.1601%" height="15" fill="rgb(254,70,32)" fg:x="195" fg:w="2"/><text x="15.8625%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="15.6125%" y="597" width="0.1601%" height="15" fill="rgb(229,75,37)" fg:x="195" fg:w="2"/><text x="15.8625%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.6125%" y="581" width="0.1601%" height="15" fill="rgb(252,64,23)" fg:x="195" fg:w="2"/><text x="15.8625%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.6926%" y="565" width="0.0801%" height="15" fill="rgb(232,162,48)" fg:x="196" fg:w="1"/><text x="15.9426%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.6926%" y="549" width="0.0801%" height="15" fill="rgb(246,160,12)" fg:x="196" fg:w="1"/><text x="15.9426%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.6926%" y="533" width="0.0801%" height="15" fill="rgb(247,166,0)" fg:x="196" fg:w="1"/><text x="15.9426%" y="543.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.7726%" y="693" width="0.0801%" height="15" fill="rgb(249,219,21)" fg:x="197" fg:w="1"/><text x="16.0226%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="15.7726%" y="677" width="0.0801%" height="15" fill="rgb(205,209,3)" fg:x="197" fg:w="1"/><text x="16.0226%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.7726%" y="661" width="0.0801%" height="15" fill="rgb(243,44,1)" fg:x="197" fg:w="1"/><text x="16.0226%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.7726%" y="645" width="0.0801%" height="15" fill="rgb(206,159,16)" fg:x="197" fg:w="1"/><text x="16.0226%" y="655.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="15.8527%" y="693" width="0.0801%" height="15" fill="rgb(244,77,30)" fg:x="198" fg:w="1"/><text x="16.1027%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="15.8527%" y="677" width="0.0801%" height="15" fill="rgb(218,69,12)" fg:x="198" fg:w="1"/><text x="16.1027%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.8527%" y="661" width="0.0801%" height="15" fill="rgb(212,87,7)" fg:x="198" fg:w="1"/><text x="16.1027%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.8527%" y="645" width="0.0801%" height="15" fill="rgb(245,114,25)" fg:x="198" fg:w="1"/><text x="16.1027%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.8527%" y="629" width="0.0801%" height="15" fill="rgb(210,61,42)" fg:x="198" fg:w="1"/><text x="16.1027%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.8527%" y="613" width="0.0801%" height="15" fill="rgb(211,52,33)" fg:x="198" fg:w="1"/><text x="16.1027%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.8527%" y="597" width="0.0801%" height="15" fill="rgb(234,58,33)" fg:x="198" fg:w="1"/><text x="16.1027%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.8527%" y="581" width="0.0801%" height="15" fill="rgb(220,115,36)" fg:x="198" fg:w="1"/><text x="16.1027%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.8527%" y="565" width="0.0801%" height="15" fill="rgb(243,153,54)" fg:x="198" fg:w="1"/><text x="16.1027%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.8527%" y="549" width="0.0801%" height="15" fill="rgb(251,47,18)" fg:x="198" fg:w="1"/><text x="16.1027%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="15.8527%" y="533" width="0.0801%" height="15" fill="rgb(242,102,42)" fg:x="198" fg:w="1"/><text x="16.1027%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="15.8527%" y="517" width="0.0801%" height="15" fill="rgb(234,31,38)" fg:x="198" fg:w="1"/><text x="16.1027%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="15.9327%" y="613" width="0.0801%" height="15" fill="rgb(221,117,51)" fg:x="199" fg:w="1"/><text x="16.1827%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="15.6125%" y="709" width="0.4804%" height="15" fill="rgb(212,20,18)" fg:x="195" fg:w="6"/><text x="15.8625%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="15.9327%" y="693" width="0.1601%" height="15" fill="rgb(245,133,36)" fg:x="199" fg:w="2"/><text x="16.1827%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="15.9327%" y="677" width="0.1601%" height="15" fill="rgb(212,6,19)" fg:x="199" fg:w="2"/><text x="16.1827%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="15.9327%" y="661" width="0.1601%" height="15" fill="rgb(218,1,36)" fg:x="199" fg:w="2"/><text x="16.1827%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="15.9327%" y="645" width="0.1601%" height="15" fill="rgb(246,84,54)" fg:x="199" fg:w="2"/><text x="16.1827%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="15.9327%" y="629" width="0.1601%" height="15" fill="rgb(242,110,6)" fg:x="199" fg:w="2"/><text x="16.1827%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.0128%" y="613" width="0.0801%" height="15" fill="rgb(214,47,5)" fg:x="200" fg:w="1"/><text x="16.2628%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (84 samples, 6.73%)</title><rect x="9.4476%" y="725" width="6.7254%" height="15" fill="rgb(218,159,25)" fg:x="118" fg:w="84"/><text x="9.6976%" y="735.50">plugins_c..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="16.0929%" y="709" width="0.0801%" height="15" fill="rgb(215,211,28)" fg:x="201" fg:w="1"/><text x="16.3429%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="16.0929%" y="693" width="0.0801%" height="15" fill="rgb(238,59,32)" fg:x="201" fg:w="1"/><text x="16.3429%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="16.0929%" y="677" width="0.0801%" height="15" fill="rgb(226,82,3)" fg:x="201" fg:w="1"/><text x="16.3429%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0929%" y="661" width="0.0801%" height="15" fill="rgb(240,164,32)" fg:x="201" fg:w="1"/><text x="16.3429%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="16.1729%" y="693" width="0.0801%" height="15" fill="rgb(232,46,7)" fg:x="202" fg:w="1"/><text x="16.4229%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="16.1729%" y="677" width="0.0801%" height="15" fill="rgb(229,129,53)" fg:x="202" fg:w="1"/><text x="16.4229%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="16.2530%" y="661" width="0.0801%" height="15" fill="rgb(234,188,29)" fg:x="203" fg:w="1"/><text x="16.5030%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="16.2530%" y="645" width="0.0801%" height="15" fill="rgb(246,141,4)" fg:x="203" fg:w="1"/><text x="16.5030%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="16.2530%" y="629" width="0.0801%" height="15" fill="rgb(229,23,39)" fg:x="203" fg:w="1"/><text x="16.5030%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (1 samples, 0.08%)</title><rect x="16.2530%" y="613" width="0.0801%" height="15" fill="rgb(206,12,3)" fg:x="203" fg:w="1"/><text x="16.5030%" y="623.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="16.2530%" y="693" width="0.1601%" height="15" fill="rgb(252,226,20)" fg:x="203" fg:w="2"/><text x="16.5030%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="16.2530%" y="677" width="0.1601%" height="15" fill="rgb(216,123,35)" fg:x="203" fg:w="2"/><text x="16.5030%" y="687.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="16.3331%" y="661" width="0.0801%" height="15" fill="rgb(212,68,40)" fg:x="204" fg:w="1"/><text x="16.5831%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="16.3331%" y="645" width="0.0801%" height="15" fill="rgb(254,125,32)" fg:x="204" fg:w="1"/><text x="16.5831%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="16.4932%" y="661" width="0.0801%" height="15" fill="rgb(253,97,22)" fg:x="206" fg:w="1"/><text x="16.7432%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.4932%" y="645" width="0.0801%" height="15" fill="rgb(241,101,14)" fg:x="206" fg:w="1"/><text x="16.7432%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.4932%" y="629" width="0.0801%" height="15" fill="rgb(238,103,29)" fg:x="206" fg:w="1"/><text x="16.7432%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="16.4131%" y="693" width="0.3203%" height="15" fill="rgb(233,195,47)" fg:x="205" fg:w="4"/><text x="16.6631%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="16.4131%" y="677" width="0.3203%" height="15" fill="rgb(246,218,30)" fg:x="205" fg:w="4"/><text x="16.6631%" y="687.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="16.5733%" y="661" width="0.1601%" height="15" fill="rgb(219,145,47)" fg:x="207" fg:w="2"/><text x="16.8233%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="16.5733%" y="645" width="0.1601%" height="15" fill="rgb(243,12,26)" fg:x="207" fg:w="2"/><text x="16.8233%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="16.6533%" y="629" width="0.0801%" height="15" fill="rgb(214,87,16)" fg:x="208" fg:w="1"/><text x="16.9033%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (8 samples, 0.64%)</title><rect x="16.1729%" y="725" width="0.6405%" height="15" fill="rgb(208,99,42)" fg:x="202" fg:w="8"/><text x="16.4229%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (8 samples, 0.64%)</title><rect x="16.1729%" y="709" width="0.6405%" height="15" fill="rgb(253,99,2)" fg:x="202" fg:w="8"/><text x="16.4229%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="16.7334%" y="693" width="0.0801%" height="15" fill="rgb(220,168,23)" fg:x="209" fg:w="1"/><text x="16.9834%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="16.7334%" y="677" width="0.0801%" height="15" fill="rgb(242,38,24)" fg:x="209" fg:w="1"/><text x="16.9834%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7334%" y="661" width="0.0801%" height="15" fill="rgb(225,182,9)" fg:x="209" fg:w="1"/><text x="16.9834%" y="671.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7334%" y="645" width="0.0801%" height="15" fill="rgb(243,178,37)" fg:x="209" fg:w="1"/><text x="16.9834%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.7334%" y="629" width="0.0801%" height="15" fill="rgb(232,139,19)" fg:x="209" fg:w="1"/><text x="16.9834%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.7334%" y="613" width="0.0801%" height="15" fill="rgb(225,201,24)" fg:x="209" fg:w="1"/><text x="16.9834%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.7334%" y="597" width="0.0801%" height="15" fill="rgb(221,47,46)" fg:x="209" fg:w="1"/><text x="16.9834%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.8935%" y="677" width="0.0801%" height="15" fill="rgb(249,23,13)" fg:x="211" fg:w="1"/><text x="17.1435%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="16.8935%" y="693" width="0.1601%" height="15" fill="rgb(219,9,5)" fg:x="211" fg:w="2"/><text x="17.1435%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="16.9736%" y="677" width="0.0801%" height="15" fill="rgb(254,171,16)" fg:x="212" fg:w="1"/><text x="17.2236%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (4 samples, 0.32%)</title><rect x="16.8935%" y="709" width="0.3203%" height="15" fill="rgb(230,171,20)" fg:x="211" fg:w="4"/><text x="17.1435%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="17.0536%" y="693" width="0.1601%" height="15" fill="rgb(210,71,41)" fg:x="213" fg:w="2"/><text x="17.3036%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.1337%" y="677" width="0.0801%" height="15" fill="rgb(206,173,20)" fg:x="214" fg:w="1"/><text x="17.3837%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="17.1337%" y="661" width="0.0801%" height="15" fill="rgb(233,88,34)" fg:x="214" fg:w="1"/><text x="17.3837%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="17.1337%" y="645" width="0.0801%" height="15" fill="rgb(223,209,46)" fg:x="214" fg:w="1"/><text x="17.3837%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="17.2138%" y="677" width="0.0801%" height="15" fill="rgb(250,43,18)" fg:x="215" fg:w="1"/><text x="17.4638%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="17.2138%" y="661" width="0.0801%" height="15" fill="rgb(208,13,10)" fg:x="215" fg:w="1"/><text x="17.4638%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="17.2138%" y="645" width="0.0801%" height="15" fill="rgb(212,200,36)" fg:x="215" fg:w="1"/><text x="17.4638%" y="655.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="17.2138%" y="629" width="0.0801%" height="15" fill="rgb(225,90,30)" fg:x="215" fg:w="1"/><text x="17.4638%" y="639.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="17.2138%" y="709" width="0.1601%" height="15" fill="rgb(236,182,39)" fg:x="215" fg:w="2"/><text x="17.4638%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="17.2138%" y="693" width="0.1601%" height="15" fill="rgb(212,144,35)" fg:x="215" fg:w="2"/><text x="17.4638%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="17.2938%" y="677" width="0.0801%" height="15" fill="rgb(228,63,44)" fg:x="216" fg:w="1"/><text x="17.5438%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2938%" y="661" width="0.0801%" height="15" fill="rgb(228,109,6)" fg:x="216" fg:w="1"/><text x="17.5438%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.2938%" y="645" width="0.0801%" height="15" fill="rgb(238,117,24)" fg:x="216" fg:w="1"/><text x="17.5438%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2938%" y="629" width="0.0801%" height="15" fill="rgb(242,26,26)" fg:x="216" fg:w="1"/><text x="17.5438%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="17.3739%" y="693" width="0.0801%" height="15" fill="rgb(221,92,48)" fg:x="217" fg:w="1"/><text x="17.6239%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.3739%" y="677" width="0.0801%" height="15" fill="rgb(209,209,32)" fg:x="217" fg:w="1"/><text x="17.6239%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.3739%" y="661" width="0.0801%" height="15" fill="rgb(221,70,22)" fg:x="217" fg:w="1"/><text x="17.6239%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3739%" y="645" width="0.0801%" height="15" fill="rgb(248,145,5)" fg:x="217" fg:w="1"/><text x="17.6239%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.3739%" y="629" width="0.0801%" height="15" fill="rgb(226,116,26)" fg:x="217" fg:w="1"/><text x="17.6239%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3739%" y="613" width="0.0801%" height="15" fill="rgb(244,5,17)" fg:x="217" fg:w="1"/><text x="17.6239%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.3739%" y="597" width="0.0801%" height="15" fill="rgb(252,159,33)" fg:x="217" fg:w="1"/><text x="17.6239%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3739%" y="581" width="0.0801%" height="15" fill="rgb(206,71,0)" fg:x="217" fg:w="1"/><text x="17.6239%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.3739%" y="565" width="0.0801%" height="15" fill="rgb(233,118,54)" fg:x="217" fg:w="1"/><text x="17.6239%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.3739%" y="549" width="0.0801%" height="15" fill="rgb(234,83,48)" fg:x="217" fg:w="1"/><text x="17.6239%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="17.4540%" y="677" width="0.1601%" height="15" fill="rgb(228,3,54)" fg:x="218" fg:w="2"/><text x="17.7040%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="17.6141%" y="661" width="0.0801%" height="15" fill="rgb(226,155,13)" fg:x="220" fg:w="1"/><text x="17.8641%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="17.6141%" y="645" width="0.0801%" height="15" fill="rgb(241,28,37)" fg:x="220" fg:w="1"/><text x="17.8641%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6141%" y="629" width="0.0801%" height="15" fill="rgb(233,93,10)" fg:x="220" fg:w="1"/><text x="17.8641%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6141%" y="613" width="0.0801%" height="15" fill="rgb(225,113,19)" fg:x="220" fg:w="1"/><text x="17.8641%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6141%" y="597" width="0.0801%" height="15" fill="rgb(241,2,18)" fg:x="220" fg:w="1"/><text x="17.8641%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.6141%" y="581" width="0.0801%" height="15" fill="rgb(228,207,21)" fg:x="220" fg:w="1"/><text x="17.8641%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.6141%" y="565" width="0.0801%" height="15" fill="rgb(213,211,35)" fg:x="220" fg:w="1"/><text x="17.8641%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.6141%" y="549" width="0.0801%" height="15" fill="rgb(209,83,10)" fg:x="220" fg:w="1"/><text x="17.8641%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6942%" y="629" width="0.0801%" height="15" fill="rgb(209,164,1)" fg:x="221" fg:w="1"/><text x="17.9442%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (164 samples, 13.13%)</title><rect x="4.7238%" y="741" width="13.1305%" height="15" fill="rgb(213,184,43)" fg:x="59" fg:w="164"/><text x="4.9738%" y="751.50">&lt;tests::HoldingKeyIn..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (13 samples, 1.04%)</title><rect x="16.8135%" y="725" width="1.0408%" height="15" fill="rgb(231,61,34)" fg:x="210" fg:w="13"/><text x="17.0635%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="17.3739%" y="709" width="0.4804%" height="15" fill="rgb(235,75,3)" fg:x="217" fg:w="6"/><text x="17.6239%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="17.4540%" y="693" width="0.4003%" height="15" fill="rgb(220,106,47)" fg:x="218" fg:w="5"/><text x="17.7040%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="17.6141%" y="677" width="0.2402%" height="15" fill="rgb(210,196,33)" fg:x="220" fg:w="3"/><text x="17.8641%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="17.6942%" y="661" width="0.1601%" height="15" fill="rgb(229,154,42)" fg:x="221" fg:w="2"/><text x="17.9442%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="17.6942%" y="645" width="0.1601%" height="15" fill="rgb(228,114,26)" fg:x="221" fg:w="2"/><text x="17.9442%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="17.7742%" y="629" width="0.0801%" height="15" fill="rgb(208,144,1)" fg:x="222" fg:w="1"/><text x="18.0242%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.7742%" y="613" width="0.0801%" height="15" fill="rgb(239,112,37)" fg:x="222" fg:w="1"/><text x="18.0242%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.7742%" y="597" width="0.0801%" height="15" fill="rgb(210,96,50)" fg:x="222" fg:w="1"/><text x="18.0242%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (3 samples, 0.24%)</title><rect x="17.8543%" y="741" width="0.2402%" height="15" fill="rgb(222,178,2)" fg:x="223" fg:w="3"/><text x="18.1043%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="17.8543%" y="725" width="0.2402%" height="15" fill="rgb(226,74,18)" fg:x="223" fg:w="3"/><text x="18.1043%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="17.8543%" y="709" width="0.2402%" height="15" fill="rgb(225,67,54)" fg:x="223" fg:w="3"/><text x="18.1043%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="17.9343%" y="693" width="0.1601%" height="15" fill="rgb(251,92,32)" fg:x="224" fg:w="2"/><text x="18.1843%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="18.0144%" y="677" width="0.0801%" height="15" fill="rgb(228,149,22)" fg:x="225" fg:w="1"/><text x="18.2644%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.0144%" y="661" width="0.0801%" height="15" fill="rgb(243,54,13)" fg:x="225" fg:w="1"/><text x="18.2644%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="18.0945%" y="725" width="0.0801%" height="15" fill="rgb(243,180,28)" fg:x="226" fg:w="1"/><text x="18.3445%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.0945%" y="709" width="0.0801%" height="15" fill="rgb(208,167,24)" fg:x="226" fg:w="1"/><text x="18.3445%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.0945%" y="693" width="0.0801%" height="15" fill="rgb(245,73,45)" fg:x="226" fg:w="1"/><text x="18.3445%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.0945%" y="677" width="0.0801%" height="15" fill="rgb(237,203,48)" fg:x="226" fg:w="1"/><text x="18.3445%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.0945%" y="661" width="0.0801%" height="15" fill="rgb(211,197,16)" fg:x="226" fg:w="1"/><text x="18.3445%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.0945%" y="645" width="0.0801%" height="15" fill="rgb(243,99,51)" fg:x="226" fg:w="1"/><text x="18.3445%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="18.0945%" y="629" width="0.0801%" height="15" fill="rgb(215,123,29)" fg:x="226" fg:w="1"/><text x="18.3445%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="18.0945%" y="613" width="0.0801%" height="15" fill="rgb(239,186,37)" fg:x="226" fg:w="1"/><text x="18.3445%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.4147%" y="693" width="0.0801%" height="15" fill="rgb(252,136,39)" fg:x="230" fg:w="1"/><text x="18.6647%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="18.4948%" y="661" width="0.1601%" height="15" fill="rgb(223,213,32)" fg:x="231" fg:w="2"/><text x="18.7448%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.6549%" y="661" width="0.0801%" height="15" fill="rgb(233,115,5)" fg:x="233" fg:w="1"/><text x="18.9049%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="18.4948%" y="693" width="0.3203%" height="15" fill="rgb(207,226,44)" fg:x="231" fg:w="4"/><text x="18.7448%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.32%)</title><rect x="18.4948%" y="677" width="0.3203%" height="15" fill="rgb(208,126,0)" fg:x="231" fg:w="4"/><text x="18.7448%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="18.7350%" y="661" width="0.0801%" height="15" fill="rgb(244,66,21)" fg:x="234" fg:w="1"/><text x="18.9850%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="19.0552%" y="629" width="0.1601%" height="15" fill="rgb(222,97,12)" fg:x="238" fg:w="2"/><text x="19.3052%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="19.0552%" y="613" width="0.1601%" height="15" fill="rgb(219,213,19)" fg:x="238" fg:w="2"/><text x="19.3052%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.0552%" y="597" width="0.1601%" height="15" fill="rgb(252,169,30)" fg:x="238" fg:w="2"/><text x="19.3052%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.1353%" y="581" width="0.0801%" height="15" fill="rgb(206,32,51)" fg:x="239" fg:w="1"/><text x="19.3853%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.1353%" y="565" width="0.0801%" height="15" fill="rgb(250,172,42)" fg:x="239" fg:w="1"/><text x="19.3853%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.1353%" y="549" width="0.0801%" height="15" fill="rgb(209,34,43)" fg:x="239" fg:w="1"/><text x="19.3853%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.1353%" y="533" width="0.0801%" height="15" fill="rgb(223,11,35)" fg:x="239" fg:w="1"/><text x="19.3853%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.1353%" y="517" width="0.0801%" height="15" fill="rgb(251,219,26)" fg:x="239" fg:w="1"/><text x="19.3853%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="19.2154%" y="613" width="0.2402%" height="15" fill="rgb(231,119,3)" fg:x="240" fg:w="3"/><text x="19.4654%" y="623.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="19.2154%" y="597" width="0.2402%" height="15" fill="rgb(216,97,11)" fg:x="240" fg:w="3"/><text x="19.4654%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="19.2954%" y="581" width="0.1601%" height="15" fill="rgb(223,59,9)" fg:x="241" fg:w="2"/><text x="19.5454%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.3755%" y="565" width="0.0801%" height="15" fill="rgb(233,93,31)" fg:x="242" fg:w="1"/><text x="19.6255%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="19.4556%" y="565" width="0.0801%" height="15" fill="rgb(239,81,33)" fg:x="243" fg:w="1"/><text x="19.7056%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.4556%" y="549" width="0.0801%" height="15" fill="rgb(213,120,34)" fg:x="243" fg:w="1"/><text x="19.7056%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.4556%" y="533" width="0.0801%" height="15" fill="rgb(243,49,53)" fg:x="243" fg:w="1"/><text x="19.7056%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.4556%" y="517" width="0.0801%" height="15" fill="rgb(247,216,33)" fg:x="243" fg:w="1"/><text x="19.7056%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="19.4556%" y="597" width="0.1601%" height="15" fill="rgb(226,26,14)" fg:x="243" fg:w="2"/><text x="19.7056%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="19.4556%" y="581" width="0.1601%" height="15" fill="rgb(215,49,53)" fg:x="243" fg:w="2"/><text x="19.7056%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="19.5356%" y="565" width="0.0801%" height="15" fill="rgb(245,162,40)" fg:x="244" fg:w="1"/><text x="19.7856%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.5356%" y="549" width="0.0801%" height="15" fill="rgb(229,68,17)" fg:x="244" fg:w="1"/><text x="19.7856%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="19.6157%" y="597" width="0.2402%" height="15" fill="rgb(213,182,10)" fg:x="245" fg:w="3"/><text x="19.8657%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.6958%" y="581" width="0.1601%" height="15" fill="rgb(245,125,30)" fg:x="246" fg:w="2"/><text x="19.9458%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.7758%" y="565" width="0.0801%" height="15" fill="rgb(232,202,2)" fg:x="247" fg:w="1"/><text x="20.0258%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.7758%" y="549" width="0.0801%" height="15" fill="rgb(237,140,51)" fg:x="247" fg:w="1"/><text x="20.0258%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.9359%" y="581" width="0.0801%" height="15" fill="rgb(236,157,25)" fg:x="249" fg:w="1"/><text x="20.1859%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="20.0160%" y="581" width="0.2402%" height="15" fill="rgb(219,209,0)" fg:x="250" fg:w="3"/><text x="20.2660%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.0961%" y="565" width="0.1601%" height="15" fill="rgb(240,116,54)" fg:x="251" fg:w="2"/><text x="20.3461%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="20.0961%" y="549" width="0.1601%" height="15" fill="rgb(216,10,36)" fg:x="251" fg:w="2"/><text x="20.3461%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.1761%" y="533" width="0.0801%" height="15" fill="rgb(222,72,44)" fg:x="252" fg:w="1"/><text x="20.4261%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="20.2562%" y="565" width="0.0801%" height="15" fill="rgb(232,159,9)" fg:x="253" fg:w="1"/><text x="20.5062%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="20.2562%" y="581" width="0.3203%" height="15" fill="rgb(210,39,32)" fg:x="253" fg:w="4"/><text x="20.5062%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="20.3363%" y="565" width="0.2402%" height="15" fill="rgb(216,194,45)" fg:x="254" fg:w="3"/><text x="20.5863%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.4163%" y="549" width="0.1601%" height="15" fill="rgb(218,18,35)" fg:x="255" fg:w="2"/><text x="20.6663%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="20.4163%" y="533" width="0.1601%" height="15" fill="rgb(207,83,51)" fg:x="255" fg:w="2"/><text x="20.6663%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="20.4163%" y="517" width="0.1601%" height="15" fill="rgb(225,63,43)" fg:x="255" fg:w="2"/><text x="20.6663%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="19.8559%" y="597" width="0.8807%" height="15" fill="rgb(207,57,36)" fg:x="248" fg:w="11"/><text x="20.1059%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.5765%" y="581" width="0.1601%" height="15" fill="rgb(216,99,33)" fg:x="257" fg:w="2"/><text x="20.8265%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="20.5765%" y="565" width="0.1601%" height="15" fill="rgb(225,42,16)" fg:x="257" fg:w="2"/><text x="20.8265%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.36%)</title><rect x="19.4556%" y="613" width="1.3611%" height="15" fill="rgb(220,201,45)" fg:x="243" fg:w="17"/><text x="19.7056%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.7366%" y="597" width="0.0801%" height="15" fill="rgb(225,33,4)" fg:x="259" fg:w="1"/><text x="20.9866%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.7366%" y="581" width="0.0801%" height="15" fill="rgb(224,33,50)" fg:x="259" fg:w="1"/><text x="20.9866%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.7366%" y="565" width="0.0801%" height="15" fill="rgb(246,198,51)" fg:x="259" fg:w="1"/><text x="20.9866%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (25 samples, 2.00%)</title><rect x="19.0552%" y="645" width="2.0016%" height="15" fill="rgb(205,22,4)" fg:x="238" fg:w="25"/><text x="19.3052%" y="655.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (23 samples, 1.84%)</title><rect x="19.2154%" y="629" width="1.8415%" height="15" fill="rgb(206,3,8)" fg:x="240" fg:w="23"/><text x="19.4654%" y="639.50">s..</text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="20.8167%" y="613" width="0.2402%" height="15" fill="rgb(251,23,15)" fg:x="260" fg:w="3"/><text x="21.0667%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="20.8167%" y="597" width="0.2402%" height="15" fill="rgb(252,88,28)" fg:x="260" fg:w="3"/><text x="21.0667%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="20.8167%" y="581" width="0.2402%" height="15" fill="rgb(212,127,14)" fg:x="260" fg:w="3"/><text x="21.0667%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="20.8167%" y="565" width="0.2402%" height="15" fill="rgb(247,145,37)" fg:x="260" fg:w="3"/><text x="21.0667%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="20.8967%" y="549" width="0.1601%" height="15" fill="rgb(209,117,53)" fg:x="261" fg:w="2"/><text x="21.1467%" y="559.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="20.8967%" y="533" width="0.1601%" height="15" fill="rgb(212,90,42)" fg:x="261" fg:w="2"/><text x="21.1467%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.1369%" y="613" width="0.0801%" height="15" fill="rgb(218,164,37)" fg:x="264" fg:w="1"/><text x="21.3869%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.2170%" y="613" width="0.0801%" height="15" fill="rgb(246,65,34)" fg:x="265" fg:w="1"/><text x="21.4670%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.2970%" y="581" width="0.0801%" height="15" fill="rgb(231,100,33)" fg:x="266" fg:w="1"/><text x="21.5470%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.2970%" y="565" width="0.0801%" height="15" fill="rgb(228,126,14)" fg:x="266" fg:w="1"/><text x="21.5470%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.3771%" y="565" width="0.0801%" height="15" fill="rgb(215,173,21)" fg:x="267" fg:w="1"/><text x="21.6271%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="21.4572%" y="565" width="0.0801%" height="15" fill="rgb(210,6,40)" fg:x="268" fg:w="1"/><text x="21.7072%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="21.4572%" y="549" width="0.0801%" height="15" fill="rgb(212,48,18)" fg:x="268" fg:w="1"/><text x="21.7072%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.4572%" y="533" width="0.0801%" height="15" fill="rgb(230,214,11)" fg:x="268" fg:w="1"/><text x="21.7072%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="21.0568%" y="645" width="0.5604%" height="15" fill="rgb(254,105,39)" fg:x="263" fg:w="7"/><text x="21.3068%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="21.0568%" y="629" width="0.5604%" height="15" fill="rgb(245,158,5)" fg:x="263" fg:w="7"/><text x="21.3068%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="21.2970%" y="613" width="0.3203%" height="15" fill="rgb(249,208,11)" fg:x="266" fg:w="4"/><text x="21.5470%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="21.2970%" y="597" width="0.3203%" height="15" fill="rgb(210,39,28)" fg:x="266" fg:w="4"/><text x="21.5470%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="21.3771%" y="581" width="0.2402%" height="15" fill="rgb(211,56,53)" fg:x="267" fg:w="3"/><text x="21.6271%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.5372%" y="565" width="0.0801%" height="15" fill="rgb(226,201,30)" fg:x="269" fg:w="1"/><text x="21.7872%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.5372%" y="549" width="0.0801%" height="15" fill="rgb(239,101,34)" fg:x="269" fg:w="1"/><text x="21.7872%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.5372%" y="533" width="0.0801%" height="15" fill="rgb(226,209,5)" fg:x="269" fg:w="1"/><text x="21.7872%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.6974%" y="597" width="0.0801%" height="15" fill="rgb(250,105,47)" fg:x="271" fg:w="1"/><text x="21.9474%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.7774%" y="581" width="0.0801%" height="15" fill="rgb(230,72,3)" fg:x="272" fg:w="1"/><text x="22.0274%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.8575%" y="581" width="0.0801%" height="15" fill="rgb(232,218,39)" fg:x="273" fg:w="1"/><text x="22.1075%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.0977%" y="549" width="0.0801%" height="15" fill="rgb(248,166,6)" fg:x="276" fg:w="1"/><text x="22.3477%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.0977%" y="533" width="0.0801%" height="15" fill="rgb(247,89,20)" fg:x="276" fg:w="1"/><text x="22.3477%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="22.1777%" y="549" width="0.0801%" height="15" fill="rgb(248,130,54)" fg:x="277" fg:w="1"/><text x="22.4277%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="22.1777%" y="533" width="0.0801%" height="15" fill="rgb(234,196,4)" fg:x="277" fg:w="1"/><text x="22.4277%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="21.6974%" y="613" width="0.6405%" height="15" fill="rgb(250,143,31)" fg:x="271" fg:w="8"/><text x="21.9474%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="21.7774%" y="597" width="0.5604%" height="15" fill="rgb(211,110,34)" fg:x="272" fg:w="7"/><text x="22.0274%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="21.9376%" y="581" width="0.4003%" height="15" fill="rgb(215,124,48)" fg:x="274" fg:w="5"/><text x="22.1876%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="22.0977%" y="565" width="0.2402%" height="15" fill="rgb(216,46,13)" fg:x="276" fg:w="3"/><text x="22.3477%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="22.2578%" y="549" width="0.0801%" height="15" fill="rgb(205,184,25)" fg:x="278" fg:w="1"/><text x="22.5078%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.2578%" y="533" width="0.0801%" height="15" fill="rgb(228,1,10)" fg:x="278" fg:w="1"/><text x="22.5078%" y="543.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="22.3379%" y="613" width="0.0801%" height="15" fill="rgb(213,116,27)" fg:x="279" fg:w="1"/><text x="22.5879%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="22.3379%" y="597" width="0.0801%" height="15" fill="rgb(241,95,50)" fg:x="279" fg:w="1"/><text x="22.5879%" y="607.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.3379%" y="581" width="0.0801%" height="15" fill="rgb(238,48,32)" fg:x="279" fg:w="1"/><text x="22.5879%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="22.5781%" y="549" width="0.1601%" height="15" fill="rgb(235,113,49)" fg:x="282" fg:w="2"/><text x="22.8281%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="22.6581%" y="533" width="0.0801%" height="15" fill="rgb(205,127,43)" fg:x="283" fg:w="1"/><text x="22.9081%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.6581%" y="517" width="0.0801%" height="15" fill="rgb(250,162,2)" fg:x="283" fg:w="1"/><text x="22.9081%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.40%)</title><rect x="22.4179%" y="581" width="0.4003%" height="15" fill="rgb(220,13,41)" fg:x="280" fg:w="5"/><text x="22.6679%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="22.4980%" y="565" width="0.3203%" height="15" fill="rgb(249,221,25)" fg:x="281" fg:w="4"/><text x="22.7480%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.7382%" y="549" width="0.0801%" height="15" fill="rgb(215,208,19)" fg:x="284" fg:w="1"/><text x="22.9882%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (16 samples, 1.28%)</title><rect x="21.6173%" y="629" width="1.2810%" height="15" fill="rgb(236,175,2)" fg:x="270" fg:w="16"/><text x="21.8673%" y="639.50"></text></g><g><title>treediff::diff::diff (6 samples, 0.48%)</title><rect x="22.4179%" y="613" width="0.4804%" height="15" fill="rgb(241,52,2)" fg:x="280" fg:w="6"/><text x="22.6679%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.48%)</title><rect x="22.4179%" y="597" width="0.4804%" height="15" fill="rgb(248,140,14)" fg:x="280" fg:w="6"/><text x="22.6679%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.8183%" y="581" width="0.0801%" height="15" fill="rgb(253,22,42)" fg:x="285" fg:w="1"/><text x="23.0683%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.9784%" y="597" width="0.0801%" height="15" fill="rgb(234,61,47)" fg:x="287" fg:w="1"/><text x="23.2284%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="23.0584%" y="597" width="0.3203%" height="15" fill="rgb(208,226,15)" fg:x="288" fg:w="4"/><text x="23.3084%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="23.3787%" y="597" width="0.0801%" height="15" fill="rgb(217,221,4)" fg:x="292" fg:w="1"/><text x="23.6287%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.3787%" y="581" width="0.0801%" height="15" fill="rgb(212,174,34)" fg:x="292" fg:w="1"/><text x="23.6287%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.3787%" y="565" width="0.0801%" height="15" fill="rgb(253,83,4)" fg:x="292" fg:w="1"/><text x="23.6287%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.3787%" y="549" width="0.0801%" height="15" fill="rgb(250,195,49)" fg:x="292" fg:w="1"/><text x="23.6287%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="23.4588%" y="597" width="0.0801%" height="15" fill="rgb(241,192,25)" fg:x="293" fg:w="1"/><text x="23.7088%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.4588%" y="581" width="0.0801%" height="15" fill="rgb(208,124,10)" fg:x="293" fg:w="1"/><text x="23.7088%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.4588%" y="565" width="0.0801%" height="15" fill="rgb(222,33,0)" fg:x="293" fg:w="1"/><text x="23.7088%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.8591%" y="549" width="0.1601%" height="15" fill="rgb(234,209,28)" fg:x="298" fg:w="2"/><text x="24.1091%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="23.8591%" y="533" width="0.1601%" height="15" fill="rgb(224,11,23)" fg:x="298" fg:w="2"/><text x="24.1091%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="24.0192%" y="533" width="0.0801%" height="15" fill="rgb(232,99,1)" fg:x="300" fg:w="1"/><text x="24.2692%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="24.0993%" y="517" width="0.0801%" height="15" fill="rgb(237,95,45)" fg:x="301" fg:w="1"/><text x="24.3493%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="24.1793%" y="453" width="0.0801%" height="15" fill="rgb(208,109,11)" fg:x="302" fg:w="1"/><text x="24.4293%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="24.1793%" y="517" width="0.2402%" height="15" fill="rgb(216,190,48)" fg:x="302" fg:w="3"/><text x="24.4293%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="24.1793%" y="501" width="0.2402%" height="15" fill="rgb(251,171,36)" fg:x="302" fg:w="3"/><text x="24.4293%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="24.1793%" y="485" width="0.2402%" height="15" fill="rgb(230,62,22)" fg:x="302" fg:w="3"/><text x="24.4293%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="24.1793%" y="469" width="0.2402%" height="15" fill="rgb(225,114,35)" fg:x="302" fg:w="3"/><text x="24.4293%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="24.2594%" y="453" width="0.1601%" height="15" fill="rgb(215,118,42)" fg:x="303" fg:w="2"/><text x="24.5094%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.3395%" y="437" width="0.0801%" height="15" fill="rgb(243,119,21)" fg:x="304" fg:w="1"/><text x="24.5895%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.3395%" y="421" width="0.0801%" height="15" fill="rgb(252,177,53)" fg:x="304" fg:w="1"/><text x="24.5895%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (7 samples, 0.56%)</title><rect x="24.0192%" y="549" width="0.5604%" height="15" fill="rgb(237,209,29)" fg:x="300" fg:w="7"/><text x="24.2692%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="24.0993%" y="533" width="0.4804%" height="15" fill="rgb(212,65,23)" fg:x="301" fg:w="6"/><text x="24.3493%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="24.4195%" y="517" width="0.1601%" height="15" fill="rgb(230,222,46)" fg:x="305" fg:w="2"/><text x="24.6695%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.7398%" y="517" width="0.0801%" height="15" fill="rgb(215,135,32)" fg:x="309" fg:w="1"/><text x="24.9898%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="24.9800%" y="501" width="0.0801%" height="15" fill="rgb(246,101,22)" fg:x="312" fg:w="1"/><text x="25.2300%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.0600%" y="485" width="0.0801%" height="15" fill="rgb(206,107,13)" fg:x="313" fg:w="1"/><text x="25.3100%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.0600%" y="469" width="0.0801%" height="15" fill="rgb(250,100,44)" fg:x="313" fg:w="1"/><text x="25.3100%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (18 samples, 1.44%)</title><rect x="23.7790%" y="565" width="1.4412%" height="15" fill="rgb(231,147,38)" fg:x="297" fg:w="18"/><text x="24.0290%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.64%)</title><rect x="24.5797%" y="549" width="0.6405%" height="15" fill="rgb(229,8,40)" fg:x="307" fg:w="8"/><text x="24.8297%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="24.6597%" y="533" width="0.5604%" height="15" fill="rgb(221,135,30)" fg:x="308" fg:w="7"/><text x="24.9097%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="24.8199%" y="517" width="0.4003%" height="15" fill="rgb(249,193,18)" fg:x="310" fg:w="5"/><text x="25.0699%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="25.0600%" y="501" width="0.1601%" height="15" fill="rgb(209,133,39)" fg:x="313" fg:w="2"/><text x="25.3100%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="25.1401%" y="485" width="0.0801%" height="15" fill="rgb(232,100,14)" fg:x="314" fg:w="1"/><text x="25.3901%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (32 samples, 2.56%)</title><rect x="22.8983%" y="629" width="2.5620%" height="15" fill="rgb(224,185,1)" fg:x="286" fg:w="32"/><text x="23.1483%" y="639.50">ke..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (31 samples, 2.48%)</title><rect x="22.9784%" y="613" width="2.4820%" height="15" fill="rgb(223,139,8)" fg:x="287" fg:w="31"/><text x="23.2284%" y="623.50">&lt;s..</text></g><g><title>serde::ser::Serializer::collect_map (24 samples, 1.92%)</title><rect x="23.5388%" y="597" width="1.9215%" height="15" fill="rgb(232,213,38)" fg:x="294" fg:w="24"/><text x="23.7888%" y="607.50">s..</text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (21 samples, 1.68%)</title><rect x="23.7790%" y="581" width="1.6813%" height="15" fill="rgb(207,94,22)" fg:x="297" fg:w="21"/><text x="24.0290%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="25.2202%" y="565" width="0.2402%" height="15" fill="rgb(219,183,54)" fg:x="315" fg:w="3"/><text x="25.4702%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.3803%" y="549" width="0.0801%" height="15" fill="rgb(216,185,54)" fg:x="317" fg:w="1"/><text x="25.6303%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="25.5404%" y="517" width="0.0801%" height="15" fill="rgb(254,217,39)" fg:x="319" fg:w="1"/><text x="25.7904%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.7806%" y="453" width="0.0801%" height="15" fill="rgb(240,178,23)" fg:x="322" fg:w="1"/><text x="26.0306%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.7806%" y="437" width="0.0801%" height="15" fill="rgb(218,11,47)" fg:x="322" fg:w="1"/><text x="26.0306%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.7806%" y="421" width="0.0801%" height="15" fill="rgb(218,51,51)" fg:x="322" fg:w="1"/><text x="26.0306%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.7806%" y="405" width="0.0801%" height="15" fill="rgb(238,126,27)" fg:x="322" fg:w="1"/><text x="26.0306%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.7806%" y="389" width="0.0801%" height="15" fill="rgb(249,202,22)" fg:x="322" fg:w="1"/><text x="26.0306%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="25.7806%" y="373" width="0.0801%" height="15" fill="rgb(254,195,49)" fg:x="322" fg:w="1"/><text x="26.0306%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.8607%" y="453" width="0.0801%" height="15" fill="rgb(208,123,14)" fg:x="323" fg:w="1"/><text x="26.1107%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.8607%" y="437" width="0.0801%" height="15" fill="rgb(224,200,8)" fg:x="323" fg:w="1"/><text x="26.1107%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="25.7806%" y="485" width="0.2402%" height="15" fill="rgb(217,61,36)" fg:x="322" fg:w="3"/><text x="26.0306%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="25.7806%" y="469" width="0.2402%" height="15" fill="rgb(206,35,45)" fg:x="322" fg:w="3"/><text x="26.0306%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.9408%" y="453" width="0.0801%" height="15" fill="rgb(217,65,33)" fg:x="324" fg:w="1"/><text x="26.1908%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.9408%" y="437" width="0.0801%" height="15" fill="rgb(222,158,48)" fg:x="324" fg:w="1"/><text x="26.1908%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="25.9408%" y="421" width="0.0801%" height="15" fill="rgb(254,2,54)" fg:x="324" fg:w="1"/><text x="26.1908%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.1009%" y="469" width="0.0801%" height="15" fill="rgb(250,143,38)" fg:x="326" fg:w="1"/><text x="26.3509%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="26.0208%" y="485" width="0.2402%" height="15" fill="rgb(248,25,0)" fg:x="325" fg:w="3"/><text x="26.2708%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.1809%" y="469" width="0.0801%" height="15" fill="rgb(206,152,27)" fg:x="327" fg:w="1"/><text x="26.4309%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.1809%" y="453" width="0.0801%" height="15" fill="rgb(240,77,30)" fg:x="327" fg:w="1"/><text x="26.4309%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="25.7806%" y="501" width="0.5604%" height="15" fill="rgb(231,5,3)" fg:x="322" fg:w="7"/><text x="26.0306%" y="511.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="26.2610%" y="485" width="0.0801%" height="15" fill="rgb(207,226,32)" fg:x="328" fg:w="1"/><text x="26.5110%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="26.3411%" y="485" width="0.0801%" height="15" fill="rgb(222,207,47)" fg:x="329" fg:w="1"/><text x="26.5911%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="26.3411%" y="501" width="0.1601%" height="15" fill="rgb(229,115,45)" fg:x="329" fg:w="2"/><text x="26.5911%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.4211%" y="485" width="0.0801%" height="15" fill="rgb(224,191,6)" fg:x="330" fg:w="1"/><text x="26.6711%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.04%)</title><rect x="25.5404%" y="533" width="1.0408%" height="15" fill="rgb(230,227,24)" fg:x="319" fg:w="13"/><text x="25.7904%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.96%)</title><rect x="25.6205%" y="517" width="0.9608%" height="15" fill="rgb(228,80,19)" fg:x="320" fg:w="12"/><text x="25.8705%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.5012%" y="501" width="0.0801%" height="15" fill="rgb(247,229,0)" fg:x="331" fg:w="1"/><text x="26.7512%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.5012%" y="485" width="0.0801%" height="15" fill="rgb(237,194,15)" fg:x="331" fg:w="1"/><text x="26.7512%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="26.5012%" y="469" width="0.0801%" height="15" fill="rgb(219,203,20)" fg:x="331" fg:w="1"/><text x="26.7512%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 1.20%)</title><rect x="25.4604%" y="565" width="1.2010%" height="15" fill="rgb(234,128,8)" fg:x="318" fg:w="15"/><text x="25.7104%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (15 samples, 1.20%)</title><rect x="25.4604%" y="549" width="1.2010%" height="15" fill="rgb(248,202,8)" fg:x="318" fg:w="15"/><text x="25.7104%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.5813%" y="533" width="0.0801%" height="15" fill="rgb(206,104,37)" fg:x="332" fg:w="1"/><text x="26.8313%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="26.5813%" y="517" width="0.0801%" height="15" fill="rgb(223,8,27)" fg:x="332" fg:w="1"/><text x="26.8313%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.6613%" y="565" width="0.0801%" height="15" fill="rgb(216,217,28)" fg:x="333" fg:w="1"/><text x="26.9113%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.6613%" y="549" width="0.0801%" height="15" fill="rgb(249,199,1)" fg:x="333" fg:w="1"/><text x="26.9113%" y="559.50"></text></g><g><title>engine::session::state::State::close (108 samples, 8.65%)</title><rect x="18.1745%" y="725" width="8.6469%" height="15" fill="rgb(240,85,17)" fg:x="227" fg:w="108"/><text x="18.4245%" y="735.50">engine::sess..</text></g><g><title>engine::session::state::State::flush_entities (106 samples, 8.49%)</title><rect x="18.3347%" y="709" width="8.4868%" height="15" fill="rgb(206,108,45)" fg:x="229" fg:w="106"/><text x="18.5847%" y="719.50">engine::sess..</text></g><g><title>core::iter::adapters::try_process (100 samples, 8.01%)</title><rect x="18.8151%" y="693" width="8.0064%" height="15" fill="rgb(245,210,41)" fg:x="235" fg:w="100"/><text x="19.0651%" y="703.50">core::iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (99 samples, 7.93%)</title><rect x="18.8951%" y="677" width="7.9263%" height="15" fill="rgb(206,13,37)" fg:x="236" fg:w="99"/><text x="19.1451%" y="687.50">&lt;alloc::vec..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (98 samples, 7.85%)</title><rect x="18.9752%" y="661" width="7.8463%" height="15" fill="rgb(250,61,18)" fg:x="237" fg:w="98"/><text x="19.2252%" y="671.50">engine::ses..</text></g><g><title>kernel::model::any_entity_changes (65 samples, 5.20%)</title><rect x="21.6173%" y="645" width="5.2042%" height="15" fill="rgb(235,172,48)" fg:x="270" fg:w="65"/><text x="21.8673%" y="655.50">kernel..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (17 samples, 1.36%)</title><rect x="25.4604%" y="629" width="1.3611%" height="15" fill="rgb(249,201,17)" fg:x="318" fg:w="17"/><text x="25.7104%" y="639.50"></text></g><g><title>serde_json::de::from_trait (17 samples, 1.36%)</title><rect x="25.4604%" y="613" width="1.3611%" height="15" fill="rgb(219,208,6)" fg:x="318" fg:w="17"/><text x="25.7104%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (17 samples, 1.36%)</title><rect x="25.4604%" y="597" width="1.3611%" height="15" fill="rgb(248,31,23)" fg:x="318" fg:w="17"/><text x="25.7104%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (17 samples, 1.36%)</title><rect x="25.4604%" y="581" width="1.3611%" height="15" fill="rgb(245,15,42)" fg:x="318" fg:w="17"/><text x="25.7104%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.7414%" y="565" width="0.0801%" height="15" fill="rgb(222,217,39)" fg:x="334" fg:w="1"/><text x="26.9914%" y="575.50"></text></g><g><title>engine::session::Session::close (110 samples, 8.81%)</title><rect x="18.0945%" y="741" width="8.8070%" height="15" fill="rgb(210,219,27)" fg:x="226" fg:w="110"/><text x="18.3445%" y="751.50">engine::sess..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="26.8215%" y="725" width="0.0801%" height="15" fill="rgb(252,166,36)" fg:x="335" fg:w="1"/><text x="27.0715%" y="735.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="26.9816%" y="677" width="0.0801%" height="15" fill="rgb(245,132,34)" fg:x="337" fg:w="1"/><text x="27.2316%" y="687.50"></text></g><g><title>&lt;plugins_core::looking::parser::LookActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="26.9816%" y="661" width="0.0801%" height="15" fill="rgb(236,54,3)" fg:x="337" fg:w="1"/><text x="27.2316%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="26.9816%" y="645" width="0.0801%" height="15" fill="rgb(241,173,43)" fg:x="337" fg:w="1"/><text x="27.2316%" y="655.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="26.9816%" y="709" width="0.1601%" height="15" fill="rgb(215,190,9)" fg:x="337" fg:w="2"/><text x="27.2316%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="26.9816%" y="693" width="0.1601%" height="15" fill="rgb(242,101,16)" fg:x="337" fg:w="2"/><text x="27.2316%" y="703.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::sources (1 samples, 0.08%)</title><rect x="27.0616%" y="677" width="0.0801%" height="15" fill="rgb(223,190,21)" fg:x="338" fg:w="1"/><text x="27.3116%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.1417%" y="677" width="0.0801%" height="15" fill="rgb(215,228,25)" fg:x="339" fg:w="1"/><text x="27.3917%" y="687.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="27.2218%" y="677" width="0.0801%" height="15" fill="rgb(225,36,22)" fg:x="340" fg:w="1"/><text x="27.4718%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="27.2218%" y="661" width="0.0801%" height="15" fill="rgb(251,106,46)" fg:x="340" fg:w="1"/><text x="27.4718%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="27.2218%" y="645" width="0.0801%" height="15" fill="rgb(208,90,1)" fg:x="340" fg:w="1"/><text x="27.4718%" y="655.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.24%)</title><rect x="27.3018%" y="677" width="0.2402%" height="15" fill="rgb(243,10,4)" fg:x="341" fg:w="3"/><text x="27.5518%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="27.3819%" y="661" width="0.1601%" height="15" fill="rgb(212,137,27)" fg:x="342" fg:w="2"/><text x="27.6319%" y="671.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="27.3819%" y="645" width="0.1601%" height="15" fill="rgb(231,220,49)" fg:x="342" fg:w="2"/><text x="27.6319%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (2 samples, 0.16%)</title><rect x="27.3819%" y="629" width="0.1601%" height="15" fill="rgb(237,96,20)" fg:x="342" fg:w="2"/><text x="27.6319%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.5420%" y="549" width="0.0801%" height="15" fill="rgb(239,229,30)" fg:x="344" fg:w="1"/><text x="27.7920%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.5420%" y="533" width="0.0801%" height="15" fill="rgb(219,65,33)" fg:x="344" fg:w="1"/><text x="27.7920%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.5420%" y="517" width="0.0801%" height="15" fill="rgb(243,134,7)" fg:x="344" fg:w="1"/><text x="27.7920%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="27.5420%" y="501" width="0.0801%" height="15" fill="rgb(216,177,54)" fg:x="344" fg:w="1"/><text x="27.7920%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="27.5420%" y="485" width="0.0801%" height="15" fill="rgb(211,160,20)" fg:x="344" fg:w="1"/><text x="27.7920%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="27.5420%" y="469" width="0.0801%" height="15" fill="rgb(239,85,39)" fg:x="344" fg:w="1"/><text x="27.7920%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.5420%" y="453" width="0.0801%" height="15" fill="rgb(232,125,22)" fg:x="344" fg:w="1"/><text x="27.7920%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.5420%" y="437" width="0.0801%" height="15" fill="rgb(244,57,34)" fg:x="344" fg:w="1"/><text x="27.7920%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="27.5420%" y="421" width="0.0801%" height="15" fill="rgb(214,203,32)" fg:x="344" fg:w="1"/><text x="27.7920%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="27.5420%" y="405" width="0.0801%" height="15" fill="rgb(207,58,43)" fg:x="344" fg:w="1"/><text x="27.7920%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="27.5420%" y="389" width="0.0801%" height="15" fill="rgb(215,193,15)" fg:x="344" fg:w="1"/><text x="27.7920%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="27.5420%" y="373" width="0.0801%" height="15" fill="rgb(232,15,44)" fg:x="344" fg:w="1"/><text x="27.7920%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="27.5420%" y="565" width="0.1601%" height="15" fill="rgb(212,3,48)" fg:x="344" fg:w="2"/><text x="27.7920%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.6221%" y="549" width="0.0801%" height="15" fill="rgb(218,128,7)" fg:x="345" fg:w="1"/><text x="27.8721%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.6221%" y="533" width="0.0801%" height="15" fill="rgb(226,216,39)" fg:x="345" fg:w="1"/><text x="27.8721%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.6221%" y="517" width="0.0801%" height="15" fill="rgb(243,47,51)" fg:x="345" fg:w="1"/><text x="27.8721%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.6221%" y="501" width="0.0801%" height="15" fill="rgb(241,183,40)" fg:x="345" fg:w="1"/><text x="27.8721%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.6221%" y="485" width="0.0801%" height="15" fill="rgb(231,217,32)" fg:x="345" fg:w="1"/><text x="27.8721%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.7022%" y="501" width="0.0801%" height="15" fill="rgb(229,61,38)" fg:x="346" fg:w="1"/><text x="27.9522%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.7022%" y="485" width="0.0801%" height="15" fill="rgb(225,210,5)" fg:x="346" fg:w="1"/><text x="27.9522%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.7022%" y="469" width="0.0801%" height="15" fill="rgb(231,79,45)" fg:x="346" fg:w="1"/><text x="27.9522%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.7022%" y="453" width="0.0801%" height="15" fill="rgb(224,100,7)" fg:x="346" fg:w="1"/><text x="27.9522%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.7822%" y="485" width="0.0801%" height="15" fill="rgb(241,198,18)" fg:x="347" fg:w="1"/><text x="28.0322%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.7822%" y="469" width="0.0801%" height="15" fill="rgb(252,97,53)" fg:x="347" fg:w="1"/><text x="28.0322%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.8623%" y="485" width="0.0801%" height="15" fill="rgb(220,88,7)" fg:x="348" fg:w="1"/><text x="28.1123%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.8623%" y="469" width="0.0801%" height="15" fill="rgb(213,176,14)" fg:x="348" fg:w="1"/><text x="28.1123%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="27.7822%" y="501" width="0.2402%" height="15" fill="rgb(246,73,7)" fg:x="347" fg:w="3"/><text x="28.0322%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.9424%" y="485" width="0.0801%" height="15" fill="rgb(245,64,36)" fg:x="349" fg:w="1"/><text x="28.1924%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.9424%" y="469" width="0.0801%" height="15" fill="rgb(245,80,10)" fg:x="349" fg:w="1"/><text x="28.1924%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.0224%" y="421" width="0.0801%" height="15" fill="rgb(232,107,50)" fg:x="350" fg:w="1"/><text x="28.2724%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.1025%" y="357" width="0.0801%" height="15" fill="rgb(253,3,0)" fg:x="351" fg:w="1"/><text x="28.3525%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.1025%" y="341" width="0.0801%" height="15" fill="rgb(212,99,53)" fg:x="351" fg:w="1"/><text x="28.3525%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.1025%" y="325" width="0.0801%" height="15" fill="rgb(249,111,54)" fg:x="351" fg:w="1"/><text x="28.3525%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="28.1025%" y="405" width="0.1601%" height="15" fill="rgb(249,55,30)" fg:x="351" fg:w="2"/><text x="28.3525%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="28.1025%" y="389" width="0.1601%" height="15" fill="rgb(237,47,42)" fg:x="351" fg:w="2"/><text x="28.3525%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="28.1025%" y="373" width="0.1601%" height="15" fill="rgb(211,20,18)" fg:x="351" fg:w="2"/><text x="28.3525%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="28.1825%" y="357" width="0.0801%" height="15" fill="rgb(231,203,46)" fg:x="352" fg:w="1"/><text x="28.4325%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="28.0224%" y="501" width="0.3203%" height="15" fill="rgb(237,142,3)" fg:x="350" fg:w="4"/><text x="28.2724%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="28.0224%" y="485" width="0.3203%" height="15" fill="rgb(241,107,1)" fg:x="350" fg:w="4"/><text x="28.2724%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="28.0224%" y="469" width="0.3203%" height="15" fill="rgb(229,83,13)" fg:x="350" fg:w="4"/><text x="28.2724%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="28.0224%" y="453" width="0.3203%" height="15" fill="rgb(241,91,40)" fg:x="350" fg:w="4"/><text x="28.2724%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="28.0224%" y="437" width="0.3203%" height="15" fill="rgb(225,3,45)" fg:x="350" fg:w="4"/><text x="28.2724%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="28.1025%" y="421" width="0.2402%" height="15" fill="rgb(244,223,14)" fg:x="351" fg:w="3"/><text x="28.3525%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.2626%" y="405" width="0.0801%" height="15" fill="rgb(224,124,37)" fg:x="353" fg:w="1"/><text x="28.5126%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.2626%" y="389" width="0.0801%" height="15" fill="rgb(251,171,30)" fg:x="353" fg:w="1"/><text x="28.5126%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="28.4227%" y="437" width="0.2402%" height="15" fill="rgb(236,46,54)" fg:x="355" fg:w="3"/><text x="28.6727%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="28.4227%" y="421" width="0.2402%" height="15" fill="rgb(245,213,5)" fg:x="355" fg:w="3"/><text x="28.6727%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="28.4227%" y="405" width="0.2402%" height="15" fill="rgb(230,144,27)" fg:x="355" fg:w="3"/><text x="28.6727%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="28.5028%" y="389" width="0.1601%" height="15" fill="rgb(220,86,6)" fg:x="356" fg:w="2"/><text x="28.7528%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.5829%" y="373" width="0.0801%" height="15" fill="rgb(240,20,13)" fg:x="357" fg:w="1"/><text x="28.8329%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.5829%" y="357" width="0.0801%" height="15" fill="rgb(217,89,34)" fg:x="357" fg:w="1"/><text x="28.8329%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.5829%" y="341" width="0.0801%" height="15" fill="rgb(229,13,5)" fg:x="357" fg:w="1"/><text x="28.8329%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.5829%" y="325" width="0.0801%" height="15" fill="rgb(244,67,35)" fg:x="357" fg:w="1"/><text x="28.8329%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.5829%" y="309" width="0.0801%" height="15" fill="rgb(221,40,2)" fg:x="357" fg:w="1"/><text x="28.8329%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.5829%" y="293" width="0.0801%" height="15" fill="rgb(237,157,21)" fg:x="357" fg:w="1"/><text x="28.8329%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.5829%" y="277" width="0.0801%" height="15" fill="rgb(222,94,11)" fg:x="357" fg:w="1"/><text x="28.8329%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.5829%" y="261" width="0.0801%" height="15" fill="rgb(249,113,6)" fg:x="357" fg:w="1"/><text x="28.8329%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.5829%" y="245" width="0.0801%" height="15" fill="rgb(238,137,36)" fg:x="357" fg:w="1"/><text x="28.8329%" y="255.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (15 samples, 1.20%)</title><rect x="27.5420%" y="597" width="1.2010%" height="15" fill="rgb(210,102,26)" fg:x="344" fg:w="15"/><text x="27.7920%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (15 samples, 1.20%)</title><rect x="27.5420%" y="581" width="1.2010%" height="15" fill="rgb(218,30,30)" fg:x="344" fg:w="15"/><text x="27.7920%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (13 samples, 1.04%)</title><rect x="27.7022%" y="565" width="1.0408%" height="15" fill="rgb(214,67,26)" fg:x="346" fg:w="13"/><text x="27.9522%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (13 samples, 1.04%)</title><rect x="27.7022%" y="549" width="1.0408%" height="15" fill="rgb(251,9,53)" fg:x="346" fg:w="13"/><text x="27.9522%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.04%)</title><rect x="27.7022%" y="533" width="1.0408%" height="15" fill="rgb(228,204,25)" fg:x="346" fg:w="13"/><text x="27.9522%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.04%)</title><rect x="27.7022%" y="517" width="1.0408%" height="15" fill="rgb(207,153,8)" fg:x="346" fg:w="13"/><text x="27.9522%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="28.3427%" y="501" width="0.4003%" height="15" fill="rgb(242,9,16)" fg:x="354" fg:w="5"/><text x="28.5927%" y="511.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="28.3427%" y="485" width="0.4003%" height="15" fill="rgb(217,211,10)" fg:x="354" fg:w="5"/><text x="28.5927%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="28.3427%" y="469" width="0.4003%" height="15" fill="rgb(219,228,52)" fg:x="354" fg:w="5"/><text x="28.5927%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="28.3427%" y="453" width="0.4003%" height="15" fill="rgb(231,92,29)" fg:x="354" fg:w="5"/><text x="28.5927%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="28.6629%" y="437" width="0.0801%" height="15" fill="rgb(232,8,23)" fg:x="358" fg:w="1"/><text x="28.9129%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="29.1433%" y="325" width="0.1601%" height="15" fill="rgb(216,211,34)" fg:x="364" fg:w="2"/><text x="29.3933%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.32%)</title><rect x="29.0633%" y="357" width="0.3203%" height="15" fill="rgb(236,151,0)" fg:x="363" fg:w="4"/><text x="29.3133%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="29.1433%" y="341" width="0.2402%" height="15" fill="rgb(209,168,3)" fg:x="364" fg:w="3"/><text x="29.3933%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.3034%" y="325" width="0.0801%" height="15" fill="rgb(208,129,28)" fg:x="366" fg:w="1"/><text x="29.5534%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.3034%" y="309" width="0.0801%" height="15" fill="rgb(229,78,22)" fg:x="366" fg:w="1"/><text x="29.5534%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="29.3034%" y="293" width="0.0801%" height="15" fill="rgb(228,187,13)" fg:x="366" fg:w="1"/><text x="29.5534%" y="303.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (5 samples, 0.40%)</title><rect x="29.0633%" y="421" width="0.4003%" height="15" fill="rgb(240,119,24)" fg:x="363" fg:w="5"/><text x="29.3133%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (5 samples, 0.40%)</title><rect x="29.0633%" y="405" width="0.4003%" height="15" fill="rgb(209,194,42)" fg:x="363" fg:w="5"/><text x="29.3133%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (5 samples, 0.40%)</title><rect x="29.0633%" y="389" width="0.4003%" height="15" fill="rgb(247,200,46)" fg:x="363" fg:w="5"/><text x="29.3133%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="29.0633%" y="373" width="0.4003%" height="15" fill="rgb(218,76,16)" fg:x="363" fg:w="5"/><text x="29.3133%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="29.3835%" y="357" width="0.0801%" height="15" fill="rgb(225,21,48)" fg:x="367" fg:w="1"/><text x="29.6335%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="29.3835%" y="341" width="0.0801%" height="15" fill="rgb(239,223,50)" fg:x="367" fg:w="1"/><text x="29.6335%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="29.3835%" y="325" width="0.0801%" height="15" fill="rgb(244,45,21)" fg:x="367" fg:w="1"/><text x="29.6335%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.3835%" y="309" width="0.0801%" height="15" fill="rgb(232,33,43)" fg:x="367" fg:w="1"/><text x="29.6335%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.3835%" y="293" width="0.0801%" height="15" fill="rgb(209,8,3)" fg:x="367" fg:w="1"/><text x="29.6335%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.5436%" y="373" width="0.0801%" height="15" fill="rgb(214,25,53)" fg:x="369" fg:w="1"/><text x="29.7936%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.5436%" y="357" width="0.0801%" height="15" fill="rgb(254,186,54)" fg:x="369" fg:w="1"/><text x="29.7936%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.5436%" y="341" width="0.0801%" height="15" fill="rgb(208,174,49)" fg:x="369" fg:w="1"/><text x="29.7936%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.5436%" y="325" width="0.0801%" height="15" fill="rgb(233,191,51)" fg:x="369" fg:w="1"/><text x="29.7936%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.5436%" y="309" width="0.0801%" height="15" fill="rgb(222,134,10)" fg:x="369" fg:w="1"/><text x="29.7936%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.5436%" y="293" width="0.0801%" height="15" fill="rgb(230,226,20)" fg:x="369" fg:w="1"/><text x="29.7936%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.5436%" y="277" width="0.0801%" height="15" fill="rgb(251,111,25)" fg:x="369" fg:w="1"/><text x="29.7936%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.5436%" y="261" width="0.0801%" height="15" fill="rgb(224,40,46)" fg:x="369" fg:w="1"/><text x="29.7936%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="29.5436%" y="245" width="0.0801%" height="15" fill="rgb(236,108,47)" fg:x="369" fg:w="1"/><text x="29.7936%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="29.5436%" y="229" width="0.0801%" height="15" fill="rgb(234,93,0)" fg:x="369" fg:w="1"/><text x="29.7936%" y="239.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="29.5436%" y="389" width="0.1601%" height="15" fill="rgb(224,213,32)" fg:x="369" fg:w="2"/><text x="29.7936%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="29.6237%" y="373" width="0.0801%" height="15" fill="rgb(251,11,48)" fg:x="370" fg:w="1"/><text x="29.8737%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.6237%" y="357" width="0.0801%" height="15" fill="rgb(236,173,5)" fg:x="370" fg:w="1"/><text x="29.8737%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="29.6237%" y="341" width="0.0801%" height="15" fill="rgb(230,95,12)" fg:x="370" fg:w="1"/><text x="29.8737%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.6237%" y="325" width="0.0801%" height="15" fill="rgb(232,209,1)" fg:x="370" fg:w="1"/><text x="29.8737%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.7038%" y="357" width="0.0801%" height="15" fill="rgb(232,6,1)" fg:x="371" fg:w="1"/><text x="29.9538%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.7038%" y="341" width="0.0801%" height="15" fill="rgb(210,224,50)" fg:x="371" fg:w="1"/><text x="29.9538%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.7038%" y="325" width="0.0801%" height="15" fill="rgb(228,127,35)" fg:x="371" fg:w="1"/><text x="29.9538%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.7038%" y="309" width="0.0801%" height="15" fill="rgb(245,102,45)" fg:x="371" fg:w="1"/><text x="29.9538%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.7038%" y="293" width="0.0801%" height="15" fill="rgb(214,1,49)" fg:x="371" fg:w="1"/><text x="29.9538%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.7038%" y="277" width="0.0801%" height="15" fill="rgb(226,163,40)" fg:x="371" fg:w="1"/><text x="29.9538%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.7038%" y="261" width="0.0801%" height="15" fill="rgb(239,212,28)" fg:x="371" fg:w="1"/><text x="29.9538%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.7038%" y="245" width="0.0801%" height="15" fill="rgb(220,20,13)" fg:x="371" fg:w="1"/><text x="29.9538%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.7038%" y="229" width="0.0801%" height="15" fill="rgb(210,164,35)" fg:x="371" fg:w="1"/><text x="29.9538%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.7038%" y="213" width="0.0801%" height="15" fill="rgb(248,109,41)" fg:x="371" fg:w="1"/><text x="29.9538%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="29.7038%" y="197" width="0.0801%" height="15" fill="rgb(238,23,50)" fg:x="371" fg:w="1"/><text x="29.9538%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="29.7038%" y="181" width="0.0801%" height="15" fill="rgb(211,48,49)" fg:x="371" fg:w="1"/><text x="29.9538%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="29.7038%" y="165" width="0.0801%" height="15" fill="rgb(223,36,21)" fg:x="371" fg:w="1"/><text x="29.9538%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="29.7038%" y="149" width="0.0801%" height="15" fill="rgb(207,123,46)" fg:x="371" fg:w="1"/><text x="29.9538%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="29.8639%" y="293" width="0.1601%" height="15" fill="rgb(240,218,32)" fg:x="373" fg:w="2"/><text x="30.1139%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.9440%" y="277" width="0.0801%" height="15" fill="rgb(252,5,43)" fg:x="374" fg:w="1"/><text x="30.1940%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (5 samples, 0.40%)</title><rect x="29.7038%" y="389" width="0.4003%" height="15" fill="rgb(252,84,19)" fg:x="371" fg:w="5"/><text x="29.9538%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="29.7038%" y="373" width="0.4003%" height="15" fill="rgb(243,152,39)" fg:x="371" fg:w="5"/><text x="29.9538%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="29.7838%" y="357" width="0.3203%" height="15" fill="rgb(234,160,15)" fg:x="372" fg:w="4"/><text x="30.0338%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="29.7838%" y="341" width="0.3203%" height="15" fill="rgb(237,34,20)" fg:x="372" fg:w="4"/><text x="30.0338%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="29.7838%" y="325" width="0.3203%" height="15" fill="rgb(229,97,13)" fg:x="372" fg:w="4"/><text x="30.0338%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="29.7838%" y="309" width="0.3203%" height="15" fill="rgb(234,71,50)" fg:x="372" fg:w="4"/><text x="30.0338%" y="319.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="30.0240%" y="293" width="0.0801%" height="15" fill="rgb(253,155,4)" fg:x="375" fg:w="1"/><text x="30.2740%" y="303.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="30.1041%" y="389" width="0.0801%" height="15" fill="rgb(222,185,37)" fg:x="376" fg:w="1"/><text x="30.3541%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.2642%" y="341" width="0.0801%" height="15" fill="rgb(251,177,13)" fg:x="378" fg:w="1"/><text x="30.5142%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="30.1841%" y="373" width="0.2402%" height="15" fill="rgb(250,179,40)" fg:x="377" fg:w="3"/><text x="30.4341%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="30.1841%" y="357" width="0.2402%" height="15" fill="rgb(242,44,2)" fg:x="377" fg:w="3"/><text x="30.4341%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.3443%" y="341" width="0.0801%" height="15" fill="rgb(216,177,13)" fg:x="379" fg:w="1"/><text x="30.5943%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.3443%" y="325" width="0.0801%" height="15" fill="rgb(216,106,43)" fg:x="379" fg:w="1"/><text x="30.5943%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="30.3443%" y="309" width="0.0801%" height="15" fill="rgb(216,183,2)" fg:x="379" fg:w="1"/><text x="30.5943%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="30.3443%" y="293" width="0.0801%" height="15" fill="rgb(249,75,3)" fg:x="379" fg:w="1"/><text x="30.5943%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="30.3443%" y="277" width="0.0801%" height="15" fill="rgb(219,67,39)" fg:x="379" fg:w="1"/><text x="30.5943%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.3443%" y="261" width="0.0801%" height="15" fill="rgb(253,228,2)" fg:x="379" fg:w="1"/><text x="30.5943%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.3443%" y="245" width="0.0801%" height="15" fill="rgb(235,138,27)" fg:x="379" fg:w="1"/><text x="30.5943%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="30.3443%" y="229" width="0.0801%" height="15" fill="rgb(236,97,51)" fg:x="379" fg:w="1"/><text x="30.5943%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="30.3443%" y="213" width="0.0801%" height="15" fill="rgb(240,80,30)" fg:x="379" fg:w="1"/><text x="30.5943%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="30.3443%" y="197" width="0.0801%" height="15" fill="rgb(230,178,19)" fg:x="379" fg:w="1"/><text x="30.5943%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="30.3443%" y="181" width="0.0801%" height="15" fill="rgb(210,190,27)" fg:x="379" fg:w="1"/><text x="30.5943%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.3443%" y="165" width="0.0801%" height="15" fill="rgb(222,107,31)" fg:x="379" fg:w="1"/><text x="30.5943%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.4243%" y="373" width="0.0801%" height="15" fill="rgb(216,127,34)" fg:x="380" fg:w="1"/><text x="30.6743%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="30.1841%" y="389" width="0.4003%" height="15" fill="rgb(234,116,52)" fg:x="377" fg:w="5"/><text x="30.4341%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="30.5044%" y="373" width="0.0801%" height="15" fill="rgb(222,124,15)" fg:x="381" fg:w="1"/><text x="30.7544%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.5044%" y="357" width="0.0801%" height="15" fill="rgb(231,179,28)" fg:x="381" fg:w="1"/><text x="30.7544%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="30.5044%" y="341" width="0.0801%" height="15" fill="rgb(226,93,45)" fg:x="381" fg:w="1"/><text x="30.7544%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.5044%" y="325" width="0.0801%" height="15" fill="rgb(215,8,51)" fg:x="381" fg:w="1"/><text x="30.7544%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.5044%" y="309" width="0.0801%" height="15" fill="rgb(223,106,5)" fg:x="381" fg:w="1"/><text x="30.7544%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="30.5845%" y="357" width="0.2402%" height="15" fill="rgb(250,191,5)" fg:x="382" fg:w="3"/><text x="30.8345%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="30.5845%" y="341" width="0.2402%" height="15" fill="rgb(242,132,44)" fg:x="382" fg:w="3"/><text x="30.8345%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="30.5845%" y="325" width="0.2402%" height="15" fill="rgb(251,152,29)" fg:x="382" fg:w="3"/><text x="30.8345%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="30.6645%" y="309" width="0.1601%" height="15" fill="rgb(218,179,5)" fg:x="383" fg:w="2"/><text x="30.9145%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="30.6645%" y="293" width="0.1601%" height="15" fill="rgb(227,67,19)" fg:x="383" fg:w="2"/><text x="30.9145%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="30.6645%" y="277" width="0.1601%" height="15" fill="rgb(233,119,31)" fg:x="383" fg:w="2"/><text x="30.9145%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="30.6645%" y="261" width="0.1601%" height="15" fill="rgb(241,120,22)" fg:x="383" fg:w="2"/><text x="30.9145%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="30.6645%" y="245" width="0.1601%" height="15" fill="rgb(224,102,30)" fg:x="383" fg:w="2"/><text x="30.9145%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="30.6645%" y="229" width="0.1601%" height="15" fill="rgb(210,164,37)" fg:x="383" fg:w="2"/><text x="30.9145%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="30.6645%" y="213" width="0.1601%" height="15" fill="rgb(226,191,16)" fg:x="383" fg:w="2"/><text x="30.9145%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="30.6645%" y="197" width="0.1601%" height="15" fill="rgb(214,40,45)" fg:x="383" fg:w="2"/><text x="30.9145%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="30.6645%" y="181" width="0.1601%" height="15" fill="rgb(244,29,26)" fg:x="383" fg:w="2"/><text x="30.9145%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="30.6645%" y="165" width="0.1601%" height="15" fill="rgb(216,16,5)" fg:x="383" fg:w="2"/><text x="30.9145%" y="175.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="30.6645%" y="149" width="0.1601%" height="15" fill="rgb(249,76,35)" fg:x="383" fg:w="2"/><text x="30.9145%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.6645%" y="133" width="0.1601%" height="15" fill="rgb(207,11,44)" fg:x="383" fg:w="2"/><text x="30.9145%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="30.8247%" y="357" width="0.1601%" height="15" fill="rgb(228,190,49)" fg:x="385" fg:w="2"/><text x="31.0747%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="30.9848%" y="357" width="0.0801%" height="15" fill="rgb(214,173,12)" fg:x="387" fg:w="1"/><text x="31.2348%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.9848%" y="341" width="0.0801%" height="15" fill="rgb(218,26,35)" fg:x="387" fg:w="1"/><text x="31.2348%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.56%)</title><rect x="30.5845%" y="373" width="0.5604%" height="15" fill="rgb(220,200,19)" fg:x="382" fg:w="7"/><text x="30.8345%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="31.0649%" y="357" width="0.0801%" height="15" fill="rgb(239,95,49)" fg:x="388" fg:w="1"/><text x="31.3149%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.0649%" y="341" width="0.0801%" height="15" fill="rgb(235,85,53)" fg:x="388" fg:w="1"/><text x="31.3149%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="31.0649%" y="325" width="0.0801%" height="15" fill="rgb(233,133,31)" fg:x="388" fg:w="1"/><text x="31.3149%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.0649%" y="309" width="0.0801%" height="15" fill="rgb(218,25,20)" fg:x="388" fg:w="1"/><text x="31.3149%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="31.0649%" y="293" width="0.0801%" height="15" fill="rgb(252,210,38)" fg:x="388" fg:w="1"/><text x="31.3149%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.0649%" y="277" width="0.0801%" height="15" fill="rgb(242,134,21)" fg:x="388" fg:w="1"/><text x="31.3149%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (8 samples, 0.64%)</title><rect x="30.5845%" y="389" width="0.6405%" height="15" fill="rgb(213,28,48)" fg:x="382" fg:w="8"/><text x="30.8345%" y="399.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="31.1449%" y="373" width="0.0801%" height="15" fill="rgb(250,196,2)" fg:x="389" fg:w="1"/><text x="31.3949%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="31.1449%" y="357" width="0.0801%" height="15" fill="rgb(227,5,17)" fg:x="389" fg:w="1"/><text x="31.3949%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="31.1449%" y="341" width="0.0801%" height="15" fill="rgb(221,226,24)" fg:x="389" fg:w="1"/><text x="31.3949%" y="351.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="31.2250%" y="389" width="0.0801%" height="15" fill="rgb(211,5,48)" fg:x="390" fg:w="1"/><text x="31.4750%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="31.2250%" y="373" width="0.0801%" height="15" fill="rgb(219,150,6)" fg:x="390" fg:w="1"/><text x="31.4750%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="31.2250%" y="357" width="0.0801%" height="15" fill="rgb(251,46,16)" fg:x="390" fg:w="1"/><text x="31.4750%" y="367.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="31.3851%" y="341" width="0.0801%" height="15" fill="rgb(220,204,40)" fg:x="392" fg:w="1"/><text x="31.6351%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="31.3851%" y="325" width="0.0801%" height="15" fill="rgb(211,85,2)" fg:x="392" fg:w="1"/><text x="31.6351%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="31.3851%" y="309" width="0.0801%" height="15" fill="rgb(229,17,7)" fg:x="392" fg:w="1"/><text x="31.6351%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="31.3851%" y="293" width="0.0801%" height="15" fill="rgb(239,72,28)" fg:x="392" fg:w="1"/><text x="31.6351%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="31.4652%" y="309" width="0.1601%" height="15" fill="rgb(230,47,54)" fg:x="393" fg:w="2"/><text x="31.7152%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="31.4652%" y="293" width="0.1601%" height="15" fill="rgb(214,50,8)" fg:x="393" fg:w="2"/><text x="31.7152%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="31.4652%" y="277" width="0.1601%" height="15" fill="rgb(216,198,43)" fg:x="393" fg:w="2"/><text x="31.7152%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="31.4652%" y="261" width="0.1601%" height="15" fill="rgb(234,20,35)" fg:x="393" fg:w="2"/><text x="31.7152%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="31.5452%" y="245" width="0.0801%" height="15" fill="rgb(254,45,19)" fg:x="394" fg:w="1"/><text x="31.7952%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="31.6253%" y="293" width="0.0801%" height="15" fill="rgb(219,14,44)" fg:x="395" fg:w="1"/><text x="31.8753%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="31.7054%" y="261" width="0.0801%" height="15" fill="rgb(217,220,26)" fg:x="396" fg:w="1"/><text x="31.9554%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="31.6253%" y="309" width="0.2402%" height="15" fill="rgb(213,158,28)" fg:x="395" fg:w="3"/><text x="31.8753%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="31.7054%" y="293" width="0.1601%" height="15" fill="rgb(252,51,52)" fg:x="396" fg:w="2"/><text x="31.9554%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="31.7054%" y="277" width="0.1601%" height="15" fill="rgb(246,89,16)" fg:x="396" fg:w="2"/><text x="31.9554%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="31.7854%" y="261" width="0.0801%" height="15" fill="rgb(216,158,49)" fg:x="397" fg:w="1"/><text x="32.0354%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.7854%" y="245" width="0.0801%" height="15" fill="rgb(236,107,19)" fg:x="397" fg:w="1"/><text x="32.0354%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.0256%" y="261" width="0.0801%" height="15" fill="rgb(228,185,30)" fg:x="400" fg:w="1"/><text x="32.2756%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="32.1057%" y="261" width="0.0801%" height="15" fill="rgb(246,134,8)" fg:x="401" fg:w="1"/><text x="32.3557%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.1057%" y="245" width="0.0801%" height="15" fill="rgb(214,143,50)" fg:x="401" fg:w="1"/><text x="32.3557%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.2658%" y="229" width="0.0801%" height="15" fill="rgb(228,75,8)" fg:x="403" fg:w="1"/><text x="32.5158%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.12%)</title><rect x="32.2658%" y="245" width="1.1209%" height="15" fill="rgb(207,175,4)" fg:x="403" fg:w="14"/><text x="32.5158%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.04%)</title><rect x="32.3459%" y="229" width="1.0408%" height="15" fill="rgb(205,108,24)" fg:x="404" fg:w="13"/><text x="32.5959%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="33.3867%" y="245" width="0.2402%" height="15" fill="rgb(244,120,49)" fg:x="417" fg:w="3"/><text x="33.6367%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="33.3867%" y="229" width="0.2402%" height="15" fill="rgb(223,47,38)" fg:x="417" fg:w="3"/><text x="33.6367%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.5468%" y="213" width="0.0801%" height="15" fill="rgb(229,179,11)" fg:x="419" fg:w="1"/><text x="33.7968%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="33.9472%" y="149" width="0.1601%" height="15" fill="rgb(231,122,1)" fg:x="424" fg:w="2"/><text x="34.1972%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (58 samples, 4.64%)</title><rect x="33.9472%" y="181" width="4.6437%" height="15" fill="rgb(245,119,9)" fg:x="424" fg:w="58"/><text x="34.1972%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (58 samples, 4.64%)</title><rect x="33.9472%" y="165" width="4.6437%" height="15" fill="rgb(241,163,25)" fg:x="424" fg:w="58"/><text x="34.1972%" y="175.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (56 samples, 4.48%)</title><rect x="34.1073%" y="149" width="4.4836%" height="15" fill="rgb(217,214,3)" fg:x="426" fg:w="56"/><text x="34.3573%" y="159.50">alloc..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 5.04%)</title><rect x="33.6269%" y="229" width="5.0440%" height="15" fill="rgb(240,86,28)" fg:x="420" fg:w="63"/><text x="33.8769%" y="239.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (62 samples, 4.96%)</title><rect x="33.7070%" y="213" width="4.9640%" height="15" fill="rgb(215,47,9)" fg:x="421" fg:w="62"/><text x="33.9570%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (61 samples, 4.88%)</title><rect x="33.7870%" y="197" width="4.8839%" height="15" fill="rgb(252,25,45)" fg:x="422" fg:w="61"/><text x="34.0370%" y="207.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="38.5909%" y="181" width="0.0801%" height="15" fill="rgb(251,164,9)" fg:x="482" fg:w="1"/><text x="38.8409%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.5909%" y="165" width="0.0801%" height="15" fill="rgb(233,194,0)" fg:x="482" fg:w="1"/><text x="38.8409%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.5909%" y="149" width="0.0801%" height="15" fill="rgb(249,111,24)" fg:x="482" fg:w="1"/><text x="38.8409%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.5909%" y="133" width="0.0801%" height="15" fill="rgb(250,223,3)" fg:x="482" fg:w="1"/><text x="38.8409%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.6709%" y="229" width="0.0801%" height="15" fill="rgb(236,178,37)" fg:x="483" fg:w="1"/><text x="38.9209%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="38.7510%" y="213" width="0.0801%" height="15" fill="rgb(241,158,50)" fg:x="484" fg:w="1"/><text x="39.0010%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="38.7510%" y="197" width="0.0801%" height="15" fill="rgb(213,121,41)" fg:x="484" fg:w="1"/><text x="39.0010%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="38.8311%" y="213" width="0.0801%" height="15" fill="rgb(240,92,3)" fg:x="485" fg:w="1"/><text x="39.0811%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="38.9111%" y="213" width="0.0801%" height="15" fill="rgb(205,123,3)" fg:x="486" fg:w="1"/><text x="39.1611%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.9111%" y="197" width="0.0801%" height="15" fill="rgb(205,97,47)" fg:x="486" fg:w="1"/><text x="39.1611%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.9111%" y="181" width="0.0801%" height="15" fill="rgb(247,152,14)" fg:x="486" fg:w="1"/><text x="39.1611%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.9111%" y="165" width="0.0801%" height="15" fill="rgb(248,195,53)" fg:x="486" fg:w="1"/><text x="39.1611%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="38.9912%" y="213" width="0.1601%" height="15" fill="rgb(226,201,16)" fg:x="487" fg:w="2"/><text x="39.2412%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.0713%" y="197" width="0.0801%" height="15" fill="rgb(205,98,0)" fg:x="488" fg:w="1"/><text x="39.3213%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.0713%" y="181" width="0.0801%" height="15" fill="rgb(214,191,48)" fg:x="488" fg:w="1"/><text x="39.3213%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.0713%" y="165" width="0.0801%" height="15" fill="rgb(237,112,39)" fg:x="488" fg:w="1"/><text x="39.3213%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.1513%" y="197" width="0.0801%" height="15" fill="rgb(247,203,27)" fg:x="489" fg:w="1"/><text x="39.4013%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (71 samples, 5.68%)</title><rect x="33.6269%" y="245" width="5.6845%" height="15" fill="rgb(235,124,28)" fg:x="420" fg:w="71"/><text x="33.8769%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="38.7510%" y="229" width="0.5604%" height="15" fill="rgb(208,207,46)" fg:x="484" fg:w="7"/><text x="39.0010%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="39.1513%" y="213" width="0.1601%" height="15" fill="rgb(234,176,4)" fg:x="489" fg:w="2"/><text x="39.4013%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="39.2314%" y="197" width="0.0801%" height="15" fill="rgb(230,133,28)" fg:x="490" fg:w="1"/><text x="39.4814%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.2314%" y="181" width="0.0801%" height="15" fill="rgb(211,137,40)" fg:x="490" fg:w="1"/><text x="39.4814%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.2314%" y="165" width="0.0801%" height="15" fill="rgb(254,35,13)" fg:x="490" fg:w="1"/><text x="39.4814%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.2314%" y="149" width="0.0801%" height="15" fill="rgb(225,49,51)" fg:x="490" fg:w="1"/><text x="39.4814%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (90 samples, 7.21%)</title><rect x="32.1857%" y="261" width="7.2058%" height="15" fill="rgb(251,10,15)" fg:x="402" fg:w="90"/><text x="32.4357%" y="271.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="39.3114%" y="245" width="0.0801%" height="15" fill="rgb(228,207,15)" fg:x="491" fg:w="1"/><text x="39.5614%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="39.3114%" y="229" width="0.0801%" height="15" fill="rgb(241,99,19)" fg:x="491" fg:w="1"/><text x="39.5614%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="39.3114%" y="213" width="0.0801%" height="15" fill="rgb(207,104,49)" fg:x="491" fg:w="1"/><text x="39.5614%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="39.3915%" y="213" width="0.0801%" height="15" fill="rgb(234,99,18)" fg:x="492" fg:w="1"/><text x="39.6415%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="39.4716%" y="213" width="0.0801%" height="15" fill="rgb(213,191,49)" fg:x="493" fg:w="1"/><text x="39.7216%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="39.5516%" y="213" width="0.0801%" height="15" fill="rgb(210,226,19)" fg:x="494" fg:w="1"/><text x="39.8016%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="39.5516%" y="197" width="0.0801%" height="15" fill="rgb(229,97,18)" fg:x="494" fg:w="1"/><text x="39.8016%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="39.5516%" y="181" width="0.0801%" height="15" fill="rgb(211,167,15)" fg:x="494" fg:w="1"/><text x="39.8016%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.6317%" y="197" width="0.0801%" height="15" fill="rgb(210,169,34)" fg:x="495" fg:w="1"/><text x="39.8817%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.6317%" y="181" width="0.0801%" height="15" fill="rgb(241,121,31)" fg:x="495" fg:w="1"/><text x="39.8817%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.6317%" y="165" width="0.0801%" height="15" fill="rgb(232,40,11)" fg:x="495" fg:w="1"/><text x="39.8817%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="39.3915%" y="229" width="0.4003%" height="15" fill="rgb(205,86,26)" fg:x="492" fg:w="5"/><text x="39.6415%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="39.6317%" y="213" width="0.1601%" height="15" fill="rgb(231,126,28)" fg:x="495" fg:w="2"/><text x="39.8817%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="39.7118%" y="197" width="0.0801%" height="15" fill="rgb(219,221,18)" fg:x="496" fg:w="1"/><text x="39.9618%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="39.7118%" y="181" width="0.0801%" height="15" fill="rgb(211,40,0)" fg:x="496" fg:w="1"/><text x="39.9618%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="39.3915%" y="261" width="0.4804%" height="15" fill="rgb(239,85,43)" fg:x="492" fg:w="6"/><text x="39.6415%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="39.3915%" y="245" width="0.4804%" height="15" fill="rgb(231,55,21)" fg:x="492" fg:w="6"/><text x="39.6415%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="39.7918%" y="229" width="0.0801%" height="15" fill="rgb(225,184,43)" fg:x="497" fg:w="1"/><text x="40.0418%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.7918%" y="213" width="0.0801%" height="15" fill="rgb(251,158,41)" fg:x="497" fg:w="1"/><text x="40.0418%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="39.9520%" y="213" width="0.0801%" height="15" fill="rgb(234,159,37)" fg:x="499" fg:w="1"/><text x="40.2020%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="39.9520%" y="197" width="0.0801%" height="15" fill="rgb(216,204,22)" fg:x="499" fg:w="1"/><text x="40.2020%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="39.8719%" y="229" width="0.2402%" height="15" fill="rgb(214,17,3)" fg:x="498" fg:w="3"/><text x="40.1219%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="40.0320%" y="213" width="0.0801%" height="15" fill="rgb(212,111,17)" fg:x="500" fg:w="1"/><text x="40.2820%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="40.0320%" y="197" width="0.0801%" height="15" fill="rgb(221,157,24)" fg:x="500" fg:w="1"/><text x="40.2820%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (104 samples, 8.33%)</title><rect x="31.8655%" y="309" width="8.3267%" height="15" fill="rgb(252,16,13)" fg:x="398" fg:w="104"/><text x="32.1155%" y="319.50">regex::regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (104 samples, 8.33%)</title><rect x="31.8655%" y="293" width="8.3267%" height="15" fill="rgb(221,62,2)" fg:x="398" fg:w="104"/><text x="32.1155%" y="303.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (103 samples, 8.25%)</title><rect x="31.9456%" y="277" width="8.2466%" height="15" fill="rgb(247,87,22)" fg:x="399" fg:w="103"/><text x="32.1956%" y="287.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="39.8719%" y="261" width="0.3203%" height="15" fill="rgb(215,73,9)" fg:x="498" fg:w="4"/><text x="40.1219%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="39.8719%" y="245" width="0.3203%" height="15" fill="rgb(207,175,33)" fg:x="498" fg:w="4"/><text x="40.1219%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="40.1121%" y="229" width="0.0801%" height="15" fill="rgb(243,129,54)" fg:x="501" fg:w="1"/><text x="40.3621%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.1922%" y="229" width="0.0801%" height="15" fill="rgb(227,119,45)" fg:x="502" fg:w="1"/><text x="40.4422%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.1922%" y="213" width="0.0801%" height="15" fill="rgb(205,109,36)" fg:x="502" fg:w="1"/><text x="40.4422%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.1922%" y="197" width="0.0801%" height="15" fill="rgb(205,6,39)" fg:x="502" fg:w="1"/><text x="40.4422%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (111 samples, 8.89%)</title><rect x="31.4652%" y="325" width="8.8871%" height="15" fill="rgb(221,32,16)" fg:x="393" fg:w="111"/><text x="31.7152%" y="335.50">indefinite::h..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="40.1922%" y="309" width="0.1601%" height="15" fill="rgb(228,144,50)" fg:x="502" fg:w="2"/><text x="40.4422%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="40.1922%" y="293" width="0.1601%" height="15" fill="rgb(229,201,53)" fg:x="502" fg:w="2"/><text x="40.4422%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="40.1922%" y="277" width="0.1601%" height="15" fill="rgb(249,153,27)" fg:x="502" fg:w="2"/><text x="40.4422%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="40.1922%" y="261" width="0.1601%" height="15" fill="rgb(227,106,25)" fg:x="502" fg:w="2"/><text x="40.4422%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="40.1922%" y="245" width="0.1601%" height="15" fill="rgb(230,65,29)" fg:x="502" fg:w="2"/><text x="40.4422%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.2722%" y="229" width="0.0801%" height="15" fill="rgb(221,57,46)" fg:x="503" fg:w="1"/><text x="40.5222%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.2722%" y="213" width="0.0801%" height="15" fill="rgb(229,161,17)" fg:x="503" fg:w="1"/><text x="40.5222%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.2722%" y="197" width="0.0801%" height="15" fill="rgb(222,213,11)" fg:x="503" fg:w="1"/><text x="40.5222%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.3523%" y="245" width="0.0801%" height="15" fill="rgb(235,35,13)" fg:x="504" fg:w="1"/><text x="40.6023%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.3523%" y="229" width="0.0801%" height="15" fill="rgb(233,158,34)" fg:x="504" fg:w="1"/><text x="40.6023%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="40.3523%" y="261" width="0.1601%" height="15" fill="rgb(215,151,48)" fg:x="504" fg:w="2"/><text x="40.6023%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.4323%" y="245" width="0.0801%" height="15" fill="rgb(229,84,14)" fg:x="505" fg:w="1"/><text x="40.6823%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="40.3523%" y="277" width="0.2402%" height="15" fill="rgb(229,68,14)" fg:x="504" fg:w="3"/><text x="40.6023%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="40.5124%" y="261" width="0.0801%" height="15" fill="rgb(243,106,26)" fg:x="506" fg:w="1"/><text x="40.7624%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="40.5124%" y="245" width="0.0801%" height="15" fill="rgb(206,45,38)" fg:x="506" fg:w="1"/><text x="40.7624%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="40.3523%" y="309" width="0.3203%" height="15" fill="rgb(226,6,15)" fg:x="504" fg:w="4"/><text x="40.6023%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="40.3523%" y="293" width="0.3203%" height="15" fill="rgb(232,22,54)" fg:x="504" fg:w="4"/><text x="40.6023%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="40.5925%" y="277" width="0.0801%" height="15" fill="rgb(229,222,32)" fg:x="507" fg:w="1"/><text x="40.8425%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="40.5925%" y="261" width="0.0801%" height="15" fill="rgb(228,62,29)" fg:x="507" fg:w="1"/><text x="40.8425%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.5925%" y="245" width="0.0801%" height="15" fill="rgb(251,103,34)" fg:x="507" fg:w="1"/><text x="40.8425%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.7526%" y="245" width="0.0801%" height="15" fill="rgb(233,12,30)" fg:x="509" fg:w="1"/><text x="41.0026%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="40.7526%" y="229" width="0.0801%" height="15" fill="rgb(238,52,0)" fg:x="509" fg:w="1"/><text x="41.0026%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="40.7526%" y="213" width="0.0801%" height="15" fill="rgb(223,98,5)" fg:x="509" fg:w="1"/><text x="41.0026%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="40.6725%" y="293" width="0.2402%" height="15" fill="rgb(228,75,37)" fg:x="508" fg:w="3"/><text x="40.9225%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="40.6725%" y="277" width="0.2402%" height="15" fill="rgb(205,115,49)" fg:x="508" fg:w="3"/><text x="40.9225%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="40.7526%" y="261" width="0.1601%" height="15" fill="rgb(250,154,43)" fg:x="509" fg:w="2"/><text x="41.0026%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="40.8327%" y="245" width="0.0801%" height="15" fill="rgb(226,43,29)" fg:x="510" fg:w="1"/><text x="41.0827%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="40.9127%" y="245" width="0.4003%" height="15" fill="rgb(249,228,39)" fg:x="511" fg:w="5"/><text x="41.1627%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="40.9127%" y="229" width="0.4003%" height="15" fill="rgb(216,79,43)" fg:x="511" fg:w="5"/><text x="41.1627%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="41.1529%" y="213" width="0.1601%" height="15" fill="rgb(228,95,12)" fg:x="514" fg:w="2"/><text x="41.4029%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="41.1529%" y="197" width="0.1601%" height="15" fill="rgb(249,221,15)" fg:x="514" fg:w="2"/><text x="41.4029%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="41.1529%" y="181" width="0.1601%" height="15" fill="rgb(233,34,13)" fg:x="514" fg:w="2"/><text x="41.4029%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (10 samples, 0.80%)</title><rect x="40.6725%" y="309" width="0.8006%" height="15" fill="rgb(214,103,39)" fg:x="508" fg:w="10"/><text x="40.9225%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="40.9127%" y="293" width="0.5604%" height="15" fill="rgb(251,126,39)" fg:x="511" fg:w="7"/><text x="41.1627%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="40.9127%" y="277" width="0.5604%" height="15" fill="rgb(214,216,36)" fg:x="511" fg:w="7"/><text x="41.1627%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="40.9127%" y="261" width="0.5604%" height="15" fill="rgb(220,221,8)" fg:x="511" fg:w="7"/><text x="41.1627%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (2 samples, 0.16%)</title><rect x="41.3131%" y="245" width="0.1601%" height="15" fill="rgb(240,216,3)" fg:x="516" fg:w="2"/><text x="41.5631%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="41.3931%" y="229" width="0.0801%" height="15" fill="rgb(232,218,17)" fg:x="517" fg:w="1"/><text x="41.6431%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.5532%" y="261" width="0.0801%" height="15" fill="rgb(229,163,45)" fg:x="519" fg:w="1"/><text x="41.8032%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.5532%" y="245" width="0.0801%" height="15" fill="rgb(231,110,42)" fg:x="519" fg:w="1"/><text x="41.8032%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.5532%" y="229" width="0.0801%" height="15" fill="rgb(208,170,48)" fg:x="519" fg:w="1"/><text x="41.8032%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="41.6333%" y="261" width="0.0801%" height="15" fill="rgb(239,116,25)" fg:x="520" fg:w="1"/><text x="41.8833%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.6333%" y="245" width="0.0801%" height="15" fill="rgb(219,200,50)" fg:x="520" fg:w="1"/><text x="41.8833%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="41.6333%" y="229" width="0.0801%" height="15" fill="rgb(245,200,0)" fg:x="520" fg:w="1"/><text x="41.8833%" y="239.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.6333%" y="213" width="0.0801%" height="15" fill="rgb(245,119,33)" fg:x="520" fg:w="1"/><text x="41.8833%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="41.7934%" y="229" width="0.1601%" height="15" fill="rgb(231,125,12)" fg:x="522" fg:w="2"/><text x="42.0434%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (21 samples, 1.68%)</title><rect x="41.7934%" y="245" width="1.6813%" height="15" fill="rgb(216,96,41)" fg:x="522" fg:w="21"/><text x="42.0434%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (19 samples, 1.52%)</title><rect x="41.9536%" y="229" width="1.5212%" height="15" fill="rgb(248,43,45)" fg:x="524" fg:w="19"/><text x="42.2036%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.3947%" y="213" width="0.0801%" height="15" fill="rgb(217,222,7)" fg:x="542" fg:w="1"/><text x="43.6447%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="43.4748%" y="245" width="0.3203%" height="15" fill="rgb(233,28,6)" fg:x="543" fg:w="4"/><text x="43.7248%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="43.4748%" y="229" width="0.3203%" height="15" fill="rgb(231,218,15)" fg:x="543" fg:w="4"/><text x="43.7248%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="43.7150%" y="213" width="0.0801%" height="15" fill="rgb(226,171,48)" fg:x="546" fg:w="1"/><text x="43.9650%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="43.7150%" y="197" width="0.0801%" height="15" fill="rgb(235,201,9)" fg:x="546" fg:w="1"/><text x="43.9650%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.7150%" y="181" width="0.0801%" height="15" fill="rgb(217,80,15)" fg:x="546" fg:w="1"/><text x="43.9650%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="43.8751%" y="213" width="0.0801%" height="15" fill="rgb(219,152,8)" fg:x="548" fg:w="1"/><text x="44.1251%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="43.8751%" y="197" width="0.0801%" height="15" fill="rgb(243,107,38)" fg:x="548" fg:w="1"/><text x="44.1251%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.8751%" y="181" width="0.0801%" height="15" fill="rgb(231,17,5)" fg:x="548" fg:w="1"/><text x="44.1251%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="43.9552%" y="213" width="0.1601%" height="15" fill="rgb(209,25,54)" fg:x="549" fg:w="2"/><text x="44.2052%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="43.9552%" y="197" width="0.1601%" height="15" fill="rgb(219,0,2)" fg:x="549" fg:w="2"/><text x="44.2052%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.0352%" y="181" width="0.0801%" height="15" fill="rgb(246,9,5)" fg:x="550" fg:w="1"/><text x="44.2852%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.0352%" y="165" width="0.0801%" height="15" fill="rgb(226,159,4)" fg:x="550" fg:w="1"/><text x="44.2852%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.0352%" y="149" width="0.0801%" height="15" fill="rgb(219,175,34)" fg:x="550" fg:w="1"/><text x="44.2852%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="44.1153%" y="213" width="0.3203%" height="15" fill="rgb(236,10,46)" fg:x="551" fg:w="4"/><text x="44.3653%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="44.1153%" y="197" width="0.3203%" height="15" fill="rgb(240,211,16)" fg:x="551" fg:w="4"/><text x="44.3653%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="44.1153%" y="181" width="0.3203%" height="15" fill="rgb(205,3,43)" fg:x="551" fg:w="4"/><text x="44.3653%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (9 samples, 0.72%)</title><rect x="43.7950%" y="245" width="0.7206%" height="15" fill="rgb(245,7,22)" fg:x="547" fg:w="9"/><text x="44.0450%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="43.8751%" y="229" width="0.6405%" height="15" fill="rgb(239,132,32)" fg:x="548" fg:w="8"/><text x="44.1251%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="44.4355%" y="213" width="0.0801%" height="15" fill="rgb(228,202,34)" fg:x="555" fg:w="1"/><text x="44.6855%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="44.5957%" y="197" width="0.0801%" height="15" fill="rgb(254,200,22)" fg:x="557" fg:w="1"/><text x="44.8457%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.5957%" y="181" width="0.0801%" height="15" fill="rgb(219,10,39)" fg:x="557" fg:w="1"/><text x="44.8457%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.5957%" y="165" width="0.0801%" height="15" fill="rgb(226,210,39)" fg:x="557" fg:w="1"/><text x="44.8457%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.5957%" y="149" width="0.0801%" height="15" fill="rgb(208,219,16)" fg:x="557" fg:w="1"/><text x="44.8457%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="44.6757%" y="165" width="0.0801%" height="15" fill="rgb(216,158,51)" fg:x="558" fg:w="1"/><text x="44.9257%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="44.6757%" y="149" width="0.0801%" height="15" fill="rgb(233,14,44)" fg:x="558" fg:w="1"/><text x="44.9257%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="45.5564%" y="133" width="0.1601%" height="15" fill="rgb(237,97,39)" fg:x="569" fg:w="2"/><text x="45.8064%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.7166%" y="133" width="0.0801%" height="15" fill="rgb(218,198,43)" fg:x="571" fg:w="1"/><text x="45.9666%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.40%)</title><rect x="45.7966%" y="133" width="0.4003%" height="15" fill="rgb(231,104,20)" fg:x="572" fg:w="5"/><text x="46.0466%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="46.0368%" y="117" width="0.1601%" height="15" fill="rgb(254,36,13)" fg:x="575" fg:w="2"/><text x="46.2868%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="46.0368%" y="101" width="0.1601%" height="15" fill="rgb(248,14,50)" fg:x="575" fg:w="2"/><text x="46.2868%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="46.0368%" y="85" width="0.1601%" height="15" fill="rgb(217,107,29)" fg:x="575" fg:w="2"/><text x="46.2868%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="46.1970%" y="133" width="0.2402%" height="15" fill="rgb(251,169,33)" fg:x="577" fg:w="3"/><text x="46.4470%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.3571%" y="117" width="0.0801%" height="15" fill="rgb(217,108,32)" fg:x="579" fg:w="1"/><text x="46.6071%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.3571%" y="101" width="0.0801%" height="15" fill="rgb(219,66,42)" fg:x="579" fg:w="1"/><text x="46.6071%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.3571%" y="85" width="0.0801%" height="15" fill="rgb(206,180,7)" fg:x="579" fg:w="1"/><text x="46.6071%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.5973%" y="101" width="0.0801%" height="15" fill="rgb(208,226,31)" fg:x="582" fg:w="1"/><text x="46.8473%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="46.6773%" y="101" width="0.1601%" height="15" fill="rgb(218,26,49)" fg:x="583" fg:w="2"/><text x="46.9273%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.7574%" y="85" width="0.0801%" height="15" fill="rgb(233,197,48)" fg:x="584" fg:w="1"/><text x="47.0074%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.7574%" y="69" width="0.0801%" height="15" fill="rgb(252,181,51)" fg:x="584" fg:w="1"/><text x="47.0074%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (10 samples, 0.80%)</title><rect x="46.4371%" y="133" width="0.8006%" height="15" fill="rgb(253,90,19)" fg:x="580" fg:w="10"/><text x="46.6871%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (9 samples, 0.72%)</title><rect x="46.5172%" y="117" width="0.7206%" height="15" fill="rgb(215,171,30)" fg:x="581" fg:w="9"/><text x="46.7672%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="46.8375%" y="101" width="0.4003%" height="15" fill="rgb(214,222,9)" fg:x="585" fg:w="5"/><text x="47.0875%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="47.1577%" y="85" width="0.0801%" height="15" fill="rgb(223,3,22)" fg:x="589" fg:w="1"/><text x="47.4077%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (70 samples, 5.60%)</title><rect x="47.2378%" y="133" width="5.6045%" height="15" fill="rgb(225,196,46)" fg:x="590" fg:w="70"/><text x="47.4878%" y="143.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (70 samples, 5.60%)</title><rect x="47.2378%" y="117" width="5.6045%" height="15" fill="rgb(209,110,37)" fg:x="590" fg:w="70"/><text x="47.4878%" y="127.50">regex_a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (70 samples, 5.60%)</title><rect x="47.2378%" y="101" width="5.6045%" height="15" fill="rgb(249,89,12)" fg:x="590" fg:w="70"/><text x="47.4878%" y="111.50">alloc::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="52.8423%" y="133" width="0.2402%" height="15" fill="rgb(226,27,33)" fg:x="660" fg:w="3"/><text x="53.0923%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (109 samples, 8.73%)</title><rect x="44.5156%" y="229" width="8.7270%" height="15" fill="rgb(213,82,22)" fg:x="556" fg:w="109"/><text x="44.7656%" y="239.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (109 samples, 8.73%)</title><rect x="44.5156%" y="213" width="8.7270%" height="15" fill="rgb(248,140,0)" fg:x="556" fg:w="109"/><text x="44.7656%" y="223.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (107 samples, 8.57%)</title><rect x="44.6757%" y="197" width="8.5669%" height="15" fill="rgb(228,106,3)" fg:x="558" fg:w="107"/><text x="44.9257%" y="207.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (107 samples, 8.57%)</title><rect x="44.6757%" y="181" width="8.5669%" height="15" fill="rgb(209,23,37)" fg:x="558" fg:w="107"/><text x="44.9257%" y="191.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (106 samples, 8.49%)</title><rect x="44.7558%" y="165" width="8.4868%" height="15" fill="rgb(241,93,50)" fg:x="559" fg:w="106"/><text x="45.0058%" y="175.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (106 samples, 8.49%)</title><rect x="44.7558%" y="149" width="8.4868%" height="15" fill="rgb(253,46,43)" fg:x="559" fg:w="106"/><text x="45.0058%" y="159.50">regex_automa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="53.0825%" y="133" width="0.1601%" height="15" fill="rgb(226,206,43)" fg:x="663" fg:w="2"/><text x="53.3325%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="53.2426%" y="213" width="0.3203%" height="15" fill="rgb(217,54,7)" fg:x="665" fg:w="4"/><text x="53.4926%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.4828%" y="197" width="0.0801%" height="15" fill="rgb(223,5,52)" fg:x="668" fg:w="1"/><text x="53.7328%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.4828%" y="181" width="0.0801%" height="15" fill="rgb(206,52,46)" fg:x="668" fg:w="1"/><text x="53.7328%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.4828%" y="165" width="0.0801%" height="15" fill="rgb(253,136,11)" fg:x="668" fg:w="1"/><text x="53.7328%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.8030%" y="197" width="0.0801%" height="15" fill="rgb(208,106,33)" fg:x="672" fg:w="1"/><text x="54.0530%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.8030%" y="181" width="0.0801%" height="15" fill="rgb(206,54,4)" fg:x="672" fg:w="1"/><text x="54.0530%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.8030%" y="165" width="0.0801%" height="15" fill="rgb(213,3,15)" fg:x="672" fg:w="1"/><text x="54.0530%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (153 samples, 12.25%)</title><rect x="41.7134%" y="261" width="12.2498%" height="15" fill="rgb(252,211,39)" fg:x="521" fg:w="153"/><text x="41.9634%" y="271.50">regex_automata::me..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (118 samples, 9.45%)</title><rect x="44.5156%" y="245" width="9.4476%" height="15" fill="rgb(223,6,36)" fg:x="556" fg:w="118"/><text x="44.7656%" y="255.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="53.2426%" y="229" width="0.7206%" height="15" fill="rgb(252,169,45)" fg:x="665" fg:w="9"/><text x="53.4926%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="53.5629%" y="213" width="0.4003%" height="15" fill="rgb(212,48,26)" fg:x="669" fg:w="5"/><text x="53.8129%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.8831%" y="197" width="0.0801%" height="15" fill="rgb(251,102,48)" fg:x="673" fg:w="1"/><text x="54.1331%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="53.9632%" y="229" width="0.0801%" height="15" fill="rgb(243,208,16)" fg:x="674" fg:w="1"/><text x="54.2132%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="53.9632%" y="213" width="0.0801%" height="15" fill="rgb(219,96,24)" fg:x="674" fg:w="1"/><text x="54.2132%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.9632%" y="197" width="0.0801%" height="15" fill="rgb(219,33,29)" fg:x="674" fg:w="1"/><text x="54.2132%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.9632%" y="181" width="0.0801%" height="15" fill="rgb(223,176,5)" fg:x="674" fg:w="1"/><text x="54.2132%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.9632%" y="165" width="0.0801%" height="15" fill="rgb(228,140,14)" fg:x="674" fg:w="1"/><text x="54.2132%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="54.0432%" y="213" width="0.0801%" height="15" fill="rgb(217,179,31)" fg:x="675" fg:w="1"/><text x="54.2932%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="54.0432%" y="229" width="0.1601%" height="15" fill="rgb(230,9,30)" fg:x="675" fg:w="2"/><text x="54.2932%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="54.1233%" y="213" width="0.0801%" height="15" fill="rgb(230,136,20)" fg:x="676" fg:w="1"/><text x="54.3733%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="53.9632%" y="261" width="0.3203%" height="15" fill="rgb(215,210,22)" fg:x="674" fg:w="4"/><text x="54.2132%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="53.9632%" y="245" width="0.3203%" height="15" fill="rgb(218,43,5)" fg:x="674" fg:w="4"/><text x="54.2132%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="54.2034%" y="229" width="0.0801%" height="15" fill="rgb(216,11,5)" fg:x="677" fg:w="1"/><text x="54.4534%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="54.3635%" y="229" width="0.0801%" height="15" fill="rgb(209,82,29)" fg:x="679" fg:w="1"/><text x="54.6135%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="54.3635%" y="213" width="0.0801%" height="15" fill="rgb(244,115,12)" fg:x="679" fg:w="1"/><text x="54.6135%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="54.4436%" y="229" width="0.0801%" height="15" fill="rgb(222,82,18)" fg:x="680" fg:w="1"/><text x="54.6936%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="54.4436%" y="213" width="0.0801%" height="15" fill="rgb(249,227,8)" fg:x="680" fg:w="1"/><text x="54.6936%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.4436%" y="197" width="0.0801%" height="15" fill="rgb(253,141,45)" fg:x="680" fg:w="1"/><text x="54.6936%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (178 samples, 14.25%)</title><rect x="40.3523%" y="325" width="14.2514%" height="15" fill="rgb(234,184,4)" fg:x="504" fg:w="178"/><text x="40.6023%" y="335.50">indefinite::rules::num..</text></g><g><title>regex::regex::string::Regex::new (164 samples, 13.13%)</title><rect x="41.4732%" y="309" width="13.1305%" height="15" fill="rgb(218,194,23)" fg:x="518" fg:w="164"/><text x="41.7232%" y="319.50">regex::regex::string..</text></g><g><title>regex::builders::string::RegexBuilder::build (164 samples, 13.13%)</title><rect x="41.4732%" y="293" width="13.1305%" height="15" fill="rgb(235,66,41)" fg:x="518" fg:w="164"/><text x="41.7232%" y="303.50">regex::builders::str..</text></g><g><title>regex_automata::meta::regex::Builder::build (164 samples, 13.13%)</title><rect x="41.4732%" y="277" width="13.1305%" height="15" fill="rgb(245,217,1)" fg:x="518" fg:w="164"/><text x="41.7232%" y="287.50">regex_automata::meta..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="54.2834%" y="261" width="0.3203%" height="15" fill="rgb(229,91,1)" fg:x="678" fg:w="4"/><text x="54.5334%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="54.2834%" y="245" width="0.3203%" height="15" fill="rgb(207,101,30)" fg:x="678" fg:w="4"/><text x="54.5334%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="54.5236%" y="229" width="0.0801%" height="15" fill="rgb(223,82,49)" fg:x="681" fg:w="1"/><text x="54.7736%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="54.6037%" y="293" width="0.0801%" height="15" fill="rgb(218,167,17)" fg:x="682" fg:w="1"/><text x="54.8537%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="54.6037%" y="277" width="0.0801%" height="15" fill="rgb(208,103,14)" fg:x="682" fg:w="1"/><text x="54.8537%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="54.6037%" y="261" width="0.0801%" height="15" fill="rgb(238,20,8)" fg:x="682" fg:w="1"/><text x="54.8537%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="54.6037%" y="245" width="0.0801%" height="15" fill="rgb(218,80,54)" fg:x="682" fg:w="1"/><text x="54.8537%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="54.9239%" y="245" width="0.1601%" height="15" fill="rgb(240,144,17)" fg:x="686" fg:w="2"/><text x="55.1739%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="54.9239%" y="229" width="0.1601%" height="15" fill="rgb(245,27,50)" fg:x="686" fg:w="2"/><text x="55.1739%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="54.9239%" y="213" width="0.1601%" height="15" fill="rgb(251,51,7)" fg:x="686" fg:w="2"/><text x="55.1739%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="54.9239%" y="197" width="0.1601%" height="15" fill="rgb(245,217,29)" fg:x="686" fg:w="2"/><text x="55.1739%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="54.9239%" y="181" width="0.1601%" height="15" fill="rgb(221,176,29)" fg:x="686" fg:w="2"/><text x="55.1739%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="54.9239%" y="165" width="0.1601%" height="15" fill="rgb(212,180,24)" fg:x="686" fg:w="2"/><text x="55.1739%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="55.0841%" y="245" width="0.0801%" height="15" fill="rgb(254,24,2)" fg:x="688" fg:w="1"/><text x="55.3341%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.0841%" y="229" width="0.0801%" height="15" fill="rgb(230,100,2)" fg:x="688" fg:w="1"/><text x="55.3341%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="55.0841%" y="213" width="0.0801%" height="15" fill="rgb(219,142,25)" fg:x="688" fg:w="1"/><text x="55.3341%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.0841%" y="197" width="0.0801%" height="15" fill="rgb(240,73,43)" fg:x="688" fg:w="1"/><text x="55.3341%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="55.0841%" y="181" width="0.0801%" height="15" fill="rgb(214,114,15)" fg:x="688" fg:w="1"/><text x="55.3341%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="55.1641%" y="229" width="0.0801%" height="15" fill="rgb(207,130,4)" fg:x="689" fg:w="1"/><text x="55.4141%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="55.1641%" y="213" width="0.0801%" height="15" fill="rgb(221,25,40)" fg:x="689" fg:w="1"/><text x="55.4141%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.1641%" y="197" width="0.0801%" height="15" fill="rgb(241,184,7)" fg:x="689" fg:w="1"/><text x="55.4141%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="55.2442%" y="213" width="0.2402%" height="15" fill="rgb(235,159,4)" fg:x="690" fg:w="3"/><text x="55.4942%" y="223.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="55.4043%" y="197" width="0.0801%" height="15" fill="rgb(214,87,48)" fg:x="692" fg:w="1"/><text x="55.6543%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="55.2442%" y="229" width="0.3203%" height="15" fill="rgb(246,198,24)" fg:x="690" fg:w="4"/><text x="55.4942%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="55.4844%" y="213" width="0.0801%" height="15" fill="rgb(209,66,40)" fg:x="693" fg:w="1"/><text x="55.7344%" y="223.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="55.5645%" y="197" width="0.0801%" height="15" fill="rgb(233,147,39)" fg:x="694" fg:w="1"/><text x="55.8145%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="55.6445%" y="197" width="0.1601%" height="15" fill="rgb(231,145,52)" fg:x="695" fg:w="2"/><text x="55.8945%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.7246%" y="181" width="0.0801%" height="15" fill="rgb(206,20,26)" fg:x="696" fg:w="1"/><text x="55.9746%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.7246%" y="165" width="0.0801%" height="15" fill="rgb(238,220,4)" fg:x="696" fg:w="1"/><text x="55.9746%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.7246%" y="149" width="0.0801%" height="15" fill="rgb(252,195,42)" fg:x="696" fg:w="1"/><text x="55.9746%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.88%)</title><rect x="55.1641%" y="245" width="0.8807%" height="15" fill="rgb(209,10,6)" fg:x="689" fg:w="11"/><text x="55.4141%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.48%)</title><rect x="55.5645%" y="229" width="0.4804%" height="15" fill="rgb(229,3,52)" fg:x="694" fg:w="6"/><text x="55.8145%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="55.5645%" y="213" width="0.4804%" height="15" fill="rgb(253,49,37)" fg:x="694" fg:w="6"/><text x="55.8145%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="55.8046%" y="197" width="0.2402%" height="15" fill="rgb(240,103,49)" fg:x="697" fg:w="3"/><text x="56.0546%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.0448%" y="213" width="0.0801%" height="15" fill="rgb(250,182,30)" fg:x="700" fg:w="1"/><text x="56.2948%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.0448%" y="197" width="0.0801%" height="15" fill="rgb(248,8,30)" fg:x="700" fg:w="1"/><text x="56.2948%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="56.1249%" y="213" width="0.0801%" height="15" fill="rgb(237,120,30)" fg:x="701" fg:w="1"/><text x="56.3749%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="56.1249%" y="197" width="0.0801%" height="15" fill="rgb(221,146,34)" fg:x="701" fg:w="1"/><text x="56.3749%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="56.0448%" y="245" width="0.2402%" height="15" fill="rgb(242,55,13)" fg:x="700" fg:w="3"/><text x="56.2948%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="56.0448%" y="229" width="0.2402%" height="15" fill="rgb(242,112,31)" fg:x="700" fg:w="3"/><text x="56.2948%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="56.2050%" y="213" width="0.0801%" height="15" fill="rgb(249,192,27)" fg:x="702" fg:w="1"/><text x="56.4550%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="56.2850%" y="197" width="0.0801%" height="15" fill="rgb(208,204,44)" fg:x="703" fg:w="1"/><text x="56.5350%" y="207.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="56.2850%" y="181" width="0.0801%" height="15" fill="rgb(208,93,54)" fg:x="703" fg:w="1"/><text x="56.5350%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="56.2850%" y="213" width="0.1601%" height="15" fill="rgb(242,1,31)" fg:x="703" fg:w="2"/><text x="56.5350%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="56.3651%" y="197" width="0.0801%" height="15" fill="rgb(241,83,25)" fg:x="704" fg:w="1"/><text x="56.6151%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (23 samples, 1.84%)</title><rect x="54.6837%" y="293" width="1.8415%" height="15" fill="rgb(205,169,50)" fg:x="683" fg:w="23"/><text x="54.9337%" y="303.50">r..</text></g><g><title>regex::builders::string::RegexBuilder::build (23 samples, 1.84%)</title><rect x="54.6837%" y="277" width="1.8415%" height="15" fill="rgb(239,186,37)" fg:x="683" fg:w="23"/><text x="54.9337%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (23 samples, 1.84%)</title><rect x="54.6837%" y="261" width="1.8415%" height="15" fill="rgb(205,221,10)" fg:x="683" fg:w="23"/><text x="54.9337%" y="271.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="56.2850%" y="245" width="0.2402%" height="15" fill="rgb(218,196,15)" fg:x="703" fg:w="3"/><text x="56.5350%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="56.2850%" y="229" width="0.2402%" height="15" fill="rgb(218,196,35)" fg:x="703" fg:w="3"/><text x="56.5350%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="56.4452%" y="213" width="0.0801%" height="15" fill="rgb(233,63,24)" fg:x="705" fg:w="1"/><text x="56.6952%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="56.4452%" y="197" width="0.0801%" height="15" fill="rgb(225,8,4)" fg:x="705" fg:w="1"/><text x="56.6952%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="56.6053%" y="229" width="0.0801%" height="15" fill="rgb(234,105,35)" fg:x="707" fg:w="1"/><text x="56.8553%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="56.6053%" y="245" width="0.4804%" height="15" fill="rgb(236,21,32)" fg:x="707" fg:w="6"/><text x="56.8553%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="56.6853%" y="229" width="0.4003%" height="15" fill="rgb(228,109,6)" fg:x="708" fg:w="5"/><text x="56.9353%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="57.0056%" y="213" width="0.0801%" height="15" fill="rgb(229,215,31)" fg:x="712" fg:w="1"/><text x="57.2556%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (32 samples, 2.56%)</title><rect x="54.6037%" y="309" width="2.5620%" height="15" fill="rgb(221,52,54)" fg:x="682" fg:w="32"/><text x="54.8537%" y="319.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="56.5252%" y="293" width="0.6405%" height="15" fill="rgb(252,129,43)" fg:x="706" fg:w="8"/><text x="56.7752%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="56.5252%" y="277" width="0.6405%" height="15" fill="rgb(248,183,27)" fg:x="706" fg:w="8"/><text x="56.7752%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="56.5252%" y="261" width="0.6405%" height="15" fill="rgb(250,0,22)" fg:x="706" fg:w="8"/><text x="56.7752%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="57.0857%" y="245" width="0.0801%" height="15" fill="rgb(213,166,10)" fg:x="713" fg:w="1"/><text x="57.3357%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="57.0857%" y="229" width="0.0801%" height="15" fill="rgb(207,163,36)" fg:x="713" fg:w="1"/><text x="57.3357%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.0857%" y="213" width="0.0801%" height="15" fill="rgb(208,122,22)" fg:x="713" fg:w="1"/><text x="57.3357%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (347 samples, 27.78%)</title><rect x="29.5436%" y="405" width="27.7822%" height="15" fill="rgb(207,104,49)" fg:x="369" fg:w="347"/><text x="29.7936%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::l..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (325 samples, 26.02%)</title><rect x="31.3050%" y="389" width="26.0208%" height="15" fill="rgb(248,211,50)" fg:x="391" fg:w="325"/><text x="31.5550%" y="399.50">plugins_core::looking::model::Unqualified:..</text></g><g><title>indefinite::indefinite (325 samples, 26.02%)</title><rect x="31.3050%" y="373" width="26.0208%" height="15" fill="rgb(217,13,45)" fg:x="391" fg:w="325"/><text x="31.5550%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (324 samples, 25.94%)</title><rect x="31.3851%" y="357" width="25.9408%" height="15" fill="rgb(211,216,49)" fg:x="392" fg:w="324"/><text x="31.6351%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (323 samples, 25.86%)</title><rect x="31.4652%" y="341" width="25.8607%" height="15" fill="rgb(221,58,53)" fg:x="393" fg:w="323"/><text x="31.7152%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (34 samples, 2.72%)</title><rect x="54.6037%" y="325" width="2.7222%" height="15" fill="rgb(220,112,41)" fg:x="682" fg:w="34"/><text x="54.8537%" y="335.50">in..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="57.1657%" y="309" width="0.1601%" height="15" fill="rgb(236,38,28)" fg:x="714" fg:w="2"/><text x="57.4157%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.3259%" y="373" width="0.0801%" height="15" fill="rgb(227,195,22)" fg:x="716" fg:w="1"/><text x="57.5759%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.3259%" y="357" width="0.0801%" height="15" fill="rgb(214,55,33)" fg:x="716" fg:w="1"/><text x="57.5759%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.3259%" y="341" width="0.0801%" height="15" fill="rgb(248,80,13)" fg:x="716" fg:w="1"/><text x="57.5759%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="57.3259%" y="325" width="0.0801%" height="15" fill="rgb(238,52,6)" fg:x="716" fg:w="1"/><text x="57.5759%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="57.3259%" y="309" width="0.0801%" height="15" fill="rgb(224,198,47)" fg:x="716" fg:w="1"/><text x="57.5759%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="57.3259%" y="293" width="0.0801%" height="15" fill="rgb(233,171,20)" fg:x="716" fg:w="1"/><text x="57.5759%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.3259%" y="277" width="0.0801%" height="15" fill="rgb(241,30,25)" fg:x="716" fg:w="1"/><text x="57.5759%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.3259%" y="261" width="0.0801%" height="15" fill="rgb(207,171,38)" fg:x="716" fg:w="1"/><text x="57.5759%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="57.3259%" y="245" width="0.0801%" height="15" fill="rgb(234,70,1)" fg:x="716" fg:w="1"/><text x="57.5759%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="57.3259%" y="229" width="0.0801%" height="15" fill="rgb(232,178,18)" fg:x="716" fg:w="1"/><text x="57.5759%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="57.3259%" y="213" width="0.0801%" height="15" fill="rgb(241,78,40)" fg:x="716" fg:w="1"/><text x="57.5759%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="57.3259%" y="197" width="0.0801%" height="15" fill="rgb(222,35,25)" fg:x="716" fg:w="1"/><text x="57.5759%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.3259%" y="181" width="0.0801%" height="15" fill="rgb(207,92,16)" fg:x="716" fg:w="1"/><text x="57.5759%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.4059%" y="341" width="0.0801%" height="15" fill="rgb(216,59,51)" fg:x="717" fg:w="1"/><text x="57.6559%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.4059%" y="325" width="0.0801%" height="15" fill="rgb(213,80,28)" fg:x="717" fg:w="1"/><text x="57.6559%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.4059%" y="309" width="0.0801%" height="15" fill="rgb(220,93,7)" fg:x="717" fg:w="1"/><text x="57.6559%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.4059%" y="293" width="0.0801%" height="15" fill="rgb(225,24,44)" fg:x="717" fg:w="1"/><text x="57.6559%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="57.4059%" y="277" width="0.0801%" height="15" fill="rgb(243,74,40)" fg:x="717" fg:w="1"/><text x="57.6559%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="57.4059%" y="261" width="0.0801%" height="15" fill="rgb(228,39,7)" fg:x="717" fg:w="1"/><text x="57.6559%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="57.4059%" y="245" width="0.0801%" height="15" fill="rgb(227,79,8)" fg:x="717" fg:w="1"/><text x="57.6559%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.4059%" y="229" width="0.0801%" height="15" fill="rgb(236,58,11)" fg:x="717" fg:w="1"/><text x="57.6559%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.4059%" y="213" width="0.0801%" height="15" fill="rgb(249,63,35)" fg:x="717" fg:w="1"/><text x="57.6559%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="57.4059%" y="197" width="0.0801%" height="15" fill="rgb(252,114,16)" fg:x="717" fg:w="1"/><text x="57.6559%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="57.4059%" y="181" width="0.0801%" height="15" fill="rgb(254,151,24)" fg:x="717" fg:w="1"/><text x="57.6559%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="57.4059%" y="165" width="0.0801%" height="15" fill="rgb(253,54,39)" fg:x="717" fg:w="1"/><text x="57.6559%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="57.4059%" y="149" width="0.0801%" height="15" fill="rgb(243,25,45)" fg:x="717" fg:w="1"/><text x="57.6559%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.4059%" y="133" width="0.0801%" height="15" fill="rgb(234,134,9)" fg:x="717" fg:w="1"/><text x="57.6559%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.4860%" y="165" width="0.0801%" height="15" fill="rgb(227,166,31)" fg:x="718" fg:w="1"/><text x="57.7360%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="57.3259%" y="389" width="0.3203%" height="15" fill="rgb(245,143,41)" fg:x="716" fg:w="4"/><text x="57.5759%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="57.4059%" y="373" width="0.2402%" height="15" fill="rgb(238,181,32)" fg:x="717" fg:w="3"/><text x="57.6559%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="57.4059%" y="357" width="0.2402%" height="15" fill="rgb(224,113,18)" fg:x="717" fg:w="3"/><text x="57.6559%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="57.4860%" y="341" width="0.1601%" height="15" fill="rgb(240,229,28)" fg:x="718" fg:w="2"/><text x="57.7360%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="57.4860%" y="325" width="0.1601%" height="15" fill="rgb(250,185,3)" fg:x="718" fg:w="2"/><text x="57.7360%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="57.4860%" y="309" width="0.1601%" height="15" fill="rgb(212,59,25)" fg:x="718" fg:w="2"/><text x="57.7360%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="57.4860%" y="293" width="0.1601%" height="15" fill="rgb(221,87,20)" fg:x="718" fg:w="2"/><text x="57.7360%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="57.4860%" y="277" width="0.1601%" height="15" fill="rgb(213,74,28)" fg:x="718" fg:w="2"/><text x="57.7360%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="57.4860%" y="261" width="0.1601%" height="15" fill="rgb(224,132,34)" fg:x="718" fg:w="2"/><text x="57.7360%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="57.4860%" y="245" width="0.1601%" height="15" fill="rgb(222,101,24)" fg:x="718" fg:w="2"/><text x="57.7360%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="57.4860%" y="229" width="0.1601%" height="15" fill="rgb(254,142,4)" fg:x="718" fg:w="2"/><text x="57.7360%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="57.4860%" y="213" width="0.1601%" height="15" fill="rgb(230,229,49)" fg:x="718" fg:w="2"/><text x="57.7360%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="57.4860%" y="197" width="0.1601%" height="15" fill="rgb(238,70,47)" fg:x="718" fg:w="2"/><text x="57.7360%" y="207.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="57.4860%" y="181" width="0.1601%" height="15" fill="rgb(231,160,17)" fg:x="718" fg:w="2"/><text x="57.7360%" y="191.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="57.5661%" y="165" width="0.0801%" height="15" fill="rgb(218,68,53)" fg:x="719" fg:w="1"/><text x="57.8161%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="57.6461%" y="357" width="0.0801%" height="15" fill="rgb(236,111,10)" fg:x="720" fg:w="1"/><text x="57.8961%" y="367.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="57.8062%" y="309" width="0.0801%" height="15" fill="rgb(224,34,41)" fg:x="722" fg:w="1"/><text x="58.0562%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (1 samples, 0.08%)</title><rect x="57.8062%" y="293" width="0.0801%" height="15" fill="rgb(241,118,19)" fg:x="722" fg:w="1"/><text x="58.0562%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="57.7262%" y="357" width="0.2402%" height="15" fill="rgb(238,129,25)" fg:x="721" fg:w="3"/><text x="57.9762%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="57.7262%" y="341" width="0.2402%" height="15" fill="rgb(238,22,31)" fg:x="721" fg:w="3"/><text x="57.9762%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="57.8062%" y="325" width="0.1601%" height="15" fill="rgb(222,174,48)" fg:x="722" fg:w="2"/><text x="58.0562%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.8863%" y="309" width="0.0801%" height="15" fill="rgb(206,152,40)" fg:x="723" fg:w="1"/><text x="58.1363%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.8863%" y="293" width="0.0801%" height="15" fill="rgb(218,99,54)" fg:x="723" fg:w="1"/><text x="58.1363%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.8863%" y="277" width="0.0801%" height="15" fill="rgb(220,174,26)" fg:x="723" fg:w="1"/><text x="58.1363%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="57.8863%" y="261" width="0.0801%" height="15" fill="rgb(245,116,9)" fg:x="723" fg:w="1"/><text x="58.1363%" y="271.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (9 samples, 0.72%)</title><rect x="57.3259%" y="405" width="0.7206%" height="15" fill="rgb(209,72,35)" fg:x="716" fg:w="9"/><text x="57.5759%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="57.6461%" y="389" width="0.4003%" height="15" fill="rgb(226,126,21)" fg:x="720" fg:w="5"/><text x="57.8961%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="57.6461%" y="373" width="0.4003%" height="15" fill="rgb(227,192,1)" fg:x="720" fg:w="5"/><text x="57.8961%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.9664%" y="357" width="0.0801%" height="15" fill="rgb(237,180,29)" fg:x="724" fg:w="1"/><text x="58.2164%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.9664%" y="341" width="0.0801%" height="15" fill="rgb(230,197,35)" fg:x="724" fg:w="1"/><text x="58.2164%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.0464%" y="341" width="0.0801%" height="15" fill="rgb(246,193,31)" fg:x="725" fg:w="1"/><text x="58.2964%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.0464%" y="325" width="0.0801%" height="15" fill="rgb(241,36,4)" fg:x="725" fg:w="1"/><text x="58.2964%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.1265%" y="341" width="0.0801%" height="15" fill="rgb(241,130,17)" fg:x="726" fg:w="1"/><text x="58.3765%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.2066%" y="309" width="0.0801%" height="15" fill="rgb(206,137,32)" fg:x="727" fg:w="1"/><text x="58.4566%" y="319.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="58.0464%" y="373" width="0.3203%" height="15" fill="rgb(237,228,51)" fg:x="725" fg:w="4"/><text x="58.2964%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="58.0464%" y="357" width="0.3203%" height="15" fill="rgb(243,6,42)" fg:x="725" fg:w="4"/><text x="58.2964%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="58.2066%" y="341" width="0.1601%" height="15" fill="rgb(251,74,28)" fg:x="727" fg:w="2"/><text x="58.4566%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="58.2066%" y="325" width="0.1601%" height="15" fill="rgb(218,20,49)" fg:x="727" fg:w="2"/><text x="58.4566%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="58.2866%" y="309" width="0.0801%" height="15" fill="rgb(238,28,14)" fg:x="728" fg:w="1"/><text x="58.5366%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.2866%" y="293" width="0.0801%" height="15" fill="rgb(229,40,46)" fg:x="728" fg:w="1"/><text x="58.5366%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.2866%" y="277" width="0.0801%" height="15" fill="rgb(244,195,20)" fg:x="728" fg:w="1"/><text x="58.5366%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="58.3667%" y="373" width="0.0801%" height="15" fill="rgb(253,56,35)" fg:x="729" fg:w="1"/><text x="58.6167%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.3667%" y="357" width="0.0801%" height="15" fill="rgb(210,149,44)" fg:x="729" fg:w="1"/><text x="58.6167%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.3667%" y="341" width="0.0801%" height="15" fill="rgb(240,135,12)" fg:x="729" fg:w="1"/><text x="58.6167%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.3667%" y="325" width="0.0801%" height="15" fill="rgb(251,24,50)" fg:x="729" fg:w="1"/><text x="58.6167%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="58.4468%" y="357" width="0.0801%" height="15" fill="rgb(243,200,47)" fg:x="730" fg:w="1"/><text x="58.6968%" y="367.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (7 samples, 0.56%)</title><rect x="58.0464%" y="389" width="0.5604%" height="15" fill="rgb(224,166,26)" fg:x="725" fg:w="7"/><text x="58.2964%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="58.4468%" y="373" width="0.1601%" height="15" fill="rgb(233,0,47)" fg:x="730" fg:w="2"/><text x="58.6968%" y="383.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="58.5268%" y="357" width="0.0801%" height="15" fill="rgb(253,80,5)" fg:x="731" fg:w="1"/><text x="58.7768%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="58.5268%" y="341" width="0.0801%" height="15" fill="rgb(214,133,25)" fg:x="731" fg:w="1"/><text x="58.7768%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.6069%" y="325" width="0.0801%" height="15" fill="rgb(209,27,14)" fg:x="732" fg:w="1"/><text x="58.8569%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.6069%" y="309" width="0.0801%" height="15" fill="rgb(219,102,51)" fg:x="732" fg:w="1"/><text x="58.8569%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.6069%" y="293" width="0.0801%" height="15" fill="rgb(237,18,16)" fg:x="732" fg:w="1"/><text x="58.8569%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.6069%" y="277" width="0.0801%" height="15" fill="rgb(241,85,17)" fg:x="732" fg:w="1"/><text x="58.8569%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="58.6869%" y="325" width="0.0801%" height="15" fill="rgb(236,90,42)" fg:x="733" fg:w="1"/><text x="58.9369%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.6869%" y="309" width="0.0801%" height="15" fill="rgb(249,57,21)" fg:x="733" fg:w="1"/><text x="58.9369%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.6869%" y="293" width="0.0801%" height="15" fill="rgb(243,12,36)" fg:x="733" fg:w="1"/><text x="58.9369%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="58.6869%" y="277" width="0.0801%" height="15" fill="rgb(253,128,47)" fg:x="733" fg:w="1"/><text x="58.9369%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.6869%" y="261" width="0.0801%" height="15" fill="rgb(207,33,20)" fg:x="733" fg:w="1"/><text x="58.9369%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.80%)</title><rect x="58.0464%" y="405" width="0.8006%" height="15" fill="rgb(233,215,35)" fg:x="725" fg:w="10"/><text x="58.2964%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="58.6069%" y="389" width="0.2402%" height="15" fill="rgb(249,188,52)" fg:x="732" fg:w="3"/><text x="58.8569%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="58.6069%" y="373" width="0.2402%" height="15" fill="rgb(225,12,32)" fg:x="732" fg:w="3"/><text x="58.8569%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="58.6069%" y="357" width="0.2402%" height="15" fill="rgb(247,98,14)" fg:x="732" fg:w="3"/><text x="58.8569%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="58.6069%" y="341" width="0.2402%" height="15" fill="rgb(247,219,48)" fg:x="732" fg:w="3"/><text x="58.8569%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="58.7670%" y="325" width="0.0801%" height="15" fill="rgb(253,60,48)" fg:x="734" fg:w="1"/><text x="59.0170%" y="335.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="58.7670%" y="309" width="0.0801%" height="15" fill="rgb(245,15,52)" fg:x="734" fg:w="1"/><text x="59.0170%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="58.7670%" y="293" width="0.0801%" height="15" fill="rgb(220,133,28)" fg:x="734" fg:w="1"/><text x="59.0170%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.7670%" y="277" width="0.0801%" height="15" fill="rgb(217,180,4)" fg:x="734" fg:w="1"/><text x="59.0170%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="58.7670%" y="261" width="0.0801%" height="15" fill="rgb(251,24,1)" fg:x="734" fg:w="1"/><text x="59.0170%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.7670%" y="245" width="0.0801%" height="15" fill="rgb(212,185,49)" fg:x="734" fg:w="1"/><text x="59.0170%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="58.7670%" y="229" width="0.0801%" height="15" fill="rgb(215,175,22)" fg:x="734" fg:w="1"/><text x="59.0170%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.7670%" y="213" width="0.0801%" height="15" fill="rgb(250,205,14)" fg:x="734" fg:w="1"/><text x="59.0170%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="58.7670%" y="197" width="0.0801%" height="15" fill="rgb(225,211,22)" fg:x="734" fg:w="1"/><text x="59.0170%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.7670%" y="181" width="0.0801%" height="15" fill="rgb(251,179,42)" fg:x="734" fg:w="1"/><text x="59.0170%" y="191.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="58.8471%" y="405" width="0.0801%" height="15" fill="rgb(208,216,51)" fg:x="735" fg:w="1"/><text x="59.0971%" y="415.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="58.8471%" y="389" width="0.0801%" height="15" fill="rgb(235,36,11)" fg:x="735" fg:w="1"/><text x="59.0971%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="58.8471%" y="373" width="0.0801%" height="15" fill="rgb(213,189,28)" fg:x="735" fg:w="1"/><text x="59.0971%" y="383.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="58.8471%" y="357" width="0.0801%" height="15" fill="rgb(227,203,42)" fg:x="735" fg:w="1"/><text x="59.0971%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="58.8471%" y="341" width="0.0801%" height="15" fill="rgb(244,72,36)" fg:x="735" fg:w="1"/><text x="59.0971%" y="351.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (378 samples, 30.26%)</title><rect x="28.7430%" y="565" width="30.2642%" height="15" fill="rgb(213,53,17)" fg:x="359" fg:w="378"/><text x="28.9930%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (378 samples, 30.26%)</title><rect x="28.7430%" y="549" width="30.2642%" height="15" fill="rgb(207,167,3)" fg:x="359" fg:w="378"/><text x="28.9930%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plu..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (378 samples, 30.26%)</title><rect x="28.7430%" y="533" width="30.2642%" height="15" fill="rgb(216,98,30)" fg:x="359" fg:w="378"/><text x="28.9930%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (377 samples, 30.18%)</title><rect x="28.8231%" y="517" width="30.1841%" height="15" fill="rgb(236,123,15)" fg:x="360" fg:w="377"/><text x="29.0731%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.sh..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (377 samples, 30.18%)</title><rect x="28.8231%" y="501" width="30.1841%" height="15" fill="rgb(248,81,50)" fg:x="360" fg:w="377"/><text x="29.0731%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (377 samples, 30.18%)</title><rect x="28.8231%" y="485" width="30.1841%" height="15" fill="rgb(214,120,4)" fg:x="360" fg:w="377"/><text x="29.0731%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.sh..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (377 samples, 30.18%)</title><rect x="28.8231%" y="469" width="30.1841%" height="15" fill="rgb(208,179,34)" fg:x="360" fg:w="377"/><text x="29.0731%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::F..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (376 samples, 30.10%)</title><rect x="28.9031%" y="453" width="30.1041%" height="15" fill="rgb(227,140,7)" fg:x="361" fg:w="376"/><text x="29.1531%" y="463.50">&lt;engine::session::state::State as kernel::actions..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (374 samples, 29.94%)</title><rect x="29.0633%" y="437" width="29.9440%" height="15" fill="rgb(214,22,6)" fg:x="363" fg:w="374"/><text x="29.3133%" y="447.50">&lt;plugins_core::looking::actions::LookAction as k..</text></g><g><title>plugins_core::looking::model::new_area_observation (369 samples, 29.54%)</title><rect x="29.4636%" y="421" width="29.5436%" height="15" fill="rgb(207,137,27)" fg:x="368" fg:w="369"/><text x="29.7136%" y="431.50">plugins_core::looking::model::new_area_observati..</text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="58.9271%" y="405" width="0.0801%" height="15" fill="rgb(210,8,46)" fg:x="736" fg:w="1"/><text x="59.1771%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="58.9271%" y="389" width="0.0801%" height="15" fill="rgb(240,16,54)" fg:x="736" fg:w="1"/><text x="59.1771%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.9271%" y="373" width="0.0801%" height="15" fill="rgb(211,209,29)" fg:x="736" fg:w="1"/><text x="59.1771%" y="383.50"></text></g><g><title>plugins_rune::runner::SharedRunners::after (1 samples, 0.08%)</title><rect x="59.0072%" y="565" width="0.0801%" height="15" fill="rgb(226,228,24)" fg:x="737" fg:w="1"/><text x="59.2572%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="59.0873%" y="549" width="0.0801%" height="15" fill="rgb(222,84,9)" fg:x="738" fg:w="1"/><text x="59.3373%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="59.1673%" y="453" width="0.3203%" height="15" fill="rgb(234,203,30)" fg:x="739" fg:w="4"/><text x="59.4173%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="59.2474%" y="437" width="0.2402%" height="15" fill="rgb(238,109,14)" fg:x="740" fg:w="3"/><text x="59.4974%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="59.2474%" y="421" width="0.2402%" height="15" fill="rgb(233,206,34)" fg:x="740" fg:w="3"/><text x="59.4974%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="59.3275%" y="405" width="0.1601%" height="15" fill="rgb(220,167,47)" fg:x="741" fg:w="2"/><text x="59.5775%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="59.3275%" y="389" width="0.1601%" height="15" fill="rgb(238,105,10)" fg:x="741" fg:w="2"/><text x="59.5775%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="59.3275%" y="373" width="0.1601%" height="15" fill="rgb(213,227,17)" fg:x="741" fg:w="2"/><text x="59.5775%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="59.3275%" y="357" width="0.1601%" height="15" fill="rgb(217,132,38)" fg:x="741" fg:w="2"/><text x="59.5775%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="59.3275%" y="341" width="0.1601%" height="15" fill="rgb(242,146,4)" fg:x="741" fg:w="2"/><text x="59.5775%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="59.3275%" y="325" width="0.1601%" height="15" fill="rgb(212,61,9)" fg:x="741" fg:w="2"/><text x="59.5775%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="59.3275%" y="309" width="0.1601%" height="15" fill="rgb(247,126,22)" fg:x="741" fg:w="2"/><text x="59.5775%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="59.3275%" y="293" width="0.1601%" height="15" fill="rgb(220,196,2)" fg:x="741" fg:w="2"/><text x="59.5775%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="59.3275%" y="277" width="0.1601%" height="15" fill="rgb(208,46,4)" fg:x="741" fg:w="2"/><text x="59.5775%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="59.3275%" y="261" width="0.1601%" height="15" fill="rgb(252,104,46)" fg:x="741" fg:w="2"/><text x="59.5775%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="59.3275%" y="245" width="0.1601%" height="15" fill="rgb(237,152,48)" fg:x="741" fg:w="2"/><text x="59.5775%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="59.3275%" y="229" width="0.1601%" height="15" fill="rgb(221,59,37)" fg:x="741" fg:w="2"/><text x="59.5775%" y="239.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="59.3275%" y="213" width="0.1601%" height="15" fill="rgb(209,202,51)" fg:x="741" fg:w="2"/><text x="59.5775%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="59.3275%" y="197" width="0.1601%" height="15" fill="rgb(228,81,30)" fg:x="741" fg:w="2"/><text x="59.5775%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="59.4876%" y="405" width="0.0801%" height="15" fill="rgb(227,42,39)" fg:x="743" fg:w="1"/><text x="59.7376%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.4876%" y="389" width="0.0801%" height="15" fill="rgb(221,26,2)" fg:x="743" fg:w="1"/><text x="59.7376%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="59.4876%" y="453" width="0.1601%" height="15" fill="rgb(254,61,31)" fg:x="743" fg:w="2"/><text x="59.7376%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="59.4876%" y="437" width="0.1601%" height="15" fill="rgb(222,173,38)" fg:x="743" fg:w="2"/><text x="59.7376%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.4876%" y="421" width="0.1601%" height="15" fill="rgb(218,50,12)" fg:x="743" fg:w="2"/><text x="59.7376%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="59.5677%" y="405" width="0.0801%" height="15" fill="rgb(223,88,40)" fg:x="744" fg:w="1"/><text x="59.8177%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.5677%" y="389" width="0.0801%" height="15" fill="rgb(237,54,19)" fg:x="744" fg:w="1"/><text x="59.8177%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.5677%" y="373" width="0.0801%" height="15" fill="rgb(251,129,25)" fg:x="744" fg:w="1"/><text x="59.8177%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="59.6477%" y="421" width="0.0801%" height="15" fill="rgb(238,97,19)" fg:x="745" fg:w="1"/><text x="59.8977%" y="431.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="59.6477%" y="453" width="0.1601%" height="15" fill="rgb(240,169,18)" fg:x="745" fg:w="2"/><text x="59.8977%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="59.6477%" y="437" width="0.1601%" height="15" fill="rgb(230,187,49)" fg:x="745" fg:w="2"/><text x="59.8977%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="59.7278%" y="421" width="0.0801%" height="15" fill="rgb(209,44,26)" fg:x="746" fg:w="1"/><text x="59.9778%" y="431.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.8078%" y="405" width="0.0801%" height="15" fill="rgb(244,0,6)" fg:x="747" fg:w="1"/><text x="60.0578%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.8078%" y="389" width="0.0801%" height="15" fill="rgb(248,18,21)" fg:x="747" fg:w="1"/><text x="60.0578%" y="399.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="59.8078%" y="453" width="0.1601%" height="15" fill="rgb(245,180,19)" fg:x="747" fg:w="2"/><text x="60.0578%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="59.8078%" y="437" width="0.1601%" height="15" fill="rgb(252,118,36)" fg:x="747" fg:w="2"/><text x="60.0578%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.8078%" y="421" width="0.1601%" height="15" fill="rgb(210,224,19)" fg:x="747" fg:w="2"/><text x="60.0578%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="59.8879%" y="405" width="0.0801%" height="15" fill="rgb(218,30,24)" fg:x="748" fg:w="1"/><text x="60.1379%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.8879%" y="389" width="0.0801%" height="15" fill="rgb(219,75,50)" fg:x="748" fg:w="1"/><text x="60.1379%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.8879%" y="373" width="0.0801%" height="15" fill="rgb(234,72,50)" fg:x="748" fg:w="1"/><text x="60.1379%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.8879%" y="357" width="0.0801%" height="15" fill="rgb(219,100,48)" fg:x="748" fg:w="1"/><text x="60.1379%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.8879%" y="341" width="0.0801%" height="15" fill="rgb(253,5,41)" fg:x="748" fg:w="1"/><text x="60.1379%" y="351.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="59.8879%" y="325" width="0.0801%" height="15" fill="rgb(247,181,11)" fg:x="748" fg:w="1"/><text x="60.1379%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.8879%" y="309" width="0.0801%" height="15" fill="rgb(222,223,25)" fg:x="748" fg:w="1"/><text x="60.1379%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.8879%" y="293" width="0.0801%" height="15" fill="rgb(214,198,28)" fg:x="748" fg:w="1"/><text x="60.1379%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.8879%" y="277" width="0.0801%" height="15" fill="rgb(230,46,43)" fg:x="748" fg:w="1"/><text x="60.1379%" y="287.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="59.8879%" y="261" width="0.0801%" height="15" fill="rgb(233,65,53)" fg:x="748" fg:w="1"/><text x="60.1379%" y="271.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.88%)</title><rect x="59.1673%" y="517" width="0.8807%" height="15" fill="rgb(221,121,27)" fg:x="739" fg:w="11"/><text x="59.4173%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.88%)</title><rect x="59.1673%" y="501" width="0.8807%" height="15" fill="rgb(247,70,47)" fg:x="739" fg:w="11"/><text x="59.4173%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.88%)</title><rect x="59.1673%" y="485" width="0.8807%" height="15" fill="rgb(228,85,35)" fg:x="739" fg:w="11"/><text x="59.4173%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="59.1673%" y="469" width="0.8807%" height="15" fill="rgb(209,50,18)" fg:x="739" fg:w="11"/><text x="59.4173%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="59.9680%" y="453" width="0.0801%" height="15" fill="rgb(250,19,35)" fg:x="749" fg:w="1"/><text x="60.2180%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="59.9680%" y="437" width="0.0801%" height="15" fill="rgb(253,107,29)" fg:x="749" fg:w="1"/><text x="60.2180%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.9680%" y="421" width="0.0801%" height="15" fill="rgb(252,179,29)" fg:x="749" fg:w="1"/><text x="60.2180%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.9680%" y="405" width="0.0801%" height="15" fill="rgb(238,194,6)" fg:x="749" fg:w="1"/><text x="60.2180%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.9680%" y="389" width="0.0801%" height="15" fill="rgb(238,164,29)" fg:x="749" fg:w="1"/><text x="60.2180%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.9680%" y="373" width="0.0801%" height="15" fill="rgb(224,25,9)" fg:x="749" fg:w="1"/><text x="60.2180%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.9680%" y="357" width="0.0801%" height="15" fill="rgb(244,153,23)" fg:x="749" fg:w="1"/><text x="60.2180%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.9680%" y="341" width="0.0801%" height="15" fill="rgb(212,203,14)" fg:x="749" fg:w="1"/><text x="60.2180%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.9680%" y="325" width="0.0801%" height="15" fill="rgb(220,164,20)" fg:x="749" fg:w="1"/><text x="60.2180%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.9680%" y="309" width="0.0801%" height="15" fill="rgb(222,203,48)" fg:x="749" fg:w="1"/><text x="60.2180%" y="319.50"></text></g><g><title>plugins_core::tools::contained_by (12 samples, 0.96%)</title><rect x="59.1673%" y="533" width="0.9608%" height="15" fill="rgb(215,159,22)" fg:x="739" fg:w="12"/><text x="59.4173%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.0480%" y="517" width="0.0801%" height="15" fill="rgb(216,183,47)" fg:x="750" fg:w="1"/><text x="60.2980%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.0480%" y="501" width="0.0801%" height="15" fill="rgb(229,195,25)" fg:x="750" fg:w="1"/><text x="60.2980%" y="511.50"></text></g><g><title>engine::session::logs::capture (414 samples, 33.15%)</title><rect x="27.1417%" y="693" width="33.1465%" height="15" fill="rgb(224,132,51)" fg:x="339" fg:w="414"/><text x="27.3917%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (409 samples, 32.75%)</title><rect x="27.5420%" y="677" width="32.7462%" height="15" fill="rgb(240,63,7)" fg:x="344" fg:w="409"/><text x="27.7920%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (409 samples, 32.75%)</title><rect x="27.5420%" y="661" width="32.7462%" height="15" fill="rgb(249,182,41)" fg:x="344" fg:w="409"/><text x="27.7920%" y="671.50">&lt;engine::session::Session as kernel::actions::Perform..</text></g><g><title>kernel::plugins::mw::apply_middleware (409 samples, 32.75%)</title><rect x="27.5420%" y="645" width="32.7462%" height="15" fill="rgb(243,47,26)" fg:x="344" fg:w="409"/><text x="27.7920%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (409 samples, 32.75%)</title><rect x="27.5420%" y="629" width="32.7462%" height="15" fill="rgb(233,48,2)" fg:x="344" fg:w="409"/><text x="27.7920%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (409 samples, 32.75%)</title><rect x="27.5420%" y="613" width="32.7462%" height="15" fill="rgb(244,165,34)" fg:x="344" fg:w="409"/><text x="27.7920%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as ker..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (394 samples, 31.55%)</title><rect x="28.7430%" y="597" width="31.5452%" height="15" fill="rgb(207,89,7)" fg:x="359" fg:w="394"/><text x="28.9930%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (394 samples, 31.55%)</title><rect x="28.7430%" y="581" width="31.5452%" height="15" fill="rgb(244,117,36)" fg:x="359" fg:w="394"/><text x="28.9930%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::m..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (15 samples, 1.20%)</title><rect x="59.0873%" y="565" width="1.2010%" height="15" fill="rgb(226,144,34)" fg:x="738" fg:w="15"/><text x="59.3373%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (14 samples, 1.12%)</title><rect x="59.1673%" y="549" width="1.1209%" height="15" fill="rgb(213,23,19)" fg:x="739" fg:w="14"/><text x="59.4173%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="60.1281%" y="533" width="0.1601%" height="15" fill="rgb(217,75,12)" fg:x="751" fg:w="2"/><text x="60.3781%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="60.1281%" y="517" width="0.1601%" height="15" fill="rgb(224,159,17)" fg:x="751" fg:w="2"/><text x="60.3781%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="60.1281%" y="501" width="0.1601%" height="15" fill="rgb(217,118,1)" fg:x="751" fg:w="2"/><text x="60.3781%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.1281%" y="485" width="0.1601%" height="15" fill="rgb(232,180,48)" fg:x="751" fg:w="2"/><text x="60.3781%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="60.1281%" y="469" width="0.1601%" height="15" fill="rgb(230,27,33)" fg:x="751" fg:w="2"/><text x="60.3781%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="60.1281%" y="453" width="0.1601%" height="15" fill="rgb(205,31,21)" fg:x="751" fg:w="2"/><text x="60.3781%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="60.1281%" y="437" width="0.1601%" height="15" fill="rgb(253,59,4)" fg:x="751" fg:w="2"/><text x="60.3781%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.2082%" y="421" width="0.0801%" height="15" fill="rgb(224,201,9)" fg:x="752" fg:w="1"/><text x="60.4582%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.2082%" y="405" width="0.0801%" height="15" fill="rgb(229,206,30)" fg:x="752" fg:w="1"/><text x="60.4582%" y="415.50"></text></g><g><title>engine::session::Session::captured (415 samples, 33.23%)</title><rect x="27.1417%" y="709" width="33.2266%" height="15" fill="rgb(212,67,47)" fg:x="339" fg:w="415"/><text x="27.3917%" y="719.50">engine::session::Session::captured</text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="60.2882%" y="693" width="0.0801%" height="15" fill="rgb(211,96,50)" fg:x="753" fg:w="1"/><text x="60.5382%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.2882%" y="677" width="0.0801%" height="15" fill="rgb(252,114,18)" fg:x="753" fg:w="1"/><text x="60.5382%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.2882%" y="661" width="0.0801%" height="15" fill="rgb(223,58,37)" fg:x="753" fg:w="1"/><text x="60.5382%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.2882%" y="645" width="0.0801%" height="15" fill="rgb(237,70,4)" fg:x="753" fg:w="1"/><text x="60.5382%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.2882%" y="629" width="0.0801%" height="15" fill="rgb(244,85,46)" fg:x="753" fg:w="1"/><text x="60.5382%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.2882%" y="613" width="0.0801%" height="15" fill="rgb(223,39,52)" fg:x="753" fg:w="1"/><text x="60.5382%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="60.2882%" y="597" width="0.0801%" height="15" fill="rgb(218,200,14)" fg:x="753" fg:w="1"/><text x="60.5382%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="60.2882%" y="581" width="0.0801%" height="15" fill="rgb(208,171,16)" fg:x="753" fg:w="1"/><text x="60.5382%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.5284%" y="629" width="0.1601%" height="15" fill="rgb(234,200,18)" fg:x="756" fg:w="2"/><text x="60.7784%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="60.5284%" y="613" width="0.1601%" height="15" fill="rgb(228,45,11)" fg:x="756" fg:w="2"/><text x="60.7784%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.5284%" y="597" width="0.1601%" height="15" fill="rgb(237,182,11)" fg:x="756" fg:w="2"/><text x="60.7784%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="60.5284%" y="581" width="0.1601%" height="15" fill="rgb(241,175,49)" fg:x="756" fg:w="2"/><text x="60.7784%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="60.5284%" y="565" width="0.1601%" height="15" fill="rgb(247,38,35)" fg:x="756" fg:w="2"/><text x="60.7784%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="60.5284%" y="549" width="0.1601%" height="15" fill="rgb(228,39,49)" fg:x="756" fg:w="2"/><text x="60.7784%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="60.5284%" y="533" width="0.1601%" height="15" fill="rgb(226,101,26)" fg:x="756" fg:w="2"/><text x="60.7784%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="60.5284%" y="517" width="0.1601%" height="15" fill="rgb(206,141,19)" fg:x="756" fg:w="2"/><text x="60.7784%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="60.5284%" y="501" width="0.1601%" height="15" fill="rgb(211,200,13)" fg:x="756" fg:w="2"/><text x="60.7784%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="60.5284%" y="485" width="0.1601%" height="15" fill="rgb(241,121,6)" fg:x="756" fg:w="2"/><text x="60.7784%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="60.5284%" y="469" width="0.1601%" height="15" fill="rgb(234,221,29)" fg:x="756" fg:w="2"/><text x="60.7784%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="60.5284%" y="453" width="0.1601%" height="15" fill="rgb(229,136,5)" fg:x="756" fg:w="2"/><text x="60.7784%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="60.5284%" y="437" width="0.1601%" height="15" fill="rgb(238,36,11)" fg:x="756" fg:w="2"/><text x="60.7784%" y="447.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="60.5284%" y="421" width="0.1601%" height="15" fill="rgb(251,55,41)" fg:x="756" fg:w="2"/><text x="60.7784%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="60.5284%" y="405" width="0.1601%" height="15" fill="rgb(242,34,40)" fg:x="756" fg:w="2"/><text x="60.7784%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="60.4484%" y="661" width="0.3203%" height="15" fill="rgb(215,42,17)" fg:x="755" fg:w="4"/><text x="60.6984%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="60.5284%" y="645" width="0.2402%" height="15" fill="rgb(207,44,46)" fg:x="756" fg:w="3"/><text x="60.7784%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.6886%" y="629" width="0.0801%" height="15" fill="rgb(211,206,28)" fg:x="758" fg:w="1"/><text x="60.9386%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.6886%" y="613" width="0.0801%" height="15" fill="rgb(237,167,16)" fg:x="758" fg:w="1"/><text x="60.9386%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.6886%" y="597" width="0.0801%" height="15" fill="rgb(233,66,6)" fg:x="758" fg:w="1"/><text x="60.9386%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.6886%" y="581" width="0.0801%" height="15" fill="rgb(246,123,29)" fg:x="758" fg:w="1"/><text x="60.9386%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.6886%" y="565" width="0.0801%" height="15" fill="rgb(209,62,40)" fg:x="758" fg:w="1"/><text x="60.9386%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="60.6886%" y="549" width="0.0801%" height="15" fill="rgb(218,4,25)" fg:x="758" fg:w="1"/><text x="60.9386%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="60.6886%" y="533" width="0.0801%" height="15" fill="rgb(253,91,49)" fg:x="758" fg:w="1"/><text x="60.9386%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.8487%" y="565" width="0.0801%" height="15" fill="rgb(228,155,29)" fg:x="760" fg:w="1"/><text x="61.0987%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.8487%" y="549" width="0.0801%" height="15" fill="rgb(243,57,37)" fg:x="760" fg:w="1"/><text x="61.0987%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.8487%" y="533" width="0.0801%" height="15" fill="rgb(244,167,17)" fg:x="760" fg:w="1"/><text x="61.0987%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.0088%" y="517" width="0.0801%" height="15" fill="rgb(207,181,38)" fg:x="762" fg:w="1"/><text x="61.2588%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="61.0889%" y="469" width="0.0801%" height="15" fill="rgb(211,8,23)" fg:x="763" fg:w="1"/><text x="61.3389%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="61.0889%" y="453" width="0.0801%" height="15" fill="rgb(235,11,44)" fg:x="763" fg:w="1"/><text x="61.3389%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="61.0889%" y="517" width="0.1601%" height="15" fill="rgb(248,18,52)" fg:x="763" fg:w="2"/><text x="61.3389%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="61.0889%" y="501" width="0.1601%" height="15" fill="rgb(208,4,7)" fg:x="763" fg:w="2"/><text x="61.3389%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="61.0889%" y="485" width="0.1601%" height="15" fill="rgb(240,17,39)" fg:x="763" fg:w="2"/><text x="61.3389%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.1689%" y="469" width="0.0801%" height="15" fill="rgb(207,170,3)" fg:x="764" fg:w="1"/><text x="61.4189%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.1689%" y="453" width="0.0801%" height="15" fill="rgb(236,100,52)" fg:x="764" fg:w="1"/><text x="61.4189%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="60.7686%" y="613" width="0.5604%" height="15" fill="rgb(246,78,51)" fg:x="759" fg:w="7"/><text x="61.0186%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="60.7686%" y="597" width="0.5604%" height="15" fill="rgb(211,17,15)" fg:x="759" fg:w="7"/><text x="61.0186%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="60.7686%" y="581" width="0.5604%" height="15" fill="rgb(209,59,46)" fg:x="759" fg:w="7"/><text x="61.0186%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="60.9287%" y="565" width="0.4003%" height="15" fill="rgb(210,92,25)" fg:x="761" fg:w="5"/><text x="61.1787%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="60.9287%" y="549" width="0.4003%" height="15" fill="rgb(238,174,52)" fg:x="761" fg:w="5"/><text x="61.1787%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="61.0088%" y="533" width="0.3203%" height="15" fill="rgb(230,73,7)" fg:x="762" fg:w="4"/><text x="61.2588%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.2490%" y="517" width="0.0801%" height="15" fill="rgb(243,124,40)" fg:x="765" fg:w="1"/><text x="61.4990%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.2490%" y="501" width="0.0801%" height="15" fill="rgb(244,170,11)" fg:x="765" fg:w="1"/><text x="61.4990%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="61.2490%" y="485" width="0.0801%" height="15" fill="rgb(207,114,54)" fg:x="765" fg:w="1"/><text x="61.4990%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="61.2490%" y="469" width="0.0801%" height="15" fill="rgb(205,42,20)" fg:x="765" fg:w="1"/><text x="61.4990%" y="479.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="61.2490%" y="453" width="0.0801%" height="15" fill="rgb(230,30,28)" fg:x="765" fg:w="1"/><text x="61.4990%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="61.2490%" y="437" width="0.0801%" height="15" fill="rgb(205,73,54)" fg:x="765" fg:w="1"/><text x="61.4990%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="60.7686%" y="661" width="0.7206%" height="15" fill="rgb(254,227,23)" fg:x="759" fg:w="9"/><text x="61.0186%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.72%)</title><rect x="60.7686%" y="645" width="0.7206%" height="15" fill="rgb(228,202,34)" fg:x="759" fg:w="9"/><text x="61.0186%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.72%)</title><rect x="60.7686%" y="629" width="0.7206%" height="15" fill="rgb(222,225,37)" fg:x="759" fg:w="9"/><text x="61.0186%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="61.3291%" y="613" width="0.1601%" height="15" fill="rgb(221,14,54)" fg:x="766" fg:w="2"/><text x="61.5791%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.3291%" y="597" width="0.1601%" height="15" fill="rgb(254,102,2)" fg:x="766" fg:w="2"/><text x="61.5791%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.4091%" y="581" width="0.0801%" height="15" fill="rgb(232,104,17)" fg:x="767" fg:w="1"/><text x="61.6591%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.4091%" y="565" width="0.0801%" height="15" fill="rgb(250,220,14)" fg:x="767" fg:w="1"/><text x="61.6591%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.4091%" y="549" width="0.0801%" height="15" fill="rgb(241,158,9)" fg:x="767" fg:w="1"/><text x="61.6591%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.4091%" y="533" width="0.0801%" height="15" fill="rgb(246,9,43)" fg:x="767" fg:w="1"/><text x="61.6591%" y="543.50"></text></g><g><title>engine::session::internal::Added::find_refs (14 samples, 1.12%)</title><rect x="60.4484%" y="693" width="1.1209%" height="15" fill="rgb(206,73,33)" fg:x="755" fg:w="14"/><text x="60.6984%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (14 samples, 1.12%)</title><rect x="60.4484%" y="677" width="1.1209%" height="15" fill="rgb(222,79,8)" fg:x="755" fg:w="14"/><text x="60.6984%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.4892%" y="661" width="0.0801%" height="15" fill="rgb(234,8,54)" fg:x="768" fg:w="1"/><text x="61.7392%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.4892%" y="645" width="0.0801%" height="15" fill="rgb(209,134,38)" fg:x="768" fg:w="1"/><text x="61.7392%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.4892%" y="629" width="0.0801%" height="15" fill="rgb(230,127,29)" fg:x="768" fg:w="1"/><text x="61.7392%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.4892%" y="613" width="0.0801%" height="15" fill="rgb(242,44,41)" fg:x="768" fg:w="1"/><text x="61.7392%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.4892%" y="597" width="0.0801%" height="15" fill="rgb(222,56,43)" fg:x="768" fg:w="1"/><text x="61.7392%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.4892%" y="581" width="0.0801%" height="15" fill="rgb(238,39,47)" fg:x="768" fg:w="1"/><text x="61.7392%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.5693%" y="645" width="0.0801%" height="15" fill="rgb(226,79,43)" fg:x="769" fg:w="1"/><text x="61.8193%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.5693%" y="629" width="0.0801%" height="15" fill="rgb(242,105,53)" fg:x="769" fg:w="1"/><text x="61.8193%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.5693%" y="677" width="0.1601%" height="15" fill="rgb(251,132,46)" fg:x="769" fg:w="2"/><text x="61.8193%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.5693%" y="661" width="0.1601%" height="15" fill="rgb(231,77,14)" fg:x="769" fg:w="2"/><text x="61.8193%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.6493%" y="645" width="0.0801%" height="15" fill="rgb(240,135,9)" fg:x="770" fg:w="1"/><text x="61.8993%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="61.7294%" y="677" width="0.0801%" height="15" fill="rgb(248,109,14)" fg:x="771" fg:w="1"/><text x="61.9794%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.7294%" y="661" width="0.0801%" height="15" fill="rgb(227,146,52)" fg:x="771" fg:w="1"/><text x="61.9794%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.7294%" y="645" width="0.0801%" height="15" fill="rgb(232,54,3)" fg:x="771" fg:w="1"/><text x="61.9794%" y="655.50"></text></g><g><title>kernel::model::base::EntityGid::new (1 samples, 0.08%)</title><rect x="61.8094%" y="677" width="0.0801%" height="15" fill="rgb(229,201,43)" fg:x="772" fg:w="1"/><text x="62.0594%" y="687.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.8895%" y="549" width="0.0801%" height="15" fill="rgb(252,161,33)" fg:x="773" fg:w="1"/><text x="62.1395%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.8895%" y="533" width="0.0801%" height="15" fill="rgb(226,146,40)" fg:x="773" fg:w="1"/><text x="62.1395%" y="543.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="61.8895%" y="517" width="0.0801%" height="15" fill="rgb(219,47,25)" fg:x="773" fg:w="1"/><text x="62.1395%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.8895%" y="501" width="0.0801%" height="15" fill="rgb(250,135,13)" fg:x="773" fg:w="1"/><text x="62.1395%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.8895%" y="485" width="0.0801%" height="15" fill="rgb(219,229,18)" fg:x="773" fg:w="1"/><text x="62.1395%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.8895%" y="581" width="0.1601%" height="15" fill="rgb(217,152,27)" fg:x="773" fg:w="2"/><text x="62.1395%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.8895%" y="565" width="0.1601%" height="15" fill="rgb(225,71,47)" fg:x="773" fg:w="2"/><text x="62.1395%" y="575.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="61.9696%" y="549" width="0.0801%" height="15" fill="rgb(220,139,14)" fg:x="774" fg:w="1"/><text x="62.2196%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.9696%" y="533" width="0.0801%" height="15" fill="rgb(247,54,32)" fg:x="774" fg:w="1"/><text x="62.2196%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.9696%" y="517" width="0.0801%" height="15" fill="rgb(252,131,39)" fg:x="774" fg:w="1"/><text x="62.2196%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.9696%" y="501" width="0.0801%" height="15" fill="rgb(210,108,39)" fg:x="774" fg:w="1"/><text x="62.2196%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.9696%" y="485" width="0.0801%" height="15" fill="rgb(205,23,29)" fg:x="774" fg:w="1"/><text x="62.2196%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="61.8895%" y="677" width="0.2402%" height="15" fill="rgb(246,139,46)" fg:x="773" fg:w="3"/><text x="62.1395%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="61.8895%" y="661" width="0.2402%" height="15" fill="rgb(250,81,26)" fg:x="773" fg:w="3"/><text x="62.1395%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="61.8895%" y="645" width="0.2402%" height="15" fill="rgb(214,104,7)" fg:x="773" fg:w="3"/><text x="62.1395%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="61.8895%" y="629" width="0.2402%" height="15" fill="rgb(233,189,8)" fg:x="773" fg:w="3"/><text x="62.1395%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="61.8895%" y="613" width="0.2402%" height="15" fill="rgb(228,141,17)" fg:x="773" fg:w="3"/><text x="62.1395%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="61.8895%" y="597" width="0.2402%" height="15" fill="rgb(247,157,1)" fg:x="773" fg:w="3"/><text x="62.1395%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.0496%" y="581" width="0.0801%" height="15" fill="rgb(249,225,5)" fg:x="775" fg:w="1"/><text x="62.2996%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.0496%" y="565" width="0.0801%" height="15" fill="rgb(242,55,13)" fg:x="775" fg:w="1"/><text x="62.2996%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.0496%" y="549" width="0.0801%" height="15" fill="rgb(230,49,50)" fg:x="775" fg:w="1"/><text x="62.2996%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.0496%" y="533" width="0.0801%" height="15" fill="rgb(241,111,38)" fg:x="775" fg:w="1"/><text x="62.2996%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.0496%" y="517" width="0.0801%" height="15" fill="rgb(252,155,4)" fg:x="775" fg:w="1"/><text x="62.2996%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.2098%" y="613" width="0.0801%" height="15" fill="rgb(212,69,32)" fg:x="777" fg:w="1"/><text x="62.4598%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.2098%" y="597" width="0.0801%" height="15" fill="rgb(243,107,47)" fg:x="777" fg:w="1"/><text x="62.4598%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.2098%" y="581" width="0.0801%" height="15" fill="rgb(247,130,12)" fg:x="777" fg:w="1"/><text x="62.4598%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.2098%" y="565" width="0.0801%" height="15" fill="rgb(233,74,16)" fg:x="777" fg:w="1"/><text x="62.4598%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.2098%" y="549" width="0.0801%" height="15" fill="rgb(208,58,18)" fg:x="777" fg:w="1"/><text x="62.4598%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.2098%" y="533" width="0.0801%" height="15" fill="rgb(242,225,1)" fg:x="777" fg:w="1"/><text x="62.4598%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.2098%" y="517" width="0.0801%" height="15" fill="rgb(249,39,40)" fg:x="777" fg:w="1"/><text x="62.4598%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (25 samples, 2.00%)</title><rect x="60.3683%" y="709" width="2.0016%" height="15" fill="rgb(207,72,44)" fg:x="754" fg:w="25"/><text x="60.6183%" y="719.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="61.5693%" y="693" width="0.8006%" height="15" fill="rgb(215,193,12)" fg:x="769" fg:w="10"/><text x="61.8193%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="62.1297%" y="677" width="0.2402%" height="15" fill="rgb(248,41,39)" fg:x="776" fg:w="3"/><text x="62.3797%" y="687.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="62.1297%" y="661" width="0.2402%" height="15" fill="rgb(253,85,4)" fg:x="776" fg:w="3"/><text x="62.3797%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="62.1297%" y="645" width="0.2402%" height="15" fill="rgb(243,70,31)" fg:x="776" fg:w="3"/><text x="62.3797%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="62.1297%" y="629" width="0.2402%" height="15" fill="rgb(253,195,26)" fg:x="776" fg:w="3"/><text x="62.3797%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.2898%" y="613" width="0.0801%" height="15" fill="rgb(243,42,11)" fg:x="778" fg:w="1"/><text x="62.5398%" y="623.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="62.2898%" y="597" width="0.0801%" height="15" fill="rgb(239,66,17)" fg:x="778" fg:w="1"/><text x="62.5398%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.3699%" y="677" width="0.0801%" height="15" fill="rgb(217,132,21)" fg:x="779" fg:w="1"/><text x="62.6199%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.3699%" y="661" width="0.0801%" height="15" fill="rgb(252,202,21)" fg:x="779" fg:w="1"/><text x="62.6199%" y="671.50"></text></g><g><title>engine::users::model::username_to_key (3 samples, 0.24%)</title><rect x="62.3699%" y="709" width="0.2402%" height="15" fill="rgb(233,98,36)" fg:x="779" fg:w="3"/><text x="62.6199%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="62.3699%" y="693" width="0.2402%" height="15" fill="rgb(216,153,54)" fg:x="779" fg:w="3"/><text x="62.6199%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.4500%" y="677" width="0.1601%" height="15" fill="rgb(250,99,7)" fg:x="780" fg:w="2"/><text x="62.7000%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.4500%" y="661" width="0.1601%" height="15" fill="rgb(207,56,50)" fg:x="780" fg:w="2"/><text x="62.7000%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.5300%" y="645" width="0.0801%" height="15" fill="rgb(244,61,34)" fg:x="781" fg:w="1"/><text x="62.7800%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5300%" y="629" width="0.0801%" height="15" fill="rgb(241,50,38)" fg:x="781" fg:w="1"/><text x="62.7800%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.6902%" y="661" width="0.0801%" height="15" fill="rgb(212,166,30)" fg:x="783" fg:w="1"/><text x="62.9402%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.6902%" y="645" width="0.0801%" height="15" fill="rgb(249,127,32)" fg:x="783" fg:w="1"/><text x="62.9402%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.6902%" y="629" width="0.0801%" height="15" fill="rgb(209,103,0)" fg:x="783" fg:w="1"/><text x="62.9402%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="62.7702%" y="661" width="0.0801%" height="15" fill="rgb(238,209,51)" fg:x="784" fg:w="1"/><text x="63.0202%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7702%" y="645" width="0.0801%" height="15" fill="rgb(237,56,23)" fg:x="784" fg:w="1"/><text x="63.0202%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7702%" y="629" width="0.0801%" height="15" fill="rgb(215,153,46)" fg:x="784" fg:w="1"/><text x="63.0202%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.7702%" y="613" width="0.0801%" height="15" fill="rgb(224,49,31)" fg:x="784" fg:w="1"/><text x="63.0202%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.7702%" y="597" width="0.0801%" height="15" fill="rgb(250,18,42)" fg:x="784" fg:w="1"/><text x="63.0202%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.7702%" y="581" width="0.0801%" height="15" fill="rgb(215,176,39)" fg:x="784" fg:w="1"/><text x="63.0202%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.7702%" y="565" width="0.0801%" height="15" fill="rgb(223,77,29)" fg:x="784" fg:w="1"/><text x="63.0202%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.7702%" y="549" width="0.0801%" height="15" fill="rgb(234,94,52)" fg:x="784" fg:w="1"/><text x="63.0202%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.7702%" y="533" width="0.0801%" height="15" fill="rgb(220,154,50)" fg:x="784" fg:w="1"/><text x="63.0202%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.7702%" y="517" width="0.0801%" height="15" fill="rgb(212,11,10)" fg:x="784" fg:w="1"/><text x="63.0202%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.7702%" y="501" width="0.0801%" height="15" fill="rgb(205,166,19)" fg:x="784" fg:w="1"/><text x="63.0202%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.7702%" y="485" width="0.0801%" height="15" fill="rgb(244,198,16)" fg:x="784" fg:w="1"/><text x="63.0202%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.7702%" y="469" width="0.0801%" height="15" fill="rgb(219,69,12)" fg:x="784" fg:w="1"/><text x="63.0202%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.7702%" y="453" width="0.0801%" height="15" fill="rgb(245,30,7)" fg:x="784" fg:w="1"/><text x="63.0202%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.7702%" y="437" width="0.0801%" height="15" fill="rgb(218,221,48)" fg:x="784" fg:w="1"/><text x="63.0202%" y="447.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.8503%" y="613" width="0.0801%" height="15" fill="rgb(216,66,15)" fg:x="785" fg:w="1"/><text x="63.1003%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.8503%" y="597" width="0.0801%" height="15" fill="rgb(226,122,50)" fg:x="785" fg:w="1"/><text x="63.1003%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.9303%" y="565" width="0.0801%" height="15" fill="rgb(239,156,16)" fg:x="786" fg:w="1"/><text x="63.1803%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.9303%" y="549" width="0.0801%" height="15" fill="rgb(224,27,38)" fg:x="786" fg:w="1"/><text x="63.1803%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.9303%" y="533" width="0.0801%" height="15" fill="rgb(224,39,27)" fg:x="786" fg:w="1"/><text x="63.1803%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.9303%" y="517" width="0.0801%" height="15" fill="rgb(215,92,29)" fg:x="786" fg:w="1"/><text x="63.1803%" y="527.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="62.9303%" y="501" width="0.0801%" height="15" fill="rgb(207,159,16)" fg:x="786" fg:w="1"/><text x="63.1803%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.9303%" y="485" width="0.0801%" height="15" fill="rgb(238,163,47)" fg:x="786" fg:w="1"/><text x="63.1803%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.9303%" y="469" width="0.0801%" height="15" fill="rgb(219,91,49)" fg:x="786" fg:w="1"/><text x="63.1803%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.9303%" y="453" width="0.0801%" height="15" fill="rgb(227,167,31)" fg:x="786" fg:w="1"/><text x="63.1803%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="62.8503%" y="661" width="0.3203%" height="15" fill="rgb(234,80,54)" fg:x="785" fg:w="4"/><text x="63.1003%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="62.8503%" y="645" width="0.3203%" height="15" fill="rgb(212,114,2)" fg:x="785" fg:w="4"/><text x="63.1003%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="62.8503%" y="629" width="0.3203%" height="15" fill="rgb(234,50,24)" fg:x="785" fg:w="4"/><text x="63.1003%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="62.9303%" y="613" width="0.2402%" height="15" fill="rgb(221,68,8)" fg:x="786" fg:w="3"/><text x="63.1803%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="62.9303%" y="597" width="0.2402%" height="15" fill="rgb(254,180,31)" fg:x="786" fg:w="3"/><text x="63.1803%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="62.9303%" y="581" width="0.2402%" height="15" fill="rgb(247,130,50)" fg:x="786" fg:w="3"/><text x="63.1803%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="63.0104%" y="565" width="0.1601%" height="15" fill="rgb(211,109,4)" fg:x="787" fg:w="2"/><text x="63.2604%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.0104%" y="549" width="0.1601%" height="15" fill="rgb(238,50,21)" fg:x="787" fg:w="2"/><text x="63.2604%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="63.0104%" y="533" width="0.1601%" height="15" fill="rgb(225,57,45)" fg:x="787" fg:w="2"/><text x="63.2604%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="63.0905%" y="517" width="0.0801%" height="15" fill="rgb(209,196,50)" fg:x="788" fg:w="1"/><text x="63.3405%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.0905%" y="501" width="0.0801%" height="15" fill="rgb(242,140,13)" fg:x="788" fg:w="1"/><text x="63.3405%" y="511.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="63.1705%" y="661" width="0.0801%" height="15" fill="rgb(217,111,7)" fg:x="789" fg:w="1"/><text x="63.4205%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="63.1705%" y="645" width="0.0801%" height="15" fill="rgb(253,193,51)" fg:x="789" fg:w="1"/><text x="63.4205%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="63.1705%" y="629" width="0.0801%" height="15" fill="rgb(252,70,29)" fg:x="789" fg:w="1"/><text x="63.4205%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.2506%" y="597" width="0.0801%" height="15" fill="rgb(232,127,12)" fg:x="790" fg:w="1"/><text x="63.5006%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.2506%" y="581" width="0.0801%" height="15" fill="rgb(211,180,21)" fg:x="790" fg:w="1"/><text x="63.5006%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.2506%" y="565" width="0.0801%" height="15" fill="rgb(229,72,13)" fg:x="790" fg:w="1"/><text x="63.5006%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.3307%" y="597" width="0.0801%" height="15" fill="rgb(240,211,49)" fg:x="791" fg:w="1"/><text x="63.5807%" y="607.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="63.3307%" y="581" width="0.0801%" height="15" fill="rgb(219,149,40)" fg:x="791" fg:w="1"/><text x="63.5807%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (793 samples, 63.49%)</title><rect x="0.0000%" y="789" width="63.4908%" height="15" fill="rgb(210,127,46)" fg:x="0" fg:w="793"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (793 samples, 63.49%)</title><rect x="0.0000%" y="773" width="63.4908%" height="15" fill="rgb(220,106,7)" fg:x="0" fg:w="793"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (793 samples, 63.49%)</title><rect x="0.0000%" y="757" width="63.4908%" height="15" fill="rgb(249,31,22)" fg:x="0" fg:w="793"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (457 samples, 36.59%)</title><rect x="26.9015%" y="741" width="36.5893%" height="15" fill="rgb(253,1,49)" fg:x="336" fg:w="457"/><text x="27.1515%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (457 samples, 36.59%)</title><rect x="26.9015%" y="725" width="36.5893%" height="15" fill="rgb(227,144,33)" fg:x="336" fg:w="457"/><text x="27.1515%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (11 samples, 0.88%)</title><rect x="62.6101%" y="709" width="0.8807%" height="15" fill="rgb(249,163,44)" fg:x="782" fg:w="11"/><text x="62.8601%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.88%)</title><rect x="62.6101%" y="693" width="0.8807%" height="15" fill="rgb(234,15,39)" fg:x="782" fg:w="11"/><text x="62.8601%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="62.6902%" y="677" width="0.8006%" height="15" fill="rgb(207,66,16)" fg:x="783" fg:w="10"/><text x="62.9402%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="63.2506%" y="661" width="0.2402%" height="15" fill="rgb(233,112,24)" fg:x="790" fg:w="3"/><text x="63.5006%" y="671.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="63.2506%" y="645" width="0.2402%" height="15" fill="rgb(230,90,22)" fg:x="790" fg:w="3"/><text x="63.5006%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="63.2506%" y="629" width="0.2402%" height="15" fill="rgb(229,61,13)" fg:x="790" fg:w="3"/><text x="63.5006%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="63.2506%" y="613" width="0.2402%" height="15" fill="rgb(225,57,24)" fg:x="790" fg:w="3"/><text x="63.5006%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.4107%" y="597" width="0.0801%" height="15" fill="rgb(208,169,48)" fg:x="792" fg:w="1"/><text x="63.6607%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.6509%" y="725" width="0.0801%" height="15" fill="rgb(244,218,51)" fg:x="795" fg:w="1"/><text x="63.9009%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.7310%" y="725" width="0.0801%" height="15" fill="rgb(214,148,10)" fg:x="796" fg:w="1"/><text x="63.9810%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.7310%" y="709" width="0.0801%" height="15" fill="rgb(225,174,27)" fg:x="796" fg:w="1"/><text x="63.9810%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.7310%" y="693" width="0.0801%" height="15" fill="rgb(230,96,26)" fg:x="796" fg:w="1"/><text x="63.9810%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.7310%" y="677" width="0.0801%" height="15" fill="rgb(232,10,30)" fg:x="796" fg:w="1"/><text x="63.9810%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.8110%" y="645" width="0.0801%" height="15" fill="rgb(222,8,50)" fg:x="797" fg:w="1"/><text x="64.0610%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="63.8110%" y="661" width="0.4804%" height="15" fill="rgb(213,81,27)" fg:x="797" fg:w="6"/><text x="64.0610%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (5 samples, 0.40%)</title><rect x="63.8911%" y="645" width="0.4003%" height="15" fill="rgb(245,50,10)" fg:x="798" fg:w="5"/><text x="64.1411%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="63.8911%" y="629" width="0.4003%" height="15" fill="rgb(216,100,18)" fg:x="798" fg:w="5"/><text x="64.1411%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="63.9712%" y="613" width="0.3203%" height="15" fill="rgb(236,147,54)" fg:x="799" fg:w="4"/><text x="64.2212%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="63.9712%" y="597" width="0.3203%" height="15" fill="rgb(205,143,26)" fg:x="799" fg:w="4"/><text x="64.2212%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="64.1313%" y="581" width="0.1601%" height="15" fill="rgb(236,26,9)" fg:x="801" fg:w="2"/><text x="64.3813%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.2114%" y="565" width="0.0801%" height="15" fill="rgb(221,165,53)" fg:x="802" fg:w="1"/><text x="64.4614%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.2914%" y="661" width="0.0801%" height="15" fill="rgb(214,110,17)" fg:x="803" fg:w="1"/><text x="64.5414%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.3715%" y="645" width="0.0801%" height="15" fill="rgb(237,197,12)" fg:x="804" fg:w="1"/><text x="64.6215%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="64.8519%" y="597" width="0.1601%" height="15" fill="rgb(205,84,17)" fg:x="810" fg:w="2"/><text x="65.1019%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 1.44%)</title><rect x="63.6509%" y="741" width="1.4412%" height="15" fill="rgb(237,18,45)" fg:x="795" fg:w="18"/><text x="63.9009%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (16 samples, 1.28%)</title><rect x="63.8110%" y="725" width="1.2810%" height="15" fill="rgb(221,87,14)" fg:x="797" fg:w="16"/><text x="64.0610%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.28%)</title><rect x="63.8110%" y="709" width="1.2810%" height="15" fill="rgb(238,186,15)" fg:x="797" fg:w="16"/><text x="64.0610%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (16 samples, 1.28%)</title><rect x="63.8110%" y="693" width="1.2810%" height="15" fill="rgb(208,115,11)" fg:x="797" fg:w="16"/><text x="64.0610%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.28%)</title><rect x="63.8110%" y="677" width="1.2810%" height="15" fill="rgb(254,175,0)" fg:x="797" fg:w="16"/><text x="64.0610%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.72%)</title><rect x="64.3715%" y="661" width="0.7206%" height="15" fill="rgb(227,24,42)" fg:x="804" fg:w="9"/><text x="64.6215%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="64.4516%" y="645" width="0.6405%" height="15" fill="rgb(223,211,37)" fg:x="805" fg:w="8"/><text x="64.7016%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="64.6117%" y="629" width="0.4804%" height="15" fill="rgb(235,49,27)" fg:x="807" fg:w="6"/><text x="64.8617%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="64.8519%" y="613" width="0.2402%" height="15" fill="rgb(254,97,51)" fg:x="810" fg:w="3"/><text x="65.1019%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.0120%" y="597" width="0.0801%" height="15" fill="rgb(249,51,40)" fg:x="812" fg:w="1"/><text x="65.2620%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.0120%" y="581" width="0.0801%" height="15" fill="rgb(210,128,45)" fg:x="812" fg:w="1"/><text x="65.2620%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="65.2522%" y="613" width="0.0801%" height="15" fill="rgb(224,137,50)" fg:x="815" fg:w="1"/><text x="65.5022%" y="623.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="65.2522%" y="645" width="0.1601%" height="15" fill="rgb(242,15,9)" fg:x="815" fg:w="2"/><text x="65.5022%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="65.2522%" y="629" width="0.1601%" height="15" fill="rgb(233,187,41)" fg:x="815" fg:w="2"/><text x="65.5022%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="65.3323%" y="613" width="0.0801%" height="15" fill="rgb(227,2,29)" fg:x="816" fg:w="1"/><text x="65.5823%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.3323%" y="597" width="0.0801%" height="15" fill="rgb(222,70,3)" fg:x="816" fg:w="1"/><text x="65.5823%" y="607.50"></text></g><g><title>&lt;core::char::ToLowercase as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="65.3323%" y="581" width="0.0801%" height="15" fill="rgb(213,11,42)" fg:x="816" fg:w="1"/><text x="65.5823%" y="591.50"></text></g><g><title>&lt;core::char::CaseMappingIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="65.3323%" y="565" width="0.0801%" height="15" fill="rgb(225,150,9)" fg:x="816" fg:w="1"/><text x="65.5823%" y="575.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="65.4123%" y="645" width="0.0801%" height="15" fill="rgb(230,162,45)" fg:x="817" fg:w="1"/><text x="65.6623%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="65.4123%" y="629" width="0.0801%" height="15" fill="rgb(222,14,52)" fg:x="817" fg:w="1"/><text x="65.6623%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="65.4123%" y="613" width="0.0801%" height="15" fill="rgb(254,198,14)" fg:x="817" fg:w="1"/><text x="65.6623%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.4123%" y="597" width="0.0801%" height="15" fill="rgb(220,217,30)" fg:x="817" fg:w="1"/><text x="65.6623%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (4 samples, 0.32%)</title><rect x="65.2522%" y="661" width="0.3203%" height="15" fill="rgb(215,146,41)" fg:x="815" fg:w="4"/><text x="65.5022%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="65.4924%" y="645" width="0.0801%" height="15" fill="rgb(217,27,36)" fg:x="818" fg:w="1"/><text x="65.7424%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="65.4924%" y="629" width="0.0801%" height="15" fill="rgb(219,218,39)" fg:x="818" fg:w="1"/><text x="65.7424%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="65.4924%" y="613" width="0.0801%" height="15" fill="rgb(219,4,42)" fg:x="818" fg:w="1"/><text x="65.7424%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.4924%" y="597" width="0.0801%" height="15" fill="rgb(249,119,36)" fg:x="818" fg:w="1"/><text x="65.7424%" y="607.50"></text></g><g><title>&lt;core::char::ToLowercase as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="65.4924%" y="581" width="0.0801%" height="15" fill="rgb(209,23,33)" fg:x="818" fg:w="1"/><text x="65.7424%" y="591.50"></text></g><g><title>&lt;core::char::CaseMappingIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="65.4924%" y="565" width="0.0801%" height="15" fill="rgb(211,10,0)" fg:x="818" fg:w="1"/><text x="65.7424%" y="575.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (1 samples, 0.08%)</title><rect x="65.5725%" y="645" width="0.0801%" height="15" fill="rgb(208,99,37)" fg:x="819" fg:w="1"/><text x="65.8225%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.5725%" y="629" width="0.0801%" height="15" fill="rgb(213,132,31)" fg:x="819" fg:w="1"/><text x="65.8225%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.5725%" y="613" width="0.0801%" height="15" fill="rgb(243,129,40)" fg:x="819" fg:w="1"/><text x="65.8225%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.6525%" y="629" width="0.0801%" height="15" fill="rgb(210,66,33)" fg:x="820" fg:w="1"/><text x="65.9025%" y="639.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="65.7326%" y="629" width="0.2402%" height="15" fill="rgb(209,189,4)" fg:x="821" fg:w="3"/><text x="65.9826%" y="639.50"></text></g><g><title>glob::fill_todo (3 samples, 0.24%)</title><rect x="65.7326%" y="613" width="0.2402%" height="15" fill="rgb(214,107,37)" fg:x="821" fg:w="3"/><text x="65.9826%" y="623.50"></text></g><g><title>glob::is_dir (3 samples, 0.24%)</title><rect x="65.7326%" y="597" width="0.2402%" height="15" fill="rgb(245,88,54)" fg:x="821" fg:w="3"/><text x="65.9826%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="65.7326%" y="581" width="0.2402%" height="15" fill="rgb(205,146,20)" fg:x="821" fg:w="3"/><text x="65.9826%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="65.7326%" y="565" width="0.2402%" height="15" fill="rgb(220,161,25)" fg:x="821" fg:w="3"/><text x="65.9826%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="65.7326%" y="549" width="0.2402%" height="15" fill="rgb(215,152,15)" fg:x="821" fg:w="3"/><text x="65.9826%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="65.7326%" y="533" width="0.2402%" height="15" fill="rgb(233,192,44)" fg:x="821" fg:w="3"/><text x="65.9826%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="65.7326%" y="517" width="0.2402%" height="15" fill="rgb(240,170,46)" fg:x="821" fg:w="3"/><text x="65.9826%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="65.7326%" y="501" width="0.2402%" height="15" fill="rgb(207,104,33)" fg:x="821" fg:w="3"/><text x="65.9826%" y="511.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="65.7326%" y="485" width="0.2402%" height="15" fill="rgb(219,21,39)" fg:x="821" fg:w="3"/><text x="65.9826%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9728%" y="565" width="0.0801%" height="15" fill="rgb(214,133,29)" fg:x="824" fg:w="1"/><text x="66.2228%" y="575.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.56%)</title><rect x="65.5725%" y="661" width="0.5604%" height="15" fill="rgb(226,93,6)" fg:x="819" fg:w="7"/><text x="65.8225%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (6 samples, 0.48%)</title><rect x="65.6525%" y="645" width="0.4804%" height="15" fill="rgb(252,222,34)" fg:x="820" fg:w="6"/><text x="65.9025%" y="655.50"></text></g><g><title>glob::glob (2 samples, 0.16%)</title><rect x="65.9728%" y="629" width="0.1601%" height="15" fill="rgb(252,92,48)" fg:x="824" fg:w="2"/><text x="66.2228%" y="639.50"></text></g><g><title>glob::glob_with (2 samples, 0.16%)</title><rect x="65.9728%" y="613" width="0.1601%" height="15" fill="rgb(245,223,24)" fg:x="824" fg:w="2"/><text x="66.2228%" y="623.50"></text></g><g><title>glob::Pattern::new (2 samples, 0.16%)</title><rect x="65.9728%" y="597" width="0.1601%" height="15" fill="rgb(205,176,3)" fg:x="824" fg:w="2"/><text x="66.2228%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="65.9728%" y="581" width="0.1601%" height="15" fill="rgb(235,151,15)" fg:x="824" fg:w="2"/><text x="66.2228%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.0528%" y="565" width="0.0801%" height="15" fill="rgb(237,209,11)" fg:x="825" fg:w="1"/><text x="66.3028%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.0528%" y="549" width="0.0801%" height="15" fill="rgb(243,227,24)" fg:x="825" fg:w="1"/><text x="66.3028%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.0528%" y="533" width="0.0801%" height="15" fill="rgb(239,193,16)" fg:x="825" fg:w="1"/><text x="66.3028%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (3 samples, 0.24%)</title><rect x="66.1329%" y="661" width="0.2402%" height="15" fill="rgb(231,27,9)" fg:x="826" fg:w="3"/><text x="66.3829%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="66.2130%" y="645" width="0.1601%" height="15" fill="rgb(219,169,10)" fg:x="827" fg:w="2"/><text x="66.4630%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.2930%" y="629" width="0.0801%" height="15" fill="rgb(244,229,43)" fg:x="828" fg:w="1"/><text x="66.5430%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (15 samples, 1.20%)</title><rect x="65.2522%" y="677" width="1.2010%" height="15" fill="rgb(254,38,20)" fg:x="815" fg:w="15"/><text x="65.5022%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="66.3731%" y="661" width="0.0801%" height="15" fill="rgb(250,47,30)" fg:x="829" fg:w="1"/><text x="66.6231%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="66.3731%" y="645" width="0.0801%" height="15" fill="rgb(224,124,36)" fg:x="829" fg:w="1"/><text x="66.6231%" y="655.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (18 samples, 1.44%)</title><rect x="65.0921%" y="741" width="1.4412%" height="15" fill="rgb(246,68,51)" fg:x="813" fg:w="18"/><text x="65.3421%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (18 samples, 1.44%)</title><rect x="65.0921%" y="725" width="1.4412%" height="15" fill="rgb(253,43,49)" fg:x="813" fg:w="18"/><text x="65.3421%" y="735.50"></text></g><g><title>engine::session::Session::new (18 samples, 1.44%)</title><rect x="65.0921%" y="709" width="1.4412%" height="15" fill="rgb(219,54,36)" fg:x="813" fg:w="18"/><text x="65.3421%" y="719.50"></text></g><g><title>engine::session::Session::initialize (17 samples, 1.36%)</title><rect x="65.1721%" y="693" width="1.3611%" height="15" fill="rgb(227,133,34)" fg:x="814" fg:w="17"/><text x="65.4221%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="66.4532%" y="677" width="0.0801%" height="15" fill="rgb(247,227,15)" fg:x="830" fg:w="1"/><text x="66.7032%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.4532%" y="661" width="0.0801%" height="15" fill="rgb(229,96,14)" fg:x="830" fg:w="1"/><text x="66.7032%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.4532%" y="645" width="0.0801%" height="15" fill="rgb(220,79,17)" fg:x="830" fg:w="1"/><text x="66.7032%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.4532%" y="629" width="0.0801%" height="15" fill="rgb(205,131,53)" fg:x="830" fg:w="1"/><text x="66.7032%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.4532%" y="613" width="0.0801%" height="15" fill="rgb(209,50,29)" fg:x="830" fg:w="1"/><text x="66.7032%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="66.5332%" y="725" width="0.0801%" height="15" fill="rgb(245,86,46)" fg:x="831" fg:w="1"/><text x="66.7832%" y="735.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="66.6133%" y="613" width="0.0801%" height="15" fill="rgb(235,66,46)" fg:x="832" fg:w="1"/><text x="66.8633%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="66.6133%" y="597" width="0.0801%" height="15" fill="rgb(232,148,31)" fg:x="832" fg:w="1"/><text x="66.8633%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.6133%" y="581" width="0.0801%" height="15" fill="rgb(217,149,8)" fg:x="832" fg:w="1"/><text x="66.8633%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.6133%" y="565" width="0.0801%" height="15" fill="rgb(209,183,11)" fg:x="832" fg:w="1"/><text x="66.8633%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="66.6133%" y="549" width="0.0801%" height="15" fill="rgb(208,55,20)" fg:x="832" fg:w="1"/><text x="66.8633%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="66.6934%" y="581" width="0.1601%" height="15" fill="rgb(218,39,14)" fg:x="833" fg:w="2"/><text x="66.9434%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.7734%" y="565" width="0.0801%" height="15" fill="rgb(216,169,33)" fg:x="834" fg:w="1"/><text x="67.0234%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.7734%" y="549" width="0.0801%" height="15" fill="rgb(233,80,24)" fg:x="834" fg:w="1"/><text x="67.0234%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.7734%" y="533" width="0.0801%" height="15" fill="rgb(213,179,31)" fg:x="834" fg:w="1"/><text x="67.0234%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="66.9335%" y="565" width="0.3203%" height="15" fill="rgb(209,19,5)" fg:x="836" fg:w="4"/><text x="67.1835%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="67.0136%" y="549" width="0.2402%" height="15" fill="rgb(219,18,35)" fg:x="837" fg:w="3"/><text x="67.2636%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="67.0937%" y="533" width="0.1601%" height="15" fill="rgb(209,169,16)" fg:x="838" fg:w="2"/><text x="67.3437%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.1737%" y="517" width="0.0801%" height="15" fill="rgb(245,90,51)" fg:x="839" fg:w="1"/><text x="67.4237%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.1737%" y="501" width="0.0801%" height="15" fill="rgb(220,99,45)" fg:x="839" fg:w="1"/><text x="67.4237%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.1737%" y="485" width="0.0801%" height="15" fill="rgb(249,89,25)" fg:x="839" fg:w="1"/><text x="67.4237%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.1737%" y="469" width="0.0801%" height="15" fill="rgb(239,193,0)" fg:x="839" fg:w="1"/><text x="67.4237%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="66.6133%" y="629" width="0.7206%" height="15" fill="rgb(231,126,1)" fg:x="832" fg:w="9"/><text x="66.8633%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="66.6934%" y="613" width="0.6405%" height="15" fill="rgb(243,166,3)" fg:x="833" fg:w="8"/><text x="66.9434%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="66.6934%" y="597" width="0.6405%" height="15" fill="rgb(223,22,34)" fg:x="833" fg:w="8"/><text x="66.9434%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="66.8535%" y="581" width="0.4804%" height="15" fill="rgb(251,52,51)" fg:x="835" fg:w="6"/><text x="67.1035%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.2538%" y="565" width="0.0801%" height="15" fill="rgb(221,165,28)" fg:x="840" fg:w="1"/><text x="67.5038%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.3339%" y="629" width="0.0801%" height="15" fill="rgb(218,121,47)" fg:x="841" fg:w="1"/><text x="67.5839%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="67.3339%" y="613" width="0.0801%" height="15" fill="rgb(209,120,9)" fg:x="841" fg:w="1"/><text x="67.5839%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.3339%" y="597" width="0.0801%" height="15" fill="rgb(236,68,12)" fg:x="841" fg:w="1"/><text x="67.5839%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.3339%" y="581" width="0.0801%" height="15" fill="rgb(225,194,26)" fg:x="841" fg:w="1"/><text x="67.5839%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.3339%" y="565" width="0.0801%" height="15" fill="rgb(231,84,39)" fg:x="841" fg:w="1"/><text x="67.5839%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.3339%" y="549" width="0.0801%" height="15" fill="rgb(210,11,45)" fg:x="841" fg:w="1"/><text x="67.5839%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.3339%" y="533" width="0.0801%" height="15" fill="rgb(224,54,52)" fg:x="841" fg:w="1"/><text x="67.5839%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="67.5741%" y="533" width="0.0801%" height="15" fill="rgb(238,102,14)" fg:x="844" fg:w="1"/><text x="67.8241%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="67.5741%" y="517" width="0.0801%" height="15" fill="rgb(243,160,52)" fg:x="844" fg:w="1"/><text x="67.8241%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="67.5741%" y="501" width="0.0801%" height="15" fill="rgb(216,114,19)" fg:x="844" fg:w="1"/><text x="67.8241%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="67.5741%" y="485" width="0.0801%" height="15" fill="rgb(244,166,37)" fg:x="844" fg:w="1"/><text x="67.8241%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="67.5741%" y="469" width="0.0801%" height="15" fill="rgb(246,29,44)" fg:x="844" fg:w="1"/><text x="67.8241%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="67.5741%" y="453" width="0.0801%" height="15" fill="rgb(215,56,53)" fg:x="844" fg:w="1"/><text x="67.8241%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.5741%" y="437" width="0.0801%" height="15" fill="rgb(217,60,2)" fg:x="844" fg:w="1"/><text x="67.8241%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="67.4940%" y="565" width="0.2402%" height="15" fill="rgb(207,26,24)" fg:x="843" fg:w="3"/><text x="67.7440%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="67.4940%" y="549" width="0.2402%" height="15" fill="rgb(252,210,15)" fg:x="843" fg:w="3"/><text x="67.7440%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="67.6541%" y="533" width="0.0801%" height="15" fill="rgb(253,209,26)" fg:x="845" fg:w="1"/><text x="67.9041%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="67.6541%" y="517" width="0.0801%" height="15" fill="rgb(238,170,14)" fg:x="845" fg:w="1"/><text x="67.9041%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="67.6541%" y="501" width="0.0801%" height="15" fill="rgb(216,178,15)" fg:x="845" fg:w="1"/><text x="67.9041%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="67.6541%" y="485" width="0.0801%" height="15" fill="rgb(250,197,2)" fg:x="845" fg:w="1"/><text x="67.9041%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.6541%" y="469" width="0.0801%" height="15" fill="rgb(212,70,42)" fg:x="845" fg:w="1"/><text x="67.9041%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6541%" y="453" width="0.0801%" height="15" fill="rgb(227,213,9)" fg:x="845" fg:w="1"/><text x="67.9041%" y="463.50"></text></g><g><title>engine::session::Session::flush (15 samples, 1.20%)</title><rect x="66.6133%" y="725" width="1.2010%" height="15" fill="rgb(245,99,25)" fg:x="832" fg:w="15"/><text x="66.8633%" y="735.50"></text></g><g><title>engine::session::state::State::close (15 samples, 1.20%)</title><rect x="66.6133%" y="709" width="1.2010%" height="15" fill="rgb(250,82,29)" fg:x="832" fg:w="15"/><text x="66.8633%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (15 samples, 1.20%)</title><rect x="66.6133%" y="693" width="1.2010%" height="15" fill="rgb(241,226,54)" fg:x="832" fg:w="15"/><text x="66.8633%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.20%)</title><rect x="66.6133%" y="677" width="1.2010%" height="15" fill="rgb(221,99,41)" fg:x="832" fg:w="15"/><text x="66.8633%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 1.20%)</title><rect x="66.6133%" y="661" width="1.2010%" height="15" fill="rgb(213,90,21)" fg:x="832" fg:w="15"/><text x="66.8633%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.20%)</title><rect x="66.6133%" y="645" width="1.2010%" height="15" fill="rgb(205,208,24)" fg:x="832" fg:w="15"/><text x="66.8633%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="67.4139%" y="629" width="0.4003%" height="15" fill="rgb(246,31,12)" fg:x="842" fg:w="5"/><text x="67.6639%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="67.4139%" y="613" width="0.4003%" height="15" fill="rgb(213,154,6)" fg:x="842" fg:w="5"/><text x="67.6639%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="67.4139%" y="597" width="0.4003%" height="15" fill="rgb(222,163,29)" fg:x="842" fg:w="5"/><text x="67.6639%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="67.4139%" y="581" width="0.4003%" height="15" fill="rgb(227,201,8)" fg:x="842" fg:w="5"/><text x="67.6639%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.7342%" y="565" width="0.0801%" height="15" fill="rgb(233,9,32)" fg:x="846" fg:w="1"/><text x="67.9842%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="67.7342%" y="549" width="0.0801%" height="15" fill="rgb(217,54,24)" fg:x="846" fg:w="1"/><text x="67.9842%" y="559.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="67.8143%" y="693" width="0.0801%" height="15" fill="rgb(235,192,0)" fg:x="847" fg:w="1"/><text x="68.0643%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.8143%" y="677" width="0.0801%" height="15" fill="rgb(235,45,9)" fg:x="847" fg:w="1"/><text x="68.0643%" y="687.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="67.8143%" y="725" width="0.1601%" height="15" fill="rgb(246,42,40)" fg:x="847" fg:w="2"/><text x="68.0643%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="67.8143%" y="709" width="0.1601%" height="15" fill="rgb(248,111,24)" fg:x="847" fg:w="2"/><text x="68.0643%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="67.8943%" y="693" width="0.0801%" height="15" fill="rgb(249,65,22)" fg:x="848" fg:w="1"/><text x="68.1443%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.8943%" y="677" width="0.0801%" height="15" fill="rgb(238,111,51)" fg:x="848" fg:w="1"/><text x="68.1443%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="67.8943%" y="661" width="0.0801%" height="15" fill="rgb(250,118,22)" fg:x="848" fg:w="1"/><text x="68.1443%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="67.8943%" y="645" width="0.0801%" height="15" fill="rgb(234,84,26)" fg:x="848" fg:w="1"/><text x="68.1443%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="67.8943%" y="629" width="0.0801%" height="15" fill="rgb(243,172,12)" fg:x="848" fg:w="1"/><text x="68.1443%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.8943%" y="613" width="0.0801%" height="15" fill="rgb(236,150,49)" fg:x="848" fg:w="1"/><text x="68.1443%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="67.9744%" y="693" width="0.0801%" height="15" fill="rgb(225,197,26)" fg:x="849" fg:w="1"/><text x="68.2244%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.9744%" y="677" width="0.0801%" height="15" fill="rgb(214,17,42)" fg:x="849" fg:w="1"/><text x="68.2244%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.9744%" y="661" width="0.0801%" height="15" fill="rgb(224,165,40)" fg:x="849" fg:w="1"/><text x="68.2244%" y="671.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="68.0544%" y="677" width="0.0801%" height="15" fill="rgb(246,100,4)" fg:x="850" fg:w="1"/><text x="68.3044%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="68.0544%" y="661" width="0.0801%" height="15" fill="rgb(222,103,0)" fg:x="850" fg:w="1"/><text x="68.3044%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.0544%" y="645" width="0.0801%" height="15" fill="rgb(227,189,26)" fg:x="850" fg:w="1"/><text x="68.3044%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="68.0544%" y="693" width="0.1601%" height="15" fill="rgb(214,202,17)" fg:x="850" fg:w="2"/><text x="68.3044%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="68.1345%" y="677" width="0.0801%" height="15" fill="rgb(229,111,3)" fg:x="851" fg:w="1"/><text x="68.3845%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="68.1345%" y="661" width="0.0801%" height="15" fill="rgb(229,172,15)" fg:x="851" fg:w="1"/><text x="68.3845%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.1345%" y="645" width="0.0801%" height="15" fill="rgb(230,224,35)" fg:x="851" fg:w="1"/><text x="68.3845%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.1345%" y="629" width="0.0801%" height="15" fill="rgb(251,141,6)" fg:x="851" fg:w="1"/><text x="68.3845%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="68.1345%" y="613" width="0.0801%" height="15" fill="rgb(225,208,6)" fg:x="851" fg:w="1"/><text x="68.3845%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="67.9744%" y="725" width="0.3203%" height="15" fill="rgb(246,181,16)" fg:x="849" fg:w="4"/><text x="68.2244%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="67.9744%" y="709" width="0.3203%" height="15" fill="rgb(227,129,36)" fg:x="849" fg:w="4"/><text x="68.2244%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="68.2146%" y="693" width="0.0801%" height="15" fill="rgb(248,117,24)" fg:x="852" fg:w="1"/><text x="68.4646%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="68.2146%" y="677" width="0.0801%" height="15" fill="rgb(214,185,35)" fg:x="852" fg:w="1"/><text x="68.4646%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="68.2146%" y="661" width="0.0801%" height="15" fill="rgb(236,150,34)" fg:x="852" fg:w="1"/><text x="68.4646%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="68.2146%" y="645" width="0.0801%" height="15" fill="rgb(243,228,27)" fg:x="852" fg:w="1"/><text x="68.4646%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.2146%" y="629" width="0.0801%" height="15" fill="rgb(245,77,44)" fg:x="852" fg:w="1"/><text x="68.4646%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.2146%" y="613" width="0.0801%" height="15" fill="rgb(235,214,42)" fg:x="852" fg:w="1"/><text x="68.4646%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.2146%" y="597" width="0.0801%" height="15" fill="rgb(221,74,3)" fg:x="852" fg:w="1"/><text x="68.4646%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.2146%" y="581" width="0.0801%" height="15" fill="rgb(206,121,29)" fg:x="852" fg:w="1"/><text x="68.4646%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.2146%" y="565" width="0.0801%" height="15" fill="rgb(249,131,53)" fg:x="852" fg:w="1"/><text x="68.4646%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.2146%" y="549" width="0.0801%" height="15" fill="rgb(236,170,29)" fg:x="852" fg:w="1"/><text x="68.4646%" y="559.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="68.2946%" y="693" width="0.0801%" height="15" fill="rgb(247,96,15)" fg:x="853" fg:w="1"/><text x="68.5446%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="68.2946%" y="677" width="0.0801%" height="15" fill="rgb(211,210,7)" fg:x="853" fg:w="1"/><text x="68.5446%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="68.3747%" y="693" width="0.0801%" height="15" fill="rgb(240,88,50)" fg:x="854" fg:w="1"/><text x="68.6247%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="68.3747%" y="677" width="0.0801%" height="15" fill="rgb(209,229,26)" fg:x="854" fg:w="1"/><text x="68.6247%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="68.3747%" y="661" width="0.0801%" height="15" fill="rgb(210,68,23)" fg:x="854" fg:w="1"/><text x="68.6247%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.3747%" y="645" width="0.0801%" height="15" fill="rgb(229,180,13)" fg:x="854" fg:w="1"/><text x="68.6247%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="68.3747%" y="629" width="0.0801%" height="15" fill="rgb(236,53,44)" fg:x="854" fg:w="1"/><text x="68.6247%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.3747%" y="613" width="0.0801%" height="15" fill="rgb(244,214,29)" fg:x="854" fg:w="1"/><text x="68.6247%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3747%" y="597" width="0.0801%" height="15" fill="rgb(220,75,29)" fg:x="854" fg:w="1"/><text x="68.6247%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.3747%" y="581" width="0.0801%" height="15" fill="rgb(214,183,37)" fg:x="854" fg:w="1"/><text x="68.6247%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3747%" y="565" width="0.0801%" height="15" fill="rgb(239,117,29)" fg:x="854" fg:w="1"/><text x="68.6247%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.3747%" y="549" width="0.0801%" height="15" fill="rgb(237,171,35)" fg:x="854" fg:w="1"/><text x="68.6247%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3747%" y="533" width="0.0801%" height="15" fill="rgb(229,178,53)" fg:x="854" fg:w="1"/><text x="68.6247%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (3 samples, 0.24%)</title><rect x="68.2946%" y="725" width="0.2402%" height="15" fill="rgb(210,102,19)" fg:x="853" fg:w="3"/><text x="68.5446%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="68.2946%" y="709" width="0.2402%" height="15" fill="rgb(235,127,22)" fg:x="853" fg:w="3"/><text x="68.5446%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="68.4548%" y="693" width="0.0801%" height="15" fill="rgb(244,31,31)" fg:x="855" fg:w="1"/><text x="68.7048%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="68.4548%" y="677" width="0.0801%" height="15" fill="rgb(231,43,21)" fg:x="855" fg:w="1"/><text x="68.7048%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="68.4548%" y="661" width="0.0801%" height="15" fill="rgb(217,131,35)" fg:x="855" fg:w="1"/><text x="68.7048%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.4548%" y="645" width="0.0801%" height="15" fill="rgb(221,149,4)" fg:x="855" fg:w="1"/><text x="68.7048%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="68.4548%" y="629" width="0.0801%" height="15" fill="rgb(232,170,28)" fg:x="855" fg:w="1"/><text x="68.7048%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.4548%" y="613" width="0.0801%" height="15" fill="rgb(238,56,10)" fg:x="855" fg:w="1"/><text x="68.7048%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.5348%" y="709" width="0.0801%" height="15" fill="rgb(235,196,14)" fg:x="856" fg:w="1"/><text x="68.7848%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.5348%" y="693" width="0.0801%" height="15" fill="rgb(216,45,48)" fg:x="856" fg:w="1"/><text x="68.7848%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.6149%" y="629" width="0.0801%" height="15" fill="rgb(238,213,17)" fg:x="857" fg:w="1"/><text x="68.8649%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="68.6149%" y="613" width="0.0801%" height="15" fill="rgb(212,13,2)" fg:x="857" fg:w="1"/><text x="68.8649%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="68.6149%" y="709" width="0.1601%" height="15" fill="rgb(240,114,20)" fg:x="857" fg:w="2"/><text x="68.8649%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="68.6149%" y="693" width="0.1601%" height="15" fill="rgb(228,41,40)" fg:x="857" fg:w="2"/><text x="68.8649%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="68.6149%" y="677" width="0.1601%" height="15" fill="rgb(244,132,35)" fg:x="857" fg:w="2"/><text x="68.8649%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="68.6149%" y="661" width="0.1601%" height="15" fill="rgb(253,189,4)" fg:x="857" fg:w="2"/><text x="68.8649%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="68.6149%" y="645" width="0.1601%" height="15" fill="rgb(224,37,19)" fg:x="857" fg:w="2"/><text x="68.8649%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="68.6950%" y="629" width="0.0801%" height="15" fill="rgb(235,223,18)" fg:x="858" fg:w="1"/><text x="68.9450%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="68.6950%" y="613" width="0.0801%" height="15" fill="rgb(235,163,25)" fg:x="858" fg:w="1"/><text x="68.9450%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="68.6950%" y="597" width="0.0801%" height="15" fill="rgb(217,145,28)" fg:x="858" fg:w="1"/><text x="68.9450%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6950%" y="581" width="0.0801%" height="15" fill="rgb(223,223,32)" fg:x="858" fg:w="1"/><text x="68.9450%" y="591.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="68.7750%" y="677" width="0.0801%" height="15" fill="rgb(227,189,39)" fg:x="859" fg:w="1"/><text x="69.0250%" y="687.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="68.7750%" y="661" width="0.0801%" height="15" fill="rgb(248,10,22)" fg:x="859" fg:w="1"/><text x="69.0250%" y="671.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="68.7750%" y="645" width="0.0801%" height="15" fill="rgb(248,46,39)" fg:x="859" fg:w="1"/><text x="69.0250%" y="655.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="68.7750%" y="629" width="0.0801%" height="15" fill="rgb(248,113,48)" fg:x="859" fg:w="1"/><text x="69.0250%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="68.7750%" y="613" width="0.0801%" height="15" fill="rgb(245,16,25)" fg:x="859" fg:w="1"/><text x="69.0250%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="68.7750%" y="597" width="0.0801%" height="15" fill="rgb(249,152,16)" fg:x="859" fg:w="1"/><text x="69.0250%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="68.7750%" y="581" width="0.0801%" height="15" fill="rgb(250,16,1)" fg:x="859" fg:w="1"/><text x="69.0250%" y="591.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="68.7750%" y="565" width="0.0801%" height="15" fill="rgb(249,138,3)" fg:x="859" fg:w="1"/><text x="69.0250%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.8551%" y="645" width="0.0801%" height="15" fill="rgb(227,71,41)" fg:x="860" fg:w="1"/><text x="69.1051%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.8551%" y="629" width="0.0801%" height="15" fill="rgb(209,184,23)" fg:x="860" fg:w="1"/><text x="69.1051%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="68.9351%" y="581" width="0.0801%" height="15" fill="rgb(223,215,31)" fg:x="861" fg:w="1"/><text x="69.1851%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.9351%" y="565" width="0.0801%" height="15" fill="rgb(210,146,28)" fg:x="861" fg:w="1"/><text x="69.1851%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="69.0152%" y="549" width="0.0801%" height="15" fill="rgb(209,183,41)" fg:x="862" fg:w="1"/><text x="69.2652%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.0152%" y="533" width="0.0801%" height="15" fill="rgb(209,224,45)" fg:x="862" fg:w="1"/><text x="69.2652%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.0953%" y="549" width="0.0801%" height="15" fill="rgb(224,209,51)" fg:x="863" fg:w="1"/><text x="69.3453%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.0953%" y="533" width="0.0801%" height="15" fill="rgb(223,17,39)" fg:x="863" fg:w="1"/><text x="69.3453%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.0953%" y="517" width="0.0801%" height="15" fill="rgb(234,204,37)" fg:x="863" fg:w="1"/><text x="69.3453%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="69.1753%" y="533" width="0.2402%" height="15" fill="rgb(236,120,5)" fg:x="864" fg:w="3"/><text x="69.4253%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="69.1753%" y="517" width="0.2402%" height="15" fill="rgb(248,97,27)" fg:x="864" fg:w="3"/><text x="69.4253%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="69.2554%" y="501" width="0.1601%" height="15" fill="rgb(240,66,17)" fg:x="865" fg:w="2"/><text x="69.5054%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="69.2554%" y="485" width="0.1601%" height="15" fill="rgb(210,79,3)" fg:x="865" fg:w="2"/><text x="69.5054%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.3355%" y="469" width="0.0801%" height="15" fill="rgb(214,176,27)" fg:x="866" fg:w="1"/><text x="69.5855%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.3355%" y="453" width="0.0801%" height="15" fill="rgb(235,185,3)" fg:x="866" fg:w="1"/><text x="69.5855%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.3355%" y="437" width="0.0801%" height="15" fill="rgb(227,24,12)" fg:x="866" fg:w="1"/><text x="69.5855%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="69.4155%" y="517" width="0.1601%" height="15" fill="rgb(252,169,48)" fg:x="867" fg:w="2"/><text x="69.6655%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="69.4155%" y="501" width="0.1601%" height="15" fill="rgb(212,65,1)" fg:x="867" fg:w="2"/><text x="69.6655%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="69.4155%" y="485" width="0.1601%" height="15" fill="rgb(242,39,24)" fg:x="867" fg:w="2"/><text x="69.6655%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="69.4155%" y="469" width="0.1601%" height="15" fill="rgb(249,32,23)" fg:x="867" fg:w="2"/><text x="69.6655%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="69.4155%" y="453" width="0.1601%" height="15" fill="rgb(251,195,23)" fg:x="867" fg:w="2"/><text x="69.6655%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="69.4155%" y="437" width="0.1601%" height="15" fill="rgb(236,174,8)" fg:x="867" fg:w="2"/><text x="69.6655%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="69.4155%" y="421" width="0.1601%" height="15" fill="rgb(220,197,8)" fg:x="867" fg:w="2"/><text x="69.6655%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="69.0152%" y="565" width="0.6405%" height="15" fill="rgb(240,108,37)" fg:x="862" fg:w="8"/><text x="69.2652%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="69.1753%" y="549" width="0.4804%" height="15" fill="rgb(232,176,24)" fg:x="864" fg:w="6"/><text x="69.4253%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="69.4155%" y="533" width="0.2402%" height="15" fill="rgb(243,35,29)" fg:x="867" fg:w="3"/><text x="69.6655%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.5757%" y="517" width="0.0801%" height="15" fill="rgb(210,37,18)" fg:x="869" fg:w="1"/><text x="69.8257%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="69.0152%" y="581" width="0.7206%" height="15" fill="rgb(224,184,40)" fg:x="862" fg:w="9"/><text x="69.2652%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.6557%" y="565" width="0.0801%" height="15" fill="rgb(236,39,29)" fg:x="870" fg:w="1"/><text x="69.9057%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.6557%" y="549" width="0.0801%" height="15" fill="rgb(232,48,39)" fg:x="870" fg:w="1"/><text x="69.9057%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.88%)</title><rect x="68.9351%" y="597" width="0.8807%" height="15" fill="rgb(236,34,42)" fg:x="861" fg:w="11"/><text x="69.1851%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.7358%" y="581" width="0.0801%" height="15" fill="rgb(243,106,37)" fg:x="871" fg:w="1"/><text x="69.9858%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.7358%" y="565" width="0.0801%" height="15" fill="rgb(218,96,6)" fg:x="871" fg:w="1"/><text x="69.9858%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.7358%" y="549" width="0.0801%" height="15" fill="rgb(235,130,12)" fg:x="871" fg:w="1"/><text x="69.9858%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.7358%" y="533" width="0.0801%" height="15" fill="rgb(231,95,0)" fg:x="871" fg:w="1"/><text x="69.9858%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.7358%" y="517" width="0.0801%" height="15" fill="rgb(228,12,23)" fg:x="871" fg:w="1"/><text x="69.9858%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7358%" y="501" width="0.0801%" height="15" fill="rgb(216,12,1)" fg:x="871" fg:w="1"/><text x="69.9858%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.8159%" y="565" width="0.0801%" height="15" fill="rgb(219,59,3)" fg:x="872" fg:w="1"/><text x="70.0659%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.8159%" y="597" width="0.1601%" height="15" fill="rgb(215,208,46)" fg:x="872" fg:w="2"/><text x="70.0659%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="69.8159%" y="581" width="0.1601%" height="15" fill="rgb(254,224,29)" fg:x="872" fg:w="2"/><text x="70.0659%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.8959%" y="565" width="0.0801%" height="15" fill="rgb(232,14,29)" fg:x="873" fg:w="1"/><text x="70.1459%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.8959%" y="549" width="0.0801%" height="15" fill="rgb(208,45,52)" fg:x="873" fg:w="1"/><text x="70.1459%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.8959%" y="533" width="0.0801%" height="15" fill="rgb(234,191,28)" fg:x="873" fg:w="1"/><text x="70.1459%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.9760%" y="565" width="0.0801%" height="15" fill="rgb(244,67,43)" fg:x="874" fg:w="1"/><text x="70.2260%" y="575.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPath as core::convert::From&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::from (1 samples, 0.08%)</title><rect x="69.9760%" y="549" width="0.0801%" height="15" fill="rgb(236,189,24)" fg:x="874" fg:w="1"/><text x="70.2260%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="69.9760%" y="581" width="0.1601%" height="15" fill="rgb(239,214,33)" fg:x="874" fg:w="2"/><text x="70.2260%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0560%" y="565" width="0.0801%" height="15" fill="rgb(226,176,41)" fg:x="875" fg:w="1"/><text x="70.3060%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.2162%" y="517" width="0.0801%" height="15" fill="rgb(248,47,8)" fg:x="877" fg:w="1"/><text x="70.4662%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.2962%" y="501" width="0.0801%" height="15" fill="rgb(218,81,44)" fg:x="878" fg:w="1"/><text x="70.5462%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.2962%" y="485" width="0.0801%" height="15" fill="rgb(213,98,6)" fg:x="878" fg:w="1"/><text x="70.5462%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2962%" y="469" width="0.0801%" height="15" fill="rgb(222,85,22)" fg:x="878" fg:w="1"/><text x="70.5462%" y="479.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.68%)</title><rect x="68.7750%" y="709" width="1.6813%" height="15" fill="rgb(239,46,39)" fg:x="859" fg:w="21"/><text x="69.0250%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (21 samples, 1.68%)</title><rect x="68.7750%" y="693" width="1.6813%" height="15" fill="rgb(237,12,29)" fg:x="859" fg:w="21"/><text x="69.0250%" y="703.50"></text></g><g><title>engine::session::state::State::close (20 samples, 1.60%)</title><rect x="68.8551%" y="677" width="1.6013%" height="15" fill="rgb(214,77,8)" fg:x="860" fg:w="20"/><text x="69.1051%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (20 samples, 1.60%)</title><rect x="68.8551%" y="661" width="1.6013%" height="15" fill="rgb(217,168,37)" fg:x="860" fg:w="20"/><text x="69.1051%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (19 samples, 1.52%)</title><rect x="68.9351%" y="645" width="1.5212%" height="15" fill="rgb(221,217,23)" fg:x="861" fg:w="19"/><text x="69.1851%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.52%)</title><rect x="68.9351%" y="629" width="1.5212%" height="15" fill="rgb(243,229,36)" fg:x="861" fg:w="19"/><text x="69.1851%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (19 samples, 1.52%)</title><rect x="68.9351%" y="613" width="1.5212%" height="15" fill="rgb(251,163,40)" fg:x="861" fg:w="19"/><text x="69.1851%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="69.9760%" y="597" width="0.4804%" height="15" fill="rgb(237,222,12)" fg:x="874" fg:w="6"/><text x="70.2260%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="70.1361%" y="581" width="0.3203%" height="15" fill="rgb(248,132,6)" fg:x="876" fg:w="4"/><text x="70.3861%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="70.2162%" y="565" width="0.2402%" height="15" fill="rgb(227,167,50)" fg:x="877" fg:w="3"/><text x="70.4662%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="70.2162%" y="549" width="0.2402%" height="15" fill="rgb(242,84,37)" fg:x="877" fg:w="3"/><text x="70.4662%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="70.2162%" y="533" width="0.2402%" height="15" fill="rgb(212,4,50)" fg:x="877" fg:w="3"/><text x="70.4662%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="70.2962%" y="517" width="0.1601%" height="15" fill="rgb(230,228,32)" fg:x="878" fg:w="2"/><text x="70.5462%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.3763%" y="501" width="0.0801%" height="15" fill="rgb(248,217,23)" fg:x="879" fg:w="1"/><text x="70.6263%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.3763%" y="485" width="0.0801%" height="15" fill="rgb(238,197,32)" fg:x="879" fg:w="1"/><text x="70.6263%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.3763%" y="469" width="0.0801%" height="15" fill="rgb(236,106,1)" fg:x="879" fg:w="1"/><text x="70.6263%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3763%" y="453" width="0.0801%" height="15" fill="rgb(219,228,13)" fg:x="879" fg:w="1"/><text x="70.6263%" y="463.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="70.4564%" y="709" width="0.0801%" height="15" fill="rgb(238,30,35)" fg:x="880" fg:w="1"/><text x="70.7064%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="70.4564%" y="693" width="0.0801%" height="15" fill="rgb(236,70,23)" fg:x="880" fg:w="1"/><text x="70.7064%" y="703.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="70.4564%" y="677" width="0.0801%" height="15" fill="rgb(249,104,48)" fg:x="880" fg:w="1"/><text x="70.7064%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="70.4564%" y="661" width="0.0801%" height="15" fill="rgb(254,117,50)" fg:x="880" fg:w="1"/><text x="70.7064%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="70.4564%" y="645" width="0.0801%" height="15" fill="rgb(223,152,4)" fg:x="880" fg:w="1"/><text x="70.7064%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="70.4564%" y="629" width="0.0801%" height="15" fill="rgb(245,6,2)" fg:x="880" fg:w="1"/><text x="70.7064%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="70.4564%" y="613" width="0.0801%" height="15" fill="rgb(249,150,24)" fg:x="880" fg:w="1"/><text x="70.7064%" y="623.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="70.4564%" y="597" width="0.0801%" height="15" fill="rgb(228,185,42)" fg:x="880" fg:w="1"/><text x="70.7064%" y="607.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="70.4564%" y="581" width="0.0801%" height="15" fill="rgb(226,39,33)" fg:x="880" fg:w="1"/><text x="70.7064%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="70.5364%" y="693" width="0.1601%" height="15" fill="rgb(221,166,19)" fg:x="881" fg:w="2"/><text x="70.7864%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="70.5364%" y="677" width="0.1601%" height="15" fill="rgb(209,109,2)" fg:x="881" fg:w="2"/><text x="70.7864%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.6165%" y="661" width="0.0801%" height="15" fill="rgb(252,216,26)" fg:x="882" fg:w="1"/><text x="70.8665%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6165%" y="645" width="0.0801%" height="15" fill="rgb(227,173,36)" fg:x="882" fg:w="1"/><text x="70.8665%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.6966%" y="677" width="0.0801%" height="15" fill="rgb(209,90,7)" fg:x="883" fg:w="1"/><text x="70.9466%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.6966%" y="661" width="0.0801%" height="15" fill="rgb(250,194,11)" fg:x="883" fg:w="1"/><text x="70.9466%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.6966%" y="645" width="0.0801%" height="15" fill="rgb(220,72,50)" fg:x="883" fg:w="1"/><text x="70.9466%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.7766%" y="645" width="0.0801%" height="15" fill="rgb(222,106,48)" fg:x="884" fg:w="1"/><text x="71.0266%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7766%" y="629" width="0.0801%" height="15" fill="rgb(216,220,45)" fg:x="884" fg:w="1"/><text x="71.0266%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="70.7766%" y="677" width="0.1601%" height="15" fill="rgb(234,112,18)" fg:x="884" fg:w="2"/><text x="71.0266%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="70.7766%" y="661" width="0.1601%" height="15" fill="rgb(206,179,9)" fg:x="884" fg:w="2"/><text x="71.0266%" y="671.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.8567%" y="645" width="0.0801%" height="15" fill="rgb(215,115,40)" fg:x="885" fg:w="1"/><text x="71.1067%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8567%" y="629" width="0.0801%" height="15" fill="rgb(222,69,34)" fg:x="885" fg:w="1"/><text x="71.1067%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.8567%" y="613" width="0.0801%" height="15" fill="rgb(209,161,10)" fg:x="885" fg:w="1"/><text x="71.1067%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="70.9367%" y="629" width="0.0801%" height="15" fill="rgb(217,6,38)" fg:x="886" fg:w="1"/><text x="71.1867%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9367%" y="613" width="0.0801%" height="15" fill="rgb(229,229,48)" fg:x="886" fg:w="1"/><text x="71.1867%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9367%" y="597" width="0.0801%" height="15" fill="rgb(225,21,28)" fg:x="886" fg:w="1"/><text x="71.1867%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.9367%" y="581" width="0.0801%" height="15" fill="rgb(206,33,13)" fg:x="886" fg:w="1"/><text x="71.1867%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9367%" y="565" width="0.0801%" height="15" fill="rgb(242,178,17)" fg:x="886" fg:w="1"/><text x="71.1867%" y="575.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="70.9367%" y="549" width="0.0801%" height="15" fill="rgb(220,162,5)" fg:x="886" fg:w="1"/><text x="71.1867%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="71.0168%" y="629" width="0.0801%" height="15" fill="rgb(210,33,43)" fg:x="887" fg:w="1"/><text x="71.2668%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.0168%" y="613" width="0.0801%" height="15" fill="rgb(216,116,54)" fg:x="887" fg:w="1"/><text x="71.2668%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="70.9367%" y="661" width="0.2402%" height="15" fill="rgb(249,92,24)" fg:x="886" fg:w="3"/><text x="71.1867%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="70.9367%" y="645" width="0.2402%" height="15" fill="rgb(231,189,14)" fg:x="886" fg:w="3"/><text x="71.1867%" y="655.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="71.0969%" y="629" width="0.0801%" height="15" fill="rgb(230,8,41)" fg:x="888" fg:w="1"/><text x="71.3469%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.0969%" y="613" width="0.0801%" height="15" fill="rgb(249,7,27)" fg:x="888" fg:w="1"/><text x="71.3469%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.0969%" y="597" width="0.0801%" height="15" fill="rgb(232,86,5)" fg:x="888" fg:w="1"/><text x="71.3469%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="71.0969%" y="581" width="0.0801%" height="15" fill="rgb(224,175,18)" fg:x="888" fg:w="1"/><text x="71.3469%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="70.6966%" y="693" width="0.5604%" height="15" fill="rgb(220,129,12)" fg:x="883" fg:w="7"/><text x="70.9466%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="70.9367%" y="677" width="0.3203%" height="15" fill="rgb(210,19,36)" fg:x="886" fg:w="4"/><text x="71.1867%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="71.1769%" y="661" width="0.0801%" height="15" fill="rgb(219,96,14)" fg:x="889" fg:w="1"/><text x="71.4269%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.1769%" y="645" width="0.0801%" height="15" fill="rgb(249,106,1)" fg:x="889" fg:w="1"/><text x="71.4269%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.1769%" y="629" width="0.0801%" height="15" fill="rgb(249,155,20)" fg:x="889" fg:w="1"/><text x="71.4269%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="71.1769%" y="613" width="0.0801%" height="15" fill="rgb(244,168,9)" fg:x="889" fg:w="1"/><text x="71.4269%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.1769%" y="597" width="0.0801%" height="15" fill="rgb(216,23,50)" fg:x="889" fg:w="1"/><text x="71.4269%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.1769%" y="581" width="0.0801%" height="15" fill="rgb(224,219,20)" fg:x="889" fg:w="1"/><text x="71.4269%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.1769%" y="565" width="0.0801%" height="15" fill="rgb(222,156,15)" fg:x="889" fg:w="1"/><text x="71.4269%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.1769%" y="549" width="0.0801%" height="15" fill="rgb(231,97,17)" fg:x="889" fg:w="1"/><text x="71.4269%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.1769%" y="533" width="0.0801%" height="15" fill="rgb(218,70,48)" fg:x="889" fg:w="1"/><text x="71.4269%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.1769%" y="517" width="0.0801%" height="15" fill="rgb(212,196,52)" fg:x="889" fg:w="1"/><text x="71.4269%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.1769%" y="501" width="0.0801%" height="15" fill="rgb(243,203,18)" fg:x="889" fg:w="1"/><text x="71.4269%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.80%)</title><rect x="70.5364%" y="709" width="0.8006%" height="15" fill="rgb(252,125,41)" fg:x="881" fg:w="10"/><text x="70.7864%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2570%" y="693" width="0.0801%" height="15" fill="rgb(223,180,33)" fg:x="890" fg:w="1"/><text x="71.5070%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2570%" y="677" width="0.0801%" height="15" fill="rgb(254,159,46)" fg:x="890" fg:w="1"/><text x="71.5070%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2570%" y="661" width="0.0801%" height="15" fill="rgb(254,38,10)" fg:x="890" fg:w="1"/><text x="71.5070%" y="671.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="71.3371%" y="677" width="0.0801%" height="15" fill="rgb(208,217,32)" fg:x="891" fg:w="1"/><text x="71.5871%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="71.3371%" y="661" width="0.0801%" height="15" fill="rgb(221,120,13)" fg:x="891" fg:w="1"/><text x="71.5871%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.3371%" y="645" width="0.0801%" height="15" fill="rgb(246,54,52)" fg:x="891" fg:w="1"/><text x="71.5871%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="71.3371%" y="629" width="0.0801%" height="15" fill="rgb(242,34,25)" fg:x="891" fg:w="1"/><text x="71.5871%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.4171%" y="645" width="0.0801%" height="15" fill="rgb(247,209,9)" fg:x="892" fg:w="1"/><text x="71.6671%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="71.4171%" y="629" width="0.0801%" height="15" fill="rgb(228,71,26)" fg:x="892" fg:w="1"/><text x="71.6671%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4171%" y="613" width="0.0801%" height="15" fill="rgb(222,145,49)" fg:x="892" fg:w="1"/><text x="71.6671%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4171%" y="597" width="0.0801%" height="15" fill="rgb(218,121,17)" fg:x="892" fg:w="1"/><text x="71.6671%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.4171%" y="581" width="0.0801%" height="15" fill="rgb(244,50,7)" fg:x="892" fg:w="1"/><text x="71.6671%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4972%" y="613" width="0.0801%" height="15" fill="rgb(246,229,37)" fg:x="893" fg:w="1"/><text x="71.7472%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4972%" y="597" width="0.0801%" height="15" fill="rgb(225,18,5)" fg:x="893" fg:w="1"/><text x="71.7472%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4972%" y="581" width="0.0801%" height="15" fill="rgb(213,204,8)" fg:x="893" fg:w="1"/><text x="71.7472%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4972%" y="565" width="0.0801%" height="15" fill="rgb(238,103,6)" fg:x="893" fg:w="1"/><text x="71.7472%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4972%" y="549" width="0.0801%" height="15" fill="rgb(222,25,35)" fg:x="893" fg:w="1"/><text x="71.7472%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.4972%" y="533" width="0.0801%" height="15" fill="rgb(213,203,35)" fg:x="893" fg:w="1"/><text x="71.7472%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.4972%" y="517" width="0.0801%" height="15" fill="rgb(221,79,53)" fg:x="893" fg:w="1"/><text x="71.7472%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.4972%" y="501" width="0.0801%" height="15" fill="rgb(243,200,35)" fg:x="893" fg:w="1"/><text x="71.7472%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.4972%" y="485" width="0.0801%" height="15" fill="rgb(248,60,25)" fg:x="893" fg:w="1"/><text x="71.7472%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.4972%" y="469" width="0.0801%" height="15" fill="rgb(227,53,46)" fg:x="893" fg:w="1"/><text x="71.7472%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.4972%" y="453" width="0.0801%" height="15" fill="rgb(216,120,32)" fg:x="893" fg:w="1"/><text x="71.7472%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.4972%" y="437" width="0.0801%" height="15" fill="rgb(220,134,1)" fg:x="893" fg:w="1"/><text x="71.7472%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.4972%" y="421" width="0.0801%" height="15" fill="rgb(237,168,5)" fg:x="893" fg:w="1"/><text x="71.7472%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.4972%" y="405" width="0.0801%" height="15" fill="rgb(231,100,33)" fg:x="893" fg:w="1"/><text x="71.7472%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.4972%" y="389" width="0.0801%" height="15" fill="rgb(236,177,47)" fg:x="893" fg:w="1"/><text x="71.7472%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="71.4171%" y="677" width="0.2402%" height="15" fill="rgb(235,7,49)" fg:x="892" fg:w="3"/><text x="71.6671%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="71.4171%" y="661" width="0.2402%" height="15" fill="rgb(232,119,22)" fg:x="892" fg:w="3"/><text x="71.6671%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="71.4972%" y="645" width="0.1601%" height="15" fill="rgb(254,73,53)" fg:x="893" fg:w="2"/><text x="71.7472%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="71.4972%" y="629" width="0.1601%" height="15" fill="rgb(251,35,20)" fg:x="893" fg:w="2"/><text x="71.7472%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.5773%" y="613" width="0.0801%" height="15" fill="rgb(241,119,20)" fg:x="894" fg:w="1"/><text x="71.8273%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.5773%" y="597" width="0.0801%" height="15" fill="rgb(207,102,14)" fg:x="894" fg:w="1"/><text x="71.8273%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.5773%" y="581" width="0.0801%" height="15" fill="rgb(248,201,50)" fg:x="894" fg:w="1"/><text x="71.8273%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.5773%" y="565" width="0.0801%" height="15" fill="rgb(222,185,44)" fg:x="894" fg:w="1"/><text x="71.8273%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.5773%" y="549" width="0.0801%" height="15" fill="rgb(218,107,18)" fg:x="894" fg:w="1"/><text x="71.8273%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.5773%" y="533" width="0.0801%" height="15" fill="rgb(237,177,39)" fg:x="894" fg:w="1"/><text x="71.8273%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="71.6573%" y="661" width="0.0801%" height="15" fill="rgb(246,69,6)" fg:x="895" fg:w="1"/><text x="71.9073%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.6573%" y="645" width="0.0801%" height="15" fill="rgb(234,208,37)" fg:x="895" fg:w="1"/><text x="71.9073%" y="655.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (6 samples, 0.48%)</title><rect x="71.3371%" y="709" width="0.4804%" height="15" fill="rgb(225,4,6)" fg:x="891" fg:w="6"/><text x="71.5871%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (6 samples, 0.48%)</title><rect x="71.3371%" y="693" width="0.4804%" height="15" fill="rgb(233,45,0)" fg:x="891" fg:w="6"/><text x="71.5871%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="71.6573%" y="677" width="0.1601%" height="15" fill="rgb(226,136,5)" fg:x="895" fg:w="2"/><text x="71.9073%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="71.7374%" y="661" width="0.0801%" height="15" fill="rgb(211,91,47)" fg:x="896" fg:w="1"/><text x="71.9874%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.7374%" y="645" width="0.0801%" height="15" fill="rgb(242,88,51)" fg:x="896" fg:w="1"/><text x="71.9874%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="71.7374%" y="629" width="0.0801%" height="15" fill="rgb(230,91,28)" fg:x="896" fg:w="1"/><text x="71.9874%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.7374%" y="613" width="0.0801%" height="15" fill="rgb(254,186,29)" fg:x="896" fg:w="1"/><text x="71.9874%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.7374%" y="597" width="0.0801%" height="15" fill="rgb(238,6,4)" fg:x="896" fg:w="1"/><text x="71.9874%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="71.8175%" y="693" width="0.0801%" height="15" fill="rgb(221,151,16)" fg:x="897" fg:w="1"/><text x="72.0675%" y="703.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="71.8175%" y="709" width="0.1601%" height="15" fill="rgb(251,143,52)" fg:x="897" fg:w="2"/><text x="72.0675%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="71.8975%" y="693" width="0.0801%" height="15" fill="rgb(206,90,15)" fg:x="898" fg:w="1"/><text x="72.1475%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="71.8975%" y="677" width="0.0801%" height="15" fill="rgb(218,35,8)" fg:x="898" fg:w="1"/><text x="72.1475%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="71.8975%" y="661" width="0.0801%" height="15" fill="rgb(239,215,6)" fg:x="898" fg:w="1"/><text x="72.1475%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="71.8975%" y="645" width="0.0801%" height="15" fill="rgb(245,116,39)" fg:x="898" fg:w="1"/><text x="72.1475%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="71.8975%" y="629" width="0.0801%" height="15" fill="rgb(242,65,28)" fg:x="898" fg:w="1"/><text x="72.1475%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.8975%" y="613" width="0.0801%" height="15" fill="rgb(252,132,53)" fg:x="898" fg:w="1"/><text x="72.1475%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="71.9776%" y="693" width="0.0801%" height="15" fill="rgb(224,159,50)" fg:x="899" fg:w="1"/><text x="72.2276%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="71.9776%" y="677" width="0.0801%" height="15" fill="rgb(224,93,4)" fg:x="899" fg:w="1"/><text x="72.2276%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.9776%" y="661" width="0.0801%" height="15" fill="rgb(208,81,34)" fg:x="899" fg:w="1"/><text x="72.2276%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="71.9776%" y="645" width="0.0801%" height="15" fill="rgb(233,92,54)" fg:x="899" fg:w="1"/><text x="72.2276%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.9776%" y="629" width="0.0801%" height="15" fill="rgb(237,21,14)" fg:x="899" fg:w="1"/><text x="72.2276%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9776%" y="613" width="0.0801%" height="15" fill="rgb(249,128,51)" fg:x="899" fg:w="1"/><text x="72.2276%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.9776%" y="597" width="0.0801%" height="15" fill="rgb(223,129,24)" fg:x="899" fg:w="1"/><text x="72.2276%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9776%" y="581" width="0.0801%" height="15" fill="rgb(231,168,25)" fg:x="899" fg:w="1"/><text x="72.2276%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.0576%" y="629" width="0.0801%" height="15" fill="rgb(224,39,20)" fg:x="900" fg:w="1"/><text x="72.3076%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="72.0576%" y="677" width="0.1601%" height="15" fill="rgb(225,152,53)" fg:x="900" fg:w="2"/><text x="72.3076%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.0576%" y="661" width="0.1601%" height="15" fill="rgb(252,17,24)" fg:x="900" fg:w="2"/><text x="72.3076%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.0576%" y="645" width="0.1601%" height="15" fill="rgb(250,114,30)" fg:x="900" fg:w="2"/><text x="72.3076%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.1377%" y="629" width="0.0801%" height="15" fill="rgb(229,5,4)" fg:x="901" fg:w="1"/><text x="72.3877%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1377%" y="613" width="0.0801%" height="15" fill="rgb(225,176,49)" fg:x="901" fg:w="1"/><text x="72.3877%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.1377%" y="597" width="0.0801%" height="15" fill="rgb(224,221,49)" fg:x="901" fg:w="1"/><text x="72.3877%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1377%" y="581" width="0.0801%" height="15" fill="rgb(253,169,27)" fg:x="901" fg:w="1"/><text x="72.3877%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.1377%" y="565" width="0.0801%" height="15" fill="rgb(211,206,16)" fg:x="901" fg:w="1"/><text x="72.3877%" y="575.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="72.0576%" y="693" width="0.2402%" height="15" fill="rgb(244,87,35)" fg:x="900" fg:w="3"/><text x="72.3076%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.2178%" y="677" width="0.0801%" height="15" fill="rgb(246,28,10)" fg:x="902" fg:w="1"/><text x="72.4678%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.2178%" y="661" width="0.0801%" height="15" fill="rgb(229,12,44)" fg:x="902" fg:w="1"/><text x="72.4678%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.2178%" y="645" width="0.0801%" height="15" fill="rgb(210,145,37)" fg:x="902" fg:w="1"/><text x="72.4678%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="71.9776%" y="709" width="0.4003%" height="15" fill="rgb(227,112,52)" fg:x="899" fg:w="5"/><text x="72.2276%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="72.2978%" y="693" width="0.0801%" height="15" fill="rgb(238,155,34)" fg:x="903" fg:w="1"/><text x="72.5478%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="72.2978%" y="677" width="0.0801%" height="15" fill="rgb(239,226,36)" fg:x="903" fg:w="1"/><text x="72.5478%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="72.2978%" y="661" width="0.0801%" height="15" fill="rgb(230,16,23)" fg:x="903" fg:w="1"/><text x="72.5478%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.2978%" y="645" width="0.0801%" height="15" fill="rgb(236,171,36)" fg:x="903" fg:w="1"/><text x="72.5478%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="72.2978%" y="629" width="0.0801%" height="15" fill="rgb(221,22,14)" fg:x="903" fg:w="1"/><text x="72.5478%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (49 samples, 3.92%)</title><rect x="68.5348%" y="725" width="3.9231%" height="15" fill="rgb(242,43,11)" fg:x="856" fg:w="49"/><text x="68.7848%" y="735.50">plug..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="72.3779%" y="709" width="0.0801%" height="15" fill="rgb(232,69,23)" fg:x="904" fg:w="1"/><text x="72.6279%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="72.3779%" y="693" width="0.0801%" height="15" fill="rgb(216,180,54)" fg:x="904" fg:w="1"/><text x="72.6279%" y="703.50"></text></g><g><title>plugins_core::fashion::model::_::&lt;impl serde::ser::Serialize for plugins_core::fashion::model::Wearing&gt;::serialize (1 samples, 0.08%)</title><rect x="72.3779%" y="677" width="0.0801%" height="15" fill="rgb(216,5,24)" fg:x="904" fg:w="1"/><text x="72.6279%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.3779%" y="661" width="0.0801%" height="15" fill="rgb(225,89,9)" fg:x="904" fg:w="1"/><text x="72.6279%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="72.3779%" y="645" width="0.0801%" height="15" fill="rgb(243,75,33)" fg:x="904" fg:w="1"/><text x="72.6279%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="72.3779%" y="629" width="0.0801%" height="15" fill="rgb(247,141,45)" fg:x="904" fg:w="1"/><text x="72.6279%" y="639.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="72.4580%" y="693" width="0.0801%" height="15" fill="rgb(232,177,36)" fg:x="905" fg:w="1"/><text x="72.7080%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="72.4580%" y="677" width="0.0801%" height="15" fill="rgb(219,125,36)" fg:x="905" fg:w="1"/><text x="72.7080%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="72.4580%" y="661" width="0.0801%" height="15" fill="rgb(227,94,9)" fg:x="905" fg:w="1"/><text x="72.7080%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4580%" y="645" width="0.0801%" height="15" fill="rgb(240,34,52)" fg:x="905" fg:w="1"/><text x="72.7080%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5380%" y="645" width="0.0801%" height="15" fill="rgb(216,45,12)" fg:x="906" fg:w="1"/><text x="72.7880%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5380%" y="629" width="0.0801%" height="15" fill="rgb(246,21,19)" fg:x="906" fg:w="1"/><text x="72.7880%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5380%" y="613" width="0.0801%" height="15" fill="rgb(213,98,42)" fg:x="906" fg:w="1"/><text x="72.7880%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.5380%" y="597" width="0.0801%" height="15" fill="rgb(250,136,47)" fg:x="906" fg:w="1"/><text x="72.7880%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.5380%" y="581" width="0.0801%" height="15" fill="rgb(251,124,27)" fg:x="906" fg:w="1"/><text x="72.7880%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.5380%" y="565" width="0.0801%" height="15" fill="rgb(229,180,14)" fg:x="906" fg:w="1"/><text x="72.7880%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.5380%" y="549" width="0.0801%" height="15" fill="rgb(245,216,25)" fg:x="906" fg:w="1"/><text x="72.7880%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.5380%" y="533" width="0.0801%" height="15" fill="rgb(251,43,5)" fg:x="906" fg:w="1"/><text x="72.7880%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.5380%" y="517" width="0.0801%" height="15" fill="rgb(250,128,24)" fg:x="906" fg:w="1"/><text x="72.7880%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.5380%" y="501" width="0.0801%" height="15" fill="rgb(217,117,27)" fg:x="906" fg:w="1"/><text x="72.7880%" y="511.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="72.5380%" y="677" width="0.1601%" height="15" fill="rgb(245,147,4)" fg:x="906" fg:w="2"/><text x="72.7880%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="72.5380%" y="661" width="0.1601%" height="15" fill="rgb(242,201,35)" fg:x="906" fg:w="2"/><text x="72.7880%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6181%" y="645" width="0.0801%" height="15" fill="rgb(218,181,1)" fg:x="907" fg:w="1"/><text x="72.8681%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6181%" y="629" width="0.0801%" height="15" fill="rgb(222,6,29)" fg:x="907" fg:w="1"/><text x="72.8681%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.6181%" y="613" width="0.0801%" height="15" fill="rgb(208,186,3)" fg:x="907" fg:w="1"/><text x="72.8681%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6181%" y="597" width="0.0801%" height="15" fill="rgb(216,36,26)" fg:x="907" fg:w="1"/><text x="72.8681%" y="607.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="72.6982%" y="661" width="0.0801%" height="15" fill="rgb(248,201,23)" fg:x="908" fg:w="1"/><text x="72.9482%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="72.6982%" y="645" width="0.0801%" height="15" fill="rgb(251,170,31)" fg:x="908" fg:w="1"/><text x="72.9482%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="72.6982%" y="629" width="0.0801%" height="15" fill="rgb(207,110,25)" fg:x="908" fg:w="1"/><text x="72.9482%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.6982%" y="613" width="0.0801%" height="15" fill="rgb(250,54,15)" fg:x="908" fg:w="1"/><text x="72.9482%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6982%" y="597" width="0.0801%" height="15" fill="rgb(227,68,33)" fg:x="908" fg:w="1"/><text x="72.9482%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6982%" y="581" width="0.0801%" height="15" fill="rgb(238,34,41)" fg:x="908" fg:w="1"/><text x="72.9482%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="72.6982%" y="565" width="0.0801%" height="15" fill="rgb(220,11,15)" fg:x="908" fg:w="1"/><text x="72.9482%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (5 samples, 0.40%)</title><rect x="72.4580%" y="725" width="0.4003%" height="15" fill="rgb(246,111,35)" fg:x="905" fg:w="5"/><text x="72.7080%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.40%)</title><rect x="72.4580%" y="709" width="0.4003%" height="15" fill="rgb(209,88,53)" fg:x="905" fg:w="5"/><text x="72.7080%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="72.5380%" y="693" width="0.3203%" height="15" fill="rgb(231,185,47)" fg:x="906" fg:w="4"/><text x="72.7880%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="72.6982%" y="677" width="0.1601%" height="15" fill="rgb(233,154,1)" fg:x="908" fg:w="2"/><text x="72.9482%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="72.7782%" y="661" width="0.0801%" height="15" fill="rgb(225,15,46)" fg:x="909" fg:w="1"/><text x="73.0282%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="72.7782%" y="645" width="0.0801%" height="15" fill="rgb(211,135,41)" fg:x="909" fg:w="1"/><text x="73.0282%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="72.7782%" y="629" width="0.0801%" height="15" fill="rgb(208,54,0)" fg:x="909" fg:w="1"/><text x="73.0282%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.7782%" y="613" width="0.0801%" height="15" fill="rgb(244,136,14)" fg:x="909" fg:w="1"/><text x="73.0282%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.8583%" y="693" width="0.0801%" height="15" fill="rgb(241,56,14)" fg:x="910" fg:w="1"/><text x="73.1083%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="72.8583%" y="677" width="0.0801%" height="15" fill="rgb(205,80,24)" fg:x="910" fg:w="1"/><text x="73.1083%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8583%" y="661" width="0.0801%" height="15" fill="rgb(220,57,4)" fg:x="910" fg:w="1"/><text x="73.1083%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8583%" y="645" width="0.0801%" height="15" fill="rgb(226,193,50)" fg:x="910" fg:w="1"/><text x="73.1083%" y="655.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="72.9384%" y="661" width="0.0801%" height="15" fill="rgb(231,168,22)" fg:x="911" fg:w="1"/><text x="73.1884%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9384%" y="645" width="0.0801%" height="15" fill="rgb(254,215,14)" fg:x="911" fg:w="1"/><text x="73.1884%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.9384%" y="629" width="0.0801%" height="15" fill="rgb(211,115,16)" fg:x="911" fg:w="1"/><text x="73.1884%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="72.9384%" y="613" width="0.0801%" height="15" fill="rgb(236,210,16)" fg:x="911" fg:w="1"/><text x="73.1884%" y="623.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (82 samples, 6.57%)</title><rect x="66.5332%" y="741" width="6.5653%" height="15" fill="rgb(221,94,12)" fg:x="831" fg:w="82"/><text x="66.7832%" y="751.50">&lt;tests::H..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="72.8583%" y="725" width="0.2402%" height="15" fill="rgb(235,218,49)" fg:x="910" fg:w="3"/><text x="73.1083%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="72.8583%" y="709" width="0.2402%" height="15" fill="rgb(217,114,14)" fg:x="910" fg:w="3"/><text x="73.1083%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="72.9384%" y="693" width="0.1601%" height="15" fill="rgb(216,145,22)" fg:x="911" fg:w="2"/><text x="73.1884%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="72.9384%" y="677" width="0.1601%" height="15" fill="rgb(217,112,39)" fg:x="911" fg:w="2"/><text x="73.1884%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="73.0184%" y="661" width="0.0801%" height="15" fill="rgb(225,85,32)" fg:x="912" fg:w="1"/><text x="73.2684%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.0184%" y="645" width="0.0801%" height="15" fill="rgb(245,209,47)" fg:x="912" fg:w="1"/><text x="73.2684%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="73.0184%" y="629" width="0.0801%" height="15" fill="rgb(218,220,15)" fg:x="912" fg:w="1"/><text x="73.2684%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.0184%" y="613" width="0.0801%" height="15" fill="rgb(222,202,31)" fg:x="912" fg:w="1"/><text x="73.2684%" y="623.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.08%)</title><rect x="73.0985%" y="741" width="0.0801%" height="15" fill="rgb(243,203,4)" fg:x="913" fg:w="1"/><text x="73.3485%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (3 samples, 0.24%)</title><rect x="73.1785%" y="741" width="0.2402%" height="15" fill="rgb(237,92,17)" fg:x="914" fg:w="3"/><text x="73.4285%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="73.3387%" y="725" width="0.0801%" height="15" fill="rgb(231,119,7)" fg:x="916" fg:w="1"/><text x="73.5887%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="73.3387%" y="709" width="0.0801%" height="15" fill="rgb(237,82,41)" fg:x="916" fg:w="1"/><text x="73.5887%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.3387%" y="693" width="0.0801%" height="15" fill="rgb(226,81,48)" fg:x="916" fg:w="1"/><text x="73.5887%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.3387%" y="677" width="0.0801%" height="15" fill="rgb(234,70,51)" fg:x="916" fg:w="1"/><text x="73.5887%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (2 samples, 0.16%)</title><rect x="73.4187%" y="741" width="0.1601%" height="15" fill="rgb(251,86,4)" fg:x="917" fg:w="2"/><text x="73.6687%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="73.4187%" y="725" width="0.1601%" height="15" fill="rgb(244,144,28)" fg:x="917" fg:w="2"/><text x="73.6687%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="73.4187%" y="709" width="0.1601%" height="15" fill="rgb(232,161,39)" fg:x="917" fg:w="2"/><text x="73.6687%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.6589%" y="709" width="0.0801%" height="15" fill="rgb(247,34,51)" fg:x="920" fg:w="1"/><text x="73.9089%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="73.6589%" y="725" width="0.1601%" height="15" fill="rgb(225,132,2)" fg:x="920" fg:w="2"/><text x="73.9089%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.7390%" y="709" width="0.0801%" height="15" fill="rgb(209,159,44)" fg:x="921" fg:w="1"/><text x="73.9890%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="73.8191%" y="725" width="0.0801%" height="15" fill="rgb(251,214,1)" fg:x="922" fg:w="1"/><text x="74.0691%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="73.8191%" y="709" width="0.0801%" height="15" fill="rgb(247,84,47)" fg:x="922" fg:w="1"/><text x="74.0691%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.8191%" y="693" width="0.0801%" height="15" fill="rgb(240,111,43)" fg:x="922" fg:w="1"/><text x="74.0691%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.8191%" y="677" width="0.0801%" height="15" fill="rgb(215,214,35)" fg:x="922" fg:w="1"/><text x="74.0691%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="73.8191%" y="661" width="0.0801%" height="15" fill="rgb(248,207,23)" fg:x="922" fg:w="1"/><text x="74.0691%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="73.8191%" y="645" width="0.0801%" height="15" fill="rgb(214,186,4)" fg:x="922" fg:w="1"/><text x="74.0691%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="73.8191%" y="629" width="0.0801%" height="15" fill="rgb(220,133,22)" fg:x="922" fg:w="1"/><text x="74.0691%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.8191%" y="613" width="0.0801%" height="15" fill="rgb(239,134,19)" fg:x="922" fg:w="1"/><text x="74.0691%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="73.9792%" y="629" width="0.1601%" height="15" fill="rgb(250,140,9)" fg:x="924" fg:w="2"/><text x="74.2292%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="73.9792%" y="613" width="0.1601%" height="15" fill="rgb(225,59,14)" fg:x="924" fg:w="2"/><text x="74.2292%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="73.9792%" y="597" width="0.1601%" height="15" fill="rgb(214,152,51)" fg:x="924" fg:w="2"/><text x="74.2292%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.0592%" y="581" width="0.0801%" height="15" fill="rgb(251,227,43)" fg:x="925" fg:w="1"/><text x="74.3092%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.1393%" y="613" width="0.0801%" height="15" fill="rgb(241,96,17)" fg:x="926" fg:w="1"/><text x="74.3893%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.2194%" y="613" width="0.0801%" height="15" fill="rgb(234,198,43)" fg:x="927" fg:w="1"/><text x="74.4694%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.2194%" y="597" width="0.0801%" height="15" fill="rgb(220,108,29)" fg:x="927" fg:w="1"/><text x="74.4694%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.2194%" y="581" width="0.0801%" height="15" fill="rgb(226,163,33)" fg:x="927" fg:w="1"/><text x="74.4694%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.2194%" y="565" width="0.0801%" height="15" fill="rgb(205,194,45)" fg:x="927" fg:w="1"/><text x="74.4694%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.2194%" y="549" width="0.0801%" height="15" fill="rgb(206,143,44)" fg:x="927" fg:w="1"/><text x="74.4694%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.2194%" y="533" width="0.0801%" height="15" fill="rgb(236,136,36)" fg:x="927" fg:w="1"/><text x="74.4694%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.2194%" y="517" width="0.0801%" height="15" fill="rgb(249,172,42)" fg:x="927" fg:w="1"/><text x="74.4694%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.2994%" y="597" width="0.0801%" height="15" fill="rgb(216,139,23)" fg:x="928" fg:w="1"/><text x="74.5494%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2994%" y="581" width="0.0801%" height="15" fill="rgb(207,166,20)" fg:x="928" fg:w="1"/><text x="74.5494%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.3795%" y="549" width="0.0801%" height="15" fill="rgb(210,209,22)" fg:x="929" fg:w="1"/><text x="74.6295%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="74.2994%" y="613" width="0.2402%" height="15" fill="rgb(232,118,20)" fg:x="928" fg:w="3"/><text x="74.5494%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="74.3795%" y="597" width="0.1601%" height="15" fill="rgb(238,113,42)" fg:x="929" fg:w="2"/><text x="74.6295%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="74.3795%" y="581" width="0.1601%" height="15" fill="rgb(231,42,5)" fg:x="929" fg:w="2"/><text x="74.6295%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="74.3795%" y="565" width="0.1601%" height="15" fill="rgb(243,166,24)" fg:x="929" fg:w="2"/><text x="74.6295%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.4596%" y="549" width="0.0801%" height="15" fill="rgb(237,226,12)" fg:x="930" fg:w="1"/><text x="74.7096%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.80%)</title><rect x="73.8991%" y="645" width="0.8006%" height="15" fill="rgb(229,133,24)" fg:x="923" fg:w="10"/><text x="74.1491%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="74.1393%" y="629" width="0.5604%" height="15" fill="rgb(238,33,43)" fg:x="926" fg:w="7"/><text x="74.3893%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="74.5396%" y="613" width="0.1601%" height="15" fill="rgb(227,59,38)" fg:x="931" fg:w="2"/><text x="74.7896%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="74.5396%" y="597" width="0.1601%" height="15" fill="rgb(230,97,0)" fg:x="931" fg:w="2"/><text x="74.7896%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="74.5396%" y="581" width="0.1601%" height="15" fill="rgb(250,173,50)" fg:x="931" fg:w="2"/><text x="74.7896%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.6197%" y="565" width="0.0801%" height="15" fill="rgb(240,15,50)" fg:x="932" fg:w="1"/><text x="74.8697%" y="575.50"></text></g><g><title>burrow_bon::perms::find_acls (1 samples, 0.08%)</title><rect x="74.6998%" y="645" width="0.0801%" height="15" fill="rgb(221,93,22)" fg:x="933" fg:w="1"/><text x="74.9498%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.7798%" y="597" width="0.0801%" height="15" fill="rgb(245,180,53)" fg:x="934" fg:w="1"/><text x="75.0298%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.8599%" y="597" width="0.0801%" height="15" fill="rgb(231,88,51)" fg:x="935" fg:w="1"/><text x="75.1099%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.8599%" y="581" width="0.0801%" height="15" fill="rgb(240,58,21)" fg:x="935" fg:w="1"/><text x="75.1099%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.0200%" y="565" width="0.0801%" height="15" fill="rgb(237,21,10)" fg:x="937" fg:w="1"/><text x="75.2700%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="75.1001%" y="565" width="0.1601%" height="15" fill="rgb(218,43,11)" fg:x="938" fg:w="2"/><text x="75.3501%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="74.7798%" y="613" width="0.5604%" height="15" fill="rgb(218,221,29)" fg:x="934" fg:w="7"/><text x="75.0298%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="74.9400%" y="597" width="0.4003%" height="15" fill="rgb(214,118,42)" fg:x="936" fg:w="5"/><text x="75.1900%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="75.0200%" y="581" width="0.3203%" height="15" fill="rgb(251,200,26)" fg:x="937" fg:w="4"/><text x="75.2700%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.2602%" y="565" width="0.0801%" height="15" fill="rgb(237,101,39)" fg:x="940" fg:w="1"/><text x="75.5102%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="75.2602%" y="549" width="0.0801%" height="15" fill="rgb(251,117,11)" fg:x="940" fg:w="1"/><text x="75.5102%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.2602%" y="533" width="0.0801%" height="15" fill="rgb(216,223,23)" fg:x="940" fg:w="1"/><text x="75.5102%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.2602%" y="517" width="0.0801%" height="15" fill="rgb(251,54,12)" fg:x="940" fg:w="1"/><text x="75.5102%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.2602%" y="501" width="0.0801%" height="15" fill="rgb(254,176,54)" fg:x="940" fg:w="1"/><text x="75.5102%" y="511.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="75.3403%" y="613" width="0.0801%" height="15" fill="rgb(210,32,8)" fg:x="941" fg:w="1"/><text x="75.5903%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.3403%" y="597" width="0.0801%" height="15" fill="rgb(235,52,38)" fg:x="941" fg:w="1"/><text x="75.5903%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.4203%" y="613" width="0.0801%" height="15" fill="rgb(231,4,44)" fg:x="942" fg:w="1"/><text x="75.6703%" y="623.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (3 samples, 0.24%)</title><rect x="75.5004%" y="613" width="0.2402%" height="15" fill="rgb(249,2,32)" fg:x="943" fg:w="3"/><text x="75.7504%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="75.5004%" y="597" width="0.2402%" height="15" fill="rgb(224,65,26)" fg:x="943" fg:w="3"/><text x="75.7504%" y="607.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="75.5004%" y="581" width="0.2402%" height="15" fill="rgb(250,73,40)" fg:x="943" fg:w="3"/><text x="75.7504%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.24%)</title><rect x="75.5004%" y="565" width="0.2402%" height="15" fill="rgb(253,177,16)" fg:x="943" fg:w="3"/><text x="75.7504%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="75.6605%" y="549" width="0.0801%" height="15" fill="rgb(217,32,34)" fg:x="945" fg:w="1"/><text x="75.9105%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (14 samples, 1.12%)</title><rect x="74.7798%" y="629" width="1.1209%" height="15" fill="rgb(212,7,10)" fg:x="934" fg:w="14"/><text x="75.0298%" y="639.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="75.7406%" y="613" width="0.1601%" height="15" fill="rgb(245,89,8)" fg:x="946" fg:w="2"/><text x="75.9906%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="75.7406%" y="597" width="0.1601%" height="15" fill="rgb(237,16,53)" fg:x="946" fg:w="2"/><text x="75.9906%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="75.7406%" y="581" width="0.1601%" height="15" fill="rgb(250,204,30)" fg:x="946" fg:w="2"/><text x="75.9906%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="75.7406%" y="565" width="0.1601%" height="15" fill="rgb(208,77,27)" fg:x="946" fg:w="2"/><text x="75.9906%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.16%)</title><rect x="75.7406%" y="549" width="0.1601%" height="15" fill="rgb(250,204,28)" fg:x="946" fg:w="2"/><text x="75.9906%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="75.7406%" y="533" width="0.1601%" height="15" fill="rgb(244,63,21)" fg:x="946" fg:w="2"/><text x="75.9906%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.8207%" y="517" width="0.0801%" height="15" fill="rgb(236,85,44)" fg:x="947" fg:w="1"/><text x="76.0707%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="75.9007%" y="597" width="0.0801%" height="15" fill="rgb(215,98,4)" fg:x="948" fg:w="1"/><text x="76.1507%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="75.9007%" y="581" width="0.0801%" height="15" fill="rgb(235,38,11)" fg:x="948" fg:w="1"/><text x="76.1507%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9808%" y="597" width="0.0801%" height="15" fill="rgb(254,186,25)" fg:x="949" fg:w="1"/><text x="76.2308%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="75.9808%" y="581" width="0.0801%" height="15" fill="rgb(225,55,31)" fg:x="949" fg:w="1"/><text x="76.2308%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.0608%" y="597" width="0.0801%" height="15" fill="rgb(211,15,21)" fg:x="950" fg:w="1"/><text x="76.3108%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.0608%" y="581" width="0.0801%" height="15" fill="rgb(215,187,41)" fg:x="950" fg:w="1"/><text x="76.3108%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1409%" y="549" width="0.0801%" height="15" fill="rgb(248,69,32)" fg:x="951" fg:w="1"/><text x="76.3909%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1409%" y="533" width="0.0801%" height="15" fill="rgb(252,102,52)" fg:x="951" fg:w="1"/><text x="76.3909%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="76.2210%" y="533" width="0.0801%" height="15" fill="rgb(253,140,32)" fg:x="952" fg:w="1"/><text x="76.4710%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3811%" y="485" width="0.0801%" height="15" fill="rgb(216,56,42)" fg:x="954" fg:w="1"/><text x="76.6311%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="76.2210%" y="549" width="0.4003%" height="15" fill="rgb(216,184,14)" fg:x="952" fg:w="5"/><text x="76.4710%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="76.3010%" y="533" width="0.3203%" height="15" fill="rgb(237,187,27)" fg:x="953" fg:w="4"/><text x="76.5510%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="76.3010%" y="517" width="0.3203%" height="15" fill="rgb(219,65,3)" fg:x="953" fg:w="4"/><text x="76.5510%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="76.3010%" y="501" width="0.3203%" height="15" fill="rgb(245,83,25)" fg:x="953" fg:w="4"/><text x="76.5510%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="76.4612%" y="485" width="0.1601%" height="15" fill="rgb(214,205,45)" fg:x="955" fg:w="2"/><text x="76.7112%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.7014%" y="501" width="0.0801%" height="15" fill="rgb(241,20,18)" fg:x="958" fg:w="1"/><text x="76.9514%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.7814%" y="485" width="0.0801%" height="15" fill="rgb(232,163,23)" fg:x="959" fg:w="1"/><text x="77.0314%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7814%" y="469" width="0.0801%" height="15" fill="rgb(214,5,46)" fg:x="959" fg:w="1"/><text x="77.0314%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="76.7814%" y="501" width="0.1601%" height="15" fill="rgb(229,78,17)" fg:x="959" fg:w="2"/><text x="77.0314%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.8615%" y="485" width="0.0801%" height="15" fill="rgb(248,89,10)" fg:x="960" fg:w="1"/><text x="77.1115%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8615%" y="469" width="0.0801%" height="15" fill="rgb(248,54,15)" fg:x="960" fg:w="1"/><text x="77.1115%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.88%)</title><rect x="76.1409%" y="565" width="0.8807%" height="15" fill="rgb(223,116,6)" fg:x="951" fg:w="11"/><text x="76.3909%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="76.6213%" y="549" width="0.4003%" height="15" fill="rgb(205,125,38)" fg:x="957" fg:w="5"/><text x="76.8713%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="76.6213%" y="533" width="0.4003%" height="15" fill="rgb(251,78,38)" fg:x="957" fg:w="5"/><text x="76.8713%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="76.6213%" y="517" width="0.4003%" height="15" fill="rgb(253,78,28)" fg:x="957" fg:w="5"/><text x="76.8713%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="76.9416%" y="501" width="0.0801%" height="15" fill="rgb(209,120,3)" fg:x="961" fg:w="1"/><text x="77.1916%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="76.9416%" y="485" width="0.0801%" height="15" fill="rgb(238,229,9)" fg:x="961" fg:w="1"/><text x="77.1916%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (15 samples, 1.20%)</title><rect x="75.9007%" y="629" width="1.2010%" height="15" fill="rgb(253,159,18)" fg:x="948" fg:w="15"/><text x="76.1507%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (15 samples, 1.20%)</title><rect x="75.9007%" y="613" width="1.2010%" height="15" fill="rgb(244,42,34)" fg:x="948" fg:w="15"/><text x="76.1507%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.96%)</title><rect x="76.1409%" y="597" width="0.9608%" height="15" fill="rgb(224,8,7)" fg:x="951" fg:w="12"/><text x="76.3909%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (12 samples, 0.96%)</title><rect x="76.1409%" y="581" width="0.9608%" height="15" fill="rgb(210,201,45)" fg:x="951" fg:w="12"/><text x="76.3909%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="77.0216%" y="565" width="0.0801%" height="15" fill="rgb(252,185,21)" fg:x="962" fg:w="1"/><text x="77.2716%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.0216%" y="549" width="0.0801%" height="15" fill="rgb(223,131,1)" fg:x="962" fg:w="1"/><text x="77.2716%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.1817%" y="453" width="0.0801%" height="15" fill="rgb(245,141,16)" fg:x="964" fg:w="1"/><text x="77.4317%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.1817%" y="437" width="0.0801%" height="15" fill="rgb(229,55,45)" fg:x="964" fg:w="1"/><text x="77.4317%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.1817%" y="421" width="0.0801%" height="15" fill="rgb(208,92,15)" fg:x="964" fg:w="1"/><text x="77.4317%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.1817%" y="405" width="0.0801%" height="15" fill="rgb(234,185,47)" fg:x="964" fg:w="1"/><text x="77.4317%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1817%" y="389" width="0.0801%" height="15" fill="rgb(253,104,50)" fg:x="964" fg:w="1"/><text x="77.4317%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1817%" y="373" width="0.0801%" height="15" fill="rgb(205,70,7)" fg:x="964" fg:w="1"/><text x="77.4317%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1817%" y="357" width="0.0801%" height="15" fill="rgb(240,178,43)" fg:x="964" fg:w="1"/><text x="77.4317%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.1817%" y="485" width="0.1601%" height="15" fill="rgb(214,112,2)" fg:x="964" fg:w="2"/><text x="77.4317%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.1817%" y="469" width="0.1601%" height="15" fill="rgb(206,46,17)" fg:x="964" fg:w="2"/><text x="77.4317%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.2618%" y="453" width="0.0801%" height="15" fill="rgb(225,220,16)" fg:x="965" fg:w="1"/><text x="77.5118%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2618%" y="437" width="0.0801%" height="15" fill="rgb(238,65,40)" fg:x="965" fg:w="1"/><text x="77.5118%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.3419%" y="437" width="0.0801%" height="15" fill="rgb(230,151,21)" fg:x="966" fg:w="1"/><text x="77.5919%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3419%" y="421" width="0.0801%" height="15" fill="rgb(218,58,49)" fg:x="966" fg:w="1"/><text x="77.5919%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="77.1817%" y="501" width="0.5604%" height="15" fill="rgb(219,179,14)" fg:x="964" fg:w="7"/><text x="77.4317%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="77.3419%" y="485" width="0.4003%" height="15" fill="rgb(223,72,1)" fg:x="966" fg:w="5"/><text x="77.5919%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="77.3419%" y="469" width="0.4003%" height="15" fill="rgb(238,126,10)" fg:x="966" fg:w="5"/><text x="77.5919%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="77.3419%" y="453" width="0.4003%" height="15" fill="rgb(224,206,38)" fg:x="966" fg:w="5"/><text x="77.5919%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (4 samples, 0.32%)</title><rect x="77.4219%" y="437" width="0.3203%" height="15" fill="rgb(212,201,54)" fg:x="967" fg:w="4"/><text x="77.6719%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="77.5821%" y="421" width="0.1601%" height="15" fill="rgb(218,154,48)" fg:x="969" fg:w="2"/><text x="77.8321%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="77.1817%" y="533" width="0.7206%" height="15" fill="rgb(232,93,24)" fg:x="964" fg:w="9"/><text x="77.4317%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="77.1817%" y="517" width="0.7206%" height="15" fill="rgb(245,30,21)" fg:x="964" fg:w="9"/><text x="77.4317%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="77.7422%" y="501" width="0.1601%" height="15" fill="rgb(242,148,29)" fg:x="971" fg:w="2"/><text x="77.9922%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="77.7422%" y="485" width="0.1601%" height="15" fill="rgb(244,153,54)" fg:x="971" fg:w="2"/><text x="77.9922%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.9023%" y="533" width="0.0801%" height="15" fill="rgb(252,87,22)" fg:x="973" fg:w="1"/><text x="78.1523%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9023%" y="517" width="0.0801%" height="15" fill="rgb(210,51,29)" fg:x="973" fg:w="1"/><text x="78.1523%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.88%)</title><rect x="77.1817%" y="549" width="0.8807%" height="15" fill="rgb(242,136,47)" fg:x="964" fg:w="11"/><text x="77.4317%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.9824%" y="533" width="0.0801%" height="15" fill="rgb(238,68,4)" fg:x="974" fg:w="1"/><text x="78.2324%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.04%)</title><rect x="77.1017%" y="565" width="1.0408%" height="15" fill="rgb(242,161,30)" fg:x="963" fg:w="13"/><text x="77.3517%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.0624%" y="549" width="0.0801%" height="15" fill="rgb(218,58,44)" fg:x="975" fg:w="1"/><text x="78.3124%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="78.1425%" y="549" width="0.0801%" height="15" fill="rgb(252,125,32)" fg:x="976" fg:w="1"/><text x="78.3925%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="78.1425%" y="565" width="0.1601%" height="15" fill="rgb(219,178,0)" fg:x="976" fg:w="2"/><text x="78.3925%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="78.2226%" y="549" width="0.0801%" height="15" fill="rgb(213,152,7)" fg:x="977" fg:w="1"/><text x="78.4726%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="78.2226%" y="533" width="0.0801%" height="15" fill="rgb(249,109,34)" fg:x="977" fg:w="1"/><text x="78.4726%" y="543.50"></text></g><g><title>engine::session::state::State::flush_entities (56 samples, 4.48%)</title><rect x="73.8991%" y="709" width="4.4836%" height="15" fill="rgb(232,96,21)" fg:x="923" fg:w="56"/><text x="74.1491%" y="719.50">engin..</text></g><g><title>core::iter::adapters::try_process (56 samples, 4.48%)</title><rect x="73.8991%" y="693" width="4.4836%" height="15" fill="rgb(228,27,39)" fg:x="923" fg:w="56"/><text x="74.1491%" y="703.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (56 samples, 4.48%)</title><rect x="73.8991%" y="677" width="4.4836%" height="15" fill="rgb(211,182,52)" fg:x="923" fg:w="56"/><text x="74.1491%" y="687.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (56 samples, 4.48%)</title><rect x="73.8991%" y="661" width="4.4836%" height="15" fill="rgb(234,178,38)" fg:x="923" fg:w="56"/><text x="74.1491%" y="671.50">engin..</text></g><g><title>kernel::model::any_entity_changes (45 samples, 3.60%)</title><rect x="74.7798%" y="645" width="3.6029%" height="15" fill="rgb(221,111,3)" fg:x="934" fg:w="45"/><text x="75.0298%" y="655.50">kern..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (16 samples, 1.28%)</title><rect x="77.1017%" y="629" width="1.2810%" height="15" fill="rgb(228,175,21)" fg:x="963" fg:w="16"/><text x="77.3517%" y="639.50"></text></g><g><title>serde_json::de::from_trait (16 samples, 1.28%)</title><rect x="77.1017%" y="613" width="1.2810%" height="15" fill="rgb(228,174,43)" fg:x="963" fg:w="16"/><text x="77.3517%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 1.28%)</title><rect x="77.1017%" y="597" width="1.2810%" height="15" fill="rgb(211,191,0)" fg:x="963" fg:w="16"/><text x="77.3517%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (16 samples, 1.28%)</title><rect x="77.1017%" y="581" width="1.2810%" height="15" fill="rgb(253,117,3)" fg:x="963" fg:w="16"/><text x="77.3517%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3026%" y="565" width="0.0801%" height="15" fill="rgb(241,127,19)" fg:x="978" fg:w="1"/><text x="78.5526%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3026%" y="549" width="0.0801%" height="15" fill="rgb(218,103,12)" fg:x="978" fg:w="1"/><text x="78.5526%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="78.3026%" y="533" width="0.0801%" height="15" fill="rgb(236,214,43)" fg:x="978" fg:w="1"/><text x="78.5526%" y="543.50"></text></g><g><title>engine::session::Session::close (61 samples, 4.88%)</title><rect x="73.5789%" y="741" width="4.8839%" height="15" fill="rgb(244,144,19)" fg:x="919" fg:w="61"/><text x="73.8289%" y="751.50">engine..</text></g><g><title>engine::session::state::State::close (57 samples, 4.56%)</title><rect x="73.8991%" y="725" width="4.5637%" height="15" fill="rgb(246,188,10)" fg:x="923" fg:w="57"/><text x="74.1491%" y="735.50">engin..</text></g><g><title>engine::session::state::State::flush_futures (1 samples, 0.08%)</title><rect x="78.3827%" y="709" width="0.0801%" height="15" fill="rgb(212,193,33)" fg:x="979" fg:w="1"/><text x="78.6327%" y="719.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="78.4628%" y="709" width="0.0801%" height="15" fill="rgb(241,51,29)" fg:x="980" fg:w="1"/><text x="78.7128%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="78.4628%" y="693" width="0.0801%" height="15" fill="rgb(211,58,19)" fg:x="980" fg:w="1"/><text x="78.7128%" y="703.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="78.4628%" y="677" width="0.0801%" height="15" fill="rgb(229,111,26)" fg:x="980" fg:w="1"/><text x="78.7128%" y="687.50"></text></g><g><title>&lt;plugins_rune::parser::EditActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="78.4628%" y="661" width="0.0801%" height="15" fill="rgb(213,115,40)" fg:x="980" fg:w="1"/><text x="78.7128%" y="671.50"></text></g><g><title>&lt;kernel::model::base::DomainError as core::convert::From&lt;anyhow::Error&gt;&gt;::from (1 samples, 0.08%)</title><rect x="78.4628%" y="645" width="0.0801%" height="15" fill="rgb(209,56,44)" fg:x="980" fg:w="1"/><text x="78.7128%" y="655.50"></text></g><g><title>&lt;kernel::session::SetSession&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.5428%" y="709" width="0.0801%" height="15" fill="rgb(230,108,32)" fg:x="981" fg:w="1"/><text x="78.7928%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="78.6229%" y="693" width="0.1601%" height="15" fill="rgb(216,165,31)" fg:x="982" fg:w="2"/><text x="78.8729%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="78.6229%" y="677" width="0.1601%" height="15" fill="rgb(218,122,21)" fg:x="982" fg:w="2"/><text x="78.8729%" y="687.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="78.6229%" y="661" width="0.1601%" height="15" fill="rgb(223,224,47)" fg:x="982" fg:w="2"/><text x="78.8729%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="78.6229%" y="645" width="0.1601%" height="15" fill="rgb(238,102,44)" fg:x="982" fg:w="2"/><text x="78.8729%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="78.6229%" y="629" width="0.1601%" height="15" fill="rgb(236,46,40)" fg:x="982" fg:w="2"/><text x="78.8729%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="78.7030%" y="613" width="0.0801%" height="15" fill="rgb(247,202,50)" fg:x="983" fg:w="1"/><text x="78.9530%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="78.7030%" y="597" width="0.0801%" height="15" fill="rgb(209,99,20)" fg:x="983" fg:w="1"/><text x="78.9530%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="78.7030%" y="581" width="0.0801%" height="15" fill="rgb(252,27,34)" fg:x="983" fg:w="1"/><text x="78.9530%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="78.7030%" y="565" width="0.0801%" height="15" fill="rgb(215,206,23)" fg:x="983" fg:w="1"/><text x="78.9530%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="78.7030%" y="549" width="0.0801%" height="15" fill="rgb(212,135,36)" fg:x="983" fg:w="1"/><text x="78.9530%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.7030%" y="533" width="0.0801%" height="15" fill="rgb(240,189,1)" fg:x="983" fg:w="1"/><text x="78.9530%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.7030%" y="517" width="0.0801%" height="15" fill="rgb(242,56,20)" fg:x="983" fg:w="1"/><text x="78.9530%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="78.7030%" y="501" width="0.0801%" height="15" fill="rgb(247,132,33)" fg:x="983" fg:w="1"/><text x="78.9530%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="78.7030%" y="485" width="0.0801%" height="15" fill="rgb(208,149,11)" fg:x="983" fg:w="1"/><text x="78.9530%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="78.7030%" y="469" width="0.0801%" height="15" fill="rgb(211,33,11)" fg:x="983" fg:w="1"/><text x="78.9530%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="78.7030%" y="453" width="0.0801%" height="15" fill="rgb(221,29,38)" fg:x="983" fg:w="1"/><text x="78.9530%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="78.7030%" y="437" width="0.0801%" height="15" fill="rgb(206,182,49)" fg:x="983" fg:w="1"/><text x="78.9530%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="78.7030%" y="421" width="0.0801%" height="15" fill="rgb(216,140,1)" fg:x="983" fg:w="1"/><text x="78.9530%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.7030%" y="405" width="0.0801%" height="15" fill="rgb(232,57,40)" fg:x="983" fg:w="1"/><text x="78.9530%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="78.7030%" y="389" width="0.0801%" height="15" fill="rgb(224,186,18)" fg:x="983" fg:w="1"/><text x="78.9530%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.7030%" y="373" width="0.0801%" height="15" fill="rgb(215,121,11)" fg:x="983" fg:w="1"/><text x="78.9530%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="78.7030%" y="357" width="0.0801%" height="15" fill="rgb(245,147,10)" fg:x="983" fg:w="1"/><text x="78.9530%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="78.7030%" y="341" width="0.0801%" height="15" fill="rgb(238,153,13)" fg:x="983" fg:w="1"/><text x="78.9530%" y="351.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="78.7030%" y="325" width="0.0801%" height="15" fill="rgb(233,108,0)" fg:x="983" fg:w="1"/><text x="78.9530%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.7030%" y="309" width="0.0801%" height="15" fill="rgb(212,157,17)" fg:x="983" fg:w="1"/><text x="78.9530%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="78.7830%" y="549" width="0.1601%" height="15" fill="rgb(225,213,38)" fg:x="984" fg:w="2"/><text x="79.0330%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="78.7830%" y="533" width="0.1601%" height="15" fill="rgb(248,16,11)" fg:x="984" fg:w="2"/><text x="79.0330%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="78.7830%" y="517" width="0.1601%" height="15" fill="rgb(241,33,4)" fg:x="984" fg:w="2"/><text x="79.0330%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="78.7830%" y="565" width="0.2402%" height="15" fill="rgb(222,26,43)" fg:x="984" fg:w="3"/><text x="79.0330%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.9432%" y="549" width="0.0801%" height="15" fill="rgb(243,29,36)" fg:x="986" fg:w="1"/><text x="79.1932%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9432%" y="533" width="0.0801%" height="15" fill="rgb(241,9,27)" fg:x="986" fg:w="1"/><text x="79.1932%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.9432%" y="517" width="0.0801%" height="15" fill="rgb(205,117,26)" fg:x="986" fg:w="1"/><text x="79.1932%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.9432%" y="501" width="0.0801%" height="15" fill="rgb(209,80,39)" fg:x="986" fg:w="1"/><text x="79.1932%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.0232%" y="501" width="0.0801%" height="15" fill="rgb(239,155,6)" fg:x="987" fg:w="1"/><text x="79.2732%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.0232%" y="485" width="0.0801%" height="15" fill="rgb(212,104,12)" fg:x="987" fg:w="1"/><text x="79.2732%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.0232%" y="469" width="0.0801%" height="15" fill="rgb(234,204,3)" fg:x="987" fg:w="1"/><text x="79.2732%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.0232%" y="453" width="0.0801%" height="15" fill="rgb(251,218,7)" fg:x="987" fg:w="1"/><text x="79.2732%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.0232%" y="437" width="0.0801%" height="15" fill="rgb(221,81,32)" fg:x="987" fg:w="1"/><text x="79.2732%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.0232%" y="421" width="0.0801%" height="15" fill="rgb(214,152,26)" fg:x="987" fg:w="1"/><text x="79.2732%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.0232%" y="405" width="0.0801%" height="15" fill="rgb(223,22,3)" fg:x="987" fg:w="1"/><text x="79.2732%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.0232%" y="389" width="0.0801%" height="15" fill="rgb(207,174,7)" fg:x="987" fg:w="1"/><text x="79.2732%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.0232%" y="373" width="0.0801%" height="15" fill="rgb(224,19,52)" fg:x="987" fg:w="1"/><text x="79.2732%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.0232%" y="357" width="0.0801%" height="15" fill="rgb(228,24,14)" fg:x="987" fg:w="1"/><text x="79.2732%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.0232%" y="341" width="0.0801%" height="15" fill="rgb(230,153,43)" fg:x="987" fg:w="1"/><text x="79.2732%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.0232%" y="325" width="0.0801%" height="15" fill="rgb(231,106,12)" fg:x="987" fg:w="1"/><text x="79.2732%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.0232%" y="309" width="0.0801%" height="15" fill="rgb(215,92,2)" fg:x="987" fg:w="1"/><text x="79.2732%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.0232%" y="293" width="0.0801%" height="15" fill="rgb(249,143,25)" fg:x="987" fg:w="1"/><text x="79.2732%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.0232%" y="277" width="0.0801%" height="15" fill="rgb(252,7,35)" fg:x="987" fg:w="1"/><text x="79.2732%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.0232%" y="261" width="0.0801%" height="15" fill="rgb(216,69,40)" fg:x="987" fg:w="1"/><text x="79.2732%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.0232%" y="245" width="0.0801%" height="15" fill="rgb(240,36,33)" fg:x="987" fg:w="1"/><text x="79.2732%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="79.1033%" y="501" width="0.0801%" height="15" fill="rgb(231,128,14)" fg:x="988" fg:w="1"/><text x="79.3533%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.1833%" y="325" width="0.0801%" height="15" fill="rgb(245,143,14)" fg:x="989" fg:w="1"/><text x="79.4333%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.1833%" y="309" width="0.0801%" height="15" fill="rgb(222,130,28)" fg:x="989" fg:w="1"/><text x="79.4333%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.1833%" y="293" width="0.0801%" height="15" fill="rgb(212,10,48)" fg:x="989" fg:w="1"/><text x="79.4333%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.1833%" y="277" width="0.0801%" height="15" fill="rgb(254,118,45)" fg:x="989" fg:w="1"/><text x="79.4333%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.1833%" y="261" width="0.0801%" height="15" fill="rgb(228,6,45)" fg:x="989" fg:w="1"/><text x="79.4333%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.1833%" y="373" width="0.1601%" height="15" fill="rgb(241,18,35)" fg:x="989" fg:w="2"/><text x="79.4333%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.1833%" y="357" width="0.1601%" height="15" fill="rgb(227,214,53)" fg:x="989" fg:w="2"/><text x="79.4333%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.1833%" y="341" width="0.1601%" height="15" fill="rgb(224,107,51)" fg:x="989" fg:w="2"/><text x="79.4333%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.2634%" y="325" width="0.0801%" height="15" fill="rgb(248,60,28)" fg:x="990" fg:w="1"/><text x="79.5134%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="79.1833%" y="437" width="0.2402%" height="15" fill="rgb(249,101,23)" fg:x="989" fg:w="3"/><text x="79.4333%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="79.1833%" y="421" width="0.2402%" height="15" fill="rgb(228,51,19)" fg:x="989" fg:w="3"/><text x="79.4333%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="79.1833%" y="405" width="0.2402%" height="15" fill="rgb(213,20,6)" fg:x="989" fg:w="3"/><text x="79.4333%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="79.1833%" y="389" width="0.2402%" height="15" fill="rgb(212,124,10)" fg:x="989" fg:w="3"/><text x="79.4333%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.3435%" y="373" width="0.0801%" height="15" fill="rgb(248,3,40)" fg:x="991" fg:w="1"/><text x="79.5935%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.3435%" y="357" width="0.0801%" height="15" fill="rgb(223,178,23)" fg:x="991" fg:w="1"/><text x="79.5935%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.3435%" y="341" width="0.0801%" height="15" fill="rgb(240,132,45)" fg:x="991" fg:w="1"/><text x="79.5935%" y="351.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (9 samples, 0.72%)</title><rect x="78.7830%" y="597" width="0.7206%" height="15" fill="rgb(245,164,36)" fg:x="984" fg:w="9"/><text x="79.0330%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (9 samples, 0.72%)</title><rect x="78.7830%" y="581" width="0.7206%" height="15" fill="rgb(231,188,53)" fg:x="984" fg:w="9"/><text x="79.0330%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="79.0232%" y="565" width="0.4804%" height="15" fill="rgb(237,198,39)" fg:x="987" fg:w="6"/><text x="79.2732%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="79.0232%" y="549" width="0.4804%" height="15" fill="rgb(223,120,35)" fg:x="987" fg:w="6"/><text x="79.2732%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="79.0232%" y="533" width="0.4804%" height="15" fill="rgb(253,107,49)" fg:x="987" fg:w="6"/><text x="79.2732%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="79.0232%" y="517" width="0.4804%" height="15" fill="rgb(216,44,31)" fg:x="987" fg:w="6"/><text x="79.2732%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="79.1833%" y="501" width="0.3203%" height="15" fill="rgb(253,87,21)" fg:x="989" fg:w="4"/><text x="79.4333%" y="511.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="79.1833%" y="485" width="0.3203%" height="15" fill="rgb(226,18,2)" fg:x="989" fg:w="4"/><text x="79.4333%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="79.1833%" y="469" width="0.3203%" height="15" fill="rgb(216,8,46)" fg:x="989" fg:w="4"/><text x="79.4333%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="79.1833%" y="453" width="0.3203%" height="15" fill="rgb(226,140,39)" fg:x="989" fg:w="4"/><text x="79.4333%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="79.4235%" y="437" width="0.0801%" height="15" fill="rgb(221,194,54)" fg:x="992" fg:w="1"/><text x="79.6735%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="79.4235%" y="421" width="0.0801%" height="15" fill="rgb(213,92,11)" fg:x="992" fg:w="1"/><text x="79.6735%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.6637%" y="357" width="0.0801%" height="15" fill="rgb(229,162,46)" fg:x="995" fg:w="1"/><text x="79.9137%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="79.7438%" y="357" width="0.1601%" height="15" fill="rgb(214,111,36)" fg:x="996" fg:w="2"/><text x="79.9938%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="79.7438%" y="341" width="0.1601%" height="15" fill="rgb(207,6,21)" fg:x="996" fg:w="2"/><text x="79.9938%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.8239%" y="325" width="0.0801%" height="15" fill="rgb(213,127,38)" fg:x="997" fg:w="1"/><text x="80.0739%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="79.9039%" y="341" width="0.0801%" height="15" fill="rgb(238,118,32)" fg:x="998" fg:w="1"/><text x="80.1539%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.9840%" y="341" width="0.0801%" height="15" fill="rgb(240,139,39)" fg:x="999" fg:w="1"/><text x="80.2340%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.9840%" y="325" width="0.0801%" height="15" fill="rgb(235,10,37)" fg:x="999" fg:w="1"/><text x="80.2340%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.9840%" y="309" width="0.0801%" height="15" fill="rgb(249,171,38)" fg:x="999" fg:w="1"/><text x="80.2340%" y="319.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (7 samples, 0.56%)</title><rect x="79.5837%" y="405" width="0.5604%" height="15" fill="rgb(242,144,32)" fg:x="994" fg:w="7"/><text x="79.8337%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (7 samples, 0.56%)</title><rect x="79.5837%" y="389" width="0.5604%" height="15" fill="rgb(217,117,21)" fg:x="994" fg:w="7"/><text x="79.8337%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="79.5837%" y="373" width="0.5604%" height="15" fill="rgb(249,87,1)" fg:x="994" fg:w="7"/><text x="79.8337%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="79.9039%" y="357" width="0.2402%" height="15" fill="rgb(248,196,48)" fg:x="998" fg:w="3"/><text x="80.1539%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0641%" y="341" width="0.0801%" height="15" fill="rgb(251,206,33)" fg:x="1000" fg:w="1"/><text x="80.3141%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.0641%" y="325" width="0.0801%" height="15" fill="rgb(232,141,28)" fg:x="1000" fg:w="1"/><text x="80.3141%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0641%" y="309" width="0.0801%" height="15" fill="rgb(209,167,14)" fg:x="1000" fg:w="1"/><text x="80.3141%" y="319.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (8 samples, 0.64%)</title><rect x="79.5837%" y="421" width="0.6405%" height="15" fill="rgb(225,11,50)" fg:x="994" fg:w="8"/><text x="79.8337%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="80.1441%" y="405" width="0.0801%" height="15" fill="rgb(209,50,20)" fg:x="1001" fg:w="1"/><text x="80.3941%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.1441%" y="389" width="0.0801%" height="15" fill="rgb(212,17,46)" fg:x="1001" fg:w="1"/><text x="80.3941%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.3843%" y="357" width="0.0801%" height="15" fill="rgb(216,101,39)" fg:x="1004" fg:w="1"/><text x="80.6343%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.4644%" y="357" width="0.0801%" height="15" fill="rgb(212,228,48)" fg:x="1005" fg:w="1"/><text x="80.7144%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="80.3843%" y="373" width="0.3203%" height="15" fill="rgb(250,6,50)" fg:x="1004" fg:w="4"/><text x="80.6343%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="80.5444%" y="357" width="0.1601%" height="15" fill="rgb(250,160,48)" fg:x="1006" fg:w="2"/><text x="80.7944%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.5444%" y="341" width="0.1601%" height="15" fill="rgb(244,216,33)" fg:x="1006" fg:w="2"/><text x="80.7944%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.6245%" y="325" width="0.0801%" height="15" fill="rgb(207,157,5)" fg:x="1007" fg:w="1"/><text x="80.8745%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.6245%" y="309" width="0.0801%" height="15" fill="rgb(228,199,8)" fg:x="1007" fg:w="1"/><text x="80.8745%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.6245%" y="293" width="0.0801%" height="15" fill="rgb(227,80,20)" fg:x="1007" fg:w="1"/><text x="80.8745%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.6245%" y="277" width="0.0801%" height="15" fill="rgb(222,9,33)" fg:x="1007" fg:w="1"/><text x="80.8745%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (5 samples, 0.40%)</title><rect x="80.3843%" y="389" width="0.4003%" height="15" fill="rgb(239,44,28)" fg:x="1004" fg:w="5"/><text x="80.6343%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="80.7046%" y="373" width="0.0801%" height="15" fill="rgb(249,187,43)" fg:x="1008" fg:w="1"/><text x="80.9546%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.7846%" y="389" width="0.0801%" height="15" fill="rgb(216,141,28)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.7846%" y="373" width="0.0801%" height="15" fill="rgb(230,154,53)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="80.8647%" y="389" width="0.0801%" height="15" fill="rgb(227,82,4)" fg:x="1010" fg:w="1"/><text x="81.1147%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.8647%" y="373" width="0.0801%" height="15" fill="rgb(220,107,16)" fg:x="1010" fg:w="1"/><text x="81.1147%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.8647%" y="357" width="0.0801%" height="15" fill="rgb(207,187,2)" fg:x="1010" fg:w="1"/><text x="81.1147%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.8647%" y="341" width="0.0801%" height="15" fill="rgb(210,162,52)" fg:x="1010" fg:w="1"/><text x="81.1147%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.8647%" y="325" width="0.0801%" height="15" fill="rgb(217,216,49)" fg:x="1010" fg:w="1"/><text x="81.1147%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.8647%" y="309" width="0.0801%" height="15" fill="rgb(218,146,49)" fg:x="1010" fg:w="1"/><text x="81.1147%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.8647%" y="293" width="0.0801%" height="15" fill="rgb(216,55,40)" fg:x="1010" fg:w="1"/><text x="81.1147%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.8647%" y="277" width="0.0801%" height="15" fill="rgb(208,196,21)" fg:x="1010" fg:w="1"/><text x="81.1147%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="81.0248%" y="309" width="0.2402%" height="15" fill="rgb(242,117,42)" fg:x="1012" fg:w="3"/><text x="81.2748%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="81.0248%" y="293" width="0.2402%" height="15" fill="rgb(210,11,23)" fg:x="1012" fg:w="3"/><text x="81.2748%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="81.0248%" y="277" width="0.2402%" height="15" fill="rgb(217,110,2)" fg:x="1012" fg:w="3"/><text x="81.2748%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="81.1049%" y="261" width="0.1601%" height="15" fill="rgb(229,77,54)" fg:x="1013" fg:w="2"/><text x="81.3549%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="81.1049%" y="245" width="0.1601%" height="15" fill="rgb(218,53,16)" fg:x="1013" fg:w="2"/><text x="81.3549%" y="255.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (2 samples, 0.16%)</title><rect x="81.1049%" y="229" width="0.1601%" height="15" fill="rgb(215,38,13)" fg:x="1013" fg:w="2"/><text x="81.3549%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="81.2650%" y="309" width="0.0801%" height="15" fill="rgb(235,42,18)" fg:x="1015" fg:w="1"/><text x="81.5150%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.2650%" y="293" width="0.0801%" height="15" fill="rgb(219,66,54)" fg:x="1015" fg:w="1"/><text x="81.5150%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (2 samples, 0.16%)</title><rect x="81.5853%" y="261" width="0.1601%" height="15" fill="rgb(222,205,4)" fg:x="1019" fg:w="2"/><text x="81.8353%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="81.5853%" y="245" width="0.1601%" height="15" fill="rgb(227,213,46)" fg:x="1019" fg:w="2"/><text x="81.8353%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="81.7454%" y="261" width="0.0801%" height="15" fill="rgb(250,145,42)" fg:x="1021" fg:w="1"/><text x="81.9954%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.8255%" y="245" width="0.0801%" height="15" fill="rgb(219,15,2)" fg:x="1022" fg:w="1"/><text x="82.0755%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="81.9055%" y="245" width="0.4003%" height="15" fill="rgb(231,181,52)" fg:x="1023" fg:w="5"/><text x="82.1555%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="81.9055%" y="229" width="0.4003%" height="15" fill="rgb(235,1,42)" fg:x="1023" fg:w="5"/><text x="82.1555%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="82.3058%" y="245" width="0.0801%" height="15" fill="rgb(249,88,27)" fg:x="1028" fg:w="1"/><text x="82.5558%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="82.4660%" y="229" width="0.3203%" height="15" fill="rgb(235,145,16)" fg:x="1030" fg:w="4"/><text x="82.7160%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="82.3859%" y="245" width="0.4804%" height="15" fill="rgb(237,114,19)" fg:x="1029" fg:w="6"/><text x="82.6359%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="82.7862%" y="229" width="0.0801%" height="15" fill="rgb(238,51,50)" fg:x="1034" fg:w="1"/><text x="83.0362%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="82.8663%" y="245" width="0.0801%" height="15" fill="rgb(205,194,25)" fg:x="1035" fg:w="1"/><text x="83.1163%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="83.1865%" y="181" width="0.0801%" height="15" fill="rgb(215,203,17)" fg:x="1039" fg:w="1"/><text x="83.4365%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.1865%" y="165" width="0.0801%" height="15" fill="rgb(233,112,49)" fg:x="1039" fg:w="1"/><text x="83.4365%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.1865%" y="149" width="0.0801%" height="15" fill="rgb(241,130,26)" fg:x="1039" fg:w="1"/><text x="83.4365%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.1865%" y="133" width="0.0801%" height="15" fill="rgb(252,223,19)" fg:x="1039" fg:w="1"/><text x="83.4365%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="83.2666%" y="181" width="0.0801%" height="15" fill="rgb(211,95,25)" fg:x="1040" fg:w="1"/><text x="83.5166%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="83.2666%" y="165" width="0.0801%" height="15" fill="rgb(251,182,27)" fg:x="1040" fg:w="1"/><text x="83.5166%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="83.2666%" y="149" width="0.0801%" height="15" fill="rgb(238,24,4)" fg:x="1040" fg:w="1"/><text x="83.5166%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.2666%" y="133" width="0.0801%" height="15" fill="rgb(224,220,25)" fg:x="1040" fg:w="1"/><text x="83.5166%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="83.3467%" y="165" width="0.0801%" height="15" fill="rgb(239,133,26)" fg:x="1041" fg:w="1"/><text x="83.5967%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (3 samples, 0.24%)</title><rect x="83.3467%" y="181" width="0.2402%" height="15" fill="rgb(211,94,48)" fg:x="1041" fg:w="3"/><text x="83.5967%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="83.4267%" y="165" width="0.1601%" height="15" fill="rgb(239,87,6)" fg:x="1042" fg:w="2"/><text x="83.6767%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="83.5068%" y="149" width="0.0801%" height="15" fill="rgb(227,62,0)" fg:x="1043" fg:w="1"/><text x="83.7568%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="83.5869%" y="165" width="0.0801%" height="15" fill="rgb(211,226,4)" fg:x="1044" fg:w="1"/><text x="83.8369%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="83.6669%" y="149" width="0.1601%" height="15" fill="rgb(253,38,52)" fg:x="1045" fg:w="2"/><text x="83.9169%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 2.96%)</title><rect x="82.9464%" y="229" width="2.9624%" height="15" fill="rgb(229,126,40)" fg:x="1036" fg:w="37"/><text x="83.1964%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (37 samples, 2.96%)</title><rect x="82.9464%" y="213" width="2.9624%" height="15" fill="rgb(229,165,44)" fg:x="1036" fg:w="37"/><text x="83.1964%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (37 samples, 2.96%)</title><rect x="82.9464%" y="197" width="2.9624%" height="15" fill="rgb(247,95,47)" fg:x="1036" fg:w="37"/><text x="83.1964%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (29 samples, 2.32%)</title><rect x="83.5869%" y="181" width="2.3219%" height="15" fill="rgb(216,140,30)" fg:x="1044" fg:w="29"/><text x="83.8369%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (28 samples, 2.24%)</title><rect x="83.6669%" y="165" width="2.2418%" height="15" fill="rgb(246,214,8)" fg:x="1045" fg:w="28"/><text x="83.9169%" y="175.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (26 samples, 2.08%)</title><rect x="83.8271%" y="149" width="2.0817%" height="15" fill="rgb(227,224,15)" fg:x="1047" fg:w="26"/><text x="84.0771%" y="159.50">a..</text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.9087%" y="229" width="0.0801%" height="15" fill="rgb(233,175,4)" fg:x="1073" fg:w="1"/><text x="86.1587%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.9888%" y="213" width="0.0801%" height="15" fill="rgb(221,66,45)" fg:x="1074" fg:w="1"/><text x="86.2388%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="86.0689%" y="213" width="0.3203%" height="15" fill="rgb(221,178,18)" fg:x="1075" fg:w="4"/><text x="86.3189%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="86.1489%" y="197" width="0.2402%" height="15" fill="rgb(213,81,29)" fg:x="1076" fg:w="3"/><text x="86.3989%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="86.2290%" y="181" width="0.1601%" height="15" fill="rgb(220,89,49)" fg:x="1077" fg:w="2"/><text x="86.4790%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="86.2290%" y="165" width="0.1601%" height="15" fill="rgb(227,60,33)" fg:x="1077" fg:w="2"/><text x="86.4790%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.4692%" y="197" width="0.0801%" height="15" fill="rgb(205,113,12)" fg:x="1080" fg:w="1"/><text x="86.7192%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.4692%" y="181" width="0.0801%" height="15" fill="rgb(211,32,1)" fg:x="1080" fg:w="1"/><text x="86.7192%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.4692%" y="165" width="0.0801%" height="15" fill="rgb(246,2,12)" fg:x="1080" fg:w="1"/><text x="86.7192%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="86.3891%" y="213" width="0.2402%" height="15" fill="rgb(243,37,27)" fg:x="1079" fg:w="3"/><text x="86.6391%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.5492%" y="197" width="0.0801%" height="15" fill="rgb(248,211,31)" fg:x="1081" fg:w="1"/><text x="86.7992%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.5492%" y="181" width="0.0801%" height="15" fill="rgb(242,146,47)" fg:x="1081" fg:w="1"/><text x="86.7992%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.6293%" y="197" width="0.0801%" height="15" fill="rgb(206,70,20)" fg:x="1082" fg:w="1"/><text x="86.8793%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.7094%" y="181" width="0.0801%" height="15" fill="rgb(215,10,51)" fg:x="1083" fg:w="1"/><text x="86.9594%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="85.9888%" y="229" width="0.8807%" height="15" fill="rgb(243,178,53)" fg:x="1074" fg:w="11"/><text x="86.2388%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (3 samples, 0.24%)</title><rect x="86.6293%" y="213" width="0.2402%" height="15" fill="rgb(233,221,20)" fg:x="1082" fg:w="3"/><text x="86.8793%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (2 samples, 0.16%)</title><rect x="86.7094%" y="197" width="0.1601%" height="15" fill="rgb(218,95,35)" fg:x="1083" fg:w="2"/><text x="86.9594%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.7894%" y="181" width="0.0801%" height="15" fill="rgb(229,13,5)" fg:x="1084" fg:w="1"/><text x="87.0394%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.7894%" y="165" width="0.0801%" height="15" fill="rgb(252,164,30)" fg:x="1084" fg:w="1"/><text x="87.0394%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.7894%" y="149" width="0.0801%" height="15" fill="rgb(232,68,36)" fg:x="1084" fg:w="1"/><text x="87.0394%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (50 samples, 4.00%)</title><rect x="82.9464%" y="245" width="4.0032%" height="15" fill="rgb(219,59,54)" fg:x="1036" fg:w="50"/><text x="83.1964%" y="255.50">rege..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="86.8695%" y="229" width="0.0801%" height="15" fill="rgb(250,92,33)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="86.8695%" y="213" width="0.0801%" height="15" fill="rgb(229,162,54)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="86.8695%" y="197" width="0.0801%" height="15" fill="rgb(244,114,52)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="86.9496%" y="245" width="0.0801%" height="15" fill="rgb(212,211,43)" fg:x="1086" fg:w="1"/><text x="87.1996%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="86.9496%" y="229" width="0.0801%" height="15" fill="rgb(226,147,8)" fg:x="1086" fg:w="1"/><text x="87.1996%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (66 samples, 5.28%)</title><rect x="81.8255%" y="261" width="5.2842%" height="15" fill="rgb(226,23,13)" fg:x="1022" fg:w="66"/><text x="82.0755%" y="271.50">regex_..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="87.0296%" y="245" width="0.0801%" height="15" fill="rgb(240,63,4)" fg:x="1087" fg:w="1"/><text x="87.2796%" y="255.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="87.0296%" y="229" width="0.0801%" height="15" fill="rgb(221,1,32)" fg:x="1087" fg:w="1"/><text x="87.2796%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="87.1097%" y="261" width="0.2402%" height="15" fill="rgb(242,117,10)" fg:x="1088" fg:w="3"/><text x="87.3597%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="87.1097%" y="245" width="0.2402%" height="15" fill="rgb(249,172,44)" fg:x="1088" fg:w="3"/><text x="87.3597%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="87.1097%" y="229" width="0.2402%" height="15" fill="rgb(244,46,45)" fg:x="1088" fg:w="3"/><text x="87.3597%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="87.1898%" y="213" width="0.1601%" height="15" fill="rgb(206,43,17)" fg:x="1089" fg:w="2"/><text x="87.4398%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="87.1898%" y="197" width="0.1601%" height="15" fill="rgb(239,218,39)" fg:x="1089" fg:w="2"/><text x="87.4398%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="87.1898%" y="181" width="0.1601%" height="15" fill="rgb(208,169,54)" fg:x="1089" fg:w="2"/><text x="87.4398%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="87.1898%" y="165" width="0.1601%" height="15" fill="rgb(247,25,42)" fg:x="1089" fg:w="2"/><text x="87.4398%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (77 samples, 6.16%)</title><rect x="81.3451%" y="309" width="6.1649%" height="15" fill="rgb(226,23,31)" fg:x="1016" fg:w="77"/><text x="81.5951%" y="319.50">regex::r..</text></g><g><title>regex::builders::string::RegexBuilder::build (76 samples, 6.08%)</title><rect x="81.4251%" y="293" width="6.0849%" height="15" fill="rgb(247,16,28)" fg:x="1017" fg:w="76"/><text x="81.6751%" y="303.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (76 samples, 6.08%)</title><rect x="81.4251%" y="277" width="6.0849%" height="15" fill="rgb(231,147,38)" fg:x="1017" fg:w="76"/><text x="81.6751%" y="287.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="87.3499%" y="261" width="0.1601%" height="15" fill="rgb(253,81,48)" fg:x="1091" fg:w="2"/><text x="87.5999%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="87.3499%" y="245" width="0.1601%" height="15" fill="rgb(249,222,43)" fg:x="1091" fg:w="2"/><text x="87.5999%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="87.3499%" y="229" width="0.1601%" height="15" fill="rgb(221,3,27)" fg:x="1091" fg:w="2"/><text x="87.5999%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="87.3499%" y="213" width="0.1601%" height="15" fill="rgb(228,180,5)" fg:x="1091" fg:w="2"/><text x="87.5999%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="87.4299%" y="197" width="0.0801%" height="15" fill="rgb(227,131,42)" fg:x="1092" fg:w="1"/><text x="87.6799%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (84 samples, 6.73%)</title><rect x="81.0248%" y="325" width="6.7254%" height="15" fill="rgb(212,3,39)" fg:x="1012" fg:w="84"/><text x="81.2748%" y="335.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="87.5100%" y="309" width="0.2402%" height="15" fill="rgb(226,45,5)" fg:x="1093" fg:w="3"/><text x="87.7600%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="87.5100%" y="293" width="0.2402%" height="15" fill="rgb(215,167,45)" fg:x="1093" fg:w="3"/><text x="87.7600%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="87.5100%" y="277" width="0.2402%" height="15" fill="rgb(250,218,53)" fg:x="1093" fg:w="3"/><text x="87.7600%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="87.5100%" y="261" width="0.2402%" height="15" fill="rgb(207,140,0)" fg:x="1093" fg:w="3"/><text x="87.7600%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="87.5100%" y="245" width="0.2402%" height="15" fill="rgb(238,133,51)" fg:x="1093" fg:w="3"/><text x="87.7600%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="87.5901%" y="229" width="0.1601%" height="15" fill="rgb(218,203,53)" fg:x="1094" fg:w="2"/><text x="87.8401%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="87.7502%" y="309" width="0.0801%" height="15" fill="rgb(226,184,25)" fg:x="1096" fg:w="1"/><text x="88.0002%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="87.7502%" y="293" width="0.0801%" height="15" fill="rgb(231,121,21)" fg:x="1096" fg:w="1"/><text x="88.0002%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="87.7502%" y="277" width="0.0801%" height="15" fill="rgb(251,14,34)" fg:x="1096" fg:w="1"/><text x="88.0002%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="87.7502%" y="261" width="0.0801%" height="15" fill="rgb(249,193,11)" fg:x="1096" fg:w="1"/><text x="88.0002%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="87.7502%" y="245" width="0.0801%" height="15" fill="rgb(220,172,37)" fg:x="1096" fg:w="1"/><text x="88.0002%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.7502%" y="229" width="0.0801%" height="15" fill="rgb(231,229,43)" fg:x="1096" fg:w="1"/><text x="88.0002%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="87.8303%" y="293" width="0.0801%" height="15" fill="rgb(250,161,5)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="87.8303%" y="277" width="0.0801%" height="15" fill="rgb(218,225,18)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="87.8303%" y="261" width="0.0801%" height="15" fill="rgb(245,45,42)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.9103%" y="229" width="0.0801%" height="15" fill="rgb(211,115,1)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.2306%" y="213" width="0.0801%" height="15" fill="rgb(248,133,52)" fg:x="1102" fg:w="1"/><text x="88.4806%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.2306%" y="197" width="0.0801%" height="15" fill="rgb(238,100,21)" fg:x="1102" fg:w="1"/><text x="88.4806%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.2306%" y="181" width="0.0801%" height="15" fill="rgb(247,144,11)" fg:x="1102" fg:w="1"/><text x="88.4806%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (7 samples, 0.56%)</title><rect x="87.8303%" y="309" width="0.5604%" height="15" fill="rgb(206,164,16)" fg:x="1097" fg:w="7"/><text x="88.0803%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="87.9103%" y="293" width="0.4804%" height="15" fill="rgb(222,34,3)" fg:x="1098" fg:w="6"/><text x="88.1603%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="87.9103%" y="277" width="0.4804%" height="15" fill="rgb(248,82,4)" fg:x="1098" fg:w="6"/><text x="88.1603%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="87.9103%" y="261" width="0.4804%" height="15" fill="rgb(228,81,46)" fg:x="1098" fg:w="6"/><text x="88.1603%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="87.9103%" y="245" width="0.4804%" height="15" fill="rgb(227,67,47)" fg:x="1098" fg:w="6"/><text x="88.1603%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="87.9904%" y="229" width="0.4003%" height="15" fill="rgb(215,93,53)" fg:x="1099" fg:w="5"/><text x="88.2404%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="88.3106%" y="213" width="0.0801%" height="15" fill="rgb(248,194,39)" fg:x="1103" fg:w="1"/><text x="88.5606%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.3907%" y="261" width="0.0801%" height="15" fill="rgb(215,5,19)" fg:x="1104" fg:w="1"/><text x="88.6407%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.3907%" y="245" width="0.0801%" height="15" fill="rgb(226,215,51)" fg:x="1104" fg:w="1"/><text x="88.6407%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.3907%" y="229" width="0.0801%" height="15" fill="rgb(225,56,26)" fg:x="1104" fg:w="1"/><text x="88.6407%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="88.4708%" y="261" width="0.1601%" height="15" fill="rgb(222,75,29)" fg:x="1105" fg:w="2"/><text x="88.7208%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="88.4708%" y="245" width="0.1601%" height="15" fill="rgb(236,139,6)" fg:x="1105" fg:w="2"/><text x="88.7208%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="88.5508%" y="229" width="0.0801%" height="15" fill="rgb(223,137,36)" fg:x="1106" fg:w="1"/><text x="88.8008%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.5508%" y="213" width="0.0801%" height="15" fill="rgb(226,99,2)" fg:x="1106" fg:w="1"/><text x="88.8008%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="88.5508%" y="197" width="0.0801%" height="15" fill="rgb(206,133,23)" fg:x="1106" fg:w="1"/><text x="88.8008%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.5508%" y="181" width="0.0801%" height="15" fill="rgb(243,173,15)" fg:x="1106" fg:w="1"/><text x="88.8008%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.5508%" y="165" width="0.0801%" height="15" fill="rgb(228,69,28)" fg:x="1106" fg:w="1"/><text x="88.8008%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.5508%" y="149" width="0.0801%" height="15" fill="rgb(212,51,22)" fg:x="1106" fg:w="1"/><text x="88.8008%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="88.6309%" y="245" width="0.5604%" height="15" fill="rgb(227,113,0)" fg:x="1107" fg:w="7"/><text x="88.8809%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="88.6309%" y="229" width="0.5604%" height="15" fill="rgb(252,84,27)" fg:x="1107" fg:w="7"/><text x="88.8809%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="89.1914%" y="245" width="0.1601%" height="15" fill="rgb(223,145,39)" fg:x="1114" fg:w="2"/><text x="89.4414%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="89.1914%" y="229" width="0.1601%" height="15" fill="rgb(239,219,30)" fg:x="1114" fg:w="2"/><text x="89.4414%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.4315%" y="213" width="0.0801%" height="15" fill="rgb(224,196,39)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.4315%" y="197" width="0.0801%" height="15" fill="rgb(205,35,43)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.4315%" y="181" width="0.0801%" height="15" fill="rgb(228,201,21)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="89.5116%" y="213" width="0.0801%" height="15" fill="rgb(237,118,16)" fg:x="1118" fg:w="1"/><text x="89.7616%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.5116%" y="197" width="0.0801%" height="15" fill="rgb(241,17,19)" fg:x="1118" fg:w="1"/><text x="89.7616%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.5116%" y="181" width="0.0801%" height="15" fill="rgb(214,10,25)" fg:x="1118" fg:w="1"/><text x="89.7616%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.5116%" y="165" width="0.0801%" height="15" fill="rgb(238,37,29)" fg:x="1118" fg:w="1"/><text x="89.7616%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="89.5917%" y="213" width="0.1601%" height="15" fill="rgb(253,83,25)" fg:x="1119" fg:w="2"/><text x="89.8417%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="89.6717%" y="197" width="0.0801%" height="15" fill="rgb(234,192,12)" fg:x="1120" fg:w="1"/><text x="89.9217%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (7 samples, 0.56%)</title><rect x="89.3515%" y="245" width="0.5604%" height="15" fill="rgb(241,216,45)" fg:x="1116" fg:w="7"/><text x="89.6015%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="89.3515%" y="229" width="0.5604%" height="15" fill="rgb(242,22,33)" fg:x="1116" fg:w="7"/><text x="89.6015%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="89.7518%" y="213" width="0.1601%" height="15" fill="rgb(231,105,49)" fg:x="1121" fg:w="2"/><text x="90.0018%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="89.7518%" y="197" width="0.1601%" height="15" fill="rgb(218,204,15)" fg:x="1121" fg:w="2"/><text x="90.0018%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="89.7518%" y="181" width="0.1601%" height="15" fill="rgb(235,138,41)" fg:x="1121" fg:w="2"/><text x="90.0018%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="89.9119%" y="197" width="0.0801%" height="15" fill="rgb(246,0,9)" fg:x="1123" fg:w="1"/><text x="90.1619%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.9119%" y="181" width="0.0801%" height="15" fill="rgb(210,74,4)" fg:x="1123" fg:w="1"/><text x="90.1619%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.9119%" y="165" width="0.0801%" height="15" fill="rgb(250,60,41)" fg:x="1123" fg:w="1"/><text x="90.1619%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.9119%" y="149" width="0.0801%" height="15" fill="rgb(220,115,12)" fg:x="1123" fg:w="1"/><text x="90.1619%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="90.0721%" y="181" width="0.0801%" height="15" fill="rgb(237,100,13)" fg:x="1125" fg:w="1"/><text x="90.3221%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="90.1521%" y="165" width="0.0801%" height="15" fill="rgb(213,55,26)" fg:x="1126" fg:w="1"/><text x="90.4021%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="90.7926%" y="133" width="0.1601%" height="15" fill="rgb(216,17,4)" fg:x="1134" fg:w="2"/><text x="91.0426%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="90.9528%" y="133" width="0.0801%" height="15" fill="rgb(220,153,47)" fg:x="1136" fg:w="1"/><text x="91.2028%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.4331%" y="85" width="0.0801%" height="15" fill="rgb(215,131,9)" fg:x="1142" fg:w="1"/><text x="91.6831%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.64%)</title><rect x="91.0328%" y="133" width="0.6405%" height="15" fill="rgb(233,46,42)" fg:x="1137" fg:w="8"/><text x="91.2828%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (7 samples, 0.56%)</title><rect x="91.1129%" y="117" width="0.5604%" height="15" fill="rgb(226,86,7)" fg:x="1138" fg:w="7"/><text x="91.3629%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.48%)</title><rect x="91.1930%" y="101" width="0.4804%" height="15" fill="rgb(239,226,21)" fg:x="1139" fg:w="6"/><text x="91.4430%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="91.5132%" y="85" width="0.1601%" height="15" fill="rgb(244,137,22)" fg:x="1143" fg:w="2"/><text x="91.7632%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.5933%" y="69" width="0.0801%" height="15" fill="rgb(211,139,35)" fg:x="1144" fg:w="1"/><text x="91.8433%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.5933%" y="53" width="0.0801%" height="15" fill="rgb(214,62,50)" fg:x="1144" fg:w="1"/><text x="91.8433%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.5933%" y="37" width="0.0801%" height="15" fill="rgb(212,113,44)" fg:x="1144" fg:w="1"/><text x="91.8433%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (23 samples, 1.84%)</title><rect x="91.6733%" y="133" width="1.8415%" height="15" fill="rgb(226,150,43)" fg:x="1145" fg:w="23"/><text x="91.9233%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (23 samples, 1.84%)</title><rect x="91.6733%" y="117" width="1.8415%" height="15" fill="rgb(250,71,37)" fg:x="1145" fg:w="23"/><text x="91.9233%" y="127.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (23 samples, 1.84%)</title><rect x="91.6733%" y="101" width="1.8415%" height="15" fill="rgb(219,76,19)" fg:x="1145" fg:w="23"/><text x="91.9233%" y="111.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 3.76%)</title><rect x="89.9119%" y="229" width="3.7630%" height="15" fill="rgb(250,39,11)" fg:x="1123" fg:w="47"/><text x="90.1619%" y="239.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (47 samples, 3.76%)</title><rect x="89.9119%" y="213" width="3.7630%" height="15" fill="rgb(230,64,31)" fg:x="1123" fg:w="47"/><text x="90.1619%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (46 samples, 3.68%)</title><rect x="89.9920%" y="197" width="3.6829%" height="15" fill="rgb(208,222,23)" fg:x="1124" fg:w="46"/><text x="90.2420%" y="207.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (44 samples, 3.52%)</title><rect x="90.1521%" y="181" width="3.5228%" height="15" fill="rgb(227,125,18)" fg:x="1126" fg:w="44"/><text x="90.4021%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (43 samples, 3.44%)</title><rect x="90.2322%" y="165" width="3.4428%" height="15" fill="rgb(234,210,9)" fg:x="1127" fg:w="43"/><text x="90.4822%" y="175.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (43 samples, 3.44%)</title><rect x="90.2322%" y="149" width="3.4428%" height="15" fill="rgb(217,127,24)" fg:x="1127" fg:w="43"/><text x="90.4822%" y="159.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="93.5148%" y="133" width="0.1601%" height="15" fill="rgb(239,141,48)" fg:x="1168" fg:w="2"/><text x="93.7648%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (65 samples, 5.20%)</title><rect x="88.6309%" y="261" width="5.2042%" height="15" fill="rgb(227,109,8)" fg:x="1107" fg:w="65"/><text x="88.8809%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (49 samples, 3.92%)</title><rect x="89.9119%" y="245" width="3.9231%" height="15" fill="rgb(235,184,23)" fg:x="1123" fg:w="49"/><text x="90.1619%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="93.6749%" y="229" width="0.1601%" height="15" fill="rgb(227,226,48)" fg:x="1170" fg:w="2"/><text x="93.9249%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="93.7550%" y="213" width="0.0801%" height="15" fill="rgb(206,150,11)" fg:x="1171" fg:w="1"/><text x="94.0050%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.7550%" y="197" width="0.0801%" height="15" fill="rgb(254,2,33)" fg:x="1171" fg:w="1"/><text x="94.0050%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="93.8351%" y="261" width="0.0801%" height="15" fill="rgb(243,160,20)" fg:x="1172" fg:w="1"/><text x="94.0851%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="93.8351%" y="245" width="0.0801%" height="15" fill="rgb(218,208,30)" fg:x="1172" fg:w="1"/><text x="94.0851%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="93.8351%" y="229" width="0.0801%" height="15" fill="rgb(224,120,49)" fg:x="1172" fg:w="1"/><text x="94.0851%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="93.8351%" y="213" width="0.0801%" height="15" fill="rgb(246,12,2)" fg:x="1172" fg:w="1"/><text x="94.0851%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="93.9952%" y="229" width="0.0801%" height="15" fill="rgb(236,117,3)" fg:x="1174" fg:w="1"/><text x="94.2452%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="93.9952%" y="213" width="0.0801%" height="15" fill="rgb(216,128,52)" fg:x="1174" fg:w="1"/><text x="94.2452%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (81 samples, 6.49%)</title><rect x="87.7502%" y="325" width="6.4852%" height="15" fill="rgb(246,145,19)" fg:x="1096" fg:w="81"/><text x="88.0002%" y="335.50">indefini..</text></g><g><title>regex::regex::string::Regex::new (73 samples, 5.84%)</title><rect x="88.3907%" y="309" width="5.8447%" height="15" fill="rgb(222,11,46)" fg:x="1104" fg:w="73"/><text x="88.6407%" y="319.50">regex::..</text></g><g><title>regex::builders::string::RegexBuilder::build (73 samples, 5.84%)</title><rect x="88.3907%" y="293" width="5.8447%" height="15" fill="rgb(245,82,36)" fg:x="1104" fg:w="73"/><text x="88.6407%" y="303.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (73 samples, 5.84%)</title><rect x="88.3907%" y="277" width="5.8447%" height="15" fill="rgb(250,73,51)" fg:x="1104" fg:w="73"/><text x="88.6407%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="93.9151%" y="261" width="0.3203%" height="15" fill="rgb(221,189,23)" fg:x="1173" fg:w="4"/><text x="94.1651%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="93.9151%" y="245" width="0.3203%" height="15" fill="rgb(210,33,7)" fg:x="1173" fg:w="4"/><text x="94.1651%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="94.0753%" y="229" width="0.1601%" height="15" fill="rgb(210,107,22)" fg:x="1175" fg:w="2"/><text x="94.3253%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="94.0753%" y="213" width="0.1601%" height="15" fill="rgb(222,116,37)" fg:x="1175" fg:w="2"/><text x="94.3253%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="94.1553%" y="197" width="0.0801%" height="15" fill="rgb(254,17,48)" fg:x="1176" fg:w="1"/><text x="94.4053%" y="207.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="94.2354%" y="309" width="0.0801%" height="15" fill="rgb(224,36,32)" fg:x="1177" fg:w="1"/><text x="94.4854%" y="319.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_lower (1 samples, 0.08%)</title><rect x="94.2354%" y="293" width="0.0801%" height="15" fill="rgb(232,90,46)" fg:x="1177" fg:w="1"/><text x="94.4854%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.3155%" y="245" width="0.0801%" height="15" fill="rgb(241,66,40)" fg:x="1178" fg:w="1"/><text x="94.5655%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.3155%" y="229" width="0.0801%" height="15" fill="rgb(249,184,29)" fg:x="1178" fg:w="1"/><text x="94.5655%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.3155%" y="213" width="0.0801%" height="15" fill="rgb(231,181,1)" fg:x="1178" fg:w="1"/><text x="94.5655%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="94.4756%" y="181" width="0.0801%" height="15" fill="rgb(224,94,2)" fg:x="1180" fg:w="1"/><text x="94.7256%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.4756%" y="165" width="0.0801%" height="15" fill="rgb(229,170,15)" fg:x="1180" fg:w="1"/><text x="94.7256%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.4756%" y="149" width="0.0801%" height="15" fill="rgb(240,127,35)" fg:x="1180" fg:w="1"/><text x="94.7256%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.4756%" y="133" width="0.0801%" height="15" fill="rgb(248,196,34)" fg:x="1180" fg:w="1"/><text x="94.7256%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="94.3955%" y="245" width="0.2402%" height="15" fill="rgb(236,137,7)" fg:x="1179" fg:w="3"/><text x="94.6455%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="94.3955%" y="229" width="0.2402%" height="15" fill="rgb(235,127,16)" fg:x="1179" fg:w="3"/><text x="94.6455%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="94.3955%" y="213" width="0.2402%" height="15" fill="rgb(250,192,54)" fg:x="1179" fg:w="3"/><text x="94.6455%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="94.3955%" y="197" width="0.2402%" height="15" fill="rgb(218,98,20)" fg:x="1179" fg:w="3"/><text x="94.6455%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.5556%" y="181" width="0.0801%" height="15" fill="rgb(230,176,47)" fg:x="1181" fg:w="1"/><text x="94.8056%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="94.6357%" y="229" width="0.0801%" height="15" fill="rgb(244,2,33)" fg:x="1182" fg:w="1"/><text x="94.8857%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.6357%" y="213" width="0.0801%" height="15" fill="rgb(231,100,17)" fg:x="1182" fg:w="1"/><text x="94.8857%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="94.7158%" y="229" width="0.1601%" height="15" fill="rgb(245,23,12)" fg:x="1183" fg:w="2"/><text x="94.9658%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="94.7158%" y="213" width="0.1601%" height="15" fill="rgb(249,55,22)" fg:x="1183" fg:w="2"/><text x="94.9658%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="94.8759%" y="213" width="0.0801%" height="15" fill="rgb(207,134,9)" fg:x="1185" fg:w="1"/><text x="95.1259%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="94.8759%" y="197" width="0.0801%" height="15" fill="rgb(218,134,0)" fg:x="1185" fg:w="1"/><text x="95.1259%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.8759%" y="181" width="0.0801%" height="15" fill="rgb(213,212,33)" fg:x="1185" fg:w="1"/><text x="95.1259%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.8759%" y="165" width="0.0801%" height="15" fill="rgb(252,106,18)" fg:x="1185" fg:w="1"/><text x="95.1259%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (6 samples, 0.48%)</title><rect x="94.6357%" y="245" width="0.4804%" height="15" fill="rgb(208,126,42)" fg:x="1182" fg:w="6"/><text x="94.8857%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="94.8759%" y="229" width="0.2402%" height="15" fill="rgb(246,175,29)" fg:x="1185" fg:w="3"/><text x="95.1259%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="94.9560%" y="213" width="0.1601%" height="15" fill="rgb(215,13,50)" fg:x="1186" fg:w="2"/><text x="95.2060%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="94.9560%" y="197" width="0.1601%" height="15" fill="rgb(216,172,15)" fg:x="1186" fg:w="2"/><text x="95.2060%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="95.1161%" y="245" width="0.0801%" height="15" fill="rgb(212,103,13)" fg:x="1188" fg:w="1"/><text x="95.3661%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="95.1161%" y="229" width="0.0801%" height="15" fill="rgb(231,171,36)" fg:x="1188" fg:w="1"/><text x="95.3661%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="95.1161%" y="213" width="0.0801%" height="15" fill="rgb(250,123,20)" fg:x="1188" fg:w="1"/><text x="95.3661%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="95.1161%" y="197" width="0.0801%" height="15" fill="rgb(212,53,50)" fg:x="1188" fg:w="1"/><text x="95.3661%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1161%" y="181" width="0.0801%" height="15" fill="rgb(243,54,12)" fg:x="1188" fg:w="1"/><text x="95.3661%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1161%" y="165" width="0.0801%" height="15" fill="rgb(234,101,34)" fg:x="1188" fg:w="1"/><text x="95.3661%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.1161%" y="149" width="0.0801%" height="15" fill="rgb(254,67,22)" fg:x="1188" fg:w="1"/><text x="95.3661%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="95.1962%" y="213" width="0.0801%" height="15" fill="rgb(250,35,47)" fg:x="1189" fg:w="1"/><text x="95.4462%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.1962%" y="197" width="0.0801%" height="15" fill="rgb(226,126,38)" fg:x="1189" fg:w="1"/><text x="95.4462%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (14 samples, 1.12%)</title><rect x="94.3155%" y="261" width="1.1209%" height="15" fill="rgb(216,138,53)" fg:x="1178" fg:w="14"/><text x="94.5655%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="95.1962%" y="245" width="0.2402%" height="15" fill="rgb(246,199,43)" fg:x="1189" fg:w="3"/><text x="95.4462%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="95.1962%" y="229" width="0.2402%" height="15" fill="rgb(232,125,11)" fg:x="1189" fg:w="3"/><text x="95.4462%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="95.2762%" y="213" width="0.1601%" height="15" fill="rgb(218,219,45)" fg:x="1190" fg:w="2"/><text x="95.5262%" y="223.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (15 samples, 1.20%)</title><rect x="94.3155%" y="277" width="1.2010%" height="15" fill="rgb(216,102,54)" fg:x="1178" fg:w="15"/><text x="94.5655%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="95.4363%" y="261" width="0.0801%" height="15" fill="rgb(250,228,7)" fg:x="1192" fg:w="1"/><text x="95.6863%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (16 samples, 1.28%)</title><rect x="94.3155%" y="293" width="1.2810%" height="15" fill="rgb(226,125,25)" fg:x="1178" fg:w="16"/><text x="94.5655%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="95.5164%" y="277" width="0.0801%" height="15" fill="rgb(224,165,27)" fg:x="1193" fg:w="1"/><text x="95.7664%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="95.5164%" y="261" width="0.0801%" height="15" fill="rgb(233,86,3)" fg:x="1193" fg:w="1"/><text x="95.7664%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="95.5965%" y="229" width="0.1601%" height="15" fill="rgb(228,116,20)" fg:x="1194" fg:w="2"/><text x="95.8465%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="95.6765%" y="213" width="0.0801%" height="15" fill="rgb(209,192,17)" fg:x="1195" fg:w="1"/><text x="95.9265%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (195 samples, 15.61%)</title><rect x="80.2242%" y="405" width="15.6125%" height="15" fill="rgb(224,88,34)" fg:x="1002" fg:w="195"/><text x="80.4742%" y="415.50">&lt;&amp;kernel::model::EntityP..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (186 samples, 14.89%)</title><rect x="80.9448%" y="389" width="14.8919%" height="15" fill="rgb(233,38,6)" fg:x="1011" fg:w="186"/><text x="81.1948%" y="399.50">plugins_core::looking::..</text></g><g><title>indefinite::indefinite (186 samples, 14.89%)</title><rect x="80.9448%" y="373" width="14.8919%" height="15" fill="rgb(212,59,30)" fg:x="1011" fg:w="186"/><text x="81.1948%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (186 samples, 14.89%)</title><rect x="80.9448%" y="357" width="14.8919%" height="15" fill="rgb(213,80,3)" fg:x="1011" fg:w="186"/><text x="81.1948%" y="367.50">indefinite::methods::in..</text></g><g><title>indefinite::methods::apply_rules (186 samples, 14.89%)</title><rect x="80.9448%" y="341" width="14.8919%" height="15" fill="rgb(251,178,7)" fg:x="1011" fg:w="186"/><text x="81.1948%" y="351.50">indefinite::methods::ap..</text></g><g><title>indefinite::rules::other::Other::run (20 samples, 1.60%)</title><rect x="94.2354%" y="325" width="1.6013%" height="15" fill="rgb(213,154,26)" fg:x="1177" fg:w="20"/><text x="94.4854%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (19 samples, 1.52%)</title><rect x="94.3155%" y="309" width="1.5212%" height="15" fill="rgb(238,165,49)" fg:x="1178" fg:w="19"/><text x="94.5655%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="95.5965%" y="293" width="0.2402%" height="15" fill="rgb(248,91,46)" fg:x="1194" fg:w="3"/><text x="95.8465%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="95.5965%" y="277" width="0.2402%" height="15" fill="rgb(244,21,52)" fg:x="1194" fg:w="3"/><text x="95.8465%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="95.5965%" y="261" width="0.2402%" height="15" fill="rgb(247,122,20)" fg:x="1194" fg:w="3"/><text x="95.8465%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="95.5965%" y="245" width="0.2402%" height="15" fill="rgb(218,27,9)" fg:x="1194" fg:w="3"/><text x="95.8465%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="95.7566%" y="229" width="0.0801%" height="15" fill="rgb(246,7,6)" fg:x="1196" fg:w="1"/><text x="96.0066%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.7566%" y="213" width="0.0801%" height="15" fill="rgb(227,135,54)" fg:x="1196" fg:w="1"/><text x="96.0066%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7566%" y="197" width="0.0801%" height="15" fill="rgb(247,14,11)" fg:x="1196" fg:w="1"/><text x="96.0066%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.7566%" y="181" width="0.0801%" height="15" fill="rgb(206,149,34)" fg:x="1196" fg:w="1"/><text x="96.0066%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="95.8367%" y="389" width="0.1601%" height="15" fill="rgb(227,228,4)" fg:x="1197" fg:w="2"/><text x="96.0867%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="95.8367%" y="373" width="0.1601%" height="15" fill="rgb(238,218,28)" fg:x="1197" fg:w="2"/><text x="96.0867%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="95.8367%" y="357" width="0.1601%" height="15" fill="rgb(252,86,40)" fg:x="1197" fg:w="2"/><text x="96.0867%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="95.8367%" y="405" width="0.4003%" height="15" fill="rgb(251,225,11)" fg:x="1197" fg:w="5"/><text x="96.0867%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="95.9968%" y="389" width="0.2402%" height="15" fill="rgb(206,46,49)" fg:x="1199" fg:w="3"/><text x="96.2468%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.1569%" y="373" width="0.0801%" height="15" fill="rgb(245,128,24)" fg:x="1201" fg:w="1"/><text x="96.4069%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="96.1569%" y="357" width="0.0801%" height="15" fill="rgb(219,177,34)" fg:x="1201" fg:w="1"/><text x="96.4069%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="96.1569%" y="341" width="0.0801%" height="15" fill="rgb(218,60,48)" fg:x="1201" fg:w="1"/><text x="96.4069%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="96.1569%" y="325" width="0.0801%" height="15" fill="rgb(221,11,5)" fg:x="1201" fg:w="1"/><text x="96.4069%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.1569%" y="309" width="0.0801%" height="15" fill="rgb(220,148,13)" fg:x="1201" fg:w="1"/><text x="96.4069%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.1569%" y="293" width="0.0801%" height="15" fill="rgb(210,16,3)" fg:x="1201" fg:w="1"/><text x="96.4069%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.2370%" y="341" width="0.0801%" height="15" fill="rgb(236,80,2)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.2370%" y="325" width="0.0801%" height="15" fill="rgb(239,129,19)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.2370%" y="309" width="0.0801%" height="15" fill="rgb(220,106,35)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="96.2370%" y="293" width="0.0801%" height="15" fill="rgb(252,139,45)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="96.2370%" y="277" width="0.0801%" height="15" fill="rgb(229,8,36)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (2 samples, 0.16%)</title><rect x="96.2370%" y="389" width="0.1601%" height="15" fill="rgb(230,126,33)" fg:x="1202" fg:w="2"/><text x="96.4870%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="96.2370%" y="373" width="0.1601%" height="15" fill="rgb(239,140,21)" fg:x="1202" fg:w="2"/><text x="96.4870%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="96.2370%" y="357" width="0.1601%" height="15" fill="rgb(254,104,9)" fg:x="1202" fg:w="2"/><text x="96.4870%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.3171%" y="341" width="0.0801%" height="15" fill="rgb(239,52,14)" fg:x="1203" fg:w="1"/><text x="96.5671%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.3171%" y="325" width="0.0801%" height="15" fill="rgb(208,227,44)" fg:x="1203" fg:w="1"/><text x="96.5671%" y="335.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="96.3971%" y="341" width="0.0801%" height="15" fill="rgb(246,18,19)" fg:x="1204" fg:w="1"/><text x="96.6471%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.4772%" y="229" width="0.0801%" height="15" fill="rgb(235,228,25)" fg:x="1205" fg:w="1"/><text x="96.7272%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.4772%" y="213" width="0.0801%" height="15" fill="rgb(240,156,20)" fg:x="1205" fg:w="1"/><text x="96.7272%" y="223.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="96.4772%" y="197" width="0.0801%" height="15" fill="rgb(224,8,20)" fg:x="1205" fg:w="1"/><text x="96.7272%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="96.4772%" y="181" width="0.0801%" height="15" fill="rgb(214,12,52)" fg:x="1205" fg:w="1"/><text x="96.7272%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.4772%" y="165" width="0.0801%" height="15" fill="rgb(211,220,47)" fg:x="1205" fg:w="1"/><text x="96.7272%" y="175.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="96.4772%" y="325" width="0.1601%" height="15" fill="rgb(250,173,5)" fg:x="1205" fg:w="2"/><text x="96.7272%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="96.4772%" y="309" width="0.1601%" height="15" fill="rgb(250,125,52)" fg:x="1205" fg:w="2"/><text x="96.7272%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.4772%" y="293" width="0.1601%" height="15" fill="rgb(209,133,18)" fg:x="1205" fg:w="2"/><text x="96.7272%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="96.4772%" y="277" width="0.1601%" height="15" fill="rgb(216,173,22)" fg:x="1205" fg:w="2"/><text x="96.7272%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.4772%" y="261" width="0.1601%" height="15" fill="rgb(205,3,22)" fg:x="1205" fg:w="2"/><text x="96.7272%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="96.4772%" y="245" width="0.1601%" height="15" fill="rgb(248,22,20)" fg:x="1205" fg:w="2"/><text x="96.7272%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="96.5572%" y="229" width="0.0801%" height="15" fill="rgb(233,6,29)" fg:x="1206" fg:w="1"/><text x="96.8072%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.5572%" y="213" width="0.0801%" height="15" fill="rgb(240,22,54)" fg:x="1206" fg:w="1"/><text x="96.8072%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="96.5572%" y="197" width="0.0801%" height="15" fill="rgb(231,133,32)" fg:x="1206" fg:w="1"/><text x="96.8072%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="96.5572%" y="181" width="0.0801%" height="15" fill="rgb(248,193,4)" fg:x="1206" fg:w="1"/><text x="96.8072%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.5572%" y="165" width="0.0801%" height="15" fill="rgb(211,178,46)" fg:x="1206" fg:w="1"/><text x="96.8072%" y="175.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (215 samples, 17.21%)</title><rect x="79.5036%" y="437" width="17.2138%" height="15" fill="rgb(224,5,42)" fg:x="993" fg:w="215"/><text x="79.7536%" y="447.50">&lt;plugins_core::looking::act..</text></g><g><title>plugins_core::looking::model::new_area_observation (206 samples, 16.49%)</title><rect x="80.2242%" y="421" width="16.4932%" height="15" fill="rgb(239,176,25)" fg:x="1002" fg:w="206"/><text x="80.4742%" y="431.50">plugins_core::looking::mo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.48%)</title><rect x="96.2370%" y="405" width="0.4804%" height="15" fill="rgb(245,187,50)" fg:x="1202" fg:w="6"/><text x="96.4870%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="96.3971%" y="389" width="0.3203%" height="15" fill="rgb(248,24,15)" fg:x="1204" fg:w="4"/><text x="96.6471%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="96.3971%" y="373" width="0.3203%" height="15" fill="rgb(205,166,13)" fg:x="1204" fg:w="4"/><text x="96.6471%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="96.3971%" y="357" width="0.3203%" height="15" fill="rgb(208,114,23)" fg:x="1204" fg:w="4"/><text x="96.6471%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="96.4772%" y="341" width="0.2402%" height="15" fill="rgb(239,127,18)" fg:x="1205" fg:w="3"/><text x="96.7272%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="96.6373%" y="325" width="0.0801%" height="15" fill="rgb(219,154,28)" fg:x="1207" fg:w="1"/><text x="96.8873%" y="335.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="96.6373%" y="309" width="0.0801%" height="15" fill="rgb(225,157,23)" fg:x="1207" fg:w="1"/><text x="96.8873%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.6373%" y="293" width="0.0801%" height="15" fill="rgb(219,8,6)" fg:x="1207" fg:w="1"/><text x="96.8873%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.6373%" y="277" width="0.0801%" height="15" fill="rgb(212,47,6)" fg:x="1207" fg:w="1"/><text x="96.8873%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.6373%" y="261" width="0.0801%" height="15" fill="rgb(224,190,4)" fg:x="1207" fg:w="1"/><text x="96.8873%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.6373%" y="245" width="0.0801%" height="15" fill="rgb(239,183,29)" fg:x="1207" fg:w="1"/><text x="96.8873%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.7174%" y="437" width="0.0801%" height="15" fill="rgb(213,57,7)" fg:x="1208" fg:w="1"/><text x="96.9674%" y="447.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (217 samples, 17.37%)</title><rect x="79.5036%" y="565" width="17.3739%" height="15" fill="rgb(216,148,1)" fg:x="993" fg:w="217"/><text x="79.7536%" y="575.50">kernel::plugins::mw::Middle..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (217 samples, 17.37%)</title><rect x="79.5036%" y="549" width="17.3739%" height="15" fill="rgb(236,182,29)" fg:x="993" fg:w="217"/><text x="79.7536%" y="559.50">&lt;plugins_dynlib::DynamicMid..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (217 samples, 17.37%)</title><rect x="79.5036%" y="533" width="17.3739%" height="15" fill="rgb(244,120,48)" fg:x="993" fg:w="217"/><text x="79.7536%" y="543.50">kernel::plugins::mw::Middle..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (217 samples, 17.37%)</title><rect x="79.5036%" y="517" width="17.3739%" height="15" fill="rgb(206,71,34)" fg:x="993" fg:w="217"/><text x="79.7536%" y="527.50">core::ops::function::FnOnce..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (217 samples, 17.37%)</title><rect x="79.5036%" y="501" width="17.3739%" height="15" fill="rgb(242,32,6)" fg:x="993" fg:w="217"/><text x="79.7536%" y="511.50">kernel::plugins::mw::Middle..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (217 samples, 17.37%)</title><rect x="79.5036%" y="485" width="17.3739%" height="15" fill="rgb(241,35,3)" fg:x="993" fg:w="217"/><text x="79.7536%" y="495.50">core::ops::function::FnOnce..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (217 samples, 17.37%)</title><rect x="79.5036%" y="469" width="17.3739%" height="15" fill="rgb(222,62,19)" fg:x="993" fg:w="217"/><text x="79.7536%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as ..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (217 samples, 17.37%)</title><rect x="79.5036%" y="453" width="17.3739%" height="15" fill="rgb(223,110,41)" fg:x="993" fg:w="217"/><text x="79.7536%" y="463.50">&lt;engine::session::state::St..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.7974%" y="437" width="0.0801%" height="15" fill="rgb(208,224,4)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.0376%" y="549" width="0.0801%" height="15" fill="rgb(241,137,19)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.1177%" y="517" width="0.0801%" height="15" fill="rgb(244,24,17)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.1177%" y="501" width="0.0801%" height="15" fill="rgb(245,178,49)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1177%" y="485" width="0.0801%" height="15" fill="rgb(219,160,38)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.1177%" y="469" width="0.0801%" height="15" fill="rgb(228,137,14)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1177%" y="453" width="0.0801%" height="15" fill="rgb(237,134,11)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="463.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="97.1177%" y="437" width="0.0801%" height="15" fill="rgb(211,126,44)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.2778%" y="389" width="0.0801%" height="15" fill="rgb(226,171,33)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.2778%" y="373" width="0.0801%" height="15" fill="rgb(253,99,13)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.2778%" y="357" width="0.0801%" height="15" fill="rgb(244,48,7)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.2778%" y="341" width="0.0801%" height="15" fill="rgb(244,217,54)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.2778%" y="325" width="0.0801%" height="15" fill="rgb(224,15,18)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.2778%" y="309" width="0.0801%" height="15" fill="rgb(244,99,12)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.2778%" y="293" width="0.0801%" height="15" fill="rgb(233,226,8)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.2778%" y="277" width="0.0801%" height="15" fill="rgb(229,211,3)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.2778%" y="261" width="0.0801%" height="15" fill="rgb(216,140,21)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.2778%" y="245" width="0.0801%" height="15" fill="rgb(234,122,30)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.2778%" y="229" width="0.0801%" height="15" fill="rgb(236,25,46)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2778%" y="213" width="0.0801%" height="15" fill="rgb(217,52,54)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="97.1978%" y="453" width="0.2402%" height="15" fill="rgb(222,29,26)" fg:x="1214" fg:w="3"/><text x="97.4478%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.2778%" y="437" width="0.1601%" height="15" fill="rgb(216,177,29)" fg:x="1215" fg:w="2"/><text x="97.5278%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.2778%" y="421" width="0.1601%" height="15" fill="rgb(247,136,51)" fg:x="1215" fg:w="2"/><text x="97.5278%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.2778%" y="405" width="0.1601%" height="15" fill="rgb(231,47,47)" fg:x="1215" fg:w="2"/><text x="97.5278%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3579%" y="389" width="0.0801%" height="15" fill="rgb(211,192,36)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="399.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="97.4380%" y="453" width="0.0801%" height="15" fill="rgb(229,156,32)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.4380%" y="437" width="0.0801%" height="15" fill="rgb(248,213,20)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4380%" y="421" width="0.0801%" height="15" fill="rgb(217,64,7)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.4380%" y="405" width="0.0801%" height="15" fill="rgb(232,142,8)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4380%" y="389" width="0.0801%" height="15" fill="rgb(224,92,44)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.4380%" y="373" width="0.0801%" height="15" fill="rgb(214,169,17)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.4380%" y="357" width="0.0801%" height="15" fill="rgb(210,59,37)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.4380%" y="341" width="0.0801%" height="15" fill="rgb(214,116,48)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.4380%" y="325" width="0.0801%" height="15" fill="rgb(244,191,6)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.4380%" y="309" width="0.0801%" height="15" fill="rgb(241,50,52)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.4380%" y="293" width="0.0801%" height="15" fill="rgb(236,75,39)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="303.50"></text></g><g><title>plugins_core::tools::contained_by (8 samples, 0.64%)</title><rect x="97.1177%" y="533" width="0.6405%" height="15" fill="rgb(236,99,0)" fg:x="1213" fg:w="8"/><text x="97.3677%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.56%)</title><rect x="97.1978%" y="517" width="0.5604%" height="15" fill="rgb(207,202,15)" fg:x="1214" fg:w="7"/><text x="97.4478%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.56%)</title><rect x="97.1978%" y="501" width="0.5604%" height="15" fill="rgb(233,207,14)" fg:x="1214" fg:w="7"/><text x="97.4478%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="97.1978%" y="485" width="0.5604%" height="15" fill="rgb(226,27,51)" fg:x="1214" fg:w="7"/><text x="97.4478%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="97.1978%" y="469" width="0.5604%" height="15" fill="rgb(206,104,42)" fg:x="1214" fg:w="7"/><text x="97.4478%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="97.5180%" y="453" width="0.2402%" height="15" fill="rgb(212,225,4)" fg:x="1218" fg:w="3"/><text x="97.7680%" y="463.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="97.5180%" y="437" width="0.2402%" height="15" fill="rgb(233,96,42)" fg:x="1218" fg:w="3"/><text x="97.7680%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.5180%" y="421" width="0.2402%" height="15" fill="rgb(229,21,32)" fg:x="1218" fg:w="3"/><text x="97.7680%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.5180%" y="405" width="0.2402%" height="15" fill="rgb(226,216,24)" fg:x="1218" fg:w="3"/><text x="97.7680%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.5180%" y="389" width="0.2402%" height="15" fill="rgb(221,163,17)" fg:x="1218" fg:w="3"/><text x="97.7680%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.5180%" y="373" width="0.2402%" height="15" fill="rgb(216,216,42)" fg:x="1218" fg:w="3"/><text x="97.7680%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.5981%" y="357" width="0.1601%" height="15" fill="rgb(240,118,7)" fg:x="1219" fg:w="2"/><text x="97.8481%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.5981%" y="341" width="0.1601%" height="15" fill="rgb(221,67,37)" fg:x="1219" fg:w="2"/><text x="97.8481%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.6781%" y="325" width="0.0801%" height="15" fill="rgb(241,32,44)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.6781%" y="309" width="0.0801%" height="15" fill="rgb(235,204,43)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.6781%" y="293" width="0.0801%" height="15" fill="rgb(213,116,10)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.6781%" y="277" width="0.0801%" height="15" fill="rgb(239,15,48)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.6781%" y="261" width="0.0801%" height="15" fill="rgb(207,123,36)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6781%" y="245" width="0.0801%" height="15" fill="rgb(209,103,30)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7582%" y="501" width="0.0801%" height="15" fill="rgb(238,100,19)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7582%" y="485" width="0.0801%" height="15" fill="rgb(244,30,14)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="495.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="97.7582%" y="533" width="0.1601%" height="15" fill="rgb(249,174,6)" fg:x="1221" fg:w="2"/><text x="98.0082%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.7582%" y="517" width="0.1601%" height="15" fill="rgb(235,213,41)" fg:x="1221" fg:w="2"/><text x="98.0082%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.8383%" y="501" width="0.0801%" height="15" fill="rgb(213,118,6)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8383%" y="485" width="0.0801%" height="15" fill="rgb(235,44,51)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.8383%" y="469" width="0.0801%" height="15" fill="rgb(217,9,53)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.8383%" y="453" width="0.0801%" height="15" fill="rgb(237,172,34)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.8383%" y="437" width="0.0801%" height="15" fill="rgb(206,206,11)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.8383%" y="421" width="0.0801%" height="15" fill="rgb(214,149,29)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.8383%" y="405" width="0.0801%" height="15" fill="rgb(208,123,3)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8383%" y="389" width="0.0801%" height="15" fill="rgb(229,126,4)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="399.50"></text></g><g><title>engine::session::Session::captured (242 samples, 19.38%)</title><rect x="78.6229%" y="709" width="19.3755%" height="15" fill="rgb(222,92,36)" fg:x="982" fg:w="242"/><text x="78.8729%" y="719.50">engine::session::Session::capt..</text></g><g><title>engine::session::logs::capture (240 samples, 19.22%)</title><rect x="78.7830%" y="693" width="19.2154%" height="15" fill="rgb(216,39,41)" fg:x="984" fg:w="240"/><text x="79.0330%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (240 samples, 19.22%)</title><rect x="78.7830%" y="677" width="19.2154%" height="15" fill="rgb(253,127,28)" fg:x="984" fg:w="240"/><text x="79.0330%" y="687.50">tracing_core::dispatcher::with..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (240 samples, 19.22%)</title><rect x="78.7830%" y="661" width="19.2154%" height="15" fill="rgb(249,152,51)" fg:x="984" fg:w="240"/><text x="79.0330%" y="671.50">&lt;engine::session::Session as k..</text></g><g><title>kernel::plugins::mw::apply_middleware (240 samples, 19.22%)</title><rect x="78.7830%" y="645" width="19.2154%" height="15" fill="rgb(209,123,42)" fg:x="984" fg:w="240"/><text x="79.0330%" y="655.50">kernel::plugins::mw::apply_mid..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (240 samples, 19.22%)</title><rect x="78.7830%" y="629" width="19.2154%" height="15" fill="rgb(241,118,22)" fg:x="984" fg:w="240"/><text x="79.0330%" y="639.50">kernel::plugins::mw::Middlewar..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (240 samples, 19.22%)</title><rect x="78.7830%" y="613" width="19.2154%" height="15" fill="rgb(208,25,7)" fg:x="984" fg:w="240"/><text x="79.0330%" y="623.50">&lt;engine::session::ExpandSurrou..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (231 samples, 18.49%)</title><rect x="79.5036%" y="597" width="18.4948%" height="15" fill="rgb(243,144,39)" fg:x="993" fg:w="231"/><text x="79.7536%" y="607.50">kernel::plugins::mw::Middlewa..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (231 samples, 18.49%)</title><rect x="79.5036%" y="581" width="18.4948%" height="15" fill="rgb(250,50,5)" fg:x="993" fg:w="231"/><text x="79.7536%" y="591.50">&lt;plugins_rune::RuneMiddleware..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (14 samples, 1.12%)</title><rect x="96.8775%" y="565" width="1.1209%" height="15" fill="rgb(207,67,11)" fg:x="1210" fg:w="14"/><text x="97.1275%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (11 samples, 0.88%)</title><rect x="97.1177%" y="549" width="0.8807%" height="15" fill="rgb(245,204,40)" fg:x="1213" fg:w="11"/><text x="97.3677%" y="559.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="97.9183%" y="533" width="0.0801%" height="15" fill="rgb(238,228,24)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.9183%" y="517" width="0.0801%" height="15" fill="rgb(217,116,22)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0785%" y="661" width="0.0801%" height="15" fill="rgb(234,98,12)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0785%" y="645" width="0.0801%" height="15" fill="rgb(242,170,50)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0785%" y="629" width="0.0801%" height="15" fill="rgb(235,7,5)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0785%" y="613" width="0.0801%" height="15" fill="rgb(241,114,28)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0785%" y="597" width="0.0801%" height="15" fill="rgb(246,112,42)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0785%" y="581" width="0.0801%" height="15" fill="rgb(248,228,14)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.0785%" y="565" width="0.0801%" height="15" fill="rgb(208,133,18)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.0785%" y="549" width="0.0801%" height="15" fill="rgb(207,35,49)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.0785%" y="533" width="0.0801%" height="15" fill="rgb(205,68,36)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0785%" y="517" width="0.0801%" height="15" fill="rgb(245,62,40)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0785%" y="501" width="0.0801%" height="15" fill="rgb(228,27,24)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.0785%" y="485" width="0.0801%" height="15" fill="rgb(253,19,12)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.0785%" y="469" width="0.0801%" height="15" fill="rgb(232,28,20)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.0785%" y="453" width="0.0801%" height="15" fill="rgb(218,35,51)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.0785%" y="437" width="0.0801%" height="15" fill="rgb(212,90,40)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0785%" y="421" width="0.0801%" height="15" fill="rgb(220,172,12)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.2386%" y="517" width="0.0801%" height="15" fill="rgb(226,159,20)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.2386%" y="501" width="0.0801%" height="15" fill="rgb(234,205,16)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.2386%" y="485" width="0.0801%" height="15" fill="rgb(207,9,39)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.2386%" y="469" width="0.0801%" height="15" fill="rgb(249,143,15)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.2386%" y="453" width="0.0801%" height="15" fill="rgb(253,133,29)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.3187%" y="485" width="0.0801%" height="15" fill="rgb(221,187,0)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.3187%" y="469" width="0.0801%" height="15" fill="rgb(205,204,26)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3187%" y="453" width="0.0801%" height="15" fill="rgb(224,68,54)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.2386%" y="565" width="0.2402%" height="15" fill="rgb(209,67,4)" fg:x="1227" fg:w="3"/><text x="98.4886%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.2386%" y="549" width="0.2402%" height="15" fill="rgb(228,229,18)" fg:x="1227" fg:w="3"/><text x="98.4886%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.2386%" y="533" width="0.2402%" height="15" fill="rgb(231,89,13)" fg:x="1227" fg:w="3"/><text x="98.4886%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.3187%" y="517" width="0.1601%" height="15" fill="rgb(210,182,18)" fg:x="1228" fg:w="2"/><text x="98.5687%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.3187%" y="501" width="0.1601%" height="15" fill="rgb(240,105,2)" fg:x="1228" fg:w="2"/><text x="98.5687%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="98.3987%" y="485" width="0.0801%" height="15" fill="rgb(207,170,50)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.3987%" y="469" width="0.0801%" height="15" fill="rgb(232,133,24)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="479.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.3987%" y="453" width="0.0801%" height="15" fill="rgb(235,166,27)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="98.3987%" y="437" width="0.0801%" height="15" fill="rgb(209,19,13)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.3987%" y="421" width="0.0801%" height="15" fill="rgb(226,79,39)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.3987%" y="405" width="0.0801%" height="15" fill="rgb(222,163,10)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.3987%" y="389" width="0.0801%" height="15" fill="rgb(214,44,19)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.3987%" y="373" width="0.0801%" height="15" fill="rgb(210,217,13)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="383.50"></text></g><g><title>&lt;serde::de::Unexpected as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="98.3987%" y="357" width="0.0801%" height="15" fill="rgb(237,61,54)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="98.3987%" y="341" width="0.0801%" height="15" fill="rgb(226,184,24)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.3987%" y="325" width="0.0801%" height="15" fill="rgb(223,226,4)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="98.1585%" y="613" width="0.4003%" height="15" fill="rgb(210,26,41)" fg:x="1226" fg:w="5"/><text x="98.4085%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="98.1585%" y="597" width="0.4003%" height="15" fill="rgb(220,221,6)" fg:x="1226" fg:w="5"/><text x="98.4085%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="98.2386%" y="581" width="0.3203%" height="15" fill="rgb(225,89,49)" fg:x="1227" fg:w="4"/><text x="98.4886%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.4788%" y="565" width="0.0801%" height="15" fill="rgb(218,70,45)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4788%" y="549" width="0.0801%" height="15" fill="rgb(238,166,21)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.4788%" y="533" width="0.0801%" height="15" fill="rgb(224,141,44)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.4788%" y="517" width="0.0801%" height="15" fill="rgb(230,12,49)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.4788%" y="501" width="0.0801%" height="15" fill="rgb(212,174,12)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.5588%" y="581" width="0.0801%" height="15" fill="rgb(246,67,9)" fg:x="1231" fg:w="1"/><text x="98.8088%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="98.1585%" y="661" width="0.5604%" height="15" fill="rgb(239,35,23)" fg:x="1226" fg:w="7"/><text x="98.4085%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="98.1585%" y="645" width="0.5604%" height="15" fill="rgb(211,167,0)" fg:x="1226" fg:w="7"/><text x="98.4085%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="98.1585%" y="629" width="0.5604%" height="15" fill="rgb(225,119,45)" fg:x="1226" fg:w="7"/><text x="98.4085%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.5588%" y="613" width="0.1601%" height="15" fill="rgb(210,162,6)" fg:x="1231" fg:w="2"/><text x="98.8088%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.5588%" y="597" width="0.1601%" height="15" fill="rgb(208,118,35)" fg:x="1231" fg:w="2"/><text x="98.8088%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.6389%" y="581" width="0.0801%" height="15" fill="rgb(239,4,53)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="591.50"></text></g><g><title>engine::session::internal::Added::find_refs (9 samples, 0.72%)</title><rect x="98.0785%" y="693" width="0.7206%" height="15" fill="rgb(213,130,21)" fg:x="1225" fg:w="9"/><text x="98.3285%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.72%)</title><rect x="98.0785%" y="677" width="0.7206%" height="15" fill="rgb(235,148,0)" fg:x="1225" fg:w="9"/><text x="98.3285%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7190%" y="661" width="0.0801%" height="15" fill="rgb(244,224,18)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7190%" y="645" width="0.0801%" height="15" fill="rgb(211,214,4)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.7190%" y="629" width="0.0801%" height="15" fill="rgb(206,119,25)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.7190%" y="613" width="0.0801%" height="15" fill="rgb(243,93,47)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.7990%" y="549" width="0.0801%" height="15" fill="rgb(224,194,6)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7990%" y="533" width="0.0801%" height="15" fill="rgb(243,229,6)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.7990%" y="517" width="0.0801%" height="15" fill="rgb(207,23,50)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7990%" y="501" width="0.0801%" height="15" fill="rgb(253,192,32)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7990%" y="485" width="0.0801%" height="15" fill="rgb(213,21,6)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.7990%" y="581" width="0.1601%" height="15" fill="rgb(243,151,13)" fg:x="1234" fg:w="2"/><text x="99.0490%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.7990%" y="565" width="0.1601%" height="15" fill="rgb(233,165,41)" fg:x="1234" fg:w="2"/><text x="99.0490%" y="575.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.8791%" y="549" width="0.0801%" height="15" fill="rgb(246,176,45)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="98.7990%" y="677" width="0.2402%" height="15" fill="rgb(217,170,52)" fg:x="1234" fg:w="3"/><text x="99.0490%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.7990%" y="661" width="0.2402%" height="15" fill="rgb(214,203,54)" fg:x="1234" fg:w="3"/><text x="99.0490%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.7990%" y="645" width="0.2402%" height="15" fill="rgb(248,215,49)" fg:x="1234" fg:w="3"/><text x="99.0490%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="98.7990%" y="629" width="0.2402%" height="15" fill="rgb(208,46,10)" fg:x="1234" fg:w="3"/><text x="99.0490%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.7990%" y="613" width="0.2402%" height="15" fill="rgb(254,5,31)" fg:x="1234" fg:w="3"/><text x="99.0490%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="98.7990%" y="597" width="0.2402%" height="15" fill="rgb(222,104,33)" fg:x="1234" fg:w="3"/><text x="99.0490%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9592%" y="581" width="0.0801%" height="15" fill="rgb(248,49,16)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9592%" y="565" width="0.0801%" height="15" fill="rgb(232,198,41)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.9592%" y="549" width="0.0801%" height="15" fill="rgb(214,125,3)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.0392%" y="501" width="0.0801%" height="15" fill="rgb(229,220,28)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0392%" y="485" width="0.0801%" height="15" fill="rgb(222,64,37)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.0392%" y="581" width="0.1601%" height="15" fill="rgb(249,184,13)" fg:x="1237" fg:w="2"/><text x="99.2892%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.0392%" y="565" width="0.1601%" height="15" fill="rgb(252,176,6)" fg:x="1237" fg:w="2"/><text x="99.2892%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.0392%" y="549" width="0.1601%" height="15" fill="rgb(228,153,7)" fg:x="1237" fg:w="2"/><text x="99.2892%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.0392%" y="533" width="0.1601%" height="15" fill="rgb(242,193,5)" fg:x="1237" fg:w="2"/><text x="99.2892%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.0392%" y="517" width="0.1601%" height="15" fill="rgb(232,140,9)" fg:x="1237" fg:w="2"/><text x="99.2892%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1193%" y="501" width="0.0801%" height="15" fill="rgb(213,222,16)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1193%" y="485" width="0.0801%" height="15" fill="rgb(222,75,50)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.1193%" y="469" width="0.0801%" height="15" fill="rgb(205,180,2)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.28%)</title><rect x="97.9984%" y="709" width="1.2810%" height="15" fill="rgb(216,34,7)" fg:x="1224" fg:w="16"/><text x="98.2484%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="98.7990%" y="693" width="0.4804%" height="15" fill="rgb(253,16,32)" fg:x="1234" fg:w="6"/><text x="99.0490%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="99.0392%" y="677" width="0.2402%" height="15" fill="rgb(208,97,28)" fg:x="1237" fg:w="3"/><text x="99.2892%" y="687.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="99.0392%" y="661" width="0.2402%" height="15" fill="rgb(225,92,11)" fg:x="1237" fg:w="3"/><text x="99.2892%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.0392%" y="645" width="0.2402%" height="15" fill="rgb(243,38,12)" fg:x="1237" fg:w="3"/><text x="99.2892%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.0392%" y="629" width="0.2402%" height="15" fill="rgb(208,139,16)" fg:x="1237" fg:w="3"/><text x="99.2892%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.0392%" y="613" width="0.2402%" height="15" fill="rgb(227,24,9)" fg:x="1237" fg:w="3"/><text x="99.2892%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.0392%" y="597" width="0.2402%" height="15" fill="rgb(206,62,11)" fg:x="1237" fg:w="3"/><text x="99.2892%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.1994%" y="581" width="0.0801%" height="15" fill="rgb(228,134,27)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.1994%" y="565" width="0.0801%" height="15" fill="rgb(205,55,33)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3595%" y="661" width="0.0801%" height="15" fill="rgb(243,75,43)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3595%" y="645" width="0.0801%" height="15" fill="rgb(223,27,42)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3595%" y="629" width="0.0801%" height="15" fill="rgb(232,189,33)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3595%" y="613" width="0.0801%" height="15" fill="rgb(210,9,39)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3595%" y="597" width="0.0801%" height="15" fill="rgb(242,85,26)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3595%" y="581" width="0.0801%" height="15" fill="rgb(248,44,4)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.4396%" y="661" width="0.0801%" height="15" fill="rgb(250,96,46)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4396%" y="645" width="0.0801%" height="15" fill="rgb(229,116,26)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4396%" y="629" width="0.0801%" height="15" fill="rgb(246,94,34)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4396%" y="613" width="0.0801%" height="15" fill="rgb(251,73,21)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4396%" y="597" width="0.0801%" height="15" fill="rgb(254,121,25)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4396%" y="581" width="0.0801%" height="15" fill="rgb(215,161,49)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.4396%" y="565" width="0.0801%" height="15" fill="rgb(221,43,13)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.4396%" y="549" width="0.0801%" height="15" fill="rgb(249,5,37)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.4396%" y="533" width="0.0801%" height="15" fill="rgb(226,25,44)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.4396%" y="517" width="0.0801%" height="15" fill="rgb(238,189,16)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.4396%" y="501" width="0.0801%" height="15" fill="rgb(251,186,8)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.4396%" y="485" width="0.0801%" height="15" fill="rgb(254,34,31)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.4396%" y="469" width="0.0801%" height="15" fill="rgb(225,215,27)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.4396%" y="453" width="0.0801%" height="15" fill="rgb(221,192,48)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.4396%" y="437" width="0.0801%" height="15" fill="rgb(219,137,20)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4396%" y="421" width="0.0801%" height="15" fill="rgb(219,84,11)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.5997%" y="613" width="0.0801%" height="15" fill="rgb(224,10,23)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6797%" y="613" width="0.0801%" height="15" fill="rgb(248,22,39)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6797%" y="597" width="0.0801%" height="15" fill="rgb(212,154,20)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7598%" y="565" width="0.0801%" height="15" fill="rgb(236,199,50)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7598%" y="549" width="0.0801%" height="15" fill="rgb(211,9,17)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="559.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.7598%" y="533" width="0.0801%" height="15" fill="rgb(243,216,36)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="99.7598%" y="517" width="0.0801%" height="15" fill="rgb(250,2,10)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.7598%" y="501" width="0.0801%" height="15" fill="rgb(226,50,48)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="99.5196%" y="661" width="0.4003%" height="15" fill="rgb(243,81,16)" fg:x="1243" fg:w="5"/><text x="99.7696%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="99.5196%" y="645" width="0.4003%" height="15" fill="rgb(250,14,2)" fg:x="1243" fg:w="5"/><text x="99.7696%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="99.5196%" y="629" width="0.4003%" height="15" fill="rgb(233,135,29)" fg:x="1243" fg:w="5"/><text x="99.7696%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.7598%" y="613" width="0.1601%" height="15" fill="rgb(224,64,43)" fg:x="1246" fg:w="2"/><text x="100.0098%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.7598%" y="597" width="0.1601%" height="15" fill="rgb(238,84,13)" fg:x="1246" fg:w="2"/><text x="100.0098%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.7598%" y="581" width="0.1601%" height="15" fill="rgb(253,48,26)" fg:x="1246" fg:w="2"/><text x="100.0098%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8399%" y="565" width="0.0801%" height="15" fill="rgb(205,223,31)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8399%" y="549" width="0.0801%" height="15" fill="rgb(221,41,32)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.8399%" y="533" width="0.0801%" height="15" fill="rgb(213,158,31)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="543.50"></text></g><g><title>all (1,249 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(245,126,43)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-6657d8a0 (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(227,7,22)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1087.50">simple-6657d8a0</text></g><g><title>_start (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(252,90,44)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(253,91,0)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(252,175,49)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(246,150,1)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,249 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(241,192,25)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,249 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(239,187,11)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,249 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(218,202,51)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,249 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(225,176,8)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,249 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(219,122,41)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,249 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(248,140,20)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,249 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(245,41,37)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,249 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(235,82,39)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,249 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(230,108,42)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,249 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(215,150,50)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(233,212,5)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,249 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(245,80,22)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,249 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(238,129,16)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (456 samples, 36.51%)</title><rect x="63.4908%" y="789" width="36.5092%" height="15" fill="rgb(240,19,0)" fg:x="793" fg:w="456"/><text x="63.7408%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine:..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (456 samples, 36.51%)</title><rect x="63.4908%" y="773" width="36.5092%" height="15" fill="rgb(232,42,35)" fg:x="793" fg:w="456"/><text x="63.7408%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (456 samples, 36.51%)</title><rect x="63.4908%" y="757" width="36.5092%" height="15" fill="rgb(223,130,24)" fg:x="793" fg:w="456"/><text x="63.7408%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (269 samples, 21.54%)</title><rect x="78.4628%" y="741" width="21.5372%" height="15" fill="rgb(237,16,22)" fg:x="980" fg:w="269"/><text x="78.7128%" y="751.50">engine::session::Session::evaluate..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (269 samples, 21.54%)</title><rect x="78.4628%" y="725" width="21.5372%" height="15" fill="rgb(248,192,20)" fg:x="980" fg:w="269"/><text x="78.7128%" y="735.50">engine::session::Session::evaluate..</text></g><g><title>kernel::model::EntityPtrResolver::world (9 samples, 0.72%)</title><rect x="99.2794%" y="709" width="0.7206%" height="15" fill="rgb(233,167,2)" fg:x="1240" fg:w="9"/><text x="99.5294%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.72%)</title><rect x="99.2794%" y="693" width="0.7206%" height="15" fill="rgb(252,71,44)" fg:x="1240" fg:w="9"/><text x="99.5294%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="99.3595%" y="677" width="0.6405%" height="15" fill="rgb(238,37,47)" fg:x="1241" fg:w="8"/><text x="99.6095%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.9199%" y="661" width="0.0801%" height="15" fill="rgb(214,202,54)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="671.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.9199%" y="645" width="0.0801%" height="15" fill="rgb(254,165,40)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9199%" y="629" width="0.0801%" height="15" fill="rgb(246,173,38)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9199%" y="613" width="0.0801%" height="15" fill="rgb(215,3,27)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9199%" y="597" width="0.0801%" height="15" fill="rgb(239,169,51)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9199%" y="581" width="0.0801%" height="15" fill="rgb(212,5,25)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9199%" y="565" width="0.0801%" height="15" fill="rgb(243,45,17)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="575.50"></text></g></svg></svg>