<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1238" onload="init(evt)" viewBox="0 0 1200 1238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1238" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1221.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1221.00"> </text><svg id="frames" x="10" width="1180" total_samples="1264"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="821" width="0.0791%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0791%" y="709" width="0.0791%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3291%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0791%" y="693" width="0.0791%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3291%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0791%" y="677" width="0.0791%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3291%" y="687.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.1582%" y="709" width="0.1582%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="2"/><text x="0.4082%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0791%" y="741" width="0.3165%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="4"/><text x="0.3291%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.0791%" y="725" width="0.3165%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="4"/><text x="0.3291%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3165%" y="709" width="0.0791%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="1"/><text x="0.5665%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3165%" y="693" width="0.0791%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="0.5665%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3165%" y="677" width="0.0791%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="0.5665%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3165%" y="661" width="0.0791%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="1"/><text x="0.5665%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.47%)</title><rect x="0.0000%" y="837" width="0.4747%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (5 samples, 0.40%)</title><rect x="0.0791%" y="821" width="0.3956%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="5"/><text x="0.3291%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0791%" y="805" width="0.3956%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="5"/><text x="0.3291%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (5 samples, 0.40%)</title><rect x="0.0791%" y="789" width="0.3956%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="5"/><text x="0.3291%" y="799.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0791%" y="773" width="0.3956%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="5"/><text x="0.3291%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0791%" y="757" width="0.3956%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="5"/><text x="0.3291%" y="767.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3956%" y="741" width="0.0791%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="0.6456%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="0.4747%" y="725" width="0.0791%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="0.7247%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="0.4747%" y="709" width="0.0791%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="1"/><text x="0.7247%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="0.4747%" y="693" width="0.0791%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="1"/><text x="0.7247%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.4747%" y="677" width="0.0791%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="1"/><text x="0.7247%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4747%" y="661" width="0.0791%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="1"/><text x="0.7247%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.4747%" y="645" width="0.0791%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="0.7247%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4747%" y="629" width="0.0791%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="0.7247%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.4747%" y="613" width="0.0791%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="0.7247%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4747%" y="597" width="0.0791%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="1"/><text x="0.7247%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="0.4747%" y="581" width="0.0791%" height="15" fill="rgb(238,160,17)" fg:x="6" fg:w="1"/><text x="0.7247%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="0.4747%" y="757" width="0.1582%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="2"/><text x="0.7247%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="0.4747%" y="741" width="0.1582%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="2"/><text x="0.7247%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="0.5538%" y="725" width="0.0791%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="1"/><text x="0.8038%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="0.5538%" y="709" width="0.0791%" height="15" fill="rgb(229,88,8)" fg:x="7" fg:w="1"/><text x="0.8038%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="0.5538%" y="693" width="0.0791%" height="15" fill="rgb(213,181,19)" fg:x="7" fg:w="1"/><text x="0.8038%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.5538%" y="677" width="0.0791%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="1"/><text x="0.8038%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.5538%" y="661" width="0.0791%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="1"/><text x="0.8038%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.5538%" y="645" width="0.0791%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="1"/><text x="0.8038%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.5538%" y="629" width="0.0791%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="1"/><text x="0.8038%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="0.6329%" y="597" width="0.0791%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="1"/><text x="0.8829%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="0.6329%" y="581" width="0.0791%" height="15" fill="rgb(238,167,29)" fg:x="8" fg:w="1"/><text x="0.8829%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="0.6329%" y="757" width="0.1582%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="2"/><text x="0.8829%" y="767.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="0.6329%" y="741" width="0.1582%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="2"/><text x="0.8829%" y="751.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="0.6329%" y="725" width="0.1582%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="2"/><text x="0.8829%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="0.6329%" y="709" width="0.1582%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="2"/><text x="0.8829%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.6329%" y="693" width="0.1582%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="2"/><text x="0.8829%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="0.6329%" y="677" width="0.1582%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="2"/><text x="0.8829%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.6329%" y="661" width="0.1582%" height="15" fill="rgb(206,96,30)" fg:x="8" fg:w="2"/><text x="0.8829%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="0.6329%" y="645" width="0.1582%" height="15" fill="rgb(218,138,4)" fg:x="8" fg:w="2"/><text x="0.8829%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.6329%" y="629" width="0.1582%" height="15" fill="rgb(250,191,14)" fg:x="8" fg:w="2"/><text x="0.8829%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="0.6329%" y="613" width="0.1582%" height="15" fill="rgb(239,60,40)" fg:x="8" fg:w="2"/><text x="0.8829%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.7120%" y="597" width="0.0791%" height="15" fill="rgb(206,27,48)" fg:x="9" fg:w="1"/><text x="0.9620%" y="607.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="0.7911%" y="741" width="0.0791%" height="15" fill="rgb(225,35,8)" fg:x="10" fg:w="1"/><text x="1.0411%" y="751.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.7911%" y="725" width="0.0791%" height="15" fill="rgb(250,213,24)" fg:x="10" fg:w="1"/><text x="1.0411%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7911%" y="709" width="0.0791%" height="15" fill="rgb(247,123,22)" fg:x="10" fg:w="1"/><text x="1.0411%" y="719.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="0.7911%" y="693" width="0.0791%" height="15" fill="rgb(231,138,38)" fg:x="10" fg:w="1"/><text x="1.0411%" y="703.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="0.7911%" y="677" width="0.0791%" height="15" fill="rgb(231,145,46)" fg:x="10" fg:w="1"/><text x="1.0411%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (7 samples, 0.55%)</title><rect x="0.4747%" y="789" width="0.5538%" height="15" fill="rgb(251,118,11)" fg:x="6" fg:w="7"/><text x="0.7247%" y="799.50"></text></g><g><title>engine::internal::Entities::add_persisted (7 samples, 0.55%)</title><rect x="0.4747%" y="773" width="0.5538%" height="15" fill="rgb(217,147,25)" fg:x="6" fg:w="7"/><text x="0.7247%" y="783.50"></text></g><g><title>kernel::model::entity::Entity::from_str (3 samples, 0.24%)</title><rect x="0.7911%" y="757" width="0.2373%" height="15" fill="rgb(247,81,37)" fg:x="10" fg:w="3"/><text x="1.0411%" y="767.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="0.8703%" y="741" width="0.1582%" height="15" fill="rgb(209,12,38)" fg:x="11" fg:w="2"/><text x="1.1203%" y="751.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.8703%" y="725" width="0.1582%" height="15" fill="rgb(227,1,9)" fg:x="11" fg:w="2"/><text x="1.1203%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (8 samples, 0.63%)</title><rect x="0.4747%" y="805" width="0.6329%" height="15" fill="rgb(248,47,43)" fg:x="6" fg:w="8"/><text x="0.7247%" y="815.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="1.0285%" y="789" width="0.0791%" height="15" fill="rgb(221,10,30)" fg:x="13" fg:w="1"/><text x="1.2785%" y="799.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="1.0285%" y="773" width="0.0791%" height="15" fill="rgb(210,229,1)" fg:x="13" fg:w="1"/><text x="1.2785%" y="783.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="1.0285%" y="757" width="0.0791%" height="15" fill="rgb(222,148,37)" fg:x="13" fg:w="1"/><text x="1.2785%" y="767.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="1.0285%" y="741" width="0.0791%" height="15" fill="rgb(234,67,33)" fg:x="13" fg:w="1"/><text x="1.2785%" y="751.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="1.0285%" y="725" width="0.0791%" height="15" fill="rgb(247,98,35)" fg:x="13" fg:w="1"/><text x="1.2785%" y="735.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="1.0285%" y="709" width="0.0791%" height="15" fill="rgb(247,138,52)" fg:x="13" fg:w="1"/><text x="1.2785%" y="719.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="1.0285%" y="693" width="0.0791%" height="15" fill="rgb(213,79,30)" fg:x="13" fg:w="1"/><text x="1.2785%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="1.0285%" y="677" width="0.0791%" height="15" fill="rgb(246,177,23)" fg:x="13" fg:w="1"/><text x="1.2785%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="1.0285%" y="661" width="0.0791%" height="15" fill="rgb(230,62,27)" fg:x="13" fg:w="1"/><text x="1.2785%" y="671.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="1.0285%" y="645" width="0.0791%" height="15" fill="rgb(216,154,8)" fg:x="13" fg:w="1"/><text x="1.2785%" y="655.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="1.1076%" y="757" width="0.1582%" height="15" fill="rgb(244,35,45)" fg:x="14" fg:w="2"/><text x="1.3576%" y="767.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="1.1867%" y="741" width="0.0791%" height="15" fill="rgb(251,115,12)" fg:x="15" fg:w="1"/><text x="1.4367%" y="751.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.47%)</title><rect x="1.1076%" y="789" width="0.4747%" height="15" fill="rgb(240,54,50)" fg:x="14" fg:w="6"/><text x="1.3576%" y="799.50"></text></g><g><title>libloading::os::unix::Library::open (6 samples, 0.47%)</title><rect x="1.1076%" y="773" width="0.4747%" height="15" fill="rgb(233,84,52)" fg:x="14" fg:w="6"/><text x="1.3576%" y="783.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="1.2658%" y="757" width="0.3165%" height="15" fill="rgb(207,117,47)" fg:x="16" fg:w="4"/><text x="1.5158%" y="767.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="1.2658%" y="741" width="0.3165%" height="15" fill="rgb(249,43,39)" fg:x="16" fg:w="4"/><text x="1.5158%" y="751.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.2658%" y="725" width="0.3165%" height="15" fill="rgb(209,38,44)" fg:x="16" fg:w="4"/><text x="1.5158%" y="735.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.2658%" y="709" width="0.3165%" height="15" fill="rgb(236,212,23)" fg:x="16" fg:w="4"/><text x="1.5158%" y="719.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.2658%" y="693" width="0.3165%" height="15" fill="rgb(242,79,21)" fg:x="16" fg:w="4"/><text x="1.5158%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5032%" y="677" width="0.0791%" height="15" fill="rgb(211,96,35)" fg:x="19" fg:w="1"/><text x="1.7532%" y="687.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (15 samples, 1.19%)</title><rect x="0.4747%" y="837" width="1.1867%" height="15" fill="rgb(253,215,40)" fg:x="6" fg:w="15"/><text x="0.7247%" y="847.50"></text></g><g><title>engine::session::Session::new (15 samples, 1.19%)</title><rect x="0.4747%" y="821" width="1.1867%" height="15" fill="rgb(211,81,21)" fg:x="6" fg:w="15"/><text x="0.7247%" y="831.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (7 samples, 0.55%)</title><rect x="1.1076%" y="805" width="0.5538%" height="15" fill="rgb(208,190,38)" fg:x="14" fg:w="7"/><text x="1.3576%" y="815.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="1.5823%" y="789" width="0.0791%" height="15" fill="rgb(235,213,38)" fg:x="20" fg:w="1"/><text x="1.8323%" y="799.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="1.5823%" y="773" width="0.0791%" height="15" fill="rgb(237,122,38)" fg:x="20" fg:w="1"/><text x="1.8323%" y="783.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.6614%" y="821" width="0.0791%" height="15" fill="rgb(244,218,35)" fg:x="21" fg:w="1"/><text x="1.9114%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.7405%" y="693" width="0.0791%" height="15" fill="rgb(240,68,47)" fg:x="22" fg:w="1"/><text x="1.9905%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.7405%" y="677" width="0.0791%" height="15" fill="rgb(210,16,53)" fg:x="22" fg:w="1"/><text x="1.9905%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="1.7405%" y="661" width="0.0791%" height="15" fill="rgb(235,124,12)" fg:x="22" fg:w="1"/><text x="1.9905%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="1.7405%" y="645" width="0.0791%" height="15" fill="rgb(224,169,11)" fg:x="22" fg:w="1"/><text x="1.9905%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="1.7405%" y="629" width="0.0791%" height="15" fill="rgb(250,166,2)" fg:x="22" fg:w="1"/><text x="1.9905%" y="639.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="1.7405%" y="613" width="0.0791%" height="15" fill="rgb(242,216,29)" fg:x="22" fg:w="1"/><text x="1.9905%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.7405%" y="597" width="0.0791%" height="15" fill="rgb(230,116,27)" fg:x="22" fg:w="1"/><text x="1.9905%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="1.7405%" y="773" width="0.1582%" height="15" fill="rgb(228,99,48)" fg:x="22" fg:w="2"/><text x="1.9905%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="1.7405%" y="757" width="0.1582%" height="15" fill="rgb(253,11,6)" fg:x="22" fg:w="2"/><text x="1.9905%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="1.7405%" y="741" width="0.1582%" height="15" fill="rgb(247,143,39)" fg:x="22" fg:w="2"/><text x="1.9905%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="1.7405%" y="725" width="0.1582%" height="15" fill="rgb(236,97,10)" fg:x="22" fg:w="2"/><text x="1.9905%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="1.7405%" y="709" width="0.1582%" height="15" fill="rgb(233,208,19)" fg:x="22" fg:w="2"/><text x="1.9905%" y="719.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="1.8196%" y="693" width="0.0791%" height="15" fill="rgb(216,164,2)" fg:x="23" fg:w="1"/><text x="2.0696%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="1.8196%" y="677" width="0.0791%" height="15" fill="rgb(220,129,5)" fg:x="23" fg:w="1"/><text x="2.0696%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (3 samples, 0.24%)</title><rect x="1.7405%" y="789" width="0.2373%" height="15" fill="rgb(242,17,10)" fg:x="22" fg:w="3"/><text x="1.9905%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.8987%" y="773" width="0.0791%" height="15" fill="rgb(242,107,0)" fg:x="24" fg:w="1"/><text x="2.1487%" y="783.50"></text></g><g><title>engine::identifiers::model::get_gid (2 samples, 0.16%)</title><rect x="1.9778%" y="789" width="0.1582%" height="15" fill="rgb(251,28,31)" fg:x="25" fg:w="2"/><text x="2.2278%" y="799.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="1.9778%" y="773" width="0.1582%" height="15" fill="rgb(233,223,10)" fg:x="25" fg:w="2"/><text x="2.2278%" y="783.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="1.9778%" y="757" width="0.1582%" height="15" fill="rgb(215,21,27)" fg:x="25" fg:w="2"/><text x="2.2278%" y="767.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.0570%" y="741" width="0.0791%" height="15" fill="rgb(232,23,21)" fg:x="26" fg:w="1"/><text x="2.3070%" y="751.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="2.1361%" y="741" width="0.0791%" height="15" fill="rgb(244,5,23)" fg:x="27" fg:w="1"/><text x="2.3861%" y="751.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.1361%" y="725" width="0.0791%" height="15" fill="rgb(226,81,46)" fg:x="27" fg:w="1"/><text x="2.3861%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.1361%" y="709" width="0.0791%" height="15" fill="rgb(247,70,30)" fg:x="27" fg:w="1"/><text x="2.3861%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.2943%" y="725" width="0.0791%" height="15" fill="rgb(212,68,19)" fg:x="29" fg:w="1"/><text x="2.5443%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.2943%" y="709" width="0.0791%" height="15" fill="rgb(240,187,13)" fg:x="29" fg:w="1"/><text x="2.5443%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.2943%" y="693" width="0.0791%" height="15" fill="rgb(223,113,26)" fg:x="29" fg:w="1"/><text x="2.5443%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.2943%" y="677" width="0.0791%" height="15" fill="rgb(206,192,2)" fg:x="29" fg:w="1"/><text x="2.5443%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.4525%" y="693" width="0.0791%" height="15" fill="rgb(241,108,4)" fg:x="31" fg:w="1"/><text x="2.7025%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.4525%" y="677" width="0.0791%" height="15" fill="rgb(247,173,49)" fg:x="31" fg:w="1"/><text x="2.7025%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.4525%" y="661" width="0.0791%" height="15" fill="rgb(224,114,35)" fg:x="31" fg:w="1"/><text x="2.7025%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.5316%" y="661" width="0.0791%" height="15" fill="rgb(245,159,27)" fg:x="32" fg:w="1"/><text x="2.7816%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.6108%" y="661" width="0.1582%" height="15" fill="rgb(245,172,44)" fg:x="33" fg:w="2"/><text x="2.8608%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="2.6108%" y="645" width="0.1582%" height="15" fill="rgb(236,23,11)" fg:x="33" fg:w="2"/><text x="2.8608%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.6108%" y="629" width="0.1582%" height="15" fill="rgb(205,117,38)" fg:x="33" fg:w="2"/><text x="2.8608%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.6899%" y="613" width="0.0791%" height="15" fill="rgb(237,72,25)" fg:x="34" fg:w="1"/><text x="2.9399%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="2.6899%" y="597" width="0.0791%" height="15" fill="rgb(244,70,9)" fg:x="34" fg:w="1"/><text x="2.9399%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="2.5316%" y="693" width="0.3165%" height="15" fill="rgb(217,125,39)" fg:x="32" fg:w="4"/><text x="2.7816%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="2.5316%" y="677" width="0.3165%" height="15" fill="rgb(235,36,10)" fg:x="32" fg:w="4"/><text x="2.7816%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.7690%" y="661" width="0.0791%" height="15" fill="rgb(251,123,47)" fg:x="35" fg:w="1"/><text x="3.0190%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.7690%" y="645" width="0.0791%" height="15" fill="rgb(221,13,13)" fg:x="35" fg:w="1"/><text x="3.0190%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.7690%" y="629" width="0.0791%" height="15" fill="rgb(238,131,9)" fg:x="35" fg:w="1"/><text x="3.0190%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.79%)</title><rect x="2.1361%" y="757" width="0.7911%" height="15" fill="rgb(211,50,8)" fg:x="27" fg:w="10"/><text x="2.3861%" y="767.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.71%)</title><rect x="2.2152%" y="741" width="0.7120%" height="15" fill="rgb(245,182,24)" fg:x="28" fg:w="9"/><text x="2.4652%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="2.3734%" y="725" width="0.5538%" height="15" fill="rgb(242,14,37)" fg:x="30" fg:w="7"/><text x="2.6234%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="2.4525%" y="709" width="0.4747%" height="15" fill="rgb(246,228,12)" fg:x="31" fg:w="6"/><text x="2.7025%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.8481%" y="693" width="0.0791%" height="15" fill="rgb(213,55,15)" fg:x="36" fg:w="1"/><text x="3.0981%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.8481%" y="677" width="0.0791%" height="15" fill="rgb(209,9,3)" fg:x="36" fg:w="1"/><text x="3.0981%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.0854%" y="709" width="0.0791%" height="15" fill="rgb(230,59,30)" fg:x="39" fg:w="1"/><text x="3.3354%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.1646%" y="709" width="0.0791%" height="15" fill="rgb(209,121,21)" fg:x="40" fg:w="1"/><text x="3.4146%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="2.9272%" y="757" width="0.4747%" height="15" fill="rgb(220,109,13)" fg:x="37" fg:w="6"/><text x="3.1772%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.47%)</title><rect x="2.9272%" y="741" width="0.4747%" height="15" fill="rgb(232,18,1)" fg:x="37" fg:w="6"/><text x="3.1772%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="2.9272%" y="725" width="0.4747%" height="15" fill="rgb(215,41,42)" fg:x="37" fg:w="6"/><text x="3.1772%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.2437%" y="709" width="0.1582%" height="15" fill="rgb(224,123,36)" fg:x="41" fg:w="2"/><text x="3.4937%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.2437%" y="693" width="0.1582%" height="15" fill="rgb(240,125,3)" fg:x="41" fg:w="2"/><text x="3.4937%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.3228%" y="677" width="0.0791%" height="15" fill="rgb(205,98,50)" fg:x="42" fg:w="1"/><text x="3.5728%" y="687.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="3.4810%" y="709" width="0.1582%" height="15" fill="rgb(205,185,37)" fg:x="44" fg:w="2"/><text x="3.7310%" y="719.50"></text></g><g><title>engine::session::Session::flush (25 samples, 1.98%)</title><rect x="1.7405%" y="821" width="1.9778%" height="15" fill="rgb(238,207,15)" fg:x="22" fg:w="25"/><text x="1.9905%" y="831.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (25 samples, 1.98%)</title><rect x="1.7405%" y="805" width="1.9778%" height="15" fill="rgb(213,199,42)" fg:x="22" fg:w="25"/><text x="1.9905%" y="815.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (20 samples, 1.58%)</title><rect x="2.1361%" y="789" width="1.5823%" height="15" fill="rgb(235,201,11)" fg:x="27" fg:w="20"/><text x="2.3861%" y="799.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (20 samples, 1.58%)</title><rect x="2.1361%" y="773" width="1.5823%" height="15" fill="rgb(207,46,11)" fg:x="27" fg:w="20"/><text x="2.3861%" y="783.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="3.4019%" y="757" width="0.3165%" height="15" fill="rgb(241,35,35)" fg:x="43" fg:w="4"/><text x="3.6519%" y="767.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="3.4810%" y="741" width="0.2373%" height="15" fill="rgb(243,32,47)" fg:x="44" fg:w="3"/><text x="3.7310%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="3.4810%" y="725" width="0.2373%" height="15" fill="rgb(247,202,23)" fg:x="44" fg:w="3"/><text x="3.7310%" y="735.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.6392%" y="709" width="0.0791%" height="15" fill="rgb(219,102,11)" fg:x="46" fg:w="1"/><text x="3.8892%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.6392%" y="693" width="0.0791%" height="15" fill="rgb(243,110,44)" fg:x="46" fg:w="1"/><text x="3.8892%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.6392%" y="677" width="0.0791%" height="15" fill="rgb(222,74,54)" fg:x="46" fg:w="1"/><text x="3.8892%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.6392%" y="661" width="0.0791%" height="15" fill="rgb(216,99,12)" fg:x="46" fg:w="1"/><text x="3.8892%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.6392%" y="645" width="0.0791%" height="15" fill="rgb(226,22,26)" fg:x="46" fg:w="1"/><text x="3.8892%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.6392%" y="629" width="0.0791%" height="15" fill="rgb(217,163,10)" fg:x="46" fg:w="1"/><text x="3.8892%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.7184%" y="805" width="0.0791%" height="15" fill="rgb(213,25,53)" fg:x="47" fg:w="1"/><text x="3.9684%" y="815.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.7184%" y="789" width="0.0791%" height="15" fill="rgb(252,105,26)" fg:x="47" fg:w="1"/><text x="3.9684%" y="799.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.7184%" y="773" width="0.0791%" height="15" fill="rgb(220,39,43)" fg:x="47" fg:w="1"/><text x="3.9684%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.7184%" y="757" width="0.0791%" height="15" fill="rgb(229,68,48)" fg:x="47" fg:w="1"/><text x="3.9684%" y="767.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.7184%" y="741" width="0.0791%" height="15" fill="rgb(252,8,32)" fg:x="47" fg:w="1"/><text x="3.9684%" y="751.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.7184%" y="725" width="0.0791%" height="15" fill="rgb(223,20,43)" fg:x="47" fg:w="1"/><text x="3.9684%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.7184%" y="709" width="0.0791%" height="15" fill="rgb(229,81,49)" fg:x="47" fg:w="1"/><text x="3.9684%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7184%" y="693" width="0.0791%" height="15" fill="rgb(236,28,36)" fg:x="47" fg:w="1"/><text x="3.9684%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.7184%" y="677" width="0.0791%" height="15" fill="rgb(249,185,26)" fg:x="47" fg:w="1"/><text x="3.9684%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7184%" y="661" width="0.0791%" height="15" fill="rgb(249,174,33)" fg:x="47" fg:w="1"/><text x="3.9684%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.7184%" y="645" width="0.0791%" height="15" fill="rgb(233,201,37)" fg:x="47" fg:w="1"/><text x="3.9684%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7184%" y="629" width="0.0791%" height="15" fill="rgb(221,78,26)" fg:x="47" fg:w="1"/><text x="3.9684%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.7184%" y="613" width="0.0791%" height="15" fill="rgb(250,127,30)" fg:x="47" fg:w="1"/><text x="3.9684%" y="623.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="3.7184%" y="821" width="0.1582%" height="15" fill="rgb(230,49,44)" fg:x="47" fg:w="2"/><text x="3.9684%" y="831.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="3.7975%" y="805" width="0.0791%" height="15" fill="rgb(229,67,23)" fg:x="48" fg:w="1"/><text x="4.0475%" y="815.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="3.7975%" y="789" width="0.0791%" height="15" fill="rgb(249,83,47)" fg:x="48" fg:w="1"/><text x="4.0475%" y="799.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="3.7975%" y="773" width="0.0791%" height="15" fill="rgb(215,43,3)" fg:x="48" fg:w="1"/><text x="4.0475%" y="783.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="3.7975%" y="757" width="0.0791%" height="15" fill="rgb(238,154,13)" fg:x="48" fg:w="1"/><text x="4.0475%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.7975%" y="741" width="0.0791%" height="15" fill="rgb(219,56,2)" fg:x="48" fg:w="1"/><text x="4.0475%" y="751.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.7975%" y="725" width="0.0791%" height="15" fill="rgb(233,0,4)" fg:x="48" fg:w="1"/><text x="4.0475%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.7975%" y="709" width="0.0791%" height="15" fill="rgb(235,30,7)" fg:x="48" fg:w="1"/><text x="4.0475%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.7975%" y="693" width="0.0791%" height="15" fill="rgb(250,79,13)" fg:x="48" fg:w="1"/><text x="4.0475%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7975%" y="677" width="0.0791%" height="15" fill="rgb(211,146,34)" fg:x="48" fg:w="1"/><text x="4.0475%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.7975%" y="661" width="0.0791%" height="15" fill="rgb(228,22,38)" fg:x="48" fg:w="1"/><text x="4.0475%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7975%" y="645" width="0.0791%" height="15" fill="rgb(235,168,5)" fg:x="48" fg:w="1"/><text x="4.0475%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.7975%" y="629" width="0.0791%" height="15" fill="rgb(221,155,16)" fg:x="48" fg:w="1"/><text x="4.0475%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7975%" y="613" width="0.0791%" height="15" fill="rgb(215,215,53)" fg:x="48" fg:w="1"/><text x="4.0475%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.8766%" y="709" width="0.0791%" height="15" fill="rgb(223,4,10)" fg:x="49" fg:w="1"/><text x="4.1266%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.8766%" y="693" width="0.0791%" height="15" fill="rgb(234,103,6)" fg:x="49" fg:w="1"/><text x="4.1266%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.8766%" y="677" width="0.0791%" height="15" fill="rgb(227,97,0)" fg:x="49" fg:w="1"/><text x="4.1266%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.8766%" y="661" width="0.0791%" height="15" fill="rgb(234,150,53)" fg:x="49" fg:w="1"/><text x="4.1266%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.8766%" y="645" width="0.0791%" height="15" fill="rgb(228,201,54)" fg:x="49" fg:w="1"/><text x="4.1266%" y="655.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="3.8766%" y="821" width="0.1582%" height="15" fill="rgb(222,22,37)" fg:x="49" fg:w="2"/><text x="4.1266%" y="831.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="3.8766%" y="805" width="0.1582%" height="15" fill="rgb(237,53,32)" fg:x="49" fg:w="2"/><text x="4.1266%" y="815.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="3.8766%" y="789" width="0.1582%" height="15" fill="rgb(233,25,53)" fg:x="49" fg:w="2"/><text x="4.1266%" y="799.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="3.8766%" y="773" width="0.1582%" height="15" fill="rgb(210,40,34)" fg:x="49" fg:w="2"/><text x="4.1266%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="3.8766%" y="757" width="0.1582%" height="15" fill="rgb(241,220,44)" fg:x="49" fg:w="2"/><text x="4.1266%" y="767.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="3.8766%" y="741" width="0.1582%" height="15" fill="rgb(235,28,35)" fg:x="49" fg:w="2"/><text x="4.1266%" y="751.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="3.8766%" y="725" width="0.1582%" height="15" fill="rgb(210,56,17)" fg:x="49" fg:w="2"/><text x="4.1266%" y="735.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="3.9557%" y="709" width="0.0791%" height="15" fill="rgb(224,130,29)" fg:x="50" fg:w="1"/><text x="4.2057%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.9557%" y="693" width="0.0791%" height="15" fill="rgb(235,212,8)" fg:x="50" fg:w="1"/><text x="4.2057%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="3.9557%" y="677" width="0.0791%" height="15" fill="rgb(223,33,50)" fg:x="50" fg:w="1"/><text x="4.2057%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.9557%" y="661" width="0.0791%" height="15" fill="rgb(219,149,13)" fg:x="50" fg:w="1"/><text x="4.2057%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.9557%" y="645" width="0.0791%" height="15" fill="rgb(250,156,29)" fg:x="50" fg:w="1"/><text x="4.2057%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.9557%" y="629" width="0.0791%" height="15" fill="rgb(216,193,19)" fg:x="50" fg:w="1"/><text x="4.2057%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.9557%" y="613" width="0.0791%" height="15" fill="rgb(216,135,14)" fg:x="50" fg:w="1"/><text x="4.2057%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.0348%" y="693" width="0.0791%" height="15" fill="rgb(241,47,5)" fg:x="51" fg:w="1"/><text x="4.2848%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.0348%" y="677" width="0.0791%" height="15" fill="rgb(233,42,35)" fg:x="51" fg:w="1"/><text x="4.2848%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.0348%" y="661" width="0.0791%" height="15" fill="rgb(231,13,6)" fg:x="51" fg:w="1"/><text x="4.2848%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.0348%" y="645" width="0.0791%" height="15" fill="rgb(207,181,40)" fg:x="51" fg:w="1"/><text x="4.2848%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.0348%" y="629" width="0.0791%" height="15" fill="rgb(254,173,49)" fg:x="51" fg:w="1"/><text x="4.2848%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.0348%" y="613" width="0.0791%" height="15" fill="rgb(221,1,38)" fg:x="51" fg:w="1"/><text x="4.2848%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.0348%" y="597" width="0.0791%" height="15" fill="rgb(206,124,46)" fg:x="51" fg:w="1"/><text x="4.2848%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.0348%" y="741" width="0.1582%" height="15" fill="rgb(249,21,11)" fg:x="51" fg:w="2"/><text x="4.2848%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="4.0348%" y="725" width="0.1582%" height="15" fill="rgb(222,201,40)" fg:x="51" fg:w="2"/><text x="4.2848%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="4.0348%" y="709" width="0.1582%" height="15" fill="rgb(235,61,29)" fg:x="51" fg:w="2"/><text x="4.2848%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="4.1139%" y="693" width="0.0791%" height="15" fill="rgb(219,207,3)" fg:x="52" fg:w="1"/><text x="4.3639%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.1139%" y="677" width="0.0791%" height="15" fill="rgb(222,56,46)" fg:x="52" fg:w="1"/><text x="4.3639%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.1139%" y="661" width="0.0791%" height="15" fill="rgb(239,76,54)" fg:x="52" fg:w="1"/><text x="4.3639%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1139%" y="645" width="0.0791%" height="15" fill="rgb(231,124,27)" fg:x="52" fg:w="1"/><text x="4.3639%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1139%" y="629" width="0.0791%" height="15" fill="rgb(249,195,6)" fg:x="52" fg:w="1"/><text x="4.3639%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1139%" y="613" width="0.0791%" height="15" fill="rgb(237,174,47)" fg:x="52" fg:w="1"/><text x="4.3639%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1139%" y="597" width="0.0791%" height="15" fill="rgb(206,201,31)" fg:x="52" fg:w="1"/><text x="4.3639%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1139%" y="581" width="0.0791%" height="15" fill="rgb(231,57,52)" fg:x="52" fg:w="1"/><text x="4.3639%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1139%" y="565" width="0.0791%" height="15" fill="rgb(248,177,22)" fg:x="52" fg:w="1"/><text x="4.3639%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.1139%" y="549" width="0.0791%" height="15" fill="rgb(215,211,37)" fg:x="52" fg:w="1"/><text x="4.3639%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.1139%" y="533" width="0.0791%" height="15" fill="rgb(241,128,51)" fg:x="52" fg:w="1"/><text x="4.3639%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.1139%" y="517" width="0.0791%" height="15" fill="rgb(227,165,31)" fg:x="52" fg:w="1"/><text x="4.3639%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.1139%" y="501" width="0.0791%" height="15" fill="rgb(228,167,24)" fg:x="52" fg:w="1"/><text x="4.3639%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.1139%" y="485" width="0.0791%" height="15" fill="rgb(228,143,12)" fg:x="52" fg:w="1"/><text x="4.3639%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.1139%" y="469" width="0.0791%" height="15" fill="rgb(249,149,8)" fg:x="52" fg:w="1"/><text x="4.3639%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.1139%" y="453" width="0.0791%" height="15" fill="rgb(243,35,44)" fg:x="52" fg:w="1"/><text x="4.3639%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.1139%" y="437" width="0.0791%" height="15" fill="rgb(246,89,9)" fg:x="52" fg:w="1"/><text x="4.3639%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.1139%" y="421" width="0.0791%" height="15" fill="rgb(233,213,13)" fg:x="52" fg:w="1"/><text x="4.3639%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1930%" y="565" width="0.0791%" height="15" fill="rgb(233,141,41)" fg:x="53" fg:w="1"/><text x="4.4430%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1930%" y="549" width="0.0791%" height="15" fill="rgb(239,167,4)" fg:x="53" fg:w="1"/><text x="4.4430%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.1930%" y="533" width="0.0791%" height="15" fill="rgb(209,217,16)" fg:x="53" fg:w="1"/><text x="4.4430%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.1930%" y="517" width="0.0791%" height="15" fill="rgb(219,88,35)" fg:x="53" fg:w="1"/><text x="4.4430%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.1930%" y="501" width="0.0791%" height="15" fill="rgb(220,193,23)" fg:x="53" fg:w="1"/><text x="4.4430%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="4.1930%" y="485" width="0.0791%" height="15" fill="rgb(230,90,52)" fg:x="53" fg:w="1"/><text x="4.4430%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="4.1930%" y="469" width="0.0791%" height="15" fill="rgb(252,106,19)" fg:x="53" fg:w="1"/><text x="4.4430%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="4.0348%" y="805" width="0.3165%" height="15" fill="rgb(206,74,20)" fg:x="51" fg:w="4"/><text x="4.2848%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="4.0348%" y="789" width="0.3165%" height="15" fill="rgb(230,138,44)" fg:x="51" fg:w="4"/><text x="4.2848%" y="799.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="4.0348%" y="773" width="0.3165%" height="15" fill="rgb(235,182,43)" fg:x="51" fg:w="4"/><text x="4.2848%" y="783.50"></text></g><g><title>plugins_core::build::Build::leads_to (4 samples, 0.32%)</title><rect x="4.0348%" y="757" width="0.3165%" height="15" fill="rgb(242,16,51)" fg:x="51" fg:w="4"/><text x="4.2848%" y="767.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="4.1930%" y="741" width="0.1582%" height="15" fill="rgb(248,9,4)" fg:x="53" fg:w="2"/><text x="4.4430%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="4.1930%" y="725" width="0.1582%" height="15" fill="rgb(210,31,22)" fg:x="53" fg:w="2"/><text x="4.4430%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="4.1930%" y="709" width="0.1582%" height="15" fill="rgb(239,54,39)" fg:x="53" fg:w="2"/><text x="4.4430%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="4.1930%" y="693" width="0.1582%" height="15" fill="rgb(230,99,41)" fg:x="53" fg:w="2"/><text x="4.4430%" y="703.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.1930%" y="677" width="0.1582%" height="15" fill="rgb(253,106,12)" fg:x="53" fg:w="2"/><text x="4.4430%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.1930%" y="661" width="0.1582%" height="15" fill="rgb(213,46,41)" fg:x="53" fg:w="2"/><text x="4.4430%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.1930%" y="645" width="0.1582%" height="15" fill="rgb(215,133,35)" fg:x="53" fg:w="2"/><text x="4.4430%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.1930%" y="629" width="0.1582%" height="15" fill="rgb(213,28,5)" fg:x="53" fg:w="2"/><text x="4.4430%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.1930%" y="613" width="0.1582%" height="15" fill="rgb(215,77,49)" fg:x="53" fg:w="2"/><text x="4.4430%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.1930%" y="597" width="0.1582%" height="15" fill="rgb(248,100,22)" fg:x="53" fg:w="2"/><text x="4.4430%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.1930%" y="581" width="0.1582%" height="15" fill="rgb(208,67,9)" fg:x="53" fg:w="2"/><text x="4.4430%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.2722%" y="565" width="0.0791%" height="15" fill="rgb(219,133,21)" fg:x="54" fg:w="1"/><text x="4.5222%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.3513%" y="757" width="0.0791%" height="15" fill="rgb(246,46,29)" fg:x="55" fg:w="1"/><text x="4.6013%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.3513%" y="741" width="0.0791%" height="15" fill="rgb(246,185,52)" fg:x="55" fg:w="1"/><text x="4.6013%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.3513%" y="725" width="0.0791%" height="15" fill="rgb(252,136,11)" fg:x="55" fg:w="1"/><text x="4.6013%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.3513%" y="709" width="0.0791%" height="15" fill="rgb(219,138,53)" fg:x="55" fg:w="1"/><text x="4.6013%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.3513%" y="693" width="0.0791%" height="15" fill="rgb(211,51,23)" fg:x="55" fg:w="1"/><text x="4.6013%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.3513%" y="677" width="0.0791%" height="15" fill="rgb(247,221,28)" fg:x="55" fg:w="1"/><text x="4.6013%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.3513%" y="661" width="0.0791%" height="15" fill="rgb(251,222,45)" fg:x="55" fg:w="1"/><text x="4.6013%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.3513%" y="645" width="0.0791%" height="15" fill="rgb(217,162,53)" fg:x="55" fg:w="1"/><text x="4.6013%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.3513%" y="629" width="0.0791%" height="15" fill="rgb(229,93,14)" fg:x="55" fg:w="1"/><text x="4.6013%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.3513%" y="613" width="0.0791%" height="15" fill="rgb(209,67,49)" fg:x="55" fg:w="1"/><text x="4.6013%" y="623.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.3513%" y="597" width="0.0791%" height="15" fill="rgb(213,87,29)" fg:x="55" fg:w="1"/><text x="4.6013%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.3513%" y="581" width="0.0791%" height="15" fill="rgb(205,151,52)" fg:x="55" fg:w="1"/><text x="4.6013%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="4.3513%" y="773" width="0.1582%" height="15" fill="rgb(253,215,39)" fg:x="55" fg:w="2"/><text x="4.6013%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.4304%" y="757" width="0.0791%" height="15" fill="rgb(221,220,41)" fg:x="56" fg:w="1"/><text x="4.6804%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.4304%" y="741" width="0.0791%" height="15" fill="rgb(218,133,21)" fg:x="56" fg:w="1"/><text x="4.6804%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="4.4304%" y="725" width="0.0791%" height="15" fill="rgb(221,193,43)" fg:x="56" fg:w="1"/><text x="4.6804%" y="735.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.4304%" y="709" width="0.0791%" height="15" fill="rgb(240,128,52)" fg:x="56" fg:w="1"/><text x="4.6804%" y="719.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="4.5095%" y="773" width="0.0791%" height="15" fill="rgb(253,114,12)" fg:x="57" fg:w="1"/><text x="4.7595%" y="783.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.5095%" y="757" width="0.0791%" height="15" fill="rgb(215,223,47)" fg:x="57" fg:w="1"/><text x="4.7595%" y="767.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="4.5095%" y="741" width="0.0791%" height="15" fill="rgb(248,225,23)" fg:x="57" fg:w="1"/><text x="4.7595%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.5095%" y="725" width="0.0791%" height="15" fill="rgb(250,108,0)" fg:x="57" fg:w="1"/><text x="4.7595%" y="735.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="4.5095%" y="709" width="0.0791%" height="15" fill="rgb(228,208,7)" fg:x="57" fg:w="1"/><text x="4.7595%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.5095%" y="693" width="0.0791%" height="15" fill="rgb(244,45,10)" fg:x="57" fg:w="1"/><text x="4.7595%" y="703.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="4.7468%" y="725" width="0.0791%" height="15" fill="rgb(207,125,25)" fg:x="60" fg:w="1"/><text x="4.9968%" y="735.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.7468%" y="709" width="0.0791%" height="15" fill="rgb(210,195,18)" fg:x="60" fg:w="1"/><text x="4.9968%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.7468%" y="693" width="0.0791%" height="15" fill="rgb(249,80,12)" fg:x="60" fg:w="1"/><text x="4.9968%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.7468%" y="677" width="0.0791%" height="15" fill="rgb(221,65,9)" fg:x="60" fg:w="1"/><text x="4.9968%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.7468%" y="661" width="0.0791%" height="15" fill="rgb(235,49,36)" fg:x="60" fg:w="1"/><text x="4.9968%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.7468%" y="645" width="0.0791%" height="15" fill="rgb(225,32,20)" fg:x="60" fg:w="1"/><text x="4.9968%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.7468%" y="629" width="0.0791%" height="15" fill="rgb(215,141,46)" fg:x="60" fg:w="1"/><text x="4.9968%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.7468%" y="613" width="0.0791%" height="15" fill="rgb(250,160,47)" fg:x="60" fg:w="1"/><text x="4.9968%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.9051%" y="709" width="0.0791%" height="15" fill="rgb(216,222,40)" fg:x="62" fg:w="1"/><text x="5.1551%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.9842%" y="661" width="0.0791%" height="15" fill="rgb(234,217,39)" fg:x="63" fg:w="1"/><text x="5.2342%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.0633%" y="645" width="0.0791%" height="15" fill="rgb(207,178,40)" fg:x="64" fg:w="1"/><text x="5.3133%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.0633%" y="629" width="0.0791%" height="15" fill="rgb(221,136,13)" fg:x="64" fg:w="1"/><text x="5.3133%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.0633%" y="613" width="0.0791%" height="15" fill="rgb(249,199,10)" fg:x="64" fg:w="1"/><text x="5.3133%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.0633%" y="597" width="0.0791%" height="15" fill="rgb(249,222,13)" fg:x="64" fg:w="1"/><text x="5.3133%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.1424%" y="629" width="0.0791%" height="15" fill="rgb(244,185,38)" fg:x="65" fg:w="1"/><text x="5.3924%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.1424%" y="613" width="0.0791%" height="15" fill="rgb(236,202,9)" fg:x="65" fg:w="1"/><text x="5.3924%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="4.9842%" y="677" width="0.3165%" height="15" fill="rgb(250,229,37)" fg:x="63" fg:w="4"/><text x="5.2342%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.0633%" y="661" width="0.2373%" height="15" fill="rgb(206,174,23)" fg:x="64" fg:w="3"/><text x="5.3133%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.1424%" y="645" width="0.1582%" height="15" fill="rgb(211,33,43)" fg:x="65" fg:w="2"/><text x="5.3924%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.2215%" y="629" width="0.0791%" height="15" fill="rgb(245,58,50)" fg:x="66" fg:w="1"/><text x="5.4715%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.71%)</title><rect x="4.6677%" y="741" width="0.7120%" height="15" fill="rgb(244,68,36)" fg:x="59" fg:w="9"/><text x="4.9177%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="4.8259%" y="725" width="0.5538%" height="15" fill="rgb(232,229,15)" fg:x="61" fg:w="7"/><text x="5.0759%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="4.9842%" y="709" width="0.3956%" height="15" fill="rgb(254,30,23)" fg:x="63" fg:w="5"/><text x="5.2342%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="4.9842%" y="693" width="0.3956%" height="15" fill="rgb(235,160,14)" fg:x="63" fg:w="5"/><text x="5.2342%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3006%" y="677" width="0.0791%" height="15" fill="rgb(212,155,44)" fg:x="67" fg:w="1"/><text x="5.5506%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.3797%" y="693" width="0.0791%" height="15" fill="rgb(226,2,50)" fg:x="68" fg:w="1"/><text x="5.6297%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4589%" y="677" width="0.0791%" height="15" fill="rgb(234,177,6)" fg:x="69" fg:w="1"/><text x="5.7089%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.6171%" y="645" width="0.0791%" height="15" fill="rgb(217,24,9)" fg:x="71" fg:w="1"/><text x="5.8671%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6171%" y="629" width="0.0791%" height="15" fill="rgb(220,13,46)" fg:x="71" fg:w="1"/><text x="5.8671%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.6171%" y="613" width="0.0791%" height="15" fill="rgb(239,221,27)" fg:x="71" fg:w="1"/><text x="5.8671%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6171%" y="597" width="0.0791%" height="15" fill="rgb(222,198,25)" fg:x="71" fg:w="1"/><text x="5.8671%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6171%" y="581" width="0.0791%" height="15" fill="rgb(211,99,13)" fg:x="71" fg:w="1"/><text x="5.8671%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.6171%" y="565" width="0.0791%" height="15" fill="rgb(232,111,31)" fg:x="71" fg:w="1"/><text x="5.8671%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.6962%" y="629" width="0.1582%" height="15" fill="rgb(245,82,37)" fg:x="72" fg:w="2"/><text x="5.9462%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.7753%" y="613" width="0.0791%" height="15" fill="rgb(227,149,46)" fg:x="73" fg:w="1"/><text x="6.0253%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.7753%" y="597" width="0.0791%" height="15" fill="rgb(218,36,50)" fg:x="73" fg:w="1"/><text x="6.0253%" y="607.50"></text></g><g><title>engine::session::Session::flush (20 samples, 1.58%)</title><rect x="4.3513%" y="805" width="1.5823%" height="15" fill="rgb(226,80,48)" fg:x="55" fg:w="20"/><text x="4.6013%" y="815.50"></text></g><g><title>engine::session::Session::save_entity_changes (20 samples, 1.58%)</title><rect x="4.3513%" y="789" width="1.5823%" height="15" fill="rgb(238,224,15)" fg:x="55" fg:w="20"/><text x="4.6013%" y="799.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (17 samples, 1.34%)</title><rect x="4.5886%" y="773" width="1.3449%" height="15" fill="rgb(241,136,10)" fg:x="58" fg:w="17"/><text x="4.8386%" y="783.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (17 samples, 1.34%)</title><rect x="4.5886%" y="757" width="1.3449%" height="15" fill="rgb(208,32,45)" fg:x="58" fg:w="17"/><text x="4.8386%" y="767.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.55%)</title><rect x="5.3797%" y="741" width="0.5538%" height="15" fill="rgb(207,135,9)" fg:x="68" fg:w="7"/><text x="5.6297%" y="751.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.55%)</title><rect x="5.3797%" y="725" width="0.5538%" height="15" fill="rgb(206,86,44)" fg:x="68" fg:w="7"/><text x="5.6297%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.55%)</title><rect x="5.3797%" y="709" width="0.5538%" height="15" fill="rgb(245,177,15)" fg:x="68" fg:w="7"/><text x="5.6297%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.47%)</title><rect x="5.4589%" y="693" width="0.4747%" height="15" fill="rgb(206,64,50)" fg:x="69" fg:w="6"/><text x="5.7089%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="5.5380%" y="677" width="0.3956%" height="15" fill="rgb(234,36,40)" fg:x="70" fg:w="5"/><text x="5.7880%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="5.5380%" y="661" width="0.3956%" height="15" fill="rgb(213,64,8)" fg:x="70" fg:w="5"/><text x="5.7880%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.6962%" y="645" width="0.2373%" height="15" fill="rgb(210,75,36)" fg:x="72" fg:w="3"/><text x="5.9462%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8544%" y="629" width="0.0791%" height="15" fill="rgb(229,88,21)" fg:x="74" fg:w="1"/><text x="6.1044%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="5.9335%" y="773" width="0.0791%" height="15" fill="rgb(252,204,47)" fg:x="75" fg:w="1"/><text x="6.1835%" y="783.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="5.9335%" y="757" width="0.0791%" height="15" fill="rgb(208,77,27)" fg:x="75" fg:w="1"/><text x="6.1835%" y="767.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="5.9335%" y="741" width="0.0791%" height="15" fill="rgb(221,76,26)" fg:x="75" fg:w="1"/><text x="6.1835%" y="751.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="5.9335%" y="725" width="0.0791%" height="15" fill="rgb(225,139,18)" fg:x="75" fg:w="1"/><text x="6.1835%" y="735.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.9335%" y="709" width="0.0791%" height="15" fill="rgb(230,137,11)" fg:x="75" fg:w="1"/><text x="6.1835%" y="719.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.9335%" y="693" width="0.0791%" height="15" fill="rgb(212,28,1)" fg:x="75" fg:w="1"/><text x="6.1835%" y="703.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="5.9335%" y="677" width="0.0791%" height="15" fill="rgb(248,164,17)" fg:x="75" fg:w="1"/><text x="6.1835%" y="687.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="5.9335%" y="661" width="0.0791%" height="15" fill="rgb(222,171,42)" fg:x="75" fg:w="1"/><text x="6.1835%" y="671.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.9335%" y="645" width="0.0791%" height="15" fill="rgb(243,84,45)" fg:x="75" fg:w="1"/><text x="6.1835%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.9335%" y="629" width="0.0791%" height="15" fill="rgb(252,49,23)" fg:x="75" fg:w="1"/><text x="6.1835%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.9335%" y="613" width="0.0791%" height="15" fill="rgb(215,19,7)" fg:x="75" fg:w="1"/><text x="6.1835%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.9335%" y="597" width="0.0791%" height="15" fill="rgb(238,81,41)" fg:x="75" fg:w="1"/><text x="6.1835%" y="607.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="5.9335%" y="581" width="0.0791%" height="15" fill="rgb(210,199,37)" fg:x="75" fg:w="1"/><text x="6.1835%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="5.9335%" y="565" width="0.0791%" height="15" fill="rgb(244,192,49)" fg:x="75" fg:w="1"/><text x="6.1835%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="5.9335%" y="549" width="0.0791%" height="15" fill="rgb(226,211,11)" fg:x="75" fg:w="1"/><text x="6.1835%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="5.9335%" y="533" width="0.0791%" height="15" fill="rgb(236,162,54)" fg:x="75" fg:w="1"/><text x="6.1835%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="5.9335%" y="517" width="0.0791%" height="15" fill="rgb(220,229,9)" fg:x="75" fg:w="1"/><text x="6.1835%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="5.9335%" y="501" width="0.0791%" height="15" fill="rgb(250,87,22)" fg:x="75" fg:w="1"/><text x="6.1835%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.9335%" y="485" width="0.0791%" height="15" fill="rgb(239,43,17)" fg:x="75" fg:w="1"/><text x="6.1835%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="5.9335%" y="469" width="0.0791%" height="15" fill="rgb(231,177,25)" fg:x="75" fg:w="1"/><text x="6.1835%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.08%)</title><rect x="5.9335%" y="453" width="0.0791%" height="15" fill="rgb(219,179,1)" fg:x="75" fg:w="1"/><text x="6.1835%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.0127%" y="741" width="0.0791%" height="15" fill="rgb(238,219,53)" fg:x="76" fg:w="1"/><text x="6.2627%" y="751.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.0127%" y="725" width="0.0791%" height="15" fill="rgb(232,167,36)" fg:x="76" fg:w="1"/><text x="6.2627%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.0127%" y="709" width="0.0791%" height="15" fill="rgb(244,19,51)" fg:x="76" fg:w="1"/><text x="6.2627%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.0127%" y="693" width="0.0791%" height="15" fill="rgb(224,6,22)" fg:x="76" fg:w="1"/><text x="6.2627%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.0127%" y="677" width="0.0791%" height="15" fill="rgb(224,145,5)" fg:x="76" fg:w="1"/><text x="6.2627%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.0127%" y="661" width="0.0791%" height="15" fill="rgb(234,130,49)" fg:x="76" fg:w="1"/><text x="6.2627%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.0127%" y="645" width="0.0791%" height="15" fill="rgb(254,6,2)" fg:x="76" fg:w="1"/><text x="6.2627%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.0127%" y="629" width="0.0791%" height="15" fill="rgb(208,96,46)" fg:x="76" fg:w="1"/><text x="6.2627%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.0127%" y="613" width="0.0791%" height="15" fill="rgb(239,3,39)" fg:x="76" fg:w="1"/><text x="6.2627%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.0127%" y="597" width="0.0791%" height="15" fill="rgb(233,210,1)" fg:x="76" fg:w="1"/><text x="6.2627%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.0127%" y="581" width="0.0791%" height="15" fill="rgb(244,137,37)" fg:x="76" fg:w="1"/><text x="6.2627%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.0918%" y="709" width="0.0791%" height="15" fill="rgb(240,136,2)" fg:x="77" fg:w="1"/><text x="6.3418%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="5.9335%" y="789" width="0.3165%" height="15" fill="rgb(239,18,37)" fg:x="75" fg:w="4"/><text x="6.1835%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="6.0127%" y="773" width="0.2373%" height="15" fill="rgb(218,185,22)" fg:x="76" fg:w="3"/><text x="6.2627%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="6.0127%" y="757" width="0.2373%" height="15" fill="rgb(225,218,4)" fg:x="76" fg:w="3"/><text x="6.2627%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="6.0918%" y="741" width="0.1582%" height="15" fill="rgb(230,182,32)" fg:x="77" fg:w="2"/><text x="6.3418%" y="751.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="6.0918%" y="725" width="0.1582%" height="15" fill="rgb(242,56,43)" fg:x="77" fg:w="2"/><text x="6.3418%" y="735.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.1709%" y="709" width="0.0791%" height="15" fill="rgb(233,99,24)" fg:x="78" fg:w="1"/><text x="6.4209%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1709%" y="693" width="0.0791%" height="15" fill="rgb(234,209,42)" fg:x="78" fg:w="1"/><text x="6.4209%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.1709%" y="677" width="0.0791%" height="15" fill="rgb(227,7,12)" fg:x="78" fg:w="1"/><text x="6.4209%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1709%" y="661" width="0.0791%" height="15" fill="rgb(245,203,43)" fg:x="78" fg:w="1"/><text x="6.4209%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.1709%" y="645" width="0.0791%" height="15" fill="rgb(238,205,33)" fg:x="78" fg:w="1"/><text x="6.4209%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3291%" y="645" width="0.0791%" height="15" fill="rgb(231,56,7)" fg:x="80" fg:w="1"/><text x="6.5791%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3291%" y="629" width="0.0791%" height="15" fill="rgb(244,186,29)" fg:x="80" fg:w="1"/><text x="6.5791%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3291%" y="613" width="0.0791%" height="15" fill="rgb(234,111,31)" fg:x="80" fg:w="1"/><text x="6.5791%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="6.2500%" y="661" width="0.2373%" height="15" fill="rgb(241,149,10)" fg:x="79" fg:w="3"/><text x="6.5000%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4082%" y="645" width="0.0791%" height="15" fill="rgb(249,206,44)" fg:x="81" fg:w="1"/><text x="6.6582%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (4 samples, 0.32%)</title><rect x="6.2500%" y="773" width="0.3165%" height="15" fill="rgb(251,153,30)" fg:x="79" fg:w="4"/><text x="6.5000%" y="783.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="6.2500%" y="757" width="0.3165%" height="15" fill="rgb(239,152,38)" fg:x="79" fg:w="4"/><text x="6.5000%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="6.2500%" y="741" width="0.3165%" height="15" fill="rgb(249,139,47)" fg:x="79" fg:w="4"/><text x="6.5000%" y="751.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="6.2500%" y="725" width="0.3165%" height="15" fill="rgb(244,64,35)" fg:x="79" fg:w="4"/><text x="6.5000%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="6.2500%" y="709" width="0.3165%" height="15" fill="rgb(216,46,15)" fg:x="79" fg:w="4"/><text x="6.5000%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="6.2500%" y="693" width="0.3165%" height="15" fill="rgb(250,74,19)" fg:x="79" fg:w="4"/><text x="6.5000%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="6.2500%" y="677" width="0.3165%" height="15" fill="rgb(249,42,33)" fg:x="79" fg:w="4"/><text x="6.5000%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4873%" y="661" width="0.0791%" height="15" fill="rgb(242,149,17)" fg:x="82" fg:w="1"/><text x="6.7373%" y="671.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.5665%" y="773" width="0.0791%" height="15" fill="rgb(244,29,21)" fg:x="83" fg:w="1"/><text x="6.8165%" y="783.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5665%" y="757" width="0.0791%" height="15" fill="rgb(220,130,37)" fg:x="83" fg:w="1"/><text x="6.8165%" y="767.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.5665%" y="741" width="0.0791%" height="15" fill="rgb(211,67,2)" fg:x="83" fg:w="1"/><text x="6.8165%" y="751.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5665%" y="725" width="0.0791%" height="15" fill="rgb(235,68,52)" fg:x="83" fg:w="1"/><text x="6.8165%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.5665%" y="709" width="0.0791%" height="15" fill="rgb(246,142,3)" fg:x="83" fg:w="1"/><text x="6.8165%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5665%" y="693" width="0.0791%" height="15" fill="rgb(241,25,7)" fg:x="83" fg:w="1"/><text x="6.8165%" y="703.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5665%" y="677" width="0.0791%" height="15" fill="rgb(242,119,39)" fg:x="83" fg:w="1"/><text x="6.8165%" y="687.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="6.5665%" y="661" width="0.0791%" height="15" fill="rgb(241,98,45)" fg:x="83" fg:w="1"/><text x="6.8165%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.6456%" y="757" width="0.0791%" height="15" fill="rgb(254,28,30)" fg:x="84" fg:w="1"/><text x="6.8956%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.6456%" y="741" width="0.0791%" height="15" fill="rgb(241,142,54)" fg:x="84" fg:w="1"/><text x="6.8956%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.6456%" y="725" width="0.0791%" height="15" fill="rgb(222,85,15)" fg:x="84" fg:w="1"/><text x="6.8956%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.6456%" y="709" width="0.0791%" height="15" fill="rgb(210,85,47)" fg:x="84" fg:w="1"/><text x="6.8956%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.6456%" y="693" width="0.0791%" height="15" fill="rgb(224,206,25)" fg:x="84" fg:w="1"/><text x="6.8956%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.6456%" y="677" width="0.0791%" height="15" fill="rgb(243,201,19)" fg:x="84" fg:w="1"/><text x="6.8956%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6456%" y="661" width="0.0791%" height="15" fill="rgb(236,59,4)" fg:x="84" fg:w="1"/><text x="6.8956%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.6456%" y="645" width="0.0791%" height="15" fill="rgb(254,179,45)" fg:x="84" fg:w="1"/><text x="6.8956%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6456%" y="629" width="0.0791%" height="15" fill="rgb(226,14,10)" fg:x="84" fg:w="1"/><text x="6.8956%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.6456%" y="613" width="0.0791%" height="15" fill="rgb(244,27,41)" fg:x="84" fg:w="1"/><text x="6.8956%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6456%" y="597" width="0.0791%" height="15" fill="rgb(235,35,32)" fg:x="84" fg:w="1"/><text x="6.8956%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.6456%" y="581" width="0.0791%" height="15" fill="rgb(218,68,31)" fg:x="84" fg:w="1"/><text x="6.8956%" y="591.50"></text></g><g><title>plugins_core::build::Build::holding (11 samples, 0.87%)</title><rect x="5.9335%" y="805" width="0.8703%" height="15" fill="rgb(207,120,37)" fg:x="75" fg:w="11"/><text x="6.1835%" y="815.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.55%)</title><rect x="6.2500%" y="789" width="0.5538%" height="15" fill="rgb(227,98,0)" fg:x="79" fg:w="7"/><text x="6.5000%" y="799.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="6.6456%" y="773" width="0.1582%" height="15" fill="rgb(207,7,3)" fg:x="84" fg:w="2"/><text x="6.8956%" y="783.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="6.7247%" y="757" width="0.0791%" height="15" fill="rgb(206,98,19)" fg:x="85" fg:w="1"/><text x="6.9747%" y="767.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.7247%" y="741" width="0.0791%" height="15" fill="rgb(217,5,26)" fg:x="85" fg:w="1"/><text x="6.9747%" y="751.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="6.8038%" y="805" width="0.0791%" height="15" fill="rgb(235,190,38)" fg:x="86" fg:w="1"/><text x="7.0538%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.8038%" y="789" width="0.0791%" height="15" fill="rgb(247,86,24)" fg:x="86" fg:w="1"/><text x="7.0538%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.8038%" y="773" width="0.0791%" height="15" fill="rgb(205,101,16)" fg:x="86" fg:w="1"/><text x="7.0538%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.8038%" y="757" width="0.0791%" height="15" fill="rgb(246,168,33)" fg:x="86" fg:w="1"/><text x="7.0538%" y="767.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.8829%" y="693" width="0.0791%" height="15" fill="rgb(231,114,1)" fg:x="87" fg:w="1"/><text x="7.1329%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.8829%" y="677" width="0.0791%" height="15" fill="rgb(207,184,53)" fg:x="87" fg:w="1"/><text x="7.1329%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.8829%" y="661" width="0.0791%" height="15" fill="rgb(224,95,51)" fg:x="87" fg:w="1"/><text x="7.1329%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.8829%" y="645" width="0.0791%" height="15" fill="rgb(212,188,45)" fg:x="87" fg:w="1"/><text x="7.1329%" y="655.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.8829%" y="725" width="0.1582%" height="15" fill="rgb(223,154,38)" fg:x="87" fg:w="2"/><text x="7.1329%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.8829%" y="709" width="0.1582%" height="15" fill="rgb(251,22,52)" fg:x="87" fg:w="2"/><text x="7.1329%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.9620%" y="693" width="0.0791%" height="15" fill="rgb(229,209,22)" fg:x="88" fg:w="1"/><text x="7.2120%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9620%" y="677" width="0.0791%" height="15" fill="rgb(234,138,34)" fg:x="88" fg:w="1"/><text x="7.2120%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.9620%" y="661" width="0.0791%" height="15" fill="rgb(212,95,11)" fg:x="88" fg:w="1"/><text x="7.2120%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9620%" y="645" width="0.0791%" height="15" fill="rgb(240,179,47)" fg:x="88" fg:w="1"/><text x="7.2120%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.9620%" y="629" width="0.0791%" height="15" fill="rgb(240,163,11)" fg:x="88" fg:w="1"/><text x="7.2120%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9620%" y="613" width="0.0791%" height="15" fill="rgb(236,37,12)" fg:x="88" fg:w="1"/><text x="7.2120%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.9620%" y="597" width="0.0791%" height="15" fill="rgb(232,164,16)" fg:x="88" fg:w="1"/><text x="7.2120%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9620%" y="581" width="0.0791%" height="15" fill="rgb(244,205,15)" fg:x="88" fg:w="1"/><text x="7.2120%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.9620%" y="565" width="0.0791%" height="15" fill="rgb(223,117,47)" fg:x="88" fg:w="1"/><text x="7.2120%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.1203%" y="677" width="0.0791%" height="15" fill="rgb(244,107,35)" fg:x="90" fg:w="1"/><text x="7.3703%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.1203%" y="661" width="0.0791%" height="15" fill="rgb(205,140,8)" fg:x="90" fg:w="1"/><text x="7.3703%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.1203%" y="645" width="0.0791%" height="15" fill="rgb(228,84,46)" fg:x="90" fg:w="1"/><text x="7.3703%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="6.8829%" y="789" width="0.3956%" height="15" fill="rgb(254,188,9)" fg:x="87" fg:w="5"/><text x="7.1329%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="6.8829%" y="773" width="0.3956%" height="15" fill="rgb(206,112,54)" fg:x="87" fg:w="5"/><text x="7.1329%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (5 samples, 0.40%)</title><rect x="6.8829%" y="757" width="0.3956%" height="15" fill="rgb(216,84,49)" fg:x="87" fg:w="5"/><text x="7.1329%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (5 samples, 0.40%)</title><rect x="6.8829%" y="741" width="0.3956%" height="15" fill="rgb(214,194,35)" fg:x="87" fg:w="5"/><text x="7.1329%" y="751.50"></text></g><g><title>kernel::model::props::save_props (3 samples, 0.24%)</title><rect x="7.0411%" y="725" width="0.2373%" height="15" fill="rgb(249,28,3)" fg:x="89" fg:w="3"/><text x="7.2911%" y="735.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="7.1203%" y="709" width="0.1582%" height="15" fill="rgb(222,56,52)" fg:x="90" fg:w="2"/><text x="7.3703%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="7.1203%" y="693" width="0.1582%" height="15" fill="rgb(245,217,50)" fg:x="90" fg:w="2"/><text x="7.3703%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.1994%" y="677" width="0.0791%" height="15" fill="rgb(213,201,24)" fg:x="91" fg:w="1"/><text x="7.4494%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.1994%" y="661" width="0.0791%" height="15" fill="rgb(248,116,28)" fg:x="91" fg:w="1"/><text x="7.4494%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.1994%" y="645" width="0.0791%" height="15" fill="rgb(219,72,43)" fg:x="91" fg:w="1"/><text x="7.4494%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.1994%" y="629" width="0.0791%" height="15" fill="rgb(209,138,14)" fg:x="91" fg:w="1"/><text x="7.4494%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.1994%" y="613" width="0.0791%" height="15" fill="rgb(222,18,33)" fg:x="91" fg:w="1"/><text x="7.4494%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="7.1994%" y="597" width="0.0791%" height="15" fill="rgb(213,199,7)" fg:x="91" fg:w="1"/><text x="7.4494%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="7.1994%" y="581" width="0.0791%" height="15" fill="rgb(250,110,10)" fg:x="91" fg:w="1"/><text x="7.4494%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.2785%" y="773" width="0.0791%" height="15" fill="rgb(248,123,6)" fg:x="92" fg:w="1"/><text x="7.5285%" y="783.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="7.2785%" y="757" width="0.0791%" height="15" fill="rgb(206,91,31)" fg:x="92" fg:w="1"/><text x="7.5285%" y="767.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.2785%" y="741" width="0.0791%" height="15" fill="rgb(211,154,13)" fg:x="92" fg:w="1"/><text x="7.5285%" y="751.50"></text></g><g><title>plugins_core::build::Build::occupying (7 samples, 0.55%)</title><rect x="6.8829%" y="805" width="0.5538%" height="15" fill="rgb(225,148,7)" fg:x="87" fg:w="7"/><text x="7.1329%" y="815.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="7.2785%" y="789" width="0.1582%" height="15" fill="rgb(220,160,43)" fg:x="92" fg:w="2"/><text x="7.5285%" y="799.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="7.3576%" y="773" width="0.0791%" height="15" fill="rgb(213,52,39)" fg:x="93" fg:w="1"/><text x="7.6076%" y="783.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="7.3576%" y="757" width="0.0791%" height="15" fill="rgb(243,137,7)" fg:x="93" fg:w="1"/><text x="7.6076%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="7.3576%" y="741" width="0.0791%" height="15" fill="rgb(230,79,13)" fg:x="93" fg:w="1"/><text x="7.6076%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.3576%" y="725" width="0.0791%" height="15" fill="rgb(247,105,23)" fg:x="93" fg:w="1"/><text x="7.6076%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.3576%" y="709" width="0.0791%" height="15" fill="rgb(223,179,41)" fg:x="93" fg:w="1"/><text x="7.6076%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.3576%" y="693" width="0.0791%" height="15" fill="rgb(218,9,34)" fg:x="93" fg:w="1"/><text x="7.6076%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.3576%" y="677" width="0.0791%" height="15" fill="rgb(222,106,8)" fg:x="93" fg:w="1"/><text x="7.6076%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3576%" y="661" width="0.0791%" height="15" fill="rgb(211,220,0)" fg:x="93" fg:w="1"/><text x="7.6076%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.3576%" y="645" width="0.0791%" height="15" fill="rgb(229,52,16)" fg:x="93" fg:w="1"/><text x="7.6076%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3576%" y="629" width="0.0791%" height="15" fill="rgb(212,155,18)" fg:x="93" fg:w="1"/><text x="7.6076%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.4367%" y="741" width="0.0791%" height="15" fill="rgb(242,21,14)" fg:x="94" fg:w="1"/><text x="7.6867%" y="751.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.4367%" y="725" width="0.0791%" height="15" fill="rgb(222,19,48)" fg:x="94" fg:w="1"/><text x="7.6867%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.4367%" y="709" width="0.0791%" height="15" fill="rgb(232,45,27)" fg:x="94" fg:w="1"/><text x="7.6867%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.4367%" y="693" width="0.0791%" height="15" fill="rgb(249,103,42)" fg:x="94" fg:w="1"/><text x="7.6867%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.4367%" y="677" width="0.0791%" height="15" fill="rgb(246,81,33)" fg:x="94" fg:w="1"/><text x="7.6867%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.4367%" y="661" width="0.0791%" height="15" fill="rgb(252,33,42)" fg:x="94" fg:w="1"/><text x="7.6867%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.4367%" y="645" width="0.0791%" height="15" fill="rgb(209,212,41)" fg:x="94" fg:w="1"/><text x="7.6867%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.4367%" y="629" width="0.0791%" height="15" fill="rgb(207,154,6)" fg:x="94" fg:w="1"/><text x="7.6867%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.4367%" y="613" width="0.0791%" height="15" fill="rgb(223,64,47)" fg:x="94" fg:w="1"/><text x="7.6867%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.4367%" y="597" width="0.0791%" height="15" fill="rgb(211,161,38)" fg:x="94" fg:w="1"/><text x="7.6867%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.4367%" y="581" width="0.0791%" height="15" fill="rgb(219,138,40)" fg:x="94" fg:w="1"/><text x="7.6867%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.4367%" y="565" width="0.0791%" height="15" fill="rgb(241,228,46)" fg:x="94" fg:w="1"/><text x="7.6867%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.4367%" y="549" width="0.0791%" height="15" fill="rgb(223,209,38)" fg:x="94" fg:w="1"/><text x="7.6867%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.4367%" y="533" width="0.0791%" height="15" fill="rgb(236,164,45)" fg:x="94" fg:w="1"/><text x="7.6867%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.4367%" y="517" width="0.0791%" height="15" fill="rgb(231,15,5)" fg:x="94" fg:w="1"/><text x="7.6867%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.4367%" y="501" width="0.0791%" height="15" fill="rgb(252,35,15)" fg:x="94" fg:w="1"/><text x="7.6867%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.4367%" y="485" width="0.0791%" height="15" fill="rgb(248,181,18)" fg:x="94" fg:w="1"/><text x="7.6867%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.4367%" y="469" width="0.0791%" height="15" fill="rgb(233,39,42)" fg:x="94" fg:w="1"/><text x="7.6867%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.4367%" y="453" width="0.0791%" height="15" fill="rgb(238,110,33)" fg:x="94" fg:w="1"/><text x="7.6867%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.4367%" y="437" width="0.0791%" height="15" fill="rgb(233,195,10)" fg:x="94" fg:w="1"/><text x="7.6867%" y="447.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (45 samples, 3.56%)</title><rect x="4.0348%" y="821" width="3.5601%" height="15" fill="rgb(254,105,3)" fg:x="51" fg:w="45"/><text x="4.2848%" y="831.50">plug..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="7.4367%" y="805" width="0.1582%" height="15" fill="rgb(221,225,9)" fg:x="94" fg:w="2"/><text x="7.6867%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="7.4367%" y="789" width="0.1582%" height="15" fill="rgb(224,227,45)" fg:x="94" fg:w="2"/><text x="7.6867%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="7.4367%" y="773" width="0.1582%" height="15" fill="rgb(229,198,43)" fg:x="94" fg:w="2"/><text x="7.6867%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="7.4367%" y="757" width="0.1582%" height="15" fill="rgb(206,209,35)" fg:x="94" fg:w="2"/><text x="7.6867%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.5158%" y="741" width="0.0791%" height="15" fill="rgb(245,195,53)" fg:x="95" fg:w="1"/><text x="7.7658%" y="751.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.5158%" y="725" width="0.0791%" height="15" fill="rgb(240,92,26)" fg:x="95" fg:w="1"/><text x="7.7658%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="7.5158%" y="709" width="0.0791%" height="15" fill="rgb(207,40,23)" fg:x="95" fg:w="1"/><text x="7.7658%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.5158%" y="693" width="0.0791%" height="15" fill="rgb(223,111,35)" fg:x="95" fg:w="1"/><text x="7.7658%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.5949%" y="741" width="0.0791%" height="15" fill="rgb(229,147,28)" fg:x="96" fg:w="1"/><text x="7.8449%" y="751.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.5949%" y="725" width="0.0791%" height="15" fill="rgb(211,29,28)" fg:x="96" fg:w="1"/><text x="7.8449%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.5949%" y="709" width="0.0791%" height="15" fill="rgb(228,72,33)" fg:x="96" fg:w="1"/><text x="7.8449%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.5949%" y="693" width="0.0791%" height="15" fill="rgb(205,214,31)" fg:x="96" fg:w="1"/><text x="7.8449%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5949%" y="677" width="0.0791%" height="15" fill="rgb(224,111,15)" fg:x="96" fg:w="1"/><text x="7.8449%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="7.5949%" y="757" width="0.1582%" height="15" fill="rgb(253,21,26)" fg:x="96" fg:w="2"/><text x="7.8449%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.6741%" y="741" width="0.0791%" height="15" fill="rgb(245,139,43)" fg:x="97" fg:w="1"/><text x="7.9241%" y="751.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.6741%" y="725" width="0.0791%" height="15" fill="rgb(252,170,7)" fg:x="97" fg:w="1"/><text x="7.9241%" y="735.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.6741%" y="709" width="0.0791%" height="15" fill="rgb(231,118,14)" fg:x="97" fg:w="1"/><text x="7.9241%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.6741%" y="693" width="0.0791%" height="15" fill="rgb(238,83,0)" fg:x="97" fg:w="1"/><text x="7.9241%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.6741%" y="677" width="0.0791%" height="15" fill="rgb(221,39,39)" fg:x="97" fg:w="1"/><text x="7.9241%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.6741%" y="661" width="0.0791%" height="15" fill="rgb(222,119,46)" fg:x="97" fg:w="1"/><text x="7.9241%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.6741%" y="645" width="0.0791%" height="15" fill="rgb(222,165,49)" fg:x="97" fg:w="1"/><text x="7.9241%" y="655.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (78 samples, 6.17%)</title><rect x="1.6614%" y="837" width="6.1709%" height="15" fill="rgb(219,113,52)" fg:x="21" fg:w="78"/><text x="1.9114%" y="847.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="7.5949%" y="821" width="0.2373%" height="15" fill="rgb(214,7,15)" fg:x="96" fg:w="3"/><text x="7.8449%" y="831.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="7.5949%" y="805" width="0.2373%" height="15" fill="rgb(235,32,4)" fg:x="96" fg:w="3"/><text x="7.8449%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="7.5949%" y="789" width="0.2373%" height="15" fill="rgb(238,90,54)" fg:x="96" fg:w="3"/><text x="7.8449%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="7.5949%" y="773" width="0.2373%" height="15" fill="rgb(213,208,19)" fg:x="96" fg:w="3"/><text x="7.8449%" y="783.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7532%" y="757" width="0.0791%" height="15" fill="rgb(233,156,4)" fg:x="98" fg:w="1"/><text x="8.0032%" y="767.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.8323%" y="837" width="0.0791%" height="15" fill="rgb(207,194,5)" fg:x="99" fg:w="1"/><text x="8.0823%" y="847.50"></text></g><g><title>engine::identifiers::model::get_gid (2 samples, 0.16%)</title><rect x="7.9114%" y="805" width="0.1582%" height="15" fill="rgb(206,111,30)" fg:x="100" fg:w="2"/><text x="8.1614%" y="815.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="7.9114%" y="789" width="0.1582%" height="15" fill="rgb(243,70,54)" fg:x="100" fg:w="2"/><text x="8.1614%" y="799.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.9114%" y="773" width="0.1582%" height="15" fill="rgb(242,28,8)" fg:x="100" fg:w="2"/><text x="8.1614%" y="783.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.9905%" y="757" width="0.0791%" height="15" fill="rgb(219,106,18)" fg:x="101" fg:w="1"/><text x="8.2405%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.9905%" y="741" width="0.0791%" height="15" fill="rgb(244,222,10)" fg:x="101" fg:w="1"/><text x="8.2405%" y="751.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="7.9905%" y="725" width="0.0791%" height="15" fill="rgb(236,179,52)" fg:x="101" fg:w="1"/><text x="8.2405%" y="735.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="7.9905%" y="709" width="0.0791%" height="15" fill="rgb(213,23,39)" fg:x="101" fg:w="1"/><text x="8.2405%" y="719.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="8.0696%" y="757" width="0.0791%" height="15" fill="rgb(238,48,10)" fg:x="102" fg:w="1"/><text x="8.3196%" y="767.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.0696%" y="741" width="0.0791%" height="15" fill="rgb(251,196,23)" fg:x="102" fg:w="1"/><text x="8.3196%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0696%" y="725" width="0.0791%" height="15" fill="rgb(250,152,24)" fg:x="102" fg:w="1"/><text x="8.3196%" y="735.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.1487%" y="741" width="0.1582%" height="15" fill="rgb(209,150,17)" fg:x="103" fg:w="2"/><text x="8.3987%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.2278%" y="725" width="0.0791%" height="15" fill="rgb(234,202,34)" fg:x="104" fg:w="1"/><text x="8.4778%" y="735.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.3070%" y="725" width="0.0791%" height="15" fill="rgb(253,148,53)" fg:x="105" fg:w="1"/><text x="8.5570%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3070%" y="709" width="0.0791%" height="15" fill="rgb(218,129,16)" fg:x="105" fg:w="1"/><text x="8.5570%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.4652%" y="709" width="0.1582%" height="15" fill="rgb(216,85,19)" fg:x="107" fg:w="2"/><text x="8.7152%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.5443%" y="693" width="0.0791%" height="15" fill="rgb(235,228,7)" fg:x="108" fg:w="1"/><text x="8.7943%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.5443%" y="677" width="0.0791%" height="15" fill="rgb(245,175,0)" fg:x="108" fg:w="1"/><text x="8.7943%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.6234%" y="677" width="0.0791%" height="15" fill="rgb(208,168,36)" fg:x="109" fg:w="1"/><text x="8.8734%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.6234%" y="661" width="0.0791%" height="15" fill="rgb(246,171,24)" fg:x="109" fg:w="1"/><text x="8.8734%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.7025%" y="677" width="0.0791%" height="15" fill="rgb(215,142,24)" fg:x="110" fg:w="1"/><text x="8.9525%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.7025%" y="661" width="0.0791%" height="15" fill="rgb(250,187,7)" fg:x="110" fg:w="1"/><text x="8.9525%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.7025%" y="645" width="0.0791%" height="15" fill="rgb(228,66,33)" fg:x="110" fg:w="1"/><text x="8.9525%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.6234%" y="709" width="0.2373%" height="15" fill="rgb(234,215,21)" fg:x="109" fg:w="3"/><text x="8.8734%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.6234%" y="693" width="0.2373%" height="15" fill="rgb(222,191,20)" fg:x="109" fg:w="3"/><text x="8.8734%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.7816%" y="677" width="0.0791%" height="15" fill="rgb(245,79,54)" fg:x="111" fg:w="1"/><text x="9.0316%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.7816%" y="661" width="0.0791%" height="15" fill="rgb(240,10,37)" fg:x="111" fg:w="1"/><text x="9.0316%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="8.3861%" y="725" width="0.5538%" height="15" fill="rgb(214,192,32)" fg:x="106" fg:w="7"/><text x="8.6361%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.8608%" y="709" width="0.0791%" height="15" fill="rgb(209,36,54)" fg:x="112" fg:w="1"/><text x="9.1108%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.8608%" y="693" width="0.0791%" height="15" fill="rgb(220,10,11)" fg:x="112" fg:w="1"/><text x="9.1108%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.8608%" y="677" width="0.0791%" height="15" fill="rgb(221,106,17)" fg:x="112" fg:w="1"/><text x="9.1108%" y="687.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.95%)</title><rect x="8.0696%" y="773" width="0.9494%" height="15" fill="rgb(251,142,44)" fg:x="102" fg:w="12"/><text x="8.3196%" y="783.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.87%)</title><rect x="8.1487%" y="757" width="0.8703%" height="15" fill="rgb(238,13,15)" fg:x="103" fg:w="11"/><text x="8.3987%" y="767.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.71%)</title><rect x="8.3070%" y="741" width="0.7120%" height="15" fill="rgb(208,107,27)" fg:x="105" fg:w="9"/><text x="8.5570%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.9399%" y="725" width="0.0791%" height="15" fill="rgb(205,136,37)" fg:x="113" fg:w="1"/><text x="9.1899%" y="735.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.9399%" y="709" width="0.0791%" height="15" fill="rgb(250,205,27)" fg:x="113" fg:w="1"/><text x="9.1899%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.9399%" y="693" width="0.0791%" height="15" fill="rgb(210,80,43)" fg:x="113" fg:w="1"/><text x="9.1899%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="9.0190%" y="725" width="0.1582%" height="15" fill="rgb(247,160,36)" fg:x="114" fg:w="2"/><text x="9.2690%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0981%" y="709" width="0.0791%" height="15" fill="rgb(234,13,49)" fg:x="115" fg:w="1"/><text x="9.3481%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.2563%" y="709" width="0.0791%" height="15" fill="rgb(234,122,0)" fg:x="117" fg:w="1"/><text x="9.5063%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.4937%" y="677" width="0.0791%" height="15" fill="rgb(207,146,38)" fg:x="120" fg:w="1"/><text x="9.7437%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.5728%" y="677" width="0.0791%" height="15" fill="rgb(207,177,25)" fg:x="121" fg:w="1"/><text x="9.8228%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.5728%" y="661" width="0.0791%" height="15" fill="rgb(211,178,42)" fg:x="121" fg:w="1"/><text x="9.8228%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.71%)</title><rect x="9.0190%" y="773" width="0.7120%" height="15" fill="rgb(230,69,54)" fg:x="114" fg:w="9"/><text x="9.2690%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.71%)</title><rect x="9.0190%" y="757" width="0.7120%" height="15" fill="rgb(214,135,41)" fg:x="114" fg:w="9"/><text x="9.2690%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.71%)</title><rect x="9.0190%" y="741" width="0.7120%" height="15" fill="rgb(237,67,25)" fg:x="114" fg:w="9"/><text x="9.2690%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.55%)</title><rect x="9.1772%" y="725" width="0.5538%" height="15" fill="rgb(222,189,50)" fg:x="116" fg:w="7"/><text x="9.4272%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="9.3354%" y="709" width="0.3956%" height="15" fill="rgb(245,148,34)" fg:x="118" fg:w="5"/><text x="9.5854%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="9.4146%" y="693" width="0.3165%" height="15" fill="rgb(222,29,6)" fg:x="119" fg:w="4"/><text x="9.6646%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.6519%" y="677" width="0.0791%" height="15" fill="rgb(221,189,43)" fg:x="122" fg:w="1"/><text x="9.9019%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.6519%" y="661" width="0.0791%" height="15" fill="rgb(207,36,27)" fg:x="122" fg:w="1"/><text x="9.9019%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.6519%" y="645" width="0.0791%" height="15" fill="rgb(217,90,24)" fg:x="122" fg:w="1"/><text x="9.9019%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.7310%" y="709" width="0.0791%" height="15" fill="rgb(224,66,35)" fg:x="123" fg:w="1"/><text x="9.9810%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8101%" y="693" width="0.0791%" height="15" fill="rgb(221,13,50)" fg:x="124" fg:w="1"/><text x="10.0601%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="9.8892%" y="677" width="0.1582%" height="15" fill="rgb(236,68,49)" fg:x="125" fg:w="2"/><text x="10.1392%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.9684%" y="661" width="0.0791%" height="15" fill="rgb(229,146,28)" fg:x="126" fg:w="1"/><text x="10.2184%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.0475%" y="661" width="0.0791%" height="15" fill="rgb(225,31,38)" fg:x="127" fg:w="1"/><text x="10.2975%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="9.7310%" y="741" width="0.4747%" height="15" fill="rgb(250,208,3)" fg:x="123" fg:w="6"/><text x="9.9810%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.47%)</title><rect x="9.7310%" y="725" width="0.4747%" height="15" fill="rgb(246,54,23)" fg:x="123" fg:w="6"/><text x="9.9810%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="9.8101%" y="709" width="0.3956%" height="15" fill="rgb(243,76,11)" fg:x="124" fg:w="5"/><text x="10.0601%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="9.8892%" y="693" width="0.3165%" height="15" fill="rgb(245,21,50)" fg:x="125" fg:w="4"/><text x="10.1392%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.0475%" y="677" width="0.1582%" height="15" fill="rgb(228,9,43)" fg:x="127" fg:w="2"/><text x="10.2975%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.1266%" y="661" width="0.0791%" height="15" fill="rgb(208,100,47)" fg:x="128" fg:w="1"/><text x="10.3766%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.1266%" y="645" width="0.0791%" height="15" fill="rgb(232,26,8)" fg:x="128" fg:w="1"/><text x="10.3766%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.1266%" y="629" width="0.0791%" height="15" fill="rgb(216,166,38)" fg:x="128" fg:w="1"/><text x="10.3766%" y="639.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.55%)</title><rect x="9.7310%" y="757" width="0.5538%" height="15" fill="rgb(251,202,51)" fg:x="123" fg:w="7"/><text x="9.9810%" y="767.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="10.2057%" y="741" width="0.0791%" height="15" fill="rgb(254,216,34)" fg:x="129" fg:w="1"/><text x="10.4557%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.2057%" y="725" width="0.0791%" height="15" fill="rgb(251,32,27)" fg:x="129" fg:w="1"/><text x="10.4557%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.2057%" y="709" width="0.0791%" height="15" fill="rgb(208,127,28)" fg:x="129" fg:w="1"/><text x="10.4557%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.2057%" y="693" width="0.0791%" height="15" fill="rgb(224,137,22)" fg:x="129" fg:w="1"/><text x="10.4557%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.2057%" y="677" width="0.0791%" height="15" fill="rgb(254,70,32)" fg:x="129" fg:w="1"/><text x="10.4557%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.2057%" y="661" width="0.0791%" height="15" fill="rgb(229,75,37)" fg:x="129" fg:w="1"/><text x="10.4557%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.2057%" y="645" width="0.0791%" height="15" fill="rgb(252,64,23)" fg:x="129" fg:w="1"/><text x="10.4557%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5222%" y="725" width="0.0791%" height="15" fill="rgb(232,162,48)" fg:x="133" fg:w="1"/><text x="10.7722%" y="735.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6013%" y="725" width="0.0791%" height="15" fill="rgb(246,160,12)" fg:x="134" fg:w="1"/><text x="10.8513%" y="735.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="10.6804%" y="725" width="0.0791%" height="15" fill="rgb(247,166,0)" fg:x="135" fg:w="1"/><text x="10.9304%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="10.6804%" y="709" width="0.0791%" height="15" fill="rgb(249,219,21)" fg:x="135" fg:w="1"/><text x="10.9304%" y="719.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="10.7595%" y="725" width="0.1582%" height="15" fill="rgb(205,209,3)" fg:x="136" fg:w="2"/><text x="11.0095%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="10.7595%" y="709" width="0.1582%" height="15" fill="rgb(243,44,1)" fg:x="136" fg:w="2"/><text x="11.0095%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.7595%" y="693" width="0.1582%" height="15" fill="rgb(206,159,16)" fg:x="136" fg:w="2"/><text x="11.0095%" y="703.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8386%" y="677" width="0.0791%" height="15" fill="rgb(244,77,30)" fg:x="137" fg:w="1"/><text x="11.0886%" y="687.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="10.8386%" y="661" width="0.0791%" height="15" fill="rgb(218,69,12)" fg:x="137" fg:w="1"/><text x="11.0886%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9968%" y="709" width="0.0791%" height="15" fill="rgb(212,87,7)" fg:x="139" fg:w="1"/><text x="11.2468%" y="719.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9968%" y="693" width="0.0791%" height="15" fill="rgb(245,114,25)" fg:x="139" fg:w="1"/><text x="11.2468%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1551%" y="677" width="0.0791%" height="15" fill="rgb(210,61,42)" fg:x="141" fg:w="1"/><text x="11.4051%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1551%" y="661" width="0.0791%" height="15" fill="rgb(211,52,33)" fg:x="141" fg:w="1"/><text x="11.4051%" y="671.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="11.1551%" y="645" width="0.0791%" height="15" fill="rgb(234,58,33)" fg:x="141" fg:w="1"/><text x="11.4051%" y="655.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="11.1551%" y="629" width="0.0791%" height="15" fill="rgb(220,115,36)" fg:x="141" fg:w="1"/><text x="11.4051%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3133%" y="613" width="0.0791%" height="15" fill="rgb(243,153,54)" fg:x="143" fg:w="1"/><text x="11.5633%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3133%" y="597" width="0.0791%" height="15" fill="rgb(251,47,18)" fg:x="143" fg:w="1"/><text x="11.5633%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3133%" y="581" width="0.0791%" height="15" fill="rgb(242,102,42)" fg:x="143" fg:w="1"/><text x="11.5633%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.3924%" y="597" width="0.0791%" height="15" fill="rgb(234,31,38)" fg:x="144" fg:w="1"/><text x="11.6424%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4715%" y="581" width="0.0791%" height="15" fill="rgb(221,117,51)" fg:x="145" fg:w="1"/><text x="11.7215%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="11.3133%" y="629" width="0.3165%" height="15" fill="rgb(212,20,18)" fg:x="143" fg:w="4"/><text x="11.5633%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="11.3924%" y="613" width="0.2373%" height="15" fill="rgb(245,133,36)" fg:x="144" fg:w="3"/><text x="11.6424%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="11.4715%" y="597" width="0.1582%" height="15" fill="rgb(212,6,19)" fg:x="145" fg:w="2"/><text x="11.7215%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="11.5506%" y="581" width="0.0791%" height="15" fill="rgb(218,1,36)" fg:x="146" fg:w="1"/><text x="11.8006%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.55%)</title><rect x="11.1551%" y="693" width="0.5538%" height="15" fill="rgb(246,84,54)" fg:x="141" fg:w="7"/><text x="11.4051%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="11.2342%" y="677" width="0.4747%" height="15" fill="rgb(242,110,6)" fg:x="142" fg:w="6"/><text x="11.4842%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="11.3133%" y="661" width="0.3956%" height="15" fill="rgb(214,47,5)" fg:x="143" fg:w="5"/><text x="11.5633%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="11.3133%" y="645" width="0.3956%" height="15" fill="rgb(218,159,25)" fg:x="143" fg:w="5"/><text x="11.5633%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6297%" y="629" width="0.0791%" height="15" fill="rgb(215,211,28)" fg:x="147" fg:w="1"/><text x="11.8797%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (19 samples, 1.50%)</title><rect x="10.2848%" y="757" width="1.5032%" height="15" fill="rgb(238,59,32)" fg:x="130" fg:w="19"/><text x="10.5348%" y="767.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (19 samples, 1.50%)</title><rect x="10.2848%" y="741" width="1.5032%" height="15" fill="rgb(226,82,3)" fg:x="130" fg:w="19"/><text x="10.5348%" y="751.50"></text></g><g><title>serde::ser::Serializer::collect_map (11 samples, 0.87%)</title><rect x="10.9177%" y="725" width="0.8703%" height="15" fill="rgb(240,164,32)" fg:x="138" fg:w="11"/><text x="11.1677%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.71%)</title><rect x="11.0759%" y="709" width="0.7120%" height="15" fill="rgb(232,46,7)" fg:x="140" fg:w="9"/><text x="11.3259%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.7089%" y="693" width="0.0791%" height="15" fill="rgb(229,129,53)" fg:x="148" fg:w="1"/><text x="11.9589%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.8671%" y="613" width="0.0791%" height="15" fill="rgb(234,188,29)" fg:x="150" fg:w="1"/><text x="12.1171%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.8671%" y="597" width="0.0791%" height="15" fill="rgb(246,141,4)" fg:x="150" fg:w="1"/><text x="12.1171%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.8671%" y="581" width="0.0791%" height="15" fill="rgb(229,23,39)" fg:x="150" fg:w="1"/><text x="12.1171%" y="591.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="11.8671%" y="565" width="0.0791%" height="15" fill="rgb(206,12,3)" fg:x="150" fg:w="1"/><text x="12.1171%" y="575.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="11.8671%" y="549" width="0.0791%" height="15" fill="rgb(252,226,20)" fg:x="150" fg:w="1"/><text x="12.1171%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="12.0253%" y="581" width="0.0791%" height="15" fill="rgb(216,123,35)" fg:x="152" fg:w="1"/><text x="12.2753%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.1044%" y="517" width="0.1582%" height="15" fill="rgb(212,68,40)" fg:x="153" fg:w="2"/><text x="12.3544%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.1044%" y="501" width="0.1582%" height="15" fill="rgb(254,125,32)" fg:x="153" fg:w="2"/><text x="12.3544%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.1044%" y="485" width="0.1582%" height="15" fill="rgb(253,97,22)" fg:x="153" fg:w="2"/><text x="12.3544%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1835%" y="469" width="0.0791%" height="15" fill="rgb(241,101,14)" fg:x="154" fg:w="1"/><text x="12.4335%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="12.1044%" y="533" width="0.2373%" height="15" fill="rgb(238,103,29)" fg:x="153" fg:w="3"/><text x="12.3544%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.2627%" y="517" width="0.0791%" height="15" fill="rgb(233,195,47)" fg:x="155" fg:w="1"/><text x="12.5127%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="12.0253%" y="597" width="0.3956%" height="15" fill="rgb(246,218,30)" fg:x="152" fg:w="5"/><text x="12.2753%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="12.1044%" y="581" width="0.3165%" height="15" fill="rgb(219,145,47)" fg:x="153" fg:w="4"/><text x="12.3544%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="12.1044%" y="565" width="0.3165%" height="15" fill="rgb(243,12,26)" fg:x="153" fg:w="4"/><text x="12.3544%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="12.1044%" y="549" width="0.3165%" height="15" fill="rgb(214,87,16)" fg:x="153" fg:w="4"/><text x="12.3544%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3418%" y="533" width="0.0791%" height="15" fill="rgb(208,99,42)" fg:x="156" fg:w="1"/><text x="12.5918%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3418%" y="517" width="0.0791%" height="15" fill="rgb(253,99,2)" fg:x="156" fg:w="1"/><text x="12.5918%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="12.3418%" y="501" width="0.0791%" height="15" fill="rgb(220,168,23)" fg:x="156" fg:w="1"/><text x="12.5918%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="12.4209%" y="597" width="0.1582%" height="15" fill="rgb(242,38,24)" fg:x="157" fg:w="2"/><text x="12.6709%" y="607.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="12.4209%" y="581" width="0.1582%" height="15" fill="rgb(225,182,9)" fg:x="157" fg:w="2"/><text x="12.6709%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.95%)</title><rect x="11.8671%" y="661" width="0.9494%" height="15" fill="rgb(243,178,37)" fg:x="150" fg:w="12"/><text x="12.1171%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.95%)</title><rect x="11.8671%" y="645" width="0.9494%" height="15" fill="rgb(232,139,19)" fg:x="150" fg:w="12"/><text x="12.1171%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.95%)</title><rect x="11.8671%" y="629" width="0.9494%" height="15" fill="rgb(225,201,24)" fg:x="150" fg:w="12"/><text x="12.1171%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.87%)</title><rect x="11.9462%" y="613" width="0.8703%" height="15" fill="rgb(221,47,46)" fg:x="151" fg:w="11"/><text x="12.1962%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="12.5791%" y="597" width="0.2373%" height="15" fill="rgb(249,23,13)" fg:x="159" fg:w="3"/><text x="12.8291%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.6582%" y="581" width="0.1582%" height="15" fill="rgb(219,9,5)" fg:x="160" fg:w="2"/><text x="12.9082%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="12.6582%" y="565" width="0.1582%" height="15" fill="rgb(254,171,16)" fg:x="160" fg:w="2"/><text x="12.9082%" y="575.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (61 samples, 4.83%)</title><rect x="8.0696%" y="805" width="4.8259%" height="15" fill="rgb(230,171,20)" fg:x="102" fg:w="61"/><text x="8.3196%" y="815.50">engine..</text></g><g><title>engine::session::SavesEntities::check_for_changes (61 samples, 4.83%)</title><rect x="8.0696%" y="789" width="4.8259%" height="15" fill="rgb(210,71,41)" fg:x="102" fg:w="61"/><text x="8.3196%" y="799.50">engine..</text></g><g><title>kernel::model::any_entity_changes (40 samples, 3.16%)</title><rect x="9.7310%" y="773" width="3.1646%" height="15" fill="rgb(206,173,20)" fg:x="123" fg:w="40"/><text x="9.9810%" y="783.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (14 samples, 1.11%)</title><rect x="11.7880%" y="757" width="1.1076%" height="15" fill="rgb(233,88,34)" fg:x="149" fg:w="14"/><text x="12.0380%" y="767.50"></text></g><g><title>serde_json::de::from_trait (14 samples, 1.11%)</title><rect x="11.7880%" y="741" width="1.1076%" height="15" fill="rgb(223,209,46)" fg:x="149" fg:w="14"/><text x="12.0380%" y="751.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.11%)</title><rect x="11.7880%" y="725" width="1.1076%" height="15" fill="rgb(250,43,18)" fg:x="149" fg:w="14"/><text x="12.0380%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.11%)</title><rect x="11.7880%" y="709" width="1.1076%" height="15" fill="rgb(208,13,10)" fg:x="149" fg:w="14"/><text x="12.0380%" y="719.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.11%)</title><rect x="11.7880%" y="693" width="1.1076%" height="15" fill="rgb(212,200,36)" fg:x="149" fg:w="14"/><text x="12.0380%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.11%)</title><rect x="11.7880%" y="677" width="1.1076%" height="15" fill="rgb(225,90,30)" fg:x="149" fg:w="14"/><text x="12.0380%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8165%" y="661" width="0.0791%" height="15" fill="rgb(236,182,39)" fg:x="162" fg:w="1"/><text x="13.0665%" y="671.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="12.8956%" y="805" width="0.0791%" height="15" fill="rgb(212,144,35)" fg:x="163" fg:w="1"/><text x="13.1456%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="12.8956%" y="789" width="0.0791%" height="15" fill="rgb(228,63,44)" fg:x="163" fg:w="1"/><text x="13.1456%" y="799.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="12.8956%" y="773" width="0.0791%" height="15" fill="rgb(228,109,6)" fg:x="163" fg:w="1"/><text x="13.1456%" y="783.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="12.8956%" y="757" width="0.0791%" height="15" fill="rgb(238,117,24)" fg:x="163" fg:w="1"/><text x="13.1456%" y="767.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="12.8956%" y="741" width="0.0791%" height="15" fill="rgb(242,26,26)" fg:x="163" fg:w="1"/><text x="13.1456%" y="751.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="12.8956%" y="725" width="0.0791%" height="15" fill="rgb(221,92,48)" fg:x="163" fg:w="1"/><text x="13.1456%" y="735.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="12.8956%" y="709" width="0.0791%" height="15" fill="rgb(209,209,32)" fg:x="163" fg:w="1"/><text x="13.1456%" y="719.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="12.8956%" y="693" width="0.0791%" height="15" fill="rgb(221,70,22)" fg:x="163" fg:w="1"/><text x="13.1456%" y="703.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="12.8956%" y="677" width="0.0791%" height="15" fill="rgb(248,145,5)" fg:x="163" fg:w="1"/><text x="13.1456%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="12.8956%" y="661" width="0.0791%" height="15" fill="rgb(226,116,26)" fg:x="163" fg:w="1"/><text x="13.1456%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="12.8956%" y="645" width="0.0791%" height="15" fill="rgb(244,5,17)" fg:x="163" fg:w="1"/><text x="13.1456%" y="655.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.8956%" y="629" width="0.0791%" height="15" fill="rgb(252,159,33)" fg:x="163" fg:w="1"/><text x="13.1456%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.8956%" y="613" width="0.0791%" height="15" fill="rgb(206,71,0)" fg:x="163" fg:w="1"/><text x="13.1456%" y="623.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="12.8956%" y="597" width="0.0791%" height="15" fill="rgb(233,118,54)" fg:x="163" fg:w="1"/><text x="13.1456%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="12.8956%" y="581" width="0.0791%" height="15" fill="rgb(234,83,48)" fg:x="163" fg:w="1"/><text x="13.1456%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="12.8956%" y="565" width="0.0791%" height="15" fill="rgb(228,3,54)" fg:x="163" fg:w="1"/><text x="13.1456%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="12.8956%" y="549" width="0.0791%" height="15" fill="rgb(226,155,13)" fg:x="163" fg:w="1"/><text x="13.1456%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="12.8956%" y="533" width="0.0791%" height="15" fill="rgb(241,28,37)" fg:x="163" fg:w="1"/><text x="13.1456%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="12.8956%" y="517" width="0.0791%" height="15" fill="rgb(233,93,10)" fg:x="163" fg:w="1"/><text x="13.1456%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.8956%" y="501" width="0.0791%" height="15" fill="rgb(225,113,19)" fg:x="163" fg:w="1"/><text x="13.1456%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="12.8956%" y="485" width="0.0791%" height="15" fill="rgb(241,2,18)" fg:x="163" fg:w="1"/><text x="13.1456%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.8956%" y="469" width="0.0791%" height="15" fill="rgb(228,207,21)" fg:x="163" fg:w="1"/><text x="13.1456%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="12.8956%" y="453" width="0.0791%" height="15" fill="rgb(213,211,35)" fg:x="163" fg:w="1"/><text x="13.1456%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="12.8956%" y="437" width="0.0791%" height="15" fill="rgb(209,83,10)" fg:x="163" fg:w="1"/><text x="13.1456%" y="447.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="12.8956%" y="421" width="0.0791%" height="15" fill="rgb(209,164,1)" fg:x="163" fg:w="1"/><text x="13.1456%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.8956%" y="405" width="0.0791%" height="15" fill="rgb(213,184,43)" fg:x="163" fg:w="1"/><text x="13.1456%" y="415.50"></text></g><g><title>engine::session::Session::close (66 samples, 5.22%)</title><rect x="7.9114%" y="837" width="5.2215%" height="15" fill="rgb(231,61,34)" fg:x="100" fg:w="66"/><text x="8.1614%" y="847.50">engine..</text></g><g><title>engine::session::Session::save_entity_changes (66 samples, 5.22%)</title><rect x="7.9114%" y="821" width="5.2215%" height="15" fill="rgb(235,75,3)" fg:x="100" fg:w="66"/><text x="8.1614%" y="831.50">engine..</text></g><g><title>std::env::_var (2 samples, 0.16%)</title><rect x="12.9747%" y="805" width="0.1582%" height="15" fill="rgb(220,106,47)" fg:x="164" fg:w="2"/><text x="13.2247%" y="815.50"></text></g><g><title>std::env::var_os (2 samples, 0.16%)</title><rect x="12.9747%" y="789" width="0.1582%" height="15" fill="rgb(210,196,33)" fg:x="164" fg:w="2"/><text x="13.2247%" y="799.50"></text></g><g><title>std::env::_var_os (2 samples, 0.16%)</title><rect x="12.9747%" y="773" width="0.1582%" height="15" fill="rgb(229,154,42)" fg:x="164" fg:w="2"/><text x="13.2247%" y="783.50"></text></g><g><title>std::sys::unix::os::getenv (2 samples, 0.16%)</title><rect x="12.9747%" y="757" width="0.1582%" height="15" fill="rgb(228,114,26)" fg:x="164" fg:w="2"/><text x="13.2247%" y="767.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="12.9747%" y="741" width="0.1582%" height="15" fill="rgb(208,144,1)" fg:x="164" fg:w="2"/><text x="13.2247%" y="751.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (2 samples, 0.16%)</title><rect x="12.9747%" y="725" width="0.1582%" height="15" fill="rgb(239,112,37)" fg:x="164" fg:w="2"/><text x="13.2247%" y="735.50"></text></g><g><title>getenv (2 samples, 0.16%)</title><rect x="12.9747%" y="709" width="0.1582%" height="15" fill="rgb(210,96,50)" fg:x="164" fg:w="2"/><text x="13.2247%" y="719.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="13.2120%" y="709" width="0.0791%" height="15" fill="rgb(222,178,2)" fg:x="167" fg:w="1"/><text x="13.4620%" y="719.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="13.2120%" y="693" width="0.0791%" height="15" fill="rgb(226,74,18)" fg:x="167" fg:w="1"/><text x="13.4620%" y="703.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="13.2911%" y="693" width="0.0791%" height="15" fill="rgb(225,67,54)" fg:x="168" fg:w="1"/><text x="13.5411%" y="703.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="13.2911%" y="677" width="0.0791%" height="15" fill="rgb(251,92,32)" fg:x="168" fg:w="1"/><text x="13.5411%" y="687.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="13.2911%" y="661" width="0.0791%" height="15" fill="rgb(228,149,22)" fg:x="168" fg:w="1"/><text x="13.5411%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.5285%" y="645" width="0.0791%" height="15" fill="rgb(243,54,13)" fg:x="171" fg:w="1"/><text x="13.7785%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.5285%" y="629" width="0.0791%" height="15" fill="rgb(243,180,28)" fg:x="171" fg:w="1"/><text x="13.7785%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.6867%" y="629" width="0.0791%" height="15" fill="rgb(208,167,24)" fg:x="173" fg:w="1"/><text x="13.9367%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="13.7658%" y="629" width="0.1582%" height="15" fill="rgb(245,73,45)" fg:x="174" fg:w="2"/><text x="14.0158%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="13.7658%" y="613" width="0.1582%" height="15" fill="rgb(237,203,48)" fg:x="174" fg:w="2"/><text x="14.0158%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.47%)</title><rect x="13.5285%" y="661" width="0.4747%" height="15" fill="rgb(211,197,16)" fg:x="171" fg:w="6"/><text x="13.7785%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="13.6076%" y="645" width="0.3956%" height="15" fill="rgb(243,99,51)" fg:x="172" fg:w="5"/><text x="13.8576%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.9241%" y="629" width="0.0791%" height="15" fill="rgb(215,123,29)" fg:x="176" fg:w="1"/><text x="14.1741%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.9241%" y="613" width="0.0791%" height="15" fill="rgb(239,186,37)" fg:x="176" fg:w="1"/><text x="14.1741%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.9241%" y="597" width="0.0791%" height="15" fill="rgb(252,136,39)" fg:x="176" fg:w="1"/><text x="14.1741%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.9241%" y="581" width="0.0791%" height="15" fill="rgb(223,213,32)" fg:x="176" fg:w="1"/><text x="14.1741%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.0823%" y="613" width="0.1582%" height="15" fill="rgb(233,115,5)" fg:x="178" fg:w="2"/><text x="14.3323%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.0823%" y="597" width="0.1582%" height="15" fill="rgb(207,226,44)" fg:x="178" fg:w="2"/><text x="14.3323%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.1614%" y="581" width="0.0791%" height="15" fill="rgb(208,126,0)" fg:x="179" fg:w="1"/><text x="14.4114%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.1614%" y="565" width="0.0791%" height="15" fill="rgb(244,66,21)" fg:x="179" fg:w="1"/><text x="14.4114%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.1614%" y="549" width="0.0791%" height="15" fill="rgb(222,97,12)" fg:x="179" fg:w="1"/><text x="14.4114%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.1614%" y="533" width="0.0791%" height="15" fill="rgb(219,213,19)" fg:x="179" fg:w="1"/><text x="14.4114%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.1614%" y="517" width="0.0791%" height="15" fill="rgb(252,169,30)" fg:x="179" fg:w="1"/><text x="14.4114%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.1614%" y="501" width="0.0791%" height="15" fill="rgb(206,32,51)" fg:x="179" fg:w="1"/><text x="14.4114%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.1614%" y="485" width="0.0791%" height="15" fill="rgb(250,172,42)" fg:x="179" fg:w="1"/><text x="14.4114%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.1614%" y="469" width="0.0791%" height="15" fill="rgb(209,34,43)" fg:x="179" fg:w="1"/><text x="14.4114%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.1614%" y="453" width="0.0791%" height="15" fill="rgb(223,11,35)" fg:x="179" fg:w="1"/><text x="14.4114%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.1614%" y="437" width="0.0791%" height="15" fill="rgb(251,219,26)" fg:x="179" fg:w="1"/><text x="14.4114%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.1614%" y="421" width="0.0791%" height="15" fill="rgb(231,119,3)" fg:x="179" fg:w="1"/><text x="14.4114%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.1614%" y="405" width="0.0791%" height="15" fill="rgb(216,97,11)" fg:x="179" fg:w="1"/><text x="14.4114%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.1614%" y="389" width="0.0791%" height="15" fill="rgb(223,59,9)" fg:x="179" fg:w="1"/><text x="14.4114%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="14.0032%" y="629" width="0.3165%" height="15" fill="rgb(233,93,31)" fg:x="177" fg:w="4"/><text x="14.2532%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.2405%" y="613" width="0.0791%" height="15" fill="rgb(239,81,33)" fg:x="180" fg:w="1"/><text x="14.4905%" y="623.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (5 samples, 0.40%)</title><rect x="14.0032%" y="661" width="0.3956%" height="15" fill="rgb(213,120,34)" fg:x="177" fg:w="5"/><text x="14.2532%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (5 samples, 0.40%)</title><rect x="14.0032%" y="645" width="0.3956%" height="15" fill="rgb(243,49,53)" fg:x="177" fg:w="5"/><text x="14.2532%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.3196%" y="629" width="0.0791%" height="15" fill="rgb(247,216,33)" fg:x="181" fg:w="1"/><text x="14.5696%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.3196%" y="613" width="0.0791%" height="15" fill="rgb(226,26,14)" fg:x="181" fg:w="1"/><text x="14.5696%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.3196%" y="597" width="0.0791%" height="15" fill="rgb(215,49,53)" fg:x="181" fg:w="1"/><text x="14.5696%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.3196%" y="581" width="0.0791%" height="15" fill="rgb(245,162,40)" fg:x="181" fg:w="1"/><text x="14.5696%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.3196%" y="565" width="0.0791%" height="15" fill="rgb(229,68,17)" fg:x="181" fg:w="1"/><text x="14.5696%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.3196%" y="549" width="0.0791%" height="15" fill="rgb(213,182,10)" fg:x="181" fg:w="1"/><text x="14.5696%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.3196%" y="533" width="0.0791%" height="15" fill="rgb(245,125,30)" fg:x="181" fg:w="1"/><text x="14.5696%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.3196%" y="517" width="0.0791%" height="15" fill="rgb(232,202,2)" fg:x="181" fg:w="1"/><text x="14.5696%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.3196%" y="501" width="0.0791%" height="15" fill="rgb(237,140,51)" fg:x="181" fg:w="1"/><text x="14.5696%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.3196%" y="485" width="0.0791%" height="15" fill="rgb(236,157,25)" fg:x="181" fg:w="1"/><text x="14.5696%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.3196%" y="469" width="0.0791%" height="15" fill="rgb(219,209,0)" fg:x="181" fg:w="1"/><text x="14.5696%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.3196%" y="453" width="0.0791%" height="15" fill="rgb(240,116,54)" fg:x="181" fg:w="1"/><text x="14.5696%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.3987%" y="645" width="0.0791%" height="15" fill="rgb(216,10,36)" fg:x="182" fg:w="1"/><text x="14.6487%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.3987%" y="629" width="0.0791%" height="15" fill="rgb(222,72,44)" fg:x="182" fg:w="1"/><text x="14.6487%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.3987%" y="613" width="0.0791%" height="15" fill="rgb(232,159,9)" fg:x="182" fg:w="1"/><text x="14.6487%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.3987%" y="597" width="0.0791%" height="15" fill="rgb(210,39,32)" fg:x="182" fg:w="1"/><text x="14.6487%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.3987%" y="581" width="0.0791%" height="15" fill="rgb(216,194,45)" fg:x="182" fg:w="1"/><text x="14.6487%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.3987%" y="565" width="0.0791%" height="15" fill="rgb(218,18,35)" fg:x="182" fg:w="1"/><text x="14.6487%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.3987%" y="549" width="0.0791%" height="15" fill="rgb(207,83,51)" fg:x="182" fg:w="1"/><text x="14.6487%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.3987%" y="533" width="0.0791%" height="15" fill="rgb(225,63,43)" fg:x="182" fg:w="1"/><text x="14.6487%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.3987%" y="517" width="0.0791%" height="15" fill="rgb(207,57,36)" fg:x="182" fg:w="1"/><text x="14.6487%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.3987%" y="501" width="0.0791%" height="15" fill="rgb(216,99,33)" fg:x="182" fg:w="1"/><text x="14.6487%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.3987%" y="485" width="0.0791%" height="15" fill="rgb(225,42,16)" fg:x="182" fg:w="1"/><text x="14.6487%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.4778%" y="549" width="0.0791%" height="15" fill="rgb(220,201,45)" fg:x="183" fg:w="1"/><text x="14.7278%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="14.4778%" y="533" width="0.0791%" height="15" fill="rgb(225,33,4)" fg:x="183" fg:w="1"/><text x="14.7278%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="14.4778%" y="517" width="0.0791%" height="15" fill="rgb(224,33,50)" fg:x="183" fg:w="1"/><text x="14.7278%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.4778%" y="501" width="0.0791%" height="15" fill="rgb(246,198,51)" fg:x="183" fg:w="1"/><text x="14.7278%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.4778%" y="485" width="0.0791%" height="15" fill="rgb(205,22,4)" fg:x="183" fg:w="1"/><text x="14.7278%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.4778%" y="469" width="0.0791%" height="15" fill="rgb(206,3,8)" fg:x="183" fg:w="1"/><text x="14.7278%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.4778%" y="453" width="0.0791%" height="15" fill="rgb(251,23,15)" fg:x="183" fg:w="1"/><text x="14.7278%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="14.4778%" y="597" width="0.1582%" height="15" fill="rgb(252,88,28)" fg:x="183" fg:w="2"/><text x="14.7278%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="14.4778%" y="581" width="0.1582%" height="15" fill="rgb(212,127,14)" fg:x="183" fg:w="2"/><text x="14.7278%" y="591.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="14.4778%" y="565" width="0.1582%" height="15" fill="rgb(247,145,37)" fg:x="183" fg:w="2"/><text x="14.7278%" y="575.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="14.5570%" y="549" width="0.0791%" height="15" fill="rgb(209,117,53)" fg:x="184" fg:w="1"/><text x="14.8070%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.5570%" y="533" width="0.0791%" height="15" fill="rgb(212,90,42)" fg:x="184" fg:w="1"/><text x="14.8070%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5570%" y="517" width="0.0791%" height="15" fill="rgb(218,164,37)" fg:x="184" fg:w="1"/><text x="14.8070%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.5570%" y="501" width="0.0791%" height="15" fill="rgb(246,65,34)" fg:x="184" fg:w="1"/><text x="14.8070%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5570%" y="485" width="0.0791%" height="15" fill="rgb(231,100,33)" fg:x="184" fg:w="1"/><text x="14.8070%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.5570%" y="469" width="0.0791%" height="15" fill="rgb(228,126,14)" fg:x="184" fg:w="1"/><text x="14.8070%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5570%" y="453" width="0.0791%" height="15" fill="rgb(215,173,21)" fg:x="184" fg:w="1"/><text x="14.8070%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.5570%" y="437" width="0.0791%" height="15" fill="rgb(210,6,40)" fg:x="184" fg:w="1"/><text x="14.8070%" y="447.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.6361%" y="597" width="0.0791%" height="15" fill="rgb(212,48,18)" fg:x="185" fg:w="1"/><text x="14.8861%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.6361%" y="581" width="0.0791%" height="15" fill="rgb(230,214,11)" fg:x="185" fg:w="1"/><text x="14.8861%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.6361%" y="565" width="0.0791%" height="15" fill="rgb(254,105,39)" fg:x="185" fg:w="1"/><text x="14.8861%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.6361%" y="549" width="0.0791%" height="15" fill="rgb(245,158,5)" fg:x="185" fg:w="1"/><text x="14.8861%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.6361%" y="533" width="0.0791%" height="15" fill="rgb(249,208,11)" fg:x="185" fg:w="1"/><text x="14.8861%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.6361%" y="517" width="0.0791%" height="15" fill="rgb(210,39,28)" fg:x="185" fg:w="1"/><text x="14.8861%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.6361%" y="501" width="0.0791%" height="15" fill="rgb(211,56,53)" fg:x="185" fg:w="1"/><text x="14.8861%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.6361%" y="485" width="0.0791%" height="15" fill="rgb(226,201,30)" fg:x="185" fg:w="1"/><text x="14.8861%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.6361%" y="469" width="0.0791%" height="15" fill="rgb(239,101,34)" fg:x="185" fg:w="1"/><text x="14.8861%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.6361%" y="453" width="0.0791%" height="15" fill="rgb(226,209,5)" fg:x="185" fg:w="1"/><text x="14.8861%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.6361%" y="437" width="0.0791%" height="15" fill="rgb(250,105,47)" fg:x="185" fg:w="1"/><text x="14.8861%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.6361%" y="421" width="0.0791%" height="15" fill="rgb(230,72,3)" fg:x="185" fg:w="1"/><text x="14.8861%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.6361%" y="405" width="0.0791%" height="15" fill="rgb(232,218,39)" fg:x="185" fg:w="1"/><text x="14.8861%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.6361%" y="389" width="0.0791%" height="15" fill="rgb(248,166,6)" fg:x="185" fg:w="1"/><text x="14.8861%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.6361%" y="373" width="0.0791%" height="15" fill="rgb(247,89,20)" fg:x="185" fg:w="1"/><text x="14.8861%" y="383.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (5 samples, 0.40%)</title><rect x="14.3987%" y="661" width="0.3956%" height="15" fill="rgb(248,130,54)" fg:x="182" fg:w="5"/><text x="14.6487%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.32%)</title><rect x="14.4778%" y="645" width="0.3165%" height="15" fill="rgb(234,196,4)" fg:x="183" fg:w="4"/><text x="14.7278%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="14.4778%" y="629" width="0.3165%" height="15" fill="rgb(250,143,31)" fg:x="183" fg:w="4"/><text x="14.7278%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="14.4778%" y="613" width="0.3165%" height="15" fill="rgb(211,110,34)" fg:x="183" fg:w="4"/><text x="14.7278%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="14.7152%" y="597" width="0.0791%" height="15" fill="rgb(215,124,48)" fg:x="186" fg:w="1"/><text x="14.9652%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.7152%" y="581" width="0.0791%" height="15" fill="rgb(216,46,13)" fg:x="186" fg:w="1"/><text x="14.9652%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.8734%" y="549" width="0.0791%" height="15" fill="rgb(205,184,25)" fg:x="188" fg:w="1"/><text x="15.1234%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="14.8734%" y="565" width="0.1582%" height="15" fill="rgb(228,1,10)" fg:x="188" fg:w="2"/><text x="15.1234%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.9525%" y="549" width="0.0791%" height="15" fill="rgb(213,116,27)" fg:x="189" fg:w="1"/><text x="15.2025%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (5 samples, 0.40%)</title><rect x="14.7943%" y="629" width="0.3956%" height="15" fill="rgb(241,95,50)" fg:x="187" fg:w="5"/><text x="15.0443%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="14.7943%" y="613" width="0.3956%" height="15" fill="rgb(238,48,32)" fg:x="187" fg:w="5"/><text x="15.0443%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="14.8734%" y="597" width="0.3165%" height="15" fill="rgb(235,113,49)" fg:x="188" fg:w="4"/><text x="15.1234%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="14.8734%" y="581" width="0.3165%" height="15" fill="rgb(205,127,43)" fg:x="188" fg:w="4"/><text x="15.1234%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (2 samples, 0.16%)</title><rect x="15.0316%" y="565" width="0.1582%" height="15" fill="rgb(250,162,2)" fg:x="190" fg:w="2"/><text x="15.2816%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="15.0316%" y="549" width="0.1582%" height="15" fill="rgb(220,13,41)" fg:x="190" fg:w="2"/><text x="15.2816%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.1108%" y="533" width="0.0791%" height="15" fill="rgb(249,221,25)" fg:x="191" fg:w="1"/><text x="15.3608%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="15.2690%" y="597" width="0.0791%" height="15" fill="rgb(215,208,19)" fg:x="193" fg:w="1"/><text x="15.5190%" y="607.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="15.2690%" y="581" width="0.0791%" height="15" fill="rgb(236,175,2)" fg:x="193" fg:w="1"/><text x="15.5190%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.2690%" y="565" width="0.0791%" height="15" fill="rgb(241,52,2)" fg:x="193" fg:w="1"/><text x="15.5190%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="15.3481%" y="597" width="0.0791%" height="15" fill="rgb(248,140,14)" fg:x="194" fg:w="1"/><text x="15.5981%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="15.3481%" y="581" width="0.0791%" height="15" fill="rgb(253,22,42)" fg:x="194" fg:w="1"/><text x="15.5981%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="15.4272%" y="533" width="0.0791%" height="15" fill="rgb(234,61,47)" fg:x="195" fg:w="1"/><text x="15.6772%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="15.5063%" y="469" width="0.0791%" height="15" fill="rgb(208,226,15)" fg:x="196" fg:w="1"/><text x="15.7563%" y="479.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="15.5063%" y="453" width="0.0791%" height="15" fill="rgb(217,221,4)" fg:x="196" fg:w="1"/><text x="15.7563%" y="463.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="15.6646%" y="325" width="0.0791%" height="15" fill="rgb(212,174,34)" fg:x="198" fg:w="1"/><text x="15.9146%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="15.6646%" y="309" width="0.0791%" height="15" fill="rgb(253,83,4)" fg:x="198" fg:w="1"/><text x="15.9146%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.6646%" y="293" width="0.0791%" height="15" fill="rgb(250,195,49)" fg:x="198" fg:w="1"/><text x="15.9146%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.6646%" y="277" width="0.0791%" height="15" fill="rgb(241,192,25)" fg:x="198" fg:w="1"/><text x="15.9146%" y="287.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="15.6646%" y="261" width="0.0791%" height="15" fill="rgb(208,124,10)" fg:x="198" fg:w="1"/><text x="15.9146%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="15.5063%" y="517" width="0.3165%" height="15" fill="rgb(222,33,0)" fg:x="196" fg:w="4"/><text x="15.7563%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (4 samples, 0.32%)</title><rect x="15.5063%" y="501" width="0.3165%" height="15" fill="rgb(234,209,28)" fg:x="196" fg:w="4"/><text x="15.7563%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (4 samples, 0.32%)</title><rect x="15.5063%" y="485" width="0.3165%" height="15" fill="rgb(224,11,23)" fg:x="196" fg:w="4"/><text x="15.7563%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="15.5854%" y="469" width="0.2373%" height="15" fill="rgb(232,99,1)" fg:x="197" fg:w="3"/><text x="15.8354%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="15.5854%" y="453" width="0.2373%" height="15" fill="rgb(237,95,45)" fg:x="197" fg:w="3"/><text x="15.8354%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="15.5854%" y="437" width="0.2373%" height="15" fill="rgb(208,109,11)" fg:x="197" fg:w="3"/><text x="15.8354%" y="447.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="15.5854%" y="421" width="0.2373%" height="15" fill="rgb(216,190,48)" fg:x="197" fg:w="3"/><text x="15.8354%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="15.6646%" y="405" width="0.1582%" height="15" fill="rgb(251,171,36)" fg:x="198" fg:w="2"/><text x="15.9146%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="15.6646%" y="389" width="0.1582%" height="15" fill="rgb(230,62,22)" fg:x="198" fg:w="2"/><text x="15.9146%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="15.6646%" y="373" width="0.1582%" height="15" fill="rgb(225,114,35)" fg:x="198" fg:w="2"/><text x="15.9146%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="15.6646%" y="357" width="0.1582%" height="15" fill="rgb(215,118,42)" fg:x="198" fg:w="2"/><text x="15.9146%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="15.6646%" y="341" width="0.1582%" height="15" fill="rgb(243,119,21)" fg:x="198" fg:w="2"/><text x="15.9146%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.7437%" y="325" width="0.0791%" height="15" fill="rgb(252,177,53)" fg:x="199" fg:w="1"/><text x="15.9937%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.7437%" y="309" width="0.0791%" height="15" fill="rgb(237,209,29)" fg:x="199" fg:w="1"/><text x="15.9937%" y="319.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="15.7437%" y="293" width="0.0791%" height="15" fill="rgb(212,65,23)" fg:x="199" fg:w="1"/><text x="15.9937%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="15.7437%" y="277" width="0.0791%" height="15" fill="rgb(230,222,46)" fg:x="199" fg:w="1"/><text x="15.9937%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="15.7437%" y="261" width="0.0791%" height="15" fill="rgb(215,135,32)" fg:x="199" fg:w="1"/><text x="15.9937%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="15.7437%" y="245" width="0.0791%" height="15" fill="rgb(246,101,22)" fg:x="199" fg:w="1"/><text x="15.9937%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="15.7437%" y="229" width="0.0791%" height="15" fill="rgb(206,107,13)" fg:x="199" fg:w="1"/><text x="15.9937%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="15.7437%" y="213" width="0.0791%" height="15" fill="rgb(250,100,44)" fg:x="199" fg:w="1"/><text x="15.9937%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.7437%" y="197" width="0.0791%" height="15" fill="rgb(231,147,38)" fg:x="199" fg:w="1"/><text x="15.9937%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="15.7437%" y="181" width="0.0791%" height="15" fill="rgb(229,8,40)" fg:x="199" fg:w="1"/><text x="15.9937%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.7437%" y="165" width="0.0791%" height="15" fill="rgb(221,135,30)" fg:x="199" fg:w="1"/><text x="15.9937%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="15.7437%" y="149" width="0.0791%" height="15" fill="rgb(249,193,18)" fg:x="199" fg:w="1"/><text x="15.9937%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="15.7437%" y="133" width="0.0791%" height="15" fill="rgb(209,133,39)" fg:x="199" fg:w="1"/><text x="15.9937%" y="143.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="15.7437%" y="117" width="0.0791%" height="15" fill="rgb(232,100,14)" fg:x="199" fg:w="1"/><text x="15.9937%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.7437%" y="101" width="0.0791%" height="15" fill="rgb(224,185,1)" fg:x="199" fg:w="1"/><text x="15.9937%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="15.9019%" y="501" width="0.0791%" height="15" fill="rgb(223,139,8)" fg:x="201" fg:w="1"/><text x="16.1519%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="15.9019%" y="485" width="0.0791%" height="15" fill="rgb(232,213,38)" fg:x="201" fg:w="1"/><text x="16.1519%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="15.9810%" y="469" width="0.0791%" height="15" fill="rgb(207,94,22)" fg:x="202" fg:w="1"/><text x="16.2310%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="16.0601%" y="389" width="0.0791%" height="15" fill="rgb(219,183,54)" fg:x="203" fg:w="1"/><text x="16.3101%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.0601%" y="373" width="0.0791%" height="15" fill="rgb(216,185,54)" fg:x="203" fg:w="1"/><text x="16.3101%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="16.0601%" y="357" width="0.0791%" height="15" fill="rgb(254,217,39)" fg:x="203" fg:w="1"/><text x="16.3101%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.0601%" y="341" width="0.0791%" height="15" fill="rgb(240,178,23)" fg:x="203" fg:w="1"/><text x="16.3101%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="16.0601%" y="325" width="0.0791%" height="15" fill="rgb(218,11,47)" fg:x="203" fg:w="1"/><text x="16.3101%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.0601%" y="309" width="0.0791%" height="15" fill="rgb(218,51,51)" fg:x="203" fg:w="1"/><text x="16.3101%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="16.0601%" y="293" width="0.0791%" height="15" fill="rgb(238,126,27)" fg:x="203" fg:w="1"/><text x="16.3101%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.0601%" y="277" width="0.0791%" height="15" fill="rgb(249,202,22)" fg:x="203" fg:w="1"/><text x="16.3101%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.0601%" y="261" width="0.0791%" height="15" fill="rgb(254,195,49)" fg:x="203" fg:w="1"/><text x="16.3101%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0601%" y="245" width="0.0791%" height="15" fill="rgb(208,123,14)" fg:x="203" fg:w="1"/><text x="16.3101%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="16.0601%" y="453" width="0.1582%" height="15" fill="rgb(224,200,8)" fg:x="203" fg:w="2"/><text x="16.3101%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="16.0601%" y="437" width="0.1582%" height="15" fill="rgb(217,61,36)" fg:x="203" fg:w="2"/><text x="16.3101%" y="447.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="16.0601%" y="421" width="0.1582%" height="15" fill="rgb(206,35,45)" fg:x="203" fg:w="2"/><text x="16.3101%" y="431.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="16.0601%" y="405" width="0.1582%" height="15" fill="rgb(217,65,33)" fg:x="203" fg:w="2"/><text x="16.3101%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.1392%" y="389" width="0.0791%" height="15" fill="rgb(222,158,48)" fg:x="204" fg:w="1"/><text x="16.3892%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.1392%" y="373" width="0.0791%" height="15" fill="rgb(254,2,54)" fg:x="204" fg:w="1"/><text x="16.3892%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.1392%" y="357" width="0.0791%" height="15" fill="rgb(250,143,38)" fg:x="204" fg:w="1"/><text x="16.3892%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.1392%" y="341" width="0.0791%" height="15" fill="rgb(248,25,0)" fg:x="204" fg:w="1"/><text x="16.3892%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.1392%" y="325" width="0.0791%" height="15" fill="rgb(206,152,27)" fg:x="204" fg:w="1"/><text x="16.3892%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.1392%" y="309" width="0.0791%" height="15" fill="rgb(240,77,30)" fg:x="204" fg:w="1"/><text x="16.3892%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="16.1392%" y="293" width="0.0791%" height="15" fill="rgb(231,5,3)" fg:x="204" fg:w="1"/><text x="16.3892%" y="303.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="16.2184%" y="453" width="0.1582%" height="15" fill="rgb(207,226,32)" fg:x="205" fg:w="2"/><text x="16.4684%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.2184%" y="437" width="0.1582%" height="15" fill="rgb(222,207,47)" fg:x="205" fg:w="2"/><text x="16.4684%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.2184%" y="421" width="0.1582%" height="15" fill="rgb(229,115,45)" fg:x="205" fg:w="2"/><text x="16.4684%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.2975%" y="405" width="0.0791%" height="15" fill="rgb(224,191,6)" fg:x="206" fg:w="1"/><text x="16.5475%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.2975%" y="389" width="0.0791%" height="15" fill="rgb(230,227,24)" fg:x="206" fg:w="1"/><text x="16.5475%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.2975%" y="373" width="0.0791%" height="15" fill="rgb(228,80,19)" fg:x="206" fg:w="1"/><text x="16.5475%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.2975%" y="357" width="0.0791%" height="15" fill="rgb(247,229,0)" fg:x="206" fg:w="1"/><text x="16.5475%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.2975%" y="341" width="0.0791%" height="15" fill="rgb(237,194,15)" fg:x="206" fg:w="1"/><text x="16.5475%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.2975%" y="325" width="0.0791%" height="15" fill="rgb(219,203,20)" fg:x="206" fg:w="1"/><text x="16.5475%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.2975%" y="309" width="0.0791%" height="15" fill="rgb(234,128,8)" fg:x="206" fg:w="1"/><text x="16.5475%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.2975%" y="293" width="0.0791%" height="15" fill="rgb(248,202,8)" fg:x="206" fg:w="1"/><text x="16.5475%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.2975%" y="277" width="0.0791%" height="15" fill="rgb(206,104,37)" fg:x="206" fg:w="1"/><text x="16.5475%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.2975%" y="261" width="0.0791%" height="15" fill="rgb(223,8,27)" fg:x="206" fg:w="1"/><text x="16.5475%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.2975%" y="245" width="0.0791%" height="15" fill="rgb(216,217,28)" fg:x="206" fg:w="1"/><text x="16.5475%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.2975%" y="229" width="0.0791%" height="15" fill="rgb(249,199,1)" fg:x="206" fg:w="1"/><text x="16.5475%" y="239.50"></text></g><g><title>core::iter::adapters::try_process (12 samples, 0.95%)</title><rect x="15.5063%" y="533" width="0.9494%" height="15" fill="rgb(240,85,17)" fg:x="196" fg:w="12"/><text x="15.7563%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (8 samples, 0.63%)</title><rect x="15.8228%" y="517" width="0.6329%" height="15" fill="rgb(206,108,45)" fg:x="200" fg:w="8"/><text x="16.0728%" y="527.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (6 samples, 0.47%)</title><rect x="15.9810%" y="501" width="0.4747%" height="15" fill="rgb(245,210,41)" fg:x="202" fg:w="6"/><text x="16.2310%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (6 samples, 0.47%)</title><rect x="15.9810%" y="485" width="0.4747%" height="15" fill="rgb(206,13,37)" fg:x="202" fg:w="6"/><text x="16.2310%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="16.0601%" y="469" width="0.3956%" height="15" fill="rgb(250,61,18)" fg:x="203" fg:w="5"/><text x="16.3101%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.3766%" y="453" width="0.0791%" height="15" fill="rgb(235,172,48)" fg:x="207" fg:w="1"/><text x="16.6266%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.3766%" y="437" width="0.0791%" height="15" fill="rgb(249,201,17)" fg:x="207" fg:w="1"/><text x="16.6266%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.3766%" y="421" width="0.0791%" height="15" fill="rgb(219,208,6)" fg:x="207" fg:w="1"/><text x="16.6266%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.3766%" y="405" width="0.0791%" height="15" fill="rgb(248,31,23)" fg:x="207" fg:w="1"/><text x="16.6266%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="16.3766%" y="389" width="0.0791%" height="15" fill="rgb(245,15,42)" fg:x="207" fg:w="1"/><text x="16.6266%" y="399.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="16.4557%" y="501" width="0.0791%" height="15" fill="rgb(222,217,39)" fg:x="208" fg:w="1"/><text x="16.7057%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="16.4557%" y="485" width="0.0791%" height="15" fill="rgb(210,219,27)" fg:x="208" fg:w="1"/><text x="16.7057%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="16.4557%" y="469" width="0.0791%" height="15" fill="rgb(252,166,36)" fg:x="208" fg:w="1"/><text x="16.7057%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="16.4557%" y="453" width="0.0791%" height="15" fill="rgb(245,132,34)" fg:x="208" fg:w="1"/><text x="16.7057%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.4557%" y="437" width="0.0791%" height="15" fill="rgb(236,54,3)" fg:x="208" fg:w="1"/><text x="16.7057%" y="447.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (15 samples, 1.19%)</title><rect x="15.4272%" y="549" width="1.1867%" height="15" fill="rgb(241,173,43)" fg:x="195" fg:w="15"/><text x="15.6772%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="16.4557%" y="533" width="0.1582%" height="15" fill="rgb(215,190,9)" fg:x="208" fg:w="2"/><text x="16.7057%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="16.4557%" y="517" width="0.1582%" height="15" fill="rgb(242,101,16)" fg:x="208" fg:w="2"/><text x="16.7057%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.5348%" y="501" width="0.0791%" height="15" fill="rgb(223,190,21)" fg:x="209" fg:w="1"/><text x="16.7848%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.5348%" y="485" width="0.0791%" height="15" fill="rgb(215,228,25)" fg:x="209" fg:w="1"/><text x="16.7848%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="16.5348%" y="469" width="0.0791%" height="15" fill="rgb(225,36,22)" fg:x="209" fg:w="1"/><text x="16.7848%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="16.5348%" y="453" width="0.0791%" height="15" fill="rgb(251,106,46)" fg:x="209" fg:w="1"/><text x="16.7848%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="16.5348%" y="437" width="0.0791%" height="15" fill="rgb(208,90,1)" fg:x="209" fg:w="1"/><text x="16.7848%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.5348%" y="421" width="0.0791%" height="15" fill="rgb(243,10,4)" fg:x="209" fg:w="1"/><text x="16.7848%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.5348%" y="405" width="0.0791%" height="15" fill="rgb(212,137,27)" fg:x="209" fg:w="1"/><text x="16.7848%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.5348%" y="389" width="0.0791%" height="15" fill="rgb(231,220,49)" fg:x="209" fg:w="1"/><text x="16.7848%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="16.6139%" y="357" width="0.1582%" height="15" fill="rgb(237,96,20)" fg:x="210" fg:w="2"/><text x="16.8639%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="16.6139%" y="341" width="0.1582%" height="15" fill="rgb(239,229,30)" fg:x="210" fg:w="2"/><text x="16.8639%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="16.6139%" y="325" width="0.1582%" height="15" fill="rgb(219,65,33)" fg:x="210" fg:w="2"/><text x="16.8639%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="16.6139%" y="309" width="0.1582%" height="15" fill="rgb(243,134,7)" fg:x="210" fg:w="2"/><text x="16.8639%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="16.6139%" y="293" width="0.1582%" height="15" fill="rgb(216,177,54)" fg:x="210" fg:w="2"/><text x="16.8639%" y="303.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="16.6139%" y="277" width="0.1582%" height="15" fill="rgb(211,160,20)" fg:x="210" fg:w="2"/><text x="16.8639%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.6930%" y="261" width="0.0791%" height="15" fill="rgb(239,85,39)" fg:x="211" fg:w="1"/><text x="16.9430%" y="271.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="16.6139%" y="501" width="0.2373%" height="15" fill="rgb(232,125,22)" fg:x="210" fg:w="3"/><text x="16.8639%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="16.6139%" y="485" width="0.2373%" height="15" fill="rgb(244,57,34)" fg:x="210" fg:w="3"/><text x="16.8639%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="16.6139%" y="469" width="0.2373%" height="15" fill="rgb(214,203,32)" fg:x="210" fg:w="3"/><text x="16.8639%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="16.6139%" y="453" width="0.2373%" height="15" fill="rgb(207,58,43)" fg:x="210" fg:w="3"/><text x="16.8639%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="16.6139%" y="437" width="0.2373%" height="15" fill="rgb(215,193,15)" fg:x="210" fg:w="3"/><text x="16.8639%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="16.6139%" y="421" width="0.2373%" height="15" fill="rgb(232,15,44)" fg:x="210" fg:w="3"/><text x="16.8639%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="16.6139%" y="405" width="0.2373%" height="15" fill="rgb(212,3,48)" fg:x="210" fg:w="3"/><text x="16.8639%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="16.6139%" y="389" width="0.2373%" height="15" fill="rgb(218,128,7)" fg:x="210" fg:w="3"/><text x="16.8639%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="16.6139%" y="373" width="0.2373%" height="15" fill="rgb(226,216,39)" fg:x="210" fg:w="3"/><text x="16.8639%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="16.7722%" y="357" width="0.0791%" height="15" fill="rgb(243,47,51)" fg:x="212" fg:w="1"/><text x="17.0222%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="16.7722%" y="341" width="0.0791%" height="15" fill="rgb(241,183,40)" fg:x="212" fg:w="1"/><text x="17.0222%" y="351.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="16.8513%" y="405" width="0.0791%" height="15" fill="rgb(231,217,32)" fg:x="213" fg:w="1"/><text x="17.1013%" y="415.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="16.8513%" y="389" width="0.0791%" height="15" fill="rgb(229,61,38)" fg:x="213" fg:w="1"/><text x="17.1013%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="16.8513%" y="373" width="0.0791%" height="15" fill="rgb(225,210,5)" fg:x="213" fg:w="1"/><text x="17.1013%" y="383.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="16.8513%" y="357" width="0.0791%" height="15" fill="rgb(231,79,45)" fg:x="213" fg:w="1"/><text x="17.1013%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.8513%" y="341" width="0.0791%" height="15" fill="rgb(224,100,7)" fg:x="213" fg:w="1"/><text x="17.1013%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="16.8513%" y="325" width="0.0791%" height="15" fill="rgb(241,198,18)" fg:x="213" fg:w="1"/><text x="17.1013%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="16.9304%" y="405" width="0.0791%" height="15" fill="rgb(252,97,53)" fg:x="214" fg:w="1"/><text x="17.1804%" y="415.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="16.9304%" y="389" width="0.0791%" height="15" fill="rgb(220,88,7)" fg:x="214" fg:w="1"/><text x="17.1804%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="16.9304%" y="373" width="0.0791%" height="15" fill="rgb(213,176,14)" fg:x="214" fg:w="1"/><text x="17.1804%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.9304%" y="357" width="0.0791%" height="15" fill="rgb(246,73,7)" fg:x="214" fg:w="1"/><text x="17.1804%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.9304%" y="341" width="0.0791%" height="15" fill="rgb(245,64,36)" fg:x="214" fg:w="1"/><text x="17.1804%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.9304%" y="325" width="0.0791%" height="15" fill="rgb(245,80,10)" fg:x="214" fg:w="1"/><text x="17.1804%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.9304%" y="309" width="0.0791%" height="15" fill="rgb(232,107,50)" fg:x="214" fg:w="1"/><text x="17.1804%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.9304%" y="293" width="0.0791%" height="15" fill="rgb(253,3,0)" fg:x="214" fg:w="1"/><text x="17.1804%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.9304%" y="277" width="0.0791%" height="15" fill="rgb(212,99,53)" fg:x="214" fg:w="1"/><text x="17.1804%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.9304%" y="261" width="0.0791%" height="15" fill="rgb(249,111,54)" fg:x="214" fg:w="1"/><text x="17.1804%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.9304%" y="245" width="0.0791%" height="15" fill="rgb(249,55,30)" fg:x="214" fg:w="1"/><text x="17.1804%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.9304%" y="229" width="0.0791%" height="15" fill="rgb(237,47,42)" fg:x="214" fg:w="1"/><text x="17.1804%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.9304%" y="213" width="0.0791%" height="15" fill="rgb(211,20,18)" fg:x="214" fg:w="1"/><text x="17.1804%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.9304%" y="197" width="0.0791%" height="15" fill="rgb(231,203,46)" fg:x="214" fg:w="1"/><text x="17.1804%" y="207.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="17.0095%" y="405" width="0.0791%" height="15" fill="rgb(237,142,3)" fg:x="215" fg:w="1"/><text x="17.2595%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.0095%" y="389" width="0.0791%" height="15" fill="rgb(241,107,1)" fg:x="215" fg:w="1"/><text x="17.2595%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.0095%" y="373" width="0.0791%" height="15" fill="rgb(229,83,13)" fg:x="215" fg:w="1"/><text x="17.2595%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="17.0095%" y="357" width="0.0791%" height="15" fill="rgb(241,91,40)" fg:x="215" fg:w="1"/><text x="17.2595%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.0095%" y="341" width="0.0791%" height="15" fill="rgb(225,3,45)" fg:x="215" fg:w="1"/><text x="17.2595%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.0886%" y="277" width="0.0791%" height="15" fill="rgb(244,223,14)" fg:x="216" fg:w="1"/><text x="17.3386%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.0886%" y="261" width="0.0791%" height="15" fill="rgb(224,124,37)" fg:x="216" fg:w="1"/><text x="17.3386%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.0886%" y="245" width="0.0791%" height="15" fill="rgb(251,171,30)" fg:x="216" fg:w="1"/><text x="17.3386%" y="255.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="17.0886%" y="389" width="0.1582%" height="15" fill="rgb(236,46,54)" fg:x="216" fg:w="2"/><text x="17.3386%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="17.0886%" y="373" width="0.1582%" height="15" fill="rgb(245,213,5)" fg:x="216" fg:w="2"/><text x="17.3386%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="17.0886%" y="357" width="0.1582%" height="15" fill="rgb(230,144,27)" fg:x="216" fg:w="2"/><text x="17.3386%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="17.0886%" y="341" width="0.1582%" height="15" fill="rgb(220,86,6)" fg:x="216" fg:w="2"/><text x="17.3386%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="17.0886%" y="325" width="0.1582%" height="15" fill="rgb(240,20,13)" fg:x="216" fg:w="2"/><text x="17.3386%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="17.0886%" y="309" width="0.1582%" height="15" fill="rgb(217,89,34)" fg:x="216" fg:w="2"/><text x="17.3386%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="17.0886%" y="293" width="0.1582%" height="15" fill="rgb(229,13,5)" fg:x="216" fg:w="2"/><text x="17.3386%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.1677%" y="277" width="0.0791%" height="15" fill="rgb(244,67,35)" fg:x="217" fg:w="1"/><text x="17.4177%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="17.1677%" y="261" width="0.0791%" height="15" fill="rgb(221,40,2)" fg:x="217" fg:w="1"/><text x="17.4177%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.1677%" y="245" width="0.0791%" height="15" fill="rgb(237,157,21)" fg:x="217" fg:w="1"/><text x="17.4177%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="17.1677%" y="229" width="0.0791%" height="15" fill="rgb(222,94,11)" fg:x="217" fg:w="1"/><text x="17.4177%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.1677%" y="213" width="0.0791%" height="15" fill="rgb(249,113,6)" fg:x="217" fg:w="1"/><text x="17.4177%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="17.1677%" y="197" width="0.0791%" height="15" fill="rgb(238,137,36)" fg:x="217" fg:w="1"/><text x="17.4177%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1677%" y="181" width="0.0791%" height="15" fill="rgb(210,102,26)" fg:x="217" fg:w="1"/><text x="17.4177%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1677%" y="165" width="0.0791%" height="15" fill="rgb(218,30,30)" fg:x="217" fg:w="1"/><text x="17.4177%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="17.2468%" y="357" width="0.0791%" height="15" fill="rgb(214,67,26)" fg:x="218" fg:w="1"/><text x="17.4968%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="17.3259%" y="213" width="0.0791%" height="15" fill="rgb(251,9,53)" fg:x="219" fg:w="1"/><text x="17.5759%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="17.3259%" y="197" width="0.0791%" height="15" fill="rgb(228,204,25)" fg:x="219" fg:w="1"/><text x="17.5759%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="17.3259%" y="181" width="0.0791%" height="15" fill="rgb(207,153,8)" fg:x="219" fg:w="1"/><text x="17.5759%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="17.3259%" y="165" width="0.0791%" height="15" fill="rgb(242,9,16)" fg:x="219" fg:w="1"/><text x="17.5759%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="17.3259%" y="245" width="0.1582%" height="15" fill="rgb(217,211,10)" fg:x="219" fg:w="2"/><text x="17.5759%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="17.3259%" y="229" width="0.1582%" height="15" fill="rgb(219,228,52)" fg:x="219" fg:w="2"/><text x="17.5759%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4051%" y="213" width="0.0791%" height="15" fill="rgb(231,92,29)" fg:x="220" fg:w="1"/><text x="17.6551%" y="223.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4051%" y="197" width="0.0791%" height="15" fill="rgb(232,8,23)" fg:x="220" fg:w="1"/><text x="17.6551%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.4051%" y="181" width="0.0791%" height="15" fill="rgb(216,211,34)" fg:x="220" fg:w="1"/><text x="17.6551%" y="191.50"></text></g><g><title>plugins_core::tools::get_contained_keys (12 samples, 0.95%)</title><rect x="16.6139%" y="549" width="0.9494%" height="15" fill="rgb(236,151,0)" fg:x="210" fg:w="12"/><text x="16.8639%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (12 samples, 0.95%)</title><rect x="16.6139%" y="533" width="0.9494%" height="15" fill="rgb(209,168,3)" fg:x="210" fg:w="12"/><text x="16.8639%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (12 samples, 0.95%)</title><rect x="16.6139%" y="517" width="0.9494%" height="15" fill="rgb(208,129,28)" fg:x="210" fg:w="12"/><text x="16.8639%" y="527.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (9 samples, 0.71%)</title><rect x="16.8513%" y="501" width="0.7120%" height="15" fill="rgb(229,78,22)" fg:x="213" fg:w="9"/><text x="17.1013%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.71%)</title><rect x="16.8513%" y="485" width="0.7120%" height="15" fill="rgb(228,187,13)" fg:x="213" fg:w="9"/><text x="17.1013%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.71%)</title><rect x="16.8513%" y="469" width="0.7120%" height="15" fill="rgb(240,119,24)" fg:x="213" fg:w="9"/><text x="17.1013%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (9 samples, 0.71%)</title><rect x="16.8513%" y="453" width="0.7120%" height="15" fill="rgb(209,194,42)" fg:x="213" fg:w="9"/><text x="17.1013%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (9 samples, 0.71%)</title><rect x="16.8513%" y="437" width="0.7120%" height="15" fill="rgb(247,200,46)" fg:x="213" fg:w="9"/><text x="17.1013%" y="447.50"></text></g><g><title>engine::internal::Entities::add_persisted (9 samples, 0.71%)</title><rect x="16.8513%" y="421" width="0.7120%" height="15" fill="rgb(218,76,16)" fg:x="213" fg:w="9"/><text x="17.1013%" y="431.50"></text></g><g><title>kernel::model::entity::Entity::from_str (6 samples, 0.47%)</title><rect x="17.0886%" y="405" width="0.4747%" height="15" fill="rgb(225,21,48)" fg:x="216" fg:w="6"/><text x="17.3386%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="17.2468%" y="389" width="0.3165%" height="15" fill="rgb(239,223,50)" fg:x="218" fg:w="4"/><text x="17.4968%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="17.2468%" y="373" width="0.3165%" height="15" fill="rgb(244,45,21)" fg:x="218" fg:w="4"/><text x="17.4968%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="17.3259%" y="357" width="0.2373%" height="15" fill="rgb(232,33,43)" fg:x="219" fg:w="3"/><text x="17.5759%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="17.3259%" y="341" width="0.2373%" height="15" fill="rgb(209,8,3)" fg:x="219" fg:w="3"/><text x="17.5759%" y="351.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="17.3259%" y="325" width="0.2373%" height="15" fill="rgb(214,25,53)" fg:x="219" fg:w="3"/><text x="17.5759%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="17.3259%" y="309" width="0.2373%" height="15" fill="rgb(254,186,54)" fg:x="219" fg:w="3"/><text x="17.5759%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="17.3259%" y="293" width="0.2373%" height="15" fill="rgb(208,174,49)" fg:x="219" fg:w="3"/><text x="17.5759%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="17.3259%" y="277" width="0.2373%" height="15" fill="rgb(233,191,51)" fg:x="219" fg:w="3"/><text x="17.5759%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="17.3259%" y="261" width="0.2373%" height="15" fill="rgb(222,134,10)" fg:x="219" fg:w="3"/><text x="17.5759%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="17.4842%" y="245" width="0.0791%" height="15" fill="rgb(230,226,20)" fg:x="221" fg:w="1"/><text x="17.7342%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.4842%" y="229" width="0.0791%" height="15" fill="rgb(251,111,25)" fg:x="221" fg:w="1"/><text x="17.7342%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 2.22%)</title><rect x="15.4272%" y="581" width="2.2152%" height="15" fill="rgb(224,40,46)" fg:x="195" fg:w="28"/><text x="15.6772%" y="591.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (28 samples, 2.22%)</title><rect x="15.4272%" y="565" width="2.2152%" height="15" fill="rgb(236,108,47)" fg:x="195" fg:w="28"/><text x="15.6772%" y="575.50">&lt;..</text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="17.5633%" y="549" width="0.0791%" height="15" fill="rgb(234,93,0)" fg:x="222" fg:w="1"/><text x="17.8133%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="17.5633%" y="533" width="0.0791%" height="15" fill="rgb(224,213,32)" fg:x="222" fg:w="1"/><text x="17.8133%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="17.5633%" y="517" width="0.0791%" height="15" fill="rgb(251,11,48)" fg:x="222" fg:w="1"/><text x="17.8133%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="17.7215%" y="517" width="0.0791%" height="15" fill="rgb(236,173,5)" fg:x="224" fg:w="1"/><text x="17.9715%" y="527.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="17.7215%" y="501" width="0.0791%" height="15" fill="rgb(230,95,12)" fg:x="224" fg:w="1"/><text x="17.9715%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.7215%" y="485" width="0.0791%" height="15" fill="rgb(232,209,1)" fg:x="224" fg:w="1"/><text x="17.9715%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.7215%" y="469" width="0.0791%" height="15" fill="rgb(232,6,1)" fg:x="224" fg:w="1"/><text x="17.9715%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.7215%" y="453" width="0.0791%" height="15" fill="rgb(210,224,50)" fg:x="224" fg:w="1"/><text x="17.9715%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.7215%" y="437" width="0.0791%" height="15" fill="rgb(228,127,35)" fg:x="224" fg:w="1"/><text x="17.9715%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.7215%" y="421" width="0.0791%" height="15" fill="rgb(245,102,45)" fg:x="224" fg:w="1"/><text x="17.9715%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.7215%" y="405" width="0.0791%" height="15" fill="rgb(214,1,49)" fg:x="224" fg:w="1"/><text x="17.9715%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.7215%" y="389" width="0.0791%" height="15" fill="rgb(226,163,40)" fg:x="224" fg:w="1"/><text x="17.9715%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.7215%" y="373" width="0.0791%" height="15" fill="rgb(239,212,28)" fg:x="224" fg:w="1"/><text x="17.9715%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.7215%" y="357" width="0.0791%" height="15" fill="rgb(220,20,13)" fg:x="224" fg:w="1"/><text x="17.9715%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.7215%" y="341" width="0.0791%" height="15" fill="rgb(210,164,35)" fg:x="224" fg:w="1"/><text x="17.9715%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.7215%" y="325" width="0.0791%" height="15" fill="rgb(248,109,41)" fg:x="224" fg:w="1"/><text x="17.9715%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.7215%" y="309" width="0.0791%" height="15" fill="rgb(238,23,50)" fg:x="224" fg:w="1"/><text x="17.9715%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.7215%" y="293" width="0.0791%" height="15" fill="rgb(211,48,49)" fg:x="224" fg:w="1"/><text x="17.9715%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.8797%" y="421" width="0.0791%" height="15" fill="rgb(223,36,21)" fg:x="226" fg:w="1"/><text x="18.1297%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.8797%" y="405" width="0.0791%" height="15" fill="rgb(207,123,46)" fg:x="226" fg:w="1"/><text x="18.1297%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.8797%" y="389" width="0.0791%" height="15" fill="rgb(240,218,32)" fg:x="226" fg:w="1"/><text x="18.1297%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.8797%" y="373" width="0.0791%" height="15" fill="rgb(252,5,43)" fg:x="226" fg:w="1"/><text x="18.1297%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.8797%" y="357" width="0.0791%" height="15" fill="rgb(252,84,19)" fg:x="226" fg:w="1"/><text x="18.1297%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.8797%" y="341" width="0.0791%" height="15" fill="rgb(243,152,39)" fg:x="226" fg:w="1"/><text x="18.1297%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.8797%" y="325" width="0.0791%" height="15" fill="rgb(234,160,15)" fg:x="226" fg:w="1"/><text x="18.1297%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.8797%" y="309" width="0.0791%" height="15" fill="rgb(237,34,20)" fg:x="226" fg:w="1"/><text x="18.1297%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.8797%" y="293" width="0.0791%" height="15" fill="rgb(229,97,13)" fg:x="226" fg:w="1"/><text x="18.1297%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.8797%" y="277" width="0.0791%" height="15" fill="rgb(234,71,50)" fg:x="226" fg:w="1"/><text x="18.1297%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.8797%" y="261" width="0.0791%" height="15" fill="rgb(253,155,4)" fg:x="226" fg:w="1"/><text x="18.1297%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.8797%" y="245" width="0.0791%" height="15" fill="rgb(222,185,37)" fg:x="226" fg:w="1"/><text x="18.1297%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (4 samples, 0.32%)</title><rect x="17.7215%" y="533" width="0.3165%" height="15" fill="rgb(251,177,13)" fg:x="224" fg:w="4"/><text x="17.9715%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="17.8006%" y="517" width="0.2373%" height="15" fill="rgb(250,179,40)" fg:x="225" fg:w="3"/><text x="18.0506%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="17.8006%" y="501" width="0.2373%" height="15" fill="rgb(242,44,2)" fg:x="225" fg:w="3"/><text x="18.0506%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="17.8006%" y="485" width="0.2373%" height="15" fill="rgb(216,177,13)" fg:x="225" fg:w="3"/><text x="18.0506%" y="495.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="17.8006%" y="469" width="0.2373%" height="15" fill="rgb(216,106,43)" fg:x="225" fg:w="3"/><text x="18.0506%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="17.8006%" y="453" width="0.2373%" height="15" fill="rgb(216,183,2)" fg:x="225" fg:w="3"/><text x="18.0506%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="17.8797%" y="437" width="0.1582%" height="15" fill="rgb(249,75,3)" fg:x="226" fg:w="2"/><text x="18.1297%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="17.9589%" y="421" width="0.0791%" height="15" fill="rgb(219,67,39)" fg:x="227" fg:w="1"/><text x="18.2089%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.9589%" y="405" width="0.0791%" height="15" fill="rgb(253,228,2)" fg:x="227" fg:w="1"/><text x="18.2089%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.9589%" y="389" width="0.0791%" height="15" fill="rgb(235,138,27)" fg:x="227" fg:w="1"/><text x="18.2089%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.9589%" y="373" width="0.0791%" height="15" fill="rgb(236,97,51)" fg:x="227" fg:w="1"/><text x="18.2089%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.9589%" y="357" width="0.0791%" height="15" fill="rgb(240,80,30)" fg:x="227" fg:w="1"/><text x="18.2089%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="17.9589%" y="341" width="0.0791%" height="15" fill="rgb(230,178,19)" fg:x="227" fg:w="1"/><text x="18.2089%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="17.9589%" y="325" width="0.0791%" height="15" fill="rgb(210,190,27)" fg:x="227" fg:w="1"/><text x="18.2089%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="17.9589%" y="309" width="0.0791%" height="15" fill="rgb(222,107,31)" fg:x="227" fg:w="1"/><text x="18.2089%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="17.9589%" y="293" width="0.0791%" height="15" fill="rgb(216,127,34)" fg:x="227" fg:w="1"/><text x="18.2089%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="17.9589%" y="277" width="0.0791%" height="15" fill="rgb(234,116,52)" fg:x="227" fg:w="1"/><text x="18.2089%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="18.5127%" y="229" width="0.3165%" height="15" fill="rgb(222,124,15)" fg:x="234" fg:w="4"/><text x="18.7627%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="18.5918%" y="213" width="0.2373%" height="15" fill="rgb(231,179,28)" fg:x="235" fg:w="3"/><text x="18.8418%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="18.5918%" y="197" width="0.2373%" height="15" fill="rgb(226,93,45)" fg:x="235" fg:w="3"/><text x="18.8418%" y="207.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="18.6709%" y="181" width="0.1582%" height="15" fill="rgb(215,8,51)" fg:x="236" fg:w="2"/><text x="18.9209%" y="191.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="18.7500%" y="165" width="0.0791%" height="15" fill="rgb(223,106,5)" fg:x="237" fg:w="1"/><text x="19.0000%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.40%)</title><rect x="18.5127%" y="245" width="0.3956%" height="15" fill="rgb(250,191,5)" fg:x="234" fg:w="5"/><text x="18.7627%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.8291%" y="229" width="0.0791%" height="15" fill="rgb(242,132,44)" fg:x="238" fg:w="1"/><text x="19.0791%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.63%)</title><rect x="18.3544%" y="357" width="0.6329%" height="15" fill="rgb(251,152,29)" fg:x="232" fg:w="8"/><text x="18.6044%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.55%)</title><rect x="18.4335%" y="341" width="0.5538%" height="15" fill="rgb(218,179,5)" fg:x="233" fg:w="7"/><text x="18.6835%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (7 samples, 0.55%)</title><rect x="18.4335%" y="325" width="0.5538%" height="15" fill="rgb(227,67,19)" fg:x="233" fg:w="7"/><text x="18.6835%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.55%)</title><rect x="18.4335%" y="309" width="0.5538%" height="15" fill="rgb(233,119,31)" fg:x="233" fg:w="7"/><text x="18.6835%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.55%)</title><rect x="18.4335%" y="293" width="0.5538%" height="15" fill="rgb(241,120,22)" fg:x="233" fg:w="7"/><text x="18.6835%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.47%)</title><rect x="18.5127%" y="277" width="0.4747%" height="15" fill="rgb(224,102,30)" fg:x="234" fg:w="6"/><text x="18.7627%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (6 samples, 0.47%)</title><rect x="18.5127%" y="261" width="0.4747%" height="15" fill="rgb(210,164,37)" fg:x="234" fg:w="6"/><text x="18.7627%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="18.9082%" y="245" width="0.0791%" height="15" fill="rgb(226,191,16)" fg:x="239" fg:w="1"/><text x="19.1582%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (11 samples, 0.87%)</title><rect x="18.2753%" y="405" width="0.8703%" height="15" fill="rgb(214,40,45)" fg:x="231" fg:w="11"/><text x="18.5253%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.87%)</title><rect x="18.2753%" y="389" width="0.8703%" height="15" fill="rgb(244,29,26)" fg:x="231" fg:w="11"/><text x="18.5253%" y="399.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (11 samples, 0.87%)</title><rect x="18.2753%" y="373" width="0.8703%" height="15" fill="rgb(216,16,5)" fg:x="231" fg:w="11"/><text x="18.5253%" y="383.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="18.9873%" y="357" width="0.1582%" height="15" fill="rgb(249,76,35)" fg:x="240" fg:w="2"/><text x="19.2373%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="18.9873%" y="341" width="0.1582%" height="15" fill="rgb(207,11,44)" fg:x="240" fg:w="2"/><text x="19.2373%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="19.0665%" y="325" width="0.0791%" height="15" fill="rgb(228,190,49)" fg:x="241" fg:w="1"/><text x="19.3165%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="19.0665%" y="309" width="0.0791%" height="15" fill="rgb(214,173,12)" fg:x="241" fg:w="1"/><text x="19.3165%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="19.0665%" y="293" width="0.0791%" height="15" fill="rgb(218,26,35)" fg:x="241" fg:w="1"/><text x="19.3165%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (13 samples, 1.03%)</title><rect x="18.1962%" y="469" width="1.0285%" height="15" fill="rgb(220,200,19)" fg:x="230" fg:w="13"/><text x="18.4462%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (13 samples, 1.03%)</title><rect x="18.1962%" y="453" width="1.0285%" height="15" fill="rgb(239,95,49)" fg:x="230" fg:w="13"/><text x="18.4462%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 1.03%)</title><rect x="18.1962%" y="437" width="1.0285%" height="15" fill="rgb(235,85,53)" fg:x="230" fg:w="13"/><text x="18.4462%" y="447.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (13 samples, 1.03%)</title><rect x="18.1962%" y="421" width="1.0285%" height="15" fill="rgb(233,133,31)" fg:x="230" fg:w="13"/><text x="18.4462%" y="431.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="19.1456%" y="405" width="0.0791%" height="15" fill="rgb(218,25,20)" fg:x="242" fg:w="1"/><text x="19.3956%" y="415.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (16 samples, 1.27%)</title><rect x="18.0380%" y="517" width="1.2658%" height="15" fill="rgb(252,210,38)" fg:x="228" fg:w="16"/><text x="18.2880%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (16 samples, 1.27%)</title><rect x="18.0380%" y="501" width="1.2658%" height="15" fill="rgb(242,134,21)" fg:x="228" fg:w="16"/><text x="18.2880%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 1.27%)</title><rect x="18.0380%" y="485" width="1.2658%" height="15" fill="rgb(213,28,48)" fg:x="228" fg:w="16"/><text x="18.2880%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.2247%" y="469" width="0.0791%" height="15" fill="rgb(250,196,2)" fg:x="243" fg:w="1"/><text x="19.4747%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="19.3038%" y="469" width="0.1582%" height="15" fill="rgb(227,5,17)" fg:x="244" fg:w="2"/><text x="19.5538%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.3829%" y="453" width="0.0791%" height="15" fill="rgb(221,226,24)" fg:x="245" fg:w="1"/><text x="19.6329%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="19.3829%" y="437" width="0.0791%" height="15" fill="rgb(211,5,48)" fg:x="245" fg:w="1"/><text x="19.6329%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="19.4620%" y="469" width="0.0791%" height="15" fill="rgb(219,150,6)" fg:x="246" fg:w="1"/><text x="19.7120%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.4620%" y="453" width="0.0791%" height="15" fill="rgb(251,46,16)" fg:x="246" fg:w="1"/><text x="19.7120%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.4620%" y="437" width="0.0791%" height="15" fill="rgb(220,204,40)" fg:x="246" fg:w="1"/><text x="19.7120%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.4620%" y="421" width="0.0791%" height="15" fill="rgb(211,85,2)" fg:x="246" fg:w="1"/><text x="19.7120%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.6203%" y="453" width="0.0791%" height="15" fill="rgb(229,17,7)" fg:x="248" fg:w="1"/><text x="19.8703%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.6994%" y="437" width="0.0791%" height="15" fill="rgb(239,72,28)" fg:x="249" fg:w="1"/><text x="19.9494%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="19.7785%" y="421" width="0.2373%" height="15" fill="rgb(230,47,54)" fg:x="250" fg:w="3"/><text x="20.0285%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="19.7785%" y="405" width="0.2373%" height="15" fill="rgb(214,50,8)" fg:x="250" fg:w="3"/><text x="20.0285%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="19.8576%" y="389" width="0.1582%" height="15" fill="rgb(216,198,43)" fg:x="251" fg:w="2"/><text x="20.1076%" y="399.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (26 samples, 2.06%)</title><rect x="18.0380%" y="533" width="2.0570%" height="15" fill="rgb(234,20,35)" fg:x="228" fg:w="26"/><text x="18.2880%" y="543.50">&lt;..</text></g><g><title>kernel::model::EntityPtr::to_json_value (10 samples, 0.79%)</title><rect x="19.3038%" y="517" width="0.7911%" height="15" fill="rgb(254,45,19)" fg:x="244" fg:w="10"/><text x="19.5538%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.79%)</title><rect x="19.3038%" y="501" width="0.7911%" height="15" fill="rgb(219,14,44)" fg:x="244" fg:w="10"/><text x="19.5538%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.79%)</title><rect x="19.3038%" y="485" width="0.7911%" height="15" fill="rgb(217,220,26)" fg:x="244" fg:w="10"/><text x="19.5538%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.55%)</title><rect x="19.5411%" y="469" width="0.5538%" height="15" fill="rgb(213,158,28)" fg:x="247" fg:w="7"/><text x="19.7911%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="19.6994%" y="453" width="0.3956%" height="15" fill="rgb(252,51,52)" fg:x="249" fg:w="5"/><text x="19.9494%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="19.7785%" y="437" width="0.3165%" height="15" fill="rgb(246,89,16)" fg:x="250" fg:w="4"/><text x="20.0285%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="20.0158%" y="421" width="0.0791%" height="15" fill="rgb(216,158,49)" fg:x="253" fg:w="1"/><text x="20.2658%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="20.0158%" y="405" width="0.0791%" height="15" fill="rgb(236,107,19)" fg:x="253" fg:w="1"/><text x="20.2658%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="20.0158%" y="389" width="0.0791%" height="15" fill="rgb(228,185,30)" fg:x="253" fg:w="1"/><text x="20.2658%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.0158%" y="373" width="0.0791%" height="15" fill="rgb(246,134,8)" fg:x="253" fg:w="1"/><text x="20.2658%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="20.0949%" y="533" width="0.0791%" height="15" fill="rgb(214,143,50)" fg:x="254" fg:w="1"/><text x="20.3449%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.0949%" y="517" width="0.0791%" height="15" fill="rgb(228,75,8)" fg:x="254" fg:w="1"/><text x="20.3449%" y="527.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (69 samples, 5.46%)</title><rect x="14.7943%" y="661" width="5.4589%" height="15" fill="rgb(207,175,4)" fg:x="187" fg:w="69"/><text x="15.0443%" y="671.50">kernel:..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (69 samples, 5.46%)</title><rect x="14.7943%" y="645" width="5.4589%" height="15" fill="rgb(205,108,24)" fg:x="187" fg:w="69"/><text x="15.0443%" y="655.50">&lt;plugin..</text></g><g><title>plugins_rpc::querying::have_surroundings (64 samples, 5.06%)</title><rect x="15.1899%" y="629" width="5.0633%" height="15" fill="rgb(244,120,49)" fg:x="192" fg:w="64"/><text x="15.4399%" y="639.50">plugin..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (64 samples, 5.06%)</title><rect x="15.1899%" y="613" width="5.0633%" height="15" fill="rgb(223,47,38)" fg:x="192" fg:w="64"/><text x="15.4399%" y="623.50">&lt;plugi..</text></g><g><title>core::iter::adapters::try_process (61 samples, 4.83%)</title><rect x="15.4272%" y="597" width="4.8259%" height="15" fill="rgb(229,179,11)" fg:x="195" fg:w="61"/><text x="15.6772%" y="607.50">core::..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (33 samples, 2.61%)</title><rect x="17.6424%" y="581" width="2.6108%" height="15" fill="rgb(231,122,1)" fg:x="223" fg:w="33"/><text x="17.8924%" y="591.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (33 samples, 2.61%)</title><rect x="17.6424%" y="565" width="2.6108%" height="15" fill="rgb(245,119,9)" fg:x="223" fg:w="33"/><text x="17.8924%" y="575.50">&lt;c..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (32 samples, 2.53%)</title><rect x="17.7215%" y="549" width="2.5316%" height="15" fill="rgb(241,163,25)" fg:x="224" fg:w="32"/><text x="17.9715%" y="559.50">pl..</text></g><g><title>rpc_proto::&lt;impl core::convert::From&lt;&amp;rpc_proto::EntityKey&gt; for kernel::model::base::EntityKey&gt;::from (1 samples, 0.08%)</title><rect x="20.1741%" y="533" width="0.0791%" height="15" fill="rgb(217,214,3)" fg:x="255" fg:w="1"/><text x="20.4241%" y="543.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="20.1741%" y="517" width="0.0791%" height="15" fill="rgb(240,86,28)" fg:x="255" fg:w="1"/><text x="20.4241%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.3323%" y="469" width="0.0791%" height="15" fill="rgb(215,47,9)" fg:x="257" fg:w="1"/><text x="20.5823%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.4114%" y="437" width="0.0791%" height="15" fill="rgb(252,25,45)" fg:x="258" fg:w="1"/><text x="20.6614%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.4114%" y="421" width="0.0791%" height="15" fill="rgb(251,164,9)" fg:x="258" fg:w="1"/><text x="20.6614%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.4114%" y="405" width="0.0791%" height="15" fill="rgb(233,194,0)" fg:x="258" fg:w="1"/><text x="20.6614%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.4114%" y="389" width="0.0791%" height="15" fill="rgb(249,111,24)" fg:x="258" fg:w="1"/><text x="20.6614%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.4114%" y="373" width="0.0791%" height="15" fill="rgb(250,223,3)" fg:x="258" fg:w="1"/><text x="20.6614%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.4905%" y="373" width="0.0791%" height="15" fill="rgb(236,178,37)" fg:x="259" fg:w="1"/><text x="20.7405%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.32%)</title><rect x="20.3323%" y="485" width="0.3165%" height="15" fill="rgb(241,158,50)" fg:x="257" fg:w="4"/><text x="20.5823%" y="495.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="20.4114%" y="469" width="0.2373%" height="15" fill="rgb(213,121,41)" fg:x="258" fg:w="3"/><text x="20.6614%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="20.4114%" y="453" width="0.2373%" height="15" fill="rgb(240,92,3)" fg:x="258" fg:w="3"/><text x="20.6614%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="20.4905%" y="437" width="0.1582%" height="15" fill="rgb(205,123,3)" fg:x="259" fg:w="2"/><text x="20.7405%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.4905%" y="421" width="0.1582%" height="15" fill="rgb(205,97,47)" fg:x="259" fg:w="2"/><text x="20.7405%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="20.4905%" y="405" width="0.1582%" height="15" fill="rgb(247,152,14)" fg:x="259" fg:w="2"/><text x="20.7405%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.4905%" y="389" width="0.1582%" height="15" fill="rgb(248,195,53)" fg:x="259" fg:w="2"/><text x="20.7405%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.5696%" y="373" width="0.0791%" height="15" fill="rgb(226,201,16)" fg:x="260" fg:w="1"/><text x="20.8196%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.5696%" y="357" width="0.0791%" height="15" fill="rgb(205,98,0)" fg:x="260" fg:w="1"/><text x="20.8196%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.5696%" y="341" width="0.0791%" height="15" fill="rgb(214,191,48)" fg:x="260" fg:w="1"/><text x="20.8196%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.5696%" y="325" width="0.0791%" height="15" fill="rgb(237,112,39)" fg:x="260" fg:w="1"/><text x="20.8196%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.5696%" y="309" width="0.0791%" height="15" fill="rgb(247,203,27)" fg:x="260" fg:w="1"/><text x="20.8196%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.5696%" y="293" width="0.0791%" height="15" fill="rgb(235,124,28)" fg:x="260" fg:w="1"/><text x="20.8196%" y="303.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="20.5696%" y="277" width="0.0791%" height="15" fill="rgb(208,207,46)" fg:x="260" fg:w="1"/><text x="20.8196%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8070%" y="437" width="0.0791%" height="15" fill="rgb(234,176,4)" fg:x="263" fg:w="1"/><text x="21.0570%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8070%" y="421" width="0.0791%" height="15" fill="rgb(230,133,28)" fg:x="263" fg:w="1"/><text x="21.0570%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8070%" y="405" width="0.0791%" height="15" fill="rgb(211,137,40)" fg:x="263" fg:w="1"/><text x="21.0570%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8070%" y="389" width="0.0791%" height="15" fill="rgb(254,35,13)" fg:x="263" fg:w="1"/><text x="21.0570%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.8070%" y="373" width="0.0791%" height="15" fill="rgb(225,49,51)" fg:x="263" fg:w="1"/><text x="21.0570%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.8070%" y="357" width="0.0791%" height="15" fill="rgb(251,10,15)" fg:x="263" fg:w="1"/><text x="21.0570%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.8070%" y="341" width="0.0791%" height="15" fill="rgb(228,207,15)" fg:x="263" fg:w="1"/><text x="21.0570%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.8070%" y="325" width="0.0791%" height="15" fill="rgb(241,99,19)" fg:x="263" fg:w="1"/><text x="21.0570%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.8070%" y="309" width="0.0791%" height="15" fill="rgb(207,104,49)" fg:x="263" fg:w="1"/><text x="21.0570%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="20.8070%" y="293" width="0.0791%" height="15" fill="rgb(234,99,18)" fg:x="263" fg:w="1"/><text x="21.0570%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="20.8070%" y="277" width="0.0791%" height="15" fill="rgb(213,191,49)" fg:x="263" fg:w="1"/><text x="21.0570%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.8861%" y="437" width="0.0791%" height="15" fill="rgb(210,226,19)" fg:x="264" fg:w="1"/><text x="21.1361%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (5 samples, 0.40%)</title><rect x="20.6487%" y="485" width="0.3956%" height="15" fill="rgb(229,97,18)" fg:x="261" fg:w="5"/><text x="20.8987%" y="495.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="20.7278%" y="469" width="0.3165%" height="15" fill="rgb(211,167,15)" fg:x="262" fg:w="4"/><text x="20.9778%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="20.7278%" y="453" width="0.3165%" height="15" fill="rgb(210,169,34)" fg:x="262" fg:w="4"/><text x="20.9778%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.9652%" y="437" width="0.0791%" height="15" fill="rgb(241,121,31)" fg:x="265" fg:w="1"/><text x="21.2152%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9652%" y="421" width="0.0791%" height="15" fill="rgb(232,40,11)" fg:x="265" fg:w="1"/><text x="21.2152%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.9652%" y="405" width="0.0791%" height="15" fill="rgb(205,86,26)" fg:x="265" fg:w="1"/><text x="21.2152%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9652%" y="389" width="0.0791%" height="15" fill="rgb(231,126,28)" fg:x="265" fg:w="1"/><text x="21.2152%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.9652%" y="373" width="0.0791%" height="15" fill="rgb(219,221,18)" fg:x="265" fg:w="1"/><text x="21.2152%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9652%" y="357" width="0.0791%" height="15" fill="rgb(211,40,0)" fg:x="265" fg:w="1"/><text x="21.2152%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.9652%" y="341" width="0.0791%" height="15" fill="rgb(239,85,43)" fg:x="265" fg:w="1"/><text x="21.2152%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.9652%" y="325" width="0.0791%" height="15" fill="rgb(231,55,21)" fg:x="265" fg:w="1"/><text x="21.2152%" y="335.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="21.0443%" y="485" width="0.1582%" height="15" fill="rgb(225,184,43)" fg:x="266" fg:w="2"/><text x="21.2943%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="21.1234%" y="469" width="0.0791%" height="15" fill="rgb(251,158,41)" fg:x="267" fg:w="1"/><text x="21.3734%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.2025%" y="389" width="0.0791%" height="15" fill="rgb(234,159,37)" fg:x="268" fg:w="1"/><text x="21.4525%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="21.2025%" y="437" width="0.1582%" height="15" fill="rgb(216,204,22)" fg:x="268" fg:w="2"/><text x="21.4525%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="21.2025%" y="421" width="0.1582%" height="15" fill="rgb(214,17,3)" fg:x="268" fg:w="2"/><text x="21.4525%" y="431.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="21.2025%" y="405" width="0.1582%" height="15" fill="rgb(212,111,17)" fg:x="268" fg:w="2"/><text x="21.4525%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="21.2816%" y="389" width="0.0791%" height="15" fill="rgb(221,157,24)" fg:x="269" fg:w="1"/><text x="21.5316%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.2816%" y="373" width="0.0791%" height="15" fill="rgb(252,16,13)" fg:x="269" fg:w="1"/><text x="21.5316%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.2816%" y="357" width="0.0791%" height="15" fill="rgb(221,62,2)" fg:x="269" fg:w="1"/><text x="21.5316%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="21.2816%" y="341" width="0.0791%" height="15" fill="rgb(247,87,22)" fg:x="269" fg:w="1"/><text x="21.5316%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="21.2816%" y="325" width="0.0791%" height="15" fill="rgb(215,73,9)" fg:x="269" fg:w="1"/><text x="21.5316%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="21.2816%" y="309" width="0.0791%" height="15" fill="rgb(207,175,33)" fg:x="269" fg:w="1"/><text x="21.5316%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="21.2816%" y="293" width="0.0791%" height="15" fill="rgb(243,129,54)" fg:x="269" fg:w="1"/><text x="21.5316%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="21.2816%" y="277" width="0.0791%" height="15" fill="rgb(227,119,45)" fg:x="269" fg:w="1"/><text x="21.5316%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="21.5981%" y="325" width="0.1582%" height="15" fill="rgb(205,109,36)" fg:x="273" fg:w="2"/><text x="21.8481%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="21.5981%" y="309" width="0.1582%" height="15" fill="rgb(205,6,39)" fg:x="273" fg:w="2"/><text x="21.8481%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="21.6772%" y="293" width="0.0791%" height="15" fill="rgb(221,32,16)" fg:x="274" fg:w="1"/><text x="21.9272%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="21.5190%" y="341" width="0.3165%" height="15" fill="rgb(228,144,50)" fg:x="272" fg:w="4"/><text x="21.7690%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="21.7563%" y="325" width="0.0791%" height="15" fill="rgb(229,201,53)" fg:x="275" fg:w="1"/><text x="22.0063%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.7563%" y="309" width="0.0791%" height="15" fill="rgb(249,153,27)" fg:x="275" fg:w="1"/><text x="22.0063%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.47%)</title><rect x="21.4399%" y="405" width="0.4747%" height="15" fill="rgb(227,106,25)" fg:x="271" fg:w="6"/><text x="21.6899%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.47%)</title><rect x="21.4399%" y="389" width="0.4747%" height="15" fill="rgb(230,65,29)" fg:x="271" fg:w="6"/><text x="21.6899%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (6 samples, 0.47%)</title><rect x="21.4399%" y="373" width="0.4747%" height="15" fill="rgb(221,57,46)" fg:x="271" fg:w="6"/><text x="21.6899%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (6 samples, 0.47%)</title><rect x="21.4399%" y="357" width="0.4747%" height="15" fill="rgb(229,161,17)" fg:x="271" fg:w="6"/><text x="21.6899%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="21.8354%" y="341" width="0.0791%" height="15" fill="rgb(222,213,11)" fg:x="276" fg:w="1"/><text x="22.0854%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.9146%" y="373" width="0.0791%" height="15" fill="rgb(235,35,13)" fg:x="277" fg:w="1"/><text x="22.1646%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="21.9937%" y="357" width="0.0791%" height="15" fill="rgb(233,158,34)" fg:x="278" fg:w="1"/><text x="22.2437%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="21.9937%" y="341" width="0.0791%" height="15" fill="rgb(215,151,48)" fg:x="278" fg:w="1"/><text x="22.2437%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="21.9937%" y="373" width="0.1582%" height="15" fill="rgb(229,84,14)" fg:x="278" fg:w="2"/><text x="22.2437%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="22.0728%" y="357" width="0.0791%" height="15" fill="rgb(229,68,14)" fg:x="279" fg:w="1"/><text x="22.3228%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="22.1519%" y="357" width="0.0791%" height="15" fill="rgb(243,106,26)" fg:x="280" fg:w="1"/><text x="22.4019%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.1519%" y="341" width="0.0791%" height="15" fill="rgb(206,45,38)" fg:x="280" fg:w="1"/><text x="22.4019%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.55%)</title><rect x="21.9146%" y="405" width="0.5538%" height="15" fill="rgb(226,6,15)" fg:x="277" fg:w="7"/><text x="22.1646%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (7 samples, 0.55%)</title><rect x="21.9146%" y="389" width="0.5538%" height="15" fill="rgb(232,22,54)" fg:x="277" fg:w="7"/><text x="22.1646%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="22.1519%" y="373" width="0.3165%" height="15" fill="rgb(229,222,32)" fg:x="280" fg:w="4"/><text x="22.4019%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="22.2310%" y="357" width="0.2373%" height="15" fill="rgb(228,62,29)" fg:x="281" fg:w="3"/><text x="22.4810%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="22.3101%" y="341" width="0.1582%" height="15" fill="rgb(251,103,34)" fg:x="282" fg:w="2"/><text x="22.5601%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="22.5475%" y="389" width="0.1582%" height="15" fill="rgb(233,12,30)" fg:x="285" fg:w="2"/><text x="22.7975%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.6266%" y="373" width="0.0791%" height="15" fill="rgb(238,52,0)" fg:x="286" fg:w="1"/><text x="22.8766%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.7057%" y="357" width="0.0791%" height="15" fill="rgb(223,98,5)" fg:x="287" fg:w="1"/><text x="22.9557%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="22.8639%" y="325" width="0.0791%" height="15" fill="rgb(228,75,37)" fg:x="289" fg:w="1"/><text x="23.1139%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.24%)</title><rect x="22.7848%" y="357" width="0.2373%" height="15" fill="rgb(205,115,49)" fg:x="288" fg:w="3"/><text x="23.0348%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="22.7848%" y="341" width="0.2373%" height="15" fill="rgb(250,154,43)" fg:x="288" fg:w="3"/><text x="23.0348%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.9430%" y="325" width="0.0791%" height="15" fill="rgb(226,43,29)" fg:x="290" fg:w="1"/><text x="23.1930%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.0222%" y="341" width="0.0791%" height="15" fill="rgb(249,228,39)" fg:x="291" fg:w="1"/><text x="23.2722%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (24 samples, 1.90%)</title><rect x="23.1013%" y="341" width="1.8987%" height="15" fill="rgb(216,79,43)" fg:x="292" fg:w="24"/><text x="23.3513%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (22 samples, 1.74%)</title><rect x="23.2595%" y="325" width="1.7405%" height="15" fill="rgb(228,95,12)" fg:x="294" fg:w="22"/><text x="23.5095%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="24.8418%" y="309" width="0.1582%" height="15" fill="rgb(249,221,15)" fg:x="314" fg:w="2"/><text x="25.0918%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::error::BuildError&gt; (1 samples, 0.08%)</title><rect x="25.0000%" y="341" width="0.0791%" height="15" fill="rgb(233,34,13)" fg:x="316" fg:w="1"/><text x="25.2500%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="25.0791%" y="341" width="0.0791%" height="15" fill="rgb(214,103,39)" fg:x="317" fg:w="1"/><text x="25.3291%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="25.0791%" y="325" width="0.0791%" height="15" fill="rgb(251,126,39)" fg:x="317" fg:w="1"/><text x="25.3291%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="25.0791%" y="309" width="0.0791%" height="15" fill="rgb(214,216,36)" fg:x="317" fg:w="1"/><text x="25.3291%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (12 samples, 0.95%)</title><rect x="25.1582%" y="325" width="0.9494%" height="15" fill="rgb(220,221,8)" fg:x="318" fg:w="12"/><text x="25.4082%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="26.0285%" y="309" width="0.0791%" height="15" fill="rgb(240,216,3)" fg:x="329" fg:w="1"/><text x="26.2785%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.0285%" y="293" width="0.0791%" height="15" fill="rgb(232,218,17)" fg:x="329" fg:w="1"/><text x="26.2785%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="26.1076%" y="325" width="0.0791%" height="15" fill="rgb(229,163,45)" fg:x="330" fg:w="1"/><text x="26.3576%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (14 samples, 1.11%)</title><rect x="25.1582%" y="341" width="1.1076%" height="15" fill="rgb(231,110,42)" fg:x="318" fg:w="14"/><text x="25.4082%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="26.1867%" y="325" width="0.0791%" height="15" fill="rgb(208,170,48)" fg:x="331" fg:w="1"/><text x="26.4367%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="26.1867%" y="309" width="0.0791%" height="15" fill="rgb(239,116,25)" fg:x="331" fg:w="1"/><text x="26.4367%" y="319.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="26.5823%" y="277" width="0.0791%" height="15" fill="rgb(219,200,50)" fg:x="336" fg:w="1"/><text x="26.8323%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.6614%" y="277" width="0.0791%" height="15" fill="rgb(245,200,0)" fg:x="337" fg:w="1"/><text x="26.9114%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="26.7405%" y="277" width="0.1582%" height="15" fill="rgb(245,119,33)" fg:x="338" fg:w="2"/><text x="26.9905%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="26.8987%" y="277" width="0.1582%" height="15" fill="rgb(231,125,12)" fg:x="340" fg:w="2"/><text x="27.1487%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="26.8987%" y="261" width="0.1582%" height="15" fill="rgb(216,96,41)" fg:x="340" fg:w="2"/><text x="27.1487%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.9778%" y="245" width="0.0791%" height="15" fill="rgb(248,43,45)" fg:x="341" fg:w="1"/><text x="27.2278%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.9778%" y="229" width="0.0791%" height="15" fill="rgb(217,222,7)" fg:x="341" fg:w="1"/><text x="27.2278%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.1361%" y="245" width="0.0791%" height="15" fill="rgb(233,28,6)" fg:x="343" fg:w="1"/><text x="27.3861%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.1361%" y="229" width="0.0791%" height="15" fill="rgb(231,218,15)" fg:x="343" fg:w="1"/><text x="27.3861%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.2943%" y="229" width="0.0791%" height="15" fill="rgb(226,171,48)" fg:x="345" fg:w="1"/><text x="27.5443%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.47%)</title><rect x="27.0570%" y="277" width="0.4747%" height="15" fill="rgb(235,201,9)" fg:x="342" fg:w="6"/><text x="27.3070%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.47%)</title><rect x="27.0570%" y="261" width="0.4747%" height="15" fill="rgb(217,80,15)" fg:x="342" fg:w="6"/><text x="27.3070%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="27.2152%" y="245" width="0.3165%" height="15" fill="rgb(219,152,8)" fg:x="344" fg:w="4"/><text x="27.4652%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="27.3734%" y="229" width="0.1582%" height="15" fill="rgb(243,107,38)" fg:x="346" fg:w="2"/><text x="27.6234%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="27.3734%" y="213" width="0.1582%" height="15" fill="rgb(231,17,5)" fg:x="346" fg:w="2"/><text x="27.6234%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="27.3734%" y="197" width="0.1582%" height="15" fill="rgb(209,25,54)" fg:x="346" fg:w="2"/><text x="27.6234%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="27.3734%" y="181" width="0.1582%" height="15" fill="rgb(219,0,2)" fg:x="346" fg:w="2"/><text x="27.6234%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="27.5316%" y="277" width="0.0791%" height="15" fill="rgb(246,9,5)" fg:x="348" fg:w="1"/><text x="27.7816%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="27.5316%" y="261" width="0.0791%" height="15" fill="rgb(226,159,4)" fg:x="348" fg:w="1"/><text x="27.7816%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="27.5316%" y="245" width="0.0791%" height="15" fill="rgb(219,175,34)" fg:x="348" fg:w="1"/><text x="27.7816%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (108 samples, 8.54%)</title><rect x="27.6108%" y="277" width="8.5443%" height="15" fill="rgb(236,10,46)" fg:x="349" fg:w="108"/><text x="27.8608%" y="287.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (108 samples, 8.54%)</title><rect x="27.6108%" y="261" width="8.5443%" height="15" fill="rgb(240,211,16)" fg:x="349" fg:w="108"/><text x="27.8608%" y="271.50">regex_automa..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (108 samples, 8.54%)</title><rect x="27.6108%" y="245" width="8.5443%" height="15" fill="rgb(205,3,43)" fg:x="349" fg:w="108"/><text x="27.8608%" y="255.50">alloc::vec::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (7 samples, 0.55%)</title><rect x="36.1551%" y="277" width="0.5538%" height="15" fill="rgb(245,7,22)" fg:x="457" fg:w="7"/><text x="36.4051%" y="287.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="36.7089%" y="277" width="0.0791%" height="15" fill="rgb(239,132,32)" fg:x="464" fg:w="1"/><text x="36.9589%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (133 samples, 10.52%)</title><rect x="26.3449%" y="325" width="10.5222%" height="15" fill="rgb(228,202,34)" fg:x="333" fg:w="133"/><text x="26.5949%" y="335.50">&lt;core::iter::ad..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (133 samples, 10.52%)</title><rect x="26.3449%" y="309" width="10.5222%" height="15" fill="rgb(254,200,22)" fg:x="333" fg:w="133"/><text x="26.5949%" y="319.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (133 samples, 10.52%)</title><rect x="26.3449%" y="293" width="10.5222%" height="15" fill="rgb(219,10,39)" fg:x="333" fg:w="133"/><text x="26.5949%" y="303.50">regex_automata:..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="36.7880%" y="277" width="0.0791%" height="15" fill="rgb(226,210,39)" fg:x="465" fg:w="1"/><text x="37.0380%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.0253%" y="309" width="0.0791%" height="15" fill="rgb(208,219,16)" fg:x="468" fg:w="1"/><text x="37.2753%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.1044%" y="309" width="0.0791%" height="15" fill="rgb(216,158,51)" fg:x="469" fg:w="1"/><text x="37.3544%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.1044%" y="293" width="0.0791%" height="15" fill="rgb(233,14,44)" fg:x="469" fg:w="1"/><text x="37.3544%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.1044%" y="277" width="0.0791%" height="15" fill="rgb(237,97,39)" fg:x="469" fg:w="1"/><text x="37.3544%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (9 samples, 0.71%)</title><rect x="37.1835%" y="309" width="0.7120%" height="15" fill="rgb(218,198,43)" fg:x="470" fg:w="9"/><text x="37.4335%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="37.6582%" y="293" width="0.2373%" height="15" fill="rgb(231,104,20)" fg:x="476" fg:w="3"/><text x="37.9082%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="37.6582%" y="277" width="0.2373%" height="15" fill="rgb(254,36,13)" fg:x="476" fg:w="3"/><text x="37.9082%" y="287.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="37.6582%" y="261" width="0.2373%" height="15" fill="rgb(248,14,50)" fg:x="476" fg:w="3"/><text x="37.9082%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="38.7658%" y="293" width="0.1582%" height="15" fill="rgb(217,107,29)" fg:x="490" fg:w="2"/><text x="39.0158%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.7658%" y="277" width="0.1582%" height="15" fill="rgb(251,169,33)" fg:x="490" fg:w="2"/><text x="39.0158%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.8449%" y="261" width="0.0791%" height="15" fill="rgb(217,108,32)" fg:x="491" fg:w="1"/><text x="39.0949%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (15 samples, 1.19%)</title><rect x="37.8956%" y="309" width="1.1867%" height="15" fill="rgb(219,66,42)" fg:x="479" fg:w="15"/><text x="38.1456%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="38.9241%" y="293" width="0.1582%" height="15" fill="rgb(206,180,7)" fg:x="492" fg:w="2"/><text x="39.1741%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.0032%" y="277" width="0.0791%" height="15" fill="rgb(208,226,31)" fg:x="493" fg:w="1"/><text x="39.2532%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.0032%" y="261" width="0.0791%" height="15" fill="rgb(218,26,49)" fg:x="493" fg:w="1"/><text x="39.2532%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="39.0823%" y="309" width="0.0791%" height="15" fill="rgb(233,197,48)" fg:x="494" fg:w="1"/><text x="39.3323%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (31 samples, 2.45%)</title><rect x="36.8671%" y="325" width="2.4525%" height="15" fill="rgb(252,181,51)" fg:x="466" fg:w="31"/><text x="37.1171%" y="335.50">re..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="39.1614%" y="309" width="0.1582%" height="15" fill="rgb(253,90,19)" fg:x="495" fg:w="2"/><text x="39.4114%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="39.2405%" y="293" width="0.0791%" height="15" fill="rgb(215,171,30)" fg:x="496" fg:w="1"/><text x="39.4905%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="39.3987%" y="309" width="0.0791%" height="15" fill="rgb(214,222,9)" fg:x="498" fg:w="1"/><text x="39.6487%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.3987%" y="293" width="0.0791%" height="15" fill="rgb(223,3,22)" fg:x="498" fg:w="1"/><text x="39.6487%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3 samples, 0.24%)</title><rect x="39.3196%" y="325" width="0.2373%" height="15" fill="rgb(225,196,46)" fg:x="497" fg:w="3"/><text x="39.5696%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="39.4778%" y="309" width="0.0791%" height="15" fill="rgb(209,110,37)" fg:x="499" fg:w="1"/><text x="39.7278%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.4778%" y="293" width="0.0791%" height="15" fill="rgb(249,89,12)" fg:x="499" fg:w="1"/><text x="39.7278%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.4778%" y="277" width="0.0791%" height="15" fill="rgb(226,27,33)" fg:x="499" fg:w="1"/><text x="39.7278%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.4778%" y="261" width="0.0791%" height="15" fill="rgb(213,82,22)" fg:x="499" fg:w="1"/><text x="39.7278%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (211 samples, 16.69%)</title><rect x="23.0222%" y="357" width="16.6930%" height="15" fill="rgb(248,140,0)" fg:x="291" fg:w="211"/><text x="23.2722%" y="367.50">regex_automata::meta::stra..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (170 samples, 13.45%)</title><rect x="26.2658%" y="341" width="13.4494%" height="15" fill="rgb(228,106,3)" fg:x="332" fg:w="170"/><text x="26.5158%" y="351.50">regex_automata::nfa:..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="39.5570%" y="325" width="0.1582%" height="15" fill="rgb(209,23,37)" fg:x="500" fg:w="2"/><text x="39.8070%" y="335.50"></text></g><g><title>regex_syntax::hir::Class::is_empty (1 samples, 0.08%)</title><rect x="39.6361%" y="309" width="0.0791%" height="15" fill="rgb(241,93,50)" fg:x="501" fg:w="1"/><text x="39.8861%" y="319.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="39.8734%" y="309" width="0.0791%" height="15" fill="rgb(253,46,43)" fg:x="504" fg:w="1"/><text x="40.1234%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.8734%" y="293" width="0.0791%" height="15" fill="rgb(226,206,43)" fg:x="504" fg:w="1"/><text x="40.1234%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.8734%" y="277" width="0.0791%" height="15" fill="rgb(217,54,7)" fg:x="504" fg:w="1"/><text x="40.1234%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.8734%" y="261" width="0.0791%" height="15" fill="rgb(223,5,52)" fg:x="504" fg:w="1"/><text x="40.1234%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="39.9525%" y="309" width="0.0791%" height="15" fill="rgb(206,52,46)" fg:x="505" fg:w="1"/><text x="40.2025%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="39.9525%" y="293" width="0.0791%" height="15" fill="rgb(253,136,11)" fg:x="505" fg:w="1"/><text x="40.2025%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="39.9525%" y="277" width="0.0791%" height="15" fill="rgb(208,106,33)" fg:x="505" fg:w="1"/><text x="40.2025%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="39.9525%" y="261" width="0.0791%" height="15" fill="rgb(206,54,4)" fg:x="505" fg:w="1"/><text x="40.2025%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="40.0316%" y="293" width="0.1582%" height="15" fill="rgb(213,3,15)" fg:x="506" fg:w="2"/><text x="40.2816%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.0316%" y="277" width="0.1582%" height="15" fill="rgb(252,211,39)" fg:x="506" fg:w="2"/><text x="40.2816%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="40.0316%" y="261" width="0.1582%" height="15" fill="rgb(223,6,36)" fg:x="506" fg:w="2"/><text x="40.2816%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.55%)</title><rect x="39.7152%" y="325" width="0.5538%" height="15" fill="rgb(252,169,45)" fg:x="502" fg:w="7"/><text x="39.9652%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="40.0316%" y="309" width="0.2373%" height="15" fill="rgb(212,48,26)" fg:x="506" fg:w="3"/><text x="40.2816%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="40.1899%" y="293" width="0.0791%" height="15" fill="rgb(251,102,48)" fg:x="508" fg:w="1"/><text x="40.4399%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="40.1899%" y="277" width="0.0791%" height="15" fill="rgb(243,208,16)" fg:x="508" fg:w="1"/><text x="40.4399%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.63%)</title><rect x="39.7152%" y="357" width="0.6329%" height="15" fill="rgb(219,96,24)" fg:x="502" fg:w="8"/><text x="39.9652%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.63%)</title><rect x="39.7152%" y="341" width="0.6329%" height="15" fill="rgb(219,33,29)" fg:x="502" fg:w="8"/><text x="39.9652%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="40.2690%" y="325" width="0.0791%" height="15" fill="rgb(223,176,5)" fg:x="509" fg:w="1"/><text x="40.5190%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="40.2690%" y="309" width="0.0791%" height="15" fill="rgb(228,140,14)" fg:x="509" fg:w="1"/><text x="40.5190%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.5063%" y="309" width="0.0791%" height="15" fill="rgb(217,179,31)" fg:x="512" fg:w="1"/><text x="40.7563%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.5063%" y="293" width="0.0791%" height="15" fill="rgb(230,9,30)" fg:x="512" fg:w="1"/><text x="40.7563%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.5063%" y="277" width="0.0791%" height="15" fill="rgb(230,136,20)" fg:x="512" fg:w="1"/><text x="40.7563%" y="287.50"></text></g><g><title>regex::regex::string::Regex::new (231 samples, 18.28%)</title><rect x="22.4684%" y="405" width="18.2753%" height="15" fill="rgb(215,210,22)" fg:x="284" fg:w="231"/><text x="22.7184%" y="415.50">regex::regex::string::Regex:..</text></g><g><title>regex::builders::Builder::build_one_string (228 samples, 18.04%)</title><rect x="22.7057%" y="389" width="18.0380%" height="15" fill="rgb(218,43,5)" fg:x="287" fg:w="228"/><text x="22.9557%" y="399.50">regex::builders::Builder::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (228 samples, 18.04%)</title><rect x="22.7057%" y="373" width="18.0380%" height="15" fill="rgb(216,11,5)" fg:x="287" fg:w="228"/><text x="22.9557%" y="383.50">regex_automata::meta::regex:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="40.3481%" y="357" width="0.3956%" height="15" fill="rgb(209,82,29)" fg:x="510" fg:w="5"/><text x="40.5981%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="40.3481%" y="341" width="0.3956%" height="15" fill="rgb(244,115,12)" fg:x="510" fg:w="5"/><text x="40.5981%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="40.5063%" y="325" width="0.2373%" height="15" fill="rgb(222,82,18)" fg:x="512" fg:w="3"/><text x="40.7563%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="40.5854%" y="309" width="0.1582%" height="15" fill="rgb(249,227,8)" fg:x="513" fg:w="2"/><text x="40.8354%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.6646%" y="293" width="0.0791%" height="15" fill="rgb(253,141,45)" fg:x="514" fg:w="1"/><text x="40.9146%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.9810%" y="325" width="0.0791%" height="15" fill="rgb(234,184,4)" fg:x="518" fg:w="1"/><text x="41.2310%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.9810%" y="309" width="0.0791%" height="15" fill="rgb(218,194,23)" fg:x="518" fg:w="1"/><text x="41.2310%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="40.9810%" y="293" width="0.0791%" height="15" fill="rgb(235,66,41)" fg:x="518" fg:w="1"/><text x="41.2310%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.55%)</title><rect x="40.8228%" y="341" width="0.5538%" height="15" fill="rgb(245,217,1)" fg:x="516" fg:w="7"/><text x="41.0728%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="41.0601%" y="325" width="0.3165%" height="15" fill="rgb(229,91,1)" fg:x="519" fg:w="4"/><text x="41.3101%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.71%)</title><rect x="40.8228%" y="357" width="0.7120%" height="15" fill="rgb(207,101,30)" fg:x="516" fg:w="9"/><text x="41.0728%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="41.3766%" y="341" width="0.1582%" height="15" fill="rgb(223,82,49)" fg:x="523" fg:w="2"/><text x="41.6266%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="41.3766%" y="325" width="0.1582%" height="15" fill="rgb(218,167,17)" fg:x="523" fg:w="2"/><text x="41.6266%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.4557%" y="309" width="0.0791%" height="15" fill="rgb(208,103,14)" fg:x="524" fg:w="1"/><text x="41.7057%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.4557%" y="293" width="0.0791%" height="15" fill="rgb(238,20,8)" fg:x="524" fg:w="1"/><text x="41.7057%" y="303.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (256 samples, 20.25%)</title><rect x="21.3608%" y="421" width="20.2532%" height="15" fill="rgb(218,80,54)" fg:x="270" fg:w="256"/><text x="21.6108%" y="431.50">indefinite::helper::Helper::get_..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.87%)</title><rect x="40.7437%" y="405" width="0.8703%" height="15" fill="rgb(240,144,17)" fg:x="515" fg:w="11"/><text x="40.9937%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.79%)</title><rect x="40.8228%" y="389" width="0.7911%" height="15" fill="rgb(245,27,50)" fg:x="516" fg:w="10"/><text x="41.0728%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.79%)</title><rect x="40.8228%" y="373" width="0.7911%" height="15" fill="rgb(251,51,7)" fg:x="516" fg:w="10"/><text x="41.0728%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="41.5348%" y="357" width="0.0791%" height="15" fill="rgb(245,217,29)" fg:x="525" fg:w="1"/><text x="41.7848%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="41.5348%" y="341" width="0.0791%" height="15" fill="rgb(221,176,29)" fg:x="525" fg:w="1"/><text x="41.7848%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="41.6930%" y="373" width="0.0791%" height="15" fill="rgb(212,180,24)" fg:x="527" fg:w="1"/><text x="41.9430%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="41.6930%" y="357" width="0.0791%" height="15" fill="rgb(254,24,2)" fg:x="527" fg:w="1"/><text x="41.9430%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.6930%" y="341" width="0.0791%" height="15" fill="rgb(230,100,2)" fg:x="527" fg:w="1"/><text x="41.9430%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.6930%" y="325" width="0.0791%" height="15" fill="rgb(219,142,25)" fg:x="527" fg:w="1"/><text x="41.9430%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="41.6930%" y="405" width="0.1582%" height="15" fill="rgb(240,73,43)" fg:x="527" fg:w="2"/><text x="41.9430%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="41.6930%" y="389" width="0.1582%" height="15" fill="rgb(214,114,15)" fg:x="527" fg:w="2"/><text x="41.9430%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="41.7722%" y="373" width="0.0791%" height="15" fill="rgb(207,130,4)" fg:x="528" fg:w="1"/><text x="42.0222%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="41.7722%" y="357" width="0.0791%" height="15" fill="rgb(221,25,40)" fg:x="528" fg:w="1"/><text x="42.0222%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="41.8513%" y="389" width="0.1582%" height="15" fill="rgb(241,184,7)" fg:x="529" fg:w="2"/><text x="42.1013%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="41.8513%" y="373" width="0.1582%" height="15" fill="rgb(235,159,4)" fg:x="529" fg:w="2"/><text x="42.1013%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="41.8513%" y="357" width="0.1582%" height="15" fill="rgb(214,87,48)" fg:x="529" fg:w="2"/><text x="42.1013%" y="367.50"></text></g><g><title>regex_automata::util::determinize::set_lookbehind_from_start (1 samples, 0.08%)</title><rect x="41.9304%" y="341" width="0.0791%" height="15" fill="rgb(246,198,24)" fg:x="530" fg:w="1"/><text x="42.1804%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="42.7215%" y="309" width="0.1582%" height="15" fill="rgb(209,66,40)" fg:x="540" fg:w="2"/><text x="42.9715%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="42.7215%" y="293" width="0.1582%" height="15" fill="rgb(233,147,39)" fg:x="540" fg:w="2"/><text x="42.9715%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="42.7215%" y="277" width="0.1582%" height="15" fill="rgb(231,145,52)" fg:x="540" fg:w="2"/><text x="42.9715%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (16 samples, 1.27%)</title><rect x="42.0886%" y="325" width="1.2658%" height="15" fill="rgb(206,20,26)" fg:x="532" fg:w="16"/><text x="42.3386%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (6 samples, 0.47%)</title><rect x="42.8797%" y="309" width="0.4747%" height="15" fill="rgb(238,220,4)" fg:x="542" fg:w="6"/><text x="43.1297%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (18 samples, 1.42%)</title><rect x="42.0886%" y="341" width="1.4241%" height="15" fill="rgb(252,195,42)" fg:x="532" fg:w="18"/><text x="42.3386%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="43.3544%" y="325" width="0.1582%" height="15" fill="rgb(209,10,6)" fg:x="548" fg:w="2"/><text x="43.6044%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="43.3544%" y="309" width="0.1582%" height="15" fill="rgb(229,3,52)" fg:x="548" fg:w="2"/><text x="43.6044%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.3544%" y="293" width="0.1582%" height="15" fill="rgb(253,49,37)" fg:x="548" fg:w="2"/><text x="43.6044%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="43.3544%" y="277" width="0.1582%" height="15" fill="rgb(240,103,49)" fg:x="548" fg:w="2"/><text x="43.6044%" y="287.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (23 samples, 1.82%)</title><rect x="41.8513%" y="405" width="1.8196%" height="15" fill="rgb(250,182,30)" fg:x="529" fg:w="23"/><text x="42.1013%" y="415.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (21 samples, 1.66%)</title><rect x="42.0095%" y="389" width="1.6614%" height="15" fill="rgb(248,8,30)" fg:x="531" fg:w="21"/><text x="42.2595%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (21 samples, 1.66%)</title><rect x="42.0095%" y="373" width="1.6614%" height="15" fill="rgb(237,120,30)" fg:x="531" fg:w="21"/><text x="42.2595%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (21 samples, 1.66%)</title><rect x="42.0095%" y="357" width="1.6614%" height="15" fill="rgb(221,146,34)" fg:x="531" fg:w="21"/><text x="42.2595%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="43.5127%" y="341" width="0.1582%" height="15" fill="rgb(242,55,13)" fg:x="550" fg:w="2"/><text x="43.7627%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="43.5127%" y="325" width="0.1582%" height="15" fill="rgb(242,112,31)" fg:x="550" fg:w="2"/><text x="43.7627%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="43.5127%" y="309" width="0.1582%" height="15" fill="rgb(249,192,27)" fg:x="550" fg:w="2"/><text x="43.7627%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.5127%" y="293" width="0.1582%" height="15" fill="rgb(208,204,44)" fg:x="550" fg:w="2"/><text x="43.7627%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="43.5127%" y="277" width="0.1582%" height="15" fill="rgb(208,93,54)" fg:x="550" fg:w="2"/><text x="43.7627%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="43.6709%" y="389" width="0.0791%" height="15" fill="rgb(242,1,31)" fg:x="552" fg:w="1"/><text x="43.9209%" y="399.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="43.8291%" y="325" width="0.0791%" height="15" fill="rgb(241,83,25)" fg:x="554" fg:w="1"/><text x="44.0791%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="43.7500%" y="357" width="0.2373%" height="15" fill="rgb(205,169,50)" fg:x="553" fg:w="3"/><text x="44.0000%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="43.7500%" y="341" width="0.2373%" height="15" fill="rgb(239,186,37)" fg:x="553" fg:w="3"/><text x="44.0000%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.9082%" y="325" width="0.0791%" height="15" fill="rgb(205,221,10)" fg:x="555" fg:w="1"/><text x="44.1582%" y="335.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="43.9873%" y="357" width="0.0791%" height="15" fill="rgb(218,196,15)" fg:x="556" fg:w="1"/><text x="44.2373%" y="367.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="43.9873%" y="341" width="0.0791%" height="15" fill="rgb(218,196,35)" fg:x="556" fg:w="1"/><text x="44.2373%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.9873%" y="325" width="0.0791%" height="15" fill="rgb(233,63,24)" fg:x="556" fg:w="1"/><text x="44.2373%" y="335.50"></text></g><g><title>__libc_free (5 samples, 0.40%)</title><rect x="44.3038%" y="325" width="0.3956%" height="15" fill="rgb(225,8,4)" fg:x="560" fg:w="5"/><text x="44.5538%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.11%)</title><rect x="44.3038%" y="341" width="1.1076%" height="15" fill="rgb(234,105,35)" fg:x="560" fg:w="14"/><text x="44.5538%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.71%)</title><rect x="44.6994%" y="325" width="0.7120%" height="15" fill="rgb(236,21,32)" fg:x="565" fg:w="9"/><text x="44.9494%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.3323%" y="309" width="0.0791%" height="15" fill="rgb(228,109,6)" fg:x="573" fg:w="1"/><text x="45.5823%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="45.4114%" y="325" width="0.0791%" height="15" fill="rgb(229,215,31)" fg:x="574" fg:w="1"/><text x="45.6614%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="45.4114%" y="309" width="0.0791%" height="15" fill="rgb(221,52,54)" fg:x="574" fg:w="1"/><text x="45.6614%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.55%)</title><rect x="45.4114%" y="341" width="0.5538%" height="15" fill="rgb(252,129,43)" fg:x="574" fg:w="7"/><text x="45.6614%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.47%)</title><rect x="45.4905%" y="325" width="0.4747%" height="15" fill="rgb(248,183,27)" fg:x="575" fg:w="6"/><text x="45.7405%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="46.1234%" y="309" width="0.3165%" height="15" fill="rgb(250,0,22)" fg:x="583" fg:w="4"/><text x="46.3734%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="46.2025%" y="293" width="0.2373%" height="15" fill="rgb(213,166,10)" fg:x="584" fg:w="3"/><text x="46.4525%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="46.2025%" y="277" width="0.2373%" height="15" fill="rgb(207,163,36)" fg:x="584" fg:w="3"/><text x="46.4525%" y="287.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="46.2025%" y="261" width="0.2373%" height="15" fill="rgb(208,122,22)" fg:x="584" fg:w="3"/><text x="46.4525%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="46.6772%" y="277" width="0.1582%" height="15" fill="rgb(207,104,49)" fg:x="590" fg:w="2"/><text x="46.9272%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="46.6772%" y="261" width="0.1582%" height="15" fill="rgb(248,211,50)" fg:x="590" fg:w="2"/><text x="46.9272%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="46.6772%" y="245" width="0.1582%" height="15" fill="rgb(217,13,45)" fg:x="590" fg:w="2"/><text x="46.9272%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.47%)</title><rect x="46.4399%" y="309" width="0.4747%" height="15" fill="rgb(211,216,49)" fg:x="587" fg:w="6"/><text x="46.6899%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="46.6772%" y="293" width="0.2373%" height="15" fill="rgb(221,58,53)" fg:x="590" fg:w="3"/><text x="46.9272%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.8354%" y="277" width="0.0791%" height="15" fill="rgb(220,112,41)" fg:x="592" fg:w="1"/><text x="47.0854%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.8354%" y="261" width="0.0791%" height="15" fill="rgb(236,38,28)" fg:x="592" fg:w="1"/><text x="47.0854%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.8354%" y="245" width="0.0791%" height="15" fill="rgb(227,195,22)" fg:x="592" fg:w="1"/><text x="47.0854%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (9 samples, 0.71%)</title><rect x="46.9146%" y="309" width="0.7120%" height="15" fill="rgb(214,55,33)" fg:x="593" fg:w="9"/><text x="47.1646%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (9 samples, 0.71%)</title><rect x="46.9146%" y="293" width="0.7120%" height="15" fill="rgb(248,80,13)" fg:x="593" fg:w="9"/><text x="47.1646%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (9 samples, 0.71%)</title><rect x="46.9146%" y="277" width="0.7120%" height="15" fill="rgb(238,52,6)" fg:x="593" fg:w="9"/><text x="47.1646%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (22 samples, 1.74%)</title><rect x="45.9652%" y="341" width="1.7405%" height="15" fill="rgb(224,198,47)" fg:x="581" fg:w="22"/><text x="46.2152%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (22 samples, 1.74%)</title><rect x="45.9652%" y="325" width="1.7405%" height="15" fill="rgb(233,171,20)" fg:x="581" fg:w="22"/><text x="46.2152%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="47.6266%" y="309" width="0.0791%" height="15" fill="rgb(241,30,25)" fg:x="602" fg:w="1"/><text x="47.8766%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="47.7848%" y="293" width="0.1582%" height="15" fill="rgb(207,171,38)" fg:x="604" fg:w="2"/><text x="48.0348%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="47.7848%" y="277" width="0.1582%" height="15" fill="rgb(234,70,1)" fg:x="604" fg:w="2"/><text x="48.0348%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="47.7848%" y="261" width="0.1582%" height="15" fill="rgb(232,178,18)" fg:x="604" fg:w="2"/><text x="48.0348%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="47.7848%" y="245" width="0.1582%" height="15" fill="rgb(241,78,40)" fg:x="604" fg:w="2"/><text x="48.0348%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="48.0222%" y="261" width="0.0791%" height="15" fill="rgb(222,35,25)" fg:x="607" fg:w="1"/><text x="48.2722%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="48.1013%" y="261" width="0.0791%" height="15" fill="rgb(207,92,16)" fg:x="608" fg:w="1"/><text x="48.3513%" y="271.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="49.5253%" y="229" width="0.1582%" height="15" fill="rgb(216,59,51)" fg:x="626" fg:w="2"/><text x="49.7753%" y="239.50"></text></g><g><title>__libc_free (5 samples, 0.40%)</title><rect x="49.6835%" y="229" width="0.3956%" height="15" fill="rgb(213,80,28)" fg:x="628" fg:w="5"/><text x="49.9335%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="50.0791%" y="229" width="0.3165%" height="15" fill="rgb(220,93,7)" fg:x="633" fg:w="4"/><text x="50.3291%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.3165%" y="213" width="0.0791%" height="15" fill="rgb(225,24,44)" fg:x="636" fg:w="1"/><text x="50.5665%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.3165%" y="197" width="0.0791%" height="15" fill="rgb(243,74,40)" fg:x="636" fg:w="1"/><text x="50.5665%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.3165%" y="181" width="0.0791%" height="15" fill="rgb(228,39,7)" fg:x="636" fg:w="1"/><text x="50.5665%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (4 samples, 0.32%)</title><rect x="50.3956%" y="229" width="0.3165%" height="15" fill="rgb(227,79,8)" fg:x="637" fg:w="4"/><text x="50.6456%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.9494%" y="197" width="0.0791%" height="15" fill="rgb(236,58,11)" fg:x="644" fg:w="1"/><text x="51.1994%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.9494%" y="181" width="0.0791%" height="15" fill="rgb(249,63,35)" fg:x="644" fg:w="1"/><text x="51.1994%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.9494%" y="165" width="0.0791%" height="15" fill="rgb(252,114,16)" fg:x="644" fg:w="1"/><text x="51.1994%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.47%)</title><rect x="50.7120%" y="229" width="0.4747%" height="15" fill="rgb(254,151,24)" fg:x="641" fg:w="6"/><text x="50.9620%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="50.7911%" y="213" width="0.3956%" height="15" fill="rgb(253,54,39)" fg:x="642" fg:w="5"/><text x="51.0411%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="51.0285%" y="197" width="0.1582%" height="15" fill="rgb(243,25,45)" fg:x="645" fg:w="2"/><text x="51.2785%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="51.1867%" y="229" width="0.0791%" height="15" fill="rgb(234,134,9)" fg:x="647" fg:w="1"/><text x="51.4367%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="51.2658%" y="213" width="0.1582%" height="15" fill="rgb(227,166,31)" fg:x="648" fg:w="2"/><text x="51.5158%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="51.2658%" y="197" width="0.1582%" height="15" fill="rgb(245,143,41)" fg:x="648" fg:w="2"/><text x="51.5158%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="51.2658%" y="181" width="0.1582%" height="15" fill="rgb(238,181,32)" fg:x="648" fg:w="2"/><text x="51.5158%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (77 samples, 6.09%)</title><rect x="51.2658%" y="229" width="6.0918%" height="15" fill="rgb(224,113,18)" fg:x="648" fg:w="77"/><text x="51.5158%" y="239.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (75 samples, 5.93%)</title><rect x="51.4241%" y="213" width="5.9335%" height="15" fill="rgb(240,229,28)" fg:x="650" fg:w="75"/><text x="51.6741%" y="223.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (75 samples, 5.93%)</title><rect x="51.4241%" y="197" width="5.9335%" height="15" fill="rgb(250,185,3)" fg:x="650" fg:w="75"/><text x="51.6741%" y="207.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (9 samples, 0.71%)</title><rect x="57.3576%" y="229" width="0.7120%" height="15" fill="rgb(212,59,25)" fg:x="725" fg:w="9"/><text x="57.6076%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (138 samples, 10.92%)</title><rect x="47.7848%" y="325" width="10.9177%" height="15" fill="rgb(221,87,20)" fg:x="604" fg:w="138"/><text x="48.0348%" y="335.50">&lt;core::iter::ada..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (138 samples, 10.92%)</title><rect x="47.7848%" y="309" width="10.9177%" height="15" fill="rgb(213,74,28)" fg:x="604" fg:w="138"/><text x="48.0348%" y="319.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (136 samples, 10.76%)</title><rect x="47.9430%" y="293" width="10.7595%" height="15" fill="rgb(224,132,34)" fg:x="606" fg:w="136"/><text x="48.1930%" y="303.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (135 samples, 10.68%)</title><rect x="48.0222%" y="277" width="10.6804%" height="15" fill="rgb(222,101,24)" fg:x="607" fg:w="135"/><text x="48.2722%" y="287.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (133 samples, 10.52%)</title><rect x="48.1804%" y="261" width="10.5222%" height="15" fill="rgb(254,142,4)" fg:x="609" fg:w="133"/><text x="48.4304%" y="271.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (133 samples, 10.52%)</title><rect x="48.1804%" y="245" width="10.5222%" height="15" fill="rgb(230,229,49)" fg:x="609" fg:w="133"/><text x="48.4304%" y="255.50">regex_automata:..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (8 samples, 0.63%)</title><rect x="58.0696%" y="229" width="0.6329%" height="15" fill="rgb(238,70,47)" fg:x="734" fg:w="8"/><text x="58.3196%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="58.4652%" y="213" width="0.2373%" height="15" fill="rgb(231,160,17)" fg:x="739" fg:w="3"/><text x="58.7152%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.6234%" y="197" width="0.0791%" height="15" fill="rgb(218,68,53)" fg:x="741" fg:w="1"/><text x="58.8734%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.6234%" y="181" width="0.0791%" height="15" fill="rgb(236,111,10)" fg:x="741" fg:w="1"/><text x="58.8734%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.7816%" y="309" width="0.0791%" height="15" fill="rgb(224,34,41)" fg:x="743" fg:w="1"/><text x="59.0316%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.63%)</title><rect x="58.8608%" y="309" width="0.6329%" height="15" fill="rgb(241,118,19)" fg:x="744" fg:w="8"/><text x="59.1108%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="59.1772%" y="293" width="0.3165%" height="15" fill="rgb(238,129,25)" fg:x="748" fg:w="4"/><text x="59.4272%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="59.2563%" y="277" width="0.2373%" height="15" fill="rgb(238,22,31)" fg:x="749" fg:w="3"/><text x="59.5063%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="59.3354%" y="261" width="0.1582%" height="15" fill="rgb(222,174,48)" fg:x="750" fg:w="2"/><text x="59.5854%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.47%)</title><rect x="59.4937%" y="309" width="0.4747%" height="15" fill="rgb(206,152,40)" fg:x="752" fg:w="6"/><text x="59.7437%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.8892%" y="293" width="0.0791%" height="15" fill="rgb(218,99,54)" fg:x="757" fg:w="1"/><text x="60.1392%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="59.9684%" y="309" width="0.1582%" height="15" fill="rgb(220,174,26)" fg:x="758" fg:w="2"/><text x="60.2184%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.1266%" y="293" width="0.0791%" height="15" fill="rgb(245,116,9)" fg:x="760" fg:w="1"/><text x="60.3766%" y="303.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="60.1266%" y="309" width="0.1582%" height="15" fill="rgb(209,72,35)" fg:x="760" fg:w="2"/><text x="60.3766%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="60.2057%" y="293" width="0.0791%" height="15" fill="rgb(226,126,21)" fg:x="761" fg:w="1"/><text x="60.4557%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.2057%" y="277" width="0.0791%" height="15" fill="rgb(227,192,1)" fg:x="761" fg:w="1"/><text x="60.4557%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.2057%" y="261" width="0.0791%" height="15" fill="rgb(237,180,29)" fg:x="761" fg:w="1"/><text x="60.4557%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.2057%" y="245" width="0.0791%" height="15" fill="rgb(230,197,35)" fg:x="761" fg:w="1"/><text x="60.4557%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (160 samples, 12.66%)</title><rect x="47.7057%" y="341" width="12.6582%" height="15" fill="rgb(246,193,31)" fg:x="603" fg:w="160"/><text x="47.9557%" y="351.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (21 samples, 1.66%)</title><rect x="58.7025%" y="325" width="1.6614%" height="15" fill="rgb(241,36,4)" fg:x="742" fg:w="21"/><text x="58.9525%" y="335.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="60.2848%" y="309" width="0.0791%" height="15" fill="rgb(241,130,17)" fg:x="762" fg:w="1"/><text x="60.5348%" y="319.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="60.2848%" y="293" width="0.0791%" height="15" fill="rgb(206,137,32)" fg:x="762" fg:w="1"/><text x="60.5348%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (208 samples, 16.46%)</title><rect x="44.0665%" y="357" width="16.4557%" height="15" fill="rgb(237,228,51)" fg:x="557" fg:w="208"/><text x="44.3165%" y="367.50">regex_automata::meta::str..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="60.3639%" y="341" width="0.1582%" height="15" fill="rgb(243,6,42)" fg:x="763" fg:w="2"/><text x="60.6139%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="60.3639%" y="325" width="0.1582%" height="15" fill="rgb(251,74,28)" fg:x="763" fg:w="2"/><text x="60.6139%" y="335.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="60.6013%" y="309" width="0.0791%" height="15" fill="rgb(218,20,49)" fg:x="766" fg:w="1"/><text x="60.8513%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="60.7595%" y="293" width="0.2373%" height="15" fill="rgb(238,28,14)" fg:x="768" fg:w="3"/><text x="61.0095%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="60.7595%" y="277" width="0.2373%" height="15" fill="rgb(229,40,46)" fg:x="768" fg:w="3"/><text x="61.0095%" y="287.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="60.7595%" y="261" width="0.2373%" height="15" fill="rgb(244,195,20)" fg:x="768" fg:w="3"/><text x="61.0095%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.55%)</title><rect x="60.5222%" y="325" width="0.5538%" height="15" fill="rgb(253,56,35)" fg:x="765" fg:w="7"/><text x="60.7722%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="60.6804%" y="309" width="0.3956%" height="15" fill="rgb(210,149,44)" fg:x="767" fg:w="5"/><text x="60.9304%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="60.9968%" y="293" width="0.0791%" height="15" fill="rgb(240,135,12)" fg:x="771" fg:w="1"/><text x="61.2468%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="61.0759%" y="325" width="0.0791%" height="15" fill="rgb(251,24,50)" fg:x="772" fg:w="1"/><text x="61.3259%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="61.0759%" y="309" width="0.0791%" height="15" fill="rgb(243,200,47)" fg:x="772" fg:w="1"/><text x="61.3259%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.87%)</title><rect x="60.5222%" y="357" width="0.8703%" height="15" fill="rgb(224,166,26)" fg:x="765" fg:w="11"/><text x="60.7722%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.87%)</title><rect x="60.5222%" y="341" width="0.8703%" height="15" fill="rgb(233,0,47)" fg:x="765" fg:w="11"/><text x="60.7722%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="61.1551%" y="325" width="0.2373%" height="15" fill="rgb(253,80,5)" fg:x="773" fg:w="3"/><text x="61.4051%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="61.3133%" y="309" width="0.0791%" height="15" fill="rgb(214,133,25)" fg:x="775" fg:w="1"/><text x="61.5633%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.55%)</title><rect x="61.3924%" y="325" width="0.5538%" height="15" fill="rgb(209,27,14)" fg:x="776" fg:w="7"/><text x="61.6424%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (7 samples, 0.55%)</title><rect x="61.3924%" y="309" width="0.5538%" height="15" fill="rgb(219,102,51)" fg:x="776" fg:w="7"/><text x="61.6424%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.24%)</title><rect x="61.7089%" y="293" width="0.2373%" height="15" fill="rgb(237,18,16)" fg:x="780" fg:w="3"/><text x="61.9589%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="61.9462%" y="325" width="0.1582%" height="15" fill="rgb(241,85,17)" fg:x="783" fg:w="2"/><text x="62.1962%" y="335.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="62.0253%" y="309" width="0.0791%" height="15" fill="rgb(236,90,42)" fg:x="784" fg:w="1"/><text x="62.2753%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.0253%" y="293" width="0.0791%" height="15" fill="rgb(249,57,21)" fg:x="784" fg:w="1"/><text x="62.2753%" y="303.50"></text></g><g><title>indefinite::rules::number::Number::check (262 samples, 20.73%)</title><rect x="41.6139%" y="421" width="20.7278%" height="15" fill="rgb(243,12,36)" fg:x="526" fg:w="262"/><text x="41.8639%" y="431.50">indefinite::rules::number::Number..</text></g><g><title>regex::regex::string::Regex::new (236 samples, 18.67%)</title><rect x="43.6709%" y="405" width="18.6709%" height="15" fill="rgb(253,128,47)" fg:x="552" fg:w="236"/><text x="43.9209%" y="415.50">regex::regex::string::Regex::..</text></g><g><title>regex::builders::Builder::build_one_string (235 samples, 18.59%)</title><rect x="43.7500%" y="389" width="18.5918%" height="15" fill="rgb(207,33,20)" fg:x="553" fg:w="235"/><text x="44.0000%" y="399.50">regex::builders::Builder::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (235 samples, 18.59%)</title><rect x="43.7500%" y="373" width="18.5918%" height="15" fill="rgb(233,215,35)" fg:x="553" fg:w="235"/><text x="44.0000%" y="383.50">regex_automata::meta::regex::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (12 samples, 0.95%)</title><rect x="61.3924%" y="357" width="0.9494%" height="15" fill="rgb(249,188,52)" fg:x="776" fg:w="12"/><text x="61.6424%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (12 samples, 0.95%)</title><rect x="61.3924%" y="341" width="0.9494%" height="15" fill="rgb(225,12,32)" fg:x="776" fg:w="12"/><text x="61.6424%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (3 samples, 0.24%)</title><rect x="62.1044%" y="325" width="0.2373%" height="15" fill="rgb(247,98,14)" fg:x="785" fg:w="3"/><text x="62.3544%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (2 samples, 0.16%)</title><rect x="62.1835%" y="309" width="0.1582%" height="15" fill="rgb(247,219,48)" fg:x="786" fg:w="2"/><text x="62.4335%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="62.1835%" y="293" width="0.1582%" height="15" fill="rgb(253,60,48)" fg:x="786" fg:w="2"/><text x="62.4335%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="62.1835%" y="277" width="0.1582%" height="15" fill="rgb(245,15,52)" fg:x="786" fg:w="2"/><text x="62.4335%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.2627%" y="261" width="0.0791%" height="15" fill="rgb(220,133,28)" fg:x="787" fg:w="1"/><text x="62.5127%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="62.3418%" y="389" width="0.0791%" height="15" fill="rgb(217,180,4)" fg:x="788" fg:w="1"/><text x="62.5918%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="62.3418%" y="373" width="0.0791%" height="15" fill="rgb(251,24,1)" fg:x="788" fg:w="1"/><text x="62.5918%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="62.3418%" y="357" width="0.0791%" height="15" fill="rgb(212,185,49)" fg:x="788" fg:w="1"/><text x="62.5918%" y="367.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="62.3418%" y="341" width="0.0791%" height="15" fill="rgb(215,175,22)" fg:x="788" fg:w="1"/><text x="62.5918%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="62.4209%" y="357" width="0.1582%" height="15" fill="rgb(250,205,14)" fg:x="789" fg:w="2"/><text x="62.6709%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="62.4209%" y="341" width="0.1582%" height="15" fill="rgb(225,211,22)" fg:x="789" fg:w="2"/><text x="62.6709%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.5000%" y="325" width="0.0791%" height="15" fill="rgb(251,179,42)" fg:x="790" fg:w="1"/><text x="62.7500%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="62.4209%" y="389" width="0.3165%" height="15" fill="rgb(208,216,51)" fg:x="789" fg:w="4"/><text x="62.6709%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="62.4209%" y="373" width="0.3165%" height="15" fill="rgb(235,36,11)" fg:x="789" fg:w="4"/><text x="62.6709%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="62.5791%" y="357" width="0.1582%" height="15" fill="rgb(213,189,28)" fg:x="791" fg:w="2"/><text x="62.8291%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (2 samples, 0.16%)</title><rect x="62.5791%" y="341" width="0.1582%" height="15" fill="rgb(227,203,42)" fg:x="791" fg:w="2"/><text x="62.8291%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="62.5791%" y="325" width="0.1582%" height="15" fill="rgb(244,72,36)" fg:x="791" fg:w="2"/><text x="62.8291%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.7373%" y="341" width="0.0791%" height="15" fill="rgb(213,53,17)" fg:x="793" fg:w="1"/><text x="62.9873%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.7373%" y="325" width="0.0791%" height="15" fill="rgb(207,167,3)" fg:x="793" fg:w="1"/><text x="62.9873%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="62.7373%" y="309" width="0.0791%" height="15" fill="rgb(216,98,30)" fg:x="793" fg:w="1"/><text x="62.9873%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.7373%" y="293" width="0.0791%" height="15" fill="rgb(236,123,15)" fg:x="793" fg:w="1"/><text x="62.9873%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.7373%" y="277" width="0.0791%" height="15" fill="rgb(248,81,50)" fg:x="793" fg:w="1"/><text x="62.9873%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.7373%" y="261" width="0.0791%" height="15" fill="rgb(214,120,4)" fg:x="793" fg:w="1"/><text x="62.9873%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.8165%" y="341" width="0.0791%" height="15" fill="rgb(208,179,34)" fg:x="794" fg:w="1"/><text x="63.0665%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="62.8956%" y="277" width="0.1582%" height="15" fill="rgb(227,140,7)" fg:x="795" fg:w="2"/><text x="63.1456%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.9747%" y="261" width="0.0791%" height="15" fill="rgb(214,22,6)" fg:x="796" fg:w="1"/><text x="63.2247%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="62.8956%" y="341" width="0.2373%" height="15" fill="rgb(207,137,27)" fg:x="795" fg:w="3"/><text x="63.1456%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="62.8956%" y="325" width="0.2373%" height="15" fill="rgb(210,8,46)" fg:x="795" fg:w="3"/><text x="63.1456%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="62.8956%" y="309" width="0.2373%" height="15" fill="rgb(240,16,54)" fg:x="795" fg:w="3"/><text x="63.1456%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="62.8956%" y="293" width="0.2373%" height="15" fill="rgb(211,209,29)" fg:x="795" fg:w="3"/><text x="63.1456%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="63.0538%" y="277" width="0.0791%" height="15" fill="rgb(226,228,24)" fg:x="797" fg:w="1"/><text x="63.3038%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.0538%" y="261" width="0.0791%" height="15" fill="rgb(222,84,9)" fg:x="797" fg:w="1"/><text x="63.3038%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="63.4494%" y="325" width="0.0791%" height="15" fill="rgb(234,203,30)" fg:x="802" fg:w="1"/><text x="63.6994%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="63.5285%" y="325" width="0.0791%" height="15" fill="rgb(238,109,14)" fg:x="803" fg:w="1"/><text x="63.7785%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="63.5285%" y="309" width="0.0791%" height="15" fill="rgb(233,206,34)" fg:x="803" fg:w="1"/><text x="63.7785%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="63.6076%" y="325" width="0.3165%" height="15" fill="rgb(220,167,47)" fg:x="804" fg:w="4"/><text x="63.8576%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="63.6867%" y="309" width="0.2373%" height="15" fill="rgb(238,105,10)" fg:x="805" fg:w="3"/><text x="63.9367%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="63.9241%" y="325" width="0.0791%" height="15" fill="rgb(213,227,17)" fg:x="808" fg:w="1"/><text x="64.1741%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.47%)</title><rect x="64.0032%" y="309" width="0.4747%" height="15" fill="rgb(217,132,38)" fg:x="809" fg:w="6"/><text x="64.2532%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (6 samples, 0.47%)</title><rect x="64.0032%" y="293" width="0.4747%" height="15" fill="rgb(242,146,4)" fg:x="809" fg:w="6"/><text x="64.2532%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5 samples, 0.40%)</title><rect x="64.0823%" y="277" width="0.3956%" height="15" fill="rgb(212,61,9)" fg:x="810" fg:w="5"/><text x="64.3323%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5 samples, 0.40%)</title><rect x="64.0823%" y="261" width="0.3956%" height="15" fill="rgb(247,126,22)" fg:x="810" fg:w="5"/><text x="64.3323%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="64.2405%" y="245" width="0.2373%" height="15" fill="rgb(220,196,2)" fg:x="812" fg:w="3"/><text x="64.4905%" y="255.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="64.4778%" y="293" width="0.0791%" height="15" fill="rgb(208,46,4)" fg:x="815" fg:w="1"/><text x="64.7278%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.5570%" y="293" width="0.0791%" height="15" fill="rgb(252,104,46)" fg:x="816" fg:w="1"/><text x="64.8070%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="64.6361%" y="293" width="0.0791%" height="15" fill="rgb(237,152,48)" fg:x="817" fg:w="1"/><text x="64.8861%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="64.7152%" y="293" width="0.0791%" height="15" fill="rgb(221,59,37)" fg:x="818" fg:w="1"/><text x="64.9652%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="64.7943%" y="293" width="0.3165%" height="15" fill="rgb(209,202,51)" fg:x="819" fg:w="4"/><text x="65.0443%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (26 samples, 2.06%)</title><rect x="63.1329%" y="341" width="2.0570%" height="15" fill="rgb(228,81,30)" fg:x="798" fg:w="26"/><text x="63.3829%" y="351.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (15 samples, 1.19%)</title><rect x="64.0032%" y="325" width="1.1867%" height="15" fill="rgb(227,42,39)" fg:x="809" fg:w="15"/><text x="64.2532%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.71%)</title><rect x="64.4778%" y="309" width="0.7120%" height="15" fill="rgb(221,26,2)" fg:x="815" fg:w="9"/><text x="64.7278%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="65.1108%" y="293" width="0.0791%" height="15" fill="rgb(254,61,31)" fg:x="823" fg:w="1"/><text x="65.3608%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.2690%" y="277" width="0.0791%" height="15" fill="rgb(222,173,38)" fg:x="825" fg:w="1"/><text x="65.5190%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="65.2690%" y="293" width="0.1582%" height="15" fill="rgb(218,50,12)" fg:x="825" fg:w="2"/><text x="65.5190%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="65.3481%" y="277" width="0.0791%" height="15" fill="rgb(223,88,40)" fg:x="826" fg:w="1"/><text x="65.5981%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="65.3481%" y="261" width="0.0791%" height="15" fill="rgb(237,54,19)" fg:x="826" fg:w="1"/><text x="65.5981%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.3481%" y="245" width="0.0791%" height="15" fill="rgb(251,129,25)" fg:x="826" fg:w="1"/><text x="65.5981%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="65.1899%" y="341" width="0.3165%" height="15" fill="rgb(238,97,19)" fg:x="824" fg:w="4"/><text x="65.4399%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="65.1899%" y="325" width="0.3165%" height="15" fill="rgb(240,169,18)" fg:x="824" fg:w="4"/><text x="65.4399%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="65.1899%" y="309" width="0.3165%" height="15" fill="rgb(230,187,49)" fg:x="824" fg:w="4"/><text x="65.4399%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="65.4272%" y="293" width="0.0791%" height="15" fill="rgb(209,44,26)" fg:x="827" fg:w="1"/><text x="65.6772%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.4272%" y="277" width="0.0791%" height="15" fill="rgb(244,0,6)" fg:x="827" fg:w="1"/><text x="65.6772%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.4272%" y="261" width="0.0791%" height="15" fill="rgb(248,18,21)" fg:x="827" fg:w="1"/><text x="65.6772%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.4272%" y="245" width="0.0791%" height="15" fill="rgb(245,180,19)" fg:x="827" fg:w="1"/><text x="65.6772%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="65.5854%" y="309" width="0.3165%" height="15" fill="rgb(252,118,36)" fg:x="829" fg:w="4"/><text x="65.8354%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="65.6646%" y="293" width="0.2373%" height="15" fill="rgb(210,224,19)" fg:x="830" fg:w="3"/><text x="65.9146%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="65.7437%" y="277" width="0.1582%" height="15" fill="rgb(218,30,24)" fg:x="831" fg:w="2"/><text x="65.9937%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.7437%" y="261" width="0.1582%" height="15" fill="rgb(219,75,50)" fg:x="831" fg:w="2"/><text x="65.9937%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="65.7437%" y="245" width="0.1582%" height="15" fill="rgb(234,72,50)" fg:x="831" fg:w="2"/><text x="65.9937%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (41 samples, 3.24%)</title><rect x="62.7373%" y="389" width="3.2437%" height="15" fill="rgb(219,100,48)" fg:x="793" fg:w="41"/><text x="62.9873%" y="399.50">reg..</text></g><g><title>regex::builders::Builder::build_one_string (41 samples, 3.24%)</title><rect x="62.7373%" y="373" width="3.2437%" height="15" fill="rgb(253,5,41)" fg:x="793" fg:w="41"/><text x="62.9873%" y="383.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (41 samples, 3.24%)</title><rect x="62.7373%" y="357" width="3.2437%" height="15" fill="rgb(247,181,11)" fg:x="793" fg:w="41"/><text x="62.9873%" y="367.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.47%)</title><rect x="65.5063%" y="341" width="0.4747%" height="15" fill="rgb(222,223,25)" fg:x="828" fg:w="6"/><text x="65.7563%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.47%)</title><rect x="65.5063%" y="325" width="0.4747%" height="15" fill="rgb(214,198,28)" fg:x="828" fg:w="6"/><text x="65.7563%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="65.9019%" y="309" width="0.0791%" height="15" fill="rgb(230,46,43)" fg:x="833" fg:w="1"/><text x="66.1519%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="65.9019%" y="293" width="0.0791%" height="15" fill="rgb(233,65,53)" fg:x="833" fg:w="1"/><text x="66.1519%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="65.9019%" y="277" width="0.0791%" height="15" fill="rgb(221,121,27)" fg:x="833" fg:w="1"/><text x="66.1519%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.9019%" y="261" width="0.0791%" height="15" fill="rgb(247,70,47)" fg:x="833" fg:w="1"/><text x="66.1519%" y="271.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::props_union (1 samples, 0.08%)</title><rect x="65.9810%" y="389" width="0.0791%" height="15" fill="rgb(228,85,35)" fg:x="834" fg:w="1"/><text x="66.2310%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.2184%" y="309" width="0.0791%" height="15" fill="rgb(209,50,18)" fg:x="837" fg:w="1"/><text x="66.4684%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="66.0601%" y="325" width="0.3165%" height="15" fill="rgb(250,19,35)" fg:x="835" fg:w="4"/><text x="66.3101%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="66.2975%" y="309" width="0.0791%" height="15" fill="rgb(253,107,29)" fg:x="838" fg:w="1"/><text x="66.5475%" y="319.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (583 samples, 46.12%)</title><rect x="20.3323%" y="501" width="46.1234%" height="15" fill="rgb(252,179,29)" fg:x="257" fg:w="583"/><text x="20.5823%" y="511.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;repli..</text></g><g><title>plugins_core::looking::model::qualify_name (572 samples, 45.25%)</title><rect x="21.2025%" y="485" width="45.2532%" height="15" fill="rgb(238,194,6)" fg:x="268" fg:w="572"/><text x="21.4525%" y="495.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (572 samples, 45.25%)</title><rect x="21.2025%" y="469" width="45.2532%" height="15" fill="rgb(238,164,29)" fg:x="268" fg:w="572"/><text x="21.4525%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (572 samples, 45.25%)</title><rect x="21.2025%" y="453" width="45.2532%" height="15" fill="rgb(224,25,9)" fg:x="268" fg:w="572"/><text x="21.4525%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (570 samples, 45.09%)</title><rect x="21.3608%" y="437" width="45.0949%" height="15" fill="rgb(244,153,23)" fg:x="270" fg:w="570"/><text x="21.6108%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (52 samples, 4.11%)</title><rect x="62.3418%" y="421" width="4.1139%" height="15" fill="rgb(212,203,14)" fg:x="788" fg:w="52"/><text x="62.5918%" y="431.50">inde..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (52 samples, 4.11%)</title><rect x="62.3418%" y="405" width="4.1139%" height="15" fill="rgb(220,164,20)" fg:x="788" fg:w="52"/><text x="62.5918%" y="415.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="66.0601%" y="389" width="0.3956%" height="15" fill="rgb(222,203,48)" fg:x="835" fg:w="5"/><text x="66.3101%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="66.0601%" y="373" width="0.3956%" height="15" fill="rgb(215,159,22)" fg:x="835" fg:w="5"/><text x="66.3101%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="66.0601%" y="357" width="0.3956%" height="15" fill="rgb(216,183,47)" fg:x="835" fg:w="5"/><text x="66.3101%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="66.0601%" y="341" width="0.3956%" height="15" fill="rgb(229,195,25)" fg:x="835" fg:w="5"/><text x="66.3101%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="66.3766%" y="325" width="0.0791%" height="15" fill="rgb(224,132,51)" fg:x="839" fg:w="1"/><text x="66.6266%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.5348%" y="373" width="0.0791%" height="15" fill="rgb(240,63,7)" fg:x="841" fg:w="1"/><text x="66.7848%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.6139%" y="341" width="0.0791%" height="15" fill="rgb(249,182,41)" fg:x="842" fg:w="1"/><text x="66.8639%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.6139%" y="325" width="0.0791%" height="15" fill="rgb(243,47,26)" fg:x="842" fg:w="1"/><text x="66.8639%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="66.6139%" y="309" width="0.0791%" height="15" fill="rgb(233,48,2)" fg:x="842" fg:w="1"/><text x="66.8639%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="66.6139%" y="293" width="0.0791%" height="15" fill="rgb(244,165,34)" fg:x="842" fg:w="1"/><text x="66.8639%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="66.6139%" y="277" width="0.0791%" height="15" fill="rgb(207,89,7)" fg:x="842" fg:w="1"/><text x="66.8639%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="66.6139%" y="261" width="0.0791%" height="15" fill="rgb(244,117,36)" fg:x="842" fg:w="1"/><text x="66.8639%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="66.6139%" y="245" width="0.0791%" height="15" fill="rgb(226,144,34)" fg:x="842" fg:w="1"/><text x="66.8639%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="66.6139%" y="229" width="0.0791%" height="15" fill="rgb(213,23,19)" fg:x="842" fg:w="1"/><text x="66.8639%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.6139%" y="213" width="0.0791%" height="15" fill="rgb(217,75,12)" fg:x="842" fg:w="1"/><text x="66.8639%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="66.6139%" y="197" width="0.0791%" height="15" fill="rgb(224,159,17)" fg:x="842" fg:w="1"/><text x="66.8639%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (4 samples, 0.32%)</title><rect x="66.4557%" y="501" width="0.3165%" height="15" fill="rgb(217,118,1)" fg:x="840" fg:w="4"/><text x="66.7057%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (4 samples, 0.32%)</title><rect x="66.4557%" y="485" width="0.3165%" height="15" fill="rgb(232,180,48)" fg:x="840" fg:w="4"/><text x="66.7057%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (4 samples, 0.32%)</title><rect x="66.4557%" y="469" width="0.3165%" height="15" fill="rgb(230,27,33)" fg:x="840" fg:w="4"/><text x="66.7057%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="66.5348%" y="453" width="0.2373%" height="15" fill="rgb(205,31,21)" fg:x="841" fg:w="3"/><text x="66.7848%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="66.5348%" y="437" width="0.2373%" height="15" fill="rgb(253,59,4)" fg:x="841" fg:w="3"/><text x="66.7848%" y="447.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="66.5348%" y="421" width="0.2373%" height="15" fill="rgb(224,201,9)" fg:x="841" fg:w="3"/><text x="66.7848%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="66.5348%" y="405" width="0.2373%" height="15" fill="rgb(229,206,30)" fg:x="841" fg:w="3"/><text x="66.7848%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="66.5348%" y="389" width="0.2373%" height="15" fill="rgb(212,67,47)" fg:x="841" fg:w="3"/><text x="66.7848%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="66.6139%" y="373" width="0.1582%" height="15" fill="rgb(211,96,50)" fg:x="842" fg:w="2"/><text x="66.8639%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="66.6139%" y="357" width="0.1582%" height="15" fill="rgb(252,114,18)" fg:x="842" fg:w="2"/><text x="66.8639%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="66.6930%" y="341" width="0.0791%" height="15" fill="rgb(223,58,37)" fg:x="843" fg:w="1"/><text x="66.9430%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.6930%" y="325" width="0.0791%" height="15" fill="rgb(237,70,4)" fg:x="843" fg:w="1"/><text x="66.9430%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.6930%" y="309" width="0.0791%" height="15" fill="rgb(244,85,46)" fg:x="843" fg:w="1"/><text x="66.9430%" y="319.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="66.6930%" y="293" width="0.0791%" height="15" fill="rgb(223,39,52)" fg:x="843" fg:w="1"/><text x="66.9430%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="66.6930%" y="277" width="0.0791%" height="15" fill="rgb(218,200,14)" fg:x="843" fg:w="1"/><text x="66.9430%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="66.6930%" y="261" width="0.0791%" height="15" fill="rgb(208,171,16)" fg:x="843" fg:w="1"/><text x="66.9430%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="66.6930%" y="245" width="0.0791%" height="15" fill="rgb(234,200,18)" fg:x="843" fg:w="1"/><text x="66.9430%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="66.6930%" y="229" width="0.0791%" height="15" fill="rgb(228,45,11)" fg:x="843" fg:w="1"/><text x="66.9430%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="66.7722%" y="501" width="0.0791%" height="15" fill="rgb(237,182,11)" fg:x="844" fg:w="1"/><text x="67.0222%" y="511.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9304%" y="469" width="0.0791%" height="15" fill="rgb(241,175,49)" fg:x="846" fg:w="1"/><text x="67.1804%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.9304%" y="453" width="0.0791%" height="15" fill="rgb(247,38,35)" fg:x="846" fg:w="1"/><text x="67.1804%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9304%" y="437" width="0.0791%" height="15" fill="rgb(228,39,49)" fg:x="846" fg:w="1"/><text x="67.1804%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9304%" y="421" width="0.0791%" height="15" fill="rgb(226,101,26)" fg:x="846" fg:w="1"/><text x="67.1804%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.9304%" y="405" width="0.0791%" height="15" fill="rgb(206,141,19)" fg:x="846" fg:w="1"/><text x="67.1804%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.9304%" y="389" width="0.0791%" height="15" fill="rgb(211,200,13)" fg:x="846" fg:w="1"/><text x="67.1804%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.9304%" y="373" width="0.0791%" height="15" fill="rgb(241,121,6)" fg:x="846" fg:w="1"/><text x="67.1804%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="66.9304%" y="357" width="0.0791%" height="15" fill="rgb(234,221,29)" fg:x="846" fg:w="1"/><text x="67.1804%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="66.9304%" y="341" width="0.0791%" height="15" fill="rgb(229,136,5)" fg:x="846" fg:w="1"/><text x="67.1804%" y="351.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (679 samples, 53.72%)</title><rect x="13.3703%" y="677" width="53.7184%" height="15" fill="rgb(238,36,11)" fg:x="169" fg:w="679"/><text x="13.6203%" y="687.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (592 samples, 46.84%)</title><rect x="20.2532%" y="661" width="46.8354%" height="15" fill="rgb(251,55,41)" fg:x="256" fg:w="592"/><text x="20.5032%" y="671.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (592 samples, 46.84%)</title><rect x="20.2532%" y="645" width="46.8354%" height="15" fill="rgb(242,34,40)" fg:x="256" fg:w="592"/><text x="20.5032%" y="655.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (592 samples, 46.84%)</title><rect x="20.2532%" y="629" width="46.8354%" height="15" fill="rgb(215,42,17)" fg:x="256" fg:w="592"/><text x="20.5032%" y="639.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (592 samples, 46.84%)</title><rect x="20.2532%" y="613" width="46.8354%" height="15" fill="rgb(207,44,46)" fg:x="256" fg:w="592"/><text x="20.5032%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (592 samples, 46.84%)</title><rect x="20.2532%" y="597" width="46.8354%" height="15" fill="rgb(211,206,28)" fg:x="256" fg:w="592"/><text x="20.5032%" y="607.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (591 samples, 46.76%)</title><rect x="20.3323%" y="581" width="46.7563%" height="15" fill="rgb(237,167,16)" fg:x="257" fg:w="591"/><text x="20.5823%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (591 samples, 46.76%)</title><rect x="20.3323%" y="565" width="46.7563%" height="15" fill="rgb(233,66,6)" fg:x="257" fg:w="591"/><text x="20.5823%" y="575.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (591 samples, 46.76%)</title><rect x="20.3323%" y="549" width="46.7563%" height="15" fill="rgb(246,123,29)" fg:x="257" fg:w="591"/><text x="20.5823%" y="559.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (591 samples, 46.76%)</title><rect x="20.3323%" y="533" width="46.7563%" height="15" fill="rgb(209,62,40)" fg:x="257" fg:w="591"/><text x="20.5823%" y="543.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perf..</text></g><g><title>plugins_core::looking::model::new_area_observation (591 samples, 46.76%)</title><rect x="20.3323%" y="517" width="46.7563%" height="15" fill="rgb(218,4,25)" fg:x="257" fg:w="591"/><text x="20.5823%" y="527.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="66.8513%" y="501" width="0.2373%" height="15" fill="rgb(253,91,49)" fg:x="845" fg:w="3"/><text x="67.1013%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="66.8513%" y="485" width="0.2373%" height="15" fill="rgb(228,155,29)" fg:x="845" fg:w="3"/><text x="67.1013%" y="495.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="67.0095%" y="469" width="0.0791%" height="15" fill="rgb(243,57,37)" fg:x="847" fg:w="1"/><text x="67.2595%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="67.0095%" y="453" width="0.0791%" height="15" fill="rgb(244,167,17)" fg:x="847" fg:w="1"/><text x="67.2595%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.0095%" y="437" width="0.0791%" height="15" fill="rgb(207,181,38)" fg:x="847" fg:w="1"/><text x="67.2595%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="67.0095%" y="421" width="0.0791%" height="15" fill="rgb(211,8,23)" fg:x="847" fg:w="1"/><text x="67.2595%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="67.0095%" y="405" width="0.0791%" height="15" fill="rgb(235,11,44)" fg:x="847" fg:w="1"/><text x="67.2595%" y="415.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="67.0095%" y="389" width="0.0791%" height="15" fill="rgb(248,18,52)" fg:x="847" fg:w="1"/><text x="67.2595%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0095%" y="373" width="0.0791%" height="15" fill="rgb(208,4,7)" fg:x="847" fg:w="1"/><text x="67.2595%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0095%" y="357" width="0.0791%" height="15" fill="rgb(240,17,39)" fg:x="847" fg:w="1"/><text x="67.2595%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0095%" y="341" width="0.0791%" height="15" fill="rgb(207,170,3)" fg:x="847" fg:w="1"/><text x="67.2595%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.0095%" y="325" width="0.0791%" height="15" fill="rgb(236,100,52)" fg:x="847" fg:w="1"/><text x="67.2595%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.0095%" y="309" width="0.0791%" height="15" fill="rgb(246,78,51)" fg:x="847" fg:w="1"/><text x="67.2595%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.0095%" y="293" width="0.0791%" height="15" fill="rgb(211,17,15)" fg:x="847" fg:w="1"/><text x="67.2595%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="67.0095%" y="277" width="0.0791%" height="15" fill="rgb(209,59,46)" fg:x="847" fg:w="1"/><text x="67.2595%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="67.0095%" y="261" width="0.0791%" height="15" fill="rgb(210,92,25)" fg:x="847" fg:w="1"/><text x="67.2595%" y="271.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="67.0886%" y="613" width="0.0791%" height="15" fill="rgb(238,174,52)" fg:x="848" fg:w="1"/><text x="67.3386%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="67.0886%" y="597" width="0.0791%" height="15" fill="rgb(230,73,7)" fg:x="848" fg:w="1"/><text x="67.3386%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="67.0886%" y="581" width="0.0791%" height="15" fill="rgb(243,124,40)" fg:x="848" fg:w="1"/><text x="67.3386%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="67.0886%" y="565" width="0.0791%" height="15" fill="rgb(244,170,11)" fg:x="848" fg:w="1"/><text x="67.3386%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="67.0886%" y="549" width="0.0791%" height="15" fill="rgb(207,114,54)" fg:x="848" fg:w="1"/><text x="67.3386%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.0886%" y="533" width="0.0791%" height="15" fill="rgb(205,42,20)" fg:x="848" fg:w="1"/><text x="67.3386%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.0886%" y="517" width="0.0791%" height="15" fill="rgb(230,30,28)" fg:x="848" fg:w="1"/><text x="67.3386%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.0886%" y="501" width="0.0791%" height="15" fill="rgb(205,73,54)" fg:x="848" fg:w="1"/><text x="67.3386%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.0886%" y="485" width="0.0791%" height="15" fill="rgb(254,227,23)" fg:x="848" fg:w="1"/><text x="67.3386%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.0886%" y="469" width="0.0791%" height="15" fill="rgb(228,202,34)" fg:x="848" fg:w="1"/><text x="67.3386%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.0886%" y="453" width="0.0791%" height="15" fill="rgb(222,225,37)" fg:x="848" fg:w="1"/><text x="67.3386%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.0886%" y="437" width="0.0791%" height="15" fill="rgb(221,14,54)" fg:x="848" fg:w="1"/><text x="67.3386%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.0886%" y="421" width="0.0791%" height="15" fill="rgb(254,102,2)" fg:x="848" fg:w="1"/><text x="67.3386%" y="431.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="67.1677%" y="597" width="0.1582%" height="15" fill="rgb(232,104,17)" fg:x="849" fg:w="2"/><text x="67.4177%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.1677%" y="581" width="0.1582%" height="15" fill="rgb(250,220,14)" fg:x="849" fg:w="2"/><text x="67.4177%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.1677%" y="565" width="0.1582%" height="15" fill="rgb(241,158,9)" fg:x="849" fg:w="2"/><text x="67.4177%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.1677%" y="549" width="0.1582%" height="15" fill="rgb(246,9,43)" fg:x="849" fg:w="2"/><text x="67.4177%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.1677%" y="533" width="0.1582%" height="15" fill="rgb(206,73,33)" fg:x="849" fg:w="2"/><text x="67.4177%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.2468%" y="517" width="0.0791%" height="15" fill="rgb(222,79,8)" fg:x="850" fg:w="1"/><text x="67.4968%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.2468%" y="501" width="0.0791%" height="15" fill="rgb(234,8,54)" fg:x="850" fg:w="1"/><text x="67.4968%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.2468%" y="485" width="0.0791%" height="15" fill="rgb(209,134,38)" fg:x="850" fg:w="1"/><text x="67.4968%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.2468%" y="469" width="0.0791%" height="15" fill="rgb(230,127,29)" fg:x="850" fg:w="1"/><text x="67.4968%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.2468%" y="453" width="0.0791%" height="15" fill="rgb(242,44,41)" fg:x="850" fg:w="1"/><text x="67.4968%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.3259%" y="517" width="0.0791%" height="15" fill="rgb(222,56,43)" fg:x="851" fg:w="1"/><text x="67.5759%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.3259%" y="501" width="0.0791%" height="15" fill="rgb(238,39,47)" fg:x="851" fg:w="1"/><text x="67.5759%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.3259%" y="485" width="0.0791%" height="15" fill="rgb(226,79,43)" fg:x="851" fg:w="1"/><text x="67.5759%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.4051%" y="485" width="0.0791%" height="15" fill="rgb(242,105,53)" fg:x="852" fg:w="1"/><text x="67.6551%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (6 samples, 0.47%)</title><rect x="67.0886%" y="661" width="0.4747%" height="15" fill="rgb(251,132,46)" fg:x="848" fg:w="6"/><text x="67.3386%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.47%)</title><rect x="67.0886%" y="645" width="0.4747%" height="15" fill="rgb(231,77,14)" fg:x="848" fg:w="6"/><text x="67.3386%" y="655.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.47%)</title><rect x="67.0886%" y="629" width="0.4747%" height="15" fill="rgb(240,135,9)" fg:x="848" fg:w="6"/><text x="67.3386%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::from_str (5 samples, 0.40%)</title><rect x="67.1677%" y="613" width="0.3956%" height="15" fill="rgb(248,109,14)" fg:x="849" fg:w="5"/><text x="67.4177%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="67.3259%" y="597" width="0.2373%" height="15" fill="rgb(227,146,52)" fg:x="851" fg:w="3"/><text x="67.5759%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="67.3259%" y="581" width="0.2373%" height="15" fill="rgb(232,54,3)" fg:x="851" fg:w="3"/><text x="67.5759%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="67.3259%" y="565" width="0.2373%" height="15" fill="rgb(229,201,43)" fg:x="851" fg:w="3"/><text x="67.5759%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="67.3259%" y="549" width="0.2373%" height="15" fill="rgb(252,161,33)" fg:x="851" fg:w="3"/><text x="67.5759%" y="559.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="67.3259%" y="533" width="0.2373%" height="15" fill="rgb(226,146,40)" fg:x="851" fg:w="3"/><text x="67.5759%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.4051%" y="517" width="0.1582%" height="15" fill="rgb(219,47,25)" fg:x="852" fg:w="2"/><text x="67.6551%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.4051%" y="501" width="0.1582%" height="15" fill="rgb(250,135,13)" fg:x="852" fg:w="2"/><text x="67.6551%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="67.4842%" y="485" width="0.0791%" height="15" fill="rgb(219,229,18)" fg:x="853" fg:w="1"/><text x="67.7342%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4842%" y="469" width="0.0791%" height="15" fill="rgb(217,152,27)" fg:x="853" fg:w="1"/><text x="67.7342%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.4842%" y="453" width="0.0791%" height="15" fill="rgb(225,71,47)" fg:x="853" fg:w="1"/><text x="67.7342%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="67.4842%" y="437" width="0.0791%" height="15" fill="rgb(220,139,14)" fg:x="853" fg:w="1"/><text x="67.7342%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4842%" y="421" width="0.0791%" height="15" fill="rgb(247,54,32)" fg:x="853" fg:w="1"/><text x="67.7342%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.4842%" y="405" width="0.0791%" height="15" fill="rgb(252,131,39)" fg:x="853" fg:w="1"/><text x="67.7342%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="67.4842%" y="389" width="0.0791%" height="15" fill="rgb(210,108,39)" fg:x="853" fg:w="1"/><text x="67.7342%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4842%" y="373" width="0.0791%" height="15" fill="rgb(205,23,29)" fg:x="853" fg:w="1"/><text x="67.7342%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.4842%" y="357" width="0.0791%" height="15" fill="rgb(246,139,46)" fg:x="853" fg:w="1"/><text x="67.7342%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="67.4842%" y="341" width="0.0791%" height="15" fill="rgb(250,81,26)" fg:x="853" fg:w="1"/><text x="67.7342%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4842%" y="325" width="0.0791%" height="15" fill="rgb(214,104,7)" fg:x="853" fg:w="1"/><text x="67.7342%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.4842%" y="309" width="0.0791%" height="15" fill="rgb(233,189,8)" fg:x="853" fg:w="1"/><text x="67.7342%" y="319.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="67.5633%" y="661" width="0.0791%" height="15" fill="rgb(228,141,17)" fg:x="854" fg:w="1"/><text x="67.8133%" y="671.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="67.5633%" y="645" width="0.0791%" height="15" fill="rgb(247,157,1)" fg:x="854" fg:w="1"/><text x="67.8133%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.5633%" y="629" width="0.0791%" height="15" fill="rgb(249,225,5)" fg:x="854" fg:w="1"/><text x="67.8133%" y="639.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (689 samples, 54.51%)</title><rect x="13.2911%" y="709" width="54.5095%" height="15" fill="rgb(242,55,13)" fg:x="168" fg:w="689"/><text x="13.5411%" y="719.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (688 samples, 54.43%)</title><rect x="13.3703%" y="693" width="54.4304%" height="15" fill="rgb(230,49,50)" fg:x="169" fg:w="688"/><text x="13.6203%" y="703.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (9 samples, 0.71%)</title><rect x="67.0886%" y="677" width="0.7120%" height="15" fill="rgb(241,111,38)" fg:x="848" fg:w="9"/><text x="67.3386%" y="687.50"></text></g><g><title>engine::session::Session::world (2 samples, 0.16%)</title><rect x="67.6424%" y="661" width="0.1582%" height="15" fill="rgb(252,155,4)" fg:x="855" fg:w="2"/><text x="67.8924%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="67.7215%" y="645" width="0.0791%" height="15" fill="rgb(212,69,32)" fg:x="856" fg:w="1"/><text x="67.9715%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="67.7215%" y="629" width="0.0791%" height="15" fill="rgb(243,107,47)" fg:x="856" fg:w="1"/><text x="67.9715%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="67.7215%" y="613" width="0.0791%" height="15" fill="rgb(247,130,12)" fg:x="856" fg:w="1"/><text x="67.9715%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="67.7215%" y="597" width="0.0791%" height="15" fill="rgb(233,74,16)" fg:x="856" fg:w="1"/><text x="67.9715%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.7215%" y="581" width="0.0791%" height="15" fill="rgb(208,58,18)" fg:x="856" fg:w="1"/><text x="67.9715%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.7215%" y="565" width="0.0791%" height="15" fill="rgb(242,225,1)" fg:x="856" fg:w="1"/><text x="67.9715%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="67.7215%" y="549" width="0.0791%" height="15" fill="rgb(249,39,40)" fg:x="856" fg:w="1"/><text x="67.9715%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="67.7215%" y="533" width="0.0791%" height="15" fill="rgb(207,72,44)" fg:x="856" fg:w="1"/><text x="67.9715%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.7215%" y="517" width="0.0791%" height="15" fill="rgb(215,193,12)" fg:x="856" fg:w="1"/><text x="67.9715%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.7215%" y="501" width="0.0791%" height="15" fill="rgb(248,41,39)" fg:x="856" fg:w="1"/><text x="67.9715%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.7215%" y="485" width="0.0791%" height="15" fill="rgb(253,85,4)" fg:x="856" fg:w="1"/><text x="67.9715%" y="495.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="67.7215%" y="469" width="0.0791%" height="15" fill="rgb(243,70,31)" fg:x="856" fg:w="1"/><text x="67.9715%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="67.7215%" y="453" width="0.0791%" height="15" fill="rgb(253,195,26)" fg:x="856" fg:w="1"/><text x="67.9715%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="67.7215%" y="437" width="0.0791%" height="15" fill="rgb(243,42,11)" fg:x="856" fg:w="1"/><text x="67.9715%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="67.7215%" y="421" width="0.0791%" height="15" fill="rgb(239,66,17)" fg:x="856" fg:w="1"/><text x="67.9715%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="67.7215%" y="405" width="0.0791%" height="15" fill="rgb(217,132,21)" fg:x="856" fg:w="1"/><text x="67.9715%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="67.7215%" y="389" width="0.0791%" height="15" fill="rgb(252,202,21)" fg:x="856" fg:w="1"/><text x="67.9715%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.7215%" y="373" width="0.0791%" height="15" fill="rgb(233,98,36)" fg:x="856" fg:w="1"/><text x="67.9715%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="67.7215%" y="357" width="0.0791%" height="15" fill="rgb(216,153,54)" fg:x="856" fg:w="1"/><text x="67.9715%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.08%)</title><rect x="67.7215%" y="341" width="0.0791%" height="15" fill="rgb(250,99,7)" fg:x="856" fg:w="1"/><text x="67.9715%" y="351.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (692 samples, 54.75%)</title><rect x="13.1329%" y="837" width="54.7468%" height="15" fill="rgb(207,56,50)" fg:x="166" fg:w="692"/><text x="13.3829%" y="847.50">engine::session::Session::evaluate_and_perform</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (692 samples, 54.75%)</title><rect x="13.1329%" y="821" width="54.7468%" height="15" fill="rgb(244,61,34)" fg:x="166" fg:w="692"/><text x="13.3829%" y="831.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (692 samples, 54.75%)</title><rect x="13.1329%" y="805" width="54.7468%" height="15" fill="rgb(241,50,38)" fg:x="166" fg:w="692"/><text x="13.3829%" y="815.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (692 samples, 54.75%)</title><rect x="13.1329%" y="789" width="54.7468%" height="15" fill="rgb(212,166,30)" fg:x="166" fg:w="692"/><text x="13.3829%" y="799.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (691 samples, 54.67%)</title><rect x="13.2120%" y="773" width="54.6677%" height="15" fill="rgb(249,127,32)" fg:x="167" fg:w="691"/><text x="13.4620%" y="783.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (691 samples, 54.67%)</title><rect x="13.2120%" y="757" width="54.6677%" height="15" fill="rgb(209,103,0)" fg:x="167" fg:w="691"/><text x="13.4620%" y="767.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (691 samples, 54.67%)</title><rect x="13.2120%" y="741" width="54.6677%" height="15" fill="rgb(238,209,51)" fg:x="167" fg:w="691"/><text x="13.4620%" y="751.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (691 samples, 54.67%)</title><rect x="13.2120%" y="725" width="54.6677%" height="15" fill="rgb(237,56,23)" fg:x="167" fg:w="691"/><text x="13.4620%" y="735.50">&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="67.8006%" y="709" width="0.0791%" height="15" fill="rgb(215,153,46)" fg:x="857" fg:w="1"/><text x="68.0506%" y="719.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::new_for_my_session (1 samples, 0.08%)</title><rect x="67.8006%" y="693" width="0.0791%" height="15" fill="rgb(224,49,31)" fg:x="857" fg:w="1"/><text x="68.0506%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.8006%" y="677" width="0.0791%" height="15" fill="rgb(250,18,42)" fg:x="857" fg:w="1"/><text x="68.0506%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (859 samples, 67.96%)</title><rect x="0.0000%" y="885" width="67.9589%" height="15" fill="rgb(215,176,39)" fg:x="0" fg:w="859"/><text x="0.2500%" y="895.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (859 samples, 67.96%)</title><rect x="0.0000%" y="869" width="67.9589%" height="15" fill="rgb(223,77,29)" fg:x="0" fg:w="859"/><text x="0.2500%" y="879.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (859 samples, 67.96%)</title><rect x="0.0000%" y="853" width="67.9589%" height="15" fill="rgb(234,94,52)" fg:x="0" fg:w="859"/><text x="0.2500%" y="863.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="67.8797%" y="837" width="0.0791%" height="15" fill="rgb(220,154,50)" fg:x="858" fg:w="1"/><text x="68.1297%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.8797%" y="821" width="0.0791%" height="15" fill="rgb(212,11,10)" fg:x="858" fg:w="1"/><text x="68.1297%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="67.9589%" y="821" width="0.0791%" height="15" fill="rgb(205,166,19)" fg:x="859" fg:w="1"/><text x="68.2089%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.9589%" y="805" width="0.0791%" height="15" fill="rgb(244,198,16)" fg:x="859" fg:w="1"/><text x="68.2089%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynamicPlugin&gt; (1 samples, 0.08%)</title><rect x="67.9589%" y="789" width="0.0791%" height="15" fill="rgb(219,69,12)" fg:x="859" fg:w="1"/><text x="68.2089%" y="799.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.9589%" y="773" width="0.0791%" height="15" fill="rgb(245,30,7)" fg:x="859" fg:w="1"/><text x="68.2089%" y="783.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.0380%" y="725" width="0.0791%" height="15" fill="rgb(218,221,48)" fg:x="860" fg:w="1"/><text x="68.2880%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.0380%" y="709" width="0.0791%" height="15" fill="rgb(216,66,15)" fg:x="860" fg:w="1"/><text x="68.2880%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (2 samples, 0.16%)</title><rect x="68.0380%" y="821" width="0.1582%" height="15" fill="rgb(226,122,50)" fg:x="860" fg:w="2"/><text x="68.2880%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.0380%" y="805" width="0.1582%" height="15" fill="rgb(239,156,16)" fg:x="860" fg:w="2"/><text x="68.2880%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (2 samples, 0.16%)</title><rect x="68.0380%" y="789" width="0.1582%" height="15" fill="rgb(224,27,38)" fg:x="860" fg:w="2"/><text x="68.2880%" y="799.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.0380%" y="773" width="0.1582%" height="15" fill="rgb(224,39,27)" fg:x="860" fg:w="2"/><text x="68.2880%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.0380%" y="757" width="0.1582%" height="15" fill="rgb(215,92,29)" fg:x="860" fg:w="2"/><text x="68.2880%" y="767.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.0380%" y="741" width="0.1582%" height="15" fill="rgb(207,159,16)" fg:x="860" fg:w="2"/><text x="68.2880%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.1171%" y="725" width="0.0791%" height="15" fill="rgb(238,163,47)" fg:x="861" fg:w="1"/><text x="68.3671%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.1171%" y="709" width="0.0791%" height="15" fill="rgb(219,91,49)" fg:x="861" fg:w="1"/><text x="68.3671%" y="719.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="67.9589%" y="837" width="0.3165%" height="15" fill="rgb(227,167,31)" fg:x="859" fg:w="4"/><text x="68.2089%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryEntityStorage&gt; (1 samples, 0.08%)</title><rect x="68.1962%" y="821" width="0.0791%" height="15" fill="rgb(234,80,54)" fg:x="862" fg:w="1"/><text x="68.4462%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="68.1962%" y="805" width="0.0791%" height="15" fill="rgb(212,114,2)" fg:x="862" fg:w="1"/><text x="68.4462%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.1962%" y="789" width="0.0791%" height="15" fill="rgb(234,50,24)" fg:x="862" fg:w="1"/><text x="68.4462%" y="799.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (3 samples, 0.24%)</title><rect x="68.2753%" y="837" width="0.2373%" height="15" fill="rgb(221,68,8)" fg:x="863" fg:w="3"/><text x="68.5253%" y="847.50"></text></g><g><title>engine::session::Session::new (3 samples, 0.24%)</title><rect x="68.2753%" y="821" width="0.2373%" height="15" fill="rgb(254,180,31)" fg:x="863" fg:w="3"/><text x="68.5253%" y="831.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (3 samples, 0.24%)</title><rect x="68.2753%" y="805" width="0.2373%" height="15" fill="rgb(247,130,50)" fg:x="863" fg:w="3"/><text x="68.5253%" y="815.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="68.2753%" y="789" width="0.2373%" height="15" fill="rgb(211,109,4)" fg:x="863" fg:w="3"/><text x="68.5253%" y="799.50"></text></g><g><title>libloading::os::unix::Library::open (3 samples, 0.24%)</title><rect x="68.2753%" y="773" width="0.2373%" height="15" fill="rgb(238,50,21)" fg:x="863" fg:w="3"/><text x="68.5253%" y="783.50"></text></g><g><title>dlopen (2 samples, 0.16%)</title><rect x="68.3544%" y="757" width="0.1582%" height="15" fill="rgb(225,57,45)" fg:x="864" fg:w="2"/><text x="68.6044%" y="767.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="68.3544%" y="741" width="0.1582%" height="15" fill="rgb(209,196,50)" fg:x="864" fg:w="2"/><text x="68.6044%" y="751.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="68.3544%" y="725" width="0.1582%" height="15" fill="rgb(242,140,13)" fg:x="864" fg:w="2"/><text x="68.6044%" y="735.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="68.3544%" y="709" width="0.1582%" height="15" fill="rgb(217,111,7)" fg:x="864" fg:w="2"/><text x="68.6044%" y="719.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="68.3544%" y="693" width="0.1582%" height="15" fill="rgb(253,193,51)" fg:x="864" fg:w="2"/><text x="68.6044%" y="703.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="68.5127%" y="789" width="0.0791%" height="15" fill="rgb(252,70,29)" fg:x="866" fg:w="1"/><text x="68.7627%" y="799.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="68.5127%" y="773" width="0.0791%" height="15" fill="rgb(232,127,12)" fg:x="866" fg:w="1"/><text x="68.7627%" y="783.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.5127%" y="757" width="0.0791%" height="15" fill="rgb(211,180,21)" fg:x="866" fg:w="1"/><text x="68.7627%" y="767.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.5127%" y="741" width="0.0791%" height="15" fill="rgb(229,72,13)" fg:x="866" fg:w="1"/><text x="68.7627%" y="751.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="68.5127%" y="725" width="0.0791%" height="15" fill="rgb(240,211,49)" fg:x="866" fg:w="1"/><text x="68.7627%" y="735.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="68.5918%" y="741" width="0.0791%" height="15" fill="rgb(219,149,40)" fg:x="867" fg:w="1"/><text x="68.8418%" y="751.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.5918%" y="725" width="0.0791%" height="15" fill="rgb(210,127,46)" fg:x="867" fg:w="1"/><text x="68.8418%" y="735.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="68.5918%" y="757" width="0.2373%" height="15" fill="rgb(220,106,7)" fg:x="867" fg:w="3"/><text x="68.8418%" y="767.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="68.6709%" y="741" width="0.1582%" height="15" fill="rgb(249,31,22)" fg:x="868" fg:w="2"/><text x="68.9209%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="68.6709%" y="725" width="0.1582%" height="15" fill="rgb(253,1,49)" fg:x="868" fg:w="2"/><text x="68.9209%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.7500%" y="709" width="0.0791%" height="15" fill="rgb(227,144,33)" fg:x="869" fg:w="1"/><text x="69.0000%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.7500%" y="693" width="0.0791%" height="15" fill="rgb(249,163,44)" fg:x="869" fg:w="1"/><text x="69.0000%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8291%" y="693" width="0.0791%" height="15" fill="rgb(234,15,39)" fg:x="870" fg:w="1"/><text x="69.0791%" y="703.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8291%" y="677" width="0.0791%" height="15" fill="rgb(207,66,16)" fg:x="870" fg:w="1"/><text x="69.0791%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8291%" y="661" width="0.0791%" height="15" fill="rgb(233,112,24)" fg:x="870" fg:w="1"/><text x="69.0791%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9082%" y="629" width="0.0791%" height="15" fill="rgb(230,90,22)" fg:x="871" fg:w="1"/><text x="69.1582%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9082%" y="613" width="0.0791%" height="15" fill="rgb(229,61,13)" fg:x="871" fg:w="1"/><text x="69.1582%" y="623.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.63%)</title><rect x="68.5127%" y="821" width="0.6329%" height="15" fill="rgb(225,57,24)" fg:x="866" fg:w="8"/><text x="68.7627%" y="831.50"></text></g><g><title>engine::session::Session::save_entity_changes (8 samples, 0.63%)</title><rect x="68.5127%" y="805" width="0.6329%" height="15" fill="rgb(208,169,48)" fg:x="866" fg:w="8"/><text x="68.7627%" y="815.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (7 samples, 0.55%)</title><rect x="68.5918%" y="789" width="0.5538%" height="15" fill="rgb(244,218,51)" fg:x="867" fg:w="7"/><text x="68.8418%" y="799.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (7 samples, 0.55%)</title><rect x="68.5918%" y="773" width="0.5538%" height="15" fill="rgb(214,148,10)" fg:x="867" fg:w="7"/><text x="68.8418%" y="783.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="68.8291%" y="757" width="0.3165%" height="15" fill="rgb(225,174,27)" fg:x="870" fg:w="4"/><text x="69.0791%" y="767.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="68.8291%" y="741" width="0.3165%" height="15" fill="rgb(230,96,26)" fg:x="870" fg:w="4"/><text x="69.0791%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="68.8291%" y="725" width="0.3165%" height="15" fill="rgb(232,10,30)" fg:x="870" fg:w="4"/><text x="69.0791%" y="735.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="68.8291%" y="709" width="0.3165%" height="15" fill="rgb(222,8,50)" fg:x="870" fg:w="4"/><text x="69.0791%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="68.9082%" y="693" width="0.2373%" height="15" fill="rgb(213,81,27)" fg:x="871" fg:w="3"/><text x="69.1582%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="68.9082%" y="677" width="0.2373%" height="15" fill="rgb(245,50,10)" fg:x="871" fg:w="3"/><text x="69.1582%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="68.9082%" y="661" width="0.2373%" height="15" fill="rgb(216,100,18)" fg:x="871" fg:w="3"/><text x="69.1582%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="68.9082%" y="645" width="0.2373%" height="15" fill="rgb(236,147,54)" fg:x="871" fg:w="3"/><text x="69.1582%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="68.9873%" y="629" width="0.1582%" height="15" fill="rgb(205,143,26)" fg:x="872" fg:w="2"/><text x="69.2373%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.9873%" y="613" width="0.1582%" height="15" fill="rgb(236,26,9)" fg:x="872" fg:w="2"/><text x="69.2373%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="68.9873%" y="597" width="0.1582%" height="15" fill="rgb(221,165,53)" fg:x="872" fg:w="2"/><text x="69.2373%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.0665%" y="581" width="0.0791%" height="15" fill="rgb(214,110,17)" fg:x="873" fg:w="1"/><text x="69.3165%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.0665%" y="565" width="0.0791%" height="15" fill="rgb(237,197,12)" fg:x="873" fg:w="1"/><text x="69.3165%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.0665%" y="549" width="0.0791%" height="15" fill="rgb(205,84,17)" fg:x="873" fg:w="1"/><text x="69.3165%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="69.0665%" y="533" width="0.0791%" height="15" fill="rgb(237,18,45)" fg:x="873" fg:w="1"/><text x="69.3165%" y="543.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="69.1456%" y="741" width="0.0791%" height="15" fill="rgb(221,87,14)" fg:x="874" fg:w="1"/><text x="69.3956%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="69.1456%" y="789" width="0.1582%" height="15" fill="rgb(238,186,15)" fg:x="874" fg:w="2"/><text x="69.3956%" y="799.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="69.1456%" y="773" width="0.1582%" height="15" fill="rgb(208,115,11)" fg:x="874" fg:w="2"/><text x="69.3956%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="69.1456%" y="757" width="0.1582%" height="15" fill="rgb(254,175,0)" fg:x="874" fg:w="2"/><text x="69.3956%" y="767.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.2247%" y="741" width="0.0791%" height="15" fill="rgb(227,24,42)" fg:x="875" fg:w="1"/><text x="69.4747%" y="751.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.2247%" y="725" width="0.0791%" height="15" fill="rgb(223,211,37)" fg:x="875" fg:w="1"/><text x="69.4747%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2247%" y="709" width="0.0791%" height="15" fill="rgb(235,49,27)" fg:x="875" fg:w="1"/><text x="69.4747%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2247%" y="693" width="0.0791%" height="15" fill="rgb(254,97,51)" fg:x="875" fg:w="1"/><text x="69.4747%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2247%" y="677" width="0.0791%" height="15" fill="rgb(249,51,40)" fg:x="875" fg:w="1"/><text x="69.4747%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2247%" y="661" width="0.0791%" height="15" fill="rgb(210,128,45)" fg:x="875" fg:w="1"/><text x="69.4747%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.2247%" y="645" width="0.0791%" height="15" fill="rgb(224,137,50)" fg:x="875" fg:w="1"/><text x="69.4747%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2247%" y="629" width="0.0791%" height="15" fill="rgb(242,15,9)" fg:x="875" fg:w="1"/><text x="69.4747%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2247%" y="613" width="0.0791%" height="15" fill="rgb(233,187,41)" fg:x="875" fg:w="1"/><text x="69.4747%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2247%" y="597" width="0.0791%" height="15" fill="rgb(227,2,29)" fg:x="875" fg:w="1"/><text x="69.4747%" y="607.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="69.1456%" y="821" width="0.2373%" height="15" fill="rgb(222,70,3)" fg:x="874" fg:w="3"/><text x="69.3956%" y="831.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="69.1456%" y="805" width="0.2373%" height="15" fill="rgb(213,11,42)" fg:x="874" fg:w="3"/><text x="69.3956%" y="815.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="69.3038%" y="789" width="0.0791%" height="15" fill="rgb(225,150,9)" fg:x="876" fg:w="1"/><text x="69.5538%" y="799.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="69.3038%" y="773" width="0.0791%" height="15" fill="rgb(230,162,45)" fg:x="876" fg:w="1"/><text x="69.5538%" y="783.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="69.3038%" y="757" width="0.0791%" height="15" fill="rgb(222,14,52)" fg:x="876" fg:w="1"/><text x="69.5538%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="69.3038%" y="741" width="0.0791%" height="15" fill="rgb(254,198,14)" fg:x="876" fg:w="1"/><text x="69.5538%" y="751.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.3038%" y="725" width="0.0791%" height="15" fill="rgb(220,217,30)" fg:x="876" fg:w="1"/><text x="69.5538%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.3038%" y="709" width="0.0791%" height="15" fill="rgb(215,146,41)" fg:x="876" fg:w="1"/><text x="69.5538%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3038%" y="693" width="0.0791%" height="15" fill="rgb(217,27,36)" fg:x="876" fg:w="1"/><text x="69.5538%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3038%" y="677" width="0.0791%" height="15" fill="rgb(219,218,39)" fg:x="876" fg:w="1"/><text x="69.5538%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3038%" y="661" width="0.0791%" height="15" fill="rgb(219,4,42)" fg:x="876" fg:w="1"/><text x="69.5538%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3038%" y="645" width="0.0791%" height="15" fill="rgb(249,119,36)" fg:x="876" fg:w="1"/><text x="69.5538%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3038%" y="629" width="0.0791%" height="15" fill="rgb(209,23,33)" fg:x="876" fg:w="1"/><text x="69.5538%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.3038%" y="613" width="0.0791%" height="15" fill="rgb(211,10,0)" fg:x="876" fg:w="1"/><text x="69.5538%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.3829%" y="693" width="0.0791%" height="15" fill="rgb(208,99,37)" fg:x="877" fg:w="1"/><text x="69.6329%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.3829%" y="677" width="0.0791%" height="15" fill="rgb(213,132,31)" fg:x="877" fg:w="1"/><text x="69.6329%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.3829%" y="661" width="0.0791%" height="15" fill="rgb(243,129,40)" fg:x="877" fg:w="1"/><text x="69.6329%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="69.3829%" y="805" width="0.1582%" height="15" fill="rgb(210,66,33)" fg:x="877" fg:w="2"/><text x="69.6329%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="69.3829%" y="789" width="0.1582%" height="15" fill="rgb(209,189,4)" fg:x="877" fg:w="2"/><text x="69.6329%" y="799.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="69.3829%" y="773" width="0.1582%" height="15" fill="rgb(214,107,37)" fg:x="877" fg:w="2"/><text x="69.6329%" y="783.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="69.3829%" y="757" width="0.1582%" height="15" fill="rgb(245,88,54)" fg:x="877" fg:w="2"/><text x="69.6329%" y="767.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="69.3829%" y="741" width="0.1582%" height="15" fill="rgb(205,146,20)" fg:x="877" fg:w="2"/><text x="69.6329%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="69.3829%" y="725" width="0.1582%" height="15" fill="rgb(220,161,25)" fg:x="877" fg:w="2"/><text x="69.6329%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="69.3829%" y="709" width="0.1582%" height="15" fill="rgb(215,152,15)" fg:x="877" fg:w="2"/><text x="69.6329%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="69.4620%" y="693" width="0.0791%" height="15" fill="rgb(233,192,44)" fg:x="878" fg:w="1"/><text x="69.7120%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.4620%" y="677" width="0.0791%" height="15" fill="rgb(240,170,46)" fg:x="878" fg:w="1"/><text x="69.7120%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.4620%" y="661" width="0.0791%" height="15" fill="rgb(207,104,33)" fg:x="878" fg:w="1"/><text x="69.7120%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.4620%" y="645" width="0.0791%" height="15" fill="rgb(219,21,39)" fg:x="878" fg:w="1"/><text x="69.7120%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4620%" y="629" width="0.0791%" height="15" fill="rgb(214,133,29)" fg:x="878" fg:w="1"/><text x="69.7120%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.4620%" y="613" width="0.0791%" height="15" fill="rgb(226,93,6)" fg:x="878" fg:w="1"/><text x="69.7120%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4620%" y="597" width="0.0791%" height="15" fill="rgb(252,222,34)" fg:x="878" fg:w="1"/><text x="69.7120%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.4620%" y="581" width="0.0791%" height="15" fill="rgb(252,92,48)" fg:x="878" fg:w="1"/><text x="69.7120%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4620%" y="565" width="0.0791%" height="15" fill="rgb(245,223,24)" fg:x="878" fg:w="1"/><text x="69.7120%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.4620%" y="549" width="0.0791%" height="15" fill="rgb(205,176,3)" fg:x="878" fg:w="1"/><text x="69.7120%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="69.5411%" y="741" width="0.0791%" height="15" fill="rgb(235,151,15)" fg:x="879" fg:w="1"/><text x="69.7911%" y="751.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="69.5411%" y="725" width="0.0791%" height="15" fill="rgb(237,209,11)" fg:x="879" fg:w="1"/><text x="69.7911%" y="735.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="69.6203%" y="725" width="0.0791%" height="15" fill="rgb(243,227,24)" fg:x="880" fg:w="1"/><text x="69.8703%" y="735.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.6203%" y="709" width="0.0791%" height="15" fill="rgb(239,193,16)" fg:x="880" fg:w="1"/><text x="69.8703%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.6203%" y="693" width="0.0791%" height="15" fill="rgb(231,27,9)" fg:x="880" fg:w="1"/><text x="69.8703%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.6203%" y="677" width="0.0791%" height="15" fill="rgb(219,169,10)" fg:x="880" fg:w="1"/><text x="69.8703%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.6203%" y="661" width="0.0791%" height="15" fill="rgb(244,229,43)" fg:x="880" fg:w="1"/><text x="69.8703%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6994%" y="709" width="0.0791%" height="15" fill="rgb(254,38,20)" fg:x="881" fg:w="1"/><text x="69.9494%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6994%" y="693" width="0.0791%" height="15" fill="rgb(250,47,30)" fg:x="881" fg:w="1"/><text x="69.9494%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6994%" y="677" width="0.0791%" height="15" fill="rgb(224,124,36)" fg:x="881" fg:w="1"/><text x="69.9494%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.6994%" y="661" width="0.0791%" height="15" fill="rgb(246,68,51)" fg:x="881" fg:w="1"/><text x="69.9494%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.6994%" y="645" width="0.0791%" height="15" fill="rgb(253,43,49)" fg:x="881" fg:w="1"/><text x="69.9494%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.6994%" y="629" width="0.0791%" height="15" fill="rgb(219,54,36)" fg:x="881" fg:w="1"/><text x="69.9494%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.6994%" y="613" width="0.0791%" height="15" fill="rgb(227,133,34)" fg:x="881" fg:w="1"/><text x="69.9494%" y="623.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="69.6203%" y="741" width="0.2373%" height="15" fill="rgb(247,227,15)" fg:x="880" fg:w="3"/><text x="69.8703%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="69.6994%" y="725" width="0.1582%" height="15" fill="rgb(229,96,14)" fg:x="881" fg:w="2"/><text x="69.9494%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.7785%" y="709" width="0.0791%" height="15" fill="rgb(220,79,17)" fg:x="882" fg:w="1"/><text x="70.0285%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.7785%" y="693" width="0.0791%" height="15" fill="rgb(205,131,53)" fg:x="882" fg:w="1"/><text x="70.0285%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.7785%" y="677" width="0.0791%" height="15" fill="rgb(209,50,29)" fg:x="882" fg:w="1"/><text x="70.0285%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.8576%" y="741" width="0.0791%" height="15" fill="rgb(245,86,46)" fg:x="883" fg:w="1"/><text x="70.1076%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="69.8576%" y="725" width="0.0791%" height="15" fill="rgb(235,66,46)" fg:x="883" fg:w="1"/><text x="70.1076%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.8576%" y="709" width="0.0791%" height="15" fill="rgb(232,148,31)" fg:x="883" fg:w="1"/><text x="70.1076%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.8576%" y="693" width="0.0791%" height="15" fill="rgb(217,149,8)" fg:x="883" fg:w="1"/><text x="70.1076%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.8576%" y="677" width="0.0791%" height="15" fill="rgb(209,183,11)" fg:x="883" fg:w="1"/><text x="70.1076%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.8576%" y="661" width="0.0791%" height="15" fill="rgb(208,55,20)" fg:x="883" fg:w="1"/><text x="70.1076%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9367%" y="677" width="0.0791%" height="15" fill="rgb(218,39,14)" fg:x="884" fg:w="1"/><text x="70.1867%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.0158%" y="645" width="0.0791%" height="15" fill="rgb(216,169,33)" fg:x="885" fg:w="1"/><text x="70.2658%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.0158%" y="629" width="0.0791%" height="15" fill="rgb(233,80,24)" fg:x="885" fg:w="1"/><text x="70.2658%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.0158%" y="613" width="0.0791%" height="15" fill="rgb(213,179,31)" fg:x="885" fg:w="1"/><text x="70.2658%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.0158%" y="597" width="0.0791%" height="15" fill="rgb(209,19,5)" fg:x="885" fg:w="1"/><text x="70.2658%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.0949%" y="629" width="0.0791%" height="15" fill="rgb(219,18,35)" fg:x="886" fg:w="1"/><text x="70.3449%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.0949%" y="613" width="0.0791%" height="15" fill="rgb(209,169,16)" fg:x="886" fg:w="1"/><text x="70.3449%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.0949%" y="597" width="0.0791%" height="15" fill="rgb(245,90,51)" fg:x="886" fg:w="1"/><text x="70.3449%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.0949%" y="581" width="0.0791%" height="15" fill="rgb(220,99,45)" fg:x="886" fg:w="1"/><text x="70.3449%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.0949%" y="565" width="0.0791%" height="15" fill="rgb(249,89,25)" fg:x="886" fg:w="1"/><text x="70.3449%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.0949%" y="549" width="0.0791%" height="15" fill="rgb(239,193,0)" fg:x="886" fg:w="1"/><text x="70.3449%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0949%" y="533" width="0.0791%" height="15" fill="rgb(231,126,1)" fg:x="886" fg:w="1"/><text x="70.3449%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="70.0158%" y="661" width="0.2373%" height="15" fill="rgb(243,166,3)" fg:x="885" fg:w="3"/><text x="70.2658%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="70.0949%" y="645" width="0.1582%" height="15" fill="rgb(223,22,34)" fg:x="886" fg:w="2"/><text x="70.3449%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1741%" y="629" width="0.0791%" height="15" fill="rgb(251,52,51)" fg:x="887" fg:w="1"/><text x="70.4241%" y="639.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.79%)</title><rect x="69.5411%" y="805" width="0.7911%" height="15" fill="rgb(221,165,28)" fg:x="879" fg:w="10"/><text x="69.7911%" y="815.50"></text></g><g><title>engine::session::Session::save_entity_changes (10 samples, 0.79%)</title><rect x="69.5411%" y="789" width="0.7911%" height="15" fill="rgb(218,121,47)" fg:x="879" fg:w="10"/><text x="69.7911%" y="799.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (10 samples, 0.79%)</title><rect x="69.5411%" y="773" width="0.7911%" height="15" fill="rgb(209,120,9)" fg:x="879" fg:w="10"/><text x="69.7911%" y="783.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (10 samples, 0.79%)</title><rect x="69.5411%" y="757" width="0.7911%" height="15" fill="rgb(236,68,12)" fg:x="879" fg:w="10"/><text x="69.7911%" y="767.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="69.9367%" y="741" width="0.3956%" height="15" fill="rgb(225,194,26)" fg:x="884" fg:w="5"/><text x="70.1867%" y="751.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="69.9367%" y="725" width="0.3956%" height="15" fill="rgb(231,84,39)" fg:x="884" fg:w="5"/><text x="70.1867%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="69.9367%" y="709" width="0.3956%" height="15" fill="rgb(210,11,45)" fg:x="884" fg:w="5"/><text x="70.1867%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="69.9367%" y="693" width="0.3956%" height="15" fill="rgb(224,54,52)" fg:x="884" fg:w="5"/><text x="70.1867%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="70.0158%" y="677" width="0.3165%" height="15" fill="rgb(238,102,14)" fg:x="885" fg:w="4"/><text x="70.2658%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2532%" y="661" width="0.0791%" height="15" fill="rgb(243,160,52)" fg:x="888" fg:w="1"/><text x="70.5032%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.3323%" y="789" width="0.0791%" height="15" fill="rgb(216,114,19)" fg:x="889" fg:w="1"/><text x="70.5823%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.3323%" y="773" width="0.0791%" height="15" fill="rgb(244,166,37)" fg:x="889" fg:w="1"/><text x="70.5823%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="70.3323%" y="757" width="0.0791%" height="15" fill="rgb(246,29,44)" fg:x="889" fg:w="1"/><text x="70.5823%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="70.3323%" y="741" width="0.0791%" height="15" fill="rgb(215,56,53)" fg:x="889" fg:w="1"/><text x="70.5823%" y="751.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="70.3323%" y="725" width="0.0791%" height="15" fill="rgb(217,60,2)" fg:x="889" fg:w="1"/><text x="70.5823%" y="735.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="70.3323%" y="709" width="0.0791%" height="15" fill="rgb(207,26,24)" fg:x="889" fg:w="1"/><text x="70.5823%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="70.3323%" y="693" width="0.0791%" height="15" fill="rgb(252,210,15)" fg:x="889" fg:w="1"/><text x="70.5823%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.3323%" y="677" width="0.0791%" height="15" fill="rgb(253,209,26)" fg:x="889" fg:w="1"/><text x="70.5823%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.3323%" y="661" width="0.0791%" height="15" fill="rgb(238,170,14)" fg:x="889" fg:w="1"/><text x="70.5823%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.3323%" y="645" width="0.0791%" height="15" fill="rgb(216,178,15)" fg:x="889" fg:w="1"/><text x="70.5823%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="70.4114%" y="773" width="0.0791%" height="15" fill="rgb(250,197,2)" fg:x="890" fg:w="1"/><text x="70.6614%" y="783.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="70.4114%" y="757" width="0.0791%" height="15" fill="rgb(212,70,42)" fg:x="890" fg:w="1"/><text x="70.6614%" y="767.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="70.4114%" y="741" width="0.0791%" height="15" fill="rgb(227,213,9)" fg:x="890" fg:w="1"/><text x="70.6614%" y="751.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="70.3323%" y="805" width="0.2373%" height="15" fill="rgb(245,99,25)" fg:x="889" fg:w="3"/><text x="70.5823%" y="815.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="70.4114%" y="789" width="0.1582%" height="15" fill="rgb(250,82,29)" fg:x="890" fg:w="2"/><text x="70.6614%" y="799.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="70.4905%" y="773" width="0.0791%" height="15" fill="rgb(241,226,54)" fg:x="891" fg:w="1"/><text x="70.7405%" y="783.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="70.4905%" y="757" width="0.0791%" height="15" fill="rgb(221,99,41)" fg:x="891" fg:w="1"/><text x="70.7405%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="70.4905%" y="741" width="0.0791%" height="15" fill="rgb(213,90,21)" fg:x="891" fg:w="1"/><text x="70.7405%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.4905%" y="725" width="0.0791%" height="15" fill="rgb(205,208,24)" fg:x="891" fg:w="1"/><text x="70.7405%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.4905%" y="709" width="0.0791%" height="15" fill="rgb(246,31,12)" fg:x="891" fg:w="1"/><text x="70.7405%" y="719.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="70.5696%" y="805" width="0.0791%" height="15" fill="rgb(213,154,6)" fg:x="892" fg:w="1"/><text x="70.8196%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.5696%" y="789" width="0.0791%" height="15" fill="rgb(222,163,29)" fg:x="892" fg:w="1"/><text x="70.8196%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.5696%" y="773" width="0.0791%" height="15" fill="rgb(227,201,8)" fg:x="892" fg:w="1"/><text x="70.8196%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="70.5696%" y="757" width="0.0791%" height="15" fill="rgb(233,9,32)" fg:x="892" fg:w="1"/><text x="70.8196%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.5696%" y="741" width="0.0791%" height="15" fill="rgb(217,54,24)" fg:x="892" fg:w="1"/><text x="70.8196%" y="751.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.5696%" y="725" width="0.0791%" height="15" fill="rgb(235,192,0)" fg:x="892" fg:w="1"/><text x="70.8196%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.5696%" y="709" width="0.0791%" height="15" fill="rgb(235,45,9)" fg:x="892" fg:w="1"/><text x="70.8196%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5696%" y="693" width="0.0791%" height="15" fill="rgb(246,42,40)" fg:x="892" fg:w="1"/><text x="70.8196%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5696%" y="677" width="0.0791%" height="15" fill="rgb(248,111,24)" fg:x="892" fg:w="1"/><text x="70.8196%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5696%" y="661" width="0.0791%" height="15" fill="rgb(249,65,22)" fg:x="892" fg:w="1"/><text x="70.8196%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5696%" y="645" width="0.0791%" height="15" fill="rgb(238,111,51)" fg:x="892" fg:w="1"/><text x="70.8196%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.5696%" y="629" width="0.0791%" height="15" fill="rgb(250,118,22)" fg:x="892" fg:w="1"/><text x="70.8196%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.6487%" y="789" width="0.0791%" height="15" fill="rgb(234,84,26)" fg:x="893" fg:w="1"/><text x="70.8987%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.6487%" y="773" width="0.0791%" height="15" fill="rgb(243,172,12)" fg:x="893" fg:w="1"/><text x="70.8987%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="70.6487%" y="757" width="0.0791%" height="15" fill="rgb(236,150,49)" fg:x="893" fg:w="1"/><text x="70.8987%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="70.6487%" y="741" width="0.0791%" height="15" fill="rgb(225,197,26)" fg:x="893" fg:w="1"/><text x="70.8987%" y="751.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="70.6487%" y="725" width="0.0791%" height="15" fill="rgb(214,17,42)" fg:x="893" fg:w="1"/><text x="70.8987%" y="735.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="70.6487%" y="709" width="0.0791%" height="15" fill="rgb(224,165,40)" fg:x="893" fg:w="1"/><text x="70.8987%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="70.6487%" y="693" width="0.0791%" height="15" fill="rgb(246,100,4)" fg:x="893" fg:w="1"/><text x="70.8987%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.6487%" y="677" width="0.0791%" height="15" fill="rgb(222,103,0)" fg:x="893" fg:w="1"/><text x="70.8987%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="70.6487%" y="661" width="0.0791%" height="15" fill="rgb(227,189,26)" fg:x="893" fg:w="1"/><text x="70.8987%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.6487%" y="645" width="0.0791%" height="15" fill="rgb(214,202,17)" fg:x="893" fg:w="1"/><text x="70.8987%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="70.6487%" y="629" width="0.0791%" height="15" fill="rgb(229,111,3)" fg:x="893" fg:w="1"/><text x="70.8987%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="70.6487%" y="613" width="0.0791%" height="15" fill="rgb(229,172,15)" fg:x="893" fg:w="1"/><text x="70.8987%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.6487%" y="597" width="0.0791%" height="15" fill="rgb(230,224,35)" fg:x="893" fg:w="1"/><text x="70.8987%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="70.6487%" y="581" width="0.0791%" height="15" fill="rgb(251,141,6)" fg:x="893" fg:w="1"/><text x="70.8987%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.6487%" y="565" width="0.0791%" height="15" fill="rgb(225,208,6)" fg:x="893" fg:w="1"/><text x="70.8987%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.6487%" y="549" width="0.0791%" height="15" fill="rgb(246,181,16)" fg:x="893" fg:w="1"/><text x="70.8987%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="70.6487%" y="533" width="0.0791%" height="15" fill="rgb(227,129,36)" fg:x="893" fg:w="1"/><text x="70.8987%" y="543.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="70.7278%" y="773" width="0.0791%" height="15" fill="rgb(248,117,24)" fg:x="894" fg:w="1"/><text x="70.9778%" y="783.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="70.7278%" y="757" width="0.0791%" height="15" fill="rgb(214,185,35)" fg:x="894" fg:w="1"/><text x="70.9778%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.7278%" y="741" width="0.0791%" height="15" fill="rgb(236,150,34)" fg:x="894" fg:w="1"/><text x="70.9778%" y="751.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.7278%" y="725" width="0.0791%" height="15" fill="rgb(243,228,27)" fg:x="894" fg:w="1"/><text x="70.9778%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.7278%" y="709" width="0.0791%" height="15" fill="rgb(245,77,44)" fg:x="894" fg:w="1"/><text x="70.9778%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.7278%" y="693" width="0.0791%" height="15" fill="rgb(235,214,42)" fg:x="894" fg:w="1"/><text x="70.9778%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7278%" y="677" width="0.0791%" height="15" fill="rgb(221,74,3)" fg:x="894" fg:w="1"/><text x="70.9778%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.7278%" y="661" width="0.0791%" height="15" fill="rgb(206,121,29)" fg:x="894" fg:w="1"/><text x="70.9778%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7278%" y="645" width="0.0791%" height="15" fill="rgb(249,131,53)" fg:x="894" fg:w="1"/><text x="70.9778%" y="655.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="70.7278%" y="629" width="0.0791%" height="15" fill="rgb(236,170,29)" fg:x="894" fg:w="1"/><text x="70.9778%" y="639.50"></text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="70.6487%" y="805" width="0.2373%" height="15" fill="rgb(247,96,15)" fg:x="893" fg:w="3"/><text x="70.8987%" y="815.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="70.7278%" y="789" width="0.1582%" height="15" fill="rgb(211,210,7)" fg:x="894" fg:w="2"/><text x="70.9778%" y="799.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="70.8070%" y="773" width="0.0791%" height="15" fill="rgb(240,88,50)" fg:x="895" fg:w="1"/><text x="71.0570%" y="783.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="70.8070%" y="757" width="0.0791%" height="15" fill="rgb(209,229,26)" fg:x="895" fg:w="1"/><text x="71.0570%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="70.8070%" y="741" width="0.0791%" height="15" fill="rgb(210,68,23)" fg:x="895" fg:w="1"/><text x="71.0570%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.8070%" y="725" width="0.0791%" height="15" fill="rgb(229,180,13)" fg:x="895" fg:w="1"/><text x="71.0570%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.8070%" y="709" width="0.0791%" height="15" fill="rgb(236,53,44)" fg:x="895" fg:w="1"/><text x="71.0570%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.8070%" y="693" width="0.0791%" height="15" fill="rgb(244,214,29)" fg:x="895" fg:w="1"/><text x="71.0570%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.8070%" y="677" width="0.0791%" height="15" fill="rgb(220,75,29)" fg:x="895" fg:w="1"/><text x="71.0570%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8070%" y="661" width="0.0791%" height="15" fill="rgb(214,183,37)" fg:x="895" fg:w="1"/><text x="71.0570%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.8070%" y="645" width="0.0791%" height="15" fill="rgb(239,117,29)" fg:x="895" fg:w="1"/><text x="71.0570%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8070%" y="629" width="0.0791%" height="15" fill="rgb(237,171,35)" fg:x="895" fg:w="1"/><text x="71.0570%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.8070%" y="613" width="0.0791%" height="15" fill="rgb(229,178,53)" fg:x="895" fg:w="1"/><text x="71.0570%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8070%" y="597" width="0.0791%" height="15" fill="rgb(210,102,19)" fg:x="895" fg:w="1"/><text x="71.0570%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.8070%" y="581" width="0.0791%" height="15" fill="rgb(235,127,22)" fg:x="895" fg:w="1"/><text x="71.0570%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.8070%" y="565" width="0.0791%" height="15" fill="rgb(244,31,31)" fg:x="895" fg:w="1"/><text x="71.0570%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.8070%" y="549" width="0.0791%" height="15" fill="rgb(231,43,21)" fg:x="895" fg:w="1"/><text x="71.0570%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (20 samples, 1.58%)</title><rect x="69.3829%" y="821" width="1.5823%" height="15" fill="rgb(217,131,35)" fg:x="877" fg:w="20"/><text x="69.6329%" y="831.50"></text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="70.8861%" y="805" width="0.0791%" height="15" fill="rgb(221,149,4)" fg:x="896" fg:w="1"/><text x="71.1361%" y="815.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="70.8861%" y="789" width="0.0791%" height="15" fill="rgb(232,170,28)" fg:x="896" fg:w="1"/><text x="71.1361%" y="799.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="70.8861%" y="773" width="0.0791%" height="15" fill="rgb(238,56,10)" fg:x="896" fg:w="1"/><text x="71.1361%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.8861%" y="757" width="0.0791%" height="15" fill="rgb(235,196,14)" fg:x="896" fg:w="1"/><text x="71.1361%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.8861%" y="741" width="0.0791%" height="15" fill="rgb(216,45,48)" fg:x="896" fg:w="1"/><text x="71.1361%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.8861%" y="725" width="0.0791%" height="15" fill="rgb(238,213,17)" fg:x="896" fg:w="1"/><text x="71.1361%" y="735.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8861%" y="709" width="0.0791%" height="15" fill="rgb(212,13,2)" fg:x="896" fg:w="1"/><text x="71.1361%" y="719.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (33 samples, 2.61%)</title><rect x="68.5127%" y="837" width="2.6108%" height="15" fill="rgb(240,114,20)" fg:x="866" fg:w="33"/><text x="68.7627%" y="847.50">&lt;t..</text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="70.9652%" y="821" width="0.1582%" height="15" fill="rgb(228,41,40)" fg:x="897" fg:w="2"/><text x="71.2152%" y="831.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="70.9652%" y="805" width="0.1582%" height="15" fill="rgb(244,132,35)" fg:x="897" fg:w="2"/><text x="71.2152%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="70.9652%" y="789" width="0.1582%" height="15" fill="rgb(253,189,4)" fg:x="897" fg:w="2"/><text x="71.2152%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="70.9652%" y="773" width="0.1582%" height="15" fill="rgb(224,37,19)" fg:x="897" fg:w="2"/><text x="71.2152%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="70.9652%" y="757" width="0.1582%" height="15" fill="rgb(235,223,18)" fg:x="897" fg:w="2"/><text x="71.2152%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="71.0443%" y="741" width="0.0791%" height="15" fill="rgb(235,163,25)" fg:x="898" fg:w="1"/><text x="71.2943%" y="751.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="71.0443%" y="725" width="0.0791%" height="15" fill="rgb(217,145,28)" fg:x="898" fg:w="1"/><text x="71.2943%" y="735.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="71.0443%" y="709" width="0.0791%" height="15" fill="rgb(223,223,32)" fg:x="898" fg:w="1"/><text x="71.2943%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.0443%" y="693" width="0.0791%" height="15" fill="rgb(227,189,39)" fg:x="898" fg:w="1"/><text x="71.2943%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="71.1234%" y="837" width="0.0791%" height="15" fill="rgb(248,10,22)" fg:x="899" fg:w="1"/><text x="71.3734%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="71.1234%" y="821" width="0.0791%" height="15" fill="rgb(248,46,39)" fg:x="899" fg:w="1"/><text x="71.3734%" y="831.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.1234%" y="805" width="0.0791%" height="15" fill="rgb(248,113,48)" fg:x="899" fg:w="1"/><text x="71.3734%" y="815.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="71.2025%" y="805" width="0.1582%" height="15" fill="rgb(245,16,25)" fg:x="900" fg:w="2"/><text x="71.4525%" y="815.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="71.3608%" y="805" width="0.0791%" height="15" fill="rgb(249,152,16)" fg:x="902" fg:w="1"/><text x="71.6108%" y="815.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="71.3608%" y="789" width="0.0791%" height="15" fill="rgb(250,16,1)" fg:x="902" fg:w="1"/><text x="71.6108%" y="799.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.3608%" y="773" width="0.0791%" height="15" fill="rgb(249,138,3)" fg:x="902" fg:w="1"/><text x="71.6108%" y="783.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.3608%" y="757" width="0.0791%" height="15" fill="rgb(227,71,41)" fg:x="902" fg:w="1"/><text x="71.6108%" y="767.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.3608%" y="741" width="0.0791%" height="15" fill="rgb(209,184,23)" fg:x="902" fg:w="1"/><text x="71.6108%" y="751.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="71.4399%" y="757" width="0.2373%" height="15" fill="rgb(223,215,31)" fg:x="903" fg:w="3"/><text x="71.6899%" y="767.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="71.4399%" y="741" width="0.2373%" height="15" fill="rgb(210,146,28)" fg:x="903" fg:w="3"/><text x="71.6899%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.5981%" y="725" width="0.0791%" height="15" fill="rgb(209,183,41)" fg:x="905" fg:w="1"/><text x="71.8481%" y="735.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.5981%" y="709" width="0.0791%" height="15" fill="rgb(209,224,45)" fg:x="905" fg:w="1"/><text x="71.8481%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.5981%" y="693" width="0.0791%" height="15" fill="rgb(224,209,51)" fg:x="905" fg:w="1"/><text x="71.8481%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.5981%" y="677" width="0.0791%" height="15" fill="rgb(223,17,39)" fg:x="905" fg:w="1"/><text x="71.8481%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.5981%" y="661" width="0.0791%" height="15" fill="rgb(234,204,37)" fg:x="905" fg:w="1"/><text x="71.8481%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.6772%" y="725" width="0.0791%" height="15" fill="rgb(236,120,5)" fg:x="906" fg:w="1"/><text x="71.9272%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.6772%" y="709" width="0.0791%" height="15" fill="rgb(248,97,27)" fg:x="906" fg:w="1"/><text x="71.9272%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.6772%" y="693" width="0.0791%" height="15" fill="rgb(240,66,17)" fg:x="906" fg:w="1"/><text x="71.9272%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.6772%" y="677" width="0.0791%" height="15" fill="rgb(210,79,3)" fg:x="906" fg:w="1"/><text x="71.9272%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.7563%" y="709" width="0.0791%" height="15" fill="rgb(214,176,27)" fg:x="907" fg:w="1"/><text x="72.0063%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.7563%" y="693" width="0.0791%" height="15" fill="rgb(235,185,3)" fg:x="907" fg:w="1"/><text x="72.0063%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.7563%" y="677" width="0.0791%" height="15" fill="rgb(227,24,12)" fg:x="907" fg:w="1"/><text x="72.0063%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.8354%" y="677" width="0.0791%" height="15" fill="rgb(252,169,48)" fg:x="908" fg:w="1"/><text x="72.0854%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="71.6772%" y="741" width="0.3165%" height="15" fill="rgb(212,65,1)" fg:x="906" fg:w="4"/><text x="71.9272%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="71.7563%" y="725" width="0.2373%" height="15" fill="rgb(242,39,24)" fg:x="907" fg:w="3"/><text x="72.0063%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.8354%" y="709" width="0.1582%" height="15" fill="rgb(249,32,23)" fg:x="908" fg:w="2"/><text x="72.0854%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.8354%" y="693" width="0.1582%" height="15" fill="rgb(251,195,23)" fg:x="908" fg:w="2"/><text x="72.0854%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.9146%" y="677" width="0.0791%" height="15" fill="rgb(236,174,8)" fg:x="909" fg:w="1"/><text x="72.1646%" y="687.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.63%)</title><rect x="71.4399%" y="773" width="0.6329%" height="15" fill="rgb(220,197,8)" fg:x="903" fg:w="8"/><text x="71.6899%" y="783.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="71.6772%" y="757" width="0.3956%" height="15" fill="rgb(240,108,37)" fg:x="906" fg:w="5"/><text x="71.9272%" y="767.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.9937%" y="741" width="0.0791%" height="15" fill="rgb(232,176,24)" fg:x="910" fg:w="1"/><text x="72.2437%" y="751.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.9937%" y="725" width="0.0791%" height="15" fill="rgb(243,35,29)" fg:x="910" fg:w="1"/><text x="72.2437%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.9937%" y="709" width="0.0791%" height="15" fill="rgb(210,37,18)" fg:x="910" fg:w="1"/><text x="72.2437%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.9937%" y="693" width="0.0791%" height="15" fill="rgb(224,184,40)" fg:x="910" fg:w="1"/><text x="72.2437%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.9937%" y="677" width="0.0791%" height="15" fill="rgb(236,39,29)" fg:x="910" fg:w="1"/><text x="72.2437%" y="687.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.9937%" y="661" width="0.0791%" height="15" fill="rgb(232,48,39)" fg:x="910" fg:w="1"/><text x="72.2437%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0728%" y="773" width="0.0791%" height="15" fill="rgb(236,34,42)" fg:x="911" fg:w="1"/><text x="72.3228%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.0728%" y="757" width="0.0791%" height="15" fill="rgb(243,106,37)" fg:x="911" fg:w="1"/><text x="72.3228%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0728%" y="741" width="0.0791%" height="15" fill="rgb(218,96,6)" fg:x="911" fg:w="1"/><text x="72.3228%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0728%" y="725" width="0.0791%" height="15" fill="rgb(235,130,12)" fg:x="911" fg:w="1"/><text x="72.3228%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0728%" y="709" width="0.0791%" height="15" fill="rgb(231,95,0)" fg:x="911" fg:w="1"/><text x="72.3228%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="72.0728%" y="693" width="0.0791%" height="15" fill="rgb(228,12,23)" fg:x="911" fg:w="1"/><text x="72.3228%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.0728%" y="677" width="0.0791%" height="15" fill="rgb(216,12,1)" fg:x="911" fg:w="1"/><text x="72.3228%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.0728%" y="661" width="0.0791%" height="15" fill="rgb(219,59,3)" fg:x="911" fg:w="1"/><text x="72.3228%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.1519%" y="693" width="0.0791%" height="15" fill="rgb(215,208,46)" fg:x="912" fg:w="1"/><text x="72.4019%" y="703.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="72.2310%" y="629" width="0.1582%" height="15" fill="rgb(254,224,29)" fg:x="913" fg:w="2"/><text x="72.4810%" y="639.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="72.1519%" y="757" width="0.3165%" height="15" fill="rgb(232,14,29)" fg:x="912" fg:w="4"/><text x="72.4019%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="72.1519%" y="741" width="0.3165%" height="15" fill="rgb(208,45,52)" fg:x="912" fg:w="4"/><text x="72.4019%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="72.1519%" y="725" width="0.3165%" height="15" fill="rgb(234,191,28)" fg:x="912" fg:w="4"/><text x="72.4019%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="72.1519%" y="709" width="0.3165%" height="15" fill="rgb(244,67,43)" fg:x="912" fg:w="4"/><text x="72.4019%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="72.2310%" y="693" width="0.2373%" height="15" fill="rgb(236,189,24)" fg:x="913" fg:w="3"/><text x="72.4810%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="72.2310%" y="677" width="0.2373%" height="15" fill="rgb(239,214,33)" fg:x="913" fg:w="3"/><text x="72.4810%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="72.2310%" y="661" width="0.2373%" height="15" fill="rgb(226,176,41)" fg:x="913" fg:w="3"/><text x="72.4810%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="72.2310%" y="645" width="0.2373%" height="15" fill="rgb(248,47,8)" fg:x="913" fg:w="3"/><text x="72.4810%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.3892%" y="629" width="0.0791%" height="15" fill="rgb(218,81,44)" fg:x="915" fg:w="1"/><text x="72.6392%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="72.4684%" y="757" width="0.0791%" height="15" fill="rgb(213,98,6)" fg:x="916" fg:w="1"/><text x="72.7184%" y="767.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="72.5475%" y="725" width="0.0791%" height="15" fill="rgb(222,85,22)" fg:x="917" fg:w="1"/><text x="72.7975%" y="735.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="72.5475%" y="709" width="0.0791%" height="15" fill="rgb(239,46,39)" fg:x="917" fg:w="1"/><text x="72.7975%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6266%" y="709" width="0.0791%" height="15" fill="rgb(237,12,29)" fg:x="918" fg:w="1"/><text x="72.8766%" y="719.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6266%" y="693" width="0.0791%" height="15" fill="rgb(214,77,8)" fg:x="918" fg:w="1"/><text x="72.8766%" y="703.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="72.6266%" y="677" width="0.0791%" height="15" fill="rgb(217,168,37)" fg:x="918" fg:w="1"/><text x="72.8766%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7848%" y="677" width="0.0791%" height="15" fill="rgb(221,217,23)" fg:x="920" fg:w="1"/><text x="73.0348%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7848%" y="661" width="0.0791%" height="15" fill="rgb(243,229,36)" fg:x="920" fg:w="1"/><text x="73.0348%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7848%" y="645" width="0.0791%" height="15" fill="rgb(251,163,40)" fg:x="920" fg:w="1"/><text x="73.0348%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="72.8639%" y="677" width="0.0791%" height="15" fill="rgb(237,222,12)" fg:x="921" fg:w="1"/><text x="73.1139%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.8639%" y="661" width="0.0791%" height="15" fill="rgb(248,132,6)" fg:x="921" fg:w="1"/><text x="73.1139%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.8639%" y="645" width="0.0791%" height="15" fill="rgb(227,167,50)" fg:x="921" fg:w="1"/><text x="73.1139%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0222%" y="645" width="0.0791%" height="15" fill="rgb(242,84,37)" fg:x="923" fg:w="1"/><text x="73.2722%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0222%" y="629" width="0.0791%" height="15" fill="rgb(212,4,50)" fg:x="923" fg:w="1"/><text x="73.2722%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.2595%" y="549" width="0.0791%" height="15" fill="rgb(230,228,32)" fg:x="926" fg:w="1"/><text x="73.5095%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.2595%" y="533" width="0.0791%" height="15" fill="rgb(248,217,23)" fg:x="926" fg:w="1"/><text x="73.5095%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.87%)</title><rect x="72.5475%" y="757" width="0.8703%" height="15" fill="rgb(238,197,32)" fg:x="917" fg:w="11"/><text x="72.7975%" y="767.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.87%)</title><rect x="72.5475%" y="741" width="0.8703%" height="15" fill="rgb(236,106,1)" fg:x="917" fg:w="11"/><text x="72.7975%" y="751.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.79%)</title><rect x="72.6266%" y="725" width="0.7911%" height="15" fill="rgb(219,228,13)" fg:x="918" fg:w="10"/><text x="72.8766%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.71%)</title><rect x="72.7057%" y="709" width="0.7120%" height="15" fill="rgb(238,30,35)" fg:x="919" fg:w="9"/><text x="72.9557%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.63%)</title><rect x="72.7848%" y="693" width="0.6329%" height="15" fill="rgb(236,70,23)" fg:x="920" fg:w="8"/><text x="73.0348%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="72.9430%" y="677" width="0.4747%" height="15" fill="rgb(249,104,48)" fg:x="922" fg:w="6"/><text x="73.1930%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="73.0222%" y="661" width="0.3956%" height="15" fill="rgb(254,117,50)" fg:x="923" fg:w="5"/><text x="73.2722%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="73.1013%" y="645" width="0.3165%" height="15" fill="rgb(223,152,4)" fg:x="924" fg:w="4"/><text x="73.3513%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="73.1013%" y="629" width="0.3165%" height="15" fill="rgb(245,6,2)" fg:x="924" fg:w="4"/><text x="73.3513%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="73.1013%" y="613" width="0.3165%" height="15" fill="rgb(249,150,24)" fg:x="924" fg:w="4"/><text x="73.3513%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="73.1013%" y="597" width="0.3165%" height="15" fill="rgb(228,185,42)" fg:x="924" fg:w="4"/><text x="73.3513%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="73.1804%" y="581" width="0.2373%" height="15" fill="rgb(226,39,33)" fg:x="925" fg:w="3"/><text x="73.4304%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="73.2595%" y="565" width="0.1582%" height="15" fill="rgb(221,166,19)" fg:x="926" fg:w="2"/><text x="73.5095%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.3386%" y="549" width="0.0791%" height="15" fill="rgb(209,109,2)" fg:x="927" fg:w="1"/><text x="73.5886%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.4177%" y="597" width="0.0791%" height="15" fill="rgb(252,216,26)" fg:x="928" fg:w="1"/><text x="73.6677%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.4177%" y="581" width="0.0791%" height="15" fill="rgb(227,173,36)" fg:x="928" fg:w="1"/><text x="73.6677%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.4177%" y="565" width="0.0791%" height="15" fill="rgb(209,90,7)" fg:x="928" fg:w="1"/><text x="73.6677%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.4177%" y="549" width="0.0791%" height="15" fill="rgb(250,194,11)" fg:x="928" fg:w="1"/><text x="73.6677%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.4177%" y="533" width="0.0791%" height="15" fill="rgb(220,72,50)" fg:x="928" fg:w="1"/><text x="73.6677%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.4177%" y="517" width="0.0791%" height="15" fill="rgb(222,106,48)" fg:x="928" fg:w="1"/><text x="73.6677%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.4177%" y="501" width="0.0791%" height="15" fill="rgb(216,220,45)" fg:x="928" fg:w="1"/><text x="73.6677%" y="511.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (27 samples, 2.14%)</title><rect x="71.4399%" y="805" width="2.1361%" height="15" fill="rgb(234,112,18)" fg:x="903" fg:w="27"/><text x="71.6899%" y="815.50">e..</text></g><g><title>engine::session::SavesEntities::check_for_changes (27 samples, 2.14%)</title><rect x="71.4399%" y="789" width="2.1361%" height="15" fill="rgb(206,179,9)" fg:x="903" fg:w="27"/><text x="71.6899%" y="799.50">e..</text></g><g><title>kernel::model::any_entity_changes (18 samples, 1.42%)</title><rect x="72.1519%" y="773" width="1.4241%" height="15" fill="rgb(215,115,40)" fg:x="912" fg:w="18"/><text x="72.4019%" y="783.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="73.4177%" y="757" width="0.1582%" height="15" fill="rgb(222,69,34)" fg:x="928" fg:w="2"/><text x="73.6677%" y="767.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="73.4177%" y="741" width="0.1582%" height="15" fill="rgb(209,161,10)" fg:x="928" fg:w="2"/><text x="73.6677%" y="751.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.4177%" y="725" width="0.1582%" height="15" fill="rgb(217,6,38)" fg:x="928" fg:w="2"/><text x="73.6677%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.4177%" y="709" width="0.1582%" height="15" fill="rgb(229,229,48)" fg:x="928" fg:w="2"/><text x="73.6677%" y="719.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.4177%" y="693" width="0.1582%" height="15" fill="rgb(225,21,28)" fg:x="928" fg:w="2"/><text x="73.6677%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.4177%" y="677" width="0.1582%" height="15" fill="rgb(206,33,13)" fg:x="928" fg:w="2"/><text x="73.6677%" y="687.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.4177%" y="661" width="0.1582%" height="15" fill="rgb(242,178,17)" fg:x="928" fg:w="2"/><text x="73.6677%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.4177%" y="645" width="0.1582%" height="15" fill="rgb(220,162,5)" fg:x="928" fg:w="2"/><text x="73.6677%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.4177%" y="629" width="0.1582%" height="15" fill="rgb(210,33,43)" fg:x="928" fg:w="2"/><text x="73.6677%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.4177%" y="613" width="0.1582%" height="15" fill="rgb(216,116,54)" fg:x="928" fg:w="2"/><text x="73.6677%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.4968%" y="597" width="0.0791%" height="15" fill="rgb(249,92,24)" fg:x="929" fg:w="1"/><text x="73.7468%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.4968%" y="581" width="0.0791%" height="15" fill="rgb(231,189,14)" fg:x="929" fg:w="1"/><text x="73.7468%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="73.5759%" y="773" width="0.0791%" height="15" fill="rgb(230,8,41)" fg:x="930" fg:w="1"/><text x="73.8259%" y="783.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="73.5759%" y="757" width="0.0791%" height="15" fill="rgb(249,7,27)" fg:x="930" fg:w="1"/><text x="73.8259%" y="767.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.5759%" y="741" width="0.0791%" height="15" fill="rgb(232,86,5)" fg:x="930" fg:w="1"/><text x="73.8259%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.5759%" y="725" width="0.0791%" height="15" fill="rgb(224,175,18)" fg:x="930" fg:w="1"/><text x="73.8259%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.5759%" y="709" width="0.0791%" height="15" fill="rgb(220,129,12)" fg:x="930" fg:w="1"/><text x="73.8259%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.5759%" y="693" width="0.0791%" height="15" fill="rgb(210,19,36)" fg:x="930" fg:w="1"/><text x="73.8259%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.5759%" y="677" width="0.0791%" height="15" fill="rgb(219,96,14)" fg:x="930" fg:w="1"/><text x="73.8259%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.5759%" y="661" width="0.0791%" height="15" fill="rgb(249,106,1)" fg:x="930" fg:w="1"/><text x="73.8259%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="73.5759%" y="645" width="0.0791%" height="15" fill="rgb(249,155,20)" fg:x="930" fg:w="1"/><text x="73.8259%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="73.5759%" y="629" width="0.0791%" height="15" fill="rgb(244,168,9)" fg:x="930" fg:w="1"/><text x="73.8259%" y="639.50"></text></g><g><title>engine::session::Session::close (32 samples, 2.53%)</title><rect x="71.2025%" y="837" width="2.5316%" height="15" fill="rgb(216,23,50)" fg:x="900" fg:w="32"/><text x="71.4525%" y="847.50">en..</text></g><g><title>engine::session::Session::save_entity_changes (32 samples, 2.53%)</title><rect x="71.2025%" y="821" width="2.5316%" height="15" fill="rgb(224,219,20)" fg:x="900" fg:w="32"/><text x="71.4525%" y="831.50">en..</text></g><g><title>engine::session::Session::world (2 samples, 0.16%)</title><rect x="73.5759%" y="805" width="0.1582%" height="15" fill="rgb(222,156,15)" fg:x="930" fg:w="2"/><text x="73.8259%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="73.5759%" y="789" width="0.1582%" height="15" fill="rgb(231,97,17)" fg:x="930" fg:w="2"/><text x="73.8259%" y="799.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.6551%" y="773" width="0.0791%" height="15" fill="rgb(218,70,48)" fg:x="931" fg:w="1"/><text x="73.9051%" y="783.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.8133%" y="645" width="0.0791%" height="15" fill="rgb(212,196,52)" fg:x="933" fg:w="1"/><text x="74.0633%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="73.8133%" y="661" width="0.1582%" height="15" fill="rgb(243,203,18)" fg:x="933" fg:w="2"/><text x="74.0633%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.8924%" y="645" width="0.0791%" height="15" fill="rgb(252,125,41)" fg:x="934" fg:w="1"/><text x="74.1424%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.8924%" y="629" width="0.0791%" height="15" fill="rgb(223,180,33)" fg:x="934" fg:w="1"/><text x="74.1424%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.8924%" y="613" width="0.0791%" height="15" fill="rgb(254,159,46)" fg:x="934" fg:w="1"/><text x="74.1424%" y="623.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (1 samples, 0.08%)</title><rect x="73.9715%" y="661" width="0.0791%" height="15" fill="rgb(254,38,10)" fg:x="935" fg:w="1"/><text x="74.2215%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (1 samples, 0.08%)</title><rect x="73.9715%" y="645" width="0.0791%" height="15" fill="rgb(208,217,32)" fg:x="935" fg:w="1"/><text x="74.2215%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="73.9715%" y="629" width="0.0791%" height="15" fill="rgb(221,120,13)" fg:x="935" fg:w="1"/><text x="74.2215%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.9715%" y="613" width="0.0791%" height="15" fill="rgb(246,54,52)" fg:x="935" fg:w="1"/><text x="74.2215%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="74.2089%" y="597" width="0.0791%" height="15" fill="rgb(242,34,25)" fg:x="938" fg:w="1"/><text x="74.4589%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="74.2089%" y="581" width="0.0791%" height="15" fill="rgb(247,209,9)" fg:x="938" fg:w="1"/><text x="74.4589%" y="591.50"></text></g><g><title>engine::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="74.2089%" y="565" width="0.0791%" height="15" fill="rgb(228,71,26)" fg:x="938" fg:w="1"/><text x="74.4589%" y="575.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="74.2089%" y="549" width="0.0791%" height="15" fill="rgb(222,145,49)" fg:x="938" fg:w="1"/><text x="74.4589%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.2089%" y="533" width="0.0791%" height="15" fill="rgb(218,121,17)" fg:x="938" fg:w="1"/><text x="74.4589%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.2089%" y="517" width="0.0791%" height="15" fill="rgb(244,50,7)" fg:x="938" fg:w="1"/><text x="74.4589%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.2089%" y="501" width="0.0791%" height="15" fill="rgb(246,229,37)" fg:x="938" fg:w="1"/><text x="74.4589%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.2089%" y="485" width="0.0791%" height="15" fill="rgb(225,18,5)" fg:x="938" fg:w="1"/><text x="74.4589%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.2089%" y="469" width="0.0791%" height="15" fill="rgb(213,204,8)" fg:x="938" fg:w="1"/><text x="74.4589%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.2089%" y="453" width="0.0791%" height="15" fill="rgb(238,103,6)" fg:x="938" fg:w="1"/><text x="74.4589%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.2089%" y="437" width="0.0791%" height="15" fill="rgb(222,25,35)" fg:x="938" fg:w="1"/><text x="74.4589%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.2089%" y="421" width="0.0791%" height="15" fill="rgb(213,203,35)" fg:x="938" fg:w="1"/><text x="74.4589%" y="431.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (4 samples, 0.32%)</title><rect x="74.0506%" y="661" width="0.3165%" height="15" fill="rgb(221,79,53)" fg:x="936" fg:w="4"/><text x="74.3006%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (3 samples, 0.24%)</title><rect x="74.1297%" y="645" width="0.2373%" height="15" fill="rgb(243,200,35)" fg:x="937" fg:w="3"/><text x="74.3797%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="74.1297%" y="629" width="0.2373%" height="15" fill="rgb(248,60,25)" fg:x="937" fg:w="3"/><text x="74.3797%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="74.1297%" y="613" width="0.2373%" height="15" fill="rgb(227,53,46)" fg:x="937" fg:w="3"/><text x="74.3797%" y="623.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.2880%" y="597" width="0.0791%" height="15" fill="rgb(216,120,32)" fg:x="939" fg:w="1"/><text x="74.5380%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.2880%" y="581" width="0.0791%" height="15" fill="rgb(220,134,1)" fg:x="939" fg:w="1"/><text x="74.5380%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.2880%" y="565" width="0.0791%" height="15" fill="rgb(237,168,5)" fg:x="939" fg:w="1"/><text x="74.5380%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (4 samples, 0.32%)</title><rect x="74.3671%" y="629" width="0.3165%" height="15" fill="rgb(231,100,33)" fg:x="940" fg:w="4"/><text x="74.6171%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="74.4462%" y="613" width="0.2373%" height="15" fill="rgb(236,177,47)" fg:x="941" fg:w="3"/><text x="74.6962%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="74.4462%" y="597" width="0.2373%" height="15" fill="rgb(235,7,49)" fg:x="941" fg:w="3"/><text x="74.6962%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.5253%" y="581" width="0.1582%" height="15" fill="rgb(232,119,22)" fg:x="942" fg:w="2"/><text x="74.7753%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.5253%" y="565" width="0.1582%" height="15" fill="rgb(254,73,53)" fg:x="942" fg:w="2"/><text x="74.7753%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.5253%" y="549" width="0.1582%" height="15" fill="rgb(251,35,20)" fg:x="942" fg:w="2"/><text x="74.7753%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.5253%" y="533" width="0.1582%" height="15" fill="rgb(241,119,20)" fg:x="942" fg:w="2"/><text x="74.7753%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="74.5253%" y="517" width="0.1582%" height="15" fill="rgb(207,102,14)" fg:x="942" fg:w="2"/><text x="74.7753%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="74.6835%" y="597" width="0.1582%" height="15" fill="rgb(248,201,50)" fg:x="944" fg:w="2"/><text x="74.9335%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="74.6835%" y="581" width="0.1582%" height="15" fill="rgb(222,185,44)" fg:x="944" fg:w="2"/><text x="74.9335%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.8418%" y="533" width="0.0791%" height="15" fill="rgb(218,107,18)" fg:x="946" fg:w="1"/><text x="75.0918%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.9209%" y="341" width="0.0791%" height="15" fill="rgb(237,177,39)" fg:x="947" fg:w="1"/><text x="75.1709%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.9209%" y="325" width="0.0791%" height="15" fill="rgb(246,69,6)" fg:x="947" fg:w="1"/><text x="75.1709%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="74.9209%" y="309" width="0.0791%" height="15" fill="rgb(234,208,37)" fg:x="947" fg:w="1"/><text x="75.1709%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="74.9209%" y="293" width="0.0791%" height="15" fill="rgb(225,4,6)" fg:x="947" fg:w="1"/><text x="75.1709%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="74.9209%" y="277" width="0.0791%" height="15" fill="rgb(233,45,0)" fg:x="947" fg:w="1"/><text x="75.1709%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="74.9209%" y="261" width="0.0791%" height="15" fill="rgb(226,136,5)" fg:x="947" fg:w="1"/><text x="75.1709%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="74.9209%" y="245" width="0.0791%" height="15" fill="rgb(211,91,47)" fg:x="947" fg:w="1"/><text x="75.1709%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="74.9209%" y="229" width="0.0791%" height="15" fill="rgb(242,88,51)" fg:x="947" fg:w="1"/><text x="75.1709%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.9209%" y="213" width="0.0791%" height="15" fill="rgb(230,91,28)" fg:x="947" fg:w="1"/><text x="75.1709%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="74.9209%" y="197" width="0.0791%" height="15" fill="rgb(254,186,29)" fg:x="947" fg:w="1"/><text x="75.1709%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.08%)</title><rect x="74.9209%" y="181" width="0.0791%" height="15" fill="rgb(238,6,4)" fg:x="947" fg:w="1"/><text x="75.1709%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="74.9209%" y="517" width="0.1582%" height="15" fill="rgb(221,151,16)" fg:x="947" fg:w="2"/><text x="75.1709%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (2 samples, 0.16%)</title><rect x="74.9209%" y="501" width="0.1582%" height="15" fill="rgb(251,143,52)" fg:x="947" fg:w="2"/><text x="75.1709%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="74.9209%" y="485" width="0.1582%" height="15" fill="rgb(206,90,15)" fg:x="947" fg:w="2"/><text x="75.1709%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="74.9209%" y="469" width="0.1582%" height="15" fill="rgb(218,35,8)" fg:x="947" fg:w="2"/><text x="75.1709%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="74.9209%" y="453" width="0.1582%" height="15" fill="rgb(239,215,6)" fg:x="947" fg:w="2"/><text x="75.1709%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="74.9209%" y="437" width="0.1582%" height="15" fill="rgb(245,116,39)" fg:x="947" fg:w="2"/><text x="75.1709%" y="447.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="74.9209%" y="421" width="0.1582%" height="15" fill="rgb(242,65,28)" fg:x="947" fg:w="2"/><text x="75.1709%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="74.9209%" y="405" width="0.1582%" height="15" fill="rgb(252,132,53)" fg:x="947" fg:w="2"/><text x="75.1709%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="74.9209%" y="389" width="0.1582%" height="15" fill="rgb(224,159,50)" fg:x="947" fg:w="2"/><text x="75.1709%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="74.9209%" y="373" width="0.1582%" height="15" fill="rgb(224,93,4)" fg:x="947" fg:w="2"/><text x="75.1709%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="74.9209%" y="357" width="0.1582%" height="15" fill="rgb(208,81,34)" fg:x="947" fg:w="2"/><text x="75.1709%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.0000%" y="341" width="0.0791%" height="15" fill="rgb(233,92,54)" fg:x="948" fg:w="1"/><text x="75.2500%" y="351.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="75.0000%" y="325" width="0.0791%" height="15" fill="rgb(237,21,14)" fg:x="948" fg:w="1"/><text x="75.2500%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="75.0000%" y="309" width="0.0791%" height="15" fill="rgb(249,128,51)" fg:x="948" fg:w="1"/><text x="75.2500%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.0000%" y="293" width="0.0791%" height="15" fill="rgb(223,129,24)" fg:x="948" fg:w="1"/><text x="75.2500%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.0000%" y="277" width="0.0791%" height="15" fill="rgb(231,168,25)" fg:x="948" fg:w="1"/><text x="75.2500%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.0000%" y="261" width="0.0791%" height="15" fill="rgb(224,39,20)" fg:x="948" fg:w="1"/><text x="75.2500%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.0000%" y="245" width="0.0791%" height="15" fill="rgb(225,152,53)" fg:x="948" fg:w="1"/><text x="75.2500%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="75.0000%" y="229" width="0.0791%" height="15" fill="rgb(252,17,24)" fg:x="948" fg:w="1"/><text x="75.2500%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="75.0000%" y="213" width="0.0791%" height="15" fill="rgb(250,114,30)" fg:x="948" fg:w="1"/><text x="75.2500%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="75.0000%" y="197" width="0.0791%" height="15" fill="rgb(229,5,4)" fg:x="948" fg:w="1"/><text x="75.2500%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="75.0000%" y="181" width="0.0791%" height="15" fill="rgb(225,176,49)" fg:x="948" fg:w="1"/><text x="75.2500%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="75.0000%" y="165" width="0.0791%" height="15" fill="rgb(224,221,49)" fg:x="948" fg:w="1"/><text x="75.2500%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="75.0000%" y="149" width="0.0791%" height="15" fill="rgb(253,169,27)" fg:x="948" fg:w="1"/><text x="75.2500%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.0000%" y="133" width="0.0791%" height="15" fill="rgb(211,206,16)" fg:x="948" fg:w="1"/><text x="75.2500%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="75.0000%" y="117" width="0.0791%" height="15" fill="rgb(244,87,35)" fg:x="948" fg:w="1"/><text x="75.2500%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.0000%" y="101" width="0.0791%" height="15" fill="rgb(246,28,10)" fg:x="948" fg:w="1"/><text x="75.2500%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="75.0000%" y="85" width="0.0791%" height="15" fill="rgb(229,12,44)" fg:x="948" fg:w="1"/><text x="75.2500%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="75.0000%" y="69" width="0.0791%" height="15" fill="rgb(210,145,37)" fg:x="948" fg:w="1"/><text x="75.2500%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="75.0000%" y="53" width="0.0791%" height="15" fill="rgb(227,112,52)" fg:x="948" fg:w="1"/><text x="75.2500%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.0000%" y="37" width="0.0791%" height="15" fill="rgb(238,155,34)" fg:x="948" fg:w="1"/><text x="75.2500%" y="47.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.0791%" y="293" width="0.0791%" height="15" fill="rgb(239,226,36)" fg:x="949" fg:w="1"/><text x="75.3291%" y="303.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="75.0791%" y="405" width="0.1582%" height="15" fill="rgb(230,16,23)" fg:x="949" fg:w="2"/><text x="75.3291%" y="415.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="75.0791%" y="389" width="0.1582%" height="15" fill="rgb(236,171,36)" fg:x="949" fg:w="2"/><text x="75.3291%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="75.0791%" y="373" width="0.1582%" height="15" fill="rgb(221,22,14)" fg:x="949" fg:w="2"/><text x="75.3291%" y="383.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="75.0791%" y="357" width="0.1582%" height="15" fill="rgb(242,43,11)" fg:x="949" fg:w="2"/><text x="75.3291%" y="367.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="75.0791%" y="341" width="0.1582%" height="15" fill="rgb(232,69,23)" fg:x="949" fg:w="2"/><text x="75.3291%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.0791%" y="325" width="0.1582%" height="15" fill="rgb(216,180,54)" fg:x="949" fg:w="2"/><text x="75.3291%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.0791%" y="309" width="0.1582%" height="15" fill="rgb(216,5,24)" fg:x="949" fg:w="2"/><text x="75.3291%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.1582%" y="293" width="0.0791%" height="15" fill="rgb(225,89,9)" fg:x="950" fg:w="1"/><text x="75.4082%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.1582%" y="277" width="0.0791%" height="15" fill="rgb(243,75,33)" fg:x="950" fg:w="1"/><text x="75.4082%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.1582%" y="261" width="0.0791%" height="15" fill="rgb(247,141,45)" fg:x="950" fg:w="1"/><text x="75.4082%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.1582%" y="245" width="0.0791%" height="15" fill="rgb(232,177,36)" fg:x="950" fg:w="1"/><text x="75.4082%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1582%" y="229" width="0.0791%" height="15" fill="rgb(219,125,36)" fg:x="950" fg:w="1"/><text x="75.4082%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.2373%" y="277" width="0.0791%" height="15" fill="rgb(227,94,9)" fg:x="951" fg:w="1"/><text x="75.4873%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.2373%" y="261" width="0.0791%" height="15" fill="rgb(240,34,52)" fg:x="951" fg:w="1"/><text x="75.4873%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2373%" y="245" width="0.0791%" height="15" fill="rgb(216,45,12)" fg:x="951" fg:w="1"/><text x="75.4873%" y="255.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.47%)</title><rect x="74.9209%" y="533" width="0.4747%" height="15" fill="rgb(246,21,19)" fg:x="947" fg:w="6"/><text x="75.1709%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="75.0791%" y="517" width="0.3165%" height="15" fill="rgb(213,98,42)" fg:x="949" fg:w="4"/><text x="75.3291%" y="527.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (4 samples, 0.32%)</title><rect x="75.0791%" y="501" width="0.3165%" height="15" fill="rgb(250,136,47)" fg:x="949" fg:w="4"/><text x="75.3291%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (4 samples, 0.32%)</title><rect x="75.0791%" y="485" width="0.3165%" height="15" fill="rgb(251,124,27)" fg:x="949" fg:w="4"/><text x="75.3291%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="75.0791%" y="469" width="0.3165%" height="15" fill="rgb(229,180,14)" fg:x="949" fg:w="4"/><text x="75.3291%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="75.0791%" y="453" width="0.3165%" height="15" fill="rgb(245,216,25)" fg:x="949" fg:w="4"/><text x="75.3291%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="75.0791%" y="437" width="0.3165%" height="15" fill="rgb(251,43,5)" fg:x="949" fg:w="4"/><text x="75.3291%" y="447.50"></text></g><g><title>engine::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="75.0791%" y="421" width="0.3165%" height="15" fill="rgb(250,128,24)" fg:x="949" fg:w="4"/><text x="75.3291%" y="431.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="75.2373%" y="405" width="0.1582%" height="15" fill="rgb(217,117,27)" fg:x="951" fg:w="2"/><text x="75.4873%" y="415.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="75.2373%" y="389" width="0.1582%" height="15" fill="rgb(245,147,4)" fg:x="951" fg:w="2"/><text x="75.4873%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.2373%" y="373" width="0.1582%" height="15" fill="rgb(242,201,35)" fg:x="951" fg:w="2"/><text x="75.4873%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.2373%" y="357" width="0.1582%" height="15" fill="rgb(218,181,1)" fg:x="951" fg:w="2"/><text x="75.4873%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.2373%" y="341" width="0.1582%" height="15" fill="rgb(222,6,29)" fg:x="951" fg:w="2"/><text x="75.4873%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.2373%" y="325" width="0.1582%" height="15" fill="rgb(208,186,3)" fg:x="951" fg:w="2"/><text x="75.4873%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.2373%" y="309" width="0.1582%" height="15" fill="rgb(216,36,26)" fg:x="951" fg:w="2"/><text x="75.4873%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.2373%" y="293" width="0.1582%" height="15" fill="rgb(248,201,23)" fg:x="951" fg:w="2"/><text x="75.4873%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.3165%" y="277" width="0.0791%" height="15" fill="rgb(251,170,31)" fg:x="952" fg:w="1"/><text x="75.5665%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3165%" y="261" width="0.0791%" height="15" fill="rgb(207,110,25)" fg:x="952" fg:w="1"/><text x="75.5665%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.3165%" y="245" width="0.0791%" height="15" fill="rgb(250,54,15)" fg:x="952" fg:w="1"/><text x="75.5665%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3165%" y="229" width="0.0791%" height="15" fill="rgb(227,68,33)" fg:x="952" fg:w="1"/><text x="75.5665%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.3165%" y="213" width="0.0791%" height="15" fill="rgb(238,34,41)" fg:x="952" fg:w="1"/><text x="75.5665%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3165%" y="197" width="0.0791%" height="15" fill="rgb(220,11,15)" fg:x="952" fg:w="1"/><text x="75.5665%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.3165%" y="181" width="0.0791%" height="15" fill="rgb(246,111,35)" fg:x="952" fg:w="1"/><text x="75.5665%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3165%" y="165" width="0.0791%" height="15" fill="rgb(209,88,53)" fg:x="952" fg:w="1"/><text x="75.5665%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3165%" y="149" width="0.0791%" height="15" fill="rgb(231,185,47)" fg:x="952" fg:w="1"/><text x="75.5665%" y="159.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3165%" y="133" width="0.0791%" height="15" fill="rgb(233,154,1)" fg:x="952" fg:w="1"/><text x="75.5665%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.3165%" y="117" width="0.0791%" height="15" fill="rgb(225,15,46)" fg:x="952" fg:w="1"/><text x="75.5665%" y="127.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (8 samples, 0.63%)</title><rect x="74.8418%" y="549" width="0.6329%" height="15" fill="rgb(211,135,41)" fg:x="946" fg:w="8"/><text x="75.0918%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="75.3956%" y="533" width="0.0791%" height="15" fill="rgb(208,54,0)" fg:x="953" fg:w="1"/><text x="75.6456%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.3956%" y="517" width="0.0791%" height="15" fill="rgb(244,136,14)" fg:x="953" fg:w="1"/><text x="75.6456%" y="527.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.3956%" y="501" width="0.0791%" height="15" fill="rgb(241,56,14)" fg:x="953" fg:w="1"/><text x="75.6456%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3956%" y="485" width="0.0791%" height="15" fill="rgb(205,80,24)" fg:x="953" fg:w="1"/><text x="75.6456%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.3956%" y="469" width="0.0791%" height="15" fill="rgb(220,57,4)" fg:x="953" fg:w="1"/><text x="75.6456%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3956%" y="453" width="0.0791%" height="15" fill="rgb(226,193,50)" fg:x="953" fg:w="1"/><text x="75.6456%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.3956%" y="437" width="0.0791%" height="15" fill="rgb(231,168,22)" fg:x="953" fg:w="1"/><text x="75.6456%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.3956%" y="421" width="0.0791%" height="15" fill="rgb(254,215,14)" fg:x="953" fg:w="1"/><text x="75.6456%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.3956%" y="405" width="0.0791%" height="15" fill="rgb(211,115,16)" fg:x="953" fg:w="1"/><text x="75.6456%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.3956%" y="389" width="0.0791%" height="15" fill="rgb(236,210,16)" fg:x="953" fg:w="1"/><text x="75.6456%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.3956%" y="373" width="0.0791%" height="15" fill="rgb(221,94,12)" fg:x="953" fg:w="1"/><text x="75.6456%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="75.3956%" y="357" width="0.0791%" height="15" fill="rgb(235,218,49)" fg:x="953" fg:w="1"/><text x="75.6456%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="75.3956%" y="341" width="0.0791%" height="15" fill="rgb(217,114,14)" fg:x="953" fg:w="1"/><text x="75.6456%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.5538%" y="325" width="0.0791%" height="15" fill="rgb(216,145,22)" fg:x="955" fg:w="1"/><text x="75.8038%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.5538%" y="309" width="0.0791%" height="15" fill="rgb(217,112,39)" fg:x="955" fg:w="1"/><text x="75.8038%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.5538%" y="293" width="0.0791%" height="15" fill="rgb(225,85,32)" fg:x="955" fg:w="1"/><text x="75.8038%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.5538%" y="277" width="0.0791%" height="15" fill="rgb(245,209,47)" fg:x="955" fg:w="1"/><text x="75.8038%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.5538%" y="261" width="0.0791%" height="15" fill="rgb(218,220,15)" fg:x="955" fg:w="1"/><text x="75.8038%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="75.5538%" y="373" width="0.1582%" height="15" fill="rgb(222,202,31)" fg:x="955" fg:w="2"/><text x="75.8038%" y="383.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="75.5538%" y="357" width="0.1582%" height="15" fill="rgb(243,203,4)" fg:x="955" fg:w="2"/><text x="75.8038%" y="367.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="75.5538%" y="341" width="0.1582%" height="15" fill="rgb(237,92,17)" fg:x="955" fg:w="2"/><text x="75.8038%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.6329%" y="325" width="0.0791%" height="15" fill="rgb(231,119,7)" fg:x="956" fg:w="1"/><text x="75.8829%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6329%" y="309" width="0.0791%" height="15" fill="rgb(237,82,41)" fg:x="956" fg:w="1"/><text x="75.8829%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.6329%" y="293" width="0.0791%" height="15" fill="rgb(226,81,48)" fg:x="956" fg:w="1"/><text x="75.8829%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6329%" y="277" width="0.0791%" height="15" fill="rgb(234,70,51)" fg:x="956" fg:w="1"/><text x="75.8829%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.6329%" y="261" width="0.0791%" height="15" fill="rgb(251,86,4)" fg:x="956" fg:w="1"/><text x="75.8829%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6329%" y="245" width="0.0791%" height="15" fill="rgb(244,144,28)" fg:x="956" fg:w="1"/><text x="75.8829%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.6329%" y="229" width="0.0791%" height="15" fill="rgb(232,161,39)" fg:x="956" fg:w="1"/><text x="75.8829%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6329%" y="213" width="0.0791%" height="15" fill="rgb(247,34,51)" fg:x="956" fg:w="1"/><text x="75.8829%" y="223.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (4 samples, 0.32%)</title><rect x="75.5538%" y="405" width="0.3165%" height="15" fill="rgb(225,132,2)" fg:x="955" fg:w="4"/><text x="75.8038%" y="415.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="75.5538%" y="389" width="0.3165%" height="15" fill="rgb(209,159,44)" fg:x="955" fg:w="4"/><text x="75.8038%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="75.7120%" y="373" width="0.1582%" height="15" fill="rgb(251,214,1)" fg:x="957" fg:w="2"/><text x="75.9620%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="75.7911%" y="357" width="0.0791%" height="15" fill="rgb(247,84,47)" fg:x="958" fg:w="1"/><text x="76.0411%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.7911%" y="341" width="0.0791%" height="15" fill="rgb(240,111,43)" fg:x="958" fg:w="1"/><text x="76.0411%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.8703%" y="405" width="0.0791%" height="15" fill="rgb(215,214,35)" fg:x="959" fg:w="1"/><text x="76.1203%" y="415.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.8703%" y="389" width="0.0791%" height="15" fill="rgb(248,207,23)" fg:x="959" fg:w="1"/><text x="76.1203%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.8703%" y="373" width="0.0791%" height="15" fill="rgb(214,186,4)" fg:x="959" fg:w="1"/><text x="76.1203%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8703%" y="357" width="0.0791%" height="15" fill="rgb(220,133,22)" fg:x="959" fg:w="1"/><text x="76.1203%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8703%" y="341" width="0.0791%" height="15" fill="rgb(239,134,19)" fg:x="959" fg:w="1"/><text x="76.1203%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8703%" y="325" width="0.0791%" height="15" fill="rgb(250,140,9)" fg:x="959" fg:w="1"/><text x="76.1203%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8703%" y="309" width="0.0791%" height="15" fill="rgb(225,59,14)" fg:x="959" fg:w="1"/><text x="76.1203%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.8703%" y="293" width="0.0791%" height="15" fill="rgb(214,152,51)" fg:x="959" fg:w="1"/><text x="76.1203%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.8703%" y="277" width="0.0791%" height="15" fill="rgb(251,227,43)" fg:x="959" fg:w="1"/><text x="76.1203%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.8703%" y="261" width="0.0791%" height="15" fill="rgb(241,96,17)" fg:x="959" fg:w="1"/><text x="76.1203%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.8703%" y="245" width="0.0791%" height="15" fill="rgb(234,198,43)" fg:x="959" fg:w="1"/><text x="76.1203%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.8703%" y="229" width="0.0791%" height="15" fill="rgb(220,108,29)" fg:x="959" fg:w="1"/><text x="76.1203%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.8703%" y="213" width="0.0791%" height="15" fill="rgb(226,163,33)" fg:x="959" fg:w="1"/><text x="76.1203%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.8703%" y="197" width="0.0791%" height="15" fill="rgb(205,194,45)" fg:x="959" fg:w="1"/><text x="76.1203%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.8703%" y="181" width="0.0791%" height="15" fill="rgb(206,143,44)" fg:x="959" fg:w="1"/><text x="76.1203%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.8703%" y="165" width="0.0791%" height="15" fill="rgb(236,136,36)" fg:x="959" fg:w="1"/><text x="76.1203%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.8703%" y="149" width="0.0791%" height="15" fill="rgb(249,172,42)" fg:x="959" fg:w="1"/><text x="76.1203%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.8703%" y="133" width="0.0791%" height="15" fill="rgb(216,139,23)" fg:x="959" fg:w="1"/><text x="76.1203%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.8703%" y="117" width="0.0791%" height="15" fill="rgb(207,166,20)" fg:x="959" fg:w="1"/><text x="76.1203%" y="127.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="75.9494%" y="389" width="0.0791%" height="15" fill="rgb(210,209,22)" fg:x="960" fg:w="1"/><text x="76.1994%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.9494%" y="373" width="0.0791%" height="15" fill="rgb(232,118,20)" fg:x="960" fg:w="1"/><text x="76.1994%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.9494%" y="357" width="0.0791%" height="15" fill="rgb(238,113,42)" fg:x="960" fg:w="1"/><text x="76.1994%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.9494%" y="341" width="0.0791%" height="15" fill="rgb(231,42,5)" fg:x="960" fg:w="1"/><text x="76.1994%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.9494%" y="325" width="0.0791%" height="15" fill="rgb(243,166,24)" fg:x="960" fg:w="1"/><text x="76.1994%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.9494%" y="309" width="0.0791%" height="15" fill="rgb(237,226,12)" fg:x="960" fg:w="1"/><text x="76.1994%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.9494%" y="293" width="0.0791%" height="15" fill="rgb(229,133,24)" fg:x="960" fg:w="1"/><text x="76.1994%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.9494%" y="277" width="0.0791%" height="15" fill="rgb(238,33,43)" fg:x="960" fg:w="1"/><text x="76.1994%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.9494%" y="261" width="0.0791%" height="15" fill="rgb(227,59,38)" fg:x="960" fg:w="1"/><text x="76.1994%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.9494%" y="245" width="0.0791%" height="15" fill="rgb(230,97,0)" fg:x="960" fg:w="1"/><text x="76.1994%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.9494%" y="229" width="0.0791%" height="15" fill="rgb(250,173,50)" fg:x="960" fg:w="1"/><text x="76.1994%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.9494%" y="213" width="0.0791%" height="15" fill="rgb(240,15,50)" fg:x="960" fg:w="1"/><text x="76.1994%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9494%" y="197" width="0.0791%" height="15" fill="rgb(221,93,22)" fg:x="960" fg:w="1"/><text x="76.1994%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.0285%" y="245" width="0.0791%" height="15" fill="rgb(245,180,53)" fg:x="961" fg:w="1"/><text x="76.2785%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.0285%" y="229" width="0.0791%" height="15" fill="rgb(231,88,51)" fg:x="961" fg:w="1"/><text x="76.2785%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.0285%" y="213" width="0.0791%" height="15" fill="rgb(240,58,21)" fg:x="961" fg:w="1"/><text x="76.2785%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.0285%" y="197" width="0.0791%" height="15" fill="rgb(237,21,10)" fg:x="961" fg:w="1"/><text x="76.2785%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.0285%" y="181" width="0.0791%" height="15" fill="rgb(218,43,11)" fg:x="961" fg:w="1"/><text x="76.2785%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.0285%" y="165" width="0.0791%" height="15" fill="rgb(218,221,29)" fg:x="961" fg:w="1"/><text x="76.2785%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="76.0285%" y="149" width="0.0791%" height="15" fill="rgb(214,118,42)" fg:x="961" fg:w="1"/><text x="76.2785%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0285%" y="133" width="0.0791%" height="15" fill="rgb(251,200,26)" fg:x="961" fg:w="1"/><text x="76.2785%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="76.0285%" y="309" width="0.1582%" height="15" fill="rgb(237,101,39)" fg:x="961" fg:w="2"/><text x="76.2785%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.0285%" y="293" width="0.1582%" height="15" fill="rgb(251,117,11)" fg:x="961" fg:w="2"/><text x="76.2785%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="76.0285%" y="277" width="0.1582%" height="15" fill="rgb(216,223,23)" fg:x="961" fg:w="2"/><text x="76.2785%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.0285%" y="261" width="0.1582%" height="15" fill="rgb(251,54,12)" fg:x="961" fg:w="2"/><text x="76.2785%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="76.1076%" y="245" width="0.0791%" height="15" fill="rgb(254,176,54)" fg:x="962" fg:w="1"/><text x="76.3576%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.1076%" y="229" width="0.0791%" height="15" fill="rgb(210,32,8)" fg:x="962" fg:w="1"/><text x="76.3576%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1076%" y="213" width="0.0791%" height="15" fill="rgb(235,52,38)" fg:x="962" fg:w="1"/><text x="76.3576%" y="223.50"></text></g><g><title>plugins_core::tools::get_contained_keys (10 samples, 0.79%)</title><rect x="75.4747%" y="549" width="0.7911%" height="15" fill="rgb(231,4,44)" fg:x="954" fg:w="10"/><text x="75.7247%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (10 samples, 0.79%)</title><rect x="75.4747%" y="533" width="0.7911%" height="15" fill="rgb(249,2,32)" fg:x="954" fg:w="10"/><text x="75.7247%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (10 samples, 0.79%)</title><rect x="75.4747%" y="517" width="0.7911%" height="15" fill="rgb(224,65,26)" fg:x="954" fg:w="10"/><text x="75.7247%" y="527.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (9 samples, 0.71%)</title><rect x="75.5538%" y="501" width="0.7120%" height="15" fill="rgb(250,73,40)" fg:x="955" fg:w="9"/><text x="75.8038%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.71%)</title><rect x="75.5538%" y="485" width="0.7120%" height="15" fill="rgb(253,177,16)" fg:x="955" fg:w="9"/><text x="75.8038%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.71%)</title><rect x="75.5538%" y="469" width="0.7120%" height="15" fill="rgb(217,32,34)" fg:x="955" fg:w="9"/><text x="75.8038%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (9 samples, 0.71%)</title><rect x="75.5538%" y="453" width="0.7120%" height="15" fill="rgb(212,7,10)" fg:x="955" fg:w="9"/><text x="75.8038%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (9 samples, 0.71%)</title><rect x="75.5538%" y="437" width="0.7120%" height="15" fill="rgb(245,89,8)" fg:x="955" fg:w="9"/><text x="75.8038%" y="447.50"></text></g><g><title>engine::internal::Entities::add_persisted (9 samples, 0.71%)</title><rect x="75.5538%" y="421" width="0.7120%" height="15" fill="rgb(237,16,53)" fg:x="955" fg:w="9"/><text x="75.8038%" y="431.50"></text></g><g><title>kernel::model::entity::Entity::from_str (4 samples, 0.32%)</title><rect x="75.9494%" y="405" width="0.3165%" height="15" fill="rgb(250,204,30)" fg:x="960" fg:w="4"/><text x="76.1994%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="76.0285%" y="389" width="0.2373%" height="15" fill="rgb(208,77,27)" fg:x="961" fg:w="3"/><text x="76.2785%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="76.0285%" y="373" width="0.2373%" height="15" fill="rgb(250,204,28)" fg:x="961" fg:w="3"/><text x="76.2785%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="76.0285%" y="357" width="0.2373%" height="15" fill="rgb(244,63,21)" fg:x="961" fg:w="3"/><text x="76.2785%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="76.0285%" y="341" width="0.2373%" height="15" fill="rgb(236,85,44)" fg:x="961" fg:w="3"/><text x="76.2785%" y="351.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="76.0285%" y="325" width="0.2373%" height="15" fill="rgb(215,98,4)" fg:x="961" fg:w="3"/><text x="76.2785%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="76.1867%" y="309" width="0.0791%" height="15" fill="rgb(235,38,11)" fg:x="963" fg:w="1"/><text x="76.4367%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.1867%" y="293" width="0.0791%" height="15" fill="rgb(254,186,25)" fg:x="963" fg:w="1"/><text x="76.4367%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="76.1867%" y="277" width="0.0791%" height="15" fill="rgb(225,55,31)" fg:x="963" fg:w="1"/><text x="76.4367%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="76.1867%" y="261" width="0.0791%" height="15" fill="rgb(211,15,21)" fg:x="963" fg:w="1"/><text x="76.4367%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.50%)</title><rect x="74.8418%" y="581" width="1.5032%" height="15" fill="rgb(215,187,41)" fg:x="946" fg:w="19"/><text x="75.0918%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (19 samples, 1.50%)</title><rect x="74.8418%" y="565" width="1.5032%" height="15" fill="rgb(248,69,32)" fg:x="946" fg:w="19"/><text x="75.0918%" y="575.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="76.2658%" y="549" width="0.0791%" height="15" fill="rgb(252,102,52)" fg:x="964" fg:w="1"/><text x="76.5158%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="76.2658%" y="533" width="0.0791%" height="15" fill="rgb(253,140,32)" fg:x="964" fg:w="1"/><text x="76.5158%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.2658%" y="517" width="0.0791%" height="15" fill="rgb(216,56,42)" fg:x="964" fg:w="1"/><text x="76.5158%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.2658%" y="501" width="0.0791%" height="15" fill="rgb(216,184,14)" fg:x="964" fg:w="1"/><text x="76.5158%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.2658%" y="485" width="0.0791%" height="15" fill="rgb(237,187,27)" fg:x="964" fg:w="1"/><text x="76.5158%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="76.2658%" y="469" width="0.0791%" height="15" fill="rgb(219,65,3)" fg:x="964" fg:w="1"/><text x="76.5158%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="76.2658%" y="453" width="0.0791%" height="15" fill="rgb(245,83,25)" fg:x="964" fg:w="1"/><text x="76.5158%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="76.2658%" y="437" width="0.0791%" height="15" fill="rgb(214,205,45)" fg:x="964" fg:w="1"/><text x="76.5158%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.2658%" y="421" width="0.0791%" height="15" fill="rgb(241,20,18)" fg:x="964" fg:w="1"/><text x="76.5158%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.2658%" y="405" width="0.0791%" height="15" fill="rgb(232,163,23)" fg:x="964" fg:w="1"/><text x="76.5158%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.3449%" y="533" width="0.0791%" height="15" fill="rgb(214,5,46)" fg:x="965" fg:w="1"/><text x="76.5949%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.3449%" y="517" width="0.0791%" height="15" fill="rgb(229,78,17)" fg:x="965" fg:w="1"/><text x="76.5949%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.3449%" y="501" width="0.0791%" height="15" fill="rgb(248,89,10)" fg:x="965" fg:w="1"/><text x="76.5949%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.3449%" y="485" width="0.0791%" height="15" fill="rgb(248,54,15)" fg:x="965" fg:w="1"/><text x="76.5949%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.3449%" y="469" width="0.0791%" height="15" fill="rgb(223,116,6)" fg:x="965" fg:w="1"/><text x="76.5949%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.3449%" y="453" width="0.0791%" height="15" fill="rgb(205,125,38)" fg:x="965" fg:w="1"/><text x="76.5949%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.3449%" y="437" width="0.0791%" height="15" fill="rgb(251,78,38)" fg:x="965" fg:w="1"/><text x="76.5949%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.3449%" y="421" width="0.0791%" height="15" fill="rgb(253,78,28)" fg:x="965" fg:w="1"/><text x="76.5949%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.3449%" y="405" width="0.0791%" height="15" fill="rgb(209,120,3)" fg:x="965" fg:w="1"/><text x="76.5949%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.3449%" y="389" width="0.0791%" height="15" fill="rgb(238,229,9)" fg:x="965" fg:w="1"/><text x="76.5949%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.3449%" y="373" width="0.0791%" height="15" fill="rgb(253,159,18)" fg:x="965" fg:w="1"/><text x="76.5949%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3449%" y="357" width="0.0791%" height="15" fill="rgb(244,42,34)" fg:x="965" fg:w="1"/><text x="76.5949%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="76.6614%" y="421" width="0.2373%" height="15" fill="rgb(224,8,7)" fg:x="969" fg:w="3"/><text x="76.9114%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="76.6614%" y="405" width="0.2373%" height="15" fill="rgb(210,201,45)" fg:x="969" fg:w="3"/><text x="76.9114%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="76.7405%" y="389" width="0.1582%" height="15" fill="rgb(252,185,21)" fg:x="970" fg:w="2"/><text x="76.9905%" y="399.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="76.7405%" y="373" width="0.1582%" height="15" fill="rgb(223,131,1)" fg:x="970" fg:w="2"/><text x="76.9905%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="76.7405%" y="357" width="0.1582%" height="15" fill="rgb(245,141,16)" fg:x="970" fg:w="2"/><text x="76.9905%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="76.7405%" y="341" width="0.1582%" height="15" fill="rgb(229,55,45)" fg:x="970" fg:w="2"/><text x="76.9905%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="76.8196%" y="325" width="0.0791%" height="15" fill="rgb(208,92,15)" fg:x="971" fg:w="1"/><text x="77.0696%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.8196%" y="309" width="0.0791%" height="15" fill="rgb(234,185,47)" fg:x="971" fg:w="1"/><text x="77.0696%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="76.8196%" y="293" width="0.0791%" height="15" fill="rgb(253,104,50)" fg:x="971" fg:w="1"/><text x="77.0696%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="76.8196%" y="277" width="0.0791%" height="15" fill="rgb(205,70,7)" fg:x="971" fg:w="1"/><text x="77.0696%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.8196%" y="261" width="0.0791%" height="15" fill="rgb(240,178,43)" fg:x="971" fg:w="1"/><text x="77.0696%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="76.8196%" y="245" width="0.0791%" height="15" fill="rgb(214,112,2)" fg:x="971" fg:w="1"/><text x="77.0696%" y="255.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="76.8196%" y="229" width="0.0791%" height="15" fill="rgb(206,46,17)" fg:x="971" fg:w="1"/><text x="77.0696%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.8196%" y="213" width="0.0791%" height="15" fill="rgb(225,220,16)" fg:x="971" fg:w="1"/><text x="77.0696%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="76.8196%" y="197" width="0.0791%" height="15" fill="rgb(238,65,40)" fg:x="971" fg:w="1"/><text x="77.0696%" y="207.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (7 samples, 0.55%)</title><rect x="76.4241%" y="517" width="0.5538%" height="15" fill="rgb(230,151,21)" fg:x="966" fg:w="7"/><text x="76.6741%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.55%)</title><rect x="76.4241%" y="501" width="0.5538%" height="15" fill="rgb(218,58,49)" fg:x="966" fg:w="7"/><text x="76.6741%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.55%)</title><rect x="76.4241%" y="485" width="0.5538%" height="15" fill="rgb(219,179,14)" fg:x="966" fg:w="7"/><text x="76.6741%" y="495.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.40%)</title><rect x="76.5823%" y="469" width="0.3956%" height="15" fill="rgb(223,72,1)" fg:x="968" fg:w="5"/><text x="76.8323%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="76.6614%" y="453" width="0.3165%" height="15" fill="rgb(238,126,10)" fg:x="969" fg:w="4"/><text x="76.9114%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="76.6614%" y="437" width="0.3165%" height="15" fill="rgb(224,206,38)" fg:x="969" fg:w="4"/><text x="76.9114%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.8987%" y="421" width="0.0791%" height="15" fill="rgb(212,201,54)" fg:x="972" fg:w="1"/><text x="77.1487%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.8987%" y="405" width="0.0791%" height="15" fill="rgb(218,154,48)" fg:x="972" fg:w="1"/><text x="77.1487%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="77.0570%" y="469" width="0.1582%" height="15" fill="rgb(232,93,24)" fg:x="974" fg:w="2"/><text x="77.3070%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.2152%" y="469" width="0.0791%" height="15" fill="rgb(245,30,21)" fg:x="976" fg:w="1"/><text x="77.4652%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="77.2943%" y="469" width="0.1582%" height="15" fill="rgb(242,148,29)" fg:x="977" fg:w="2"/><text x="77.5443%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="77.3734%" y="453" width="0.0791%" height="15" fill="rgb(244,153,54)" fg:x="978" fg:w="1"/><text x="77.6234%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.4525%" y="421" width="0.0791%" height="15" fill="rgb(252,87,22)" fg:x="979" fg:w="1"/><text x="77.7025%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4525%" y="405" width="0.0791%" height="15" fill="rgb(210,51,29)" fg:x="979" fg:w="1"/><text x="77.7025%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.4525%" y="389" width="0.0791%" height="15" fill="rgb(242,136,47)" fg:x="979" fg:w="1"/><text x="77.7025%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4525%" y="373" width="0.0791%" height="15" fill="rgb(238,68,4)" fg:x="979" fg:w="1"/><text x="77.7025%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4525%" y="357" width="0.0791%" height="15" fill="rgb(242,161,30)" fg:x="979" fg:w="1"/><text x="77.7025%" y="367.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (41 samples, 3.24%)</title><rect x="74.3671%" y="661" width="3.2437%" height="15" fill="rgb(218,58,44)" fg:x="940" fg:w="41"/><text x="74.6171%" y="671.50">ker..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (41 samples, 3.24%)</title><rect x="74.3671%" y="645" width="3.2437%" height="15" fill="rgb(252,125,32)" fg:x="940" fg:w="41"/><text x="74.6171%" y="655.50">&lt;pl..</text></g><g><title>plugins_rpc::querying::have_surroundings (37 samples, 2.93%)</title><rect x="74.6835%" y="629" width="2.9272%" height="15" fill="rgb(219,178,0)" fg:x="944" fg:w="37"/><text x="74.9335%" y="639.50">pl..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (37 samples, 2.93%)</title><rect x="74.6835%" y="613" width="2.9272%" height="15" fill="rgb(213,152,7)" fg:x="944" fg:w="37"/><text x="74.9335%" y="623.50">&lt;p..</text></g><g><title>core::iter::adapters::try_process (35 samples, 2.77%)</title><rect x="74.8418%" y="597" width="2.7690%" height="15" fill="rgb(249,109,34)" fg:x="946" fg:w="35"/><text x="75.0918%" y="607.50">co..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (16 samples, 1.27%)</title><rect x="76.3449%" y="581" width="1.2658%" height="15" fill="rgb(232,96,21)" fg:x="965" fg:w="16"/><text x="76.5949%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (16 samples, 1.27%)</title><rect x="76.3449%" y="565" width="1.2658%" height="15" fill="rgb(228,27,39)" fg:x="965" fg:w="16"/><text x="76.5949%" y="575.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (16 samples, 1.27%)</title><rect x="76.3449%" y="549" width="1.2658%" height="15" fill="rgb(211,182,52)" fg:x="965" fg:w="16"/><text x="76.5949%" y="559.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (15 samples, 1.19%)</title><rect x="76.4241%" y="533" width="1.1867%" height="15" fill="rgb(234,178,38)" fg:x="966" fg:w="15"/><text x="76.6741%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (8 samples, 0.63%)</title><rect x="76.9778%" y="517" width="0.6329%" height="15" fill="rgb(221,111,3)" fg:x="973" fg:w="8"/><text x="77.2278%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.63%)</title><rect x="76.9778%" y="501" width="0.6329%" height="15" fill="rgb(228,175,21)" fg:x="973" fg:w="8"/><text x="77.2278%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.63%)</title><rect x="76.9778%" y="485" width="0.6329%" height="15" fill="rgb(228,174,43)" fg:x="973" fg:w="8"/><text x="77.2278%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="77.4525%" y="469" width="0.1582%" height="15" fill="rgb(211,191,0)" fg:x="979" fg:w="2"/><text x="77.7025%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="77.4525%" y="453" width="0.1582%" height="15" fill="rgb(253,117,3)" fg:x="979" fg:w="2"/><text x="77.7025%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="77.4525%" y="437" width="0.1582%" height="15" fill="rgb(241,127,19)" fg:x="979" fg:w="2"/><text x="77.7025%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5316%" y="421" width="0.0791%" height="15" fill="rgb(218,103,12)" fg:x="980" fg:w="1"/><text x="77.7816%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.5316%" y="405" width="0.0791%" height="15" fill="rgb(236,214,43)" fg:x="980" fg:w="1"/><text x="77.7816%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5316%" y="389" width="0.0791%" height="15" fill="rgb(244,144,19)" fg:x="980" fg:w="1"/><text x="77.7816%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.5316%" y="373" width="0.0791%" height="15" fill="rgb(246,188,10)" fg:x="980" fg:w="1"/><text x="77.7816%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5316%" y="357" width="0.0791%" height="15" fill="rgb(212,193,33)" fg:x="980" fg:w="1"/><text x="77.7816%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.6899%" y="437" width="0.1582%" height="15" fill="rgb(241,51,29)" fg:x="982" fg:w="2"/><text x="77.9399%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="77.6899%" y="421" width="0.1582%" height="15" fill="rgb(211,58,19)" fg:x="982" fg:w="2"/><text x="77.9399%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.6899%" y="405" width="0.1582%" height="15" fill="rgb(229,111,26)" fg:x="982" fg:w="2"/><text x="77.9399%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.7690%" y="389" width="0.0791%" height="15" fill="rgb(213,115,40)" fg:x="983" fg:w="1"/><text x="78.0190%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.7690%" y="373" width="0.0791%" height="15" fill="rgb(209,56,44)" fg:x="983" fg:w="1"/><text x="78.0190%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.7690%" y="357" width="0.0791%" height="15" fill="rgb(230,108,32)" fg:x="983" fg:w="1"/><text x="78.0190%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.24%)</title><rect x="77.6899%" y="485" width="0.2373%" height="15" fill="rgb(216,165,31)" fg:x="982" fg:w="3"/><text x="77.9399%" y="495.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="77.6899%" y="469" width="0.2373%" height="15" fill="rgb(218,122,21)" fg:x="982" fg:w="3"/><text x="77.9399%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="77.6899%" y="453" width="0.2373%" height="15" fill="rgb(223,224,47)" fg:x="982" fg:w="3"/><text x="77.9399%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.8481%" y="437" width="0.0791%" height="15" fill="rgb(238,102,44)" fg:x="984" fg:w="1"/><text x="78.0981%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8481%" y="421" width="0.0791%" height="15" fill="rgb(236,46,40)" fg:x="984" fg:w="1"/><text x="78.0981%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.8481%" y="405" width="0.0791%" height="15" fill="rgb(247,202,50)" fg:x="984" fg:w="1"/><text x="78.0981%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8481%" y="389" width="0.0791%" height="15" fill="rgb(209,99,20)" fg:x="984" fg:w="1"/><text x="78.0981%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.8481%" y="373" width="0.0791%" height="15" fill="rgb(252,27,34)" fg:x="984" fg:w="1"/><text x="78.0981%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8481%" y="357" width="0.0791%" height="15" fill="rgb(215,206,23)" fg:x="984" fg:w="1"/><text x="78.0981%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.8481%" y="341" width="0.0791%" height="15" fill="rgb(212,135,36)" fg:x="984" fg:w="1"/><text x="78.0981%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8481%" y="325" width="0.0791%" height="15" fill="rgb(240,189,1)" fg:x="984" fg:w="1"/><text x="78.0981%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.8481%" y="309" width="0.0791%" height="15" fill="rgb(242,56,20)" fg:x="984" fg:w="1"/><text x="78.0981%" y="319.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="77.9272%" y="469" width="0.0791%" height="15" fill="rgb(247,132,33)" fg:x="985" fg:w="1"/><text x="78.1772%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.9272%" y="453" width="0.0791%" height="15" fill="rgb(208,149,11)" fg:x="985" fg:w="1"/><text x="78.1772%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.0063%" y="405" width="0.0791%" height="15" fill="rgb(211,33,11)" fg:x="986" fg:w="1"/><text x="78.2563%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.0063%" y="389" width="0.0791%" height="15" fill="rgb(221,29,38)" fg:x="986" fg:w="1"/><text x="78.2563%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.0063%" y="373" width="0.0791%" height="15" fill="rgb(206,182,49)" fg:x="986" fg:w="1"/><text x="78.2563%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="78.0063%" y="437" width="0.1582%" height="15" fill="rgb(216,140,1)" fg:x="986" fg:w="2"/><text x="78.2563%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="78.0063%" y="421" width="0.1582%" height="15" fill="rgb(232,57,40)" fg:x="986" fg:w="2"/><text x="78.2563%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.0854%" y="405" width="0.0791%" height="15" fill="rgb(224,186,18)" fg:x="987" fg:w="1"/><text x="78.3354%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.1646%" y="437" width="0.0791%" height="15" fill="rgb(215,121,11)" fg:x="988" fg:w="1"/><text x="78.4146%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.1646%" y="421" width="0.0791%" height="15" fill="rgb(245,147,10)" fg:x="988" fg:w="1"/><text x="78.4146%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.1646%" y="405" width="0.0791%" height="15" fill="rgb(238,153,13)" fg:x="988" fg:w="1"/><text x="78.4146%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.1646%" y="389" width="0.0791%" height="15" fill="rgb(233,108,0)" fg:x="988" fg:w="1"/><text x="78.4146%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.1646%" y="373" width="0.0791%" height="15" fill="rgb(212,157,17)" fg:x="988" fg:w="1"/><text x="78.4146%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.1646%" y="357" width="0.0791%" height="15" fill="rgb(225,213,38)" fg:x="988" fg:w="1"/><text x="78.4146%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (6 samples, 0.47%)</title><rect x="77.9272%" y="485" width="0.4747%" height="15" fill="rgb(248,16,11)" fg:x="985" fg:w="6"/><text x="78.1772%" y="495.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="78.0063%" y="469" width="0.3956%" height="15" fill="rgb(241,33,4)" fg:x="986" fg:w="5"/><text x="78.2563%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="78.0063%" y="453" width="0.3956%" height="15" fill="rgb(222,26,43)" fg:x="986" fg:w="5"/><text x="78.2563%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.2437%" y="437" width="0.1582%" height="15" fill="rgb(243,29,36)" fg:x="989" fg:w="2"/><text x="78.4937%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.2437%" y="421" width="0.1582%" height="15" fill="rgb(241,9,27)" fg:x="989" fg:w="2"/><text x="78.4937%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.3228%" y="405" width="0.0791%" height="15" fill="rgb(205,117,26)" fg:x="990" fg:w="1"/><text x="78.5728%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3228%" y="389" width="0.0791%" height="15" fill="rgb(209,80,39)" fg:x="990" fg:w="1"/><text x="78.5728%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.3228%" y="373" width="0.0791%" height="15" fill="rgb(239,155,6)" fg:x="990" fg:w="1"/><text x="78.5728%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3228%" y="357" width="0.0791%" height="15" fill="rgb(212,104,12)" fg:x="990" fg:w="1"/><text x="78.5728%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.3228%" y="341" width="0.0791%" height="15" fill="rgb(234,204,3)" fg:x="990" fg:w="1"/><text x="78.5728%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3228%" y="325" width="0.0791%" height="15" fill="rgb(251,218,7)" fg:x="990" fg:w="1"/><text x="78.5728%" y="335.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="78.4019%" y="437" width="0.0791%" height="15" fill="rgb(221,81,32)" fg:x="991" fg:w="1"/><text x="78.6519%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="78.4019%" y="421" width="0.0791%" height="15" fill="rgb(214,152,26)" fg:x="991" fg:w="1"/><text x="78.6519%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.4019%" y="405" width="0.0791%" height="15" fill="rgb(223,22,3)" fg:x="991" fg:w="1"/><text x="78.6519%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="78.4019%" y="389" width="0.0791%" height="15" fill="rgb(207,174,7)" fg:x="991" fg:w="1"/><text x="78.6519%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.4019%" y="373" width="0.0791%" height="15" fill="rgb(224,19,52)" fg:x="991" fg:w="1"/><text x="78.6519%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.4019%" y="357" width="0.0791%" height="15" fill="rgb(228,24,14)" fg:x="991" fg:w="1"/><text x="78.6519%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="78.4019%" y="341" width="0.0791%" height="15" fill="rgb(230,153,43)" fg:x="991" fg:w="1"/><text x="78.6519%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="78.4019%" y="325" width="0.0791%" height="15" fill="rgb(231,106,12)" fg:x="991" fg:w="1"/><text x="78.6519%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="78.4019%" y="309" width="0.0791%" height="15" fill="rgb(215,92,2)" fg:x="991" fg:w="1"/><text x="78.6519%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="78.4019%" y="293" width="0.0791%" height="15" fill="rgb(249,143,25)" fg:x="991" fg:w="1"/><text x="78.6519%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="78.4019%" y="277" width="0.0791%" height="15" fill="rgb(252,7,35)" fg:x="991" fg:w="1"/><text x="78.6519%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="78.4019%" y="261" width="0.0791%" height="15" fill="rgb(216,69,40)" fg:x="991" fg:w="1"/><text x="78.6519%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.4019%" y="245" width="0.0791%" height="15" fill="rgb(240,36,33)" fg:x="991" fg:w="1"/><text x="78.6519%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="78.4019%" y="229" width="0.0791%" height="15" fill="rgb(231,128,14)" fg:x="991" fg:w="1"/><text x="78.6519%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.4019%" y="213" width="0.0791%" height="15" fill="rgb(245,143,14)" fg:x="991" fg:w="1"/><text x="78.6519%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="78.4810%" y="309" width="0.0791%" height="15" fill="rgb(222,130,28)" fg:x="992" fg:w="1"/><text x="78.7310%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="78.5601%" y="309" width="0.1582%" height="15" fill="rgb(212,10,48)" fg:x="993" fg:w="2"/><text x="78.8101%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="78.5601%" y="293" width="0.1582%" height="15" fill="rgb(254,118,45)" fg:x="993" fg:w="2"/><text x="78.8101%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="78.5601%" y="277" width="0.1582%" height="15" fill="rgb(228,6,45)" fg:x="993" fg:w="2"/><text x="78.8101%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="78.5601%" y="261" width="0.1582%" height="15" fill="rgb(241,18,35)" fg:x="993" fg:w="2"/><text x="78.8101%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.16%)</title><rect x="78.5601%" y="245" width="0.1582%" height="15" fill="rgb(227,214,53)" fg:x="993" fg:w="2"/><text x="78.8101%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="78.4810%" y="341" width="0.3165%" height="15" fill="rgb(224,107,51)" fg:x="992" fg:w="4"/><text x="78.7310%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (4 samples, 0.32%)</title><rect x="78.4810%" y="325" width="0.3165%" height="15" fill="rgb(248,60,28)" fg:x="992" fg:w="4"/><text x="78.7310%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="78.7184%" y="309" width="0.0791%" height="15" fill="rgb(249,101,23)" fg:x="995" fg:w="1"/><text x="78.9684%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="78.7184%" y="293" width="0.0791%" height="15" fill="rgb(228,51,19)" fg:x="995" fg:w="1"/><text x="78.9684%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="78.4810%" y="405" width="0.3956%" height="15" fill="rgb(213,20,6)" fg:x="992" fg:w="5"/><text x="78.7310%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="78.4810%" y="389" width="0.3956%" height="15" fill="rgb(212,124,10)" fg:x="992" fg:w="5"/><text x="78.7310%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.40%)</title><rect x="78.4810%" y="373" width="0.3956%" height="15" fill="rgb(248,3,40)" fg:x="992" fg:w="5"/><text x="78.7310%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.40%)</title><rect x="78.4810%" y="357" width="0.3956%" height="15" fill="rgb(223,178,23)" fg:x="992" fg:w="5"/><text x="78.7310%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="78.7975%" y="341" width="0.0791%" height="15" fill="rgb(240,132,45)" fg:x="996" fg:w="1"/><text x="79.0475%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="78.7975%" y="325" width="0.0791%" height="15" fill="rgb(245,164,36)" fg:x="996" fg:w="1"/><text x="79.0475%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.7975%" y="309" width="0.0791%" height="15" fill="rgb(231,188,53)" fg:x="996" fg:w="1"/><text x="79.0475%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.7975%" y="293" width="0.0791%" height="15" fill="rgb(237,198,39)" fg:x="996" fg:w="1"/><text x="79.0475%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.7975%" y="277" width="0.0791%" height="15" fill="rgb(223,120,35)" fg:x="996" fg:w="1"/><text x="79.0475%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.9557%" y="389" width="0.0791%" height="15" fill="rgb(253,107,49)" fg:x="998" fg:w="1"/><text x="79.2057%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.0348%" y="373" width="0.0791%" height="15" fill="rgb(216,44,31)" fg:x="999" fg:w="1"/><text x="79.2848%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="79.1139%" y="373" width="0.0791%" height="15" fill="rgb(253,87,21)" fg:x="1000" fg:w="1"/><text x="79.3639%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="79.1139%" y="357" width="0.0791%" height="15" fill="rgb(226,18,2)" fg:x="1000" fg:w="1"/><text x="79.3639%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.1139%" y="341" width="0.0791%" height="15" fill="rgb(216,8,46)" fg:x="1000" fg:w="1"/><text x="79.3639%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="78.8766%" y="405" width="0.3956%" height="15" fill="rgb(226,140,39)" fg:x="997" fg:w="5"/><text x="79.1266%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="79.0348%" y="389" width="0.2373%" height="15" fill="rgb(221,194,54)" fg:x="999" fg:w="3"/><text x="79.2848%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="79.1930%" y="373" width="0.0791%" height="15" fill="rgb(213,92,11)" fg:x="1001" fg:w="1"/><text x="79.4430%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="79.1930%" y="357" width="0.0791%" height="15" fill="rgb(229,162,46)" fg:x="1001" fg:w="1"/><text x="79.4430%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="79.3513%" y="357" width="0.0791%" height="15" fill="rgb(214,111,36)" fg:x="1003" fg:w="1"/><text x="79.6013%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.3513%" y="341" width="0.0791%" height="15" fill="rgb(207,6,21)" fg:x="1003" fg:w="1"/><text x="79.6013%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="79.3513%" y="325" width="0.0791%" height="15" fill="rgb(213,127,38)" fg:x="1003" fg:w="1"/><text x="79.6013%" y="335.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="79.4304%" y="357" width="0.0791%" height="15" fill="rgb(238,118,32)" fg:x="1004" fg:w="1"/><text x="79.6804%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="79.5886%" y="341" width="0.1582%" height="15" fill="rgb(240,139,39)" fg:x="1006" fg:w="2"/><text x="79.8386%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="79.7468%" y="325" width="0.1582%" height="15" fill="rgb(235,10,37)" fg:x="1008" fg:w="2"/><text x="79.9968%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.63%)</title><rect x="79.7468%" y="341" width="0.6329%" height="15" fill="rgb(249,171,38)" fg:x="1008" fg:w="8"/><text x="79.9968%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.47%)</title><rect x="79.9051%" y="325" width="0.4747%" height="15" fill="rgb(242,144,32)" fg:x="1010" fg:w="6"/><text x="80.1551%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="80.3797%" y="341" width="0.3165%" height="15" fill="rgb(217,117,21)" fg:x="1016" fg:w="4"/><text x="80.6297%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="80.4589%" y="325" width="0.2373%" height="15" fill="rgb(249,87,1)" fg:x="1017" fg:w="3"/><text x="80.7089%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="80.8544%" y="277" width="0.0791%" height="15" fill="rgb(248,196,48)" fg:x="1022" fg:w="1"/><text x="81.1044%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="80.9335%" y="277" width="0.2373%" height="15" fill="rgb(251,206,33)" fg:x="1023" fg:w="3"/><text x="81.1835%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="81.0127%" y="261" width="0.1582%" height="15" fill="rgb(232,141,28)" fg:x="1024" fg:w="2"/><text x="81.2627%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.0918%" y="245" width="0.0791%" height="15" fill="rgb(209,167,14)" fg:x="1025" fg:w="1"/><text x="81.3418%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.0918%" y="229" width="0.0791%" height="15" fill="rgb(225,11,50)" fg:x="1025" fg:w="1"/><text x="81.3418%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.0918%" y="213" width="0.0791%" height="15" fill="rgb(209,50,20)" fg:x="1025" fg:w="1"/><text x="81.3418%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (48 samples, 3.80%)</title><rect x="81.1709%" y="277" width="3.7975%" height="15" fill="rgb(212,17,46)" fg:x="1026" fg:w="48"/><text x="81.4209%" y="287.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (48 samples, 3.80%)</title><rect x="81.1709%" y="261" width="3.7975%" height="15" fill="rgb(216,101,39)" fg:x="1026" fg:w="48"/><text x="81.4209%" y="271.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (48 samples, 3.80%)</title><rect x="81.1709%" y="245" width="3.7975%" height="15" fill="rgb(212,228,48)" fg:x="1026" fg:w="48"/><text x="81.4209%" y="255.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="84.9684%" y="277" width="0.2373%" height="15" fill="rgb(250,6,50)" fg:x="1074" fg:w="3"/><text x="85.2184%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 4.59%)</title><rect x="80.6962%" y="325" width="4.5886%" height="15" fill="rgb(250,160,48)" fg:x="1020" fg:w="58"/><text x="80.9462%" y="335.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (56 samples, 4.43%)</title><rect x="80.8544%" y="309" width="4.4304%" height="15" fill="rgb(244,216,33)" fg:x="1022" fg:w="56"/><text x="81.1044%" y="319.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (56 samples, 4.43%)</title><rect x="80.8544%" y="293" width="4.4304%" height="15" fill="rgb(207,157,5)" fg:x="1022" fg:w="56"/><text x="81.1044%" y="303.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="85.2057%" y="277" width="0.0791%" height="15" fill="rgb(228,199,8)" fg:x="1077" fg:w="1"/><text x="85.4557%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.2057%" y="261" width="0.0791%" height="15" fill="rgb(227,80,20)" fg:x="1077" fg:w="1"/><text x="85.4557%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.2057%" y="245" width="0.0791%" height="15" fill="rgb(222,9,33)" fg:x="1077" fg:w="1"/><text x="85.4557%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="85.2057%" y="229" width="0.0791%" height="15" fill="rgb(239,44,28)" fg:x="1077" fg:w="1"/><text x="85.4557%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="85.2057%" y="213" width="0.0791%" height="15" fill="rgb(249,187,43)" fg:x="1077" fg:w="1"/><text x="85.4557%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.3639%" y="309" width="0.0791%" height="15" fill="rgb(216,141,28)" fg:x="1079" fg:w="1"/><text x="85.6139%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="85.4430%" y="309" width="0.3165%" height="15" fill="rgb(230,154,53)" fg:x="1080" fg:w="4"/><text x="85.6930%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="85.6013%" y="293" width="0.1582%" height="15" fill="rgb(227,82,4)" fg:x="1082" fg:w="2"/><text x="85.8513%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.6804%" y="277" width="0.0791%" height="15" fill="rgb(220,107,16)" fg:x="1083" fg:w="1"/><text x="85.9304%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.6804%" y="261" width="0.0791%" height="15" fill="rgb(207,187,2)" fg:x="1083" fg:w="1"/><text x="85.9304%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.9968%" y="293" width="0.0791%" height="15" fill="rgb(210,162,52)" fg:x="1087" fg:w="1"/><text x="86.2468%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="85.7595%" y="309" width="0.3956%" height="15" fill="rgb(217,216,49)" fg:x="1084" fg:w="5"/><text x="86.0095%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.0759%" y="293" width="0.0791%" height="15" fill="rgb(218,146,49)" fg:x="1088" fg:w="1"/><text x="86.3259%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.0759%" y="277" width="0.0791%" height="15" fill="rgb(216,55,40)" fg:x="1088" fg:w="1"/><text x="86.3259%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.0759%" y="261" width="0.0791%" height="15" fill="rgb(208,196,21)" fg:x="1088" fg:w="1"/><text x="86.3259%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (85 samples, 6.72%)</title><rect x="79.5095%" y="357" width="6.7247%" height="15" fill="rgb(242,117,42)" fg:x="1005" fg:w="85"/><text x="79.7595%" y="367.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (70 samples, 5.54%)</title><rect x="80.6962%" y="341" width="5.5380%" height="15" fill="rgb(210,11,23)" fg:x="1020" fg:w="70"/><text x="80.9462%" y="351.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.95%)</title><rect x="85.2848%" y="325" width="0.9494%" height="15" fill="rgb(217,110,2)" fg:x="1078" fg:w="12"/><text x="85.5348%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="86.1551%" y="309" width="0.0791%" height="15" fill="rgb(229,77,54)" fg:x="1089" fg:w="1"/><text x="86.4051%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.1551%" y="293" width="0.0791%" height="15" fill="rgb(218,53,16)" fg:x="1089" fg:w="1"/><text x="86.4051%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="86.2342%" y="309" width="0.0791%" height="15" fill="rgb(215,38,13)" fg:x="1090" fg:w="1"/><text x="86.4842%" y="319.50"></text></g><g><title>regex::regex::string::Regex::new (92 samples, 7.28%)</title><rect x="79.2722%" y="405" width="7.2785%" height="15" fill="rgb(235,42,18)" fg:x="1002" fg:w="92"/><text x="79.5222%" y="415.50">regex::reg..</text></g><g><title>regex::builders::Builder::build_one_string (92 samples, 7.28%)</title><rect x="79.2722%" y="389" width="7.2785%" height="15" fill="rgb(219,66,54)" fg:x="1002" fg:w="92"/><text x="79.5222%" y="399.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (92 samples, 7.28%)</title><rect x="79.2722%" y="373" width="7.2785%" height="15" fill="rgb(222,205,4)" fg:x="1002" fg:w="92"/><text x="79.5222%" y="383.50">regex_auto..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="86.2342%" y="357" width="0.3165%" height="15" fill="rgb(227,213,46)" fg:x="1090" fg:w="4"/><text x="86.4842%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="86.2342%" y="341" width="0.3165%" height="15" fill="rgb(250,145,42)" fg:x="1090" fg:w="4"/><text x="86.4842%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="86.2342%" y="325" width="0.3165%" height="15" fill="rgb(219,15,2)" fg:x="1090" fg:w="4"/><text x="86.4842%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="86.3133%" y="309" width="0.2373%" height="15" fill="rgb(231,181,52)" fg:x="1091" fg:w="3"/><text x="86.5633%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="86.3133%" y="293" width="0.2373%" height="15" fill="rgb(235,1,42)" fg:x="1091" fg:w="3"/><text x="86.5633%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="86.3133%" y="277" width="0.2373%" height="15" fill="rgb(249,88,27)" fg:x="1091" fg:w="3"/><text x="86.5633%" y="287.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="86.3133%" y="261" width="0.2373%" height="15" fill="rgb(235,145,16)" fg:x="1091" fg:w="3"/><text x="86.5633%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="86.5506%" y="341" width="0.3165%" height="15" fill="rgb(237,114,19)" fg:x="1094" fg:w="4"/><text x="86.8006%" y="351.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (107 samples, 8.47%)</title><rect x="78.4810%" y="421" width="8.4652%" height="15" fill="rgb(238,51,50)" fg:x="992" fg:w="107"/><text x="78.7310%" y="431.50">indefinite::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="86.5506%" y="405" width="0.3956%" height="15" fill="rgb(205,194,25)" fg:x="1094" fg:w="5"/><text x="86.8006%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="86.5506%" y="389" width="0.3956%" height="15" fill="rgb(215,203,17)" fg:x="1094" fg:w="5"/><text x="86.8006%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="86.5506%" y="373" width="0.3956%" height="15" fill="rgb(233,112,49)" fg:x="1094" fg:w="5"/><text x="86.8006%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="86.5506%" y="357" width="0.3956%" height="15" fill="rgb(241,130,26)" fg:x="1094" fg:w="5"/><text x="86.8006%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="86.8671%" y="341" width="0.0791%" height="15" fill="rgb(252,223,19)" fg:x="1098" fg:w="1"/><text x="87.1171%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.9462%" y="341" width="0.0791%" height="15" fill="rgb(211,95,25)" fg:x="1099" fg:w="1"/><text x="87.1962%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="86.9462%" y="373" width="0.1582%" height="15" fill="rgb(251,182,27)" fg:x="1099" fg:w="2"/><text x="87.1962%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="86.9462%" y="357" width="0.1582%" height="15" fill="rgb(238,24,4)" fg:x="1099" fg:w="2"/><text x="87.1962%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.0253%" y="341" width="0.0791%" height="15" fill="rgb(224,220,25)" fg:x="1100" fg:w="1"/><text x="87.2753%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.1044%" y="357" width="0.0791%" height="15" fill="rgb(239,133,26)" fg:x="1101" fg:w="1"/><text x="87.3544%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="86.9462%" y="405" width="0.3165%" height="15" fill="rgb(211,94,48)" fg:x="1099" fg:w="4"/><text x="87.1962%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="86.9462%" y="389" width="0.3165%" height="15" fill="rgb(239,87,6)" fg:x="1099" fg:w="4"/><text x="87.1962%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="87.1044%" y="373" width="0.1582%" height="15" fill="rgb(227,62,0)" fg:x="1101" fg:w="2"/><text x="87.3544%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="87.1835%" y="357" width="0.0791%" height="15" fill="rgb(211,226,4)" fg:x="1102" fg:w="1"/><text x="87.4335%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.1835%" y="341" width="0.0791%" height="15" fill="rgb(253,38,52)" fg:x="1102" fg:w="1"/><text x="87.4335%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="87.2627%" y="389" width="0.0791%" height="15" fill="rgb(229,126,40)" fg:x="1103" fg:w="1"/><text x="87.5127%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="87.2627%" y="373" width="0.0791%" height="15" fill="rgb(229,165,44)" fg:x="1103" fg:w="1"/><text x="87.5127%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="87.2627%" y="357" width="0.0791%" height="15" fill="rgb(247,95,47)" fg:x="1103" fg:w="1"/><text x="87.5127%" y="367.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="87.2627%" y="341" width="0.0791%" height="15" fill="rgb(216,140,30)" fg:x="1103" fg:w="1"/><text x="87.5127%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="87.2627%" y="325" width="0.0791%" height="15" fill="rgb(246,214,8)" fg:x="1103" fg:w="1"/><text x="87.5127%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.5791%" y="309" width="0.0791%" height="15" fill="rgb(227,224,15)" fg:x="1107" fg:w="1"/><text x="87.8291%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.5791%" y="293" width="0.0791%" height="15" fill="rgb(233,175,4)" fg:x="1107" fg:w="1"/><text x="87.8291%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.5791%" y="277" width="0.0791%" height="15" fill="rgb(221,66,45)" fg:x="1107" fg:w="1"/><text x="87.8291%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="87.6582%" y="309" width="0.2373%" height="15" fill="rgb(221,178,18)" fg:x="1108" fg:w="3"/><text x="87.9082%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.63%)</title><rect x="87.3418%" y="341" width="0.6329%" height="15" fill="rgb(213,81,29)" fg:x="1104" fg:w="8"/><text x="87.5918%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.63%)</title><rect x="87.3418%" y="325" width="0.6329%" height="15" fill="rgb(220,89,49)" fg:x="1104" fg:w="8"/><text x="87.5918%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="87.8956%" y="309" width="0.0791%" height="15" fill="rgb(227,60,33)" fg:x="1111" fg:w="1"/><text x="88.1456%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.8956%" y="293" width="0.0791%" height="15" fill="rgb(205,113,12)" fg:x="1111" fg:w="1"/><text x="88.1456%" y="303.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (10 samples, 0.79%)</title><rect x="87.2627%" y="405" width="0.7911%" height="15" fill="rgb(211,32,1)" fg:x="1103" fg:w="10"/><text x="87.5127%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.71%)</title><rect x="87.3418%" y="389" width="0.7120%" height="15" fill="rgb(246,2,12)" fg:x="1104" fg:w="9"/><text x="87.5918%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.71%)</title><rect x="87.3418%" y="373" width="0.7120%" height="15" fill="rgb(243,37,27)" fg:x="1104" fg:w="9"/><text x="87.5918%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.71%)</title><rect x="87.3418%" y="357" width="0.7120%" height="15" fill="rgb(248,211,31)" fg:x="1104" fg:w="9"/><text x="87.5918%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="87.9747%" y="341" width="0.0791%" height="15" fill="rgb(242,146,47)" fg:x="1112" fg:w="1"/><text x="88.2247%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="88.0538%" y="389" width="0.0791%" height="15" fill="rgb(206,70,20)" fg:x="1113" fg:w="1"/><text x="88.3038%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="88.0538%" y="373" width="0.0791%" height="15" fill="rgb(215,10,51)" fg:x="1113" fg:w="1"/><text x="88.3038%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.1329%" y="357" width="0.0791%" height="15" fill="rgb(243,178,53)" fg:x="1114" fg:w="1"/><text x="88.3829%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.1329%" y="341" width="0.0791%" height="15" fill="rgb(233,221,20)" fg:x="1114" fg:w="1"/><text x="88.3829%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.1329%" y="325" width="0.0791%" height="15" fill="rgb(218,95,35)" fg:x="1114" fg:w="1"/><text x="88.3829%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.2120%" y="357" width="0.0791%" height="15" fill="rgb(229,13,5)" fg:x="1115" fg:w="1"/><text x="88.4620%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="88.4494%" y="325" width="0.0791%" height="15" fill="rgb(252,164,30)" fg:x="1118" fg:w="1"/><text x="88.6994%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.4494%" y="309" width="0.0791%" height="15" fill="rgb(232,68,36)" fg:x="1118" fg:w="1"/><text x="88.6994%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.4494%" y="293" width="0.0791%" height="15" fill="rgb(219,59,54)" fg:x="1118" fg:w="1"/><text x="88.6994%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.4494%" y="277" width="0.0791%" height="15" fill="rgb(250,92,33)" fg:x="1118" fg:w="1"/><text x="88.6994%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="88.5285%" y="325" width="0.0791%" height="15" fill="rgb(229,162,54)" fg:x="1119" fg:w="1"/><text x="88.7785%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="88.5285%" y="309" width="0.0791%" height="15" fill="rgb(244,114,52)" fg:x="1119" fg:w="1"/><text x="88.7785%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.40%)</title><rect x="88.2911%" y="357" width="0.3956%" height="15" fill="rgb(212,211,43)" fg:x="1116" fg:w="5"/><text x="88.5411%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="88.2911%" y="341" width="0.3956%" height="15" fill="rgb(226,147,8)" fg:x="1116" fg:w="5"/><text x="88.5411%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="88.6076%" y="325" width="0.0791%" height="15" fill="rgb(226,23,13)" fg:x="1120" fg:w="1"/><text x="88.8576%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.6076%" y="309" width="0.0791%" height="15" fill="rgb(240,63,4)" fg:x="1120" fg:w="1"/><text x="88.8576%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="88.6076%" y="293" width="0.0791%" height="15" fill="rgb(221,1,32)" fg:x="1120" fg:w="1"/><text x="88.8576%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.6076%" y="277" width="0.0791%" height="15" fill="rgb(242,117,10)" fg:x="1120" fg:w="1"/><text x="88.8576%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.6076%" y="261" width="0.0791%" height="15" fill="rgb(249,172,44)" fg:x="1120" fg:w="1"/><text x="88.8576%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.6076%" y="245" width="0.0791%" height="15" fill="rgb(244,46,45)" fg:x="1120" fg:w="1"/><text x="88.8576%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="88.6867%" y="325" width="0.1582%" height="15" fill="rgb(206,43,17)" fg:x="1121" fg:w="2"/><text x="88.9367%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.95%)</title><rect x="88.6867%" y="341" width="0.9494%" height="15" fill="rgb(239,218,39)" fg:x="1121" fg:w="12"/><text x="88.9367%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.79%)</title><rect x="88.8449%" y="325" width="0.7911%" height="15" fill="rgb(208,169,54)" fg:x="1123" fg:w="10"/><text x="89.0949%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.5570%" y="309" width="0.0791%" height="15" fill="rgb(247,25,42)" fg:x="1132" fg:w="1"/><text x="89.8070%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="89.6361%" y="341" width="0.0791%" height="15" fill="rgb(226,23,31)" fg:x="1133" fg:w="1"/><text x="89.8861%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="89.6361%" y="325" width="0.0791%" height="15" fill="rgb(247,16,28)" fg:x="1133" fg:w="1"/><text x="89.8861%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.7943%" y="309" width="0.0791%" height="15" fill="rgb(231,147,38)" fg:x="1135" fg:w="1"/><text x="90.0443%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="89.8734%" y="309" width="0.0791%" height="15" fill="rgb(253,81,48)" fg:x="1136" fg:w="1"/><text x="90.1234%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.40%)</title><rect x="89.9525%" y="309" width="0.3956%" height="15" fill="rgb(249,222,43)" fg:x="1137" fg:w="5"/><text x="90.2025%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.40%)</title><rect x="89.9525%" y="293" width="0.3956%" height="15" fill="rgb(221,3,27)" fg:x="1137" fg:w="5"/><text x="90.2025%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="89.9525%" y="277" width="0.3956%" height="15" fill="rgb(228,180,5)" fg:x="1137" fg:w="5"/><text x="90.2025%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (9 samples, 0.71%)</title><rect x="89.7152%" y="341" width="0.7120%" height="15" fill="rgb(227,131,42)" fg:x="1134" fg:w="9"/><text x="89.9652%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (9 samples, 0.71%)</title><rect x="89.7152%" y="325" width="0.7120%" height="15" fill="rgb(212,3,39)" fg:x="1134" fg:w="9"/><text x="89.9652%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="90.3481%" y="309" width="0.0791%" height="15" fill="rgb(226,45,5)" fg:x="1142" fg:w="1"/><text x="90.5981%" y="319.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="90.9019%" y="229" width="0.2373%" height="15" fill="rgb(215,167,45)" fg:x="1149" fg:w="3"/><text x="91.1519%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.1392%" y="229" width="0.0791%" height="15" fill="rgb(250,218,53)" fg:x="1152" fg:w="1"/><text x="91.3892%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.1392%" y="213" width="0.0791%" height="15" fill="rgb(207,140,0)" fg:x="1152" fg:w="1"/><text x="91.3892%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.1392%" y="197" width="0.0791%" height="15" fill="rgb(238,133,51)" fg:x="1152" fg:w="1"/><text x="91.3892%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.1392%" y="181" width="0.0791%" height="15" fill="rgb(218,203,53)" fg:x="1152" fg:w="1"/><text x="91.3892%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (4 samples, 0.32%)</title><rect x="91.2184%" y="229" width="0.3165%" height="15" fill="rgb(226,184,25)" fg:x="1153" fg:w="4"/><text x="91.4684%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.4557%" y="213" width="0.0791%" height="15" fill="rgb(231,121,21)" fg:x="1156" fg:w="1"/><text x="91.7057%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.4557%" y="197" width="0.0791%" height="15" fill="rgb(251,14,34)" fg:x="1156" fg:w="1"/><text x="91.7057%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.4557%" y="181" width="0.0791%" height="15" fill="rgb(249,193,11)" fg:x="1156" fg:w="1"/><text x="91.7057%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.6139%" y="197" width="0.0791%" height="15" fill="rgb(220,172,37)" fg:x="1158" fg:w="1"/><text x="91.8639%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="91.6930%" y="197" width="0.1582%" height="15" fill="rgb(231,229,43)" fg:x="1159" fg:w="2"/><text x="91.9430%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.7722%" y="181" width="0.0791%" height="15" fill="rgb(250,161,5)" fg:x="1160" fg:w="1"/><text x="92.0222%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.7722%" y="165" width="0.0791%" height="15" fill="rgb(218,225,18)" fg:x="1160" fg:w="1"/><text x="92.0222%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="91.5348%" y="229" width="0.3956%" height="15" fill="rgb(245,45,42)" fg:x="1157" fg:w="5"/><text x="91.7848%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="91.5348%" y="213" width="0.3956%" height="15" fill="rgb(211,115,1)" fg:x="1157" fg:w="5"/><text x="91.7848%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="91.8513%" y="197" width="0.0791%" height="15" fill="rgb(248,133,52)" fg:x="1161" fg:w="1"/><text x="92.1013%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="91.9304%" y="213" width="0.0791%" height="15" fill="rgb(238,100,21)" fg:x="1162" fg:w="1"/><text x="92.1804%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="91.9304%" y="229" width="0.1582%" height="15" fill="rgb(247,144,11)" fg:x="1162" fg:w="2"/><text x="92.1804%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="92.0095%" y="213" width="0.0791%" height="15" fill="rgb(206,164,16)" fg:x="1163" fg:w="1"/><text x="92.2595%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (43 samples, 3.40%)</title><rect x="92.0886%" y="229" width="3.4019%" height="15" fill="rgb(222,34,3)" fg:x="1164" fg:w="43"/><text x="92.3386%" y="239.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (43 samples, 3.40%)</title><rect x="92.0886%" y="213" width="3.4019%" height="15" fill="rgb(248,82,4)" fg:x="1164" fg:w="43"/><text x="92.3386%" y="223.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (43 samples, 3.40%)</title><rect x="92.0886%" y="197" width="3.4019%" height="15" fill="rgb(228,81,46)" fg:x="1164" fg:w="43"/><text x="92.3386%" y="207.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="95.4905%" y="229" width="0.3165%" height="15" fill="rgb(227,67,47)" fg:x="1207" fg:w="4"/><text x="95.7405%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="95.6487%" y="213" width="0.1582%" height="15" fill="rgb(215,93,53)" fg:x="1209" fg:w="2"/><text x="95.8987%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 5.54%)</title><rect x="90.4272%" y="325" width="5.5380%" height="15" fill="rgb(248,194,39)" fg:x="1143" fg:w="70"/><text x="90.6772%" y="335.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (70 samples, 5.54%)</title><rect x="90.4272%" y="309" width="5.5380%" height="15" fill="rgb(215,5,19)" fg:x="1143" fg:w="70"/><text x="90.6772%" y="319.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (70 samples, 5.54%)</title><rect x="90.4272%" y="293" width="5.5380%" height="15" fill="rgb(226,215,51)" fg:x="1143" fg:w="70"/><text x="90.6772%" y="303.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (69 samples, 5.46%)</title><rect x="90.5063%" y="277" width="5.4589%" height="15" fill="rgb(225,56,26)" fg:x="1144" fg:w="69"/><text x="90.7563%" y="287.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (69 samples, 5.46%)</title><rect x="90.5063%" y="261" width="5.4589%" height="15" fill="rgb(222,75,29)" fg:x="1144" fg:w="69"/><text x="90.7563%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (69 samples, 5.46%)</title><rect x="90.5063%" y="245" width="5.4589%" height="15" fill="rgb(236,139,6)" fg:x="1144" fg:w="69"/><text x="90.7563%" y="255.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="95.8070%" y="229" width="0.1582%" height="15" fill="rgb(223,137,36)" fg:x="1211" fg:w="2"/><text x="96.0570%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.8861%" y="213" width="0.0791%" height="15" fill="rgb(226,99,2)" fg:x="1212" fg:w="1"/><text x="96.1361%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="96.0443%" y="309" width="0.1582%" height="15" fill="rgb(206,133,23)" fg:x="1214" fg:w="2"/><text x="96.2943%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.2025%" y="309" width="0.0791%" height="15" fill="rgb(243,173,15)" fg:x="1216" fg:w="1"/><text x="96.4525%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="96.5190%" y="293" width="0.1582%" height="15" fill="rgb(228,69,28)" fg:x="1220" fg:w="2"/><text x="96.7690%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (80 samples, 6.33%)</title><rect x="90.4272%" y="341" width="6.3291%" height="15" fill="rgb(212,51,22)" fg:x="1143" fg:w="80"/><text x="90.6772%" y="351.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.79%)</title><rect x="95.9652%" y="325" width="0.7911%" height="15" fill="rgb(227,113,0)" fg:x="1213" fg:w="10"/><text x="96.2152%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.47%)</title><rect x="96.2816%" y="309" width="0.4747%" height="15" fill="rgb(252,84,27)" fg:x="1217" fg:w="6"/><text x="96.5316%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.6772%" y="293" width="0.0791%" height="15" fill="rgb(223,145,39)" fg:x="1222" fg:w="1"/><text x="96.9272%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6772%" y="277" width="0.0791%" height="15" fill="rgb(239,219,30)" fg:x="1222" fg:w="1"/><text x="96.9272%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.6772%" y="261" width="0.0791%" height="15" fill="rgb(224,196,39)" fg:x="1222" fg:w="1"/><text x="96.9272%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (103 samples, 8.15%)</title><rect x="88.6867%" y="357" width="8.1487%" height="15" fill="rgb(205,35,43)" fg:x="1121" fg:w="103"/><text x="88.9367%" y="367.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="96.7563%" y="341" width="0.0791%" height="15" fill="rgb(228,201,21)" fg:x="1223" fg:w="1"/><text x="97.0063%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="96.7563%" y="325" width="0.0791%" height="15" fill="rgb(237,118,16)" fg:x="1223" fg:w="1"/><text x="97.0063%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="96.7563%" y="309" width="0.0791%" height="15" fill="rgb(241,17,19)" fg:x="1223" fg:w="1"/><text x="97.0063%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="96.8354%" y="325" width="0.0791%" height="15" fill="rgb(214,10,25)" fg:x="1224" fg:w="1"/><text x="97.0854%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="96.9146%" y="325" width="0.2373%" height="15" fill="rgb(238,37,29)" fg:x="1225" fg:w="3"/><text x="97.1646%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="96.9937%" y="309" width="0.1582%" height="15" fill="rgb(253,83,25)" fg:x="1226" fg:w="2"/><text x="97.2437%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="96.9937%" y="293" width="0.1582%" height="15" fill="rgb(234,192,12)" fg:x="1226" fg:w="2"/><text x="97.2437%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="96.9937%" y="277" width="0.1582%" height="15" fill="rgb(241,216,45)" fg:x="1226" fg:w="2"/><text x="97.2437%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="96.9937%" y="261" width="0.1582%" height="15" fill="rgb(242,22,33)" fg:x="1226" fg:w="2"/><text x="97.2437%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.1519%" y="309" width="0.0791%" height="15" fill="rgb(231,105,49)" fg:x="1228" fg:w="1"/><text x="97.4019%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1519%" y="293" width="0.0791%" height="15" fill="rgb(218,204,15)" fg:x="1228" fg:w="1"/><text x="97.4019%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1519%" y="277" width="0.0791%" height="15" fill="rgb(235,138,41)" fg:x="1228" fg:w="1"/><text x="97.4019%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.47%)</title><rect x="96.8354%" y="357" width="0.4747%" height="15" fill="rgb(246,0,9)" fg:x="1224" fg:w="6"/><text x="97.0854%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.47%)</title><rect x="96.8354%" y="341" width="0.4747%" height="15" fill="rgb(210,74,4)" fg:x="1224" fg:w="6"/><text x="97.0854%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="97.1519%" y="325" width="0.1582%" height="15" fill="rgb(250,60,41)" fg:x="1228" fg:w="2"/><text x="97.4019%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="97.2310%" y="309" width="0.0791%" height="15" fill="rgb(220,115,12)" fg:x="1229" fg:w="1"/><text x="97.4810%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="97.3101%" y="309" width="0.0791%" height="15" fill="rgb(237,100,13)" fg:x="1230" fg:w="1"/><text x="97.5601%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.3101%" y="293" width="0.0791%" height="15" fill="rgb(213,55,26)" fg:x="1230" fg:w="1"/><text x="97.5601%" y="303.50"></text></g><g><title>indefinite::rules::number::Number::check (133 samples, 10.52%)</title><rect x="86.9462%" y="421" width="10.5222%" height="15" fill="rgb(216,17,4)" fg:x="1099" fg:w="133"/><text x="87.1962%" y="431.50">indefinite::rul..</text></g><g><title>regex::regex::string::Regex::new (119 samples, 9.41%)</title><rect x="88.0538%" y="405" width="9.4146%" height="15" fill="rgb(220,153,47)" fg:x="1113" fg:w="119"/><text x="88.3038%" y="415.50">regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (118 samples, 9.34%)</title><rect x="88.1329%" y="389" width="9.3354%" height="15" fill="rgb(215,131,9)" fg:x="1114" fg:w="118"/><text x="88.3829%" y="399.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (118 samples, 9.34%)</title><rect x="88.1329%" y="373" width="9.3354%" height="15" fill="rgb(233,46,42)" fg:x="1114" fg:w="118"/><text x="88.3829%" y="383.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="97.3101%" y="357" width="0.1582%" height="15" fill="rgb(226,86,7)" fg:x="1230" fg:w="2"/><text x="97.5601%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.3101%" y="341" width="0.1582%" height="15" fill="rgb(239,226,21)" fg:x="1230" fg:w="2"/><text x="97.5601%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="97.3101%" y="325" width="0.1582%" height="15" fill="rgb(244,137,22)" fg:x="1230" fg:w="2"/><text x="97.5601%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="97.3892%" y="309" width="0.0791%" height="15" fill="rgb(211,139,35)" fg:x="1231" fg:w="1"/><text x="97.6392%" y="319.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="97.3892%" y="293" width="0.0791%" height="15" fill="rgb(214,62,50)" fg:x="1231" fg:w="1"/><text x="97.6392%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.3892%" y="277" width="0.0791%" height="15" fill="rgb(212,113,44)" fg:x="1231" fg:w="1"/><text x="97.6392%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="97.4684%" y="389" width="0.0791%" height="15" fill="rgb(226,150,43)" fg:x="1232" fg:w="1"/><text x="97.7184%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="97.4684%" y="373" width="0.0791%" height="15" fill="rgb(250,71,37)" fg:x="1232" fg:w="1"/><text x="97.7184%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="97.4684%" y="357" width="0.0791%" height="15" fill="rgb(219,76,19)" fg:x="1232" fg:w="1"/><text x="97.7184%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="97.5475%" y="389" width="0.0791%" height="15" fill="rgb(250,39,11)" fg:x="1233" fg:w="1"/><text x="97.7975%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="97.5475%" y="373" width="0.0791%" height="15" fill="rgb(230,64,31)" fg:x="1233" fg:w="1"/><text x="97.7975%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="97.5475%" y="357" width="0.0791%" height="15" fill="rgb(208,222,23)" fg:x="1233" fg:w="1"/><text x="97.7975%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="97.5475%" y="341" width="0.0791%" height="15" fill="rgb(227,125,18)" fg:x="1233" fg:w="1"/><text x="97.7975%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.5475%" y="325" width="0.0791%" height="15" fill="rgb(234,210,9)" fg:x="1233" fg:w="1"/><text x="97.7975%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.6266%" y="341" width="0.0791%" height="15" fill="rgb(217,127,24)" fg:x="1234" fg:w="1"/><text x="97.8766%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.6266%" y="325" width="0.0791%" height="15" fill="rgb(239,141,48)" fg:x="1234" fg:w="1"/><text x="97.8766%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.6266%" y="309" width="0.0791%" height="15" fill="rgb(227,109,8)" fg:x="1234" fg:w="1"/><text x="97.8766%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.6266%" y="293" width="0.0791%" height="15" fill="rgb(235,184,23)" fg:x="1234" fg:w="1"/><text x="97.8766%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="97.7848%" y="309" width="0.0791%" height="15" fill="rgb(227,226,48)" fg:x="1236" fg:w="1"/><text x="98.0348%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="97.7848%" y="325" width="0.1582%" height="15" fill="rgb(206,150,11)" fg:x="1236" fg:w="2"/><text x="98.0348%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="97.8639%" y="309" width="0.0791%" height="15" fill="rgb(254,2,33)" fg:x="1237" fg:w="1"/><text x="98.1139%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="97.9430%" y="293" width="0.0791%" height="15" fill="rgb(243,160,20)" fg:x="1238" fg:w="1"/><text x="98.1930%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="97.9430%" y="309" width="0.1582%" height="15" fill="rgb(218,208,30)" fg:x="1238" fg:w="2"/><text x="98.1930%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="98.0222%" y="293" width="0.0791%" height="15" fill="rgb(224,120,49)" fg:x="1239" fg:w="1"/><text x="98.2722%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="98.0222%" y="277" width="0.0791%" height="15" fill="rgb(246,12,2)" fg:x="1239" fg:w="1"/><text x="98.2722%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.0222%" y="261" width="0.0791%" height="15" fill="rgb(236,117,3)" fg:x="1239" fg:w="1"/><text x="98.2722%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.0222%" y="245" width="0.0791%" height="15" fill="rgb(216,128,52)" fg:x="1239" fg:w="1"/><text x="98.2722%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="98.0222%" y="229" width="0.0791%" height="15" fill="rgb(246,145,19)" fg:x="1239" fg:w="1"/><text x="98.2722%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="98.0222%" y="213" width="0.0791%" height="15" fill="rgb(222,11,46)" fg:x="1239" fg:w="1"/><text x="98.2722%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1013%" y="293" width="0.0791%" height="15" fill="rgb(245,82,36)" fg:x="1240" fg:w="1"/><text x="98.3513%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.1804%" y="293" width="0.0791%" height="15" fill="rgb(250,73,51)" fg:x="1241" fg:w="1"/><text x="98.4304%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.1804%" y="277" width="0.0791%" height="15" fill="rgb(221,189,23)" fg:x="1241" fg:w="1"/><text x="98.4304%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="98.2595%" y="293" width="0.0791%" height="15" fill="rgb(210,33,7)" fg:x="1242" fg:w="1"/><text x="98.5095%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.71%)</title><rect x="97.7057%" y="341" width="0.7120%" height="15" fill="rgb(210,107,22)" fg:x="1235" fg:w="9"/><text x="97.9557%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.47%)</title><rect x="97.9430%" y="325" width="0.4747%" height="15" fill="rgb(222,116,37)" fg:x="1238" fg:w="6"/><text x="98.1930%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="98.1013%" y="309" width="0.3165%" height="15" fill="rgb(254,17,48)" fg:x="1240" fg:w="4"/><text x="98.3513%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="98.3386%" y="293" width="0.0791%" height="15" fill="rgb(224,36,32)" fg:x="1243" fg:w="1"/><text x="98.5886%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="98.4968%" y="293" width="0.0791%" height="15" fill="rgb(232,90,46)" fg:x="1245" fg:w="1"/><text x="98.7468%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="98.4968%" y="277" width="0.0791%" height="15" fill="rgb(241,66,40)" fg:x="1245" fg:w="1"/><text x="98.7468%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="98.4968%" y="261" width="0.0791%" height="15" fill="rgb(249,184,29)" fg:x="1245" fg:w="1"/><text x="98.7468%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="98.4968%" y="245" width="0.0791%" height="15" fill="rgb(231,181,1)" fg:x="1245" fg:w="1"/><text x="98.7468%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="98.4177%" y="309" width="0.3165%" height="15" fill="rgb(224,94,2)" fg:x="1244" fg:w="4"/><text x="98.6677%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="98.5759%" y="293" width="0.1582%" height="15" fill="rgb(229,170,15)" fg:x="1246" fg:w="2"/><text x="98.8259%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (2 samples, 0.16%)</title><rect x="98.5759%" y="277" width="0.1582%" height="15" fill="rgb(240,127,35)" fg:x="1246" fg:w="2"/><text x="98.8259%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.47%)</title><rect x="98.4177%" y="341" width="0.4747%" height="15" fill="rgb(248,196,34)" fg:x="1244" fg:w="6"/><text x="98.6677%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.47%)</title><rect x="98.4177%" y="325" width="0.4747%" height="15" fill="rgb(236,137,7)" fg:x="1244" fg:w="6"/><text x="98.6677%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="98.7342%" y="309" width="0.1582%" height="15" fill="rgb(235,127,16)" fg:x="1248" fg:w="2"/><text x="98.9842%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="98.9715%" y="293" width="0.0791%" height="15" fill="rgb(250,192,54)" fg:x="1251" fg:w="1"/><text x="99.2215%" y="303.50"></text></g><g><title>regex::regex::string::Regex::new (19 samples, 1.50%)</title><rect x="97.6266%" y="389" width="1.5032%" height="15" fill="rgb(218,98,20)" fg:x="1234" fg:w="19"/><text x="97.8766%" y="399.50"></text></g><g><title>regex::builders::Builder::build_one_string (19 samples, 1.50%)</title><rect x="97.6266%" y="373" width="1.5032%" height="15" fill="rgb(230,176,47)" fg:x="1234" fg:w="19"/><text x="97.8766%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (19 samples, 1.50%)</title><rect x="97.6266%" y="357" width="1.5032%" height="15" fill="rgb(244,2,33)" fg:x="1234" fg:w="19"/><text x="97.8766%" y="367.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="98.8924%" y="341" width="0.2373%" height="15" fill="rgb(231,100,17)" fg:x="1250" fg:w="3"/><text x="99.1424%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="98.8924%" y="325" width="0.2373%" height="15" fill="rgb(245,23,12)" fg:x="1250" fg:w="3"/><text x="99.1424%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="98.9715%" y="309" width="0.1582%" height="15" fill="rgb(249,55,22)" fg:x="1251" fg:w="2"/><text x="99.2215%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="99.0506%" y="293" width="0.0791%" height="15" fill="rgb(207,134,9)" fg:x="1252" fg:w="1"/><text x="99.3006%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="99.2089%" y="309" width="0.0791%" height="15" fill="rgb(218,134,0)" fg:x="1254" fg:w="1"/><text x="99.4589%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.2089%" y="293" width="0.0791%" height="15" fill="rgb(213,212,33)" fg:x="1254" fg:w="1"/><text x="99.4589%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="99.2089%" y="277" width="0.0791%" height="15" fill="rgb(252,106,18)" fg:x="1254" fg:w="1"/><text x="99.4589%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="99.1297%" y="325" width="0.2373%" height="15" fill="rgb(208,126,42)" fg:x="1253" fg:w="3"/><text x="99.3797%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2880%" y="309" width="0.0791%" height="15" fill="rgb(246,175,29)" fg:x="1255" fg:w="1"/><text x="99.5380%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.2880%" y="293" width="0.0791%" height="15" fill="rgb(215,13,50)" fg:x="1255" fg:w="1"/><text x="99.5380%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (26 samples, 2.06%)</title><rect x="97.4684%" y="405" width="2.0570%" height="15" fill="rgb(216,172,15)" fg:x="1232" fg:w="26"/><text x="97.7184%" y="415.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="99.1297%" y="389" width="0.3956%" height="15" fill="rgb(212,103,13)" fg:x="1253" fg:w="5"/><text x="99.3797%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="99.1297%" y="373" width="0.3956%" height="15" fill="rgb(231,171,36)" fg:x="1253" fg:w="5"/><text x="99.3797%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="99.1297%" y="357" width="0.3956%" height="15" fill="rgb(250,123,20)" fg:x="1253" fg:w="5"/><text x="99.3797%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="99.1297%" y="341" width="0.3956%" height="15" fill="rgb(212,53,50)" fg:x="1253" fg:w="5"/><text x="99.3797%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="99.3671%" y="325" width="0.1582%" height="15" fill="rgb(243,54,12)" fg:x="1256" fg:w="2"/><text x="99.6171%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="99.4462%" y="309" width="0.0791%" height="15" fill="rgb(234,101,34)" fg:x="1257" fg:w="1"/><text x="99.6962%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.4462%" y="293" width="0.0791%" height="15" fill="rgb(254,67,22)" fg:x="1257" fg:w="1"/><text x="99.6962%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4462%" y="277" width="0.0791%" height="15" fill="rgb(250,35,47)" fg:x="1257" fg:w="1"/><text x="99.6962%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (279 samples, 22.07%)</title><rect x="77.6108%" y="501" width="22.0728%" height="15" fill="rgb(226,126,38)" fg:x="981" fg:w="279"/><text x="77.8608%" y="511.50">&lt;&amp;kernel::model::entry::Entry as pl..</text></g><g><title>plugins_core::looking::model::qualify_name (269 samples, 21.28%)</title><rect x="78.4019%" y="485" width="21.2816%" height="15" fill="rgb(216,138,53)" fg:x="991" fg:w="269"/><text x="78.6519%" y="495.50">plugins_core::looking::model::qual..</text></g><g><title>indefinite::indefinite (269 samples, 21.28%)</title><rect x="78.4019%" y="469" width="21.2816%" height="15" fill="rgb(246,199,43)" fg:x="991" fg:w="269"/><text x="78.6519%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (269 samples, 21.28%)</title><rect x="78.4019%" y="453" width="21.2816%" height="15" fill="rgb(232,125,11)" fg:x="991" fg:w="269"/><text x="78.6519%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (268 samples, 21.20%)</title><rect x="78.4810%" y="437" width="21.2025%" height="15" fill="rgb(218,219,45)" fg:x="992" fg:w="268"/><text x="78.7310%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (28 samples, 2.22%)</title><rect x="97.4684%" y="421" width="2.2152%" height="15" fill="rgb(216,102,54)" fg:x="1232" fg:w="28"/><text x="97.7184%" y="431.50">i..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="99.5253%" y="405" width="0.1582%" height="15" fill="rgb(250,228,7)" fg:x="1258" fg:w="2"/><text x="99.7753%" y="415.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6835%" y="469" width="0.0791%" height="15" fill="rgb(226,125,25)" fg:x="1260" fg:w="1"/><text x="99.9335%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6835%" y="453" width="0.0791%" height="15" fill="rgb(224,165,27)" fg:x="1260" fg:w="1"/><text x="99.9335%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6835%" y="437" width="0.0791%" height="15" fill="rgb(233,86,3)" fg:x="1260" fg:w="1"/><text x="99.9335%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6835%" y="421" width="0.0791%" height="15" fill="rgb(228,116,20)" fg:x="1260" fg:w="1"/><text x="99.9335%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6835%" y="405" width="0.0791%" height="15" fill="rgb(209,192,17)" fg:x="1260" fg:w="1"/><text x="99.9335%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6835%" y="389" width="0.0791%" height="15" fill="rgb(224,88,34)" fg:x="1260" fg:w="1"/><text x="99.9335%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.6835%" y="373" width="0.0791%" height="15" fill="rgb(233,38,6)" fg:x="1260" fg:w="1"/><text x="99.9335%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.6835%" y="357" width="0.0791%" height="15" fill="rgb(212,59,30)" fg:x="1260" fg:w="1"/><text x="99.9335%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.6835%" y="341" width="0.0791%" height="15" fill="rgb(213,80,3)" fg:x="1260" fg:w="1"/><text x="99.9335%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.6835%" y="325" width="0.0791%" height="15" fill="rgb(251,178,7)" fg:x="1260" fg:w="1"/><text x="99.9335%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.6835%" y="309" width="0.0791%" height="15" fill="rgb(213,154,26)" fg:x="1260" fg:w="1"/><text x="99.9335%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.6835%" y="293" width="0.0791%" height="15" fill="rgb(238,165,49)" fg:x="1260" fg:w="1"/><text x="99.9335%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.6835%" y="277" width="0.0791%" height="15" fill="rgb(248,91,46)" fg:x="1260" fg:w="1"/><text x="99.9335%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.6835%" y="261" width="0.0791%" height="15" fill="rgb(244,21,52)" fg:x="1260" fg:w="1"/><text x="99.9335%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.6835%" y="245" width="0.0791%" height="15" fill="rgb(247,122,20)" fg:x="1260" fg:w="1"/><text x="99.9335%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6835%" y="229" width="0.0791%" height="15" fill="rgb(218,27,9)" fg:x="1260" fg:w="1"/><text x="99.9335%" y="239.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (329 samples, 26.03%)</title><rect x="73.8133%" y="677" width="26.0285%" height="15" fill="rgb(246,7,6)" fg:x="933" fg:w="329"/><text x="74.0633%" y="687.50">&lt;engine::perform::StandardPerformer as ker..</text></g><g><title>kernel::plugins::mw::apply_middleware (281 samples, 22.23%)</title><rect x="77.6108%" y="661" width="22.2310%" height="15" fill="rgb(227,135,54)" fg:x="981" fg:w="281"/><text x="77.8608%" y="671.50">kernel::plugins::mw::apply_middlewa..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (281 samples, 22.23%)</title><rect x="77.6108%" y="645" width="22.2310%" height="15" fill="rgb(247,14,11)" fg:x="981" fg:w="281"/><text x="77.8608%" y="655.50">kernel::plugins::mw::MiddlewareNext..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (281 samples, 22.23%)</title><rect x="77.6108%" y="629" width="22.2310%" height="15" fill="rgb(206,149,34)" fg:x="981" fg:w="281"/><text x="77.8608%" y="639.50">&lt;plugins_dynlib::DynamicMiddleware ..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (281 samples, 22.23%)</title><rect x="77.6108%" y="613" width="22.2310%" height="15" fill="rgb(227,228,4)" fg:x="981" fg:w="281"/><text x="77.8608%" y="623.50">kernel::plugins::mw::MiddlewareNext..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (281 samples, 22.23%)</title><rect x="77.6108%" y="597" width="22.2310%" height="15" fill="rgb(238,218,28)" fg:x="981" fg:w="281"/><text x="77.8608%" y="607.50">core::ops::function::FnOnce::call_o..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (281 samples, 22.23%)</title><rect x="77.6108%" y="581" width="22.2310%" height="15" fill="rgb(252,86,40)" fg:x="981" fg:w="281"/><text x="77.8608%" y="591.50">kernel::plugins::mw::MiddlewareNext..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (281 samples, 22.23%)</title><rect x="77.6108%" y="565" width="22.2310%" height="15" fill="rgb(251,225,11)" fg:x="981" fg:w="281"/><text x="77.8608%" y="575.50">core::ops::function::FnOnce::call_o..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (281 samples, 22.23%)</title><rect x="77.6108%" y="549" width="22.2310%" height="15" fill="rgb(206,46,49)" fg:x="981" fg:w="281"/><text x="77.8608%" y="559.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::op..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (281 samples, 22.23%)</title><rect x="77.6108%" y="533" width="22.2310%" height="15" fill="rgb(245,128,24)" fg:x="981" fg:w="281"/><text x="77.8608%" y="543.50">&lt;plugins_core::looking::actions::Lo..</text></g><g><title>plugins_core::looking::model::new_area_observation (281 samples, 22.23%)</title><rect x="77.6108%" y="517" width="22.2310%" height="15" fill="rgb(219,177,34)" fg:x="981" fg:w="281"/><text x="77.8608%" y="527.50">plugins_core::looking::model::new_a..</text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="99.6835%" y="501" width="0.1582%" height="15" fill="rgb(218,60,48)" fg:x="1260" fg:w="2"/><text x="99.9335%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="99.6835%" y="485" width="0.1582%" height="15" fill="rgb(221,11,5)" fg:x="1260" fg:w="2"/><text x="99.9335%" y="495.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="99.7627%" y="469" width="0.0791%" height="15" fill="rgb(220,148,13)" fg:x="1261" fg:w="1"/><text x="100.0127%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.7627%" y="453" width="0.0791%" height="15" fill="rgb(210,16,3)" fg:x="1261" fg:w="1"/><text x="100.0127%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.7627%" y="437" width="0.0791%" height="15" fill="rgb(236,80,2)" fg:x="1261" fg:w="1"/><text x="100.0127%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="99.7627%" y="421" width="0.0791%" height="15" fill="rgb(239,129,19)" fg:x="1261" fg:w="1"/><text x="100.0127%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.8418%" y="485" width="0.0791%" height="15" fill="rgb(220,106,35)" fg:x="1262" fg:w="1"/><text x="100.0918%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.8418%" y="469" width="0.0791%" height="15" fill="rgb(252,139,45)" fg:x="1262" fg:w="1"/><text x="100.0918%" y="479.50"></text></g><g><title>all (1,264 samples, 100%)</title><rect x="0.0000%" y="1189" width="100.0000%" height="15" fill="rgb(229,8,36)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="1199.50"></text></g><g><title>simple-484c7248 (1,264 samples, 100.00%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(230,126,33)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="1183.50">simple-484c7248</text></g><g><title>_start (1,264 samples, 100.00%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(239,140,21)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="1167.50">_start</text></g><g><title>__libc_start_main (1,264 samples, 100.00%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(254,104,9)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="1151.50">__libc_start_main</text></g><g><title>main (1,264 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(239,52,14)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="1135.50">main</text></g><g><title>std::rt::lang_start_internal (1,264 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(208,227,44)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="1119.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,264 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(246,18,19)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="1103.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,264 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(235,228,25)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="1087.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,264 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(240,156,20)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="1071.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,264 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(224,8,20)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="1055.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,264 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(214,12,52)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="1039.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,264 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(211,220,47)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="1023.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,264 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(250,173,5)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="1007.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,264 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(250,125,52)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="991.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,264 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(209,133,18)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="975.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,264 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(216,173,22)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="959.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,264 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(205,3,22)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="943.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,264 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(248,22,20)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="927.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,264 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(233,6,29)" fg:x="0" fg:w="1264"/><text x="0.2500%" y="911.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (405 samples, 32.04%)</title><rect x="67.9589%" y="885" width="32.0411%" height="15" fill="rgb(240,22,54)" fg:x="859" fg:w="405"/><text x="68.2089%" y="895.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::r..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (405 samples, 32.04%)</title><rect x="67.9589%" y="869" width="32.0411%" height="15" fill="rgb(231,133,32)" fg:x="859" fg:w="405"/><text x="68.2089%" y="879.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (405 samples, 32.04%)</title><rect x="67.9589%" y="853" width="32.0411%" height="15" fill="rgb(248,193,4)" fg:x="859" fg:w="405"/><text x="68.2089%" y="863.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (332 samples, 26.27%)</title><rect x="73.7342%" y="837" width="26.2658%" height="15" fill="rgb(211,178,46)" fg:x="932" fg:w="332"/><text x="73.9842%" y="847.50">engine::session::Session::evaluate_and_per..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (332 samples, 26.27%)</title><rect x="73.7342%" y="821" width="26.2658%" height="15" fill="rgb(224,5,42)" fg:x="932" fg:w="332"/><text x="73.9842%" y="831.50">&lt;engine::session::Session as kernel::actio..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (332 samples, 26.27%)</title><rect x="73.7342%" y="805" width="26.2658%" height="15" fill="rgb(239,176,25)" fg:x="932" fg:w="332"/><text x="73.9842%" y="815.50">&lt;engine::perform::StandardPerformer as ker..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (331 samples, 26.19%)</title><rect x="73.8133%" y="789" width="26.1867%" height="15" fill="rgb(245,187,50)" fg:x="933" fg:w="331"/><text x="74.0633%" y="799.50">engine::perform::StandardPerformer::evalua..</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (331 samples, 26.19%)</title><rect x="73.8133%" y="773" width="26.1867%" height="15" fill="rgb(248,24,15)" fg:x="933" fg:w="331"/><text x="74.0633%" y="783.50">&lt;kernel::plugins::SessionPlugins as kernel..</text></g><g><title>core::iter::adapters::try_process (331 samples, 26.19%)</title><rect x="73.8133%" y="757" width="26.1867%" height="15" fill="rgb(205,166,13)" fg:x="933" fg:w="331"/><text x="74.0633%" y="767.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (331 samples, 26.19%)</title><rect x="73.8133%" y="741" width="26.1867%" height="15" fill="rgb(208,114,23)" fg:x="933" fg:w="331"/><text x="74.0633%" y="751.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_fr..</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (331 samples, 26.19%)</title><rect x="73.8133%" y="725" width="26.1867%" height="15" fill="rgb(239,127,18)" fg:x="933" fg:w="331"/><text x="74.0633%" y="735.50">&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; a..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (331 samples, 26.19%)</title><rect x="73.8133%" y="709" width="26.1867%" height="15" fill="rgb(219,154,28)" fg:x="933" fg:w="331"/><text x="74.0633%" y="719.50">&lt;plugins_core::looking::LookingPlugin as k..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (331 samples, 26.19%)</title><rect x="73.8133%" y="693" width="26.1867%" height="15" fill="rgb(225,157,23)" fg:x="933" fg:w="331"/><text x="74.0633%" y="703.50">&lt;engine::perform::StandardPerformer as ker..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (2 samples, 0.16%)</title><rect x="99.8418%" y="677" width="0.1582%" height="15" fill="rgb(219,8,6)" fg:x="1262" fg:w="2"/><text x="100.0918%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="99.8418%" y="661" width="0.1582%" height="15" fill="rgb(212,47,6)" fg:x="1262" fg:w="2"/><text x="100.0918%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="99.8418%" y="645" width="0.1582%" height="15" fill="rgb(224,190,4)" fg:x="1262" fg:w="2"/><text x="100.0918%" y="655.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.8418%" y="629" width="0.1582%" height="15" fill="rgb(239,183,29)" fg:x="1262" fg:w="2"/><text x="100.0918%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="99.8418%" y="613" width="0.1582%" height="15" fill="rgb(213,57,7)" fg:x="1262" fg:w="2"/><text x="100.0918%" y="623.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.8418%" y="597" width="0.1582%" height="15" fill="rgb(216,148,1)" fg:x="1262" fg:w="2"/><text x="100.0918%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.8418%" y="581" width="0.1582%" height="15" fill="rgb(236,182,29)" fg:x="1262" fg:w="2"/><text x="100.0918%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8418%" y="565" width="0.1582%" height="15" fill="rgb(244,120,48)" fg:x="1262" fg:w="2"/><text x="100.0918%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.8418%" y="549" width="0.1582%" height="15" fill="rgb(206,71,34)" fg:x="1262" fg:w="2"/><text x="100.0918%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8418%" y="533" width="0.1582%" height="15" fill="rgb(242,32,6)" fg:x="1262" fg:w="2"/><text x="100.0918%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.8418%" y="517" width="0.1582%" height="15" fill="rgb(241,35,3)" fg:x="1262" fg:w="2"/><text x="100.0918%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8418%" y="501" width="0.1582%" height="15" fill="rgb(222,62,19)" fg:x="1262" fg:w="2"/><text x="100.0918%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9209%" y="485" width="0.0791%" height="15" fill="rgb(223,110,41)" fg:x="1263" fg:w="1"/><text x="100.1709%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9209%" y="469" width="0.0791%" height="15" fill="rgb(208,224,4)" fg:x="1263" fg:w="1"/><text x="100.1709%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9209%" y="453" width="0.0791%" height="15" fill="rgb(241,137,19)" fg:x="1263" fg:w="1"/><text x="100.1709%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9209%" y="437" width="0.0791%" height="15" fill="rgb(244,24,17)" fg:x="1263" fg:w="1"/><text x="100.1709%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9209%" y="421" width="0.0791%" height="15" fill="rgb(245,178,49)" fg:x="1263" fg:w="1"/><text x="100.1709%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9209%" y="405" width="0.0791%" height="15" fill="rgb(219,160,38)" fg:x="1263" fg:w="1"/><text x="100.1709%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.9209%" y="389" width="0.0791%" height="15" fill="rgb(228,137,14)" fg:x="1263" fg:w="1"/><text x="100.1709%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.9209%" y="373" width="0.0791%" height="15" fill="rgb(237,134,11)" fg:x="1263" fg:w="1"/><text x="100.1709%" y="383.50"></text></g></svg></svg>