<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1029.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="1248"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="629" width="0.0801%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.2404%" y="533" width="0.0801%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="1"/><text x="0.4904%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2404%" y="517" width="0.0801%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.4904%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3205%" y="517" width="0.0801%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.5705%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.4006%" y="517" width="0.1603%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="2"/><text x="0.6506%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4006%" y="501" width="0.1603%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="2"/><text x="0.6506%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5609%" y="501" width="0.0801%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="1"/><text x="0.8109%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.2404%" y="581" width="0.4808%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="6"/><text x="0.4904%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.2404%" y="565" width="0.4808%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="6"/><text x="0.4904%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.2404%" y="549" width="0.4808%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="6"/><text x="0.4904%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.3205%" y="533" width="0.4006%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="5"/><text x="0.5705%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.5609%" y="517" width="0.1603%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="2"/><text x="0.8109%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.6410%" y="501" width="0.0801%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="1"/><text x="0.8910%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.6410%" y="485" width="0.0801%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="1"/><text x="0.8910%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6410%" y="469" width="0.0801%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="1"/><text x="0.8910%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (9 samples, 0.72%)</title><rect x="0.0801%" y="629" width="0.7212%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="9"/><text x="0.3301%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="0.0801%" y="613" width="0.7212%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="9"/><text x="0.3301%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (8 samples, 0.64%)</title><rect x="0.1603%" y="597" width="0.6410%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="8"/><text x="0.4103%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="0.7212%" y="581" width="0.0801%" height="15" fill="rgb(221,200,47)" fg:x="9" fg:w="1"/><text x="0.9712%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7212%" y="565" width="0.0801%" height="15" fill="rgb(226,26,5)" fg:x="9" fg:w="1"/><text x="0.9712%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="0.0000%" y="645" width="0.8814%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="11"/><text x="0.2500%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="0.8013%" y="629" width="0.0801%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="1"/><text x="1.0513%" y="639.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="0.9615%" y="549" width="0.0801%" height="15" fill="rgb(221,5,38)" fg:x="12" fg:w="1"/><text x="1.2115%" y="559.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="0.9615%" y="533" width="0.0801%" height="15" fill="rgb(247,18,42)" fg:x="12" fg:w="1"/><text x="1.2115%" y="543.50"></text></g><g><title>dlopen (7 samples, 0.56%)</title><rect x="1.0417%" y="549" width="0.5609%" height="15" fill="rgb(241,131,45)" fg:x="13" fg:w="7"/><text x="1.2917%" y="559.50"></text></g><g><title>_dl_catch_error (6 samples, 0.48%)</title><rect x="1.1218%" y="533" width="0.4808%" height="15" fill="rgb(249,31,29)" fg:x="14" fg:w="6"/><text x="1.3718%" y="543.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.48%)</title><rect x="1.1218%" y="517" width="0.4808%" height="15" fill="rgb(225,111,53)" fg:x="14" fg:w="6"/><text x="1.3718%" y="527.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.48%)</title><rect x="1.1218%" y="501" width="0.4808%" height="15" fill="rgb(238,160,17)" fg:x="14" fg:w="6"/><text x="1.3718%" y="511.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.48%)</title><rect x="1.1218%" y="485" width="0.4808%" height="15" fill="rgb(214,148,48)" fg:x="14" fg:w="6"/><text x="1.3718%" y="495.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (10 samples, 0.80%)</title><rect x="0.8814%" y="597" width="0.8013%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="10"/><text x="1.1314%" y="607.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (10 samples, 0.80%)</title><rect x="0.8814%" y="581" width="0.8013%" height="15" fill="rgb(209,103,24)" fg:x="11" fg:w="10"/><text x="1.1314%" y="591.50"></text></g><g><title>libloading::os::unix::Library::open (10 samples, 0.80%)</title><rect x="0.8814%" y="565" width="0.8013%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="10"/><text x="1.1314%" y="575.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="1.6026%" y="549" width="0.0801%" height="15" fill="rgb(213,181,19)" fg:x="20" fg:w="1"/><text x="1.8526%" y="559.50"></text></g><g><title>&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.08%)</title><rect x="1.6026%" y="533" width="0.0801%" height="15" fill="rgb(254,191,54)" fg:x="20" fg:w="1"/><text x="1.8526%" y="543.50"></text></g><g><title>alloc::ffi::c_str::CString::new::spec_new_impl_bytes (1 samples, 0.08%)</title><rect x="1.6026%" y="517" width="0.0801%" height="15" fill="rgb(241,83,37)" fg:x="20" fg:w="1"/><text x="1.8526%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="1.6026%" y="501" width="0.0801%" height="15" fill="rgb(233,36,39)" fg:x="20" fg:w="1"/><text x="1.8526%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.6026%" y="485" width="0.0801%" height="15" fill="rgb(226,3,54)" fg:x="20" fg:w="1"/><text x="1.8526%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.6026%" y="469" width="0.0801%" height="15" fill="rgb(245,192,40)" fg:x="20" fg:w="1"/><text x="1.8526%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="1.6026%" y="453" width="0.0801%" height="15" fill="rgb(238,167,29)" fg:x="20" fg:w="1"/><text x="1.8526%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="1.6026%" y="437" width="0.0801%" height="15" fill="rgb(232,182,51)" fg:x="20" fg:w="1"/><text x="1.8526%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="1.6026%" y="421" width="0.0801%" height="15" fill="rgb(231,60,39)" fg:x="20" fg:w="1"/><text x="1.8526%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="1.6026%" y="405" width="0.0801%" height="15" fill="rgb(208,69,12)" fg:x="20" fg:w="1"/><text x="1.8526%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.6026%" y="389" width="0.0801%" height="15" fill="rgb(235,93,37)" fg:x="20" fg:w="1"/><text x="1.8526%" y="399.50"></text></g><g><title>engine::session::Session::initialize (11 samples, 0.88%)</title><rect x="0.8814%" y="613" width="0.8814%" height="15" fill="rgb(213,116,39)" fg:x="11" fg:w="11"/><text x="1.1314%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="1.6827%" y="597" width="0.0801%" height="15" fill="rgb(222,207,29)" fg:x="21" fg:w="1"/><text x="1.9327%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="1.6827%" y="581" width="0.0801%" height="15" fill="rgb(206,96,30)" fg:x="21" fg:w="1"/><text x="1.9327%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.6827%" y="565" width="0.0801%" height="15" fill="rgb(218,138,4)" fg:x="21" fg:w="1"/><text x="1.9327%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.6827%" y="549" width="0.0801%" height="15" fill="rgb(250,191,14)" fg:x="21" fg:w="1"/><text x="1.9327%" y="559.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (12 samples, 0.96%)</title><rect x="0.8814%" y="645" width="0.9615%" height="15" fill="rgb(239,60,40)" fg:x="11" fg:w="12"/><text x="1.1314%" y="655.50"></text></g><g><title>engine::session::Session::new (12 samples, 0.96%)</title><rect x="0.8814%" y="629" width="0.9615%" height="15" fill="rgb(206,27,48)" fg:x="11" fg:w="12"/><text x="1.1314%" y="639.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="1.7628%" y="613" width="0.0801%" height="15" fill="rgb(225,35,8)" fg:x="22" fg:w="1"/><text x="2.0128%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="1.7628%" y="597" width="0.0801%" height="15" fill="rgb(250,213,24)" fg:x="22" fg:w="1"/><text x="2.0128%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.7628%" y="581" width="0.0801%" height="15" fill="rgb(247,123,22)" fg:x="22" fg:w="1"/><text x="2.0128%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.7628%" y="565" width="0.0801%" height="15" fill="rgb(231,138,38)" fg:x="22" fg:w="1"/><text x="2.0128%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.7628%" y="549" width="0.0801%" height="15" fill="rgb(231,145,46)" fg:x="22" fg:w="1"/><text x="2.0128%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.7628%" y="533" width="0.0801%" height="15" fill="rgb(251,118,11)" fg:x="22" fg:w="1"/><text x="2.0128%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.8429%" y="517" width="0.0801%" height="15" fill="rgb(217,147,25)" fg:x="23" fg:w="1"/><text x="2.0929%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.8429%" y="501" width="0.0801%" height="15" fill="rgb(247,81,37)" fg:x="23" fg:w="1"/><text x="2.0929%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.8429%" y="485" width="0.0801%" height="15" fill="rgb(209,12,38)" fg:x="23" fg:w="1"/><text x="2.0929%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.8429%" y="469" width="0.0801%" height="15" fill="rgb(227,1,9)" fg:x="23" fg:w="1"/><text x="2.0929%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.0032%" y="501" width="0.0801%" height="15" fill="rgb(248,47,43)" fg:x="25" fg:w="1"/><text x="2.2532%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.0032%" y="485" width="0.0801%" height="15" fill="rgb(221,10,30)" fg:x="25" fg:w="1"/><text x="2.2532%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.0032%" y="469" width="0.0801%" height="15" fill="rgb(210,229,1)" fg:x="25" fg:w="1"/><text x="2.2532%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.0032%" y="453" width="0.0801%" height="15" fill="rgb(222,148,37)" fg:x="25" fg:w="1"/><text x="2.2532%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.0032%" y="437" width="0.0801%" height="15" fill="rgb(234,67,33)" fg:x="25" fg:w="1"/><text x="2.2532%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.0833%" y="485" width="0.1603%" height="15" fill="rgb(247,98,35)" fg:x="26" fg:w="2"/><text x="2.3333%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.1635%" y="469" width="0.0801%" height="15" fill="rgb(247,138,52)" fg:x="27" fg:w="1"/><text x="2.4135%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.1635%" y="453" width="0.0801%" height="15" fill="rgb(213,79,30)" fg:x="27" fg:w="1"/><text x="2.4135%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.1635%" y="437" width="0.0801%" height="15" fill="rgb(246,177,23)" fg:x="27" fg:w="1"/><text x="2.4135%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.1635%" y="421" width="0.0801%" height="15" fill="rgb(230,62,27)" fg:x="27" fg:w="1"/><text x="2.4135%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.1635%" y="405" width="0.0801%" height="15" fill="rgb(216,154,8)" fg:x="27" fg:w="1"/><text x="2.4135%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.1635%" y="389" width="0.0801%" height="15" fill="rgb(244,35,45)" fg:x="27" fg:w="1"/><text x="2.4135%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="1.9231%" y="517" width="0.4006%" height="15" fill="rgb(251,115,12)" fg:x="24" fg:w="5"/><text x="2.1731%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="2.0833%" y="501" width="0.2404%" height="15" fill="rgb(240,54,50)" fg:x="26" fg:w="3"/><text x="2.3333%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.2436%" y="485" width="0.0801%" height="15" fill="rgb(233,84,52)" fg:x="28" fg:w="1"/><text x="2.4936%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.2436%" y="469" width="0.0801%" height="15" fill="rgb(207,117,47)" fg:x="28" fg:w="1"/><text x="2.4936%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="1.8429%" y="549" width="0.7212%" height="15" fill="rgb(249,43,39)" fg:x="23" fg:w="9"/><text x="2.0929%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="1.8429%" y="533" width="0.7212%" height="15" fill="rgb(209,38,44)" fg:x="23" fg:w="9"/><text x="2.0929%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="2.3237%" y="517" width="0.2404%" height="15" fill="rgb(236,212,23)" fg:x="29" fg:w="3"/><text x="2.5737%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="2.3237%" y="501" width="0.2404%" height="15" fill="rgb(242,79,21)" fg:x="29" fg:w="3"/><text x="2.5737%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.4038%" y="485" width="0.1603%" height="15" fill="rgb(211,96,35)" fg:x="30" fg:w="2"/><text x="2.6538%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.4840%" y="469" width="0.0801%" height="15" fill="rgb(253,215,40)" fg:x="31" fg:w="1"/><text x="2.7340%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.4840%" y="453" width="0.0801%" height="15" fill="rgb(211,81,21)" fg:x="31" fg:w="1"/><text x="2.7340%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.4840%" y="437" width="0.0801%" height="15" fill="rgb(208,190,38)" fg:x="31" fg:w="1"/><text x="2.7340%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.5641%" y="549" width="0.0801%" height="15" fill="rgb(235,213,38)" fg:x="32" fg:w="1"/><text x="2.8141%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.5641%" y="533" width="0.0801%" height="15" fill="rgb(237,122,38)" fg:x="32" fg:w="1"/><text x="2.8141%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="2.6442%" y="501" width="0.0801%" height="15" fill="rgb(244,218,35)" fg:x="33" fg:w="1"/><text x="2.8942%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.6442%" y="485" width="0.0801%" height="15" fill="rgb(240,68,47)" fg:x="33" fg:w="1"/><text x="2.8942%" y="495.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="2.6442%" y="469" width="0.0801%" height="15" fill="rgb(210,16,53)" fg:x="33" fg:w="1"/><text x="2.8942%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="2.6442%" y="453" width="0.0801%" height="15" fill="rgb(235,124,12)" fg:x="33" fg:w="1"/><text x="2.8942%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="2.7244%" y="501" width="0.1603%" height="15" fill="rgb(224,169,11)" fg:x="34" fg:w="2"/><text x="2.9744%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="2.7244%" y="485" width="0.1603%" height="15" fill="rgb(250,166,2)" fg:x="34" fg:w="2"/><text x="2.9744%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.8045%" y="469" width="0.0801%" height="15" fill="rgb(242,216,29)" fg:x="35" fg:w="1"/><text x="3.0545%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.8045%" y="453" width="0.0801%" height="15" fill="rgb(230,116,27)" fg:x="35" fg:w="1"/><text x="3.0545%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="2.8846%" y="453" width="0.1603%" height="15" fill="rgb(228,99,48)" fg:x="36" fg:w="2"/><text x="3.1346%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.8846%" y="437" width="0.1603%" height="15" fill="rgb(253,11,6)" fg:x="36" fg:w="2"/><text x="3.1346%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.9647%" y="421" width="0.0801%" height="15" fill="rgb(247,143,39)" fg:x="37" fg:w="1"/><text x="3.2147%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9647%" y="405" width="0.0801%" height="15" fill="rgb(236,97,10)" fg:x="37" fg:w="1"/><text x="3.2147%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.9647%" y="389" width="0.0801%" height="15" fill="rgb(233,208,19)" fg:x="37" fg:w="1"/><text x="3.2147%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.1250%" y="341" width="0.0801%" height="15" fill="rgb(216,164,2)" fg:x="39" fg:w="1"/><text x="3.3750%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.1250%" y="325" width="0.0801%" height="15" fill="rgb(220,129,5)" fg:x="39" fg:w="1"/><text x="3.3750%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.1250%" y="309" width="0.0801%" height="15" fill="rgb(242,17,10)" fg:x="39" fg:w="1"/><text x="3.3750%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.1250%" y="293" width="0.0801%" height="15" fill="rgb(242,107,0)" fg:x="39" fg:w="1"/><text x="3.3750%" y="303.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.44%)</title><rect x="1.8429%" y="629" width="1.4423%" height="15" fill="rgb(251,28,31)" fg:x="23" fg:w="18"/><text x="2.0929%" y="639.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.44%)</title><rect x="1.8429%" y="613" width="1.4423%" height="15" fill="rgb(233,223,10)" fg:x="23" fg:w="18"/><text x="2.0929%" y="623.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.44%)</title><rect x="1.8429%" y="597" width="1.4423%" height="15" fill="rgb(215,21,27)" fg:x="23" fg:w="18"/><text x="2.0929%" y="607.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (18 samples, 1.44%)</title><rect x="1.8429%" y="581" width="1.4423%" height="15" fill="rgb(232,23,21)" fg:x="23" fg:w="18"/><text x="2.0929%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.44%)</title><rect x="1.8429%" y="565" width="1.4423%" height="15" fill="rgb(244,5,23)" fg:x="23" fg:w="18"/><text x="2.0929%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="2.6442%" y="549" width="0.6410%" height="15" fill="rgb(226,81,46)" fg:x="33" fg:w="8"/><text x="2.8942%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="2.6442%" y="533" width="0.6410%" height="15" fill="rgb(247,70,30)" fg:x="33" fg:w="8"/><text x="2.8942%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="2.6442%" y="517" width="0.6410%" height="15" fill="rgb(212,68,19)" fg:x="33" fg:w="8"/><text x="2.8942%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="2.8846%" y="501" width="0.4006%" height="15" fill="rgb(240,187,13)" fg:x="36" fg:w="5"/><text x="3.1346%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="2.8846%" y="485" width="0.4006%" height="15" fill="rgb(223,113,26)" fg:x="36" fg:w="5"/><text x="3.1346%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="2.8846%" y="469" width="0.4006%" height="15" fill="rgb(206,192,2)" fg:x="36" fg:w="5"/><text x="3.1346%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="3.0449%" y="453" width="0.2404%" height="15" fill="rgb(241,108,4)" fg:x="38" fg:w="3"/><text x="3.2949%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="3.1250%" y="437" width="0.1603%" height="15" fill="rgb(247,173,49)" fg:x="39" fg:w="2"/><text x="3.3750%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="3.1250%" y="421" width="0.1603%" height="15" fill="rgb(224,114,35)" fg:x="39" fg:w="2"/><text x="3.3750%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="3.1250%" y="405" width="0.1603%" height="15" fill="rgb(245,159,27)" fg:x="39" fg:w="2"/><text x="3.3750%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="3.1250%" y="389" width="0.1603%" height="15" fill="rgb(245,172,44)" fg:x="39" fg:w="2"/><text x="3.3750%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="3.1250%" y="373" width="0.1603%" height="15" fill="rgb(236,23,11)" fg:x="39" fg:w="2"/><text x="3.3750%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="3.1250%" y="357" width="0.1603%" height="15" fill="rgb(205,117,38)" fg:x="39" fg:w="2"/><text x="3.3750%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.2051%" y="341" width="0.0801%" height="15" fill="rgb(237,72,25)" fg:x="40" fg:w="1"/><text x="3.4551%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.2853%" y="613" width="0.0801%" height="15" fill="rgb(244,70,9)" fg:x="41" fg:w="1"/><text x="3.5353%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="3.2853%" y="597" width="0.0801%" height="15" fill="rgb(217,125,39)" fg:x="41" fg:w="1"/><text x="3.5353%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.2853%" y="581" width="0.0801%" height="15" fill="rgb(235,36,10)" fg:x="41" fg:w="1"/><text x="3.5353%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.2853%" y="565" width="0.0801%" height="15" fill="rgb(251,123,47)" fg:x="41" fg:w="1"/><text x="3.5353%" y="575.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="3.3654%" y="597" width="0.0801%" height="15" fill="rgb(221,13,13)" fg:x="42" fg:w="1"/><text x="3.6154%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="3.3654%" y="581" width="0.0801%" height="15" fill="rgb(238,131,9)" fg:x="42" fg:w="1"/><text x="3.6154%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.3654%" y="565" width="0.0801%" height="15" fill="rgb(211,50,8)" fg:x="42" fg:w="1"/><text x="3.6154%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.3654%" y="549" width="0.0801%" height="15" fill="rgb(245,182,24)" fg:x="42" fg:w="1"/><text x="3.6154%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.3654%" y="533" width="0.0801%" height="15" fill="rgb(242,14,37)" fg:x="42" fg:w="1"/><text x="3.6154%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3654%" y="517" width="0.0801%" height="15" fill="rgb(246,228,12)" fg:x="42" fg:w="1"/><text x="3.6154%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3654%" y="501" width="0.0801%" height="15" fill="rgb(213,55,15)" fg:x="42" fg:w="1"/><text x="3.6154%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3654%" y="485" width="0.0801%" height="15" fill="rgb(209,9,3)" fg:x="42" fg:w="1"/><text x="3.6154%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3654%" y="469" width="0.0801%" height="15" fill="rgb(230,59,30)" fg:x="42" fg:w="1"/><text x="3.6154%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.3654%" y="453" width="0.0801%" height="15" fill="rgb(209,121,21)" fg:x="42" fg:w="1"/><text x="3.6154%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.3654%" y="437" width="0.0801%" height="15" fill="rgb(220,109,13)" fg:x="42" fg:w="1"/><text x="3.6154%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.3654%" y="421" width="0.0801%" height="15" fill="rgb(232,18,1)" fg:x="42" fg:w="1"/><text x="3.6154%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.3654%" y="405" width="0.0801%" height="15" fill="rgb(215,41,42)" fg:x="42" fg:w="1"/><text x="3.6154%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.3654%" y="389" width="0.0801%" height="15" fill="rgb(224,123,36)" fg:x="42" fg:w="1"/><text x="3.6154%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.3654%" y="373" width="0.0801%" height="15" fill="rgb(240,125,3)" fg:x="42" fg:w="1"/><text x="3.6154%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.3654%" y="357" width="0.0801%" height="15" fill="rgb(205,98,50)" fg:x="42" fg:w="1"/><text x="3.6154%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.3654%" y="341" width="0.0801%" height="15" fill="rgb(205,185,37)" fg:x="42" fg:w="1"/><text x="3.6154%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.3654%" y="325" width="0.0801%" height="15" fill="rgb(238,207,15)" fg:x="42" fg:w="1"/><text x="3.6154%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.3654%" y="309" width="0.0801%" height="15" fill="rgb(213,199,42)" fg:x="42" fg:w="1"/><text x="3.6154%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.3654%" y="293" width="0.0801%" height="15" fill="rgb(235,201,11)" fg:x="42" fg:w="1"/><text x="3.6154%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.3654%" y="277" width="0.0801%" height="15" fill="rgb(207,46,11)" fg:x="42" fg:w="1"/><text x="3.6154%" y="287.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.4455%" y="597" width="0.0801%" height="15" fill="rgb(241,35,35)" fg:x="43" fg:w="1"/><text x="3.6955%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5256%" y="501" width="0.0801%" height="15" fill="rgb(243,32,47)" fg:x="44" fg:w="1"/><text x="3.7756%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5256%" y="485" width="0.0801%" height="15" fill="rgb(247,202,23)" fg:x="44" fg:w="1"/><text x="3.7756%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5256%" y="469" width="0.0801%" height="15" fill="rgb(219,102,11)" fg:x="44" fg:w="1"/><text x="3.7756%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5256%" y="453" width="0.0801%" height="15" fill="rgb(243,110,44)" fg:x="44" fg:w="1"/><text x="3.7756%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.5256%" y="549" width="0.1603%" height="15" fill="rgb(222,74,54)" fg:x="44" fg:w="2"/><text x="3.7756%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.5256%" y="533" width="0.1603%" height="15" fill="rgb(216,99,12)" fg:x="44" fg:w="2"/><text x="3.7756%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.5256%" y="517" width="0.1603%" height="15" fill="rgb(226,22,26)" fg:x="44" fg:w="2"/><text x="3.7756%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.6058%" y="501" width="0.0801%" height="15" fill="rgb(217,163,10)" fg:x="45" fg:w="1"/><text x="3.8558%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.6058%" y="485" width="0.0801%" height="15" fill="rgb(213,25,53)" fg:x="45" fg:w="1"/><text x="3.8558%" y="495.50"></text></g><g><title>plugins_core::build::Build::holding (6 samples, 0.48%)</title><rect x="3.2853%" y="629" width="0.4808%" height="15" fill="rgb(252,105,26)" fg:x="41" fg:w="6"/><text x="3.5353%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="3.3654%" y="613" width="0.4006%" height="15" fill="rgb(220,39,43)" fg:x="42" fg:w="5"/><text x="3.6154%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="3.5256%" y="597" width="0.2404%" height="15" fill="rgb(229,68,48)" fg:x="44" fg:w="3"/><text x="3.7756%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="3.5256%" y="581" width="0.2404%" height="15" fill="rgb(252,8,32)" fg:x="44" fg:w="3"/><text x="3.7756%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="3.5256%" y="565" width="0.2404%" height="15" fill="rgb(223,20,43)" fg:x="44" fg:w="3"/><text x="3.7756%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.6859%" y="549" width="0.0801%" height="15" fill="rgb(229,81,49)" fg:x="46" fg:w="1"/><text x="3.9359%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.6859%" y="533" width="0.0801%" height="15" fill="rgb(236,28,36)" fg:x="46" fg:w="1"/><text x="3.9359%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.6859%" y="517" width="0.0801%" height="15" fill="rgb(249,185,26)" fg:x="46" fg:w="1"/><text x="3.9359%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.6859%" y="501" width="0.0801%" height="15" fill="rgb(249,174,33)" fg:x="46" fg:w="1"/><text x="3.9359%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.6859%" y="485" width="0.0801%" height="15" fill="rgb(233,201,37)" fg:x="46" fg:w="1"/><text x="3.9359%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.6859%" y="469" width="0.0801%" height="15" fill="rgb(221,78,26)" fg:x="46" fg:w="1"/><text x="3.9359%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.6859%" y="453" width="0.0801%" height="15" fill="rgb(250,127,30)" fg:x="46" fg:w="1"/><text x="3.9359%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.6859%" y="437" width="0.0801%" height="15" fill="rgb(230,49,44)" fg:x="46" fg:w="1"/><text x="3.9359%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.6859%" y="421" width="0.0801%" height="15" fill="rgb(229,67,23)" fg:x="46" fg:w="1"/><text x="3.9359%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="3.7660%" y="597" width="0.0801%" height="15" fill="rgb(249,83,47)" fg:x="47" fg:w="1"/><text x="4.0160%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="3.7660%" y="581" width="0.0801%" height="15" fill="rgb(215,43,3)" fg:x="47" fg:w="1"/><text x="4.0160%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="3.7660%" y="565" width="0.0801%" height="15" fill="rgb(238,154,13)" fg:x="47" fg:w="1"/><text x="4.0160%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="3.7660%" y="549" width="0.0801%" height="15" fill="rgb(219,56,2)" fg:x="47" fg:w="1"/><text x="4.0160%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.7660%" y="533" width="0.0801%" height="15" fill="rgb(233,0,4)" fg:x="47" fg:w="1"/><text x="4.0160%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.7660%" y="517" width="0.0801%" height="15" fill="rgb(235,30,7)" fg:x="47" fg:w="1"/><text x="4.0160%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="3.7660%" y="501" width="0.0801%" height="15" fill="rgb(250,79,13)" fg:x="47" fg:w="1"/><text x="4.0160%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="3.7660%" y="485" width="0.0801%" height="15" fill="rgb(211,146,34)" fg:x="47" fg:w="1"/><text x="4.0160%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.7660%" y="469" width="0.0801%" height="15" fill="rgb(228,22,38)" fg:x="47" fg:w="1"/><text x="4.0160%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.7660%" y="453" width="0.0801%" height="15" fill="rgb(235,168,5)" fg:x="47" fg:w="1"/><text x="4.0160%" y="463.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="3.7660%" y="437" width="0.0801%" height="15" fill="rgb(221,155,16)" fg:x="47" fg:w="1"/><text x="4.0160%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="3.7660%" y="421" width="0.0801%" height="15" fill="rgb(215,215,53)" fg:x="47" fg:w="1"/><text x="4.0160%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.7660%" y="405" width="0.0801%" height="15" fill="rgb(223,4,10)" fg:x="47" fg:w="1"/><text x="4.0160%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.7660%" y="389" width="0.0801%" height="15" fill="rgb(234,103,6)" fg:x="47" fg:w="1"/><text x="4.0160%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.7660%" y="373" width="0.0801%" height="15" fill="rgb(227,97,0)" fg:x="47" fg:w="1"/><text x="4.0160%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.7660%" y="357" width="0.0801%" height="15" fill="rgb(234,150,53)" fg:x="47" fg:w="1"/><text x="4.0160%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="3.7660%" y="341" width="0.0801%" height="15" fill="rgb(228,201,54)" fg:x="47" fg:w="1"/><text x="4.0160%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="3.7660%" y="325" width="0.0801%" height="15" fill="rgb(222,22,37)" fg:x="47" fg:w="1"/><text x="4.0160%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="3.7660%" y="309" width="0.0801%" height="15" fill="rgb(237,53,32)" fg:x="47" fg:w="1"/><text x="4.0160%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="3.7660%" y="293" width="0.0801%" height="15" fill="rgb(233,25,53)" fg:x="47" fg:w="1"/><text x="4.0160%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="3.7660%" y="277" width="0.0801%" height="15" fill="rgb(210,40,34)" fg:x="47" fg:w="1"/><text x="4.0160%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="3.7660%" y="261" width="0.0801%" height="15" fill="rgb(241,220,44)" fg:x="47" fg:w="1"/><text x="4.0160%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.7660%" y="245" width="0.0801%" height="15" fill="rgb(235,28,35)" fg:x="47" fg:w="1"/><text x="4.0160%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.8462%" y="597" width="0.0801%" height="15" fill="rgb(210,56,17)" fg:x="48" fg:w="1"/><text x="4.0962%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.8462%" y="581" width="0.0801%" height="15" fill="rgb(224,130,29)" fg:x="48" fg:w="1"/><text x="4.0962%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.8462%" y="565" width="0.0801%" height="15" fill="rgb(235,212,8)" fg:x="48" fg:w="1"/><text x="4.0962%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8462%" y="549" width="0.0801%" height="15" fill="rgb(223,33,50)" fg:x="48" fg:w="1"/><text x="4.0962%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8462%" y="533" width="0.0801%" height="15" fill="rgb(219,149,13)" fg:x="48" fg:w="1"/><text x="4.0962%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8462%" y="517" width="0.0801%" height="15" fill="rgb(250,156,29)" fg:x="48" fg:w="1"/><text x="4.0962%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8462%" y="501" width="0.0801%" height="15" fill="rgb(216,193,19)" fg:x="48" fg:w="1"/><text x="4.0962%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.8462%" y="485" width="0.0801%" height="15" fill="rgb(216,135,14)" fg:x="48" fg:w="1"/><text x="4.0962%" y="495.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="3.7660%" y="629" width="0.2404%" height="15" fill="rgb(241,47,5)" fg:x="47" fg:w="3"/><text x="4.0160%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="3.7660%" y="613" width="0.2404%" height="15" fill="rgb(233,42,35)" fg:x="47" fg:w="3"/><text x="4.0160%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="3.9263%" y="597" width="0.0801%" height="15" fill="rgb(231,13,6)" fg:x="49" fg:w="1"/><text x="4.1763%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.9263%" y="581" width="0.0801%" height="15" fill="rgb(207,181,40)" fg:x="49" fg:w="1"/><text x="4.1763%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.9263%" y="565" width="0.0801%" height="15" fill="rgb(254,173,49)" fg:x="49" fg:w="1"/><text x="4.1763%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.9263%" y="549" width="0.0801%" height="15" fill="rgb(221,1,38)" fg:x="49" fg:w="1"/><text x="4.1763%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.9263%" y="533" width="0.0801%" height="15" fill="rgb(206,124,46)" fg:x="49" fg:w="1"/><text x="4.1763%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.9263%" y="517" width="0.0801%" height="15" fill="rgb(249,21,11)" fg:x="49" fg:w="1"/><text x="4.1763%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.9263%" y="501" width="0.0801%" height="15" fill="rgb(222,201,40)" fg:x="49" fg:w="1"/><text x="4.1763%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="3.9263%" y="485" width="0.0801%" height="15" fill="rgb(235,61,29)" fg:x="49" fg:w="1"/><text x="4.1763%" y="495.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="3.9263%" y="469" width="0.0801%" height="15" fill="rgb(219,207,3)" fg:x="49" fg:w="1"/><text x="4.1763%" y="479.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="3.9263%" y="453" width="0.0801%" height="15" fill="rgb(222,56,46)" fg:x="49" fg:w="1"/><text x="4.1763%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0064%" y="549" width="0.0801%" height="15" fill="rgb(239,76,54)" fg:x="50" fg:w="1"/><text x="4.2564%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0064%" y="533" width="0.0801%" height="15" fill="rgb(231,124,27)" fg:x="50" fg:w="1"/><text x="4.2564%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0064%" y="517" width="0.0801%" height="15" fill="rgb(249,195,6)" fg:x="50" fg:w="1"/><text x="4.2564%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0064%" y="501" width="0.0801%" height="15" fill="rgb(237,174,47)" fg:x="50" fg:w="1"/><text x="4.2564%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0064%" y="485" width="0.0801%" height="15" fill="rgb(206,201,31)" fg:x="50" fg:w="1"/><text x="4.2564%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0064%" y="469" width="0.0801%" height="15" fill="rgb(231,57,52)" fg:x="50" fg:w="1"/><text x="4.2564%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.0064%" y="613" width="0.1603%" height="15" fill="rgb(248,177,22)" fg:x="50" fg:w="2"/><text x="4.2564%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="4.0064%" y="597" width="0.1603%" height="15" fill="rgb(215,211,37)" fg:x="50" fg:w="2"/><text x="4.2564%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.0064%" y="581" width="0.1603%" height="15" fill="rgb(241,128,51)" fg:x="50" fg:w="2"/><text x="4.2564%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.0064%" y="565" width="0.1603%" height="15" fill="rgb(227,165,31)" fg:x="50" fg:w="2"/><text x="4.2564%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.0865%" y="549" width="0.0801%" height="15" fill="rgb(228,167,24)" fg:x="51" fg:w="1"/><text x="4.3365%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.0865%" y="533" width="0.0801%" height="15" fill="rgb(228,143,12)" fg:x="51" fg:w="1"/><text x="4.3365%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.0865%" y="517" width="0.0801%" height="15" fill="rgb(249,149,8)" fg:x="51" fg:w="1"/><text x="4.3365%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.0865%" y="501" width="0.0801%" height="15" fill="rgb(243,35,44)" fg:x="51" fg:w="1"/><text x="4.3365%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="4.0865%" y="485" width="0.0801%" height="15" fill="rgb(246,89,9)" fg:x="51" fg:w="1"/><text x="4.3365%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.0865%" y="469" width="0.0801%" height="15" fill="rgb(233,213,13)" fg:x="51" fg:w="1"/><text x="4.3365%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="4.0865%" y="453" width="0.0801%" height="15" fill="rgb(233,141,41)" fg:x="51" fg:w="1"/><text x="4.3365%" y="463.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="4.1667%" y="613" width="0.0801%" height="15" fill="rgb(239,167,4)" fg:x="52" fg:w="1"/><text x="4.4167%" y="623.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="4.1667%" y="597" width="0.0801%" height="15" fill="rgb(209,217,16)" fg:x="52" fg:w="1"/><text x="4.4167%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.1667%" y="581" width="0.0801%" height="15" fill="rgb(219,88,35)" fg:x="52" fg:w="1"/><text x="4.4167%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="4.1667%" y="565" width="0.0801%" height="15" fill="rgb(220,193,23)" fg:x="52" fg:w="1"/><text x="4.4167%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="4.1667%" y="549" width="0.0801%" height="15" fill="rgb(230,90,52)" fg:x="52" fg:w="1"/><text x="4.4167%" y="559.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="4.2468%" y="565" width="0.0801%" height="15" fill="rgb(252,106,19)" fg:x="53" fg:w="1"/><text x="4.4968%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.2468%" y="549" width="0.0801%" height="15" fill="rgb(206,74,20)" fg:x="53" fg:w="1"/><text x="4.4968%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.2468%" y="533" width="0.0801%" height="15" fill="rgb(230,138,44)" fg:x="53" fg:w="1"/><text x="4.4968%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.2468%" y="517" width="0.0801%" height="15" fill="rgb(235,182,43)" fg:x="53" fg:w="1"/><text x="4.4968%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.2468%" y="501" width="0.0801%" height="15" fill="rgb(242,16,51)" fg:x="53" fg:w="1"/><text x="4.4968%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2468%" y="485" width="0.0801%" height="15" fill="rgb(248,9,4)" fg:x="53" fg:w="1"/><text x="4.4968%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2468%" y="469" width="0.0801%" height="15" fill="rgb(210,31,22)" fg:x="53" fg:w="1"/><text x="4.4968%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2468%" y="453" width="0.0801%" height="15" fill="rgb(239,54,39)" fg:x="53" fg:w="1"/><text x="4.4968%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.2468%" y="437" width="0.0801%" height="15" fill="rgb(230,99,41)" fg:x="53" fg:w="1"/><text x="4.4968%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.2468%" y="421" width="0.0801%" height="15" fill="rgb(253,106,12)" fg:x="53" fg:w="1"/><text x="4.4968%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.2468%" y="405" width="0.0801%" height="15" fill="rgb(213,46,41)" fg:x="53" fg:w="1"/><text x="4.4968%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.2468%" y="389" width="0.0801%" height="15" fill="rgb(215,133,35)" fg:x="53" fg:w="1"/><text x="4.4968%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.2468%" y="373" width="0.0801%" height="15" fill="rgb(213,28,5)" fg:x="53" fg:w="1"/><text x="4.4968%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.2468%" y="357" width="0.0801%" height="15" fill="rgb(215,77,49)" fg:x="53" fg:w="1"/><text x="4.4968%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.2468%" y="341" width="0.0801%" height="15" fill="rgb(248,100,22)" fg:x="53" fg:w="1"/><text x="4.4968%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.2468%" y="325" width="0.0801%" height="15" fill="rgb(208,67,9)" fg:x="53" fg:w="1"/><text x="4.4968%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.2468%" y="309" width="0.0801%" height="15" fill="rgb(219,133,21)" fg:x="53" fg:w="1"/><text x="4.4968%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.2468%" y="293" width="0.0801%" height="15" fill="rgb(246,46,29)" fg:x="53" fg:w="1"/><text x="4.4968%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.2468%" y="277" width="0.0801%" height="15" fill="rgb(246,185,52)" fg:x="53" fg:w="1"/><text x="4.4968%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.2468%" y="261" width="0.0801%" height="15" fill="rgb(252,136,11)" fg:x="53" fg:w="1"/><text x="4.4968%" y="271.50"></text></g><g><title>plugins_core::build::Build::leads_to (1 samples, 0.08%)</title><rect x="4.3269%" y="565" width="0.0801%" height="15" fill="rgb(219,138,53)" fg:x="54" fg:w="1"/><text x="4.5769%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.3269%" y="549" width="0.0801%" height="15" fill="rgb(211,51,23)" fg:x="54" fg:w="1"/><text x="4.5769%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="4.3269%" y="533" width="0.0801%" height="15" fill="rgb(247,221,28)" fg:x="54" fg:w="1"/><text x="4.5769%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="4.3269%" y="517" width="0.0801%" height="15" fill="rgb(251,222,45)" fg:x="54" fg:w="1"/><text x="4.5769%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="4.3269%" y="501" width="0.0801%" height="15" fill="rgb(217,162,53)" fg:x="54" fg:w="1"/><text x="4.5769%" y="511.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="4.3269%" y="485" width="0.0801%" height="15" fill="rgb(229,93,14)" fg:x="54" fg:w="1"/><text x="4.5769%" y="495.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.3269%" y="469" width="0.0801%" height="15" fill="rgb(209,67,49)" fg:x="54" fg:w="1"/><text x="4.5769%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.3269%" y="453" width="0.0801%" height="15" fill="rgb(213,87,29)" fg:x="54" fg:w="1"/><text x="4.5769%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.3269%" y="437" width="0.0801%" height="15" fill="rgb(205,151,52)" fg:x="54" fg:w="1"/><text x="4.5769%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.3269%" y="421" width="0.0801%" height="15" fill="rgb(253,215,39)" fg:x="54" fg:w="1"/><text x="4.5769%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.3269%" y="405" width="0.0801%" height="15" fill="rgb(221,220,41)" fg:x="54" fg:w="1"/><text x="4.5769%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.3269%" y="389" width="0.0801%" height="15" fill="rgb(218,133,21)" fg:x="54" fg:w="1"/><text x="4.5769%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.3269%" y="373" width="0.0801%" height="15" fill="rgb(221,193,43)" fg:x="54" fg:w="1"/><text x="4.5769%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="4.2468%" y="613" width="0.2404%" height="15" fill="rgb(240,128,52)" fg:x="53" fg:w="3"/><text x="4.4968%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="4.2468%" y="597" width="0.2404%" height="15" fill="rgb(253,114,12)" fg:x="53" fg:w="3"/><text x="4.4968%" y="607.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="4.2468%" y="581" width="0.2404%" height="15" fill="rgb(215,223,47)" fg:x="53" fg:w="3"/><text x="4.4968%" y="591.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="4.4071%" y="565" width="0.0801%" height="15" fill="rgb(248,225,23)" fg:x="55" fg:w="1"/><text x="4.6571%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="4.4071%" y="549" width="0.0801%" height="15" fill="rgb(250,108,0)" fg:x="55" fg:w="1"/><text x="4.6571%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="4.4071%" y="533" width="0.0801%" height="15" fill="rgb(228,208,7)" fg:x="55" fg:w="1"/><text x="4.6571%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.4071%" y="517" width="0.0801%" height="15" fill="rgb(244,45,10)" fg:x="55" fg:w="1"/><text x="4.6571%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4071%" y="501" width="0.0801%" height="15" fill="rgb(207,125,25)" fg:x="55" fg:w="1"/><text x="4.6571%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.4071%" y="485" width="0.0801%" height="15" fill="rgb(210,195,18)" fg:x="55" fg:w="1"/><text x="4.6571%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4071%" y="469" width="0.0801%" height="15" fill="rgb(249,80,12)" fg:x="55" fg:w="1"/><text x="4.6571%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="4.4071%" y="453" width="0.0801%" height="15" fill="rgb(221,65,9)" fg:x="55" fg:w="1"/><text x="4.6571%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="4.4872%" y="597" width="0.0801%" height="15" fill="rgb(235,49,36)" fg:x="56" fg:w="1"/><text x="4.7372%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.4872%" y="581" width="0.0801%" height="15" fill="rgb(225,32,20)" fg:x="56" fg:w="1"/><text x="4.7372%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.5673%" y="485" width="0.0801%" height="15" fill="rgb(215,141,46)" fg:x="57" fg:w="1"/><text x="4.8173%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.5673%" y="469" width="0.0801%" height="15" fill="rgb(250,160,47)" fg:x="57" fg:w="1"/><text x="4.8173%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.5673%" y="453" width="0.0801%" height="15" fill="rgb(216,222,40)" fg:x="57" fg:w="1"/><text x="4.8173%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.5673%" y="437" width="0.0801%" height="15" fill="rgb(234,217,39)" fg:x="57" fg:w="1"/><text x="4.8173%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.6474%" y="469" width="0.0801%" height="15" fill="rgb(207,178,40)" fg:x="58" fg:w="1"/><text x="4.8974%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.7276%" y="453" width="0.0801%" height="15" fill="rgb(221,136,13)" fg:x="59" fg:w="1"/><text x="4.9776%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.7276%" y="437" width="0.0801%" height="15" fill="rgb(249,199,10)" fg:x="59" fg:w="1"/><text x="4.9776%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.7276%" y="421" width="0.0801%" height="15" fill="rgb(249,222,13)" fg:x="59" fg:w="1"/><text x="4.9776%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.7276%" y="405" width="0.0801%" height="15" fill="rgb(244,185,38)" fg:x="59" fg:w="1"/><text x="4.9776%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.8077%" y="453" width="0.0801%" height="15" fill="rgb(236,202,9)" fg:x="60" fg:w="1"/><text x="5.0577%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.8077%" y="437" width="0.0801%" height="15" fill="rgb(250,229,37)" fg:x="60" fg:w="1"/><text x="5.0577%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.8077%" y="421" width="0.0801%" height="15" fill="rgb(206,174,23)" fg:x="60" fg:w="1"/><text x="5.0577%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="4.5673%" y="517" width="0.4006%" height="15" fill="rgb(211,33,43)" fg:x="57" fg:w="5"/><text x="4.8173%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="4.5673%" y="501" width="0.4006%" height="15" fill="rgb(245,58,50)" fg:x="57" fg:w="5"/><text x="4.8173%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="4.6474%" y="485" width="0.3205%" height="15" fill="rgb(244,68,36)" fg:x="58" fg:w="4"/><text x="4.8974%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="4.7276%" y="469" width="0.2404%" height="15" fill="rgb(232,229,15)" fg:x="59" fg:w="3"/><text x="4.9776%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.8878%" y="453" width="0.0801%" height="15" fill="rgb(254,30,23)" fg:x="61" fg:w="1"/><text x="5.1378%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.9679%" y="485" width="0.0801%" height="15" fill="rgb(235,160,14)" fg:x="62" fg:w="1"/><text x="5.2179%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.1282%" y="469" width="0.0801%" height="15" fill="rgb(212,155,44)" fg:x="64" fg:w="1"/><text x="5.3782%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="4.9679%" y="517" width="0.4808%" height="15" fill="rgb(226,2,50)" fg:x="62" fg:w="6"/><text x="5.2179%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="4.9679%" y="501" width="0.4808%" height="15" fill="rgb(234,177,6)" fg:x="62" fg:w="6"/><text x="5.2179%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="5.0481%" y="485" width="0.4006%" height="15" fill="rgb(217,24,9)" fg:x="63" fg:w="5"/><text x="5.2981%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="5.2083%" y="469" width="0.2404%" height="15" fill="rgb(220,13,46)" fg:x="65" fg:w="3"/><text x="5.4583%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="5.2083%" y="453" width="0.2404%" height="15" fill="rgb(239,221,27)" fg:x="65" fg:w="3"/><text x="5.4583%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.2885%" y="437" width="0.1603%" height="15" fill="rgb(222,198,25)" fg:x="66" fg:w="2"/><text x="5.5385%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.3686%" y="421" width="0.0801%" height="15" fill="rgb(211,99,13)" fg:x="67" fg:w="1"/><text x="5.6186%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.3686%" y="405" width="0.0801%" height="15" fill="rgb(232,111,31)" fg:x="67" fg:w="1"/><text x="5.6186%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.3686%" y="389" width="0.0801%" height="15" fill="rgb(245,82,37)" fg:x="67" fg:w="1"/><text x="5.6186%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="5.3686%" y="373" width="0.0801%" height="15" fill="rgb(227,149,46)" fg:x="67" fg:w="1"/><text x="5.6186%" y="383.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4487%" y="469" width="0.0801%" height="15" fill="rgb(218,36,50)" fg:x="68" fg:w="1"/><text x="5.6987%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.4487%" y="453" width="0.0801%" height="15" fill="rgb(226,80,48)" fg:x="68" fg:w="1"/><text x="5.6987%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4487%" y="437" width="0.0801%" height="15" fill="rgb(238,224,15)" fg:x="68" fg:w="1"/><text x="5.6987%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.5288%" y="357" width="0.0801%" height="15" fill="rgb(241,136,10)" fg:x="69" fg:w="1"/><text x="5.7788%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.5288%" y="341" width="0.0801%" height="15" fill="rgb(208,32,45)" fg:x="69" fg:w="1"/><text x="5.7788%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5288%" y="325" width="0.0801%" height="15" fill="rgb(207,135,9)" fg:x="69" fg:w="1"/><text x="5.7788%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.6090%" y="341" width="0.0801%" height="15" fill="rgb(206,86,44)" fg:x="70" fg:w="1"/><text x="5.8590%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6090%" y="325" width="0.0801%" height="15" fill="rgb(245,177,15)" fg:x="70" fg:w="1"/><text x="5.8590%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6090%" y="309" width="0.0801%" height="15" fill="rgb(206,64,50)" fg:x="70" fg:w="1"/><text x="5.8590%" y="319.50"></text></g><g><title>engine::session::Session::flush (16 samples, 1.28%)</title><rect x="4.4872%" y="613" width="1.2821%" height="15" fill="rgb(234,36,40)" fg:x="56" fg:w="16"/><text x="4.7372%" y="623.50"></text></g><g><title>engine::session::Session::save_changes (15 samples, 1.20%)</title><rect x="4.5673%" y="597" width="1.2019%" height="15" fill="rgb(213,64,8)" fg:x="57" fg:w="15"/><text x="4.8173%" y="607.50"></text></g><g><title>engine::session::state::State::close (15 samples, 1.20%)</title><rect x="4.5673%" y="581" width="1.2019%" height="15" fill="rgb(210,75,36)" fg:x="57" fg:w="15"/><text x="4.8173%" y="591.50"></text></g><g><title>engine::session::state::State::flush_entities (15 samples, 1.20%)</title><rect x="4.5673%" y="565" width="1.2019%" height="15" fill="rgb(229,88,21)" fg:x="57" fg:w="15"/><text x="4.8173%" y="575.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (15 samples, 1.20%)</title><rect x="4.5673%" y="549" width="1.2019%" height="15" fill="rgb(252,204,47)" fg:x="57" fg:w="15"/><text x="4.8173%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.20%)</title><rect x="4.5673%" y="533" width="1.2019%" height="15" fill="rgb(208,77,27)" fg:x="57" fg:w="15"/><text x="4.8173%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="5.4487%" y="517" width="0.3205%" height="15" fill="rgb(221,76,26)" fg:x="68" fg:w="4"/><text x="5.6987%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="5.4487%" y="501" width="0.3205%" height="15" fill="rgb(225,139,18)" fg:x="68" fg:w="4"/><text x="5.6987%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="5.4487%" y="485" width="0.3205%" height="15" fill="rgb(230,137,11)" fg:x="68" fg:w="4"/><text x="5.6987%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="5.5288%" y="469" width="0.2404%" height="15" fill="rgb(212,28,1)" fg:x="69" fg:w="3"/><text x="5.7788%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="5.5288%" y="453" width="0.2404%" height="15" fill="rgb(248,164,17)" fg:x="69" fg:w="3"/><text x="5.7788%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="5.5288%" y="437" width="0.2404%" height="15" fill="rgb(222,171,42)" fg:x="69" fg:w="3"/><text x="5.7788%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="5.5288%" y="421" width="0.2404%" height="15" fill="rgb(243,84,45)" fg:x="69" fg:w="3"/><text x="5.7788%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="5.5288%" y="405" width="0.2404%" height="15" fill="rgb(252,49,23)" fg:x="69" fg:w="3"/><text x="5.7788%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="5.5288%" y="389" width="0.2404%" height="15" fill="rgb(215,19,7)" fg:x="69" fg:w="3"/><text x="5.7788%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="5.5288%" y="373" width="0.2404%" height="15" fill="rgb(238,81,41)" fg:x="69" fg:w="3"/><text x="5.7788%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.6090%" y="357" width="0.1603%" height="15" fill="rgb(210,199,37)" fg:x="70" fg:w="2"/><text x="5.8590%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.6891%" y="341" width="0.0801%" height="15" fill="rgb(244,192,49)" fg:x="71" fg:w="1"/><text x="5.9391%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="5.7692%" y="613" width="0.0801%" height="15" fill="rgb(226,211,11)" fg:x="72" fg:w="1"/><text x="6.0192%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (1 samples, 0.08%)</title><rect x="5.7692%" y="597" width="0.0801%" height="15" fill="rgb(236,162,54)" fg:x="72" fg:w="1"/><text x="6.0192%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="5.7692%" y="581" width="0.0801%" height="15" fill="rgb(220,229,9)" fg:x="72" fg:w="1"/><text x="6.0192%" y="591.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="5.7692%" y="565" width="0.0801%" height="15" fill="rgb(250,87,22)" fg:x="72" fg:w="1"/><text x="6.0192%" y="575.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="5.7692%" y="549" width="0.0801%" height="15" fill="rgb(239,43,17)" fg:x="72" fg:w="1"/><text x="6.0192%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.7692%" y="533" width="0.0801%" height="15" fill="rgb(231,177,25)" fg:x="72" fg:w="1"/><text x="6.0192%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.8494%" y="581" width="0.0801%" height="15" fill="rgb(219,179,1)" fg:x="73" fg:w="1"/><text x="6.0994%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.8494%" y="565" width="0.0801%" height="15" fill="rgb(238,219,53)" fg:x="73" fg:w="1"/><text x="6.0994%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.8494%" y="549" width="0.0801%" height="15" fill="rgb(232,167,36)" fg:x="73" fg:w="1"/><text x="6.0994%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8494%" y="533" width="0.0801%" height="15" fill="rgb(244,19,51)" fg:x="73" fg:w="1"/><text x="6.0994%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8494%" y="517" width="0.0801%" height="15" fill="rgb(224,6,22)" fg:x="73" fg:w="1"/><text x="6.0994%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8494%" y="501" width="0.0801%" height="15" fill="rgb(224,145,5)" fg:x="73" fg:w="1"/><text x="6.0994%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8494%" y="485" width="0.0801%" height="15" fill="rgb(234,130,49)" fg:x="73" fg:w="1"/><text x="6.0994%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.9295%" y="405" width="0.0801%" height="15" fill="rgb(254,6,2)" fg:x="74" fg:w="1"/><text x="6.1795%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.9295%" y="389" width="0.0801%" height="15" fill="rgb(208,96,46)" fg:x="74" fg:w="1"/><text x="6.1795%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="5.9295%" y="533" width="0.1603%" height="15" fill="rgb(239,3,39)" fg:x="74" fg:w="2"/><text x="6.1795%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="5.9295%" y="517" width="0.1603%" height="15" fill="rgb(233,210,1)" fg:x="74" fg:w="2"/><text x="6.1795%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="5.9295%" y="501" width="0.1603%" height="15" fill="rgb(244,137,37)" fg:x="74" fg:w="2"/><text x="6.1795%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="5.9295%" y="485" width="0.1603%" height="15" fill="rgb(240,136,2)" fg:x="74" fg:w="2"/><text x="6.1795%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="5.9295%" y="469" width="0.1603%" height="15" fill="rgb(239,18,37)" fg:x="74" fg:w="2"/><text x="6.1795%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="5.9295%" y="453" width="0.1603%" height="15" fill="rgb(218,185,22)" fg:x="74" fg:w="2"/><text x="6.1795%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="5.9295%" y="437" width="0.1603%" height="15" fill="rgb(225,218,4)" fg:x="74" fg:w="2"/><text x="6.1795%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="5.9295%" y="421" width="0.1603%" height="15" fill="rgb(230,182,32)" fg:x="74" fg:w="2"/><text x="6.1795%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.0096%" y="405" width="0.0801%" height="15" fill="rgb(242,56,43)" fg:x="75" fg:w="1"/><text x="6.2596%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.0096%" y="389" width="0.0801%" height="15" fill="rgb(233,99,24)" fg:x="75" fg:w="1"/><text x="6.2596%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="5.9295%" y="549" width="0.2404%" height="15" fill="rgb(234,209,42)" fg:x="74" fg:w="3"/><text x="6.1795%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.0897%" y="533" width="0.0801%" height="15" fill="rgb(227,7,12)" fg:x="76" fg:w="1"/><text x="6.3397%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="5.8494%" y="597" width="0.4006%" height="15" fill="rgb(245,203,43)" fg:x="73" fg:w="5"/><text x="6.0994%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="5.9295%" y="581" width="0.3205%" height="15" fill="rgb(238,205,33)" fg:x="74" fg:w="4"/><text x="6.1795%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="5.9295%" y="565" width="0.3205%" height="15" fill="rgb(231,56,7)" fg:x="74" fg:w="4"/><text x="6.1795%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="6.1699%" y="549" width="0.0801%" height="15" fill="rgb(244,186,29)" fg:x="77" fg:w="1"/><text x="6.4199%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.1699%" y="533" width="0.0801%" height="15" fill="rgb(234,111,31)" fg:x="77" fg:w="1"/><text x="6.4199%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.1699%" y="517" width="0.0801%" height="15" fill="rgb(241,149,10)" fg:x="77" fg:w="1"/><text x="6.4199%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.1699%" y="501" width="0.0801%" height="15" fill="rgb(249,206,44)" fg:x="77" fg:w="1"/><text x="6.4199%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.1699%" y="485" width="0.0801%" height="15" fill="rgb(251,153,30)" fg:x="77" fg:w="1"/><text x="6.4199%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.1699%" y="469" width="0.0801%" height="15" fill="rgb(239,152,38)" fg:x="77" fg:w="1"/><text x="6.4199%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.1699%" y="453" width="0.0801%" height="15" fill="rgb(249,139,47)" fg:x="77" fg:w="1"/><text x="6.4199%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.1699%" y="437" width="0.0801%" height="15" fill="rgb(244,64,35)" fg:x="77" fg:w="1"/><text x="6.4199%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.1699%" y="421" width="0.0801%" height="15" fill="rgb(216,46,15)" fg:x="77" fg:w="1"/><text x="6.4199%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.1699%" y="405" width="0.0801%" height="15" fill="rgb(250,74,19)" fg:x="77" fg:w="1"/><text x="6.4199%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.1699%" y="389" width="0.0801%" height="15" fill="rgb(249,42,33)" fg:x="77" fg:w="1"/><text x="6.4199%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.1699%" y="373" width="0.0801%" height="15" fill="rgb(242,149,17)" fg:x="77" fg:w="1"/><text x="6.4199%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.1699%" y="357" width="0.0801%" height="15" fill="rgb(244,29,21)" fg:x="77" fg:w="1"/><text x="6.4199%" y="367.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.2500%" y="581" width="0.0801%" height="15" fill="rgb(220,130,37)" fg:x="78" fg:w="1"/><text x="6.5000%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.2500%" y="565" width="0.0801%" height="15" fill="rgb(211,67,2)" fg:x="78" fg:w="1"/><text x="6.5000%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.2500%" y="549" width="0.0801%" height="15" fill="rgb(235,68,52)" fg:x="78" fg:w="1"/><text x="6.5000%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.2500%" y="533" width="0.0801%" height="15" fill="rgb(246,142,3)" fg:x="78" fg:w="1"/><text x="6.5000%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.2500%" y="517" width="0.0801%" height="15" fill="rgb(241,25,7)" fg:x="78" fg:w="1"/><text x="6.5000%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.2500%" y="501" width="0.0801%" height="15" fill="rgb(242,119,39)" fg:x="78" fg:w="1"/><text x="6.5000%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2500%" y="485" width="0.0801%" height="15" fill="rgb(241,98,45)" fg:x="78" fg:w="1"/><text x="6.5000%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.2500%" y="469" width="0.0801%" height="15" fill="rgb(254,28,30)" fg:x="78" fg:w="1"/><text x="6.5000%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2500%" y="453" width="0.0801%" height="15" fill="rgb(241,142,54)" fg:x="78" fg:w="1"/><text x="6.5000%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.2500%" y="437" width="0.0801%" height="15" fill="rgb(222,85,15)" fg:x="78" fg:w="1"/><text x="6.5000%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2500%" y="421" width="0.0801%" height="15" fill="rgb(210,85,47)" fg:x="78" fg:w="1"/><text x="6.5000%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.2500%" y="405" width="0.0801%" height="15" fill="rgb(224,206,25)" fg:x="78" fg:w="1"/><text x="6.5000%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2500%" y="389" width="0.0801%" height="15" fill="rgb(243,201,19)" fg:x="78" fg:w="1"/><text x="6.5000%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.2500%" y="373" width="0.0801%" height="15" fill="rgb(236,59,4)" fg:x="78" fg:w="1"/><text x="6.5000%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2500%" y="357" width="0.0801%" height="15" fill="rgb(254,179,45)" fg:x="78" fg:w="1"/><text x="6.5000%" y="367.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="6.3301%" y="581" width="0.1603%" height="15" fill="rgb(226,14,10)" fg:x="79" fg:w="2"/><text x="6.5801%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="6.3301%" y="565" width="0.1603%" height="15" fill="rgb(244,27,41)" fg:x="79" fg:w="2"/><text x="6.5801%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="6.3301%" y="549" width="0.1603%" height="15" fill="rgb(235,35,32)" fg:x="79" fg:w="2"/><text x="6.5801%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.4103%" y="533" width="0.0801%" height="15" fill="rgb(218,68,31)" fg:x="80" fg:w="1"/><text x="6.6603%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4103%" y="517" width="0.0801%" height="15" fill="rgb(207,120,37)" fg:x="80" fg:w="1"/><text x="6.6603%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.4103%" y="501" width="0.0801%" height="15" fill="rgb(227,98,0)" fg:x="80" fg:w="1"/><text x="6.6603%" y="511.50"></text></g><g><title>plugins_core::build::Build::holding (9 samples, 0.72%)</title><rect x="5.8494%" y="613" width="0.7212%" height="15" fill="rgb(207,7,3)" fg:x="73" fg:w="9"/><text x="6.0994%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="6.2500%" y="597" width="0.3205%" height="15" fill="rgb(206,98,19)" fg:x="78" fg:w="4"/><text x="6.5000%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="6.4904%" y="581" width="0.0801%" height="15" fill="rgb(217,5,26)" fg:x="81" fg:w="1"/><text x="6.7404%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.4904%" y="565" width="0.0801%" height="15" fill="rgb(235,190,38)" fg:x="81" fg:w="1"/><text x="6.7404%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.4904%" y="549" width="0.0801%" height="15" fill="rgb(247,86,24)" fg:x="81" fg:w="1"/><text x="6.7404%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.4904%" y="533" width="0.0801%" height="15" fill="rgb(205,101,16)" fg:x="81" fg:w="1"/><text x="6.7404%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.4904%" y="517" width="0.0801%" height="15" fill="rgb(246,168,33)" fg:x="81" fg:w="1"/><text x="6.7404%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.4904%" y="501" width="0.0801%" height="15" fill="rgb(231,114,1)" fg:x="81" fg:w="1"/><text x="6.7404%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.4904%" y="485" width="0.0801%" height="15" fill="rgb(207,184,53)" fg:x="81" fg:w="1"/><text x="6.7404%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.4904%" y="469" width="0.0801%" height="15" fill="rgb(224,95,51)" fg:x="81" fg:w="1"/><text x="6.7404%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.4904%" y="453" width="0.0801%" height="15" fill="rgb(212,188,45)" fg:x="81" fg:w="1"/><text x="6.7404%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.4904%" y="437" width="0.0801%" height="15" fill="rgb(223,154,38)" fg:x="81" fg:w="1"/><text x="6.7404%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.4904%" y="421" width="0.0801%" height="15" fill="rgb(251,22,52)" fg:x="81" fg:w="1"/><text x="6.7404%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.4904%" y="405" width="0.0801%" height="15" fill="rgb(229,209,22)" fg:x="81" fg:w="1"/><text x="6.7404%" y="415.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="6.5705%" y="613" width="0.0801%" height="15" fill="rgb(234,138,34)" fg:x="82" fg:w="1"/><text x="6.8205%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.5705%" y="597" width="0.0801%" height="15" fill="rgb(212,95,11)" fg:x="82" fg:w="1"/><text x="6.8205%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.5705%" y="581" width="0.0801%" height="15" fill="rgb(240,179,47)" fg:x="82" fg:w="1"/><text x="6.8205%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.5705%" y="565" width="0.0801%" height="15" fill="rgb(240,163,11)" fg:x="82" fg:w="1"/><text x="6.8205%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.5705%" y="549" width="0.0801%" height="15" fill="rgb(236,37,12)" fg:x="82" fg:w="1"/><text x="6.8205%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.5705%" y="533" width="0.0801%" height="15" fill="rgb(232,164,16)" fg:x="82" fg:w="1"/><text x="6.8205%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.5705%" y="517" width="0.0801%" height="15" fill="rgb(244,205,15)" fg:x="82" fg:w="1"/><text x="6.8205%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.5705%" y="501" width="0.0801%" height="15" fill="rgb(223,117,47)" fg:x="82" fg:w="1"/><text x="6.8205%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.5705%" y="485" width="0.0801%" height="15" fill="rgb(244,107,35)" fg:x="82" fg:w="1"/><text x="6.8205%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.5705%" y="469" width="0.0801%" height="15" fill="rgb(205,140,8)" fg:x="82" fg:w="1"/><text x="6.8205%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.5705%" y="453" width="0.0801%" height="15" fill="rgb(228,84,46)" fg:x="82" fg:w="1"/><text x="6.8205%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5705%" y="437" width="0.0801%" height="15" fill="rgb(254,188,9)" fg:x="82" fg:w="1"/><text x="6.8205%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.6506%" y="581" width="0.0801%" height="15" fill="rgb(206,112,54)" fg:x="83" fg:w="1"/><text x="6.9006%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.6506%" y="565" width="0.0801%" height="15" fill="rgb(216,84,49)" fg:x="83" fg:w="1"/><text x="6.9006%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.6506%" y="549" width="0.0801%" height="15" fill="rgb(214,194,35)" fg:x="83" fg:w="1"/><text x="6.9006%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.6506%" y="533" width="0.0801%" height="15" fill="rgb(249,28,3)" fg:x="83" fg:w="1"/><text x="6.9006%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6506%" y="517" width="0.0801%" height="15" fill="rgb(222,56,52)" fg:x="83" fg:w="1"/><text x="6.9006%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.6506%" y="501" width="0.0801%" height="15" fill="rgb(245,217,50)" fg:x="83" fg:w="1"/><text x="6.9006%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6506%" y="485" width="0.0801%" height="15" fill="rgb(213,201,24)" fg:x="83" fg:w="1"/><text x="6.9006%" y="495.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.8109%" y="533" width="0.0801%" height="15" fill="rgb(248,116,28)" fg:x="85" fg:w="1"/><text x="7.0609%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.8109%" y="517" width="0.0801%" height="15" fill="rgb(219,72,43)" fg:x="85" fg:w="1"/><text x="7.0609%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.8109%" y="501" width="0.0801%" height="15" fill="rgb(209,138,14)" fg:x="85" fg:w="1"/><text x="7.0609%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.8109%" y="485" width="0.0801%" height="15" fill="rgb(222,18,33)" fg:x="85" fg:w="1"/><text x="7.0609%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.8910%" y="501" width="0.0801%" height="15" fill="rgb(213,199,7)" fg:x="86" fg:w="1"/><text x="7.1410%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.8910%" y="485" width="0.0801%" height="15" fill="rgb(250,110,10)" fg:x="86" fg:w="1"/><text x="7.1410%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8910%" y="469" width="0.0801%" height="15" fill="rgb(248,123,6)" fg:x="86" fg:w="1"/><text x="7.1410%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="6.6506%" y="597" width="0.4006%" height="15" fill="rgb(206,91,31)" fg:x="83" fg:w="5"/><text x="6.9006%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="6.7308%" y="581" width="0.3205%" height="15" fill="rgb(211,154,13)" fg:x="84" fg:w="4"/><text x="6.9808%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="6.7308%" y="565" width="0.3205%" height="15" fill="rgb(225,148,7)" fg:x="84" fg:w="4"/><text x="6.9808%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="6.8109%" y="549" width="0.2404%" height="15" fill="rgb(220,160,43)" fg:x="85" fg:w="3"/><text x="7.0609%" y="559.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="6.8910%" y="533" width="0.1603%" height="15" fill="rgb(213,52,39)" fg:x="86" fg:w="2"/><text x="7.1410%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="6.8910%" y="517" width="0.1603%" height="15" fill="rgb(243,137,7)" fg:x="86" fg:w="2"/><text x="7.1410%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="6.9712%" y="501" width="0.0801%" height="15" fill="rgb(230,79,13)" fg:x="87" fg:w="1"/><text x="7.2212%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.9712%" y="485" width="0.0801%" height="15" fill="rgb(247,105,23)" fg:x="87" fg:w="1"/><text x="7.2212%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="6.9712%" y="469" width="0.0801%" height="15" fill="rgb(223,179,41)" fg:x="87" fg:w="1"/><text x="7.2212%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.9712%" y="453" width="0.0801%" height="15" fill="rgb(218,9,34)" fg:x="87" fg:w="1"/><text x="7.2212%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.9712%" y="437" width="0.0801%" height="15" fill="rgb(222,106,8)" fg:x="87" fg:w="1"/><text x="7.2212%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.9712%" y="421" width="0.0801%" height="15" fill="rgb(211,220,0)" fg:x="87" fg:w="1"/><text x="7.2212%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9712%" y="405" width="0.0801%" height="15" fill="rgb(229,52,16)" fg:x="87" fg:w="1"/><text x="7.2212%" y="415.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (39 samples, 3.12%)</title><rect x="4.0064%" y="629" width="3.1250%" height="15" fill="rgb(212,155,18)" fg:x="50" fg:w="39"/><text x="4.2564%" y="639.50">plu..</text></g><g><title>plugins_core::build::Build::occupying (6 samples, 0.48%)</title><rect x="6.6506%" y="613" width="0.4808%" height="15" fill="rgb(242,21,14)" fg:x="83" fg:w="6"/><text x="6.9006%" y="623.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="7.0513%" y="597" width="0.0801%" height="15" fill="rgb(222,19,48)" fg:x="88" fg:w="1"/><text x="7.3013%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="7.0513%" y="581" width="0.0801%" height="15" fill="rgb(232,45,27)" fg:x="88" fg:w="1"/><text x="7.3013%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="7.0513%" y="565" width="0.0801%" height="15" fill="rgb(249,103,42)" fg:x="88" fg:w="1"/><text x="7.3013%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.0513%" y="549" width="0.0801%" height="15" fill="rgb(246,81,33)" fg:x="88" fg:w="1"/><text x="7.3013%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.0513%" y="533" width="0.0801%" height="15" fill="rgb(252,33,42)" fg:x="88" fg:w="1"/><text x="7.3013%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.0513%" y="517" width="0.0801%" height="15" fill="rgb(209,212,41)" fg:x="88" fg:w="1"/><text x="7.3013%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0513%" y="501" width="0.0801%" height="15" fill="rgb(207,154,6)" fg:x="88" fg:w="1"/><text x="7.3013%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0513%" y="485" width="0.0801%" height="15" fill="rgb(223,64,47)" fg:x="88" fg:w="1"/><text x="7.3013%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0513%" y="469" width="0.0801%" height="15" fill="rgb(211,161,38)" fg:x="88" fg:w="1"/><text x="7.3013%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0513%" y="453" width="0.0801%" height="15" fill="rgb(219,138,40)" fg:x="88" fg:w="1"/><text x="7.3013%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.0513%" y="437" width="0.0801%" height="15" fill="rgb(241,228,46)" fg:x="88" fg:w="1"/><text x="7.3013%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.0513%" y="421" width="0.0801%" height="15" fill="rgb(223,209,38)" fg:x="88" fg:w="1"/><text x="7.3013%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.0513%" y="405" width="0.0801%" height="15" fill="rgb(236,164,45)" fg:x="88" fg:w="1"/><text x="7.3013%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.0513%" y="389" width="0.0801%" height="15" fill="rgb(231,15,5)" fg:x="88" fg:w="1"/><text x="7.3013%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.0513%" y="373" width="0.0801%" height="15" fill="rgb(252,35,15)" fg:x="88" fg:w="1"/><text x="7.3013%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.0513%" y="357" width="0.0801%" height="15" fill="rgb(248,181,18)" fg:x="88" fg:w="1"/><text x="7.3013%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.0513%" y="341" width="0.0801%" height="15" fill="rgb(233,39,42)" fg:x="88" fg:w="1"/><text x="7.3013%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.0513%" y="325" width="0.0801%" height="15" fill="rgb(238,110,33)" fg:x="88" fg:w="1"/><text x="7.3013%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.0513%" y="309" width="0.0801%" height="15" fill="rgb(233,195,10)" fg:x="88" fg:w="1"/><text x="7.3013%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.0513%" y="293" width="0.0801%" height="15" fill="rgb(254,105,3)" fg:x="88" fg:w="1"/><text x="7.3013%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.0513%" y="277" width="0.0801%" height="15" fill="rgb(221,225,9)" fg:x="88" fg:w="1"/><text x="7.3013%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.0513%" y="261" width="0.0801%" height="15" fill="rgb(224,227,45)" fg:x="88" fg:w="1"/><text x="7.3013%" y="271.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="7.2115%" y="581" width="0.0801%" height="15" fill="rgb(229,198,43)" fg:x="90" fg:w="1"/><text x="7.4615%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="7.2115%" y="565" width="0.0801%" height="15" fill="rgb(206,209,35)" fg:x="90" fg:w="1"/><text x="7.4615%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.2115%" y="549" width="0.0801%" height="15" fill="rgb(245,195,53)" fg:x="90" fg:w="1"/><text x="7.4615%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="7.1314%" y="629" width="0.2404%" height="15" fill="rgb(240,92,26)" fg:x="89" fg:w="3"/><text x="7.3814%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="7.1314%" y="613" width="0.2404%" height="15" fill="rgb(207,40,23)" fg:x="89" fg:w="3"/><text x="7.3814%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="7.2115%" y="597" width="0.1603%" height="15" fill="rgb(223,111,35)" fg:x="90" fg:w="2"/><text x="7.4615%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="7.2917%" y="581" width="0.0801%" height="15" fill="rgb(229,147,28)" fg:x="91" fg:w="1"/><text x="7.5417%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.2917%" y="565" width="0.0801%" height="15" fill="rgb(211,29,28)" fg:x="91" fg:w="1"/><text x="7.5417%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.2917%" y="549" width="0.0801%" height="15" fill="rgb(228,72,33)" fg:x="91" fg:w="1"/><text x="7.5417%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.2917%" y="533" width="0.0801%" height="15" fill="rgb(205,214,31)" fg:x="91" fg:w="1"/><text x="7.5417%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.2917%" y="517" width="0.0801%" height="15" fill="rgb(224,111,15)" fg:x="91" fg:w="1"/><text x="7.5417%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="7.3718%" y="613" width="0.1603%" height="15" fill="rgb(253,21,26)" fg:x="92" fg:w="2"/><text x="7.6218%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="7.4519%" y="597" width="0.0801%" height="15" fill="rgb(245,139,43)" fg:x="93" fg:w="1"/><text x="7.7019%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.4519%" y="581" width="0.0801%" height="15" fill="rgb(252,170,7)" fg:x="93" fg:w="1"/><text x="7.7019%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.4519%" y="565" width="0.0801%" height="15" fill="rgb(231,118,14)" fg:x="93" fg:w="1"/><text x="7.7019%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.4519%" y="549" width="0.0801%" height="15" fill="rgb(238,83,0)" fg:x="93" fg:w="1"/><text x="7.7019%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.4519%" y="533" width="0.0801%" height="15" fill="rgb(221,39,39)" fg:x="93" fg:w="1"/><text x="7.7019%" y="543.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (72 samples, 5.77%)</title><rect x="1.8429%" y="645" width="5.7692%" height="15" fill="rgb(222,119,46)" fg:x="23" fg:w="72"/><text x="2.0929%" y="655.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="7.3718%" y="629" width="0.2404%" height="15" fill="rgb(222,165,49)" fg:x="92" fg:w="3"/><text x="7.6218%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="7.5321%" y="613" width="0.0801%" height="15" fill="rgb(219,113,52)" fg:x="94" fg:w="1"/><text x="7.7821%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="7.5321%" y="597" width="0.0801%" height="15" fill="rgb(214,7,15)" fg:x="94" fg:w="1"/><text x="7.7821%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="7.5321%" y="581" width="0.0801%" height="15" fill="rgb(235,32,4)" fg:x="94" fg:w="1"/><text x="7.7821%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.5321%" y="565" width="0.0801%" height="15" fill="rgb(238,90,54)" fg:x="94" fg:w="1"/><text x="7.7821%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="7.6122%" y="645" width="0.0801%" height="15" fill="rgb(213,208,19)" fg:x="95" fg:w="1"/><text x="7.8622%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="7.7724%" y="629" width="0.0801%" height="15" fill="rgb(233,156,4)" fg:x="97" fg:w="1"/><text x="8.0224%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="7.7724%" y="613" width="0.0801%" height="15" fill="rgb(207,194,5)" fg:x="97" fg:w="1"/><text x="8.0224%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.7724%" y="597" width="0.0801%" height="15" fill="rgb(206,111,30)" fg:x="97" fg:w="1"/><text x="8.0224%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.7724%" y="581" width="0.0801%" height="15" fill="rgb(243,70,54)" fg:x="97" fg:w="1"/><text x="8.0224%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="7.7724%" y="565" width="0.0801%" height="15" fill="rgb(242,28,8)" fg:x="97" fg:w="1"/><text x="8.0224%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="7.7724%" y="549" width="0.0801%" height="15" fill="rgb(219,106,18)" fg:x="97" fg:w="1"/><text x="8.0224%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="7.7724%" y="533" width="0.0801%" height="15" fill="rgb(244,222,10)" fg:x="97" fg:w="1"/><text x="8.0224%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.7724%" y="517" width="0.0801%" height="15" fill="rgb(236,179,52)" fg:x="97" fg:w="1"/><text x="8.0224%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.7724%" y="501" width="0.0801%" height="15" fill="rgb(213,23,39)" fg:x="97" fg:w="1"/><text x="8.0224%" y="511.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="7.7724%" y="485" width="0.0801%" height="15" fill="rgb(238,48,10)" fg:x="97" fg:w="1"/><text x="8.0224%" y="495.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="7.7724%" y="469" width="0.0801%" height="15" fill="rgb(251,196,23)" fg:x="97" fg:w="1"/><text x="8.0224%" y="479.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="7.8526%" y="629" width="0.0801%" height="15" fill="rgb(250,152,24)" fg:x="98" fg:w="1"/><text x="8.1026%" y="639.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="7.8526%" y="613" width="0.0801%" height="15" fill="rgb(209,150,17)" fg:x="98" fg:w="1"/><text x="8.1026%" y="623.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="7.8526%" y="597" width="0.0801%" height="15" fill="rgb(234,202,34)" fg:x="98" fg:w="1"/><text x="8.1026%" y="607.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="7.8526%" y="581" width="0.0801%" height="15" fill="rgb(253,148,53)" fg:x="98" fg:w="1"/><text x="8.1026%" y="591.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="7.8526%" y="565" width="0.0801%" height="15" fill="rgb(218,129,16)" fg:x="98" fg:w="1"/><text x="8.1026%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="7.8526%" y="549" width="0.0801%" height="15" fill="rgb(216,85,19)" fg:x="98" fg:w="1"/><text x="8.1026%" y="559.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="7.8526%" y="533" width="0.0801%" height="15" fill="rgb(235,228,7)" fg:x="98" fg:w="1"/><text x="8.1026%" y="543.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="7.8526%" y="517" width="0.0801%" height="15" fill="rgb(245,175,0)" fg:x="98" fg:w="1"/><text x="8.1026%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.9327%" y="565" width="0.0801%" height="15" fill="rgb(208,168,36)" fg:x="99" fg:w="1"/><text x="8.1827%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.9327%" y="549" width="0.0801%" height="15" fill="rgb(246,171,24)" fg:x="99" fg:w="1"/><text x="8.1827%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.9327%" y="533" width="0.0801%" height="15" fill="rgb(215,142,24)" fg:x="99" fg:w="1"/><text x="8.1827%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.9327%" y="517" width="0.0801%" height="15" fill="rgb(250,187,7)" fg:x="99" fg:w="1"/><text x="8.1827%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.9327%" y="501" width="0.0801%" height="15" fill="rgb(228,66,33)" fg:x="99" fg:w="1"/><text x="8.1827%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="7.9327%" y="485" width="0.0801%" height="15" fill="rgb(234,215,21)" fg:x="99" fg:w="1"/><text x="8.1827%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="7.9327%" y="469" width="0.0801%" height="15" fill="rgb(222,191,20)" fg:x="99" fg:w="1"/><text x="8.1827%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.0128%" y="485" width="0.0801%" height="15" fill="rgb(245,79,54)" fg:x="100" fg:w="1"/><text x="8.2628%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0128%" y="469" width="0.0801%" height="15" fill="rgb(240,10,37)" fg:x="100" fg:w="1"/><text x="8.2628%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.0128%" y="453" width="0.0801%" height="15" fill="rgb(214,192,32)" fg:x="100" fg:w="1"/><text x="8.2628%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.0128%" y="437" width="0.0801%" height="15" fill="rgb(209,36,54)" fg:x="100" fg:w="1"/><text x="8.2628%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0929%" y="469" width="0.0801%" height="15" fill="rgb(220,10,11)" fg:x="101" fg:w="1"/><text x="8.3429%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.0929%" y="453" width="0.0801%" height="15" fill="rgb(221,106,17)" fg:x="101" fg:w="1"/><text x="8.3429%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0929%" y="437" width="0.0801%" height="15" fill="rgb(251,142,44)" fg:x="101" fg:w="1"/><text x="8.3429%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.0929%" y="421" width="0.0801%" height="15" fill="rgb(238,13,15)" fg:x="101" fg:w="1"/><text x="8.3429%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="8.0128%" y="565" width="0.2404%" height="15" fill="rgb(208,107,27)" fg:x="100" fg:w="3"/><text x="8.2628%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.0128%" y="549" width="0.2404%" height="15" fill="rgb(205,136,37)" fg:x="100" fg:w="3"/><text x="8.2628%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.0128%" y="533" width="0.2404%" height="15" fill="rgb(250,205,27)" fg:x="100" fg:w="3"/><text x="8.2628%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.0128%" y="517" width="0.2404%" height="15" fill="rgb(210,80,43)" fg:x="100" fg:w="3"/><text x="8.2628%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.0128%" y="501" width="0.2404%" height="15" fill="rgb(247,160,36)" fg:x="100" fg:w="3"/><text x="8.2628%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.0929%" y="485" width="0.1603%" height="15" fill="rgb(234,13,49)" fg:x="101" fg:w="2"/><text x="8.3429%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1731%" y="469" width="0.0801%" height="15" fill="rgb(234,122,0)" fg:x="102" fg:w="1"/><text x="8.4231%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="8.3333%" y="533" width="0.1603%" height="15" fill="rgb(207,146,38)" fg:x="104" fg:w="2"/><text x="8.5833%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.4135%" y="517" width="0.0801%" height="15" fill="rgb(207,177,25)" fg:x="105" fg:w="1"/><text x="8.6635%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.2532%" y="565" width="0.3205%" height="15" fill="rgb(211,178,42)" fg:x="103" fg:w="4"/><text x="8.5032%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="8.2532%" y="549" width="0.3205%" height="15" fill="rgb(230,69,54)" fg:x="103" fg:w="4"/><text x="8.5032%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.4936%" y="533" width="0.0801%" height="15" fill="rgb(214,135,41)" fg:x="106" fg:w="1"/><text x="8.7436%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5737%" y="485" width="0.0801%" height="15" fill="rgb(237,67,25)" fg:x="107" fg:w="1"/><text x="8.8237%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.6538%" y="453" width="0.0801%" height="15" fill="rgb(222,189,50)" fg:x="108" fg:w="1"/><text x="8.9038%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.7340%" y="405" width="0.0801%" height="15" fill="rgb(245,148,34)" fg:x="109" fg:w="1"/><text x="8.9840%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.7340%" y="389" width="0.0801%" height="15" fill="rgb(222,29,6)" fg:x="109" fg:w="1"/><text x="8.9840%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.5737%" y="533" width="0.3205%" height="15" fill="rgb(221,189,43)" fg:x="107" fg:w="4"/><text x="8.8237%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="8.5737%" y="517" width="0.3205%" height="15" fill="rgb(207,36,27)" fg:x="107" fg:w="4"/><text x="8.8237%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.5737%" y="501" width="0.3205%" height="15" fill="rgb(217,90,24)" fg:x="107" fg:w="4"/><text x="8.8237%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.6538%" y="485" width="0.2404%" height="15" fill="rgb(224,66,35)" fg:x="108" fg:w="3"/><text x="8.9038%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.6538%" y="469" width="0.2404%" height="15" fill="rgb(221,13,50)" fg:x="108" fg:w="3"/><text x="8.9038%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.7340%" y="453" width="0.1603%" height="15" fill="rgb(236,68,49)" fg:x="109" fg:w="2"/><text x="8.9840%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.7340%" y="437" width="0.1603%" height="15" fill="rgb(229,146,28)" fg:x="109" fg:w="2"/><text x="8.9840%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.7340%" y="421" width="0.1603%" height="15" fill="rgb(225,31,38)" fg:x="109" fg:w="2"/><text x="8.9840%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.8141%" y="405" width="0.0801%" height="15" fill="rgb(250,208,3)" fg:x="110" fg:w="1"/><text x="9.0641%" y="415.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.48%)</title><rect x="8.5737%" y="549" width="0.4808%" height="15" fill="rgb(246,54,23)" fg:x="107" fg:w="6"/><text x="8.8237%" y="559.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="8.8942%" y="533" width="0.1603%" height="15" fill="rgb(243,76,11)" fg:x="111" fg:w="2"/><text x="9.1442%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="8.8942%" y="517" width="0.1603%" height="15" fill="rgb(245,21,50)" fg:x="111" fg:w="2"/><text x="9.1442%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="8.8942%" y="501" width="0.1603%" height="15" fill="rgb(228,9,43)" fg:x="111" fg:w="2"/><text x="9.1442%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.9744%" y="485" width="0.0801%" height="15" fill="rgb(208,100,47)" fg:x="112" fg:w="1"/><text x="9.2244%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.0545%" y="517" width="0.0801%" height="15" fill="rgb(232,26,8)" fg:x="113" fg:w="1"/><text x="9.3045%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.0545%" y="501" width="0.0801%" height="15" fill="rgb(216,166,38)" fg:x="113" fg:w="1"/><text x="9.3045%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.0545%" y="485" width="0.0801%" height="15" fill="rgb(251,202,51)" fg:x="113" fg:w="1"/><text x="9.3045%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1346%" y="517" width="0.0801%" height="15" fill="rgb(254,216,34)" fg:x="114" fg:w="1"/><text x="9.3846%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.1346%" y="501" width="0.0801%" height="15" fill="rgb(251,32,27)" fg:x="114" fg:w="1"/><text x="9.3846%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.2147%" y="485" width="0.0801%" height="15" fill="rgb(208,127,28)" fg:x="115" fg:w="1"/><text x="9.4647%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="9.3750%" y="453" width="0.0801%" height="15" fill="rgb(224,137,22)" fg:x="117" fg:w="1"/><text x="9.6250%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="9.2949%" y="469" width="0.2404%" height="15" fill="rgb(254,70,32)" fg:x="116" fg:w="3"/><text x="9.5449%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4551%" y="453" width="0.0801%" height="15" fill="rgb(229,75,37)" fg:x="118" fg:w="1"/><text x="9.7051%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.5353%" y="437" width="0.1603%" height="15" fill="rgb(252,64,23)" fg:x="119" fg:w="2"/><text x="9.7853%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.5353%" y="421" width="0.1603%" height="15" fill="rgb(232,162,48)" fg:x="119" fg:w="2"/><text x="9.7853%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="9.5353%" y="405" width="0.1603%" height="15" fill="rgb(246,160,12)" fg:x="119" fg:w="2"/><text x="9.7853%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="9.2949%" y="485" width="0.4808%" height="15" fill="rgb(247,166,0)" fg:x="116" fg:w="6"/><text x="9.5449%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="9.5353%" y="469" width="0.2404%" height="15" fill="rgb(249,219,21)" fg:x="119" fg:w="3"/><text x="9.7853%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="9.5353%" y="453" width="0.2404%" height="15" fill="rgb(205,209,3)" fg:x="119" fg:w="3"/><text x="9.7853%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.6955%" y="437" width="0.0801%" height="15" fill="rgb(243,44,1)" fg:x="121" fg:w="1"/><text x="9.9455%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6955%" y="421" width="0.0801%" height="15" fill="rgb(206,159,16)" fg:x="121" fg:w="1"/><text x="9.9455%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="9.2147%" y="501" width="0.6410%" height="15" fill="rgb(244,77,30)" fg:x="115" fg:w="8"/><text x="9.4647%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.7756%" y="485" width="0.0801%" height="15" fill="rgb(218,69,12)" fg:x="122" fg:w="1"/><text x="10.0256%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.88%)</title><rect x="9.0545%" y="549" width="0.8814%" height="15" fill="rgb(212,87,7)" fg:x="113" fg:w="11"/><text x="9.3045%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.88%)</title><rect x="9.0545%" y="533" width="0.8814%" height="15" fill="rgb(245,114,25)" fg:x="113" fg:w="11"/><text x="9.3045%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="9.2147%" y="517" width="0.7212%" height="15" fill="rgb(210,61,42)" fg:x="115" fg:w="9"/><text x="9.4647%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8558%" y="501" width="0.0801%" height="15" fill="rgb(211,52,33)" fg:x="123" fg:w="1"/><text x="10.1058%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.0160%" y="405" width="0.0801%" height="15" fill="rgb(234,58,33)" fg:x="125" fg:w="1"/><text x="10.2660%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.0160%" y="389" width="0.0801%" height="15" fill="rgb(220,115,36)" fg:x="125" fg:w="1"/><text x="10.2660%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.0160%" y="373" width="0.0801%" height="15" fill="rgb(243,153,54)" fg:x="125" fg:w="1"/><text x="10.2660%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0160%" y="357" width="0.0801%" height="15" fill="rgb(251,47,18)" fg:x="125" fg:w="1"/><text x="10.2660%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.0962%" y="325" width="0.0801%" height="15" fill="rgb(242,102,42)" fg:x="126" fg:w="1"/><text x="10.3462%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.0962%" y="309" width="0.0801%" height="15" fill="rgb(234,31,38)" fg:x="126" fg:w="1"/><text x="10.3462%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="10.0962%" y="389" width="0.1603%" height="15" fill="rgb(221,117,51)" fg:x="126" fg:w="2"/><text x="10.3462%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="10.0962%" y="373" width="0.1603%" height="15" fill="rgb(212,20,18)" fg:x="126" fg:w="2"/><text x="10.3462%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="10.0962%" y="357" width="0.1603%" height="15" fill="rgb(245,133,36)" fg:x="126" fg:w="2"/><text x="10.3462%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="10.0962%" y="341" width="0.1603%" height="15" fill="rgb(212,6,19)" fg:x="126" fg:w="2"/><text x="10.3462%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1763%" y="325" width="0.0801%" height="15" fill="rgb(218,1,36)" fg:x="127" fg:w="1"/><text x="10.4263%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1763%" y="309" width="0.0801%" height="15" fill="rgb(246,84,54)" fg:x="127" fg:w="1"/><text x="10.4263%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1763%" y="293" width="0.0801%" height="15" fill="rgb(242,110,6)" fg:x="127" fg:w="1"/><text x="10.4263%" y="303.50"></text></g><g><title>engine::session::state::State::close (30 samples, 2.40%)</title><rect x="7.9327%" y="629" width="2.4038%" height="15" fill="rgb(214,47,5)" fg:x="99" fg:w="30"/><text x="8.1827%" y="639.50">en..</text></g><g><title>engine::session::state::State::flush_entities (30 samples, 2.40%)</title><rect x="7.9327%" y="613" width="2.4038%" height="15" fill="rgb(218,159,25)" fg:x="99" fg:w="30"/><text x="8.1827%" y="623.50">en..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (30 samples, 2.40%)</title><rect x="7.9327%" y="597" width="2.4038%" height="15" fill="rgb(215,211,28)" fg:x="99" fg:w="30"/><text x="8.1827%" y="607.50">en..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (30 samples, 2.40%)</title><rect x="7.9327%" y="581" width="2.4038%" height="15" fill="rgb(238,59,32)" fg:x="99" fg:w="30"/><text x="8.1827%" y="591.50">en..</text></g><g><title>kernel::model::any_entity_changes (22 samples, 1.76%)</title><rect x="8.5737%" y="565" width="1.7628%" height="15" fill="rgb(226,82,3)" fg:x="107" fg:w="22"/><text x="8.8237%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="9.9359%" y="549" width="0.4006%" height="15" fill="rgb(240,164,32)" fg:x="124" fg:w="5"/><text x="10.1859%" y="559.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="9.9359%" y="533" width="0.4006%" height="15" fill="rgb(232,46,7)" fg:x="124" fg:w="5"/><text x="10.1859%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="9.9359%" y="517" width="0.4006%" height="15" fill="rgb(229,129,53)" fg:x="124" fg:w="5"/><text x="10.1859%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="9.9359%" y="501" width="0.4006%" height="15" fill="rgb(234,188,29)" fg:x="124" fg:w="5"/><text x="10.1859%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="9.9359%" y="485" width="0.4006%" height="15" fill="rgb(246,141,4)" fg:x="124" fg:w="5"/><text x="10.1859%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="9.9359%" y="469" width="0.4006%" height="15" fill="rgb(229,23,39)" fg:x="124" fg:w="5"/><text x="10.1859%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="10.0160%" y="453" width="0.3205%" height="15" fill="rgb(206,12,3)" fg:x="125" fg:w="4"/><text x="10.2660%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="10.0160%" y="437" width="0.3205%" height="15" fill="rgb(252,226,20)" fg:x="125" fg:w="4"/><text x="10.2660%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="10.0160%" y="421" width="0.3205%" height="15" fill="rgb(216,123,35)" fg:x="125" fg:w="4"/><text x="10.2660%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="10.0962%" y="405" width="0.2404%" height="15" fill="rgb(212,68,40)" fg:x="126" fg:w="3"/><text x="10.3462%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.2564%" y="389" width="0.0801%" height="15" fill="rgb(254,125,32)" fg:x="128" fg:w="1"/><text x="10.5064%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.2564%" y="373" width="0.0801%" height="15" fill="rgb(253,97,22)" fg:x="128" fg:w="1"/><text x="10.5064%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2564%" y="357" width="0.0801%" height="15" fill="rgb(241,101,14)" fg:x="128" fg:w="1"/><text x="10.5064%" y="367.50"></text></g><g><title>engine::session::Session::close (34 samples, 2.72%)</title><rect x="7.6923%" y="645" width="2.7244%" height="15" fill="rgb(238,103,29)" fg:x="96" fg:w="34"/><text x="7.9423%" y="655.50">en..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="10.3365%" y="629" width="0.0801%" height="15" fill="rgb(233,195,47)" fg:x="129" fg:w="1"/><text x="10.5865%" y="639.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="10.3365%" y="613" width="0.0801%" height="15" fill="rgb(246,218,30)" fg:x="129" fg:w="1"/><text x="10.5865%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="10.3365%" y="597" width="0.0801%" height="15" fill="rgb(219,145,47)" fg:x="129" fg:w="1"/><text x="10.5865%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="10.3365%" y="581" width="0.0801%" height="15" fill="rgb(243,12,26)" fg:x="129" fg:w="1"/><text x="10.5865%" y="591.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="10.3365%" y="565" width="0.0801%" height="15" fill="rgb(214,87,16)" fg:x="129" fg:w="1"/><text x="10.5865%" y="575.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="10.4968%" y="405" width="0.0801%" height="15" fill="rgb(208,99,42)" fg:x="131" fg:w="1"/><text x="10.7468%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="10.4968%" y="389" width="0.0801%" height="15" fill="rgb(253,99,2)" fg:x="131" fg:w="1"/><text x="10.7468%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.4968%" y="373" width="0.0801%" height="15" fill="rgb(220,168,23)" fg:x="131" fg:w="1"/><text x="10.7468%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="10.4968%" y="357" width="0.0801%" height="15" fill="rgb(242,38,24)" fg:x="131" fg:w="1"/><text x="10.7468%" y="367.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="10.4968%" y="341" width="0.0801%" height="15" fill="rgb(225,182,9)" fg:x="131" fg:w="1"/><text x="10.7468%" y="351.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="10.4968%" y="325" width="0.0801%" height="15" fill="rgb(243,178,37)" fg:x="131" fg:w="1"/><text x="10.7468%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.4968%" y="309" width="0.0801%" height="15" fill="rgb(232,139,19)" fg:x="131" fg:w="1"/><text x="10.7468%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (3 samples, 0.24%)</title><rect x="10.4167%" y="581" width="0.2404%" height="15" fill="rgb(225,201,24)" fg:x="130" fg:w="3"/><text x="10.6667%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="10.4968%" y="565" width="0.1603%" height="15" fill="rgb(221,47,46)" fg:x="131" fg:w="2"/><text x="10.7468%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="10.4968%" y="549" width="0.1603%" height="15" fill="rgb(249,23,13)" fg:x="131" fg:w="2"/><text x="10.7468%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="10.4968%" y="533" width="0.1603%" height="15" fill="rgb(219,9,5)" fg:x="131" fg:w="2"/><text x="10.7468%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="10.4968%" y="517" width="0.1603%" height="15" fill="rgb(254,171,16)" fg:x="131" fg:w="2"/><text x="10.7468%" y="527.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="10.4968%" y="501" width="0.1603%" height="15" fill="rgb(230,171,20)" fg:x="131" fg:w="2"/><text x="10.7468%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="10.4968%" y="485" width="0.1603%" height="15" fill="rgb(210,71,41)" fg:x="131" fg:w="2"/><text x="10.7468%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="10.4968%" y="469" width="0.1603%" height="15" fill="rgb(206,173,20)" fg:x="131" fg:w="2"/><text x="10.7468%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="10.4968%" y="453" width="0.1603%" height="15" fill="rgb(233,88,34)" fg:x="131" fg:w="2"/><text x="10.7468%" y="463.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="10.4968%" y="437" width="0.1603%" height="15" fill="rgb(223,209,46)" fg:x="131" fg:w="2"/><text x="10.7468%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="10.4968%" y="421" width="0.1603%" height="15" fill="rgb(250,43,18)" fg:x="131" fg:w="2"/><text x="10.7468%" y="431.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.5769%" y="405" width="0.0801%" height="15" fill="rgb(208,13,10)" fg:x="132" fg:w="1"/><text x="10.8269%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.5769%" y="389" width="0.0801%" height="15" fill="rgb(212,200,36)" fg:x="132" fg:w="1"/><text x="10.8269%" y="399.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="10.5769%" y="373" width="0.0801%" height="15" fill="rgb(225,90,30)" fg:x="132" fg:w="1"/><text x="10.8269%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="10.5769%" y="357" width="0.0801%" height="15" fill="rgb(236,182,39)" fg:x="132" fg:w="1"/><text x="10.8269%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="10.5769%" y="341" width="0.0801%" height="15" fill="rgb(212,144,35)" fg:x="132" fg:w="1"/><text x="10.8269%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="10.5769%" y="325" width="0.0801%" height="15" fill="rgb(228,63,44)" fg:x="132" fg:w="1"/><text x="10.8269%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="10.5769%" y="309" width="0.0801%" height="15" fill="rgb(228,109,6)" fg:x="132" fg:w="1"/><text x="10.8269%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="10.5769%" y="293" width="0.0801%" height="15" fill="rgb(238,117,24)" fg:x="132" fg:w="1"/><text x="10.8269%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.5769%" y="277" width="0.0801%" height="15" fill="rgb(242,26,26)" fg:x="132" fg:w="1"/><text x="10.8269%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="10.5769%" y="261" width="0.0801%" height="15" fill="rgb(221,92,48)" fg:x="132" fg:w="1"/><text x="10.8269%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.5769%" y="245" width="0.0801%" height="15" fill="rgb(209,209,32)" fg:x="132" fg:w="1"/><text x="10.8269%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="10.5769%" y="229" width="0.0801%" height="15" fill="rgb(221,70,22)" fg:x="132" fg:w="1"/><text x="10.8269%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="10.5769%" y="213" width="0.0801%" height="15" fill="rgb(248,145,5)" fg:x="132" fg:w="1"/><text x="10.8269%" y="223.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="10.5769%" y="197" width="0.0801%" height="15" fill="rgb(226,116,26)" fg:x="132" fg:w="1"/><text x="10.8269%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.5769%" y="181" width="0.0801%" height="15" fill="rgb(244,5,17)" fg:x="132" fg:w="1"/><text x="10.8269%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="10.6571%" y="469" width="0.0801%" height="15" fill="rgb(252,159,33)" fg:x="133" fg:w="1"/><text x="10.9071%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.6571%" y="453" width="0.0801%" height="15" fill="rgb(206,71,0)" fg:x="133" fg:w="1"/><text x="10.9071%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="10.6571%" y="437" width="0.0801%" height="15" fill="rgb(233,118,54)" fg:x="133" fg:w="1"/><text x="10.9071%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6571%" y="421" width="0.0801%" height="15" fill="rgb(234,83,48)" fg:x="133" fg:w="1"/><text x="10.9071%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6571%" y="405" width="0.0801%" height="15" fill="rgb(228,3,54)" fg:x="133" fg:w="1"/><text x="10.9071%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6571%" y="389" width="0.0801%" height="15" fill="rgb(226,155,13)" fg:x="133" fg:w="1"/><text x="10.9071%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6571%" y="373" width="0.0801%" height="15" fill="rgb(241,28,37)" fg:x="133" fg:w="1"/><text x="10.9071%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6571%" y="357" width="0.0801%" height="15" fill="rgb(233,93,10)" fg:x="133" fg:w="1"/><text x="10.9071%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.6571%" y="341" width="0.0801%" height="15" fill="rgb(225,113,19)" fg:x="133" fg:w="1"/><text x="10.9071%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.6571%" y="325" width="0.0801%" height="15" fill="rgb(241,2,18)" fg:x="133" fg:w="1"/><text x="10.9071%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.6571%" y="309" width="0.0801%" height="15" fill="rgb(228,207,21)" fg:x="133" fg:w="1"/><text x="10.9071%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.6571%" y="293" width="0.0801%" height="15" fill="rgb(213,211,35)" fg:x="133" fg:w="1"/><text x="10.9071%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.6571%" y="277" width="0.0801%" height="15" fill="rgb(209,83,10)" fg:x="133" fg:w="1"/><text x="10.9071%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.6571%" y="261" width="0.0801%" height="15" fill="rgb(209,164,1)" fg:x="133" fg:w="1"/><text x="10.9071%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.6571%" y="245" width="0.0801%" height="15" fill="rgb(213,184,43)" fg:x="133" fg:w="1"/><text x="10.9071%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.6571%" y="229" width="0.0801%" height="15" fill="rgb(231,61,34)" fg:x="133" fg:w="1"/><text x="10.9071%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.6571%" y="213" width="0.0801%" height="15" fill="rgb(235,75,3)" fg:x="133" fg:w="1"/><text x="10.9071%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.7372%" y="421" width="0.0801%" height="15" fill="rgb(220,106,47)" fg:x="134" fg:w="1"/><text x="10.9872%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="10.7372%" y="405" width="0.0801%" height="15" fill="rgb(210,196,33)" fg:x="134" fg:w="1"/><text x="10.9872%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="10.6571%" y="501" width="0.2404%" height="15" fill="rgb(229,154,42)" fg:x="133" fg:w="3"/><text x="10.9071%" y="511.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="10.6571%" y="485" width="0.2404%" height="15" fill="rgb(228,114,26)" fg:x="133" fg:w="3"/><text x="10.9071%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="10.7372%" y="469" width="0.1603%" height="15" fill="rgb(208,144,1)" fg:x="134" fg:w="2"/><text x="10.9872%" y="479.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="10.7372%" y="453" width="0.1603%" height="15" fill="rgb(239,112,37)" fg:x="134" fg:w="2"/><text x="10.9872%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="10.7372%" y="437" width="0.1603%" height="15" fill="rgb(210,96,50)" fg:x="134" fg:w="2"/><text x="10.9872%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.8173%" y="421" width="0.0801%" height="15" fill="rgb(222,178,2)" fg:x="135" fg:w="1"/><text x="11.0673%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8173%" y="405" width="0.0801%" height="15" fill="rgb(226,74,18)" fg:x="135" fg:w="1"/><text x="11.0673%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.8173%" y="389" width="0.0801%" height="15" fill="rgb(225,67,54)" fg:x="135" fg:w="1"/><text x="11.0673%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8173%" y="373" width="0.0801%" height="15" fill="rgb(251,92,32)" fg:x="135" fg:w="1"/><text x="11.0673%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.8173%" y="357" width="0.0801%" height="15" fill="rgb(228,149,22)" fg:x="135" fg:w="1"/><text x="11.0673%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8173%" y="341" width="0.0801%" height="15" fill="rgb(243,54,13)" fg:x="135" fg:w="1"/><text x="11.0673%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.8173%" y="325" width="0.0801%" height="15" fill="rgb(243,180,28)" fg:x="135" fg:w="1"/><text x="11.0673%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.8173%" y="309" width="0.0801%" height="15" fill="rgb(208,167,24)" fg:x="135" fg:w="1"/><text x="11.0673%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8974%" y="341" width="0.0801%" height="15" fill="rgb(245,73,45)" fg:x="136" fg:w="1"/><text x="11.1474%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8974%" y="325" width="0.0801%" height="15" fill="rgb(237,203,48)" fg:x="136" fg:w="1"/><text x="11.1474%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8974%" y="309" width="0.0801%" height="15" fill="rgb(211,197,16)" fg:x="136" fg:w="1"/><text x="11.1474%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="10.8974%" y="357" width="0.1603%" height="15" fill="rgb(243,99,51)" fg:x="136" fg:w="2"/><text x="11.1474%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.9776%" y="341" width="0.0801%" height="15" fill="rgb(215,123,29)" fg:x="137" fg:w="1"/><text x="11.2276%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.9776%" y="325" width="0.0801%" height="15" fill="rgb(239,186,37)" fg:x="137" fg:w="1"/><text x="11.2276%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.9776%" y="309" width="0.0801%" height="15" fill="rgb(252,136,39)" fg:x="137" fg:w="1"/><text x="11.2276%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.9776%" y="293" width="0.0801%" height="15" fill="rgb(223,213,32)" fg:x="137" fg:w="1"/><text x="11.2276%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.9776%" y="277" width="0.0801%" height="15" fill="rgb(233,115,5)" fg:x="137" fg:w="1"/><text x="11.2276%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.9776%" y="261" width="0.0801%" height="15" fill="rgb(207,226,44)" fg:x="137" fg:w="1"/><text x="11.2276%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.9776%" y="245" width="0.0801%" height="15" fill="rgb(208,126,0)" fg:x="137" fg:w="1"/><text x="11.2276%" y="255.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="10.9776%" y="229" width="0.0801%" height="15" fill="rgb(244,66,21)" fg:x="137" fg:w="1"/><text x="11.2276%" y="239.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="10.8974%" y="485" width="0.2404%" height="15" fill="rgb(222,97,12)" fg:x="136" fg:w="3"/><text x="11.1474%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="10.8974%" y="469" width="0.2404%" height="15" fill="rgb(219,213,19)" fg:x="136" fg:w="3"/><text x="11.1474%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="10.8974%" y="453" width="0.2404%" height="15" fill="rgb(252,169,30)" fg:x="136" fg:w="3"/><text x="11.1474%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="10.8974%" y="437" width="0.2404%" height="15" fill="rgb(206,32,51)" fg:x="136" fg:w="3"/><text x="11.1474%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="10.8974%" y="421" width="0.2404%" height="15" fill="rgb(250,172,42)" fg:x="136" fg:w="3"/><text x="11.1474%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="10.8974%" y="405" width="0.2404%" height="15" fill="rgb(209,34,43)" fg:x="136" fg:w="3"/><text x="11.1474%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="10.8974%" y="389" width="0.2404%" height="15" fill="rgb(223,11,35)" fg:x="136" fg:w="3"/><text x="11.1474%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="10.8974%" y="373" width="0.2404%" height="15" fill="rgb(251,219,26)" fg:x="136" fg:w="3"/><text x="11.1474%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.0577%" y="357" width="0.0801%" height="15" fill="rgb(231,119,3)" fg:x="138" fg:w="1"/><text x="11.3077%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.1378%" y="405" width="0.0801%" height="15" fill="rgb(216,97,11)" fg:x="139" fg:w="1"/><text x="11.3878%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.1378%" y="389" width="0.0801%" height="15" fill="rgb(223,59,9)" fg:x="139" fg:w="1"/><text x="11.3878%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.1378%" y="373" width="0.0801%" height="15" fill="rgb(233,93,31)" fg:x="139" fg:w="1"/><text x="11.3878%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.1378%" y="357" width="0.0801%" height="15" fill="rgb(239,81,33)" fg:x="139" fg:w="1"/><text x="11.3878%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.1378%" y="341" width="0.0801%" height="15" fill="rgb(213,120,34)" fg:x="139" fg:w="1"/><text x="11.3878%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.1378%" y="325" width="0.0801%" height="15" fill="rgb(243,49,53)" fg:x="139" fg:w="1"/><text x="11.3878%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.1378%" y="309" width="0.0801%" height="15" fill="rgb(247,216,33)" fg:x="139" fg:w="1"/><text x="11.3878%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.1378%" y="293" width="0.0801%" height="15" fill="rgb(226,26,14)" fg:x="139" fg:w="1"/><text x="11.3878%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="11.1378%" y="277" width="0.0801%" height="15" fill="rgb(215,49,53)" fg:x="139" fg:w="1"/><text x="11.3878%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="11.1378%" y="261" width="0.0801%" height="15" fill="rgb(245,162,40)" fg:x="139" fg:w="1"/><text x="11.3878%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.1378%" y="245" width="0.0801%" height="15" fill="rgb(229,68,17)" fg:x="139" fg:w="1"/><text x="11.3878%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.2179%" y="373" width="0.0801%" height="15" fill="rgb(213,182,10)" fg:x="140" fg:w="1"/><text x="11.4679%" y="383.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="11.2981%" y="357" width="0.0801%" height="15" fill="rgb(245,125,30)" fg:x="141" fg:w="1"/><text x="11.5481%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="11.2981%" y="341" width="0.0801%" height="15" fill="rgb(232,202,2)" fg:x="141" fg:w="1"/><text x="11.5481%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.2981%" y="325" width="0.0801%" height="15" fill="rgb(237,140,51)" fg:x="141" fg:w="1"/><text x="11.5481%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.2981%" y="309" width="0.0801%" height="15" fill="rgb(236,157,25)" fg:x="141" fg:w="1"/><text x="11.5481%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.2981%" y="293" width="0.0801%" height="15" fill="rgb(219,209,0)" fg:x="141" fg:w="1"/><text x="11.5481%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (11 samples, 0.88%)</title><rect x="10.6571%" y="549" width="0.8814%" height="15" fill="rgb(240,116,54)" fg:x="133" fg:w="11"/><text x="10.9071%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (11 samples, 0.88%)</title><rect x="10.6571%" y="533" width="0.8814%" height="15" fill="rgb(216,10,36)" fg:x="133" fg:w="11"/><text x="10.9071%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="10.6571%" y="517" width="0.8814%" height="15" fill="rgb(222,72,44)" fg:x="133" fg:w="11"/><text x="10.9071%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (8 samples, 0.64%)</title><rect x="10.8974%" y="501" width="0.6410%" height="15" fill="rgb(232,159,9)" fg:x="136" fg:w="8"/><text x="11.1474%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="11.1378%" y="485" width="0.4006%" height="15" fill="rgb(210,39,32)" fg:x="139" fg:w="5"/><text x="11.3878%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="11.1378%" y="469" width="0.4006%" height="15" fill="rgb(216,194,45)" fg:x="139" fg:w="5"/><text x="11.3878%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="11.1378%" y="453" width="0.4006%" height="15" fill="rgb(218,18,35)" fg:x="139" fg:w="5"/><text x="11.3878%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="11.1378%" y="437" width="0.4006%" height="15" fill="rgb(207,83,51)" fg:x="139" fg:w="5"/><text x="11.3878%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="11.1378%" y="421" width="0.4006%" height="15" fill="rgb(225,63,43)" fg:x="139" fg:w="5"/><text x="11.3878%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="11.2179%" y="405" width="0.3205%" height="15" fill="rgb(207,57,36)" fg:x="140" fg:w="4"/><text x="11.4679%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="11.2179%" y="389" width="0.3205%" height="15" fill="rgb(216,99,33)" fg:x="140" fg:w="4"/><text x="11.4679%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.24%)</title><rect x="11.2981%" y="373" width="0.2404%" height="15" fill="rgb(225,42,16)" fg:x="141" fg:w="3"/><text x="11.5481%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.3782%" y="357" width="0.1603%" height="15" fill="rgb(220,201,45)" fg:x="142" fg:w="2"/><text x="11.6282%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.3782%" y="341" width="0.1603%" height="15" fill="rgb(225,33,4)" fg:x="142" fg:w="2"/><text x="11.6282%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="11.4583%" y="325" width="0.0801%" height="15" fill="rgb(224,33,50)" fg:x="143" fg:w="1"/><text x="11.7083%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.4583%" y="309" width="0.0801%" height="15" fill="rgb(246,198,51)" fg:x="143" fg:w="1"/><text x="11.7083%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.4583%" y="293" width="0.0801%" height="15" fill="rgb(205,22,4)" fg:x="143" fg:w="1"/><text x="11.7083%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="11.4583%" y="277" width="0.0801%" height="15" fill="rgb(206,3,8)" fg:x="143" fg:w="1"/><text x="11.7083%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.4583%" y="261" width="0.0801%" height="15" fill="rgb(251,23,15)" fg:x="143" fg:w="1"/><text x="11.7083%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.4583%" y="245" width="0.0801%" height="15" fill="rgb(252,88,28)" fg:x="143" fg:w="1"/><text x="11.7083%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.4583%" y="229" width="0.0801%" height="15" fill="rgb(212,127,14)" fg:x="143" fg:w="1"/><text x="11.7083%" y="239.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (15 samples, 1.20%)</title><rect x="10.4167%" y="613" width="1.2019%" height="15" fill="rgb(247,145,37)" fg:x="130" fg:w="15"/><text x="10.6667%" y="623.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (15 samples, 1.20%)</title><rect x="10.4167%" y="597" width="1.2019%" height="15" fill="rgb(209,117,53)" fg:x="130" fg:w="15"/><text x="10.6667%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (12 samples, 0.96%)</title><rect x="10.6571%" y="581" width="0.9615%" height="15" fill="rgb(212,90,42)" fg:x="133" fg:w="12"/><text x="10.9071%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (12 samples, 0.96%)</title><rect x="10.6571%" y="565" width="0.9615%" height="15" fill="rgb(218,164,37)" fg:x="133" fg:w="12"/><text x="10.9071%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.5385%" y="549" width="0.0801%" height="15" fill="rgb(246,65,34)" fg:x="144" fg:w="1"/><text x="11.7885%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.5385%" y="533" width="0.0801%" height="15" fill="rgb(231,100,33)" fg:x="144" fg:w="1"/><text x="11.7885%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.5385%" y="517" width="0.0801%" height="15" fill="rgb(228,126,14)" fg:x="144" fg:w="1"/><text x="11.7885%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.5385%" y="501" width="0.0801%" height="15" fill="rgb(215,173,21)" fg:x="144" fg:w="1"/><text x="11.7885%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="11.6186%" y="389" width="0.0801%" height="15" fill="rgb(210,6,40)" fg:x="145" fg:w="1"/><text x="11.8686%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.6186%" y="373" width="0.0801%" height="15" fill="rgb(212,48,18)" fg:x="145" fg:w="1"/><text x="11.8686%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.24%)</title><rect x="11.6186%" y="405" width="0.2404%" height="15" fill="rgb(230,214,11)" fg:x="145" fg:w="3"/><text x="11.8686%" y="415.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="11.6987%" y="389" width="0.1603%" height="15" fill="rgb(254,105,39)" fg:x="146" fg:w="2"/><text x="11.9487%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="11.7788%" y="373" width="0.0801%" height="15" fill="rgb(245,158,5)" fg:x="147" fg:w="1"/><text x="12.0288%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.7788%" y="357" width="0.0801%" height="15" fill="rgb(249,208,11)" fg:x="147" fg:w="1"/><text x="12.0288%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.7788%" y="341" width="0.0801%" height="15" fill="rgb(210,39,28)" fg:x="147" fg:w="1"/><text x="12.0288%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.7788%" y="325" width="0.0801%" height="15" fill="rgb(211,56,53)" fg:x="147" fg:w="1"/><text x="12.0288%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.7788%" y="309" width="0.0801%" height="15" fill="rgb(226,201,30)" fg:x="147" fg:w="1"/><text x="12.0288%" y="319.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="11.8590%" y="389" width="0.0801%" height="15" fill="rgb(239,101,34)" fg:x="148" fg:w="1"/><text x="12.1090%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.0192%" y="293" width="0.0801%" height="15" fill="rgb(226,209,5)" fg:x="150" fg:w="1"/><text x="12.2692%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0192%" y="277" width="0.0801%" height="15" fill="rgb(250,105,47)" fg:x="150" fg:w="1"/><text x="12.2692%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0192%" y="261" width="0.0801%" height="15" fill="rgb(230,72,3)" fg:x="150" fg:w="1"/><text x="12.2692%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.0192%" y="245" width="0.0801%" height="15" fill="rgb(232,218,39)" fg:x="150" fg:w="1"/><text x="12.2692%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.0192%" y="229" width="0.0801%" height="15" fill="rgb(248,166,6)" fg:x="150" fg:w="1"/><text x="12.2692%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.0192%" y="213" width="0.0801%" height="15" fill="rgb(247,89,20)" fg:x="150" fg:w="1"/><text x="12.2692%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.0192%" y="197" width="0.0801%" height="15" fill="rgb(248,130,54)" fg:x="150" fg:w="1"/><text x="12.2692%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.0192%" y="181" width="0.0801%" height="15" fill="rgb(234,196,4)" fg:x="150" fg:w="1"/><text x="12.2692%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.0192%" y="165" width="0.0801%" height="15" fill="rgb(250,143,31)" fg:x="150" fg:w="1"/><text x="12.2692%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.0192%" y="149" width="0.0801%" height="15" fill="rgb(211,110,34)" fg:x="150" fg:w="1"/><text x="12.2692%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.0192%" y="133" width="0.0801%" height="15" fill="rgb(215,124,48)" fg:x="150" fg:w="1"/><text x="12.2692%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.0192%" y="117" width="0.0801%" height="15" fill="rgb(216,46,13)" fg:x="150" fg:w="1"/><text x="12.2692%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.0192%" y="101" width="0.0801%" height="15" fill="rgb(205,184,25)" fg:x="150" fg:w="1"/><text x="12.2692%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="11.9391%" y="357" width="0.2404%" height="15" fill="rgb(228,1,10)" fg:x="149" fg:w="3"/><text x="12.1891%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="11.9391%" y="341" width="0.2404%" height="15" fill="rgb(213,116,27)" fg:x="149" fg:w="3"/><text x="12.1891%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.0192%" y="325" width="0.1603%" height="15" fill="rgb(241,95,50)" fg:x="150" fg:w="2"/><text x="12.2692%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.0192%" y="309" width="0.1603%" height="15" fill="rgb(238,48,32)" fg:x="150" fg:w="2"/><text x="12.2692%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0994%" y="293" width="0.0801%" height="15" fill="rgb(235,113,49)" fg:x="151" fg:w="1"/><text x="12.3494%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0994%" y="277" width="0.0801%" height="15" fill="rgb(205,127,43)" fg:x="151" fg:w="1"/><text x="12.3494%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.0994%" y="261" width="0.0801%" height="15" fill="rgb(250,162,2)" fg:x="151" fg:w="1"/><text x="12.3494%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.0994%" y="245" width="0.0801%" height="15" fill="rgb(220,13,41)" fg:x="151" fg:w="1"/><text x="12.3494%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.0994%" y="229" width="0.0801%" height="15" fill="rgb(249,221,25)" fg:x="151" fg:w="1"/><text x="12.3494%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.0994%" y="213" width="0.0801%" height="15" fill="rgb(215,208,19)" fg:x="151" fg:w="1"/><text x="12.3494%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.0994%" y="197" width="0.0801%" height="15" fill="rgb(236,175,2)" fg:x="151" fg:w="1"/><text x="12.3494%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.0994%" y="181" width="0.0801%" height="15" fill="rgb(241,52,2)" fg:x="151" fg:w="1"/><text x="12.3494%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.0994%" y="165" width="0.0801%" height="15" fill="rgb(248,140,14)" fg:x="151" fg:w="1"/><text x="12.3494%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.0994%" y="149" width="0.0801%" height="15" fill="rgb(253,22,42)" fg:x="151" fg:w="1"/><text x="12.3494%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.0994%" y="133" width="0.0801%" height="15" fill="rgb(234,61,47)" fg:x="151" fg:w="1"/><text x="12.3494%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.0994%" y="117" width="0.0801%" height="15" fill="rgb(208,226,15)" fg:x="151" fg:w="1"/><text x="12.3494%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.2596%" y="261" width="0.0801%" height="15" fill="rgb(217,221,4)" fg:x="153" fg:w="1"/><text x="12.5096%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.2596%" y="245" width="0.0801%" height="15" fill="rgb(212,174,34)" fg:x="153" fg:w="1"/><text x="12.5096%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.3397%" y="229" width="0.0801%" height="15" fill="rgb(253,83,4)" fg:x="154" fg:w="1"/><text x="12.5897%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (8 samples, 0.64%)</title><rect x="11.8590%" y="405" width="0.6410%" height="15" fill="rgb(250,195,49)" fg:x="148" fg:w="8"/><text x="12.1090%" y="415.50"></text></g><g><title>kernel::model::props::load_props (7 samples, 0.56%)</title><rect x="11.9391%" y="389" width="0.5609%" height="15" fill="rgb(241,192,25)" fg:x="149" fg:w="7"/><text x="12.1891%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (7 samples, 0.56%)</title><rect x="11.9391%" y="373" width="0.5609%" height="15" fill="rgb(208,124,10)" fg:x="149" fg:w="7"/><text x="12.1891%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="12.1795%" y="357" width="0.3205%" height="15" fill="rgb(222,33,0)" fg:x="152" fg:w="4"/><text x="12.4295%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="12.1795%" y="341" width="0.3205%" height="15" fill="rgb(234,209,28)" fg:x="152" fg:w="4"/><text x="12.4295%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="12.2596%" y="325" width="0.2404%" height="15" fill="rgb(224,11,23)" fg:x="153" fg:w="3"/><text x="12.5096%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="12.2596%" y="309" width="0.2404%" height="15" fill="rgb(232,99,1)" fg:x="153" fg:w="3"/><text x="12.5096%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="12.2596%" y="293" width="0.2404%" height="15" fill="rgb(237,95,45)" fg:x="153" fg:w="3"/><text x="12.5096%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="12.2596%" y="277" width="0.2404%" height="15" fill="rgb(208,109,11)" fg:x="153" fg:w="3"/><text x="12.5096%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="12.3397%" y="261" width="0.1603%" height="15" fill="rgb(216,190,48)" fg:x="154" fg:w="2"/><text x="12.5897%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.3397%" y="245" width="0.1603%" height="15" fill="rgb(251,171,36)" fg:x="154" fg:w="2"/><text x="12.5897%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.4199%" y="229" width="0.0801%" height="15" fill="rgb(230,62,22)" fg:x="155" fg:w="1"/><text x="12.6699%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4199%" y="213" width="0.0801%" height="15" fill="rgb(225,114,35)" fg:x="155" fg:w="1"/><text x="12.6699%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.4199%" y="197" width="0.0801%" height="15" fill="rgb(215,118,42)" fg:x="155" fg:w="1"/><text x="12.6699%" y="207.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="12.5000%" y="405" width="0.0801%" height="15" fill="rgb(243,119,21)" fg:x="156" fg:w="1"/><text x="12.7500%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="12.6603%" y="357" width="0.0801%" height="15" fill="rgb(252,177,53)" fg:x="158" fg:w="1"/><text x="12.9103%" y="367.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="12.6603%" y="341" width="0.0801%" height="15" fill="rgb(237,209,29)" fg:x="158" fg:w="1"/><text x="12.9103%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="12.7404%" y="325" width="0.1603%" height="15" fill="rgb(212,65,23)" fg:x="159" fg:w="2"/><text x="12.9904%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="12.7404%" y="309" width="0.1603%" height="15" fill="rgb(230,222,46)" fg:x="159" fg:w="2"/><text x="12.9904%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="12.7404%" y="293" width="0.1603%" height="15" fill="rgb(215,135,32)" fg:x="159" fg:w="2"/><text x="12.9904%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8205%" y="277" width="0.0801%" height="15" fill="rgb(246,101,22)" fg:x="160" fg:w="1"/><text x="13.0705%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="12.9808%" y="229" width="0.0801%" height="15" fill="rgb(206,107,13)" fg:x="162" fg:w="1"/><text x="13.2308%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="12.9808%" y="245" width="0.1603%" height="15" fill="rgb(250,100,44)" fg:x="162" fg:w="2"/><text x="13.2308%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="13.0609%" y="229" width="0.0801%" height="15" fill="rgb(231,147,38)" fg:x="163" fg:w="1"/><text x="13.3109%" y="239.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="13.0609%" y="213" width="0.0801%" height="15" fill="rgb(229,8,40)" fg:x="163" fg:w="1"/><text x="13.3109%" y="223.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.40%)</title><rect x="12.9006%" y="261" width="0.4006%" height="15" fill="rgb(221,135,30)" fg:x="161" fg:w="5"/><text x="13.1506%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="13.1410%" y="245" width="0.1603%" height="15" fill="rgb(249,193,18)" fg:x="164" fg:w="2"/><text x="13.3910%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="13.1410%" y="229" width="0.1603%" height="15" fill="rgb(209,133,39)" fg:x="164" fg:w="2"/><text x="13.3910%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="13.3013%" y="245" width="0.1603%" height="15" fill="rgb(232,100,14)" fg:x="166" fg:w="2"/><text x="13.5513%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.3814%" y="229" width="0.0801%" height="15" fill="rgb(224,185,1)" fg:x="167" fg:w="1"/><text x="13.6314%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.3814%" y="213" width="0.0801%" height="15" fill="rgb(223,139,8)" fg:x="167" fg:w="1"/><text x="13.6314%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="13.3814%" y="197" width="0.0801%" height="15" fill="rgb(232,213,38)" fg:x="167" fg:w="1"/><text x="13.6314%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="12.9006%" y="325" width="0.6410%" height="15" fill="rgb(207,94,22)" fg:x="161" fg:w="8"/><text x="13.1506%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="12.9006%" y="309" width="0.6410%" height="15" fill="rgb(219,183,54)" fg:x="161" fg:w="8"/><text x="13.1506%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (8 samples, 0.64%)</title><rect x="12.9006%" y="293" width="0.6410%" height="15" fill="rgb(216,185,54)" fg:x="161" fg:w="8"/><text x="13.1506%" y="303.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (8 samples, 0.64%)</title><rect x="12.9006%" y="277" width="0.6410%" height="15" fill="rgb(254,217,39)" fg:x="161" fg:w="8"/><text x="13.1506%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (3 samples, 0.24%)</title><rect x="13.3013%" y="261" width="0.2404%" height="15" fill="rgb(240,178,23)" fg:x="166" fg:w="3"/><text x="13.5513%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="13.4615%" y="245" width="0.0801%" height="15" fill="rgb(218,11,47)" fg:x="168" fg:w="1"/><text x="13.7115%" y="255.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="13.4615%" y="229" width="0.0801%" height="15" fill="rgb(218,51,51)" fg:x="168" fg:w="1"/><text x="13.7115%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="13.4615%" y="213" width="0.0801%" height="15" fill="rgb(238,126,27)" fg:x="168" fg:w="1"/><text x="13.7115%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.4615%" y="197" width="0.0801%" height="15" fill="rgb(249,202,22)" fg:x="168" fg:w="1"/><text x="13.7115%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.4615%" y="181" width="0.0801%" height="15" fill="rgb(254,195,49)" fg:x="168" fg:w="1"/><text x="13.7115%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.5417%" y="261" width="0.0801%" height="15" fill="rgb(208,123,14)" fg:x="169" fg:w="1"/><text x="13.7917%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="13.5417%" y="277" width="0.1603%" height="15" fill="rgb(224,200,8)" fg:x="169" fg:w="2"/><text x="13.7917%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.6218%" y="261" width="0.0801%" height="15" fill="rgb(217,61,36)" fg:x="170" fg:w="1"/><text x="13.8718%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="13.7019%" y="277" width="0.0801%" height="15" fill="rgb(206,35,45)" fg:x="171" fg:w="1"/><text x="13.9519%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="13.7821%" y="245" width="0.0801%" height="15" fill="rgb(217,65,33)" fg:x="172" fg:w="1"/><text x="14.0321%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.7821%" y="229" width="0.0801%" height="15" fill="rgb(222,158,48)" fg:x="172" fg:w="1"/><text x="14.0321%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.7821%" y="213" width="0.0801%" height="15" fill="rgb(254,2,54)" fg:x="172" fg:w="1"/><text x="14.0321%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.7821%" y="197" width="0.0801%" height="15" fill="rgb(250,143,38)" fg:x="172" fg:w="1"/><text x="14.0321%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="13.7821%" y="277" width="0.1603%" height="15" fill="rgb(248,25,0)" fg:x="172" fg:w="2"/><text x="14.0321%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="13.7821%" y="261" width="0.1603%" height="15" fill="rgb(206,152,27)" fg:x="172" fg:w="2"/><text x="14.0321%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="13.8622%" y="245" width="0.0801%" height="15" fill="rgb(240,77,30)" fg:x="173" fg:w="1"/><text x="14.1122%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.8622%" y="229" width="0.0801%" height="15" fill="rgb(231,5,3)" fg:x="173" fg:w="1"/><text x="14.1122%" y="239.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="13.9423%" y="261" width="0.2404%" height="15" fill="rgb(207,226,32)" fg:x="174" fg:w="3"/><text x="14.1923%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.20%)</title><rect x="14.1827%" y="261" width="1.2019%" height="15" fill="rgb(222,207,47)" fg:x="177" fg:w="15"/><text x="14.4327%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14 samples, 1.12%)</title><rect x="14.2628%" y="245" width="1.1218%" height="15" fill="rgb(229,115,45)" fg:x="178" fg:w="14"/><text x="14.5128%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="15.2244%" y="229" width="0.1603%" height="15" fill="rgb(224,191,6)" fg:x="190" fg:w="2"/><text x="15.4744%" y="239.50"></text></g><g><title>regex_automata::meta::literal::alternation_literals (1 samples, 0.08%)</title><rect x="15.3846%" y="261" width="0.0801%" height="15" fill="rgb(230,227,24)" fg:x="192" fg:w="1"/><text x="15.6346%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="15.5449%" y="245" width="0.4006%" height="15" fill="rgb(228,80,19)" fg:x="194" fg:w="5"/><text x="15.7949%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="15.4647%" y="261" width="0.5609%" height="15" fill="rgb(247,229,0)" fg:x="193" fg:w="7"/><text x="15.7147%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="15.9455%" y="245" width="0.0801%" height="15" fill="rgb(237,194,15)" fg:x="199" fg:w="1"/><text x="16.1955%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="15.9455%" y="229" width="0.0801%" height="15" fill="rgb(219,203,20)" fg:x="199" fg:w="1"/><text x="16.1955%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="15.9455%" y="213" width="0.0801%" height="15" fill="rgb(234,128,8)" fg:x="199" fg:w="1"/><text x="16.1955%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="15.9455%" y="197" width="0.0801%" height="15" fill="rgb(248,202,8)" fg:x="199" fg:w="1"/><text x="16.1955%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.9455%" y="181" width="0.0801%" height="15" fill="rgb(206,104,37)" fg:x="199" fg:w="1"/><text x="16.1955%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.9455%" y="165" width="0.0801%" height="15" fill="rgb(223,8,27)" fg:x="199" fg:w="1"/><text x="16.1955%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="16.0256%" y="261" width="0.0801%" height="15" fill="rgb(216,217,28)" fg:x="200" fg:w="1"/><text x="16.2756%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="16.0256%" y="245" width="0.0801%" height="15" fill="rgb(249,199,1)" fg:x="200" fg:w="1"/><text x="16.2756%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.4263%" y="197" width="0.0801%" height="15" fill="rgb(240,85,17)" fg:x="205" fg:w="1"/><text x="16.6763%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="16.5064%" y="197" width="0.0801%" height="15" fill="rgb(206,108,45)" fg:x="206" fg:w="1"/><text x="16.7564%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="16.5064%" y="181" width="0.0801%" height="15" fill="rgb(245,210,41)" fg:x="206" fg:w="1"/><text x="16.7564%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.5064%" y="165" width="0.0801%" height="15" fill="rgb(206,13,37)" fg:x="206" fg:w="1"/><text x="16.7564%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.5064%" y="149" width="0.0801%" height="15" fill="rgb(250,61,18)" fg:x="206" fg:w="1"/><text x="16.7564%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="16.5865%" y="197" width="0.0801%" height="15" fill="rgb(235,172,48)" fg:x="207" fg:w="1"/><text x="16.8365%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="16.5865%" y="181" width="0.0801%" height="15" fill="rgb(249,201,17)" fg:x="207" fg:w="1"/><text x="16.8365%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.5865%" y="165" width="0.0801%" height="15" fill="rgb(219,208,6)" fg:x="207" fg:w="1"/><text x="16.8365%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.5865%" y="149" width="0.0801%" height="15" fill="rgb(248,31,23)" fg:x="207" fg:w="1"/><text x="16.8365%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="16.7468%" y="165" width="0.0801%" height="15" fill="rgb(245,15,42)" fg:x="209" fg:w="1"/><text x="16.9968%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.7468%" y="149" width="0.0801%" height="15" fill="rgb(222,217,39)" fg:x="209" fg:w="1"/><text x="16.9968%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.7468%" y="133" width="0.0801%" height="15" fill="rgb(210,219,27)" fg:x="209" fg:w="1"/><text x="16.9968%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="16.6667%" y="197" width="0.2404%" height="15" fill="rgb(252,166,36)" fg:x="208" fg:w="3"/><text x="16.9167%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="16.6667%" y="181" width="0.2404%" height="15" fill="rgb(245,132,34)" fg:x="208" fg:w="3"/><text x="16.9167%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="16.8269%" y="165" width="0.0801%" height="15" fill="rgb(236,54,3)" fg:x="210" fg:w="1"/><text x="17.0769%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (84 samples, 6.73%)</title><rect x="16.9071%" y="197" width="6.7308%" height="15" fill="rgb(241,173,43)" fg:x="211" fg:w="84"/><text x="17.1571%" y="207.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (84 samples, 6.73%)</title><rect x="16.9071%" y="181" width="6.7308%" height="15" fill="rgb(215,190,9)" fg:x="211" fg:w="84"/><text x="17.1571%" y="191.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (84 samples, 6.73%)</title><rect x="16.9071%" y="165" width="6.7308%" height="15" fill="rgb(242,101,16)" fg:x="211" fg:w="84"/><text x="17.1571%" y="175.50">alloc::ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.48%)</title><rect x="23.6378%" y="197" width="0.4808%" height="15" fill="rgb(223,190,21)" fg:x="295" fg:w="6"/><text x="23.8878%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.0385%" y="181" width="0.0801%" height="15" fill="rgb(215,228,25)" fg:x="300" fg:w="1"/><text x="24.2885%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (101 samples, 8.09%)</title><rect x="16.1058%" y="245" width="8.0929%" height="15" fill="rgb(225,36,22)" fg:x="201" fg:w="101"/><text x="16.3558%" y="255.50">&lt;core::iter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (101 samples, 8.09%)</title><rect x="16.1058%" y="229" width="8.0929%" height="15" fill="rgb(251,106,46)" fg:x="201" fg:w="101"/><text x="16.3558%" y="239.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (101 samples, 8.09%)</title><rect x="16.1058%" y="213" width="8.0929%" height="15" fill="rgb(208,90,1)" fg:x="201" fg:w="101"/><text x="16.3558%" y="223.50">regex_autom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="24.1186%" y="197" width="0.0801%" height="15" fill="rgb(243,10,4)" fg:x="301" fg:w="1"/><text x="24.3686%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.1186%" y="181" width="0.0801%" height="15" fill="rgb(212,137,27)" fg:x="301" fg:w="1"/><text x="24.3686%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.1186%" y="165" width="0.0801%" height="15" fill="rgb(231,220,49)" fg:x="301" fg:w="1"/><text x="24.3686%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.1186%" y="149" width="0.0801%" height="15" fill="rgb(237,96,20)" fg:x="301" fg:w="1"/><text x="24.3686%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="24.4391%" y="229" width="0.3205%" height="15" fill="rgb(239,229,30)" fg:x="305" fg:w="4"/><text x="24.6891%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="24.5192%" y="213" width="0.2404%" height="15" fill="rgb(219,65,33)" fg:x="306" fg:w="3"/><text x="24.7692%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="24.5192%" y="197" width="0.2404%" height="15" fill="rgb(243,134,7)" fg:x="306" fg:w="3"/><text x="24.7692%" y="207.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="24.5192%" y="181" width="0.2404%" height="15" fill="rgb(216,177,54)" fg:x="306" fg:w="3"/><text x="24.7692%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (11 samples, 0.88%)</title><rect x="24.7596%" y="229" width="0.8814%" height="15" fill="rgb(211,160,20)" fg:x="309" fg:w="11"/><text x="25.0096%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (19 samples, 1.52%)</title><rect x="24.1987%" y="245" width="1.5224%" height="15" fill="rgb(239,85,39)" fg:x="302" fg:w="19"/><text x="24.4487%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="25.6410%" y="229" width="0.0801%" height="15" fill="rgb(232,125,22)" fg:x="320" fg:w="1"/><text x="25.8910%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (121 samples, 9.70%)</title><rect x="16.1058%" y="261" width="9.6955%" height="15" fill="rgb(244,57,34)" fg:x="201" fg:w="121"/><text x="16.3558%" y="271.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="25.7212%" y="245" width="0.0801%" height="15" fill="rgb(214,203,32)" fg:x="321" fg:w="1"/><text x="25.9712%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="25.7212%" y="229" width="0.0801%" height="15" fill="rgb(207,58,43)" fg:x="321" fg:w="1"/><text x="25.9712%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="25.8013%" y="261" width="0.0801%" height="15" fill="rgb(215,193,15)" fg:x="322" fg:w="1"/><text x="26.0513%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (150 samples, 12.02%)</title><rect x="13.9423%" y="277" width="12.0192%" height="15" fill="rgb(232,15,44)" fg:x="174" fg:w="150"/><text x="14.1923%" y="287.50">regex_automata::me..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="25.8814%" y="261" width="0.0801%" height="15" fill="rgb(212,3,48)" fg:x="323" fg:w="1"/><text x="26.1314%" y="271.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="25.8814%" y="245" width="0.0801%" height="15" fill="rgb(218,128,7)" fg:x="323" fg:w="1"/><text x="26.1314%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="26.0417%" y="229" width="0.1603%" height="15" fill="rgb(226,216,39)" fg:x="325" fg:w="2"/><text x="26.2917%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="26.1218%" y="213" width="0.0801%" height="15" fill="rgb(243,47,51)" fg:x="326" fg:w="1"/><text x="26.3718%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="25.9615%" y="277" width="0.4808%" height="15" fill="rgb(241,183,40)" fg:x="324" fg:w="6"/><text x="26.2115%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="25.9615%" y="261" width="0.4808%" height="15" fill="rgb(231,217,32)" fg:x="324" fg:w="6"/><text x="26.2115%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="25.9615%" y="245" width="0.4808%" height="15" fill="rgb(229,61,38)" fg:x="324" fg:w="6"/><text x="26.2115%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="26.2019%" y="229" width="0.2404%" height="15" fill="rgb(225,210,5)" fg:x="327" fg:w="3"/><text x="26.4519%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="26.2821%" y="213" width="0.1603%" height="15" fill="rgb(231,79,45)" fg:x="328" fg:w="2"/><text x="26.5321%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="26.2821%" y="197" width="0.1603%" height="15" fill="rgb(224,100,7)" fg:x="328" fg:w="2"/><text x="26.5321%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="26.2821%" y="181" width="0.1603%" height="15" fill="rgb(241,198,18)" fg:x="328" fg:w="2"/><text x="26.5321%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="26.6026%" y="229" width="0.0801%" height="15" fill="rgb(252,97,53)" fg:x="332" fg:w="1"/><text x="26.8526%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="26.6026%" y="213" width="0.0801%" height="15" fill="rgb(220,88,7)" fg:x="332" fg:w="1"/><text x="26.8526%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.6026%" y="197" width="0.0801%" height="15" fill="rgb(213,176,14)" fg:x="332" fg:w="1"/><text x="26.8526%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (165 samples, 13.22%)</title><rect x="13.5417%" y="325" width="13.2212%" height="15" fill="rgb(246,73,7)" fg:x="169" fg:w="165"/><text x="13.7917%" y="335.50">&lt;regex::regex::strin..</text></g><g><title>regex::builders::Builder::build_one_string (165 samples, 13.22%)</title><rect x="13.5417%" y="309" width="13.2212%" height="15" fill="rgb(245,64,36)" fg:x="169" fg:w="165"/><text x="13.7917%" y="319.50">regex::builders::Bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (165 samples, 13.22%)</title><rect x="13.5417%" y="293" width="13.2212%" height="15" fill="rgb(245,80,10)" fg:x="169" fg:w="165"/><text x="13.7917%" y="303.50">regex_automata::meta..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="26.4423%" y="277" width="0.3205%" height="15" fill="rgb(232,107,50)" fg:x="330" fg:w="4"/><text x="26.6923%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="26.4423%" y="261" width="0.3205%" height="15" fill="rgb(253,3,0)" fg:x="330" fg:w="4"/><text x="26.6923%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="26.4423%" y="245" width="0.3205%" height="15" fill="rgb(212,99,53)" fg:x="330" fg:w="4"/><text x="26.6923%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="26.6827%" y="229" width="0.0801%" height="15" fill="rgb(249,111,54)" fg:x="333" fg:w="1"/><text x="26.9327%" y="239.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="26.6827%" y="213" width="0.0801%" height="15" fill="rgb(249,55,30)" fg:x="333" fg:w="1"/><text x="26.9327%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="26.7628%" y="325" width="0.0801%" height="15" fill="rgb(237,47,42)" fg:x="334" fg:w="1"/><text x="27.0128%" y="335.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="26.8429%" y="325" width="0.0801%" height="15" fill="rgb(211,20,18)" fg:x="335" fg:w="1"/><text x="27.0929%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="26.9231%" y="309" width="0.1603%" height="15" fill="rgb(231,203,46)" fg:x="336" fg:w="2"/><text x="27.1731%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="27.0833%" y="293" width="0.0801%" height="15" fill="rgb(237,142,3)" fg:x="338" fg:w="1"/><text x="27.3333%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="27.0833%" y="277" width="0.0801%" height="15" fill="rgb(241,107,1)" fg:x="338" fg:w="1"/><text x="27.3333%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="27.0833%" y="261" width="0.0801%" height="15" fill="rgb(229,83,13)" fg:x="338" fg:w="1"/><text x="27.3333%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.0833%" y="245" width="0.0801%" height="15" fill="rgb(241,91,40)" fg:x="338" fg:w="1"/><text x="27.3333%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="27.1635%" y="277" width="0.1603%" height="15" fill="rgb(225,3,45)" fg:x="339" fg:w="2"/><text x="27.4135%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.2436%" y="261" width="0.0801%" height="15" fill="rgb(244,223,14)" fg:x="340" fg:w="1"/><text x="27.4936%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="26.9231%" y="325" width="0.4808%" height="15" fill="rgb(224,124,37)" fg:x="336" fg:w="6"/><text x="27.1731%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="27.0833%" y="309" width="0.3205%" height="15" fill="rgb(251,171,30)" fg:x="338" fg:w="4"/><text x="27.3333%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="27.1635%" y="293" width="0.2404%" height="15" fill="rgb(236,46,54)" fg:x="339" fg:w="3"/><text x="27.4135%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="27.3237%" y="277" width="0.0801%" height="15" fill="rgb(245,213,5)" fg:x="341" fg:w="1"/><text x="27.5737%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.3237%" y="261" width="0.0801%" height="15" fill="rgb(230,144,27)" fg:x="341" fg:w="1"/><text x="27.5737%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.9647%" y="245" width="0.0801%" height="15" fill="rgb(220,86,6)" fg:x="349" fg:w="1"/><text x="28.2147%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.72%)</title><rect x="27.4038%" y="277" width="0.7212%" height="15" fill="rgb(240,20,13)" fg:x="342" fg:w="9"/><text x="27.6538%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="27.5641%" y="261" width="0.5609%" height="15" fill="rgb(217,89,34)" fg:x="344" fg:w="7"/><text x="27.8141%" y="271.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="28.0449%" y="245" width="0.0801%" height="15" fill="rgb(229,13,5)" fg:x="350" fg:w="1"/><text x="28.2949%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.0449%" y="229" width="0.0801%" height="15" fill="rgb(244,67,35)" fg:x="350" fg:w="1"/><text x="28.2949%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (196 samples, 15.71%)</title><rect x="12.7404%" y="341" width="15.7051%" height="15" fill="rgb(221,40,2)" fg:x="159" fg:w="196"/><text x="12.9904%" y="351.50">indefinite::helper::Help..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.04%)</title><rect x="27.4038%" y="325" width="1.0417%" height="15" fill="rgb(237,157,21)" fg:x="342" fg:w="13"/><text x="27.6538%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.04%)</title><rect x="27.4038%" y="309" width="1.0417%" height="15" fill="rgb(222,94,11)" fg:x="342" fg:w="13"/><text x="27.6538%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (13 samples, 1.04%)</title><rect x="27.4038%" y="293" width="1.0417%" height="15" fill="rgb(249,113,6)" fg:x="342" fg:w="13"/><text x="27.6538%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (4 samples, 0.32%)</title><rect x="28.1250%" y="277" width="0.3205%" height="15" fill="rgb(238,137,36)" fg:x="351" fg:w="4"/><text x="28.3750%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (3 samples, 0.24%)</title><rect x="28.2051%" y="261" width="0.2404%" height="15" fill="rgb(210,102,26)" fg:x="352" fg:w="3"/><text x="28.4551%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="28.3654%" y="245" width="0.0801%" height="15" fill="rgb(218,30,30)" fg:x="354" fg:w="1"/><text x="28.6154%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.4455%" y="293" width="0.0801%" height="15" fill="rgb(214,67,26)" fg:x="355" fg:w="1"/><text x="28.6955%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="28.6859%" y="245" width="0.0801%" height="15" fill="rgb(251,9,53)" fg:x="358" fg:w="1"/><text x="28.9359%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="28.6859%" y="229" width="0.0801%" height="15" fill="rgb(228,204,25)" fg:x="358" fg:w="1"/><text x="28.9359%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.6859%" y="213" width="0.0801%" height="15" fill="rgb(207,153,8)" fg:x="358" fg:w="1"/><text x="28.9359%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="28.6859%" y="197" width="0.0801%" height="15" fill="rgb(242,9,16)" fg:x="358" fg:w="1"/><text x="28.9359%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="28.6859%" y="277" width="0.1603%" height="15" fill="rgb(217,211,10)" fg:x="358" fg:w="2"/><text x="28.9359%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="28.6859%" y="261" width="0.1603%" height="15" fill="rgb(219,228,52)" fg:x="358" fg:w="2"/><text x="28.9359%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="28.7660%" y="245" width="0.0801%" height="15" fill="rgb(231,92,29)" fg:x="359" fg:w="1"/><text x="29.0160%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="28.8462%" y="277" width="0.1603%" height="15" fill="rgb(232,8,23)" fg:x="360" fg:w="2"/><text x="29.0962%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.24%)</title><rect x="29.0064%" y="245" width="0.2404%" height="15" fill="rgb(216,211,34)" fg:x="362" fg:w="3"/><text x="29.2564%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="29.0064%" y="229" width="0.2404%" height="15" fill="rgb(236,151,0)" fg:x="362" fg:w="3"/><text x="29.2564%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="29.0064%" y="213" width="0.2404%" height="15" fill="rgb(209,168,3)" fg:x="362" fg:w="3"/><text x="29.2564%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="29.0865%" y="197" width="0.1603%" height="15" fill="rgb(208,129,28)" fg:x="363" fg:w="2"/><text x="29.3365%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (6 samples, 0.48%)</title><rect x="29.0064%" y="277" width="0.4808%" height="15" fill="rgb(229,78,22)" fg:x="362" fg:w="6"/><text x="29.2564%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="29.0064%" y="261" width="0.4808%" height="15" fill="rgb(228,187,13)" fg:x="362" fg:w="6"/><text x="29.2564%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="29.2468%" y="245" width="0.2404%" height="15" fill="rgb(240,119,24)" fg:x="365" fg:w="3"/><text x="29.4968%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="29.2468%" y="229" width="0.2404%" height="15" fill="rgb(209,194,42)" fg:x="365" fg:w="3"/><text x="29.4968%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="29.3269%" y="213" width="0.1603%" height="15" fill="rgb(247,200,46)" fg:x="366" fg:w="2"/><text x="29.5769%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="29.3269%" y="197" width="0.1603%" height="15" fill="rgb(218,76,16)" fg:x="366" fg:w="2"/><text x="29.5769%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.4071%" y="181" width="0.0801%" height="15" fill="rgb(225,21,48)" fg:x="367" fg:w="1"/><text x="29.6571%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="29.4071%" y="165" width="0.0801%" height="15" fill="rgb(239,223,50)" fg:x="367" fg:w="1"/><text x="29.6571%" y="175.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="29.4872%" y="277" width="0.0801%" height="15" fill="rgb(244,45,21)" fg:x="368" fg:w="1"/><text x="29.7372%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.8878%" y="245" width="0.0801%" height="15" fill="rgb(232,33,43)" fg:x="373" fg:w="1"/><text x="30.1378%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (16 samples, 1.28%)</title><rect x="29.6474%" y="261" width="1.2821%" height="15" fill="rgb(209,8,3)" fg:x="370" fg:w="16"/><text x="29.8974%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.96%)</title><rect x="29.9679%" y="245" width="0.9615%" height="15" fill="rgb(214,25,53)" fg:x="374" fg:w="12"/><text x="30.2179%" y="255.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="30.6891%" y="229" width="0.2404%" height="15" fill="rgb(254,186,54)" fg:x="383" fg:w="3"/><text x="30.9391%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.64%)</title><rect x="30.9295%" y="261" width="0.6410%" height="15" fill="rgb(208,174,49)" fg:x="386" fg:w="8"/><text x="31.1795%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="30.9295%" y="245" width="0.6410%" height="15" fill="rgb(233,191,51)" fg:x="386" fg:w="8"/><text x="31.1795%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="31.8109%" y="213" width="0.1603%" height="15" fill="rgb(222,134,10)" fg:x="397" fg:w="2"/><text x="32.0609%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="31.8109%" y="197" width="0.1603%" height="15" fill="rgb(230,226,20)" fg:x="397" fg:w="2"/><text x="32.0609%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="31.8109%" y="181" width="0.1603%" height="15" fill="rgb(251,111,25)" fg:x="397" fg:w="2"/><text x="32.0609%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="31.8109%" y="229" width="0.2404%" height="15" fill="rgb(224,40,46)" fg:x="397" fg:w="3"/><text x="32.0609%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.9712%" y="213" width="0.0801%" height="15" fill="rgb(236,108,47)" fg:x="399" fg:w="1"/><text x="32.2212%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.9712%" y="197" width="0.0801%" height="15" fill="rgb(234,93,0)" fg:x="399" fg:w="1"/><text x="32.2212%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.9712%" y="181" width="0.0801%" height="15" fill="rgb(224,213,32)" fg:x="399" fg:w="1"/><text x="32.2212%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (7 samples, 0.56%)</title><rect x="32.0513%" y="229" width="0.5609%" height="15" fill="rgb(251,11,48)" fg:x="400" fg:w="7"/><text x="32.3013%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.48%)</title><rect x="32.1314%" y="213" width="0.4808%" height="15" fill="rgb(236,173,5)" fg:x="401" fg:w="6"/><text x="32.3814%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="32.4519%" y="197" width="0.1603%" height="15" fill="rgb(230,95,12)" fg:x="405" fg:w="2"/><text x="32.7019%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="32.4519%" y="181" width="0.1603%" height="15" fill="rgb(232,209,1)" fg:x="405" fg:w="2"/><text x="32.7019%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="32.4519%" y="165" width="0.1603%" height="15" fill="rgb(232,6,1)" fg:x="405" fg:w="2"/><text x="32.7019%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (9 samples, 0.72%)</title><rect x="32.6122%" y="213" width="0.7212%" height="15" fill="rgb(210,224,50)" fg:x="407" fg:w="9"/><text x="32.8622%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (9 samples, 0.72%)</title><rect x="32.6122%" y="197" width="0.7212%" height="15" fill="rgb(228,127,35)" fg:x="407" fg:w="9"/><text x="32.8622%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (10 samples, 0.80%)</title><rect x="32.6122%" y="229" width="0.8013%" height="15" fill="rgb(245,102,45)" fg:x="407" fg:w="10"/><text x="32.8622%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="33.3333%" y="213" width="0.0801%" height="15" fill="rgb(214,1,49)" fg:x="416" fg:w="1"/><text x="33.5833%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (24 samples, 1.92%)</title><rect x="31.5705%" y="261" width="1.9231%" height="15" fill="rgb(226,163,40)" fg:x="394" fg:w="24"/><text x="31.8205%" y="271.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (24 samples, 1.92%)</title><rect x="31.5705%" y="245" width="1.9231%" height="15" fill="rgb(239,212,28)" fg:x="394" fg:w="24"/><text x="31.8205%" y="255.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="33.4135%" y="229" width="0.0801%" height="15" fill="rgb(220,20,13)" fg:x="417" fg:w="1"/><text x="33.6635%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.4936%" y="229" width="0.0801%" height="15" fill="rgb(210,164,35)" fg:x="418" fg:w="1"/><text x="33.7436%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="33.5737%" y="181" width="0.0801%" height="15" fill="rgb(248,109,41)" fg:x="419" fg:w="1"/><text x="33.8237%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="33.6538%" y="181" width="0.0801%" height="15" fill="rgb(238,23,50)" fg:x="420" fg:w="1"/><text x="33.9038%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="33.7340%" y="165" width="0.0801%" height="15" fill="rgb(211,48,49)" fg:x="421" fg:w="1"/><text x="33.9840%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.7340%" y="149" width="0.0801%" height="15" fill="rgb(223,36,21)" fg:x="421" fg:w="1"/><text x="33.9840%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.7340%" y="133" width="0.0801%" height="15" fill="rgb(207,123,46)" fg:x="421" fg:w="1"/><text x="33.9840%" y="143.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 1.04%)</title><rect x="35.2564%" y="149" width="1.0417%" height="15" fill="rgb(240,218,32)" fg:x="440" fg:w="13"/><text x="35.5064%" y="159.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="36.2981%" y="149" width="0.1603%" height="15" fill="rgb(252,5,43)" fg:x="453" fg:w="2"/><text x="36.5481%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (6 samples, 0.48%)</title><rect x="36.4583%" y="149" width="0.4808%" height="15" fill="rgb(252,84,19)" fg:x="455" fg:w="6"/><text x="36.7083%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="36.6987%" y="133" width="0.2404%" height="15" fill="rgb(243,152,39)" fg:x="458" fg:w="3"/><text x="36.9487%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="36.6987%" y="117" width="0.2404%" height="15" fill="rgb(234,160,15)" fg:x="458" fg:w="3"/><text x="36.9487%" y="127.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="36.6987%" y="101" width="0.2404%" height="15" fill="rgb(237,34,20)" fg:x="458" fg:w="3"/><text x="36.9487%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="36.9391%" y="149" width="0.0801%" height="15" fill="rgb(229,97,13)" fg:x="461" fg:w="1"/><text x="37.1891%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="37.0192%" y="149" width="0.1603%" height="15" fill="rgb(234,71,50)" fg:x="462" fg:w="2"/><text x="37.2692%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.8205%" y="85" width="0.0801%" height="15" fill="rgb(253,155,4)" fg:x="472" fg:w="1"/><text x="38.0705%" y="95.50"></text></g><g><title>__rdl_alloc (2 samples, 0.16%)</title><rect x="37.9006%" y="85" width="0.1603%" height="15" fill="rgb(222,185,37)" fg:x="473" fg:w="2"/><text x="38.1506%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.16%)</title><rect x="37.9006%" y="69" width="0.1603%" height="15" fill="rgb(251,177,13)" fg:x="473" fg:w="2"/><text x="38.1506%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="37.7404%" y="117" width="0.4808%" height="15" fill="rgb(250,179,40)" fg:x="471" fg:w="6"/><text x="37.9904%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="37.7404%" y="101" width="0.4808%" height="15" fill="rgb(242,44,2)" fg:x="471" fg:w="6"/><text x="37.9904%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="38.0609%" y="85" width="0.1603%" height="15" fill="rgb(216,177,13)" fg:x="475" fg:w="2"/><text x="38.3109%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (16 samples, 1.28%)</title><rect x="37.1795%" y="149" width="1.2821%" height="15" fill="rgb(216,106,43)" fg:x="464" fg:w="16"/><text x="37.4295%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (13 samples, 1.04%)</title><rect x="37.4199%" y="133" width="1.0417%" height="15" fill="rgb(216,183,2)" fg:x="467" fg:w="13"/><text x="37.6699%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="38.2212%" y="117" width="0.2404%" height="15" fill="rgb(249,75,3)" fg:x="477" fg:w="3"/><text x="38.4712%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="38.4615%" y="149" width="0.0801%" height="15" fill="rgb(219,67,39)" fg:x="480" fg:w="1"/><text x="38.7115%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="38.4615%" y="133" width="0.0801%" height="15" fill="rgb(253,228,2)" fg:x="480" fg:w="1"/><text x="38.7115%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="38.4615%" y="117" width="0.0801%" height="15" fill="rgb(235,138,27)" fg:x="480" fg:w="1"/><text x="38.7115%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (56 samples, 4.49%)</title><rect x="38.5417%" y="149" width="4.4872%" height="15" fill="rgb(236,97,51)" fg:x="481" fg:w="56"/><text x="38.7917%" y="159.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (55 samples, 4.41%)</title><rect x="38.6218%" y="133" width="4.4071%" height="15" fill="rgb(240,80,30)" fg:x="482" fg:w="55"/><text x="38.8718%" y="143.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (55 samples, 4.41%)</title><rect x="38.6218%" y="117" width="4.4071%" height="15" fill="rgb(230,178,19)" fg:x="482" fg:w="55"/><text x="38.8718%" y="127.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="43.0288%" y="149" width="0.3205%" height="15" fill="rgb(210,190,27)" fg:x="537" fg:w="4"/><text x="43.2788%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.2692%" y="133" width="0.0801%" height="15" fill="rgb(222,107,31)" fg:x="540" fg:w="1"/><text x="43.5192%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (126 samples, 10.10%)</title><rect x="33.4936%" y="245" width="10.0962%" height="15" fill="rgb(216,127,34)" fg:x="418" fg:w="126"/><text x="33.7436%" y="255.50">&lt;core::iter::ad..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (125 samples, 10.02%)</title><rect x="33.5737%" y="229" width="10.0160%" height="15" fill="rgb(234,116,52)" fg:x="419" fg:w="125"/><text x="33.8237%" y="239.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (125 samples, 10.02%)</title><rect x="33.5737%" y="213" width="10.0160%" height="15" fill="rgb(222,124,15)" fg:x="419" fg:w="125"/><text x="33.8237%" y="223.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (125 samples, 10.02%)</title><rect x="33.5737%" y="197" width="10.0160%" height="15" fill="rgb(231,179,28)" fg:x="419" fg:w="125"/><text x="33.8237%" y="207.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (123 samples, 9.86%)</title><rect x="33.7340%" y="181" width="9.8558%" height="15" fill="rgb(226,93,45)" fg:x="421" fg:w="123"/><text x="33.9840%" y="191.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (122 samples, 9.78%)</title><rect x="33.8141%" y="165" width="9.7756%" height="15" fill="rgb(215,8,51)" fg:x="422" fg:w="122"/><text x="34.0641%" y="175.50">regex_automata..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="43.3494%" y="149" width="0.2404%" height="15" fill="rgb(223,106,5)" fg:x="541" fg:w="3"/><text x="43.5994%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.5096%" y="133" width="0.0801%" height="15" fill="rgb(250,191,5)" fg:x="543" fg:w="1"/><text x="43.7596%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.5096%" y="117" width="0.0801%" height="15" fill="rgb(242,132,44)" fg:x="543" fg:w="1"/><text x="43.7596%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.5096%" y="101" width="0.0801%" height="15" fill="rgb(251,152,29)" fg:x="543" fg:w="1"/><text x="43.7596%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="43.5897%" y="245" width="0.0801%" height="15" fill="rgb(218,179,5)" fg:x="544" fg:w="1"/><text x="43.8397%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.5897%" y="229" width="0.0801%" height="15" fill="rgb(227,67,19)" fg:x="544" fg:w="1"/><text x="43.8397%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.5897%" y="213" width="0.0801%" height="15" fill="rgb(233,119,31)" fg:x="544" fg:w="1"/><text x="43.8397%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.5897%" y="197" width="0.0801%" height="15" fill="rgb(241,120,22)" fg:x="544" fg:w="1"/><text x="43.8397%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.9904%" y="229" width="0.0801%" height="15" fill="rgb(224,102,30)" fg:x="549" fg:w="1"/><text x="44.2404%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="44.5513%" y="213" width="0.2404%" height="15" fill="rgb(210,164,37)" fg:x="556" fg:w="3"/><text x="44.8013%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="44.5513%" y="197" width="0.2404%" height="15" fill="rgb(226,191,16)" fg:x="556" fg:w="3"/><text x="44.8013%" y="207.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="44.5513%" y="181" width="0.2404%" height="15" fill="rgb(214,40,45)" fg:x="556" fg:w="3"/><text x="44.8013%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (10 samples, 0.80%)</title><rect x="44.0705%" y="229" width="0.8013%" height="15" fill="rgb(244,29,26)" fg:x="550" fg:w="10"/><text x="44.3205%" y="239.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="44.7917%" y="213" width="0.0801%" height="15" fill="rgb(216,16,5)" fg:x="559" fg:w="1"/><text x="45.0417%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="44.8718%" y="229" width="0.5609%" height="15" fill="rgb(249,76,35)" fg:x="560" fg:w="7"/><text x="45.1218%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.3526%" y="213" width="0.0801%" height="15" fill="rgb(207,11,44)" fg:x="566" fg:w="1"/><text x="45.6026%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="45.4327%" y="229" width="0.2404%" height="15" fill="rgb(228,190,49)" fg:x="567" fg:w="3"/><text x="45.6827%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (203 samples, 16.27%)</title><rect x="29.5673%" y="277" width="16.2660%" height="15" fill="rgb(214,173,12)" fg:x="369" fg:w="203"/><text x="29.8173%" y="287.50">regex_automata::meta::str..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (154 samples, 12.34%)</title><rect x="33.4936%" y="261" width="12.3397%" height="15" fill="rgb(218,26,35)" fg:x="418" fg:w="154"/><text x="33.7436%" y="271.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (27 samples, 2.16%)</title><rect x="43.6699%" y="245" width="2.1635%" height="15" fill="rgb(220,200,19)" fg:x="545" fg:w="27"/><text x="43.9199%" y="255.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="45.6731%" y="229" width="0.1603%" height="15" fill="rgb(239,95,49)" fg:x="570" fg:w="2"/><text x="45.9231%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.7532%" y="213" width="0.0801%" height="15" fill="rgb(235,85,53)" fg:x="571" fg:w="1"/><text x="46.0032%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.7532%" y="197" width="0.0801%" height="15" fill="rgb(233,133,31)" fg:x="571" fg:w="1"/><text x="46.0032%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="45.7532%" y="181" width="0.0801%" height="15" fill="rgb(218,25,20)" fg:x="571" fg:w="1"/><text x="46.0032%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="45.9135%" y="229" width="0.0801%" height="15" fill="rgb(252,210,38)" fg:x="573" fg:w="1"/><text x="46.1635%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="45.9135%" y="213" width="0.0801%" height="15" fill="rgb(242,134,21)" fg:x="573" fg:w="1"/><text x="46.1635%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="45.9135%" y="197" width="0.0801%" height="15" fill="rgb(213,28,48)" fg:x="573" fg:w="1"/><text x="46.1635%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="45.9135%" y="181" width="0.0801%" height="15" fill="rgb(250,196,2)" fg:x="573" fg:w="1"/><text x="46.1635%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="45.9135%" y="245" width="0.4006%" height="15" fill="rgb(227,5,17)" fg:x="573" fg:w="5"/><text x="46.1635%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="45.9936%" y="229" width="0.3205%" height="15" fill="rgb(221,226,24)" fg:x="574" fg:w="4"/><text x="46.2436%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="46.0737%" y="213" width="0.2404%" height="15" fill="rgb(211,5,48)" fg:x="575" fg:w="3"/><text x="46.3237%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="46.0737%" y="197" width="0.2404%" height="15" fill="rgb(219,150,6)" fg:x="575" fg:w="3"/><text x="46.3237%" y="207.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="46.0737%" y="181" width="0.2404%" height="15" fill="rgb(251,46,16)" fg:x="575" fg:w="3"/><text x="46.3237%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="46.3141%" y="245" width="0.0801%" height="15" fill="rgb(220,204,40)" fg:x="578" fg:w="1"/><text x="46.5641%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.5545%" y="229" width="0.0801%" height="15" fill="rgb(211,85,2)" fg:x="581" fg:w="1"/><text x="46.8045%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.88%)</title><rect x="45.8333%" y="277" width="0.8814%" height="15" fill="rgb(229,17,7)" fg:x="572" fg:w="11"/><text x="46.0833%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.88%)</title><rect x="45.8333%" y="261" width="0.8814%" height="15" fill="rgb(239,72,28)" fg:x="572" fg:w="11"/><text x="46.0833%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="46.3942%" y="245" width="0.3205%" height="15" fill="rgb(230,47,54)" fg:x="579" fg:w="4"/><text x="46.6442%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.6346%" y="229" width="0.0801%" height="15" fill="rgb(214,50,8)" fg:x="582" fg:w="1"/><text x="46.8846%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.6346%" y="213" width="0.0801%" height="15" fill="rgb(216,198,43)" fg:x="582" fg:w="1"/><text x="46.8846%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="46.6346%" y="197" width="0.0801%" height="15" fill="rgb(234,20,35)" fg:x="582" fg:w="1"/><text x="46.8846%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="46.6346%" y="181" width="0.0801%" height="15" fill="rgb(254,45,19)" fg:x="582" fg:w="1"/><text x="46.8846%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="46.7949%" y="229" width="0.1603%" height="15" fill="rgb(219,14,44)" fg:x="584" fg:w="2"/><text x="47.0449%" y="239.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="46.8750%" y="213" width="0.0801%" height="15" fill="rgb(217,220,26)" fg:x="585" fg:w="1"/><text x="47.1250%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (2 samples, 0.16%)</title><rect x="46.9551%" y="229" width="0.1603%" height="15" fill="rgb(213,158,28)" fg:x="586" fg:w="2"/><text x="47.2051%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="46.9551%" y="213" width="0.1603%" height="15" fill="rgb(252,51,52)" fg:x="586" fg:w="2"/><text x="47.2051%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.48%)</title><rect x="46.7147%" y="245" width="0.4808%" height="15" fill="rgb(246,89,16)" fg:x="583" fg:w="6"/><text x="46.9647%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="47.1154%" y="229" width="0.0801%" height="15" fill="rgb(216,158,49)" fg:x="588" fg:w="1"/><text x="47.3654%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="47.1955%" y="245" width="0.1603%" height="15" fill="rgb(236,107,19)" fg:x="589" fg:w="2"/><text x="47.4455%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_expr (1 samples, 0.08%)</title><rect x="47.2756%" y="229" width="0.0801%" height="15" fill="rgb(228,185,30)" fg:x="590" fg:w="1"/><text x="47.5256%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="47.3558%" y="245" width="0.0801%" height="15" fill="rgb(246,134,8)" fg:x="591" fg:w="1"/><text x="47.6058%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="47.3558%" y="229" width="0.0801%" height="15" fill="rgb(214,143,50)" fg:x="591" fg:w="1"/><text x="47.6058%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.3558%" y="213" width="0.0801%" height="15" fill="rgb(228,75,8)" fg:x="591" fg:w="1"/><text x="47.6058%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.3558%" y="197" width="0.0801%" height="15" fill="rgb(207,175,4)" fg:x="591" fg:w="1"/><text x="47.6058%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.3558%" y="181" width="0.0801%" height="15" fill="rgb(205,108,24)" fg:x="591" fg:w="1"/><text x="47.6058%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (238 samples, 19.07%)</title><rect x="28.4455%" y="325" width="19.0705%" height="15" fill="rgb(244,120,49)" fg:x="355" fg:w="238"/><text x="28.6955%" y="335.50">&lt;regex::regex::string::Regex a..</text></g><g><title>regex::builders::Builder::build_one_string (238 samples, 19.07%)</title><rect x="28.4455%" y="309" width="19.0705%" height="15" fill="rgb(223,47,38)" fg:x="355" fg:w="238"/><text x="28.6955%" y="319.50">regex::builders::Builder::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (237 samples, 18.99%)</title><rect x="28.5256%" y="293" width="18.9904%" height="15" fill="rgb(229,179,11)" fg:x="356" fg:w="237"/><text x="28.7756%" y="303.50">regex_automata::meta::regex::B..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (10 samples, 0.80%)</title><rect x="46.7147%" y="277" width="0.8013%" height="15" fill="rgb(231,122,1)" fg:x="583" fg:w="10"/><text x="46.9647%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (10 samples, 0.80%)</title><rect x="46.7147%" y="261" width="0.8013%" height="15" fill="rgb(245,119,9)" fg:x="583" fg:w="10"/><text x="46.9647%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.4359%" y="245" width="0.0801%" height="15" fill="rgb(241,163,25)" fg:x="592" fg:w="1"/><text x="47.6859%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.4359%" y="229" width="0.0801%" height="15" fill="rgb(217,214,3)" fg:x="592" fg:w="1"/><text x="47.6859%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.5962%" y="293" width="0.0801%" height="15" fill="rgb(240,86,28)" fg:x="594" fg:w="1"/><text x="47.8462%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="47.6763%" y="277" width="0.0801%" height="15" fill="rgb(215,47,9)" fg:x="595" fg:w="1"/><text x="47.9263%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.6763%" y="261" width="0.0801%" height="15" fill="rgb(252,25,45)" fg:x="595" fg:w="1"/><text x="47.9263%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="47.6763%" y="293" width="0.1603%" height="15" fill="rgb(251,164,9)" fg:x="595" fg:w="2"/><text x="47.9263%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="47.7564%" y="277" width="0.0801%" height="15" fill="rgb(233,194,0)" fg:x="596" fg:w="1"/><text x="48.0064%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="47.8365%" y="277" width="0.0801%" height="15" fill="rgb(249,111,24)" fg:x="597" fg:w="1"/><text x="48.0865%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="47.9167%" y="277" width="0.0801%" height="15" fill="rgb(250,223,3)" fg:x="598" fg:w="1"/><text x="48.1667%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.9167%" y="261" width="0.0801%" height="15" fill="rgb(236,178,37)" fg:x="598" fg:w="1"/><text x="48.1667%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.56%)</title><rect x="47.5160%" y="325" width="0.5609%" height="15" fill="rgb(241,158,50)" fg:x="593" fg:w="7"/><text x="47.7660%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="47.5962%" y="309" width="0.4808%" height="15" fill="rgb(213,121,41)" fg:x="594" fg:w="6"/><text x="47.8462%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="47.8365%" y="293" width="0.2404%" height="15" fill="rgb(240,92,3)" fg:x="597" fg:w="3"/><text x="48.0865%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="47.9968%" y="277" width="0.0801%" height="15" fill="rgb(205,123,3)" fg:x="599" fg:w="1"/><text x="48.2468%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.9968%" y="261" width="0.0801%" height="15" fill="rgb(205,97,47)" fg:x="599" fg:w="1"/><text x="48.2468%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="48.0769%" y="309" width="0.1603%" height="15" fill="rgb(247,152,14)" fg:x="600" fg:w="2"/><text x="48.3269%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="48.0769%" y="293" width="0.1603%" height="15" fill="rgb(248,195,53)" fg:x="600" fg:w="2"/><text x="48.3269%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="48.0769%" y="277" width="0.1603%" height="15" fill="rgb(226,201,16)" fg:x="600" fg:w="2"/><text x="48.3269%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.1571%" y="261" width="0.0801%" height="15" fill="rgb(205,98,0)" fg:x="601" fg:w="1"/><text x="48.4071%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="48.2372%" y="245" width="0.0801%" height="15" fill="rgb(214,191,48)" fg:x="602" fg:w="1"/><text x="48.4872%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="48.2372%" y="229" width="0.0801%" height="15" fill="rgb(237,112,39)" fg:x="602" fg:w="1"/><text x="48.4872%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (15 samples, 1.20%)</title><rect x="48.2372%" y="261" width="1.2019%" height="15" fill="rgb(247,203,27)" fg:x="602" fg:w="15"/><text x="48.4872%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (14 samples, 1.12%)</title><rect x="48.3173%" y="245" width="1.1218%" height="15" fill="rgb(235,124,28)" fg:x="603" fg:w="14"/><text x="48.5673%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (5 samples, 0.40%)</title><rect x="49.0385%" y="229" width="0.4006%" height="15" fill="rgb(208,207,46)" fg:x="612" fg:w="5"/><text x="49.2885%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (263 samples, 21.07%)</title><rect x="28.4455%" y="341" width="21.0737%" height="15" fill="rgb(234,176,4)" fg:x="355" fg:w="263"/><text x="28.6955%" y="351.50">indefinite::rules::number::Number..</text></g><g><title>regex::regex::string::Regex::is_match_at (18 samples, 1.44%)</title><rect x="48.0769%" y="325" width="1.4423%" height="15" fill="rgb(230,133,28)" fg:x="600" fg:w="18"/><text x="48.3269%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.28%)</title><rect x="48.2372%" y="309" width="1.2821%" height="15" fill="rgb(211,137,40)" fg:x="602" fg:w="16"/><text x="48.4872%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.28%)</title><rect x="48.2372%" y="293" width="1.2821%" height="15" fill="rgb(254,35,13)" fg:x="602" fg:w="16"/><text x="48.4872%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (16 samples, 1.28%)</title><rect x="48.2372%" y="277" width="1.2821%" height="15" fill="rgb(225,49,51)" fg:x="602" fg:w="16"/><text x="48.4872%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="49.4391%" y="261" width="0.0801%" height="15" fill="rgb(251,10,15)" fg:x="617" fg:w="1"/><text x="49.6891%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="49.4391%" y="245" width="0.0801%" height="15" fill="rgb(228,207,15)" fg:x="617" fg:w="1"/><text x="49.6891%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.4391%" y="229" width="0.0801%" height="15" fill="rgb(241,99,19)" fg:x="617" fg:w="1"/><text x="49.6891%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.4391%" y="213" width="0.0801%" height="15" fill="rgb(207,104,49)" fg:x="617" fg:w="1"/><text x="49.6891%" y="223.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="49.5994%" y="293" width="0.0801%" height="15" fill="rgb(234,99,18)" fg:x="619" fg:w="1"/><text x="49.8494%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="49.7596%" y="261" width="0.1603%" height="15" fill="rgb(213,191,49)" fg:x="621" fg:w="2"/><text x="50.0096%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="49.7596%" y="245" width="0.1603%" height="15" fill="rgb(210,226,19)" fg:x="621" fg:w="2"/><text x="50.0096%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.8397%" y="229" width="0.0801%" height="15" fill="rgb(229,97,18)" fg:x="622" fg:w="1"/><text x="50.0897%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="49.9199%" y="229" width="0.1603%" height="15" fill="rgb(211,167,15)" fg:x="623" fg:w="2"/><text x="50.1699%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="49.9199%" y="213" width="0.1603%" height="15" fill="rgb(210,169,34)" fg:x="623" fg:w="2"/><text x="50.1699%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="49.9199%" y="197" width="0.1603%" height="15" fill="rgb(241,121,31)" fg:x="623" fg:w="2"/><text x="50.1699%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="49.9199%" y="181" width="0.1603%" height="15" fill="rgb(232,40,11)" fg:x="623" fg:w="2"/><text x="50.1699%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="49.9199%" y="261" width="0.2404%" height="15" fill="rgb(205,86,26)" fg:x="623" fg:w="3"/><text x="50.1699%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="49.9199%" y="245" width="0.2404%" height="15" fill="rgb(231,126,28)" fg:x="623" fg:w="3"/><text x="50.1699%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="50.0801%" y="229" width="0.0801%" height="15" fill="rgb(219,221,18)" fg:x="625" fg:w="1"/><text x="50.3301%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.0801%" y="213" width="0.0801%" height="15" fill="rgb(211,40,0)" fg:x="625" fg:w="1"/><text x="50.3301%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="50.0801%" y="197" width="0.0801%" height="15" fill="rgb(239,85,43)" fg:x="625" fg:w="1"/><text x="50.3301%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.4006%" y="245" width="0.0801%" height="15" fill="rgb(231,55,21)" fg:x="629" fg:w="1"/><text x="50.6506%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="50.4808%" y="245" width="0.0801%" height="15" fill="rgb(225,184,43)" fg:x="630" fg:w="1"/><text x="50.7308%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="50.4808%" y="229" width="0.0801%" height="15" fill="rgb(251,158,41)" fg:x="630" fg:w="1"/><text x="50.7308%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="50.4808%" y="213" width="0.0801%" height="15" fill="rgb(234,159,37)" fg:x="630" fg:w="1"/><text x="50.7308%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="50.6410%" y="229" width="0.3205%" height="15" fill="rgb(216,204,22)" fg:x="632" fg:w="4"/><text x="50.8910%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="50.5609%" y="245" width="0.4808%" height="15" fill="rgb(214,17,3)" fg:x="631" fg:w="6"/><text x="50.8109%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="50.9615%" y="229" width="0.0801%" height="15" fill="rgb(212,111,17)" fg:x="636" fg:w="1"/><text x="51.2115%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="51.0417%" y="245" width="0.1603%" height="15" fill="rgb(221,157,24)" fg:x="637" fg:w="2"/><text x="51.2917%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="51.1218%" y="229" width="0.0801%" height="15" fill="rgb(252,16,13)" fg:x="638" fg:w="1"/><text x="51.3718%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="51.2019%" y="229" width="0.2404%" height="15" fill="rgb(221,62,2)" fg:x="639" fg:w="3"/><text x="51.4519%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="51.2019%" y="213" width="0.2404%" height="15" fill="rgb(247,87,22)" fg:x="639" fg:w="3"/><text x="51.4519%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="51.2019%" y="197" width="0.2404%" height="15" fill="rgb(215,73,9)" fg:x="639" fg:w="3"/><text x="51.4519%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="51.2019%" y="181" width="0.2404%" height="15" fill="rgb(207,175,33)" fg:x="639" fg:w="3"/><text x="51.4519%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="51.3622%" y="165" width="0.0801%" height="15" fill="rgb(243,129,54)" fg:x="641" fg:w="1"/><text x="51.6122%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.3622%" y="149" width="0.0801%" height="15" fill="rgb(227,119,45)" fg:x="641" fg:w="1"/><text x="51.6122%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.5224%" y="213" width="0.0801%" height="15" fill="rgb(205,109,36)" fg:x="643" fg:w="1"/><text x="51.7724%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="51.6026%" y="213" width="0.0801%" height="15" fill="rgb(205,6,39)" fg:x="644" fg:w="1"/><text x="51.8526%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.6026%" y="197" width="0.0801%" height="15" fill="rgb(221,32,16)" fg:x="644" fg:w="1"/><text x="51.8526%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.0833%" y="197" width="0.0801%" height="15" fill="rgb(228,144,50)" fg:x="650" fg:w="1"/><text x="52.3333%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (13 samples, 1.04%)</title><rect x="51.2019%" y="245" width="1.0417%" height="15" fill="rgb(229,201,53)" fg:x="639" fg:w="13"/><text x="51.4519%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.80%)</title><rect x="51.4423%" y="229" width="0.8013%" height="15" fill="rgb(249,153,27)" fg:x="642" fg:w="10"/><text x="51.6923%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="51.6827%" y="213" width="0.5609%" height="15" fill="rgb(227,106,25)" fg:x="645" fg:w="7"/><text x="51.9327%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="52.1635%" y="197" width="0.0801%" height="15" fill="rgb(230,65,29)" fg:x="651" fg:w="1"/><text x="52.4135%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.1635%" y="181" width="0.0801%" height="15" fill="rgb(221,57,46)" fg:x="651" fg:w="1"/><text x="52.4135%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.1635%" y="165" width="0.0801%" height="15" fill="rgb(229,161,17)" fg:x="651" fg:w="1"/><text x="52.4135%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (27 samples, 2.16%)</title><rect x="50.1603%" y="261" width="2.1635%" height="15" fill="rgb(222,213,11)" fg:x="626" fg:w="27"/><text x="50.4103%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="52.2436%" y="245" width="0.0801%" height="15" fill="rgb(235,35,13)" fg:x="652" fg:w="1"/><text x="52.4936%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="52.2436%" y="229" width="0.0801%" height="15" fill="rgb(233,158,34)" fg:x="652" fg:w="1"/><text x="52.4936%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="52.2436%" y="213" width="0.0801%" height="15" fill="rgb(215,151,48)" fg:x="652" fg:w="1"/><text x="52.4936%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.2436%" y="197" width="0.0801%" height="15" fill="rgb(229,84,14)" fg:x="652" fg:w="1"/><text x="52.4936%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="52.4038%" y="213" width="0.0801%" height="15" fill="rgb(229,68,14)" fg:x="654" fg:w="1"/><text x="52.6538%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.4038%" y="197" width="0.0801%" height="15" fill="rgb(243,106,26)" fg:x="654" fg:w="1"/><text x="52.6538%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (3 samples, 0.24%)</title><rect x="52.4840%" y="213" width="0.2404%" height="15" fill="rgb(206,45,38)" fg:x="655" fg:w="3"/><text x="52.7340%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (2 samples, 0.16%)</title><rect x="52.5641%" y="197" width="0.1603%" height="15" fill="rgb(226,6,15)" fg:x="656" fg:w="2"/><text x="52.8141%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="52.4038%" y="229" width="0.5609%" height="15" fill="rgb(232,22,54)" fg:x="654" fg:w="7"/><text x="52.6538%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="52.7244%" y="213" width="0.2404%" height="15" fill="rgb(229,222,32)" fg:x="658" fg:w="3"/><text x="52.9744%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="52.7244%" y="197" width="0.2404%" height="15" fill="rgb(228,62,29)" fg:x="658" fg:w="3"/><text x="52.9744%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="52.7244%" y="181" width="0.2404%" height="15" fill="rgb(251,103,34)" fg:x="658" fg:w="3"/><text x="52.9744%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="52.7244%" y="165" width="0.2404%" height="15" fill="rgb(233,12,30)" fg:x="658" fg:w="3"/><text x="52.9744%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.80%)</title><rect x="52.3237%" y="261" width="0.8013%" height="15" fill="rgb(238,52,0)" fg:x="653" fg:w="10"/><text x="52.5737%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.80%)</title><rect x="52.3237%" y="245" width="0.8013%" height="15" fill="rgb(223,98,5)" fg:x="653" fg:w="10"/><text x="52.5737%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="52.9647%" y="229" width="0.1603%" height="15" fill="rgb(228,75,37)" fg:x="661" fg:w="2"/><text x="53.2147%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.0449%" y="213" width="0.0801%" height="15" fill="rgb(205,115,49)" fg:x="662" fg:w="1"/><text x="53.2949%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.2853%" y="213" width="0.0801%" height="15" fill="rgb(250,154,43)" fg:x="665" fg:w="1"/><text x="53.5353%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.2853%" y="197" width="0.0801%" height="15" fill="rgb(226,43,29)" fg:x="665" fg:w="1"/><text x="53.5353%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.2853%" y="181" width="0.0801%" height="15" fill="rgb(249,228,39)" fg:x="665" fg:w="1"/><text x="53.5353%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="53.2051%" y="229" width="0.3205%" height="15" fill="rgb(216,79,43)" fg:x="664" fg:w="4"/><text x="53.4551%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="53.3654%" y="213" width="0.1603%" height="15" fill="rgb(228,95,12)" fg:x="666" fg:w="2"/><text x="53.6154%" y="223.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="53.4455%" y="197" width="0.0801%" height="15" fill="rgb(249,221,15)" fg:x="667" fg:w="1"/><text x="53.6955%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="53.5256%" y="229" width="0.0801%" height="15" fill="rgb(233,34,13)" fg:x="668" fg:w="1"/><text x="53.7756%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="53.6058%" y="229" width="0.0801%" height="15" fill="rgb(214,103,39)" fg:x="669" fg:w="1"/><text x="53.8558%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (51 samples, 4.09%)</title><rect x="49.6795%" y="277" width="4.0865%" height="15" fill="rgb(251,126,39)" fg:x="620" fg:w="51"/><text x="49.9295%" y="287.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.64%)</title><rect x="53.1250%" y="261" width="0.6410%" height="15" fill="rgb(214,216,36)" fg:x="663" fg:w="8"/><text x="53.3750%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.64%)</title><rect x="53.1250%" y="245" width="0.6410%" height="15" fill="rgb(220,221,8)" fg:x="663" fg:w="8"/><text x="53.3750%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.6859%" y="229" width="0.0801%" height="15" fill="rgb(240,216,3)" fg:x="670" fg:w="1"/><text x="53.9359%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (53 samples, 4.25%)</title><rect x="49.5994%" y="309" width="4.2468%" height="15" fill="rgb(232,218,17)" fg:x="619" fg:w="53"/><text x="49.8494%" y="319.50">&lt;rege..</text></g><g><title>regex::builders::Builder::build_one_string (52 samples, 4.17%)</title><rect x="49.6795%" y="293" width="4.1667%" height="15" fill="rgb(229,163,45)" fg:x="620" fg:w="52"/><text x="49.9295%" y="303.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="53.7660%" y="277" width="0.0801%" height="15" fill="rgb(231,110,42)" fg:x="671" fg:w="1"/><text x="54.0160%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::new (1 samples, 0.08%)</title><rect x="53.7660%" y="261" width="0.0801%" height="15" fill="rgb(208,170,48)" fg:x="671" fg:w="1"/><text x="54.0160%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::match_pattern (1 samples, 0.08%)</title><rect x="53.8462%" y="277" width="0.0801%" height="15" fill="rgb(239,116,25)" fg:x="672" fg:w="1"/><text x="54.0962%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="53.9263%" y="277" width="0.0801%" height="15" fill="rgb(219,200,50)" fg:x="673" fg:w="1"/><text x="54.1763%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="53.9263%" y="261" width="0.0801%" height="15" fill="rgb(245,200,0)" fg:x="673" fg:w="1"/><text x="54.1763%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="53.8462%" y="309" width="0.2404%" height="15" fill="rgb(245,119,33)" fg:x="672" fg:w="3"/><text x="54.0962%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="53.8462%" y="293" width="0.2404%" height="15" fill="rgb(231,125,12)" fg:x="672" fg:w="3"/><text x="54.0962%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="54.0064%" y="277" width="0.0801%" height="15" fill="rgb(216,96,41)" fg:x="674" fg:w="1"/><text x="54.2564%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.0064%" y="261" width="0.0801%" height="15" fill="rgb(248,43,45)" fg:x="674" fg:w="1"/><text x="54.2564%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="54.0865%" y="261" width="0.0801%" height="15" fill="rgb(217,222,7)" fg:x="675" fg:w="1"/><text x="54.3365%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.1667%" y="245" width="0.0801%" height="15" fill="rgb(233,28,6)" fg:x="676" fg:w="1"/><text x="54.4167%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="54.0865%" y="277" width="0.2404%" height="15" fill="rgb(231,218,15)" fg:x="675" fg:w="3"/><text x="54.3365%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="54.1667%" y="261" width="0.1603%" height="15" fill="rgb(226,171,48)" fg:x="676" fg:w="2"/><text x="54.4167%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="54.2468%" y="245" width="0.0801%" height="15" fill="rgb(235,201,9)" fg:x="677" fg:w="1"/><text x="54.4968%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.2468%" y="229" width="0.0801%" height="15" fill="rgb(217,80,15)" fg:x="677" fg:w="1"/><text x="54.4968%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="54.3269%" y="245" width="0.1603%" height="15" fill="rgb(219,152,8)" fg:x="678" fg:w="2"/><text x="54.5769%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="54.3269%" y="229" width="0.1603%" height="15" fill="rgb(243,107,38)" fg:x="678" fg:w="2"/><text x="54.5769%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="54.0865%" y="309" width="0.4808%" height="15" fill="rgb(231,17,5)" fg:x="675" fg:w="6"/><text x="54.3365%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="54.0865%" y="293" width="0.4808%" height="15" fill="rgb(209,25,54)" fg:x="675" fg:w="6"/><text x="54.3365%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="54.3269%" y="277" width="0.2404%" height="15" fill="rgb(219,0,2)" fg:x="678" fg:w="3"/><text x="54.5769%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="54.3269%" y="261" width="0.2404%" height="15" fill="rgb(246,9,5)" fg:x="678" fg:w="3"/><text x="54.5769%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.4872%" y="245" width="0.0801%" height="15" fill="rgb(226,159,4)" fg:x="680" fg:w="1"/><text x="54.7372%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="54.5673%" y="245" width="0.4006%" height="15" fill="rgb(219,175,34)" fg:x="681" fg:w="5"/><text x="54.8173%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="54.8878%" y="229" width="0.0801%" height="15" fill="rgb(236,10,46)" fg:x="685" fg:w="1"/><text x="55.1378%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="54.8878%" y="213" width="0.0801%" height="15" fill="rgb(240,211,16)" fg:x="685" fg:w="1"/><text x="55.1378%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="54.5673%" y="261" width="0.5609%" height="15" fill="rgb(205,3,43)" fg:x="681" fg:w="7"/><text x="54.8173%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="54.9679%" y="245" width="0.1603%" height="15" fill="rgb(245,7,22)" fg:x="686" fg:w="2"/><text x="55.2179%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.0481%" y="229" width="0.0801%" height="15" fill="rgb(239,132,32)" fg:x="687" fg:w="1"/><text x="55.2981%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.0481%" y="213" width="0.0801%" height="15" fill="rgb(228,202,34)" fg:x="687" fg:w="1"/><text x="55.2981%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.0481%" y="197" width="0.0801%" height="15" fill="rgb(254,200,22)" fg:x="687" fg:w="1"/><text x="55.2981%" y="207.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (71 samples, 5.69%)</title><rect x="49.5192%" y="325" width="5.6891%" height="15" fill="rgb(219,10,39)" fg:x="618" fg:w="71"/><text x="49.7692%" y="335.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="54.5673%" y="309" width="0.6410%" height="15" fill="rgb(226,210,39)" fg:x="681" fg:w="8"/><text x="54.8173%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="54.5673%" y="293" width="0.6410%" height="15" fill="rgb(208,219,16)" fg:x="681" fg:w="8"/><text x="54.8173%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="54.5673%" y="277" width="0.6410%" height="15" fill="rgb(216,158,51)" fg:x="681" fg:w="8"/><text x="54.8173%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="55.1282%" y="261" width="0.0801%" height="15" fill="rgb(233,14,44)" fg:x="688" fg:w="1"/><text x="55.3782%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="55.1282%" y="245" width="0.0801%" height="15" fill="rgb(237,97,39)" fg:x="688" fg:w="1"/><text x="55.3782%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.1282%" y="229" width="0.0801%" height="15" fill="rgb(218,198,43)" fg:x="688" fg:w="1"/><text x="55.3782%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.1282%" y="213" width="0.0801%" height="15" fill="rgb(231,104,20)" fg:x="688" fg:w="1"/><text x="55.3782%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.1282%" y="197" width="0.0801%" height="15" fill="rgb(254,36,13)" fg:x="688" fg:w="1"/><text x="55.3782%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (546 samples, 43.75%)</title><rect x="11.6186%" y="421" width="43.7500%" height="15" fill="rgb(248,14,50)" fg:x="145" fg:w="546"/><text x="11.8686%" y="431.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;r..</text></g><g><title>plugins_core::looking::model::qualify_name (534 samples, 42.79%)</title><rect x="12.5801%" y="405" width="42.7885%" height="15" fill="rgb(217,107,29)" fg:x="157" fg:w="534"/><text x="12.8301%" y="415.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (534 samples, 42.79%)</title><rect x="12.5801%" y="389" width="42.7885%" height="15" fill="rgb(251,169,33)" fg:x="157" fg:w="534"/><text x="12.8301%" y="399.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (534 samples, 42.79%)</title><rect x="12.5801%" y="373" width="42.7885%" height="15" fill="rgb(217,108,32)" fg:x="157" fg:w="534"/><text x="12.8301%" y="383.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (532 samples, 42.63%)</title><rect x="12.7404%" y="357" width="42.6282%" height="15" fill="rgb(219,66,42)" fg:x="159" fg:w="532"/><text x="12.9904%" y="367.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (73 samples, 5.85%)</title><rect x="49.5192%" y="341" width="5.8494%" height="15" fill="rgb(206,180,7)" fg:x="618" fg:w="73"/><text x="49.7692%" y="351.50">indefin..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="55.2083%" y="325" width="0.1603%" height="15" fill="rgb(208,226,31)" fg:x="689" fg:w="2"/><text x="55.4583%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="55.3686%" y="421" width="0.0801%" height="15" fill="rgb(218,26,49)" fg:x="691" fg:w="1"/><text x="55.6186%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="55.4487%" y="421" width="0.0801%" height="15" fill="rgb(233,197,48)" fg:x="692" fg:w="1"/><text x="55.6987%" y="431.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="55.5288%" y="389" width="0.1603%" height="15" fill="rgb(252,181,51)" fg:x="693" fg:w="2"/><text x="55.7788%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="55.5288%" y="373" width="0.1603%" height="15" fill="rgb(253,90,19)" fg:x="693" fg:w="2"/><text x="55.7788%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="55.5288%" y="357" width="0.1603%" height="15" fill="rgb(215,171,30)" fg:x="693" fg:w="2"/><text x="55.7788%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="55.6090%" y="341" width="0.0801%" height="15" fill="rgb(214,222,9)" fg:x="694" fg:w="1"/><text x="55.8590%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.6090%" y="325" width="0.0801%" height="15" fill="rgb(223,3,22)" fg:x="694" fg:w="1"/><text x="55.8590%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="55.7692%" y="357" width="0.0801%" height="15" fill="rgb(225,196,46)" fg:x="696" fg:w="1"/><text x="56.0192%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="55.8494%" y="277" width="0.0801%" height="15" fill="rgb(209,110,37)" fg:x="697" fg:w="1"/><text x="56.0994%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="55.8494%" y="357" width="0.1603%" height="15" fill="rgb(249,89,12)" fg:x="697" fg:w="2"/><text x="56.0994%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="55.8494%" y="341" width="0.1603%" height="15" fill="rgb(226,27,33)" fg:x="697" fg:w="2"/><text x="56.0994%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="55.8494%" y="325" width="0.1603%" height="15" fill="rgb(213,82,22)" fg:x="697" fg:w="2"/><text x="56.0994%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="55.8494%" y="309" width="0.1603%" height="15" fill="rgb(248,140,0)" fg:x="697" fg:w="2"/><text x="56.0994%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="55.8494%" y="293" width="0.1603%" height="15" fill="rgb(228,106,3)" fg:x="697" fg:w="2"/><text x="56.0994%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="55.9295%" y="277" width="0.0801%" height="15" fill="rgb(209,23,37)" fg:x="698" fg:w="1"/><text x="56.1795%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (555 samples, 44.47%)</title><rect x="11.6186%" y="613" width="44.4712%" height="15" fill="rgb(241,93,50)" fg:x="145" fg:w="555"/><text x="11.8686%" y="623.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (555 samples, 44.47%)</title><rect x="11.6186%" y="597" width="44.4712%" height="15" fill="rgb(253,46,43)" fg:x="145" fg:w="555"/><text x="11.8686%" y="607.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (555 samples, 44.47%)</title><rect x="11.6186%" y="581" width="44.4712%" height="15" fill="rgb(226,206,43)" fg:x="145" fg:w="555"/><text x="11.8686%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (555 samples, 44.47%)</title><rect x="11.6186%" y="565" width="44.4712%" height="15" fill="rgb(217,54,7)" fg:x="145" fg:w="555"/><text x="11.8686%" y="575.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::h..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (555 samples, 44.47%)</title><rect x="11.6186%" y="549" width="44.4712%" height="15" fill="rgb(223,5,52)" fg:x="145" fg:w="555"/><text x="11.8686%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (555 samples, 44.47%)</title><rect x="11.6186%" y="533" width="44.4712%" height="15" fill="rgb(206,52,46)" fg:x="145" fg:w="555"/><text x="11.8686%" y="543.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (555 samples, 44.47%)</title><rect x="11.6186%" y="517" width="44.4712%" height="15" fill="rgb(253,136,11)" fg:x="145" fg:w="555"/><text x="11.8686%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (555 samples, 44.47%)</title><rect x="11.6186%" y="501" width="44.4712%" height="15" fill="rgb(208,106,33)" fg:x="145" fg:w="555"/><text x="11.8686%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (555 samples, 44.47%)</title><rect x="11.6186%" y="485" width="44.4712%" height="15" fill="rgb(206,54,4)" fg:x="145" fg:w="555"/><text x="11.8686%" y="495.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (555 samples, 44.47%)</title><rect x="11.6186%" y="469" width="44.4712%" height="15" fill="rgb(213,3,15)" fg:x="145" fg:w="555"/><text x="11.8686%" y="479.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (555 samples, 44.47%)</title><rect x="11.6186%" y="453" width="44.4712%" height="15" fill="rgb(252,211,39)" fg:x="145" fg:w="555"/><text x="11.8686%" y="463.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::..</text></g><g><title>plugins_core::looking::model::new_area_observation (555 samples, 44.47%)</title><rect x="11.6186%" y="437" width="44.4712%" height="15" fill="rgb(223,6,36)" fg:x="145" fg:w="555"/><text x="11.8686%" y="447.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (7 samples, 0.56%)</title><rect x="55.5288%" y="421" width="0.5609%" height="15" fill="rgb(252,169,45)" fg:x="693" fg:w="7"/><text x="55.7788%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (7 samples, 0.56%)</title><rect x="55.5288%" y="405" width="0.5609%" height="15" fill="rgb(212,48,26)" fg:x="693" fg:w="7"/><text x="55.7788%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="55.6891%" y="389" width="0.4006%" height="15" fill="rgb(251,102,48)" fg:x="695" fg:w="5"/><text x="55.9391%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="55.6891%" y="373" width="0.4006%" height="15" fill="rgb(243,208,16)" fg:x="695" fg:w="5"/><text x="55.9391%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="56.0096%" y="357" width="0.0801%" height="15" fill="rgb(219,96,24)" fg:x="699" fg:w="1"/><text x="56.2596%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.0096%" y="341" width="0.0801%" height="15" fill="rgb(219,33,29)" fg:x="699" fg:w="1"/><text x="56.2596%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="56.0096%" y="325" width="0.0801%" height="15" fill="rgb(223,176,5)" fg:x="699" fg:w="1"/><text x="56.2596%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="56.0096%" y="309" width="0.0801%" height="15" fill="rgb(228,140,14)" fg:x="699" fg:w="1"/><text x="56.2596%" y="319.50"></text></g><g><title>serde_json::value::de::SeqDeserializer::new (1 samples, 0.08%)</title><rect x="56.0096%" y="293" width="0.0801%" height="15" fill="rgb(217,179,31)" fg:x="699" fg:w="1"/><text x="56.2596%" y="303.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.0897%" y="613" width="0.0801%" height="15" fill="rgb(230,9,30)" fg:x="700" fg:w="1"/><text x="56.3397%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.0897%" y="597" width="0.0801%" height="15" fill="rgb(230,136,20)" fg:x="700" fg:w="1"/><text x="56.3397%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.0897%" y="581" width="0.0801%" height="15" fill="rgb(215,210,22)" fg:x="700" fg:w="1"/><text x="56.3397%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="56.0897%" y="565" width="0.0801%" height="15" fill="rgb(218,43,5)" fg:x="700" fg:w="1"/><text x="56.3397%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="56.0897%" y="549" width="0.0801%" height="15" fill="rgb(216,11,5)" fg:x="700" fg:w="1"/><text x="56.3397%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="56.0897%" y="533" width="0.0801%" height="15" fill="rgb(209,82,29)" fg:x="700" fg:w="1"/><text x="56.3397%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="56.0897%" y="517" width="0.0801%" height="15" fill="rgb(244,115,12)" fg:x="700" fg:w="1"/><text x="56.3397%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="56.0897%" y="501" width="0.0801%" height="15" fill="rgb(222,82,18)" fg:x="700" fg:w="1"/><text x="56.3397%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="56.3301%" y="517" width="0.2404%" height="15" fill="rgb(249,227,8)" fg:x="703" fg:w="3"/><text x="56.5801%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="56.3301%" y="501" width="0.2404%" height="15" fill="rgb(253,141,45)" fg:x="703" fg:w="3"/><text x="56.5801%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="56.4103%" y="485" width="0.1603%" height="15" fill="rgb(234,184,4)" fg:x="704" fg:w="2"/><text x="56.6603%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="56.4103%" y="469" width="0.1603%" height="15" fill="rgb(218,194,23)" fg:x="704" fg:w="2"/><text x="56.6603%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (6 samples, 0.48%)</title><rect x="56.1699%" y="581" width="0.4808%" height="15" fill="rgb(235,66,41)" fg:x="701" fg:w="6"/><text x="56.4199%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="56.1699%" y="565" width="0.4808%" height="15" fill="rgb(245,217,1)" fg:x="701" fg:w="6"/><text x="56.4199%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="56.2500%" y="549" width="0.4006%" height="15" fill="rgb(229,91,1)" fg:x="702" fg:w="5"/><text x="56.5000%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="56.3301%" y="533" width="0.3205%" height="15" fill="rgb(207,101,30)" fg:x="703" fg:w="4"/><text x="56.5801%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.5705%" y="517" width="0.0801%" height="15" fill="rgb(223,82,49)" fg:x="706" fg:w="1"/><text x="56.8205%" y="527.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="56.6506%" y="533" width="0.2404%" height="15" fill="rgb(218,167,17)" fg:x="707" fg:w="3"/><text x="56.9006%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="56.6506%" y="549" width="0.3205%" height="15" fill="rgb(208,103,14)" fg:x="707" fg:w="4"/><text x="56.9006%" y="559.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="56.8910%" y="533" width="0.0801%" height="15" fill="rgb(238,20,8)" fg:x="710" fg:w="1"/><text x="57.1410%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="56.8910%" y="517" width="0.0801%" height="15" fill="rgb(218,80,54)" fg:x="710" fg:w="1"/><text x="57.1410%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="56.8910%" y="501" width="0.0801%" height="15" fill="rgb(240,144,17)" fg:x="710" fg:w="1"/><text x="57.1410%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="56.8910%" y="485" width="0.0801%" height="15" fill="rgb(245,27,50)" fg:x="710" fg:w="1"/><text x="57.1410%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="56.8910%" y="469" width="0.0801%" height="15" fill="rgb(251,51,7)" fg:x="710" fg:w="1"/><text x="57.1410%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="56.8910%" y="453" width="0.0801%" height="15" fill="rgb(245,217,29)" fg:x="710" fg:w="1"/><text x="57.1410%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.8910%" y="437" width="0.0801%" height="15" fill="rgb(221,176,29)" fg:x="710" fg:w="1"/><text x="57.1410%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.8910%" y="421" width="0.0801%" height="15" fill="rgb(212,180,24)" fg:x="710" fg:w="1"/><text x="57.1410%" y="431.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="56.9712%" y="549" width="0.0801%" height="15" fill="rgb(254,24,2)" fg:x="711" fg:w="1"/><text x="57.2212%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.0513%" y="501" width="0.0801%" height="15" fill="rgb(230,100,2)" fg:x="712" fg:w="1"/><text x="57.3013%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="57.1314%" y="485" width="0.2404%" height="15" fill="rgb(219,142,25)" fg:x="713" fg:w="3"/><text x="57.3814%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (3 samples, 0.24%)</title><rect x="57.1314%" y="469" width="0.2404%" height="15" fill="rgb(240,73,43)" fg:x="713" fg:w="3"/><text x="57.3814%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="57.2917%" y="453" width="0.0801%" height="15" fill="rgb(214,114,15)" fg:x="715" fg:w="1"/><text x="57.5417%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="57.2917%" y="437" width="0.0801%" height="15" fill="rgb(207,130,4)" fg:x="715" fg:w="1"/><text x="57.5417%" y="447.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="57.2917%" y="421" width="0.0801%" height="15" fill="rgb(221,25,40)" fg:x="715" fg:w="1"/><text x="57.5417%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.2917%" y="405" width="0.0801%" height="15" fill="rgb(241,184,7)" fg:x="715" fg:w="1"/><text x="57.5417%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.2917%" y="389" width="0.0801%" height="15" fill="rgb(235,159,4)" fg:x="715" fg:w="1"/><text x="57.5417%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.3718%" y="485" width="0.0801%" height="15" fill="rgb(214,87,48)" fg:x="716" fg:w="1"/><text x="57.6218%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="57.4519%" y="373" width="0.0801%" height="15" fill="rgb(246,198,24)" fg:x="717" fg:w="1"/><text x="57.7019%" y="383.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="57.4519%" y="357" width="0.0801%" height="15" fill="rgb(209,66,40)" fg:x="717" fg:w="1"/><text x="57.7019%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="57.4519%" y="341" width="0.0801%" height="15" fill="rgb(233,147,39)" fg:x="717" fg:w="1"/><text x="57.7019%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="57.4519%" y="325" width="0.0801%" height="15" fill="rgb(231,145,52)" fg:x="717" fg:w="1"/><text x="57.7019%" y="335.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="57.4519%" y="309" width="0.0801%" height="15" fill="rgb(206,20,26)" fg:x="717" fg:w="1"/><text x="57.7019%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.4519%" y="293" width="0.0801%" height="15" fill="rgb(238,220,4)" fg:x="717" fg:w="1"/><text x="57.7019%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.4519%" y="277" width="0.0801%" height="15" fill="rgb(252,195,42)" fg:x="717" fg:w="1"/><text x="57.7019%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.4519%" y="261" width="0.0801%" height="15" fill="rgb(209,10,6)" fg:x="717" fg:w="1"/><text x="57.7019%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.4519%" y="245" width="0.0801%" height="15" fill="rgb(229,3,52)" fg:x="717" fg:w="1"/><text x="57.7019%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="57.4519%" y="229" width="0.0801%" height="15" fill="rgb(253,49,37)" fg:x="717" fg:w="1"/><text x="57.7019%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.4519%" y="213" width="0.0801%" height="15" fill="rgb(240,103,49)" fg:x="717" fg:w="1"/><text x="57.7019%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="57.5321%" y="373" width="0.0801%" height="15" fill="rgb(250,182,30)" fg:x="718" fg:w="1"/><text x="57.7821%" y="383.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="57.5321%" y="357" width="0.0801%" height="15" fill="rgb(248,8,30)" fg:x="718" fg:w="1"/><text x="57.7821%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="57.5321%" y="341" width="0.0801%" height="15" fill="rgb(237,120,30)" fg:x="718" fg:w="1"/><text x="57.7821%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="57.5321%" y="325" width="0.0801%" height="15" fill="rgb(221,146,34)" fg:x="718" fg:w="1"/><text x="57.7821%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="57.5321%" y="309" width="0.0801%" height="15" fill="rgb(242,55,13)" fg:x="718" fg:w="1"/><text x="57.7821%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="57.5321%" y="293" width="0.0801%" height="15" fill="rgb(242,112,31)" fg:x="718" fg:w="1"/><text x="57.7821%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="57.5321%" y="277" width="0.0801%" height="15" fill="rgb(249,192,27)" fg:x="718" fg:w="1"/><text x="57.7821%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="57.5321%" y="261" width="0.0801%" height="15" fill="rgb(208,204,44)" fg:x="718" fg:w="1"/><text x="57.7821%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="57.5321%" y="245" width="0.0801%" height="15" fill="rgb(208,93,54)" fg:x="718" fg:w="1"/><text x="57.7821%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="57.5321%" y="229" width="0.0801%" height="15" fill="rgb(242,1,31)" fg:x="718" fg:w="1"/><text x="57.7821%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.5321%" y="213" width="0.0801%" height="15" fill="rgb(241,83,25)" fg:x="718" fg:w="1"/><text x="57.7821%" y="223.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="57.4519%" y="485" width="0.2404%" height="15" fill="rgb(205,169,50)" fg:x="717" fg:w="3"/><text x="57.7019%" y="495.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (3 samples, 0.24%)</title><rect x="57.4519%" y="469" width="0.2404%" height="15" fill="rgb(239,186,37)" fg:x="717" fg:w="3"/><text x="57.7019%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (3 samples, 0.24%)</title><rect x="57.4519%" y="453" width="0.2404%" height="15" fill="rgb(205,221,10)" fg:x="717" fg:w="3"/><text x="57.7019%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="57.4519%" y="437" width="0.2404%" height="15" fill="rgb(218,196,15)" fg:x="717" fg:w="3"/><text x="57.7019%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="57.4519%" y="421" width="0.2404%" height="15" fill="rgb(218,196,35)" fg:x="717" fg:w="3"/><text x="57.7019%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="57.4519%" y="405" width="0.2404%" height="15" fill="rgb(233,63,24)" fg:x="717" fg:w="3"/><text x="57.7019%" y="415.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="57.4519%" y="389" width="0.2404%" height="15" fill="rgb(225,8,4)" fg:x="717" fg:w="3"/><text x="57.7019%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="57.6122%" y="373" width="0.0801%" height="15" fill="rgb(234,105,35)" fg:x="719" fg:w="1"/><text x="57.8622%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="57.6122%" y="357" width="0.0801%" height="15" fill="rgb(236,21,32)" fg:x="719" fg:w="1"/><text x="57.8622%" y="367.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="57.6122%" y="341" width="0.0801%" height="15" fill="rgb(228,109,6)" fg:x="719" fg:w="1"/><text x="57.8622%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.6122%" y="325" width="0.0801%" height="15" fill="rgb(229,215,31)" fg:x="719" fg:w="1"/><text x="57.8622%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.6122%" y="309" width="0.0801%" height="15" fill="rgb(221,52,54)" fg:x="719" fg:w="1"/><text x="57.8622%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.6122%" y="293" width="0.0801%" height="15" fill="rgb(252,129,43)" fg:x="719" fg:w="1"/><text x="57.8622%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.6122%" y="277" width="0.0801%" height="15" fill="rgb(248,183,27)" fg:x="719" fg:w="1"/><text x="57.8622%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.6122%" y="261" width="0.0801%" height="15" fill="rgb(250,0,22)" fg:x="719" fg:w="1"/><text x="57.8622%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.6122%" y="245" width="0.0801%" height="15" fill="rgb(213,166,10)" fg:x="719" fg:w="1"/><text x="57.8622%" y="255.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (10 samples, 0.80%)</title><rect x="57.1314%" y="501" width="0.8013%" height="15" fill="rgb(207,163,36)" fg:x="713" fg:w="10"/><text x="57.3814%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="57.6923%" y="485" width="0.2404%" height="15" fill="rgb(208,122,22)" fg:x="720" fg:w="3"/><text x="57.9423%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="57.6923%" y="469" width="0.2404%" height="15" fill="rgb(207,104,49)" fg:x="720" fg:w="3"/><text x="57.9423%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.8526%" y="453" width="0.0801%" height="15" fill="rgb(248,211,50)" fg:x="722" fg:w="1"/><text x="58.1026%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.8526%" y="437" width="0.0801%" height="15" fill="rgb(217,13,45)" fg:x="722" fg:w="1"/><text x="58.1026%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="57.8526%" y="421" width="0.0801%" height="15" fill="rgb(211,216,49)" fg:x="722" fg:w="1"/><text x="58.1026%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="57.8526%" y="405" width="0.0801%" height="15" fill="rgb(221,58,53)" fg:x="722" fg:w="1"/><text x="58.1026%" y="415.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="57.8526%" y="389" width="0.0801%" height="15" fill="rgb(220,112,41)" fg:x="722" fg:w="1"/><text x="58.1026%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.8526%" y="373" width="0.0801%" height="15" fill="rgb(236,38,28)" fg:x="722" fg:w="1"/><text x="58.1026%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.8526%" y="357" width="0.0801%" height="15" fill="rgb(227,195,22)" fg:x="722" fg:w="1"/><text x="58.1026%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="57.8526%" y="341" width="0.0801%" height="15" fill="rgb(214,55,33)" fg:x="722" fg:w="1"/><text x="58.1026%" y="351.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="57.9327%" y="453" width="0.2404%" height="15" fill="rgb(248,80,13)" fg:x="723" fg:w="3"/><text x="58.1827%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="57.9327%" y="437" width="0.2404%" height="15" fill="rgb(238,52,6)" fg:x="723" fg:w="3"/><text x="58.1827%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="58.0128%" y="421" width="0.1603%" height="15" fill="rgb(224,198,47)" fg:x="724" fg:w="2"/><text x="58.2628%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="58.0128%" y="405" width="0.1603%" height="15" fill="rgb(233,171,20)" fg:x="724" fg:w="2"/><text x="58.2628%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.0929%" y="389" width="0.0801%" height="15" fill="rgb(241,30,25)" fg:x="725" fg:w="1"/><text x="58.3429%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.0929%" y="373" width="0.0801%" height="15" fill="rgb(207,171,38)" fg:x="725" fg:w="1"/><text x="58.3429%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.0929%" y="357" width="0.0801%" height="15" fill="rgb(234,70,1)" fg:x="725" fg:w="1"/><text x="58.3429%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.0929%" y="341" width="0.0801%" height="15" fill="rgb(232,178,18)" fg:x="725" fg:w="1"/><text x="58.3429%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.0929%" y="325" width="0.0801%" height="15" fill="rgb(241,78,40)" fg:x="725" fg:w="1"/><text x="58.3429%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.0929%" y="309" width="0.0801%" height="15" fill="rgb(222,35,25)" fg:x="725" fg:w="1"/><text x="58.3429%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.0929%" y="293" width="0.0801%" height="15" fill="rgb(207,92,16)" fg:x="725" fg:w="1"/><text x="58.3429%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="58.0929%" y="277" width="0.0801%" height="15" fill="rgb(216,59,51)" fg:x="725" fg:w="1"/><text x="58.3429%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="58.0929%" y="261" width="0.0801%" height="15" fill="rgb(213,80,28)" fg:x="725" fg:w="1"/><text x="58.3429%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="58.0929%" y="245" width="0.0801%" height="15" fill="rgb(220,93,7)" fg:x="725" fg:w="1"/><text x="58.3429%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="58.0929%" y="229" width="0.0801%" height="15" fill="rgb(225,24,44)" fg:x="725" fg:w="1"/><text x="58.3429%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.0929%" y="213" width="0.0801%" height="15" fill="rgb(243,74,40)" fg:x="725" fg:w="1"/><text x="58.3429%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.2532%" y="213" width="0.0801%" height="15" fill="rgb(228,39,7)" fg:x="727" fg:w="1"/><text x="58.5032%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="58.2532%" y="277" width="0.1603%" height="15" fill="rgb(227,79,8)" fg:x="727" fg:w="2"/><text x="58.5032%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="58.2532%" y="261" width="0.1603%" height="15" fill="rgb(236,58,11)" fg:x="727" fg:w="2"/><text x="58.5032%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="58.2532%" y="245" width="0.1603%" height="15" fill="rgb(249,63,35)" fg:x="727" fg:w="2"/><text x="58.5032%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="58.2532%" y="229" width="0.1603%" height="15" fill="rgb(252,114,16)" fg:x="727" fg:w="2"/><text x="58.5032%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.3333%" y="213" width="0.0801%" height="15" fill="rgb(254,151,24)" fg:x="728" fg:w="1"/><text x="58.5833%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.3333%" y="197" width="0.0801%" height="15" fill="rgb(253,54,39)" fg:x="728" fg:w="1"/><text x="58.5833%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.3333%" y="181" width="0.0801%" height="15" fill="rgb(243,25,45)" fg:x="728" fg:w="1"/><text x="58.5833%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.3333%" y="165" width="0.0801%" height="15" fill="rgb(234,134,9)" fg:x="728" fg:w="1"/><text x="58.5833%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.3333%" y="149" width="0.0801%" height="15" fill="rgb(227,166,31)" fg:x="728" fg:w="1"/><text x="58.5833%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.3333%" y="133" width="0.0801%" height="15" fill="rgb(245,143,41)" fg:x="728" fg:w="1"/><text x="58.5833%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.3333%" y="117" width="0.0801%" height="15" fill="rgb(238,181,32)" fg:x="728" fg:w="1"/><text x="58.5833%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="58.3333%" y="101" width="0.0801%" height="15" fill="rgb(224,113,18)" fg:x="728" fg:w="1"/><text x="58.5833%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="58.3333%" y="85" width="0.0801%" height="15" fill="rgb(240,229,28)" fg:x="728" fg:w="1"/><text x="58.5833%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="58.3333%" y="69" width="0.0801%" height="15" fill="rgb(250,185,3)" fg:x="728" fg:w="1"/><text x="58.5833%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="58.3333%" y="53" width="0.0801%" height="15" fill="rgb(212,59,25)" fg:x="728" fg:w="1"/><text x="58.5833%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.3333%" y="37" width="0.0801%" height="15" fill="rgb(221,87,20)" fg:x="728" fg:w="1"/><text x="58.5833%" y="47.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="58.2532%" y="325" width="0.2404%" height="15" fill="rgb(213,74,28)" fg:x="727" fg:w="3"/><text x="58.5032%" y="335.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="58.2532%" y="309" width="0.2404%" height="15" fill="rgb(224,132,34)" fg:x="727" fg:w="3"/><text x="58.5032%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="58.2532%" y="293" width="0.2404%" height="15" fill="rgb(222,101,24)" fg:x="727" fg:w="3"/><text x="58.5032%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.4135%" y="277" width="0.0801%" height="15" fill="rgb(254,142,4)" fg:x="729" fg:w="1"/><text x="58.6635%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.4135%" y="261" width="0.0801%" height="15" fill="rgb(230,229,49)" fg:x="729" fg:w="1"/><text x="58.6635%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.4135%" y="245" width="0.0801%" height="15" fill="rgb(238,70,47)" fg:x="729" fg:w="1"/><text x="58.6635%" y="255.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (4 samples, 0.32%)</title><rect x="58.2532%" y="357" width="0.3205%" height="15" fill="rgb(231,160,17)" fg:x="727" fg:w="4"/><text x="58.5032%" y="367.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="58.2532%" y="341" width="0.3205%" height="15" fill="rgb(218,68,53)" fg:x="727" fg:w="4"/><text x="58.5032%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="58.4936%" y="325" width="0.0801%" height="15" fill="rgb(236,111,10)" fg:x="730" fg:w="1"/><text x="58.7436%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="58.4936%" y="309" width="0.0801%" height="15" fill="rgb(224,34,41)" fg:x="730" fg:w="1"/><text x="58.7436%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="58.4936%" y="293" width="0.0801%" height="15" fill="rgb(241,118,19)" fg:x="730" fg:w="1"/><text x="58.7436%" y="303.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="58.5737%" y="341" width="0.0801%" height="15" fill="rgb(238,129,25)" fg:x="731" fg:w="1"/><text x="58.8237%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.5737%" y="325" width="0.0801%" height="15" fill="rgb(238,22,31)" fg:x="731" fg:w="1"/><text x="58.8237%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.5737%" y="309" width="0.0801%" height="15" fill="rgb(222,174,48)" fg:x="731" fg:w="1"/><text x="58.8237%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="58.7340%" y="261" width="0.0801%" height="15" fill="rgb(206,152,40)" fg:x="733" fg:w="1"/><text x="58.9840%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.7340%" y="245" width="0.0801%" height="15" fill="rgb(218,99,54)" fg:x="733" fg:w="1"/><text x="58.9840%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="58.7340%" y="229" width="0.0801%" height="15" fill="rgb(220,174,26)" fg:x="733" fg:w="1"/><text x="58.9840%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.7340%" y="213" width="0.0801%" height="15" fill="rgb(245,116,9)" fg:x="733" fg:w="1"/><text x="58.9840%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="58.7340%" y="197" width="0.0801%" height="15" fill="rgb(209,72,35)" fg:x="733" fg:w="1"/><text x="58.9840%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.7340%" y="181" width="0.0801%" height="15" fill="rgb(226,126,21)" fg:x="733" fg:w="1"/><text x="58.9840%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.7340%" y="165" width="0.0801%" height="15" fill="rgb(227,192,1)" fg:x="733" fg:w="1"/><text x="58.9840%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.7340%" y="149" width="0.0801%" height="15" fill="rgb(237,180,29)" fg:x="733" fg:w="1"/><text x="58.9840%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="58.8141%" y="261" width="0.1603%" height="15" fill="rgb(230,197,35)" fg:x="734" fg:w="2"/><text x="59.0641%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="58.8141%" y="245" width="0.1603%" height="15" fill="rgb(246,193,31)" fg:x="734" fg:w="2"/><text x="59.0641%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="58.8141%" y="229" width="0.1603%" height="15" fill="rgb(241,36,4)" fg:x="734" fg:w="2"/><text x="59.0641%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="58.8141%" y="213" width="0.1603%" height="15" fill="rgb(241,130,17)" fg:x="734" fg:w="2"/><text x="59.0641%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="58.8141%" y="197" width="0.1603%" height="15" fill="rgb(206,137,32)" fg:x="734" fg:w="2"/><text x="59.0641%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.0545%" y="133" width="0.0801%" height="15" fill="rgb(237,228,51)" fg:x="737" fg:w="1"/><text x="59.3045%" y="143.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="59.0545%" y="117" width="0.0801%" height="15" fill="rgb(243,6,42)" fg:x="737" fg:w="1"/><text x="59.3045%" y="127.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (7 samples, 0.56%)</title><rect x="58.6538%" y="309" width="0.5609%" height="15" fill="rgb(251,74,28)" fg:x="732" fg:w="7"/><text x="58.9038%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="58.6538%" y="293" width="0.5609%" height="15" fill="rgb(218,20,49)" fg:x="732" fg:w="7"/><text x="58.9038%" y="303.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.48%)</title><rect x="58.7340%" y="277" width="0.4808%" height="15" fill="rgb(238,28,14)" fg:x="733" fg:w="6"/><text x="58.9840%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="58.9744%" y="261" width="0.2404%" height="15" fill="rgb(229,40,46)" fg:x="736" fg:w="3"/><text x="59.2244%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="58.9744%" y="245" width="0.2404%" height="15" fill="rgb(244,195,20)" fg:x="736" fg:w="3"/><text x="59.2244%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.24%)</title><rect x="58.9744%" y="229" width="0.2404%" height="15" fill="rgb(253,56,35)" fg:x="736" fg:w="3"/><text x="59.2244%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="58.9744%" y="213" width="0.2404%" height="15" fill="rgb(210,149,44)" fg:x="736" fg:w="3"/><text x="59.2244%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="58.9744%" y="197" width="0.2404%" height="15" fill="rgb(240,135,12)" fg:x="736" fg:w="3"/><text x="59.2244%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="59.0545%" y="181" width="0.1603%" height="15" fill="rgb(251,24,50)" fg:x="737" fg:w="2"/><text x="59.3045%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.0545%" y="165" width="0.1603%" height="15" fill="rgb(243,200,47)" fg:x="737" fg:w="2"/><text x="59.3045%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="59.0545%" y="149" width="0.1603%" height="15" fill="rgb(224,166,26)" fg:x="737" fg:w="2"/><text x="59.3045%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="59.1346%" y="133" width="0.0801%" height="15" fill="rgb(233,0,47)" fg:x="738" fg:w="1"/><text x="59.3846%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.1346%" y="117" width="0.0801%" height="15" fill="rgb(253,80,5)" fg:x="738" fg:w="1"/><text x="59.3846%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.1346%" y="101" width="0.0801%" height="15" fill="rgb(214,133,25)" fg:x="738" fg:w="1"/><text x="59.3846%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="59.1346%" y="85" width="0.0801%" height="15" fill="rgb(209,27,14)" fg:x="738" fg:w="1"/><text x="59.3846%" y="95.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.1346%" y="69" width="0.0801%" height="15" fill="rgb(219,102,51)" fg:x="738" fg:w="1"/><text x="59.3846%" y="79.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.1346%" y="53" width="0.0801%" height="15" fill="rgb(237,18,16)" fg:x="738" fg:w="1"/><text x="59.3846%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.1346%" y="37" width="0.0801%" height="15" fill="rgb(241,85,17)" fg:x="738" fg:w="1"/><text x="59.3846%" y="47.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (9 samples, 0.72%)</title><rect x="58.5737%" y="357" width="0.7212%" height="15" fill="rgb(236,90,42)" fg:x="731" fg:w="9"/><text x="58.8237%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.64%)</title><rect x="58.6538%" y="341" width="0.6410%" height="15" fill="rgb(249,57,21)" fg:x="732" fg:w="8"/><text x="58.9038%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="58.6538%" y="325" width="0.6410%" height="15" fill="rgb(243,12,36)" fg:x="732" fg:w="8"/><text x="58.9038%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.2147%" y="309" width="0.0801%" height="15" fill="rgb(253,128,47)" fg:x="739" fg:w="1"/><text x="59.4647%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.2147%" y="293" width="0.0801%" height="15" fill="rgb(207,33,20)" fg:x="739" fg:w="1"/><text x="59.4647%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.2147%" y="277" width="0.0801%" height="15" fill="rgb(233,215,35)" fg:x="739" fg:w="1"/><text x="59.4647%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="59.2147%" y="261" width="0.0801%" height="15" fill="rgb(249,188,52)" fg:x="739" fg:w="1"/><text x="59.4647%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (14 samples, 1.12%)</title><rect x="58.2532%" y="389" width="1.1218%" height="15" fill="rgb(225,12,32)" fg:x="727" fg:w="14"/><text x="58.5032%" y="399.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (14 samples, 1.12%)</title><rect x="58.2532%" y="373" width="1.1218%" height="15" fill="rgb(247,98,14)" fg:x="727" fg:w="14"/><text x="58.5032%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="59.2949%" y="357" width="0.0801%" height="15" fill="rgb(247,219,48)" fg:x="740" fg:w="1"/><text x="59.5449%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="59.2949%" y="341" width="0.0801%" height="15" fill="rgb(253,60,48)" fg:x="740" fg:w="1"/><text x="59.5449%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="59.2949%" y="325" width="0.0801%" height="15" fill="rgb(245,15,52)" fg:x="740" fg:w="1"/><text x="59.5449%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.2949%" y="309" width="0.0801%" height="15" fill="rgb(220,133,28)" fg:x="740" fg:w="1"/><text x="59.5449%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.2949%" y="293" width="0.0801%" height="15" fill="rgb(217,180,4)" fg:x="740" fg:w="1"/><text x="59.5449%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.2949%" y="277" width="0.0801%" height="15" fill="rgb(251,24,1)" fg:x="740" fg:w="1"/><text x="59.5449%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.2949%" y="261" width="0.0801%" height="15" fill="rgb(212,185,49)" fg:x="740" fg:w="1"/><text x="59.5449%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.2949%" y="245" width="0.0801%" height="15" fill="rgb(215,175,22)" fg:x="740" fg:w="1"/><text x="59.5449%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.2949%" y="229" width="0.0801%" height="15" fill="rgb(250,205,14)" fg:x="740" fg:w="1"/><text x="59.5449%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.2949%" y="213" width="0.0801%" height="15" fill="rgb(225,211,22)" fg:x="740" fg:w="1"/><text x="59.5449%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.2949%" y="197" width="0.0801%" height="15" fill="rgb(251,179,42)" fg:x="740" fg:w="1"/><text x="59.5449%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.2949%" y="181" width="0.0801%" height="15" fill="rgb(208,216,51)" fg:x="740" fg:w="1"/><text x="59.5449%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.2949%" y="165" width="0.0801%" height="15" fill="rgb(235,36,11)" fg:x="740" fg:w="1"/><text x="59.5449%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.2949%" y="149" width="0.0801%" height="15" fill="rgb(213,189,28)" fg:x="740" fg:w="1"/><text x="59.5449%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.2949%" y="133" width="0.0801%" height="15" fill="rgb(227,203,42)" fg:x="740" fg:w="1"/><text x="59.5449%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.2949%" y="117" width="0.0801%" height="15" fill="rgb(244,72,36)" fg:x="740" fg:w="1"/><text x="59.5449%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.2949%" y="101" width="0.0801%" height="15" fill="rgb(213,53,17)" fg:x="740" fg:w="1"/><text x="59.5449%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.2949%" y="85" width="0.0801%" height="15" fill="rgb(207,167,3)" fg:x="740" fg:w="1"/><text x="59.5449%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.2949%" y="69" width="0.0801%" height="15" fill="rgb(216,98,30)" fg:x="740" fg:w="1"/><text x="59.5449%" y="79.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (16 samples, 1.28%)</title><rect x="58.1731%" y="453" width="1.2821%" height="15" fill="rgb(236,123,15)" fg:x="726" fg:w="16"/><text x="58.4231%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.28%)</title><rect x="58.1731%" y="437" width="1.2821%" height="15" fill="rgb(248,81,50)" fg:x="726" fg:w="16"/><text x="58.4231%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.28%)</title><rect x="58.1731%" y="421" width="1.2821%" height="15" fill="rgb(214,120,4)" fg:x="726" fg:w="16"/><text x="58.4231%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (15 samples, 1.20%)</title><rect x="58.2532%" y="405" width="1.2019%" height="15" fill="rgb(208,179,34)" fg:x="727" fg:w="15"/><text x="58.5032%" y="415.50"></text></g><g><title>kernel::model::&lt;impl core::convert::From&lt;&amp;kernel::model::EntityPtr&gt; for kernel::model::entity::EntityRef&gt;::from (1 samples, 0.08%)</title><rect x="59.3750%" y="389" width="0.0801%" height="15" fill="rgb(227,140,7)" fg:x="741" fg:w="1"/><text x="59.6250%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.3750%" y="373" width="0.0801%" height="15" fill="rgb(214,22,6)" fg:x="741" fg:w="1"/><text x="59.6250%" y="383.50"></text></g><g><title>plugins_core::tools::get_contained_keys (20 samples, 1.60%)</title><rect x="57.9327%" y="501" width="1.6026%" height="15" fill="rgb(207,137,27)" fg:x="723" fg:w="20"/><text x="58.1827%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (20 samples, 1.60%)</title><rect x="57.9327%" y="485" width="1.6026%" height="15" fill="rgb(210,8,46)" fg:x="723" fg:w="20"/><text x="58.1827%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (20 samples, 1.60%)</title><rect x="57.9327%" y="469" width="1.6026%" height="15" fill="rgb(240,16,54)" fg:x="723" fg:w="20"/><text x="58.1827%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.4551%" y="453" width="0.0801%" height="15" fill="rgb(211,209,29)" fg:x="742" fg:w="1"/><text x="59.7051%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.4551%" y="437" width="0.0801%" height="15" fill="rgb(226,228,24)" fg:x="742" fg:w="1"/><text x="59.7051%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="59.4551%" y="421" width="0.0801%" height="15" fill="rgb(222,84,9)" fg:x="742" fg:w="1"/><text x="59.7051%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (32 samples, 2.56%)</title><rect x="57.0513%" y="533" width="2.5641%" height="15" fill="rgb(234,203,30)" fg:x="712" fg:w="32"/><text x="57.3013%" y="543.50">&lt;a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (32 samples, 2.56%)</title><rect x="57.0513%" y="517" width="2.5641%" height="15" fill="rgb(238,109,14)" fg:x="712" fg:w="32"/><text x="57.3013%" y="527.50">&lt;c..</text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="59.5353%" y="501" width="0.0801%" height="15" fill="rgb(233,206,34)" fg:x="743" fg:w="1"/><text x="59.7853%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="59.5353%" y="485" width="0.0801%" height="15" fill="rgb(220,167,47)" fg:x="743" fg:w="1"/><text x="59.7853%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="59.5353%" y="469" width="0.0801%" height="15" fill="rgb(238,105,10)" fg:x="743" fg:w="1"/><text x="59.7853%" y="479.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.5353%" y="453" width="0.0801%" height="15" fill="rgb(213,227,17)" fg:x="743" fg:w="1"/><text x="59.7853%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.5353%" y="437" width="0.0801%" height="15" fill="rgb(217,132,38)" fg:x="743" fg:w="1"/><text x="59.7853%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.5353%" y="421" width="0.0801%" height="15" fill="rgb(242,146,4)" fg:x="743" fg:w="1"/><text x="59.7853%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.5353%" y="405" width="0.0801%" height="15" fill="rgb(212,61,9)" fg:x="743" fg:w="1"/><text x="59.7853%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.5353%" y="389" width="0.0801%" height="15" fill="rgb(247,126,22)" fg:x="743" fg:w="1"/><text x="59.7853%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.5353%" y="373" width="0.0801%" height="15" fill="rgb(220,196,2)" fg:x="743" fg:w="1"/><text x="59.7853%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.5353%" y="357" width="0.0801%" height="15" fill="rgb(208,46,4)" fg:x="743" fg:w="1"/><text x="59.7853%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.5353%" y="341" width="0.0801%" height="15" fill="rgb(252,104,46)" fg:x="743" fg:w="1"/><text x="59.7853%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.5353%" y="325" width="0.0801%" height="15" fill="rgb(237,152,48)" fg:x="743" fg:w="1"/><text x="59.7853%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.5353%" y="309" width="0.0801%" height="15" fill="rgb(221,59,37)" fg:x="743" fg:w="1"/><text x="59.7853%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.5353%" y="293" width="0.0801%" height="15" fill="rgb(209,202,51)" fg:x="743" fg:w="1"/><text x="59.7853%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.5353%" y="277" width="0.0801%" height="15" fill="rgb(228,81,30)" fg:x="743" fg:w="1"/><text x="59.7853%" y="287.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="59.6154%" y="437" width="0.0801%" height="15" fill="rgb(227,42,39)" fg:x="744" fg:w="1"/><text x="59.8654%" y="447.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="59.6955%" y="325" width="0.0801%" height="15" fill="rgb(221,26,2)" fg:x="745" fg:w="1"/><text x="59.9455%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="59.6955%" y="309" width="0.0801%" height="15" fill="rgb(254,61,31)" fg:x="745" fg:w="1"/><text x="59.9455%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="59.6955%" y="293" width="0.0801%" height="15" fill="rgb(222,173,38)" fg:x="745" fg:w="1"/><text x="59.9455%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="59.6955%" y="277" width="0.0801%" height="15" fill="rgb(218,50,12)" fg:x="745" fg:w="1"/><text x="59.9455%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="59.6955%" y="261" width="0.0801%" height="15" fill="rgb(223,88,40)" fg:x="745" fg:w="1"/><text x="59.9455%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="59.6955%" y="245" width="0.0801%" height="15" fill="rgb(237,54,19)" fg:x="745" fg:w="1"/><text x="59.9455%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="59.6955%" y="229" width="0.0801%" height="15" fill="rgb(251,129,25)" fg:x="745" fg:w="1"/><text x="59.9455%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="59.6955%" y="213" width="0.0801%" height="15" fill="rgb(238,97,19)" fg:x="745" fg:w="1"/><text x="59.9455%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="59.6955%" y="197" width="0.0801%" height="15" fill="rgb(240,169,18)" fg:x="745" fg:w="1"/><text x="59.9455%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="59.6955%" y="181" width="0.0801%" height="15" fill="rgb(230,187,49)" fg:x="745" fg:w="1"/><text x="59.9455%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="59.6955%" y="165" width="0.0801%" height="15" fill="rgb(209,44,26)" fg:x="745" fg:w="1"/><text x="59.9455%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="59.6955%" y="149" width="0.0801%" height="15" fill="rgb(244,0,6)" fg:x="745" fg:w="1"/><text x="59.9455%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.6955%" y="133" width="0.0801%" height="15" fill="rgb(248,18,21)" fg:x="745" fg:w="1"/><text x="59.9455%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="59.6955%" y="117" width="0.0801%" height="15" fill="rgb(245,180,19)" fg:x="745" fg:w="1"/><text x="59.9455%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.6955%" y="101" width="0.0801%" height="15" fill="rgb(252,118,36)" fg:x="745" fg:w="1"/><text x="59.9455%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="59.6955%" y="85" width="0.0801%" height="15" fill="rgb(210,224,19)" fg:x="745" fg:w="1"/><text x="59.9455%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="59.6955%" y="69" width="0.0801%" height="15" fill="rgb(218,30,24)" fg:x="745" fg:w="1"/><text x="59.9455%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="59.6955%" y="53" width="0.0801%" height="15" fill="rgb(219,75,50)" fg:x="745" fg:w="1"/><text x="59.9455%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.6955%" y="37" width="0.0801%" height="15" fill="rgb(234,72,50)" fg:x="745" fg:w="1"/><text x="59.9455%" y="47.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="59.6154%" y="485" width="0.2404%" height="15" fill="rgb(219,100,48)" fg:x="744" fg:w="3"/><text x="59.8654%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="59.6154%" y="469" width="0.2404%" height="15" fill="rgb(253,5,41)" fg:x="744" fg:w="3"/><text x="59.8654%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="59.6154%" y="453" width="0.2404%" height="15" fill="rgb(247,181,11)" fg:x="744" fg:w="3"/><text x="59.8654%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="59.6955%" y="437" width="0.1603%" height="15" fill="rgb(222,223,25)" fg:x="745" fg:w="2"/><text x="59.9455%" y="447.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="59.6955%" y="421" width="0.1603%" height="15" fill="rgb(214,198,28)" fg:x="745" fg:w="2"/><text x="59.9455%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="59.6955%" y="405" width="0.1603%" height="15" fill="rgb(230,46,43)" fg:x="745" fg:w="2"/><text x="59.9455%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="59.6955%" y="389" width="0.1603%" height="15" fill="rgb(233,65,53)" fg:x="745" fg:w="2"/><text x="59.9455%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="59.6955%" y="373" width="0.1603%" height="15" fill="rgb(221,121,27)" fg:x="745" fg:w="2"/><text x="59.9455%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="59.6955%" y="357" width="0.1603%" height="15" fill="rgb(247,70,47)" fg:x="745" fg:w="2"/><text x="59.9455%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="59.6955%" y="341" width="0.1603%" height="15" fill="rgb(228,85,35)" fg:x="745" fg:w="2"/><text x="59.9455%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="59.7756%" y="325" width="0.0801%" height="15" fill="rgb(209,50,18)" fg:x="746" fg:w="1"/><text x="60.0256%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="59.7756%" y="309" width="0.0801%" height="15" fill="rgb(250,19,35)" fg:x="746" fg:w="1"/><text x="60.0256%" y="319.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="59.7756%" y="293" width="0.0801%" height="15" fill="rgb(253,107,29)" fg:x="746" fg:w="1"/><text x="60.0256%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="59.7756%" y="277" width="0.0801%" height="15" fill="rgb(252,179,29)" fg:x="746" fg:w="1"/><text x="60.0256%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="59.7756%" y="261" width="0.0801%" height="15" fill="rgb(238,194,6)" fg:x="746" fg:w="1"/><text x="60.0256%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="59.7756%" y="245" width="0.0801%" height="15" fill="rgb(238,164,29)" fg:x="746" fg:w="1"/><text x="60.0256%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="59.7756%" y="229" width="0.0801%" height="15" fill="rgb(224,25,9)" fg:x="746" fg:w="1"/><text x="60.0256%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="59.7756%" y="213" width="0.0801%" height="15" fill="rgb(244,153,23)" fg:x="746" fg:w="1"/><text x="60.0256%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.7756%" y="197" width="0.0801%" height="15" fill="rgb(212,203,14)" fg:x="746" fg:w="1"/><text x="60.0256%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="59.7756%" y="181" width="0.0801%" height="15" fill="rgb(220,164,20)" fg:x="746" fg:w="1"/><text x="60.0256%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.08%)</title><rect x="59.7756%" y="165" width="0.0801%" height="15" fill="rgb(222,203,48)" fg:x="746" fg:w="1"/><text x="60.0256%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.1763%" y="325" width="0.0801%" height="15" fill="rgb(215,159,22)" fg:x="751" fg:w="1"/><text x="60.4263%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.1763%" y="309" width="0.0801%" height="15" fill="rgb(216,183,47)" fg:x="751" fg:w="1"/><text x="60.4263%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="60.4167%" y="245" width="0.1603%" height="15" fill="rgb(229,195,25)" fg:x="754" fg:w="2"/><text x="60.6667%" y="255.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="60.4167%" y="229" width="0.1603%" height="15" fill="rgb(224,132,51)" fg:x="754" fg:w="2"/><text x="60.6667%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="60.4167%" y="213" width="0.1603%" height="15" fill="rgb(240,63,7)" fg:x="754" fg:w="2"/><text x="60.6667%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="60.4167%" y="197" width="0.1603%" height="15" fill="rgb(249,182,41)" fg:x="754" fg:w="2"/><text x="60.6667%" y="207.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="60.4167%" y="181" width="0.1603%" height="15" fill="rgb(243,47,26)" fg:x="754" fg:w="2"/><text x="60.6667%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="60.4167%" y="165" width="0.1603%" height="15" fill="rgb(233,48,2)" fg:x="754" fg:w="2"/><text x="60.6667%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="60.4167%" y="149" width="0.1603%" height="15" fill="rgb(244,165,34)" fg:x="754" fg:w="2"/><text x="60.6667%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="60.4167%" y="133" width="0.1603%" height="15" fill="rgb(207,89,7)" fg:x="754" fg:w="2"/><text x="60.6667%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="60.4167%" y="293" width="0.2404%" height="15" fill="rgb(244,117,36)" fg:x="754" fg:w="3"/><text x="60.6667%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="60.4167%" y="277" width="0.2404%" height="15" fill="rgb(226,144,34)" fg:x="754" fg:w="3"/><text x="60.6667%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="60.4167%" y="261" width="0.2404%" height="15" fill="rgb(213,23,19)" fg:x="754" fg:w="3"/><text x="60.6667%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="60.5769%" y="245" width="0.0801%" height="15" fill="rgb(217,75,12)" fg:x="756" fg:w="1"/><text x="60.8269%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.5769%" y="229" width="0.0801%" height="15" fill="rgb(224,159,17)" fg:x="756" fg:w="1"/><text x="60.8269%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="60.3365%" y="309" width="0.4006%" height="15" fill="rgb(217,118,1)" fg:x="753" fg:w="5"/><text x="60.5865%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="60.6571%" y="293" width="0.0801%" height="15" fill="rgb(232,180,48)" fg:x="757" fg:w="1"/><text x="60.9071%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.6571%" y="277" width="0.0801%" height="15" fill="rgb(230,27,33)" fg:x="757" fg:w="1"/><text x="60.9071%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (7 samples, 0.56%)</title><rect x="60.2564%" y="325" width="0.5609%" height="15" fill="rgb(205,31,21)" fg:x="752" fg:w="7"/><text x="60.5064%" y="335.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="60.7372%" y="309" width="0.0801%" height="15" fill="rgb(253,59,4)" fg:x="758" fg:w="1"/><text x="60.9872%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="60.7372%" y="293" width="0.0801%" height="15" fill="rgb(224,201,9)" fg:x="758" fg:w="1"/><text x="60.9872%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="60.7372%" y="277" width="0.0801%" height="15" fill="rgb(229,206,30)" fg:x="758" fg:w="1"/><text x="60.9872%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="60.7372%" y="261" width="0.0801%" height="15" fill="rgb(212,67,47)" fg:x="758" fg:w="1"/><text x="60.9872%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="60.7372%" y="245" width="0.0801%" height="15" fill="rgb(211,96,50)" fg:x="758" fg:w="1"/><text x="60.9872%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.7372%" y="229" width="0.0801%" height="15" fill="rgb(252,114,18)" fg:x="758" fg:w="1"/><text x="60.9872%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.7372%" y="213" width="0.0801%" height="15" fill="rgb(223,58,37)" fg:x="758" fg:w="1"/><text x="60.9872%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.72%)</title><rect x="60.1763%" y="341" width="0.7212%" height="15" fill="rgb(237,70,4)" fg:x="751" fg:w="9"/><text x="60.4263%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.8173%" y="325" width="0.0801%" height="15" fill="rgb(244,85,46)" fg:x="759" fg:w="1"/><text x="61.0673%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.8173%" y="309" width="0.0801%" height="15" fill="rgb(223,39,52)" fg:x="759" fg:w="1"/><text x="61.0673%" y="319.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (10 samples, 0.80%)</title><rect x="60.1763%" y="373" width="0.8013%" height="15" fill="rgb(218,200,14)" fg:x="751" fg:w="10"/><text x="60.4263%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (10 samples, 0.80%)</title><rect x="60.1763%" y="357" width="0.8013%" height="15" fill="rgb(208,171,16)" fg:x="751" fg:w="10"/><text x="60.4263%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="60.8974%" y="341" width="0.0801%" height="15" fill="rgb(234,200,18)" fg:x="760" fg:w="1"/><text x="61.1474%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.8974%" y="325" width="0.0801%" height="15" fill="rgb(228,45,11)" fg:x="760" fg:w="1"/><text x="61.1474%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.96%)</title><rect x="60.0962%" y="389" width="0.9615%" height="15" fill="rgb(237,182,11)" fg:x="750" fg:w="12"/><text x="60.3462%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.9776%" y="373" width="0.0801%" height="15" fill="rgb(241,175,49)" fg:x="761" fg:w="1"/><text x="61.2276%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.9776%" y="357" width="0.0801%" height="15" fill="rgb(247,38,35)" fg:x="761" fg:w="1"/><text x="61.2276%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (14 samples, 1.12%)</title><rect x="60.0160%" y="421" width="1.1218%" height="15" fill="rgb(228,39,49)" fg:x="749" fg:w="14"/><text x="60.2660%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (13 samples, 1.04%)</title><rect x="60.0962%" y="405" width="1.0417%" height="15" fill="rgb(226,101,26)" fg:x="750" fg:w="13"/><text x="60.3462%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="61.0577%" y="389" width="0.0801%" height="15" fill="rgb(206,141,19)" fg:x="762" fg:w="1"/><text x="61.3077%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.0577%" y="373" width="0.0801%" height="15" fill="rgb(211,200,13)" fg:x="762" fg:w="1"/><text x="61.3077%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (15 samples, 1.20%)</title><rect x="60.0160%" y="469" width="1.2019%" height="15" fill="rgb(241,121,6)" fg:x="749" fg:w="15"/><text x="60.2660%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (15 samples, 1.20%)</title><rect x="60.0160%" y="453" width="1.2019%" height="15" fill="rgb(234,221,29)" fg:x="749" fg:w="15"/><text x="60.2660%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 1.20%)</title><rect x="60.0160%" y="437" width="1.2019%" height="15" fill="rgb(229,136,5)" fg:x="749" fg:w="15"/><text x="60.2660%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.1378%" y="421" width="0.0801%" height="15" fill="rgb(238,36,11)" fg:x="763" fg:w="1"/><text x="61.3878%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="61.1378%" y="405" width="0.0801%" height="15" fill="rgb(251,55,41)" fg:x="763" fg:w="1"/><text x="61.3878%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="61.2179%" y="421" width="0.1603%" height="15" fill="rgb(242,34,40)" fg:x="764" fg:w="2"/><text x="61.4679%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.2981%" y="405" width="0.0801%" height="15" fill="rgb(215,42,17)" fg:x="765" fg:w="1"/><text x="61.5481%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.3782%" y="373" width="0.0801%" height="15" fill="rgb(207,44,46)" fg:x="766" fg:w="1"/><text x="61.6282%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.3782%" y="357" width="0.0801%" height="15" fill="rgb(211,206,28)" fg:x="766" fg:w="1"/><text x="61.6282%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.3782%" y="341" width="0.0801%" height="15" fill="rgb(237,167,16)" fg:x="766" fg:w="1"/><text x="61.6282%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="61.4583%" y="341" width="0.1603%" height="15" fill="rgb(233,66,6)" fg:x="767" fg:w="2"/><text x="61.7083%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.5385%" y="325" width="0.0801%" height="15" fill="rgb(246,123,29)" fg:x="768" fg:w="1"/><text x="61.7885%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.5385%" y="309" width="0.0801%" height="15" fill="rgb(209,62,40)" fg:x="768" fg:w="1"/><text x="61.7885%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="61.6186%" y="261" width="0.0801%" height="15" fill="rgb(218,4,25)" fg:x="769" fg:w="1"/><text x="61.8686%" y="271.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="61.6186%" y="245" width="0.0801%" height="15" fill="rgb(253,91,49)" fg:x="769" fg:w="1"/><text x="61.8686%" y="255.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="61.3782%" y="389" width="0.4006%" height="15" fill="rgb(228,155,29)" fg:x="766" fg:w="5"/><text x="61.6282%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="61.4583%" y="373" width="0.3205%" height="15" fill="rgb(243,57,37)" fg:x="767" fg:w="4"/><text x="61.7083%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="61.4583%" y="357" width="0.3205%" height="15" fill="rgb(244,167,17)" fg:x="767" fg:w="4"/><text x="61.7083%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="61.6186%" y="341" width="0.1603%" height="15" fill="rgb(207,181,38)" fg:x="769" fg:w="2"/><text x="61.8686%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="61.6186%" y="325" width="0.1603%" height="15" fill="rgb(211,8,23)" fg:x="769" fg:w="2"/><text x="61.8686%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="61.6186%" y="309" width="0.1603%" height="15" fill="rgb(235,11,44)" fg:x="769" fg:w="2"/><text x="61.8686%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="61.6186%" y="293" width="0.1603%" height="15" fill="rgb(248,18,52)" fg:x="769" fg:w="2"/><text x="61.8686%" y="303.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="61.6186%" y="277" width="0.1603%" height="15" fill="rgb(208,4,7)" fg:x="769" fg:w="2"/><text x="61.8686%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.6987%" y="261" width="0.0801%" height="15" fill="rgb(240,17,39)" fg:x="770" fg:w="1"/><text x="61.9487%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (644 samples, 51.60%)</title><rect x="10.4167%" y="629" width="51.6026%" height="15" fill="rgb(207,170,3)" fg:x="130" fg:w="644"/><text x="10.6667%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (73 samples, 5.85%)</title><rect x="56.1699%" y="613" width="5.8494%" height="15" fill="rgb(236,100,52)" fg:x="701" fg:w="73"/><text x="56.4199%" y="623.50">kernel:..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (73 samples, 5.85%)</title><rect x="56.1699%" y="597" width="5.8494%" height="15" fill="rgb(246,78,51)" fg:x="701" fg:w="73"/><text x="56.4199%" y="607.50">&lt;plugin..</text></g><g><title>plugins_rpc::querying::have_surroundings (67 samples, 5.37%)</title><rect x="56.6506%" y="581" width="5.3686%" height="15" fill="rgb(211,17,15)" fg:x="707" fg:w="67"/><text x="56.9006%" y="591.50">plugins..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (67 samples, 5.37%)</title><rect x="56.6506%" y="565" width="5.3686%" height="15" fill="rgb(209,59,46)" fg:x="707" fg:w="67"/><text x="56.9006%" y="575.50">&lt;plugin..</text></g><g><title>core::iter::adapters::try_process (62 samples, 4.97%)</title><rect x="57.0513%" y="549" width="4.9679%" height="15" fill="rgb(210,92,25)" fg:x="712" fg:w="62"/><text x="57.3013%" y="559.50">core::..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (30 samples, 2.40%)</title><rect x="59.6154%" y="533" width="2.4038%" height="15" fill="rgb(238,174,52)" fg:x="744" fg:w="30"/><text x="59.8654%" y="543.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (30 samples, 2.40%)</title><rect x="59.6154%" y="517" width="2.4038%" height="15" fill="rgb(230,73,7)" fg:x="744" fg:w="30"/><text x="59.8654%" y="527.50">&lt;c..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (30 samples, 2.40%)</title><rect x="59.6154%" y="501" width="2.4038%" height="15" fill="rgb(243,124,40)" fg:x="744" fg:w="30"/><text x="59.8654%" y="511.50">pl..</text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (27 samples, 2.16%)</title><rect x="59.8558%" y="485" width="2.1635%" height="15" fill="rgb(244,170,11)" fg:x="747" fg:w="27"/><text x="60.1058%" y="495.50">&lt;..</text></g><g><title>kernel::model::EntityPtr::to_json_value (10 samples, 0.80%)</title><rect x="61.2179%" y="469" width="0.8013%" height="15" fill="rgb(207,114,54)" fg:x="764" fg:w="10"/><text x="61.4679%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.80%)</title><rect x="61.2179%" y="453" width="0.8013%" height="15" fill="rgb(205,42,20)" fg:x="764" fg:w="10"/><text x="61.4679%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.80%)</title><rect x="61.2179%" y="437" width="0.8013%" height="15" fill="rgb(230,30,28)" fg:x="764" fg:w="10"/><text x="61.4679%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="61.3782%" y="421" width="0.6410%" height="15" fill="rgb(205,73,54)" fg:x="766" fg:w="8"/><text x="61.6282%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="61.3782%" y="405" width="0.6410%" height="15" fill="rgb(254,227,23)" fg:x="766" fg:w="8"/><text x="61.6282%" y="415.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="61.7788%" y="389" width="0.2404%" height="15" fill="rgb(228,202,34)" fg:x="771" fg:w="3"/><text x="62.0288%" y="399.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="61.7788%" y="373" width="0.2404%" height="15" fill="rgb(222,225,37)" fg:x="771" fg:w="3"/><text x="62.0288%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="62.0192%" y="629" width="0.0801%" height="15" fill="rgb(221,14,54)" fg:x="774" fg:w="1"/><text x="62.2692%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="62.0192%" y="613" width="0.0801%" height="15" fill="rgb(254,102,2)" fg:x="774" fg:w="1"/><text x="62.2692%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="62.0192%" y="597" width="0.0801%" height="15" fill="rgb(232,104,17)" fg:x="774" fg:w="1"/><text x="62.2692%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.0192%" y="581" width="0.0801%" height="15" fill="rgb(250,220,14)" fg:x="774" fg:w="1"/><text x="62.2692%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.0192%" y="565" width="0.0801%" height="15" fill="rgb(241,158,9)" fg:x="774" fg:w="1"/><text x="62.2692%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.0192%" y="549" width="0.0801%" height="15" fill="rgb(246,9,43)" fg:x="774" fg:w="1"/><text x="62.2692%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.0192%" y="533" width="0.0801%" height="15" fill="rgb(206,73,33)" fg:x="774" fg:w="1"/><text x="62.2692%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.0192%" y="517" width="0.0801%" height="15" fill="rgb(222,79,8)" fg:x="774" fg:w="1"/><text x="62.2692%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.0192%" y="501" width="0.0801%" height="15" fill="rgb(234,8,54)" fg:x="774" fg:w="1"/><text x="62.2692%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.0192%" y="485" width="0.0801%" height="15" fill="rgb(209,134,38)" fg:x="774" fg:w="1"/><text x="62.2692%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="62.0192%" y="469" width="0.0801%" height="15" fill="rgb(230,127,29)" fg:x="774" fg:w="1"/><text x="62.2692%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="62.0192%" y="453" width="0.0801%" height="15" fill="rgb(242,44,41)" fg:x="774" fg:w="1"/><text x="62.2692%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="62.0192%" y="437" width="0.0801%" height="15" fill="rgb(222,56,43)" fg:x="774" fg:w="1"/><text x="62.2692%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="62.0994%" y="581" width="0.0801%" height="15" fill="rgb(238,39,47)" fg:x="775" fg:w="1"/><text x="62.3494%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="62.0994%" y="565" width="0.0801%" height="15" fill="rgb(226,79,43)" fg:x="775" fg:w="1"/><text x="62.3494%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="62.0994%" y="549" width="0.0801%" height="15" fill="rgb(242,105,53)" fg:x="775" fg:w="1"/><text x="62.3494%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.0994%" y="533" width="0.0801%" height="15" fill="rgb(251,132,46)" fg:x="775" fg:w="1"/><text x="62.3494%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.0994%" y="517" width="0.0801%" height="15" fill="rgb(231,77,14)" fg:x="775" fg:w="1"/><text x="62.3494%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.0994%" y="501" width="0.0801%" height="15" fill="rgb(240,135,9)" fg:x="775" fg:w="1"/><text x="62.3494%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.0994%" y="485" width="0.0801%" height="15" fill="rgb(248,109,14)" fg:x="775" fg:w="1"/><text x="62.3494%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.0994%" y="469" width="0.0801%" height="15" fill="rgb(227,146,52)" fg:x="775" fg:w="1"/><text x="62.3494%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.0994%" y="453" width="0.0801%" height="15" fill="rgb(232,54,3)" fg:x="775" fg:w="1"/><text x="62.3494%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.0994%" y="437" width="0.0801%" height="15" fill="rgb(229,201,43)" fg:x="775" fg:w="1"/><text x="62.3494%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.0994%" y="421" width="0.0801%" height="15" fill="rgb(252,161,33)" fg:x="775" fg:w="1"/><text x="62.3494%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.0994%" y="405" width="0.0801%" height="15" fill="rgb(226,146,40)" fg:x="775" fg:w="1"/><text x="62.3494%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.0994%" y="389" width="0.0801%" height="15" fill="rgb(219,47,25)" fg:x="775" fg:w="1"/><text x="62.3494%" y="399.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="62.0994%" y="373" width="0.0801%" height="15" fill="rgb(250,135,13)" fg:x="775" fg:w="1"/><text x="62.3494%" y="383.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="62.1795%" y="565" width="0.0801%" height="15" fill="rgb(219,229,18)" fg:x="776" fg:w="1"/><text x="62.4295%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.1795%" y="549" width="0.0801%" height="15" fill="rgb(217,152,27)" fg:x="776" fg:w="1"/><text x="62.4295%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.1795%" y="533" width="0.0801%" height="15" fill="rgb(225,71,47)" fg:x="776" fg:w="1"/><text x="62.4295%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.1795%" y="517" width="0.0801%" height="15" fill="rgb(220,139,14)" fg:x="776" fg:w="1"/><text x="62.4295%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.1795%" y="501" width="0.0801%" height="15" fill="rgb(247,54,32)" fg:x="776" fg:w="1"/><text x="62.4295%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.1795%" y="485" width="0.0801%" height="15" fill="rgb(252,131,39)" fg:x="776" fg:w="1"/><text x="62.4295%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="62.1795%" y="469" width="0.0801%" height="15" fill="rgb(210,108,39)" fg:x="776" fg:w="1"/><text x="62.4295%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.2596%" y="501" width="0.0801%" height="15" fill="rgb(205,23,29)" fg:x="777" fg:w="1"/><text x="62.5096%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="62.3397%" y="501" width="0.1603%" height="15" fill="rgb(246,139,46)" fg:x="778" fg:w="2"/><text x="62.5897%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.4199%" y="485" width="0.0801%" height="15" fill="rgb(250,81,26)" fg:x="779" fg:w="1"/><text x="62.6699%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (5 samples, 0.40%)</title><rect x="62.1795%" y="581" width="0.4006%" height="15" fill="rgb(214,104,7)" fg:x="776" fg:w="5"/><text x="62.4295%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="62.2596%" y="565" width="0.3205%" height="15" fill="rgb(233,189,8)" fg:x="777" fg:w="4"/><text x="62.5096%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="62.2596%" y="549" width="0.3205%" height="15" fill="rgb(228,141,17)" fg:x="777" fg:w="4"/><text x="62.5096%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="62.2596%" y="533" width="0.3205%" height="15" fill="rgb(247,157,1)" fg:x="777" fg:w="4"/><text x="62.5096%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="62.2596%" y="517" width="0.3205%" height="15" fill="rgb(249,225,5)" fg:x="777" fg:w="4"/><text x="62.5096%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.5000%" y="501" width="0.0801%" height="15" fill="rgb(242,55,13)" fg:x="780" fg:w="1"/><text x="62.7500%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5000%" y="485" width="0.0801%" height="15" fill="rgb(230,49,50)" fg:x="780" fg:w="1"/><text x="62.7500%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.5000%" y="469" width="0.0801%" height="15" fill="rgb(241,111,38)" fg:x="780" fg:w="1"/><text x="62.7500%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="62.5000%" y="453" width="0.0801%" height="15" fill="rgb(252,155,4)" fg:x="780" fg:w="1"/><text x="62.7500%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5000%" y="437" width="0.0801%" height="15" fill="rgb(212,69,32)" fg:x="780" fg:w="1"/><text x="62.7500%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.5000%" y="421" width="0.0801%" height="15" fill="rgb(243,107,47)" fg:x="780" fg:w="1"/><text x="62.7500%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="62.5000%" y="405" width="0.0801%" height="15" fill="rgb(247,130,12)" fg:x="780" fg:w="1"/><text x="62.7500%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5000%" y="389" width="0.0801%" height="15" fill="rgb(233,74,16)" fg:x="780" fg:w="1"/><text x="62.7500%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.5000%" y="373" width="0.0801%" height="15" fill="rgb(208,58,18)" fg:x="780" fg:w="1"/><text x="62.7500%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="62.5000%" y="357" width="0.0801%" height="15" fill="rgb(242,225,1)" fg:x="780" fg:w="1"/><text x="62.7500%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5000%" y="341" width="0.0801%" height="15" fill="rgb(249,39,40)" fg:x="780" fg:w="1"/><text x="62.7500%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.5000%" y="325" width="0.0801%" height="15" fill="rgb(207,72,44)" fg:x="780" fg:w="1"/><text x="62.7500%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.5000%" y="309" width="0.0801%" height="15" fill="rgb(215,193,12)" fg:x="780" fg:w="1"/><text x="62.7500%" y="319.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="62.5000%" y="293" width="0.0801%" height="15" fill="rgb(248,41,39)" fg:x="780" fg:w="1"/><text x="62.7500%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.5801%" y="437" width="0.0801%" height="15" fill="rgb(253,85,4)" fg:x="781" fg:w="1"/><text x="62.8301%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (8 samples, 0.64%)</title><rect x="62.0994%" y="629" width="0.6410%" height="15" fill="rgb(243,70,31)" fg:x="775" fg:w="8"/><text x="62.3494%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (8 samples, 0.64%)</title><rect x="62.0994%" y="613" width="0.6410%" height="15" fill="rgb(253,195,26)" fg:x="775" fg:w="8"/><text x="62.3494%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="62.0994%" y="597" width="0.6410%" height="15" fill="rgb(243,42,11)" fg:x="775" fg:w="8"/><text x="62.3494%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="62.5801%" y="581" width="0.1603%" height="15" fill="rgb(239,66,17)" fg:x="781" fg:w="2"/><text x="62.8301%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="62.5801%" y="565" width="0.1603%" height="15" fill="rgb(217,132,21)" fg:x="781" fg:w="2"/><text x="62.8301%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="62.5801%" y="549" width="0.1603%" height="15" fill="rgb(252,202,21)" fg:x="781" fg:w="2"/><text x="62.8301%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.5801%" y="533" width="0.1603%" height="15" fill="rgb(233,98,36)" fg:x="781" fg:w="2"/><text x="62.8301%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.5801%" y="517" width="0.1603%" height="15" fill="rgb(216,153,54)" fg:x="781" fg:w="2"/><text x="62.8301%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.5801%" y="501" width="0.1603%" height="15" fill="rgb(250,99,7)" fg:x="781" fg:w="2"/><text x="62.8301%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.5801%" y="485" width="0.1603%" height="15" fill="rgb(207,56,50)" fg:x="781" fg:w="2"/><text x="62.8301%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="62.5801%" y="469" width="0.1603%" height="15" fill="rgb(244,61,34)" fg:x="781" fg:w="2"/><text x="62.8301%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.5801%" y="453" width="0.1603%" height="15" fill="rgb(241,50,38)" fg:x="781" fg:w="2"/><text x="62.8301%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.6603%" y="437" width="0.0801%" height="15" fill="rgb(212,166,30)" fg:x="782" fg:w="1"/><text x="62.9103%" y="447.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="62.6603%" y="421" width="0.0801%" height="15" fill="rgb(249,127,32)" fg:x="782" fg:w="1"/><text x="62.9103%" y="431.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="62.7404%" y="629" width="0.0801%" height="15" fill="rgb(209,103,0)" fg:x="783" fg:w="1"/><text x="62.9904%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="62.7404%" y="613" width="0.0801%" height="15" fill="rgb(238,209,51)" fg:x="783" fg:w="1"/><text x="62.9904%" y="623.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (655 samples, 52.48%)</title><rect x="10.4167%" y="645" width="52.4840%" height="15" fill="rgb(237,56,23)" fg:x="130" fg:w="655"/><text x="10.6667%" y="655.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="62.8205%" y="629" width="0.0801%" height="15" fill="rgb(215,153,46)" fg:x="784" fg:w="1"/><text x="63.0705%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.8205%" y="613" width="0.0801%" height="15" fill="rgb(224,49,31)" fg:x="784" fg:w="1"/><text x="63.0705%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.8205%" y="597" width="0.0801%" height="15" fill="rgb(250,18,42)" fg:x="784" fg:w="1"/><text x="63.0705%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.8205%" y="581" width="0.0801%" height="15" fill="rgb(215,176,39)" fg:x="784" fg:w="1"/><text x="63.0705%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.8205%" y="565" width="0.0801%" height="15" fill="rgb(223,77,29)" fg:x="784" fg:w="1"/><text x="63.0705%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.8205%" y="549" width="0.0801%" height="15" fill="rgb(234,94,52)" fg:x="784" fg:w="1"/><text x="63.0705%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.8205%" y="533" width="0.0801%" height="15" fill="rgb(220,154,50)" fg:x="784" fg:w="1"/><text x="63.0705%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.8205%" y="517" width="0.0801%" height="15" fill="rgb(212,11,10)" fg:x="784" fg:w="1"/><text x="63.0705%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.8205%" y="501" width="0.0801%" height="15" fill="rgb(205,166,19)" fg:x="784" fg:w="1"/><text x="63.0705%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.8205%" y="485" width="0.0801%" height="15" fill="rgb(244,198,16)" fg:x="784" fg:w="1"/><text x="63.0705%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.8205%" y="469" width="0.0801%" height="15" fill="rgb(219,69,12)" fg:x="784" fg:w="1"/><text x="63.0705%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.8205%" y="453" width="0.0801%" height="15" fill="rgb(245,30,7)" fg:x="784" fg:w="1"/><text x="63.0705%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (786 samples, 62.98%)</title><rect x="0.0000%" y="693" width="62.9808%" height="15" fill="rgb(218,221,48)" fg:x="0" fg:w="786"/><text x="0.2500%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (786 samples, 62.98%)</title><rect x="0.0000%" y="677" width="62.9808%" height="15" fill="rgb(216,66,15)" fg:x="0" fg:w="786"/><text x="0.2500%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (786 samples, 62.98%)</title><rect x="0.0000%" y="661" width="62.9808%" height="15" fill="rgb(226,122,50)" fg:x="0" fg:w="786"/><text x="0.2500%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="62.9006%" y="645" width="0.0801%" height="15" fill="rgb(239,156,16)" fg:x="785" fg:w="1"/><text x="63.1506%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.9006%" y="629" width="0.0801%" height="15" fill="rgb(224,27,38)" fg:x="785" fg:w="1"/><text x="63.1506%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.9006%" y="613" width="0.0801%" height="15" fill="rgb(224,39,27)" fg:x="785" fg:w="1"/><text x="63.1506%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.9006%" y="597" width="0.0801%" height="15" fill="rgb(215,92,29)" fg:x="785" fg:w="1"/><text x="63.1506%" y="607.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.9808%" y="629" width="0.0801%" height="15" fill="rgb(207,159,16)" fg:x="786" fg:w="1"/><text x="63.2308%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.9808%" y="613" width="0.0801%" height="15" fill="rgb(238,163,47)" fg:x="786" fg:w="1"/><text x="63.2308%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.9808%" y="597" width="0.0801%" height="15" fill="rgb(219,91,49)" fg:x="786" fg:w="1"/><text x="63.2308%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="62.9808%" y="645" width="0.2404%" height="15" fill="rgb(227,167,31)" fg:x="786" fg:w="3"/><text x="63.2308%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (2 samples, 0.16%)</title><rect x="63.0609%" y="629" width="0.1603%" height="15" fill="rgb(234,80,54)" fg:x="787" fg:w="2"/><text x="63.3109%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.0609%" y="613" width="0.1603%" height="15" fill="rgb(212,114,2)" fg:x="787" fg:w="2"/><text x="63.3109%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (2 samples, 0.16%)</title><rect x="63.0609%" y="597" width="0.1603%" height="15" fill="rgb(234,50,24)" fg:x="787" fg:w="2"/><text x="63.3109%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.0609%" y="581" width="0.1603%" height="15" fill="rgb(221,68,8)" fg:x="787" fg:w="2"/><text x="63.3109%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.0609%" y="565" width="0.1603%" height="15" fill="rgb(254,180,31)" fg:x="787" fg:w="2"/><text x="63.3109%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.0609%" y="549" width="0.1603%" height="15" fill="rgb(247,130,50)" fg:x="787" fg:w="2"/><text x="63.3109%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="63.0609%" y="533" width="0.1603%" height="15" fill="rgb(211,109,4)" fg:x="787" fg:w="2"/><text x="63.3109%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.1410%" y="517" width="0.0801%" height="15" fill="rgb(238,50,21)" fg:x="788" fg:w="1"/><text x="63.3910%" y="527.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="63.3013%" y="549" width="0.0801%" height="15" fill="rgb(225,57,45)" fg:x="790" fg:w="1"/><text x="63.5513%" y="559.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.32%)</title><rect x="63.2212%" y="597" width="0.3205%" height="15" fill="rgb(209,196,50)" fg:x="789" fg:w="4"/><text x="63.4712%" y="607.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="63.2212%" y="581" width="0.3205%" height="15" fill="rgb(242,140,13)" fg:x="789" fg:w="4"/><text x="63.4712%" y="591.50"></text></g><g><title>libloading::os::unix::Library::open (4 samples, 0.32%)</title><rect x="63.2212%" y="565" width="0.3205%" height="15" fill="rgb(217,111,7)" fg:x="789" fg:w="4"/><text x="63.4712%" y="575.50"></text></g><g><title>dlopen (2 samples, 0.16%)</title><rect x="63.3814%" y="549" width="0.1603%" height="15" fill="rgb(253,193,51)" fg:x="791" fg:w="2"/><text x="63.6314%" y="559.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="63.3814%" y="533" width="0.1603%" height="15" fill="rgb(252,70,29)" fg:x="791" fg:w="2"/><text x="63.6314%" y="543.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="63.3814%" y="517" width="0.1603%" height="15" fill="rgb(232,127,12)" fg:x="791" fg:w="2"/><text x="63.6314%" y="527.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="63.3814%" y="501" width="0.1603%" height="15" fill="rgb(211,180,21)" fg:x="791" fg:w="2"/><text x="63.6314%" y="511.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="63.3814%" y="485" width="0.1603%" height="15" fill="rgb(229,72,13)" fg:x="791" fg:w="2"/><text x="63.6314%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="63.5417%" y="581" width="0.0801%" height="15" fill="rgb(240,211,49)" fg:x="793" fg:w="1"/><text x="63.7917%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.5417%" y="565" width="0.0801%" height="15" fill="rgb(219,149,40)" fg:x="793" fg:w="1"/><text x="63.7917%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (6 samples, 0.48%)</title><rect x="63.2212%" y="645" width="0.4808%" height="15" fill="rgb(210,127,46)" fg:x="789" fg:w="6"/><text x="63.4712%" y="655.50"></text></g><g><title>engine::session::Session::new (6 samples, 0.48%)</title><rect x="63.2212%" y="629" width="0.4808%" height="15" fill="rgb(220,106,7)" fg:x="789" fg:w="6"/><text x="63.4712%" y="639.50"></text></g><g><title>engine::session::Session::initialize (6 samples, 0.48%)</title><rect x="63.2212%" y="613" width="0.4808%" height="15" fill="rgb(249,31,22)" fg:x="789" fg:w="6"/><text x="63.4712%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="63.5417%" y="597" width="0.1603%" height="15" fill="rgb(253,1,49)" fg:x="793" fg:w="2"/><text x="63.7917%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="63.6218%" y="581" width="0.0801%" height="15" fill="rgb(227,144,33)" fg:x="794" fg:w="1"/><text x="63.8718%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="63.6218%" y="565" width="0.0801%" height="15" fill="rgb(249,163,44)" fg:x="794" fg:w="1"/><text x="63.8718%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::Build&gt; (1 samples, 0.08%)</title><rect x="63.7019%" y="629" width="0.0801%" height="15" fill="rgb(234,15,39)" fg:x="795" fg:w="1"/><text x="63.9519%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="63.7019%" y="613" width="0.0801%" height="15" fill="rgb(207,66,16)" fg:x="795" fg:w="1"/><text x="63.9519%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="63.7821%" y="501" width="0.0801%" height="15" fill="rgb(233,112,24)" fg:x="796" fg:w="1"/><text x="64.0321%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="63.8622%" y="453" width="0.0801%" height="15" fill="rgb(230,90,22)" fg:x="797" fg:w="1"/><text x="64.1122%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="63.8622%" y="437" width="0.0801%" height="15" fill="rgb(229,61,13)" fg:x="797" fg:w="1"/><text x="64.1122%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="63.8622%" y="421" width="0.0801%" height="15" fill="rgb(225,57,24)" fg:x="797" fg:w="1"/><text x="64.1122%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="63.9423%" y="437" width="0.0801%" height="15" fill="rgb(208,169,48)" fg:x="798" fg:w="1"/><text x="64.1923%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="63.9423%" y="421" width="0.0801%" height="15" fill="rgb(244,218,51)" fg:x="798" fg:w="1"/><text x="64.1923%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="63.9423%" y="405" width="0.0801%" height="15" fill="rgb(214,148,10)" fg:x="798" fg:w="1"/><text x="64.1923%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="63.7821%" y="517" width="0.3205%" height="15" fill="rgb(225,174,27)" fg:x="796" fg:w="4"/><text x="64.0321%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="63.8622%" y="501" width="0.2404%" height="15" fill="rgb(230,96,26)" fg:x="797" fg:w="3"/><text x="64.1122%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="63.8622%" y="485" width="0.2404%" height="15" fill="rgb(232,10,30)" fg:x="797" fg:w="3"/><text x="64.1122%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="63.8622%" y="469" width="0.2404%" height="15" fill="rgb(222,8,50)" fg:x="797" fg:w="3"/><text x="64.1122%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="63.9423%" y="453" width="0.1603%" height="15" fill="rgb(213,81,27)" fg:x="798" fg:w="2"/><text x="64.1923%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="64.0224%" y="437" width="0.0801%" height="15" fill="rgb(245,50,10)" fg:x="799" fg:w="1"/><text x="64.2724%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="64.0224%" y="421" width="0.0801%" height="15" fill="rgb(216,100,18)" fg:x="799" fg:w="1"/><text x="64.2724%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="64.0224%" y="405" width="0.0801%" height="15" fill="rgb(236,147,54)" fg:x="799" fg:w="1"/><text x="64.2724%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.0224%" y="389" width="0.0801%" height="15" fill="rgb(205,143,26)" fg:x="799" fg:w="1"/><text x="64.2724%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.0224%" y="373" width="0.0801%" height="15" fill="rgb(236,26,9)" fg:x="799" fg:w="1"/><text x="64.2724%" y="383.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="63.7821%" y="549" width="0.4006%" height="15" fill="rgb(221,165,53)" fg:x="796" fg:w="5"/><text x="64.0321%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="63.7821%" y="533" width="0.4006%" height="15" fill="rgb(214,110,17)" fg:x="796" fg:w="5"/><text x="64.0321%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="64.1026%" y="517" width="0.0801%" height="15" fill="rgb(237,197,12)" fg:x="800" fg:w="1"/><text x="64.3526%" y="527.50"></text></g><g><title>engine::session::Session::flush (6 samples, 0.48%)</title><rect x="63.7821%" y="629" width="0.4808%" height="15" fill="rgb(205,84,17)" fg:x="796" fg:w="6"/><text x="64.0321%" y="639.50"></text></g><g><title>engine::session::state::State::close (6 samples, 0.48%)</title><rect x="63.7821%" y="613" width="0.4808%" height="15" fill="rgb(237,18,45)" fg:x="796" fg:w="6"/><text x="64.0321%" y="623.50"></text></g><g><title>engine::session::state::State::flush_entities (6 samples, 0.48%)</title><rect x="63.7821%" y="597" width="0.4808%" height="15" fill="rgb(221,87,14)" fg:x="796" fg:w="6"/><text x="64.0321%" y="607.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (6 samples, 0.48%)</title><rect x="63.7821%" y="581" width="0.4808%" height="15" fill="rgb(238,186,15)" fg:x="796" fg:w="6"/><text x="64.0321%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (6 samples, 0.48%)</title><rect x="63.7821%" y="565" width="0.4808%" height="15" fill="rgb(208,115,11)" fg:x="796" fg:w="6"/><text x="64.0321%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (1 samples, 0.08%)</title><rect x="64.1827%" y="549" width="0.0801%" height="15" fill="rgb(254,175,0)" fg:x="801" fg:w="1"/><text x="64.4327%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="64.1827%" y="533" width="0.0801%" height="15" fill="rgb(227,24,42)" fg:x="801" fg:w="1"/><text x="64.4327%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.1827%" y="517" width="0.0801%" height="15" fill="rgb(223,211,37)" fg:x="801" fg:w="1"/><text x="64.4327%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="64.1827%" y="501" width="0.0801%" height="15" fill="rgb(235,49,27)" fg:x="801" fg:w="1"/><text x="64.4327%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="64.1827%" y="485" width="0.0801%" height="15" fill="rgb(254,97,51)" fg:x="801" fg:w="1"/><text x="64.4327%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="64.2628%" y="581" width="0.0801%" height="15" fill="rgb(249,51,40)" fg:x="802" fg:w="1"/><text x="64.5128%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.2628%" y="565" width="0.0801%" height="15" fill="rgb(210,128,45)" fg:x="802" fg:w="1"/><text x="64.5128%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.2628%" y="549" width="0.0801%" height="15" fill="rgb(224,137,50)" fg:x="802" fg:w="1"/><text x="64.5128%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.2628%" y="533" width="0.0801%" height="15" fill="rgb(242,15,9)" fg:x="802" fg:w="1"/><text x="64.5128%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.2628%" y="517" width="0.0801%" height="15" fill="rgb(233,187,41)" fg:x="802" fg:w="1"/><text x="64.5128%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.2628%" y="501" width="0.0801%" height="15" fill="rgb(227,2,29)" fg:x="802" fg:w="1"/><text x="64.5128%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.2628%" y="485" width="0.0801%" height="15" fill="rgb(222,70,3)" fg:x="802" fg:w="1"/><text x="64.5128%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.2628%" y="469" width="0.0801%" height="15" fill="rgb(213,11,42)" fg:x="802" fg:w="1"/><text x="64.5128%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.2628%" y="453" width="0.0801%" height="15" fill="rgb(225,150,9)" fg:x="802" fg:w="1"/><text x="64.5128%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="64.2628%" y="437" width="0.0801%" height="15" fill="rgb(230,162,45)" fg:x="802" fg:w="1"/><text x="64.5128%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="64.2628%" y="421" width="0.0801%" height="15" fill="rgb(222,14,52)" fg:x="802" fg:w="1"/><text x="64.5128%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="64.2628%" y="405" width="0.0801%" height="15" fill="rgb(254,198,14)" fg:x="802" fg:w="1"/><text x="64.5128%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.2628%" y="389" width="0.0801%" height="15" fill="rgb(220,217,30)" fg:x="802" fg:w="1"/><text x="64.5128%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="64.2628%" y="613" width="0.1603%" height="15" fill="rgb(215,146,41)" fg:x="802" fg:w="2"/><text x="64.5128%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="64.2628%" y="597" width="0.1603%" height="15" fill="rgb(217,27,36)" fg:x="802" fg:w="2"/><text x="64.5128%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="64.3429%" y="581" width="0.0801%" height="15" fill="rgb(219,218,39)" fg:x="803" fg:w="1"/><text x="64.5929%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.3429%" y="565" width="0.0801%" height="15" fill="rgb(219,4,42)" fg:x="803" fg:w="1"/><text x="64.5929%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.3429%" y="549" width="0.0801%" height="15" fill="rgb(249,119,36)" fg:x="803" fg:w="1"/><text x="64.5929%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="64.3429%" y="533" width="0.0801%" height="15" fill="rgb(209,23,33)" fg:x="803" fg:w="1"/><text x="64.5929%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.3429%" y="517" width="0.0801%" height="15" fill="rgb(211,10,0)" fg:x="803" fg:w="1"/><text x="64.5929%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::carrying::model::Location&gt;&gt; (1 samples, 0.08%)</title><rect x="64.4231%" y="597" width="0.0801%" height="15" fill="rgb(208,99,37)" fg:x="804" fg:w="1"/><text x="64.6731%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="64.4231%" y="581" width="0.0801%" height="15" fill="rgb(213,132,31)" fg:x="804" fg:w="1"/><text x="64.6731%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="64.5032%" y="597" width="0.0801%" height="15" fill="rgb(243,129,40)" fg:x="805" fg:w="1"/><text x="64.7532%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="64.5032%" y="581" width="0.0801%" height="15" fill="rgb(210,66,33)" fg:x="805" fg:w="1"/><text x="64.7532%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="64.5032%" y="565" width="0.0801%" height="15" fill="rgb(209,189,4)" fg:x="805" fg:w="1"/><text x="64.7532%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.5032%" y="549" width="0.0801%" height="15" fill="rgb(214,107,37)" fg:x="805" fg:w="1"/><text x="64.7532%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.5032%" y="533" width="0.0801%" height="15" fill="rgb(245,88,54)" fg:x="805" fg:w="1"/><text x="64.7532%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.5032%" y="517" width="0.0801%" height="15" fill="rgb(205,146,20)" fg:x="805" fg:w="1"/><text x="64.7532%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="64.5032%" y="501" width="0.0801%" height="15" fill="rgb(220,161,25)" fg:x="805" fg:w="1"/><text x="64.7532%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.5032%" y="485" width="0.0801%" height="15" fill="rgb(215,152,15)" fg:x="805" fg:w="1"/><text x="64.7532%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.5032%" y="469" width="0.0801%" height="15" fill="rgb(233,192,44)" fg:x="805" fg:w="1"/><text x="64.7532%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.5032%" y="453" width="0.0801%" height="15" fill="rgb(240,170,46)" fg:x="805" fg:w="1"/><text x="64.7532%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.5032%" y="437" width="0.0801%" height="15" fill="rgb(207,104,33)" fg:x="805" fg:w="1"/><text x="64.7532%" y="447.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="64.5833%" y="597" width="0.0801%" height="15" fill="rgb(219,21,39)" fg:x="806" fg:w="1"/><text x="64.8333%" y="607.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="64.5833%" y="581" width="0.0801%" height="15" fill="rgb(214,133,29)" fg:x="806" fg:w="1"/><text x="64.8333%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.5833%" y="565" width="0.0801%" height="15" fill="rgb(226,93,6)" fg:x="806" fg:w="1"/><text x="64.8333%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="64.5833%" y="549" width="0.0801%" height="15" fill="rgb(252,222,34)" fg:x="806" fg:w="1"/><text x="64.8333%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.5833%" y="533" width="0.0801%" height="15" fill="rgb(252,92,48)" fg:x="806" fg:w="1"/><text x="64.8333%" y="543.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.56%)</title><rect x="64.2628%" y="629" width="0.5609%" height="15" fill="rgb(245,223,24)" fg:x="802" fg:w="7"/><text x="64.5128%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="64.4231%" y="613" width="0.4006%" height="15" fill="rgb(205,176,3)" fg:x="804" fg:w="5"/><text x="64.6731%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="64.6635%" y="597" width="0.1603%" height="15" fill="rgb(235,151,15)" fg:x="807" fg:w="2"/><text x="64.9135%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="64.7436%" y="581" width="0.0801%" height="15" fill="rgb(237,209,11)" fg:x="808" fg:w="1"/><text x="64.9936%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="64.7436%" y="565" width="0.0801%" height="15" fill="rgb(243,227,24)" fg:x="808" fg:w="1"/><text x="64.9936%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.7436%" y="549" width="0.0801%" height="15" fill="rgb(239,193,16)" fg:x="808" fg:w="1"/><text x="64.9936%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.7436%" y="533" width="0.0801%" height="15" fill="rgb(231,27,9)" fg:x="808" fg:w="1"/><text x="64.9936%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.7436%" y="517" width="0.0801%" height="15" fill="rgb(219,169,10)" fg:x="808" fg:w="1"/><text x="64.9936%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.7436%" y="501" width="0.0801%" height="15" fill="rgb(244,229,43)" fg:x="808" fg:w="1"/><text x="64.9936%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.7436%" y="485" width="0.0801%" height="15" fill="rgb(254,38,20)" fg:x="808" fg:w="1"/><text x="64.9936%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="64.8237%" y="597" width="0.0801%" height="15" fill="rgb(250,47,30)" fg:x="809" fg:w="1"/><text x="65.0737%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="64.8237%" y="581" width="0.0801%" height="15" fill="rgb(224,124,36)" fg:x="809" fg:w="1"/><text x="65.0737%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="64.8237%" y="565" width="0.0801%" height="15" fill="rgb(246,68,51)" fg:x="809" fg:w="1"/><text x="65.0737%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="64.8237%" y="549" width="0.0801%" height="15" fill="rgb(253,43,49)" fg:x="809" fg:w="1"/><text x="65.0737%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="64.8237%" y="533" width="0.0801%" height="15" fill="rgb(219,54,36)" fg:x="809" fg:w="1"/><text x="65.0737%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="64.8237%" y="517" width="0.0801%" height="15" fill="rgb(227,133,34)" fg:x="809" fg:w="1"/><text x="65.0737%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="64.8237%" y="501" width="0.0801%" height="15" fill="rgb(247,227,15)" fg:x="809" fg:w="1"/><text x="65.0737%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="64.8237%" y="485" width="0.0801%" height="15" fill="rgb(229,96,14)" fg:x="809" fg:w="1"/><text x="65.0737%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="64.8237%" y="469" width="0.0801%" height="15" fill="rgb(220,79,17)" fg:x="809" fg:w="1"/><text x="65.0737%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="64.8237%" y="453" width="0.0801%" height="15" fill="rgb(205,131,53)" fg:x="809" fg:w="1"/><text x="65.0737%" y="463.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="64.8237%" y="437" width="0.0801%" height="15" fill="rgb(209,50,29)" fg:x="809" fg:w="1"/><text x="65.0737%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="64.8237%" y="421" width="0.0801%" height="15" fill="rgb(245,86,46)" fg:x="809" fg:w="1"/><text x="65.0737%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="64.8237%" y="405" width="0.0801%" height="15" fill="rgb(235,66,46)" fg:x="809" fg:w="1"/><text x="65.0737%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="64.8237%" y="389" width="0.0801%" height="15" fill="rgb(232,148,31)" fg:x="809" fg:w="1"/><text x="65.0737%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="64.8237%" y="373" width="0.0801%" height="15" fill="rgb(217,149,8)" fg:x="809" fg:w="1"/><text x="65.0737%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="64.8237%" y="357" width="0.0801%" height="15" fill="rgb(209,183,11)" fg:x="809" fg:w="1"/><text x="65.0737%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="64.8237%" y="341" width="0.0801%" height="15" fill="rgb(208,55,20)" fg:x="809" fg:w="1"/><text x="65.0737%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="64.8237%" y="325" width="0.0801%" height="15" fill="rgb(218,39,14)" fg:x="809" fg:w="1"/><text x="65.0737%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="64.8237%" y="309" width="0.0801%" height="15" fill="rgb(216,169,33)" fg:x="809" fg:w="1"/><text x="65.0737%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="64.8237%" y="293" width="0.0801%" height="15" fill="rgb(233,80,24)" fg:x="809" fg:w="1"/><text x="65.0737%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="64.8237%" y="277" width="0.0801%" height="15" fill="rgb(213,179,31)" fg:x="809" fg:w="1"/><text x="65.0737%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="64.8237%" y="261" width="0.0801%" height="15" fill="rgb(209,19,5)" fg:x="809" fg:w="1"/><text x="65.0737%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.8237%" y="245" width="0.0801%" height="15" fill="rgb(219,18,35)" fg:x="809" fg:w="1"/><text x="65.0737%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="64.8237%" y="229" width="0.0801%" height="15" fill="rgb(209,169,16)" fg:x="809" fg:w="1"/><text x="65.0737%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.8237%" y="213" width="0.0801%" height="15" fill="rgb(245,90,51)" fg:x="809" fg:w="1"/><text x="65.0737%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="64.8237%" y="197" width="0.0801%" height="15" fill="rgb(220,99,45)" fg:x="809" fg:w="1"/><text x="65.0737%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="64.8237%" y="181" width="0.0801%" height="15" fill="rgb(249,89,25)" fg:x="809" fg:w="1"/><text x="65.0737%" y="191.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="64.8237%" y="165" width="0.0801%" height="15" fill="rgb(239,193,0)" fg:x="809" fg:w="1"/><text x="65.0737%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.8237%" y="149" width="0.0801%" height="15" fill="rgb(231,126,1)" fg:x="809" fg:w="1"/><text x="65.0737%" y="159.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.9038%" y="597" width="0.0801%" height="15" fill="rgb(243,166,3)" fg:x="810" fg:w="1"/><text x="65.1538%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.9038%" y="581" width="0.0801%" height="15" fill="rgb(223,22,34)" fg:x="810" fg:w="1"/><text x="65.1538%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.9038%" y="565" width="0.0801%" height="15" fill="rgb(251,52,51)" fg:x="810" fg:w="1"/><text x="65.1538%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9038%" y="549" width="0.0801%" height="15" fill="rgb(221,165,28)" fg:x="810" fg:w="1"/><text x="65.1538%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9038%" y="533" width="0.0801%" height="15" fill="rgb(218,121,47)" fg:x="810" fg:w="1"/><text x="65.1538%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9038%" y="517" width="0.0801%" height="15" fill="rgb(209,120,9)" fg:x="810" fg:w="1"/><text x="65.1538%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9038%" y="501" width="0.0801%" height="15" fill="rgb(236,68,12)" fg:x="810" fg:w="1"/><text x="65.1538%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.9038%" y="485" width="0.0801%" height="15" fill="rgb(225,194,26)" fg:x="810" fg:w="1"/><text x="65.1538%" y="495.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="64.8237%" y="629" width="0.2404%" height="15" fill="rgb(231,84,39)" fg:x="809" fg:w="3"/><text x="65.0737%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="64.8237%" y="613" width="0.2404%" height="15" fill="rgb(210,11,45)" fg:x="809" fg:w="3"/><text x="65.0737%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="64.9840%" y="597" width="0.0801%" height="15" fill="rgb(224,54,52)" fg:x="811" fg:w="1"/><text x="65.2340%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="64.9840%" y="581" width="0.0801%" height="15" fill="rgb(238,102,14)" fg:x="811" fg:w="1"/><text x="65.2340%" y="591.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="65.0641%" y="581" width="0.0801%" height="15" fill="rgb(243,160,52)" fg:x="812" fg:w="1"/><text x="65.3141%" y="591.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="65.0641%" y="565" width="0.0801%" height="15" fill="rgb(216,114,19)" fg:x="812" fg:w="1"/><text x="65.3141%" y="575.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="65.0641%" y="549" width="0.0801%" height="15" fill="rgb(244,166,37)" fg:x="812" fg:w="1"/><text x="65.3141%" y="559.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="65.0641%" y="533" width="0.0801%" height="15" fill="rgb(246,29,44)" fg:x="812" fg:w="1"/><text x="65.3141%" y="543.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="65.0641%" y="517" width="0.0801%" height="15" fill="rgb(215,56,53)" fg:x="812" fg:w="1"/><text x="65.3141%" y="527.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="65.0641%" y="501" width="0.0801%" height="15" fill="rgb(217,60,2)" fg:x="812" fg:w="1"/><text x="65.3141%" y="511.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="65.0641%" y="485" width="0.0801%" height="15" fill="rgb(207,26,24)" fg:x="812" fg:w="1"/><text x="65.3141%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.1442%" y="517" width="0.0801%" height="15" fill="rgb(252,210,15)" fg:x="813" fg:w="1"/><text x="65.3942%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.1442%" y="501" width="0.0801%" height="15" fill="rgb(253,209,26)" fg:x="813" fg:w="1"/><text x="65.3942%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.1442%" y="485" width="0.0801%" height="15" fill="rgb(238,170,14)" fg:x="813" fg:w="1"/><text x="65.3942%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.1442%" y="469" width="0.0801%" height="15" fill="rgb(216,178,15)" fg:x="813" fg:w="1"/><text x="65.3942%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.1442%" y="453" width="0.0801%" height="15" fill="rgb(250,197,2)" fg:x="813" fg:w="1"/><text x="65.3942%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.1442%" y="437" width="0.0801%" height="15" fill="rgb(212,70,42)" fg:x="813" fg:w="1"/><text x="65.3942%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.1442%" y="421" width="0.0801%" height="15" fill="rgb(227,213,9)" fg:x="813" fg:w="1"/><text x="65.3942%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.1442%" y="405" width="0.0801%" height="15" fill="rgb(245,99,25)" fg:x="813" fg:w="1"/><text x="65.3942%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.1442%" y="389" width="0.0801%" height="15" fill="rgb(250,82,29)" fg:x="813" fg:w="1"/><text x="65.3942%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.1442%" y="373" width="0.0801%" height="15" fill="rgb(241,226,54)" fg:x="813" fg:w="1"/><text x="65.3942%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.1442%" y="357" width="0.0801%" height="15" fill="rgb(221,99,41)" fg:x="813" fg:w="1"/><text x="65.3942%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="65.1442%" y="341" width="0.0801%" height="15" fill="rgb(213,90,21)" fg:x="813" fg:w="1"/><text x="65.3942%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="65.1442%" y="325" width="0.0801%" height="15" fill="rgb(205,208,24)" fg:x="813" fg:w="1"/><text x="65.3942%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="65.2244%" y="485" width="0.0801%" height="15" fill="rgb(246,31,12)" fg:x="814" fg:w="1"/><text x="65.4744%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="65.3846%" y="437" width="0.0801%" height="15" fill="rgb(213,154,6)" fg:x="816" fg:w="1"/><text x="65.6346%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="65.3846%" y="469" width="0.1603%" height="15" fill="rgb(222,163,29)" fg:x="816" fg:w="2"/><text x="65.6346%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="65.3846%" y="453" width="0.1603%" height="15" fill="rgb(227,201,8)" fg:x="816" fg:w="2"/><text x="65.6346%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="65.4647%" y="437" width="0.0801%" height="15" fill="rgb(233,9,32)" fg:x="817" fg:w="1"/><text x="65.7147%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.4647%" y="421" width="0.0801%" height="15" fill="rgb(217,54,24)" fg:x="817" fg:w="1"/><text x="65.7147%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.4647%" y="405" width="0.0801%" height="15" fill="rgb(235,192,0)" fg:x="817" fg:w="1"/><text x="65.7147%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.4647%" y="389" width="0.0801%" height="15" fill="rgb(235,45,9)" fg:x="817" fg:w="1"/><text x="65.7147%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="65.4647%" y="373" width="0.0801%" height="15" fill="rgb(246,42,40)" fg:x="817" fg:w="1"/><text x="65.7147%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.5449%" y="469" width="0.0801%" height="15" fill="rgb(248,111,24)" fg:x="818" fg:w="1"/><text x="65.7949%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="65.7051%" y="405" width="0.0801%" height="15" fill="rgb(249,65,22)" fg:x="820" fg:w="1"/><text x="65.9551%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.7051%" y="389" width="0.0801%" height="15" fill="rgb(238,111,51)" fg:x="820" fg:w="1"/><text x="65.9551%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.7051%" y="373" width="0.0801%" height="15" fill="rgb(250,118,22)" fg:x="820" fg:w="1"/><text x="65.9551%" y="383.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="65.2244%" y="517" width="0.6410%" height="15" fill="rgb(234,84,26)" fg:x="814" fg:w="8"/><text x="65.4744%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="65.2244%" y="501" width="0.6410%" height="15" fill="rgb(243,172,12)" fg:x="814" fg:w="8"/><text x="65.4744%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="65.3045%" y="485" width="0.5609%" height="15" fill="rgb(236,150,49)" fg:x="815" fg:w="7"/><text x="65.5545%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="65.6250%" y="469" width="0.2404%" height="15" fill="rgb(225,197,26)" fg:x="819" fg:w="3"/><text x="65.8750%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="65.7051%" y="453" width="0.1603%" height="15" fill="rgb(214,17,42)" fg:x="820" fg:w="2"/><text x="65.9551%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="65.7051%" y="437" width="0.1603%" height="15" fill="rgb(224,165,40)" fg:x="820" fg:w="2"/><text x="65.9551%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="65.7051%" y="421" width="0.1603%" height="15" fill="rgb(246,100,4)" fg:x="820" fg:w="2"/><text x="65.9551%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.7853%" y="405" width="0.0801%" height="15" fill="rgb(222,103,0)" fg:x="821" fg:w="1"/><text x="66.0353%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.0256%" y="389" width="0.0801%" height="15" fill="rgb(227,189,26)" fg:x="824" fg:w="1"/><text x="66.2756%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.0256%" y="373" width="0.0801%" height="15" fill="rgb(214,202,17)" fg:x="824" fg:w="1"/><text x="66.2756%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.0256%" y="357" width="0.0801%" height="15" fill="rgb(229,111,3)" fg:x="824" fg:w="1"/><text x="66.2756%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="66.1058%" y="341" width="0.0801%" height="15" fill="rgb(229,172,15)" fg:x="825" fg:w="1"/><text x="66.3558%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="66.1058%" y="325" width="0.0801%" height="15" fill="rgb(230,224,35)" fg:x="825" fg:w="1"/><text x="66.3558%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="66.1058%" y="309" width="0.0801%" height="15" fill="rgb(251,141,6)" fg:x="825" fg:w="1"/><text x="66.3558%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="66.1058%" y="293" width="0.0801%" height="15" fill="rgb(225,208,6)" fg:x="825" fg:w="1"/><text x="66.3558%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="66.1058%" y="277" width="0.0801%" height="15" fill="rgb(246,181,16)" fg:x="825" fg:w="1"/><text x="66.3558%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="65.9455%" y="437" width="0.3205%" height="15" fill="rgb(227,129,36)" fg:x="823" fg:w="4"/><text x="66.1955%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="65.9455%" y="421" width="0.3205%" height="15" fill="rgb(248,117,24)" fg:x="823" fg:w="4"/><text x="66.1955%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="66.0256%" y="405" width="0.2404%" height="15" fill="rgb(214,185,35)" fg:x="824" fg:w="3"/><text x="66.2756%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="66.1058%" y="389" width="0.1603%" height="15" fill="rgb(236,150,34)" fg:x="825" fg:w="2"/><text x="66.3558%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="66.1058%" y="373" width="0.1603%" height="15" fill="rgb(243,228,27)" fg:x="825" fg:w="2"/><text x="66.3558%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="66.1058%" y="357" width="0.1603%" height="15" fill="rgb(245,77,44)" fg:x="825" fg:w="2"/><text x="66.3558%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.1859%" y="341" width="0.0801%" height="15" fill="rgb(235,214,42)" fg:x="826" fg:w="1"/><text x="66.4359%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="65.9455%" y="453" width="0.4006%" height="15" fill="rgb(221,74,3)" fg:x="823" fg:w="5"/><text x="66.1955%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="66.2660%" y="437" width="0.0801%" height="15" fill="rgb(206,121,29)" fg:x="827" fg:w="1"/><text x="66.5160%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.2660%" y="421" width="0.0801%" height="15" fill="rgb(249,131,53)" fg:x="827" fg:w="1"/><text x="66.5160%" y="431.50"></text></g><g><title>engine::session::Session::flush (17 samples, 1.36%)</title><rect x="65.0641%" y="613" width="1.3622%" height="15" fill="rgb(236,170,29)" fg:x="812" fg:w="17"/><text x="65.3141%" y="623.50"></text></g><g><title>engine::session::Session::save_changes (17 samples, 1.36%)</title><rect x="65.0641%" y="597" width="1.3622%" height="15" fill="rgb(247,96,15)" fg:x="812" fg:w="17"/><text x="65.3141%" y="607.50"></text></g><g><title>engine::session::state::State::close (16 samples, 1.28%)</title><rect x="65.1442%" y="581" width="1.2821%" height="15" fill="rgb(211,210,7)" fg:x="813" fg:w="16"/><text x="65.3942%" y="591.50"></text></g><g><title>engine::session::state::State::flush_entities (16 samples, 1.28%)</title><rect x="65.1442%" y="565" width="1.2821%" height="15" fill="rgb(240,88,50)" fg:x="813" fg:w="16"/><text x="65.3942%" y="575.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (16 samples, 1.28%)</title><rect x="65.1442%" y="549" width="1.2821%" height="15" fill="rgb(209,229,26)" fg:x="813" fg:w="16"/><text x="65.3942%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (16 samples, 1.28%)</title><rect x="65.1442%" y="533" width="1.2821%" height="15" fill="rgb(210,68,23)" fg:x="813" fg:w="16"/><text x="65.3942%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="65.8654%" y="517" width="0.5609%" height="15" fill="rgb(229,180,13)" fg:x="822" fg:w="7"/><text x="66.1154%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="65.9455%" y="501" width="0.4808%" height="15" fill="rgb(236,53,44)" fg:x="823" fg:w="6"/><text x="66.1955%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="65.9455%" y="485" width="0.4808%" height="15" fill="rgb(244,214,29)" fg:x="823" fg:w="6"/><text x="66.1955%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="65.9455%" y="469" width="0.4808%" height="15" fill="rgb(220,75,29)" fg:x="823" fg:w="6"/><text x="66.1955%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.3462%" y="453" width="0.0801%" height="15" fill="rgb(214,183,37)" fg:x="828" fg:w="1"/><text x="66.5962%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.4263%" y="533" width="0.0801%" height="15" fill="rgb(239,117,29)" fg:x="829" fg:w="1"/><text x="66.6763%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.4263%" y="517" width="0.0801%" height="15" fill="rgb(237,171,35)" fg:x="829" fg:w="1"/><text x="66.6763%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.4263%" y="501" width="0.0801%" height="15" fill="rgb(229,178,53)" fg:x="829" fg:w="1"/><text x="66.6763%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.4263%" y="485" width="0.0801%" height="15" fill="rgb(210,102,19)" fg:x="829" fg:w="1"/><text x="66.6763%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.4263%" y="469" width="0.0801%" height="15" fill="rgb(235,127,22)" fg:x="829" fg:w="1"/><text x="66.6763%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.4263%" y="453" width="0.0801%" height="15" fill="rgb(244,31,31)" fg:x="829" fg:w="1"/><text x="66.6763%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.4263%" y="437" width="0.0801%" height="15" fill="rgb(231,43,21)" fg:x="829" fg:w="1"/><text x="66.6763%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.4263%" y="421" width="0.0801%" height="15" fill="rgb(217,131,35)" fg:x="829" fg:w="1"/><text x="66.6763%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.4263%" y="405" width="0.0801%" height="15" fill="rgb(221,149,4)" fg:x="829" fg:w="1"/><text x="66.6763%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.4263%" y="389" width="0.0801%" height="15" fill="rgb(232,170,28)" fg:x="829" fg:w="1"/><text x="66.6763%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.4263%" y="373" width="0.0801%" height="15" fill="rgb(238,56,10)" fg:x="829" fg:w="1"/><text x="66.6763%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.4263%" y="357" width="0.0801%" height="15" fill="rgb(235,196,14)" fg:x="829" fg:w="1"/><text x="66.6763%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.4263%" y="341" width="0.0801%" height="15" fill="rgb(216,45,48)" fg:x="829" fg:w="1"/><text x="66.6763%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.4263%" y="325" width="0.0801%" height="15" fill="rgb(238,213,17)" fg:x="829" fg:w="1"/><text x="66.6763%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.4263%" y="309" width="0.0801%" height="15" fill="rgb(212,13,2)" fg:x="829" fg:w="1"/><text x="66.6763%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.4263%" y="293" width="0.0801%" height="15" fill="rgb(240,114,20)" fg:x="829" fg:w="1"/><text x="66.6763%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="66.4263%" y="597" width="0.1603%" height="15" fill="rgb(228,41,40)" fg:x="829" fg:w="2"/><text x="66.6763%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="66.4263%" y="581" width="0.1603%" height="15" fill="rgb(244,132,35)" fg:x="829" fg:w="2"/><text x="66.6763%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="66.4263%" y="565" width="0.1603%" height="15" fill="rgb(253,189,4)" fg:x="829" fg:w="2"/><text x="66.6763%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="66.4263%" y="549" width="0.1603%" height="15" fill="rgb(224,37,19)" fg:x="829" fg:w="2"/><text x="66.6763%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.5064%" y="533" width="0.0801%" height="15" fill="rgb(235,223,18)" fg:x="830" fg:w="1"/><text x="66.7564%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="66.5064%" y="517" width="0.0801%" height="15" fill="rgb(235,163,25)" fg:x="830" fg:w="1"/><text x="66.7564%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.5064%" y="501" width="0.0801%" height="15" fill="rgb(217,145,28)" fg:x="830" fg:w="1"/><text x="66.7564%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.5064%" y="485" width="0.0801%" height="15" fill="rgb(223,223,32)" fg:x="830" fg:w="1"/><text x="66.7564%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.5064%" y="469" width="0.0801%" height="15" fill="rgb(227,189,39)" fg:x="830" fg:w="1"/><text x="66.7564%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.5064%" y="453" width="0.0801%" height="15" fill="rgb(248,10,22)" fg:x="830" fg:w="1"/><text x="66.7564%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.5064%" y="437" width="0.0801%" height="15" fill="rgb(248,46,39)" fg:x="830" fg:w="1"/><text x="66.7564%" y="447.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="66.5865%" y="581" width="0.0801%" height="15" fill="rgb(248,113,48)" fg:x="831" fg:w="1"/><text x="66.8365%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="66.5865%" y="565" width="0.0801%" height="15" fill="rgb(245,16,25)" fg:x="831" fg:w="1"/><text x="66.8365%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="66.5865%" y="549" width="0.0801%" height="15" fill="rgb(249,152,16)" fg:x="831" fg:w="1"/><text x="66.8365%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.5865%" y="533" width="0.0801%" height="15" fill="rgb(250,16,1)" fg:x="831" fg:w="1"/><text x="66.8365%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.5865%" y="517" width="0.0801%" height="15" fill="rgb(249,138,3)" fg:x="831" fg:w="1"/><text x="66.8365%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.5865%" y="501" width="0.0801%" height="15" fill="rgb(227,71,41)" fg:x="831" fg:w="1"/><text x="66.8365%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="66.5865%" y="485" width="0.0801%" height="15" fill="rgb(209,184,23)" fg:x="831" fg:w="1"/><text x="66.8365%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.5865%" y="469" width="0.0801%" height="15" fill="rgb(223,215,31)" fg:x="831" fg:w="1"/><text x="66.8365%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.5865%" y="453" width="0.0801%" height="15" fill="rgb(210,146,28)" fg:x="831" fg:w="1"/><text x="66.8365%" y="463.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="66.4263%" y="613" width="0.3205%" height="15" fill="rgb(209,183,41)" fg:x="829" fg:w="4"/><text x="66.6763%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="66.5865%" y="597" width="0.1603%" height="15" fill="rgb(209,224,45)" fg:x="831" fg:w="2"/><text x="66.8365%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="66.6667%" y="581" width="0.0801%" height="15" fill="rgb(224,209,51)" fg:x="832" fg:w="1"/><text x="66.9167%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="66.6667%" y="565" width="0.0801%" height="15" fill="rgb(223,17,39)" fg:x="832" fg:w="1"/><text x="66.9167%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="66.6667%" y="549" width="0.0801%" height="15" fill="rgb(234,204,37)" fg:x="832" fg:w="1"/><text x="66.9167%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="66.6667%" y="533" width="0.0801%" height="15" fill="rgb(236,120,5)" fg:x="832" fg:w="1"/><text x="66.9167%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.6667%" y="517" width="0.0801%" height="15" fill="rgb(248,97,27)" fg:x="832" fg:w="1"/><text x="66.9167%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.6667%" y="501" width="0.0801%" height="15" fill="rgb(240,66,17)" fg:x="832" fg:w="1"/><text x="66.9167%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.6667%" y="485" width="0.0801%" height="15" fill="rgb(210,79,3)" fg:x="832" fg:w="1"/><text x="66.9167%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.6667%" y="469" width="0.0801%" height="15" fill="rgb(214,176,27)" fg:x="832" fg:w="1"/><text x="66.9167%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.6667%" y="453" width="0.0801%" height="15" fill="rgb(235,185,3)" fg:x="832" fg:w="1"/><text x="66.9167%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.6667%" y="437" width="0.0801%" height="15" fill="rgb(227,24,12)" fg:x="832" fg:w="1"/><text x="66.9167%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.6667%" y="421" width="0.0801%" height="15" fill="rgb(252,169,48)" fg:x="832" fg:w="1"/><text x="66.9167%" y="431.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="66.7468%" y="581" width="0.0801%" height="15" fill="rgb(212,65,1)" fg:x="833" fg:w="1"/><text x="66.9968%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="66.7468%" y="565" width="0.0801%" height="15" fill="rgb(242,39,24)" fg:x="833" fg:w="1"/><text x="66.9968%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="66.7468%" y="549" width="0.0801%" height="15" fill="rgb(249,32,23)" fg:x="833" fg:w="1"/><text x="66.9968%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="66.7468%" y="533" width="0.0801%" height="15" fill="rgb(251,195,23)" fg:x="833" fg:w="1"/><text x="66.9968%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.7468%" y="517" width="0.0801%" height="15" fill="rgb(236,174,8)" fg:x="833" fg:w="1"/><text x="66.9968%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.7468%" y="501" width="0.0801%" height="15" fill="rgb(220,197,8)" fg:x="833" fg:w="1"/><text x="66.9968%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="66.7468%" y="597" width="0.1603%" height="15" fill="rgb(240,108,37)" fg:x="833" fg:w="2"/><text x="66.9968%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="66.8269%" y="581" width="0.0801%" height="15" fill="rgb(232,176,24)" fg:x="834" fg:w="1"/><text x="67.0769%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="66.8269%" y="565" width="0.0801%" height="15" fill="rgb(243,35,29)" fg:x="834" fg:w="1"/><text x="67.0769%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="66.8269%" y="549" width="0.0801%" height="15" fill="rgb(210,37,18)" fg:x="834" fg:w="1"/><text x="67.0769%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="66.8269%" y="533" width="0.0801%" height="15" fill="rgb(224,184,40)" fg:x="834" fg:w="1"/><text x="67.0769%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="66.8269%" y="517" width="0.0801%" height="15" fill="rgb(236,39,29)" fg:x="834" fg:w="1"/><text x="67.0769%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="66.8269%" y="501" width="0.0801%" height="15" fill="rgb(232,48,39)" fg:x="834" fg:w="1"/><text x="67.0769%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.8269%" y="485" width="0.0801%" height="15" fill="rgb(236,34,42)" fg:x="834" fg:w="1"/><text x="67.0769%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="66.8269%" y="469" width="0.0801%" height="15" fill="rgb(243,106,37)" fg:x="834" fg:w="1"/><text x="67.0769%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.8269%" y="453" width="0.0801%" height="15" fill="rgb(218,96,6)" fg:x="834" fg:w="1"/><text x="67.0769%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.8269%" y="437" width="0.0801%" height="15" fill="rgb(235,130,12)" fg:x="834" fg:w="1"/><text x="67.0769%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.8269%" y="421" width="0.0801%" height="15" fill="rgb(231,95,0)" fg:x="834" fg:w="1"/><text x="67.0769%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.8269%" y="405" width="0.0801%" height="15" fill="rgb(228,12,23)" fg:x="834" fg:w="1"/><text x="67.0769%" y="415.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (24 samples, 1.92%)</title><rect x="65.0641%" y="629" width="1.9231%" height="15" fill="rgb(216,12,1)" fg:x="812" fg:w="24"/><text x="65.3141%" y="639.50">p..</text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="66.7468%" y="613" width="0.2404%" height="15" fill="rgb(219,59,3)" fg:x="833" fg:w="3"/><text x="66.9968%" y="623.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="66.9071%" y="597" width="0.0801%" height="15" fill="rgb(215,208,46)" fg:x="835" fg:w="1"/><text x="67.1571%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="66.9071%" y="581" width="0.0801%" height="15" fill="rgb(254,224,29)" fg:x="835" fg:w="1"/><text x="67.1571%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="66.9071%" y="565" width="0.0801%" height="15" fill="rgb(232,14,29)" fg:x="835" fg:w="1"/><text x="67.1571%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="66.9071%" y="549" width="0.0801%" height="15" fill="rgb(208,45,52)" fg:x="835" fg:w="1"/><text x="67.1571%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.9071%" y="533" width="0.0801%" height="15" fill="rgb(234,191,28)" fg:x="835" fg:w="1"/><text x="67.1571%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.9071%" y="517" width="0.0801%" height="15" fill="rgb(244,67,43)" fg:x="835" fg:w="1"/><text x="67.1571%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.9071%" y="501" width="0.0801%" height="15" fill="rgb(236,189,24)" fg:x="835" fg:w="1"/><text x="67.1571%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.9071%" y="485" width="0.0801%" height="15" fill="rgb(239,214,33)" fg:x="835" fg:w="1"/><text x="67.1571%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.9071%" y="469" width="0.0801%" height="15" fill="rgb(226,176,41)" fg:x="835" fg:w="1"/><text x="67.1571%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.9071%" y="453" width="0.0801%" height="15" fill="rgb(248,47,8)" fg:x="835" fg:w="1"/><text x="67.1571%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9071%" y="437" width="0.0801%" height="15" fill="rgb(218,81,44)" fg:x="835" fg:w="1"/><text x="67.1571%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9071%" y="421" width="0.0801%" height="15" fill="rgb(213,98,6)" fg:x="835" fg:w="1"/><text x="67.1571%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.9071%" y="405" width="0.0801%" height="15" fill="rgb(222,85,22)" fg:x="835" fg:w="1"/><text x="67.1571%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.9071%" y="389" width="0.0801%" height="15" fill="rgb(239,46,39)" fg:x="835" fg:w="1"/><text x="67.1571%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.9071%" y="373" width="0.0801%" height="15" fill="rgb(237,12,29)" fg:x="835" fg:w="1"/><text x="67.1571%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.9071%" y="357" width="0.0801%" height="15" fill="rgb(214,77,8)" fg:x="835" fg:w="1"/><text x="67.1571%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.9071%" y="341" width="0.0801%" height="15" fill="rgb(217,168,37)" fg:x="835" fg:w="1"/><text x="67.1571%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.9071%" y="325" width="0.0801%" height="15" fill="rgb(221,217,23)" fg:x="835" fg:w="1"/><text x="67.1571%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.9071%" y="309" width="0.0801%" height="15" fill="rgb(243,229,36)" fg:x="835" fg:w="1"/><text x="67.1571%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.9071%" y="293" width="0.0801%" height="15" fill="rgb(251,163,40)" fg:x="835" fg:w="1"/><text x="67.1571%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.9071%" y="277" width="0.0801%" height="15" fill="rgb(237,222,12)" fg:x="835" fg:w="1"/><text x="67.1571%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.9071%" y="261" width="0.0801%" height="15" fill="rgb(248,132,6)" fg:x="835" fg:w="1"/><text x="67.1571%" y="271.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="66.9872%" y="629" width="0.0801%" height="15" fill="rgb(227,167,50)" fg:x="836" fg:w="1"/><text x="67.2372%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="66.9872%" y="613" width="0.0801%" height="15" fill="rgb(242,84,37)" fg:x="836" fg:w="1"/><text x="67.2372%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="66.9872%" y="597" width="0.0801%" height="15" fill="rgb(212,4,50)" fg:x="836" fg:w="1"/><text x="67.2372%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="66.9872%" y="581" width="0.0801%" height="15" fill="rgb(230,228,32)" fg:x="836" fg:w="1"/><text x="67.2372%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.9872%" y="565" width="0.0801%" height="15" fill="rgb(248,217,23)" fg:x="836" fg:w="1"/><text x="67.2372%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.9872%" y="549" width="0.0801%" height="15" fill="rgb(238,197,32)" fg:x="836" fg:w="1"/><text x="67.2372%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.9872%" y="533" width="0.0801%" height="15" fill="rgb(236,106,1)" fg:x="836" fg:w="1"/><text x="67.2372%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.9872%" y="517" width="0.0801%" height="15" fill="rgb(219,228,13)" fg:x="836" fg:w="1"/><text x="67.2372%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.9872%" y="501" width="0.0801%" height="15" fill="rgb(238,30,35)" fg:x="836" fg:w="1"/><text x="67.2372%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9872%" y="485" width="0.0801%" height="15" fill="rgb(236,70,23)" fg:x="836" fg:w="1"/><text x="67.2372%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9872%" y="469" width="0.0801%" height="15" fill="rgb(249,104,48)" fg:x="836" fg:w="1"/><text x="67.2372%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.9872%" y="453" width="0.0801%" height="15" fill="rgb(254,117,50)" fg:x="836" fg:w="1"/><text x="67.2372%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.9872%" y="437" width="0.0801%" height="15" fill="rgb(223,152,4)" fg:x="836" fg:w="1"/><text x="67.2372%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.9872%" y="421" width="0.0801%" height="15" fill="rgb(245,6,2)" fg:x="836" fg:w="1"/><text x="67.2372%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.9872%" y="405" width="0.0801%" height="15" fill="rgb(249,150,24)" fg:x="836" fg:w="1"/><text x="67.2372%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.9872%" y="389" width="0.0801%" height="15" fill="rgb(228,185,42)" fg:x="836" fg:w="1"/><text x="67.2372%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.9872%" y="373" width="0.0801%" height="15" fill="rgb(226,39,33)" fg:x="836" fg:w="1"/><text x="67.2372%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.9872%" y="357" width="0.0801%" height="15" fill="rgb(221,166,19)" fg:x="836" fg:w="1"/><text x="67.2372%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.9872%" y="341" width="0.0801%" height="15" fill="rgb(209,109,2)" fg:x="836" fg:w="1"/><text x="67.2372%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.9872%" y="325" width="0.0801%" height="15" fill="rgb(252,216,26)" fg:x="836" fg:w="1"/><text x="67.2372%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.9872%" y="309" width="0.0801%" height="15" fill="rgb(227,173,36)" fg:x="836" fg:w="1"/><text x="67.2372%" y="319.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="67.0673%" y="549" width="0.0801%" height="15" fill="rgb(209,90,7)" fg:x="837" fg:w="1"/><text x="67.3173%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.0673%" y="533" width="0.0801%" height="15" fill="rgb(250,194,11)" fg:x="837" fg:w="1"/><text x="67.3173%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="67.0673%" y="613" width="0.1603%" height="15" fill="rgb(220,72,50)" fg:x="837" fg:w="2"/><text x="67.3173%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="67.0673%" y="597" width="0.1603%" height="15" fill="rgb(222,106,48)" fg:x="837" fg:w="2"/><text x="67.3173%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="67.0673%" y="581" width="0.1603%" height="15" fill="rgb(216,220,45)" fg:x="837" fg:w="2"/><text x="67.3173%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="67.0673%" y="565" width="0.1603%" height="15" fill="rgb(234,112,18)" fg:x="837" fg:w="2"/><text x="67.3173%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="67.1474%" y="549" width="0.0801%" height="15" fill="rgb(206,179,9)" fg:x="838" fg:w="1"/><text x="67.3974%" y="559.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="67.1474%" y="533" width="0.0801%" height="15" fill="rgb(215,115,40)" fg:x="838" fg:w="1"/><text x="67.3974%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="67.1474%" y="517" width="0.0801%" height="15" fill="rgb(222,69,34)" fg:x="838" fg:w="1"/><text x="67.3974%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.1474%" y="501" width="0.0801%" height="15" fill="rgb(209,161,10)" fg:x="838" fg:w="1"/><text x="67.3974%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="67.1474%" y="485" width="0.0801%" height="15" fill="rgb(217,6,38)" fg:x="838" fg:w="1"/><text x="67.3974%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.1474%" y="469" width="0.0801%" height="15" fill="rgb(229,229,48)" fg:x="838" fg:w="1"/><text x="67.3974%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="67.1474%" y="453" width="0.0801%" height="15" fill="rgb(225,21,28)" fg:x="838" fg:w="1"/><text x="67.3974%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.1474%" y="437" width="0.0801%" height="15" fill="rgb(206,33,13)" fg:x="838" fg:w="1"/><text x="67.3974%" y="447.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (45 samples, 3.61%)</title><rect x="63.7019%" y="645" width="3.6058%" height="15" fill="rgb(242,178,17)" fg:x="795" fg:w="45"/><text x="63.9519%" y="655.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="67.0673%" y="629" width="0.2404%" height="15" fill="rgb(220,162,5)" fg:x="837" fg:w="3"/><text x="67.3173%" y="639.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="67.2276%" y="613" width="0.0801%" height="15" fill="rgb(210,33,43)" fg:x="839" fg:w="1"/><text x="67.4776%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="67.2276%" y="597" width="0.0801%" height="15" fill="rgb(216,116,54)" fg:x="839" fg:w="1"/><text x="67.4776%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="67.2276%" y="581" width="0.0801%" height="15" fill="rgb(249,92,24)" fg:x="839" fg:w="1"/><text x="67.4776%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="67.2276%" y="565" width="0.0801%" height="15" fill="rgb(231,189,14)" fg:x="839" fg:w="1"/><text x="67.4776%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.2276%" y="549" width="0.0801%" height="15" fill="rgb(230,8,41)" fg:x="839" fg:w="1"/><text x="67.4776%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.2276%" y="533" width="0.0801%" height="15" fill="rgb(249,7,27)" fg:x="839" fg:w="1"/><text x="67.4776%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="67.2276%" y="517" width="0.0801%" height="15" fill="rgb(232,86,5)" fg:x="839" fg:w="1"/><text x="67.4776%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="67.3077%" y="549" width="0.0801%" height="15" fill="rgb(224,175,18)" fg:x="840" fg:w="1"/><text x="67.5577%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.3077%" y="533" width="0.0801%" height="15" fill="rgb(220,129,12)" fg:x="840" fg:w="1"/><text x="67.5577%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.3077%" y="517" width="0.0801%" height="15" fill="rgb(210,19,36)" fg:x="840" fg:w="1"/><text x="67.5577%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.3077%" y="501" width="0.0801%" height="15" fill="rgb(219,96,14)" fg:x="840" fg:w="1"/><text x="67.5577%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="67.3077%" y="565" width="0.1603%" height="15" fill="rgb(249,106,1)" fg:x="840" fg:w="2"/><text x="67.5577%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.3878%" y="549" width="0.0801%" height="15" fill="rgb(249,155,20)" fg:x="841" fg:w="1"/><text x="67.6378%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.5481%" y="485" width="0.0801%" height="15" fill="rgb(244,168,9)" fg:x="843" fg:w="1"/><text x="67.7981%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.5481%" y="469" width="0.0801%" height="15" fill="rgb(216,23,50)" fg:x="843" fg:w="1"/><text x="67.7981%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.6282%" y="469" width="0.0801%" height="15" fill="rgb(224,219,20)" fg:x="844" fg:w="1"/><text x="67.8782%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="67.5481%" y="533" width="0.2404%" height="15" fill="rgb(222,156,15)" fg:x="843" fg:w="3"/><text x="67.7981%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="67.5481%" y="517" width="0.2404%" height="15" fill="rgb(231,97,17)" fg:x="843" fg:w="3"/><text x="67.7981%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="67.5481%" y="501" width="0.2404%" height="15" fill="rgb(218,70,48)" fg:x="843" fg:w="3"/><text x="67.7981%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.6282%" y="485" width="0.1603%" height="15" fill="rgb(212,196,52)" fg:x="844" fg:w="2"/><text x="67.8782%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.7083%" y="469" width="0.0801%" height="15" fill="rgb(243,203,18)" fg:x="845" fg:w="1"/><text x="67.9583%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.7083%" y="453" width="0.0801%" height="15" fill="rgb(252,125,41)" fg:x="845" fg:w="1"/><text x="67.9583%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.7083%" y="437" width="0.0801%" height="15" fill="rgb(223,180,33)" fg:x="845" fg:w="1"/><text x="67.9583%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.7083%" y="421" width="0.0801%" height="15" fill="rgb(254,159,46)" fg:x="845" fg:w="1"/><text x="67.9583%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.7083%" y="405" width="0.0801%" height="15" fill="rgb(254,38,10)" fg:x="845" fg:w="1"/><text x="67.9583%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.7083%" y="389" width="0.0801%" height="15" fill="rgb(208,217,32)" fg:x="845" fg:w="1"/><text x="67.9583%" y="399.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.40%)</title><rect x="67.4679%" y="549" width="0.4006%" height="15" fill="rgb(221,120,13)" fg:x="842" fg:w="5"/><text x="67.7179%" y="559.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="67.7885%" y="533" width="0.0801%" height="15" fill="rgb(246,54,52)" fg:x="846" fg:w="1"/><text x="68.0385%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="67.7885%" y="517" width="0.0801%" height="15" fill="rgb(242,34,25)" fg:x="846" fg:w="1"/><text x="68.0385%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="67.7885%" y="501" width="0.0801%" height="15" fill="rgb(247,209,9)" fg:x="846" fg:w="1"/><text x="68.0385%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="67.7885%" y="485" width="0.0801%" height="15" fill="rgb(228,71,26)" fg:x="846" fg:w="1"/><text x="68.0385%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="67.7885%" y="469" width="0.0801%" height="15" fill="rgb(222,145,49)" fg:x="846" fg:w="1"/><text x="68.0385%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="67.7885%" y="453" width="0.0801%" height="15" fill="rgb(218,121,17)" fg:x="846" fg:w="1"/><text x="68.0385%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="67.7885%" y="437" width="0.0801%" height="15" fill="rgb(244,50,7)" fg:x="846" fg:w="1"/><text x="68.0385%" y="447.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.8686%" y="517" width="0.0801%" height="15" fill="rgb(246,229,37)" fg:x="847" fg:w="1"/><text x="68.1186%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="67.8686%" y="501" width="0.0801%" height="15" fill="rgb(225,18,5)" fg:x="847" fg:w="1"/><text x="68.1186%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.9487%" y="517" width="0.0801%" height="15" fill="rgb(213,204,8)" fg:x="848" fg:w="1"/><text x="68.1987%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.9487%" y="501" width="0.0801%" height="15" fill="rgb(238,103,6)" fg:x="848" fg:w="1"/><text x="68.1987%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.9487%" y="485" width="0.0801%" height="15" fill="rgb(222,25,35)" fg:x="848" fg:w="1"/><text x="68.1987%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="68.0288%" y="517" width="0.0801%" height="15" fill="rgb(213,203,35)" fg:x="849" fg:w="1"/><text x="68.2788%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.0288%" y="501" width="0.0801%" height="15" fill="rgb(221,79,53)" fg:x="849" fg:w="1"/><text x="68.2788%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="68.0288%" y="485" width="0.0801%" height="15" fill="rgb(243,200,35)" fg:x="849" fg:w="1"/><text x="68.2788%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="68.1090%" y="517" width="0.0801%" height="15" fill="rgb(248,60,25)" fg:x="850" fg:w="1"/><text x="68.3590%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.1090%" y="501" width="0.0801%" height="15" fill="rgb(227,53,46)" fg:x="850" fg:w="1"/><text x="68.3590%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1090%" y="485" width="0.0801%" height="15" fill="rgb(216,120,32)" fg:x="850" fg:w="1"/><text x="68.3590%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="68.1891%" y="517" width="0.0801%" height="15" fill="rgb(220,134,1)" fg:x="851" fg:w="1"/><text x="68.4391%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.1891%" y="501" width="0.0801%" height="15" fill="rgb(237,168,5)" fg:x="851" fg:w="1"/><text x="68.4391%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1891%" y="485" width="0.0801%" height="15" fill="rgb(231,100,33)" fg:x="851" fg:w="1"/><text x="68.4391%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.3494%" y="469" width="0.0801%" height="15" fill="rgb(236,177,47)" fg:x="853" fg:w="1"/><text x="68.5994%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.3494%" y="453" width="0.0801%" height="15" fill="rgb(235,7,49)" fg:x="853" fg:w="1"/><text x="68.5994%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="68.5096%" y="357" width="0.0801%" height="15" fill="rgb(232,119,22)" fg:x="855" fg:w="1"/><text x="68.7596%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="68.2692%" y="485" width="0.4006%" height="15" fill="rgb(254,73,53)" fg:x="852" fg:w="5"/><text x="68.5192%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="68.4295%" y="469" width="0.2404%" height="15" fill="rgb(251,35,20)" fg:x="854" fg:w="3"/><text x="68.6795%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="68.4295%" y="453" width="0.2404%" height="15" fill="rgb(241,119,20)" fg:x="854" fg:w="3"/><text x="68.6795%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="68.4295%" y="437" width="0.2404%" height="15" fill="rgb(207,102,14)" fg:x="854" fg:w="3"/><text x="68.6795%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="68.4295%" y="421" width="0.2404%" height="15" fill="rgb(248,201,50)" fg:x="854" fg:w="3"/><text x="68.6795%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="68.4295%" y="405" width="0.2404%" height="15" fill="rgb(222,185,44)" fg:x="854" fg:w="3"/><text x="68.6795%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="68.4295%" y="389" width="0.2404%" height="15" fill="rgb(218,107,18)" fg:x="854" fg:w="3"/><text x="68.6795%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="68.4295%" y="373" width="0.2404%" height="15" fill="rgb(237,177,39)" fg:x="854" fg:w="3"/><text x="68.6795%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.5897%" y="357" width="0.0801%" height="15" fill="rgb(246,69,6)" fg:x="856" fg:w="1"/><text x="68.8397%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.5897%" y="341" width="0.0801%" height="15" fill="rgb(234,208,37)" fg:x="856" fg:w="1"/><text x="68.8397%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.5897%" y="325" width="0.0801%" height="15" fill="rgb(225,4,6)" fg:x="856" fg:w="1"/><text x="68.8397%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="68.2692%" y="501" width="0.4808%" height="15" fill="rgb(233,45,0)" fg:x="852" fg:w="6"/><text x="68.5192%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="68.6699%" y="485" width="0.0801%" height="15" fill="rgb(226,136,5)" fg:x="857" fg:w="1"/><text x="68.9199%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.6699%" y="469" width="0.0801%" height="15" fill="rgb(211,91,47)" fg:x="857" fg:w="1"/><text x="68.9199%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.96%)</title><rect x="67.8686%" y="549" width="0.9615%" height="15" fill="rgb(242,88,51)" fg:x="847" fg:w="12"/><text x="68.1186%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.96%)</title><rect x="67.8686%" y="533" width="0.9615%" height="15" fill="rgb(230,91,28)" fg:x="847" fg:w="12"/><text x="68.1186%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="68.2692%" y="517" width="0.5609%" height="15" fill="rgb(254,186,29)" fg:x="852" fg:w="7"/><text x="68.5192%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.7500%" y="501" width="0.0801%" height="15" fill="rgb(238,6,4)" fg:x="858" fg:w="1"/><text x="69.0000%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.7500%" y="485" width="0.0801%" height="15" fill="rgb(221,151,16)" fg:x="858" fg:w="1"/><text x="69.0000%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.7500%" y="469" width="0.0801%" height="15" fill="rgb(251,143,52)" fg:x="858" fg:w="1"/><text x="69.0000%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.9904%" y="357" width="0.0801%" height="15" fill="rgb(206,90,15)" fg:x="861" fg:w="1"/><text x="69.2404%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.9904%" y="341" width="0.0801%" height="15" fill="rgb(218,35,8)" fg:x="861" fg:w="1"/><text x="69.2404%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.9904%" y="325" width="0.0801%" height="15" fill="rgb(239,215,6)" fg:x="861" fg:w="1"/><text x="69.2404%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.9904%" y="309" width="0.0801%" height="15" fill="rgb(245,116,39)" fg:x="861" fg:w="1"/><text x="69.2404%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="68.8301%" y="453" width="0.3205%" height="15" fill="rgb(242,65,28)" fg:x="859" fg:w="4"/><text x="69.0801%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="68.8301%" y="437" width="0.3205%" height="15" fill="rgb(252,132,53)" fg:x="859" fg:w="4"/><text x="69.0801%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="68.8301%" y="421" width="0.3205%" height="15" fill="rgb(224,159,50)" fg:x="859" fg:w="4"/><text x="69.0801%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="68.8301%" y="405" width="0.3205%" height="15" fill="rgb(224,93,4)" fg:x="859" fg:w="4"/><text x="69.0801%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.9904%" y="389" width="0.1603%" height="15" fill="rgb(208,81,34)" fg:x="861" fg:w="2"/><text x="69.2404%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.9904%" y="373" width="0.1603%" height="15" fill="rgb(233,92,54)" fg:x="861" fg:w="2"/><text x="69.2404%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.0705%" y="357" width="0.0801%" height="15" fill="rgb(237,21,14)" fg:x="862" fg:w="1"/><text x="69.3205%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="68.8301%" y="485" width="0.4006%" height="15" fill="rgb(249,128,51)" fg:x="859" fg:w="5"/><text x="69.0801%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="68.8301%" y="469" width="0.4006%" height="15" fill="rgb(223,129,24)" fg:x="859" fg:w="5"/><text x="69.0801%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.1506%" y="453" width="0.0801%" height="15" fill="rgb(231,168,25)" fg:x="863" fg:w="1"/><text x="69.4006%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.1506%" y="437" width="0.0801%" height="15" fill="rgb(224,39,20)" fg:x="863" fg:w="1"/><text x="69.4006%" y="447.50"></text></g><g><title>engine::session::Session::close (25 samples, 2.00%)</title><rect x="67.3077%" y="645" width="2.0032%" height="15" fill="rgb(225,152,53)" fg:x="840" fg:w="25"/><text x="67.5577%" y="655.50">e..</text></g><g><title>engine::session::state::State::close (25 samples, 2.00%)</title><rect x="67.3077%" y="629" width="2.0032%" height="15" fill="rgb(252,17,24)" fg:x="840" fg:w="25"/><text x="67.5577%" y="639.50">e..</text></g><g><title>engine::session::state::State::flush_entities (25 samples, 2.00%)</title><rect x="67.3077%" y="613" width="2.0032%" height="15" fill="rgb(250,114,30)" fg:x="840" fg:w="25"/><text x="67.5577%" y="623.50">e..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (25 samples, 2.00%)</title><rect x="67.3077%" y="597" width="2.0032%" height="15" fill="rgb(229,5,4)" fg:x="840" fg:w="25"/><text x="67.5577%" y="607.50">e..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (25 samples, 2.00%)</title><rect x="67.3077%" y="581" width="2.0032%" height="15" fill="rgb(225,176,49)" fg:x="840" fg:w="25"/><text x="67.5577%" y="591.50">e..</text></g><g><title>kernel::model::any_entity_changes (23 samples, 1.84%)</title><rect x="67.4679%" y="565" width="1.8429%" height="15" fill="rgb(224,221,49)" fg:x="842" fg:w="23"/><text x="67.7179%" y="575.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="68.8301%" y="549" width="0.4808%" height="15" fill="rgb(253,169,27)" fg:x="859" fg:w="6"/><text x="69.0801%" y="559.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="68.8301%" y="533" width="0.4808%" height="15" fill="rgb(211,206,16)" fg:x="859" fg:w="6"/><text x="69.0801%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="68.8301%" y="517" width="0.4808%" height="15" fill="rgb(244,87,35)" fg:x="859" fg:w="6"/><text x="69.0801%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="68.8301%" y="501" width="0.4808%" height="15" fill="rgb(246,28,10)" fg:x="859" fg:w="6"/><text x="69.0801%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.2308%" y="485" width="0.0801%" height="15" fill="rgb(229,12,44)" fg:x="864" fg:w="1"/><text x="69.4808%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="69.3109%" y="501" width="0.0801%" height="15" fill="rgb(210,145,37)" fg:x="865" fg:w="1"/><text x="69.5609%" y="511.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="69.3109%" y="485" width="0.0801%" height="15" fill="rgb(227,112,52)" fg:x="865" fg:w="1"/><text x="69.5609%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.3109%" y="469" width="0.0801%" height="15" fill="rgb(238,155,34)" fg:x="865" fg:w="1"/><text x="69.5609%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="69.3910%" y="485" width="0.0801%" height="15" fill="rgb(239,226,36)" fg:x="866" fg:w="1"/><text x="69.6410%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.3910%" y="469" width="0.0801%" height="15" fill="rgb(230,16,23)" fg:x="866" fg:w="1"/><text x="69.6410%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3910%" y="453" width="0.0801%" height="15" fill="rgb(236,171,36)" fg:x="866" fg:w="1"/><text x="69.6410%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.3910%" y="437" width="0.0801%" height="15" fill="rgb(221,22,14)" fg:x="866" fg:w="1"/><text x="69.6410%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3910%" y="421" width="0.0801%" height="15" fill="rgb(242,43,11)" fg:x="866" fg:w="1"/><text x="69.6410%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.3910%" y="405" width="0.0801%" height="15" fill="rgb(232,69,23)" fg:x="866" fg:w="1"/><text x="69.6410%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3910%" y="389" width="0.0801%" height="15" fill="rgb(216,180,54)" fg:x="866" fg:w="1"/><text x="69.6410%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.3910%" y="373" width="0.0801%" height="15" fill="rgb(216,5,24)" fg:x="866" fg:w="1"/><text x="69.6410%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="69.3109%" y="549" width="0.2404%" height="15" fill="rgb(225,89,9)" fg:x="865" fg:w="3"/><text x="69.5609%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="69.3109%" y="533" width="0.2404%" height="15" fill="rgb(243,75,33)" fg:x="865" fg:w="3"/><text x="69.5609%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="69.3109%" y="517" width="0.2404%" height="15" fill="rgb(247,141,45)" fg:x="865" fg:w="3"/><text x="69.5609%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="69.3910%" y="501" width="0.1603%" height="15" fill="rgb(232,177,36)" fg:x="866" fg:w="2"/><text x="69.6410%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.4712%" y="485" width="0.0801%" height="15" fill="rgb(219,125,36)" fg:x="867" fg:w="1"/><text x="69.7212%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4712%" y="469" width="0.0801%" height="15" fill="rgb(227,94,9)" fg:x="867" fg:w="1"/><text x="69.7212%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.4712%" y="453" width="0.0801%" height="15" fill="rgb(240,34,52)" fg:x="867" fg:w="1"/><text x="69.7212%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4712%" y="437" width="0.0801%" height="15" fill="rgb(216,45,12)" fg:x="867" fg:w="1"/><text x="69.7212%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.4712%" y="421" width="0.0801%" height="15" fill="rgb(246,21,19)" fg:x="867" fg:w="1"/><text x="69.7212%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4712%" y="405" width="0.0801%" height="15" fill="rgb(213,98,42)" fg:x="867" fg:w="1"/><text x="69.7212%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4712%" y="389" width="0.0801%" height="15" fill="rgb(250,136,47)" fg:x="867" fg:w="1"/><text x="69.7212%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="69.4712%" y="373" width="0.0801%" height="15" fill="rgb(251,124,27)" fg:x="867" fg:w="1"/><text x="69.7212%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4712%" y="357" width="0.0801%" height="15" fill="rgb(229,180,14)" fg:x="867" fg:w="1"/><text x="69.7212%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4712%" y="341" width="0.0801%" height="15" fill="rgb(245,216,25)" fg:x="867" fg:w="1"/><text x="69.7212%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4712%" y="325" width="0.0801%" height="15" fill="rgb(251,43,5)" fg:x="867" fg:w="1"/><text x="69.7212%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="69.4712%" y="309" width="0.0801%" height="15" fill="rgb(250,128,24)" fg:x="867" fg:w="1"/><text x="69.7212%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4712%" y="293" width="0.0801%" height="15" fill="rgb(217,117,27)" fg:x="867" fg:w="1"/><text x="69.7212%" y="303.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.32%)</title><rect x="69.3109%" y="597" width="0.3205%" height="15" fill="rgb(245,147,4)" fg:x="865" fg:w="4"/><text x="69.5609%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="69.3109%" y="581" width="0.3205%" height="15" fill="rgb(242,201,35)" fg:x="865" fg:w="4"/><text x="69.5609%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="69.3109%" y="565" width="0.3205%" height="15" fill="rgb(218,181,1)" fg:x="865" fg:w="4"/><text x="69.5609%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.5513%" y="549" width="0.0801%" height="15" fill="rgb(222,6,29)" fg:x="868" fg:w="1"/><text x="69.8013%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.5513%" y="533" width="0.0801%" height="15" fill="rgb(208,186,3)" fg:x="868" fg:w="1"/><text x="69.8013%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.5513%" y="517" width="0.0801%" height="15" fill="rgb(216,36,26)" fg:x="868" fg:w="1"/><text x="69.8013%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.5513%" y="501" width="0.0801%" height="15" fill="rgb(248,201,23)" fg:x="868" fg:w="1"/><text x="69.8013%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="69.5513%" y="485" width="0.0801%" height="15" fill="rgb(251,170,31)" fg:x="868" fg:w="1"/><text x="69.8013%" y="495.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (5 samples, 0.40%)</title><rect x="69.3109%" y="613" width="0.4006%" height="15" fill="rgb(207,110,25)" fg:x="865" fg:w="5"/><text x="69.5609%" y="623.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="69.6314%" y="597" width="0.0801%" height="15" fill="rgb(250,54,15)" fg:x="869" fg:w="1"/><text x="69.8814%" y="607.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="69.6314%" y="581" width="0.0801%" height="15" fill="rgb(227,68,33)" fg:x="869" fg:w="1"/><text x="69.8814%" y="591.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="69.7917%" y="389" width="0.0801%" height="15" fill="rgb(238,34,41)" fg:x="871" fg:w="1"/><text x="70.0417%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.8718%" y="341" width="0.0801%" height="15" fill="rgb(220,11,15)" fg:x="872" fg:w="1"/><text x="70.1218%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.8718%" y="325" width="0.0801%" height="15" fill="rgb(246,111,35)" fg:x="872" fg:w="1"/><text x="70.1218%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.8718%" y="309" width="0.0801%" height="15" fill="rgb(209,88,53)" fg:x="872" fg:w="1"/><text x="70.1218%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8718%" y="293" width="0.0801%" height="15" fill="rgb(231,185,47)" fg:x="872" fg:w="1"/><text x="70.1218%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8718%" y="277" width="0.0801%" height="15" fill="rgb(233,154,1)" fg:x="872" fg:w="1"/><text x="70.1218%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.8718%" y="261" width="0.0801%" height="15" fill="rgb(225,15,46)" fg:x="872" fg:w="1"/><text x="70.1218%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.8718%" y="245" width="0.0801%" height="15" fill="rgb(211,135,41)" fg:x="872" fg:w="1"/><text x="70.1218%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.8718%" y="229" width="0.0801%" height="15" fill="rgb(208,54,0)" fg:x="872" fg:w="1"/><text x="70.1218%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.8718%" y="213" width="0.0801%" height="15" fill="rgb(244,136,14)" fg:x="872" fg:w="1"/><text x="70.1218%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.8718%" y="197" width="0.0801%" height="15" fill="rgb(241,56,14)" fg:x="872" fg:w="1"/><text x="70.1218%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.8718%" y="181" width="0.0801%" height="15" fill="rgb(205,80,24)" fg:x="872" fg:w="1"/><text x="70.1218%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.8718%" y="165" width="0.0801%" height="15" fill="rgb(220,57,4)" fg:x="872" fg:w="1"/><text x="70.1218%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.8718%" y="149" width="0.0801%" height="15" fill="rgb(226,193,50)" fg:x="872" fg:w="1"/><text x="70.1218%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.8718%" y="133" width="0.0801%" height="15" fill="rgb(231,168,22)" fg:x="872" fg:w="1"/><text x="70.1218%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.8718%" y="357" width="0.1603%" height="15" fill="rgb(254,215,14)" fg:x="872" fg:w="2"/><text x="70.1218%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.9519%" y="341" width="0.0801%" height="15" fill="rgb(211,115,16)" fg:x="873" fg:w="1"/><text x="70.2019%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.0321%" y="357" width="0.0801%" height="15" fill="rgb(236,210,16)" fg:x="874" fg:w="1"/><text x="70.2821%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.40%)</title><rect x="69.7917%" y="405" width="0.4006%" height="15" fill="rgb(221,94,12)" fg:x="871" fg:w="5"/><text x="70.0417%" y="415.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="69.8718%" y="389" width="0.3205%" height="15" fill="rgb(235,218,49)" fg:x="872" fg:w="4"/><text x="70.1218%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="69.8718%" y="373" width="0.3205%" height="15" fill="rgb(217,114,14)" fg:x="872" fg:w="4"/><text x="70.1218%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.1122%" y="357" width="0.0801%" height="15" fill="rgb(216,145,22)" fg:x="875" fg:w="1"/><text x="70.3622%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="70.1122%" y="341" width="0.0801%" height="15" fill="rgb(217,112,39)" fg:x="875" fg:w="1"/><text x="70.3622%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.1122%" y="325" width="0.0801%" height="15" fill="rgb(225,85,32)" fg:x="875" fg:w="1"/><text x="70.3622%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.1122%" y="309" width="0.0801%" height="15" fill="rgb(245,209,47)" fg:x="875" fg:w="1"/><text x="70.3622%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.1122%" y="293" width="0.0801%" height="15" fill="rgb(218,220,15)" fg:x="875" fg:w="1"/><text x="70.3622%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.1122%" y="277" width="0.0801%" height="15" fill="rgb(222,202,31)" fg:x="875" fg:w="1"/><text x="70.3622%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.1122%" y="261" width="0.0801%" height="15" fill="rgb(243,203,4)" fg:x="875" fg:w="1"/><text x="70.3622%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.2724%" y="389" width="0.0801%" height="15" fill="rgb(237,92,17)" fg:x="877" fg:w="1"/><text x="70.5224%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.4327%" y="341" width="0.0801%" height="15" fill="rgb(231,119,7)" fg:x="879" fg:w="1"/><text x="70.6827%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.4327%" y="325" width="0.0801%" height="15" fill="rgb(237,82,41)" fg:x="879" fg:w="1"/><text x="70.6827%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.4327%" y="309" width="0.0801%" height="15" fill="rgb(226,81,48)" fg:x="879" fg:w="1"/><text x="70.6827%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.4327%" y="293" width="0.0801%" height="15" fill="rgb(234,70,51)" fg:x="879" fg:w="1"/><text x="70.6827%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.4327%" y="277" width="0.0801%" height="15" fill="rgb(251,86,4)" fg:x="879" fg:w="1"/><text x="70.6827%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.4327%" y="261" width="0.0801%" height="15" fill="rgb(244,144,28)" fg:x="879" fg:w="1"/><text x="70.6827%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="70.4327%" y="245" width="0.0801%" height="15" fill="rgb(232,161,39)" fg:x="879" fg:w="1"/><text x="70.6827%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="70.4327%" y="229" width="0.0801%" height="15" fill="rgb(247,34,51)" fg:x="879" fg:w="1"/><text x="70.6827%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="70.3526%" y="357" width="0.2404%" height="15" fill="rgb(225,132,2)" fg:x="878" fg:w="3"/><text x="70.6026%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.5128%" y="341" width="0.0801%" height="15" fill="rgb(209,159,44)" fg:x="880" fg:w="1"/><text x="70.7628%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.5128%" y="325" width="0.0801%" height="15" fill="rgb(251,214,1)" fg:x="880" fg:w="1"/><text x="70.7628%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.5128%" y="309" width="0.0801%" height="15" fill="rgb(247,84,47)" fg:x="880" fg:w="1"/><text x="70.7628%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.5128%" y="293" width="0.0801%" height="15" fill="rgb(240,111,43)" fg:x="880" fg:w="1"/><text x="70.7628%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.5128%" y="277" width="0.0801%" height="15" fill="rgb(215,214,35)" fg:x="880" fg:w="1"/><text x="70.7628%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="70.5128%" y="261" width="0.0801%" height="15" fill="rgb(248,207,23)" fg:x="880" fg:w="1"/><text x="70.7628%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="70.5128%" y="245" width="0.0801%" height="15" fill="rgb(214,186,4)" fg:x="880" fg:w="1"/><text x="70.7628%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (7 samples, 0.56%)</title><rect x="70.1923%" y="405" width="0.5609%" height="15" fill="rgb(220,133,22)" fg:x="876" fg:w="7"/><text x="70.4423%" y="415.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="70.3526%" y="389" width="0.4006%" height="15" fill="rgb(239,134,19)" fg:x="878" fg:w="5"/><text x="70.6026%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="70.3526%" y="373" width="0.4006%" height="15" fill="rgb(250,140,9)" fg:x="878" fg:w="5"/><text x="70.6026%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.5929%" y="357" width="0.1603%" height="15" fill="rgb(225,59,14)" fg:x="881" fg:w="2"/><text x="70.8429%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.5929%" y="341" width="0.1603%" height="15" fill="rgb(214,152,51)" fg:x="881" fg:w="2"/><text x="70.8429%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.5929%" y="325" width="0.1603%" height="15" fill="rgb(251,227,43)" fg:x="881" fg:w="2"/><text x="70.8429%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.5929%" y="309" width="0.1603%" height="15" fill="rgb(241,96,17)" fg:x="881" fg:w="2"/><text x="70.8429%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="70.5929%" y="293" width="0.1603%" height="15" fill="rgb(234,198,43)" fg:x="881" fg:w="2"/><text x="70.8429%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6731%" y="277" width="0.0801%" height="15" fill="rgb(220,108,29)" fg:x="882" fg:w="1"/><text x="70.9231%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.6731%" y="261" width="0.0801%" height="15" fill="rgb(226,163,33)" fg:x="882" fg:w="1"/><text x="70.9231%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.6731%" y="245" width="0.0801%" height="15" fill="rgb(205,194,45)" fg:x="882" fg:w="1"/><text x="70.9231%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="70.9135%" y="229" width="0.0801%" height="15" fill="rgb(206,143,44)" fg:x="885" fg:w="1"/><text x="71.1635%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="70.9135%" y="245" width="0.2404%" height="15" fill="rgb(236,136,36)" fg:x="885" fg:w="3"/><text x="71.1635%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="70.9936%" y="229" width="0.1603%" height="15" fill="rgb(249,172,42)" fg:x="886" fg:w="2"/><text x="71.2436%" y="239.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (2 samples, 0.16%)</title><rect x="70.9936%" y="213" width="0.1603%" height="15" fill="rgb(216,139,23)" fg:x="886" fg:w="2"/><text x="71.2436%" y="223.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="70.9135%" y="261" width="0.3205%" height="15" fill="rgb(207,166,20)" fg:x="885" fg:w="4"/><text x="71.1635%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="71.1538%" y="245" width="0.0801%" height="15" fill="rgb(210,209,22)" fg:x="888" fg:w="1"/><text x="71.4038%" y="255.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="71.1538%" y="229" width="0.0801%" height="15" fill="rgb(232,118,20)" fg:x="888" fg:w="1"/><text x="71.4038%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="70.9135%" y="325" width="0.4006%" height="15" fill="rgb(238,113,42)" fg:x="885" fg:w="5"/><text x="71.1635%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="70.9135%" y="309" width="0.4006%" height="15" fill="rgb(231,42,5)" fg:x="885" fg:w="5"/><text x="71.1635%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.40%)</title><rect x="70.9135%" y="293" width="0.4006%" height="15" fill="rgb(243,166,24)" fg:x="885" fg:w="5"/><text x="71.1635%" y="303.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.40%)</title><rect x="70.9135%" y="277" width="0.4006%" height="15" fill="rgb(237,226,12)" fg:x="885" fg:w="5"/><text x="71.1635%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="71.2340%" y="261" width="0.0801%" height="15" fill="rgb(229,133,24)" fg:x="889" fg:w="1"/><text x="71.4840%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="71.2340%" y="245" width="0.0801%" height="15" fill="rgb(238,33,43)" fg:x="889" fg:w="1"/><text x="71.4840%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.2340%" y="229" width="0.0801%" height="15" fill="rgb(227,59,38)" fg:x="889" fg:w="1"/><text x="71.4840%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.2340%" y="213" width="0.0801%" height="15" fill="rgb(230,97,0)" fg:x="889" fg:w="1"/><text x="71.4840%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="71.2340%" y="197" width="0.0801%" height="15" fill="rgb(250,173,50)" fg:x="889" fg:w="1"/><text x="71.4840%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.2340%" y="181" width="0.0801%" height="15" fill="rgb(240,15,50)" fg:x="889" fg:w="1"/><text x="71.4840%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="71.3942%" y="277" width="0.0801%" height="15" fill="rgb(221,93,22)" fg:x="891" fg:w="1"/><text x="71.6442%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="71.3942%" y="261" width="0.0801%" height="15" fill="rgb(245,180,53)" fg:x="891" fg:w="1"/><text x="71.6442%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="71.4744%" y="245" width="0.0801%" height="15" fill="rgb(231,88,51)" fg:x="892" fg:w="1"/><text x="71.7244%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.4744%" y="229" width="0.0801%" height="15" fill="rgb(240,58,21)" fg:x="892" fg:w="1"/><text x="71.7244%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.4744%" y="213" width="0.0801%" height="15" fill="rgb(237,21,10)" fg:x="892" fg:w="1"/><text x="71.7244%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.4744%" y="197" width="0.0801%" height="15" fill="rgb(218,43,11)" fg:x="892" fg:w="1"/><text x="71.7244%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="71.4744%" y="277" width="0.1603%" height="15" fill="rgb(218,221,29)" fg:x="892" fg:w="2"/><text x="71.7244%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="71.4744%" y="261" width="0.1603%" height="15" fill="rgb(214,118,42)" fg:x="892" fg:w="2"/><text x="71.7244%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.5545%" y="245" width="0.0801%" height="15" fill="rgb(251,200,26)" fg:x="893" fg:w="1"/><text x="71.8045%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6346%" y="261" width="0.0801%" height="15" fill="rgb(237,101,39)" fg:x="894" fg:w="1"/><text x="71.8846%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.80%)</title><rect x="71.7147%" y="261" width="0.8013%" height="15" fill="rgb(251,117,11)" fg:x="895" fg:w="10"/><text x="71.9647%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.72%)</title><rect x="71.7949%" y="245" width="0.7212%" height="15" fill="rgb(216,223,23)" fg:x="896" fg:w="9"/><text x="72.0449%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="72.6763%" y="245" width="0.2404%" height="15" fill="rgb(251,54,12)" fg:x="907" fg:w="3"/><text x="72.9263%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="72.5160%" y="261" width="0.4808%" height="15" fill="rgb(254,176,54)" fg:x="905" fg:w="6"/><text x="72.7660%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="72.9167%" y="245" width="0.0801%" height="15" fill="rgb(210,32,8)" fg:x="910" fg:w="1"/><text x="73.1667%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="72.9968%" y="261" width="0.0801%" height="15" fill="rgb(235,52,38)" fg:x="911" fg:w="1"/><text x="73.2468%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="73.3173%" y="213" width="0.0801%" height="15" fill="rgb(231,4,44)" fg:x="915" fg:w="1"/><text x="73.5673%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="73.3173%" y="197" width="0.0801%" height="15" fill="rgb(249,2,32)" fg:x="915" fg:w="1"/><text x="73.5673%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="73.5577%" y="197" width="0.3205%" height="15" fill="rgb(224,65,26)" fg:x="918" fg:w="4"/><text x="73.8077%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.8782%" y="197" width="0.0801%" height="15" fill="rgb(250,73,40)" fg:x="922" fg:w="1"/><text x="74.1282%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="73.9583%" y="197" width="0.0801%" height="15" fill="rgb(253,177,16)" fg:x="923" fg:w="1"/><text x="74.2083%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="73.9583%" y="181" width="0.0801%" height="15" fill="rgb(217,32,34)" fg:x="923" fg:w="1"/><text x="74.2083%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.9583%" y="165" width="0.0801%" height="15" fill="rgb(212,7,10)" fg:x="923" fg:w="1"/><text x="74.2083%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.9583%" y="149" width="0.0801%" height="15" fill="rgb(245,89,8)" fg:x="923" fg:w="1"/><text x="74.2083%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="74.0385%" y="197" width="0.0801%" height="15" fill="rgb(237,16,53)" fg:x="924" fg:w="1"/><text x="74.2885%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="74.0385%" y="181" width="0.0801%" height="15" fill="rgb(250,204,30)" fg:x="924" fg:w="1"/><text x="74.2885%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="74.0385%" y="165" width="0.0801%" height="15" fill="rgb(208,77,27)" fg:x="924" fg:w="1"/><text x="74.2885%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="74.1186%" y="181" width="0.0801%" height="15" fill="rgb(250,204,28)" fg:x="925" fg:w="1"/><text x="74.3686%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="74.1186%" y="197" width="0.1603%" height="15" fill="rgb(244,63,21)" fg:x="925" fg:w="2"/><text x="74.3686%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="74.1987%" y="181" width="0.0801%" height="15" fill="rgb(236,85,44)" fg:x="926" fg:w="1"/><text x="74.4487%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="74.2788%" y="181" width="0.0801%" height="15" fill="rgb(215,98,4)" fg:x="927" fg:w="1"/><text x="74.5288%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.2788%" y="165" width="0.0801%" height="15" fill="rgb(235,38,11)" fg:x="927" fg:w="1"/><text x="74.5288%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.2788%" y="149" width="0.0801%" height="15" fill="rgb(254,186,25)" fg:x="927" fg:w="1"/><text x="74.5288%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (38 samples, 3.04%)</title><rect x="74.2788%" y="197" width="3.0449%" height="15" fill="rgb(225,55,31)" fg:x="927" fg:w="38"/><text x="74.5288%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (37 samples, 2.96%)</title><rect x="74.3590%" y="181" width="2.9647%" height="15" fill="rgb(211,15,21)" fg:x="928" fg:w="37"/><text x="74.6090%" y="191.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (37 samples, 2.96%)</title><rect x="74.3590%" y="165" width="2.9647%" height="15" fill="rgb(215,187,41)" fg:x="928" fg:w="37"/><text x="74.6090%" y="175.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="77.3237%" y="197" width="0.1603%" height="15" fill="rgb(248,69,32)" fg:x="965" fg:w="2"/><text x="77.5737%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 4.49%)</title><rect x="73.1571%" y="245" width="4.4872%" height="15" fill="rgb(252,102,52)" fg:x="913" fg:w="56"/><text x="73.4071%" y="255.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (55 samples, 4.41%)</title><rect x="73.2372%" y="229" width="4.4071%" height="15" fill="rgb(253,140,32)" fg:x="914" fg:w="55"/><text x="73.4872%" y="239.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (53 samples, 4.25%)</title><rect x="73.3974%" y="213" width="4.2468%" height="15" fill="rgb(216,56,42)" fg:x="916" fg:w="53"/><text x="73.6474%" y="223.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="77.4840%" y="197" width="0.1603%" height="15" fill="rgb(216,184,14)" fg:x="967" fg:w="2"/><text x="77.7340%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="77.4840%" y="181" width="0.1603%" height="15" fill="rgb(237,187,27)" fg:x="967" fg:w="2"/><text x="77.7340%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.5641%" y="165" width="0.0801%" height="15" fill="rgb(219,65,3)" fg:x="968" fg:w="1"/><text x="77.8141%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5641%" y="149" width="0.0801%" height="15" fill="rgb(245,83,25)" fg:x="968" fg:w="1"/><text x="77.8141%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.6442%" y="245" width="0.0801%" height="15" fill="rgb(214,205,45)" fg:x="969" fg:w="1"/><text x="77.8942%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="77.8045%" y="229" width="0.0801%" height="15" fill="rgb(241,20,18)" fg:x="971" fg:w="1"/><text x="78.0545%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.8045%" y="213" width="0.0801%" height="15" fill="rgb(232,163,23)" fg:x="971" fg:w="1"/><text x="78.0545%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.8045%" y="197" width="0.0801%" height="15" fill="rgb(214,5,46)" fg:x="971" fg:w="1"/><text x="78.0545%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.8045%" y="181" width="0.0801%" height="15" fill="rgb(229,78,17)" fg:x="971" fg:w="1"/><text x="78.0545%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="77.8846%" y="229" width="0.4006%" height="15" fill="rgb(248,89,10)" fg:x="972" fg:w="5"/><text x="78.1346%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="78.2853%" y="229" width="0.1603%" height="15" fill="rgb(248,54,15)" fg:x="977" fg:w="2"/><text x="78.5353%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (70 samples, 5.61%)</title><rect x="73.0769%" y="261" width="5.6090%" height="15" fill="rgb(223,116,6)" fg:x="912" fg:w="70"/><text x="73.3269%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.96%)</title><rect x="77.7244%" y="245" width="0.9615%" height="15" fill="rgb(205,125,38)" fg:x="970" fg:w="12"/><text x="77.9744%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (3 samples, 0.24%)</title><rect x="78.4455%" y="229" width="0.2404%" height="15" fill="rgb(251,78,38)" fg:x="979" fg:w="3"/><text x="78.6955%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (2 samples, 0.16%)</title><rect x="78.5256%" y="213" width="0.1603%" height="15" fill="rgb(253,78,28)" fg:x="980" fg:w="2"/><text x="78.7756%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.6058%" y="197" width="0.0801%" height="15" fill="rgb(209,120,3)" fg:x="981" fg:w="1"/><text x="78.8558%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.6058%" y="181" width="0.0801%" height="15" fill="rgb(238,229,9)" fg:x="981" fg:w="1"/><text x="78.8558%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="78.6058%" y="165" width="0.0801%" height="15" fill="rgb(253,159,18)" fg:x="981" fg:w="1"/><text x="78.8558%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="78.6058%" y="149" width="0.0801%" height="15" fill="rgb(244,42,34)" fg:x="981" fg:w="1"/><text x="78.8558%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="78.6859%" y="261" width="0.0801%" height="15" fill="rgb(224,8,7)" fg:x="982" fg:w="1"/><text x="78.9359%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="78.6859%" y="245" width="0.0801%" height="15" fill="rgb(210,201,45)" fg:x="982" fg:w="1"/><text x="78.9359%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="78.6859%" y="229" width="0.0801%" height="15" fill="rgb(252,185,21)" fg:x="982" fg:w="1"/><text x="78.9359%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (90 samples, 7.21%)</title><rect x="71.6346%" y="277" width="7.2115%" height="15" fill="rgb(223,131,1)" fg:x="894" fg:w="90"/><text x="71.8846%" y="287.50">regex_auto..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="78.7660%" y="261" width="0.0801%" height="15" fill="rgb(245,141,16)" fg:x="983" fg:w="1"/><text x="79.0160%" y="271.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="78.7660%" y="245" width="0.0801%" height="15" fill="rgb(229,55,45)" fg:x="983" fg:w="1"/><text x="79.0160%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="79.0064%" y="229" width="0.0801%" height="15" fill="rgb(208,92,15)" fg:x="986" fg:w="1"/><text x="79.2564%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="78.9263%" y="245" width="0.4808%" height="15" fill="rgb(234,185,47)" fg:x="985" fg:w="6"/><text x="79.1763%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="79.0865%" y="229" width="0.3205%" height="15" fill="rgb(253,104,50)" fg:x="987" fg:w="4"/><text x="79.3365%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="79.0865%" y="213" width="0.3205%" height="15" fill="rgb(205,70,7)" fg:x="987" fg:w="4"/><text x="79.3365%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="79.0865%" y="197" width="0.3205%" height="15" fill="rgb(240,178,43)" fg:x="987" fg:w="4"/><text x="79.3365%" y="207.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="79.0865%" y="181" width="0.3205%" height="15" fill="rgb(214,112,2)" fg:x="987" fg:w="4"/><text x="79.3365%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="78.8462%" y="277" width="0.6410%" height="15" fill="rgb(206,46,17)" fg:x="984" fg:w="8"/><text x="79.0962%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="78.8462%" y="261" width="0.6410%" height="15" fill="rgb(225,220,16)" fg:x="984" fg:w="8"/><text x="79.0962%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="79.4071%" y="245" width="0.0801%" height="15" fill="rgb(238,65,40)" fg:x="991" fg:w="1"/><text x="79.6571%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="79.4872%" y="229" width="0.0801%" height="15" fill="rgb(230,151,21)" fg:x="992" fg:w="1"/><text x="79.7372%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.4872%" y="213" width="0.0801%" height="15" fill="rgb(218,58,49)" fg:x="992" fg:w="1"/><text x="79.7372%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="79.5673%" y="229" width="0.0801%" height="15" fill="rgb(219,179,14)" fg:x="993" fg:w="1"/><text x="79.8173%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="79.4872%" y="245" width="0.2404%" height="15" fill="rgb(223,72,1)" fg:x="992" fg:w="3"/><text x="79.7372%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="79.6474%" y="229" width="0.0801%" height="15" fill="rgb(238,126,10)" fg:x="994" fg:w="1"/><text x="79.8974%" y="239.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="79.6474%" y="213" width="0.0801%" height="15" fill="rgb(224,206,38)" fg:x="994" fg:w="1"/><text x="79.8974%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="79.6474%" y="197" width="0.0801%" height="15" fill="rgb(212,201,54)" fg:x="994" fg:w="1"/><text x="79.8974%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (106 samples, 8.49%)</title><rect x="71.3141%" y="293" width="8.4936%" height="15" fill="rgb(218,154,48)" fg:x="890" fg:w="106"/><text x="71.5641%" y="303.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="79.4872%" y="277" width="0.3205%" height="15" fill="rgb(232,93,24)" fg:x="992" fg:w="4"/><text x="79.7372%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="79.4872%" y="261" width="0.3205%" height="15" fill="rgb(245,30,21)" fg:x="992" fg:w="4"/><text x="79.7372%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="79.7276%" y="245" width="0.0801%" height="15" fill="rgb(242,148,29)" fg:x="995" fg:w="1"/><text x="79.9776%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="79.8077%" y="293" width="0.0801%" height="15" fill="rgb(244,153,54)" fg:x="996" fg:w="1"/><text x="80.0577%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (108 samples, 8.65%)</title><rect x="71.3141%" y="325" width="8.6538%" height="15" fill="rgb(252,87,22)" fg:x="890" fg:w="108"/><text x="71.5641%" y="335.50">&lt;regex::rege..</text></g><g><title>regex::builders::Builder::build_one_string (108 samples, 8.65%)</title><rect x="71.3141%" y="309" width="8.6538%" height="15" fill="rgb(210,51,29)" fg:x="890" fg:w="108"/><text x="71.5641%" y="319.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="79.8878%" y="293" width="0.0801%" height="15" fill="rgb(242,136,47)" fg:x="997" fg:w="1"/><text x="80.1378%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="79.9679%" y="325" width="0.0801%" height="15" fill="rgb(238,68,4)" fg:x="998" fg:w="1"/><text x="80.2179%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="79.9679%" y="309" width="0.0801%" height="15" fill="rgb(242,161,30)" fg:x="998" fg:w="1"/><text x="80.2179%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="79.9679%" y="293" width="0.0801%" height="15" fill="rgb(218,58,44)" fg:x="998" fg:w="1"/><text x="80.2179%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="79.9679%" y="277" width="0.0801%" height="15" fill="rgb(252,125,32)" fg:x="998" fg:w="1"/><text x="80.2179%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.9679%" y="261" width="0.0801%" height="15" fill="rgb(219,178,0)" fg:x="998" fg:w="1"/><text x="80.2179%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.1282%" y="245" width="0.0801%" height="15" fill="rgb(213,152,7)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.1282%" y="229" width="0.0801%" height="15" fill="rgb(249,109,34)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.1282%" y="213" width="0.0801%" height="15" fill="rgb(232,96,21)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (120 samples, 9.62%)</title><rect x="70.7532%" y="341" width="9.6154%" height="15" fill="rgb(228,27,39)" fg:x="883" fg:w="120"/><text x="71.0032%" y="351.50">indefinite::he..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="80.0481%" y="325" width="0.3205%" height="15" fill="rgb(211,182,52)" fg:x="999" fg:w="4"/><text x="80.2981%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="80.0481%" y="309" width="0.3205%" height="15" fill="rgb(234,178,38)" fg:x="999" fg:w="4"/><text x="80.2981%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="80.0481%" y="293" width="0.3205%" height="15" fill="rgb(221,111,3)" fg:x="999" fg:w="4"/><text x="80.2981%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="80.0481%" y="277" width="0.3205%" height="15" fill="rgb(228,175,21)" fg:x="999" fg:w="4"/><text x="80.2981%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="80.0481%" y="261" width="0.3205%" height="15" fill="rgb(228,174,43)" fg:x="999" fg:w="4"/><text x="80.2981%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="80.2083%" y="245" width="0.1603%" height="15" fill="rgb(211,191,0)" fg:x="1001" fg:w="2"/><text x="80.4583%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.3686%" y="277" width="0.0801%" height="15" fill="rgb(253,117,3)" fg:x="1003" fg:w="1"/><text x="80.6186%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.3686%" y="261" width="0.0801%" height="15" fill="rgb(241,127,19)" fg:x="1003" fg:w="1"/><text x="80.6186%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="80.3686%" y="245" width="0.0801%" height="15" fill="rgb(218,103,12)" fg:x="1003" fg:w="1"/><text x="80.6186%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.3686%" y="229" width="0.0801%" height="15" fill="rgb(236,214,43)" fg:x="1003" fg:w="1"/><text x="80.6186%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.3686%" y="213" width="0.0801%" height="15" fill="rgb(244,144,19)" fg:x="1003" fg:w="1"/><text x="80.6186%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.3686%" y="197" width="0.0801%" height="15" fill="rgb(246,188,10)" fg:x="1003" fg:w="1"/><text x="80.6186%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.6090%" y="245" width="0.0801%" height="15" fill="rgb(212,193,33)" fg:x="1006" fg:w="1"/><text x="80.8590%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.64%)</title><rect x="80.6891%" y="245" width="0.6410%" height="15" fill="rgb(241,51,29)" fg:x="1007" fg:w="8"/><text x="80.9391%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="81.1699%" y="229" width="0.1603%" height="15" fill="rgb(211,58,19)" fg:x="1013" fg:w="2"/><text x="81.4199%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.88%)</title><rect x="80.5288%" y="261" width="0.8814%" height="15" fill="rgb(229,111,26)" fg:x="1005" fg:w="11"/><text x="80.7788%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="81.3301%" y="245" width="0.0801%" height="15" fill="rgb(213,115,40)" fg:x="1015" fg:w="1"/><text x="81.5801%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="81.5705%" y="245" width="0.0801%" height="15" fill="rgb(209,56,44)" fg:x="1018" fg:w="1"/><text x="81.8205%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="81.5705%" y="229" width="0.0801%" height="15" fill="rgb(230,108,32)" fg:x="1018" fg:w="1"/><text x="81.8205%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="81.6506%" y="245" width="0.4808%" height="15" fill="rgb(216,165,31)" fg:x="1019" fg:w="6"/><text x="81.9006%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="81.9712%" y="229" width="0.1603%" height="15" fill="rgb(218,122,21)" fg:x="1023" fg:w="2"/><text x="82.2212%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (10 samples, 0.80%)</title><rect x="81.4103%" y="261" width="0.8013%" height="15" fill="rgb(223,224,47)" fg:x="1016" fg:w="10"/><text x="81.6603%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="82.1314%" y="245" width="0.0801%" height="15" fill="rgb(238,102,44)" fg:x="1025" fg:w="1"/><text x="82.3814%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="82.1314%" y="229" width="0.0801%" height="15" fill="rgb(236,46,40)" fg:x="1025" fg:w="1"/><text x="82.3814%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="82.1314%" y="213" width="0.0801%" height="15" fill="rgb(247,202,50)" fg:x="1025" fg:w="1"/><text x="82.3814%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.1314%" y="197" width="0.0801%" height="15" fill="rgb(209,99,20)" fg:x="1025" fg:w="1"/><text x="82.3814%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.1314%" y="181" width="0.0801%" height="15" fill="rgb(252,27,34)" fg:x="1025" fg:w="1"/><text x="82.3814%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.1314%" y="165" width="0.0801%" height="15" fill="rgb(215,206,23)" fg:x="1025" fg:w="1"/><text x="82.3814%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="82.3718%" y="213" width="0.1603%" height="15" fill="rgb(212,135,36)" fg:x="1028" fg:w="2"/><text x="82.6218%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="82.3718%" y="197" width="0.1603%" height="15" fill="rgb(240,189,1)" fg:x="1028" fg:w="2"/><text x="82.6218%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="82.3718%" y="181" width="0.1603%" height="15" fill="rgb(242,56,20)" fg:x="1028" fg:w="2"/><text x="82.6218%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="82.3718%" y="229" width="0.2404%" height="15" fill="rgb(247,132,33)" fg:x="1028" fg:w="3"/><text x="82.6218%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.5321%" y="213" width="0.0801%" height="15" fill="rgb(208,149,11)" fg:x="1030" fg:w="1"/><text x="82.7821%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.32%)</title><rect x="82.6122%" y="229" width="0.3205%" height="15" fill="rgb(211,33,11)" fg:x="1031" fg:w="4"/><text x="82.8622%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="82.7724%" y="213" width="0.1603%" height="15" fill="rgb(221,29,38)" fg:x="1033" fg:w="2"/><text x="83.0224%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.8526%" y="197" width="0.0801%" height="15" fill="rgb(206,182,49)" fg:x="1034" fg:w="1"/><text x="83.1026%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.8526%" y="181" width="0.0801%" height="15" fill="rgb(216,140,1)" fg:x="1034" fg:w="1"/><text x="83.1026%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.8526%" y="165" width="0.0801%" height="15" fill="rgb(232,57,40)" fg:x="1034" fg:w="1"/><text x="83.1026%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (16 samples, 1.28%)</title><rect x="82.2115%" y="245" width="1.2821%" height="15" fill="rgb(224,186,18)" fg:x="1026" fg:w="16"/><text x="82.4615%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (7 samples, 0.56%)</title><rect x="82.9327%" y="229" width="0.5609%" height="15" fill="rgb(215,121,11)" fg:x="1035" fg:w="7"/><text x="83.1827%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (7 samples, 0.56%)</title><rect x="82.9327%" y="213" width="0.5609%" height="15" fill="rgb(245,147,10)" fg:x="1035" fg:w="7"/><text x="83.1827%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="83.0929%" y="197" width="0.4006%" height="15" fill="rgb(238,153,13)" fg:x="1037" fg:w="5"/><text x="83.3429%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (17 samples, 1.36%)</title><rect x="82.2115%" y="261" width="1.3622%" height="15" fill="rgb(233,108,0)" fg:x="1026" fg:w="17"/><text x="82.4615%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="83.4936%" y="245" width="0.0801%" height="15" fill="rgb(212,157,17)" fg:x="1042" fg:w="1"/><text x="83.7436%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="83.4936%" y="229" width="0.0801%" height="15" fill="rgb(225,213,38)" fg:x="1042" fg:w="1"/><text x="83.7436%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="83.6538%" y="213" width="0.0801%" height="15" fill="rgb(248,16,11)" fg:x="1044" fg:w="1"/><text x="83.9038%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.6538%" y="197" width="0.0801%" height="15" fill="rgb(241,33,4)" fg:x="1044" fg:w="1"/><text x="83.9038%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.6538%" y="181" width="0.0801%" height="15" fill="rgb(222,26,43)" fg:x="1044" fg:w="1"/><text x="83.9038%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.6538%" y="165" width="0.0801%" height="15" fill="rgb(243,29,36)" fg:x="1044" fg:w="1"/><text x="83.9038%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="84.1346%" y="149" width="0.3205%" height="15" fill="rgb(241,9,27)" fg:x="1050" fg:w="4"/><text x="84.3846%" y="159.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="84.4551%" y="149" width="0.1603%" height="15" fill="rgb(205,117,26)" fg:x="1054" fg:w="2"/><text x="84.7051%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="84.6154%" y="149" width="0.3205%" height="15" fill="rgb(209,80,39)" fg:x="1056" fg:w="4"/><text x="84.8654%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="84.7756%" y="133" width="0.1603%" height="15" fill="rgb(239,155,6)" fg:x="1058" fg:w="2"/><text x="85.0256%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="84.7756%" y="117" width="0.1603%" height="15" fill="rgb(212,104,12)" fg:x="1058" fg:w="2"/><text x="85.0256%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.8558%" y="101" width="0.0801%" height="15" fill="rgb(234,204,3)" fg:x="1059" fg:w="1"/><text x="85.1058%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.0962%" y="117" width="0.0801%" height="15" fill="rgb(251,218,7)" fg:x="1062" fg:w="1"/><text x="85.3462%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.2564%" y="85" width="0.0801%" height="15" fill="rgb(221,81,32)" fg:x="1064" fg:w="1"/><text x="85.5064%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="85.1763%" y="117" width="0.2404%" height="15" fill="rgb(214,152,26)" fg:x="1063" fg:w="3"/><text x="85.4263%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="85.2564%" y="101" width="0.1603%" height="15" fill="rgb(223,22,3)" fg:x="1064" fg:w="2"/><text x="85.5064%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.3365%" y="85" width="0.0801%" height="15" fill="rgb(207,174,7)" fg:x="1065" fg:w="1"/><text x="85.5865%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (10 samples, 0.80%)</title><rect x="84.9359%" y="149" width="0.8013%" height="15" fill="rgb(224,19,52)" fg:x="1060" fg:w="10"/><text x="85.1859%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (10 samples, 0.80%)</title><rect x="84.9359%" y="133" width="0.8013%" height="15" fill="rgb(228,24,14)" fg:x="1060" fg:w="10"/><text x="85.1859%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="85.4167%" y="117" width="0.3205%" height="15" fill="rgb(230,153,43)" fg:x="1066" fg:w="4"/><text x="85.6667%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.6571%" y="101" width="0.0801%" height="15" fill="rgb(231,106,12)" fg:x="1069" fg:w="1"/><text x="85.9071%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="85.7372%" y="149" width="0.0801%" height="15" fill="rgb(215,92,2)" fg:x="1070" fg:w="1"/><text x="85.9872%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="85.7372%" y="133" width="0.0801%" height="15" fill="rgb(249,143,25)" fg:x="1070" fg:w="1"/><text x="85.9872%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="85.7372%" y="117" width="0.0801%" height="15" fill="rgb(252,7,35)" fg:x="1070" fg:w="1"/><text x="85.9872%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.7372%" y="101" width="0.0801%" height="15" fill="rgb(216,69,40)" fg:x="1070" fg:w="1"/><text x="85.9872%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (39 samples, 3.12%)</title><rect x="85.8173%" y="149" width="3.1250%" height="15" fill="rgb(240,36,33)" fg:x="1071" fg:w="39"/><text x="86.0673%" y="159.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (39 samples, 3.12%)</title><rect x="85.8173%" y="133" width="3.1250%" height="15" fill="rgb(231,128,14)" fg:x="1071" fg:w="39"/><text x="86.0673%" y="143.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (39 samples, 3.12%)</title><rect x="85.8173%" y="117" width="3.1250%" height="15" fill="rgb(245,143,14)" fg:x="1071" fg:w="39"/><text x="86.0673%" y="127.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="88.9423%" y="149" width="0.1603%" height="15" fill="rgb(222,130,28)" fg:x="1110" fg:w="2"/><text x="89.1923%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.0224%" y="133" width="0.0801%" height="15" fill="rgb(212,10,48)" fg:x="1111" fg:w="1"/><text x="89.2724%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="89.1026%" y="149" width="0.0801%" height="15" fill="rgb(254,118,45)" fg:x="1112" fg:w="1"/><text x="89.3526%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 5.69%)</title><rect x="83.5737%" y="245" width="5.6891%" height="15" fill="rgb(228,6,45)" fg:x="1043" fg:w="71"/><text x="83.8237%" y="255.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (71 samples, 5.69%)</title><rect x="83.5737%" y="229" width="5.6891%" height="15" fill="rgb(241,18,35)" fg:x="1043" fg:w="71"/><text x="83.8237%" y="239.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (69 samples, 5.53%)</title><rect x="83.7340%" y="213" width="5.5288%" height="15" fill="rgb(227,214,53)" fg:x="1045" fg:w="69"/><text x="83.9840%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (69 samples, 5.53%)</title><rect x="83.7340%" y="197" width="5.5288%" height="15" fill="rgb(224,107,51)" fg:x="1045" fg:w="69"/><text x="83.9840%" y="207.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (69 samples, 5.53%)</title><rect x="83.7340%" y="181" width="5.5288%" height="15" fill="rgb(248,60,28)" fg:x="1045" fg:w="69"/><text x="83.9840%" y="191.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (69 samples, 5.53%)</title><rect x="83.7340%" y="165" width="5.5288%" height="15" fill="rgb(249,101,23)" fg:x="1045" fg:w="69"/><text x="83.9840%" y="175.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="89.1827%" y="149" width="0.0801%" height="15" fill="rgb(228,51,19)" fg:x="1113" fg:w="1"/><text x="89.4327%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.1827%" y="133" width="0.0801%" height="15" fill="rgb(213,20,6)" fg:x="1113" fg:w="1"/><text x="89.4327%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.1827%" y="117" width="0.0801%" height="15" fill="rgb(212,124,10)" fg:x="1113" fg:w="1"/><text x="89.4327%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.1827%" y="101" width="0.0801%" height="15" fill="rgb(248,3,40)" fg:x="1113" fg:w="1"/><text x="89.4327%" y="111.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="89.3429%" y="229" width="0.0801%" height="15" fill="rgb(223,178,23)" fg:x="1115" fg:w="1"/><text x="89.5929%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (11 samples, 0.88%)</title><rect x="89.4231%" y="229" width="0.8814%" height="15" fill="rgb(240,132,45)" fg:x="1116" fg:w="11"/><text x="89.6731%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.64%)</title><rect x="89.6635%" y="213" width="0.6410%" height="15" fill="rgb(245,164,36)" fg:x="1119" fg:w="8"/><text x="89.9135%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.64%)</title><rect x="89.6635%" y="197" width="0.6410%" height="15" fill="rgb(231,188,53)" fg:x="1119" fg:w="8"/><text x="89.9135%" y="207.50"></text></g><g><title>realloc (7 samples, 0.56%)</title><rect x="89.7436%" y="181" width="0.5609%" height="15" fill="rgb(237,198,39)" fg:x="1120" fg:w="7"/><text x="89.9936%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="90.3045%" y="229" width="0.4006%" height="15" fill="rgb(223,120,35)" fg:x="1127" fg:w="5"/><text x="90.5545%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="90.7051%" y="229" width="0.0801%" height="15" fill="rgb(253,107,49)" fg:x="1132" fg:w="1"/><text x="90.9551%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (20 samples, 1.60%)</title><rect x="89.2628%" y="245" width="1.6026%" height="15" fill="rgb(216,44,31)" fg:x="1114" fg:w="20"/><text x="89.5128%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="90.7853%" y="229" width="0.0801%" height="15" fill="rgb(253,87,21)" fg:x="1133" fg:w="1"/><text x="91.0353%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.7853%" y="213" width="0.0801%" height="15" fill="rgb(226,18,2)" fg:x="1133" fg:w="1"/><text x="91.0353%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.7853%" y="197" width="0.0801%" height="15" fill="rgb(216,8,46)" fg:x="1133" fg:w="1"/><text x="91.0353%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.7853%" y="181" width="0.0801%" height="15" fill="rgb(226,140,39)" fg:x="1133" fg:w="1"/><text x="91.0353%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (131 samples, 10.50%)</title><rect x="80.4487%" y="277" width="10.4968%" height="15" fill="rgb(221,194,54)" fg:x="1004" fg:w="131"/><text x="80.6987%" y="287.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (92 samples, 7.37%)</title><rect x="83.5737%" y="261" width="7.3718%" height="15" fill="rgb(213,92,11)" fg:x="1043" fg:w="92"/><text x="83.8237%" y="271.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="90.8654%" y="245" width="0.0801%" height="15" fill="rgb(229,162,46)" fg:x="1134" fg:w="1"/><text x="91.1154%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="90.9455%" y="245" width="0.0801%" height="15" fill="rgb(214,111,36)" fg:x="1135" fg:w="1"/><text x="91.1955%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.9455%" y="229" width="0.0801%" height="15" fill="rgb(207,6,21)" fg:x="1135" fg:w="1"/><text x="91.1955%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.9455%" y="213" width="0.0801%" height="15" fill="rgb(213,127,38)" fg:x="1135" fg:w="1"/><text x="91.1955%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.9455%" y="197" width="0.0801%" height="15" fill="rgb(238,118,32)" fg:x="1135" fg:w="1"/><text x="91.1955%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="90.9455%" y="277" width="0.1603%" height="15" fill="rgb(240,139,39)" fg:x="1135" fg:w="2"/><text x="91.1955%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="90.9455%" y="261" width="0.1603%" height="15" fill="rgb(235,10,37)" fg:x="1135" fg:w="2"/><text x="91.1955%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="91.0256%" y="245" width="0.0801%" height="15" fill="rgb(249,171,38)" fg:x="1136" fg:w="1"/><text x="91.2756%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="91.0256%" y="229" width="0.0801%" height="15" fill="rgb(242,144,32)" fg:x="1136" fg:w="1"/><text x="91.2756%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="91.1859%" y="229" width="0.3205%" height="15" fill="rgb(217,117,21)" fg:x="1138" fg:w="4"/><text x="91.4359%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.4263%" y="213" width="0.0801%" height="15" fill="rgb(249,87,1)" fg:x="1141" fg:w="1"/><text x="91.6763%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="91.5064%" y="229" width="0.0801%" height="15" fill="rgb(248,196,48)" fg:x="1142" fg:w="1"/><text x="91.7564%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="91.5064%" y="213" width="0.0801%" height="15" fill="rgb(251,206,33)" fg:x="1142" fg:w="1"/><text x="91.7564%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.56%)</title><rect x="91.1058%" y="245" width="0.5609%" height="15" fill="rgb(232,141,28)" fg:x="1137" fg:w="7"/><text x="91.3558%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="91.5865%" y="229" width="0.0801%" height="15" fill="rgb(209,167,14)" fg:x="1143" fg:w="1"/><text x="91.8365%" y="239.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="91.5865%" y="213" width="0.0801%" height="15" fill="rgb(225,11,50)" fg:x="1143" fg:w="1"/><text x="91.8365%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="91.6667%" y="245" width="0.0801%" height="15" fill="rgb(209,50,20)" fg:x="1144" fg:w="1"/><text x="91.9167%" y="255.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="91.6667%" y="229" width="0.0801%" height="15" fill="rgb(212,17,46)" fg:x="1144" fg:w="1"/><text x="91.9167%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (144 samples, 11.54%)</title><rect x="80.3686%" y="325" width="11.5385%" height="15" fill="rgb(216,101,39)" fg:x="1003" fg:w="144"/><text x="80.6186%" y="335.50">&lt;regex::regex::st..</text></g><g><title>regex::builders::Builder::build_one_string (144 samples, 11.54%)</title><rect x="80.3686%" y="309" width="11.5385%" height="15" fill="rgb(212,228,48)" fg:x="1003" fg:w="144"/><text x="80.6186%" y="319.50">regex::builders::..</text></g><g><title>regex_automata::meta::regex::Builder::build (144 samples, 11.54%)</title><rect x="80.3686%" y="293" width="11.5385%" height="15" fill="rgb(250,6,50)" fg:x="1003" fg:w="144"/><text x="80.6186%" y="303.50">regex_automata::m..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (10 samples, 0.80%)</title><rect x="91.1058%" y="277" width="0.8013%" height="15" fill="rgb(250,160,48)" fg:x="1137" fg:w="10"/><text x="91.3558%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (10 samples, 0.80%)</title><rect x="91.1058%" y="261" width="0.8013%" height="15" fill="rgb(244,216,33)" fg:x="1137" fg:w="10"/><text x="91.3558%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="91.7468%" y="245" width="0.1603%" height="15" fill="rgb(207,157,5)" fg:x="1145" fg:w="2"/><text x="91.9968%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="91.8269%" y="229" width="0.0801%" height="15" fill="rgb(228,199,8)" fg:x="1146" fg:w="1"/><text x="92.0769%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.8269%" y="213" width="0.0801%" height="15" fill="rgb(227,80,20)" fg:x="1146" fg:w="1"/><text x="92.0769%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.8269%" y="197" width="0.0801%" height="15" fill="rgb(222,9,33)" fg:x="1146" fg:w="1"/><text x="92.0769%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.8269%" y="181" width="0.0801%" height="15" fill="rgb(239,44,28)" fg:x="1146" fg:w="1"/><text x="92.0769%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="91.9071%" y="277" width="0.0801%" height="15" fill="rgb(249,187,43)" fg:x="1147" fg:w="1"/><text x="92.1571%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="91.9071%" y="261" width="0.0801%" height="15" fill="rgb(216,141,28)" fg:x="1147" fg:w="1"/><text x="92.1571%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.9071%" y="245" width="0.0801%" height="15" fill="rgb(230,154,53)" fg:x="1147" fg:w="1"/><text x="92.1571%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="91.9071%" y="293" width="0.1603%" height="15" fill="rgb(227,82,4)" fg:x="1147" fg:w="2"/><text x="92.1571%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="91.9872%" y="277" width="0.0801%" height="15" fill="rgb(220,107,16)" fg:x="1148" fg:w="1"/><text x="92.2372%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="92.0673%" y="277" width="0.0801%" height="15" fill="rgb(207,187,2)" fg:x="1149" fg:w="1"/><text x="92.3173%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.0673%" y="261" width="0.0801%" height="15" fill="rgb(210,162,52)" fg:x="1149" fg:w="1"/><text x="92.3173%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="91.9071%" y="325" width="0.3205%" height="15" fill="rgb(217,216,49)" fg:x="1147" fg:w="4"/><text x="92.1571%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="91.9071%" y="309" width="0.3205%" height="15" fill="rgb(218,146,49)" fg:x="1147" fg:w="4"/><text x="92.1571%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="92.0673%" y="293" width="0.1603%" height="15" fill="rgb(216,55,40)" fg:x="1149" fg:w="2"/><text x="92.3173%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="92.1474%" y="277" width="0.0801%" height="15" fill="rgb(208,196,21)" fg:x="1150" fg:w="1"/><text x="92.3974%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="92.2276%" y="309" width="0.0801%" height="15" fill="rgb(242,117,42)" fg:x="1151" fg:w="1"/><text x="92.4776%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="92.2276%" y="293" width="0.0801%" height="15" fill="rgb(210,11,23)" fg:x="1151" fg:w="1"/><text x="92.4776%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="92.2276%" y="277" width="0.0801%" height="15" fill="rgb(217,110,2)" fg:x="1151" fg:w="1"/><text x="92.4776%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="92.2276%" y="261" width="0.0801%" height="15" fill="rgb(229,77,54)" fg:x="1151" fg:w="1"/><text x="92.4776%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="92.3077%" y="229" width="0.1603%" height="15" fill="rgb(218,53,16)" fg:x="1152" fg:w="2"/><text x="92.5577%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="92.3077%" y="213" width="0.1603%" height="15" fill="rgb(215,38,13)" fg:x="1152" fg:w="2"/><text x="92.5577%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="92.3077%" y="197" width="0.1603%" height="15" fill="rgb(235,42,18)" fg:x="1152" fg:w="2"/><text x="92.5577%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (153 samples, 12.26%)</title><rect x="80.3686%" y="341" width="12.2596%" height="15" fill="rgb(219,66,54)" fg:x="1003" fg:w="153"/><text x="80.6186%" y="351.50">indefinite::rules:..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.40%)</title><rect x="92.2276%" y="325" width="0.4006%" height="15" fill="rgb(222,205,4)" fg:x="1151" fg:w="5"/><text x="92.4776%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="92.3077%" y="309" width="0.3205%" height="15" fill="rgb(227,213,46)" fg:x="1152" fg:w="4"/><text x="92.5577%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="92.3077%" y="293" width="0.3205%" height="15" fill="rgb(250,145,42)" fg:x="1152" fg:w="4"/><text x="92.5577%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="92.3077%" y="277" width="0.3205%" height="15" fill="rgb(219,15,2)" fg:x="1152" fg:w="4"/><text x="92.5577%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="92.3077%" y="261" width="0.3205%" height="15" fill="rgb(231,181,52)" fg:x="1152" fg:w="4"/><text x="92.5577%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="92.3077%" y="245" width="0.3205%" height="15" fill="rgb(235,1,42)" fg:x="1152" fg:w="4"/><text x="92.5577%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="92.4679%" y="229" width="0.1603%" height="15" fill="rgb(249,88,27)" fg:x="1154" fg:w="2"/><text x="92.7179%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.6282%" y="261" width="0.0801%" height="15" fill="rgb(235,145,16)" fg:x="1156" fg:w="1"/><text x="92.8782%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.6282%" y="245" width="0.0801%" height="15" fill="rgb(237,114,19)" fg:x="1156" fg:w="1"/><text x="92.8782%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="92.6282%" y="229" width="0.0801%" height="15" fill="rgb(238,51,50)" fg:x="1156" fg:w="1"/><text x="92.8782%" y="239.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.6282%" y="213" width="0.0801%" height="15" fill="rgb(205,194,25)" fg:x="1156" fg:w="1"/><text x="92.8782%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.7083%" y="261" width="0.0801%" height="15" fill="rgb(215,203,17)" fg:x="1157" fg:w="1"/><text x="92.9583%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.7083%" y="245" width="0.0801%" height="15" fill="rgb(233,112,49)" fg:x="1157" fg:w="1"/><text x="92.9583%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="92.7885%" y="261" width="0.0801%" height="15" fill="rgb(241,130,26)" fg:x="1158" fg:w="1"/><text x="93.0385%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.7885%" y="245" width="0.0801%" height="15" fill="rgb(252,223,19)" fg:x="1158" fg:w="1"/><text x="93.0385%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="93.0288%" y="245" width="0.0801%" height="15" fill="rgb(211,95,25)" fg:x="1161" fg:w="1"/><text x="93.2788%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="93.1090%" y="245" width="0.5609%" height="15" fill="rgb(251,182,27)" fg:x="1162" fg:w="7"/><text x="93.3590%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="93.2692%" y="229" width="0.4006%" height="15" fill="rgb(238,24,4)" fg:x="1164" fg:w="5"/><text x="93.5192%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="93.6699%" y="165" width="0.0801%" height="15" fill="rgb(224,220,25)" fg:x="1169" fg:w="1"/><text x="93.9199%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="93.6699%" y="229" width="0.1603%" height="15" fill="rgb(239,133,26)" fg:x="1169" fg:w="2"/><text x="93.9199%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="93.6699%" y="213" width="0.1603%" height="15" fill="rgb(211,94,48)" fg:x="1169" fg:w="2"/><text x="93.9199%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="93.6699%" y="197" width="0.1603%" height="15" fill="rgb(239,87,6)" fg:x="1169" fg:w="2"/><text x="93.9199%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="93.6699%" y="181" width="0.1603%" height="15" fill="rgb(227,62,0)" fg:x="1169" fg:w="2"/><text x="93.9199%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="93.7500%" y="165" width="0.0801%" height="15" fill="rgb(211,226,4)" fg:x="1170" fg:w="1"/><text x="94.0000%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.7500%" y="149" width="0.0801%" height="15" fill="rgb(253,38,52)" fg:x="1170" fg:w="1"/><text x="94.0000%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.7500%" y="133" width="0.0801%" height="15" fill="rgb(229,126,40)" fg:x="1170" fg:w="1"/><text x="94.0000%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="93.8301%" y="213" width="0.0801%" height="15" fill="rgb(229,165,44)" fg:x="1171" fg:w="1"/><text x="94.0801%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="93.9103%" y="213" width="0.4006%" height="15" fill="rgb(247,95,47)" fg:x="1172" fg:w="5"/><text x="94.1603%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (21 samples, 1.68%)</title><rect x="92.8686%" y="261" width="1.6827%" height="15" fill="rgb(216,140,30)" fg:x="1159" fg:w="21"/><text x="93.1186%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (11 samples, 0.88%)</title><rect x="93.6699%" y="245" width="0.8814%" height="15" fill="rgb(246,214,8)" fg:x="1169" fg:w="11"/><text x="93.9199%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="93.8301%" y="229" width="0.7212%" height="15" fill="rgb(227,224,15)" fg:x="1171" fg:w="9"/><text x="94.0801%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (3 samples, 0.24%)</title><rect x="94.3109%" y="213" width="0.2404%" height="15" fill="rgb(233,175,4)" fg:x="1177" fg:w="3"/><text x="94.5609%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (2 samples, 0.16%)</title><rect x="94.3910%" y="197" width="0.1603%" height="15" fill="rgb(221,66,45)" fg:x="1178" fg:w="2"/><text x="94.6410%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.3910%" y="181" width="0.1603%" height="15" fill="rgb(221,178,18)" fg:x="1178" fg:w="2"/><text x="94.6410%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.3910%" y="165" width="0.1603%" height="15" fill="rgb(213,81,29)" fg:x="1178" fg:w="2"/><text x="94.6410%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.4712%" y="149" width="0.0801%" height="15" fill="rgb(220,89,49)" fg:x="1179" fg:w="1"/><text x="94.7212%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="94.5513%" y="261" width="0.0801%" height="15" fill="rgb(227,60,33)" fg:x="1180" fg:w="1"/><text x="94.8013%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="94.5513%" y="245" width="0.0801%" height="15" fill="rgb(205,113,12)" fg:x="1180" fg:w="1"/><text x="94.8013%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="94.5513%" y="229" width="0.0801%" height="15" fill="rgb(211,32,1)" fg:x="1180" fg:w="1"/><text x="94.8013%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="94.5513%" y="213" width="0.0801%" height="15" fill="rgb(246,2,12)" fg:x="1180" fg:w="1"/><text x="94.8013%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="94.5513%" y="197" width="0.0801%" height="15" fill="rgb(243,37,27)" fg:x="1180" fg:w="1"/><text x="94.8013%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.6314%" y="213" width="0.0801%" height="15" fill="rgb(248,211,31)" fg:x="1181" fg:w="1"/><text x="94.8814%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.6314%" y="197" width="0.0801%" height="15" fill="rgb(242,146,47)" fg:x="1181" fg:w="1"/><text x="94.8814%" y="207.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="94.6314%" y="181" width="0.0801%" height="15" fill="rgb(206,70,20)" fg:x="1181" fg:w="1"/><text x="94.8814%" y="191.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="94.6314%" y="165" width="0.0801%" height="15" fill="rgb(215,10,51)" fg:x="1181" fg:w="1"/><text x="94.8814%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="94.6314%" y="229" width="0.1603%" height="15" fill="rgb(243,178,53)" fg:x="1181" fg:w="2"/><text x="94.8814%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="94.7115%" y="213" width="0.0801%" height="15" fill="rgb(233,221,20)" fg:x="1182" fg:w="1"/><text x="94.9615%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.7115%" y="197" width="0.0801%" height="15" fill="rgb(218,95,35)" fg:x="1182" fg:w="1"/><text x="94.9615%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7115%" y="181" width="0.0801%" height="15" fill="rgb(229,13,5)" fg:x="1182" fg:w="1"/><text x="94.9615%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.7115%" y="165" width="0.0801%" height="15" fill="rgb(252,164,30)" fg:x="1182" fg:w="1"/><text x="94.9615%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (28 samples, 2.24%)</title><rect x="92.6282%" y="309" width="2.2436%" height="15" fill="rgb(232,68,36)" fg:x="1156" fg:w="28"/><text x="92.8782%" y="319.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (28 samples, 2.24%)</title><rect x="92.6282%" y="293" width="2.2436%" height="15" fill="rgb(219,59,54)" fg:x="1156" fg:w="28"/><text x="92.8782%" y="303.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (28 samples, 2.24%)</title><rect x="92.6282%" y="277" width="2.2436%" height="15" fill="rgb(250,92,33)" fg:x="1156" fg:w="28"/><text x="92.8782%" y="287.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="94.6314%" y="261" width="0.2404%" height="15" fill="rgb(229,162,54)" fg:x="1181" fg:w="3"/><text x="94.8814%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="94.6314%" y="245" width="0.2404%" height="15" fill="rgb(244,114,52)" fg:x="1181" fg:w="3"/><text x="94.8814%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="94.7917%" y="229" width="0.0801%" height="15" fill="rgb(212,211,43)" fg:x="1183" fg:w="1"/><text x="95.0417%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="94.8718%" y="309" width="0.0801%" height="15" fill="rgb(226,147,8)" fg:x="1184" fg:w="1"/><text x="95.1218%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="94.8718%" y="293" width="0.0801%" height="15" fill="rgb(226,23,13)" fg:x="1184" fg:w="1"/><text x="95.1218%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="94.8718%" y="277" width="0.0801%" height="15" fill="rgb(240,63,4)" fg:x="1184" fg:w="1"/><text x="95.1218%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="94.8718%" y="261" width="0.0801%" height="15" fill="rgb(221,1,32)" fg:x="1184" fg:w="1"/><text x="95.1218%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.9519%" y="293" width="0.0801%" height="15" fill="rgb(242,117,10)" fg:x="1185" fg:w="1"/><text x="95.2019%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.0321%" y="261" width="0.0801%" height="15" fill="rgb(249,172,44)" fg:x="1186" fg:w="1"/><text x="95.2821%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.0321%" y="245" width="0.0801%" height="15" fill="rgb(244,46,45)" fg:x="1186" fg:w="1"/><text x="95.2821%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="95.0321%" y="277" width="0.1603%" height="15" fill="rgb(206,43,17)" fg:x="1186" fg:w="2"/><text x="95.2821%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="95.1122%" y="261" width="0.0801%" height="15" fill="rgb(239,218,39)" fg:x="1187" fg:w="1"/><text x="95.3622%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.1122%" y="245" width="0.0801%" height="15" fill="rgb(208,169,54)" fg:x="1187" fg:w="1"/><text x="95.3622%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.1122%" y="229" width="0.0801%" height="15" fill="rgb(247,25,42)" fg:x="1187" fg:w="1"/><text x="95.3622%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="94.9519%" y="309" width="0.3205%" height="15" fill="rgb(226,23,31)" fg:x="1185" fg:w="4"/><text x="95.2019%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="95.0321%" y="293" width="0.2404%" height="15" fill="rgb(247,16,28)" fg:x="1186" fg:w="3"/><text x="95.2821%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="95.1923%" y="277" width="0.0801%" height="15" fill="rgb(231,147,38)" fg:x="1188" fg:w="1"/><text x="95.4423%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="95.1923%" y="261" width="0.0801%" height="15" fill="rgb(253,81,48)" fg:x="1188" fg:w="1"/><text x="95.4423%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.1923%" y="245" width="0.0801%" height="15" fill="rgb(249,222,43)" fg:x="1188" fg:w="1"/><text x="95.4423%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.5128%" y="229" width="0.0801%" height="15" fill="rgb(221,3,27)" fg:x="1192" fg:w="1"/><text x="95.7628%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="95.2724%" y="245" width="0.4006%" height="15" fill="rgb(228,180,5)" fg:x="1189" fg:w="5"/><text x="95.5224%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.5929%" y="229" width="0.0801%" height="15" fill="rgb(227,131,42)" fg:x="1193" fg:w="1"/><text x="95.8429%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="95.2724%" y="261" width="0.4808%" height="15" fill="rgb(212,3,39)" fg:x="1189" fg:w="6"/><text x="95.5224%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="95.6731%" y="245" width="0.0801%" height="15" fill="rgb(226,45,5)" fg:x="1194" fg:w="1"/><text x="95.9231%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.6731%" y="229" width="0.0801%" height="15" fill="rgb(215,167,45)" fg:x="1194" fg:w="1"/><text x="95.9231%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.6731%" y="213" width="0.0801%" height="15" fill="rgb(250,218,53)" fg:x="1194" fg:w="1"/><text x="95.9231%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.6731%" y="197" width="0.0801%" height="15" fill="rgb(207,140,0)" fg:x="1194" fg:w="1"/><text x="95.9231%" y="207.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (40 samples, 3.21%)</title><rect x="92.6282%" y="325" width="3.2051%" height="15" fill="rgb(238,133,51)" fg:x="1156" fg:w="40"/><text x="92.8782%" y="335.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="95.2724%" y="309" width="0.5609%" height="15" fill="rgb(218,203,53)" fg:x="1189" fg:w="7"/><text x="95.5224%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="95.2724%" y="293" width="0.5609%" height="15" fill="rgb(226,184,25)" fg:x="1189" fg:w="7"/><text x="95.5224%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="95.2724%" y="277" width="0.5609%" height="15" fill="rgb(231,121,21)" fg:x="1189" fg:w="7"/><text x="95.5224%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="95.7532%" y="261" width="0.0801%" height="15" fill="rgb(251,14,34)" fg:x="1195" fg:w="1"/><text x="96.0032%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="95.7532%" y="245" width="0.0801%" height="15" fill="rgb(249,193,11)" fg:x="1195" fg:w="1"/><text x="96.0032%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (326 samples, 26.12%)</title><rect x="69.7917%" y="421" width="26.1218%" height="15" fill="rgb(220,172,37)" fg:x="871" fg:w="326"/><text x="70.0417%" y="431.50">&lt;&amp;kernel::model::entry::Entry as plugins_c..</text></g><g><title>plugins_core::looking::model::qualify_name (314 samples, 25.16%)</title><rect x="70.7532%" y="405" width="25.1603%" height="15" fill="rgb(231,229,43)" fg:x="883" fg:w="314"/><text x="71.0032%" y="415.50">plugins_core::looking::model::qualify_na..</text></g><g><title>indefinite::indefinite (314 samples, 25.16%)</title><rect x="70.7532%" y="389" width="25.1603%" height="15" fill="rgb(250,161,5)" fg:x="883" fg:w="314"/><text x="71.0032%" y="399.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (314 samples, 25.16%)</title><rect x="70.7532%" y="373" width="25.1603%" height="15" fill="rgb(218,225,18)" fg:x="883" fg:w="314"/><text x="71.0032%" y="383.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (314 samples, 25.16%)</title><rect x="70.7532%" y="357" width="25.1603%" height="15" fill="rgb(245,45,42)" fg:x="883" fg:w="314"/><text x="71.0032%" y="367.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (41 samples, 3.29%)</title><rect x="92.6282%" y="341" width="3.2853%" height="15" fill="rgb(211,115,1)" fg:x="1156" fg:w="41"/><text x="92.8782%" y="351.50">ind..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="95.8333%" y="325" width="0.0801%" height="15" fill="rgb(248,133,52)" fg:x="1196" fg:w="1"/><text x="96.0833%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (328 samples, 26.28%)</title><rect x="69.7115%" y="613" width="26.2821%" height="15" fill="rgb(238,100,21)" fg:x="870" fg:w="328"/><text x="69.9615%" y="623.50">&lt;engine::session::Session as kernel::actio..</text></g><g><title>kernel::plugins::mw::apply_middleware (328 samples, 26.28%)</title><rect x="69.7115%" y="597" width="26.2821%" height="15" fill="rgb(247,144,11)" fg:x="870" fg:w="328"/><text x="69.9615%" y="607.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (328 samples, 26.28%)</title><rect x="69.7115%" y="581" width="26.2821%" height="15" fill="rgb(206,164,16)" fg:x="870" fg:w="328"/><text x="69.9615%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (328 samples, 26.28%)</title><rect x="69.7115%" y="565" width="26.2821%" height="15" fill="rgb(222,34,3)" fg:x="870" fg:w="328"/><text x="69.9615%" y="575.50">&lt;plugins_dynlib::DynamicMiddleware as kern..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (328 samples, 26.28%)</title><rect x="69.7115%" y="549" width="26.2821%" height="15" fill="rgb(248,82,4)" fg:x="870" fg:w="328"/><text x="69.9615%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (328 samples, 26.28%)</title><rect x="69.7115%" y="533" width="26.2821%" height="15" fill="rgb(228,81,46)" fg:x="870" fg:w="328"/><text x="69.9615%" y="543.50">core::ops::function::FnOnce::call_once{{vt..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (328 samples, 26.28%)</title><rect x="69.7115%" y="517" width="26.2821%" height="15" fill="rgb(227,67,47)" fg:x="870" fg:w="328"/><text x="69.9615%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (328 samples, 26.28%)</title><rect x="69.7115%" y="501" width="26.2821%" height="15" fill="rgb(215,93,53)" fg:x="870" fg:w="328"/><text x="69.9615%" y="511.50">core::ops::function::FnOnce::call_once{{vt..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (328 samples, 26.28%)</title><rect x="69.7115%" y="485" width="26.2821%" height="15" fill="rgb(248,194,39)" fg:x="870" fg:w="328"/><text x="69.9615%" y="495.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::func..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (328 samples, 26.28%)</title><rect x="69.7115%" y="469" width="26.2821%" height="15" fill="rgb(215,5,19)" fg:x="870" fg:w="328"/><text x="69.9615%" y="479.50">&lt;engine::session::state::State as kernel::..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (328 samples, 26.28%)</title><rect x="69.7115%" y="453" width="26.2821%" height="15" fill="rgb(226,215,51)" fg:x="870" fg:w="328"/><text x="69.9615%" y="463.50">&lt;plugins_core::looking::actions::LookActio..</text></g><g><title>plugins_core::looking::model::new_area_observation (327 samples, 26.20%)</title><rect x="69.7917%" y="437" width="26.2019%" height="15" fill="rgb(225,56,26)" fg:x="871" fg:w="327"/><text x="70.0417%" y="447.50">plugins_core::looking::model::new_area_obs..</text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="95.9135%" y="421" width="0.0801%" height="15" fill="rgb(222,75,29)" fg:x="1197" fg:w="1"/><text x="96.1635%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="95.9135%" y="405" width="0.0801%" height="15" fill="rgb(236,139,6)" fg:x="1197" fg:w="1"/><text x="96.1635%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="95.9135%" y="389" width="0.0801%" height="15" fill="rgb(223,137,36)" fg:x="1197" fg:w="1"/><text x="96.1635%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="95.9135%" y="373" width="0.0801%" height="15" fill="rgb(226,99,2)" fg:x="1197" fg:w="1"/><text x="96.1635%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="95.9135%" y="357" width="0.0801%" height="15" fill="rgb(206,133,23)" fg:x="1197" fg:w="1"/><text x="96.1635%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="95.9135%" y="341" width="0.0801%" height="15" fill="rgb(243,173,15)" fg:x="1197" fg:w="1"/><text x="96.1635%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="95.9135%" y="325" width="0.0801%" height="15" fill="rgb(228,69,28)" fg:x="1197" fg:w="1"/><text x="96.1635%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.9135%" y="309" width="0.0801%" height="15" fill="rgb(212,51,22)" fg:x="1197" fg:w="1"/><text x="96.1635%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.0737%" y="501" width="0.1603%" height="15" fill="rgb(227,113,0)" fg:x="1199" fg:w="2"/><text x="96.3237%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.0737%" y="485" width="0.1603%" height="15" fill="rgb(252,84,27)" fg:x="1199" fg:w="2"/><text x="96.3237%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.1538%" y="469" width="0.0801%" height="15" fill="rgb(223,145,39)" fg:x="1200" fg:w="1"/><text x="96.4038%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="95.9936%" y="533" width="0.3205%" height="15" fill="rgb(239,219,30)" fg:x="1198" fg:w="4"/><text x="96.2436%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="96.0737%" y="517" width="0.2404%" height="15" fill="rgb(224,196,39)" fg:x="1199" fg:w="3"/><text x="96.3237%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.2340%" y="501" width="0.0801%" height="15" fill="rgb(205,35,43)" fg:x="1201" fg:w="1"/><text x="96.4840%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (5 samples, 0.40%)</title><rect x="95.9936%" y="581" width="0.4006%" height="15" fill="rgb(228,201,21)" fg:x="1198" fg:w="5"/><text x="96.2436%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="95.9936%" y="565" width="0.4006%" height="15" fill="rgb(237,118,16)" fg:x="1198" fg:w="5"/><text x="96.2436%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="95.9936%" y="549" width="0.4006%" height="15" fill="rgb(241,17,19)" fg:x="1198" fg:w="5"/><text x="96.2436%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.3141%" y="533" width="0.0801%" height="15" fill="rgb(214,10,25)" fg:x="1202" fg:w="1"/><text x="96.5641%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.3942%" y="533" width="0.0801%" height="15" fill="rgb(238,37,29)" fg:x="1203" fg:w="1"/><text x="96.6442%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="96.3942%" y="549" width="0.1603%" height="15" fill="rgb(253,83,25)" fg:x="1203" fg:w="2"/><text x="96.6442%" y="559.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="96.4744%" y="533" width="0.0801%" height="15" fill="rgb(234,192,12)" fg:x="1204" fg:w="1"/><text x="96.7244%" y="543.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="96.5545%" y="549" width="0.0801%" height="15" fill="rgb(241,216,45)" fg:x="1205" fg:w="1"/><text x="96.8045%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="96.5545%" y="533" width="0.0801%" height="15" fill="rgb(242,22,33)" fg:x="1205" fg:w="1"/><text x="96.8045%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.5545%" y="517" width="0.0801%" height="15" fill="rgb(231,105,49)" fg:x="1205" fg:w="1"/><text x="96.8045%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="96.5545%" y="501" width="0.0801%" height="15" fill="rgb(218,204,15)" fg:x="1205" fg:w="1"/><text x="96.8045%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="96.5545%" y="485" width="0.0801%" height="15" fill="rgb(235,138,41)" fg:x="1205" fg:w="1"/><text x="96.8045%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="96.7147%" y="373" width="0.0801%" height="15" fill="rgb(246,0,9)" fg:x="1207" fg:w="1"/><text x="96.9647%" y="383.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="96.7147%" y="357" width="0.0801%" height="15" fill="rgb(210,74,4)" fg:x="1207" fg:w="1"/><text x="96.9647%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.7147%" y="341" width="0.0801%" height="15" fill="rgb(250,60,41)" fg:x="1207" fg:w="1"/><text x="96.9647%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.7147%" y="325" width="0.0801%" height="15" fill="rgb(220,115,12)" fg:x="1207" fg:w="1"/><text x="96.9647%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="96.7147%" y="309" width="0.0801%" height="15" fill="rgb(237,100,13)" fg:x="1207" fg:w="1"/><text x="96.9647%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.7147%" y="293" width="0.0801%" height="15" fill="rgb(213,55,26)" fg:x="1207" fg:w="1"/><text x="96.9647%" y="303.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (3 samples, 0.24%)</title><rect x="96.6346%" y="501" width="0.2404%" height="15" fill="rgb(216,17,4)" fg:x="1206" fg:w="3"/><text x="96.8846%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="96.7147%" y="485" width="0.1603%" height="15" fill="rgb(220,153,47)" fg:x="1207" fg:w="2"/><text x="96.9647%" y="495.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (2 samples, 0.16%)</title><rect x="96.7147%" y="469" width="0.1603%" height="15" fill="rgb(215,131,9)" fg:x="1207" fg:w="2"/><text x="96.9647%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (2 samples, 0.16%)</title><rect x="96.7147%" y="453" width="0.1603%" height="15" fill="rgb(233,46,42)" fg:x="1207" fg:w="2"/><text x="96.9647%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="96.7147%" y="437" width="0.1603%" height="15" fill="rgb(226,86,7)" fg:x="1207" fg:w="2"/><text x="96.9647%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="96.7147%" y="421" width="0.1603%" height="15" fill="rgb(239,226,21)" fg:x="1207" fg:w="2"/><text x="96.9647%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="96.7147%" y="405" width="0.1603%" height="15" fill="rgb(244,137,22)" fg:x="1207" fg:w="2"/><text x="96.9647%" y="415.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="96.7147%" y="389" width="0.1603%" height="15" fill="rgb(211,139,35)" fg:x="1207" fg:w="2"/><text x="96.9647%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="96.7949%" y="373" width="0.0801%" height="15" fill="rgb(214,62,50)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.8750%" y="485" width="0.0801%" height="15" fill="rgb(212,113,44)" fg:x="1209" fg:w="1"/><text x="97.1250%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.8750%" y="469" width="0.0801%" height="15" fill="rgb(226,150,43)" fg:x="1209" fg:w="1"/><text x="97.1250%" y="479.50"></text></g><g><title>kernel::model::entity::Entity::new_from (1 samples, 0.08%)</title><rect x="96.9551%" y="469" width="0.0801%" height="15" fill="rgb(250,71,37)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.1154%" y="197" width="0.0801%" height="15" fill="rgb(219,76,19)" fg:x="1212" fg:w="1"/><text x="97.3654%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.1154%" y="181" width="0.0801%" height="15" fill="rgb(250,39,11)" fg:x="1212" fg:w="1"/><text x="97.3654%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1154%" y="165" width="0.0801%" height="15" fill="rgb(230,64,31)" fg:x="1212" fg:w="1"/><text x="97.3654%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.1955%" y="165" width="0.0801%" height="15" fill="rgb(208,222,23)" fg:x="1213" fg:w="1"/><text x="97.4455%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.2756%" y="133" width="0.0801%" height="15" fill="rgb(227,125,18)" fg:x="1214" fg:w="1"/><text x="97.5256%" y="143.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="97.0353%" y="341" width="0.4006%" height="15" fill="rgb(234,210,9)" fg:x="1211" fg:w="5"/><text x="97.2853%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.40%)</title><rect x="97.0353%" y="325" width="0.4006%" height="15" fill="rgb(217,127,24)" fg:x="1211" fg:w="5"/><text x="97.2853%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="97.0353%" y="309" width="0.4006%" height="15" fill="rgb(239,141,48)" fg:x="1211" fg:w="5"/><text x="97.2853%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="97.1154%" y="293" width="0.3205%" height="15" fill="rgb(227,109,8)" fg:x="1212" fg:w="4"/><text x="97.3654%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="97.1154%" y="277" width="0.3205%" height="15" fill="rgb(235,184,23)" fg:x="1212" fg:w="4"/><text x="97.3654%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="97.1154%" y="261" width="0.3205%" height="15" fill="rgb(227,226,48)" fg:x="1212" fg:w="4"/><text x="97.3654%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="97.1154%" y="245" width="0.3205%" height="15" fill="rgb(206,150,11)" fg:x="1212" fg:w="4"/><text x="97.3654%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="97.1154%" y="229" width="0.3205%" height="15" fill="rgb(254,2,33)" fg:x="1212" fg:w="4"/><text x="97.3654%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="97.1154%" y="213" width="0.3205%" height="15" fill="rgb(243,160,20)" fg:x="1212" fg:w="4"/><text x="97.3654%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="97.1955%" y="197" width="0.2404%" height="15" fill="rgb(218,208,30)" fg:x="1213" fg:w="3"/><text x="97.4455%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.1955%" y="181" width="0.2404%" height="15" fill="rgb(224,120,49)" fg:x="1213" fg:w="3"/><text x="97.4455%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.2756%" y="165" width="0.1603%" height="15" fill="rgb(246,12,2)" fg:x="1214" fg:w="2"/><text x="97.5256%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.2756%" y="149" width="0.1603%" height="15" fill="rgb(236,117,3)" fg:x="1214" fg:w="2"/><text x="97.5256%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.3558%" y="133" width="0.0801%" height="15" fill="rgb(216,128,52)" fg:x="1215" fg:w="1"/><text x="97.6058%" y="143.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="97.3558%" y="117" width="0.0801%" height="15" fill="rgb(246,145,19)" fg:x="1215" fg:w="1"/><text x="97.6058%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.4359%" y="261" width="0.0801%" height="15" fill="rgb(222,11,46)" fg:x="1216" fg:w="1"/><text x="97.6859%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.4359%" y="245" width="0.0801%" height="15" fill="rgb(245,82,36)" fg:x="1216" fg:w="1"/><text x="97.6859%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.4359%" y="229" width="0.0801%" height="15" fill="rgb(250,73,51)" fg:x="1216" fg:w="1"/><text x="97.6859%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.4359%" y="213" width="0.0801%" height="15" fill="rgb(221,189,23)" fg:x="1216" fg:w="1"/><text x="97.6859%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.4359%" y="197" width="0.0801%" height="15" fill="rgb(210,33,7)" fg:x="1216" fg:w="1"/><text x="97.6859%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.4359%" y="181" width="0.0801%" height="15" fill="rgb(210,107,22)" fg:x="1216" fg:w="1"/><text x="97.6859%" y="191.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="97.4359%" y="165" width="0.0801%" height="15" fill="rgb(222,116,37)" fg:x="1216" fg:w="1"/><text x="97.6859%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (7 samples, 0.56%)</title><rect x="97.0353%" y="357" width="0.5609%" height="15" fill="rgb(254,17,48)" fg:x="1211" fg:w="7"/><text x="97.2853%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.4359%" y="341" width="0.1603%" height="15" fill="rgb(224,36,32)" fg:x="1216" fg:w="2"/><text x="97.6859%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.4359%" y="325" width="0.1603%" height="15" fill="rgb(232,90,46)" fg:x="1216" fg:w="2"/><text x="97.6859%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="97.4359%" y="309" width="0.1603%" height="15" fill="rgb(241,66,40)" fg:x="1216" fg:w="2"/><text x="97.6859%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.4359%" y="293" width="0.1603%" height="15" fill="rgb(249,184,29)" fg:x="1216" fg:w="2"/><text x="97.6859%" y="303.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.4359%" y="277" width="0.1603%" height="15" fill="rgb(231,181,1)" fg:x="1216" fg:w="2"/><text x="97.6859%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.5160%" y="261" width="0.0801%" height="15" fill="rgb(224,94,2)" fg:x="1217" fg:w="1"/><text x="97.7660%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.5160%" y="245" width="0.0801%" height="15" fill="rgb(229,170,15)" fg:x="1217" fg:w="1"/><text x="97.7660%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.5160%" y="229" width="0.0801%" height="15" fill="rgb(240,127,35)" fg:x="1217" fg:w="1"/><text x="97.7660%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.5160%" y="213" width="0.0801%" height="15" fill="rgb(248,196,34)" fg:x="1217" fg:w="1"/><text x="97.7660%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.5160%" y="197" width="0.0801%" height="15" fill="rgb(236,137,7)" fg:x="1217" fg:w="1"/><text x="97.7660%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5962%" y="309" width="0.0801%" height="15" fill="rgb(235,127,16)" fg:x="1218" fg:w="1"/><text x="97.8462%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5962%" y="293" width="0.0801%" height="15" fill="rgb(250,192,54)" fg:x="1218" fg:w="1"/><text x="97.8462%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5962%" y="277" width="0.0801%" height="15" fill="rgb(218,98,20)" fg:x="1218" fg:w="1"/><text x="97.8462%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5962%" y="261" width="0.0801%" height="15" fill="rgb(230,176,47)" fg:x="1218" fg:w="1"/><text x="97.8462%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5962%" y="245" width="0.0801%" height="15" fill="rgb(244,2,33)" fg:x="1218" fg:w="1"/><text x="97.8462%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="97.5962%" y="357" width="0.1603%" height="15" fill="rgb(231,100,17)" fg:x="1218" fg:w="2"/><text x="97.8462%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="97.5962%" y="341" width="0.1603%" height="15" fill="rgb(245,23,12)" fg:x="1218" fg:w="2"/><text x="97.8462%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="97.5962%" y="325" width="0.1603%" height="15" fill="rgb(249,55,22)" fg:x="1218" fg:w="2"/><text x="97.8462%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6763%" y="309" width="0.0801%" height="15" fill="rgb(207,134,9)" fg:x="1219" fg:w="1"/><text x="97.9263%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6763%" y="293" width="0.0801%" height="15" fill="rgb(218,134,0)" fg:x="1219" fg:w="1"/><text x="97.9263%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6763%" y="277" width="0.0801%" height="15" fill="rgb(213,212,33)" fg:x="1219" fg:w="1"/><text x="97.9263%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6763%" y="261" width="0.0801%" height="15" fill="rgb(252,106,18)" fg:x="1219" fg:w="1"/><text x="97.9263%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.6763%" y="245" width="0.0801%" height="15" fill="rgb(208,126,42)" fg:x="1219" fg:w="1"/><text x="97.9263%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6763%" y="229" width="0.0801%" height="15" fill="rgb(246,175,29)" fg:x="1219" fg:w="1"/><text x="97.9263%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.6763%" y="213" width="0.0801%" height="15" fill="rgb(215,13,50)" fg:x="1219" fg:w="1"/><text x="97.9263%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6763%" y="197" width="0.0801%" height="15" fill="rgb(216,172,15)" fg:x="1219" fg:w="1"/><text x="97.9263%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (10 samples, 0.80%)</title><rect x="97.0353%" y="389" width="0.8013%" height="15" fill="rgb(212,103,13)" fg:x="1211" fg:w="10"/><text x="97.2853%" y="399.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="97.0353%" y="373" width="0.8013%" height="15" fill="rgb(231,171,36)" fg:x="1211" fg:w="10"/><text x="97.2853%" y="383.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="97.7564%" y="357" width="0.0801%" height="15" fill="rgb(250,123,20)" fg:x="1220" fg:w="1"/><text x="98.0064%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.7564%" y="341" width="0.0801%" height="15" fill="rgb(212,53,50)" fg:x="1220" fg:w="1"/><text x="98.0064%" y="351.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (11 samples, 0.88%)</title><rect x="97.0353%" y="453" width="0.8814%" height="15" fill="rgb(243,54,12)" fg:x="1211" fg:w="11"/><text x="97.2853%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (11 samples, 0.88%)</title><rect x="97.0353%" y="437" width="0.8814%" height="15" fill="rgb(234,101,34)" fg:x="1211" fg:w="11"/><text x="97.2853%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.88%)</title><rect x="97.0353%" y="421" width="0.8814%" height="15" fill="rgb(254,67,22)" fg:x="1211" fg:w="11"/><text x="97.2853%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (11 samples, 0.88%)</title><rect x="97.0353%" y="405" width="0.8814%" height="15" fill="rgb(250,35,47)" fg:x="1211" fg:w="11"/><text x="97.2853%" y="415.50"></text></g><g><title>kernel::model::&lt;impl core::convert::From&lt;&amp;kernel::model::EntityPtr&gt; for kernel::model::entity::EntityRef&gt;::from (1 samples, 0.08%)</title><rect x="97.8365%" y="389" width="0.0801%" height="15" fill="rgb(226,126,38)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8365%" y="373" width="0.0801%" height="15" fill="rgb(216,138,53)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8365%" y="357" width="0.0801%" height="15" fill="rgb(246,199,43)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.8365%" y="341" width="0.0801%" height="15" fill="rgb(232,125,11)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.8365%" y="325" width="0.0801%" height="15" fill="rgb(218,219,45)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.8365%" y="309" width="0.0801%" height="15" fill="rgb(216,102,54)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.8365%" y="293" width="0.0801%" height="15" fill="rgb(250,228,7)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.8365%" y="277" width="0.0801%" height="15" fill="rgb(226,125,25)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.8365%" y="261" width="0.0801%" height="15" fill="rgb(224,165,27)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.8365%" y="245" width="0.0801%" height="15" fill="rgb(233,86,3)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.8365%" y="229" width="0.0801%" height="15" fill="rgb(228,116,20)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.8365%" y="213" width="0.0801%" height="15" fill="rgb(209,192,17)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="223.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="97.8365%" y="197" width="0.0801%" height="15" fill="rgb(224,88,34)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="207.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="97.8365%" y="181" width="0.0801%" height="15" fill="rgb(233,38,6)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 1.36%)</title><rect x="96.6346%" y="533" width="1.3622%" height="15" fill="rgb(212,59,30)" fg:x="1206" fg:w="17"/><text x="96.8846%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17 samples, 1.36%)</title><rect x="96.6346%" y="517" width="1.3622%" height="15" fill="rgb(213,80,3)" fg:x="1206" fg:w="17"/><text x="96.8846%" y="527.50"></text></g><g><title>plugins_core::tools::get_contained_keys (14 samples, 1.12%)</title><rect x="96.8750%" y="501" width="1.1218%" height="15" fill="rgb(251,178,7)" fg:x="1209" fg:w="14"/><text x="97.1250%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (13 samples, 1.04%)</title><rect x="96.9551%" y="485" width="1.0417%" height="15" fill="rgb(213,154,26)" fg:x="1210" fg:w="13"/><text x="97.2051%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (12 samples, 0.96%)</title><rect x="97.0353%" y="469" width="0.9615%" height="15" fill="rgb(238,165,49)" fg:x="1211" fg:w="12"/><text x="97.2853%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9167%" y="453" width="0.0801%" height="15" fill="rgb(248,91,46)" fg:x="1222" fg:w="1"/><text x="98.1667%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9167%" y="437" width="0.0801%" height="15" fill="rgb(244,21,52)" fg:x="1222" fg:w="1"/><text x="98.1667%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.9167%" y="421" width="0.0801%" height="15" fill="rgb(247,122,20)" fg:x="1222" fg:w="1"/><text x="98.1667%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.9167%" y="405" width="0.0801%" height="15" fill="rgb(218,27,9)" fg:x="1222" fg:w="1"/><text x="98.1667%" y="415.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.9167%" y="389" width="0.0801%" height="15" fill="rgb(246,7,6)" fg:x="1222" fg:w="1"/><text x="98.1667%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9167%" y="373" width="0.0801%" height="15" fill="rgb(227,135,54)" fg:x="1222" fg:w="1"/><text x="98.1667%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9167%" y="357" width="0.0801%" height="15" fill="rgb(247,14,11)" fg:x="1222" fg:w="1"/><text x="98.1667%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="97.9167%" y="341" width="0.0801%" height="15" fill="rgb(206,149,34)" fg:x="1222" fg:w="1"/><text x="98.1667%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0769%" y="485" width="0.0801%" height="15" fill="rgb(227,228,4)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0769%" y="469" width="0.0801%" height="15" fill="rgb(238,218,28)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.0769%" y="453" width="0.0801%" height="15" fill="rgb(252,86,40)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.0769%" y="437" width="0.0801%" height="15" fill="rgb(251,225,11)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.0769%" y="421" width="0.0801%" height="15" fill="rgb(206,46,49)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0769%" y="405" width="0.0801%" height="15" fill="rgb(245,128,24)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0769%" y="389" width="0.0801%" height="15" fill="rgb(219,177,34)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.0769%" y="373" width="0.0801%" height="15" fill="rgb(218,60,48)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.0769%" y="357" width="0.0801%" height="15" fill="rgb(221,11,5)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.0769%" y="341" width="0.0801%" height="15" fill="rgb(220,148,13)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.0769%" y="325" width="0.0801%" height="15" fill="rgb(210,16,3)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="98.1571%" y="469" width="0.0801%" height="15" fill="rgb(236,80,2)" fg:x="1225" fg:w="1"/><text x="98.4071%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="98.1571%" y="485" width="0.1603%" height="15" fill="rgb(239,129,19)" fg:x="1225" fg:w="2"/><text x="98.4071%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="98.2372%" y="469" width="0.0801%" height="15" fill="rgb(220,106,35)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.2372%" y="453" width="0.0801%" height="15" fill="rgb(252,139,45)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.2372%" y="437" width="0.0801%" height="15" fill="rgb(229,8,36)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.2372%" y="421" width="0.0801%" height="15" fill="rgb(230,126,33)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.2372%" y="405" width="0.0801%" height="15" fill="rgb(239,140,21)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="98.2372%" y="389" width="0.0801%" height="15" fill="rgb(254,104,9)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2372%" y="373" width="0.0801%" height="15" fill="rgb(239,52,14)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2372%" y="357" width="0.0801%" height="15" fill="rgb(208,227,44)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.2372%" y="341" width="0.0801%" height="15" fill="rgb(246,18,19)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.2372%" y="325" width="0.0801%" height="15" fill="rgb(235,228,25)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.2372%" y="309" width="0.0801%" height="15" fill="rgb(240,156,20)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2372%" y="293" width="0.0801%" height="15" fill="rgb(224,8,20)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2372%" y="277" width="0.0801%" height="15" fill="rgb(214,12,52)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.2372%" y="261" width="0.0801%" height="15" fill="rgb(211,220,47)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.2372%" y="245" width="0.0801%" height="15" fill="rgb(250,173,5)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.2372%" y="229" width="0.0801%" height="15" fill="rgb(250,125,52)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.2372%" y="213" width="0.0801%" height="15" fill="rgb(209,133,18)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.2372%" y="197" width="0.0801%" height="15" fill="rgb(216,173,22)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="207.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.3173%" y="181" width="0.0801%" height="15" fill="rgb(205,3,22)" fg:x="1227" fg:w="1"/><text x="98.5673%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.3173%" y="165" width="0.0801%" height="15" fill="rgb(248,22,20)" fg:x="1227" fg:w="1"/><text x="98.5673%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.3173%" y="149" width="0.0801%" height="15" fill="rgb(233,6,29)" fg:x="1227" fg:w="1"/><text x="98.5673%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="98.3173%" y="197" width="0.1603%" height="15" fill="rgb(240,22,54)" fg:x="1227" fg:w="2"/><text x="98.5673%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.3974%" y="181" width="0.0801%" height="15" fill="rgb(231,133,32)" fg:x="1228" fg:w="1"/><text x="98.6474%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.3974%" y="165" width="0.0801%" height="15" fill="rgb(248,193,4)" fg:x="1228" fg:w="1"/><text x="98.6474%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="98.3173%" y="341" width="0.2404%" height="15" fill="rgb(211,178,46)" fg:x="1227" fg:w="3"/><text x="98.5673%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="98.3173%" y="325" width="0.2404%" height="15" fill="rgb(224,5,42)" fg:x="1227" fg:w="3"/><text x="98.5673%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.3173%" y="309" width="0.2404%" height="15" fill="rgb(239,176,25)" fg:x="1227" fg:w="3"/><text x="98.5673%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="98.3173%" y="293" width="0.2404%" height="15" fill="rgb(245,187,50)" fg:x="1227" fg:w="3"/><text x="98.5673%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="98.3173%" y="277" width="0.2404%" height="15" fill="rgb(248,24,15)" fg:x="1227" fg:w="3"/><text x="98.5673%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.3173%" y="261" width="0.2404%" height="15" fill="rgb(205,166,13)" fg:x="1227" fg:w="3"/><text x="98.5673%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="98.3173%" y="245" width="0.2404%" height="15" fill="rgb(208,114,23)" fg:x="1227" fg:w="3"/><text x="98.5673%" y="255.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="98.3173%" y="229" width="0.2404%" height="15" fill="rgb(239,127,18)" fg:x="1227" fg:w="3"/><text x="98.5673%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.3173%" y="213" width="0.2404%" height="15" fill="rgb(219,154,28)" fg:x="1227" fg:w="3"/><text x="98.5673%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.4776%" y="197" width="0.0801%" height="15" fill="rgb(225,157,23)" fg:x="1229" fg:w="1"/><text x="98.7276%" y="207.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="98.3173%" y="469" width="0.3205%" height="15" fill="rgb(219,8,6)" fg:x="1227" fg:w="4"/><text x="98.5673%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.3173%" y="453" width="0.3205%" height="15" fill="rgb(212,47,6)" fg:x="1227" fg:w="4"/><text x="98.5673%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="98.3173%" y="437" width="0.3205%" height="15" fill="rgb(224,190,4)" fg:x="1227" fg:w="4"/><text x="98.5673%" y="447.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="98.3173%" y="421" width="0.3205%" height="15" fill="rgb(239,183,29)" fg:x="1227" fg:w="4"/><text x="98.5673%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.3173%" y="405" width="0.3205%" height="15" fill="rgb(213,57,7)" fg:x="1227" fg:w="4"/><text x="98.5673%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="98.3173%" y="389" width="0.3205%" height="15" fill="rgb(216,148,1)" fg:x="1227" fg:w="4"/><text x="98.5673%" y="399.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="98.3173%" y="373" width="0.3205%" height="15" fill="rgb(236,182,29)" fg:x="1227" fg:w="4"/><text x="98.5673%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.3173%" y="357" width="0.3205%" height="15" fill="rgb(244,120,48)" fg:x="1227" fg:w="4"/><text x="98.5673%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.5577%" y="341" width="0.0801%" height="15" fill="rgb(206,71,34)" fg:x="1230" fg:w="1"/><text x="98.8077%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.5577%" y="325" width="0.0801%" height="15" fill="rgb(242,32,6)" fg:x="1230" fg:w="1"/><text x="98.8077%" y="335.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="98.6378%" y="421" width="0.0801%" height="15" fill="rgb(241,35,3)" fg:x="1231" fg:w="1"/><text x="98.8878%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.6378%" y="405" width="0.0801%" height="15" fill="rgb(222,62,19)" fg:x="1231" fg:w="1"/><text x="98.8878%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="98.7179%" y="373" width="0.2404%" height="15" fill="rgb(223,110,41)" fg:x="1232" fg:w="3"/><text x="98.9679%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="98.7179%" y="357" width="0.2404%" height="15" fill="rgb(208,224,4)" fg:x="1232" fg:w="3"/><text x="98.9679%" y="367.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="98.7179%" y="341" width="0.2404%" height="15" fill="rgb(241,137,19)" fg:x="1232" fg:w="3"/><text x="98.9679%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.9583%" y="357" width="0.0801%" height="15" fill="rgb(244,24,17)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.0385%" y="325" width="0.0801%" height="15" fill="rgb(245,178,49)" fg:x="1236" fg:w="1"/><text x="99.2885%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.0385%" y="309" width="0.0801%" height="15" fill="rgb(219,160,38)" fg:x="1236" fg:w="1"/><text x="99.2885%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0385%" y="293" width="0.0801%" height="15" fill="rgb(228,137,14)" fg:x="1236" fg:w="1"/><text x="99.2885%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="98.7179%" y="389" width="0.4808%" height="15" fill="rgb(237,134,11)" fg:x="1232" fg:w="6"/><text x="98.9679%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="98.9583%" y="373" width="0.2404%" height="15" fill="rgb(211,126,44)" fg:x="1235" fg:w="3"/><text x="99.2083%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="99.0385%" y="357" width="0.1603%" height="15" fill="rgb(226,171,33)" fg:x="1236" fg:w="2"/><text x="99.2885%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="99.0385%" y="341" width="0.1603%" height="15" fill="rgb(253,99,13)" fg:x="1236" fg:w="2"/><text x="99.2885%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1186%" y="325" width="0.0801%" height="15" fill="rgb(244,48,7)" fg:x="1237" fg:w="1"/><text x="99.3686%" y="335.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (12 samples, 0.96%)</title><rect x="98.3173%" y="485" width="0.9615%" height="15" fill="rgb(244,217,54)" fg:x="1227" fg:w="12"/><text x="98.5673%" y="495.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (8 samples, 0.64%)</title><rect x="98.6378%" y="469" width="0.6410%" height="15" fill="rgb(224,15,18)" fg:x="1231" fg:w="8"/><text x="98.8878%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="98.6378%" y="453" width="0.6410%" height="15" fill="rgb(244,99,12)" fg:x="1231" fg:w="8"/><text x="98.8878%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="98.6378%" y="437" width="0.6410%" height="15" fill="rgb(233,226,8)" fg:x="1231" fg:w="8"/><text x="98.8878%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="98.7179%" y="421" width="0.5609%" height="15" fill="rgb(229,211,3)" fg:x="1232" fg:w="7"/><text x="98.9679%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="98.7179%" y="405" width="0.5609%" height="15" fill="rgb(216,140,21)" fg:x="1232" fg:w="7"/><text x="98.9679%" y="415.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="99.1987%" y="389" width="0.0801%" height="15" fill="rgb(234,122,30)" fg:x="1238" fg:w="1"/><text x="99.4487%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1987%" y="373" width="0.0801%" height="15" fill="rgb(236,25,46)" fg:x="1238" fg:w="1"/><text x="99.4487%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (375 samples, 30.05%)</title><rect x="69.3109%" y="629" width="30.0481%" height="15" fill="rgb(217,52,54)" fg:x="865" fg:w="375"/><text x="69.5609%" y="639.50">&lt;engine::session::Session as kernel::actions::Pe..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (42 samples, 3.37%)</title><rect x="95.9936%" y="613" width="3.3654%" height="15" fill="rgb(222,29,26)" fg:x="1198" fg:w="42"/><text x="96.2436%" y="623.50">ker..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (42 samples, 3.37%)</title><rect x="95.9936%" y="597" width="3.3654%" height="15" fill="rgb(216,177,29)" fg:x="1198" fg:w="42"/><text x="96.2436%" y="607.50">&lt;pl..</text></g><g><title>plugins_rpc::querying::have_surroundings (37 samples, 2.96%)</title><rect x="96.3942%" y="581" width="2.9647%" height="15" fill="rgb(247,136,51)" fg:x="1203" fg:w="37"/><text x="96.6442%" y="591.50">plu..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (37 samples, 2.96%)</title><rect x="96.3942%" y="565" width="2.9647%" height="15" fill="rgb(231,47,47)" fg:x="1203" fg:w="37"/><text x="96.6442%" y="575.50">&lt;pl..</text></g><g><title>core::iter::adapters::try_process (34 samples, 2.72%)</title><rect x="96.6346%" y="549" width="2.7244%" height="15" fill="rgb(211,192,36)" fg:x="1206" fg:w="34"/><text x="96.8846%" y="559.50">co..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (17 samples, 1.36%)</title><rect x="97.9968%" y="533" width="1.3622%" height="15" fill="rgb(229,156,32)" fg:x="1223" fg:w="17"/><text x="98.2468%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17 samples, 1.36%)</title><rect x="97.9968%" y="517" width="1.3622%" height="15" fill="rgb(248,213,20)" fg:x="1223" fg:w="17"/><text x="98.2468%" y="527.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (17 samples, 1.36%)</title><rect x="97.9968%" y="501" width="1.3622%" height="15" fill="rgb(217,64,7)" fg:x="1223" fg:w="17"/><text x="98.2468%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="99.2788%" y="485" width="0.0801%" height="15" fill="rgb(232,142,8)" fg:x="1239" fg:w="1"/><text x="99.5288%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.2788%" y="469" width="0.0801%" height="15" fill="rgb(224,92,44)" fg:x="1239" fg:w="1"/><text x="99.5288%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.3590%" y="581" width="0.0801%" height="15" fill="rgb(214,169,17)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3590%" y="565" width="0.0801%" height="15" fill="rgb(210,59,37)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3590%" y="549" width="0.0801%" height="15" fill="rgb(214,116,48)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3590%" y="533" width="0.0801%" height="15" fill="rgb(244,191,6)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3590%" y="517" width="0.0801%" height="15" fill="rgb(241,50,52)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3590%" y="501" width="0.0801%" height="15" fill="rgb(236,75,39)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3590%" y="485" width="0.0801%" height="15" fill="rgb(236,99,0)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3590%" y="469" width="0.0801%" height="15" fill="rgb(207,202,15)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3590%" y="453" width="0.0801%" height="15" fill="rgb(233,207,14)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3590%" y="437" width="0.0801%" height="15" fill="rgb(226,27,51)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="99.3590%" y="597" width="0.1603%" height="15" fill="rgb(206,104,42)" fg:x="1240" fg:w="2"/><text x="99.6090%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4391%" y="581" width="0.0801%" height="15" fill="rgb(212,225,4)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4391%" y="565" width="0.0801%" height="15" fill="rgb(233,96,42)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.4391%" y="549" width="0.0801%" height="15" fill="rgb(229,21,32)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4391%" y="533" width="0.0801%" height="15" fill="rgb(226,216,24)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.4391%" y="517" width="0.0801%" height="15" fill="rgb(221,163,17)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.4391%" y="501" width="0.0801%" height="15" fill="rgb(216,216,42)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.4391%" y="485" width="0.0801%" height="15" fill="rgb(240,118,7)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.3590%" y="629" width="0.2404%" height="15" fill="rgb(221,67,37)" fg:x="1240" fg:w="3"/><text x="99.6090%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.3590%" y="613" width="0.2404%" height="15" fill="rgb(241,32,44)" fg:x="1240" fg:w="3"/><text x="99.6090%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.5192%" y="597" width="0.0801%" height="15" fill="rgb(235,204,43)" fg:x="1242" fg:w="1"/><text x="99.7692%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.5192%" y="581" width="0.0801%" height="15" fill="rgb(213,116,10)" fg:x="1242" fg:w="1"/><text x="99.7692%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.5192%" y="565" width="0.0801%" height="15" fill="rgb(239,15,48)" fg:x="1242" fg:w="1"/><text x="99.7692%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5192%" y="549" width="0.0801%" height="15" fill="rgb(207,123,36)" fg:x="1242" fg:w="1"/><text x="99.7692%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5192%" y="533" width="0.0801%" height="15" fill="rgb(209,103,30)" fg:x="1242" fg:w="1"/><text x="99.7692%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5192%" y="517" width="0.0801%" height="15" fill="rgb(238,100,19)" fg:x="1242" fg:w="1"/><text x="99.7692%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5192%" y="501" width="0.0801%" height="15" fill="rgb(244,30,14)" fg:x="1242" fg:w="1"/><text x="99.7692%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.5994%" y="581" width="0.0801%" height="15" fill="rgb(249,174,6)" fg:x="1243" fg:w="1"/><text x="99.8494%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="99.5994%" y="565" width="0.0801%" height="15" fill="rgb(235,213,41)" fg:x="1243" fg:w="1"/><text x="99.8494%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.5994%" y="549" width="0.0801%" height="15" fill="rgb(213,118,6)" fg:x="1243" fg:w="1"/><text x="99.8494%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.5994%" y="533" width="0.0801%" height="15" fill="rgb(235,44,51)" fg:x="1243" fg:w="1"/><text x="99.8494%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.5994%" y="517" width="0.0801%" height="15" fill="rgb(217,9,53)" fg:x="1243" fg:w="1"/><text x="99.8494%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="99.6795%" y="581" width="0.0801%" height="15" fill="rgb(237,172,34)" fg:x="1244" fg:w="1"/><text x="99.9295%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6795%" y="565" width="0.0801%" height="15" fill="rgb(206,206,11)" fg:x="1244" fg:w="1"/><text x="99.9295%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6795%" y="549" width="0.0801%" height="15" fill="rgb(214,149,29)" fg:x="1244" fg:w="1"/><text x="99.9295%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="99.5994%" y="629" width="0.2404%" height="15" fill="rgb(208,123,3)" fg:x="1243" fg:w="3"/><text x="99.8494%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.5994%" y="613" width="0.2404%" height="15" fill="rgb(229,126,4)" fg:x="1243" fg:w="3"/><text x="99.8494%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.5994%" y="597" width="0.2404%" height="15" fill="rgb(222,92,36)" fg:x="1243" fg:w="3"/><text x="99.8494%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.7596%" y="581" width="0.0801%" height="15" fill="rgb(216,39,41)" fg:x="1245" fg:w="1"/><text x="100.0096%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.7596%" y="565" width="0.0801%" height="15" fill="rgb(253,127,28)" fg:x="1245" fg:w="1"/><text x="100.0096%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.7596%" y="549" width="0.0801%" height="15" fill="rgb(249,152,51)" fg:x="1245" fg:w="1"/><text x="100.0096%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7596%" y="533" width="0.0801%" height="15" fill="rgb(209,123,42)" fg:x="1245" fg:w="1"/><text x="100.0096%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7596%" y="517" width="0.0801%" height="15" fill="rgb(241,118,22)" fg:x="1245" fg:w="1"/><text x="100.0096%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.7596%" y="501" width="0.0801%" height="15" fill="rgb(208,25,7)" fg:x="1245" fg:w="1"/><text x="100.0096%" y="511.50"></text></g><g><title>all (1,248 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(243,144,39)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="1007.50"></text></g><g><title>simple-484c7248 (1,248 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(250,50,5)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="991.50">simple-484c7248</text></g><g><title>_start (1,248 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(207,67,11)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="975.50">_start</text></g><g><title>__libc_start_main (1,248 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(245,204,40)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="959.50">__libc_start_main</text></g><g><title>main (1,248 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(238,228,24)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="943.50">main</text></g><g><title>std::rt::lang_start_internal (1,248 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(217,116,22)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,248 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(234,98,12)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,248 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(242,170,50)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,248 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(235,7,5)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,248 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(241,114,28)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="863.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,248 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(246,112,42)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,248 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(248,228,14)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,248 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(208,133,18)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="815.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,248 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(207,35,49)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="799.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,248 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(205,68,36)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="783.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,248 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(245,62,40)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="767.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,248 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(228,27,24)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="751.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,248 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(253,19,12)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="735.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,248 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(232,28,20)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="719.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (462 samples, 37.02%)</title><rect x="62.9808%" y="693" width="37.0192%" height="15" fill="rgb(218,35,51)" fg:x="786" fg:w="462"/><text x="63.2308%" y="703.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (462 samples, 37.02%)</title><rect x="62.9808%" y="677" width="37.0192%" height="15" fill="rgb(212,90,40)" fg:x="786" fg:w="462"/><text x="63.2308%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (462 samples, 37.02%)</title><rect x="62.9808%" y="661" width="37.0192%" height="15" fill="rgb(220,172,12)" fg:x="786" fg:w="462"/><text x="63.2308%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (383 samples, 30.69%)</title><rect x="69.3109%" y="645" width="30.6891%" height="15" fill="rgb(226,159,20)" fg:x="865" fg:w="383"/><text x="69.5609%" y="655.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="99.8397%" y="629" width="0.1603%" height="15" fill="rgb(234,205,16)" fg:x="1246" fg:w="2"/><text x="100.0897%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="99.8397%" y="613" width="0.1603%" height="15" fill="rgb(207,9,39)" fg:x="1246" fg:w="2"/><text x="100.0897%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="99.8397%" y="597" width="0.1603%" height="15" fill="rgb(249,143,15)" fg:x="1246" fg:w="2"/><text x="100.0897%" y="607.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.9199%" y="581" width="0.0801%" height="15" fill="rgb(253,133,29)" fg:x="1247" fg:w="1"/><text x="100.1699%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.9199%" y="565" width="0.0801%" height="15" fill="rgb(221,187,0)" fg:x="1247" fg:w="1"/><text x="100.1699%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.9199%" y="549" width="0.0801%" height="15" fill="rgb(205,204,26)" fg:x="1247" fg:w="1"/><text x="100.1699%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.9199%" y="533" width="0.0801%" height="15" fill="rgb(224,68,54)" fg:x="1247" fg:w="1"/><text x="100.1699%" y="543.50"></text></g></svg></svg>