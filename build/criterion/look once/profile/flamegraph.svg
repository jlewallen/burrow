<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1257"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.0000%" y="725" width="0.0796%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="709" width="0.0796%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2387%" y="613" width="0.0796%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.4887%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3182%" y="613" width="0.0796%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.5682%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4773%" y="597" width="0.0796%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="1"/><text x="0.7273%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.5569%" y="597" width="0.1591%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="2"/><text x="0.8069%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.5569%" y="581" width="0.1591%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="2"/><text x="0.8069%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7955%" y="581" width="0.0796%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="1"/><text x="1.0455%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="0.2387%" y="661" width="0.7160%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="9"/><text x="0.4887%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (9 samples, 0.72%)</title><rect x="0.2387%" y="645" width="0.7160%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="9"/><text x="0.4887%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.72%)</title><rect x="0.2387%" y="629" width="0.7160%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="9"/><text x="0.4887%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="0.3978%" y="613" width="0.5569%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="7"/><text x="0.6478%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.7160%" y="597" width="0.2387%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="3"/><text x="0.9660%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8751%" y="581" width="0.0796%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="1"/><text x="1.1251%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8751%" y="565" width="0.0796%" height="15" fill="rgb(217,207,13)" fg:x="11" fg:w="1"/><text x="1.1251%" y="575.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.9547%" y="661" width="0.2387%" height="15" fill="rgb(231,73,38)" fg:x="12" fg:w="3"/><text x="1.2047%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1933%" y="645" width="0.0796%" height="15" fill="rgb(225,20,46)" fg:x="15" fg:w="1"/><text x="1.4433%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2729%" y="629" width="0.0796%" height="15" fill="rgb(210,31,41)" fg:x="16" fg:w="1"/><text x="1.5229%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5115%" y="613" width="0.0796%" height="15" fill="rgb(221,200,47)" fg:x="19" fg:w="1"/><text x="1.7615%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.5911%" y="613" width="0.0796%" height="15" fill="rgb(226,26,5)" fg:x="20" fg:w="1"/><text x="1.8411%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.67%)</title><rect x="0.1591%" y="677" width="1.6706%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="21"/><text x="0.4091%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.64%)</title><rect x="1.1933%" y="661" width="0.6364%" height="15" fill="rgb(235,183,28)" fg:x="15" fg:w="8"/><text x="1.4433%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="1.2729%" y="645" width="0.5569%" height="15" fill="rgb(221,5,38)" fg:x="16" fg:w="7"/><text x="1.5229%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="1.3524%" y="629" width="0.4773%" height="15" fill="rgb(247,18,42)" fg:x="17" fg:w="6"/><text x="1.6024%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.6706%" y="613" width="0.1591%" height="15" fill="rgb(241,131,45)" fg:x="21" fg:w="2"/><text x="1.9206%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.6706%" y="597" width="0.1591%" height="15" fill="rgb(249,31,29)" fg:x="21" fg:w="2"/><text x="1.9206%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.7502%" y="581" width="0.0796%" height="15" fill="rgb(225,111,53)" fg:x="22" fg:w="1"/><text x="2.0002%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7502%" y="565" width="0.0796%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="1"/><text x="2.0002%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 1.99%)</title><rect x="0.0000%" y="741" width="1.9889%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="25"/><text x="0.2500%" y="751.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (24 samples, 1.91%)</title><rect x="0.0796%" y="725" width="1.9093%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="24"/><text x="0.3296%" y="735.50">c..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 1.83%)</title><rect x="0.1591%" y="709" width="1.8298%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="23"/><text x="0.4091%" y="719.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (23 samples, 1.83%)</title><rect x="0.1591%" y="693" width="1.8298%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="23"/><text x="0.4091%" y="703.50">c..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.8298%" y="677" width="0.1591%" height="15" fill="rgb(213,181,19)" fg:x="23" fg:w="2"/><text x="2.0798%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::delete (1 samples, 0.08%)</title><rect x="2.0684%" y="693" width="0.0796%" height="15" fill="rgb(254,191,54)" fg:x="26" fg:w="1"/><text x="2.3184%" y="703.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="2.1480%" y="693" width="0.0796%" height="15" fill="rgb(241,83,37)" fg:x="27" fg:w="1"/><text x="2.3980%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.1480%" y="677" width="0.0796%" height="15" fill="rgb(233,36,39)" fg:x="27" fg:w="1"/><text x="2.3980%" y="687.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.2275%" y="613" width="0.0796%" height="15" fill="rgb(226,3,54)" fg:x="28" fg:w="1"/><text x="2.4775%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.2275%" y="597" width="0.0796%" height="15" fill="rgb(245,192,40)" fg:x="28" fg:w="1"/><text x="2.4775%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.2275%" y="581" width="0.0796%" height="15" fill="rgb(238,167,29)" fg:x="28" fg:w="1"/><text x="2.4775%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (4 samples, 0.32%)</title><rect x="2.3071%" y="613" width="0.3182%" height="15" fill="rgb(232,182,51)" fg:x="29" fg:w="4"/><text x="2.5571%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="2.3071%" y="597" width="0.3182%" height="15" fill="rgb(231,60,39)" fg:x="29" fg:w="4"/><text x="2.5571%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="2.3071%" y="581" width="0.3182%" height="15" fill="rgb(208,69,12)" fg:x="29" fg:w="4"/><text x="2.5571%" y="591.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="2.3071%" y="565" width="0.3182%" height="15" fill="rgb(235,93,37)" fg:x="29" fg:w="4"/><text x="2.5571%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="2.6253%" y="613" width="0.0796%" height="15" fill="rgb(213,116,39)" fg:x="33" fg:w="1"/><text x="2.8753%" y="623.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (7 samples, 0.56%)</title><rect x="2.2275%" y="645" width="0.5569%" height="15" fill="rgb(222,207,29)" fg:x="28" fg:w="7"/><text x="2.4775%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (7 samples, 0.56%)</title><rect x="2.2275%" y="629" width="0.5569%" height="15" fill="rgb(206,96,30)" fg:x="28" fg:w="7"/><text x="2.4775%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="2.7049%" y="613" width="0.0796%" height="15" fill="rgb(218,138,4)" fg:x="34" fg:w="1"/><text x="2.9549%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.7049%" y="597" width="0.0796%" height="15" fill="rgb(250,191,14)" fg:x="34" fg:w="1"/><text x="2.9549%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.7049%" y="581" width="0.0796%" height="15" fill="rgb(239,60,40)" fg:x="34" fg:w="1"/><text x="2.9549%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.7049%" y="565" width="0.0796%" height="15" fill="rgb(206,27,48)" fg:x="34" fg:w="1"/><text x="2.9549%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.7844%" y="645" width="0.1591%" height="15" fill="rgb(225,35,8)" fg:x="35" fg:w="2"/><text x="3.0344%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.7844%" y="629" width="0.1591%" height="15" fill="rgb(250,213,24)" fg:x="35" fg:w="2"/><text x="3.0344%" y="639.50"></text></g><g><title>&lt;plugins_core::carrying::actions::TakeOutAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.8640%" y="613" width="0.0796%" height="15" fill="rgb(247,123,22)" fg:x="36" fg:w="1"/><text x="3.1140%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.8640%" y="597" width="0.0796%" height="15" fill="rgb(231,138,38)" fg:x="36" fg:w="1"/><text x="3.1140%" y="607.50"></text></g><g><title>&lt;alloc::string::String as kernel::plugins::HasArgumentType&gt;::argument_type (1 samples, 0.08%)</title><rect x="2.9435%" y="597" width="0.0796%" height="15" fill="rgb(231,145,46)" fg:x="37" fg:w="1"/><text x="3.1935%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.0231%" y="597" width="0.0796%" height="15" fill="rgb(251,118,11)" fg:x="38" fg:w="1"/><text x="3.2731%" y="607.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="2.9435%" y="645" width="0.2387%" height="15" fill="rgb(217,147,25)" fg:x="37" fg:w="3"/><text x="3.1935%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="2.9435%" y="629" width="0.2387%" height="15" fill="rgb(247,81,37)" fg:x="37" fg:w="3"/><text x="3.1935%" y="639.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (3 samples, 0.24%)</title><rect x="2.9435%" y="613" width="0.2387%" height="15" fill="rgb(209,12,38)" fg:x="37" fg:w="3"/><text x="3.1935%" y="623.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="3.1026%" y="597" width="0.0796%" height="15" fill="rgb(227,1,9)" fg:x="39" fg:w="1"/><text x="3.3526%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="3.1026%" y="581" width="0.0796%" height="15" fill="rgb(248,47,43)" fg:x="39" fg:w="1"/><text x="3.3526%" y="591.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.1822%" y="645" width="0.0796%" height="15" fill="rgb(221,10,30)" fg:x="40" fg:w="1"/><text x="3.4322%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.1822%" y="629" width="0.0796%" height="15" fill="rgb(210,229,1)" fg:x="40" fg:w="1"/><text x="3.4322%" y="639.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.1822%" y="613" width="0.0796%" height="15" fill="rgb(222,148,37)" fg:x="40" fg:w="1"/><text x="3.4322%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.1822%" y="597" width="0.0796%" height="15" fill="rgb(234,67,33)" fg:x="40" fg:w="1"/><text x="3.4322%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.1822%" y="581" width="0.0796%" height="15" fill="rgb(247,98,35)" fg:x="40" fg:w="1"/><text x="3.4322%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::actions::DeactivateRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.2617%" y="613" width="0.0796%" height="15" fill="rgb(247,138,52)" fg:x="41" fg:w="1"/><text x="3.5117%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.2617%" y="597" width="0.0796%" height="15" fill="rgb(213,79,30)" fg:x="41" fg:w="1"/><text x="3.5117%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.2617%" y="581" width="0.0796%" height="15" fill="rgb(246,177,23)" fg:x="41" fg:w="1"/><text x="3.5117%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.2617%" y="565" width="0.0796%" height="15" fill="rgb(230,62,27)" fg:x="41" fg:w="1"/><text x="3.5117%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.2617%" y="549" width="0.0796%" height="15" fill="rgb(216,154,8)" fg:x="41" fg:w="1"/><text x="3.5117%" y="559.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="3.2617%" y="645" width="0.1591%" height="15" fill="rgb(244,35,45)" fg:x="41" fg:w="2"/><text x="3.5117%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="3.2617%" y="629" width="0.1591%" height="15" fill="rgb(251,115,12)" fg:x="41" fg:w="2"/><text x="3.5117%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.3413%" y="613" width="0.0796%" height="15" fill="rgb(240,54,50)" fg:x="42" fg:w="1"/><text x="3.5913%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.3413%" y="597" width="0.0796%" height="15" fill="rgb(233,84,52)" fg:x="42" fg:w="1"/><text x="3.5913%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.3413%" y="581" width="0.0796%" height="15" fill="rgb(207,117,47)" fg:x="42" fg:w="1"/><text x="3.5913%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="3.4208%" y="613" width="0.0796%" height="15" fill="rgb(249,43,39)" fg:x="43" fg:w="1"/><text x="3.6708%" y="623.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="3.4208%" y="645" width="0.1591%" height="15" fill="rgb(209,38,44)" fg:x="43" fg:w="2"/><text x="3.6708%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="3.4208%" y="629" width="0.1591%" height="15" fill="rgb(236,212,23)" fg:x="43" fg:w="2"/><text x="3.6708%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.5004%" y="613" width="0.0796%" height="15" fill="rgb(242,79,21)" fg:x="44" fg:w="1"/><text x="3.7504%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.5004%" y="597" width="0.0796%" height="15" fill="rgb(211,96,35)" fg:x="44" fg:w="1"/><text x="3.7504%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.5004%" y="581" width="0.0796%" height="15" fill="rgb(253,215,40)" fg:x="44" fg:w="1"/><text x="3.7504%" y="591.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="3.5004%" y="565" width="0.0796%" height="15" fill="rgb(211,81,21)" fg:x="44" fg:w="1"/><text x="3.7504%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (19 samples, 1.51%)</title><rect x="2.2275%" y="661" width="1.5115%" height="15" fill="rgb(208,190,38)" fg:x="28" fg:w="19"/><text x="2.4775%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="3.5800%" y="645" width="0.1591%" height="15" fill="rgb(235,213,38)" fg:x="45" fg:w="2"/><text x="3.8300%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.6595%" y="629" width="0.0796%" height="15" fill="rgb(237,122,38)" fg:x="46" fg:w="1"/><text x="3.9095%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="3.7391%" y="645" width="0.0796%" height="15" fill="rgb(244,218,35)" fg:x="47" fg:w="1"/><text x="3.9891%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="3.7391%" y="629" width="0.0796%" height="15" fill="rgb(240,68,47)" fg:x="47" fg:w="1"/><text x="3.9891%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.7391%" y="613" width="0.0796%" height="15" fill="rgb(210,16,53)" fg:x="47" fg:w="1"/><text x="3.9891%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.7391%" y="597" width="0.0796%" height="15" fill="rgb(235,124,12)" fg:x="47" fg:w="1"/><text x="3.9891%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.7391%" y="581" width="0.0796%" height="15" fill="rgb(224,169,11)" fg:x="47" fg:w="1"/><text x="3.9891%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.7391%" y="565" width="0.0796%" height="15" fill="rgb(250,166,2)" fg:x="47" fg:w="1"/><text x="3.9891%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="3.7391%" y="549" width="0.0796%" height="15" fill="rgb(242,216,29)" fg:x="47" fg:w="1"/><text x="3.9891%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="3.7391%" y="533" width="0.0796%" height="15" fill="rgb(230,116,27)" fg:x="47" fg:w="1"/><text x="3.9891%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="3.7391%" y="517" width="0.0796%" height="15" fill="rgb(228,99,48)" fg:x="47" fg:w="1"/><text x="3.9891%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="3.7391%" y="501" width="0.0796%" height="15" fill="rgb(253,11,6)" fg:x="47" fg:w="1"/><text x="3.9891%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="3.7391%" y="485" width="0.0796%" height="15" fill="rgb(247,143,39)" fg:x="47" fg:w="1"/><text x="3.9891%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="3.7391%" y="469" width="0.0796%" height="15" fill="rgb(236,97,10)" fg:x="47" fg:w="1"/><text x="3.9891%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.7391%" y="453" width="0.0796%" height="15" fill="rgb(233,208,19)" fg:x="47" fg:w="1"/><text x="3.9891%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="3.7391%" y="437" width="0.0796%" height="15" fill="rgb(216,164,2)" fg:x="47" fg:w="1"/><text x="3.9891%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.7391%" y="421" width="0.0796%" height="15" fill="rgb(220,129,5)" fg:x="47" fg:w="1"/><text x="3.9891%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="3.7391%" y="405" width="0.0796%" height="15" fill="rgb(242,17,10)" fg:x="47" fg:w="1"/><text x="3.9891%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="3.7391%" y="389" width="0.0796%" height="15" fill="rgb(242,107,0)" fg:x="47" fg:w="1"/><text x="3.9891%" y="399.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="3.7391%" y="373" width="0.0796%" height="15" fill="rgb(251,28,31)" fg:x="47" fg:w="1"/><text x="3.9891%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.7391%" y="357" width="0.0796%" height="15" fill="rgb(233,223,10)" fg:x="47" fg:w="1"/><text x="3.9891%" y="367.50"></text></g><g><title>anyhow::error::&lt;impl anyhow::Error&gt;::construct (1 samples, 0.08%)</title><rect x="3.8186%" y="645" width="0.0796%" height="15" fill="rgb(215,21,27)" fg:x="48" fg:w="1"/><text x="4.0686%" y="655.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="3.8186%" y="629" width="0.0796%" height="15" fill="rgb(232,23,21)" fg:x="48" fg:w="1"/><text x="4.0686%" y="639.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="3.8186%" y="613" width="0.0796%" height="15" fill="rgb(244,5,23)" fg:x="48" fg:w="1"/><text x="4.0686%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="3.7391%" y="661" width="0.3182%" height="15" fill="rgb(226,81,46)" fg:x="47" fg:w="4"/><text x="3.9891%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="3.8982%" y="645" width="0.1591%" height="15" fill="rgb(247,70,30)" fg:x="49" fg:w="2"/><text x="4.1482%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="3.8982%" y="629" width="0.1591%" height="15" fill="rgb(212,68,19)" fg:x="49" fg:w="2"/><text x="4.1482%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="3.8982%" y="613" width="0.1591%" height="15" fill="rgb(240,187,13)" fg:x="49" fg:w="2"/><text x="4.1482%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="3.8982%" y="597" width="0.1591%" height="15" fill="rgb(223,113,26)" fg:x="49" fg:w="2"/><text x="4.1482%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="3.8982%" y="581" width="0.1591%" height="15" fill="rgb(206,192,2)" fg:x="49" fg:w="2"/><text x="4.1482%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="3.8982%" y="565" width="0.1591%" height="15" fill="rgb(241,108,4)" fg:x="49" fg:w="2"/><text x="4.1482%" y="575.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="3.8982%" y="549" width="0.1591%" height="15" fill="rgb(247,173,49)" fg:x="49" fg:w="2"/><text x="4.1482%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1368%" y="597" width="0.0796%" height="15" fill="rgb(224,114,35)" fg:x="52" fg:w="1"/><text x="4.3868%" y="607.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (3 samples, 0.24%)</title><rect x="4.0573%" y="645" width="0.2387%" height="15" fill="rgb(245,159,27)" fg:x="51" fg:w="3"/><text x="4.3073%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="4.0573%" y="629" width="0.2387%" height="15" fill="rgb(245,172,44)" fg:x="51" fg:w="3"/><text x="4.3073%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="4.1368%" y="613" width="0.1591%" height="15" fill="rgb(236,23,11)" fg:x="52" fg:w="2"/><text x="4.3868%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.2164%" y="597" width="0.0796%" height="15" fill="rgb(205,117,38)" fg:x="53" fg:w="1"/><text x="4.4664%" y="607.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="4.2959%" y="597" width="0.3182%" height="15" fill="rgb(237,72,25)" fg:x="54" fg:w="4"/><text x="4.5459%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="4.2959%" y="581" width="0.3182%" height="15" fill="rgb(244,70,9)" fg:x="54" fg:w="4"/><text x="4.5459%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="4.2959%" y="565" width="0.3182%" height="15" fill="rgb(217,125,39)" fg:x="54" fg:w="4"/><text x="4.5459%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="4.2959%" y="549" width="0.3182%" height="15" fill="rgb(235,36,10)" fg:x="54" fg:w="4"/><text x="4.5459%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="4.2959%" y="533" width="0.3182%" height="15" fill="rgb(251,123,47)" fg:x="54" fg:w="4"/><text x="4.5459%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="4.2959%" y="517" width="0.3182%" height="15" fill="rgb(221,13,13)" fg:x="54" fg:w="4"/><text x="4.5459%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="4.2959%" y="501" width="0.3182%" height="15" fill="rgb(238,131,9)" fg:x="54" fg:w="4"/><text x="4.5459%" y="511.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="4.2959%" y="485" width="0.3182%" height="15" fill="rgb(211,50,8)" fg:x="54" fg:w="4"/><text x="4.5459%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="4.2959%" y="629" width="0.3978%" height="15" fill="rgb(245,182,24)" fg:x="54" fg:w="5"/><text x="4.5459%" y="639.50"></text></g><g><title>glob::fill_todo (5 samples, 0.40%)</title><rect x="4.2959%" y="613" width="0.3978%" height="15" fill="rgb(242,14,37)" fg:x="54" fg:w="5"/><text x="4.5459%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="4.6142%" y="597" width="0.0796%" height="15" fill="rgb(246,228,12)" fg:x="58" fg:w="1"/><text x="4.8642%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="4.6142%" y="581" width="0.0796%" height="15" fill="rgb(213,55,15)" fg:x="58" fg:w="1"/><text x="4.8642%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="4.6142%" y="565" width="0.0796%" height="15" fill="rgb(209,9,3)" fg:x="58" fg:w="1"/><text x="4.8642%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="4.6142%" y="549" width="0.0796%" height="15" fill="rgb(230,59,30)" fg:x="58" fg:w="1"/><text x="4.8642%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="4.6142%" y="533" width="0.0796%" height="15" fill="rgb(209,121,21)" fg:x="58" fg:w="1"/><text x="4.8642%" y="543.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.08%)</title><rect x="4.6142%" y="517" width="0.0796%" height="15" fill="rgb(220,109,13)" fg:x="58" fg:w="1"/><text x="4.8642%" y="527.50"></text></g><g><title>std::io::error::Error::last_os_error (1 samples, 0.08%)</title><rect x="4.6142%" y="501" width="0.0796%" height="15" fill="rgb(232,18,1)" fg:x="58" fg:w="1"/><text x="4.8642%" y="511.50"></text></g><g><title>std::sys::unix::os::errno (1 samples, 0.08%)</title><rect x="4.6142%" y="485" width="0.0796%" height="15" fill="rgb(215,41,42)" fg:x="58" fg:w="1"/><text x="4.8642%" y="495.50"></text></g><g><title>__errno_location (1 samples, 0.08%)</title><rect x="4.6142%" y="469" width="0.0796%" height="15" fill="rgb(224,123,36)" fg:x="58" fg:w="1"/><text x="4.8642%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.6937%" y="597" width="0.0796%" height="15" fill="rgb(240,125,3)" fg:x="59" fg:w="1"/><text x="4.9437%" y="607.50"></text></g><g><title>glob::Pattern::new (2 samples, 0.16%)</title><rect x="4.7733%" y="597" width="0.1591%" height="15" fill="rgb(205,98,50)" fg:x="60" fg:w="2"/><text x="5.0233%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.8528%" y="581" width="0.0796%" height="15" fill="rgb(205,185,37)" fg:x="61" fg:w="1"/><text x="5.1028%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.8528%" y="565" width="0.0796%" height="15" fill="rgb(238,207,15)" fg:x="61" fg:w="1"/><text x="5.1028%" y="575.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (12 samples, 0.95%)</title><rect x="4.0573%" y="661" width="0.9547%" height="15" fill="rgb(213,199,42)" fg:x="51" fg:w="12"/><text x="4.3073%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (9 samples, 0.72%)</title><rect x="4.2959%" y="645" width="0.7160%" height="15" fill="rgb(235,201,11)" fg:x="54" fg:w="9"/><text x="4.5459%" y="655.50"></text></g><g><title>glob::glob (4 samples, 0.32%)</title><rect x="4.6937%" y="629" width="0.3182%" height="15" fill="rgb(207,46,11)" fg:x="59" fg:w="4"/><text x="4.9437%" y="639.50"></text></g><g><title>glob::glob_with (4 samples, 0.32%)</title><rect x="4.6937%" y="613" width="0.3182%" height="15" fill="rgb(241,35,35)" fg:x="59" fg:w="4"/><text x="4.9437%" y="623.50"></text></g><g><title>std::path::is_separator (1 samples, 0.08%)</title><rect x="4.9324%" y="597" width="0.0796%" height="15" fill="rgb(243,32,47)" fg:x="62" fg:w="1"/><text x="5.1824%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.0119%" y="645" width="0.0796%" height="15" fill="rgb(247,202,23)" fg:x="63" fg:w="1"/><text x="5.2619%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (2 samples, 0.16%)</title><rect x="5.0119%" y="661" width="0.1591%" height="15" fill="rgb(219,102,11)" fg:x="63" fg:w="2"/><text x="5.2619%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="5.0915%" y="645" width="0.0796%" height="15" fill="rgb(243,110,44)" fg:x="64" fg:w="1"/><text x="5.3415%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.0915%" y="629" width="0.0796%" height="15" fill="rgb(222,74,54)" fg:x="64" fg:w="1"/><text x="5.3415%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (38 samples, 3.02%)</title><rect x="2.2275%" y="677" width="3.0231%" height="15" fill="rgb(216,99,12)" fg:x="28" fg:w="38"/><text x="2.4775%" y="687.50">ker..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="5.1710%" y="661" width="0.0796%" height="15" fill="rgb(226,22,26)" fg:x="65" fg:w="1"/><text x="5.4210%" y="671.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="5.1710%" y="645" width="0.0796%" height="15" fill="rgb(217,163,10)" fg:x="65" fg:w="1"/><text x="5.4210%" y="655.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.3302%" y="629" width="0.0796%" height="15" fill="rgb(213,25,53)" fg:x="67" fg:w="1"/><text x="5.5802%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="5.3302%" y="645" width="0.1591%" height="15" fill="rgb(252,105,26)" fg:x="67" fg:w="2"/><text x="5.5802%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.4097%" y="629" width="0.0796%" height="15" fill="rgb(220,39,43)" fg:x="68" fg:w="1"/><text x="5.6597%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::middleware (1 samples, 0.08%)</title><rect x="5.4893%" y="645" width="0.0796%" height="15" fill="rgb(229,68,48)" fg:x="69" fg:w="1"/><text x="5.7393%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4893%" y="629" width="0.0796%" height="15" fill="rgb(252,8,32)" fg:x="69" fg:w="1"/><text x="5.7393%" y="639.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::middleware (1 samples, 0.08%)</title><rect x="5.5688%" y="645" width="0.0796%" height="15" fill="rgb(223,20,43)" fg:x="70" fg:w="1"/><text x="5.8188%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5688%" y="629" width="0.0796%" height="15" fill="rgb(229,81,49)" fg:x="70" fg:w="1"/><text x="5.8188%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.6484%" y="645" width="0.0796%" height="15" fill="rgb(236,28,36)" fg:x="71" fg:w="1"/><text x="5.8984%" y="655.50"></text></g><g><title>engine::session::Session::initialize (48 samples, 3.82%)</title><rect x="2.2275%" y="693" width="3.8186%" height="15" fill="rgb(249,185,26)" fg:x="28" fg:w="48"/><text x="2.4775%" y="703.50">engi..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (10 samples, 0.80%)</title><rect x="5.2506%" y="677" width="0.7955%" height="15" fill="rgb(249,174,33)" fg:x="66" fg:w="10"/><text x="5.5006%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.80%)</title><rect x="5.2506%" y="661" width="0.7955%" height="15" fill="rgb(233,201,37)" fg:x="66" fg:w="10"/><text x="5.5006%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="5.7279%" y="645" width="0.3182%" height="15" fill="rgb(221,78,26)" fg:x="72" fg:w="4"/><text x="5.9779%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="5.7279%" y="629" width="0.3182%" height="15" fill="rgb(250,127,30)" fg:x="72" fg:w="4"/><text x="5.9779%" y="639.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="5.7279%" y="613" width="0.3182%" height="15" fill="rgb(230,49,44)" fg:x="72" fg:w="4"/><text x="5.9779%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (52 samples, 4.14%)</title><rect x="1.9889%" y="741" width="4.1368%" height="15" fill="rgb(229,67,23)" fg:x="25" fg:w="52"/><text x="2.2389%" y="751.50">&lt;engi..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (52 samples, 4.14%)</title><rect x="1.9889%" y="725" width="4.1368%" height="15" fill="rgb(249,83,47)" fg:x="25" fg:w="52"/><text x="2.2389%" y="735.50">engin..</text></g><g><title>engine::session::Session::new (52 samples, 4.14%)</title><rect x="1.9889%" y="709" width="4.1368%" height="15" fill="rgb(215,43,3)" fg:x="25" fg:w="52"/><text x="2.2389%" y="719.50">engin..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="6.0461%" y="693" width="0.0796%" height="15" fill="rgb(238,154,13)" fg:x="76" fg:w="1"/><text x="6.2961%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.0461%" y="677" width="0.0796%" height="15" fill="rgb(219,56,2)" fg:x="76" fg:w="1"/><text x="6.2961%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.0461%" y="661" width="0.0796%" height="15" fill="rgb(233,0,4)" fg:x="76" fg:w="1"/><text x="6.2961%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.0461%" y="645" width="0.0796%" height="15" fill="rgb(235,30,7)" fg:x="76" fg:w="1"/><text x="6.2961%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="6.1257%" y="725" width="0.0796%" height="15" fill="rgb(250,79,13)" fg:x="77" fg:w="1"/><text x="6.3757%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="6.1257%" y="709" width="0.0796%" height="15" fill="rgb(211,146,34)" fg:x="77" fg:w="1"/><text x="6.3757%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.1257%" y="693" width="0.0796%" height="15" fill="rgb(228,22,38)" fg:x="77" fg:w="1"/><text x="6.3757%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.1257%" y="677" width="0.0796%" height="15" fill="rgb(235,168,5)" fg:x="77" fg:w="1"/><text x="6.3757%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.1257%" y="661" width="0.0796%" height="15" fill="rgb(221,155,16)" fg:x="77" fg:w="1"/><text x="6.3757%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.2053%" y="677" width="0.0796%" height="15" fill="rgb(215,215,53)" fg:x="78" fg:w="1"/><text x="6.4553%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="6.2053%" y="661" width="0.0796%" height="15" fill="rgb(223,4,10)" fg:x="78" fg:w="1"/><text x="6.4553%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="6.2053%" y="645" width="0.0796%" height="15" fill="rgb(234,103,6)" fg:x="78" fg:w="1"/><text x="6.4553%" y="655.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="6.2053%" y="629" width="0.0796%" height="15" fill="rgb(227,97,0)" fg:x="78" fg:w="1"/><text x="6.4553%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2053%" y="613" width="0.0796%" height="15" fill="rgb(234,150,53)" fg:x="78" fg:w="1"/><text x="6.4553%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.2848%" y="645" width="0.0796%" height="15" fill="rgb(228,201,54)" fg:x="79" fg:w="1"/><text x="6.5348%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.2848%" y="629" width="0.0796%" height="15" fill="rgb(222,22,37)" fg:x="79" fg:w="1"/><text x="6.5348%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.2848%" y="613" width="0.0796%" height="15" fill="rgb(237,53,32)" fg:x="79" fg:w="1"/><text x="6.5348%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="6.4439%" y="629" width="0.0796%" height="15" fill="rgb(233,25,53)" fg:x="81" fg:w="1"/><text x="6.6939%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="6.4439%" y="613" width="0.0796%" height="15" fill="rgb(210,40,34)" fg:x="81" fg:w="1"/><text x="6.6939%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.4439%" y="597" width="0.0796%" height="15" fill="rgb(241,220,44)" fg:x="81" fg:w="1"/><text x="6.6939%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.4439%" y="581" width="0.0796%" height="15" fill="rgb(235,28,35)" fg:x="81" fg:w="1"/><text x="6.6939%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.4439%" y="565" width="0.0796%" height="15" fill="rgb(210,56,17)" fg:x="81" fg:w="1"/><text x="6.6939%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.4439%" y="549" width="0.0796%" height="15" fill="rgb(224,130,29)" fg:x="81" fg:w="1"/><text x="6.6939%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="6.5235%" y="613" width="0.2387%" height="15" fill="rgb(235,212,8)" fg:x="82" fg:w="3"/><text x="6.7735%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.6030%" y="597" width="0.1591%" height="15" fill="rgb(223,33,50)" fg:x="83" fg:w="2"/><text x="6.8530%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.6030%" y="581" width="0.1591%" height="15" fill="rgb(219,149,13)" fg:x="83" fg:w="2"/><text x="6.8530%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.8417%" y="549" width="0.0796%" height="15" fill="rgb(250,156,29)" fg:x="86" fg:w="1"/><text x="7.0917%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.8417%" y="533" width="0.0796%" height="15" fill="rgb(216,193,19)" fg:x="86" fg:w="1"/><text x="7.0917%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.8417%" y="517" width="0.0796%" height="15" fill="rgb(216,135,14)" fg:x="86" fg:w="1"/><text x="7.0917%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.8417%" y="501" width="0.0796%" height="15" fill="rgb(241,47,5)" fg:x="86" fg:w="1"/><text x="7.0917%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.8417%" y="485" width="0.0796%" height="15" fill="rgb(233,42,35)" fg:x="86" fg:w="1"/><text x="7.0917%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.8417%" y="469" width="0.0796%" height="15" fill="rgb(231,13,6)" fg:x="86" fg:w="1"/><text x="7.0917%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.8417%" y="453" width="0.0796%" height="15" fill="rgb(207,181,40)" fg:x="86" fg:w="1"/><text x="7.0917%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="6.8417%" y="581" width="0.1591%" height="15" fill="rgb(254,173,49)" fg:x="86" fg:w="2"/><text x="7.0917%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="6.8417%" y="565" width="0.1591%" height="15" fill="rgb(221,1,38)" fg:x="86" fg:w="2"/><text x="7.0917%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.9212%" y="549" width="0.0796%" height="15" fill="rgb(206,124,46)" fg:x="87" fg:w="1"/><text x="7.1712%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="7.0804%" y="565" width="0.1591%" height="15" fill="rgb(249,21,11)" fg:x="89" fg:w="2"/><text x="7.3304%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.2395%" y="565" width="0.0796%" height="15" fill="rgb(222,201,40)" fg:x="91" fg:w="1"/><text x="7.4895%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.2395%" y="549" width="0.0796%" height="15" fill="rgb(235,61,29)" fg:x="91" fg:w="1"/><text x="7.4895%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.2395%" y="533" width="0.0796%" height="15" fill="rgb(219,207,3)" fg:x="91" fg:w="1"/><text x="7.4895%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.2395%" y="517" width="0.0796%" height="15" fill="rgb(222,56,46)" fg:x="91" fg:w="1"/><text x="7.4895%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="7.2395%" y="501" width="0.0796%" height="15" fill="rgb(239,76,54)" fg:x="91" fg:w="1"/><text x="7.4895%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="6.8417%" y="597" width="0.5569%" height="15" fill="rgb(231,124,27)" fg:x="86" fg:w="7"/><text x="7.0917%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="7.0008%" y="581" width="0.3978%" height="15" fill="rgb(249,195,6)" fg:x="88" fg:w="5"/><text x="7.2508%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.3190%" y="565" width="0.0796%" height="15" fill="rgb(237,174,47)" fg:x="92" fg:w="1"/><text x="7.5690%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.03%)</title><rect x="6.5235%" y="629" width="1.0342%" height="15" fill="rgb(206,201,31)" fg:x="82" fg:w="13"/><text x="6.7735%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="6.7621%" y="613" width="0.7955%" height="15" fill="rgb(231,57,52)" fg:x="85" fg:w="10"/><text x="7.0121%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.3986%" y="597" width="0.1591%" height="15" fill="rgb(248,177,22)" fg:x="93" fg:w="2"/><text x="7.6486%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.4781%" y="581" width="0.0796%" height="15" fill="rgb(215,211,37)" fg:x="94" fg:w="1"/><text x="7.7281%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.4781%" y="565" width="0.0796%" height="15" fill="rgb(241,128,51)" fg:x="94" fg:w="1"/><text x="7.7281%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.4781%" y="549" width="0.0796%" height="15" fill="rgb(227,165,31)" fg:x="94" fg:w="1"/><text x="7.7281%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.4781%" y="533" width="0.0796%" height="15" fill="rgb(228,167,24)" fg:x="94" fg:w="1"/><text x="7.7281%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.4781%" y="517" width="0.0796%" height="15" fill="rgb(228,143,12)" fg:x="94" fg:w="1"/><text x="7.7281%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.6372%" y="581" width="0.0796%" height="15" fill="rgb(249,149,8)" fg:x="96" fg:w="1"/><text x="7.8872%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="7.5577%" y="629" width="0.2387%" height="15" fill="rgb(243,35,44)" fg:x="95" fg:w="3"/><text x="7.8077%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="7.5577%" y="613" width="0.2387%" height="15" fill="rgb(246,89,9)" fg:x="95" fg:w="3"/><text x="7.8077%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="7.5577%" y="597" width="0.2387%" height="15" fill="rgb(233,213,13)" fg:x="95" fg:w="3"/><text x="7.8077%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.7168%" y="581" width="0.0796%" height="15" fill="rgb(233,141,41)" fg:x="97" fg:w="1"/><text x="7.9668%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="7.7963%" y="613" width="0.0796%" height="15" fill="rgb(239,167,4)" fg:x="98" fg:w="1"/><text x="8.0463%" y="623.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="7.7963%" y="597" width="0.0796%" height="15" fill="rgb(209,217,16)" fg:x="98" fg:w="1"/><text x="8.0463%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.7963%" y="581" width="0.0796%" height="15" fill="rgb(219,88,35)" fg:x="98" fg:w="1"/><text x="8.0463%" y="591.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.7963%" y="565" width="0.0796%" height="15" fill="rgb(220,193,23)" fg:x="98" fg:w="1"/><text x="8.0463%" y="575.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="7.7963%" y="549" width="0.0796%" height="15" fill="rgb(230,90,52)" fg:x="98" fg:w="1"/><text x="8.0463%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.8759%" y="581" width="0.1591%" height="15" fill="rgb(252,106,19)" fg:x="99" fg:w="2"/><text x="8.1259%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="8.0350%" y="533" width="0.2387%" height="15" fill="rgb(206,74,20)" fg:x="101" fg:w="3"/><text x="8.2850%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="8.0350%" y="517" width="0.2387%" height="15" fill="rgb(230,138,44)" fg:x="101" fg:w="3"/><text x="8.2850%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="8.1146%" y="501" width="0.1591%" height="15" fill="rgb(235,182,43)" fg:x="102" fg:w="2"/><text x="8.3646%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1941%" y="485" width="0.0796%" height="15" fill="rgb(242,16,51)" fg:x="103" fg:w="1"/><text x="8.4441%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1941%" y="469" width="0.0796%" height="15" fill="rgb(248,9,4)" fg:x="103" fg:w="1"/><text x="8.4441%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.2737%" y="517" width="0.0796%" height="15" fill="rgb(210,31,22)" fg:x="104" fg:w="1"/><text x="8.5237%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.3532%" y="517" width="0.0796%" height="15" fill="rgb(239,54,39)" fg:x="105" fg:w="1"/><text x="8.6032%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3532%" y="501" width="0.0796%" height="15" fill="rgb(230,99,41)" fg:x="105" fg:w="1"/><text x="8.6032%" y="511.50"></text></g><g><title>engine::session::Session::flush (29 samples, 2.31%)</title><rect x="6.2053%" y="725" width="2.3071%" height="15" fill="rgb(253,106,12)" fg:x="78" fg:w="29"/><text x="6.4553%" y="735.50">e..</text></g><g><title>engine::session::state::State::close (29 samples, 2.31%)</title><rect x="6.2053%" y="709" width="2.3071%" height="15" fill="rgb(213,46,41)" fg:x="78" fg:w="29"/><text x="6.4553%" y="719.50">e..</text></g><g><title>engine::session::state::State::flush_entities (29 samples, 2.31%)</title><rect x="6.2053%" y="693" width="2.3071%" height="15" fill="rgb(215,133,35)" fg:x="78" fg:w="29"/><text x="6.4553%" y="703.50">e..</text></g><g><title>core::iter::adapters::try_process (28 samples, 2.23%)</title><rect x="6.2848%" y="677" width="2.2275%" height="15" fill="rgb(213,28,5)" fg:x="79" fg:w="28"/><text x="6.5348%" y="687.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 2.23%)</title><rect x="6.2848%" y="661" width="2.2275%" height="15" fill="rgb(215,77,49)" fg:x="79" fg:w="28"/><text x="6.5348%" y="671.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (27 samples, 2.15%)</title><rect x="6.3644%" y="645" width="2.1480%" height="15" fill="rgb(248,100,22)" fg:x="80" fg:w="27"/><text x="6.6144%" y="655.50">e..</text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="7.7963%" y="629" width="0.7160%" height="15" fill="rgb(208,67,9)" fg:x="98" fg:w="9"/><text x="8.0463%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="7.8759%" y="613" width="0.6364%" height="15" fill="rgb(219,133,21)" fg:x="99" fg:w="8"/><text x="8.1259%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="7.8759%" y="597" width="0.6364%" height="15" fill="rgb(246,46,29)" fg:x="99" fg:w="8"/><text x="8.1259%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="8.0350%" y="581" width="0.4773%" height="15" fill="rgb(246,185,52)" fg:x="101" fg:w="6"/><text x="8.2850%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="8.0350%" y="565" width="0.4773%" height="15" fill="rgb(252,136,11)" fg:x="101" fg:w="6"/><text x="8.2850%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="8.0350%" y="549" width="0.4773%" height="15" fill="rgb(219,138,53)" fg:x="101" fg:w="6"/><text x="8.2850%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="8.2737%" y="533" width="0.2387%" height="15" fill="rgb(211,51,23)" fg:x="104" fg:w="3"/><text x="8.5237%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.4328%" y="517" width="0.0796%" height="15" fill="rgb(247,221,28)" fg:x="106" fg:w="1"/><text x="8.6828%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.5123%" y="645" width="0.0796%" height="15" fill="rgb(251,222,45)" fg:x="107" fg:w="1"/><text x="8.7623%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5123%" y="629" width="0.0796%" height="15" fill="rgb(217,162,53)" fg:x="107" fg:w="1"/><text x="8.7623%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="8.5123%" y="709" width="0.1591%" height="15" fill="rgb(229,93,14)" fg:x="107" fg:w="2"/><text x="8.7623%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="8.5123%" y="693" width="0.1591%" height="15" fill="rgb(209,67,49)" fg:x="107" fg:w="2"/><text x="8.7623%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="8.5123%" y="677" width="0.1591%" height="15" fill="rgb(213,87,29)" fg:x="107" fg:w="2"/><text x="8.7623%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.5123%" y="661" width="0.1591%" height="15" fill="rgb(205,151,52)" fg:x="107" fg:w="2"/><text x="8.7623%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.5919%" y="645" width="0.0796%" height="15" fill="rgb(253,215,39)" fg:x="108" fg:w="1"/><text x="8.8419%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.5919%" y="629" width="0.0796%" height="15" fill="rgb(221,220,41)" fg:x="108" fg:w="1"/><text x="8.8419%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5919%" y="613" width="0.0796%" height="15" fill="rgb(218,133,21)" fg:x="108" fg:w="1"/><text x="8.8419%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="8.6714%" y="693" width="0.0796%" height="15" fill="rgb(221,193,43)" fg:x="109" fg:w="1"/><text x="8.9214%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.6714%" y="677" width="0.0796%" height="15" fill="rgb(240,128,52)" fg:x="109" fg:w="1"/><text x="8.9214%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.6714%" y="661" width="0.0796%" height="15" fill="rgb(253,114,12)" fg:x="109" fg:w="1"/><text x="8.9214%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.6714%" y="645" width="0.0796%" height="15" fill="rgb(215,223,47)" fg:x="109" fg:w="1"/><text x="8.9214%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.6714%" y="629" width="0.0796%" height="15" fill="rgb(248,225,23)" fg:x="109" fg:w="1"/><text x="8.9214%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.6714%" y="613" width="0.0796%" height="15" fill="rgb(250,108,0)" fg:x="109" fg:w="1"/><text x="8.9214%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.6714%" y="597" width="0.0796%" height="15" fill="rgb(228,208,7)" fg:x="109" fg:w="1"/><text x="8.9214%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.6714%" y="581" width="0.0796%" height="15" fill="rgb(244,45,10)" fg:x="109" fg:w="1"/><text x="8.9214%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.6714%" y="565" width="0.0796%" height="15" fill="rgb(207,125,25)" fg:x="109" fg:w="1"/><text x="8.9214%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.6714%" y="549" width="0.0796%" height="15" fill="rgb(210,195,18)" fg:x="109" fg:w="1"/><text x="8.9214%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.6714%" y="533" width="0.0796%" height="15" fill="rgb(249,80,12)" fg:x="109" fg:w="1"/><text x="8.9214%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.6714%" y="517" width="0.0796%" height="15" fill="rgb(221,65,9)" fg:x="109" fg:w="1"/><text x="8.9214%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.6714%" y="501" width="0.0796%" height="15" fill="rgb(235,49,36)" fg:x="109" fg:w="1"/><text x="8.9214%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.6714%" y="485" width="0.0796%" height="15" fill="rgb(225,32,20)" fg:x="109" fg:w="1"/><text x="8.9214%" y="495.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="8.7510%" y="693" width="0.0796%" height="15" fill="rgb(215,141,46)" fg:x="110" fg:w="1"/><text x="9.0010%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.7510%" y="677" width="0.0796%" height="15" fill="rgb(250,160,47)" fg:x="110" fg:w="1"/><text x="9.0010%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="8.7510%" y="661" width="0.0796%" height="15" fill="rgb(216,222,40)" fg:x="110" fg:w="1"/><text x="9.0010%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.7510%" y="645" width="0.0796%" height="15" fill="rgb(234,217,39)" fg:x="110" fg:w="1"/><text x="9.0010%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.7510%" y="629" width="0.0796%" height="15" fill="rgb(207,178,40)" fg:x="110" fg:w="1"/><text x="9.0010%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.7510%" y="613" width="0.0796%" height="15" fill="rgb(221,136,13)" fg:x="110" fg:w="1"/><text x="9.0010%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="8.8305%" y="645" width="0.0796%" height="15" fill="rgb(249,199,10)" fg:x="111" fg:w="1"/><text x="9.0805%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8305%" y="629" width="0.0796%" height="15" fill="rgb(249,222,13)" fg:x="111" fg:w="1"/><text x="9.0805%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8305%" y="613" width="0.0796%" height="15" fill="rgb(244,185,38)" fg:x="111" fg:w="1"/><text x="9.0805%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8305%" y="597" width="0.0796%" height="15" fill="rgb(236,202,9)" fg:x="111" fg:w="1"/><text x="9.0805%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.8305%" y="581" width="0.0796%" height="15" fill="rgb(250,229,37)" fg:x="111" fg:w="1"/><text x="9.0805%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.8305%" y="565" width="0.0796%" height="15" fill="rgb(206,174,23)" fg:x="111" fg:w="1"/><text x="9.0805%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.8305%" y="549" width="0.0796%" height="15" fill="rgb(211,33,43)" fg:x="111" fg:w="1"/><text x="9.0805%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.8305%" y="533" width="0.0796%" height="15" fill="rgb(245,58,50)" fg:x="111" fg:w="1"/><text x="9.0805%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.8305%" y="517" width="0.0796%" height="15" fill="rgb(244,68,36)" fg:x="111" fg:w="1"/><text x="9.0805%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.8305%" y="501" width="0.0796%" height="15" fill="rgb(232,229,15)" fg:x="111" fg:w="1"/><text x="9.0805%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.8305%" y="485" width="0.0796%" height="15" fill="rgb(254,30,23)" fg:x="111" fg:w="1"/><text x="9.0805%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.8305%" y="469" width="0.0796%" height="15" fill="rgb(235,160,14)" fg:x="111" fg:w="1"/><text x="9.0805%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.8305%" y="453" width="0.0796%" height="15" fill="rgb(212,155,44)" fg:x="111" fg:w="1"/><text x="9.0805%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.8305%" y="437" width="0.0796%" height="15" fill="rgb(226,2,50)" fg:x="111" fg:w="1"/><text x="9.0805%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.8305%" y="421" width="0.0796%" height="15" fill="rgb(234,177,6)" fg:x="111" fg:w="1"/><text x="9.0805%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8305%" y="405" width="0.0796%" height="15" fill="rgb(217,24,9)" fg:x="111" fg:w="1"/><text x="9.0805%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.9101%" y="629" width="0.0796%" height="15" fill="rgb(220,13,46)" fg:x="112" fg:w="1"/><text x="9.1601%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="8.8305%" y="677" width="0.2387%" height="15" fill="rgb(239,221,27)" fg:x="111" fg:w="3"/><text x="9.0805%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="8.8305%" y="661" width="0.2387%" height="15" fill="rgb(222,198,25)" fg:x="111" fg:w="3"/><text x="9.0805%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="8.9101%" y="645" width="0.1591%" height="15" fill="rgb(211,99,13)" fg:x="112" fg:w="2"/><text x="9.1601%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="8.9897%" y="629" width="0.0796%" height="15" fill="rgb(232,111,31)" fg:x="113" fg:w="1"/><text x="9.2397%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.9897%" y="613" width="0.0796%" height="15" fill="rgb(245,82,37)" fg:x="113" fg:w="1"/><text x="9.2397%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.64%)</title><rect x="8.5123%" y="725" width="0.6364%" height="15" fill="rgb(227,149,46)" fg:x="107" fg:w="8"/><text x="8.7623%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="8.6714%" y="709" width="0.4773%" height="15" fill="rgb(218,36,50)" fg:x="109" fg:w="6"/><text x="8.9214%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="8.8305%" y="693" width="0.3182%" height="15" fill="rgb(226,80,48)" fg:x="111" fg:w="4"/><text x="9.0805%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="9.0692%" y="677" width="0.0796%" height="15" fill="rgb(238,224,15)" fg:x="114" fg:w="1"/><text x="9.3192%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.0692%" y="661" width="0.0796%" height="15" fill="rgb(241,136,10)" fg:x="114" fg:w="1"/><text x="9.3192%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.0692%" y="645" width="0.0796%" height="15" fill="rgb(208,32,45)" fg:x="114" fg:w="1"/><text x="9.3192%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="9.1488%" y="693" width="0.0796%" height="15" fill="rgb(207,135,9)" fg:x="115" fg:w="1"/><text x="9.3988%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="9.1488%" y="677" width="0.0796%" height="15" fill="rgb(206,86,44)" fg:x="115" fg:w="1"/><text x="9.3988%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.2283%" y="661" width="0.0796%" height="15" fill="rgb(245,177,15)" fg:x="116" fg:w="1"/><text x="9.4783%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="9.2283%" y="677" width="0.1591%" height="15" fill="rgb(206,64,50)" fg:x="116" fg:w="2"/><text x="9.4783%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.3079%" y="661" width="0.0796%" height="15" fill="rgb(234,36,40)" fg:x="117" fg:w="1"/><text x="9.5579%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.3079%" y="645" width="0.0796%" height="15" fill="rgb(213,64,8)" fg:x="117" fg:w="1"/><text x="9.5579%" y="655.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (4 samples, 0.32%)</title><rect x="9.1488%" y="725" width="0.3182%" height="15" fill="rgb(210,75,36)" fg:x="115" fg:w="4"/><text x="9.3988%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (4 samples, 0.32%)</title><rect x="9.1488%" y="709" width="0.3182%" height="15" fill="rgb(229,88,21)" fg:x="115" fg:w="4"/><text x="9.3988%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="9.2283%" y="693" width="0.2387%" height="15" fill="rgb(252,204,47)" fg:x="116" fg:w="3"/><text x="9.4783%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="9.3874%" y="677" width="0.0796%" height="15" fill="rgb(208,77,27)" fg:x="118" fg:w="1"/><text x="9.6374%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.3874%" y="661" width="0.0796%" height="15" fill="rgb(221,76,26)" fg:x="118" fg:w="1"/><text x="9.6374%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScopeRefMut&lt;plugins_core::carrying::model::Containing,kernel::model::entity::Entity&gt;&gt; (1 samples, 0.08%)</title><rect x="9.4670%" y="693" width="0.0796%" height="15" fill="rgb(225,139,18)" fg:x="119" fg:w="1"/><text x="9.7170%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="9.5465%" y="693" width="0.1591%" height="15" fill="rgb(230,137,11)" fg:x="120" fg:w="2"/><text x="9.7965%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="9.5465%" y="677" width="0.1591%" height="15" fill="rgb(212,28,1)" fg:x="120" fg:w="2"/><text x="9.7965%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="9.5465%" y="661" width="0.1591%" height="15" fill="rgb(248,164,17)" fg:x="120" fg:w="2"/><text x="9.7965%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="9.6261%" y="645" width="0.0796%" height="15" fill="rgb(222,171,42)" fg:x="121" fg:w="1"/><text x="9.8761%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="9.6261%" y="629" width="0.0796%" height="15" fill="rgb(243,84,45)" fg:x="121" fg:w="1"/><text x="9.8761%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.6261%" y="613" width="0.0796%" height="15" fill="rgb(252,49,23)" fg:x="121" fg:w="1"/><text x="9.8761%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="9.7056%" y="677" width="0.0796%" height="15" fill="rgb(215,19,7)" fg:x="122" fg:w="1"/><text x="9.9556%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.7056%" y="661" width="0.0796%" height="15" fill="rgb(238,81,41)" fg:x="122" fg:w="1"/><text x="9.9556%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.7056%" y="645" width="0.0796%" height="15" fill="rgb(210,199,37)" fg:x="122" fg:w="1"/><text x="9.9556%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.7056%" y="629" width="0.0796%" height="15" fill="rgb(244,192,49)" fg:x="122" fg:w="1"/><text x="9.9556%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.7056%" y="613" width="0.0796%" height="15" fill="rgb(226,211,11)" fg:x="122" fg:w="1"/><text x="9.9556%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.7056%" y="597" width="0.0796%" height="15" fill="rgb(236,162,54)" fg:x="122" fg:w="1"/><text x="9.9556%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.7056%" y="581" width="0.0796%" height="15" fill="rgb(220,229,9)" fg:x="122" fg:w="1"/><text x="9.9556%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.7852%" y="613" width="0.0796%" height="15" fill="rgb(250,87,22)" fg:x="123" fg:w="1"/><text x="10.0352%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.7852%" y="597" width="0.0796%" height="15" fill="rgb(239,43,17)" fg:x="123" fg:w="1"/><text x="10.0352%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.7852%" y="581" width="0.0796%" height="15" fill="rgb(231,177,25)" fg:x="123" fg:w="1"/><text x="10.0352%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="9.7852%" y="645" width="0.1591%" height="15" fill="rgb(219,179,1)" fg:x="123" fg:w="2"/><text x="10.0352%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="9.7852%" y="629" width="0.1591%" height="15" fill="rgb(238,219,53)" fg:x="123" fg:w="2"/><text x="10.0352%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.8648%" y="613" width="0.0796%" height="15" fill="rgb(232,167,36)" fg:x="124" fg:w="1"/><text x="10.1148%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.8648%" y="597" width="0.0796%" height="15" fill="rgb(244,19,51)" fg:x="124" fg:w="1"/><text x="10.1148%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8648%" y="581" width="0.0796%" height="15" fill="rgb(224,6,22)" fg:x="124" fg:w="1"/><text x="10.1148%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.9443%" y="629" width="0.0796%" height="15" fill="rgb(224,145,5)" fg:x="125" fg:w="1"/><text x="10.1943%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.9443%" y="613" width="0.0796%" height="15" fill="rgb(234,130,49)" fg:x="125" fg:w="1"/><text x="10.1943%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.9443%" y="597" width="0.0796%" height="15" fill="rgb(254,6,2)" fg:x="125" fg:w="1"/><text x="10.1943%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.9443%" y="581" width="0.0796%" height="15" fill="rgb(208,96,46)" fg:x="125" fg:w="1"/><text x="10.1943%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.9443%" y="565" width="0.0796%" height="15" fill="rgb(239,3,39)" fg:x="125" fg:w="1"/><text x="10.1943%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.9443%" y="549" width="0.0796%" height="15" fill="rgb(233,210,1)" fg:x="125" fg:w="1"/><text x="10.1943%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.9443%" y="533" width="0.0796%" height="15" fill="rgb(244,137,37)" fg:x="125" fg:w="1"/><text x="10.1943%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.9443%" y="517" width="0.0796%" height="15" fill="rgb(240,136,2)" fg:x="125" fg:w="1"/><text x="10.1943%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.9443%" y="501" width="0.0796%" height="15" fill="rgb(239,18,37)" fg:x="125" fg:w="1"/><text x="10.1943%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.9443%" y="485" width="0.0796%" height="15" fill="rgb(218,185,22)" fg:x="125" fg:w="1"/><text x="10.1943%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.9443%" y="469" width="0.0796%" height="15" fill="rgb(225,218,4)" fg:x="125" fg:w="1"/><text x="10.1943%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.9443%" y="453" width="0.0796%" height="15" fill="rgb(230,182,32)" fg:x="125" fg:w="1"/><text x="10.1943%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.9443%" y="437" width="0.0796%" height="15" fill="rgb(242,56,43)" fg:x="125" fg:w="1"/><text x="10.1943%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.9443%" y="421" width="0.0796%" height="15" fill="rgb(233,99,24)" fg:x="125" fg:w="1"/><text x="10.1943%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.9443%" y="405" width="0.0796%" height="15" fill="rgb(234,209,42)" fg:x="125" fg:w="1"/><text x="10.1943%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.9443%" y="389" width="0.0796%" height="15" fill="rgb(227,7,12)" fg:x="125" fg:w="1"/><text x="10.1943%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="9.9443%" y="645" width="0.1591%" height="15" fill="rgb(245,203,43)" fg:x="125" fg:w="2"/><text x="10.1943%" y="655.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="10.0239%" y="629" width="0.0796%" height="15" fill="rgb(238,205,33)" fg:x="126" fg:w="1"/><text x="10.2739%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.0239%" y="613" width="0.0796%" height="15" fill="rgb(231,56,7)" fg:x="126" fg:w="1"/><text x="10.2739%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.0239%" y="597" width="0.0796%" height="15" fill="rgb(244,186,29)" fg:x="126" fg:w="1"/><text x="10.2739%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.0239%" y="581" width="0.0796%" height="15" fill="rgb(234,111,31)" fg:x="126" fg:w="1"/><text x="10.2739%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.0239%" y="565" width="0.0796%" height="15" fill="rgb(241,149,10)" fg:x="126" fg:w="1"/><text x="10.2739%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.0239%" y="549" width="0.0796%" height="15" fill="rgb(249,206,44)" fg:x="126" fg:w="1"/><text x="10.2739%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.0239%" y="533" width="0.0796%" height="15" fill="rgb(251,153,30)" fg:x="126" fg:w="1"/><text x="10.2739%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.0239%" y="517" width="0.0796%" height="15" fill="rgb(239,152,38)" fg:x="126" fg:w="1"/><text x="10.2739%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.0239%" y="501" width="0.0796%" height="15" fill="rgb(249,139,47)" fg:x="126" fg:w="1"/><text x="10.2739%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.0239%" y="485" width="0.0796%" height="15" fill="rgb(244,64,35)" fg:x="126" fg:w="1"/><text x="10.2739%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.0239%" y="469" width="0.0796%" height="15" fill="rgb(216,46,15)" fg:x="126" fg:w="1"/><text x="10.2739%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.0239%" y="453" width="0.0796%" height="15" fill="rgb(250,74,19)" fg:x="126" fg:w="1"/><text x="10.2739%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0239%" y="437" width="0.0796%" height="15" fill="rgb(249,42,33)" fg:x="126" fg:w="1"/><text x="10.2739%" y="447.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (6 samples, 0.48%)</title><rect x="9.7056%" y="693" width="0.4773%" height="15" fill="rgb(242,149,17)" fg:x="122" fg:w="6"/><text x="9.9556%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.40%)</title><rect x="9.7852%" y="677" width="0.3978%" height="15" fill="rgb(244,29,21)" fg:x="123" fg:w="5"/><text x="10.0352%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.40%)</title><rect x="9.7852%" y="661" width="0.3978%" height="15" fill="rgb(220,130,37)" fg:x="123" fg:w="5"/><text x="10.0352%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1034%" y="645" width="0.0796%" height="15" fill="rgb(211,67,2)" fg:x="127" fg:w="1"/><text x="10.3534%" y="655.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (10 samples, 0.80%)</title><rect x="9.4670%" y="725" width="0.7955%" height="15" fill="rgb(235,68,52)" fg:x="119" fg:w="10"/><text x="9.7170%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (10 samples, 0.80%)</title><rect x="9.4670%" y="709" width="0.7955%" height="15" fill="rgb(246,142,3)" fg:x="119" fg:w="10"/><text x="9.7170%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="10.1830%" y="693" width="0.0796%" height="15" fill="rgb(241,25,7)" fg:x="128" fg:w="1"/><text x="10.4330%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="10.1830%" y="677" width="0.0796%" height="15" fill="rgb(242,119,39)" fg:x="128" fg:w="1"/><text x="10.4330%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1830%" y="661" width="0.0796%" height="15" fill="rgb(241,98,45)" fg:x="128" fg:w="1"/><text x="10.4330%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.1830%" y="645" width="0.0796%" height="15" fill="rgb(254,28,30)" fg:x="128" fg:w="1"/><text x="10.4330%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="10.2625%" y="709" width="0.0796%" height="15" fill="rgb(241,142,54)" fg:x="129" fg:w="1"/><text x="10.5125%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="10.2625%" y="693" width="0.0796%" height="15" fill="rgb(222,85,15)" fg:x="129" fg:w="1"/><text x="10.5125%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.2625%" y="677" width="0.0796%" height="15" fill="rgb(210,85,47)" fg:x="129" fg:w="1"/><text x="10.5125%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2625%" y="661" width="0.0796%" height="15" fill="rgb(224,206,25)" fg:x="129" fg:w="1"/><text x="10.5125%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.2625%" y="645" width="0.0796%" height="15" fill="rgb(243,201,19)" fg:x="129" fg:w="1"/><text x="10.5125%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2625%" y="629" width="0.0796%" height="15" fill="rgb(236,59,4)" fg:x="129" fg:w="1"/><text x="10.5125%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.2625%" y="613" width="0.0796%" height="15" fill="rgb(254,179,45)" fg:x="129" fg:w="1"/><text x="10.5125%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="10.3421%" y="709" width="0.0796%" height="15" fill="rgb(226,14,10)" fg:x="130" fg:w="1"/><text x="10.5921%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::model::EntityPtr&gt;&gt; (1 samples, 0.08%)</title><rect x="10.4216%" y="709" width="0.0796%" height="15" fill="rgb(244,27,41)" fg:x="131" fg:w="1"/><text x="10.6716%" y="719.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.4216%" y="693" width="0.0796%" height="15" fill="rgb(235,35,32)" fg:x="131" fg:w="1"/><text x="10.6716%" y="703.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.5012%" y="581" width="0.0796%" height="15" fill="rgb(218,68,31)" fg:x="132" fg:w="1"/><text x="10.7512%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.5012%" y="565" width="0.0796%" height="15" fill="rgb(207,120,37)" fg:x="132" fg:w="1"/><text x="10.7512%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.5012%" y="549" width="0.0796%" height="15" fill="rgb(227,98,0)" fg:x="132" fg:w="1"/><text x="10.7512%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.5012%" y="533" width="0.0796%" height="15" fill="rgb(207,7,3)" fg:x="132" fg:w="1"/><text x="10.7512%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.5807%" y="565" width="0.0796%" height="15" fill="rgb(206,98,19)" fg:x="133" fg:w="1"/><text x="10.8307%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="10.6603%" y="565" width="0.2387%" height="15" fill="rgb(217,5,26)" fg:x="134" fg:w="3"/><text x="10.9103%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="10.6603%" y="549" width="0.2387%" height="15" fill="rgb(235,190,38)" fg:x="134" fg:w="3"/><text x="10.9103%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="10.6603%" y="533" width="0.2387%" height="15" fill="rgb(247,86,24)" fg:x="134" fg:w="3"/><text x="10.9103%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.7399%" y="517" width="0.1591%" height="15" fill="rgb(205,101,16)" fg:x="135" fg:w="2"/><text x="10.9899%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="10.7399%" y="501" width="0.1591%" height="15" fill="rgb(246,168,33)" fg:x="135" fg:w="2"/><text x="10.9899%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="10.7399%" y="485" width="0.1591%" height="15" fill="rgb(231,114,1)" fg:x="135" fg:w="2"/><text x="10.9899%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="10.7399%" y="469" width="0.1591%" height="15" fill="rgb(207,184,53)" fg:x="135" fg:w="2"/><text x="10.9899%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.8990%" y="549" width="0.0796%" height="15" fill="rgb(224,95,51)" fg:x="137" fg:w="1"/><text x="11.1490%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.8990%" y="533" width="0.0796%" height="15" fill="rgb(212,188,45)" fg:x="137" fg:w="1"/><text x="11.1490%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.8990%" y="517" width="0.0796%" height="15" fill="rgb(223,154,38)" fg:x="137" fg:w="1"/><text x="11.1490%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.8990%" y="501" width="0.0796%" height="15" fill="rgb(251,22,52)" fg:x="137" fg:w="1"/><text x="11.1490%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.8990%" y="485" width="0.0796%" height="15" fill="rgb(229,209,22)" fg:x="137" fg:w="1"/><text x="11.1490%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.8990%" y="469" width="0.0796%" height="15" fill="rgb(234,138,34)" fg:x="137" fg:w="1"/><text x="11.1490%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.9785%" y="549" width="0.0796%" height="15" fill="rgb(212,95,11)" fg:x="138" fg:w="1"/><text x="11.2285%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.9785%" y="533" width="0.0796%" height="15" fill="rgb(240,179,47)" fg:x="138" fg:w="1"/><text x="11.2285%" y="543.50"></text></g><g><title>ryu::pretty::mantissa::write_mantissa_long (1 samples, 0.08%)</title><rect x="11.1376%" y="533" width="0.0796%" height="15" fill="rgb(240,163,11)" fg:x="140" fg:w="1"/><text x="11.3876%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="11.2172%" y="533" width="0.2387%" height="15" fill="rgb(236,37,12)" fg:x="141" fg:w="3"/><text x="11.4672%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="11.2172%" y="517" width="0.2387%" height="15" fill="rgb(232,164,16)" fg:x="141" fg:w="3"/><text x="11.4672%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="11.2172%" y="501" width="0.2387%" height="15" fill="rgb(244,205,15)" fg:x="141" fg:w="3"/><text x="11.4672%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="11.2967%" y="485" width="0.1591%" height="15" fill="rgb(223,117,47)" fg:x="142" fg:w="2"/><text x="11.5467%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="11.2967%" y="469" width="0.1591%" height="15" fill="rgb(244,107,35)" fg:x="142" fg:w="2"/><text x="11.5467%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="11.2967%" y="453" width="0.1591%" height="15" fill="rgb(205,140,8)" fg:x="142" fg:w="2"/><text x="11.5467%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="11.2967%" y="437" width="0.1591%" height="15" fill="rgb(228,84,46)" fg:x="142" fg:w="2"/><text x="11.5467%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="11.4558%" y="533" width="0.4773%" height="15" fill="rgb(254,188,9)" fg:x="144" fg:w="6"/><text x="11.7058%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="11.5354%" y="517" width="0.3978%" height="15" fill="rgb(206,112,54)" fg:x="145" fg:w="5"/><text x="11.7854%" y="527.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="11.6150%" y="501" width="0.3182%" height="15" fill="rgb(216,84,49)" fg:x="146" fg:w="4"/><text x="11.8650%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="11.6150%" y="485" width="0.3182%" height="15" fill="rgb(214,194,35)" fg:x="146" fg:w="4"/><text x="11.8650%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="11.6945%" y="469" width="0.2387%" height="15" fill="rgb(249,28,3)" fg:x="147" fg:w="3"/><text x="11.9445%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="11.7741%" y="453" width="0.1591%" height="15" fill="rgb(222,56,52)" fg:x="148" fg:w="2"/><text x="12.0241%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="11.7741%" y="437" width="0.1591%" height="15" fill="rgb(245,217,50)" fg:x="148" fg:w="2"/><text x="12.0241%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="11.7741%" y="421" width="0.1591%" height="15" fill="rgb(213,201,24)" fg:x="148" fg:w="2"/><text x="12.0241%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.11%)</title><rect x="10.8990%" y="565" width="1.1138%" height="15" fill="rgb(248,116,28)" fg:x="137" fg:w="14"/><text x="11.1490%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.95%)</title><rect x="11.0581%" y="549" width="0.9547%" height="15" fill="rgb(219,72,43)" fg:x="139" fg:w="12"/><text x="11.3081%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.9332%" y="533" width="0.0796%" height="15" fill="rgb(209,138,14)" fg:x="150" fg:w="1"/><text x="12.1832%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.9332%" y="517" width="0.0796%" height="15" fill="rgb(222,18,33)" fg:x="150" fg:w="1"/><text x="12.1832%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.9332%" y="501" width="0.0796%" height="15" fill="rgb(213,199,7)" fg:x="150" fg:w="1"/><text x="12.1832%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (21 samples, 1.67%)</title><rect x="10.5012%" y="597" width="1.6706%" height="15" fill="rgb(250,110,10)" fg:x="132" fg:w="21"/><text x="10.7512%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 1.59%)</title><rect x="10.5807%" y="581" width="1.5911%" height="15" fill="rgb(248,123,6)" fg:x="133" fg:w="20"/><text x="10.8307%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.0127%" y="565" width="0.1591%" height="15" fill="rgb(206,91,31)" fg:x="151" fg:w="2"/><text x="12.2627%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.0923%" y="549" width="0.0796%" height="15" fill="rgb(211,154,13)" fg:x="152" fg:w="1"/><text x="12.3423%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.0923%" y="533" width="0.0796%" height="15" fill="rgb(225,148,7)" fg:x="152" fg:w="1"/><text x="12.3423%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.0923%" y="517" width="0.0796%" height="15" fill="rgb(220,160,43)" fg:x="152" fg:w="1"/><text x="12.3423%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.0923%" y="501" width="0.0796%" height="15" fill="rgb(213,52,39)" fg:x="152" fg:w="1"/><text x="12.3423%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.0923%" y="485" width="0.0796%" height="15" fill="rgb(243,137,7)" fg:x="152" fg:w="1"/><text x="12.3423%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.1718%" y="565" width="0.0796%" height="15" fill="rgb(230,79,13)" fg:x="153" fg:w="1"/><text x="12.4218%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.2514%" y="565" width="0.0796%" height="15" fill="rgb(247,105,23)" fg:x="154" fg:w="1"/><text x="12.5014%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.4105%" y="549" width="0.0796%" height="15" fill="rgb(223,179,41)" fg:x="156" fg:w="1"/><text x="12.6605%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="12.1718%" y="597" width="0.5569%" height="15" fill="rgb(218,9,34)" fg:x="153" fg:w="7"/><text x="12.4218%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="12.1718%" y="581" width="0.5569%" height="15" fill="rgb(222,106,8)" fg:x="153" fg:w="7"/><text x="12.4218%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="12.3309%" y="565" width="0.3978%" height="15" fill="rgb(211,220,0)" fg:x="155" fg:w="5"/><text x="12.5809%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="12.4901%" y="549" width="0.2387%" height="15" fill="rgb(229,52,16)" fg:x="157" fg:w="3"/><text x="12.7401%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="12.5696%" y="533" width="0.1591%" height="15" fill="rgb(212,155,18)" fg:x="158" fg:w="2"/><text x="12.8196%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.6492%" y="517" width="0.0796%" height="15" fill="rgb(242,21,14)" fg:x="159" fg:w="1"/><text x="12.8992%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.7287%" y="549" width="0.0796%" height="15" fill="rgb(222,19,48)" fg:x="160" fg:w="1"/><text x="12.9787%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="12.8083%" y="549" width="0.0796%" height="15" fill="rgb(232,45,27)" fg:x="161" fg:w="1"/><text x="13.0583%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="12.8083%" y="533" width="0.0796%" height="15" fill="rgb(249,103,42)" fg:x="161" fg:w="1"/><text x="13.0583%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="12.8878%" y="549" width="0.0796%" height="15" fill="rgb(246,81,33)" fg:x="162" fg:w="1"/><text x="13.1378%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="12.8878%" y="533" width="0.0796%" height="15" fill="rgb(252,33,42)" fg:x="162" fg:w="1"/><text x="13.1378%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="13.0469%" y="501" width="0.2387%" height="15" fill="rgb(209,212,41)" fg:x="164" fg:w="3"/><text x="13.2969%" y="511.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="13.0469%" y="485" width="0.2387%" height="15" fill="rgb(207,154,6)" fg:x="164" fg:w="3"/><text x="13.2969%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="13.2856%" y="485" width="0.0796%" height="15" fill="rgb(223,64,47)" fg:x="167" fg:w="1"/><text x="13.5356%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="13.2856%" y="501" width="0.1591%" height="15" fill="rgb(211,161,38)" fg:x="167" fg:w="2"/><text x="13.5356%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.3652%" y="485" width="0.0796%" height="15" fill="rgb(219,138,40)" fg:x="168" fg:w="1"/><text x="13.6152%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.3652%" y="469" width="0.0796%" height="15" fill="rgb(241,228,46)" fg:x="168" fg:w="1"/><text x="13.6152%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.3652%" y="453" width="0.0796%" height="15" fill="rgb(223,209,38)" fg:x="168" fg:w="1"/><text x="13.6152%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.4447%" y="469" width="0.0796%" height="15" fill="rgb(236,164,45)" fg:x="169" fg:w="1"/><text x="13.6947%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.4447%" y="453" width="0.0796%" height="15" fill="rgb(231,15,5)" fg:x="169" fg:w="1"/><text x="13.6947%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="13.0469%" y="517" width="0.5569%" height="15" fill="rgb(252,35,15)" fg:x="164" fg:w="7"/><text x="13.2969%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="13.4447%" y="501" width="0.1591%" height="15" fill="rgb(248,181,18)" fg:x="169" fg:w="2"/><text x="13.6947%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="13.4447%" y="485" width="0.1591%" height="15" fill="rgb(233,39,42)" fg:x="169" fg:w="2"/><text x="13.6947%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.5243%" y="469" width="0.0796%" height="15" fill="rgb(238,110,33)" fg:x="170" fg:w="1"/><text x="13.7743%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.5243%" y="453" width="0.0796%" height="15" fill="rgb(233,195,10)" fg:x="170" fg:w="1"/><text x="13.7743%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.72%)</title><rect x="12.9674%" y="533" width="0.7160%" height="15" fill="rgb(254,105,3)" fg:x="163" fg:w="9"/><text x="13.2174%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="13.6038%" y="517" width="0.0796%" height="15" fill="rgb(221,225,9)" fg:x="171" fg:w="1"/><text x="13.8538%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6038%" y="501" width="0.0796%" height="15" fill="rgb(224,227,45)" fg:x="171" fg:w="1"/><text x="13.8538%" y="511.50"></text></g><g><title>engine::session::Session::flush (41 samples, 3.26%)</title><rect x="10.5012%" y="709" width="3.2617%" height="15" fill="rgb(229,198,43)" fg:x="132" fg:w="41"/><text x="10.7512%" y="719.50">eng..</text></g><g><title>engine::session::Session::save_changes (41 samples, 3.26%)</title><rect x="10.5012%" y="693" width="3.2617%" height="15" fill="rgb(206,209,35)" fg:x="132" fg:w="41"/><text x="10.7512%" y="703.50">eng..</text></g><g><title>engine::session::state::State::close (41 samples, 3.26%)</title><rect x="10.5012%" y="677" width="3.2617%" height="15" fill="rgb(245,195,53)" fg:x="132" fg:w="41"/><text x="10.7512%" y="687.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (41 samples, 3.26%)</title><rect x="10.5012%" y="661" width="3.2617%" height="15" fill="rgb(240,92,26)" fg:x="132" fg:w="41"/><text x="10.7512%" y="671.50">eng..</text></g><g><title>core::iter::adapters::try_process (41 samples, 3.26%)</title><rect x="10.5012%" y="645" width="3.2617%" height="15" fill="rgb(207,40,23)" fg:x="132" fg:w="41"/><text x="10.7512%" y="655.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 3.26%)</title><rect x="10.5012%" y="629" width="3.2617%" height="15" fill="rgb(223,111,35)" fg:x="132" fg:w="41"/><text x="10.7512%" y="639.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (41 samples, 3.26%)</title><rect x="10.5012%" y="613" width="3.2617%" height="15" fill="rgb(229,147,28)" fg:x="132" fg:w="41"/><text x="10.7512%" y="623.50">eng..</text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.03%)</title><rect x="12.7287%" y="597" width="1.0342%" height="15" fill="rgb(211,29,28)" fg:x="160" fg:w="13"/><text x="12.9787%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (13 samples, 1.03%)</title><rect x="12.7287%" y="581" width="1.0342%" height="15" fill="rgb(228,72,33)" fg:x="160" fg:w="13"/><text x="12.9787%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.03%)</title><rect x="12.7287%" y="565" width="1.0342%" height="15" fill="rgb(205,214,31)" fg:x="160" fg:w="13"/><text x="12.9787%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.80%)</title><rect x="12.9674%" y="549" width="0.7955%" height="15" fill="rgb(224,111,15)" fg:x="163" fg:w="10"/><text x="13.2174%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6834%" y="533" width="0.0796%" height="15" fill="rgb(253,21,26)" fg:x="172" fg:w="1"/><text x="13.9334%" y="543.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="13.7629%" y="709" width="0.0796%" height="15" fill="rgb(245,139,43)" fg:x="173" fg:w="1"/><text x="14.0129%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="13.7629%" y="693" width="0.0796%" height="15" fill="rgb(252,170,7)" fg:x="173" fg:w="1"/><text x="14.0129%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.7629%" y="677" width="0.0796%" height="15" fill="rgb(231,118,14)" fg:x="173" fg:w="1"/><text x="14.0129%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.8425%" y="629" width="0.0796%" height="15" fill="rgb(238,83,0)" fg:x="174" fg:w="1"/><text x="14.0925%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="13.8425%" y="693" width="0.1591%" height="15" fill="rgb(221,39,39)" fg:x="174" fg:w="2"/><text x="14.0925%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="13.8425%" y="677" width="0.1591%" height="15" fill="rgb(222,119,46)" fg:x="174" fg:w="2"/><text x="14.0925%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.8425%" y="661" width="0.1591%" height="15" fill="rgb(222,165,49)" fg:x="174" fg:w="2"/><text x="14.0925%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.8425%" y="645" width="0.1591%" height="15" fill="rgb(219,113,52)" fg:x="174" fg:w="2"/><text x="14.0925%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.9220%" y="629" width="0.0796%" height="15" fill="rgb(214,7,15)" fg:x="175" fg:w="1"/><text x="14.1720%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.9220%" y="613" width="0.0796%" height="15" fill="rgb(235,32,4)" fg:x="175" fg:w="1"/><text x="14.1720%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.9220%" y="597" width="0.0796%" height="15" fill="rgb(238,90,54)" fg:x="175" fg:w="1"/><text x="14.1720%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.9220%" y="581" width="0.0796%" height="15" fill="rgb(213,208,19)" fg:x="175" fg:w="1"/><text x="14.1720%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.9220%" y="565" width="0.0796%" height="15" fill="rgb(233,156,4)" fg:x="175" fg:w="1"/><text x="14.1720%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.0016%" y="677" width="0.0796%" height="15" fill="rgb(207,194,5)" fg:x="176" fg:w="1"/><text x="14.2516%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.0016%" y="661" width="0.0796%" height="15" fill="rgb(206,111,30)" fg:x="176" fg:w="1"/><text x="14.2516%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.0016%" y="645" width="0.0796%" height="15" fill="rgb(243,70,54)" fg:x="176" fg:w="1"/><text x="14.2516%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.0016%" y="629" width="0.0796%" height="15" fill="rgb(242,28,8)" fg:x="176" fg:w="1"/><text x="14.2516%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.0016%" y="613" width="0.0796%" height="15" fill="rgb(219,106,18)" fg:x="176" fg:w="1"/><text x="14.2516%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.0016%" y="597" width="0.0796%" height="15" fill="rgb(244,222,10)" fg:x="176" fg:w="1"/><text x="14.2516%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.0016%" y="581" width="0.0796%" height="15" fill="rgb(236,179,52)" fg:x="176" fg:w="1"/><text x="14.2516%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.0016%" y="565" width="0.0796%" height="15" fill="rgb(213,23,39)" fg:x="176" fg:w="1"/><text x="14.2516%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="14.0811%" y="661" width="0.0796%" height="15" fill="rgb(238,48,10)" fg:x="177" fg:w="1"/><text x="14.3311%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="14.0811%" y="645" width="0.0796%" height="15" fill="rgb(251,196,23)" fg:x="177" fg:w="1"/><text x="14.3311%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.0811%" y="629" width="0.0796%" height="15" fill="rgb(250,152,24)" fg:x="177" fg:w="1"/><text x="14.3311%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="14.0811%" y="613" width="0.0796%" height="15" fill="rgb(209,150,17)" fg:x="177" fg:w="1"/><text x="14.3311%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="14.0811%" y="677" width="0.1591%" height="15" fill="rgb(234,202,34)" fg:x="177" fg:w="2"/><text x="14.3311%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="14.1607%" y="661" width="0.0796%" height="15" fill="rgb(253,148,53)" fg:x="178" fg:w="1"/><text x="14.4107%" y="671.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="14.1607%" y="645" width="0.0796%" height="15" fill="rgb(218,129,16)" fg:x="178" fg:w="1"/><text x="14.4107%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.1607%" y="629" width="0.0796%" height="15" fill="rgb(216,85,19)" fg:x="178" fg:w="1"/><text x="14.4107%" y="639.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="14.1607%" y="613" width="0.0796%" height="15" fill="rgb(235,228,7)" fg:x="178" fg:w="1"/><text x="14.4107%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="14.1607%" y="597" width="0.0796%" height="15" fill="rgb(245,175,0)" fg:x="178" fg:w="1"/><text x="14.4107%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="14.2403%" y="629" width="0.0796%" height="15" fill="rgb(208,168,36)" fg:x="179" fg:w="1"/><text x="14.4903%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.2403%" y="613" width="0.0796%" height="15" fill="rgb(246,171,24)" fg:x="179" fg:w="1"/><text x="14.4903%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="14.2403%" y="661" width="0.1591%" height="15" fill="rgb(215,142,24)" fg:x="179" fg:w="2"/><text x="14.4903%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="14.2403%" y="645" width="0.1591%" height="15" fill="rgb(250,187,7)" fg:x="179" fg:w="2"/><text x="14.4903%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="14.3198%" y="629" width="0.0796%" height="15" fill="rgb(228,66,33)" fg:x="180" fg:w="1"/><text x="14.5698%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="14.3198%" y="613" width="0.0796%" height="15" fill="rgb(234,215,21)" fg:x="180" fg:w="1"/><text x="14.5698%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="14.3198%" y="597" width="0.0796%" height="15" fill="rgb(222,191,20)" fg:x="180" fg:w="1"/><text x="14.5698%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="14.3198%" y="581" width="0.0796%" height="15" fill="rgb(245,79,54)" fg:x="180" fg:w="1"/><text x="14.5698%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.3198%" y="565" width="0.0796%" height="15" fill="rgb(240,10,37)" fg:x="180" fg:w="1"/><text x="14.5698%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.3198%" y="549" width="0.0796%" height="15" fill="rgb(214,192,32)" fg:x="180" fg:w="1"/><text x="14.5698%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="14.0016%" y="693" width="0.5569%" height="15" fill="rgb(209,36,54)" fg:x="176" fg:w="7"/><text x="14.2516%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="14.2403%" y="677" width="0.3182%" height="15" fill="rgb(220,10,11)" fg:x="179" fg:w="4"/><text x="14.4903%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="14.3994%" y="661" width="0.1591%" height="15" fill="rgb(221,106,17)" fg:x="181" fg:w="2"/><text x="14.6494%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="14.3994%" y="645" width="0.1591%" height="15" fill="rgb(251,142,44)" fg:x="181" fg:w="2"/><text x="14.6494%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="14.3994%" y="629" width="0.1591%" height="15" fill="rgb(238,13,15)" fg:x="181" fg:w="2"/><text x="14.6494%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="14.3994%" y="613" width="0.1591%" height="15" fill="rgb(208,107,27)" fg:x="181" fg:w="2"/><text x="14.6494%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="14.3994%" y="597" width="0.1591%" height="15" fill="rgb(205,136,37)" fg:x="181" fg:w="2"/><text x="14.6494%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="14.3994%" y="581" width="0.1591%" height="15" fill="rgb(250,205,27)" fg:x="181" fg:w="2"/><text x="14.6494%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="14.3994%" y="565" width="0.1591%" height="15" fill="rgb(210,80,43)" fg:x="181" fg:w="2"/><text x="14.6494%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="14.3994%" y="549" width="0.1591%" height="15" fill="rgb(247,160,36)" fg:x="181" fg:w="2"/><text x="14.6494%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="14.3994%" y="533" width="0.1591%" height="15" fill="rgb(234,13,49)" fg:x="181" fg:w="2"/><text x="14.6494%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="14.3994%" y="517" width="0.1591%" height="15" fill="rgb(234,122,0)" fg:x="181" fg:w="2"/><text x="14.6494%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="14.3994%" y="501" width="0.1591%" height="15" fill="rgb(207,146,38)" fg:x="181" fg:w="2"/><text x="14.6494%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.80%)</title><rect x="13.8425%" y="709" width="0.7955%" height="15" fill="rgb(207,177,25)" fg:x="174" fg:w="10"/><text x="14.0925%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.5585%" y="693" width="0.0796%" height="15" fill="rgb(211,178,42)" fg:x="183" fg:w="1"/><text x="14.8085%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.5585%" y="677" width="0.0796%" height="15" fill="rgb(230,69,54)" fg:x="183" fg:w="1"/><text x="14.8085%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.5585%" y="661" width="0.0796%" height="15" fill="rgb(214,135,41)" fg:x="183" fg:w="1"/><text x="14.8085%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.5585%" y="645" width="0.0796%" height="15" fill="rgb(237,67,25)" fg:x="183" fg:w="1"/><text x="14.8085%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.5585%" y="629" width="0.0796%" height="15" fill="rgb(222,189,50)" fg:x="183" fg:w="1"/><text x="14.8085%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.5585%" y="613" width="0.0796%" height="15" fill="rgb(245,148,34)" fg:x="183" fg:w="1"/><text x="14.8085%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.5585%" y="597" width="0.0796%" height="15" fill="rgb(222,29,6)" fg:x="183" fg:w="1"/><text x="14.8085%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.5585%" y="581" width="0.0796%" height="15" fill="rgb(221,189,43)" fg:x="183" fg:w="1"/><text x="14.8085%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.5585%" y="565" width="0.0796%" height="15" fill="rgb(207,36,27)" fg:x="183" fg:w="1"/><text x="14.8085%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.5585%" y="549" width="0.0796%" height="15" fill="rgb(217,90,24)" fg:x="183" fg:w="1"/><text x="14.8085%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.5585%" y="533" width="0.0796%" height="15" fill="rgb(224,66,35)" fg:x="183" fg:w="1"/><text x="14.8085%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.5585%" y="517" width="0.0796%" height="15" fill="rgb(221,13,50)" fg:x="183" fg:w="1"/><text x="14.8085%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.5585%" y="501" width="0.0796%" height="15" fill="rgb(236,68,49)" fg:x="183" fg:w="1"/><text x="14.8085%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="14.6380%" y="677" width="0.0796%" height="15" fill="rgb(229,146,28)" fg:x="184" fg:w="1"/><text x="14.8880%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="14.7176%" y="661" width="0.0796%" height="15" fill="rgb(225,31,38)" fg:x="185" fg:w="1"/><text x="14.9676%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.7176%" y="645" width="0.0796%" height="15" fill="rgb(250,208,3)" fg:x="185" fg:w="1"/><text x="14.9676%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.7176%" y="629" width="0.0796%" height="15" fill="rgb(246,54,23)" fg:x="185" fg:w="1"/><text x="14.9676%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="14.7176%" y="613" width="0.0796%" height="15" fill="rgb(243,76,11)" fg:x="185" fg:w="1"/><text x="14.9676%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.24%)</title><rect x="14.6380%" y="709" width="0.2387%" height="15" fill="rgb(245,21,50)" fg:x="184" fg:w="3"/><text x="14.8880%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="14.6380%" y="693" width="0.2387%" height="15" fill="rgb(228,9,43)" fg:x="184" fg:w="3"/><text x="14.8880%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="14.7176%" y="677" width="0.1591%" height="15" fill="rgb(208,100,47)" fg:x="185" fg:w="2"/><text x="14.9676%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="14.7971%" y="661" width="0.0796%" height="15" fill="rgb(232,26,8)" fg:x="186" fg:w="1"/><text x="15.0471%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.7971%" y="645" width="0.0796%" height="15" fill="rgb(216,166,38)" fg:x="186" fg:w="1"/><text x="15.0471%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="14.8767%" y="677" width="0.0796%" height="15" fill="rgb(251,202,51)" fg:x="187" fg:w="1"/><text x="15.1267%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.8767%" y="661" width="0.0796%" height="15" fill="rgb(254,216,34)" fg:x="187" fg:w="1"/><text x="15.1267%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="14.8767%" y="645" width="0.0796%" height="15" fill="rgb(251,32,27)" fg:x="187" fg:w="1"/><text x="15.1267%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="14.9562%" y="645" width="0.0796%" height="15" fill="rgb(208,127,28)" fg:x="188" fg:w="1"/><text x="15.2062%" y="655.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="14.9562%" y="629" width="0.0796%" height="15" fill="rgb(224,137,22)" fg:x="188" fg:w="1"/><text x="15.2062%" y="639.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="14.9562%" y="613" width="0.0796%" height="15" fill="rgb(254,70,32)" fg:x="188" fg:w="1"/><text x="15.2062%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.9562%" y="597" width="0.0796%" height="15" fill="rgb(229,75,37)" fg:x="188" fg:w="1"/><text x="15.2062%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="14.8767%" y="693" width="0.2387%" height="15" fill="rgb(252,64,23)" fg:x="187" fg:w="3"/><text x="15.1267%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.9562%" y="677" width="0.1591%" height="15" fill="rgb(232,162,48)" fg:x="188" fg:w="2"/><text x="15.2062%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.9562%" y="661" width="0.1591%" height="15" fill="rgb(246,160,12)" fg:x="188" fg:w="2"/><text x="15.2062%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.0358%" y="645" width="0.0796%" height="15" fill="rgb(247,166,0)" fg:x="189" fg:w="1"/><text x="15.2858%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.1154%" y="661" width="0.0796%" height="15" fill="rgb(249,219,21)" fg:x="190" fg:w="1"/><text x="15.3654%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="15.1154%" y="645" width="0.0796%" height="15" fill="rgb(205,209,3)" fg:x="190" fg:w="1"/><text x="15.3654%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="15.1154%" y="629" width="0.0796%" height="15" fill="rgb(243,44,1)" fg:x="190" fg:w="1"/><text x="15.3654%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.1154%" y="613" width="0.0796%" height="15" fill="rgb(206,159,16)" fg:x="190" fg:w="1"/><text x="15.3654%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.1154%" y="597" width="0.0796%" height="15" fill="rgb(244,77,30)" fg:x="190" fg:w="1"/><text x="15.3654%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.1154%" y="581" width="0.0796%" height="15" fill="rgb(218,69,12)" fg:x="190" fg:w="1"/><text x="15.3654%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="15.1154%" y="565" width="0.0796%" height="15" fill="rgb(212,87,7)" fg:x="190" fg:w="1"/><text x="15.3654%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (5 samples, 0.40%)</title><rect x="14.8767%" y="709" width="0.3978%" height="15" fill="rgb(245,114,25)" fg:x="187" fg:w="5"/><text x="15.1267%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="15.1154%" y="693" width="0.1591%" height="15" fill="rgb(210,61,42)" fg:x="190" fg:w="2"/><text x="15.3654%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="15.1154%" y="677" width="0.1591%" height="15" fill="rgb(211,52,33)" fg:x="190" fg:w="2"/><text x="15.3654%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.1949%" y="661" width="0.0796%" height="15" fill="rgb(234,58,33)" fg:x="191" fg:w="1"/><text x="15.4449%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.2745%" y="565" width="0.0796%" height="15" fill="rgb(220,115,36)" fg:x="192" fg:w="1"/><text x="15.5245%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="15.2745%" y="661" width="0.1591%" height="15" fill="rgb(243,153,54)" fg:x="192" fg:w="2"/><text x="15.5245%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="15.2745%" y="645" width="0.1591%" height="15" fill="rgb(251,47,18)" fg:x="192" fg:w="2"/><text x="15.5245%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.2745%" y="629" width="0.1591%" height="15" fill="rgb(242,102,42)" fg:x="192" fg:w="2"/><text x="15.5245%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.2745%" y="613" width="0.1591%" height="15" fill="rgb(234,31,38)" fg:x="192" fg:w="2"/><text x="15.5245%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="15.2745%" y="597" width="0.1591%" height="15" fill="rgb(221,117,51)" fg:x="192" fg:w="2"/><text x="15.5245%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.2745%" y="581" width="0.1591%" height="15" fill="rgb(212,20,18)" fg:x="192" fg:w="2"/><text x="15.5245%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.3540%" y="565" width="0.0796%" height="15" fill="rgb(245,133,36)" fg:x="193" fg:w="1"/><text x="15.6040%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.3540%" y="549" width="0.0796%" height="15" fill="rgb(212,6,19)" fg:x="193" fg:w="1"/><text x="15.6040%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.3540%" y="533" width="0.0796%" height="15" fill="rgb(218,1,36)" fg:x="193" fg:w="1"/><text x="15.6040%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.4336%" y="629" width="0.0796%" height="15" fill="rgb(246,84,54)" fg:x="194" fg:w="1"/><text x="15.6836%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.4336%" y="613" width="0.0796%" height="15" fill="rgb(242,110,6)" fg:x="194" fg:w="1"/><text x="15.6836%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.4336%" y="597" width="0.0796%" height="15" fill="rgb(214,47,5)" fg:x="194" fg:w="1"/><text x="15.6836%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.4336%" y="581" width="0.0796%" height="15" fill="rgb(218,159,25)" fg:x="194" fg:w="1"/><text x="15.6836%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.4336%" y="565" width="0.0796%" height="15" fill="rgb(215,211,28)" fg:x="194" fg:w="1"/><text x="15.6836%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.4336%" y="549" width="0.0796%" height="15" fill="rgb(238,59,32)" fg:x="194" fg:w="1"/><text x="15.6836%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.4336%" y="533" width="0.0796%" height="15" fill="rgb(226,82,3)" fg:x="194" fg:w="1"/><text x="15.6836%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.4336%" y="517" width="0.0796%" height="15" fill="rgb(240,164,32)" fg:x="194" fg:w="1"/><text x="15.6836%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.4336%" y="501" width="0.0796%" height="15" fill="rgb(232,46,7)" fg:x="194" fg:w="1"/><text x="15.6836%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.4336%" y="485" width="0.0796%" height="15" fill="rgb(229,129,53)" fg:x="194" fg:w="1"/><text x="15.6836%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.4336%" y="469" width="0.0796%" height="15" fill="rgb(234,188,29)" fg:x="194" fg:w="1"/><text x="15.6836%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.4336%" y="453" width="0.0796%" height="15" fill="rgb(246,141,4)" fg:x="194" fg:w="1"/><text x="15.6836%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.4336%" y="437" width="0.0796%" height="15" fill="rgb(229,23,39)" fg:x="194" fg:w="1"/><text x="15.6836%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.4336%" y="421" width="0.0796%" height="15" fill="rgb(206,12,3)" fg:x="194" fg:w="1"/><text x="15.6836%" y="431.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="15.2745%" y="693" width="0.3182%" height="15" fill="rgb(252,226,20)" fg:x="192" fg:w="4"/><text x="15.5245%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="15.2745%" y="677" width="0.3182%" height="15" fill="rgb(216,123,35)" fg:x="192" fg:w="4"/><text x="15.5245%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="15.4336%" y="661" width="0.1591%" height="15" fill="rgb(212,68,40)" fg:x="194" fg:w="2"/><text x="15.6836%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="15.4336%" y="645" width="0.1591%" height="15" fill="rgb(254,125,32)" fg:x="194" fg:w="2"/><text x="15.6836%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.5131%" y="629" width="0.0796%" height="15" fill="rgb(253,97,22)" fg:x="195" fg:w="1"/><text x="15.7631%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.5131%" y="613" width="0.0796%" height="15" fill="rgb(241,101,14)" fg:x="195" fg:w="1"/><text x="15.7631%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.5131%" y="597" width="0.0796%" height="15" fill="rgb(238,103,29)" fg:x="195" fg:w="1"/><text x="15.7631%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.5131%" y="581" width="0.0796%" height="15" fill="rgb(233,195,47)" fg:x="195" fg:w="1"/><text x="15.7631%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.5131%" y="565" width="0.0796%" height="15" fill="rgb(246,218,30)" fg:x="195" fg:w="1"/><text x="15.7631%" y="575.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.5927%" y="693" width="0.0796%" height="15" fill="rgb(219,145,47)" fg:x="196" fg:w="1"/><text x="15.8427%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="15.5927%" y="677" width="0.0796%" height="15" fill="rgb(243,12,26)" fg:x="196" fg:w="1"/><text x="15.8427%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.5927%" y="661" width="0.0796%" height="15" fill="rgb(214,87,16)" fg:x="196" fg:w="1"/><text x="15.8427%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="15.5927%" y="645" width="0.0796%" height="15" fill="rgb(208,99,42)" fg:x="196" fg:w="1"/><text x="15.8427%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="15.5927%" y="629" width="0.0796%" height="15" fill="rgb(253,99,2)" fg:x="196" fg:w="1"/><text x="15.8427%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.5927%" y="613" width="0.0796%" height="15" fill="rgb(220,168,23)" fg:x="196" fg:w="1"/><text x="15.8427%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5927%" y="597" width="0.0796%" height="15" fill="rgb(242,38,24)" fg:x="196" fg:w="1"/><text x="15.8427%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="15.6722%" y="693" width="0.0796%" height="15" fill="rgb(225,182,9)" fg:x="197" fg:w="1"/><text x="15.9222%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="15.6722%" y="677" width="0.0796%" height="15" fill="rgb(243,178,37)" fg:x="197" fg:w="1"/><text x="15.9222%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.6722%" y="661" width="0.0796%" height="15" fill="rgb(232,139,19)" fg:x="197" fg:w="1"/><text x="15.9222%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.6722%" y="645" width="0.0796%" height="15" fill="rgb(225,201,24)" fg:x="197" fg:w="1"/><text x="15.9222%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.6722%" y="629" width="0.0796%" height="15" fill="rgb(221,47,46)" fg:x="197" fg:w="1"/><text x="15.9222%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (70 samples, 5.57%)</title><rect x="10.2625%" y="725" width="5.5688%" height="15" fill="rgb(249,23,13)" fg:x="129" fg:w="70"/><text x="10.5125%" y="735.50">plugins..</text></g><g><title>plugins_core::tools::set_container (7 samples, 0.56%)</title><rect x="15.2745%" y="709" width="0.5569%" height="15" fill="rgb(219,9,5)" fg:x="192" fg:w="7"/><text x="15.5245%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="15.7518%" y="693" width="0.0796%" height="15" fill="rgb(254,171,16)" fg:x="198" fg:w="1"/><text x="16.0018%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.7518%" y="677" width="0.0796%" height="15" fill="rgb(230,171,20)" fg:x="198" fg:w="1"/><text x="16.0018%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="15.7518%" y="661" width="0.0796%" height="15" fill="rgb(210,71,41)" fg:x="198" fg:w="1"/><text x="16.0018%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.7518%" y="645" width="0.0796%" height="15" fill="rgb(206,173,20)" fg:x="198" fg:w="1"/><text x="16.0018%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="15.7518%" y="629" width="0.0796%" height="15" fill="rgb(233,88,34)" fg:x="198" fg:w="1"/><text x="16.0018%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.7518%" y="613" width="0.0796%" height="15" fill="rgb(223,209,46)" fg:x="198" fg:w="1"/><text x="16.0018%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.7518%" y="597" width="0.0796%" height="15" fill="rgb(250,43,18)" fg:x="198" fg:w="1"/><text x="16.0018%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="15.8313%" y="693" width="0.0796%" height="15" fill="rgb(208,13,10)" fg:x="199" fg:w="1"/><text x="16.0813%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="15.8313%" y="677" width="0.0796%" height="15" fill="rgb(212,200,36)" fg:x="199" fg:w="1"/><text x="16.0813%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.8313%" y="661" width="0.0796%" height="15" fill="rgb(225,90,30)" fg:x="199" fg:w="1"/><text x="16.0813%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.8313%" y="645" width="0.0796%" height="15" fill="rgb(236,182,39)" fg:x="199" fg:w="1"/><text x="16.0813%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.8313%" y="629" width="0.0796%" height="15" fill="rgb(212,144,35)" fg:x="199" fg:w="1"/><text x="16.0813%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.8313%" y="613" width="0.0796%" height="15" fill="rgb(228,63,44)" fg:x="199" fg:w="1"/><text x="16.0813%" y="623.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="15.9109%" y="693" width="0.0796%" height="15" fill="rgb(228,109,6)" fg:x="200" fg:w="1"/><text x="16.1609%" y="703.50"></text></g><g><title>kernel::model::builder::EntityBuilder::with_key (1 samples, 0.08%)</title><rect x="15.9109%" y="677" width="0.0796%" height="15" fill="rgb(238,117,24)" fg:x="200" fg:w="1"/><text x="16.1609%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.9905%" y="661" width="0.0796%" height="15" fill="rgb(242,26,26)" fg:x="201" fg:w="1"/><text x="16.2405%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.9905%" y="645" width="0.0796%" height="15" fill="rgb(221,92,48)" fg:x="201" fg:w="1"/><text x="16.2405%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.9905%" y="629" width="0.0796%" height="15" fill="rgb(209,209,32)" fg:x="201" fg:w="1"/><text x="16.2405%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.9905%" y="613" width="0.0796%" height="15" fill="rgb(221,70,22)" fg:x="201" fg:w="1"/><text x="16.2405%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.9905%" y="597" width="0.0796%" height="15" fill="rgb(248,145,5)" fg:x="201" fg:w="1"/><text x="16.2405%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="15.9905%" y="581" width="0.0796%" height="15" fill="rgb(226,116,26)" fg:x="201" fg:w="1"/><text x="16.2405%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="15.9905%" y="565" width="0.0796%" height="15" fill="rgb(244,5,17)" fg:x="201" fg:w="1"/><text x="16.2405%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="16.0700%" y="645" width="0.0796%" height="15" fill="rgb(252,159,33)" fg:x="202" fg:w="1"/><text x="16.3200%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="16.0700%" y="629" width="0.0796%" height="15" fill="rgb(206,71,0)" fg:x="202" fg:w="1"/><text x="16.3200%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.0700%" y="613" width="0.0796%" height="15" fill="rgb(233,118,54)" fg:x="202" fg:w="1"/><text x="16.3200%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="16.0700%" y="597" width="0.0796%" height="15" fill="rgb(234,83,48)" fg:x="202" fg:w="1"/><text x="16.3200%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="16.0700%" y="581" width="0.0796%" height="15" fill="rgb(228,3,54)" fg:x="202" fg:w="1"/><text x="16.3200%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0700%" y="565" width="0.0796%" height="15" fill="rgb(226,155,13)" fg:x="202" fg:w="1"/><text x="16.3200%" y="575.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="16.1496%" y="613" width="0.0796%" height="15" fill="rgb(241,28,37)" fg:x="203" fg:w="1"/><text x="16.3996%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.1496%" y="597" width="0.0796%" height="15" fill="rgb(233,93,10)" fg:x="203" fg:w="1"/><text x="16.3996%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="16.1496%" y="581" width="0.0796%" height="15" fill="rgb(225,113,19)" fg:x="203" fg:w="1"/><text x="16.3996%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="16.1496%" y="565" width="0.0796%" height="15" fill="rgb(241,2,18)" fg:x="203" fg:w="1"/><text x="16.3996%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="16.2291%" y="613" width="0.0796%" height="15" fill="rgb(228,207,21)" fg:x="204" fg:w="1"/><text x="16.4791%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.2291%" y="597" width="0.0796%" height="15" fill="rgb(213,211,35)" fg:x="204" fg:w="1"/><text x="16.4791%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.2291%" y="581" width="0.0796%" height="15" fill="rgb(209,83,10)" fg:x="204" fg:w="1"/><text x="16.4791%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.2291%" y="565" width="0.0796%" height="15" fill="rgb(209,164,1)" fg:x="204" fg:w="1"/><text x="16.4791%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.2291%" y="549" width="0.0796%" height="15" fill="rgb(213,184,43)" fg:x="204" fg:w="1"/><text x="16.4791%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="15.9905%" y="693" width="0.3978%" height="15" fill="rgb(231,61,34)" fg:x="201" fg:w="5"/><text x="16.2405%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="15.9905%" y="677" width="0.3978%" height="15" fill="rgb(235,75,3)" fg:x="201" fg:w="5"/><text x="16.2405%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="16.0700%" y="661" width="0.3182%" height="15" fill="rgb(220,106,47)" fg:x="202" fg:w="4"/><text x="16.3200%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="16.1496%" y="645" width="0.2387%" height="15" fill="rgb(210,196,33)" fg:x="203" fg:w="3"/><text x="16.3996%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="16.1496%" y="629" width="0.2387%" height="15" fill="rgb(229,154,42)" fg:x="203" fg:w="3"/><text x="16.3996%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="16.3087%" y="613" width="0.0796%" height="15" fill="rgb(228,114,26)" fg:x="205" fg:w="1"/><text x="16.5587%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="16.3087%" y="597" width="0.0796%" height="15" fill="rgb(208,144,1)" fg:x="205" fg:w="1"/><text x="16.5587%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.3087%" y="581" width="0.0796%" height="15" fill="rgb(239,112,37)" fg:x="205" fg:w="1"/><text x="16.5587%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3087%" y="565" width="0.0796%" height="15" fill="rgb(210,96,50)" fg:x="205" fg:w="1"/><text x="16.5587%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.3087%" y="549" width="0.0796%" height="15" fill="rgb(222,178,2)" fg:x="205" fg:w="1"/><text x="16.5587%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3087%" y="533" width="0.0796%" height="15" fill="rgb(226,74,18)" fg:x="205" fg:w="1"/><text x="16.5587%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.3087%" y="517" width="0.0796%" height="15" fill="rgb(225,67,54)" fg:x="205" fg:w="1"/><text x="16.5587%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3087%" y="501" width="0.0796%" height="15" fill="rgb(251,92,32)" fg:x="205" fg:w="1"/><text x="16.5587%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.3087%" y="485" width="0.0796%" height="15" fill="rgb(228,149,22)" fg:x="205" fg:w="1"/><text x="16.5587%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (8 samples, 0.64%)</title><rect x="15.8313%" y="725" width="0.6364%" height="15" fill="rgb(243,54,13)" fg:x="199" fg:w="8"/><text x="16.0813%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (8 samples, 0.64%)</title><rect x="15.8313%" y="709" width="0.6364%" height="15" fill="rgb(243,180,28)" fg:x="199" fg:w="8"/><text x="16.0813%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="16.3882%" y="693" width="0.0796%" height="15" fill="rgb(208,167,24)" fg:x="206" fg:w="1"/><text x="16.6382%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="16.3882%" y="677" width="0.0796%" height="15" fill="rgb(245,73,45)" fg:x="206" fg:w="1"/><text x="16.6382%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3882%" y="661" width="0.0796%" height="15" fill="rgb(237,203,48)" fg:x="206" fg:w="1"/><text x="16.6382%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.3882%" y="645" width="0.0796%" height="15" fill="rgb(211,197,16)" fg:x="206" fg:w="1"/><text x="16.6382%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3882%" y="629" width="0.0796%" height="15" fill="rgb(243,99,51)" fg:x="206" fg:w="1"/><text x="16.6382%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="16.4678%" y="693" width="0.0796%" height="15" fill="rgb(215,123,29)" fg:x="207" fg:w="1"/><text x="16.7178%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="16.4678%" y="677" width="0.0796%" height="15" fill="rgb(239,186,37)" fg:x="207" fg:w="1"/><text x="16.7178%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.4678%" y="661" width="0.0796%" height="15" fill="rgb(252,136,39)" fg:x="207" fg:w="1"/><text x="16.7178%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="16.4678%" y="709" width="0.1591%" height="15" fill="rgb(223,213,32)" fg:x="207" fg:w="2"/><text x="16.7178%" y="719.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="16.5473%" y="693" width="0.0796%" height="15" fill="rgb(233,115,5)" fg:x="208" fg:w="1"/><text x="16.7973%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.5473%" y="677" width="0.0796%" height="15" fill="rgb(207,226,44)" fg:x="208" fg:w="1"/><text x="16.7973%" y="687.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="16.5473%" y="661" width="0.0796%" height="15" fill="rgb(208,126,0)" fg:x="208" fg:w="1"/><text x="16.7973%" y="671.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="16.6269%" y="709" width="0.1591%" height="15" fill="rgb(244,66,21)" fg:x="209" fg:w="2"/><text x="16.8769%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="16.6269%" y="693" width="0.1591%" height="15" fill="rgb(222,97,12)" fg:x="209" fg:w="2"/><text x="16.8769%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="16.7064%" y="677" width="0.0796%" height="15" fill="rgb(219,213,19)" fg:x="210" fg:w="1"/><text x="16.9564%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="16.7064%" y="661" width="0.0796%" height="15" fill="rgb(252,169,30)" fg:x="210" fg:w="1"/><text x="16.9564%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="16.7064%" y="645" width="0.0796%" height="15" fill="rgb(206,32,51)" fg:x="210" fg:w="1"/><text x="16.9564%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="16.7064%" y="629" width="0.0796%" height="15" fill="rgb(250,172,42)" fg:x="210" fg:w="1"/><text x="16.9564%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="16.7064%" y="613" width="0.0796%" height="15" fill="rgb(209,34,43)" fg:x="210" fg:w="1"/><text x="16.9564%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="16.7064%" y="597" width="0.0796%" height="15" fill="rgb(223,11,35)" fg:x="210" fg:w="1"/><text x="16.9564%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="16.7064%" y="581" width="0.0796%" height="15" fill="rgb(251,219,26)" fg:x="210" fg:w="1"/><text x="16.9564%" y="591.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="16.7064%" y="565" width="0.0796%" height="15" fill="rgb(231,119,3)" fg:x="210" fg:w="1"/><text x="16.9564%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.7860%" y="677" width="0.0796%" height="15" fill="rgb(216,97,11)" fg:x="211" fg:w="1"/><text x="17.0360%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.0247%" y="549" width="0.0796%" height="15" fill="rgb(223,59,9)" fg:x="214" fg:w="1"/><text x="17.2747%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="16.9451%" y="661" width="0.2387%" height="15" fill="rgb(233,93,31)" fg:x="213" fg:w="3"/><text x="17.1951%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="16.9451%" y="645" width="0.2387%" height="15" fill="rgb(239,81,33)" fg:x="213" fg:w="3"/><text x="17.1951%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="16.9451%" y="629" width="0.2387%" height="15" fill="rgb(213,120,34)" fg:x="213" fg:w="3"/><text x="17.1951%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="17.0247%" y="613" width="0.1591%" height="15" fill="rgb(243,49,53)" fg:x="214" fg:w="2"/><text x="17.2747%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="17.0247%" y="597" width="0.1591%" height="15" fill="rgb(247,216,33)" fg:x="214" fg:w="2"/><text x="17.2747%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="17.0247%" y="581" width="0.1591%" height="15" fill="rgb(226,26,14)" fg:x="214" fg:w="2"/><text x="17.2747%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="17.0247%" y="565" width="0.1591%" height="15" fill="rgb(215,49,53)" fg:x="214" fg:w="2"/><text x="17.2747%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.1042%" y="549" width="0.0796%" height="15" fill="rgb(245,162,40)" fg:x="215" fg:w="1"/><text x="17.3542%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.1042%" y="533" width="0.0796%" height="15" fill="rgb(229,68,17)" fg:x="215" fg:w="1"/><text x="17.3542%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.1042%" y="517" width="0.0796%" height="15" fill="rgb(213,182,10)" fg:x="215" fg:w="1"/><text x="17.3542%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.1042%" y="501" width="0.0796%" height="15" fill="rgb(245,125,30)" fg:x="215" fg:w="1"/><text x="17.3542%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2633%" y="629" width="0.0796%" height="15" fill="rgb(232,202,2)" fg:x="217" fg:w="1"/><text x="17.5133%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (8 samples, 0.64%)</title><rect x="16.8656%" y="677" width="0.6364%" height="15" fill="rgb(237,140,51)" fg:x="212" fg:w="8"/><text x="17.1156%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="17.1838%" y="661" width="0.3182%" height="15" fill="rgb(236,157,25)" fg:x="216" fg:w="4"/><text x="17.4338%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="17.1838%" y="645" width="0.3182%" height="15" fill="rgb(219,209,0)" fg:x="216" fg:w="4"/><text x="17.4338%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.3429%" y="629" width="0.1591%" height="15" fill="rgb(240,116,54)" fg:x="218" fg:w="2"/><text x="17.5929%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (14 samples, 1.11%)</title><rect x="16.4678%" y="725" width="1.1138%" height="15" fill="rgb(216,10,36)" fg:x="207" fg:w="14"/><text x="16.7178%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.80%)</title><rect x="16.7860%" y="709" width="0.7955%" height="15" fill="rgb(222,72,44)" fg:x="211" fg:w="10"/><text x="17.0360%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.80%)</title><rect x="16.7860%" y="693" width="0.7955%" height="15" fill="rgb(232,159,9)" fg:x="211" fg:w="10"/><text x="17.0360%" y="703.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="17.5020%" y="677" width="0.0796%" height="15" fill="rgb(210,39,32)" fg:x="220" fg:w="1"/><text x="17.7520%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="17.5020%" y="661" width="0.0796%" height="15" fill="rgb(216,194,45)" fg:x="220" fg:w="1"/><text x="17.7520%" y="671.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (145 samples, 11.54%)</title><rect x="6.1257%" y="741" width="11.5354%" height="15" fill="rgb(218,18,35)" fg:x="77" fg:w="145"/><text x="6.3757%" y="751.50">&lt;tests::HoldingKe..</text></g><g><title>plugins_core::build::BuildSurroundings::route (1 samples, 0.08%)</title><rect x="17.5815%" y="725" width="0.0796%" height="15" fill="rgb(207,83,51)" fg:x="221" fg:w="1"/><text x="17.8315%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.5815%" y="709" width="0.0796%" height="15" fill="rgb(225,63,43)" fg:x="221" fg:w="1"/><text x="17.8315%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.5815%" y="693" width="0.0796%" height="15" fill="rgb(207,57,36)" fg:x="221" fg:w="1"/><text x="17.8315%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.5815%" y="677" width="0.0796%" height="15" fill="rgb(216,99,33)" fg:x="221" fg:w="1"/><text x="17.8315%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="17.6611%" y="725" width="0.0796%" height="15" fill="rgb(225,42,16)" fg:x="222" fg:w="1"/><text x="17.9111%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="17.6611%" y="709" width="0.0796%" height="15" fill="rgb(220,201,45)" fg:x="222" fg:w="1"/><text x="17.9111%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.6611%" y="693" width="0.0796%" height="15" fill="rgb(225,33,4)" fg:x="222" fg:w="1"/><text x="17.9111%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.6611%" y="677" width="0.0796%" height="15" fill="rgb(224,33,50)" fg:x="222" fg:w="1"/><text x="17.9111%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="17.6611%" y="661" width="0.0796%" height="15" fill="rgb(246,198,51)" fg:x="222" fg:w="1"/><text x="17.9111%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="17.6611%" y="645" width="0.0796%" height="15" fill="rgb(205,22,4)" fg:x="222" fg:w="1"/><text x="17.9111%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="17.6611%" y="629" width="0.0796%" height="15" fill="rgb(206,3,8)" fg:x="222" fg:w="1"/><text x="17.9111%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.6611%" y="613" width="0.0796%" height="15" fill="rgb(251,23,15)" fg:x="222" fg:w="1"/><text x="17.9111%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.6611%" y="597" width="0.0796%" height="15" fill="rgb(252,88,28)" fg:x="222" fg:w="1"/><text x="17.9111%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.6611%" y="581" width="0.0796%" height="15" fill="rgb(212,127,14)" fg:x="222" fg:w="1"/><text x="17.9111%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.6611%" y="565" width="0.0796%" height="15" fill="rgb(247,145,37)" fg:x="222" fg:w="1"/><text x="17.9111%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="17.6611%" y="549" width="0.0796%" height="15" fill="rgb(209,117,53)" fg:x="222" fg:w="1"/><text x="17.9111%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="17.6611%" y="533" width="0.0796%" height="15" fill="rgb(212,90,42)" fg:x="222" fg:w="1"/><text x="17.9111%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="17.6611%" y="517" width="0.0796%" height="15" fill="rgb(218,164,37)" fg:x="222" fg:w="1"/><text x="17.9111%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="17.6611%" y="501" width="0.0796%" height="15" fill="rgb(246,65,34)" fg:x="222" fg:w="1"/><text x="17.9111%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="17.6611%" y="485" width="0.0796%" height="15" fill="rgb(231,100,33)" fg:x="222" fg:w="1"/><text x="17.9111%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="17.8998%" y="677" width="0.0796%" height="15" fill="rgb(228,126,14)" fg:x="225" fg:w="1"/><text x="18.1498%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.9793%" y="661" width="0.0796%" height="15" fill="rgb(215,173,21)" fg:x="226" fg:w="1"/><text x="18.2293%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="17.8998%" y="693" width="0.2387%" height="15" fill="rgb(210,6,40)" fg:x="225" fg:w="3"/><text x="18.1498%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="17.9793%" y="677" width="0.1591%" height="15" fill="rgb(212,48,18)" fg:x="226" fg:w="2"/><text x="18.2293%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="18.0589%" y="661" width="0.0796%" height="15" fill="rgb(230,214,11)" fg:x="227" fg:w="1"/><text x="18.3089%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="18.2180%" y="629" width="0.3182%" height="15" fill="rgb(254,105,39)" fg:x="229" fg:w="4"/><text x="18.4680%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="18.2975%" y="613" width="0.2387%" height="15" fill="rgb(245,158,5)" fg:x="230" fg:w="3"/><text x="18.5475%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.3771%" y="597" width="0.1591%" height="15" fill="rgb(249,208,11)" fg:x="231" fg:w="2"/><text x="18.6271%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="18.3771%" y="581" width="0.1591%" height="15" fill="rgb(210,39,28)" fg:x="231" fg:w="2"/><text x="18.6271%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="18.3771%" y="565" width="0.1591%" height="15" fill="rgb(211,56,53)" fg:x="231" fg:w="2"/><text x="18.6271%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.4566%" y="549" width="0.0796%" height="15" fill="rgb(226,201,30)" fg:x="232" fg:w="1"/><text x="18.7066%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="18.6953%" y="613" width="0.2387%" height="15" fill="rgb(239,101,34)" fg:x="235" fg:w="3"/><text x="18.9453%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.7749%" y="597" width="0.1591%" height="15" fill="rgb(226,209,5)" fg:x="236" fg:w="2"/><text x="19.0249%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.8544%" y="581" width="0.0796%" height="15" fill="rgb(250,105,47)" fg:x="237" fg:w="1"/><text x="19.1044%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.9340%" y="597" width="0.0796%" height="15" fill="rgb(230,72,3)" fg:x="238" fg:w="1"/><text x="19.1840%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.9340%" y="581" width="0.0796%" height="15" fill="rgb(232,218,39)" fg:x="238" fg:w="1"/><text x="19.1840%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="18.9340%" y="565" width="0.0796%" height="15" fill="rgb(248,166,6)" fg:x="238" fg:w="1"/><text x="19.1840%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="19.0135%" y="597" width="0.1591%" height="15" fill="rgb(247,89,20)" fg:x="239" fg:w="2"/><text x="19.2635%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.0135%" y="581" width="0.1591%" height="15" fill="rgb(248,130,54)" fg:x="239" fg:w="2"/><text x="19.2635%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="19.0135%" y="565" width="0.1591%" height="15" fill="rgb(234,196,4)" fg:x="239" fg:w="2"/><text x="19.2635%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.0931%" y="549" width="0.0796%" height="15" fill="rgb(250,143,31)" fg:x="240" fg:w="1"/><text x="19.3431%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.0931%" y="533" width="0.0796%" height="15" fill="rgb(211,110,34)" fg:x="240" fg:w="1"/><text x="19.3431%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.0931%" y="517" width="0.0796%" height="15" fill="rgb(215,124,48)" fg:x="240" fg:w="1"/><text x="19.3431%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.0931%" y="501" width="0.0796%" height="15" fill="rgb(216,46,13)" fg:x="240" fg:w="1"/><text x="19.3431%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.2522%" y="533" width="0.0796%" height="15" fill="rgb(205,184,25)" fg:x="242" fg:w="1"/><text x="19.5022%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.2522%" y="517" width="0.0796%" height="15" fill="rgb(228,1,10)" fg:x="242" fg:w="1"/><text x="19.5022%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.2522%" y="501" width="0.0796%" height="15" fill="rgb(213,116,27)" fg:x="242" fg:w="1"/><text x="19.5022%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.2522%" y="485" width="0.0796%" height="15" fill="rgb(241,95,50)" fg:x="242" fg:w="1"/><text x="19.5022%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="19.2522%" y="581" width="0.1591%" height="15" fill="rgb(238,48,32)" fg:x="242" fg:w="2"/><text x="19.5022%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.2522%" y="565" width="0.1591%" height="15" fill="rgb(235,113,49)" fg:x="242" fg:w="2"/><text x="19.5022%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="19.2522%" y="549" width="0.1591%" height="15" fill="rgb(205,127,43)" fg:x="242" fg:w="2"/><text x="19.5022%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="19.3317%" y="533" width="0.0796%" height="15" fill="rgb(250,162,2)" fg:x="243" fg:w="1"/><text x="19.5817%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="19.1726%" y="597" width="0.4773%" height="15" fill="rgb(220,13,41)" fg:x="241" fg:w="6"/><text x="19.4226%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="19.4113%" y="581" width="0.2387%" height="15" fill="rgb(249,221,25)" fg:x="244" fg:w="3"/><text x="19.6613%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.5704%" y="565" width="0.0796%" height="15" fill="rgb(215,208,19)" fg:x="246" fg:w="1"/><text x="19.8204%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.5704%" y="549" width="0.0796%" height="15" fill="rgb(236,175,2)" fg:x="246" fg:w="1"/><text x="19.8204%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="18.9340%" y="613" width="0.7955%" height="15" fill="rgb(241,52,2)" fg:x="238" fg:w="10"/><text x="19.1840%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.6500%" y="597" width="0.0796%" height="15" fill="rgb(248,140,14)" fg:x="247" fg:w="1"/><text x="19.9000%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.6500%" y="581" width="0.0796%" height="15" fill="rgb(253,22,42)" fg:x="247" fg:w="1"/><text x="19.9000%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.6500%" y="565" width="0.0796%" height="15" fill="rgb(234,61,47)" fg:x="247" fg:w="1"/><text x="19.9000%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (20 samples, 1.59%)</title><rect x="18.2180%" y="645" width="1.5911%" height="15" fill="rgb(208,226,15)" fg:x="229" fg:w="20"/><text x="18.4680%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.27%)</title><rect x="18.5362%" y="629" width="1.2729%" height="15" fill="rgb(217,221,4)" fg:x="233" fg:w="16"/><text x="18.7862%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.7295%" y="613" width="0.0796%" height="15" fill="rgb(212,174,34)" fg:x="248" fg:w="1"/><text x="19.9795%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.7295%" y="597" width="0.0796%" height="15" fill="rgb(253,83,4)" fg:x="248" fg:w="1"/><text x="19.9795%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.7295%" y="581" width="0.0796%" height="15" fill="rgb(250,195,49)" fg:x="248" fg:w="1"/><text x="19.9795%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.8886%" y="581" width="0.0796%" height="15" fill="rgb(241,192,25)" fg:x="250" fg:w="1"/><text x="20.1386%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.9682%" y="581" width="0.0796%" height="15" fill="rgb(208,124,10)" fg:x="251" fg:w="1"/><text x="20.2182%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.9682%" y="565" width="0.0796%" height="15" fill="rgb(222,33,0)" fg:x="251" fg:w="1"/><text x="20.2182%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.0477%" y="565" width="0.0796%" height="15" fill="rgb(234,209,28)" fg:x="252" fg:w="1"/><text x="20.2977%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="19.8091%" y="645" width="0.4773%" height="15" fill="rgb(224,11,23)" fg:x="249" fg:w="6"/><text x="20.0591%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="19.8091%" y="629" width="0.4773%" height="15" fill="rgb(232,99,1)" fg:x="249" fg:w="6"/><text x="20.0591%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="19.8886%" y="613" width="0.3978%" height="15" fill="rgb(237,95,45)" fg:x="250" fg:w="5"/><text x="20.1386%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="19.8886%" y="597" width="0.3978%" height="15" fill="rgb(208,109,11)" fg:x="250" fg:w="5"/><text x="20.1386%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="20.0477%" y="581" width="0.2387%" height="15" fill="rgb(216,190,48)" fg:x="252" fg:w="3"/><text x="20.2977%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="20.1273%" y="565" width="0.1591%" height="15" fill="rgb(251,171,36)" fg:x="253" fg:w="2"/><text x="20.3773%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="20.1273%" y="549" width="0.1591%" height="15" fill="rgb(230,62,22)" fg:x="253" fg:w="2"/><text x="20.3773%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.2068%" y="533" width="0.0796%" height="15" fill="rgb(225,114,35)" fg:x="254" fg:w="1"/><text x="20.4568%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.4455%" y="533" width="0.0796%" height="15" fill="rgb(215,118,42)" fg:x="257" fg:w="1"/><text x="20.6955%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="20.2864%" y="613" width="0.3182%" height="15" fill="rgb(243,119,21)" fg:x="255" fg:w="4"/><text x="20.5364%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="20.3660%" y="597" width="0.2387%" height="15" fill="rgb(252,177,53)" fg:x="256" fg:w="3"/><text x="20.6160%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="20.3660%" y="581" width="0.2387%" height="15" fill="rgb(237,209,29)" fg:x="256" fg:w="3"/><text x="20.6160%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="20.4455%" y="565" width="0.1591%" height="15" fill="rgb(212,65,23)" fg:x="257" fg:w="2"/><text x="20.6955%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="20.4455%" y="549" width="0.1591%" height="15" fill="rgb(230,222,46)" fg:x="257" fg:w="2"/><text x="20.6955%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.5251%" y="533" width="0.0796%" height="15" fill="rgb(215,135,32)" fg:x="258" fg:w="1"/><text x="20.7751%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="20.6046%" y="597" width="0.1591%" height="15" fill="rgb(246,101,22)" fg:x="259" fg:w="2"/><text x="20.8546%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="20.6046%" y="581" width="0.1591%" height="15" fill="rgb(206,107,13)" fg:x="259" fg:w="2"/><text x="20.8546%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="20.6046%" y="565" width="0.1591%" height="15" fill="rgb(250,100,44)" fg:x="259" fg:w="2"/><text x="20.8546%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="20.6842%" y="549" width="0.0796%" height="15" fill="rgb(231,147,38)" fg:x="260" fg:w="1"/><text x="20.9342%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.56%)</title><rect x="20.2864%" y="629" width="0.5569%" height="15" fill="rgb(229,8,40)" fg:x="255" fg:w="7"/><text x="20.5364%" y="639.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="20.6046%" y="613" width="0.2387%" height="15" fill="rgb(221,135,30)" fg:x="259" fg:w="3"/><text x="20.8546%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.7637%" y="597" width="0.0796%" height="15" fill="rgb(249,193,18)" fg:x="261" fg:w="1"/><text x="21.0137%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.8433%" y="597" width="0.0796%" height="15" fill="rgb(209,133,39)" fg:x="262" fg:w="1"/><text x="21.0933%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="20.9228%" y="597" width="0.2387%" height="15" fill="rgb(232,100,14)" fg:x="263" fg:w="3"/><text x="21.1728%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="21.0024%" y="581" width="0.1591%" height="15" fill="rgb(224,185,1)" fg:x="264" fg:w="2"/><text x="21.2524%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.0819%" y="565" width="0.0796%" height="15" fill="rgb(223,139,8)" fg:x="265" fg:w="1"/><text x="21.3319%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="21.0819%" y="549" width="0.0796%" height="15" fill="rgb(232,213,38)" fg:x="265" fg:w="1"/><text x="21.3319%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="21.4797%" y="549" width="0.2387%" height="15" fill="rgb(207,94,22)" fg:x="270" fg:w="3"/><text x="21.7297%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.6388%" y="533" width="0.0796%" height="15" fill="rgb(219,183,54)" fg:x="272" fg:w="1"/><text x="21.8888%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="21.7184%" y="549" width="0.0796%" height="15" fill="rgb(216,185,54)" fg:x="273" fg:w="1"/><text x="21.9684%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="21.7184%" y="533" width="0.0796%" height="15" fill="rgb(254,217,39)" fg:x="273" fg:w="1"/><text x="21.9684%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="21.8775%" y="533" width="0.0796%" height="15" fill="rgb(240,178,23)" fg:x="275" fg:w="1"/><text x="22.1275%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.9570%" y="517" width="0.0796%" height="15" fill="rgb(218,11,47)" fg:x="276" fg:w="1"/><text x="22.2070%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.9570%" y="501" width="0.0796%" height="15" fill="rgb(218,51,51)" fg:x="276" fg:w="1"/><text x="22.2070%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.1161%" y="501" width="0.0796%" height="15" fill="rgb(238,126,27)" fg:x="278" fg:w="1"/><text x="22.3661%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="22.1957%" y="485" width="0.1591%" height="15" fill="rgb(249,202,22)" fg:x="279" fg:w="2"/><text x="22.4457%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (12 samples, 0.95%)</title><rect x="21.4797%" y="565" width="0.9547%" height="15" fill="rgb(254,195,49)" fg:x="270" fg:w="12"/><text x="21.7297%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.64%)</title><rect x="21.7979%" y="549" width="0.6364%" height="15" fill="rgb(208,123,14)" fg:x="274" fg:w="8"/><text x="22.0479%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="21.9570%" y="533" width="0.4773%" height="15" fill="rgb(224,200,8)" fg:x="276" fg:w="6"/><text x="22.2070%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="22.0366%" y="517" width="0.3978%" height="15" fill="rgb(217,61,36)" fg:x="277" fg:w="5"/><text x="22.2866%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="22.1957%" y="501" width="0.2387%" height="15" fill="rgb(206,35,45)" fg:x="279" fg:w="3"/><text x="22.4457%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="22.3548%" y="485" width="0.0796%" height="15" fill="rgb(217,65,33)" fg:x="281" fg:w="1"/><text x="22.6048%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.3548%" y="469" width="0.0796%" height="15" fill="rgb(222,158,48)" fg:x="281" fg:w="1"/><text x="22.6048%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (22 samples, 1.75%)</title><rect x="20.8433%" y="629" width="1.7502%" height="15" fill="rgb(254,2,54)" fg:x="262" fg:w="22"/><text x="21.0933%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (22 samples, 1.75%)</title><rect x="20.8433%" y="613" width="1.7502%" height="15" fill="rgb(250,143,38)" fg:x="262" fg:w="22"/><text x="21.0933%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (18 samples, 1.43%)</title><rect x="21.1615%" y="597" width="1.4320%" height="15" fill="rgb(248,25,0)" fg:x="266" fg:w="18"/><text x="21.4115%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (16 samples, 1.27%)</title><rect x="21.3206%" y="581" width="1.2729%" height="15" fill="rgb(206,152,27)" fg:x="268" fg:w="16"/><text x="21.5706%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="22.4344%" y="565" width="0.1591%" height="15" fill="rgb(240,77,30)" fg:x="282" fg:w="2"/><text x="22.6844%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="22.8321%" y="469" width="0.1591%" height="15" fill="rgb(231,5,3)" fg:x="287" fg:w="2"/><text x="23.0821%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="22.8321%" y="453" width="0.1591%" height="15" fill="rgb(207,226,32)" fg:x="287" fg:w="2"/><text x="23.0821%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="22.8321%" y="437" width="0.1591%" height="15" fill="rgb(222,207,47)" fg:x="287" fg:w="2"/><text x="23.0821%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="22.8321%" y="421" width="0.1591%" height="15" fill="rgb(229,115,45)" fg:x="287" fg:w="2"/><text x="23.0821%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="22.8321%" y="501" width="0.3182%" height="15" fill="rgb(224,191,6)" fg:x="287" fg:w="4"/><text x="23.0821%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="22.8321%" y="485" width="0.3182%" height="15" fill="rgb(230,227,24)" fg:x="287" fg:w="4"/><text x="23.0821%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="22.9912%" y="469" width="0.1591%" height="15" fill="rgb(228,80,19)" fg:x="289" fg:w="2"/><text x="23.2412%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.0708%" y="453" width="0.0796%" height="15" fill="rgb(247,229,0)" fg:x="290" fg:w="1"/><text x="23.3208%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="22.8321%" y="533" width="0.3978%" height="15" fill="rgb(237,194,15)" fg:x="287" fg:w="5"/><text x="23.0821%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="22.8321%" y="517" width="0.3978%" height="15" fill="rgb(219,203,20)" fg:x="287" fg:w="5"/><text x="23.0821%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.1504%" y="501" width="0.0796%" height="15" fill="rgb(234,128,8)" fg:x="291" fg:w="1"/><text x="23.4004%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="23.3095%" y="517" width="0.0796%" height="15" fill="rgb(248,202,8)" fg:x="293" fg:w="1"/><text x="23.5595%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (5 samples, 0.40%)</title><rect x="23.2299%" y="533" width="0.3978%" height="15" fill="rgb(206,104,37)" fg:x="292" fg:w="5"/><text x="23.4799%" y="543.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="23.3890%" y="517" width="0.2387%" height="15" fill="rgb(223,8,27)" fg:x="294" fg:w="3"/><text x="23.6390%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.03%)</title><rect x="22.7526%" y="565" width="1.0342%" height="15" fill="rgb(216,217,28)" fg:x="286" fg:w="13"/><text x="23.0026%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.03%)</title><rect x="22.7526%" y="549" width="1.0342%" height="15" fill="rgb(249,199,1)" fg:x="286" fg:w="13"/><text x="23.0026%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.6277%" y="533" width="0.1591%" height="15" fill="rgb(240,85,17)" fg:x="297" fg:w="2"/><text x="23.8777%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.6277%" y="517" width="0.1591%" height="15" fill="rgb(206,108,45)" fg:x="297" fg:w="2"/><text x="23.8777%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.7072%" y="501" width="0.0796%" height="15" fill="rgb(245,210,41)" fg:x="298" fg:w="1"/><text x="23.9572%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="23.7868%" y="565" width="0.1591%" height="15" fill="rgb(206,13,37)" fg:x="299" fg:w="2"/><text x="24.0368%" y="575.50"></text></g><g><title>engine::session::state::State::close (79 samples, 6.28%)</title><rect x="17.7407%" y="725" width="6.2848%" height="15" fill="rgb(250,61,18)" fg:x="223" fg:w="79"/><text x="17.9907%" y="735.50">engine::..</text></g><g><title>engine::session::state::State::flush_entities (78 samples, 6.21%)</title><rect x="17.8202%" y="709" width="6.2053%" height="15" fill="rgb(235,172,48)" fg:x="224" fg:w="78"/><text x="18.0702%" y="719.50">engine::..</text></g><g><title>core::iter::adapters::try_process (74 samples, 5.89%)</title><rect x="18.1384%" y="693" width="5.8870%" height="15" fill="rgb(249,201,17)" fg:x="228" fg:w="74"/><text x="18.3884%" y="703.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (73 samples, 5.81%)</title><rect x="18.2180%" y="677" width="5.8075%" height="15" fill="rgb(219,208,6)" fg:x="229" fg:w="73"/><text x="18.4680%" y="687.50">&lt;alloc:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (73 samples, 5.81%)</title><rect x="18.2180%" y="661" width="5.8075%" height="15" fill="rgb(248,31,23)" fg:x="229" fg:w="73"/><text x="18.4680%" y="671.50">engine:..</text></g><g><title>kernel::model::any_entity_changes (47 samples, 3.74%)</title><rect x="20.2864%" y="645" width="3.7391%" height="15" fill="rgb(245,15,42)" fg:x="255" fg:w="47"/><text x="20.5364%" y="655.50">kern..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (18 samples, 1.43%)</title><rect x="22.5935%" y="629" width="1.4320%" height="15" fill="rgb(222,217,39)" fg:x="284" fg:w="18"/><text x="22.8435%" y="639.50"></text></g><g><title>serde_json::de::from_trait (18 samples, 1.43%)</title><rect x="22.5935%" y="613" width="1.4320%" height="15" fill="rgb(210,219,27)" fg:x="284" fg:w="18"/><text x="22.8435%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18 samples, 1.43%)</title><rect x="22.5935%" y="597" width="1.4320%" height="15" fill="rgb(252,166,36)" fg:x="284" fg:w="18"/><text x="22.8435%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (17 samples, 1.35%)</title><rect x="22.6730%" y="581" width="1.3524%" height="15" fill="rgb(245,132,34)" fg:x="285" fg:w="17"/><text x="22.9230%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.9459%" y="565" width="0.0796%" height="15" fill="rgb(236,54,3)" fg:x="301" fg:w="1"/><text x="24.1959%" y="575.50"></text></g><g><title>engine::session::Session::close (81 samples, 6.44%)</title><rect x="17.6611%" y="741" width="6.4439%" height="15" fill="rgb(241,173,43)" fg:x="222" fg:w="81"/><text x="17.9111%" y="751.50">engine::..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="24.0255%" y="725" width="0.0796%" height="15" fill="rgb(215,190,9)" fg:x="302" fg:w="1"/><text x="24.2755%" y="735.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="24.0255%" y="709" width="0.0796%" height="15" fill="rgb(242,101,16)" fg:x="302" fg:w="1"/><text x="24.2755%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="24.0255%" y="693" width="0.0796%" height="15" fill="rgb(223,190,21)" fg:x="302" fg:w="1"/><text x="24.2755%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="24.0255%" y="677" width="0.0796%" height="15" fill="rgb(215,228,25)" fg:x="302" fg:w="1"/><text x="24.2755%" y="687.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="24.0255%" y="661" width="0.0796%" height="15" fill="rgb(225,36,22)" fg:x="302" fg:w="1"/><text x="24.2755%" y="671.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="24.1050%" y="709" width="0.1591%" height="15" fill="rgb(251,106,46)" fg:x="303" fg:w="2"/><text x="24.3550%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="24.1050%" y="693" width="0.1591%" height="15" fill="rgb(208,90,1)" fg:x="303" fg:w="2"/><text x="24.3550%" y="703.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="24.1050%" y="677" width="0.1591%" height="15" fill="rgb(243,10,4)" fg:x="303" fg:w="2"/><text x="24.3550%" y="687.50"></text></g><g><title>&lt;plugins_rune::parser::EditActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="24.1846%" y="661" width="0.0796%" height="15" fill="rgb(212,137,27)" fg:x="304" fg:w="1"/><text x="24.4346%" y="671.50"></text></g><g><title>&lt;kernel::model::base::DomainError as core::convert::From&lt;anyhow::Error&gt;&gt;::from (1 samples, 0.08%)</title><rect x="24.1846%" y="645" width="0.0796%" height="15" fill="rgb(231,220,49)" fg:x="304" fg:w="1"/><text x="24.4346%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="24.2641%" y="693" width="0.1591%" height="15" fill="rgb(237,96,20)" fg:x="305" fg:w="2"/><text x="24.5141%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="24.2641%" y="677" width="0.1591%" height="15" fill="rgb(239,229,30)" fg:x="305" fg:w="2"/><text x="24.5141%" y="687.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="24.2641%" y="661" width="0.1591%" height="15" fill="rgb(219,65,33)" fg:x="305" fg:w="2"/><text x="24.5141%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="24.2641%" y="645" width="0.1591%" height="15" fill="rgb(243,134,7)" fg:x="305" fg:w="2"/><text x="24.5141%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="24.2641%" y="629" width="0.1591%" height="15" fill="rgb(216,177,54)" fg:x="305" fg:w="2"/><text x="24.5141%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="24.2641%" y="613" width="0.1591%" height="15" fill="rgb(211,160,20)" fg:x="305" fg:w="2"/><text x="24.5141%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="24.2641%" y="597" width="0.1591%" height="15" fill="rgb(239,85,39)" fg:x="305" fg:w="2"/><text x="24.5141%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="24.2641%" y="581" width="0.1591%" height="15" fill="rgb(232,125,22)" fg:x="305" fg:w="2"/><text x="24.5141%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="24.2641%" y="565" width="0.1591%" height="15" fill="rgb(244,57,34)" fg:x="305" fg:w="2"/><text x="24.5141%" y="575.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="24.2641%" y="549" width="0.1591%" height="15" fill="rgb(214,203,32)" fg:x="305" fg:w="2"/><text x="24.5141%" y="559.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (2 samples, 0.16%)</title><rect x="24.2641%" y="533" width="0.1591%" height="15" fill="rgb(207,58,43)" fg:x="305" fg:w="2"/><text x="24.5141%" y="543.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (2 samples, 0.16%)</title><rect x="24.2641%" y="517" width="0.1591%" height="15" fill="rgb(215,193,15)" fg:x="305" fg:w="2"/><text x="24.5141%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="24.3437%" y="501" width="0.0796%" height="15" fill="rgb(232,15,44)" fg:x="306" fg:w="1"/><text x="24.5937%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="24.3437%" y="485" width="0.0796%" height="15" fill="rgb(212,3,48)" fg:x="306" fg:w="1"/><text x="24.5937%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.3437%" y="469" width="0.0796%" height="15" fill="rgb(218,128,7)" fg:x="306" fg:w="1"/><text x="24.5937%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.3437%" y="453" width="0.0796%" height="15" fill="rgb(226,216,39)" fg:x="306" fg:w="1"/><text x="24.5937%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="24.3437%" y="437" width="0.0796%" height="15" fill="rgb(243,47,51)" fg:x="306" fg:w="1"/><text x="24.5937%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="24.3437%" y="421" width="0.0796%" height="15" fill="rgb(241,183,40)" fg:x="306" fg:w="1"/><text x="24.5937%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="24.3437%" y="405" width="0.0796%" height="15" fill="rgb(231,217,32)" fg:x="306" fg:w="1"/><text x="24.5937%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="24.3437%" y="389" width="0.0796%" height="15" fill="rgb(229,61,38)" fg:x="306" fg:w="1"/><text x="24.5937%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="24.3437%" y="373" width="0.0796%" height="15" fill="rgb(225,210,5)" fg:x="306" fg:w="1"/><text x="24.5937%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="24.3437%" y="357" width="0.0796%" height="15" fill="rgb(231,79,45)" fg:x="306" fg:w="1"/><text x="24.5937%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="24.3437%" y="341" width="0.0796%" height="15" fill="rgb(224,100,7)" fg:x="306" fg:w="1"/><text x="24.5937%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="24.3437%" y="325" width="0.0796%" height="15" fill="rgb(241,198,18)" fg:x="306" fg:w="1"/><text x="24.5937%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.3437%" y="309" width="0.0796%" height="15" fill="rgb(252,97,53)" fg:x="306" fg:w="1"/><text x="24.5937%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="24.3437%" y="293" width="0.0796%" height="15" fill="rgb(220,88,7)" fg:x="306" fg:w="1"/><text x="24.5937%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="24.3437%" y="277" width="0.0796%" height="15" fill="rgb(213,176,14)" fg:x="306" fg:w="1"/><text x="24.5937%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="24.3437%" y="261" width="0.0796%" height="15" fill="rgb(246,73,7)" fg:x="306" fg:w="1"/><text x="24.5937%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="24.3437%" y="245" width="0.0796%" height="15" fill="rgb(245,64,36)" fg:x="306" fg:w="1"/><text x="24.5937%" y="255.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_box (1 samples, 0.08%)</title><rect x="24.4232%" y="693" width="0.0796%" height="15" fill="rgb(245,80,10)" fg:x="307" fg:w="1"/><text x="24.6732%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="24.5028%" y="677" width="0.1591%" height="15" fill="rgb(232,107,50)" fg:x="308" fg:w="2"/><text x="24.7528%" y="687.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="24.6619%" y="677" width="0.0796%" height="15" fill="rgb(253,3,0)" fg:x="310" fg:w="1"/><text x="24.9119%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="24.6619%" y="661" width="0.0796%" height="15" fill="rgb(212,99,53)" fg:x="310" fg:w="1"/><text x="24.9119%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="24.6619%" y="645" width="0.0796%" height="15" fill="rgb(249,111,54)" fg:x="310" fg:w="1"/><text x="24.9119%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (1 samples, 0.08%)</title><rect x="24.7414%" y="677" width="0.0796%" height="15" fill="rgb(249,55,30)" fg:x="311" fg:w="1"/><text x="24.9914%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.7414%" y="661" width="0.0796%" height="15" fill="rgb(237,47,42)" fg:x="311" fg:w="1"/><text x="24.9914%" y="671.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="24.8210%" y="645" width="0.1591%" height="15" fill="rgb(211,20,18)" fg:x="312" fg:w="2"/><text x="25.0710%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="24.9006%" y="629" width="0.0796%" height="15" fill="rgb(231,203,46)" fg:x="313" fg:w="1"/><text x="25.1506%" y="639.50"></text></g><g><title>tracing_core::subscriber::Subscriber::register_callsite (1 samples, 0.08%)</title><rect x="24.9006%" y="613" width="0.0796%" height="15" fill="rgb(237,142,3)" fg:x="313" fg:w="1"/><text x="25.1506%" y="623.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (4 samples, 0.32%)</title><rect x="24.8210%" y="677" width="0.3182%" height="15" fill="rgb(241,107,1)" fg:x="312" fg:w="4"/><text x="25.0710%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (4 samples, 0.32%)</title><rect x="24.8210%" y="661" width="0.3182%" height="15" fill="rgb(229,83,13)" fg:x="312" fg:w="4"/><text x="25.0710%" y="671.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (2 samples, 0.16%)</title><rect x="24.9801%" y="645" width="0.1591%" height="15" fill="rgb(241,91,40)" fg:x="314" fg:w="2"/><text x="25.2301%" y="655.50"></text></g><g><title>tracing_core::dispatcher::get_default (1 samples, 0.08%)</title><rect x="25.1392%" y="677" width="0.0796%" height="15" fill="rgb(225,3,45)" fg:x="316" fg:w="1"/><text x="25.3892%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="25.2983%" y="597" width="0.0796%" height="15" fill="rgb(244,223,14)" fg:x="318" fg:w="1"/><text x="25.5483%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.3779%" y="517" width="0.0796%" height="15" fill="rgb(224,124,37)" fg:x="319" fg:w="1"/><text x="25.6279%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.3779%" y="501" width="0.0796%" height="15" fill="rgb(251,171,30)" fg:x="319" fg:w="1"/><text x="25.6279%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="25.3779%" y="565" width="0.1591%" height="15" fill="rgb(236,46,54)" fg:x="319" fg:w="2"/><text x="25.6279%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="25.3779%" y="549" width="0.1591%" height="15" fill="rgb(245,213,5)" fg:x="319" fg:w="2"/><text x="25.6279%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="25.3779%" y="533" width="0.1591%" height="15" fill="rgb(230,144,27)" fg:x="319" fg:w="2"/><text x="25.6279%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="25.4574%" y="517" width="0.0796%" height="15" fill="rgb(220,86,6)" fg:x="320" fg:w="1"/><text x="25.7074%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.4574%" y="501" width="0.0796%" height="15" fill="rgb(240,20,13)" fg:x="320" fg:w="1"/><text x="25.7074%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="25.5370%" y="501" width="0.1591%" height="15" fill="rgb(217,89,34)" fg:x="321" fg:w="2"/><text x="25.7870%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="25.5370%" y="485" width="0.1591%" height="15" fill="rgb(229,13,5)" fg:x="321" fg:w="2"/><text x="25.7870%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="25.5370%" y="469" width="0.1591%" height="15" fill="rgb(244,67,35)" fg:x="321" fg:w="2"/><text x="25.7870%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.6165%" y="453" width="0.0796%" height="15" fill="rgb(221,40,2)" fg:x="322" fg:w="1"/><text x="25.8665%" y="463.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="25.6961%" y="501" width="0.0796%" height="15" fill="rgb(237,157,21)" fg:x="323" fg:w="1"/><text x="25.9461%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.6961%" y="485" width="0.0796%" height="15" fill="rgb(222,94,11)" fg:x="323" fg:w="1"/><text x="25.9461%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.8552%" y="405" width="0.0796%" height="15" fill="rgb(249,113,6)" fg:x="325" fg:w="1"/><text x="26.1052%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.8552%" y="389" width="0.0796%" height="15" fill="rgb(238,137,36)" fg:x="325" fg:w="1"/><text x="26.1052%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.8552%" y="373" width="0.0796%" height="15" fill="rgb(210,102,26)" fg:x="325" fg:w="1"/><text x="26.1052%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.8552%" y="357" width="0.0796%" height="15" fill="rgb(218,30,30)" fg:x="325" fg:w="1"/><text x="26.1052%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.8552%" y="341" width="0.0796%" height="15" fill="rgb(214,67,26)" fg:x="325" fg:w="1"/><text x="26.1052%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="25.8552%" y="453" width="0.1591%" height="15" fill="rgb(251,9,53)" fg:x="325" fg:w="2"/><text x="26.1052%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="25.8552%" y="437" width="0.1591%" height="15" fill="rgb(228,204,25)" fg:x="325" fg:w="2"/><text x="26.1052%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="25.8552%" y="421" width="0.1591%" height="15" fill="rgb(207,153,8)" fg:x="325" fg:w="2"/><text x="26.1052%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.9348%" y="405" width="0.0796%" height="15" fill="rgb(242,9,16)" fg:x="326" fg:w="1"/><text x="26.1848%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.9348%" y="389" width="0.0796%" height="15" fill="rgb(217,211,10)" fg:x="326" fg:w="1"/><text x="26.1848%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="25.9348%" y="373" width="0.0796%" height="15" fill="rgb(219,228,52)" fg:x="326" fg:w="1"/><text x="26.1848%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.9348%" y="357" width="0.0796%" height="15" fill="rgb(231,92,29)" fg:x="326" fg:w="1"/><text x="26.1848%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.9348%" y="341" width="0.0796%" height="15" fill="rgb(232,8,23)" fg:x="326" fg:w="1"/><text x="26.1848%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="25.9348%" y="325" width="0.0796%" height="15" fill="rgb(216,211,34)" fg:x="326" fg:w="1"/><text x="26.1848%" y="335.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="25.7757%" y="501" width="0.3182%" height="15" fill="rgb(236,151,0)" fg:x="324" fg:w="4"/><text x="26.0257%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="25.7757%" y="485" width="0.3182%" height="15" fill="rgb(209,168,3)" fg:x="324" fg:w="4"/><text x="26.0257%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="25.7757%" y="469" width="0.3182%" height="15" fill="rgb(208,129,28)" fg:x="324" fg:w="4"/><text x="26.0257%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.0143%" y="453" width="0.0796%" height="15" fill="rgb(229,78,22)" fg:x="327" fg:w="1"/><text x="26.2643%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="26.0939%" y="437" width="0.1591%" height="15" fill="rgb(228,187,13)" fg:x="328" fg:w="2"/><text x="26.3439%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.1734%" y="421" width="0.0796%" height="15" fill="rgb(240,119,24)" fg:x="329" fg:w="1"/><text x="26.4234%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.1734%" y="405" width="0.0796%" height="15" fill="rgb(209,194,42)" fg:x="329" fg:w="1"/><text x="26.4234%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.1734%" y="389" width="0.0796%" height="15" fill="rgb(247,200,46)" fg:x="329" fg:w="1"/><text x="26.4234%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.1734%" y="373" width="0.0796%" height="15" fill="rgb(218,76,16)" fg:x="329" fg:w="1"/><text x="26.4234%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.1734%" y="357" width="0.0796%" height="15" fill="rgb(225,21,48)" fg:x="329" fg:w="1"/><text x="26.4234%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.1734%" y="341" width="0.0796%" height="15" fill="rgb(239,223,50)" fg:x="329" fg:w="1"/><text x="26.4234%" y="351.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (12 samples, 0.95%)</title><rect x="25.3779%" y="581" width="0.9547%" height="15" fill="rgb(244,45,21)" fg:x="319" fg:w="12"/><text x="25.6279%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (10 samples, 0.80%)</title><rect x="25.5370%" y="565" width="0.7955%" height="15" fill="rgb(232,33,43)" fg:x="321" fg:w="10"/><text x="25.7870%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (10 samples, 0.80%)</title><rect x="25.5370%" y="549" width="0.7955%" height="15" fill="rgb(209,8,3)" fg:x="321" fg:w="10"/><text x="25.7870%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.80%)</title><rect x="25.5370%" y="533" width="0.7955%" height="15" fill="rgb(214,25,53)" fg:x="321" fg:w="10"/><text x="25.7870%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="25.5370%" y="517" width="0.7955%" height="15" fill="rgb(254,186,54)" fg:x="321" fg:w="10"/><text x="25.7870%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="26.0939%" y="501" width="0.2387%" height="15" fill="rgb(208,174,49)" fg:x="328" fg:w="3"/><text x="26.3439%" y="511.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="26.0939%" y="485" width="0.2387%" height="15" fill="rgb(233,191,51)" fg:x="328" fg:w="3"/><text x="26.3439%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="26.0939%" y="469" width="0.2387%" height="15" fill="rgb(222,134,10)" fg:x="328" fg:w="3"/><text x="26.3439%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="26.0939%" y="453" width="0.2387%" height="15" fill="rgb(230,226,20)" fg:x="328" fg:w="3"/><text x="26.3439%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.2530%" y="437" width="0.0796%" height="15" fill="rgb(251,111,25)" fg:x="330" fg:w="1"/><text x="26.5030%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="26.2530%" y="421" width="0.0796%" height="15" fill="rgb(224,40,46)" fg:x="330" fg:w="1"/><text x="26.5030%" y="431.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (13 samples, 1.03%)</title><rect x="25.3779%" y="597" width="1.0342%" height="15" fill="rgb(236,108,47)" fg:x="319" fg:w="13"/><text x="25.6279%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="26.3325%" y="581" width="0.0796%" height="15" fill="rgb(234,93,0)" fg:x="331" fg:w="1"/><text x="26.5825%" y="591.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="26.5712%" y="357" width="0.1591%" height="15" fill="rgb(224,213,32)" fg:x="334" fg:w="2"/><text x="26.8212%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="26.5712%" y="341" width="0.1591%" height="15" fill="rgb(251,11,48)" fg:x="334" fg:w="2"/><text x="26.8212%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.6508%" y="325" width="0.0796%" height="15" fill="rgb(236,173,5)" fg:x="335" fg:w="1"/><text x="26.9008%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="26.7303%" y="341" width="0.0796%" height="15" fill="rgb(230,95,12)" fg:x="336" fg:w="1"/><text x="26.9803%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.7303%" y="325" width="0.0796%" height="15" fill="rgb(232,209,1)" fg:x="336" fg:w="1"/><text x="26.9803%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.7303%" y="309" width="0.0796%" height="15" fill="rgb(232,6,1)" fg:x="336" fg:w="1"/><text x="26.9803%" y="319.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (5 samples, 0.40%)</title><rect x="26.4916%" y="421" width="0.3978%" height="15" fill="rgb(210,224,50)" fg:x="333" fg:w="5"/><text x="26.7416%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (5 samples, 0.40%)</title><rect x="26.4916%" y="405" width="0.3978%" height="15" fill="rgb(228,127,35)" fg:x="333" fg:w="5"/><text x="26.7416%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (4 samples, 0.32%)</title><rect x="26.5712%" y="389" width="0.3182%" height="15" fill="rgb(245,102,45)" fg:x="334" fg:w="4"/><text x="26.8212%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="26.5712%" y="373" width="0.3182%" height="15" fill="rgb(214,1,49)" fg:x="334" fg:w="4"/><text x="26.8212%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="26.7303%" y="357" width="0.1591%" height="15" fill="rgb(226,163,40)" fg:x="336" fg:w="2"/><text x="26.9803%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="26.8099%" y="341" width="0.0796%" height="15" fill="rgb(239,212,28)" fg:x="337" fg:w="1"/><text x="27.0599%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.8099%" y="325" width="0.0796%" height="15" fill="rgb(220,20,13)" fg:x="337" fg:w="1"/><text x="27.0599%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="26.8099%" y="309" width="0.0796%" height="15" fill="rgb(210,164,35)" fg:x="337" fg:w="1"/><text x="27.0599%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.8099%" y="293" width="0.0796%" height="15" fill="rgb(248,109,41)" fg:x="337" fg:w="1"/><text x="27.0599%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.8099%" y="277" width="0.0796%" height="15" fill="rgb(238,23,50)" fg:x="337" fg:w="1"/><text x="27.0599%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.8099%" y="261" width="0.0796%" height="15" fill="rgb(211,48,49)" fg:x="337" fg:w="1"/><text x="27.0599%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="26.8099%" y="245" width="0.0796%" height="15" fill="rgb(223,36,21)" fg:x="337" fg:w="1"/><text x="27.0599%" y="255.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="26.9690%" y="389" width="0.0796%" height="15" fill="rgb(207,123,46)" fg:x="339" fg:w="1"/><text x="27.2190%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="26.9690%" y="373" width="0.0796%" height="15" fill="rgb(240,218,32)" fg:x="339" fg:w="1"/><text x="27.2190%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.0485%" y="357" width="0.0796%" height="15" fill="rgb(252,5,43)" fg:x="340" fg:w="1"/><text x="27.2985%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.0485%" y="341" width="0.0796%" height="15" fill="rgb(252,84,19)" fg:x="340" fg:w="1"/><text x="27.2985%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.0485%" y="325" width="0.0796%" height="15" fill="rgb(243,152,39)" fg:x="340" fg:w="1"/><text x="27.2985%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.0485%" y="309" width="0.0796%" height="15" fill="rgb(234,160,15)" fg:x="340" fg:w="1"/><text x="27.2985%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="27.1281%" y="357" width="0.0796%" height="15" fill="rgb(237,34,20)" fg:x="341" fg:w="1"/><text x="27.3781%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="27.1281%" y="341" width="0.0796%" height="15" fill="rgb(229,97,13)" fg:x="341" fg:w="1"/><text x="27.3781%" y="351.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="27.2076%" y="357" width="0.0796%" height="15" fill="rgb(234,71,50)" fg:x="342" fg:w="1"/><text x="27.4576%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="27.0485%" y="373" width="0.3978%" height="15" fill="rgb(253,155,4)" fg:x="340" fg:w="5"/><text x="27.2985%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="27.2872%" y="357" width="0.1591%" height="15" fill="rgb(222,185,37)" fg:x="343" fg:w="2"/><text x="27.5372%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="27.2872%" y="341" width="0.1591%" height="15" fill="rgb(251,177,13)" fg:x="343" fg:w="2"/><text x="27.5372%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="27.2872%" y="325" width="0.1591%" height="15" fill="rgb(250,179,40)" fg:x="343" fg:w="2"/><text x="27.5372%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="27.2872%" y="309" width="0.1591%" height="15" fill="rgb(242,44,2)" fg:x="343" fg:w="2"/><text x="27.5372%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="27.2872%" y="293" width="0.1591%" height="15" fill="rgb(216,177,13)" fg:x="343" fg:w="2"/><text x="27.5372%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="27.2872%" y="277" width="0.1591%" height="15" fill="rgb(216,106,43)" fg:x="343" fg:w="2"/><text x="27.5372%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="27.4463%" y="373" width="0.0796%" height="15" fill="rgb(216,183,2)" fg:x="345" fg:w="1"/><text x="27.6963%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.5259%" y="357" width="0.0796%" height="15" fill="rgb(249,75,3)" fg:x="346" fg:w="1"/><text x="27.7759%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.5259%" y="341" width="0.0796%" height="15" fill="rgb(219,67,39)" fg:x="346" fg:w="1"/><text x="27.7759%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="27.5259%" y="325" width="0.0796%" height="15" fill="rgb(253,228,2)" fg:x="346" fg:w="1"/><text x="27.7759%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="27.5259%" y="309" width="0.0796%" height="15" fill="rgb(235,138,27)" fg:x="346" fg:w="1"/><text x="27.7759%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="27.5259%" y="293" width="0.0796%" height="15" fill="rgb(236,97,51)" fg:x="346" fg:w="1"/><text x="27.7759%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.5259%" y="277" width="0.0796%" height="15" fill="rgb(240,80,30)" fg:x="346" fg:w="1"/><text x="27.7759%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.5259%" y="261" width="0.0796%" height="15" fill="rgb(230,178,19)" fg:x="346" fg:w="1"/><text x="27.7759%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="27.5259%" y="245" width="0.0796%" height="15" fill="rgb(210,190,27)" fg:x="346" fg:w="1"/><text x="27.7759%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="27.5259%" y="229" width="0.0796%" height="15" fill="rgb(222,107,31)" fg:x="346" fg:w="1"/><text x="27.7759%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="27.5259%" y="213" width="0.0796%" height="15" fill="rgb(216,127,34)" fg:x="346" fg:w="1"/><text x="27.7759%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="27.5259%" y="197" width="0.0796%" height="15" fill="rgb(234,116,52)" fg:x="346" fg:w="1"/><text x="27.7759%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.5259%" y="181" width="0.0796%" height="15" fill="rgb(222,124,15)" fg:x="346" fg:w="1"/><text x="27.7759%" y="191.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (8 samples, 0.64%)</title><rect x="27.0485%" y="389" width="0.6364%" height="15" fill="rgb(231,179,28)" fg:x="340" fg:w="8"/><text x="27.2985%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (2 samples, 0.16%)</title><rect x="27.5259%" y="373" width="0.1591%" height="15" fill="rgb(226,93,45)" fg:x="346" fg:w="2"/><text x="27.7759%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="27.6054%" y="357" width="0.0796%" height="15" fill="rgb(215,8,51)" fg:x="347" fg:w="1"/><text x="27.8554%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="27.6054%" y="341" width="0.0796%" height="15" fill="rgb(223,106,5)" fg:x="347" fg:w="1"/><text x="27.8554%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="27.6850%" y="389" width="0.0796%" height="15" fill="rgb(250,191,5)" fg:x="348" fg:w="1"/><text x="27.9350%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="27.6850%" y="373" width="0.0796%" height="15" fill="rgb(242,132,44)" fg:x="348" fg:w="1"/><text x="27.9350%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.6850%" y="357" width="0.0796%" height="15" fill="rgb(251,152,29)" fg:x="348" fg:w="1"/><text x="27.9350%" y="367.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="27.7645%" y="389" width="0.2387%" height="15" fill="rgb(218,179,5)" fg:x="349" fg:w="3"/><text x="28.0145%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3 samples, 0.24%)</title><rect x="27.7645%" y="373" width="0.2387%" height="15" fill="rgb(227,67,19)" fg:x="349" fg:w="3"/><text x="28.0145%" y="383.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="27.7645%" y="357" width="0.2387%" height="15" fill="rgb(233,119,31)" fg:x="349" fg:w="3"/><text x="28.0145%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="27.7645%" y="341" width="0.2387%" height="15" fill="rgb(241,120,22)" fg:x="349" fg:w="3"/><text x="28.0145%" y="351.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="27.9236%" y="325" width="0.0796%" height="15" fill="rgb(224,102,30)" fg:x="351" fg:w="1"/><text x="28.1736%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="28.0032%" y="389" width="0.0796%" height="15" fill="rgb(210,164,37)" fg:x="352" fg:w="1"/><text x="28.2532%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.0032%" y="373" width="0.0796%" height="15" fill="rgb(226,191,16)" fg:x="352" fg:w="1"/><text x="28.2532%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.0032%" y="357" width="0.0796%" height="15" fill="rgb(214,40,45)" fg:x="352" fg:w="1"/><text x="28.2532%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.0032%" y="341" width="0.0796%" height="15" fill="rgb(244,29,26)" fg:x="352" fg:w="1"/><text x="28.2532%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="28.0032%" y="325" width="0.0796%" height="15" fill="rgb(216,16,5)" fg:x="352" fg:w="1"/><text x="28.2532%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="28.0032%" y="309" width="0.0796%" height="15" fill="rgb(249,76,35)" fg:x="352" fg:w="1"/><text x="28.2532%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="28.0032%" y="293" width="0.0796%" height="15" fill="rgb(207,11,44)" fg:x="352" fg:w="1"/><text x="28.2532%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.0032%" y="277" width="0.0796%" height="15" fill="rgb(228,190,49)" fg:x="352" fg:w="1"/><text x="28.2532%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.0032%" y="261" width="0.0796%" height="15" fill="rgb(214,173,12)" fg:x="352" fg:w="1"/><text x="28.2532%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="28.0032%" y="245" width="0.0796%" height="15" fill="rgb(218,26,35)" fg:x="352" fg:w="1"/><text x="28.2532%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="28.0032%" y="229" width="0.0796%" height="15" fill="rgb(220,200,19)" fg:x="352" fg:w="1"/><text x="28.2532%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="28.0032%" y="213" width="0.0796%" height="15" fill="rgb(239,95,49)" fg:x="352" fg:w="1"/><text x="28.2532%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="28.0032%" y="197" width="0.0796%" height="15" fill="rgb(235,85,53)" fg:x="352" fg:w="1"/><text x="28.2532%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.0032%" y="181" width="0.0796%" height="15" fill="rgb(233,133,31)" fg:x="352" fg:w="1"/><text x="28.2532%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="28.0827%" y="325" width="0.2387%" height="15" fill="rgb(218,25,20)" fg:x="353" fg:w="3"/><text x="28.3327%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="28.1623%" y="309" width="0.1591%" height="15" fill="rgb(252,210,38)" fg:x="354" fg:w="2"/><text x="28.4123%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="28.1623%" y="293" width="0.1591%" height="15" fill="rgb(242,134,21)" fg:x="354" fg:w="2"/><text x="28.4123%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="28.1623%" y="277" width="0.1591%" height="15" fill="rgb(213,28,48)" fg:x="354" fg:w="2"/><text x="28.4123%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="28.1623%" y="261" width="0.1591%" height="15" fill="rgb(250,196,2)" fg:x="354" fg:w="2"/><text x="28.4123%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="28.1623%" y="245" width="0.1591%" height="15" fill="rgb(227,5,17)" fg:x="354" fg:w="2"/><text x="28.4123%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="28.1623%" y="229" width="0.1591%" height="15" fill="rgb(221,226,24)" fg:x="354" fg:w="2"/><text x="28.4123%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="28.1623%" y="213" width="0.1591%" height="15" fill="rgb(211,5,48)" fg:x="354" fg:w="2"/><text x="28.4123%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="28.1623%" y="197" width="0.1591%" height="15" fill="rgb(219,150,6)" fg:x="354" fg:w="2"/><text x="28.4123%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="28.1623%" y="181" width="0.1591%" height="15" fill="rgb(251,46,16)" fg:x="354" fg:w="2"/><text x="28.4123%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="28.1623%" y="165" width="0.1591%" height="15" fill="rgb(220,204,40)" fg:x="354" fg:w="2"/><text x="28.4123%" y="175.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="28.1623%" y="149" width="0.1591%" height="15" fill="rgb(211,85,2)" fg:x="354" fg:w="2"/><text x="28.4123%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.2418%" y="133" width="0.0796%" height="15" fill="rgb(229,17,7)" fg:x="355" fg:w="1"/><text x="28.4918%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="28.0827%" y="341" width="0.3182%" height="15" fill="rgb(239,72,28)" fg:x="353" fg:w="4"/><text x="28.3327%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.3214%" y="325" width="0.0796%" height="15" fill="rgb(230,47,54)" fg:x="356" fg:w="1"/><text x="28.5714%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="28.0827%" y="357" width="0.3978%" height="15" fill="rgb(214,50,8)" fg:x="353" fg:w="5"/><text x="28.3327%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.4010%" y="341" width="0.0796%" height="15" fill="rgb(216,198,43)" fg:x="357" fg:w="1"/><text x="28.6510%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.4010%" y="325" width="0.0796%" height="15" fill="rgb(234,20,35)" fg:x="357" fg:w="1"/><text x="28.6510%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="28.4010%" y="309" width="0.0796%" height="15" fill="rgb(254,45,19)" fg:x="357" fg:w="1"/><text x="28.6510%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="28.4010%" y="293" width="0.0796%" height="15" fill="rgb(219,14,44)" fg:x="357" fg:w="1"/><text x="28.6510%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="28.4010%" y="277" width="0.0796%" height="15" fill="rgb(217,220,26)" fg:x="357" fg:w="1"/><text x="28.6510%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.4010%" y="261" width="0.0796%" height="15" fill="rgb(213,158,28)" fg:x="357" fg:w="1"/><text x="28.6510%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.4010%" y="245" width="0.0796%" height="15" fill="rgb(252,51,52)" fg:x="357" fg:w="1"/><text x="28.6510%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="28.4010%" y="229" width="0.0796%" height="15" fill="rgb(246,89,16)" fg:x="357" fg:w="1"/><text x="28.6510%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="28.4010%" y="213" width="0.0796%" height="15" fill="rgb(216,158,49)" fg:x="357" fg:w="1"/><text x="28.6510%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="28.4010%" y="197" width="0.0796%" height="15" fill="rgb(236,107,19)" fg:x="357" fg:w="1"/><text x="28.6510%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="28.4010%" y="181" width="0.0796%" height="15" fill="rgb(228,185,30)" fg:x="357" fg:w="1"/><text x="28.6510%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.4010%" y="165" width="0.0796%" height="15" fill="rgb(246,134,8)" fg:x="357" fg:w="1"/><text x="28.6510%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.4805%" y="357" width="0.0796%" height="15" fill="rgb(214,143,50)" fg:x="358" fg:w="1"/><text x="28.7305%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="28.5601%" y="357" width="0.0796%" height="15" fill="rgb(228,75,8)" fg:x="359" fg:w="1"/><text x="28.8101%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.5601%" y="341" width="0.0796%" height="15" fill="rgb(207,175,4)" fg:x="359" fg:w="1"/><text x="28.8101%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::gid (12 samples, 0.95%)</title><rect x="28.0827%" y="389" width="0.9547%" height="15" fill="rgb(205,108,24)" fg:x="353" fg:w="12"/><text x="28.3327%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (12 samples, 0.95%)</title><rect x="28.0827%" y="373" width="0.9547%" height="15" fill="rgb(244,120,49)" fg:x="353" fg:w="12"/><text x="28.3327%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="28.6396%" y="357" width="0.3978%" height="15" fill="rgb(223,47,38)" fg:x="360" fg:w="5"/><text x="28.8896%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="28.6396%" y="341" width="0.3978%" height="15" fill="rgb(229,179,11)" fg:x="360" fg:w="5"/><text x="28.8896%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="28.7192%" y="325" width="0.3182%" height="15" fill="rgb(231,122,1)" fg:x="361" fg:w="4"/><text x="28.9692%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="28.7192%" y="309" width="0.3182%" height="15" fill="rgb(245,119,9)" fg:x="361" fg:w="4"/><text x="28.9692%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="28.7987%" y="293" width="0.2387%" height="15" fill="rgb(241,163,25)" fg:x="362" fg:w="3"/><text x="29.0487%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.8783%" y="277" width="0.1591%" height="15" fill="rgb(217,214,3)" fg:x="363" fg:w="2"/><text x="29.1283%" y="287.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="29.0374%" y="341" width="0.1591%" height="15" fill="rgb(240,86,28)" fg:x="365" fg:w="2"/><text x="29.2874%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="29.0374%" y="325" width="0.1591%" height="15" fill="rgb(215,47,9)" fg:x="365" fg:w="2"/><text x="29.2874%" y="335.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="29.0374%" y="309" width="0.1591%" height="15" fill="rgb(252,25,45)" fg:x="365" fg:w="2"/><text x="29.2874%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="29.0374%" y="293" width="0.1591%" height="15" fill="rgb(251,164,9)" fg:x="365" fg:w="2"/><text x="29.2874%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="29.0374%" y="277" width="0.1591%" height="15" fill="rgb(233,194,0)" fg:x="365" fg:w="2"/><text x="29.2874%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="29.0374%" y="261" width="0.1591%" height="15" fill="rgb(249,111,24)" fg:x="365" fg:w="2"/><text x="29.2874%" y="271.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="29.0374%" y="245" width="0.1591%" height="15" fill="rgb(250,223,3)" fg:x="365" fg:w="2"/><text x="29.2874%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="29.0374%" y="229" width="0.1591%" height="15" fill="rgb(236,178,37)" fg:x="365" fg:w="2"/><text x="29.2874%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="29.0374%" y="213" width="0.1591%" height="15" fill="rgb(241,158,50)" fg:x="365" fg:w="2"/><text x="29.2874%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="29.0374%" y="197" width="0.1591%" height="15" fill="rgb(213,121,41)" fg:x="365" fg:w="2"/><text x="29.2874%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="29.0374%" y="181" width="0.1591%" height="15" fill="rgb(240,92,3)" fg:x="365" fg:w="2"/><text x="29.2874%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="29.0374%" y="165" width="0.1591%" height="15" fill="rgb(205,123,3)" fg:x="365" fg:w="2"/><text x="29.2874%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="29.0374%" y="149" width="0.1591%" height="15" fill="rgb(205,97,47)" fg:x="365" fg:w="2"/><text x="29.2874%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.16%)</title><rect x="29.0374%" y="133" width="0.1591%" height="15" fill="rgb(247,152,14)" fg:x="365" fg:w="2"/><text x="29.2874%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="29.0374%" y="117" width="0.1591%" height="15" fill="rgb(248,195,53)" fg:x="365" fg:w="2"/><text x="29.2874%" y="127.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="29.0374%" y="101" width="0.1591%" height="15" fill="rgb(226,201,16)" fg:x="365" fg:w="2"/><text x="29.2874%" y="111.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="29.1965%" y="325" width="0.0796%" height="15" fill="rgb(205,98,0)" fg:x="367" fg:w="1"/><text x="29.4465%" y="335.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="29.1965%" y="309" width="0.0796%" height="15" fill="rgb(214,191,48)" fg:x="367" fg:w="1"/><text x="29.4465%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (4 samples, 0.32%)</title><rect x="29.4352%" y="245" width="0.3182%" height="15" fill="rgb(237,112,39)" fg:x="370" fg:w="4"/><text x="29.6852%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (3 samples, 0.24%)</title><rect x="29.5147%" y="229" width="0.2387%" height="15" fill="rgb(247,203,27)" fg:x="371" fg:w="3"/><text x="29.7647%" y="239.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="29.6738%" y="213" width="0.0796%" height="15" fill="rgb(235,124,28)" fg:x="373" fg:w="1"/><text x="29.9238%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.7534%" y="229" width="0.0796%" height="15" fill="rgb(208,207,46)" fg:x="374" fg:w="1"/><text x="30.0034%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="29.2761%" y="309" width="0.6364%" height="15" fill="rgb(234,176,4)" fg:x="368" fg:w="8"/><text x="29.5261%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="29.2761%" y="293" width="0.6364%" height="15" fill="rgb(230,133,28)" fg:x="368" fg:w="8"/><text x="29.5261%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (8 samples, 0.64%)</title><rect x="29.2761%" y="277" width="0.6364%" height="15" fill="rgb(211,137,40)" fg:x="368" fg:w="8"/><text x="29.5261%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (7 samples, 0.56%)</title><rect x="29.3556%" y="261" width="0.5569%" height="15" fill="rgb(254,35,13)" fg:x="369" fg:w="7"/><text x="29.6056%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="29.7534%" y="245" width="0.1591%" height="15" fill="rgb(225,49,51)" fg:x="374" fg:w="2"/><text x="30.0034%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="29.8329%" y="229" width="0.0796%" height="15" fill="rgb(251,10,15)" fg:x="375" fg:w="1"/><text x="30.0829%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.9125%" y="293" width="0.0796%" height="15" fill="rgb(228,207,15)" fg:x="376" fg:w="1"/><text x="30.1625%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.9920%" y="277" width="0.0796%" height="15" fill="rgb(241,99,19)" fg:x="377" fg:w="1"/><text x="30.2420%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="29.9920%" y="261" width="0.0796%" height="15" fill="rgb(207,104,49)" fg:x="377" fg:w="1"/><text x="30.2420%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.9920%" y="245" width="0.0796%" height="15" fill="rgb(234,99,18)" fg:x="377" fg:w="1"/><text x="30.2420%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="29.9125%" y="309" width="0.2387%" height="15" fill="rgb(213,191,49)" fg:x="376" fg:w="3"/><text x="30.1625%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="29.9920%" y="293" width="0.1591%" height="15" fill="rgb(210,226,19)" fg:x="377" fg:w="2"/><text x="30.2420%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="30.0716%" y="277" width="0.0796%" height="15" fill="rgb(229,97,18)" fg:x="378" fg:w="1"/><text x="30.3216%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="30.3103%" y="261" width="0.1591%" height="15" fill="rgb(211,167,15)" fg:x="381" fg:w="2"/><text x="30.5603%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.3898%" y="245" width="0.0796%" height="15" fill="rgb(210,169,34)" fg:x="382" fg:w="1"/><text x="30.6398%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="30.3898%" y="229" width="0.0796%" height="15" fill="rgb(241,121,31)" fg:x="382" fg:w="1"/><text x="30.6398%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.3898%" y="213" width="0.0796%" height="15" fill="rgb(232,40,11)" fg:x="382" fg:w="1"/><text x="30.6398%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="30.4694%" y="261" width="0.0796%" height="15" fill="rgb(205,86,26)" fg:x="383" fg:w="1"/><text x="30.7194%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.7080%" y="229" width="0.0796%" height="15" fill="rgb(231,126,28)" fg:x="386" fg:w="1"/><text x="30.9580%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.88%)</title><rect x="30.7876%" y="229" width="0.8751%" height="15" fill="rgb(219,221,18)" fg:x="387" fg:w="11"/><text x="31.0376%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="31.5036%" y="213" width="0.1591%" height="15" fill="rgb(211,40,0)" fg:x="396" fg:w="2"/><text x="31.7536%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.03%)</title><rect x="30.7080%" y="245" width="1.0342%" height="15" fill="rgb(239,85,43)" fg:x="386" fg:w="13"/><text x="30.9580%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="31.6627%" y="229" width="0.0796%" height="15" fill="rgb(231,55,21)" fg:x="398" fg:w="1"/><text x="31.9127%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="31.7422%" y="229" width="0.1591%" height="15" fill="rgb(225,184,43)" fg:x="399" fg:w="2"/><text x="31.9922%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="31.8218%" y="213" width="0.0796%" height="15" fill="rgb(251,158,41)" fg:x="400" fg:w="1"/><text x="32.0718%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="31.7422%" y="245" width="0.2387%" height="15" fill="rgb(234,159,37)" fg:x="399" fg:w="3"/><text x="31.9922%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="31.9014%" y="229" width="0.0796%" height="15" fill="rgb(216,204,22)" fg:x="401" fg:w="1"/><text x="32.1514%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="31.9809%" y="245" width="0.0796%" height="15" fill="rgb(214,17,3)" fg:x="402" fg:w="1"/><text x="32.2309%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.3787%" y="181" width="0.0796%" height="15" fill="rgb(212,111,17)" fg:x="407" fg:w="1"/><text x="32.6287%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="32.4582%" y="181" width="0.0796%" height="15" fill="rgb(221,157,24)" fg:x="408" fg:w="1"/><text x="32.7082%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.4582%" y="165" width="0.0796%" height="15" fill="rgb(252,16,13)" fg:x="408" fg:w="1"/><text x="32.7082%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.4582%" y="149" width="0.0796%" height="15" fill="rgb(221,62,2)" fg:x="408" fg:w="1"/><text x="32.7082%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.4582%" y="133" width="0.0796%" height="15" fill="rgb(247,87,22)" fg:x="408" fg:w="1"/><text x="32.7082%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="32.5378%" y="181" width="0.3182%" height="15" fill="rgb(215,73,9)" fg:x="409" fg:w="4"/><text x="32.7878%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="32.6969%" y="165" width="0.1591%" height="15" fill="rgb(207,175,33)" fg:x="411" fg:w="2"/><text x="32.9469%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="32.6969%" y="149" width="0.1591%" height="15" fill="rgb(243,129,54)" fg:x="411" fg:w="2"/><text x="32.9469%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="32.7765%" y="133" width="0.0796%" height="15" fill="rgb(227,119,45)" fg:x="412" fg:w="1"/><text x="33.0265%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (62 samples, 4.93%)</title><rect x="32.8560%" y="181" width="4.9324%" height="15" fill="rgb(205,109,36)" fg:x="413" fg:w="62"/><text x="33.1060%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (62 samples, 4.93%)</title><rect x="32.8560%" y="165" width="4.9324%" height="15" fill="rgb(205,6,39)" fg:x="413" fg:w="62"/><text x="33.1060%" y="175.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (62 samples, 4.93%)</title><rect x="32.8560%" y="149" width="4.9324%" height="15" fill="rgb(221,32,16)" fg:x="413" fg:w="62"/><text x="33.1060%" y="159.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="37.7884%" y="181" width="0.1591%" height="15" fill="rgb(228,144,50)" fg:x="475" fg:w="2"/><text x="38.0384%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 5.97%)</title><rect x="32.0605%" y="229" width="5.9666%" height="15" fill="rgb(229,201,53)" fg:x="403" fg:w="75"/><text x="32.3105%" y="239.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (75 samples, 5.97%)</title><rect x="32.0605%" y="213" width="5.9666%" height="15" fill="rgb(249,153,27)" fg:x="403" fg:w="75"/><text x="32.3105%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (75 samples, 5.97%)</title><rect x="32.0605%" y="197" width="5.9666%" height="15" fill="rgb(227,106,25)" fg:x="403" fg:w="75"/><text x="32.3105%" y="207.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="37.9475%" y="181" width="0.0796%" height="15" fill="rgb(230,65,29)" fg:x="477" fg:w="1"/><text x="38.1975%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.0270%" y="229" width="0.0796%" height="15" fill="rgb(221,57,46)" fg:x="478" fg:w="1"/><text x="38.2770%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.2657%" y="213" width="0.0796%" height="15" fill="rgb(229,161,17)" fg:x="481" fg:w="1"/><text x="38.5157%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="38.3453%" y="213" width="0.0796%" height="15" fill="rgb(222,213,11)" fg:x="482" fg:w="1"/><text x="38.5953%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="38.4248%" y="213" width="0.2387%" height="15" fill="rgb(235,35,13)" fg:x="483" fg:w="3"/><text x="38.6748%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.5839%" y="197" width="0.0796%" height="15" fill="rgb(233,158,34)" fg:x="485" fg:w="1"/><text x="38.8339%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.5839%" y="181" width="0.0796%" height="15" fill="rgb(215,151,48)" fg:x="485" fg:w="1"/><text x="38.8339%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.5839%" y="165" width="0.0796%" height="15" fill="rgb(229,84,14)" fg:x="485" fg:w="1"/><text x="38.8339%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="38.1066%" y="229" width="0.6364%" height="15" fill="rgb(229,68,14)" fg:x="479" fg:w="8"/><text x="38.3566%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="38.6635%" y="213" width="0.0796%" height="15" fill="rgb(243,106,26)" fg:x="486" fg:w="1"/><text x="38.9135%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (85 samples, 6.76%)</title><rect x="32.0605%" y="245" width="6.7621%" height="15" fill="rgb(206,45,38)" fg:x="403" fg:w="85"/><text x="32.3105%" y="255.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="38.7430%" y="229" width="0.0796%" height="15" fill="rgb(226,6,15)" fg:x="487" fg:w="1"/><text x="38.9930%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="38.7430%" y="213" width="0.0796%" height="15" fill="rgb(232,22,54)" fg:x="487" fg:w="1"/><text x="38.9930%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.7430%" y="197" width="0.0796%" height="15" fill="rgb(229,222,32)" fg:x="487" fg:w="1"/><text x="38.9930%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (106 samples, 8.43%)</title><rect x="30.5489%" y="261" width="8.4328%" height="15" fill="rgb(228,62,29)" fg:x="384" fg:w="106"/><text x="30.7989%" y="271.50">regex_automa..</text></g><g><title>regex_automata::util::prefilter::suffixes (2 samples, 0.16%)</title><rect x="38.8226%" y="245" width="0.1591%" height="15" fill="rgb(251,103,34)" fg:x="488" fg:w="2"/><text x="39.0726%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="38.9817%" y="213" width="0.0796%" height="15" fill="rgb(233,12,30)" fg:x="490" fg:w="1"/><text x="39.2317%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="39.0613%" y="213" width="0.0796%" height="15" fill="rgb(238,52,0)" fg:x="491" fg:w="1"/><text x="39.3113%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="39.0613%" y="197" width="0.0796%" height="15" fill="rgb(223,98,5)" fg:x="491" fg:w="1"/><text x="39.3113%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="39.0613%" y="181" width="0.0796%" height="15" fill="rgb(228,75,37)" fg:x="491" fg:w="1"/><text x="39.3113%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="38.9817%" y="261" width="0.3182%" height="15" fill="rgb(205,115,49)" fg:x="490" fg:w="4"/><text x="39.2317%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="38.9817%" y="245" width="0.3182%" height="15" fill="rgb(250,154,43)" fg:x="490" fg:w="4"/><text x="39.2317%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="38.9817%" y="229" width="0.3182%" height="15" fill="rgb(226,43,29)" fg:x="490" fg:w="4"/><text x="39.2317%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="39.1408%" y="213" width="0.1591%" height="15" fill="rgb(249,228,39)" fg:x="492" fg:w="2"/><text x="39.3908%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="39.1408%" y="197" width="0.1591%" height="15" fill="rgb(216,79,43)" fg:x="492" fg:w="2"/><text x="39.3908%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="39.1408%" y="181" width="0.1591%" height="15" fill="rgb(228,95,12)" fg:x="492" fg:w="2"/><text x="39.3908%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="39.1408%" y="165" width="0.1591%" height="15" fill="rgb(249,221,15)" fg:x="492" fg:w="2"/><text x="39.3908%" y="175.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (116 samples, 9.23%)</title><rect x="30.1512%" y="293" width="9.2283%" height="15" fill="rgb(233,34,13)" fg:x="379" fg:w="116"/><text x="30.4012%" y="303.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (116 samples, 9.23%)</title><rect x="30.1512%" y="277" width="9.2283%" height="15" fill="rgb(214,103,39)" fg:x="379" fg:w="116"/><text x="30.4012%" y="287.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="39.2999%" y="261" width="0.0796%" height="15" fill="rgb(251,126,39)" fg:x="494" fg:w="1"/><text x="39.5499%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="39.2999%" y="245" width="0.0796%" height="15" fill="rgb(214,216,36)" fg:x="494" fg:w="1"/><text x="39.5499%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="39.2999%" y="229" width="0.0796%" height="15" fill="rgb(220,221,8)" fg:x="494" fg:w="1"/><text x="39.5499%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.2999%" y="213" width="0.0796%" height="15" fill="rgb(240,216,3)" fg:x="494" fg:w="1"/><text x="39.5499%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.2999%" y="197" width="0.0796%" height="15" fill="rgb(232,218,17)" fg:x="494" fg:w="1"/><text x="39.5499%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.2999%" y="181" width="0.0796%" height="15" fill="rgb(229,163,45)" fg:x="494" fg:w="1"/><text x="39.5499%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (117 samples, 9.31%)</title><rect x="30.1512%" y="309" width="9.3079%" height="15" fill="rgb(231,110,42)" fg:x="379" fg:w="117"/><text x="30.4012%" y="319.50">regex::regex:..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="39.3795%" y="293" width="0.0796%" height="15" fill="rgb(208,170,48)" fg:x="495" fg:w="1"/><text x="39.6295%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.0159%" y="229" width="0.0796%" height="15" fill="rgb(239,116,25)" fg:x="503" fg:w="1"/><text x="40.2659%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.0159%" y="213" width="0.0796%" height="15" fill="rgb(219,200,50)" fg:x="503" fg:w="1"/><text x="40.2659%" y="223.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="40.0159%" y="197" width="0.0796%" height="15" fill="rgb(245,200,0)" fg:x="503" fg:w="1"/><text x="40.2659%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.0955%" y="229" width="0.0796%" height="15" fill="rgb(245,119,33)" fg:x="504" fg:w="1"/><text x="40.3455%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.0955%" y="213" width="0.0796%" height="15" fill="rgb(231,125,12)" fg:x="504" fg:w="1"/><text x="40.3455%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.0955%" y="197" width="0.0796%" height="15" fill="rgb(216,96,41)" fg:x="504" fg:w="1"/><text x="40.3455%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.80%)</title><rect x="39.4590%" y="261" width="0.7955%" height="15" fill="rgb(248,43,45)" fg:x="496" fg:w="10"/><text x="39.7090%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.80%)</title><rect x="39.4590%" y="245" width="0.7955%" height="15" fill="rgb(217,222,7)" fg:x="496" fg:w="10"/><text x="39.7090%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.1750%" y="229" width="0.0796%" height="15" fill="rgb(233,28,6)" fg:x="505" fg:w="1"/><text x="40.4250%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (140 samples, 11.14%)</title><rect x="29.2761%" y="325" width="11.1376%" height="15" fill="rgb(231,218,15)" fg:x="368" fg:w="140"/><text x="29.5261%" y="335.50">indefinite::help..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.95%)</title><rect x="39.4590%" y="309" width="0.9547%" height="15" fill="rgb(226,171,48)" fg:x="496" fg:w="12"/><text x="39.7090%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.95%)</title><rect x="39.4590%" y="293" width="0.9547%" height="15" fill="rgb(235,201,9)" fg:x="496" fg:w="12"/><text x="39.7090%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.95%)</title><rect x="39.4590%" y="277" width="0.9547%" height="15" fill="rgb(217,80,15)" fg:x="496" fg:w="12"/><text x="39.7090%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (2 samples, 0.16%)</title><rect x="40.2546%" y="261" width="0.1591%" height="15" fill="rgb(219,152,8)" fg:x="506" fg:w="2"/><text x="40.5046%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="40.3341%" y="245" width="0.0796%" height="15" fill="rgb(243,107,38)" fg:x="507" fg:w="1"/><text x="40.5841%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.3341%" y="229" width="0.0796%" height="15" fill="rgb(231,17,5)" fg:x="507" fg:w="1"/><text x="40.5841%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="40.4137%" y="261" width="0.0796%" height="15" fill="rgb(209,25,54)" fg:x="508" fg:w="1"/><text x="40.6637%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="40.4137%" y="245" width="0.0796%" height="15" fill="rgb(219,0,2)" fg:x="508" fg:w="1"/><text x="40.6637%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="40.4137%" y="277" width="0.1591%" height="15" fill="rgb(246,9,5)" fg:x="508" fg:w="2"/><text x="40.6637%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="40.4932%" y="261" width="0.0796%" height="15" fill="rgb(226,159,4)" fg:x="509" fg:w="1"/><text x="40.7432%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="40.4932%" y="245" width="0.0796%" height="15" fill="rgb(219,175,34)" fg:x="509" fg:w="1"/><text x="40.7432%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.4932%" y="229" width="0.0796%" height="15" fill="rgb(236,10,46)" fg:x="509" fg:w="1"/><text x="40.7432%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.4932%" y="213" width="0.0796%" height="15" fill="rgb(240,211,16)" fg:x="509" fg:w="1"/><text x="40.7432%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="40.4137%" y="309" width="0.3182%" height="15" fill="rgb(205,3,43)" fg:x="508" fg:w="4"/><text x="40.6637%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="40.4137%" y="293" width="0.3182%" height="15" fill="rgb(245,7,22)" fg:x="508" fg:w="4"/><text x="40.6637%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="40.5728%" y="277" width="0.1591%" height="15" fill="rgb(239,132,32)" fg:x="510" fg:w="2"/><text x="40.8228%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="40.5728%" y="261" width="0.1591%" height="15" fill="rgb(228,202,34)" fg:x="510" fg:w="2"/><text x="40.8228%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.6523%" y="245" width="0.0796%" height="15" fill="rgb(254,200,22)" fg:x="511" fg:w="1"/><text x="40.9023%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="40.7319%" y="261" width="0.0796%" height="15" fill="rgb(219,10,39)" fg:x="512" fg:w="1"/><text x="40.9819%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="40.7319%" y="245" width="0.0796%" height="15" fill="rgb(226,210,39)" fg:x="512" fg:w="1"/><text x="40.9819%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="40.7319%" y="293" width="0.1591%" height="15" fill="rgb(208,219,16)" fg:x="512" fg:w="2"/><text x="40.9819%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="40.7319%" y="277" width="0.1591%" height="15" fill="rgb(216,158,51)" fg:x="512" fg:w="2"/><text x="40.9819%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="40.8115%" y="261" width="0.0796%" height="15" fill="rgb(233,14,44)" fg:x="513" fg:w="1"/><text x="41.0615%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.8115%" y="245" width="0.0796%" height="15" fill="rgb(237,97,39)" fg:x="513" fg:w="1"/><text x="41.0615%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.8115%" y="229" width="0.0796%" height="15" fill="rgb(218,198,43)" fg:x="513" fg:w="1"/><text x="41.0615%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (3 samples, 0.24%)</title><rect x="40.7319%" y="309" width="0.2387%" height="15" fill="rgb(231,104,20)" fg:x="512" fg:w="3"/><text x="40.9819%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="40.8910%" y="293" width="0.0796%" height="15" fill="rgb(254,36,13)" fg:x="514" fg:w="1"/><text x="41.1410%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="40.8910%" y="277" width="0.0796%" height="15" fill="rgb(248,14,50)" fg:x="514" fg:w="1"/><text x="41.1410%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="40.8910%" y="261" width="0.0796%" height="15" fill="rgb(217,107,29)" fg:x="514" fg:w="1"/><text x="41.1410%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="40.8910%" y="245" width="0.0796%" height="15" fill="rgb(251,169,33)" fg:x="514" fg:w="1"/><text x="41.1410%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="40.8910%" y="229" width="0.0796%" height="15" fill="rgb(217,108,32)" fg:x="514" fg:w="1"/><text x="41.1410%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="40.8910%" y="213" width="0.0796%" height="15" fill="rgb(219,66,42)" fg:x="514" fg:w="1"/><text x="41.1410%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="41.1297%" y="261" width="0.1591%" height="15" fill="rgb(206,180,7)" fg:x="517" fg:w="2"/><text x="41.3797%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="41.1297%" y="245" width="0.1591%" height="15" fill="rgb(208,226,31)" fg:x="517" fg:w="2"/><text x="41.3797%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.2092%" y="229" width="0.0796%" height="15" fill="rgb(218,26,49)" fg:x="518" fg:w="1"/><text x="41.4592%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.2888%" y="261" width="0.0796%" height="15" fill="rgb(233,197,48)" fg:x="519" fg:w="1"/><text x="41.5388%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="41.3683%" y="261" width="0.1591%" height="15" fill="rgb(252,181,51)" fg:x="520" fg:w="2"/><text x="41.6183%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="41.3683%" y="245" width="0.1591%" height="15" fill="rgb(253,90,19)" fg:x="520" fg:w="2"/><text x="41.6183%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="41.4479%" y="229" width="0.0796%" height="15" fill="rgb(215,171,30)" fg:x="521" fg:w="1"/><text x="41.6979%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.4479%" y="213" width="0.0796%" height="15" fill="rgb(214,222,9)" fg:x="521" fg:w="1"/><text x="41.6979%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="41.4479%" y="197" width="0.0796%" height="15" fill="rgb(223,3,22)" fg:x="521" fg:w="1"/><text x="41.6979%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.4479%" y="181" width="0.0796%" height="15" fill="rgb(225,196,46)" fg:x="521" fg:w="1"/><text x="41.6979%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.4479%" y="165" width="0.0796%" height="15" fill="rgb(209,110,37)" fg:x="521" fg:w="1"/><text x="41.6979%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.4479%" y="149" width="0.0796%" height="15" fill="rgb(249,89,12)" fg:x="521" fg:w="1"/><text x="41.6979%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.03%)</title><rect x="41.6866%" y="229" width="1.0342%" height="15" fill="rgb(226,27,33)" fg:x="524" fg:w="13"/><text x="41.9366%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="42.5617%" y="213" width="0.1591%" height="15" fill="rgb(213,82,22)" fg:x="535" fg:w="2"/><text x="42.8117%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.19%)</title><rect x="41.6070%" y="245" width="1.1933%" height="15" fill="rgb(248,140,0)" fg:x="523" fg:w="15"/><text x="41.8570%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="42.7208%" y="229" width="0.0796%" height="15" fill="rgb(228,106,3)" fg:x="537" fg:w="1"/><text x="42.9708%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="42.8003%" y="229" width="0.3182%" height="15" fill="rgb(209,23,37)" fg:x="538" fg:w="4"/><text x="43.0503%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="43.1981%" y="197" width="0.0796%" height="15" fill="rgb(241,93,50)" fg:x="543" fg:w="1"/><text x="43.4481%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="42.8003%" y="245" width="0.5569%" height="15" fill="rgb(253,46,43)" fg:x="538" fg:w="7"/><text x="43.0503%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (3 samples, 0.24%)</title><rect x="43.1185%" y="229" width="0.2387%" height="15" fill="rgb(226,206,43)" fg:x="542" fg:w="3"/><text x="43.3685%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (3 samples, 0.24%)</title><rect x="43.1185%" y="213" width="0.2387%" height="15" fill="rgb(217,54,7)" fg:x="542" fg:w="3"/><text x="43.3685%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="43.2776%" y="197" width="0.0796%" height="15" fill="rgb(223,5,52)" fg:x="544" fg:w="1"/><text x="43.5276%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.4368%" y="213" width="0.0796%" height="15" fill="rgb(206,52,46)" fg:x="546" fg:w="1"/><text x="43.6868%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="43.5163%" y="213" width="0.1591%" height="15" fill="rgb(253,136,11)" fg:x="547" fg:w="2"/><text x="43.7663%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.5163%" y="197" width="0.1591%" height="15" fill="rgb(208,106,33)" fg:x="547" fg:w="2"/><text x="43.7663%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.5959%" y="181" width="0.0796%" height="15" fill="rgb(206,54,4)" fg:x="548" fg:w="1"/><text x="43.8459%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="43.6754%" y="213" width="0.1591%" height="15" fill="rgb(213,3,15)" fg:x="549" fg:w="2"/><text x="43.9254%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="43.6754%" y="197" width="0.1591%" height="15" fill="rgb(252,211,39)" fg:x="549" fg:w="2"/><text x="43.9254%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.6754%" y="181" width="0.1591%" height="15" fill="rgb(223,6,36)" fg:x="549" fg:w="2"/><text x="43.9254%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.7550%" y="165" width="0.0796%" height="15" fill="rgb(252,169,45)" fg:x="550" fg:w="1"/><text x="44.0050%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="43.8345%" y="213" width="0.1591%" height="15" fill="rgb(212,48,26)" fg:x="551" fg:w="2"/><text x="44.0845%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="43.8345%" y="197" width="0.1591%" height="15" fill="rgb(251,102,48)" fg:x="551" fg:w="2"/><text x="44.0845%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="43.9141%" y="181" width="0.0796%" height="15" fill="rgb(243,208,16)" fg:x="552" fg:w="1"/><text x="44.1641%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.9141%" y="165" width="0.0796%" height="15" fill="rgb(219,96,24)" fg:x="552" fg:w="1"/><text x="44.1641%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.0732%" y="181" width="0.0796%" height="15" fill="rgb(219,33,29)" fg:x="554" fg:w="1"/><text x="44.3232%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (15 samples, 1.19%)</title><rect x="43.3572%" y="245" width="1.1933%" height="15" fill="rgb(223,176,5)" fg:x="545" fg:w="15"/><text x="43.6072%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (15 samples, 1.19%)</title><rect x="43.3572%" y="229" width="1.1933%" height="15" fill="rgb(228,140,14)" fg:x="545" fg:w="15"/><text x="43.6072%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (7 samples, 0.56%)</title><rect x="43.9936%" y="213" width="0.5569%" height="15" fill="rgb(217,179,31)" fg:x="553" fg:w="7"/><text x="44.2436%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (7 samples, 0.56%)</title><rect x="43.9936%" y="197" width="0.5569%" height="15" fill="rgb(230,9,30)" fg:x="553" fg:w="7"/><text x="44.2436%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="44.1527%" y="181" width="0.3978%" height="15" fill="rgb(230,136,20)" fg:x="555" fg:w="5"/><text x="44.4027%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="44.5505%" y="245" width="0.1591%" height="15" fill="rgb(215,210,22)" fg:x="560" fg:w="2"/><text x="44.8005%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="44.6301%" y="229" width="0.0796%" height="15" fill="rgb(218,43,5)" fg:x="561" fg:w="1"/><text x="44.8801%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="44.6301%" y="213" width="0.0796%" height="15" fill="rgb(216,11,5)" fg:x="561" fg:w="1"/><text x="44.8801%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.7096%" y="213" width="0.0796%" height="15" fill="rgb(209,82,29)" fg:x="562" fg:w="1"/><text x="44.9596%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.7096%" y="197" width="0.0796%" height="15" fill="rgb(244,115,12)" fg:x="562" fg:w="1"/><text x="44.9596%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.7096%" y="181" width="0.0796%" height="15" fill="rgb(222,82,18)" fg:x="562" fg:w="1"/><text x="44.9596%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="44.7892%" y="213" width="0.0796%" height="15" fill="rgb(249,227,8)" fg:x="563" fg:w="1"/><text x="45.0392%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="44.8687%" y="197" width="0.1591%" height="15" fill="rgb(253,141,45)" fg:x="564" fg:w="2"/><text x="45.1187%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="44.8687%" y="181" width="0.1591%" height="15" fill="rgb(234,184,4)" fg:x="564" fg:w="2"/><text x="45.1187%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="44.8687%" y="165" width="0.1591%" height="15" fill="rgb(218,194,23)" fg:x="564" fg:w="2"/><text x="45.1187%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="44.8687%" y="149" width="0.1591%" height="15" fill="rgb(235,66,41)" fg:x="564" fg:w="2"/><text x="45.1187%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="45.4256%" y="133" width="0.0796%" height="15" fill="rgb(245,217,1)" fg:x="571" fg:w="1"/><text x="45.6756%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="45.5052%" y="133" width="0.1591%" height="15" fill="rgb(229,91,1)" fg:x="572" fg:w="2"/><text x="45.7552%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="45.6643%" y="133" width="0.0796%" height="15" fill="rgb(207,101,30)" fg:x="574" fg:w="1"/><text x="45.9143%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="45.7438%" y="133" width="0.0796%" height="15" fill="rgb(223,82,49)" fg:x="575" fg:w="1"/><text x="45.9938%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="46.3007%" y="101" width="0.1591%" height="15" fill="rgb(218,167,17)" fg:x="582" fg:w="2"/><text x="46.5507%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="46.3007%" y="85" width="0.1591%" height="15" fill="rgb(208,103,14)" fg:x="582" fg:w="2"/><text x="46.5507%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.3803%" y="69" width="0.0796%" height="15" fill="rgb(238,20,8)" fg:x="583" fg:w="1"/><text x="46.6303%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (11 samples, 0.88%)</title><rect x="45.8234%" y="133" width="0.8751%" height="15" fill="rgb(218,80,54)" fg:x="576" fg:w="11"/><text x="46.0734%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.64%)</title><rect x="46.0621%" y="117" width="0.6364%" height="15" fill="rgb(240,144,17)" fg:x="579" fg:w="8"/><text x="46.3121%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="46.4598%" y="101" width="0.2387%" height="15" fill="rgb(245,27,50)" fg:x="584" fg:w="3"/><text x="46.7098%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="46.6985%" y="117" width="0.0796%" height="15" fill="rgb(251,51,7)" fg:x="587" fg:w="1"/><text x="46.9485%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.6985%" y="101" width="0.0796%" height="15" fill="rgb(245,217,29)" fg:x="587" fg:w="1"/><text x="46.9485%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.6985%" y="85" width="0.0796%" height="15" fill="rgb(221,176,29)" fg:x="587" fg:w="1"/><text x="46.9485%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.6985%" y="69" width="0.0796%" height="15" fill="rgb(212,180,24)" fg:x="587" fg:w="1"/><text x="46.9485%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (64 samples, 5.09%)</title><rect x="46.6985%" y="133" width="5.0915%" height="15" fill="rgb(254,24,2)" fg:x="587" fg:w="64"/><text x="46.9485%" y="143.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (63 samples, 5.01%)</title><rect x="46.7780%" y="117" width="5.0119%" height="15" fill="rgb(230,100,2)" fg:x="588" fg:w="63"/><text x="47.0280%" y="127.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (62 samples, 4.93%)</title><rect x="46.8576%" y="101" width="4.9324%" height="15" fill="rgb(219,142,25)" fg:x="589" fg:w="62"/><text x="47.1076%" y="111.50">alloc:..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="51.7900%" y="133" width="0.0796%" height="15" fill="rgb(240,73,43)" fg:x="651" fg:w="1"/><text x="52.0400%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 7.32%)</title><rect x="44.7096%" y="229" width="7.3190%" height="15" fill="rgb(214,114,15)" fg:x="562" fg:w="92"/><text x="44.9596%" y="239.50">&lt;core::ite..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (90 samples, 7.16%)</title><rect x="44.8687%" y="213" width="7.1599%" height="15" fill="rgb(207,130,4)" fg:x="564" fg:w="90"/><text x="45.1187%" y="223.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (88 samples, 7.00%)</title><rect x="45.0278%" y="197" width="7.0008%" height="15" fill="rgb(221,25,40)" fg:x="566" fg:w="88"/><text x="45.2778%" y="207.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (88 samples, 7.00%)</title><rect x="45.0278%" y="181" width="7.0008%" height="15" fill="rgb(241,184,7)" fg:x="566" fg:w="88"/><text x="45.2778%" y="191.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (88 samples, 7.00%)</title><rect x="45.0278%" y="165" width="7.0008%" height="15" fill="rgb(235,159,4)" fg:x="566" fg:w="88"/><text x="45.2778%" y="175.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (88 samples, 7.00%)</title><rect x="45.0278%" y="149" width="7.0008%" height="15" fill="rgb(214,87,48)" fg:x="566" fg:w="88"/><text x="45.2778%" y="159.50">regex_aut..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="51.8695%" y="133" width="0.1591%" height="15" fill="rgb(246,198,24)" fg:x="652" fg:w="2"/><text x="52.1195%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.2673%" y="213" width="0.0796%" height="15" fill="rgb(209,66,40)" fg:x="657" fg:w="1"/><text x="52.5173%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.3469%" y="213" width="0.0796%" height="15" fill="rgb(233,147,39)" fg:x="658" fg:w="1"/><text x="52.5969%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="52.4264%" y="213" width="0.4773%" height="15" fill="rgb(231,145,52)" fg:x="659" fg:w="6"/><text x="52.6764%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.8242%" y="197" width="0.0796%" height="15" fill="rgb(206,20,26)" fg:x="664" fg:w="1"/><text x="53.0742%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.8242%" y="181" width="0.0796%" height="15" fill="rgb(238,220,4)" fg:x="664" fg:w="1"/><text x="53.0742%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.8242%" y="165" width="0.0796%" height="15" fill="rgb(252,195,42)" fg:x="664" fg:w="1"/><text x="53.0742%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="52.9037%" y="213" width="0.3978%" height="15" fill="rgb(209,10,6)" fg:x="665" fg:w="5"/><text x="53.1537%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="53.1424%" y="197" width="0.1591%" height="15" fill="rgb(229,3,52)" fg:x="668" fg:w="2"/><text x="53.3924%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="53.1424%" y="181" width="0.1591%" height="15" fill="rgb(253,49,37)" fg:x="668" fg:w="2"/><text x="53.3924%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.2220%" y="165" width="0.0796%" height="15" fill="rgb(240,103,49)" fg:x="669" fg:w="1"/><text x="53.4720%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (149 samples, 11.85%)</title><rect x="41.5274%" y="261" width="11.8536%" height="15" fill="rgb(250,182,30)" fg:x="522" fg:w="149"/><text x="41.7774%" y="271.50">regex_automata::me..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (109 samples, 8.67%)</title><rect x="44.7096%" y="245" width="8.6714%" height="15" fill="rgb(248,8,30)" fg:x="562" fg:w="109"/><text x="44.9596%" y="255.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (17 samples, 1.35%)</title><rect x="52.0286%" y="229" width="1.3524%" height="15" fill="rgb(237,120,30)" fg:x="654" fg:w="17"/><text x="52.2786%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="53.3015%" y="213" width="0.0796%" height="15" fill="rgb(221,146,34)" fg:x="670" fg:w="1"/><text x="53.5515%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.3015%" y="197" width="0.0796%" height="15" fill="rgb(242,55,13)" fg:x="670" fg:w="1"/><text x="53.5515%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.3015%" y="181" width="0.0796%" height="15" fill="rgb(242,112,31)" fg:x="670" fg:w="1"/><text x="53.5515%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.3015%" y="165" width="0.0796%" height="15" fill="rgb(249,192,27)" fg:x="670" fg:w="1"/><text x="53.5515%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="53.3811%" y="229" width="0.1591%" height="15" fill="rgb(208,204,44)" fg:x="671" fg:w="2"/><text x="53.6311%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="53.4606%" y="213" width="0.0796%" height="15" fill="rgb(208,93,54)" fg:x="672" fg:w="1"/><text x="53.7106%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.4606%" y="197" width="0.0796%" height="15" fill="rgb(242,1,31)" fg:x="672" fg:w="1"/><text x="53.7106%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.4606%" y="181" width="0.0796%" height="15" fill="rgb(241,83,25)" fg:x="672" fg:w="1"/><text x="53.7106%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.4606%" y="165" width="0.0796%" height="15" fill="rgb(205,169,50)" fg:x="672" fg:w="1"/><text x="53.7106%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="53.5402%" y="229" width="0.0796%" height="15" fill="rgb(239,186,37)" fg:x="673" fg:w="1"/><text x="53.7902%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="53.3811%" y="261" width="0.3182%" height="15" fill="rgb(205,221,10)" fg:x="671" fg:w="4"/><text x="53.6311%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="53.3811%" y="245" width="0.3182%" height="15" fill="rgb(218,196,15)" fg:x="671" fg:w="4"/><text x="53.6311%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="53.6197%" y="229" width="0.0796%" height="15" fill="rgb(218,196,35)" fg:x="674" fg:w="1"/><text x="53.8697%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="53.6197%" y="213" width="0.0796%" height="15" fill="rgb(233,63,24)" fg:x="674" fg:w="1"/><text x="53.8697%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="53.6993%" y="213" width="0.1591%" height="15" fill="rgb(225,8,4)" fg:x="675" fg:w="2"/><text x="53.9493%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.7788%" y="197" width="0.0796%" height="15" fill="rgb(234,105,35)" fg:x="676" fg:w="1"/><text x="54.0288%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="53.6993%" y="229" width="0.3182%" height="15" fill="rgb(236,21,32)" fg:x="675" fg:w="4"/><text x="53.9493%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="53.8584%" y="213" width="0.1591%" height="15" fill="rgb(228,109,6)" fg:x="677" fg:w="2"/><text x="54.1084%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.9379%" y="197" width="0.0796%" height="15" fill="rgb(229,215,31)" fg:x="678" fg:w="1"/><text x="54.1879%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.9379%" y="181" width="0.0796%" height="15" fill="rgb(221,52,54)" fg:x="678" fg:w="1"/><text x="54.1879%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.9379%" y="165" width="0.0796%" height="15" fill="rgb(252,129,43)" fg:x="678" fg:w="1"/><text x="54.1879%" y="175.50"></text></g><g><title>indefinite::rules::number::Number::check (172 samples, 13.68%)</title><rect x="40.4137%" y="325" width="13.6834%" height="15" fill="rgb(248,183,27)" fg:x="508" fg:w="172"/><text x="40.6637%" y="335.50">indefinite::rules::nu..</text></g><g><title>regex::regex::string::Regex::new (165 samples, 13.13%)</title><rect x="40.9706%" y="309" width="13.1265%" height="15" fill="rgb(250,0,22)" fg:x="515" fg:w="165"/><text x="41.2206%" y="319.50">regex::regex::string..</text></g><g><title>regex::builders::string::RegexBuilder::build (165 samples, 13.13%)</title><rect x="40.9706%" y="293" width="13.1265%" height="15" fill="rgb(213,166,10)" fg:x="515" fg:w="165"/><text x="41.2206%" y="303.50">regex::builders::str..</text></g><g><title>regex_automata::meta::regex::Builder::build (165 samples, 13.13%)</title><rect x="40.9706%" y="277" width="13.1265%" height="15" fill="rgb(207,163,36)" fg:x="515" fg:w="165"/><text x="41.2206%" y="287.50">regex_automata::meta..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="53.6993%" y="261" width="0.3978%" height="15" fill="rgb(208,122,22)" fg:x="675" fg:w="5"/><text x="53.9493%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="53.6993%" y="245" width="0.3978%" height="15" fill="rgb(207,104,49)" fg:x="675" fg:w="5"/><text x="53.9493%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="54.0175%" y="229" width="0.0796%" height="15" fill="rgb(248,211,50)" fg:x="679" fg:w="1"/><text x="54.2675%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.0175%" y="213" width="0.0796%" height="15" fill="rgb(217,13,45)" fg:x="679" fg:w="1"/><text x="54.2675%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="54.0971%" y="293" width="0.0796%" height="15" fill="rgb(211,216,49)" fg:x="680" fg:w="1"/><text x="54.3471%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="54.0971%" y="277" width="0.0796%" height="15" fill="rgb(221,58,53)" fg:x="680" fg:w="1"/><text x="54.3471%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="54.0971%" y="261" width="0.0796%" height="15" fill="rgb(220,112,41)" fg:x="680" fg:w="1"/><text x="54.3471%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.0971%" y="245" width="0.0796%" height="15" fill="rgb(236,38,28)" fg:x="680" fg:w="1"/><text x="54.3471%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="54.1766%" y="293" width="0.0796%" height="15" fill="rgb(227,195,22)" fg:x="681" fg:w="1"/><text x="54.4266%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="54.1766%" y="277" width="0.0796%" height="15" fill="rgb(214,55,33)" fg:x="681" fg:w="1"/><text x="54.4266%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.1766%" y="261" width="0.0796%" height="15" fill="rgb(248,80,13)" fg:x="681" fg:w="1"/><text x="54.4266%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.2562%" y="245" width="0.0796%" height="15" fill="rgb(238,52,6)" fg:x="682" fg:w="1"/><text x="54.5062%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.2562%" y="229" width="0.0796%" height="15" fill="rgb(224,198,47)" fg:x="682" fg:w="1"/><text x="54.5062%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.3357%" y="245" width="0.0796%" height="15" fill="rgb(233,171,20)" fg:x="683" fg:w="1"/><text x="54.5857%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="54.4153%" y="229" width="0.0796%" height="15" fill="rgb(241,30,25)" fg:x="684" fg:w="1"/><text x="54.6653%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="54.4948%" y="229" width="0.0796%" height="15" fill="rgb(207,171,38)" fg:x="685" fg:w="1"/><text x="54.7448%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="54.4948%" y="213" width="0.0796%" height="15" fill="rgb(234,70,1)" fg:x="685" fg:w="1"/><text x="54.7448%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="54.4948%" y="197" width="0.0796%" height="15" fill="rgb(232,178,18)" fg:x="685" fg:w="1"/><text x="54.7448%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.4948%" y="181" width="0.0796%" height="15" fill="rgb(241,78,40)" fg:x="685" fg:w="1"/><text x="54.7448%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="54.5744%" y="197" width="0.0796%" height="15" fill="rgb(222,35,25)" fg:x="686" fg:w="1"/><text x="54.8244%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.32%)</title><rect x="54.4153%" y="245" width="0.3182%" height="15" fill="rgb(207,92,16)" fg:x="684" fg:w="4"/><text x="54.6653%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="54.5744%" y="229" width="0.1591%" height="15" fill="rgb(216,59,51)" fg:x="686" fg:w="2"/><text x="54.8244%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="54.5744%" y="213" width="0.1591%" height="15" fill="rgb(213,80,28)" fg:x="686" fg:w="2"/><text x="54.8244%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="54.6539%" y="197" width="0.0796%" height="15" fill="rgb(220,93,7)" fg:x="687" fg:w="1"/><text x="54.9039%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="54.7335%" y="213" width="0.0796%" height="15" fill="rgb(225,24,44)" fg:x="688" fg:w="1"/><text x="54.9835%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="54.7335%" y="197" width="0.0796%" height="15" fill="rgb(243,74,40)" fg:x="688" fg:w="1"/><text x="54.9835%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.7335%" y="181" width="0.0796%" height="15" fill="rgb(228,39,7)" fg:x="688" fg:w="1"/><text x="54.9835%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.7335%" y="165" width="0.0796%" height="15" fill="rgb(227,79,8)" fg:x="688" fg:w="1"/><text x="54.9835%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.7335%" y="149" width="0.0796%" height="15" fill="rgb(236,58,11)" fg:x="688" fg:w="1"/><text x="54.9835%" y="159.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="54.8926%" y="197" width="0.0796%" height="15" fill="rgb(249,63,35)" fg:x="690" fg:w="1"/><text x="55.1426%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="54.7335%" y="245" width="0.3182%" height="15" fill="rgb(252,114,16)" fg:x="688" fg:w="4"/><text x="54.9835%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="54.7335%" y="229" width="0.3182%" height="15" fill="rgb(254,151,24)" fg:x="688" fg:w="4"/><text x="54.9835%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="54.8130%" y="213" width="0.2387%" height="15" fill="rgb(253,54,39)" fg:x="689" fg:w="3"/><text x="55.0630%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="54.9722%" y="197" width="0.0796%" height="15" fill="rgb(243,25,45)" fg:x="691" fg:w="1"/><text x="55.2222%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (11 samples, 0.88%)</title><rect x="54.2562%" y="261" width="0.8751%" height="15" fill="rgb(234,134,9)" fg:x="682" fg:w="11"/><text x="54.5062%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="55.0517%" y="245" width="0.0796%" height="15" fill="rgb(227,166,31)" fg:x="692" fg:w="1"/><text x="55.3017%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="55.0517%" y="229" width="0.0796%" height="15" fill="rgb(245,143,41)" fg:x="692" fg:w="1"/><text x="55.3017%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="55.0517%" y="213" width="0.0796%" height="15" fill="rgb(238,181,32)" fg:x="692" fg:w="1"/><text x="55.3017%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="55.0517%" y="197" width="0.0796%" height="15" fill="rgb(224,113,18)" fg:x="692" fg:w="1"/><text x="55.3017%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="55.1313%" y="261" width="0.0796%" height="15" fill="rgb(240,229,28)" fg:x="693" fg:w="1"/><text x="55.3813%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (13 samples, 1.03%)</title><rect x="54.2562%" y="293" width="1.0342%" height="15" fill="rgb(250,185,3)" fg:x="682" fg:w="13"/><text x="54.5062%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (13 samples, 1.03%)</title><rect x="54.2562%" y="277" width="1.0342%" height="15" fill="rgb(212,59,25)" fg:x="682" fg:w="13"/><text x="54.5062%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Config::utf8_empty (1 samples, 0.08%)</title><rect x="55.2108%" y="261" width="0.0796%" height="15" fill="rgb(221,87,20)" fg:x="694" fg:w="1"/><text x="55.4608%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.4495%" y="213" width="0.0796%" height="15" fill="rgb(213,74,28)" fg:x="697" fg:w="1"/><text x="55.6995%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.4495%" y="197" width="0.0796%" height="15" fill="rgb(224,132,34)" fg:x="697" fg:w="1"/><text x="55.6995%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.4495%" y="181" width="0.0796%" height="15" fill="rgb(222,101,24)" fg:x="697" fg:w="1"/><text x="55.6995%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="55.3699%" y="229" width="0.2387%" height="15" fill="rgb(254,142,4)" fg:x="696" fg:w="3"/><text x="55.6199%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="55.5290%" y="213" width="0.0796%" height="15" fill="rgb(230,229,49)" fg:x="698" fg:w="1"/><text x="55.7790%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="55.5290%" y="197" width="0.0796%" height="15" fill="rgb(238,70,47)" fg:x="698" fg:w="1"/><text x="55.7790%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="55.3699%" y="245" width="0.3182%" height="15" fill="rgb(231,160,17)" fg:x="696" fg:w="4"/><text x="55.6199%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="55.6086%" y="229" width="0.0796%" height="15" fill="rgb(218,68,53)" fg:x="699" fg:w="1"/><text x="55.8586%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.6086%" y="213" width="0.0796%" height="15" fill="rgb(236,111,10)" fg:x="699" fg:w="1"/><text x="55.8586%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.6086%" y="197" width="0.0796%" height="15" fill="rgb(224,34,41)" fg:x="699" fg:w="1"/><text x="55.8586%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.6086%" y="181" width="0.0796%" height="15" fill="rgb(241,118,19)" fg:x="699" fg:w="1"/><text x="55.8586%" y="191.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (21 samples, 1.67%)</title><rect x="54.0971%" y="309" width="1.6706%" height="15" fill="rgb(238,129,25)" fg:x="680" fg:w="21"/><text x="54.3471%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="55.2904%" y="293" width="0.4773%" height="15" fill="rgb(238,22,31)" fg:x="695" fg:w="6"/><text x="55.5404%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="55.2904%" y="277" width="0.4773%" height="15" fill="rgb(222,174,48)" fg:x="695" fg:w="6"/><text x="55.5404%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="55.2904%" y="261" width="0.4773%" height="15" fill="rgb(206,152,40)" fg:x="695" fg:w="6"/><text x="55.5404%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="55.6881%" y="245" width="0.0796%" height="15" fill="rgb(218,99,54)" fg:x="700" fg:w="1"/><text x="55.9381%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (364 samples, 28.96%)</title><rect x="26.8894%" y="405" width="28.9578%" height="15" fill="rgb(220,174,26)" fg:x="338" fg:w="364"/><text x="27.1394%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::loo..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (337 samples, 26.81%)</title><rect x="29.0374%" y="389" width="26.8099%" height="15" fill="rgb(245,116,9)" fg:x="365" fg:w="337"/><text x="29.2874%" y="399.50">plugins_core::looking::model::Unqualified::..</text></g><g><title>indefinite::indefinite (337 samples, 26.81%)</title><rect x="29.0374%" y="373" width="26.8099%" height="15" fill="rgb(209,72,35)" fg:x="365" fg:w="337"/><text x="29.2874%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (337 samples, 26.81%)</title><rect x="29.0374%" y="357" width="26.8099%" height="15" fill="rgb(226,126,21)" fg:x="365" fg:w="337"/><text x="29.2874%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (335 samples, 26.65%)</title><rect x="29.1965%" y="341" width="26.6508%" height="15" fill="rgb(227,192,1)" fg:x="367" fg:w="335"/><text x="29.4465%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (22 samples, 1.75%)</title><rect x="54.0971%" y="325" width="1.7502%" height="15" fill="rgb(237,180,29)" fg:x="680" fg:w="22"/><text x="54.3471%" y="335.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="55.7677%" y="309" width="0.0796%" height="15" fill="rgb(230,197,35)" fg:x="701" fg:w="1"/><text x="56.0177%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="55.8473%" y="373" width="0.0796%" height="15" fill="rgb(246,193,31)" fg:x="702" fg:w="1"/><text x="56.0973%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="55.8473%" y="389" width="0.2387%" height="15" fill="rgb(241,36,4)" fg:x="702" fg:w="3"/><text x="56.0973%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="55.9268%" y="373" width="0.1591%" height="15" fill="rgb(241,130,17)" fg:x="703" fg:w="2"/><text x="56.1768%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="55.9268%" y="357" width="0.1591%" height="15" fill="rgb(206,137,32)" fg:x="703" fg:w="2"/><text x="56.1768%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="55.9268%" y="341" width="0.1591%" height="15" fill="rgb(237,228,51)" fg:x="703" fg:w="2"/><text x="56.1768%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="55.9268%" y="325" width="0.1591%" height="15" fill="rgb(243,6,42)" fg:x="703" fg:w="2"/><text x="56.1768%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.0064%" y="309" width="0.0796%" height="15" fill="rgb(251,74,28)" fg:x="704" fg:w="1"/><text x="56.2564%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.0064%" y="293" width="0.0796%" height="15" fill="rgb(218,20,49)" fg:x="704" fg:w="1"/><text x="56.2564%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="56.0064%" y="277" width="0.0796%" height="15" fill="rgb(238,28,14)" fg:x="704" fg:w="1"/><text x="56.2564%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="56.0064%" y="261" width="0.0796%" height="15" fill="rgb(229,40,46)" fg:x="704" fg:w="1"/><text x="56.2564%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="56.0064%" y="245" width="0.0796%" height="15" fill="rgb(244,195,20)" fg:x="704" fg:w="1"/><text x="56.2564%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.0064%" y="229" width="0.0796%" height="15" fill="rgb(253,56,35)" fg:x="704" fg:w="1"/><text x="56.2564%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.0064%" y="213" width="0.0796%" height="15" fill="rgb(210,149,44)" fg:x="704" fg:w="1"/><text x="56.2564%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="56.0064%" y="197" width="0.0796%" height="15" fill="rgb(240,135,12)" fg:x="704" fg:w="1"/><text x="56.2564%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="56.0064%" y="181" width="0.0796%" height="15" fill="rgb(251,24,50)" fg:x="704" fg:w="1"/><text x="56.2564%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="56.0064%" y="165" width="0.0796%" height="15" fill="rgb(243,200,47)" fg:x="704" fg:w="1"/><text x="56.2564%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="56.0064%" y="149" width="0.0796%" height="15" fill="rgb(224,166,26)" fg:x="704" fg:w="1"/><text x="56.2564%" y="159.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="56.0064%" y="133" width="0.0796%" height="15" fill="rgb(233,0,47)" fg:x="704" fg:w="1"/><text x="56.2564%" y="143.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="55.8473%" y="405" width="0.3978%" height="15" fill="rgb(253,80,5)" fg:x="702" fg:w="5"/><text x="56.0973%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="56.0859%" y="389" width="0.1591%" height="15" fill="rgb(214,133,25)" fg:x="705" fg:w="2"/><text x="56.3359%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="56.0859%" y="373" width="0.1591%" height="15" fill="rgb(209,27,14)" fg:x="705" fg:w="2"/><text x="56.3359%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="56.0859%" y="357" width="0.1591%" height="15" fill="rgb(219,102,51)" fg:x="705" fg:w="2"/><text x="56.3359%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="56.0859%" y="341" width="0.1591%" height="15" fill="rgb(237,18,16)" fg:x="705" fg:w="2"/><text x="56.3359%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="56.0859%" y="325" width="0.1591%" height="15" fill="rgb(241,85,17)" fg:x="705" fg:w="2"/><text x="56.3359%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="56.1655%" y="309" width="0.0796%" height="15" fill="rgb(236,90,42)" fg:x="706" fg:w="1"/><text x="56.4155%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.1655%" y="293" width="0.0796%" height="15" fill="rgb(249,57,21)" fg:x="706" fg:w="1"/><text x="56.4155%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="56.2450%" y="405" width="0.0796%" height="15" fill="rgb(243,12,36)" fg:x="707" fg:w="1"/><text x="56.4950%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.3246%" y="373" width="0.0796%" height="15" fill="rgb(253,128,47)" fg:x="708" fg:w="1"/><text x="56.5746%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.3246%" y="357" width="0.0796%" height="15" fill="rgb(207,33,20)" fg:x="708" fg:w="1"/><text x="56.5746%" y="367.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (2 samples, 0.16%)</title><rect x="56.3246%" y="389" width="0.1591%" height="15" fill="rgb(233,215,35)" fg:x="708" fg:w="2"/><text x="56.5746%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="56.4041%" y="373" width="0.0796%" height="15" fill="rgb(249,188,52)" fg:x="709" fg:w="1"/><text x="56.6541%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="56.4041%" y="357" width="0.0796%" height="15" fill="rgb(225,12,32)" fg:x="709" fg:w="1"/><text x="56.6541%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="56.4041%" y="341" width="0.0796%" height="15" fill="rgb(247,98,14)" fg:x="709" fg:w="1"/><text x="56.6541%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="56.4837%" y="277" width="0.0796%" height="15" fill="rgb(247,219,48)" fg:x="710" fg:w="1"/><text x="56.7337%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="56.4837%" y="261" width="0.0796%" height="15" fill="rgb(253,60,48)" fg:x="710" fg:w="1"/><text x="56.7337%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.4837%" y="245" width="0.0796%" height="15" fill="rgb(245,15,52)" fg:x="710" fg:w="1"/><text x="56.7337%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.4837%" y="229" width="0.0796%" height="15" fill="rgb(220,133,28)" fg:x="710" fg:w="1"/><text x="56.7337%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="56.4837%" y="213" width="0.0796%" height="15" fill="rgb(217,180,4)" fg:x="710" fg:w="1"/><text x="56.7337%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="56.4837%" y="197" width="0.0796%" height="15" fill="rgb(251,24,1)" fg:x="710" fg:w="1"/><text x="56.7337%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="56.4837%" y="181" width="0.0796%" height="15" fill="rgb(212,185,49)" fg:x="710" fg:w="1"/><text x="56.7337%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.4837%" y="165" width="0.0796%" height="15" fill="rgb(215,175,22)" fg:x="710" fg:w="1"/><text x="56.7337%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.4837%" y="149" width="0.0796%" height="15" fill="rgb(250,205,14)" fg:x="710" fg:w="1"/><text x="56.7337%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="56.4837%" y="133" width="0.0796%" height="15" fill="rgb(225,211,22)" fg:x="710" fg:w="1"/><text x="56.7337%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="56.4837%" y="117" width="0.0796%" height="15" fill="rgb(251,179,42)" fg:x="710" fg:w="1"/><text x="56.7337%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="56.4837%" y="101" width="0.0796%" height="15" fill="rgb(208,216,51)" fg:x="710" fg:w="1"/><text x="56.7337%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="56.4837%" y="85" width="0.0796%" height="15" fill="rgb(235,36,11)" fg:x="710" fg:w="1"/><text x="56.7337%" y="95.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="56.4837%" y="293" width="0.1591%" height="15" fill="rgb(213,189,28)" fg:x="710" fg:w="2"/><text x="56.7337%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.5632%" y="277" width="0.0796%" height="15" fill="rgb(227,203,42)" fg:x="711" fg:w="1"/><text x="56.8132%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.5632%" y="261" width="0.0796%" height="15" fill="rgb(244,72,36)" fg:x="711" fg:w="1"/><text x="56.8132%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="56.5632%" y="245" width="0.0796%" height="15" fill="rgb(213,53,17)" fg:x="711" fg:w="1"/><text x="56.8132%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="56.5632%" y="229" width="0.0796%" height="15" fill="rgb(207,167,3)" fg:x="711" fg:w="1"/><text x="56.8132%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="56.5632%" y="213" width="0.0796%" height="15" fill="rgb(216,98,30)" fg:x="711" fg:w="1"/><text x="56.8132%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="56.5632%" y="197" width="0.0796%" height="15" fill="rgb(236,123,15)" fg:x="711" fg:w="1"/><text x="56.8132%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="56.5632%" y="181" width="0.0796%" height="15" fill="rgb(248,81,50)" fg:x="711" fg:w="1"/><text x="56.8132%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="56.4837%" y="325" width="0.2387%" height="15" fill="rgb(214,120,4)" fg:x="710" fg:w="3"/><text x="56.7337%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="56.4837%" y="309" width="0.2387%" height="15" fill="rgb(208,179,34)" fg:x="710" fg:w="3"/><text x="56.7337%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.6428%" y="293" width="0.0796%" height="15" fill="rgb(227,140,7)" fg:x="712" fg:w="1"/><text x="56.8928%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.6428%" y="277" width="0.0796%" height="15" fill="rgb(214,22,6)" fg:x="712" fg:w="1"/><text x="56.8928%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="56.6428%" y="261" width="0.0796%" height="15" fill="rgb(207,137,27)" fg:x="712" fg:w="1"/><text x="56.8928%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="56.6428%" y="245" width="0.0796%" height="15" fill="rgb(210,8,46)" fg:x="712" fg:w="1"/><text x="56.8928%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="56.6428%" y="229" width="0.0796%" height="15" fill="rgb(240,16,54)" fg:x="712" fg:w="1"/><text x="56.8928%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.6428%" y="213" width="0.0796%" height="15" fill="rgb(211,209,29)" fg:x="712" fg:w="1"/><text x="56.8928%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.6428%" y="197" width="0.0796%" height="15" fill="rgb(226,228,24)" fg:x="712" fg:w="1"/><text x="56.8928%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="56.6428%" y="181" width="0.0796%" height="15" fill="rgb(222,84,9)" fg:x="712" fg:w="1"/><text x="56.8928%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="56.6428%" y="165" width="0.0796%" height="15" fill="rgb(234,203,30)" fg:x="712" fg:w="1"/><text x="56.8928%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="56.6428%" y="149" width="0.0796%" height="15" fill="rgb(238,109,14)" fg:x="712" fg:w="1"/><text x="56.8928%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="56.6428%" y="133" width="0.0796%" height="15" fill="rgb(233,206,34)" fg:x="712" fg:w="1"/><text x="56.8928%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.6428%" y="117" width="0.0796%" height="15" fill="rgb(220,167,47)" fg:x="712" fg:w="1"/><text x="56.8928%" y="127.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="56.7224%" y="325" width="0.0796%" height="15" fill="rgb(238,105,10)" fg:x="713" fg:w="1"/><text x="56.9724%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.7224%" y="309" width="0.0796%" height="15" fill="rgb(213,227,17)" fg:x="713" fg:w="1"/><text x="56.9724%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="56.8019%" y="277" width="0.0796%" height="15" fill="rgb(217,132,38)" fg:x="714" fg:w="1"/><text x="57.0519%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.8019%" y="261" width="0.0796%" height="15" fill="rgb(242,146,4)" fg:x="714" fg:w="1"/><text x="57.0519%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="56.8019%" y="245" width="0.0796%" height="15" fill="rgb(212,61,9)" fg:x="714" fg:w="1"/><text x="57.0519%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.8019%" y="229" width="0.0796%" height="15" fill="rgb(247,126,22)" fg:x="714" fg:w="1"/><text x="57.0519%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="56.8019%" y="213" width="0.0796%" height="15" fill="rgb(220,196,2)" fg:x="714" fg:w="1"/><text x="57.0519%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="56.8019%" y="197" width="0.0796%" height="15" fill="rgb(208,46,4)" fg:x="714" fg:w="1"/><text x="57.0519%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.8019%" y="181" width="0.0796%" height="15" fill="rgb(252,104,46)" fg:x="714" fg:w="1"/><text x="57.0519%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="56.8019%" y="165" width="0.0796%" height="15" fill="rgb(237,152,48)" fg:x="714" fg:w="1"/><text x="57.0519%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="56.8019%" y="149" width="0.0796%" height="15" fill="rgb(221,59,37)" fg:x="714" fg:w="1"/><text x="57.0519%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="56.8019%" y="133" width="0.0796%" height="15" fill="rgb(209,202,51)" fg:x="714" fg:w="1"/><text x="57.0519%" y="143.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="56.8019%" y="325" width="0.1591%" height="15" fill="rgb(228,81,30)" fg:x="714" fg:w="2"/><text x="57.0519%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="56.8019%" y="309" width="0.1591%" height="15" fill="rgb(227,42,39)" fg:x="714" fg:w="2"/><text x="57.0519%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="56.8019%" y="293" width="0.1591%" height="15" fill="rgb(221,26,2)" fg:x="714" fg:w="2"/><text x="57.0519%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="56.8815%" y="277" width="0.0796%" height="15" fill="rgb(254,61,31)" fg:x="715" fg:w="1"/><text x="57.1315%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.8815%" y="261" width="0.0796%" height="15" fill="rgb(222,173,38)" fg:x="715" fg:w="1"/><text x="57.1315%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="56.9610%" y="229" width="0.0796%" height="15" fill="rgb(218,50,12)" fg:x="716" fg:w="1"/><text x="57.2110%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="56.9610%" y="213" width="0.0796%" height="15" fill="rgb(223,88,40)" fg:x="716" fg:w="1"/><text x="57.2110%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="56.9610%" y="197" width="0.0796%" height="15" fill="rgb(237,54,19)" fg:x="716" fg:w="1"/><text x="57.2110%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="56.9610%" y="181" width="0.0796%" height="15" fill="rgb(251,129,25)" fg:x="716" fg:w="1"/><text x="57.2110%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="56.9610%" y="165" width="0.0796%" height="15" fill="rgb(238,97,19)" fg:x="716" fg:w="1"/><text x="57.2110%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.9610%" y="149" width="0.0796%" height="15" fill="rgb(240,169,18)" fg:x="716" fg:w="1"/><text x="57.2110%" y="159.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (386 samples, 30.71%)</title><rect x="26.4121%" y="565" width="30.7080%" height="15" fill="rgb(230,187,49)" fg:x="332" fg:w="386"/><text x="26.6621%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (386 samples, 30.71%)</title><rect x="26.4121%" y="549" width="30.7080%" height="15" fill="rgb(209,44,26)" fg:x="332" fg:w="386"/><text x="26.6621%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plug..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (385 samples, 30.63%)</title><rect x="26.4916%" y="533" width="30.6285%" height="15" fill="rgb(244,0,6)" fg:x="333" fg:w="385"/><text x="26.7416%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (385 samples, 30.63%)</title><rect x="26.4916%" y="517" width="30.6285%" height="15" fill="rgb(248,18,21)" fg:x="333" fg:w="385"/><text x="26.7416%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.sh..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (385 samples, 30.63%)</title><rect x="26.4916%" y="501" width="30.6285%" height="15" fill="rgb(245,180,19)" fg:x="333" fg:w="385"/><text x="26.7416%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (385 samples, 30.63%)</title><rect x="26.4916%" y="485" width="30.6285%" height="15" fill="rgb(252,118,36)" fg:x="333" fg:w="385"/><text x="26.7416%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.sh..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (385 samples, 30.63%)</title><rect x="26.4916%" y="469" width="30.6285%" height="15" fill="rgb(210,224,19)" fg:x="333" fg:w="385"/><text x="26.7416%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::F..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (385 samples, 30.63%)</title><rect x="26.4916%" y="453" width="30.6285%" height="15" fill="rgb(218,30,24)" fg:x="333" fg:w="385"/><text x="26.7416%" y="463.50">&lt;engine::session::state::State as kernel::actions..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (385 samples, 30.63%)</title><rect x="26.4916%" y="437" width="30.6285%" height="15" fill="rgb(219,75,50)" fg:x="333" fg:w="385"/><text x="26.7416%" y="447.50">&lt;plugins_core::looking::actions::LookAction as ke..</text></g><g><title>plugins_core::looking::model::new_area_observation (380 samples, 30.23%)</title><rect x="26.8894%" y="421" width="30.2307%" height="15" fill="rgb(234,72,50)" fg:x="338" fg:w="380"/><text x="27.1394%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.80%)</title><rect x="56.3246%" y="405" width="0.7955%" height="15" fill="rgb(219,100,48)" fg:x="708" fg:w="10"/><text x="56.5746%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.64%)</title><rect x="56.4837%" y="389" width="0.6364%" height="15" fill="rgb(253,5,41)" fg:x="710" fg:w="8"/><text x="56.7337%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.64%)</title><rect x="56.4837%" y="373" width="0.6364%" height="15" fill="rgb(247,181,11)" fg:x="710" fg:w="8"/><text x="56.7337%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.64%)</title><rect x="56.4837%" y="357" width="0.6364%" height="15" fill="rgb(222,223,25)" fg:x="710" fg:w="8"/><text x="56.7337%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="56.4837%" y="341" width="0.6364%" height="15" fill="rgb(214,198,28)" fg:x="710" fg:w="8"/><text x="56.7337%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="56.9610%" y="325" width="0.1591%" height="15" fill="rgb(230,46,43)" fg:x="716" fg:w="2"/><text x="57.2110%" y="335.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="56.9610%" y="309" width="0.1591%" height="15" fill="rgb(233,65,53)" fg:x="716" fg:w="2"/><text x="57.2110%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="56.9610%" y="293" width="0.1591%" height="15" fill="rgb(221,121,27)" fg:x="716" fg:w="2"/><text x="57.2110%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="56.9610%" y="277" width="0.1591%" height="15" fill="rgb(247,70,47)" fg:x="716" fg:w="2"/><text x="57.2110%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="56.9610%" y="261" width="0.1591%" height="15" fill="rgb(228,85,35)" fg:x="716" fg:w="2"/><text x="57.2110%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="56.9610%" y="245" width="0.1591%" height="15" fill="rgb(209,50,18)" fg:x="716" fg:w="2"/><text x="57.2110%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="57.0406%" y="229" width="0.0796%" height="15" fill="rgb(250,19,35)" fg:x="717" fg:w="1"/><text x="57.2906%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="57.0406%" y="213" width="0.0796%" height="15" fill="rgb(253,107,29)" fg:x="717" fg:w="1"/><text x="57.2906%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.1997%" y="533" width="0.0796%" height="15" fill="rgb(252,179,29)" fg:x="719" fg:w="1"/><text x="57.4497%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="57.2792%" y="501" width="0.0796%" height="15" fill="rgb(238,194,6)" fg:x="720" fg:w="1"/><text x="57.5292%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="57.2792%" y="517" width="0.3182%" height="15" fill="rgb(238,164,29)" fg:x="720" fg:w="4"/><text x="57.5292%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="57.3588%" y="501" width="0.2387%" height="15" fill="rgb(224,25,9)" fg:x="721" fg:w="3"/><text x="57.6088%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="57.3588%" y="485" width="0.2387%" height="15" fill="rgb(244,153,23)" fg:x="721" fg:w="3"/><text x="57.6088%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="57.4383%" y="469" width="0.1591%" height="15" fill="rgb(212,203,14)" fg:x="722" fg:w="2"/><text x="57.6883%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="57.4383%" y="453" width="0.1591%" height="15" fill="rgb(220,164,20)" fg:x="722" fg:w="2"/><text x="57.6883%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.5975%" y="405" width="0.0796%" height="15" fill="rgb(222,203,48)" fg:x="724" fg:w="1"/><text x="57.8475%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.5975%" y="389" width="0.0796%" height="15" fill="rgb(215,159,22)" fg:x="724" fg:w="1"/><text x="57.8475%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="57.5975%" y="453" width="0.1591%" height="15" fill="rgb(216,183,47)" fg:x="724" fg:w="2"/><text x="57.8475%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="57.5975%" y="437" width="0.1591%" height="15" fill="rgb(229,195,25)" fg:x="724" fg:w="2"/><text x="57.8475%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="57.5975%" y="421" width="0.1591%" height="15" fill="rgb(224,132,51)" fg:x="724" fg:w="2"/><text x="57.8475%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.6770%" y="405" width="0.0796%" height="15" fill="rgb(240,63,7)" fg:x="725" fg:w="1"/><text x="57.9270%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="57.7566%" y="453" width="0.0796%" height="15" fill="rgb(249,182,41)" fg:x="726" fg:w="1"/><text x="58.0066%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.7566%" y="437" width="0.0796%" height="15" fill="rgb(243,47,26)" fg:x="726" fg:w="1"/><text x="58.0066%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.7566%" y="421" width="0.0796%" height="15" fill="rgb(233,48,2)" fg:x="726" fg:w="1"/><text x="58.0066%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.7566%" y="405" width="0.0796%" height="15" fill="rgb(244,165,34)" fg:x="726" fg:w="1"/><text x="58.0066%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="57.7566%" y="389" width="0.0796%" height="15" fill="rgb(207,89,7)" fg:x="726" fg:w="1"/><text x="58.0066%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="57.7566%" y="373" width="0.0796%" height="15" fill="rgb(244,117,36)" fg:x="726" fg:w="1"/><text x="58.0066%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="57.7566%" y="357" width="0.0796%" height="15" fill="rgb(226,144,34)" fg:x="726" fg:w="1"/><text x="58.0066%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.7566%" y="341" width="0.0796%" height="15" fill="rgb(213,23,19)" fg:x="726" fg:w="1"/><text x="58.0066%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.7566%" y="325" width="0.0796%" height="15" fill="rgb(217,75,12)" fg:x="726" fg:w="1"/><text x="58.0066%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="57.7566%" y="309" width="0.0796%" height="15" fill="rgb(224,159,17)" fg:x="726" fg:w="1"/><text x="58.0066%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="57.7566%" y="293" width="0.0796%" height="15" fill="rgb(217,118,1)" fg:x="726" fg:w="1"/><text x="58.0066%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="57.7566%" y="277" width="0.0796%" height="15" fill="rgb(232,180,48)" fg:x="726" fg:w="1"/><text x="58.0066%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="57.7566%" y="261" width="0.0796%" height="15" fill="rgb(230,27,33)" fg:x="726" fg:w="1"/><text x="58.0066%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.7566%" y="245" width="0.0796%" height="15" fill="rgb(205,31,21)" fg:x="726" fg:w="1"/><text x="58.0066%" y="255.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="57.8361%" y="453" width="0.0796%" height="15" fill="rgb(253,59,4)" fg:x="727" fg:w="1"/><text x="58.0861%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="57.8361%" y="437" width="0.0796%" height="15" fill="rgb(224,201,9)" fg:x="727" fg:w="1"/><text x="58.0861%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="57.8361%" y="421" width="0.0796%" height="15" fill="rgb(229,206,30)" fg:x="727" fg:w="1"/><text x="58.0861%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.8361%" y="405" width="0.0796%" height="15" fill="rgb(212,67,47)" fg:x="727" fg:w="1"/><text x="58.0861%" y="415.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="57.9157%" y="405" width="0.0796%" height="15" fill="rgb(211,96,50)" fg:x="728" fg:w="1"/><text x="58.1657%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="57.9952%" y="405" width="0.0796%" height="15" fill="rgb(252,114,18)" fg:x="729" fg:w="1"/><text x="58.2452%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.9952%" y="389" width="0.0796%" height="15" fill="rgb(223,58,37)" fg:x="729" fg:w="1"/><text x="58.2452%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="57.9952%" y="373" width="0.0796%" height="15" fill="rgb(237,70,4)" fg:x="729" fg:w="1"/><text x="58.2452%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="57.9952%" y="357" width="0.0796%" height="15" fill="rgb(244,85,46)" fg:x="729" fg:w="1"/><text x="58.2452%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.9952%" y="341" width="0.0796%" height="15" fill="rgb(223,39,52)" fg:x="729" fg:w="1"/><text x="58.2452%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="57.9952%" y="325" width="0.0796%" height="15" fill="rgb(218,200,14)" fg:x="729" fg:w="1"/><text x="58.2452%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="57.9952%" y="309" width="0.0796%" height="15" fill="rgb(208,171,16)" fg:x="729" fg:w="1"/><text x="58.2452%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.9952%" y="293" width="0.0796%" height="15" fill="rgb(234,200,18)" fg:x="729" fg:w="1"/><text x="58.2452%" y="303.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="57.9157%" y="453" width="0.2387%" height="15" fill="rgb(228,45,11)" fg:x="728" fg:w="3"/><text x="58.1657%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="57.9157%" y="437" width="0.2387%" height="15" fill="rgb(237,182,11)" fg:x="728" fg:w="3"/><text x="58.1657%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="57.9157%" y="421" width="0.2387%" height="15" fill="rgb(241,175,49)" fg:x="728" fg:w="3"/><text x="58.1657%" y="431.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="58.0748%" y="405" width="0.0796%" height="15" fill="rgb(247,38,35)" fg:x="730" fg:w="1"/><text x="58.3248%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="58.1543%" y="341" width="0.0796%" height="15" fill="rgb(228,39,49)" fg:x="731" fg:w="1"/><text x="58.4043%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="58.2339%" y="277" width="0.0796%" height="15" fill="rgb(226,101,26)" fg:x="732" fg:w="1"/><text x="58.4839%" y="287.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="58.2339%" y="261" width="0.0796%" height="15" fill="rgb(206,141,19)" fg:x="732" fg:w="1"/><text x="58.4839%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="58.2339%" y="309" width="0.1591%" height="15" fill="rgb(211,200,13)" fg:x="732" fg:w="2"/><text x="58.4839%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="58.2339%" y="293" width="0.1591%" height="15" fill="rgb(241,121,6)" fg:x="732" fg:w="2"/><text x="58.4839%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.3134%" y="277" width="0.0796%" height="15" fill="rgb(234,221,29)" fg:x="733" fg:w="1"/><text x="58.5634%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="58.2339%" y="341" width="0.3182%" height="15" fill="rgb(229,136,5)" fg:x="732" fg:w="4"/><text x="58.4839%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="58.2339%" y="325" width="0.3182%" height="15" fill="rgb(238,36,11)" fg:x="732" fg:w="4"/><text x="58.4839%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="58.3930%" y="309" width="0.1591%" height="15" fill="rgb(251,55,41)" fg:x="734" fg:w="2"/><text x="58.6430%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="58.3930%" y="293" width="0.1591%" height="15" fill="rgb(242,34,40)" fg:x="734" fg:w="2"/><text x="58.6430%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="58.3930%" y="277" width="0.1591%" height="15" fill="rgb(215,42,17)" fg:x="734" fg:w="2"/><text x="58.6430%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.4726%" y="261" width="0.0796%" height="15" fill="rgb(207,44,46)" fg:x="735" fg:w="1"/><text x="58.7226%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="58.1543%" y="357" width="0.4773%" height="15" fill="rgb(211,206,28)" fg:x="731" fg:w="6"/><text x="58.4043%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.5521%" y="341" width="0.0796%" height="15" fill="rgb(237,167,16)" fg:x="736" fg:w="1"/><text x="58.8021%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="58.6317%" y="357" width="0.0796%" height="15" fill="rgb(233,66,6)" fg:x="737" fg:w="1"/><text x="58.8817%" y="367.50"></text></g><g><title>plugins_core::tools::contained_by (19 samples, 1.51%)</title><rect x="57.2792%" y="533" width="1.5115%" height="15" fill="rgb(246,123,29)" fg:x="720" fg:w="19"/><text x="57.5292%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (15 samples, 1.19%)</title><rect x="57.5975%" y="517" width="1.1933%" height="15" fill="rgb(209,62,40)" fg:x="724" fg:w="15"/><text x="57.8475%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (15 samples, 1.19%)</title><rect x="57.5975%" y="501" width="1.1933%" height="15" fill="rgb(218,4,25)" fg:x="724" fg:w="15"/><text x="57.8475%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (15 samples, 1.19%)</title><rect x="57.5975%" y="485" width="1.1933%" height="15" fill="rgb(253,91,49)" fg:x="724" fg:w="15"/><text x="57.8475%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.19%)</title><rect x="57.5975%" y="469" width="1.1933%" height="15" fill="rgb(228,155,29)" fg:x="724" fg:w="15"/><text x="57.8475%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.64%)</title><rect x="58.1543%" y="453" width="0.6364%" height="15" fill="rgb(243,57,37)" fg:x="731" fg:w="8"/><text x="58.4043%" y="463.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.64%)</title><rect x="58.1543%" y="437" width="0.6364%" height="15" fill="rgb(244,167,17)" fg:x="731" fg:w="8"/><text x="58.4043%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="58.1543%" y="421" width="0.6364%" height="15" fill="rgb(207,181,38)" fg:x="731" fg:w="8"/><text x="58.4043%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="58.1543%" y="405" width="0.6364%" height="15" fill="rgb(211,8,23)" fg:x="731" fg:w="8"/><text x="58.4043%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="58.1543%" y="389" width="0.6364%" height="15" fill="rgb(235,11,44)" fg:x="731" fg:w="8"/><text x="58.4043%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="58.1543%" y="373" width="0.6364%" height="15" fill="rgb(248,18,52)" fg:x="731" fg:w="8"/><text x="58.4043%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.7112%" y="357" width="0.0796%" height="15" fill="rgb(208,4,7)" fg:x="738" fg:w="1"/><text x="58.9612%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.7112%" y="341" width="0.0796%" height="15" fill="rgb(240,17,39)" fg:x="738" fg:w="1"/><text x="58.9612%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.7112%" y="325" width="0.0796%" height="15" fill="rgb(207,170,3)" fg:x="738" fg:w="1"/><text x="58.9612%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.8703%" y="501" width="0.0796%" height="15" fill="rgb(236,100,52)" fg:x="740" fg:w="1"/><text x="59.1203%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="58.8703%" y="517" width="0.3978%" height="15" fill="rgb(246,78,51)" fg:x="740" fg:w="5"/><text x="59.1203%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="58.9499%" y="501" width="0.3182%" height="15" fill="rgb(211,17,15)" fg:x="741" fg:w="4"/><text x="59.1999%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="58.9499%" y="485" width="0.3182%" height="15" fill="rgb(209,59,46)" fg:x="741" fg:w="4"/><text x="59.1999%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="59.1090%" y="469" width="0.1591%" height="15" fill="rgb(210,92,25)" fg:x="743" fg:w="2"/><text x="59.3590%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="59.1090%" y="453" width="0.1591%" height="15" fill="rgb(238,174,52)" fg:x="743" fg:w="2"/><text x="59.3590%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="59.1090%" y="437" width="0.1591%" height="15" fill="rgb(230,73,7)" fg:x="743" fg:w="2"/><text x="59.3590%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.1885%" y="421" width="0.0796%" height="15" fill="rgb(243,124,40)" fg:x="744" fg:w="1"/><text x="59.4385%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.1885%" y="405" width="0.0796%" height="15" fill="rgb(244,170,11)" fg:x="744" fg:w="1"/><text x="59.4385%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.1885%" y="389" width="0.0796%" height="15" fill="rgb(207,114,54)" fg:x="744" fg:w="1"/><text x="59.4385%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.1885%" y="373" width="0.0796%" height="15" fill="rgb(205,42,20)" fg:x="744" fg:w="1"/><text x="59.4385%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.1885%" y="357" width="0.0796%" height="15" fill="rgb(230,30,28)" fg:x="744" fg:w="1"/><text x="59.4385%" y="367.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (28 samples, 2.23%)</title><rect x="57.1201%" y="549" width="2.2275%" height="15" fill="rgb(205,73,54)" fg:x="718" fg:w="28"/><text x="57.3701%" y="559.50">p..</text></g><g><title>plugins_core::tools::occupied_by (7 samples, 0.56%)</title><rect x="58.7908%" y="533" width="0.5569%" height="15" fill="rgb(254,227,23)" fg:x="739" fg:w="7"/><text x="59.0408%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="59.2681%" y="517" width="0.0796%" height="15" fill="rgb(228,202,34)" fg:x="745" fg:w="1"/><text x="59.5181%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="59.2681%" y="501" width="0.0796%" height="15" fill="rgb(222,225,37)" fg:x="745" fg:w="1"/><text x="59.5181%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.2681%" y="485" width="0.0796%" height="15" fill="rgb(221,14,54)" fg:x="745" fg:w="1"/><text x="59.5181%" y="495.50"></text></g><g><title>engine::session::Session::captured (442 samples, 35.16%)</title><rect x="24.2641%" y="709" width="35.1631%" height="15" fill="rgb(254,102,2)" fg:x="305" fg:w="442"/><text x="24.5141%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (439 samples, 34.92%)</title><rect x="24.5028%" y="693" width="34.9244%" height="15" fill="rgb(232,104,17)" fg:x="308" fg:w="439"/><text x="24.7528%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (430 samples, 34.21%)</title><rect x="25.2188%" y="677" width="34.2084%" height="15" fill="rgb(250,220,14)" fg:x="317" fg:w="430"/><text x="25.4688%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (430 samples, 34.21%)</title><rect x="25.2188%" y="661" width="34.2084%" height="15" fill="rgb(241,158,9)" fg:x="317" fg:w="430"/><text x="25.4688%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer..</text></g><g><title>kernel::plugins::mw::apply_middleware (430 samples, 34.21%)</title><rect x="25.2188%" y="645" width="34.2084%" height="15" fill="rgb(246,9,43)" fg:x="317" fg:w="430"/><text x="25.4688%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (429 samples, 34.13%)</title><rect x="25.2983%" y="629" width="34.1289%" height="15" fill="rgb(206,73,33)" fg:x="318" fg:w="429"/><text x="25.5483%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (429 samples, 34.13%)</title><rect x="25.2983%" y="613" width="34.1289%" height="15" fill="rgb(222,79,8)" fg:x="318" fg:w="429"/><text x="25.5483%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kerne..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (415 samples, 33.02%)</title><rect x="26.4121%" y="597" width="33.0151%" height="15" fill="rgb(234,8,54)" fg:x="332" fg:w="415"/><text x="26.6621%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (415 samples, 33.02%)</title><rect x="26.4121%" y="581" width="33.0151%" height="15" fill="rgb(209,134,38)" fg:x="332" fg:w="415"/><text x="26.6621%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw:..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (29 samples, 2.31%)</title><rect x="57.1201%" y="565" width="2.3071%" height="15" fill="rgb(230,127,29)" fg:x="718" fg:w="29"/><text x="57.3701%" y="575.50">p..</text></g><g><title>plugins_rune::sources::load_sources_from_entity (1 samples, 0.08%)</title><rect x="59.3477%" y="549" width="0.0796%" height="15" fill="rgb(242,44,41)" fg:x="746" fg:w="1"/><text x="59.5977%" y="559.50"></text></g><g><title>plugins_rune::sources::get_script (1 samples, 0.08%)</title><rect x="59.3477%" y="533" width="0.0796%" height="15" fill="rgb(222,56,43)" fg:x="746" fg:w="1"/><text x="59.5977%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="59.5068%" y="677" width="0.0796%" height="15" fill="rgb(238,39,47)" fg:x="748" fg:w="1"/><text x="59.7568%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="59.5068%" y="661" width="0.0796%" height="15" fill="rgb(226,79,43)" fg:x="748" fg:w="1"/><text x="59.7568%" y="671.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.5068%" y="645" width="0.0796%" height="15" fill="rgb(242,105,53)" fg:x="748" fg:w="1"/><text x="59.7568%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="59.6659%" y="661" width="0.1591%" height="15" fill="rgb(251,132,46)" fg:x="750" fg:w="2"/><text x="59.9159%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="59.6659%" y="645" width="0.1591%" height="15" fill="rgb(231,77,14)" fg:x="750" fg:w="2"/><text x="59.9159%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="59.6659%" y="629" width="0.1591%" height="15" fill="rgb(240,135,9)" fg:x="750" fg:w="2"/><text x="59.9159%" y="639.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="59.6659%" y="613" width="0.1591%" height="15" fill="rgb(248,109,14)" fg:x="750" fg:w="2"/><text x="59.9159%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.8250%" y="613" width="0.0796%" height="15" fill="rgb(227,146,52)" fg:x="752" fg:w="1"/><text x="60.0750%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.8250%" y="597" width="0.0796%" height="15" fill="rgb(232,54,3)" fg:x="752" fg:w="1"/><text x="60.0750%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.8250%" y="581" width="0.0796%" height="15" fill="rgb(229,201,43)" fg:x="752" fg:w="1"/><text x="60.0750%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.9841%" y="565" width="0.0796%" height="15" fill="rgb(252,161,33)" fg:x="754" fg:w="1"/><text x="60.2341%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.9841%" y="549" width="0.0796%" height="15" fill="rgb(226,146,40)" fg:x="754" fg:w="1"/><text x="60.2341%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.9841%" y="533" width="0.0796%" height="15" fill="rgb(219,47,25)" fg:x="754" fg:w="1"/><text x="60.2341%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.9841%" y="517" width="0.0796%" height="15" fill="rgb(250,135,13)" fg:x="754" fg:w="1"/><text x="60.2341%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.9841%" y="501" width="0.0796%" height="15" fill="rgb(219,229,18)" fg:x="754" fg:w="1"/><text x="60.2341%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.9841%" y="485" width="0.0796%" height="15" fill="rgb(217,152,27)" fg:x="754" fg:w="1"/><text x="60.2341%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.9841%" y="469" width="0.0796%" height="15" fill="rgb(225,71,47)" fg:x="754" fg:w="1"/><text x="60.2341%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.9841%" y="453" width="0.0796%" height="15" fill="rgb(220,139,14)" fg:x="754" fg:w="1"/><text x="60.2341%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.9841%" y="437" width="0.0796%" height="15" fill="rgb(247,54,32)" fg:x="754" fg:w="1"/><text x="60.2341%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.9841%" y="421" width="0.0796%" height="15" fill="rgb(252,131,39)" fg:x="754" fg:w="1"/><text x="60.2341%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.9841%" y="405" width="0.0796%" height="15" fill="rgb(210,108,39)" fg:x="754" fg:w="1"/><text x="60.2341%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.9841%" y="389" width="0.0796%" height="15" fill="rgb(205,23,29)" fg:x="754" fg:w="1"/><text x="60.2341%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.9841%" y="373" width="0.0796%" height="15" fill="rgb(246,139,46)" fg:x="754" fg:w="1"/><text x="60.2341%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.1432%" y="517" width="0.0796%" height="15" fill="rgb(250,81,26)" fg:x="756" fg:w="1"/><text x="60.3932%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="60.2228%" y="517" width="0.0796%" height="15" fill="rgb(214,104,7)" fg:x="757" fg:w="1"/><text x="60.4728%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="60.2228%" y="501" width="0.0796%" height="15" fill="rgb(233,189,8)" fg:x="757" fg:w="1"/><text x="60.4728%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="60.2228%" y="485" width="0.0796%" height="15" fill="rgb(228,141,17)" fg:x="757" fg:w="1"/><text x="60.4728%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.2228%" y="469" width="0.0796%" height="15" fill="rgb(247,157,1)" fg:x="757" fg:w="1"/><text x="60.4728%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.2228%" y="453" width="0.0796%" height="15" fill="rgb(249,225,5)" fg:x="757" fg:w="1"/><text x="60.4728%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="60.2228%" y="437" width="0.0796%" height="15" fill="rgb(242,55,13)" fg:x="757" fg:w="1"/><text x="60.4728%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="59.8250%" y="661" width="0.6364%" height="15" fill="rgb(230,49,50)" fg:x="752" fg:w="8"/><text x="60.0750%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="59.8250%" y="645" width="0.6364%" height="15" fill="rgb(241,111,38)" fg:x="752" fg:w="8"/><text x="60.0750%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.64%)</title><rect x="59.8250%" y="629" width="0.6364%" height="15" fill="rgb(252,155,4)" fg:x="752" fg:w="8"/><text x="60.0750%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="59.9045%" y="613" width="0.5569%" height="15" fill="rgb(212,69,32)" fg:x="753" fg:w="7"/><text x="60.1545%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="59.9045%" y="597" width="0.5569%" height="15" fill="rgb(243,107,47)" fg:x="753" fg:w="7"/><text x="60.1545%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="59.9045%" y="581" width="0.5569%" height="15" fill="rgb(247,130,12)" fg:x="753" fg:w="7"/><text x="60.1545%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="60.0636%" y="565" width="0.3978%" height="15" fill="rgb(233,74,16)" fg:x="755" fg:w="5"/><text x="60.3136%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="60.0636%" y="549" width="0.3978%" height="15" fill="rgb(208,58,18)" fg:x="755" fg:w="5"/><text x="60.3136%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="60.1432%" y="533" width="0.3182%" height="15" fill="rgb(242,225,1)" fg:x="756" fg:w="4"/><text x="60.3932%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="60.3023%" y="517" width="0.1591%" height="15" fill="rgb(249,39,40)" fg:x="758" fg:w="2"/><text x="60.5523%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.3023%" y="501" width="0.1591%" height="15" fill="rgb(207,72,44)" fg:x="758" fg:w="2"/><text x="60.5523%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.6205%" y="597" width="0.0796%" height="15" fill="rgb(215,193,12)" fg:x="762" fg:w="1"/><text x="60.8705%" y="607.50"></text></g><g><title>engine::session::internal::Added::find_refs (17 samples, 1.35%)</title><rect x="59.4272%" y="693" width="1.3524%" height="15" fill="rgb(248,41,39)" fg:x="747" fg:w="17"/><text x="59.6772%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (15 samples, 1.19%)</title><rect x="59.5863%" y="677" width="1.1933%" height="15" fill="rgb(253,85,4)" fg:x="749" fg:w="15"/><text x="59.8363%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="60.4614%" y="661" width="0.3182%" height="15" fill="rgb(243,70,31)" fg:x="760" fg:w="4"/><text x="60.7114%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="60.4614%" y="645" width="0.3182%" height="15" fill="rgb(253,195,26)" fg:x="760" fg:w="4"/><text x="60.7114%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="60.6205%" y="629" width="0.1591%" height="15" fill="rgb(243,42,11)" fg:x="762" fg:w="2"/><text x="60.8705%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="60.6205%" y="613" width="0.1591%" height="15" fill="rgb(239,66,17)" fg:x="762" fg:w="2"/><text x="60.8705%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="60.7001%" y="597" width="0.0796%" height="15" fill="rgb(217,132,21)" fg:x="763" fg:w="1"/><text x="60.9501%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="60.7001%" y="581" width="0.0796%" height="15" fill="rgb(252,202,21)" fg:x="763" fg:w="1"/><text x="60.9501%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.7001%" y="565" width="0.0796%" height="15" fill="rgb(233,98,36)" fg:x="763" fg:w="1"/><text x="60.9501%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.7001%" y="549" width="0.0796%" height="15" fill="rgb(216,153,54)" fg:x="763" fg:w="1"/><text x="60.9501%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.7796%" y="661" width="0.0796%" height="15" fill="rgb(250,99,7)" fg:x="764" fg:w="1"/><text x="61.0296%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.7796%" y="645" width="0.0796%" height="15" fill="rgb(207,56,50)" fg:x="764" fg:w="1"/><text x="61.0296%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.7796%" y="677" width="0.1591%" height="15" fill="rgb(244,61,34)" fg:x="764" fg:w="2"/><text x="61.0296%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.8592%" y="661" width="0.0796%" height="15" fill="rgb(241,50,38)" fg:x="765" fg:w="1"/><text x="61.1092%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.8592%" y="645" width="0.0796%" height="15" fill="rgb(212,166,30)" fg:x="765" fg:w="1"/><text x="61.1092%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.8592%" y="629" width="0.0796%" height="15" fill="rgb(249,127,32)" fg:x="765" fg:w="1"/><text x="61.1092%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.8592%" y="613" width="0.0796%" height="15" fill="rgb(209,103,0)" fg:x="765" fg:w="1"/><text x="61.1092%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.8592%" y="597" width="0.0796%" height="15" fill="rgb(238,209,51)" fg:x="765" fg:w="1"/><text x="61.1092%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.8592%" y="581" width="0.0796%" height="15" fill="rgb(237,56,23)" fg:x="765" fg:w="1"/><text x="61.1092%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.8592%" y="565" width="0.0796%" height="15" fill="rgb(215,153,46)" fg:x="765" fg:w="1"/><text x="61.1092%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.8592%" y="549" width="0.0796%" height="15" fill="rgb(224,49,31)" fg:x="765" fg:w="1"/><text x="61.1092%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.8592%" y="533" width="0.0796%" height="15" fill="rgb(250,18,42)" fg:x="765" fg:w="1"/><text x="61.1092%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.8592%" y="517" width="0.0796%" height="15" fill="rgb(215,176,39)" fg:x="765" fg:w="1"/><text x="61.1092%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.8592%" y="501" width="0.0796%" height="15" fill="rgb(223,77,29)" fg:x="765" fg:w="1"/><text x="61.1092%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.8592%" y="485" width="0.0796%" height="15" fill="rgb(234,94,52)" fg:x="765" fg:w="1"/><text x="61.1092%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="60.9387%" y="677" width="0.0796%" height="15" fill="rgb(220,154,50)" fg:x="766" fg:w="1"/><text x="61.1887%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.9387%" y="661" width="0.0796%" height="15" fill="rgb(212,11,10)" fg:x="766" fg:w="1"/><text x="61.1887%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.9387%" y="645" width="0.0796%" height="15" fill="rgb(205,166,19)" fg:x="766" fg:w="1"/><text x="61.1887%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.9387%" y="629" width="0.0796%" height="15" fill="rgb(244,198,16)" fg:x="766" fg:w="1"/><text x="61.1887%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.9387%" y="613" width="0.0796%" height="15" fill="rgb(219,69,12)" fg:x="766" fg:w="1"/><text x="61.1887%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.9387%" y="597" width="0.0796%" height="15" fill="rgb(245,30,7)" fg:x="766" fg:w="1"/><text x="61.1887%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.9387%" y="581" width="0.0796%" height="15" fill="rgb(218,221,48)" fg:x="766" fg:w="1"/><text x="61.1887%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.9387%" y="565" width="0.0796%" height="15" fill="rgb(216,66,15)" fg:x="766" fg:w="1"/><text x="61.1887%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.9387%" y="549" width="0.0796%" height="15" fill="rgb(226,122,50)" fg:x="766" fg:w="1"/><text x="61.1887%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.9387%" y="533" width="0.0796%" height="15" fill="rgb(239,156,16)" fg:x="766" fg:w="1"/><text x="61.1887%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.9387%" y="517" width="0.0796%" height="15" fill="rgb(224,27,38)" fg:x="766" fg:w="1"/><text x="61.1887%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.9387%" y="501" width="0.0796%" height="15" fill="rgb(224,39,27)" fg:x="766" fg:w="1"/><text x="61.1887%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.9387%" y="485" width="0.0796%" height="15" fill="rgb(215,92,29)" fg:x="766" fg:w="1"/><text x="61.1887%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.9387%" y="469" width="0.0796%" height="15" fill="rgb(207,159,16)" fg:x="766" fg:w="1"/><text x="61.1887%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="61.1774%" y="581" width="0.0796%" height="15" fill="rgb(238,163,47)" fg:x="769" fg:w="1"/><text x="61.4274%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.1774%" y="565" width="0.0796%" height="15" fill="rgb(219,91,49)" fg:x="769" fg:w="1"/><text x="61.4274%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="61.1774%" y="549" width="0.0796%" height="15" fill="rgb(227,167,31)" fg:x="769" fg:w="1"/><text x="61.4274%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="61.1774%" y="533" width="0.0796%" height="15" fill="rgb(234,80,54)" fg:x="769" fg:w="1"/><text x="61.4274%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="61.2570%" y="549" width="0.0796%" height="15" fill="rgb(212,114,2)" fg:x="770" fg:w="1"/><text x="61.5070%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.2570%" y="533" width="0.0796%" height="15" fill="rgb(234,50,24)" fg:x="770" fg:w="1"/><text x="61.5070%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.2570%" y="517" width="0.0796%" height="15" fill="rgb(221,68,8)" fg:x="770" fg:w="1"/><text x="61.5070%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="61.0183%" y="677" width="0.3978%" height="15" fill="rgb(254,180,31)" fg:x="767" fg:w="5"/><text x="61.2683%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="61.0183%" y="661" width="0.3978%" height="15" fill="rgb(247,130,50)" fg:x="767" fg:w="5"/><text x="61.2683%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="61.0979%" y="645" width="0.3182%" height="15" fill="rgb(211,109,4)" fg:x="768" fg:w="4"/><text x="61.3479%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="61.1774%" y="629" width="0.2387%" height="15" fill="rgb(238,50,21)" fg:x="769" fg:w="3"/><text x="61.4274%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="61.1774%" y="613" width="0.2387%" height="15" fill="rgb(225,57,45)" fg:x="769" fg:w="3"/><text x="61.4274%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="61.1774%" y="597" width="0.2387%" height="15" fill="rgb(209,196,50)" fg:x="769" fg:w="3"/><text x="61.4274%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.2570%" y="581" width="0.1591%" height="15" fill="rgb(242,140,13)" fg:x="770" fg:w="2"/><text x="61.5070%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.2570%" y="565" width="0.1591%" height="15" fill="rgb(217,111,7)" fg:x="770" fg:w="2"/><text x="61.5070%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.3365%" y="549" width="0.0796%" height="15" fill="rgb(253,193,51)" fg:x="771" fg:w="1"/><text x="61.5865%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.4161%" y="565" width="0.0796%" height="15" fill="rgb(252,70,29)" fg:x="772" fg:w="1"/><text x="61.6661%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.4161%" y="549" width="0.0796%" height="15" fill="rgb(232,127,12)" fg:x="772" fg:w="1"/><text x="61.6661%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.4161%" y="533" width="0.0796%" height="15" fill="rgb(211,180,21)" fg:x="772" fg:w="1"/><text x="61.6661%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4161%" y="517" width="0.0796%" height="15" fill="rgb(229,72,13)" fg:x="772" fg:w="1"/><text x="61.6661%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.4161%" y="581" width="0.1591%" height="15" fill="rgb(240,211,49)" fg:x="772" fg:w="2"/><text x="61.6661%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4956%" y="565" width="0.0796%" height="15" fill="rgb(219,149,40)" fg:x="773" fg:w="1"/><text x="61.7456%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="61.4161%" y="597" width="0.2387%" height="15" fill="rgb(210,127,46)" fg:x="772" fg:w="3"/><text x="61.6661%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="61.5752%" y="581" width="0.0796%" height="15" fill="rgb(220,106,7)" fg:x="774" fg:w="1"/><text x="61.8252%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.5752%" y="565" width="0.0796%" height="15" fill="rgb(249,31,22)" fg:x="774" fg:w="1"/><text x="61.8252%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="61.4161%" y="613" width="0.3182%" height="15" fill="rgb(253,1,49)" fg:x="772" fg:w="4"/><text x="61.6661%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.6547%" y="597" width="0.0796%" height="15" fill="rgb(227,144,33)" fg:x="775" fg:w="1"/><text x="61.9047%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (30 samples, 2.39%)</title><rect x="59.4272%" y="709" width="2.3866%" height="15" fill="rgb(249,163,44)" fg:x="747" fg:w="30"/><text x="59.6772%" y="719.50">en..</text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.03%)</title><rect x="60.7796%" y="693" width="1.0342%" height="15" fill="rgb(234,15,39)" fg:x="764" fg:w="13"/><text x="61.0296%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="61.4161%" y="677" width="0.3978%" height="15" fill="rgb(207,66,16)" fg:x="772" fg:w="5"/><text x="61.6661%" y="687.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="61.4161%" y="661" width="0.3978%" height="15" fill="rgb(233,112,24)" fg:x="772" fg:w="5"/><text x="61.6661%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="61.4161%" y="645" width="0.3978%" height="15" fill="rgb(230,90,22)" fg:x="772" fg:w="5"/><text x="61.6661%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="61.4161%" y="629" width="0.3978%" height="15" fill="rgb(229,61,13)" fg:x="772" fg:w="5"/><text x="61.6661%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.7343%" y="613" width="0.0796%" height="15" fill="rgb(225,57,24)" fg:x="776" fg:w="1"/><text x="61.9843%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.8138%" y="693" width="0.0796%" height="15" fill="rgb(208,169,48)" fg:x="777" fg:w="1"/><text x="62.0638%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.8138%" y="677" width="0.0796%" height="15" fill="rgb(244,218,51)" fg:x="777" fg:w="1"/><text x="62.0638%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.8138%" y="661" width="0.0796%" height="15" fill="rgb(214,148,10)" fg:x="777" fg:w="1"/><text x="62.0638%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.8138%" y="645" width="0.0796%" height="15" fill="rgb(225,174,27)" fg:x="777" fg:w="1"/><text x="62.0638%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.8138%" y="629" width="0.0796%" height="15" fill="rgb(230,96,26)" fg:x="777" fg:w="1"/><text x="62.0638%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.8138%" y="613" width="0.0796%" height="15" fill="rgb(232,10,30)" fg:x="777" fg:w="1"/><text x="62.0638%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.8138%" y="597" width="0.0796%" height="15" fill="rgb(222,8,50)" fg:x="777" fg:w="1"/><text x="62.0638%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.8138%" y="581" width="0.0796%" height="15" fill="rgb(213,81,27)" fg:x="777" fg:w="1"/><text x="62.0638%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.8138%" y="565" width="0.0796%" height="15" fill="rgb(245,50,10)" fg:x="777" fg:w="1"/><text x="62.0638%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.8138%" y="549" width="0.0796%" height="15" fill="rgb(216,100,18)" fg:x="777" fg:w="1"/><text x="62.0638%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.8138%" y="533" width="0.0796%" height="15" fill="rgb(236,147,54)" fg:x="777" fg:w="1"/><text x="62.0638%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.8138%" y="517" width="0.0796%" height="15" fill="rgb(205,143,26)" fg:x="777" fg:w="1"/><text x="62.0638%" y="527.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="61.8138%" y="709" width="0.1591%" height="15" fill="rgb(236,26,9)" fg:x="777" fg:w="2"/><text x="62.0638%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="61.8934%" y="693" width="0.0796%" height="15" fill="rgb(221,165,53)" fg:x="778" fg:w="1"/><text x="62.1434%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.8934%" y="677" width="0.0796%" height="15" fill="rgb(214,110,17)" fg:x="778" fg:w="1"/><text x="62.1434%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.8934%" y="661" width="0.0796%" height="15" fill="rgb(237,197,12)" fg:x="778" fg:w="1"/><text x="62.1434%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="61.8934%" y="645" width="0.0796%" height="15" fill="rgb(205,84,17)" fg:x="778" fg:w="1"/><text x="62.1434%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.8934%" y="629" width="0.0796%" height="15" fill="rgb(237,18,45)" fg:x="778" fg:w="1"/><text x="62.1434%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="61.8934%" y="613" width="0.0796%" height="15" fill="rgb(221,87,14)" fg:x="778" fg:w="1"/><text x="62.1434%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="61.9730%" y="661" width="0.0796%" height="15" fill="rgb(238,186,15)" fg:x="779" fg:w="1"/><text x="62.2230%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.9730%" y="645" width="0.0796%" height="15" fill="rgb(208,115,11)" fg:x="779" fg:w="1"/><text x="62.2230%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.9730%" y="629" width="0.0796%" height="15" fill="rgb(254,175,0)" fg:x="779" fg:w="1"/><text x="62.2230%" y="639.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.0525%" y="565" width="0.0796%" height="15" fill="rgb(227,24,42)" fg:x="780" fg:w="1"/><text x="62.3025%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.0525%" y="549" width="0.0796%" height="15" fill="rgb(223,211,37)" fg:x="780" fg:w="1"/><text x="62.3025%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.0525%" y="533" width="0.0796%" height="15" fill="rgb(235,49,27)" fg:x="780" fg:w="1"/><text x="62.3025%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="62.1321%" y="565" width="0.0796%" height="15" fill="rgb(254,97,51)" fg:x="781" fg:w="1"/><text x="62.3821%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.2116%" y="533" width="0.0796%" height="15" fill="rgb(249,51,40)" fg:x="782" fg:w="1"/><text x="62.4616%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.2116%" y="517" width="0.0796%" height="15" fill="rgb(210,128,45)" fg:x="782" fg:w="1"/><text x="62.4616%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="62.0525%" y="661" width="0.3182%" height="15" fill="rgb(224,137,50)" fg:x="780" fg:w="4"/><text x="62.3025%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="62.0525%" y="645" width="0.3182%" height="15" fill="rgb(242,15,9)" fg:x="780" fg:w="4"/><text x="62.3025%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="62.0525%" y="629" width="0.3182%" height="15" fill="rgb(233,187,41)" fg:x="780" fg:w="4"/><text x="62.3025%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="62.0525%" y="613" width="0.3182%" height="15" fill="rgb(227,2,29)" fg:x="780" fg:w="4"/><text x="62.3025%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="62.0525%" y="597" width="0.3182%" height="15" fill="rgb(222,70,3)" fg:x="780" fg:w="4"/><text x="62.3025%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="62.0525%" y="581" width="0.3182%" height="15" fill="rgb(213,11,42)" fg:x="780" fg:w="4"/><text x="62.3025%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.2116%" y="565" width="0.1591%" height="15" fill="rgb(225,150,9)" fg:x="782" fg:w="2"/><text x="62.4616%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.2116%" y="549" width="0.1591%" height="15" fill="rgb(230,162,45)" fg:x="782" fg:w="2"/><text x="62.4616%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="62.2912%" y="533" width="0.0796%" height="15" fill="rgb(222,14,52)" fg:x="783" fg:w="1"/><text x="62.5412%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2912%" y="517" width="0.0796%" height="15" fill="rgb(254,198,14)" fg:x="783" fg:w="1"/><text x="62.5412%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.2912%" y="501" width="0.0796%" height="15" fill="rgb(220,217,30)" fg:x="783" fg:w="1"/><text x="62.5412%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.2912%" y="485" width="0.0796%" height="15" fill="rgb(215,146,41)" fg:x="783" fg:w="1"/><text x="62.5412%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.2912%" y="469" width="0.0796%" height="15" fill="rgb(217,27,36)" fg:x="783" fg:w="1"/><text x="62.5412%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.2912%" y="453" width="0.0796%" height="15" fill="rgb(219,218,39)" fg:x="783" fg:w="1"/><text x="62.5412%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.3707%" y="565" width="0.0796%" height="15" fill="rgb(219,4,42)" fg:x="784" fg:w="1"/><text x="62.6207%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.3707%" y="549" width="0.0796%" height="15" fill="rgb(249,119,36)" fg:x="784" fg:w="1"/><text x="62.6207%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="62.3707%" y="597" width="0.1591%" height="15" fill="rgb(209,23,33)" fg:x="784" fg:w="2"/><text x="62.6207%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.3707%" y="581" width="0.1591%" height="15" fill="rgb(211,10,0)" fg:x="784" fg:w="2"/><text x="62.6207%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.4503%" y="565" width="0.0796%" height="15" fill="rgb(208,99,37)" fg:x="785" fg:w="1"/><text x="62.7003%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (787 samples, 62.61%)</title><rect x="0.0000%" y="789" width="62.6094%" height="15" fill="rgb(213,132,31)" fg:x="0" fg:w="787"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (787 samples, 62.61%)</title><rect x="0.0000%" y="773" width="62.6094%" height="15" fill="rgb(243,129,40)" fg:x="0" fg:w="787"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (787 samples, 62.61%)</title><rect x="0.0000%" y="757" width="62.6094%" height="15" fill="rgb(210,66,33)" fg:x="0" fg:w="787"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (484 samples, 38.50%)</title><rect x="24.1050%" y="741" width="38.5044%" height="15" fill="rgb(209,189,4)" fg:x="303" fg:w="484"/><text x="24.3550%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (484 samples, 38.50%)</title><rect x="24.1050%" y="725" width="38.5044%" height="15" fill="rgb(214,107,37)" fg:x="303" fg:w="484"/><text x="24.3550%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (8 samples, 0.64%)</title><rect x="61.9730%" y="709" width="0.6364%" height="15" fill="rgb(245,88,54)" fg:x="779" fg:w="8"/><text x="62.2230%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.64%)</title><rect x="61.9730%" y="693" width="0.6364%" height="15" fill="rgb(205,146,20)" fg:x="779" fg:w="8"/><text x="62.2230%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="61.9730%" y="677" width="0.6364%" height="15" fill="rgb(220,161,25)" fg:x="779" fg:w="8"/><text x="62.2230%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="62.3707%" y="661" width="0.2387%" height="15" fill="rgb(215,152,15)" fg:x="784" fg:w="3"/><text x="62.6207%" y="671.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="62.3707%" y="645" width="0.2387%" height="15" fill="rgb(233,192,44)" fg:x="784" fg:w="3"/><text x="62.6207%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="62.3707%" y="629" width="0.2387%" height="15" fill="rgb(240,170,46)" fg:x="784" fg:w="3"/><text x="62.6207%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="62.3707%" y="613" width="0.2387%" height="15" fill="rgb(207,104,33)" fg:x="784" fg:w="3"/><text x="62.6207%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.5298%" y="597" width="0.0796%" height="15" fill="rgb(219,21,39)" fg:x="786" fg:w="1"/><text x="62.7798%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.5298%" y="581" width="0.0796%" height="15" fill="rgb(214,133,29)" fg:x="786" fg:w="1"/><text x="62.7798%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.5298%" y="565" width="0.0796%" height="15" fill="rgb(226,93,6)" fg:x="786" fg:w="1"/><text x="62.7798%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.9276%" y="693" width="0.0796%" height="15" fill="rgb(252,222,34)" fg:x="791" fg:w="1"/><text x="63.1776%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.9276%" y="677" width="0.0796%" height="15" fill="rgb(252,92,48)" fg:x="791" fg:w="1"/><text x="63.1776%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="62.7685%" y="725" width="0.3182%" height="15" fill="rgb(245,223,24)" fg:x="789" fg:w="4"/><text x="63.0185%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="62.9276%" y="709" width="0.1591%" height="15" fill="rgb(205,176,3)" fg:x="791" fg:w="2"/><text x="63.1776%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.0072%" y="693" width="0.0796%" height="15" fill="rgb(235,151,15)" fg:x="792" fg:w="1"/><text x="63.2572%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="63.0072%" y="677" width="0.0796%" height="15" fill="rgb(237,209,11)" fg:x="792" fg:w="1"/><text x="63.2572%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="63.0072%" y="661" width="0.0796%" height="15" fill="rgb(243,227,24)" fg:x="792" fg:w="1"/><text x="63.2572%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.0072%" y="645" width="0.0796%" height="15" fill="rgb(239,193,16)" fg:x="792" fg:w="1"/><text x="63.2572%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.1663%" y="613" width="0.0796%" height="15" fill="rgb(231,27,9)" fg:x="794" fg:w="1"/><text x="63.4163%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.1663%" y="597" width="0.0796%" height="15" fill="rgb(219,169,10)" fg:x="794" fg:w="1"/><text x="63.4163%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.1663%" y="661" width="0.1591%" height="15" fill="rgb(244,229,43)" fg:x="794" fg:w="2"/><text x="63.4163%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (2 samples, 0.16%)</title><rect x="63.1663%" y="645" width="0.1591%" height="15" fill="rgb(254,38,20)" fg:x="794" fg:w="2"/><text x="63.4163%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="63.1663%" y="629" width="0.1591%" height="15" fill="rgb(250,47,30)" fg:x="794" fg:w="2"/><text x="63.4163%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.2458%" y="613" width="0.0796%" height="15" fill="rgb(224,124,36)" fg:x="795" fg:w="1"/><text x="63.4958%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.2458%" y="597" width="0.0796%" height="15" fill="rgb(246,68,51)" fg:x="795" fg:w="1"/><text x="63.4958%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="63.2458%" y="581" width="0.0796%" height="15" fill="rgb(253,43,49)" fg:x="795" fg:w="1"/><text x="63.4958%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.2458%" y="565" width="0.0796%" height="15" fill="rgb(219,54,36)" fg:x="795" fg:w="1"/><text x="63.4958%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.2458%" y="549" width="0.0796%" height="15" fill="rgb(227,133,34)" fg:x="795" fg:w="1"/><text x="63.4958%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.3254%" y="645" width="0.0796%" height="15" fill="rgb(247,227,15)" fg:x="796" fg:w="1"/><text x="63.5754%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.4845%" y="629" width="0.0796%" height="15" fill="rgb(229,96,14)" fg:x="798" fg:w="1"/><text x="63.7345%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.4845%" y="613" width="0.0796%" height="15" fill="rgb(220,79,17)" fg:x="798" fg:w="1"/><text x="63.7345%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.5640%" y="597" width="0.0796%" height="15" fill="rgb(205,131,53)" fg:x="799" fg:w="1"/><text x="63.8140%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (8 samples, 0.64%)</title><rect x="63.0867%" y="725" width="0.6364%" height="15" fill="rgb(209,50,29)" fg:x="793" fg:w="8"/><text x="63.3367%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="63.0867%" y="709" width="0.6364%" height="15" fill="rgb(245,86,46)" fg:x="793" fg:w="8"/><text x="63.3367%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (7 samples, 0.56%)</title><rect x="63.1663%" y="693" width="0.5569%" height="15" fill="rgb(235,66,46)" fg:x="794" fg:w="7"/><text x="63.4163%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="63.1663%" y="677" width="0.5569%" height="15" fill="rgb(232,148,31)" fg:x="794" fg:w="7"/><text x="63.4163%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="63.3254%" y="661" width="0.3978%" height="15" fill="rgb(217,149,8)" fg:x="796" fg:w="5"/><text x="63.5754%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="63.4049%" y="645" width="0.3182%" height="15" fill="rgb(209,183,11)" fg:x="797" fg:w="4"/><text x="63.6549%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="63.5640%" y="629" width="0.1591%" height="15" fill="rgb(208,55,20)" fg:x="799" fg:w="2"/><text x="63.8140%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="63.5640%" y="613" width="0.1591%" height="15" fill="rgb(218,39,14)" fg:x="799" fg:w="2"/><text x="63.8140%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.6436%" y="597" width="0.0796%" height="15" fill="rgb(216,169,33)" fg:x="800" fg:w="1"/><text x="63.8936%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.6436%" y="581" width="0.0796%" height="15" fill="rgb(233,80,24)" fg:x="800" fg:w="1"/><text x="63.8936%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.6436%" y="565" width="0.0796%" height="15" fill="rgb(213,179,31)" fg:x="800" fg:w="1"/><text x="63.8936%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.11%)</title><rect x="62.6889%" y="741" width="1.1138%" height="15" fill="rgb(209,19,5)" fg:x="788" fg:w="14"/><text x="62.9389%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="63.7232%" y="725" width="0.0796%" height="15" fill="rgb(219,18,35)" fg:x="801" fg:w="1"/><text x="63.9732%" y="735.50"></text></g><g><title>&lt;kernel::session::SetSession&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.8027%" y="677" width="0.0796%" height="15" fill="rgb(209,169,16)" fg:x="802" fg:w="1"/><text x="64.0527%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.0414%" y="613" width="0.0796%" height="15" fill="rgb(245,90,51)" fg:x="805" fg:w="1"/><text x="64.2914%" y="623.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="64.0414%" y="645" width="0.1591%" height="15" fill="rgb(220,99,45)" fg:x="805" fg:w="2"/><text x="64.2914%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="64.0414%" y="629" width="0.1591%" height="15" fill="rgb(249,89,25)" fg:x="805" fg:w="2"/><text x="64.2914%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="64.1209%" y="613" width="0.0796%" height="15" fill="rgb(239,193,0)" fg:x="806" fg:w="1"/><text x="64.3709%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.1209%" y="597" width="0.0796%" height="15" fill="rgb(231,126,1)" fg:x="806" fg:w="1"/><text x="64.3709%" y="607.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="64.2005%" y="645" width="0.0796%" height="15" fill="rgb(243,166,3)" fg:x="807" fg:w="1"/><text x="64.4505%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="64.2005%" y="629" width="0.0796%" height="15" fill="rgb(223,22,34)" fg:x="807" fg:w="1"/><text x="64.4505%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="64.2005%" y="613" width="0.0796%" height="15" fill="rgb(251,52,51)" fg:x="807" fg:w="1"/><text x="64.4505%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.2005%" y="597" width="0.0796%" height="15" fill="rgb(221,165,28)" fg:x="807" fg:w="1"/><text x="64.4505%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (5 samples, 0.40%)</title><rect x="63.9618%" y="661" width="0.3978%" height="15" fill="rgb(218,121,47)" fg:x="804" fg:w="5"/><text x="64.2118%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.2800%" y="645" width="0.0796%" height="15" fill="rgb(209,120,9)" fg:x="808" fg:w="1"/><text x="64.5300%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="64.3596%" y="661" width="0.0796%" height="15" fill="rgb(236,68,12)" fg:x="809" fg:w="1"/><text x="64.6096%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="64.3596%" y="645" width="0.0796%" height="15" fill="rgb(225,194,26)" fg:x="809" fg:w="1"/><text x="64.6096%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="64.3596%" y="629" width="0.0796%" height="15" fill="rgb(231,84,39)" fg:x="809" fg:w="1"/><text x="64.6096%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="64.3596%" y="613" width="0.0796%" height="15" fill="rgb(210,11,45)" fg:x="809" fg:w="1"/><text x="64.6096%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="64.3596%" y="597" width="0.0796%" height="15" fill="rgb(224,54,52)" fg:x="809" fg:w="1"/><text x="64.6096%" y="607.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="64.4391%" y="645" width="0.1591%" height="15" fill="rgb(238,102,14)" fg:x="810" fg:w="2"/><text x="64.6891%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="64.4391%" y="629" width="0.1591%" height="15" fill="rgb(243,160,52)" fg:x="810" fg:w="2"/><text x="64.6891%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="64.4391%" y="613" width="0.1591%" height="15" fill="rgb(216,114,19)" fg:x="810" fg:w="2"/><text x="64.6891%" y="623.50"></text></g><g><title>libc::unix::linux_like::linux::makedev (1 samples, 0.08%)</title><rect x="64.6778%" y="501" width="0.0796%" height="15" fill="rgb(244,166,37)" fg:x="813" fg:w="1"/><text x="64.9278%" y="511.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="64.5982%" y="629" width="0.5569%" height="15" fill="rgb(246,29,44)" fg:x="812" fg:w="7"/><text x="64.8482%" y="639.50"></text></g><g><title>glob::fill_todo (6 samples, 0.48%)</title><rect x="64.6778%" y="613" width="0.4773%" height="15" fill="rgb(215,56,53)" fg:x="813" fg:w="6"/><text x="64.9278%" y="623.50"></text></g><g><title>glob::is_dir (6 samples, 0.48%)</title><rect x="64.6778%" y="597" width="0.4773%" height="15" fill="rgb(217,60,2)" fg:x="813" fg:w="6"/><text x="64.9278%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (6 samples, 0.48%)</title><rect x="64.6778%" y="581" width="0.4773%" height="15" fill="rgb(207,26,24)" fg:x="813" fg:w="6"/><text x="64.9278%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (6 samples, 0.48%)</title><rect x="64.6778%" y="565" width="0.4773%" height="15" fill="rgb(252,210,15)" fg:x="813" fg:w="6"/><text x="64.9278%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (6 samples, 0.48%)</title><rect x="64.6778%" y="549" width="0.4773%" height="15" fill="rgb(253,209,26)" fg:x="813" fg:w="6"/><text x="64.9278%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (6 samples, 0.48%)</title><rect x="64.6778%" y="533" width="0.4773%" height="15" fill="rgb(238,170,14)" fg:x="813" fg:w="6"/><text x="64.9278%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (6 samples, 0.48%)</title><rect x="64.6778%" y="517" width="0.4773%" height="15" fill="rgb(216,178,15)" fg:x="813" fg:w="6"/><text x="64.9278%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (5 samples, 0.40%)</title><rect x="64.7574%" y="501" width="0.3978%" height="15" fill="rgb(250,197,2)" fg:x="814" fg:w="5"/><text x="65.0074%" y="511.50"></text></g><g><title>statx (5 samples, 0.40%)</title><rect x="64.7574%" y="485" width="0.3978%" height="15" fill="rgb(212,70,42)" fg:x="814" fg:w="5"/><text x="65.0074%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;glob::Paths&gt; (1 samples, 0.08%)</title><rect x="65.1551%" y="629" width="0.0796%" height="15" fill="rgb(227,213,9)" fg:x="819" fg:w="1"/><text x="65.4051%" y="639.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (11 samples, 0.88%)</title><rect x="64.4391%" y="661" width="0.8751%" height="15" fill="rgb(245,99,25)" fg:x="810" fg:w="11"/><text x="64.6891%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (9 samples, 0.72%)</title><rect x="64.5982%" y="645" width="0.7160%" height="15" fill="rgb(250,82,29)" fg:x="812" fg:w="9"/><text x="64.8482%" y="655.50"></text></g><g><title>glob::glob (1 samples, 0.08%)</title><rect x="65.2347%" y="629" width="0.0796%" height="15" fill="rgb(241,226,54)" fg:x="820" fg:w="1"/><text x="65.4847%" y="639.50"></text></g><g><title>glob::glob_with (1 samples, 0.08%)</title><rect x="65.2347%" y="613" width="0.0796%" height="15" fill="rgb(221,99,41)" fg:x="820" fg:w="1"/><text x="65.4847%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.3142%" y="645" width="0.0796%" height="15" fill="rgb(213,90,21)" fg:x="821" fg:w="1"/><text x="65.5642%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (20 samples, 1.59%)</title><rect x="63.8823%" y="677" width="1.5911%" height="15" fill="rgb(205,208,24)" fg:x="803" fg:w="20"/><text x="64.1323%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (2 samples, 0.16%)</title><rect x="65.3142%" y="661" width="0.1591%" height="15" fill="rgb(246,31,12)" fg:x="821" fg:w="2"/><text x="65.5642%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="65.3938%" y="645" width="0.0796%" height="15" fill="rgb(213,154,6)" fg:x="822" fg:w="1"/><text x="65.6438%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.3938%" y="629" width="0.0796%" height="15" fill="rgb(222,163,29)" fg:x="822" fg:w="1"/><text x="65.6438%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="65.4733%" y="645" width="0.0796%" height="15" fill="rgb(227,201,8)" fg:x="823" fg:w="1"/><text x="65.7233%" y="655.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.4733%" y="629" width="0.0796%" height="15" fill="rgb(233,9,32)" fg:x="823" fg:w="1"/><text x="65.7233%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (23 samples, 1.83%)</title><rect x="63.8027%" y="741" width="1.8298%" height="15" fill="rgb(217,54,24)" fg:x="802" fg:w="23"/><text x="64.0527%" y="751.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (23 samples, 1.83%)</title><rect x="63.8027%" y="725" width="1.8298%" height="15" fill="rgb(235,192,0)" fg:x="802" fg:w="23"/><text x="64.0527%" y="735.50">e..</text></g><g><title>engine::session::Session::new (23 samples, 1.83%)</title><rect x="63.8027%" y="709" width="1.8298%" height="15" fill="rgb(235,45,9)" fg:x="802" fg:w="23"/><text x="64.0527%" y="719.50">e..</text></g><g><title>engine::session::Session::initialize (23 samples, 1.83%)</title><rect x="63.8027%" y="693" width="1.8298%" height="15" fill="rgb(246,42,40)" fg:x="802" fg:w="23"/><text x="64.0527%" y="703.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="65.4733%" y="677" width="0.1591%" height="15" fill="rgb(248,111,24)" fg:x="823" fg:w="2"/><text x="65.7233%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="65.4733%" y="661" width="0.1591%" height="15" fill="rgb(249,65,22)" fg:x="823" fg:w="2"/><text x="65.7233%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.5529%" y="645" width="0.0796%" height="15" fill="rgb(238,111,51)" fg:x="824" fg:w="1"/><text x="65.8029%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.5529%" y="629" width="0.0796%" height="15" fill="rgb(250,118,22)" fg:x="824" fg:w="1"/><text x="65.8029%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.5529%" y="613" width="0.0796%" height="15" fill="rgb(234,84,26)" fg:x="824" fg:w="1"/><text x="65.8029%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.6325%" y="725" width="0.0796%" height="15" fill="rgb(243,172,12)" fg:x="825" fg:w="1"/><text x="65.8825%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="65.6325%" y="709" width="0.0796%" height="15" fill="rgb(236,150,49)" fg:x="825" fg:w="1"/><text x="65.8825%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="65.6325%" y="693" width="0.0796%" height="15" fill="rgb(225,197,26)" fg:x="825" fg:w="1"/><text x="65.8825%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.6325%" y="677" width="0.0796%" height="15" fill="rgb(214,17,42)" fg:x="825" fg:w="1"/><text x="65.8825%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::surround::Surroundings&gt; (1 samples, 0.08%)</title><rect x="65.7120%" y="725" width="0.0796%" height="15" fill="rgb(224,165,40)" fg:x="826" fg:w="1"/><text x="65.9620%" y="735.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="65.7916%" y="613" width="0.2387%" height="15" fill="rgb(246,100,4)" fg:x="827" fg:w="3"/><text x="66.0416%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="65.7916%" y="597" width="0.2387%" height="15" fill="rgb(222,103,0)" fg:x="827" fg:w="3"/><text x="66.0416%" y="607.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="65.7916%" y="581" width="0.2387%" height="15" fill="rgb(227,189,26)" fg:x="827" fg:w="3"/><text x="66.0416%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="65.7916%" y="565" width="0.2387%" height="15" fill="rgb(214,202,17)" fg:x="827" fg:w="3"/><text x="66.0416%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="65.8711%" y="549" width="0.1591%" height="15" fill="rgb(229,111,3)" fg:x="828" fg:w="2"/><text x="66.1211%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="65.8711%" y="533" width="0.1591%" height="15" fill="rgb(229,172,15)" fg:x="828" fg:w="2"/><text x="66.1211%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.8711%" y="517" width="0.1591%" height="15" fill="rgb(230,224,35)" fg:x="828" fg:w="2"/><text x="66.1211%" y="527.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="65.8711%" y="501" width="0.1591%" height="15" fill="rgb(251,141,6)" fg:x="828" fg:w="2"/><text x="66.1211%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="66.1098%" y="549" width="0.0796%" height="15" fill="rgb(225,208,6)" fg:x="831" fg:w="1"/><text x="66.3598%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.1098%" y="533" width="0.0796%" height="15" fill="rgb(246,181,16)" fg:x="831" fg:w="1"/><text x="66.3598%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.1098%" y="517" width="0.0796%" height="15" fill="rgb(227,129,36)" fg:x="831" fg:w="1"/><text x="66.3598%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.1098%" y="501" width="0.0796%" height="15" fill="rgb(248,117,24)" fg:x="831" fg:w="1"/><text x="66.3598%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.1098%" y="485" width="0.0796%" height="15" fill="rgb(214,185,35)" fg:x="831" fg:w="1"/><text x="66.3598%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.1098%" y="469" width="0.0796%" height="15" fill="rgb(236,150,34)" fg:x="831" fg:w="1"/><text x="66.3598%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.1098%" y="453" width="0.0796%" height="15" fill="rgb(243,228,27)" fg:x="831" fg:w="1"/><text x="66.3598%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="66.1098%" y="581" width="0.1591%" height="15" fill="rgb(245,77,44)" fg:x="831" fg:w="2"/><text x="66.3598%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="66.1098%" y="565" width="0.1591%" height="15" fill="rgb(235,214,42)" fg:x="831" fg:w="2"/><text x="66.3598%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.1893%" y="549" width="0.0796%" height="15" fill="rgb(221,74,3)" fg:x="832" fg:w="1"/><text x="66.4393%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.1893%" y="533" width="0.0796%" height="15" fill="rgb(206,121,29)" fg:x="832" fg:w="1"/><text x="66.4393%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="66.2689%" y="549" width="0.0796%" height="15" fill="rgb(249,131,53)" fg:x="833" fg:w="1"/><text x="66.5189%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.2689%" y="533" width="0.0796%" height="15" fill="rgb(236,170,29)" fg:x="833" fg:w="1"/><text x="66.5189%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.2689%" y="517" width="0.0796%" height="15" fill="rgb(247,96,15)" fg:x="833" fg:w="1"/><text x="66.5189%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.2689%" y="501" width="0.0796%" height="15" fill="rgb(211,210,7)" fg:x="833" fg:w="1"/><text x="66.5189%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="66.1098%" y="597" width="0.3182%" height="15" fill="rgb(240,88,50)" fg:x="831" fg:w="4"/><text x="66.3598%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="66.2689%" y="581" width="0.1591%" height="15" fill="rgb(209,229,26)" fg:x="833" fg:w="2"/><text x="66.5189%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="66.2689%" y="565" width="0.1591%" height="15" fill="rgb(210,68,23)" fg:x="833" fg:w="2"/><text x="66.5189%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.3484%" y="549" width="0.0796%" height="15" fill="rgb(229,180,13)" fg:x="834" fg:w="1"/><text x="66.5984%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="65.7916%" y="629" width="0.7160%" height="15" fill="rgb(236,53,44)" fg:x="827" fg:w="9"/><text x="66.0416%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="66.0302%" y="613" width="0.4773%" height="15" fill="rgb(244,214,29)" fg:x="830" fg:w="6"/><text x="66.2802%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.4280%" y="597" width="0.0796%" height="15" fill="rgb(220,75,29)" fg:x="835" fg:w="1"/><text x="66.6780%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.5871%" y="597" width="0.0796%" height="15" fill="rgb(214,183,37)" fg:x="837" fg:w="1"/><text x="66.8371%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6667%" y="581" width="0.0796%" height="15" fill="rgb(239,117,29)" fg:x="838" fg:w="1"/><text x="66.9167%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.7462%" y="565" width="0.0796%" height="15" fill="rgb(237,171,35)" fg:x="839" fg:w="1"/><text x="66.9962%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.8258%" y="565" width="0.0796%" height="15" fill="rgb(229,178,53)" fg:x="840" fg:w="1"/><text x="67.0758%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.8258%" y="549" width="0.0796%" height="15" fill="rgb(210,102,19)" fg:x="840" fg:w="1"/><text x="67.0758%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="66.5076%" y="629" width="0.4773%" height="15" fill="rgb(235,127,22)" fg:x="836" fg:w="6"/><text x="66.7576%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="66.5076%" y="613" width="0.4773%" height="15" fill="rgb(244,31,31)" fg:x="836" fg:w="6"/><text x="66.7576%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="66.6667%" y="597" width="0.3182%" height="15" fill="rgb(231,43,21)" fg:x="838" fg:w="4"/><text x="66.9167%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="66.7462%" y="581" width="0.2387%" height="15" fill="rgb(217,131,35)" fg:x="839" fg:w="3"/><text x="66.9962%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.9053%" y="565" width="0.0796%" height="15" fill="rgb(221,149,4)" fg:x="841" fg:w="1"/><text x="67.1553%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.0644%" y="581" width="0.0796%" height="15" fill="rgb(232,170,28)" fg:x="843" fg:w="1"/><text x="67.3144%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="67.1440%" y="533" width="0.0796%" height="15" fill="rgb(238,56,10)" fg:x="844" fg:w="1"/><text x="67.3940%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="67.1440%" y="517" width="0.0796%" height="15" fill="rgb(235,196,14)" fg:x="844" fg:w="1"/><text x="67.3940%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="67.1440%" y="501" width="0.0796%" height="15" fill="rgb(216,45,48)" fg:x="844" fg:w="1"/><text x="67.3940%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="67.1440%" y="485" width="0.0796%" height="15" fill="rgb(238,213,17)" fg:x="844" fg:w="1"/><text x="67.3940%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="67.1440%" y="549" width="0.1591%" height="15" fill="rgb(212,13,2)" fg:x="844" fg:w="2"/><text x="67.3940%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="67.2235%" y="533" width="0.0796%" height="15" fill="rgb(240,114,20)" fg:x="845" fg:w="1"/><text x="67.4735%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="67.2235%" y="517" width="0.0796%" height="15" fill="rgb(228,41,40)" fg:x="845" fg:w="1"/><text x="67.4735%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.2235%" y="501" width="0.0796%" height="15" fill="rgb(244,132,35)" fg:x="845" fg:w="1"/><text x="67.4735%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.2235%" y="485" width="0.0796%" height="15" fill="rgb(253,189,4)" fg:x="845" fg:w="1"/><text x="67.4735%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="67.2235%" y="469" width="0.0796%" height="15" fill="rgb(224,37,19)" fg:x="845" fg:w="1"/><text x="67.4735%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="67.1440%" y="565" width="0.3182%" height="15" fill="rgb(235,223,18)" fg:x="844" fg:w="4"/><text x="67.3940%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="67.3031%" y="549" width="0.1591%" height="15" fill="rgb(235,163,25)" fg:x="846" fg:w="2"/><text x="67.5531%" y="559.50"></text></g><g><title>engine::session::Session::flush (22 samples, 1.75%)</title><rect x="65.7916%" y="725" width="1.7502%" height="15" fill="rgb(217,145,28)" fg:x="827" fg:w="22"/><text x="66.0416%" y="735.50"></text></g><g><title>engine::session::state::State::close (22 samples, 1.75%)</title><rect x="65.7916%" y="709" width="1.7502%" height="15" fill="rgb(223,223,32)" fg:x="827" fg:w="22"/><text x="66.0416%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (22 samples, 1.75%)</title><rect x="65.7916%" y="693" width="1.7502%" height="15" fill="rgb(227,189,39)" fg:x="827" fg:w="22"/><text x="66.0416%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (22 samples, 1.75%)</title><rect x="65.7916%" y="677" width="1.7502%" height="15" fill="rgb(248,10,22)" fg:x="827" fg:w="22"/><text x="66.0416%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (22 samples, 1.75%)</title><rect x="65.7916%" y="661" width="1.7502%" height="15" fill="rgb(248,46,39)" fg:x="827" fg:w="22"/><text x="66.0416%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (22 samples, 1.75%)</title><rect x="65.7916%" y="645" width="1.7502%" height="15" fill="rgb(248,113,48)" fg:x="827" fg:w="22"/><text x="66.0416%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="66.9849%" y="629" width="0.5569%" height="15" fill="rgb(245,16,25)" fg:x="842" fg:w="7"/><text x="67.2349%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="66.9849%" y="613" width="0.5569%" height="15" fill="rgb(249,152,16)" fg:x="842" fg:w="7"/><text x="67.2349%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="66.9849%" y="597" width="0.5569%" height="15" fill="rgb(250,16,1)" fg:x="842" fg:w="7"/><text x="67.2349%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="67.1440%" y="581" width="0.3978%" height="15" fill="rgb(249,138,3)" fg:x="844" fg:w="5"/><text x="67.3940%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4622%" y="565" width="0.0796%" height="15" fill="rgb(227,71,41)" fg:x="848" fg:w="1"/><text x="67.7122%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.5418%" y="677" width="0.1591%" height="15" fill="rgb(209,184,23)" fg:x="849" fg:w="2"/><text x="67.7918%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.5418%" y="661" width="0.1591%" height="15" fill="rgb(223,215,31)" fg:x="849" fg:w="2"/><text x="67.7918%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.5418%" y="645" width="0.1591%" height="15" fill="rgb(210,146,28)" fg:x="849" fg:w="2"/><text x="67.7918%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6213%" y="629" width="0.0796%" height="15" fill="rgb(209,183,41)" fg:x="850" fg:w="1"/><text x="67.8713%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="67.5418%" y="709" width="0.2387%" height="15" fill="rgb(209,224,45)" fg:x="849" fg:w="3"/><text x="67.7918%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="67.5418%" y="693" width="0.2387%" height="15" fill="rgb(224,209,51)" fg:x="849" fg:w="3"/><text x="67.7918%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.7009%" y="677" width="0.0796%" height="15" fill="rgb(223,17,39)" fg:x="851" fg:w="1"/><text x="67.9509%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7009%" y="661" width="0.0796%" height="15" fill="rgb(234,204,37)" fg:x="851" fg:w="1"/><text x="67.9509%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.7009%" y="645" width="0.0796%" height="15" fill="rgb(236,120,5)" fg:x="851" fg:w="1"/><text x="67.9509%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7009%" y="629" width="0.0796%" height="15" fill="rgb(248,97,27)" fg:x="851" fg:w="1"/><text x="67.9509%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.7009%" y="613" width="0.0796%" height="15" fill="rgb(240,66,17)" fg:x="851" fg:w="1"/><text x="67.9509%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.7009%" y="597" width="0.0796%" height="15" fill="rgb(210,79,3)" fg:x="851" fg:w="1"/><text x="67.9509%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.7804%" y="709" width="0.0796%" height="15" fill="rgb(214,176,27)" fg:x="852" fg:w="1"/><text x="68.0304%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.7804%" y="693" width="0.0796%" height="15" fill="rgb(235,185,3)" fg:x="852" fg:w="1"/><text x="68.0304%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.7804%" y="677" width="0.0796%" height="15" fill="rgb(227,24,12)" fg:x="852" fg:w="1"/><text x="68.0304%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.7804%" y="661" width="0.0796%" height="15" fill="rgb(252,169,48)" fg:x="852" fg:w="1"/><text x="68.0304%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.7804%" y="645" width="0.0796%" height="15" fill="rgb(212,65,1)" fg:x="852" fg:w="1"/><text x="68.0304%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.7804%" y="629" width="0.0796%" height="15" fill="rgb(242,39,24)" fg:x="852" fg:w="1"/><text x="68.0304%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.7804%" y="613" width="0.0796%" height="15" fill="rgb(249,32,23)" fg:x="852" fg:w="1"/><text x="68.0304%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.7804%" y="597" width="0.0796%" height="15" fill="rgb(251,195,23)" fg:x="852" fg:w="1"/><text x="68.0304%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.7804%" y="581" width="0.0796%" height="15" fill="rgb(236,174,8)" fg:x="852" fg:w="1"/><text x="68.0304%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.7804%" y="565" width="0.0796%" height="15" fill="rgb(220,197,8)" fg:x="852" fg:w="1"/><text x="68.0304%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.7804%" y="549" width="0.0796%" height="15" fill="rgb(240,108,37)" fg:x="852" fg:w="1"/><text x="68.0304%" y="559.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.7804%" y="533" width="0.0796%" height="15" fill="rgb(232,176,24)" fg:x="852" fg:w="1"/><text x="68.0304%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="67.7804%" y="517" width="0.0796%" height="15" fill="rgb(243,35,29)" fg:x="852" fg:w="1"/><text x="68.0304%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="67.5418%" y="725" width="0.3978%" height="15" fill="rgb(210,37,18)" fg:x="849" fg:w="5"/><text x="67.7918%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="67.8600%" y="709" width="0.0796%" height="15" fill="rgb(224,184,40)" fg:x="853" fg:w="1"/><text x="68.1100%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="67.8600%" y="693" width="0.0796%" height="15" fill="rgb(236,39,29)" fg:x="853" fg:w="1"/><text x="68.1100%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="67.8600%" y="677" width="0.0796%" height="15" fill="rgb(232,48,39)" fg:x="853" fg:w="1"/><text x="68.1100%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="67.8600%" y="661" width="0.0796%" height="15" fill="rgb(236,34,42)" fg:x="853" fg:w="1"/><text x="68.1100%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="67.8600%" y="645" width="0.0796%" height="15" fill="rgb(243,106,37)" fg:x="853" fg:w="1"/><text x="68.1100%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.8600%" y="629" width="0.0796%" height="15" fill="rgb(218,96,6)" fg:x="853" fg:w="1"/><text x="68.1100%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8600%" y="613" width="0.0796%" height="15" fill="rgb(235,130,12)" fg:x="853" fg:w="1"/><text x="68.1100%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.8600%" y="597" width="0.0796%" height="15" fill="rgb(231,95,0)" fg:x="853" fg:w="1"/><text x="68.1100%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8600%" y="581" width="0.0796%" height="15" fill="rgb(228,12,23)" fg:x="853" fg:w="1"/><text x="68.1100%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.8600%" y="565" width="0.0796%" height="15" fill="rgb(216,12,1)" fg:x="853" fg:w="1"/><text x="68.1100%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="67.9395%" y="677" width="0.0796%" height="15" fill="rgb(219,59,3)" fg:x="854" fg:w="1"/><text x="68.1895%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.9395%" y="661" width="0.0796%" height="15" fill="rgb(215,208,46)" fg:x="854" fg:w="1"/><text x="68.1895%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.9395%" y="645" width="0.0796%" height="15" fill="rgb(254,224,29)" fg:x="854" fg:w="1"/><text x="68.1895%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.9395%" y="629" width="0.0796%" height="15" fill="rgb(232,14,29)" fg:x="854" fg:w="1"/><text x="68.1895%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.9395%" y="613" width="0.0796%" height="15" fill="rgb(208,45,52)" fg:x="854" fg:w="1"/><text x="68.1895%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (2 samples, 0.16%)</title><rect x="67.9395%" y="725" width="0.1591%" height="15" fill="rgb(234,191,28)" fg:x="854" fg:w="2"/><text x="68.1895%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="67.9395%" y="709" width="0.1591%" height="15" fill="rgb(244,67,43)" fg:x="854" fg:w="2"/><text x="68.1895%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="67.9395%" y="693" width="0.1591%" height="15" fill="rgb(236,189,24)" fg:x="854" fg:w="2"/><text x="68.1895%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="68.0191%" y="677" width="0.0796%" height="15" fill="rgb(239,214,33)" fg:x="855" fg:w="1"/><text x="68.2691%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="68.0191%" y="661" width="0.0796%" height="15" fill="rgb(226,176,41)" fg:x="855" fg:w="1"/><text x="68.2691%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.0191%" y="645" width="0.0796%" height="15" fill="rgb(248,47,8)" fg:x="855" fg:w="1"/><text x="68.2691%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="68.0191%" y="629" width="0.0796%" height="15" fill="rgb(218,81,44)" fg:x="855" fg:w="1"/><text x="68.2691%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.0191%" y="613" width="0.0796%" height="15" fill="rgb(213,98,6)" fg:x="855" fg:w="1"/><text x="68.2691%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0191%" y="597" width="0.0796%" height="15" fill="rgb(222,85,22)" fg:x="855" fg:w="1"/><text x="68.2691%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.0191%" y="581" width="0.0796%" height="15" fill="rgb(239,46,39)" fg:x="855" fg:w="1"/><text x="68.2691%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0191%" y="565" width="0.0796%" height="15" fill="rgb(237,12,29)" fg:x="855" fg:w="1"/><text x="68.2691%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.0191%" y="549" width="0.0796%" height="15" fill="rgb(214,77,8)" fg:x="855" fg:w="1"/><text x="68.2691%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.0986%" y="693" width="0.0796%" height="15" fill="rgb(217,168,37)" fg:x="856" fg:w="1"/><text x="68.3486%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.0986%" y="677" width="0.0796%" height="15" fill="rgb(221,217,23)" fg:x="856" fg:w="1"/><text x="68.3486%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.0986%" y="709" width="0.1591%" height="15" fill="rgb(243,229,36)" fg:x="856" fg:w="2"/><text x="68.3486%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.1782%" y="693" width="0.0796%" height="15" fill="rgb(251,163,40)" fg:x="857" fg:w="1"/><text x="68.4282%" y="703.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="68.2578%" y="709" width="0.0796%" height="15" fill="rgb(237,222,12)" fg:x="858" fg:w="1"/><text x="68.5078%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="68.2578%" y="693" width="0.0796%" height="15" fill="rgb(248,132,6)" fg:x="858" fg:w="1"/><text x="68.5078%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="68.2578%" y="677" width="0.0796%" height="15" fill="rgb(227,167,50)" fg:x="858" fg:w="1"/><text x="68.5078%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="68.3373%" y="709" width="0.0796%" height="15" fill="rgb(242,84,37)" fg:x="859" fg:w="1"/><text x="68.5873%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.3373%" y="693" width="0.0796%" height="15" fill="rgb(212,4,50)" fg:x="859" fg:w="1"/><text x="68.5873%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="68.3373%" y="677" width="0.0796%" height="15" fill="rgb(230,228,32)" fg:x="859" fg:w="1"/><text x="68.5873%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="68.3373%" y="661" width="0.0796%" height="15" fill="rgb(248,217,23)" fg:x="859" fg:w="1"/><text x="68.5873%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="68.3373%" y="645" width="0.0796%" height="15" fill="rgb(238,197,32)" fg:x="859" fg:w="1"/><text x="68.5873%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="68.3373%" y="629" width="0.0796%" height="15" fill="rgb(236,106,1)" fg:x="859" fg:w="1"/><text x="68.5873%" y="639.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="68.4169%" y="677" width="0.0796%" height="15" fill="rgb(219,228,13)" fg:x="860" fg:w="1"/><text x="68.6669%" y="687.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="68.4169%" y="661" width="0.0796%" height="15" fill="rgb(238,30,35)" fg:x="860" fg:w="1"/><text x="68.6669%" y="671.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="68.4169%" y="645" width="0.0796%" height="15" fill="rgb(236,70,23)" fg:x="860" fg:w="1"/><text x="68.6669%" y="655.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="68.4169%" y="629" width="0.0796%" height="15" fill="rgb(249,104,48)" fg:x="860" fg:w="1"/><text x="68.6669%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="68.4169%" y="613" width="0.0796%" height="15" fill="rgb(254,117,50)" fg:x="860" fg:w="1"/><text x="68.6669%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="68.4169%" y="597" width="0.0796%" height="15" fill="rgb(223,152,4)" fg:x="860" fg:w="1"/><text x="68.6669%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="68.4169%" y="581" width="0.0796%" height="15" fill="rgb(245,6,2)" fg:x="860" fg:w="1"/><text x="68.6669%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.4964%" y="645" width="0.0796%" height="15" fill="rgb(249,150,24)" fg:x="861" fg:w="1"/><text x="68.7464%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="68.4964%" y="629" width="0.0796%" height="15" fill="rgb(228,185,42)" fg:x="861" fg:w="1"/><text x="68.7464%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.4964%" y="613" width="0.0796%" height="15" fill="rgb(226,39,33)" fg:x="861" fg:w="1"/><text x="68.7464%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="68.6555%" y="565" width="0.0796%" height="15" fill="rgb(221,166,19)" fg:x="863" fg:w="1"/><text x="68.9055%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.7351%" y="565" width="0.0796%" height="15" fill="rgb(209,109,2)" fg:x="864" fg:w="1"/><text x="68.9851%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="68.8942%" y="549" width="0.1591%" height="15" fill="rgb(252,216,26)" fg:x="866" fg:w="2"/><text x="69.1442%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="68.8942%" y="533" width="0.1591%" height="15" fill="rgb(227,173,36)" fg:x="866" fg:w="2"/><text x="69.1442%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.9737%" y="517" width="0.0796%" height="15" fill="rgb(209,90,7)" fg:x="867" fg:w="1"/><text x="69.2237%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.0533%" y="549" width="0.0796%" height="15" fill="rgb(250,194,11)" fg:x="868" fg:w="1"/><text x="69.3033%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.0533%" y="533" width="0.0796%" height="15" fill="rgb(220,72,50)" fg:x="868" fg:w="1"/><text x="69.3033%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.0533%" y="517" width="0.0796%" height="15" fill="rgb(222,106,48)" fg:x="868" fg:w="1"/><text x="69.3033%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="69.1329%" y="533" width="0.2387%" height="15" fill="rgb(216,220,45)" fg:x="869" fg:w="3"/><text x="69.3829%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="69.1329%" y="517" width="0.2387%" height="15" fill="rgb(234,112,18)" fg:x="869" fg:w="3"/><text x="69.3829%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="69.1329%" y="501" width="0.2387%" height="15" fill="rgb(206,179,9)" fg:x="869" fg:w="3"/><text x="69.3829%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="69.1329%" y="485" width="0.2387%" height="15" fill="rgb(215,115,40)" fg:x="869" fg:w="3"/><text x="69.3829%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="69.1329%" y="469" width="0.2387%" height="15" fill="rgb(222,69,34)" fg:x="869" fg:w="3"/><text x="69.3829%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="69.1329%" y="453" width="0.2387%" height="15" fill="rgb(209,161,10)" fg:x="869" fg:w="3"/><text x="69.3829%" y="463.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="69.1329%" y="437" width="0.2387%" height="15" fill="rgb(217,6,38)" fg:x="869" fg:w="3"/><text x="69.3829%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="69.1329%" y="549" width="0.3978%" height="15" fill="rgb(229,229,48)" fg:x="869" fg:w="5"/><text x="69.3829%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="69.3715%" y="533" width="0.1591%" height="15" fill="rgb(225,21,28)" fg:x="872" fg:w="2"/><text x="69.6215%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="69.3715%" y="517" width="0.1591%" height="15" fill="rgb(206,33,13)" fg:x="872" fg:w="2"/><text x="69.6215%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.4511%" y="501" width="0.0796%" height="15" fill="rgb(242,178,17)" fg:x="873" fg:w="1"/><text x="69.7011%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.4511%" y="485" width="0.0796%" height="15" fill="rgb(220,162,5)" fg:x="873" fg:w="1"/><text x="69.7011%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.4511%" y="469" width="0.0796%" height="15" fill="rgb(210,33,43)" fg:x="873" fg:w="1"/><text x="69.7011%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.4511%" y="453" width="0.0796%" height="15" fill="rgb(216,116,54)" fg:x="873" fg:w="1"/><text x="69.7011%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.4511%" y="437" width="0.0796%" height="15" fill="rgb(249,92,24)" fg:x="873" fg:w="1"/><text x="69.7011%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.4511%" y="421" width="0.0796%" height="15" fill="rgb(231,189,14)" fg:x="873" fg:w="1"/><text x="69.7011%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="68.8146%" y="565" width="0.7955%" height="15" fill="rgb(230,8,41)" fg:x="865" fg:w="10"/><text x="69.0646%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.5306%" y="549" width="0.0796%" height="15" fill="rgb(249,7,27)" fg:x="874" fg:w="1"/><text x="69.7806%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.5306%" y="533" width="0.0796%" height="15" fill="rgb(232,86,5)" fg:x="874" fg:w="1"/><text x="69.7806%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.5306%" y="517" width="0.0796%" height="15" fill="rgb(224,175,18)" fg:x="874" fg:w="1"/><text x="69.7806%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.03%)</title><rect x="68.6555%" y="597" width="1.0342%" height="15" fill="rgb(220,129,12)" fg:x="863" fg:w="13"/><text x="68.9055%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.03%)</title><rect x="68.6555%" y="581" width="1.0342%" height="15" fill="rgb(210,19,36)" fg:x="863" fg:w="13"/><text x="68.9055%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.6102%" y="565" width="0.0796%" height="15" fill="rgb(219,96,14)" fg:x="875" fg:w="1"/><text x="69.8602%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="69.7693%" y="549" width="0.1591%" height="15" fill="rgb(249,106,1)" fg:x="877" fg:w="2"/><text x="70.0193%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="69.6897%" y="597" width="0.3182%" height="15" fill="rgb(249,155,20)" fg:x="876" fg:w="4"/><text x="69.9397%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="69.6897%" y="581" width="0.3182%" height="15" fill="rgb(244,168,9)" fg:x="876" fg:w="4"/><text x="69.9397%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="69.6897%" y="565" width="0.3182%" height="15" fill="rgb(216,23,50)" fg:x="876" fg:w="4"/><text x="69.9397%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.9284%" y="549" width="0.0796%" height="15" fill="rgb(224,219,20)" fg:x="879" fg:w="1"/><text x="70.1784%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.9284%" y="533" width="0.0796%" height="15" fill="rgb(222,156,15)" fg:x="879" fg:w="1"/><text x="70.1784%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.9284%" y="517" width="0.0796%" height="15" fill="rgb(231,97,17)" fg:x="879" fg:w="1"/><text x="70.1784%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.9284%" y="501" width="0.0796%" height="15" fill="rgb(218,70,48)" fg:x="879" fg:w="1"/><text x="70.1784%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="70.0080%" y="581" width="0.0796%" height="15" fill="rgb(212,196,52)" fg:x="880" fg:w="1"/><text x="70.2580%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="70.0080%" y="565" width="0.0796%" height="15" fill="rgb(243,203,18)" fg:x="880" fg:w="1"/><text x="70.2580%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.0080%" y="549" width="0.0796%" height="15" fill="rgb(252,125,41)" fg:x="880" fg:w="1"/><text x="70.2580%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.0080%" y="533" width="0.0796%" height="15" fill="rgb(223,180,33)" fg:x="880" fg:w="1"/><text x="70.2580%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="70.0080%" y="517" width="0.0796%" height="15" fill="rgb(254,159,46)" fg:x="880" fg:w="1"/><text x="70.2580%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.0080%" y="501" width="0.0796%" height="15" fill="rgb(254,38,10)" fg:x="880" fg:w="1"/><text x="70.2580%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="70.0875%" y="549" width="0.1591%" height="15" fill="rgb(208,217,32)" fg:x="881" fg:w="2"/><text x="70.3375%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="70.2466%" y="549" width="0.1591%" height="15" fill="rgb(221,120,13)" fg:x="883" fg:w="2"/><text x="70.4966%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="70.2466%" y="533" width="0.1591%" height="15" fill="rgb(246,54,52)" fg:x="883" fg:w="2"/><text x="70.4966%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.4057%" y="501" width="0.0796%" height="15" fill="rgb(242,34,25)" fg:x="885" fg:w="1"/><text x="70.6557%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.4057%" y="485" width="0.0796%" height="15" fill="rgb(247,209,9)" fg:x="885" fg:w="1"/><text x="70.6557%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.4057%" y="469" width="0.0796%" height="15" fill="rgb(228,71,26)" fg:x="885" fg:w="1"/><text x="70.6557%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.4057%" y="453" width="0.0796%" height="15" fill="rgb(222,145,49)" fg:x="885" fg:w="1"/><text x="70.6557%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.4057%" y="437" width="0.0796%" height="15" fill="rgb(218,121,17)" fg:x="885" fg:w="1"/><text x="70.6557%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.4057%" y="421" width="0.0796%" height="15" fill="rgb(244,50,7)" fg:x="885" fg:w="1"/><text x="70.6557%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.4057%" y="405" width="0.0796%" height="15" fill="rgb(246,229,37)" fg:x="885" fg:w="1"/><text x="70.6557%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.4057%" y="389" width="0.0796%" height="15" fill="rgb(225,18,5)" fg:x="885" fg:w="1"/><text x="70.6557%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.4853%" y="469" width="0.0796%" height="15" fill="rgb(213,204,8)" fg:x="886" fg:w="1"/><text x="70.7353%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.4853%" y="453" width="0.0796%" height="15" fill="rgb(238,103,6)" fg:x="886" fg:w="1"/><text x="70.7353%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="70.4853%" y="485" width="0.1591%" height="15" fill="rgb(222,25,35)" fg:x="886" fg:w="2"/><text x="70.7353%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.5648%" y="469" width="0.0796%" height="15" fill="rgb(213,203,35)" fg:x="887" fg:w="1"/><text x="70.8148%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.5648%" y="453" width="0.0796%" height="15" fill="rgb(221,79,53)" fg:x="887" fg:w="1"/><text x="70.8148%" y="463.50"></text></g><g><title>engine::session::Session::flush (29 samples, 2.31%)</title><rect x="68.4169%" y="709" width="2.3071%" height="15" fill="rgb(243,200,35)" fg:x="860" fg:w="29"/><text x="68.6669%" y="719.50">e..</text></g><g><title>engine::session::Session::save_changes (29 samples, 2.31%)</title><rect x="68.4169%" y="693" width="2.3071%" height="15" fill="rgb(248,60,25)" fg:x="860" fg:w="29"/><text x="68.6669%" y="703.50">e..</text></g><g><title>engine::session::state::State::close (28 samples, 2.23%)</title><rect x="68.4964%" y="677" width="2.2275%" height="15" fill="rgb(227,53,46)" fg:x="861" fg:w="28"/><text x="68.7464%" y="687.50">e..</text></g><g><title>engine::session::state::State::flush_entities (28 samples, 2.23%)</title><rect x="68.4964%" y="661" width="2.2275%" height="15" fill="rgb(216,120,32)" fg:x="861" fg:w="28"/><text x="68.7464%" y="671.50">e..</text></g><g><title>core::iter::adapters::try_process (27 samples, 2.15%)</title><rect x="68.5760%" y="645" width="2.1480%" height="15" fill="rgb(220,134,1)" fg:x="862" fg:w="27"/><text x="68.8260%" y="655.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (27 samples, 2.15%)</title><rect x="68.5760%" y="629" width="2.1480%" height="15" fill="rgb(237,168,5)" fg:x="862" fg:w="27"/><text x="68.8260%" y="639.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (27 samples, 2.15%)</title><rect x="68.5760%" y="613" width="2.1480%" height="15" fill="rgb(231,100,33)" fg:x="862" fg:w="27"/><text x="68.8260%" y="623.50">e..</text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="70.0080%" y="597" width="0.7160%" height="15" fill="rgb(236,177,47)" fg:x="880" fg:w="9"/><text x="70.2580%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="70.0875%" y="581" width="0.6364%" height="15" fill="rgb(235,7,49)" fg:x="881" fg:w="8"/><text x="70.3375%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="70.0875%" y="565" width="0.6364%" height="15" fill="rgb(232,119,22)" fg:x="881" fg:w="8"/><text x="70.3375%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="70.4057%" y="549" width="0.3182%" height="15" fill="rgb(254,73,53)" fg:x="885" fg:w="4"/><text x="70.6557%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="70.4057%" y="533" width="0.3182%" height="15" fill="rgb(251,35,20)" fg:x="885" fg:w="4"/><text x="70.6557%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="70.4057%" y="517" width="0.3182%" height="15" fill="rgb(241,119,20)" fg:x="885" fg:w="4"/><text x="70.6557%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="70.4853%" y="501" width="0.2387%" height="15" fill="rgb(207,102,14)" fg:x="886" fg:w="3"/><text x="70.7353%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6444%" y="485" width="0.0796%" height="15" fill="rgb(248,201,50)" fg:x="888" fg:w="1"/><text x="70.8944%" y="495.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="70.7239%" y="709" width="0.0796%" height="15" fill="rgb(222,185,44)" fg:x="889" fg:w="1"/><text x="70.9739%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="70.7239%" y="693" width="0.0796%" height="15" fill="rgb(218,107,18)" fg:x="889" fg:w="1"/><text x="70.9739%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="70.7239%" y="677" width="0.0796%" height="15" fill="rgb(237,177,39)" fg:x="889" fg:w="1"/><text x="70.9739%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.7239%" y="661" width="0.0796%" height="15" fill="rgb(246,69,6)" fg:x="889" fg:w="1"/><text x="70.9739%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.7239%" y="645" width="0.0796%" height="15" fill="rgb(234,208,37)" fg:x="889" fg:w="1"/><text x="70.9739%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.7239%" y="629" width="0.0796%" height="15" fill="rgb(225,4,6)" fg:x="889" fg:w="1"/><text x="70.9739%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7239%" y="613" width="0.0796%" height="15" fill="rgb(233,45,0)" fg:x="889" fg:w="1"/><text x="70.9739%" y="623.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="70.8035%" y="709" width="0.0796%" height="15" fill="rgb(226,136,5)" fg:x="890" fg:w="1"/><text x="71.0535%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="70.8035%" y="693" width="0.0796%" height="15" fill="rgb(211,91,47)" fg:x="890" fg:w="1"/><text x="71.0535%" y="703.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="70.8035%" y="677" width="0.0796%" height="15" fill="rgb(242,88,51)" fg:x="890" fg:w="1"/><text x="71.0535%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.8831%" y="693" width="0.0796%" height="15" fill="rgb(230,91,28)" fg:x="891" fg:w="1"/><text x="71.1331%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.8831%" y="677" width="0.0796%" height="15" fill="rgb(254,186,29)" fg:x="891" fg:w="1"/><text x="71.1331%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8831%" y="661" width="0.0796%" height="15" fill="rgb(238,6,4)" fg:x="891" fg:w="1"/><text x="71.1331%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8831%" y="645" width="0.0796%" height="15" fill="rgb(221,151,16)" fg:x="891" fg:w="1"/><text x="71.1331%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8831%" y="629" width="0.0796%" height="15" fill="rgb(251,143,52)" fg:x="891" fg:w="1"/><text x="71.1331%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.9626%" y="677" width="0.0796%" height="15" fill="rgb(206,90,15)" fg:x="892" fg:w="1"/><text x="71.2126%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9626%" y="661" width="0.0796%" height="15" fill="rgb(218,35,8)" fg:x="892" fg:w="1"/><text x="71.2126%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9626%" y="645" width="0.0796%" height="15" fill="rgb(239,215,6)" fg:x="892" fg:w="1"/><text x="71.2126%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.9626%" y="629" width="0.0796%" height="15" fill="rgb(245,116,39)" fg:x="892" fg:w="1"/><text x="71.2126%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9626%" y="613" width="0.0796%" height="15" fill="rgb(242,65,28)" fg:x="892" fg:w="1"/><text x="71.2126%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9626%" y="597" width="0.0796%" height="15" fill="rgb(252,132,53)" fg:x="892" fg:w="1"/><text x="71.2126%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9626%" y="581" width="0.0796%" height="15" fill="rgb(224,159,50)" fg:x="892" fg:w="1"/><text x="71.2126%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9626%" y="565" width="0.0796%" height="15" fill="rgb(224,93,4)" fg:x="892" fg:w="1"/><text x="71.2126%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="71.0422%" y="677" width="0.0796%" height="15" fill="rgb(208,81,34)" fg:x="893" fg:w="1"/><text x="71.2922%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="71.0422%" y="661" width="0.0796%" height="15" fill="rgb(233,92,54)" fg:x="893" fg:w="1"/><text x="71.2922%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="71.0422%" y="645" width="0.0796%" height="15" fill="rgb(237,21,14)" fg:x="893" fg:w="1"/><text x="71.2922%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.0422%" y="629" width="0.0796%" height="15" fill="rgb(249,128,51)" fg:x="893" fg:w="1"/><text x="71.2922%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="71.1217%" y="629" width="0.2387%" height="15" fill="rgb(223,129,24)" fg:x="894" fg:w="3"/><text x="71.3717%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.2808%" y="613" width="0.0796%" height="15" fill="rgb(231,168,25)" fg:x="896" fg:w="1"/><text x="71.5308%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="71.2808%" y="597" width="0.0796%" height="15" fill="rgb(224,39,20)" fg:x="896" fg:w="1"/><text x="71.5308%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="70.8831%" y="709" width="0.5569%" height="15" fill="rgb(225,152,53)" fg:x="891" fg:w="7"/><text x="71.1331%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="70.9626%" y="693" width="0.4773%" height="15" fill="rgb(252,17,24)" fg:x="892" fg:w="6"/><text x="71.2126%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="71.1217%" y="677" width="0.3182%" height="15" fill="rgb(250,114,30)" fg:x="894" fg:w="4"/><text x="71.3717%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="71.1217%" y="661" width="0.3182%" height="15" fill="rgb(229,5,4)" fg:x="894" fg:w="4"/><text x="71.3717%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="71.1217%" y="645" width="0.3182%" height="15" fill="rgb(225,176,49)" fg:x="894" fg:w="4"/><text x="71.3717%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="71.3604%" y="629" width="0.0796%" height="15" fill="rgb(224,221,49)" fg:x="897" fg:w="1"/><text x="71.6104%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4399%" y="613" width="0.0796%" height="15" fill="rgb(253,169,27)" fg:x="898" fg:w="1"/><text x="71.6899%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4399%" y="597" width="0.0796%" height="15" fill="rgb(211,206,16)" fg:x="898" fg:w="1"/><text x="71.6899%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.5195%" y="613" width="0.0796%" height="15" fill="rgb(244,87,35)" fg:x="899" fg:w="1"/><text x="71.7695%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="71.4399%" y="645" width="0.2387%" height="15" fill="rgb(246,28,10)" fg:x="898" fg:w="3"/><text x="71.6899%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="71.4399%" y="629" width="0.2387%" height="15" fill="rgb(229,12,44)" fg:x="898" fg:w="3"/><text x="71.6899%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.5990%" y="613" width="0.0796%" height="15" fill="rgb(210,145,37)" fg:x="900" fg:w="1"/><text x="71.8490%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.5990%" y="597" width="0.0796%" height="15" fill="rgb(227,112,52)" fg:x="900" fg:w="1"/><text x="71.8490%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="71.6786%" y="629" width="0.0796%" height="15" fill="rgb(238,155,34)" fg:x="901" fg:w="1"/><text x="71.9286%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.6786%" y="613" width="0.0796%" height="15" fill="rgb(239,226,36)" fg:x="901" fg:w="1"/><text x="71.9286%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6786%" y="597" width="0.0796%" height="15" fill="rgb(230,16,23)" fg:x="901" fg:w="1"/><text x="71.9286%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.6786%" y="581" width="0.0796%" height="15" fill="rgb(236,171,36)" fg:x="901" fg:w="1"/><text x="71.9286%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6786%" y="565" width="0.0796%" height="15" fill="rgb(221,22,14)" fg:x="901" fg:w="1"/><text x="71.9286%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.6786%" y="549" width="0.0796%" height="15" fill="rgb(242,43,11)" fg:x="901" fg:w="1"/><text x="71.9286%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.40%)</title><rect x="71.4399%" y="677" width="0.3978%" height="15" fill="rgb(232,69,23)" fg:x="898" fg:w="5"/><text x="71.6899%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.40%)</title><rect x="71.4399%" y="661" width="0.3978%" height="15" fill="rgb(216,180,54)" fg:x="898" fg:w="5"/><text x="71.6899%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="71.6786%" y="645" width="0.1591%" height="15" fill="rgb(216,5,24)" fg:x="901" fg:w="2"/><text x="71.9286%" y="655.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="71.7582%" y="629" width="0.0796%" height="15" fill="rgb(225,89,9)" fg:x="902" fg:w="1"/><text x="72.0082%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.7582%" y="613" width="0.0796%" height="15" fill="rgb(243,75,33)" fg:x="902" fg:w="1"/><text x="72.0082%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (6 samples, 0.48%)</title><rect x="71.4399%" y="709" width="0.4773%" height="15" fill="rgb(247,141,45)" fg:x="898" fg:w="6"/><text x="71.6899%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (6 samples, 0.48%)</title><rect x="71.4399%" y="693" width="0.4773%" height="15" fill="rgb(232,177,36)" fg:x="898" fg:w="6"/><text x="71.6899%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="71.8377%" y="677" width="0.0796%" height="15" fill="rgb(219,125,36)" fg:x="903" fg:w="1"/><text x="72.0877%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="71.8377%" y="661" width="0.0796%" height="15" fill="rgb(227,94,9)" fg:x="903" fg:w="1"/><text x="72.0877%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.8377%" y="645" width="0.0796%" height="15" fill="rgb(240,34,52)" fg:x="903" fg:w="1"/><text x="72.0877%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="71.8377%" y="629" width="0.0796%" height="15" fill="rgb(216,45,12)" fg:x="903" fg:w="1"/><text x="72.0877%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.8377%" y="613" width="0.0796%" height="15" fill="rgb(246,21,19)" fg:x="903" fg:w="1"/><text x="72.0877%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8377%" y="597" width="0.0796%" height="15" fill="rgb(213,98,42)" fg:x="903" fg:w="1"/><text x="72.0877%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8377%" y="581" width="0.0796%" height="15" fill="rgb(250,136,47)" fg:x="903" fg:w="1"/><text x="72.0877%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::new (1 samples, 0.08%)</title><rect x="71.9173%" y="677" width="0.0796%" height="15" fill="rgb(251,124,27)" fg:x="904" fg:w="1"/><text x="72.1673%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="71.9173%" y="709" width="0.1591%" height="15" fill="rgb(229,180,14)" fg:x="904" fg:w="2"/><text x="72.1673%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="71.9173%" y="693" width="0.1591%" height="15" fill="rgb(245,216,25)" fg:x="904" fg:w="2"/><text x="72.1673%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.9968%" y="677" width="0.0796%" height="15" fill="rgb(251,43,5)" fg:x="905" fg:w="1"/><text x="72.2468%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9968%" y="661" width="0.0796%" height="15" fill="rgb(250,128,24)" fg:x="905" fg:w="1"/><text x="72.2468%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="71.9968%" y="645" width="0.0796%" height="15" fill="rgb(217,117,27)" fg:x="905" fg:w="1"/><text x="72.2468%" y="655.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.9968%" y="629" width="0.0796%" height="15" fill="rgb(245,147,4)" fg:x="905" fg:w="1"/><text x="72.2468%" y="639.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="71.9968%" y="613" width="0.0796%" height="15" fill="rgb(242,201,35)" fg:x="905" fg:w="1"/><text x="72.2468%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.9968%" y="597" width="0.0796%" height="15" fill="rgb(218,181,1)" fg:x="905" fg:w="1"/><text x="72.2468%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="72.0764%" y="693" width="0.0796%" height="15" fill="rgb(222,6,29)" fg:x="906" fg:w="1"/><text x="72.3264%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="72.0764%" y="677" width="0.0796%" height="15" fill="rgb(208,186,3)" fg:x="906" fg:w="1"/><text x="72.3264%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.0764%" y="661" width="0.0796%" height="15" fill="rgb(216,36,26)" fg:x="906" fg:w="1"/><text x="72.3264%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="72.0764%" y="645" width="0.0796%" height="15" fill="rgb(248,201,23)" fg:x="906" fg:w="1"/><text x="72.3264%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="72.0764%" y="629" width="0.0796%" height="15" fill="rgb(251,170,31)" fg:x="906" fg:w="1"/><text x="72.3264%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0764%" y="613" width="0.0796%" height="15" fill="rgb(207,110,25)" fg:x="906" fg:w="1"/><text x="72.3264%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="72.1559%" y="693" width="0.0796%" height="15" fill="rgb(250,54,15)" fg:x="907" fg:w="1"/><text x="72.4059%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="72.1559%" y="677" width="0.0796%" height="15" fill="rgb(227,68,33)" fg:x="907" fg:w="1"/><text x="72.4059%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="72.1559%" y="661" width="0.0796%" height="15" fill="rgb(238,34,41)" fg:x="907" fg:w="1"/><text x="72.4059%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.1559%" y="645" width="0.0796%" height="15" fill="rgb(220,11,15)" fg:x="907" fg:w="1"/><text x="72.4059%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="72.1559%" y="629" width="0.0796%" height="15" fill="rgb(246,111,35)" fg:x="907" fg:w="1"/><text x="72.4059%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.1559%" y="613" width="0.0796%" height="15" fill="rgb(209,88,53)" fg:x="907" fg:w="1"/><text x="72.4059%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1559%" y="597" width="0.0796%" height="15" fill="rgb(231,185,47)" fg:x="907" fg:w="1"/><text x="72.4059%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.1559%" y="581" width="0.0796%" height="15" fill="rgb(233,154,1)" fg:x="907" fg:w="1"/><text x="72.4059%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1559%" y="565" width="0.0796%" height="15" fill="rgb(225,15,46)" fg:x="907" fg:w="1"/><text x="72.4059%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.1559%" y="549" width="0.0796%" height="15" fill="rgb(211,135,41)" fg:x="907" fg:w="1"/><text x="72.4059%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1559%" y="533" width="0.0796%" height="15" fill="rgb(208,54,0)" fg:x="907" fg:w="1"/><text x="72.4059%" y="543.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="72.0764%" y="709" width="0.2387%" height="15" fill="rgb(244,136,14)" fg:x="906" fg:w="3"/><text x="72.3264%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="72.2355%" y="693" width="0.0796%" height="15" fill="rgb(241,56,14)" fg:x="908" fg:w="1"/><text x="72.4855%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="72.2355%" y="677" width="0.0796%" height="15" fill="rgb(205,80,24)" fg:x="908" fg:w="1"/><text x="72.4855%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="72.2355%" y="661" width="0.0796%" height="15" fill="rgb(220,57,4)" fg:x="908" fg:w="1"/><text x="72.4855%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.2355%" y="645" width="0.0796%" height="15" fill="rgb(226,193,50)" fg:x="908" fg:w="1"/><text x="72.4855%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="72.2355%" y="629" width="0.0796%" height="15" fill="rgb(231,168,22)" fg:x="908" fg:w="1"/><text x="72.4855%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.2355%" y="613" width="0.0796%" height="15" fill="rgb(254,215,14)" fg:x="908" fg:w="1"/><text x="72.4855%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.2355%" y="597" width="0.0796%" height="15" fill="rgb(211,115,16)" fg:x="908" fg:w="1"/><text x="72.4855%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.2355%" y="581" width="0.0796%" height="15" fill="rgb(236,210,16)" fg:x="908" fg:w="1"/><text x="72.4855%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="72.2355%" y="565" width="0.0796%" height="15" fill="rgb(221,94,12)" fg:x="908" fg:w="1"/><text x="72.4855%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (54 samples, 4.30%)</title><rect x="68.0986%" y="725" width="4.2959%" height="15" fill="rgb(235,218,49)" fg:x="856" fg:w="54"/><text x="68.3486%" y="735.50">plugi..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="72.3150%" y="709" width="0.0796%" height="15" fill="rgb(217,114,14)" fg:x="909" fg:w="1"/><text x="72.5650%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="72.3150%" y="693" width="0.0796%" height="15" fill="rgb(216,145,22)" fg:x="909" fg:w="1"/><text x="72.5650%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="72.3150%" y="677" width="0.0796%" height="15" fill="rgb(217,112,39)" fg:x="909" fg:w="1"/><text x="72.5650%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.3150%" y="661" width="0.0796%" height="15" fill="rgb(225,85,32)" fg:x="909" fg:w="1"/><text x="72.5650%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="72.3150%" y="645" width="0.0796%" height="15" fill="rgb(245,209,47)" fg:x="909" fg:w="1"/><text x="72.5650%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.3946%" y="677" width="0.0796%" height="15" fill="rgb(218,220,15)" fg:x="910" fg:w="1"/><text x="72.6446%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="72.3946%" y="661" width="0.0796%" height="15" fill="rgb(222,202,31)" fg:x="910" fg:w="1"/><text x="72.6446%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.3946%" y="645" width="0.0796%" height="15" fill="rgb(243,203,4)" fg:x="910" fg:w="1"/><text x="72.6446%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3946%" y="629" width="0.0796%" height="15" fill="rgb(237,92,17)" fg:x="910" fg:w="1"/><text x="72.6446%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.3946%" y="613" width="0.0796%" height="15" fill="rgb(231,119,7)" fg:x="910" fg:w="1"/><text x="72.6446%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3946%" y="597" width="0.0796%" height="15" fill="rgb(237,82,41)" fg:x="910" fg:w="1"/><text x="72.6446%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.3946%" y="581" width="0.0796%" height="15" fill="rgb(226,81,48)" fg:x="910" fg:w="1"/><text x="72.6446%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3946%" y="565" width="0.0796%" height="15" fill="rgb(234,70,51)" fg:x="910" fg:w="1"/><text x="72.6446%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="72.4741%" y="645" width="0.0796%" height="15" fill="rgb(251,86,4)" fg:x="911" fg:w="1"/><text x="72.7241%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="72.4741%" y="629" width="0.0796%" height="15" fill="rgb(244,144,28)" fg:x="911" fg:w="1"/><text x="72.7241%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="72.4741%" y="613" width="0.0796%" height="15" fill="rgb(232,161,39)" fg:x="911" fg:w="1"/><text x="72.7241%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="72.4741%" y="597" width="0.0796%" height="15" fill="rgb(247,34,51)" fg:x="911" fg:w="1"/><text x="72.7241%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="72.4741%" y="581" width="0.0796%" height="15" fill="rgb(225,132,2)" fg:x="911" fg:w="1"/><text x="72.7241%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.4741%" y="565" width="0.0796%" height="15" fill="rgb(209,159,44)" fg:x="911" fg:w="1"/><text x="72.7241%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.4741%" y="549" width="0.0796%" height="15" fill="rgb(251,214,1)" fg:x="911" fg:w="1"/><text x="72.7241%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="72.3946%" y="725" width="0.2387%" height="15" fill="rgb(247,84,47)" fg:x="910" fg:w="3"/><text x="72.6446%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="72.3946%" y="709" width="0.2387%" height="15" fill="rgb(240,111,43)" fg:x="910" fg:w="3"/><text x="72.6446%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="72.3946%" y="693" width="0.2387%" height="15" fill="rgb(215,214,35)" fg:x="910" fg:w="3"/><text x="72.6446%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="72.4741%" y="677" width="0.1591%" height="15" fill="rgb(248,207,23)" fg:x="911" fg:w="2"/><text x="72.7241%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="72.4741%" y="661" width="0.1591%" height="15" fill="rgb(214,186,4)" fg:x="911" fg:w="2"/><text x="72.7241%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="72.5537%" y="645" width="0.0796%" height="15" fill="rgb(220,133,22)" fg:x="912" fg:w="1"/><text x="72.8037%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.5537%" y="629" width="0.0796%" height="15" fill="rgb(239,134,19)" fg:x="912" fg:w="1"/><text x="72.8037%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="72.5537%" y="613" width="0.0796%" height="15" fill="rgb(250,140,9)" fg:x="912" fg:w="1"/><text x="72.8037%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="72.5537%" y="597" width="0.0796%" height="15" fill="rgb(225,59,14)" fg:x="912" fg:w="1"/><text x="72.8037%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.5537%" y="581" width="0.0796%" height="15" fill="rgb(214,152,51)" fg:x="912" fg:w="1"/><text x="72.8037%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.5537%" y="565" width="0.0796%" height="15" fill="rgb(251,227,43)" fg:x="912" fg:w="1"/><text x="72.8037%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.5537%" y="549" width="0.0796%" height="15" fill="rgb(241,96,17)" fg:x="912" fg:w="1"/><text x="72.8037%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.5537%" y="533" width="0.0796%" height="15" fill="rgb(234,198,43)" fg:x="912" fg:w="1"/><text x="72.8037%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.5537%" y="517" width="0.0796%" height="15" fill="rgb(220,108,29)" fg:x="912" fg:w="1"/><text x="72.8037%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="72.6333%" y="693" width="0.0796%" height="15" fill="rgb(226,163,33)" fg:x="913" fg:w="1"/><text x="72.8833%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.6333%" y="677" width="0.0796%" height="15" fill="rgb(205,194,45)" fg:x="913" fg:w="1"/><text x="72.8833%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="72.6333%" y="709" width="0.1591%" height="15" fill="rgb(206,143,44)" fg:x="913" fg:w="2"/><text x="72.8833%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="72.7128%" y="693" width="0.0796%" height="15" fill="rgb(236,136,36)" fg:x="914" fg:w="1"/><text x="72.9628%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.7128%" y="677" width="0.0796%" height="15" fill="rgb(249,172,42)" fg:x="914" fg:w="1"/><text x="72.9628%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="72.7128%" y="661" width="0.0796%" height="15" fill="rgb(216,139,23)" fg:x="914" fg:w="1"/><text x="72.9628%" y="671.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="72.7924%" y="709" width="0.0796%" height="15" fill="rgb(207,166,20)" fg:x="915" fg:w="1"/><text x="73.0424%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="72.7924%" y="693" width="0.0796%" height="15" fill="rgb(210,209,22)" fg:x="915" fg:w="1"/><text x="73.0424%" y="703.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="72.7924%" y="677" width="0.0796%" height="15" fill="rgb(232,118,20)" fg:x="915" fg:w="1"/><text x="73.0424%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.8719%" y="693" width="0.0796%" height="15" fill="rgb(238,113,42)" fg:x="916" fg:w="1"/><text x="73.1219%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="72.8719%" y="677" width="0.0796%" height="15" fill="rgb(231,42,5)" fg:x="916" fg:w="1"/><text x="73.1219%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.8719%" y="661" width="0.0796%" height="15" fill="rgb(243,166,24)" fg:x="916" fg:w="1"/><text x="73.1219%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.8719%" y="645" width="0.0796%" height="15" fill="rgb(237,226,12)" fg:x="916" fg:w="1"/><text x="73.1219%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.8719%" y="629" width="0.0796%" height="15" fill="rgb(229,133,24)" fg:x="916" fg:w="1"/><text x="73.1219%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.8719%" y="613" width="0.0796%" height="15" fill="rgb(238,33,43)" fg:x="916" fg:w="1"/><text x="73.1219%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.8719%" y="597" width="0.0796%" height="15" fill="rgb(227,59,38)" fg:x="916" fg:w="1"/><text x="73.1219%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.8719%" y="581" width="0.0796%" height="15" fill="rgb(230,97,0)" fg:x="916" fg:w="1"/><text x="73.1219%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.8719%" y="565" width="0.0796%" height="15" fill="rgb(250,173,50)" fg:x="916" fg:w="1"/><text x="73.1219%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.8719%" y="549" width="0.0796%" height="15" fill="rgb(240,15,50)" fg:x="916" fg:w="1"/><text x="73.1219%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.9515%" y="677" width="0.0796%" height="15" fill="rgb(221,93,22)" fg:x="917" fg:w="1"/><text x="73.2015%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.9515%" y="661" width="0.0796%" height="15" fill="rgb(245,180,53)" fg:x="917" fg:w="1"/><text x="73.2015%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.0310%" y="677" width="0.0796%" height="15" fill="rgb(231,88,51)" fg:x="918" fg:w="1"/><text x="73.2810%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.0310%" y="661" width="0.0796%" height="15" fill="rgb(240,58,21)" fg:x="918" fg:w="1"/><text x="73.2810%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.0310%" y="645" width="0.0796%" height="15" fill="rgb(237,21,10)" fg:x="918" fg:w="1"/><text x="73.2810%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.0310%" y="629" width="0.0796%" height="15" fill="rgb(218,43,11)" fg:x="918" fg:w="1"/><text x="73.2810%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.0310%" y="613" width="0.0796%" height="15" fill="rgb(218,221,29)" fg:x="918" fg:w="1"/><text x="73.2810%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.0310%" y="597" width="0.0796%" height="15" fill="rgb(214,118,42)" fg:x="918" fg:w="1"/><text x="73.2810%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.0310%" y="581" width="0.0796%" height="15" fill="rgb(251,200,26)" fg:x="918" fg:w="1"/><text x="73.2810%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="73.1106%" y="661" width="0.0796%" height="15" fill="rgb(237,101,39)" fg:x="919" fg:w="1"/><text x="73.3606%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="72.9515%" y="693" width="0.3182%" height="15" fill="rgb(251,117,11)" fg:x="917" fg:w="4"/><text x="73.2015%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="73.1106%" y="677" width="0.1591%" height="15" fill="rgb(216,223,23)" fg:x="919" fg:w="2"/><text x="73.3606%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="73.1901%" y="661" width="0.0796%" height="15" fill="rgb(251,54,12)" fg:x="920" fg:w="1"/><text x="73.4401%" y="671.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (97 samples, 7.72%)</title><rect x="65.6325%" y="741" width="7.7168%" height="15" fill="rgb(254,176,54)" fg:x="825" fg:w="97"/><text x="65.8825%" y="751.50">&lt;tests::Hol..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (9 samples, 0.72%)</title><rect x="72.6333%" y="725" width="0.7160%" height="15" fill="rgb(210,32,8)" fg:x="913" fg:w="9"/><text x="72.8833%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="72.8719%" y="709" width="0.4773%" height="15" fill="rgb(235,52,38)" fg:x="916" fg:w="6"/><text x="73.1219%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.2697%" y="693" width="0.0796%" height="15" fill="rgb(231,4,44)" fg:x="921" fg:w="1"/><text x="73.5197%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.2697%" y="677" width="0.0796%" height="15" fill="rgb(249,2,32)" fg:x="921" fg:w="1"/><text x="73.5197%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.2697%" y="661" width="0.0796%" height="15" fill="rgb(224,65,26)" fg:x="921" fg:w="1"/><text x="73.5197%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.2697%" y="645" width="0.0796%" height="15" fill="rgb(250,73,40)" fg:x="921" fg:w="1"/><text x="73.5197%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.2697%" y="629" width="0.0796%" height="15" fill="rgb(253,177,16)" fg:x="921" fg:w="1"/><text x="73.5197%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.2697%" y="613" width="0.0796%" height="15" fill="rgb(217,32,34)" fg:x="921" fg:w="1"/><text x="73.5197%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.2697%" y="597" width="0.0796%" height="15" fill="rgb(212,7,10)" fg:x="921" fg:w="1"/><text x="73.5197%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.2697%" y="581" width="0.0796%" height="15" fill="rgb(245,89,8)" fg:x="921" fg:w="1"/><text x="73.5197%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.2697%" y="565" width="0.0796%" height="15" fill="rgb(237,16,53)" fg:x="921" fg:w="1"/><text x="73.5197%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.2697%" y="549" width="0.0796%" height="15" fill="rgb(250,204,30)" fg:x="921" fg:w="1"/><text x="73.5197%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.2697%" y="533" width="0.0796%" height="15" fill="rgb(208,77,27)" fg:x="921" fg:w="1"/><text x="73.5197%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.2697%" y="517" width="0.0796%" height="15" fill="rgb(250,204,28)" fg:x="921" fg:w="1"/><text x="73.5197%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="73.3492%" y="741" width="0.0796%" height="15" fill="rgb(244,63,21)" fg:x="922" fg:w="1"/><text x="73.5992%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.3492%" y="725" width="0.0796%" height="15" fill="rgb(236,85,44)" fg:x="922" fg:w="1"/><text x="73.5992%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="73.4288%" y="741" width="0.0796%" height="15" fill="rgb(215,98,4)" fg:x="923" fg:w="1"/><text x="73.6788%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="73.4288%" y="725" width="0.0796%" height="15" fill="rgb(235,38,11)" fg:x="923" fg:w="1"/><text x="73.6788%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="73.4288%" y="709" width="0.0796%" height="15" fill="rgb(254,186,25)" fg:x="923" fg:w="1"/><text x="73.6788%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.4288%" y="693" width="0.0796%" height="15" fill="rgb(225,55,31)" fg:x="923" fg:w="1"/><text x="73.6788%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.4288%" y="677" width="0.0796%" height="15" fill="rgb(211,15,21)" fg:x="923" fg:w="1"/><text x="73.6788%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (3 samples, 0.24%)</title><rect x="73.5084%" y="741" width="0.2387%" height="15" fill="rgb(215,187,41)" fg:x="924" fg:w="3"/><text x="73.7584%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="73.5084%" y="725" width="0.2387%" height="15" fill="rgb(248,69,32)" fg:x="924" fg:w="3"/><text x="73.7584%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="73.5084%" y="709" width="0.2387%" height="15" fill="rgb(252,102,52)" fg:x="924" fg:w="3"/><text x="73.7584%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.6675%" y="693" width="0.0796%" height="15" fill="rgb(253,140,32)" fg:x="926" fg:w="1"/><text x="73.9175%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="73.7470%" y="661" width="0.0796%" height="15" fill="rgb(216,56,42)" fg:x="927" fg:w="1"/><text x="73.9970%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.7470%" y="645" width="0.0796%" height="15" fill="rgb(216,184,14)" fg:x="927" fg:w="1"/><text x="73.9970%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.7470%" y="629" width="0.0796%" height="15" fill="rgb(237,187,27)" fg:x="927" fg:w="1"/><text x="73.9970%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.7470%" y="613" width="0.0796%" height="15" fill="rgb(219,65,3)" fg:x="927" fg:w="1"/><text x="73.9970%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.7470%" y="597" width="0.0796%" height="15" fill="rgb(245,83,25)" fg:x="927" fg:w="1"/><text x="73.9970%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.7470%" y="581" width="0.0796%" height="15" fill="rgb(214,205,45)" fg:x="927" fg:w="1"/><text x="73.9970%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.7470%" y="565" width="0.0796%" height="15" fill="rgb(241,20,18)" fg:x="927" fg:w="1"/><text x="73.9970%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.7470%" y="549" width="0.0796%" height="15" fill="rgb(232,163,23)" fg:x="927" fg:w="1"/><text x="73.9970%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.7470%" y="533" width="0.0796%" height="15" fill="rgb(214,5,46)" fg:x="927" fg:w="1"/><text x="73.9970%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.7470%" y="517" width="0.0796%" height="15" fill="rgb(229,78,17)" fg:x="927" fg:w="1"/><text x="73.9970%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.7470%" y="501" width="0.0796%" height="15" fill="rgb(248,89,10)" fg:x="927" fg:w="1"/><text x="73.9970%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.7470%" y="485" width="0.0796%" height="15" fill="rgb(248,54,15)" fg:x="927" fg:w="1"/><text x="73.9970%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7470%" y="469" width="0.0796%" height="15" fill="rgb(223,116,6)" fg:x="927" fg:w="1"/><text x="73.9970%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="73.7470%" y="693" width="0.1591%" height="15" fill="rgb(205,125,38)" fg:x="927" fg:w="2"/><text x="73.9970%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="73.7470%" y="677" width="0.1591%" height="15" fill="rgb(251,78,38)" fg:x="927" fg:w="2"/><text x="73.9970%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="73.8266%" y="661" width="0.0796%" height="15" fill="rgb(253,78,28)" fg:x="928" fg:w="1"/><text x="74.0766%" y="671.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="73.8266%" y="645" width="0.0796%" height="15" fill="rgb(209,120,3)" fg:x="928" fg:w="1"/><text x="74.0766%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="74.0652%" y="629" width="0.1591%" height="15" fill="rgb(238,229,9)" fg:x="931" fg:w="2"/><text x="74.3152%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="74.0652%" y="613" width="0.1591%" height="15" fill="rgb(253,159,18)" fg:x="931" fg:w="2"/><text x="74.3152%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.1448%" y="597" width="0.0796%" height="15" fill="rgb(244,42,34)" fg:x="932" fg:w="1"/><text x="74.3948%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.1448%" y="581" width="0.0796%" height="15" fill="rgb(224,8,7)" fg:x="932" fg:w="1"/><text x="74.3948%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.1448%" y="565" width="0.0796%" height="15" fill="rgb(210,201,45)" fg:x="932" fg:w="1"/><text x="74.3948%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.2243%" y="613" width="0.0796%" height="15" fill="rgb(252,185,21)" fg:x="933" fg:w="1"/><text x="74.4743%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.3039%" y="613" width="0.0796%" height="15" fill="rgb(223,131,1)" fg:x="934" fg:w="1"/><text x="74.5539%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.3835%" y="565" width="0.0796%" height="15" fill="rgb(245,141,16)" fg:x="935" fg:w="1"/><text x="74.6335%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.3835%" y="549" width="0.0796%" height="15" fill="rgb(229,55,45)" fg:x="935" fg:w="1"/><text x="74.6335%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.3835%" y="533" width="0.0796%" height="15" fill="rgb(208,92,15)" fg:x="935" fg:w="1"/><text x="74.6335%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.3835%" y="517" width="0.0796%" height="15" fill="rgb(234,185,47)" fg:x="935" fg:w="1"/><text x="74.6335%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.3835%" y="501" width="0.0796%" height="15" fill="rgb(253,104,50)" fg:x="935" fg:w="1"/><text x="74.6335%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.3835%" y="485" width="0.0796%" height="15" fill="rgb(205,70,7)" fg:x="935" fg:w="1"/><text x="74.6335%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.3835%" y="469" width="0.0796%" height="15" fill="rgb(240,178,43)" fg:x="935" fg:w="1"/><text x="74.6335%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="74.3835%" y="597" width="0.1591%" height="15" fill="rgb(214,112,2)" fg:x="935" fg:w="2"/><text x="74.6335%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="74.3835%" y="581" width="0.1591%" height="15" fill="rgb(206,46,17)" fg:x="935" fg:w="2"/><text x="74.6335%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.4630%" y="565" width="0.0796%" height="15" fill="rgb(225,220,16)" fg:x="936" fg:w="1"/><text x="74.7130%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.4630%" y="549" width="0.0796%" height="15" fill="rgb(238,65,40)" fg:x="936" fg:w="1"/><text x="74.7130%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.5426%" y="597" width="0.0796%" height="15" fill="rgb(230,151,21)" fg:x="937" fg:w="1"/><text x="74.7926%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="74.6221%" y="581" width="0.1591%" height="15" fill="rgb(218,58,49)" fg:x="938" fg:w="2"/><text x="74.8721%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="74.6221%" y="565" width="0.1591%" height="15" fill="rgb(219,179,14)" fg:x="938" fg:w="2"/><text x="74.8721%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="74.6221%" y="549" width="0.1591%" height="15" fill="rgb(223,72,1)" fg:x="938" fg:w="2"/><text x="74.8721%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.7017%" y="533" width="0.0796%" height="15" fill="rgb(238,126,10)" fg:x="939" fg:w="1"/><text x="74.9517%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.7017%" y="517" width="0.0796%" height="15" fill="rgb(224,206,38)" fg:x="939" fg:w="1"/><text x="74.9517%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.7017%" y="501" width="0.0796%" height="15" fill="rgb(212,201,54)" fg:x="939" fg:w="1"/><text x="74.9517%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.7017%" y="485" width="0.0796%" height="15" fill="rgb(218,154,48)" fg:x="939" fg:w="1"/><text x="74.9517%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.7812%" y="565" width="0.0796%" height="15" fill="rgb(232,93,24)" fg:x="940" fg:w="1"/><text x="75.0312%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.8608%" y="565" width="0.0796%" height="15" fill="rgb(245,30,21)" fg:x="941" fg:w="1"/><text x="75.1108%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.8608%" y="549" width="0.0796%" height="15" fill="rgb(242,148,29)" fg:x="941" fg:w="1"/><text x="75.1108%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.8608%" y="533" width="0.0796%" height="15" fill="rgb(244,153,54)" fg:x="941" fg:w="1"/><text x="75.1108%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.8608%" y="517" width="0.0796%" height="15" fill="rgb(252,87,22)" fg:x="941" fg:w="1"/><text x="75.1108%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.8608%" y="501" width="0.0796%" height="15" fill="rgb(210,51,29)" fg:x="941" fg:w="1"/><text x="75.1108%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.8608%" y="485" width="0.0796%" height="15" fill="rgb(242,136,47)" fg:x="941" fg:w="1"/><text x="75.1108%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.8608%" y="469" width="0.0796%" height="15" fill="rgb(238,68,4)" fg:x="941" fg:w="1"/><text x="75.1108%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9403%" y="565" width="0.0796%" height="15" fill="rgb(242,161,30)" fg:x="942" fg:w="1"/><text x="75.1903%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.11%)</title><rect x="73.9857%" y="645" width="1.1138%" height="15" fill="rgb(218,58,44)" fg:x="930" fg:w="14"/><text x="74.2357%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="74.2243%" y="629" width="0.8751%" height="15" fill="rgb(252,125,32)" fg:x="933" fg:w="11"/><text x="74.4743%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="74.3835%" y="613" width="0.7160%" height="15" fill="rgb(219,178,0)" fg:x="935" fg:w="9"/><text x="74.6335%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="74.6221%" y="597" width="0.4773%" height="15" fill="rgb(213,152,7)" fg:x="938" fg:w="6"/><text x="74.8721%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="74.7812%" y="581" width="0.3182%" height="15" fill="rgb(249,109,34)" fg:x="940" fg:w="4"/><text x="75.0312%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.0199%" y="565" width="0.0796%" height="15" fill="rgb(232,96,21)" fg:x="943" fg:w="1"/><text x="75.2699%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.0199%" y="549" width="0.0796%" height="15" fill="rgb(228,27,39)" fg:x="943" fg:w="1"/><text x="75.2699%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.0994%" y="645" width="0.1591%" height="15" fill="rgb(211,182,52)" fg:x="944" fg:w="2"/><text x="75.3494%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="75.0994%" y="629" width="0.1591%" height="15" fill="rgb(234,178,38)" fg:x="944" fg:w="2"/><text x="75.3494%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.1790%" y="613" width="0.0796%" height="15" fill="rgb(221,111,3)" fg:x="945" fg:w="1"/><text x="75.4290%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.2586%" y="597" width="0.0796%" height="15" fill="rgb(228,175,21)" fg:x="946" fg:w="1"/><text x="75.5086%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.3381%" y="581" width="0.0796%" height="15" fill="rgb(228,174,43)" fg:x="947" fg:w="1"/><text x="75.5881%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.4177%" y="581" width="0.0796%" height="15" fill="rgb(211,191,0)" fg:x="948" fg:w="1"/><text x="75.6677%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.4177%" y="565" width="0.0796%" height="15" fill="rgb(253,117,3)" fg:x="948" fg:w="1"/><text x="75.6677%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5768%" y="549" width="0.0796%" height="15" fill="rgb(241,127,19)" fg:x="950" fg:w="1"/><text x="75.8268%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.6563%" y="549" width="0.0796%" height="15" fill="rgb(218,103,12)" fg:x="951" fg:w="1"/><text x="75.9063%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.8154%" y="517" width="0.0796%" height="15" fill="rgb(236,214,43)" fg:x="953" fg:w="1"/><text x="76.0654%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.8154%" y="501" width="0.0796%" height="15" fill="rgb(244,144,19)" fg:x="953" fg:w="1"/><text x="76.0654%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.24%)</title><rect x="75.7359%" y="549" width="0.2387%" height="15" fill="rgb(246,188,10)" fg:x="952" fg:w="3"/><text x="75.9859%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="75.7359%" y="533" width="0.2387%" height="15" fill="rgb(212,193,33)" fg:x="952" fg:w="3"/><text x="75.9859%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.8950%" y="517" width="0.0796%" height="15" fill="rgb(241,51,29)" fg:x="954" fg:w="1"/><text x="76.1450%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="75.2586%" y="613" width="0.7955%" height="15" fill="rgb(211,58,19)" fg:x="946" fg:w="10"/><text x="75.5086%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="75.3381%" y="597" width="0.7160%" height="15" fill="rgb(229,111,26)" fg:x="947" fg:w="9"/><text x="75.5881%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="75.4972%" y="581" width="0.5569%" height="15" fill="rgb(213,115,40)" fg:x="949" fg:w="7"/><text x="75.7472%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="75.5768%" y="565" width="0.4773%" height="15" fill="rgb(209,56,44)" fg:x="950" fg:w="6"/><text x="75.8268%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.9745%" y="549" width="0.0796%" height="15" fill="rgb(230,108,32)" fg:x="955" fg:w="1"/><text x="76.2245%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.9745%" y="533" width="0.0796%" height="15" fill="rgb(216,165,31)" fg:x="955" fg:w="1"/><text x="76.2245%" y="543.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="76.0541%" y="613" width="0.0796%" height="15" fill="rgb(218,122,21)" fg:x="956" fg:w="1"/><text x="76.3041%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.0541%" y="597" width="0.0796%" height="15" fill="rgb(223,224,47)" fg:x="956" fg:w="1"/><text x="76.3041%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0541%" y="581" width="0.0796%" height="15" fill="rgb(238,102,44)" fg:x="956" fg:w="1"/><text x="76.3041%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (12 samples, 0.95%)</title><rect x="75.2586%" y="629" width="0.9547%" height="15" fill="rgb(236,46,40)" fg:x="946" fg:w="12"/><text x="75.5086%" y="639.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="76.1337%" y="613" width="0.0796%" height="15" fill="rgb(247,202,50)" fg:x="957" fg:w="1"/><text x="76.3837%" y="623.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="76.1337%" y="597" width="0.0796%" height="15" fill="rgb(209,99,20)" fg:x="957" fg:w="1"/><text x="76.3837%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1337%" y="581" width="0.0796%" height="15" fill="rgb(252,27,34)" fg:x="957" fg:w="1"/><text x="76.3837%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="76.2132%" y="597" width="0.1591%" height="15" fill="rgb(215,206,23)" fg:x="958" fg:w="2"/><text x="76.4632%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="76.2928%" y="581" width="0.0796%" height="15" fill="rgb(212,135,36)" fg:x="959" fg:w="1"/><text x="76.5428%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="76.4519%" y="549" width="0.3182%" height="15" fill="rgb(240,189,1)" fg:x="961" fg:w="4"/><text x="76.7019%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="76.6110%" y="533" width="0.1591%" height="15" fill="rgb(242,56,20)" fg:x="963" fg:w="2"/><text x="76.8610%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="76.7701%" y="533" width="0.0796%" height="15" fill="rgb(247,132,33)" fg:x="965" fg:w="1"/><text x="77.0201%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="76.7701%" y="549" width="0.1591%" height="15" fill="rgb(208,149,11)" fg:x="965" fg:w="2"/><text x="77.0201%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.8496%" y="533" width="0.0796%" height="15" fill="rgb(211,33,11)" fg:x="966" fg:w="1"/><text x="77.0996%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.8496%" y="517" width="0.0796%" height="15" fill="rgb(221,29,38)" fg:x="966" fg:w="1"/><text x="77.0996%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="76.4519%" y="581" width="0.6364%" height="15" fill="rgb(206,182,49)" fg:x="961" fg:w="8"/><text x="76.7019%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="76.4519%" y="565" width="0.6364%" height="15" fill="rgb(216,140,1)" fg:x="961" fg:w="8"/><text x="76.7019%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="76.9292%" y="549" width="0.1591%" height="15" fill="rgb(232,57,40)" fg:x="967" fg:w="2"/><text x="77.1792%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="76.9292%" y="533" width="0.1591%" height="15" fill="rgb(224,186,18)" fg:x="967" fg:w="2"/><text x="77.1792%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.0088%" y="517" width="0.0796%" height="15" fill="rgb(215,121,11)" fg:x="968" fg:w="1"/><text x="77.2588%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.95%)</title><rect x="76.2132%" y="629" width="0.9547%" height="15" fill="rgb(245,147,10)" fg:x="958" fg:w="12"/><text x="76.4632%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.95%)</title><rect x="76.2132%" y="613" width="0.9547%" height="15" fill="rgb(238,153,13)" fg:x="958" fg:w="12"/><text x="76.4632%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.80%)</title><rect x="76.3723%" y="597" width="0.7955%" height="15" fill="rgb(233,108,0)" fg:x="960" fg:w="10"/><text x="76.6223%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.0883%" y="581" width="0.0796%" height="15" fill="rgb(212,157,17)" fg:x="969" fg:w="1"/><text x="77.3383%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="77.0883%" y="565" width="0.0796%" height="15" fill="rgb(225,213,38)" fg:x="969" fg:w="1"/><text x="77.3383%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.3270%" y="453" width="0.0796%" height="15" fill="rgb(248,16,11)" fg:x="972" fg:w="1"/><text x="77.5770%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3270%" y="437" width="0.0796%" height="15" fill="rgb(241,33,4)" fg:x="972" fg:w="1"/><text x="77.5770%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.3270%" y="485" width="0.1591%" height="15" fill="rgb(222,26,43)" fg:x="972" fg:w="2"/><text x="77.5770%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.3270%" y="469" width="0.1591%" height="15" fill="rgb(243,29,36)" fg:x="972" fg:w="2"/><text x="77.5770%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.4065%" y="453" width="0.0796%" height="15" fill="rgb(241,9,27)" fg:x="973" fg:w="1"/><text x="77.6565%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="77.3270%" y="501" width="0.3182%" height="15" fill="rgb(205,117,26)" fg:x="972" fg:w="4"/><text x="77.5770%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.4861%" y="485" width="0.1591%" height="15" fill="rgb(209,80,39)" fg:x="974" fg:w="2"/><text x="77.7361%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.5656%" y="469" width="0.0796%" height="15" fill="rgb(239,155,6)" fg:x="975" fg:w="1"/><text x="77.8156%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.5656%" y="453" width="0.0796%" height="15" fill="rgb(212,104,12)" fg:x="975" fg:w="1"/><text x="77.8156%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5656%" y="437" width="0.0796%" height="15" fill="rgb(234,204,3)" fg:x="975" fg:w="1"/><text x="77.8156%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5656%" y="421" width="0.0796%" height="15" fill="rgb(251,218,7)" fg:x="975" fg:w="1"/><text x="77.8156%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5656%" y="405" width="0.0796%" height="15" fill="rgb(221,81,32)" fg:x="975" fg:w="1"/><text x="77.8156%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="77.6452%" y="485" width="0.0796%" height="15" fill="rgb(214,152,26)" fg:x="976" fg:w="1"/><text x="77.8952%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="77.2474%" y="533" width="0.5569%" height="15" fill="rgb(223,22,3)" fg:x="971" fg:w="7"/><text x="77.4974%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="77.3270%" y="517" width="0.4773%" height="15" fill="rgb(207,174,7)" fg:x="972" fg:w="6"/><text x="77.5770%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="77.6452%" y="501" width="0.1591%" height="15" fill="rgb(224,19,52)" fg:x="976" fg:w="2"/><text x="77.8952%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.7247%" y="485" width="0.0796%" height="15" fill="rgb(228,24,14)" fg:x="977" fg:w="1"/><text x="77.9747%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.80%)</title><rect x="77.2474%" y="565" width="0.7955%" height="15" fill="rgb(230,153,43)" fg:x="971" fg:w="10"/><text x="77.4974%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.80%)</title><rect x="77.2474%" y="549" width="0.7955%" height="15" fill="rgb(231,106,12)" fg:x="971" fg:w="10"/><text x="77.4974%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="77.8043%" y="533" width="0.2387%" height="15" fill="rgb(215,92,2)" fg:x="978" fg:w="3"/><text x="78.0543%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9634%" y="517" width="0.0796%" height="15" fill="rgb(249,143,25)" fg:x="980" fg:w="1"/><text x="78.2134%" y="527.50"></text></g><g><title>engine::session::state::State::flush_entities (55 samples, 4.38%)</title><rect x="73.7470%" y="709" width="4.3755%" height="15" fill="rgb(252,7,35)" fg:x="927" fg:w="55"/><text x="73.9970%" y="719.50">engin..</text></g><g><title>core::iter::adapters::try_process (53 samples, 4.22%)</title><rect x="73.9061%" y="693" width="4.2164%" height="15" fill="rgb(216,69,40)" fg:x="929" fg:w="53"/><text x="74.1561%" y="703.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (53 samples, 4.22%)</title><rect x="73.9061%" y="677" width="4.2164%" height="15" fill="rgb(240,36,33)" fg:x="929" fg:w="53"/><text x="74.1561%" y="687.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (53 samples, 4.22%)</title><rect x="73.9061%" y="661" width="4.2164%" height="15" fill="rgb(231,128,14)" fg:x="929" fg:w="53"/><text x="74.1561%" y="671.50">engin..</text></g><g><title>kernel::model::any_entity_changes (36 samples, 2.86%)</title><rect x="75.2586%" y="645" width="2.8640%" height="15" fill="rgb(245,143,14)" fg:x="946" fg:w="36"/><text x="75.5086%" y="655.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (12 samples, 0.95%)</title><rect x="77.1679%" y="629" width="0.9547%" height="15" fill="rgb(222,130,28)" fg:x="970" fg:w="12"/><text x="77.4179%" y="639.50"></text></g><g><title>serde_json::de::from_trait (12 samples, 0.95%)</title><rect x="77.1679%" y="613" width="0.9547%" height="15" fill="rgb(212,10,48)" fg:x="970" fg:w="12"/><text x="77.4179%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.95%)</title><rect x="77.1679%" y="597" width="0.9547%" height="15" fill="rgb(254,118,45)" fg:x="970" fg:w="12"/><text x="77.4179%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.95%)</title><rect x="77.1679%" y="581" width="0.9547%" height="15" fill="rgb(228,6,45)" fg:x="970" fg:w="12"/><text x="77.4179%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.0430%" y="565" width="0.0796%" height="15" fill="rgb(241,18,35)" fg:x="981" fg:w="1"/><text x="78.2930%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.0430%" y="549" width="0.0796%" height="15" fill="rgb(227,214,53)" fg:x="981" fg:w="1"/><text x="78.2930%" y="559.50"></text></g><g><title>engine::session::state::State::close (57 samples, 4.53%)</title><rect x="73.7470%" y="725" width="4.5346%" height="15" fill="rgb(224,107,51)" fg:x="927" fg:w="57"/><text x="73.9970%" y="735.50">engin..</text></g><g><title>engine::session::state::State::flush_futures (2 samples, 0.16%)</title><rect x="78.1225%" y="709" width="0.1591%" height="15" fill="rgb(248,60,28)" fg:x="982" fg:w="2"/><text x="78.3725%" y="719.50"></text></g><g><title>engine::session::Session::close (58 samples, 4.61%)</title><rect x="73.7470%" y="741" width="4.6142%" height="15" fill="rgb(249,101,23)" fg:x="927" fg:w="58"/><text x="73.9970%" y="751.50">engin..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="78.2816%" y="725" width="0.0796%" height="15" fill="rgb(228,51,19)" fg:x="984" fg:w="1"/><text x="78.5316%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="78.3612%" y="693" width="0.0796%" height="15" fill="rgb(213,20,6)" fg:x="985" fg:w="1"/><text x="78.6112%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="78.3612%" y="677" width="0.0796%" height="15" fill="rgb(212,124,10)" fg:x="985" fg:w="1"/><text x="78.6112%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.3612%" y="661" width="0.0796%" height="15" fill="rgb(248,3,40)" fg:x="985" fg:w="1"/><text x="78.6112%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="78.3612%" y="645" width="0.0796%" height="15" fill="rgb(223,178,23)" fg:x="985" fg:w="1"/><text x="78.6112%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="78.3612%" y="629" width="0.0796%" height="15" fill="rgb(240,132,45)" fg:x="985" fg:w="1"/><text x="78.6112%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="78.3612%" y="613" width="0.0796%" height="15" fill="rgb(245,164,36)" fg:x="985" fg:w="1"/><text x="78.6112%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="78.3612%" y="597" width="0.0796%" height="15" fill="rgb(231,188,53)" fg:x="985" fg:w="1"/><text x="78.6112%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="78.3612%" y="581" width="0.0796%" height="15" fill="rgb(237,198,39)" fg:x="985" fg:w="1"/><text x="78.6112%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="78.3612%" y="565" width="0.0796%" height="15" fill="rgb(223,120,35)" fg:x="985" fg:w="1"/><text x="78.6112%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="78.3612%" y="549" width="0.0796%" height="15" fill="rgb(253,107,49)" fg:x="985" fg:w="1"/><text x="78.6112%" y="559.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="78.4407%" y="677" width="0.0796%" height="15" fill="rgb(216,44,31)" fg:x="986" fg:w="1"/><text x="78.6907%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="78.4407%" y="661" width="0.0796%" height="15" fill="rgb(253,87,21)" fg:x="986" fg:w="1"/><text x="78.6907%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="78.4407%" y="645" width="0.0796%" height="15" fill="rgb(226,18,2)" fg:x="986" fg:w="1"/><text x="78.6907%" y="655.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="78.5203%" y="645" width="0.1591%" height="15" fill="rgb(216,8,46)" fg:x="987" fg:w="2"/><text x="78.7703%" y="655.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.24%)</title><rect x="78.5203%" y="677" width="0.2387%" height="15" fill="rgb(226,140,39)" fg:x="987" fg:w="3"/><text x="78.7703%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (3 samples, 0.24%)</title><rect x="78.5203%" y="661" width="0.2387%" height="15" fill="rgb(221,194,54)" fg:x="987" fg:w="3"/><text x="78.7703%" y="671.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (1 samples, 0.08%)</title><rect x="78.6794%" y="645" width="0.0796%" height="15" fill="rgb(213,92,11)" fg:x="989" fg:w="1"/><text x="78.9294%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.9976%" y="549" width="0.0796%" height="15" fill="rgb(229,162,46)" fg:x="993" fg:w="1"/><text x="79.2476%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.9976%" y="533" width="0.0796%" height="15" fill="rgb(214,111,36)" fg:x="993" fg:w="1"/><text x="79.2476%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.9976%" y="517" width="0.0796%" height="15" fill="rgb(207,6,21)" fg:x="993" fg:w="1"/><text x="79.2476%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="78.9181%" y="565" width="0.2387%" height="15" fill="rgb(213,127,38)" fg:x="992" fg:w="3"/><text x="79.1681%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.0772%" y="549" width="0.0796%" height="15" fill="rgb(238,118,32)" fg:x="994" fg:w="1"/><text x="79.3272%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.0772%" y="533" width="0.0796%" height="15" fill="rgb(240,139,39)" fg:x="994" fg:w="1"/><text x="79.3272%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.0772%" y="517" width="0.0796%" height="15" fill="rgb(235,10,37)" fg:x="994" fg:w="1"/><text x="79.3272%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.0772%" y="501" width="0.0796%" height="15" fill="rgb(249,171,38)" fg:x="994" fg:w="1"/><text x="79.3272%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.0772%" y="485" width="0.0796%" height="15" fill="rgb(242,144,32)" fg:x="994" fg:w="1"/><text x="79.3272%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.2363%" y="469" width="0.0796%" height="15" fill="rgb(217,117,21)" fg:x="996" fg:w="1"/><text x="79.4863%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.2363%" y="453" width="0.0796%" height="15" fill="rgb(249,87,1)" fg:x="996" fg:w="1"/><text x="79.4863%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.2363%" y="437" width="0.0796%" height="15" fill="rgb(248,196,48)" fg:x="996" fg:w="1"/><text x="79.4863%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.2363%" y="421" width="0.0796%" height="15" fill="rgb(251,206,33)" fg:x="996" fg:w="1"/><text x="79.4863%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.2363%" y="485" width="0.1591%" height="15" fill="rgb(232,141,28)" fg:x="996" fg:w="2"/><text x="79.4863%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3158%" y="469" width="0.0796%" height="15" fill="rgb(209,167,14)" fg:x="997" fg:w="1"/><text x="79.5658%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3158%" y="453" width="0.0796%" height="15" fill="rgb(225,11,50)" fg:x="997" fg:w="1"/><text x="79.5658%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.3158%" y="437" width="0.0796%" height="15" fill="rgb(209,50,20)" fg:x="997" fg:w="1"/><text x="79.5658%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.3158%" y="421" width="0.0796%" height="15" fill="rgb(212,17,46)" fg:x="997" fg:w="1"/><text x="79.5658%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.3158%" y="405" width="0.0796%" height="15" fill="rgb(216,101,39)" fg:x="997" fg:w="1"/><text x="79.5658%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.3158%" y="389" width="0.0796%" height="15" fill="rgb(212,228,48)" fg:x="997" fg:w="1"/><text x="79.5658%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.3158%" y="373" width="0.0796%" height="15" fill="rgb(250,6,50)" fg:x="997" fg:w="1"/><text x="79.5658%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.3158%" y="357" width="0.0796%" height="15" fill="rgb(250,160,48)" fg:x="997" fg:w="1"/><text x="79.5658%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.3158%" y="341" width="0.0796%" height="15" fill="rgb(244,216,33)" fg:x="997" fg:w="1"/><text x="79.5658%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.3158%" y="325" width="0.0796%" height="15" fill="rgb(207,157,5)" fg:x="997" fg:w="1"/><text x="79.5658%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.3158%" y="309" width="0.0796%" height="15" fill="rgb(228,199,8)" fg:x="997" fg:w="1"/><text x="79.5658%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.3158%" y="293" width="0.0796%" height="15" fill="rgb(227,80,20)" fg:x="997" fg:w="1"/><text x="79.5658%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="79.2363%" y="501" width="0.2387%" height="15" fill="rgb(222,9,33)" fg:x="996" fg:w="3"/><text x="79.4863%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3954%" y="485" width="0.0796%" height="15" fill="rgb(239,44,28)" fg:x="998" fg:w="1"/><text x="79.6454%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3954%" y="469" width="0.0796%" height="15" fill="rgb(249,187,43)" fg:x="998" fg:w="1"/><text x="79.6454%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.3954%" y="453" width="0.0796%" height="15" fill="rgb(216,141,28)" fg:x="998" fg:w="1"/><text x="79.6454%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.3954%" y="437" width="0.0796%" height="15" fill="rgb(230,154,53)" fg:x="998" fg:w="1"/><text x="79.6454%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.3954%" y="421" width="0.0796%" height="15" fill="rgb(227,82,4)" fg:x="998" fg:w="1"/><text x="79.6454%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.3954%" y="405" width="0.0796%" height="15" fill="rgb(220,107,16)" fg:x="998" fg:w="1"/><text x="79.6454%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.3954%" y="389" width="0.0796%" height="15" fill="rgb(207,187,2)" fg:x="998" fg:w="1"/><text x="79.6454%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.3954%" y="373" width="0.0796%" height="15" fill="rgb(210,162,52)" fg:x="998" fg:w="1"/><text x="79.6454%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.3954%" y="357" width="0.0796%" height="15" fill="rgb(217,216,49)" fg:x="998" fg:w="1"/><text x="79.6454%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.3954%" y="341" width="0.0796%" height="15" fill="rgb(218,146,49)" fg:x="998" fg:w="1"/><text x="79.6454%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.3954%" y="325" width="0.0796%" height="15" fill="rgb(216,55,40)" fg:x="998" fg:w="1"/><text x="79.6454%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.4749%" y="373" width="0.0796%" height="15" fill="rgb(208,196,21)" fg:x="999" fg:w="1"/><text x="79.7249%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="79.4749%" y="501" width="0.1591%" height="15" fill="rgb(242,117,42)" fg:x="999" fg:w="2"/><text x="79.7249%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="79.4749%" y="485" width="0.1591%" height="15" fill="rgb(210,11,23)" fg:x="999" fg:w="2"/><text x="79.7249%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="79.4749%" y="469" width="0.1591%" height="15" fill="rgb(217,110,2)" fg:x="999" fg:w="2"/><text x="79.7249%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="79.4749%" y="453" width="0.1591%" height="15" fill="rgb(229,77,54)" fg:x="999" fg:w="2"/><text x="79.7249%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="79.4749%" y="437" width="0.1591%" height="15" fill="rgb(218,53,16)" fg:x="999" fg:w="2"/><text x="79.7249%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="79.4749%" y="421" width="0.1591%" height="15" fill="rgb(215,38,13)" fg:x="999" fg:w="2"/><text x="79.7249%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.4749%" y="405" width="0.1591%" height="15" fill="rgb(235,42,18)" fg:x="999" fg:w="2"/><text x="79.7249%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.4749%" y="389" width="0.1591%" height="15" fill="rgb(219,66,54)" fg:x="999" fg:w="2"/><text x="79.7249%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="79.5545%" y="373" width="0.0796%" height="15" fill="rgb(222,205,4)" fg:x="1000" fg:w="1"/><text x="79.8045%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="79.5545%" y="357" width="0.0796%" height="15" fill="rgb(227,213,46)" fg:x="1000" fg:w="1"/><text x="79.8045%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.7136%" y="437" width="0.0796%" height="15" fill="rgb(250,145,42)" fg:x="1002" fg:w="1"/><text x="79.9636%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.7136%" y="421" width="0.0796%" height="15" fill="rgb(219,15,2)" fg:x="1002" fg:w="1"/><text x="79.9636%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.7136%" y="405" width="0.0796%" height="15" fill="rgb(231,181,52)" fg:x="1002" fg:w="1"/><text x="79.9636%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.7136%" y="389" width="0.0796%" height="15" fill="rgb(235,1,42)" fg:x="1002" fg:w="1"/><text x="79.9636%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.7136%" y="373" width="0.0796%" height="15" fill="rgb(249,88,27)" fg:x="1002" fg:w="1"/><text x="79.9636%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.7136%" y="357" width="0.0796%" height="15" fill="rgb(235,145,16)" fg:x="1002" fg:w="1"/><text x="79.9636%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.7136%" y="341" width="0.0796%" height="15" fill="rgb(237,114,19)" fg:x="1002" fg:w="1"/><text x="79.9636%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="79.7136%" y="325" width="0.0796%" height="15" fill="rgb(238,51,50)" fg:x="1002" fg:w="1"/><text x="79.9636%" y="335.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (12 samples, 0.95%)</title><rect x="78.9181%" y="597" width="0.9547%" height="15" fill="rgb(205,194,25)" fg:x="992" fg:w="12"/><text x="79.1681%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (12 samples, 0.95%)</title><rect x="78.9181%" y="581" width="0.9547%" height="15" fill="rgb(215,203,17)" fg:x="992" fg:w="12"/><text x="79.1681%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (9 samples, 0.72%)</title><rect x="79.1567%" y="565" width="0.7160%" height="15" fill="rgb(233,112,49)" fg:x="995" fg:w="9"/><text x="79.4067%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.64%)</title><rect x="79.2363%" y="549" width="0.6364%" height="15" fill="rgb(241,130,26)" fg:x="996" fg:w="8"/><text x="79.4863%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.64%)</title><rect x="79.2363%" y="533" width="0.6364%" height="15" fill="rgb(252,223,19)" fg:x="996" fg:w="8"/><text x="79.4863%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="79.2363%" y="517" width="0.6364%" height="15" fill="rgb(211,95,25)" fg:x="996" fg:w="8"/><text x="79.4863%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="79.6340%" y="501" width="0.2387%" height="15" fill="rgb(251,182,27)" fg:x="1001" fg:w="3"/><text x="79.8840%" y="511.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="79.6340%" y="485" width="0.2387%" height="15" fill="rgb(238,24,4)" fg:x="1001" fg:w="3"/><text x="79.8840%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="79.6340%" y="469" width="0.2387%" height="15" fill="rgb(224,220,25)" fg:x="1001" fg:w="3"/><text x="79.8840%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="79.6340%" y="453" width="0.2387%" height="15" fill="rgb(239,133,26)" fg:x="1001" fg:w="3"/><text x="79.8840%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="79.7932%" y="437" width="0.0796%" height="15" fill="rgb(211,94,48)" fg:x="1003" fg:w="1"/><text x="80.0432%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.7932%" y="421" width="0.0796%" height="15" fill="rgb(239,87,6)" fg:x="1003" fg:w="1"/><text x="80.0432%" y="431.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="79.8727%" y="357" width="0.1591%" height="15" fill="rgb(227,62,0)" fg:x="1004" fg:w="2"/><text x="80.1227%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.9523%" y="341" width="0.0796%" height="15" fill="rgb(211,226,4)" fg:x="1005" fg:w="1"/><text x="80.2023%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.9523%" y="325" width="0.0796%" height="15" fill="rgb(253,38,52)" fg:x="1005" fg:w="1"/><text x="80.2023%" y="335.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (3 samples, 0.24%)</title><rect x="79.8727%" y="405" width="0.2387%" height="15" fill="rgb(229,126,40)" fg:x="1004" fg:w="3"/><text x="80.1227%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (3 samples, 0.24%)</title><rect x="79.8727%" y="389" width="0.2387%" height="15" fill="rgb(229,165,44)" fg:x="1004" fg:w="3"/><text x="80.1227%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="79.8727%" y="373" width="0.2387%" height="15" fill="rgb(247,95,47)" fg:x="1004" fg:w="3"/><text x="80.1227%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="80.0318%" y="357" width="0.0796%" height="15" fill="rgb(216,140,30)" fg:x="1006" fg:w="1"/><text x="80.2818%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0318%" y="341" width="0.0796%" height="15" fill="rgb(246,214,8)" fg:x="1006" fg:w="1"/><text x="80.2818%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.0318%" y="325" width="0.0796%" height="15" fill="rgb(227,224,15)" fg:x="1006" fg:w="1"/><text x="80.2818%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.0318%" y="309" width="0.0796%" height="15" fill="rgb(233,175,4)" fg:x="1006" fg:w="1"/><text x="80.2818%" y="319.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (4 samples, 0.32%)</title><rect x="79.8727%" y="421" width="0.3182%" height="15" fill="rgb(221,66,45)" fg:x="1004" fg:w="4"/><text x="80.1227%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="80.1114%" y="405" width="0.0796%" height="15" fill="rgb(221,178,18)" fg:x="1007" fg:w="1"/><text x="80.3614%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.1909%" y="389" width="0.0796%" height="15" fill="rgb(213,81,29)" fg:x="1008" fg:w="1"/><text x="80.4409%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="80.1909%" y="373" width="0.0796%" height="15" fill="rgb(220,89,49)" fg:x="1008" fg:w="1"/><text x="80.4409%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.1909%" y="357" width="0.0796%" height="15" fill="rgb(227,60,33)" fg:x="1008" fg:w="1"/><text x="80.4409%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="80.1909%" y="341" width="0.0796%" height="15" fill="rgb(205,113,12)" fg:x="1008" fg:w="1"/><text x="80.4409%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.2705%" y="357" width="0.0796%" height="15" fill="rgb(211,32,1)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.2705%" y="341" width="0.0796%" height="15" fill="rgb(246,2,12)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.2705%" y="325" width="0.0796%" height="15" fill="rgb(243,37,27)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.2705%" y="309" width="0.0796%" height="15" fill="rgb(248,211,31)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.2705%" y="293" width="0.0796%" height="15" fill="rgb(242,146,47)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.2705%" y="277" width="0.0796%" height="15" fill="rgb(206,70,20)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.2705%" y="261" width="0.0796%" height="15" fill="rgb(215,10,51)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.2705%" y="245" width="0.0796%" height="15" fill="rgb(243,178,53)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.2705%" y="229" width="0.0796%" height="15" fill="rgb(233,221,20)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.2705%" y="213" width="0.0796%" height="15" fill="rgb(218,95,35)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.2705%" y="197" width="0.0796%" height="15" fill="rgb(229,13,5)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.2705%" y="181" width="0.0796%" height="15" fill="rgb(252,164,30)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.2705%" y="165" width="0.0796%" height="15" fill="rgb(232,68,36)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.2705%" y="149" width="0.0796%" height="15" fill="rgb(219,59,54)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.2705%" y="133" width="0.0796%" height="15" fill="rgb(250,92,33)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="143.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="80.2705%" y="389" width="0.1591%" height="15" fill="rgb(229,162,54)" fg:x="1009" fg:w="2"/><text x="80.5205%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="80.2705%" y="373" width="0.1591%" height="15" fill="rgb(244,114,52)" fg:x="1009" fg:w="2"/><text x="80.5205%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.3500%" y="357" width="0.0796%" height="15" fill="rgb(212,211,43)" fg:x="1010" fg:w="1"/><text x="80.6000%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.3500%" y="341" width="0.0796%" height="15" fill="rgb(226,147,8)" fg:x="1010" fg:w="1"/><text x="80.6000%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.3500%" y="325" width="0.0796%" height="15" fill="rgb(226,23,13)" fg:x="1010" fg:w="1"/><text x="80.6000%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.3500%" y="309" width="0.0796%" height="15" fill="rgb(240,63,4)" fg:x="1010" fg:w="1"/><text x="80.6000%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3500%" y="293" width="0.0796%" height="15" fill="rgb(221,1,32)" fg:x="1010" fg:w="1"/><text x="80.6000%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.3500%" y="277" width="0.0796%" height="15" fill="rgb(242,117,10)" fg:x="1010" fg:w="1"/><text x="80.6000%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="80.3500%" y="261" width="0.0796%" height="15" fill="rgb(249,172,44)" fg:x="1010" fg:w="1"/><text x="80.6000%" y="271.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="80.4296%" y="389" width="0.0796%" height="15" fill="rgb(244,46,45)" fg:x="1011" fg:w="1"/><text x="80.6796%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="80.4296%" y="373" width="0.0796%" height="15" fill="rgb(206,43,17)" fg:x="1011" fg:w="1"/><text x="80.6796%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="80.4296%" y="357" width="0.0796%" height="15" fill="rgb(239,218,39)" fg:x="1011" fg:w="1"/><text x="80.6796%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="80.4296%" y="341" width="0.0796%" height="15" fill="rgb(208,169,54)" fg:x="1011" fg:w="1"/><text x="80.6796%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.4296%" y="325" width="0.0796%" height="15" fill="rgb(247,25,42)" fg:x="1011" fg:w="1"/><text x="80.6796%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.4296%" y="309" width="0.0796%" height="15" fill="rgb(226,23,31)" fg:x="1011" fg:w="1"/><text x="80.6796%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.5091%" y="389" width="0.0796%" height="15" fill="rgb(247,16,28)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.5091%" y="373" width="0.0796%" height="15" fill="rgb(231,147,38)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.5091%" y="357" width="0.0796%" height="15" fill="rgb(253,81,48)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.5091%" y="341" width="0.0796%" height="15" fill="rgb(249,222,43)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.5091%" y="325" width="0.0796%" height="15" fill="rgb(221,3,27)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.5091%" y="309" width="0.0796%" height="15" fill="rgb(228,180,5)" fg:x="1012" fg:w="1"/><text x="80.7591%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.5887%" y="357" width="0.0796%" height="15" fill="rgb(227,131,42)" fg:x="1013" fg:w="1"/><text x="80.8387%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.5887%" y="341" width="0.0796%" height="15" fill="rgb(212,3,39)" fg:x="1013" fg:w="1"/><text x="80.8387%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.6683%" y="357" width="0.0796%" height="15" fill="rgb(226,45,5)" fg:x="1014" fg:w="1"/><text x="80.9183%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.56%)</title><rect x="80.5887%" y="373" width="0.5569%" height="15" fill="rgb(215,167,45)" fg:x="1013" fg:w="7"/><text x="80.8387%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="80.7478%" y="357" width="0.3978%" height="15" fill="rgb(250,218,53)" fg:x="1015" fg:w="5"/><text x="80.9978%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="80.7478%" y="341" width="0.3978%" height="15" fill="rgb(207,140,0)" fg:x="1015" fg:w="5"/><text x="80.9978%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="80.9069%" y="325" width="0.2387%" height="15" fill="rgb(238,133,51)" fg:x="1017" fg:w="3"/><text x="81.1569%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="80.9069%" y="309" width="0.2387%" height="15" fill="rgb(218,203,53)" fg:x="1017" fg:w="3"/><text x="81.1569%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="80.9069%" y="293" width="0.2387%" height="15" fill="rgb(226,184,25)" fg:x="1017" fg:w="3"/><text x="81.1569%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="80.9069%" y="277" width="0.2387%" height="15" fill="rgb(231,121,21)" fg:x="1017" fg:w="3"/><text x="81.1569%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (8 samples, 0.64%)</title><rect x="80.5887%" y="389" width="0.6364%" height="15" fill="rgb(251,14,34)" fg:x="1013" fg:w="8"/><text x="80.8387%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.1456%" y="373" width="0.0796%" height="15" fill="rgb(249,193,11)" fg:x="1020" fg:w="1"/><text x="81.3956%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="81.2251%" y="341" width="0.0796%" height="15" fill="rgb(220,172,37)" fg:x="1021" fg:w="1"/><text x="81.4751%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="81.2251%" y="325" width="0.0796%" height="15" fill="rgb(231,229,43)" fg:x="1021" fg:w="1"/><text x="81.4751%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="81.2251%" y="309" width="0.0796%" height="15" fill="rgb(250,161,5)" fg:x="1021" fg:w="1"/><text x="81.4751%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="81.2251%" y="293" width="0.0796%" height="15" fill="rgb(218,225,18)" fg:x="1021" fg:w="1"/><text x="81.4751%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.2251%" y="277" width="0.0796%" height="15" fill="rgb(245,45,42)" fg:x="1021" fg:w="1"/><text x="81.4751%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.2251%" y="261" width="0.0796%" height="15" fill="rgb(211,115,1)" fg:x="1021" fg:w="1"/><text x="81.4751%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="81.2251%" y="245" width="0.0796%" height="15" fill="rgb(248,133,52)" fg:x="1021" fg:w="1"/><text x="81.4751%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="81.2251%" y="229" width="0.0796%" height="15" fill="rgb(238,100,21)" fg:x="1021" fg:w="1"/><text x="81.4751%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="81.2251%" y="213" width="0.0796%" height="15" fill="rgb(247,144,11)" fg:x="1021" fg:w="1"/><text x="81.4751%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="81.2251%" y="197" width="0.0796%" height="15" fill="rgb(206,164,16)" fg:x="1021" fg:w="1"/><text x="81.4751%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="81.2251%" y="181" width="0.0796%" height="15" fill="rgb(222,34,3)" fg:x="1021" fg:w="1"/><text x="81.4751%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.3047%" y="309" width="0.0796%" height="15" fill="rgb(248,82,4)" fg:x="1022" fg:w="1"/><text x="81.5547%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.3047%" y="293" width="0.0796%" height="15" fill="rgb(228,81,46)" fg:x="1022" fg:w="1"/><text x="81.5547%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="81.3047%" y="277" width="0.0796%" height="15" fill="rgb(227,67,47)" fg:x="1022" fg:w="1"/><text x="81.5547%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="81.3842%" y="309" width="0.0796%" height="15" fill="rgb(215,93,53)" fg:x="1023" fg:w="1"/><text x="81.6342%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="81.3842%" y="293" width="0.0796%" height="15" fill="rgb(248,194,39)" fg:x="1023" fg:w="1"/><text x="81.6342%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.3842%" y="277" width="0.0796%" height="15" fill="rgb(215,5,19)" fg:x="1023" fg:w="1"/><text x="81.6342%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5434%" y="261" width="0.0796%" height="15" fill="rgb(226,215,51)" fg:x="1025" fg:w="1"/><text x="81.7934%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="81.6229%" y="261" width="0.0796%" height="15" fill="rgb(225,56,26)" fg:x="1026" fg:w="1"/><text x="81.8729%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.6229%" y="245" width="0.0796%" height="15" fill="rgb(222,75,29)" fg:x="1026" fg:w="1"/><text x="81.8729%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="81.6229%" y="229" width="0.0796%" height="15" fill="rgb(236,139,6)" fg:x="1026" fg:w="1"/><text x="81.8729%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.6229%" y="213" width="0.0796%" height="15" fill="rgb(223,137,36)" fg:x="1026" fg:w="1"/><text x="81.8729%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.72%)</title><rect x="81.7820%" y="245" width="0.7160%" height="15" fill="rgb(226,99,2)" fg:x="1028" fg:w="9"/><text x="82.0320%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.72%)</title><rect x="81.7820%" y="229" width="0.7160%" height="15" fill="rgb(206,133,23)" fg:x="1028" fg:w="9"/><text x="82.0320%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="82.4980%" y="245" width="0.0796%" height="15" fill="rgb(243,173,15)" fg:x="1037" fg:w="1"/><text x="82.7480%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="82.4980%" y="229" width="0.0796%" height="15" fill="rgb(228,69,28)" fg:x="1037" fg:w="1"/><text x="82.7480%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.6571%" y="181" width="0.0796%" height="15" fill="rgb(212,51,22)" fg:x="1039" fg:w="1"/><text x="82.9071%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="82.7367%" y="181" width="0.0796%" height="15" fill="rgb(227,113,0)" fg:x="1040" fg:w="1"/><text x="82.9867%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="82.8162%" y="181" width="0.0796%" height="15" fill="rgb(252,84,27)" fg:x="1041" fg:w="1"/><text x="83.0662%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="82.8162%" y="165" width="0.0796%" height="15" fill="rgb(223,145,39)" fg:x="1041" fg:w="1"/><text x="83.0662%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="82.8162%" y="149" width="0.0796%" height="15" fill="rgb(239,219,30)" fg:x="1041" fg:w="1"/><text x="83.0662%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (29 samples, 2.31%)</title><rect x="82.8958%" y="181" width="2.3071%" height="15" fill="rgb(224,196,39)" fg:x="1042" fg:w="29"/><text x="83.1458%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (29 samples, 2.31%)</title><rect x="82.8958%" y="165" width="2.3071%" height="15" fill="rgb(205,35,43)" fg:x="1042" fg:w="29"/><text x="83.1458%" y="175.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (28 samples, 2.23%)</title><rect x="82.9753%" y="149" width="2.2275%" height="15" fill="rgb(228,201,21)" fg:x="1043" fg:w="28"/><text x="83.2253%" y="159.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 2.70%)</title><rect x="82.5776%" y="229" width="2.7049%" height="15" fill="rgb(237,118,16)" fg:x="1038" fg:w="34"/><text x="82.8276%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (34 samples, 2.70%)</title><rect x="82.5776%" y="213" width="2.7049%" height="15" fill="rgb(241,17,19)" fg:x="1038" fg:w="34"/><text x="82.8276%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (34 samples, 2.70%)</title><rect x="82.5776%" y="197" width="2.7049%" height="15" fill="rgb(214,10,25)" fg:x="1038" fg:w="34"/><text x="82.8276%" y="207.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="85.2029%" y="181" width="0.0796%" height="15" fill="rgb(238,37,29)" fg:x="1071" fg:w="1"/><text x="85.4529%" y="191.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="85.4415%" y="165" width="0.0796%" height="15" fill="rgb(253,83,25)" fg:x="1074" fg:w="1"/><text x="85.6915%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.40%)</title><rect x="85.2824%" y="213" width="0.3978%" height="15" fill="rgb(234,192,12)" fg:x="1072" fg:w="5"/><text x="85.5324%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="85.4415%" y="197" width="0.2387%" height="15" fill="rgb(241,216,45)" fg:x="1074" fg:w="3"/><text x="85.6915%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="85.4415%" y="181" width="0.2387%" height="15" fill="rgb(242,22,33)" fg:x="1074" fg:w="3"/><text x="85.6915%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="85.5211%" y="165" width="0.1591%" height="15" fill="rgb(231,105,49)" fg:x="1075" fg:w="2"/><text x="85.7711%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="85.6802%" y="213" width="0.2387%" height="15" fill="rgb(218,204,15)" fg:x="1077" fg:w="3"/><text x="85.9302%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="85.9189%" y="213" width="0.1591%" height="15" fill="rgb(235,138,41)" fg:x="1080" fg:w="2"/><text x="86.1689%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (56 samples, 4.46%)</title><rect x="81.7025%" y="261" width="4.4551%" height="15" fill="rgb(246,0,9)" fg:x="1027" fg:w="56"/><text x="81.9525%" y="271.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (45 samples, 3.58%)</title><rect x="82.5776%" y="245" width="3.5800%" height="15" fill="rgb(210,74,4)" fg:x="1038" fg:w="45"/><text x="82.8276%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="85.2824%" y="229" width="0.8751%" height="15" fill="rgb(250,60,41)" fg:x="1072" fg:w="11"/><text x="85.5324%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="86.0780%" y="213" width="0.0796%" height="15" fill="rgb(220,115,12)" fg:x="1082" fg:w="1"/><text x="86.3280%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.0780%" y="197" width="0.0796%" height="15" fill="rgb(237,100,13)" fg:x="1082" fg:w="1"/><text x="86.3280%" y="207.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="86.1575%" y="261" width="0.0796%" height="15" fill="rgb(213,55,26)" fg:x="1083" fg:w="1"/><text x="86.4075%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="86.1575%" y="245" width="0.0796%" height="15" fill="rgb(216,17,4)" fg:x="1083" fg:w="1"/><text x="86.4075%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="86.1575%" y="229" width="0.0796%" height="15" fill="rgb(220,153,47)" fg:x="1083" fg:w="1"/><text x="86.4075%" y="239.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="86.1575%" y="213" width="0.0796%" height="15" fill="rgb(215,131,9)" fg:x="1083" fg:w="1"/><text x="86.4075%" y="223.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="86.1575%" y="197" width="0.0796%" height="15" fill="rgb(233,46,42)" fg:x="1083" fg:w="1"/><text x="86.4075%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="86.2371%" y="229" width="0.0796%" height="15" fill="rgb(226,86,7)" fg:x="1084" fg:w="1"/><text x="86.4871%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="86.2371%" y="261" width="0.2387%" height="15" fill="rgb(239,226,21)" fg:x="1084" fg:w="3"/><text x="86.4871%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="86.2371%" y="245" width="0.2387%" height="15" fill="rgb(244,137,22)" fg:x="1084" fg:w="3"/><text x="86.4871%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="86.3166%" y="229" width="0.1591%" height="15" fill="rgb(211,139,35)" fg:x="1085" fg:w="2"/><text x="86.5666%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.3962%" y="213" width="0.0796%" height="15" fill="rgb(214,62,50)" fg:x="1086" fg:w="1"/><text x="86.6462%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="86.4757%" y="229" width="0.0796%" height="15" fill="rgb(212,113,44)" fg:x="1087" fg:w="1"/><text x="86.7257%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="86.4757%" y="213" width="0.0796%" height="15" fill="rgb(226,150,43)" fg:x="1087" fg:w="1"/><text x="86.7257%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.4757%" y="197" width="0.0796%" height="15" fill="rgb(250,71,37)" fg:x="1087" fg:w="1"/><text x="86.7257%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.4757%" y="181" width="0.0796%" height="15" fill="rgb(219,76,19)" fg:x="1087" fg:w="1"/><text x="86.7257%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.4757%" y="165" width="0.0796%" height="15" fill="rgb(250,39,11)" fg:x="1087" fg:w="1"/><text x="86.7257%" y="175.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (65 samples, 5.17%)</title><rect x="81.4638%" y="293" width="5.1710%" height="15" fill="rgb(230,64,31)" fg:x="1024" fg:w="65"/><text x="81.7138%" y="303.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (65 samples, 5.17%)</title><rect x="81.4638%" y="277" width="5.1710%" height="15" fill="rgb(208,222,23)" fg:x="1024" fg:w="65"/><text x="81.7138%" y="287.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="86.4757%" y="261" width="0.1591%" height="15" fill="rgb(227,125,18)" fg:x="1087" fg:w="2"/><text x="86.7257%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="86.4757%" y="245" width="0.1591%" height="15" fill="rgb(234,210,9)" fg:x="1087" fg:w="2"/><text x="86.7257%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.5553%" y="229" width="0.0796%" height="15" fill="rgb(217,127,24)" fg:x="1088" fg:w="1"/><text x="86.8053%" y="239.50"></text></g><g><title>regex::regex::string::Regex::new (66 samples, 5.25%)</title><rect x="81.4638%" y="309" width="5.2506%" height="15" fill="rgb(239,141,48)" fg:x="1024" fg:w="66"/><text x="81.7138%" y="319.50">regex:..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="86.6348%" y="293" width="0.0796%" height="15" fill="rgb(227,109,8)" fg:x="1089" fg:w="1"/><text x="86.8848%" y="303.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="86.6348%" y="277" width="0.0796%" height="15" fill="rgb(235,184,23)" fg:x="1089" fg:w="1"/><text x="86.8848%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="87.0326%" y="229" width="0.1591%" height="15" fill="rgb(227,226,48)" fg:x="1094" fg:w="2"/><text x="87.2826%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="87.1122%" y="213" width="0.0796%" height="15" fill="rgb(206,150,11)" fg:x="1095" fg:w="1"/><text x="87.3622%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="86.7144%" y="245" width="0.6364%" height="15" fill="rgb(254,2,33)" fg:x="1090" fg:w="8"/><text x="86.9644%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="87.1917%" y="229" width="0.1591%" height="15" fill="rgb(243,160,20)" fg:x="1096" fg:w="2"/><text x="87.4417%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.80%)</title><rect x="86.7144%" y="261" width="0.7955%" height="15" fill="rgb(218,208,30)" fg:x="1090" fg:w="10"/><text x="86.9644%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="87.3508%" y="245" width="0.1591%" height="15" fill="rgb(224,120,49)" fg:x="1098" fg:w="2"/><text x="87.6008%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.4304%" y="229" width="0.0796%" height="15" fill="rgb(246,12,2)" fg:x="1099" fg:w="1"/><text x="87.6804%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.4304%" y="213" width="0.0796%" height="15" fill="rgb(236,117,3)" fg:x="1099" fg:w="1"/><text x="87.6804%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.4304%" y="197" width="0.0796%" height="15" fill="rgb(216,128,52)" fg:x="1099" fg:w="1"/><text x="87.6804%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (79 samples, 6.28%)</title><rect x="81.3047%" y="325" width="6.2848%" height="15" fill="rgb(246,145,19)" fg:x="1022" fg:w="79"/><text x="81.5547%" y="335.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.88%)</title><rect x="86.7144%" y="309" width="0.8751%" height="15" fill="rgb(222,11,46)" fg:x="1090" fg:w="11"/><text x="86.9644%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.88%)</title><rect x="86.7144%" y="293" width="0.8751%" height="15" fill="rgb(245,82,36)" fg:x="1090" fg:w="11"/><text x="86.9644%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.88%)</title><rect x="86.7144%" y="277" width="0.8751%" height="15" fill="rgb(250,73,51)" fg:x="1090" fg:w="11"/><text x="86.9644%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="87.5099%" y="261" width="0.0796%" height="15" fill="rgb(221,189,23)" fg:x="1100" fg:w="1"/><text x="87.7599%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="87.5099%" y="245" width="0.0796%" height="15" fill="rgb(210,33,7)" fg:x="1100" fg:w="1"/><text x="87.7599%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="87.5895%" y="309" width="0.0796%" height="15" fill="rgb(210,107,22)" fg:x="1101" fg:w="1"/><text x="87.8395%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="87.5895%" y="293" width="0.0796%" height="15" fill="rgb(222,116,37)" fg:x="1101" fg:w="1"/><text x="87.8395%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.5895%" y="277" width="0.0796%" height="15" fill="rgb(254,17,48)" fg:x="1101" fg:w="1"/><text x="87.8395%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="87.6691%" y="229" width="0.2387%" height="15" fill="rgb(224,36,32)" fg:x="1102" fg:w="3"/><text x="87.9191%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.8282%" y="213" width="0.0796%" height="15" fill="rgb(232,90,46)" fg:x="1104" fg:w="1"/><text x="88.0782%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="87.8282%" y="197" width="0.0796%" height="15" fill="rgb(241,66,40)" fg:x="1104" fg:w="1"/><text x="88.0782%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="87.6691%" y="245" width="0.3182%" height="15" fill="rgb(249,184,29)" fg:x="1102" fg:w="4"/><text x="87.9191%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="87.9077%" y="229" width="0.0796%" height="15" fill="rgb(231,181,1)" fg:x="1105" fg:w="1"/><text x="88.1577%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.9077%" y="213" width="0.0796%" height="15" fill="rgb(224,94,2)" fg:x="1105" fg:w="1"/><text x="88.1577%" y="223.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.40%)</title><rect x="87.6691%" y="309" width="0.3978%" height="15" fill="rgb(229,170,15)" fg:x="1102" fg:w="5"/><text x="87.9191%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="87.6691%" y="293" width="0.3978%" height="15" fill="rgb(240,127,35)" fg:x="1102" fg:w="5"/><text x="87.9191%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="87.6691%" y="277" width="0.3978%" height="15" fill="rgb(248,196,34)" fg:x="1102" fg:w="5"/><text x="87.9191%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="87.6691%" y="261" width="0.3978%" height="15" fill="rgb(236,137,7)" fg:x="1102" fg:w="5"/><text x="87.9191%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="87.9873%" y="245" width="0.0796%" height="15" fill="rgb(235,127,16)" fg:x="1106" fg:w="1"/><text x="88.2373%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="87.9873%" y="229" width="0.0796%" height="15" fill="rgb(250,192,54)" fg:x="1106" fg:w="1"/><text x="88.2373%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.9873%" y="213" width="0.0796%" height="15" fill="rgb(218,98,20)" fg:x="1106" fg:w="1"/><text x="88.2373%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.9873%" y="197" width="0.0796%" height="15" fill="rgb(230,176,47)" fg:x="1106" fg:w="1"/><text x="88.2373%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.9873%" y="181" width="0.0796%" height="15" fill="rgb(244,2,33)" fg:x="1106" fg:w="1"/><text x="88.2373%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="88.0668%" y="261" width="0.1591%" height="15" fill="rgb(231,100,17)" fg:x="1107" fg:w="2"/><text x="88.3168%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="88.0668%" y="245" width="0.1591%" height="15" fill="rgb(245,23,12)" fg:x="1107" fg:w="2"/><text x="88.3168%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="88.0668%" y="229" width="0.1591%" height="15" fill="rgb(249,55,22)" fg:x="1107" fg:w="2"/><text x="88.3168%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="88.0668%" y="213" width="0.1591%" height="15" fill="rgb(207,134,9)" fg:x="1107" fg:w="2"/><text x="88.3168%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="88.0668%" y="197" width="0.1591%" height="15" fill="rgb(218,134,0)" fg:x="1107" fg:w="2"/><text x="88.3168%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.2259%" y="245" width="0.0796%" height="15" fill="rgb(213,212,33)" fg:x="1109" fg:w="1"/><text x="88.4759%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.3055%" y="229" width="0.0796%" height="15" fill="rgb(252,106,18)" fg:x="1110" fg:w="1"/><text x="88.5555%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="88.3055%" y="245" width="0.5569%" height="15" fill="rgb(208,126,42)" fg:x="1110" fg:w="7"/><text x="88.5555%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="88.3850%" y="229" width="0.4773%" height="15" fill="rgb(246,175,29)" fg:x="1111" fg:w="6"/><text x="88.6350%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="88.8624%" y="245" width="0.0796%" height="15" fill="rgb(215,13,50)" fg:x="1117" fg:w="1"/><text x="89.1124%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="88.8624%" y="229" width="0.0796%" height="15" fill="rgb(216,172,15)" fg:x="1117" fg:w="1"/><text x="89.1124%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="88.9419%" y="245" width="0.0796%" height="15" fill="rgb(212,103,13)" fg:x="1118" fg:w="1"/><text x="89.1919%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="88.9419%" y="229" width="0.0796%" height="15" fill="rgb(231,171,36)" fg:x="1118" fg:w="1"/><text x="89.1919%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="89.2601%" y="213" width="0.0796%" height="15" fill="rgb(250,123,20)" fg:x="1122" fg:w="1"/><text x="89.5101%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="89.3397%" y="197" width="0.0796%" height="15" fill="rgb(212,53,50)" fg:x="1123" fg:w="1"/><text x="89.5897%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="89.3397%" y="181" width="0.0796%" height="15" fill="rgb(243,54,12)" fg:x="1123" fg:w="1"/><text x="89.5897%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (6 samples, 0.48%)</title><rect x="89.0215%" y="245" width="0.4773%" height="15" fill="rgb(234,101,34)" fg:x="1119" fg:w="6"/><text x="89.2715%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="89.1010%" y="229" width="0.3978%" height="15" fill="rgb(254,67,22)" fg:x="1120" fg:w="5"/><text x="89.3510%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="89.3397%" y="213" width="0.1591%" height="15" fill="rgb(250,35,47)" fg:x="1123" fg:w="2"/><text x="89.5897%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="89.4193%" y="197" width="0.0796%" height="15" fill="rgb(226,126,38)" fg:x="1124" fg:w="1"/><text x="89.6693%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="89.8966%" y="133" width="0.1591%" height="15" fill="rgb(216,138,53)" fg:x="1130" fg:w="2"/><text x="90.1466%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.0557%" y="133" width="0.0796%" height="15" fill="rgb(246,199,43)" fg:x="1132" fg:w="1"/><text x="90.3057%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.1352%" y="133" width="0.0796%" height="15" fill="rgb(232,125,11)" fg:x="1133" fg:w="1"/><text x="90.3852%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="90.2148%" y="133" width="0.0796%" height="15" fill="rgb(218,219,45)" fg:x="1134" fg:w="1"/><text x="90.4648%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="90.3739%" y="69" width="0.0796%" height="15" fill="rgb(216,102,54)" fg:x="1136" fg:w="1"/><text x="90.6239%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="90.3739%" y="53" width="0.0796%" height="15" fill="rgb(250,228,7)" fg:x="1136" fg:w="1"/><text x="90.6239%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="90.3739%" y="101" width="0.3182%" height="15" fill="rgb(226,125,25)" fg:x="1136" fg:w="4"/><text x="90.6239%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="90.3739%" y="85" width="0.3182%" height="15" fill="rgb(224,165,27)" fg:x="1136" fg:w="4"/><text x="90.6239%" y="95.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="90.4535%" y="69" width="0.2387%" height="15" fill="rgb(233,86,3)" fg:x="1137" fg:w="3"/><text x="90.7035%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.7717%" y="85" width="0.0796%" height="15" fill="rgb(228,116,20)" fg:x="1141" fg:w="1"/><text x="91.0217%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9 samples, 0.72%)</title><rect x="90.2944%" y="133" width="0.7160%" height="15" fill="rgb(209,192,17)" fg:x="1135" fg:w="9"/><text x="90.5444%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.64%)</title><rect x="90.3739%" y="117" width="0.6364%" height="15" fill="rgb(224,88,34)" fg:x="1136" fg:w="8"/><text x="90.6239%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="90.6921%" y="101" width="0.3182%" height="15" fill="rgb(233,38,6)" fg:x="1140" fg:w="4"/><text x="90.9421%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="90.8512%" y="85" width="0.1591%" height="15" fill="rgb(212,59,30)" fg:x="1142" fg:w="2"/><text x="91.1012%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.9308%" y="69" width="0.0796%" height="15" fill="rgb(213,80,3)" fg:x="1143" fg:w="1"/><text x="91.1808%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.9308%" y="53" width="0.0796%" height="15" fill="rgb(251,178,7)" fg:x="1143" fg:w="1"/><text x="91.1808%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.9308%" y="37" width="0.0796%" height="15" fill="rgb(213,154,26)" fg:x="1143" fg:w="1"/><text x="91.1808%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="91.0103%" y="133" width="0.0796%" height="15" fill="rgb(238,165,49)" fg:x="1144" fg:w="1"/><text x="91.2603%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="91.0103%" y="117" width="0.0796%" height="15" fill="rgb(248,91,46)" fg:x="1144" fg:w="1"/><text x="91.2603%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (31 samples, 2.47%)</title><rect x="91.0899%" y="133" width="2.4662%" height="15" fill="rgb(244,21,52)" fg:x="1145" fg:w="31"/><text x="91.3399%" y="143.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (31 samples, 2.47%)</title><rect x="91.0899%" y="117" width="2.4662%" height="15" fill="rgb(247,122,20)" fg:x="1145" fg:w="31"/><text x="91.3399%" y="127.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (31 samples, 2.47%)</title><rect x="91.0899%" y="101" width="2.4662%" height="15" fill="rgb(218,27,9)" fg:x="1145" fg:w="31"/><text x="91.3399%" y="111.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 4.14%)</title><rect x="89.4988%" y="229" width="4.1368%" height="15" fill="rgb(246,7,6)" fg:x="1125" fg:w="52"/><text x="89.7488%" y="239.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (52 samples, 4.14%)</title><rect x="89.4988%" y="213" width="4.1368%" height="15" fill="rgb(227,135,54)" fg:x="1125" fg:w="52"/><text x="89.7488%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (52 samples, 4.14%)</title><rect x="89.4988%" y="197" width="4.1368%" height="15" fill="rgb(247,14,11)" fg:x="1125" fg:w="52"/><text x="89.7488%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (51 samples, 4.06%)</title><rect x="89.5784%" y="181" width="4.0573%" height="15" fill="rgb(206,149,34)" fg:x="1126" fg:w="51"/><text x="89.8284%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (51 samples, 4.06%)</title><rect x="89.5784%" y="165" width="4.0573%" height="15" fill="rgb(227,228,4)" fg:x="1126" fg:w="51"/><text x="89.8284%" y="175.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (51 samples, 4.06%)</title><rect x="89.5784%" y="149" width="4.0573%" height="15" fill="rgb(238,218,28)" fg:x="1126" fg:w="51"/><text x="89.8284%" y="159.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="93.5561%" y="133" width="0.0796%" height="15" fill="rgb(252,86,40)" fg:x="1176" fg:w="1"/><text x="93.8061%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="93.7152%" y="213" width="0.1591%" height="15" fill="rgb(251,225,11)" fg:x="1178" fg:w="2"/><text x="93.9652%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (73 samples, 5.81%)</title><rect x="88.2259%" y="261" width="5.8075%" height="15" fill="rgb(206,46,49)" fg:x="1109" fg:w="73"/><text x="88.4759%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (57 samples, 4.53%)</title><rect x="89.4988%" y="245" width="4.5346%" height="15" fill="rgb(245,128,24)" fg:x="1125" fg:w="57"/><text x="89.7488%" y="255.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="93.6356%" y="229" width="0.3978%" height="15" fill="rgb(219,177,34)" fg:x="1177" fg:w="5"/><text x="93.8856%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="93.8743%" y="213" width="0.1591%" height="15" fill="rgb(218,60,48)" fg:x="1180" fg:w="2"/><text x="94.1243%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="94.0334%" y="261" width="0.0796%" height="15" fill="rgb(221,11,5)" fg:x="1182" fg:w="1"/><text x="94.2834%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="94.0334%" y="245" width="0.0796%" height="15" fill="rgb(220,148,13)" fg:x="1182" fg:w="1"/><text x="94.2834%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="94.0334%" y="229" width="0.0796%" height="15" fill="rgb(210,16,3)" fg:x="1182" fg:w="1"/><text x="94.2834%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="94.0334%" y="213" width="0.0796%" height="15" fill="rgb(236,80,2)" fg:x="1182" fg:w="1"/><text x="94.2834%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.0334%" y="197" width="0.0796%" height="15" fill="rgb(239,129,19)" fg:x="1182" fg:w="1"/><text x="94.2834%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.0334%" y="181" width="0.0796%" height="15" fill="rgb(220,106,35)" fg:x="1182" fg:w="1"/><text x="94.2834%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.0334%" y="165" width="0.0796%" height="15" fill="rgb(252,139,45)" fg:x="1182" fg:w="1"/><text x="94.2834%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="94.1130%" y="229" width="0.1591%" height="15" fill="rgb(229,8,36)" fg:x="1183" fg:w="2"/><text x="94.3630%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="94.1130%" y="213" width="0.1591%" height="15" fill="rgb(230,126,33)" fg:x="1183" fg:w="2"/><text x="94.3630%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.1925%" y="197" width="0.0796%" height="15" fill="rgb(239,140,21)" fg:x="1184" fg:w="1"/><text x="94.4425%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.1925%" y="181" width="0.0796%" height="15" fill="rgb(254,104,9)" fg:x="1184" fg:w="1"/><text x="94.4425%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.1925%" y="165" width="0.0796%" height="15" fill="rgb(239,52,14)" fg:x="1184" fg:w="1"/><text x="94.4425%" y="175.50"></text></g><g><title>indefinite::rules::number::Number::check (85 samples, 6.76%)</title><rect x="87.5895%" y="325" width="6.7621%" height="15" fill="rgb(208,227,44)" fg:x="1101" fg:w="85"/><text x="87.8395%" y="335.50">indefinit..</text></g><g><title>regex::regex::string::Regex::new (79 samples, 6.28%)</title><rect x="88.0668%" y="309" width="6.2848%" height="15" fill="rgb(246,18,19)" fg:x="1107" fg:w="79"/><text x="88.3168%" y="319.50">regex::r..</text></g><g><title>regex::builders::string::RegexBuilder::build (79 samples, 6.28%)</title><rect x="88.0668%" y="293" width="6.2848%" height="15" fill="rgb(235,228,25)" fg:x="1107" fg:w="79"/><text x="88.3168%" y="303.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (79 samples, 6.28%)</title><rect x="88.0668%" y="277" width="6.2848%" height="15" fill="rgb(240,156,20)" fg:x="1107" fg:w="79"/><text x="88.3168%" y="287.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="94.1130%" y="261" width="0.2387%" height="15" fill="rgb(224,8,20)" fg:x="1183" fg:w="3"/><text x="94.3630%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="94.1130%" y="245" width="0.2387%" height="15" fill="rgb(214,12,52)" fg:x="1183" fg:w="3"/><text x="94.3630%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="94.2721%" y="229" width="0.0796%" height="15" fill="rgb(211,220,47)" fg:x="1185" fg:w="1"/><text x="94.5221%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="94.2721%" y="213" width="0.0796%" height="15" fill="rgb(250,173,5)" fg:x="1185" fg:w="1"/><text x="94.5221%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="94.3516%" y="293" width="0.0796%" height="15" fill="rgb(250,125,52)" fg:x="1186" fg:w="1"/><text x="94.6016%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="94.3516%" y="277" width="0.0796%" height="15" fill="rgb(209,133,18)" fg:x="1186" fg:w="1"/><text x="94.6016%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="94.3516%" y="261" width="0.0796%" height="15" fill="rgb(216,173,22)" fg:x="1186" fg:w="1"/><text x="94.6016%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="94.3516%" y="245" width="0.0796%" height="15" fill="rgb(205,3,22)" fg:x="1186" fg:w="1"/><text x="94.6016%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="94.3516%" y="229" width="0.0796%" height="15" fill="rgb(248,22,20)" fg:x="1186" fg:w="1"/><text x="94.6016%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="94.3516%" y="213" width="0.0796%" height="15" fill="rgb(233,6,29)" fg:x="1186" fg:w="1"/><text x="94.6016%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.4312%" y="245" width="0.0796%" height="15" fill="rgb(240,22,54)" fg:x="1187" fg:w="1"/><text x="94.6812%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.4312%" y="229" width="0.0796%" height="15" fill="rgb(231,133,32)" fg:x="1187" fg:w="1"/><text x="94.6812%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="94.4312%" y="293" width="0.1591%" height="15" fill="rgb(248,193,4)" fg:x="1187" fg:w="2"/><text x="94.6812%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="94.4312%" y="277" width="0.1591%" height="15" fill="rgb(211,178,46)" fg:x="1187" fg:w="2"/><text x="94.6812%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="94.4312%" y="261" width="0.1591%" height="15" fill="rgb(224,5,42)" fg:x="1187" fg:w="2"/><text x="94.6812%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="94.5107%" y="245" width="0.0796%" height="15" fill="rgb(239,176,25)" fg:x="1188" fg:w="1"/><text x="94.7607%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.5107%" y="229" width="0.0796%" height="15" fill="rgb(245,187,50)" fg:x="1188" fg:w="1"/><text x="94.7607%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="94.5903%" y="245" width="0.0796%" height="15" fill="rgb(248,24,15)" fg:x="1189" fg:w="1"/><text x="94.8403%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="94.5903%" y="229" width="0.0796%" height="15" fill="rgb(205,166,13)" fg:x="1189" fg:w="1"/><text x="94.8403%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.6698%" y="245" width="0.0796%" height="15" fill="rgb(208,114,23)" fg:x="1190" fg:w="1"/><text x="94.9198%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="94.8290%" y="229" width="0.0796%" height="15" fill="rgb(239,127,18)" fg:x="1192" fg:w="1"/><text x="95.0790%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.32%)</title><rect x="94.7494%" y="245" width="0.3182%" height="15" fill="rgb(219,154,28)" fg:x="1191" fg:w="4"/><text x="94.9994%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="94.9085%" y="229" width="0.1591%" height="15" fill="rgb(225,157,23)" fg:x="1193" fg:w="2"/><text x="95.1585%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="94.9085%" y="213" width="0.1591%" height="15" fill="rgb(219,8,6)" fg:x="1193" fg:w="2"/><text x="95.1585%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="94.9085%" y="197" width="0.1591%" height="15" fill="rgb(212,47,6)" fg:x="1193" fg:w="2"/><text x="95.1585%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="94.9085%" y="181" width="0.1591%" height="15" fill="rgb(224,190,4)" fg:x="1193" fg:w="2"/><text x="95.1585%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.9881%" y="165" width="0.0796%" height="15" fill="rgb(239,183,29)" fg:x="1194" fg:w="1"/><text x="95.2381%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="94.9881%" y="149" width="0.0796%" height="15" fill="rgb(213,57,7)" fg:x="1194" fg:w="1"/><text x="95.2381%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.9881%" y="133" width="0.0796%" height="15" fill="rgb(216,148,1)" fg:x="1194" fg:w="1"/><text x="95.2381%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.9881%" y="117" width="0.0796%" height="15" fill="rgb(236,182,29)" fg:x="1194" fg:w="1"/><text x="95.2381%" y="127.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="95.0676%" y="213" width="0.0796%" height="15" fill="rgb(244,120,48)" fg:x="1195" fg:w="1"/><text x="95.3176%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (9 samples, 0.72%)</title><rect x="94.5903%" y="293" width="0.7160%" height="15" fill="rgb(206,71,34)" fg:x="1189" fg:w="9"/><text x="94.8403%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (9 samples, 0.72%)</title><rect x="94.5903%" y="277" width="0.7160%" height="15" fill="rgb(242,32,6)" fg:x="1189" fg:w="9"/><text x="94.8403%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (9 samples, 0.72%)</title><rect x="94.5903%" y="261" width="0.7160%" height="15" fill="rgb(241,35,3)" fg:x="1189" fg:w="9"/><text x="94.8403%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="95.0676%" y="245" width="0.2387%" height="15" fill="rgb(222,62,19)" fg:x="1195" fg:w="3"/><text x="95.3176%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="95.0676%" y="229" width="0.2387%" height="15" fill="rgb(223,110,41)" fg:x="1195" fg:w="3"/><text x="95.3176%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="95.1472%" y="213" width="0.1591%" height="15" fill="rgb(208,224,4)" fg:x="1196" fg:w="2"/><text x="95.3972%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="95.2267%" y="197" width="0.0796%" height="15" fill="rgb(241,137,19)" fg:x="1197" fg:w="1"/><text x="95.4767%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.2267%" y="181" width="0.0796%" height="15" fill="rgb(244,24,17)" fg:x="1197" fg:w="1"/><text x="95.4767%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.2267%" y="165" width="0.0796%" height="15" fill="rgb(245,178,49)" fg:x="1197" fg:w="1"/><text x="95.4767%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.2267%" y="149" width="0.0796%" height="15" fill="rgb(219,160,38)" fg:x="1197" fg:w="1"/><text x="95.4767%" y="159.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="95.3063%" y="245" width="0.3182%" height="15" fill="rgb(228,137,14)" fg:x="1198" fg:w="4"/><text x="95.5563%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="95.3063%" y="229" width="0.3182%" height="15" fill="rgb(237,134,11)" fg:x="1198" fg:w="4"/><text x="95.5563%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (195 samples, 15.51%)</title><rect x="80.1909%" y="405" width="15.5131%" height="15" fill="rgb(211,126,44)" fg:x="1008" fg:w="195"/><text x="80.4409%" y="415.50">&lt;&amp;kernel::model::EntityP..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (182 samples, 14.48%)</title><rect x="81.2251%" y="389" width="14.4789%" height="15" fill="rgb(226,171,33)" fg:x="1021" fg:w="182"/><text x="81.4751%" y="399.50">plugins_core::looking:..</text></g><g><title>indefinite::indefinite (182 samples, 14.48%)</title><rect x="81.2251%" y="373" width="14.4789%" height="15" fill="rgb(253,99,13)" fg:x="1021" fg:w="182"/><text x="81.4751%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (182 samples, 14.48%)</title><rect x="81.2251%" y="357" width="14.4789%" height="15" fill="rgb(244,48,7)" fg:x="1021" fg:w="182"/><text x="81.4751%" y="367.50">indefinite::methods::i..</text></g><g><title>indefinite::methods::apply_rules (181 samples, 14.40%)</title><rect x="81.3047%" y="341" width="14.3994%" height="15" fill="rgb(244,217,54)" fg:x="1022" fg:w="181"/><text x="81.5547%" y="351.50">indefinite::methods::a..</text></g><g><title>indefinite::rules::other::Other::run (17 samples, 1.35%)</title><rect x="94.3516%" y="325" width="1.3524%" height="15" fill="rgb(224,15,18)" fg:x="1186" fg:w="17"/><text x="94.6016%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (17 samples, 1.35%)</title><rect x="94.3516%" y="309" width="1.3524%" height="15" fill="rgb(244,99,12)" fg:x="1186" fg:w="17"/><text x="94.6016%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="95.3063%" y="293" width="0.3978%" height="15" fill="rgb(233,226,8)" fg:x="1198" fg:w="5"/><text x="95.5563%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="95.3063%" y="277" width="0.3978%" height="15" fill="rgb(229,211,3)" fg:x="1198" fg:w="5"/><text x="95.5563%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="95.3063%" y="261" width="0.3978%" height="15" fill="rgb(216,140,21)" fg:x="1198" fg:w="5"/><text x="95.5563%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="95.6245%" y="245" width="0.0796%" height="15" fill="rgb(234,122,30)" fg:x="1202" fg:w="1"/><text x="95.8745%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="95.6245%" y="229" width="0.0796%" height="15" fill="rgb(236,25,46)" fg:x="1202" fg:w="1"/><text x="95.8745%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.6245%" y="213" width="0.0796%" height="15" fill="rgb(217,52,54)" fg:x="1202" fg:w="1"/><text x="95.8745%" y="223.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="95.7041%" y="405" width="0.1591%" height="15" fill="rgb(222,29,26)" fg:x="1203" fg:w="2"/><text x="95.9541%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="95.7836%" y="389" width="0.0796%" height="15" fill="rgb(216,177,29)" fg:x="1204" fg:w="1"/><text x="96.0336%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="95.7836%" y="373" width="0.0796%" height="15" fill="rgb(247,136,51)" fg:x="1204" fg:w="1"/><text x="96.0336%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="95.7836%" y="357" width="0.0796%" height="15" fill="rgb(231,47,47)" fg:x="1204" fg:w="1"/><text x="96.0336%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="95.8632%" y="405" width="0.0796%" height="15" fill="rgb(211,192,36)" fg:x="1205" fg:w="1"/><text x="96.1132%" y="415.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="95.9427%" y="373" width="0.0796%" height="15" fill="rgb(229,156,32)" fg:x="1206" fg:w="1"/><text x="96.1927%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="95.9427%" y="357" width="0.0796%" height="15" fill="rgb(248,213,20)" fg:x="1206" fg:w="1"/><text x="96.1927%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="95.9427%" y="341" width="0.0796%" height="15" fill="rgb(217,64,7)" fg:x="1206" fg:w="1"/><text x="96.1927%" y="351.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (2 samples, 0.16%)</title><rect x="95.9427%" y="389" width="0.1591%" height="15" fill="rgb(232,142,8)" fg:x="1206" fg:w="2"/><text x="96.1927%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.0223%" y="373" width="0.0796%" height="15" fill="rgb(224,92,44)" fg:x="1207" fg:w="1"/><text x="96.2723%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.1018%" y="325" width="0.0796%" height="15" fill="rgb(214,169,17)" fg:x="1208" fg:w="1"/><text x="96.3518%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.1814%" y="245" width="0.0796%" height="15" fill="rgb(210,59,37)" fg:x="1209" fg:w="1"/><text x="96.4314%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.1814%" y="229" width="0.0796%" height="15" fill="rgb(214,116,48)" fg:x="1209" fg:w="1"/><text x="96.4314%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.1814%" y="213" width="0.0796%" height="15" fill="rgb(244,191,6)" fg:x="1209" fg:w="1"/><text x="96.4314%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.1814%" y="197" width="0.0796%" height="15" fill="rgb(241,50,52)" fg:x="1209" fg:w="1"/><text x="96.4314%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.1814%" y="181" width="0.0796%" height="15" fill="rgb(236,75,39)" fg:x="1209" fg:w="1"/><text x="96.4314%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="96.1814%" y="165" width="0.0796%" height="15" fill="rgb(236,99,0)" fg:x="1209" fg:w="1"/><text x="96.4314%" y="175.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="96.1814%" y="149" width="0.0796%" height="15" fill="rgb(207,202,15)" fg:x="1209" fg:w="1"/><text x="96.4314%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.40%)</title><rect x="95.9427%" y="405" width="0.3978%" height="15" fill="rgb(233,207,14)" fg:x="1206" fg:w="5"/><text x="96.1927%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="96.1018%" y="389" width="0.2387%" height="15" fill="rgb(226,27,51)" fg:x="1208" fg:w="3"/><text x="96.3518%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="96.1018%" y="373" width="0.2387%" height="15" fill="rgb(206,104,42)" fg:x="1208" fg:w="3"/><text x="96.3518%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="96.1018%" y="357" width="0.2387%" height="15" fill="rgb(212,225,4)" fg:x="1208" fg:w="3"/><text x="96.3518%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="96.1018%" y="341" width="0.2387%" height="15" fill="rgb(233,96,42)" fg:x="1208" fg:w="3"/><text x="96.3518%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="96.1814%" y="325" width="0.1591%" height="15" fill="rgb(229,21,32)" fg:x="1209" fg:w="2"/><text x="96.4314%" y="335.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="96.1814%" y="309" width="0.1591%" height="15" fill="rgb(226,216,24)" fg:x="1209" fg:w="2"/><text x="96.4314%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="96.1814%" y="293" width="0.1591%" height="15" fill="rgb(221,163,17)" fg:x="1209" fg:w="2"/><text x="96.4314%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="96.1814%" y="277" width="0.1591%" height="15" fill="rgb(216,216,42)" fg:x="1209" fg:w="2"/><text x="96.4314%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="96.1814%" y="261" width="0.1591%" height="15" fill="rgb(240,118,7)" fg:x="1209" fg:w="2"/><text x="96.4314%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.2609%" y="245" width="0.0796%" height="15" fill="rgb(221,67,37)" fg:x="1210" fg:w="1"/><text x="96.5109%" y="255.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (208 samples, 16.55%)</title><rect x="79.8727%" y="437" width="16.5473%" height="15" fill="rgb(241,32,44)" fg:x="1004" fg:w="208"/><text x="80.1227%" y="447.50">&lt;plugins_core::looking::ac..</text></g><g><title>plugins_core::looking::model::new_area_observation (204 samples, 16.23%)</title><rect x="80.1909%" y="421" width="16.2291%" height="15" fill="rgb(235,204,43)" fg:x="1008" fg:w="204"/><text x="80.4409%" y="431.50">plugins_core::looking::mo..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="96.3405%" y="405" width="0.0796%" height="15" fill="rgb(213,116,10)" fg:x="1211" fg:w="1"/><text x="96.5905%" y="415.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (209 samples, 16.63%)</title><rect x="79.8727%" y="565" width="16.6269%" height="15" fill="rgb(239,15,48)" fg:x="1004" fg:w="209"/><text x="80.1227%" y="575.50">kernel::plugins::mw::Middl..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (209 samples, 16.63%)</title><rect x="79.8727%" y="549" width="16.6269%" height="15" fill="rgb(207,123,36)" fg:x="1004" fg:w="209"/><text x="80.1227%" y="559.50">&lt;plugins_dynlib::DynamicMi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (209 samples, 16.63%)</title><rect x="79.8727%" y="533" width="16.6269%" height="15" fill="rgb(209,103,30)" fg:x="1004" fg:w="209"/><text x="80.1227%" y="543.50">kernel::plugins::mw::Middl..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (209 samples, 16.63%)</title><rect x="79.8727%" y="517" width="16.6269%" height="15" fill="rgb(238,100,19)" fg:x="1004" fg:w="209"/><text x="80.1227%" y="527.50">core::ops::function::FnOnc..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (209 samples, 16.63%)</title><rect x="79.8727%" y="501" width="16.6269%" height="15" fill="rgb(244,30,14)" fg:x="1004" fg:w="209"/><text x="80.1227%" y="511.50">kernel::plugins::mw::Middl..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (209 samples, 16.63%)</title><rect x="79.8727%" y="485" width="16.6269%" height="15" fill="rgb(249,174,6)" fg:x="1004" fg:w="209"/><text x="80.1227%" y="495.50">core::ops::function::FnOnc..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (209 samples, 16.63%)</title><rect x="79.8727%" y="469" width="16.6269%" height="15" fill="rgb(235,213,41)" fg:x="1004" fg:w="209"/><text x="80.1227%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (209 samples, 16.63%)</title><rect x="79.8727%" y="453" width="16.6269%" height="15" fill="rgb(213,118,6)" fg:x="1004" fg:w="209"/><text x="80.1227%" y="463.50">&lt;engine::session::state::S..</text></g><g><title>kernel::surround::Surroundings::actor (1 samples, 0.08%)</title><rect x="96.4200%" y="437" width="0.0796%" height="15" fill="rgb(235,44,51)" fg:x="1212" fg:w="1"/><text x="96.6700%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.5792%" y="533" width="0.0796%" height="15" fill="rgb(217,9,53)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.5792%" y="517" width="0.0796%" height="15" fill="rgb(237,172,34)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.6587%" y="421" width="0.0796%" height="15" fill="rgb(206,206,11)" fg:x="1215" fg:w="1"/><text x="96.9087%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.6587%" y="405" width="0.0796%" height="15" fill="rgb(214,149,29)" fg:x="1215" fg:w="1"/><text x="96.9087%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.6587%" y="389" width="0.0796%" height="15" fill="rgb(208,123,3)" fg:x="1215" fg:w="1"/><text x="96.9087%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="96.6587%" y="453" width="0.1591%" height="15" fill="rgb(229,126,4)" fg:x="1215" fg:w="2"/><text x="96.9087%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="96.6587%" y="437" width="0.1591%" height="15" fill="rgb(222,92,36)" fg:x="1215" fg:w="2"/><text x="96.9087%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.7383%" y="421" width="0.0796%" height="15" fill="rgb(216,39,41)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.7383%" y="405" width="0.0796%" height="15" fill="rgb(253,127,28)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.7383%" y="389" width="0.0796%" height="15" fill="rgb(249,152,51)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.7383%" y="373" width="0.0796%" height="15" fill="rgb(209,123,42)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.7383%" y="357" width="0.0796%" height="15" fill="rgb(241,118,22)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.7383%" y="341" width="0.0796%" height="15" fill="rgb(208,25,7)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.7383%" y="325" width="0.0796%" height="15" fill="rgb(243,144,39)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.7383%" y="309" width="0.0796%" height="15" fill="rgb(250,50,5)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.7383%" y="293" width="0.0796%" height="15" fill="rgb(207,67,11)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.7383%" y="277" width="0.0796%" height="15" fill="rgb(245,204,40)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.7383%" y="261" width="0.0796%" height="15" fill="rgb(238,228,24)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.7383%" y="245" width="0.0796%" height="15" fill="rgb(217,116,22)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.8178%" y="373" width="0.0796%" height="15" fill="rgb(234,98,12)" fg:x="1217" fg:w="1"/><text x="97.0678%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="96.8178%" y="357" width="0.0796%" height="15" fill="rgb(242,170,50)" fg:x="1217" fg:w="1"/><text x="97.0678%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="96.8974%" y="357" width="0.0796%" height="15" fill="rgb(235,7,5)" fg:x="1218" fg:w="1"/><text x="97.1474%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.8974%" y="341" width="0.0796%" height="15" fill="rgb(241,114,28)" fg:x="1218" fg:w="1"/><text x="97.1474%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="96.8974%" y="325" width="0.0796%" height="15" fill="rgb(246,112,42)" fg:x="1218" fg:w="1"/><text x="97.1474%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="96.9769%" y="309" width="0.0796%" height="15" fill="rgb(248,228,14)" fg:x="1219" fg:w="1"/><text x="97.2269%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="96.9769%" y="293" width="0.0796%" height="15" fill="rgb(208,133,18)" fg:x="1219" fg:w="1"/><text x="97.2269%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.9769%" y="277" width="0.0796%" height="15" fill="rgb(207,35,49)" fg:x="1219" fg:w="1"/><text x="97.2269%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.9769%" y="261" width="0.0796%" height="15" fill="rgb(205,68,36)" fg:x="1219" fg:w="1"/><text x="97.2269%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="96.8178%" y="453" width="0.3182%" height="15" fill="rgb(245,62,40)" fg:x="1217" fg:w="4"/><text x="97.0678%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="96.8178%" y="437" width="0.3182%" height="15" fill="rgb(228,27,24)" fg:x="1217" fg:w="4"/><text x="97.0678%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="96.8178%" y="421" width="0.3182%" height="15" fill="rgb(253,19,12)" fg:x="1217" fg:w="4"/><text x="97.0678%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="96.8178%" y="405" width="0.3182%" height="15" fill="rgb(232,28,20)" fg:x="1217" fg:w="4"/><text x="97.0678%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="96.8178%" y="389" width="0.3182%" height="15" fill="rgb(218,35,51)" fg:x="1217" fg:w="4"/><text x="97.0678%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="96.8974%" y="373" width="0.2387%" height="15" fill="rgb(212,90,40)" fg:x="1218" fg:w="3"/><text x="97.1474%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.9769%" y="357" width="0.1591%" height="15" fill="rgb(220,172,12)" fg:x="1219" fg:w="2"/><text x="97.2269%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="96.9769%" y="341" width="0.1591%" height="15" fill="rgb(226,159,20)" fg:x="1219" fg:w="2"/><text x="97.2269%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="96.9769%" y="325" width="0.1591%" height="15" fill="rgb(234,205,16)" fg:x="1219" fg:w="2"/><text x="97.2269%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.0565%" y="309" width="0.0796%" height="15" fill="rgb(207,9,39)" fg:x="1220" fg:w="1"/><text x="97.3065%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.0565%" y="293" width="0.0796%" height="15" fill="rgb(249,143,15)" fg:x="1220" fg:w="1"/><text x="97.3065%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.0565%" y="277" width="0.0796%" height="15" fill="rgb(253,133,29)" fg:x="1220" fg:w="1"/><text x="97.3065%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.0565%" y="261" width="0.0796%" height="15" fill="rgb(221,187,0)" fg:x="1220" fg:w="1"/><text x="97.3065%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.0565%" y="245" width="0.0796%" height="15" fill="rgb(205,204,26)" fg:x="1220" fg:w="1"/><text x="97.3065%" y="255.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="97.1360%" y="453" width="0.0796%" height="15" fill="rgb(224,68,54)" fg:x="1221" fg:w="1"/><text x="97.3860%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.1360%" y="437" width="0.0796%" height="15" fill="rgb(209,67,4)" fg:x="1221" fg:w="1"/><text x="97.3860%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="97.1360%" y="421" width="0.0796%" height="15" fill="rgb(228,229,18)" fg:x="1221" fg:w="1"/><text x="97.3860%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.2156%" y="325" width="0.0796%" height="15" fill="rgb(231,89,13)" fg:x="1222" fg:w="1"/><text x="97.4656%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.2156%" y="389" width="0.1591%" height="15" fill="rgb(210,182,18)" fg:x="1222" fg:w="2"/><text x="97.4656%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.2156%" y="373" width="0.1591%" height="15" fill="rgb(240,105,2)" fg:x="1222" fg:w="2"/><text x="97.4656%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.2156%" y="357" width="0.1591%" height="15" fill="rgb(207,170,50)" fg:x="1222" fg:w="2"/><text x="97.4656%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.2156%" y="341" width="0.1591%" height="15" fill="rgb(232,133,24)" fg:x="1222" fg:w="2"/><text x="97.4656%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.2951%" y="325" width="0.0796%" height="15" fill="rgb(235,166,27)" fg:x="1223" fg:w="1"/><text x="97.5451%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="96.6587%" y="469" width="0.8751%" height="15" fill="rgb(209,19,13)" fg:x="1215" fg:w="11"/><text x="96.9087%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="97.2156%" y="453" width="0.3182%" height="15" fill="rgb(226,79,39)" fg:x="1222" fg:w="4"/><text x="97.4656%" y="463.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="97.2156%" y="437" width="0.3182%" height="15" fill="rgb(222,163,10)" fg:x="1222" fg:w="4"/><text x="97.4656%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="97.2156%" y="421" width="0.3182%" height="15" fill="rgb(214,44,19)" fg:x="1222" fg:w="4"/><text x="97.4656%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="97.2156%" y="405" width="0.3182%" height="15" fill="rgb(210,217,13)" fg:x="1222" fg:w="4"/><text x="97.4656%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="97.3747%" y="389" width="0.1591%" height="15" fill="rgb(237,61,54)" fg:x="1224" fg:w="2"/><text x="97.6247%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="97.3747%" y="373" width="0.1591%" height="15" fill="rgb(226,184,24)" fg:x="1224" fg:w="2"/><text x="97.6247%" y="383.50"></text></g><g><title>plugins_core::tools::contained_by (12 samples, 0.95%)</title><rect x="96.6587%" y="533" width="0.9547%" height="15" fill="rgb(223,226,4)" fg:x="1215" fg:w="12"/><text x="96.9087%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (12 samples, 0.95%)</title><rect x="96.6587%" y="517" width="0.9547%" height="15" fill="rgb(210,26,41)" fg:x="1215" fg:w="12"/><text x="96.9087%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (12 samples, 0.95%)</title><rect x="96.6587%" y="501" width="0.9547%" height="15" fill="rgb(220,221,6)" fg:x="1215" fg:w="12"/><text x="96.9087%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.95%)</title><rect x="96.6587%" y="485" width="0.9547%" height="15" fill="rgb(225,89,49)" fg:x="1215" fg:w="12"/><text x="96.9087%" y="495.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="97.5338%" y="469" width="0.0796%" height="15" fill="rgb(218,70,45)" fg:x="1226" fg:w="1"/><text x="97.7838%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.5338%" y="453" width="0.0796%" height="15" fill="rgb(238,166,21)" fg:x="1226" fg:w="1"/><text x="97.7838%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6134%" y="501" width="0.0796%" height="15" fill="rgb(224,141,44)" fg:x="1227" fg:w="1"/><text x="97.8634%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6134%" y="485" width="0.0796%" height="15" fill="rgb(230,12,49)" fg:x="1227" fg:w="1"/><text x="97.8634%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="97.6134%" y="517" width="0.2387%" height="15" fill="rgb(212,174,12)" fg:x="1227" fg:w="3"/><text x="97.8634%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.6929%" y="501" width="0.1591%" height="15" fill="rgb(246,67,9)" fg:x="1228" fg:w="2"/><text x="97.9429%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.6929%" y="485" width="0.1591%" height="15" fill="rgb(239,35,23)" fg:x="1228" fg:w="2"/><text x="97.9429%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.7725%" y="469" width="0.0796%" height="15" fill="rgb(211,167,0)" fg:x="1229" fg:w="1"/><text x="98.0225%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.7725%" y="453" width="0.0796%" height="15" fill="rgb(225,119,45)" fg:x="1229" fg:w="1"/><text x="98.0225%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.7725%" y="437" width="0.0796%" height="15" fill="rgb(210,162,6)" fg:x="1229" fg:w="1"/><text x="98.0225%" y="447.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="97.6134%" y="533" width="0.3182%" height="15" fill="rgb(208,118,35)" fg:x="1227" fg:w="4"/><text x="97.8634%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="97.8520%" y="517" width="0.0796%" height="15" fill="rgb(239,4,53)" fg:x="1230" fg:w="1"/><text x="98.1020%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="97.8520%" y="501" width="0.0796%" height="15" fill="rgb(213,130,21)" fg:x="1230" fg:w="1"/><text x="98.1020%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.8520%" y="485" width="0.0796%" height="15" fill="rgb(235,148,0)" fg:x="1230" fg:w="1"/><text x="98.1020%" y="495.50"></text></g><g><title>engine::session::Session::captured (249 samples, 19.81%)</title><rect x="78.3612%" y="709" width="19.8091%" height="15" fill="rgb(244,224,18)" fg:x="985" fg:w="249"/><text x="78.6112%" y="719.50">engine::session::Session::captu..</text></g><g><title>engine::session::logs::capture (248 samples, 19.73%)</title><rect x="78.4407%" y="693" width="19.7295%" height="15" fill="rgb(211,214,4)" fg:x="986" fg:w="248"/><text x="78.6907%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (244 samples, 19.41%)</title><rect x="78.7589%" y="677" width="19.4113%" height="15" fill="rgb(206,119,25)" fg:x="990" fg:w="244"/><text x="79.0089%" y="687.50">tracing_core::dispatcher::with..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (244 samples, 19.41%)</title><rect x="78.7589%" y="661" width="19.4113%" height="15" fill="rgb(243,93,47)" fg:x="990" fg:w="244"/><text x="79.0089%" y="671.50">&lt;engine::session::Session as k..</text></g><g><title>kernel::plugins::mw::apply_middleware (243 samples, 19.33%)</title><rect x="78.8385%" y="645" width="19.3317%" height="15" fill="rgb(224,194,6)" fg:x="991" fg:w="243"/><text x="79.0885%" y="655.50">kernel::plugins::mw::apply_mid..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (243 samples, 19.33%)</title><rect x="78.8385%" y="629" width="19.3317%" height="15" fill="rgb(243,229,6)" fg:x="991" fg:w="243"/><text x="79.0885%" y="639.50">kernel::plugins::mw::Middlewar..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (243 samples, 19.33%)</title><rect x="78.8385%" y="613" width="19.3317%" height="15" fill="rgb(207,23,50)" fg:x="991" fg:w="243"/><text x="79.0885%" y="623.50">&lt;engine::session::ExpandSurrou..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (230 samples, 18.30%)</title><rect x="79.8727%" y="597" width="18.2975%" height="15" fill="rgb(253,192,32)" fg:x="1004" fg:w="230"/><text x="80.1227%" y="607.50">kernel::plugins::mw::Middlewa..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (230 samples, 18.30%)</title><rect x="79.8727%" y="581" width="18.2975%" height="15" fill="rgb(213,21,6)" fg:x="1004" fg:w="230"/><text x="80.1227%" y="591.50">&lt;plugins_rune::RuneMiddleware..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (21 samples, 1.67%)</title><rect x="96.4996%" y="565" width="1.6706%" height="15" fill="rgb(243,151,13)" fg:x="1213" fg:w="21"/><text x="96.7496%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (20 samples, 1.59%)</title><rect x="96.5792%" y="549" width="1.5911%" height="15" fill="rgb(233,165,41)" fg:x="1214" fg:w="20"/><text x="96.8292%" y="559.50"></text></g><g><title>plugins_core::tools::worn_by (3 samples, 0.24%)</title><rect x="97.9316%" y="533" width="0.2387%" height="15" fill="rgb(246,176,45)" fg:x="1231" fg:w="3"/><text x="98.1816%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.0111%" y="517" width="0.1591%" height="15" fill="rgb(217,170,52)" fg:x="1232" fg:w="2"/><text x="98.2611%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.0111%" y="501" width="0.1591%" height="15" fill="rgb(214,203,54)" fg:x="1232" fg:w="2"/><text x="98.2611%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1702%" y="613" width="0.0796%" height="15" fill="rgb(248,215,49)" fg:x="1234" fg:w="1"/><text x="98.4202%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1702%" y="597" width="0.0796%" height="15" fill="rgb(208,46,10)" fg:x="1234" fg:w="1"/><text x="98.4202%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1702%" y="581" width="0.0796%" height="15" fill="rgb(254,5,31)" fg:x="1234" fg:w="1"/><text x="98.4202%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.1702%" y="565" width="0.0796%" height="15" fill="rgb(222,104,33)" fg:x="1234" fg:w="1"/><text x="98.4202%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.1702%" y="549" width="0.0796%" height="15" fill="rgb(248,49,16)" fg:x="1234" fg:w="1"/><text x="98.4202%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.1702%" y="533" width="0.0796%" height="15" fill="rgb(232,198,41)" fg:x="1234" fg:w="1"/><text x="98.4202%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.1702%" y="517" width="0.0796%" height="15" fill="rgb(214,125,3)" fg:x="1234" fg:w="1"/><text x="98.4202%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.1702%" y="501" width="0.0796%" height="15" fill="rgb(229,220,28)" fg:x="1234" fg:w="1"/><text x="98.4202%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.1702%" y="485" width="0.0796%" height="15" fill="rgb(222,64,37)" fg:x="1234" fg:w="1"/><text x="98.4202%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.1702%" y="469" width="0.0796%" height="15" fill="rgb(249,184,13)" fg:x="1234" fg:w="1"/><text x="98.4202%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.1702%" y="453" width="0.0796%" height="15" fill="rgb(252,176,6)" fg:x="1234" fg:w="1"/><text x="98.4202%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.1702%" y="437" width="0.0796%" height="15" fill="rgb(228,153,7)" fg:x="1234" fg:w="1"/><text x="98.4202%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1702%" y="421" width="0.0796%" height="15" fill="rgb(242,193,5)" fg:x="1234" fg:w="1"/><text x="98.4202%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.1702%" y="661" width="0.1591%" height="15" fill="rgb(232,140,9)" fg:x="1234" fg:w="2"/><text x="98.4202%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.1702%" y="645" width="0.1591%" height="15" fill="rgb(213,222,16)" fg:x="1234" fg:w="2"/><text x="98.4202%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.1702%" y="629" width="0.1591%" height="15" fill="rgb(222,75,50)" fg:x="1234" fg:w="2"/><text x="98.4202%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.2498%" y="613" width="0.0796%" height="15" fill="rgb(205,180,2)" fg:x="1235" fg:w="1"/><text x="98.4998%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.3294%" y="613" width="0.1591%" height="15" fill="rgb(216,34,7)" fg:x="1236" fg:w="2"/><text x="98.5794%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4089%" y="597" width="0.0796%" height="15" fill="rgb(253,16,32)" fg:x="1237" fg:w="1"/><text x="98.6589%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4089%" y="581" width="0.0796%" height="15" fill="rgb(208,97,28)" fg:x="1237" fg:w="1"/><text x="98.6589%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.4089%" y="565" width="0.0796%" height="15" fill="rgb(225,92,11)" fg:x="1237" fg:w="1"/><text x="98.6589%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.4089%" y="549" width="0.0796%" height="15" fill="rgb(243,38,12)" fg:x="1237" fg:w="1"/><text x="98.6589%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.4089%" y="533" width="0.0796%" height="15" fill="rgb(208,139,16)" fg:x="1237" fg:w="1"/><text x="98.6589%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.4089%" y="517" width="0.0796%" height="15" fill="rgb(227,24,9)" fg:x="1237" fg:w="1"/><text x="98.6589%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.4089%" y="501" width="0.0796%" height="15" fill="rgb(206,62,11)" fg:x="1237" fg:w="1"/><text x="98.6589%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.4089%" y="485" width="0.0796%" height="15" fill="rgb(228,134,27)" fg:x="1237" fg:w="1"/><text x="98.6589%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.4089%" y="469" width="0.0796%" height="15" fill="rgb(205,55,33)" fg:x="1237" fg:w="1"/><text x="98.6589%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.4089%" y="453" width="0.0796%" height="15" fill="rgb(243,75,43)" fg:x="1237" fg:w="1"/><text x="98.6589%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.4089%" y="437" width="0.0796%" height="15" fill="rgb(223,27,42)" fg:x="1237" fg:w="1"/><text x="98.6589%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.4089%" y="421" width="0.0796%" height="15" fill="rgb(232,189,33)" fg:x="1237" fg:w="1"/><text x="98.6589%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5680%" y="565" width="0.0796%" height="15" fill="rgb(210,9,39)" fg:x="1239" fg:w="1"/><text x="98.8180%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5680%" y="549" width="0.0796%" height="15" fill="rgb(242,85,26)" fg:x="1239" fg:w="1"/><text x="98.8180%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.6476%" y="565" width="0.0796%" height="15" fill="rgb(248,44,4)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.6476%" y="549" width="0.0796%" height="15" fill="rgb(250,96,46)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.6476%" y="533" width="0.0796%" height="15" fill="rgb(229,116,26)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6476%" y="517" width="0.0796%" height="15" fill="rgb(246,94,34)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6476%" y="501" width="0.0796%" height="15" fill="rgb(251,73,21)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="98.6476%" y="485" width="0.0796%" height="15" fill="rgb(254,121,25)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.6476%" y="469" width="0.0796%" height="15" fill="rgb(215,161,49)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="479.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.6476%" y="453" width="0.0796%" height="15" fill="rgb(221,43,13)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="98.6476%" y="437" width="0.0796%" height="15" fill="rgb(249,5,37)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="98.3294%" y="661" width="0.4773%" height="15" fill="rgb(226,25,44)" fg:x="1236" fg:w="6"/><text x="98.5794%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="98.3294%" y="645" width="0.4773%" height="15" fill="rgb(238,189,16)" fg:x="1236" fg:w="6"/><text x="98.5794%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="98.3294%" y="629" width="0.4773%" height="15" fill="rgb(251,186,8)" fg:x="1236" fg:w="6"/><text x="98.5794%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.4885%" y="613" width="0.3182%" height="15" fill="rgb(254,34,31)" fg:x="1238" fg:w="4"/><text x="98.7385%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="98.4885%" y="597" width="0.3182%" height="15" fill="rgb(225,215,27)" fg:x="1238" fg:w="4"/><text x="98.7385%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.5680%" y="581" width="0.2387%" height="15" fill="rgb(221,192,48)" fg:x="1239" fg:w="3"/><text x="98.8180%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7271%" y="565" width="0.0796%" height="15" fill="rgb(219,137,20)" fg:x="1241" fg:w="1"/><text x="98.9771%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7271%" y="549" width="0.0796%" height="15" fill="rgb(219,84,11)" fg:x="1241" fg:w="1"/><text x="98.9771%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.7271%" y="533" width="0.0796%" height="15" fill="rgb(224,10,23)" fg:x="1241" fg:w="1"/><text x="98.9771%" y="543.50"></text></g><g><title>engine::session::internal::Added::find_refs (9 samples, 0.72%)</title><rect x="98.1702%" y="693" width="0.7160%" height="15" fill="rgb(248,22,39)" fg:x="1234" fg:w="9"/><text x="98.4202%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.72%)</title><rect x="98.1702%" y="677" width="0.7160%" height="15" fill="rgb(212,154,20)" fg:x="1234" fg:w="9"/><text x="98.4202%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.8067%" y="661" width="0.0796%" height="15" fill="rgb(236,199,50)" fg:x="1242" fg:w="1"/><text x="99.0567%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8067%" y="645" width="0.0796%" height="15" fill="rgb(211,9,17)" fg:x="1242" fg:w="1"/><text x="99.0567%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.8067%" y="629" width="0.0796%" height="15" fill="rgb(243,216,36)" fg:x="1242" fg:w="1"/><text x="99.0567%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8862%" y="629" width="0.0796%" height="15" fill="rgb(250,2,10)" fg:x="1243" fg:w="1"/><text x="99.1362%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8862%" y="613" width="0.0796%" height="15" fill="rgb(226,50,48)" fg:x="1243" fg:w="1"/><text x="99.1362%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8862%" y="597" width="0.0796%" height="15" fill="rgb(243,81,16)" fg:x="1243" fg:w="1"/><text x="99.1362%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.8862%" y="581" width="0.0796%" height="15" fill="rgb(250,14,2)" fg:x="1243" fg:w="1"/><text x="99.1362%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.8862%" y="565" width="0.0796%" height="15" fill="rgb(233,135,29)" fg:x="1243" fg:w="1"/><text x="99.1362%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.8862%" y="549" width="0.0796%" height="15" fill="rgb(224,64,43)" fg:x="1243" fg:w="1"/><text x="99.1362%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.8862%" y="533" width="0.0796%" height="15" fill="rgb(238,84,13)" fg:x="1243" fg:w="1"/><text x="99.1362%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.8862%" y="517" width="0.0796%" height="15" fill="rgb(253,48,26)" fg:x="1243" fg:w="1"/><text x="99.1362%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.8862%" y="677" width="0.1591%" height="15" fill="rgb(205,223,31)" fg:x="1243" fg:w="2"/><text x="99.1362%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.8862%" y="661" width="0.1591%" height="15" fill="rgb(221,41,32)" fg:x="1243" fg:w="2"/><text x="99.1362%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.8862%" y="645" width="0.1591%" height="15" fill="rgb(213,158,31)" fg:x="1243" fg:w="2"/><text x="99.1362%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9658%" y="629" width="0.0796%" height="15" fill="rgb(245,126,43)" fg:x="1244" fg:w="1"/><text x="99.2158%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.95%)</title><rect x="98.1702%" y="709" width="0.9547%" height="15" fill="rgb(227,7,22)" fg:x="1234" fg:w="12"/><text x="98.4202%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="98.8862%" y="693" width="0.2387%" height="15" fill="rgb(252,90,44)" fg:x="1243" fg:w="3"/><text x="99.1362%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.0453%" y="677" width="0.0796%" height="15" fill="rgb(253,91,0)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0453%" y="661" width="0.0796%" height="15" fill="rgb(252,175,49)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0453%" y="645" width="0.0796%" height="15" fill="rgb(246,150,1)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.0453%" y="629" width="0.0796%" height="15" fill="rgb(241,192,25)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0453%" y="613" width="0.0796%" height="15" fill="rgb(239,187,11)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.0453%" y="597" width="0.0796%" height="15" fill="rgb(218,202,51)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.0453%" y="581" width="0.0796%" height="15" fill="rgb(225,176,8)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.0453%" y="565" width="0.0796%" height="15" fill="rgb(219,122,41)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="575.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.0453%" y="549" width="0.0796%" height="15" fill="rgb(248,140,20)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.0453%" y="533" width="0.0796%" height="15" fill="rgb(245,41,37)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.0453%" y="517" width="0.0796%" height="15" fill="rgb(235,82,39)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.0453%" y="501" width="0.0796%" height="15" fill="rgb(230,108,42)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="511.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.0453%" y="485" width="0.0796%" height="15" fill="rgb(215,150,50)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="99.0453%" y="469" width="0.0796%" height="15" fill="rgb(233,212,5)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0453%" y="453" width="0.0796%" height="15" fill="rgb(245,80,22)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="463.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="99.1249%" y="693" width="0.2387%" height="15" fill="rgb(238,129,16)" fg:x="1246" fg:w="3"/><text x="99.3749%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.1249%" y="677" width="0.2387%" height="15" fill="rgb(240,19,0)" fg:x="1246" fg:w="3"/><text x="99.3749%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.1249%" y="661" width="0.2387%" height="15" fill="rgb(232,42,35)" fg:x="1246" fg:w="3"/><text x="99.3749%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.2045%" y="645" width="0.1591%" height="15" fill="rgb(223,130,24)" fg:x="1247" fg:w="2"/><text x="99.4545%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2840%" y="629" width="0.0796%" height="15" fill="rgb(237,16,22)" fg:x="1248" fg:w="1"/><text x="99.5340%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2840%" y="613" width="0.0796%" height="15" fill="rgb(248,192,20)" fg:x="1248" fg:w="1"/><text x="99.5340%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.3636%" y="693" width="0.0796%" height="15" fill="rgb(233,167,2)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="703.50"></text></g><g><title>engine::users::model::username_to_key (5 samples, 0.40%)</title><rect x="99.1249%" y="709" width="0.3978%" height="15" fill="rgb(252,71,44)" fg:x="1246" fg:w="5"/><text x="99.3749%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.4431%" y="693" width="0.0796%" height="15" fill="rgb(238,37,47)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.4431%" y="677" width="0.0796%" height="15" fill="rgb(214,202,54)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.6022%" y="661" width="0.0796%" height="15" fill="rgb(254,165,40)" fg:x="1252" fg:w="1"/><text x="99.8522%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6022%" y="645" width="0.0796%" height="15" fill="rgb(246,173,38)" fg:x="1252" fg:w="1"/><text x="99.8522%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6022%" y="629" width="0.0796%" height="15" fill="rgb(215,3,27)" fg:x="1252" fg:w="1"/><text x="99.8522%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6022%" y="613" width="0.0796%" height="15" fill="rgb(239,169,51)" fg:x="1252" fg:w="1"/><text x="99.8522%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6022%" y="597" width="0.0796%" height="15" fill="rgb(212,5,25)" fg:x="1252" fg:w="1"/><text x="99.8522%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6818%" y="565" width="0.0796%" height="15" fill="rgb(243,45,17)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="575.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.6818%" y="661" width="0.1591%" height="15" fill="rgb(242,97,9)" fg:x="1253" fg:w="2"/><text x="99.9318%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.6818%" y="645" width="0.1591%" height="15" fill="rgb(228,71,31)" fg:x="1253" fg:w="2"/><text x="99.9318%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6818%" y="629" width="0.1591%" height="15" fill="rgb(252,184,16)" fg:x="1253" fg:w="2"/><text x="99.9318%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.6818%" y="613" width="0.1591%" height="15" fill="rgb(236,169,46)" fg:x="1253" fg:w="2"/><text x="99.9318%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6818%" y="597" width="0.1591%" height="15" fill="rgb(207,17,47)" fg:x="1253" fg:w="2"/><text x="99.9318%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6818%" y="581" width="0.1591%" height="15" fill="rgb(206,201,28)" fg:x="1253" fg:w="2"/><text x="99.9318%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.7613%" y="565" width="0.0796%" height="15" fill="rgb(224,184,23)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.7613%" y="549" width="0.0796%" height="15" fill="rgb(208,139,48)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.7613%" y="533" width="0.0796%" height="15" fill="rgb(208,130,10)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.7613%" y="517" width="0.0796%" height="15" fill="rgb(211,213,45)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="527.50"></text></g><g><title>all (1,257 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(235,100,30)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-6657d8a0 (1,257 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(206,144,31)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1087.50">simple-6657d8a0</text></g><g><title>_start (1,257 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(224,200,26)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,257 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(247,104,53)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,257 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(220,14,17)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,257 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(230,140,40)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,257 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(229,2,41)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,257 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(232,89,16)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,257 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(247,59,52)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,257 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(226,110,21)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,257 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(224,176,43)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,257 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(221,73,6)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,257 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(232,78,19)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,257 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(233,112,48)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,257 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(243,131,47)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,257 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(226,51,1)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,257 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(247,58,7)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,257 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(209,7,32)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,257 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(209,39,41)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (470 samples, 37.39%)</title><rect x="62.6094%" y="789" width="37.3906%" height="15" fill="rgb(226,182,46)" fg:x="787" fg:w="470"/><text x="62.8594%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::R..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (470 samples, 37.39%)</title><rect x="62.6094%" y="773" width="37.3906%" height="15" fill="rgb(230,219,10)" fg:x="787" fg:w="470"/><text x="62.8594%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (470 samples, 37.39%)</title><rect x="62.6094%" y="757" width="37.3906%" height="15" fill="rgb(227,175,30)" fg:x="787" fg:w="470"/><text x="62.8594%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (272 samples, 21.64%)</title><rect x="78.3612%" y="741" width="21.6388%" height="15" fill="rgb(217,2,50)" fg:x="985" fg:w="272"/><text x="78.6112%" y="751.50">engine::session::Session::evaluate..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (272 samples, 21.64%)</title><rect x="78.3612%" y="725" width="21.6388%" height="15" fill="rgb(229,160,0)" fg:x="985" fg:w="272"/><text x="78.6112%" y="735.50">engine::session::Session::evaluate..</text></g><g><title>kernel::model::EntityPtrResolver::world (6 samples, 0.48%)</title><rect x="99.5227%" y="709" width="0.4773%" height="15" fill="rgb(207,78,37)" fg:x="1251" fg:w="6"/><text x="99.7727%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="99.5227%" y="693" width="0.4773%" height="15" fill="rgb(225,57,0)" fg:x="1251" fg:w="6"/><text x="99.7727%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="99.5227%" y="677" width="0.4773%" height="15" fill="rgb(232,154,2)" fg:x="1251" fg:w="6"/><text x="99.7727%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.8409%" y="661" width="0.1591%" height="15" fill="rgb(241,212,25)" fg:x="1255" fg:w="2"/><text x="100.0909%" y="671.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.8409%" y="645" width="0.1591%" height="15" fill="rgb(226,69,20)" fg:x="1255" fg:w="2"/><text x="100.0909%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8409%" y="629" width="0.1591%" height="15" fill="rgb(247,184,54)" fg:x="1255" fg:w="2"/><text x="100.0909%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8409%" y="613" width="0.1591%" height="15" fill="rgb(210,145,0)" fg:x="1255" fg:w="2"/><text x="100.0909%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8409%" y="597" width="0.1591%" height="15" fill="rgb(253,82,12)" fg:x="1255" fg:w="2"/><text x="100.0909%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8409%" y="581" width="0.1591%" height="15" fill="rgb(245,42,11)" fg:x="1255" fg:w="2"/><text x="100.0909%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8409%" y="565" width="0.1591%" height="15" fill="rgb(219,147,32)" fg:x="1255" fg:w="2"/><text x="100.0909%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9204%" y="549" width="0.0796%" height="15" fill="rgb(246,12,7)" fg:x="1256" fg:w="1"/><text x="100.1704%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.9204%" y="533" width="0.0796%" height="15" fill="rgb(243,50,9)" fg:x="1256" fg:w="1"/><text x="100.1704%" y="543.50"></text></g></svg></svg>